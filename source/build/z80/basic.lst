    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
   87 00:0000 -  -  -  -  #define KWD_MOVE                            	$00ce ; move
   88 00:0000 -  -  -  -  #define KWD_DRAW                            	$00cf ; draw
   89 00:0000 -  -  -  -  #define KWD_PLOT                            	$00d0 ; plot
   90 00:0000 -  -  -  -  #define KWD_MODE                            	$00d1 ; mode
   91 00:0000 -  -  -  -  #define KWD_COLOUR                          	$00d2 ; colour
   92 00:0000 -  -  -  -  #define KWD_GCOL                            	$00d3 ; gcol
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DATA = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DATA
   35 00:0000             	ld a,ERRID_DATA
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIM = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIM
   42 00:0000             	ld a,ERRID_DIM
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DISABLED = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DISABLED
   49 00:0000             	ld a,ERRID_DISABLED
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_DIVZERO = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_DIVZERO
   56 00:0000             	ld a,ERRID_DIVZERO
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_GOSUB = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_GOSUB
   63 00:0000             	ld a,ERRID_GOSUB
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_INDEX = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_INDEX
   70 00:0000             	ld a,ERRID_INDEX
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_LINENO = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_LINENO
   77 00:0000             	ld a,ERRID_LINENO
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_MEMORY = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_MEMORY
   84 00:0000             	ld a,ERRID_MEMORY
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NEXT = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NEXT
   91 00:0000             	ld a,ERRID_NEXT
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOCOMMA = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   98 00:0000             	ld a,ERRID_NOCOMMA
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NODOLLAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NODOLLAR
  105 00:0000             	ld a,ERRID_NODOLLAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOLBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  112 00:0000             	ld a,ERRID_NOLBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOPROC = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOPROC
  119 00:0000             	ld a,ERRID_NOPROC
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NORBRACKET = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  126 00:0000             	ld a,ERRID_NORBRACKET
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_NOTREF = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_NOTREF
  133 00:0000             	ld a,ERRID_NOTREF
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PARAM = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PARAM
  140 00:0000             	ld a,ERRID_PARAM
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_PROC = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_PROC
  147 00:0000             	ld a,ERRID_PROC
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_REPEAT = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_REPEAT
  154 00:0000             	ld a,ERRID_REPEAT
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STACK = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STACK
  161 00:0000             	ld a,ERRID_STACK
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_STOP = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_STOP
  168 00:0000             	ld a,ERRID_STOP
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_SYNTAX = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_SYNTAX
  175 00:0000             	ld a,ERRID_SYNTAX
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_TODO = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_TODO
  182 00:0000             	ld a,ERRID_TODO
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
  186 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 26
  187 00:0000 -  -  -  -  
  188 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  189 00:0000             	ld a,ERRID_UNKNOWNVAR
  190 00:0000             	jp ErrorHandler
  191 00:0000             #endmacro
  192 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 21 40 40 -  		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:4003 31 FF BF -  		ld 		sp,$BFFF
   41 00:4006 -  -  -  -  #endif
   42 00:4006 -  -  -  -  
   43 00:4006 -  -  -  -  #endif
   44 00:4006 CD B0 52 -  		call 	SYSInitialise
   45 00:4009 11 00 58 -  		ld 		de,TestInstance
   46 00:400C 21 B3 68 -  		ld 		hl,EndTestInstance
   47 00:400F CD 7C 4A -  		call 	SetCurrentInstance
   48 00:4012 -  -  -  -  
   49 00:4012 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:4014 32 60 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:4017 -  -  -  -  		
   52 00:4017 C3 56 43 -  		jp 		Command_RUN
   53 00:401A -  -  -  -  
   54 00:401A -  -  -  -  WarmStart:		
   55 00:401A 3E 2A -  -  		ld 		a,'*'
   56 00:401C CD B8 52 -  		call 	SYSPrintChar
   57 00:401F CD B6 52 -  		call 	SYSTerminate
   58 00:4022 -  -  -  -  
   59 00:4022 -  -  -  -  Unimplemented:
   60 00:4022 3E 06 C3 A3 
              44 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:4027 -  -  -  -  Int32DivZeroHandler:
   62 00:4027 3E 07 C3 A3 
              44 -  -  -  		ERR_DIVZERO
   63 00:402C -  -  -  -  
   64 00:402C -  -  -  -  ; ***************************************************************************************
   65 00:402C -  -  -  -  ;
   66 00:402C -  -  -  -  ;									Changes and Updates
   67 00:402C -  -  -  -  ;
   68 00:402C -  -  -  -  ; ***************************************************************************************
   69 00:402C -  -  -  -  ;
   70 00:402C -  -  -  -  ;		Date			Notes
   71 00:402C -  -  -  -  ;		==== 			=====
   72 00:402C -  -  -  -  ;
   73 00:402C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:402C -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:402C -  -  -  -  ; ***************************************************************************************
    2 00:402C -  -  -  -  ; ***************************************************************************************
    3 00:402C -  -  -  -  ;
    4 00:402C -  -  -  -  ;		Name : 		01data.asm
    5 00:402C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:402C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:402C -  -  -  -  ;		Reviewed :	No
    8 00:402C -  -  -  -  ;		Purpose :	Data space
    9 00:402C -  -  -  -  ;
   10 00:402C -  -  -  -  ; ***************************************************************************************
   11 00:402C -  -  -  -  ; ***************************************************************************************
   12 00:402C -  -  -  -  
   13 00:402C -  -  -  -  ; ***************************************************************************************
   14 00:402C -  -  -  -  ;
   15 00:402C -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:402C -  -  -  -  ;				LD (xxx),rr etc.
   17 00:402C -  -  -  -  ;
   18 00:402C -  -  -  -  ; ***************************************************************************************
   19 00:402C -  -  -  -  
   20 00:402C -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:402C -  -  -  -  
   22 00:402C -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:402C -  -  -  -  											; must be power of 2. 
   24 00:402C -  -  -  -  
   25 00:402C -  -  -  -  ; ***************************************************************************************
   26 00:402C -  -  -  -  ;
   27 00:402C -  -  -  -  ;								Defines the current instance
   28 00:402C -  -  -  -  ;
   29 00:402C -  -  -  -  ; ***************************************************************************************
   30 00:402C -  -  -  -  
   31 00:402C -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:402C 00 00 00 00 		.dw 	0,0
   33 00:4030 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:4030 00 00 00 00 		.dw 	0,0		
   35 00:4034 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4034 00 00 00 00 		.dw 	0,0 							
   37 00:4038 -  -  -  -  
   38 00:4038 -  -  -  -  ; ***************************************************************************************
   39 00:4038 -  -  -  -  ;
   40 00:4038 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4038 -  -  -  -  ;
   42 00:4038 -  -  -  -  ; ***************************************************************************************
   43 00:4038 -  -  -  -  
   44 00:4038 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4038 00 00 00 00 		.dw 	0,0
   46 00:403C -  -  -  -  
   47 00:403C -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:403C 00 00 00 00 		.dw 	0,0		
   49 00:4040 -  -  -  -  
   50 00:4040 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:4040 00 00 00 00 		.dw 	0,0
   52 00:4044 -  -  -  -  
   53 00:4044 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4044 00 00 00 00 		.dw 	0,0
   55 00:4048 -  -  -  -  
   56 00:4048 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4048 00 00 00 00 		.dw 	0,0		
   58 00:404C -  -  -  -  
   59 00:404C -  -  -  -  ;
   60 00:404C -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:404C -  -  -  -  ;
   62 00:404C -  -  -  -  
   63 00:404C -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:404C 00 00 00 00 		.dw 	0,0
   65 00:4050 -  -  -  -  		
   66 00:4050 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:4050 00 00 00 00 		.dw 	0,0
   68 00:4054 -  -  -  -  
   69 00:4054 -  -  -  -  ; ***************************************************************************************
   70 00:4054 -  -  -  -  ;
   71 00:4054 -  -  -  -  ;										Run variables
   72 00:4054 -  -  -  -  ;
   73 00:4054 -  -  -  -  ; ***************************************************************************************
   74 00:4054 -  -  -  -  
   75 00:4054 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:4054 00 00 00 00 		.dw 	0,0
   77 00:4058 -  -  -  -  
   78 00:4058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:4058 00 00 00 00 		.dw 	0,0
   80 00:405C -  -  -  -  		
   81 00:405C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:405C 00 00 00 00 		.dw 	0,0
   83 00:4060 -  -  -  -  
   84 00:4060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:4060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4066 -  -  -  -  
   87 00:4066 -  -  -  -  AConvert: 									; used for address conversions.
   88 00:4066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:406C -  -  -  -  		
   90 00:406C -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:406C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:407C -  -  -  -  
   93 00:407C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:407C 00 00 -  -  		.dw 	0
   95 00:407E -  -  -  -  
   96 00:407E -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:407E 00 00 -  -  		.dw 	0 
   98 00:4080 -  -  -  -  
   99 00:4080 -  -  -  -  ReadDataPointer: 							; pointer for READ/DATA.
  100 00:4080 00 00 00 00 		.dw 	0,0
  101 00:4084 -  -  -  -  
  102 00:4084 -  -  -  -  DataScanRequired: 							; flag set when scan forward for DATA required.
  103 00:4084 00 00 -  -  		.dw 	0		
  104 00:4086 -  -  -  -  
  105 00:4086 -  -  -  -  ; ***************************************************************************************
  106 00:4086 -  -  -  -  ;
  107 00:4086 -  -  -  -  ;									Variable Information
  108 00:4086 -  -  -  -  ;
  109 00:4086 -  -  -  -  ; ***************************************************************************************
  110 00:4086 -  -  -  -  
  111 00:4086 -  -  -  -  VarNameStart: 								; first byte of name
  112 00:4086 00 00 00 00 		.dw 	0,0
  113 00:408A -  -  -  -  VarHash: 									; name hash value
  114 00:408A 00 00 -  -  		.dw 	0		
  115 00:408C -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  116 00:408C 00 00 00 00 		.dw 	0,0
  117 00:4090 -  -  -  -  		
  118 00:4090 -  -  -  -  ; ***************************************************************************************
  119 00:4090 -  -  -  -  ;
  120 00:4090 -  -  -  -  ;										  Buffers
  121 00:4090 -  -  -  -  ;
  122 00:4090 -  -  -  -  ; ***************************************************************************************
  123 00:4090 -  -  -  -  
  124 00:4090 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  125 00:4090 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  126 00:40A0 -  -  -  -  
  127 00:40A0 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  128 00:40A0 00 00 -  -  		.dw 	0
  129 00:40A2 -  -  -  -  
  130 00:40A2 -  -  -  -  ConvertBuffer: 								; general usage for int/hex conversions.
  131 00:40A2 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  132 00:40B2 -  -  -  -  
  133 00:40B2 -  -  -  -  ; ***************************************************************************************
  134 00:40B2 -  -  -  -  ;
  135 00:40B2 -  -  -  -  ;								Tokenising/Detokenising
  136 00:40B2 -  -  -  -  ;
  137 00:40B2 -  -  -  -  ; ***************************************************************************************
  138 00:40B2 -  -  -  -  
  139 00:40B2 -  -  -  -  TokenBuffer: 								; buffer to use
  140 00:40B2 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	256
  141 00:41B2 -  -  -  -  
  142 00:41B2 -  -  -  -  TWPointer;
  143 00:41B2 00 00 00 00 		.dw 	0,0 						; next free slot.
  144 00:41B6 -  -  -  -  
  145 00:41B6 -  -  -  -  ; ***************************************************************************************
  146 00:41B6 -  -  -  -  ;
  147 00:41B6 -  -  -  -  ;									Changes and Updates
  148 00:41B6 -  -  -  -  ;
  149 00:41B6 -  -  -  -  ; ***************************************************************************************
  150 00:41B6 -  -  -  -  ;
  151 00:41B6 -  -  -  -  ;		Date			Notes
  152 00:41B6 -  -  -  -  ;		==== 			=====
  153 00:41B6 -  -  -  -  ;
  154 00:41B6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:41B6 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:41B6 -  -  -  -  ; ***************************************************************************************
    2 00:41B6 -  -  -  -  ; ***************************************************************************************
    3 00:41B6 -  -  -  -  ;
    4 00:41B6 -  -  -  -  ;		Name : 		assert.asm
    5 00:41B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41B6 -  -  -  -  ;		Reviewed :	No
    8 00:41B6 -  -  -  -  ;		Purpose :	Assert command
    9 00:41B6 -  -  -  -  ;
   10 00:41B6 -  -  -  -  ; ***************************************************************************************
   11 00:41B6 -  -  -  -  ; ***************************************************************************************
   12 00:41B6 -  -  -  -  
   13 00:41B6 -  -  -  -  ; ***************************************************************************************
   14 00:41B6 -  -  -  -  ;
   15 00:41B6 -  -  -  -  ;									ASSERT command
   16 00:41B6 -  -  -  -  ;
   17 00:41B6 -  -  -  -  ; ***************************************************************************************
   18 00:41B6 -  -  -  -  
   19 00:41B6 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:41B6 CD 88 46 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:41B9 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:41BF C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:41C0 3E 01 C3 A3 
              44 -  -  -  		ERR_ASSERT
   24 00:41C5 -  -  -  -  
   25 00:41C5 -  -  -  -  ; ***************************************************************************************
   26 00:41C5 -  -  -  -  ;
   27 00:41C5 -  -  -  -  ;									Changes and Updates
   28 00:41C5 -  -  -  -  ;
   29 00:41C5 -  -  -  -  ; ***************************************************************************************
   30 00:41C5 -  -  -  -  ;
   31 00:41C5 -  -  -  -  ;		Date			Notes
   32 00:41C5 -  -  -  -  ;		==== 			=====
   33 00:41C5 -  -  -  -  ;
   34 00:41C5 -  -  -  -  ; ***************************************************************************************
   35 00:41C5 -  -  -  -  		
Listing for file "_build.asm"
   15 00:41C5 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:41C5 -  -  -  -  ; ***************************************************************************************
    2 00:41C5 -  -  -  -  ; ***************************************************************************************
    3 00:41C5 -  -  -  -  ;
    4 00:41C5 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:41C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41C5 -  -  -  -  ;		Reviewed :	No
    8 00:41C5 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:41C5 -  -  -  -  ;
   10 00:41C5 -  -  -  -  ; ***************************************************************************************
   11 00:41C5 -  -  -  -  ; ***************************************************************************************
   12 00:41C5 -  -  -  -  
   13 00:41C5 -  -  -  -  BadCmd_Def: 		;; [def]
   14 00:41C5 -  -  -  -  BadCmd_Data: 		;; [data]
   15 00:41C5 -  -  -  -  BadCmd_Then: 		;; [then]
   16 00:41C5 -  -  -  -  BadCmd_RBracket: 	;; [)]
   17 00:41C5 -  -  -  -  BadCmd_LSBracket: 	;; [[]
   18 00:41C5 -  -  -  -  BadCmd_RSBracket: 	;; []]
   19 00:41C5 -  -  -  -  BadCmd_Comma: 		;; [,]
   20 00:41C5 -  -  -  -  BadCmd_Comma: 		;; [~]
   21 00:41C5 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   22 00:41C5 -  -  -  -  BadCmd_To: 			;; [to]
   23 00:41C5 -  -  -  -  BadCmd_Step: 		;; [step]
   24 00:41C5 C3 00 45 -  		jp 		SyntaxError
   25 00:41C8 -  -  -  -  
   26 00:41C8 -  -  -  -  ; ***************************************************************************************
   27 00:41C8 -  -  -  -  ;
   28 00:41C8 -  -  -  -  ;									Changes and Updates
   29 00:41C8 -  -  -  -  ;
   30 00:41C8 -  -  -  -  ; ***************************************************************************************
   31 00:41C8 -  -  -  -  ;
   32 00:41C8 -  -  -  -  ;		Date			Notes
   33 00:41C8 -  -  -  -  ;		==== 			=====
   34 00:41C8 -  -  -  -  ;
   35 00:41C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:41C8 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:41C8 -  -  -  -  ; ***************************************************************************************
    2 00:41C8 -  -  -  -  ; ***************************************************************************************
    3 00:41C8 -  -  -  -  ;
    4 00:41C8 -  -  -  -  ;		Name : 		colon.asm
    5 00:41C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41C8 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:41C8 -  -  -  -  ;		Reviewed :	No
    8 00:41C8 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:41C8 -  -  -  -  ;
   10 00:41C8 -  -  -  -  ; ***************************************************************************************
   11 00:41C8 -  -  -  -  ; ***************************************************************************************
   12 00:41C8 -  -  -  -  
   13 00:41C8 -  -  -  -  ; ***************************************************************************************
   14 00:41C8 -  -  -  -  ;
   15 00:41C8 -  -  -  -  ;								Colon command, this is ignored.
   16 00:41C8 -  -  -  -  ;
   17 00:41C8 -  -  -  -  ; ***************************************************************************************
   18 00:41C8 -  -  -  -  
   19 00:41C8 -  -  -  -  Command_Colon: 	;; [:]
   20 00:41C8 C9 -  -  -  		ret
   21 00:41C9 -  -  -  -  
   22 00:41C9 -  -  -  -  ; ***************************************************************************************
   23 00:41C9 -  -  -  -  ;
   24 00:41C9 -  -  -  -  ;									Changes and Updates
   25 00:41C9 -  -  -  -  ;
   26 00:41C9 -  -  -  -  ; ***************************************************************************************
   27 00:41C9 -  -  -  -  ;
   28 00:41C9 -  -  -  -  ;		Date			Notes
   29 00:41C9 -  -  -  -  ;		==== 			=====
   30 00:41C9 -  -  -  -  ;
   31 00:41C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:41C9 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:41C9 -  -  -  -  ; ***************************************************************************************
    2 00:41C9 -  -  -  -  ; ***************************************************************************************
    3 00:41C9 -  -  -  -  ;
    4 00:41C9 -  -  -  -  ;		Name : 		dim.asm
    5 00:41C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41C9 -  -  -  -  ;		Date : 		4th June 2022
    7 00:41C9 -  -  -  -  ;		Reviewed :	No
    8 00:41C9 -  -  -  -  ;		Purpose :	Dim command
    9 00:41C9 -  -  -  -  ;
   10 00:41C9 -  -  -  -  ; ***************************************************************************************
   11 00:41C9 -  -  -  -  ; ***************************************************************************************
   12 00:41C9 -  -  -  -  
   13 00:41C9 -  -  -  -  ; ***************************************************************************************
   14 00:41C9 -  -  -  -  ;
   15 00:41C9 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:41C9 -  -  -  -  ;	
   17 00:41C9 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:41C9 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:41C9 -  -  -  -  ;								(can be comma chained)
   20 00:41C9 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:41C9 -  -  -  -  ;
   22 00:41C9 -  -  -  -  ; ***************************************************************************************
   23 00:41C9 -  -  -  -  
   24 00:41C9 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:41C9 -  -  -  -  		;
   26 00:41C9 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:41C9 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:41C9 -  -  -  -  		;
   29 00:41C9 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:41CB D1 -  -  -  		pop 	de
   31 00:41CC -  -  -  -  		;
   32 00:41CC DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:41CF FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:41D1 D2 00 45 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:41D4 -  -  -  -  _DISkip:
   36 00:41D4 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:41D6 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:41D9 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:41DB 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:41DD -  -  -  -  		;
   41 00:41DD DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:41E0 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:41E2 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:41E3 CC 3A 42 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:41E6 F1 -  -  -  		pop 	af
   46 00:41E7 C4 F9 41 -  		call 	nz,DimensionAllocate
   47 00:41EA -  -  -  -  		;
   48 00:41EA DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:41ED FE A6 -  -  		cp 		KWD_COMMA
   50 00:41EF C0 -  -  -  		ret 	nz
   51 00:41F0 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:41F2 18 D5 -  -  		jr 		Command_DIM
   53 00:41F4 -  -  -  -  
   54 00:41F4 -  -  -  -  _CDError:
   55 00:41F4 3E 05 C3 A3 
              44 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:41F9 -  -  -  -  
   57 00:41F9 -  -  -  -  ; ***************************************************************************************
   58 00:41F9 -  -  -  -  ;
   59 00:41F9 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:41F9 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:41F9 -  -  -  -  ;
   62 00:41F9 -  -  -  -  ; ***************************************************************************************
   63 00:41F9 -  -  -  -  
   64 00:41F9 -  -  -  -  DimensionAllocate:
   65 00:41F9 D5 -  -  -  		push 	de 							; save start on stack
   66 00:41FA DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:41FC 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:41FE 32 7C 40 -  		ld 		(AllowAutoCreate),a
   69 00:4201 CD FC 4C -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:4204 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:4206 28 EC -  -  		jr 		z,_CDError
   72 00:4208 CB 41 -  -  		bit 	CIsString,c
   73 00:420A 20 E8 -  -  		jr 		nz,_CDError
   74 00:420C DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:420E E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:420F 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:4211 CD 98 44 -  		call 	CheckNextA 					; check for [
   78 00:4214 CD 88 46 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:4217 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:4219 CD 98 44 -  		call 	CheckNextA 					; check for ]
   81 00:421C 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:421D 7C -  -  -  		ld 		a,h
   83 00:421E B5 -  -  -  		or 		l
   84 00:421F 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:4221 D9 -  -  -  		exx
   86 00:4222 23 -  -  -  		inc 	hl
   87 00:4223 D9 -  -  -  		exx
   88 00:4224 -  -  -  -  _DANoCarry:
   89 00:4224 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:4225 7C -  -  -  		ld 		a,h
   91 00:4226 B5 -  -  -  		or 		l
   92 00:4227 D9 -  -  -  		exx
   93 00:4228 20 CA -  -  		jr 		nz,_CDError
   94 00:422A CD 1A 4A -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:422D EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:422E E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:422F 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:4235 AF -  -  -  		xor 	a 							; autocreate off
   99 00:4236 32 7C 40 -  		ld 		(AllowAutoCreate),a
  100 00:4239 C9 -  -  -  		ret
  101 00:423A -  -  -  -  
  102 00:423A -  -  -  -  ; ***************************************************************************************
  103 00:423A -  -  -  -  ;
  104 00:423A -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:423A -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:423A -  -  -  -  ;
  107 00:423A -  -  -  -  ; ***************************************************************************************
  108 00:423A -  -  -  -  
  109 00:423A -  -  -  -  DimensionArray:
  110 00:423A D5 -  -  -  		push 	de 							; save start on stack.
  111 00:423B -  -  -  -  		;
  112 00:423B CD 88 46 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:423E 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:423F E6 FC -  -  		and 	$FC
  115 00:4241 D9 -  -  -  		exx
  116 00:4242 B4 -  -  -  		or 		h
  117 00:4243 B5 -  -  -  		or 		l
  118 00:4244 D9 -  -  -  		exx
  119 00:4245 20 AD -  -  		jr 		nz,_CDError
  120 00:4247 -  -  -  -  		;
  121 00:4247 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:4249 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:424A -  -  -  -  		;
  124 00:424A CD 7D 4D -  		call 	VariableInformation 		; get information about this array
  125 00:424D CD B3 4D -  		call 	VariableSearchList 			; look to see if already present.
  126 00:4250 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:4252 -  -  -  -  		;
  128 00:4252 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4253 E5 -  -  -  		push 	hl
  130 00:4254 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:4255 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:4256 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:4257 29 -  -  -  		add 	hl,hl
  134 00:4258 CD BD 4C -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:425B -  -  -  -  		;
  136 00:425B D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:425C 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:425F 09 -  -  -  		add 	hl,bc
  139 00:4260 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:4266 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:4268 C9 -  -  -  		ret		
  142 00:4269 -  -  -  -  
  143 00:4269 -  -  -  -  
  144 00:4269 -  -  -  -  ; ***************************************************************************************
  145 00:4269 -  -  -  -  ;
  146 00:4269 -  -  -  -  ;									Changes and Updates
  147 00:4269 -  -  -  -  ;
  148 00:4269 -  -  -  -  ; ***************************************************************************************
  149 00:4269 -  -  -  -  ;
  150 00:4269 -  -  -  -  ;		Date			Notes
  151 00:4269 -  -  -  -  ;		==== 			=====
  152 00:4269 -  -  -  -  ;
  153 00:4269 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:4269 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:4269 -  -  -  -  ; ***************************************************************************************
    2 00:4269 -  -  -  -  ; ***************************************************************************************
    3 00:4269 -  -  -  -  ;
    4 00:4269 -  -  -  -  ;		Name : 		end.asm
    5 00:4269 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4269 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4269 -  -  -  -  ;		Reviewed :	No
    8 00:4269 -  -  -  -  ;		Purpose :	End command
    9 00:4269 -  -  -  -  ;
   10 00:4269 -  -  -  -  ; ***************************************************************************************
   11 00:4269 -  -  -  -  ; ***************************************************************************************
   12 00:4269 -  -  -  -  
   13 00:4269 -  -  -  -  ; ***************************************************************************************
   14 00:4269 -  -  -  -  ;
   15 00:4269 -  -  -  -  ;										END command
   16 00:4269 -  -  -  -  ;
   17 00:4269 -  -  -  -  ; ***************************************************************************************
   18 00:4269 -  -  -  -  
   19 00:4269 -  -  -  -  Command_END: 	;; [end]
   20 00:4269 3E 00 C3 A3 
              44 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:426E -  -  -  -  
   22 00:426E -  -  -  -  ; ***************************************************************************************
   23 00:426E -  -  -  -  ;
   24 00:426E -  -  -  -  ;									Changes and Updates
   25 00:426E -  -  -  -  ;
   26 00:426E -  -  -  -  ; ***************************************************************************************
   27 00:426E -  -  -  -  ;
   28 00:426E -  -  -  -  ;		Date			Notes
   29 00:426E -  -  -  -  ;		==== 			=====
   30 00:426E -  -  -  -  ;
   31 00:426E -  -  -  -  ; ***************************************************************************************
   32 00:426E -  -  -  -  		
Listing for file "_build.asm"
   19 00:426E -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:426E -  -  -  -  ; ***************************************************************************************
    2 00:426E -  -  -  -  ; ***************************************************************************************
    3 00:426E -  -  -  -  ;
    4 00:426E -  -  -  -  ;		Name : 		endofline.asm
    5 00:426E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:426E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:426E -  -  -  -  ;		Reviewed :	None
    8 00:426E -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:426E -  -  -  -  ;
   10 00:426E -  -  -  -  ; ***************************************************************************************
   11 00:426E -  -  -  -  ; ***************************************************************************************
   12 00:426E -  -  -  -  
   13 00:426E -  -  -  -  ; ***************************************************************************************
   14 00:426E -  -  -  -  ;
   15 00:426E -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:426E -  -  -  -  ;
   17 00:426E -  -  -  -  ; ***************************************************************************************
   18 00:426E -  -  -  -  
   19 00:426E -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:426E DD 2A 58 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4272 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:4275 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:4278 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:427A -  -  -  -  		;
   25 00:427A ED 7B 5C 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:427E C3 65 43 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:4281 -  -  -  -  
   28 00:4281 -  -  -  -  ; ***************************************************************************************
   29 00:4281 -  -  -  -  ;
   30 00:4281 -  -  -  -  ;									Changes and Updates
   31 00:4281 -  -  -  -  ;
   32 00:4281 -  -  -  -  ; ***************************************************************************************
   33 00:4281 -  -  -  -  ;
   34 00:4281 -  -  -  -  ;		Date			Notes
   35 00:4281 -  -  -  -  ;		==== 			=====
   36 00:4281 -  -  -  -  ;
   37 00:4281 -  -  -  -  ; ***************************************************************************************
   38 00:4281 -  -  -  -  		
Listing for file "_build.asm"
   20 00:4281 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:4281 -  -  -  -  ; ***************************************************************************************
    2 00:4281 -  -  -  -  ; ***************************************************************************************
    3 00:4281 -  -  -  -  ;
    4 00:4281 -  -  -  -  ;		Name : 		let.asm
    5 00:4281 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4281 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4281 -  -  -  -  ;		Reviewed :	No
    8 00:4281 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:4281 -  -  -  -  ;
   10 00:4281 -  -  -  -  ; ***************************************************************************************
   11 00:4281 -  -  -  -  ; ***************************************************************************************
   12 00:4281 -  -  -  -  
   13 00:4281 -  -  -  -  ; ***************************************************************************************
   14 00:4281 -  -  -  -  ;
   15 00:4281 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:4281 -  -  -  -  ;
   17 00:4281 -  -  -  -  ; ***************************************************************************************
   18 00:4281 -  -  -  -  
   19 00:4281 -  -  -  -  Command_LET: 	;; [let]
   20 00:4281 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:4284 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:4286 28 28 -  -  		jr 		z,_CLString
   23 00:4288 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:428A 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:428C 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:428E 32 7C 40 -  		ld 		(AllowAutoCreate),a
   27 00:4291 -  -  -  -  _CLNoAuto:
   28 00:4291 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:4293 CD 19 46 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:4296 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:4298 CA 00 45 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:429B E5 -  -  -  		push 	hl 							; save address on stack
   33 00:429C C5 -  -  -  		push 	bc 							; save type on stack
   34 00:429D AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:429E 32 7C 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:42A1 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:42A3 CD 98 44 -  		call 	CheckNextA
   38 00:42A6 -  -  -  -  
   39 00:42A6 CD 82 46 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:42A9 -  -  -  -  
   41 00:42A9 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:42AA 43 -  -  -  		ld 		b,e 						
   43 00:42AB D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:42AC -  -  -  -  		;
   45 00:42AC -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:42AC -  -  -  -  		;
   47 00:42AC CD C6 42 -  		call 	WriteHLToDE
   48 00:42AF C9 -  -  -  		ret
   49 00:42B0 -  -  -  -  		;
   50 00:42B0 -  -  -  -  		; 		String assignment code.
   51 00:42B0 -  -  -  -  		;
   52 00:42B0 -  -  -  -  _CLString:
   53 00:42B0 CD 76 46 -  		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:42B3 E5 -  -  -  		push 	hl 							; save target expression
   55 00:42B4 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:42B6 CD 98 44 -  		call 	CheckNextA
   57 00:42B9 CD 9E 46 -  		call 	EvaluateString 				; get the thing to copy
   58 00:42BC D1 -  -  -  		pop 	de 							; target in DE.
   59 00:42BD -  -  -  -  _CLCopy:
   60 00:42BD 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:42BE 12 -  -  -  		ld 		(de),a
   62 00:42BF 23 -  -  -  		inc 	hl
   63 00:42C0 13 -  -  -  		inc 	de
   64 00:42C1 FE 20 -  -  		cp 		$20 						; until control character
   65 00:42C3 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:42C5 C9 -  -  -  		ret
   67 00:42C6 -  -  -  -  
   68 00:42C6 -  -  -  -  ; ***************************************************************************************
   69 00:42C6 -  -  -  -  ;
   70 00:42C6 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:42C6 -  -  -  -  ;
   72 00:42C6 -  -  -  -  ; ***************************************************************************************
   73 00:42C6 -  -  -  -  
   74 00:42C6 -  -  -  -  WriteHLToDE:
   75 00:42C6 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:42C8 C2 F6 44 -  		jp 		nz,TypeMismatch
   77 00:42CB -  -  -  -  		;
   78 00:42CB -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:42CB -  -  -  -  		;		
   80 00:42CB -  -  -  -  _WHDWriteNumber:
   81 00:42CB EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:42CC D9 -  -  -  		exx
   83 00:42CD EB -  -  -  		ex 		de,hl
   84 00:42CE D9 -  -  -  		exx
   85 00:42CF -  -  -  -  
   86 00:42CF 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:42D0 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:42D1 72 -  -  -  		ld 		(hl),d
   89 00:42D2 23 -  -  -  		inc 	hl
   90 00:42D3 E5 -  -  -  		push 	hl
   91 00:42D4 D9 -  -  -  		exx
   92 00:42D5 E1 -  -  -  		pop 	hl
   93 00:42D6 73 -  -  -  		ld 		(hl),e
   94 00:42D7 23 -  -  -  		inc 	hl
   95 00:42D8 72 -  -  -  		ld 		(hl),d
   96 00:42D9 D9 -  -  -  		exx
   97 00:42DA -  -  -  -  
   98 00:42DA C9 -  -  -  		ret
   99 00:42DB -  -  -  -  
  100 00:42DB -  -  -  -  ; ***************************************************************************************
  101 00:42DB -  -  -  -  ;
  102 00:42DB -  -  -  -  ;									Changes and Updates
  103 00:42DB -  -  -  -  ;
  104 00:42DB -  -  -  -  ; ***************************************************************************************
  105 00:42DB -  -  -  -  ;
  106 00:42DB -  -  -  -  ;		Date			Notes
  107 00:42DB -  -  -  -  ;		==== 			=====
  108 00:42DB -  -  -  -  ;
  109 00:42DB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:42DB -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:42DB -  -  -  -  ; ***************************************************************************************
    2 00:42DB -  -  -  -  ; ***************************************************************************************
    3 00:42DB -  -  -  -  ;
    4 00:42DB -  -  -  -  ;		Name : 		print.asm
    5 00:42DB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42DB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42DB -  -  -  -  ;		Reviewed :	No
    8 00:42DB -  -  -  -  ;		Purpose :	Print command
    9 00:42DB -  -  -  -  ;
   10 00:42DB -  -  -  -  ; ***************************************************************************************
   11 00:42DB -  -  -  -  ; ***************************************************************************************
   12 00:42DB -  -  -  -  
   13 00:42DB -  -  -  -  ; ***************************************************************************************
   14 00:42DB -  -  -  -  ;
   15 00:42DB -  -  -  -  ;										PRINT command
   16 00:42DB -  -  -  -  ;
   17 00:42DB -  -  -  -  ; ***************************************************************************************
   18 00:42DB -  -  -  -  
   19 00:42DB -  -  -  -  Command_PRINT: 	;; [print]
   20 00:42DB 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:42DD 32 7E 40 -  		ld 		(PrintBase),a
   22 00:42E0 -  -  -  -  		;
   23 00:42E0 -  -  -  -  		;		Main loop
   24 00:42E0 -  -  -  -  		;
   25 00:42E0 -  -  -  -  _CPRLoop:
   26 00:42E0 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:42E3 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:42E5 28 50 -  -  		jr 		z,_CPRExitNL
   29 00:42E7 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:42E9 28 4C -  -  		jr 		z,_CPRExitNL
   31 00:42EB FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:42ED 28 36 -  -  		jr 		z,_CPRCheckNext10
   33 00:42EF FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:42F1 28 2D -  -  		jr 		z,_CPRTab
   35 00:42F3 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:42F5 28 24 -  -  		jr 		z,_CPRNewLine
   37 00:42F7 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:42F9 28 17 -  -  		jr 		z,_CPRHexMode
   39 00:42FB -  -  -  -  		;
   40 00:42FB CD 82 46 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:42FE CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:4300 20 0B -  -  		jr 		nz,_CPRPrintHL
   43 00:4302 -  -  -  -  		;
   44 00:4302 3A 7E 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:4305 -  -  -  -  _CPRPrintNumber:
   46 00:4305 01 A2 40 -  		ld  	bc,ConvertBuffer
   47 00:4308 C5 -  -  -  		push 	bc
   48 00:4309 CD 6A 52 -  		call 	Int32ToString 				; convert to string
   49 00:430C E1 -  -  -  		pop 	hl
   50 00:430D -  -  -  -  		;
   51 00:430D -  -  -  -  		; 		Print text at HL.
   52 00:430D -  -  -  -  		;
   53 00:430D -  -  -  -  _CPRPrintHL:
   54 00:430D CD B3 4C -  		call 	PrintStringAtHL 			; print string out
   55 00:4310 18 CE -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4312 -  -  -  -  		;
   57 00:4312 -  -  -  -  		;		Hex mode (~)
   58 00:4312 -  -  -  -  		;
   59 00:4312 -  -  -  -  _CPRHexMode:		
   60 00:4312 3E 10 -  -  		ld 		a,16
   61 00:4314 32 7E 40 -  		ld 		(PrintBase),a
   62 00:4317 DD 23 -  -  		inc 	ix
   63 00:4319 18 C5 -  -  		jr 		_CPRLoop
   64 00:431B -  -  -  -  		;
   65 00:431B -  -  -  -  		; 		New line (')
   66 00:431B -  -  -  -  		;
   67 00:431B -  -  -  -  _CPRNewLine:
   68 00:431B CD D4 52 -  		call 	SYSPrintCRLF
   69 00:431E 18 0A -  -  		jr 		_CPRCheckNext
   70 00:4320 -  -  -  -  		;
   71 00:4320 -  -  -  -  		; 		Tab command (,)
   72 00:4320 -  -  -  -  		;
   73 00:4320 -  -  -  -  _CPRTab:
   74 00:4320 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:4322 CD B8 52 -  		call 	SYSPrintChar
   76 00:4325 -  -  -  -  		;
   77 00:4325 -  -  -  -  		;		Set to base 10 then check next character
   78 00:4325 -  -  -  -  		;
   79 00:4325 -  -  -  -  _CPRCheckNext10:		
   80 00:4325 3E F6 -  -  		ld 		a,-10
   81 00:4327 32 7E 40 -  		ld 		(PrintBase),a
   82 00:432A -  -  -  -  		;
   83 00:432A -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:432A -  -  -  -  		;		
   85 00:432A -  -  -  -  _CPRCheckNext:
   86 00:432A DD 23 -  -  		inc 	ix 							; consume current
   87 00:432C DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:432F FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:4331 C8 -  -  -  		ret 	z
   90 00:4332 FE A7 -  -  		cp 		KWD_COLON
   91 00:4334 C8 -  -  -  		ret 	z
   92 00:4335 18 A9 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:4337 -  -  -  -  		;
   94 00:4337 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:4337 -  -  -  -  		;
   96 00:4337 -  -  -  -  _CPRExitNL:
   97 00:4337 CD D4 52 -  		call 	SYSPrintCRLF 				; do CR/LF
   98 00:433A C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:433B -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:433B -  -  -  -  ; ***************************************************************************************
    2 00:433B -  -  -  -  ; ***************************************************************************************
    3 00:433B -  -  -  -  ;
    4 00:433B -  -  -  -  ;		Name : 		rem.asm
    5 00:433B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:433B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:433B -  -  -  -  ;		Reviewed :	No
    8 00:433B -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:433B -  -  -  -  ;
   10 00:433B -  -  -  -  ; ***************************************************************************************
   11 00:433B -  -  -  -  ; ***************************************************************************************
   12 00:433B -  -  -  -  
   13 00:433B -  -  -  -  ; ***************************************************************************************
   14 00:433B -  -  -  -  ;
   15 00:433B -  -  -  -  ;							Comment command, can be ' or REM
   16 00:433B -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:433B -  -  -  -  ;
   18 00:433B -  -  -  -  ; ***************************************************************************************
   19 00:433B -  -  -  -  
   20 00:433B -  -  -  -  Command_REM: 	;; [rem]
   21 00:433B -  -  -  -  Command_REM2: 	;; [']
   22 00:433B DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:433E FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:4340 C8 -  -  -  		ret 	z
   25 00:4341 DD 23 -  -  		inc 	ix
   26 00:4343 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:4345 C8 -  -  -  		ret 	z
   28 00:4346 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4348 C2 00 45 -  		jp 		nz,SyntaxError
   30 00:434B -  -  -  -  		;		
   31 00:434B 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:434E DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4351 13 -  -  -  		inc 	de 
   34 00:4352 13 -  -  -  		inc 	de
   35 00:4353 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4355 C9 -  -  -  		ret
   37 00:4356 -  -  -  -  
   38 00:4356 -  -  -  -  ; ***************************************************************************************
   39 00:4356 -  -  -  -  ;
   40 00:4356 -  -  -  -  ;									Changes and Updates
   41 00:4356 -  -  -  -  ;
   42 00:4356 -  -  -  -  ; ***************************************************************************************
   43 00:4356 -  -  -  -  ;
   44 00:4356 -  -  -  -  ;		Date			Notes
   45 00:4356 -  -  -  -  ;		==== 			=====
   46 00:4356 -  -  -  -  ;
   47 00:4356 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:4356 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4356 -  -  -  -  ; ***************************************************************************************
    2 00:4356 -  -  -  -  ; ***************************************************************************************
    3 00:4356 -  -  -  -  ;
    4 00:4356 -  -  -  -  ;		Name : 		run.asm
    5 00:4356 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4356 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4356 -  -  -  -  ;		Reviewed :	No
    8 00:4356 -  -  -  -  ;		Purpose :	Run command
    9 00:4356 -  -  -  -  ;
   10 00:4356 -  -  -  -  ; ***************************************************************************************
   11 00:4356 -  -  -  -  ; ***************************************************************************************
   12 00:4356 -  -  -  -  
   13 00:4356 -  -  -  -  ; ***************************************************************************************
   14 00:4356 -  -  -  -  ;
   15 00:4356 -  -  -  -  ;										RUN command
   16 00:4356 -  -  -  -  ;
   17 00:4356 -  -  -  -  ; ***************************************************************************************
   18 00:4356 -  -  -  -  
   19 00:4356 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4356 CD 37 4A -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4359 -  -  -  -  
   22 00:4359 DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:435D ED 73 5C 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4361 AF -  -  -  		xor 	a
   25 00:4362 32 7C 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:4365 -  -  -  -  		;
   27 00:4365 -  -  -  -  		; 		New line at IX.
   28 00:4365 -  -  -  -  		;
   29 00:4365 -  -  -  -  CRNewLine:
   30 00:4365 DD 22 58 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:4369 -  -  -  -  		;
   32 00:4369 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:436C B7 -  -  -  		or 		a
   34 00:436D CA 69 42 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4370 -  -  -  -  		;
   36 00:4370 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4372 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:4374 DD 23 -  -  		inc 	ix
   39 00:4376 -  -  -  -  		;
   40 00:4376 -  -  -  -  		; 		New command at IX
   41 00:4376 -  -  -  -  		;
   42 00:4376 -  -  -  -  _CRNewCommand:	
   43 00:4376 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:4379 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:437A F2 AE 43 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:437D -  -  -  -  		;
   47 00:437D FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:437F 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:4381 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:4383 D2 9F 43 -  		jp 		nc,_CRAlternateLets
   51 00:4386 -  -  -  -  		;
   52 00:4386 -  -  -  -  _CRDoCommand:		
   53 00:4386 E6 7F 21 00 
              00 6F 29 11 
              26 50 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:4398 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:439A CD 60 40 -  		call 	JumpCode 					; call the routine.
   56 00:439D 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:439F -  -  -  -  		;
   58 00:439F -  -  -  -  		; 		Do CALL (HL)
   59 00:439F -  -  -  -  		;
   60 00:439F -  -  -  -  		;
   61 00:439F -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:439F -  -  -  -  		;		
   63 00:439F -  -  -  -  _CRAlternateLets:		
   64 00:439F FE 83 -  -  		cp 		KWD_PLING
   65 00:43A1 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:43A3 FE 84 -  -  		cp 		KWD_QMARK
   67 00:43A5 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:43A7 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:43A9 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:43AB C3 00 45 -  		jp 		SyntaxError
   71 00:43AE -  -  -  -  		;
   72 00:43AE -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:43AE -  -  -  -  		;
   74 00:43AE -  -  -  -  _CRAssignmentHandler:		
   75 00:43AE FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:43B0 D2 00 45 -  		jp 		nc,SyntaxError
   77 00:43B3 -  -  -  -  _CRAssignmentLet:		
   78 00:43B3 CD 81 42 -  		call	Command_LET 				; do LET.
   79 00:43B6 C3 76 43 -  		jp 		_CRNewCommand
   80 00:43B9 -  -  -  -  
   81 00:43B9 -  -  -  -  ; ***************************************************************************************
   82 00:43B9 -  -  -  -  ;
   83 00:43B9 -  -  -  -  ;									Changes and Updates
   84 00:43B9 -  -  -  -  ;
   85 00:43B9 -  -  -  -  ; ***************************************************************************************
   86 00:43B9 -  -  -  -  ;
   87 00:43B9 -  -  -  -  ;		Date			Notes
   88 00:43B9 -  -  -  -  ;		==== 			=====
   89 00:43B9 -  -  -  -  ;
   90 00:43B9 -  -  -  -  ; ***************************************************************************************
   91 00:43B9 -  -  -  -  		
Listing for file "_build.asm"
   24 00:43B9 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:43B9 -  -  -  -  ; ***************************************************************************************
    2 00:43B9 -  -  -  -  ; ***************************************************************************************
    3 00:43B9 -  -  -  -  ;
    4 00:43B9 -  -  -  -  ;		Name : 		stop.asm
    5 00:43B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43B9 -  -  -  -  ;		Reviewed :	No
    8 00:43B9 -  -  -  -  ;		Purpose :	Stop command
    9 00:43B9 -  -  -  -  ;
   10 00:43B9 -  -  -  -  ; ***************************************************************************************
   11 00:43B9 -  -  -  -  ; ***************************************************************************************
   12 00:43B9 -  -  -  -  
   13 00:43B9 -  -  -  -  ; ***************************************************************************************
   14 00:43B9 -  -  -  -  ;
   15 00:43B9 -  -  -  -  ;										STOP command
   16 00:43B9 -  -  -  -  ;
   17 00:43B9 -  -  -  -  ; ***************************************************************************************
   18 00:43B9 -  -  -  -  
   19 00:43B9 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:43B9 3E 17 C3 A3 
              44 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:43BE -  -  -  -  
   22 00:43BE -  -  -  -  ; ***************************************************************************************
   23 00:43BE -  -  -  -  ;
   24 00:43BE -  -  -  -  ;									Changes and Updates
   25 00:43BE -  -  -  -  ;
   26 00:43BE -  -  -  -  ; ***************************************************************************************
   27 00:43BE -  -  -  -  ;
   28 00:43BE -  -  -  -  ;		Date			Notes
   29 00:43BE -  -  -  -  ;		==== 			=====
   30 00:43BE -  -  -  -  ;
   31 00:43BE -  -  -  -  ; ***************************************************************************************
   32 00:43BE -  -  -  -  		
Listing for file "_build.asm"
   25 00:43BE -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 00:43BE -  -  -  -  ; ***************************************************************************************
    2 00:43BE -  -  -  -  ; ***************************************************************************************
    3 00:43BE -  -  -  -  ;
    4 00:43BE -  -  -  -  ;		Name : 		vdu.asm
    5 00:43BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43BE -  -  -  -  ;		Date : 		8th June 2022
    7 00:43BE -  -  -  -  ;		Reviewed :	No
    8 00:43BE -  -  -  -  ;		Purpose :	Vdu command
    9 00:43BE -  -  -  -  ;
   10 00:43BE -  -  -  -  ; ***************************************************************************************
   11 00:43BE -  -  -  -  ; ***************************************************************************************
   12 00:43BE -  -  -  -  
   13 00:43BE -  -  -  -  ; ***************************************************************************************
   14 00:43BE -  -  -  -  ;
   15 00:43BE -  -  -  -  ;										END command
   16 00:43BE -  -  -  -  ;
   17 00:43BE -  -  -  -  ; ***************************************************************************************
   18 00:43BE -  -  -  -  
   19 00:43BE -  -  -  -  Command_VDU: 	;; [vdu]
   20 00:43BE DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 00:43C1 FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 00:43C3 C8 -  -  -  		ret 	z
   23 00:43C4 FE A7 -  -  		cp 		KWD_COLON
   24 00:43C6 C8 -  -  -  		ret 	z
   25 00:43C7 -  -  -  -  		;
   26 00:43C7 CD 88 46 -  		call 	EvaluateInteger 			; evaluate integer value
   27 00:43CA D9 -  -  -  		exx 								; check 0-FFFF
   28 00:43CB 7C -  -  -  		ld 		a,h
   29 00:43CC B5 -  -  -  		or 		l
   30 00:43CD D9 -  -  -  		exx
   31 00:43CE C2 FB 44 -  		jp  	nz,BadValue
   32 00:43D1 E5 -  -  -  		push 	hl 							; save on stack
   33 00:43D2 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 00:43D3 CD B8 52 -  		call 	SYSPrintChar
   35 00:43D6 E1 -  -  -  		pop 	hl 							; get upper back
   36 00:43D7 DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 00:43DA DD 23 -  -  		inc 	ix 
   38 00:43DC FE A6 -  -  		cp 		KWD_COMMA 					
   39 00:43DE 28 DE -  -  		jr 		z,Command_VDU
   40 00:43E0 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 00:43E2 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 00:43E4 DD 2B -  -  		dec 	ix 							; go back and try again
   43 00:43E6 18 D6 -  -  		jr 		Command_VDU
   44 00:43E8 -  -  -  -  
   45 00:43E8 -  -  -  -  _VDUUpper:
   46 00:43E8 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 00:43E9 CD B8 52 -  		call 	SYSPrintChar
   48 00:43EC 18 D0 -  -  		jr 		Command_VDU		
   49 00:43EE -  -  -  -  
   50 00:43EE -  -  -  -  ; ***************************************************************************************
   51 00:43EE -  -  -  -  ;
   52 00:43EE -  -  -  -  ;									Changes and Updates
   53 00:43EE -  -  -  -  ;
   54 00:43EE -  -  -  -  ; ***************************************************************************************
   55 00:43EE -  -  -  -  ;
   56 00:43EE -  -  -  -  ;		Date			Notes
   57 00:43EE -  -  -  -  ;		==== 			=====
   58 00:43EE -  -  -  -  ;
   59 00:43EE -  -  -  -  ; ***************************************************************************************
   60 00:43EE -  -  -  -  		
Listing for file "_build.asm"
   26 00:43EE -  -  -  -  #include "core/data/read.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
    1 00:43EE -  -  -  -  ; ***************************************************************************************
    2 00:43EE -  -  -  -  ; ***************************************************************************************
    3 00:43EE -  -  -  -  ;
    4 00:43EE -  -  -  -  ;		Name : 		read.asm
    5 00:43EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43EE -  -  -  -  ;		Date : 		9th June 2022
    7 00:43EE -  -  -  -  ;		Reviewed :	No
    8 00:43EE -  -  -  -  ;		Purpose :	READ command
    9 00:43EE -  -  -  -  ;
   10 00:43EE -  -  -  -  ; ***************************************************************************************
   11 00:43EE -  -  -  -  
   12 00:43EE -  -  -  -  ; ***************************************************************************************
   13 00:43EE -  -  -  -  ;
   14 00:43EE -  -  -  -  ;									Read Command
   15 00:43EE -  -  -  -  ;
   16 00:43EE -  -  -  -  ; ***************************************************************************************
   17 00:43EE -  -  -  -  
   18 00:43EE -  -  -  -  Command_READ: ;; [read]
   19 00:43EE -  -  -  -  			;
   20 00:43EE -  -  -  -  			;		READ loop
   21 00:43EE -  -  -  -  			;
   22 00:43EE -  -  -  -  _CRLoop:	
   23 00:43EE 21 84 40 -  			ld 		hl,DataScanRequired 	; check and clear scan required flag
   24 00:43F1 7E -  -  -  			ld 		a,(hl)
   25 00:43F2 36 00 -  -  			ld 		(hl),0 
   26 00:43F4 B7 -  -  -  			or 		a
   27 00:43F5 C4 2C 44 -  			call 	nz,CRScanForward 		; if required, scan forward to the first data
   28 00:43F8 -  -  -  -  			;
   29 00:43F8 3E FF -  -  			ld 		a,$FF 					; we can autocreate READ variables
   30 00:43FA 32 7C 40 -  			ld 		(AllowAutoCreate),a
   31 00:43FD CD FC 4C -  			call 	FindVariable 			; locate the variable, address in UHL now.
   32 00:4400 AF -  -  -  			xor 	a 						
   33 00:4401 32 7C 40 -  			ld 		(AllowAutoCreate),a
   34 00:4404 DD E5 -  -  			push 	ix 						; save position in program
   35 00:4406 E5 -  -  -  			push 	hl						; save variable target address.
   36 00:4407 -  -  -  -  			;
   37 00:4407 -  -  -  -  _CRLocateData:			
   38 00:4407 DD 2A 80 40 			ld 		ix,(ReadDataPointer) 	; current read position
   39 00:440B CD 88 46 -  			call 	EvaluateInteger 		; should be an integer there.
   40 00:440E D1 -  -  -  			pop 	de 						; target address in DE
   41 00:440F CD 22 49 -  			call 	_LCVWrite32HL 			; function to write HL'HL to DE
   42 00:4412 -  -  -  -  			;
   43 00:4412 DD 7E 00 -  			ld 		a,(ix+0) 				; get following.
   44 00:4415 DD 23 -  -  			inc 	ix
   45 00:4417 DD 22 80 40 			ld 		(ReadDataPointer),ix 	; skip over it. It should be , EOS or :
   46 00:441B -  -  -  -  			;
   47 00:441B EE A6 -  -  			xor 	KWD_COMMA 				; will be zero if a comma, hence no scan required
   48 00:441D 32 84 40 -  			ld 		(DataScanRequired),a 	; update the flag accordingly.
   49 00:4420 -  -  -  -  			;
   50 00:4420 DD E1 -  -  			pop 	ix						; get program position back
   51 00:4422 DD 7E 00 -  			ld 		a,(ix+0) 				; is it followed by a comma
   52 00:4425 FE A6 -  -  			cp 		KWD_COMMA
   53 00:4427 C0 -  -  -  			ret 	nz 						; no, end of READ
   54 00:4428 DD 23 -  -  			inc 	ix 						; skip comma
   55 00:442A 18 C2 -  -  			jr 		_CRLoop 				; go round again.
   56 00:442C -  -  -  -  
   57 00:442C -  -  -  -  ; ***************************************************************************************
   58 00:442C -  -  -  -  ;
   59 00:442C -  -  -  -  ;			Scan the data pointer forward to the next data statement, error if none.
   60 00:442C -  -  -  -  ;
   61 00:442C -  -  -  -  ; ***************************************************************************************
   62 00:442C -  -  -  -  
   63 00:442C -  -  -  -  CRScanForward:
   64 00:442C DD E5 -  -  			push 	ix
   65 00:442E DD 2A 80 40 			ld 		ix,(ReadDataPointer)
   66 00:4432 -  -  -  -  _CRScanLoop:
   67 00:4432 06 C8 -  -  			ld 		b,KWD_DATA 				; want to search for DATA or EOL
   68 00:4434 0E 80 -  -  			ld 		c,KWC_EOL_MARKER
   69 00:4436 CD 1D 4C -  			call 	SearchForwardTokens 	; look for DATA or EOL in current line.
   70 00:4439 FE C8 -  -  			cp 		KWD_DATA 				; DATA found, we can exit
   71 00:443B 28 11 -  -  			jr 		z,_CRScanExit
   72 00:443D -  -  -  -  			;
   73 00:443D DD 7E 00 -  			ld 		a,(ix+0) 				; get offset
   74 00:4440 DD 23 -  -  			inc 	ix 						; point to start of next line.
   75 00:4442 DD 23 -  -  			inc 	ix
   76 00:4444 DD 23 -  -  			inc 	ix
   77 00:4446 B7 -  -  -  			or 		a 						; if offset non zero try that line.
   78 00:4447 20 E9 -  -  			jr 		nz,_CRScanLoop
   79 00:4449 3E 04 C3 A3 
              44 -  -  -  			ERR_DATA 						; we have no data.
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
   80 00:444E -  -  -  -  
   81 00:444E -  -  -  -  _CRScanExit:
   82 00:444E DD 22 80 40 			ld 		(ReadDataPointer),ix 	; update pointer at new DATA.
   83 00:4452 DD E1 -  -  			pop 	ix
   84 00:4454 C9 -  -  -  			ret
   85 00:4455 -  -  -  -  
   86 00:4455 -  -  -  -  ; ***************************************************************************************
   87 00:4455 -  -  -  -  ;
   88 00:4455 -  -  -  -  ;									Changes and Updates
   89 00:4455 -  -  -  -  ;
   90 00:4455 -  -  -  -  ; ***************************************************************************************
   91 00:4455 -  -  -  -  ;
   92 00:4455 -  -  -  -  ;		Date			Notes
   93 00:4455 -  -  -  -  ;		==== 			=====
   94 00:4455 -  -  -  -  ;
   95 00:4455 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:4455 -  -  -  -  #include "core/data/restore.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/restore.asm"
    1 00:4455 -  -  -  -  ; ***************************************************************************************
    2 00:4455 -  -  -  -  ; ***************************************************************************************
    3 00:4455 -  -  -  -  ;
    4 00:4455 -  -  -  -  ;		Name : 		restore.asm
    5 00:4455 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4455 -  -  -  -  ;		Date : 		9th June 2022
    7 00:4455 -  -  -  -  ;		Reviewed :	No
    8 00:4455 -  -  -  -  ;		Purpose :	RESTORE command
    9 00:4455 -  -  -  -  ;
   10 00:4455 -  -  -  -  ; ***************************************************************************************
   11 00:4455 -  -  -  -  
   12 00:4455 -  -  -  -  ; ***************************************************************************************
   13 00:4455 -  -  -  -  ;
   14 00:4455 -  -  -  -  ;									Restore Command
   15 00:4455 -  -  -  -  ;
   16 00:4455 -  -  -  -  ; ***************************************************************************************
   17 00:4455 -  -  -  -  
   18 00:4455 -  -  -  -  Command_RESTORE: ;; [restore]
   19 00:4455 2A 34 40 -  			ld 		hl,(CodeAddress)		; HL+3 is the first token.
   20 00:4458 23 -  -  -  			inc 	hl
   21 00:4459 23 -  -  -  			inc 	hl
   22 00:445A 23 -  -  -  			inc 	hl
   23 00:445B 22 80 40 -  			ld 		(ReadDataPointer),hl 	; scan from here.
   24 00:445E 3E FF -  -  			ld 		a,$FF 					; scan required first time out.
   25 00:4460 32 84 40 -  			ld 		(DataScanRequired),a
   26 00:4463 C9 -  -  -  			ret 					
   27 00:4464 -  -  -  -  
   28 00:4464 -  -  -  -  ; ***************************************************************************************
   29 00:4464 -  -  -  -  ;
   30 00:4464 -  -  -  -  ;									Changes and Updates
   31 00:4464 -  -  -  -  ;
   32 00:4464 -  -  -  -  ; ***************************************************************************************
   33 00:4464 -  -  -  -  ;
   34 00:4464 -  -  -  -  ;		Date			Notes
   35 00:4464 -  -  -  -  ;		==== 			=====
   36 00:4464 -  -  -  -  ;
   37 00:4464 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:4464 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4464 -  -  -  -  ; ***************************************************************************************
    2 00:4464 -  -  -  -  ; ***************************************************************************************
    3 00:4464 -  -  -  -  ;
    4 00:4464 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4464 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4464 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4464 -  -  -  -  ;		Reviewed :	No
    8 00:4464 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4464 -  -  -  -  ;
   10 00:4464 -  -  -  -  ; ***************************************************************************************
   11 00:4464 -  -  -  -  ; ***************************************************************************************
   12 00:4464 -  -  -  -  
   13 00:4464 -  -  -  -  ; ***************************************************************************************
   14 00:4464 -  -  -  -  ;
   15 00:4464 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4464 -  -  -  -  ;
   17 00:4464 -  -  -  -  ; ***************************************************************************************
   18 00:4464 -  -  -  -  
   19 00:4464 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4464             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4464             		inc 	ix
   22 00:4464             		cp 		ch 							; exit if matches
   23 00:4464             		ret 	z
   24 00:4464             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4464             		jp 		ErrorHandler
   26 00:4464             #endmacro
   27 00:4464 -  -  -  -  
   28 00:4464 -  -  -  -  CheckLeftBracket:
   29 00:4464 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0F C3 A3 
              44 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4471 -  -  -  -  
   31 00:4471 -  -  -  -  CheckRightBracket:
   32 00:4471 DD 7E 00 DD 
              23 FE A5 C8 
              3E 11 C3 A3 
              44 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:447E -  -  -  -  
   34 00:447E -  -  -  -  CheckDollar:
   35 00:447E DD 7E 00 DD 
              23 FE 96 C8 
              3E 0E C3 A3 
              44 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:448B -  -  -  -  		
   37 00:448B -  -  -  -  CheckComma:
   38 00:448B DD 7E 00 DD 
              23 FE A6 C8 
              3E 0D C3 A3 
              44 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4498 -  -  -  -  
   40 00:4498 -  -  -  -  ; ***************************************************************************************
   41 00:4498 -  -  -  -  ;
   42 00:4498 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4498 -  -  -  -  ;
   44 00:4498 -  -  -  -  ; ***************************************************************************************
   45 00:4498 -  -  -  -  
   46 00:4498 -  -  -  -  CheckNextA:
   47 00:4498 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:449B DD 23 -  -  		inc 	ix 							; skip character
   49 00:449D C8 -  -  -  		ret 	z 							; yes, okay
   50 00:449E 3E 18 C3 A3 
              44 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:44A3 -  -  -  -  		
   52 00:44A3 -  -  -  -  ; ***************************************************************************************
   53 00:44A3 -  -  -  -  ;
   54 00:44A3 -  -  -  -  ;									Changes and Updates
   55 00:44A3 -  -  -  -  ;
   56 00:44A3 -  -  -  -  ; ***************************************************************************************
   57 00:44A3 -  -  -  -  ;
   58 00:44A3 -  -  -  -  ;		Date			Notes
   59 00:44A3 -  -  -  -  ;		==== 			=====
   60 00:44A3 -  -  -  -  ;
   61 00:44A3 -  -  -  -  ; ***************************************************************************************
   62 00:44A3 -  -  -  -  		
Listing for file "_build.asm"
   29 00:44A3 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:44A3 -  -  -  -  ; ***************************************************************************************
    2 00:44A3 -  -  -  -  ; ***************************************************************************************
    3 00:44A3 -  -  -  -  ;
    4 00:44A3 -  -  -  -  ;		Name : 		errors.asm
    5 00:44A3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44A3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44A3 -  -  -  -  ;		Reviewed :	No
    8 00:44A3 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:44A3 -  -  -  -  ;
   10 00:44A3 -  -  -  -  ; ***************************************************************************************
   11 00:44A3 -  -  -  -  ; ***************************************************************************************
   12 00:44A3 -  -  -  -  
   13 00:44A3 -  -  -  -  ; ***************************************************************************************
   14 00:44A3 -  -  -  -  ;
   15 00:44A3 -  -  -  -  ;								Error handler, message A 
   16 00:44A3 -  -  -  -  ;
   17 00:44A3 -  -  -  -  ; ***************************************************************************************
   18 00:44A3 -  -  -  -  
   19 00:44A3 -  -  -  -  ErrorHandler:
   20 00:44A3 F5 -  -  -  		push 	af 						; save error ID
   21 00:44A4 -  -  -  -  
   22 00:44A4 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:44A7 6F -  -  -  		ld 		l,a
   24 00:44A8 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:44A9 29 -  -  -  		add 	hl,hl 		
   26 00:44AA 11 11 4E -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:44AD 19 -  -  -  		add 	hl,de
   28 00:44AE 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:44B2 CD B3 4C -  		call 	PrintStringAtHL
   30 00:44B5 -  -  -  -  		;
   31 00:44B5 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:44B6 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:44B7 28 28 -  -  		jr 		z,_EHExit
   34 00:44B9 -  -  -  -  		;
   35 00:44B9 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:44BD DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:44C0 B7 -  -  -  		or 		a
   38 00:44C1 28 1E -  -  		jr 		z,_EHExit
   39 00:44C3 -  -  -  -  
   40 00:44C3 21 E7 44 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:44C6 CD B3 4C -  		call 	PrintStringAtHL 
   42 00:44C9 -  -  -  -  		
   43 00:44C9 D9 -  -  -  		exx								; HL'HL = line number
   44 00:44CA 21 00 00 -  		ld 		hl,$0000 		
   45 00:44CD D9 -  -  -  		exx 
   46 00:44CE DD 6E 01 -  		ld 		l,(ix+1)
   47 00:44D1 DD 66 02 -  		ld 		h,(ix+2)
   48 00:44D4 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:44D6 01 A2 40 -  		ld 		bc,ConvertBuffer
   50 00:44D9 CD 6A 52 -  		call 	Int32ToString
   51 00:44DC C5 -  -  -  		push 	bc
   52 00:44DD E1 -  -  -  		pop 	hl
   53 00:44DE CD B3 4C -  		call 	PrintStringAtHL			; print error line number.
   54 00:44E1 -  -  -  -  _EHExit:		
   55 00:44E1 CD D4 52 -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:44E4 C3 1A 40 -  		jp 		WarmStart
   57 00:44E7 -  -  -  -  
   58 00:44E7 -  -  -  -  _EHAtText:
   59 00:44E7 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:44F1 -  -  -  -  
   61 00:44F1 -  -  -  -  NotImplemented:
   62 00:44F1 3E 06 C3 A3 
              44 -  -  -  		ERR_DISABLED
   63 00:44F6 -  -  -  -  TypeMismatch:
   64 00:44F6 3E 02 C3 A3 
              44 -  -  -  		ERR_BADTYPE
   65 00:44FB -  -  -  -  BadValue:
   66 00:44FB 3E 03 C3 A3 
              44 -  -  -  		ERR_BADVALUE
   67 00:4500 -  -  -  -  SyntaxError:
   68 00:4500 3E 18 C3 A3 
              44 -  -  -  		ERR_SYNTAX
   69 00:4505 -  -  -  -  						
   70 00:4505 -  -  -  -  ; ***************************************************************************************
   71 00:4505 -  -  -  -  ;
   72 00:4505 -  -  -  -  ;									Changes and Updates
   73 00:4505 -  -  -  -  ;
   74 00:4505 -  -  -  -  ; ***************************************************************************************
   75 00:4505 -  -  -  -  ;
   76 00:4505 -  -  -  -  ;		Date			Notes
   77 00:4505 -  -  -  -  ;		==== 			=====
   78 00:4505 -  -  -  -  ;
   79 00:4505 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:4505 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4505 -  -  -  -  ; ***************************************************************************************
    2 00:4505 -  -  -  -  ; ***************************************************************************************
    3 00:4505 -  -  -  -  ;
    4 00:4505 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4505 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4505 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4505 -  -  -  -  ;		Reviewed :	No
    8 00:4505 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4505 -  -  -  -  ;
   10 00:4505 -  -  -  -  ; ***************************************************************************************
   11 00:4505 -  -  -  -  ; ***************************************************************************************
   12 00:4505 -  -  -  -  
   13 00:4505 -  -  -  -  ; ***************************************************************************************
   14 00:4505 -  -  -  -  ;
   15 00:4505 -  -  -  -  ; 									Addition
   16 00:4505 -  -  -  -  ;
   17 00:4505 -  -  -  -  ; ***************************************************************************************
   18 00:4505 -  -  -  -  
   19 00:4505 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4505 CD F8 45 78 
              B1 C2 F6 44 
              C3 F7 51 -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4510 -  -  -  -  
   22 00:4510 -  -  -  -  ; ***************************************************************************************
   23 00:4510 -  -  -  -  ;
   24 00:4510 -  -  -  -  ; 									Subtraction
   25 00:4510 -  -  -  -  ;
   26 00:4510 -  -  -  -  ; ***************************************************************************************
   27 00:4510 -  -  -  -  
   28 00:4510 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4510 CD F8 45 78 
              B1 C2 F6 44 
              C3 FD 51 -  		IntegerDispatch(Int32Subtract)
   30 00:451B -  -  -  -  
   31 00:451B -  -  -  -  ; ***************************************************************************************
   32 00:451B -  -  -  -  ;
   33 00:451B -  -  -  -  ; 									  Multiply
   34 00:451B -  -  -  -  ;
   35 00:451B -  -  -  -  ; ***************************************************************************************
   36 00:451B -  -  -  -  
   37 00:451B -  -  -  -  ALUMultiply: 	;; [*]
   38 00:451B CD F8 45 78 
              B1 C2 F6 44 
              C3 C1 51 -  		IntegerDispatch(Int32Multiply)
   39 00:4526 -  -  -  -  
   40 00:4526 -  -  -  -  ; ***************************************************************************************
   41 00:4526 -  -  -  -  ;
   42 00:4526 -  -  -  -  ; 									  Divide
   43 00:4526 -  -  -  -  ;
   44 00:4526 -  -  -  -  ; ***************************************************************************************
   45 00:4526 -  -  -  -  
   46 00:4526 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4526 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4526 CD F8 45 78 
              B1 C2 F6 44 
              C3 D2 50 -  		IntegerDispatch(Int32SDivide)
   49 00:4531 -  -  -  -  
   50 00:4531 -  -  -  -  ; ***************************************************************************************
   51 00:4531 -  -  -  -  ;
   52 00:4531 -  -  -  -  ; 									  Modulus
   53 00:4531 -  -  -  -  ;
   54 00:4531 -  -  -  -  ; ***************************************************************************************
   55 00:4531 -  -  -  -  
   56 00:4531 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4531 CD F8 45 78 
              B1 C2 F6 44 
              C3 D5 50 -  		IntegerDispatch(Int32Modulus)
   58 00:453C -  -  -  -  
   59 00:453C -  -  -  -  ; ***************************************************************************************
   60 00:453C -  -  -  -  ;
   61 00:453C -  -  -  -  ; 									  Logical
   62 00:453C -  -  -  -  ;
   63 00:453C -  -  -  -  ; ***************************************************************************************
   64 00:453C -  -  -  -  
   65 00:453C -  -  -  -  ALUAnd: 		;; [and]
   66 00:453C CD F8 45 78 
              B1 C2 F6 44 
              C3 05 52 -  		IntegerDispatch(Int32And)
   67 00:4547 -  -  -  -  
   68 00:4547 -  -  -  -  ALUOr: 			;; [or]
   69 00:4547 CD F8 45 78 
              B1 C2 F6 44 
              C3 11 52 -  		IntegerDispatch(Int32Or)
   70 00:4552 -  -  -  -  
   71 00:4552 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4552 CD F8 45 78 
              B1 C2 F6 44 
              C3 1D 52 -  		IntegerDispatch(Int32Xor)
   73 00:455D -  -  -  -  
   74 00:455D -  -  -  -  ; ***************************************************************************************
   75 00:455D -  -  -  -  ;
   76 00:455D -  -  -  -  ;									Changes and Updates
   77 00:455D -  -  -  -  ;
   78 00:455D -  -  -  -  ; ***************************************************************************************
   79 00:455D -  -  -  -  ;
   80 00:455D -  -  -  -  ;		Date			Notes
   81 00:455D -  -  -  -  ;		==== 			=====
   82 00:455D -  -  -  -  ;
   83 00:455D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:455D -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:455D -  -  -  -  ; ***************************************************************************************
    2 00:455D -  -  -  -  ; ***************************************************************************************
    3 00:455D -  -  -  -  ;
    4 00:455D -  -  -  -  ;		Name : 		binrefs.asm
    5 00:455D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:455D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:455D -  -  -  -  ;		Reviewed :	No
    8 00:455D -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:455D -  -  -  -  ;
   10 00:455D -  -  -  -  ; ***************************************************************************************
   11 00:455D -  -  -  -  ; ***************************************************************************************
   12 00:455D -  -  -  -  
   13 00:455D -  -  -  -  ; ***************************************************************************************
   14 00:455D -  -  -  -  ;
   15 00:455D -  -  -  -  ; 									<l> <op> <r>
   16 00:455D -  -  -  -  ;
   17 00:455D -  -  -  -  ; ***************************************************************************************
   18 00:455D -  -  -  -  
   19 00:455D -  -  -  -  ALULongReference:			;; [!]
   20 00:455D CD 6B 45 -  		call 	BRGetAddress 				; calculate address
   21 00:4560 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4562 CB F9 -  -  		set 	CIsReference,c
   23 00:4564 C9 -  -  -  		ret
   24 00:4565 -  -  -  -  
   25 00:4565 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4565 CD 5D 45 -  		call 	ALULongReference
   27 00:4568 CB F1 -  -  		set 	CIsByteReference,c
   28 00:456A C9 -  -  -  		ret
   29 00:456B -  -  -  -  
   30 00:456B -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:456B CD F8 45 78 
              B1 C2 F6 44 
              C3 76 45 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4576 -  -  -  -  _BRGAMain:		
   33 00:4576 CD F7 51 -  		call 	Int32Add 					; address in HL'HL
   34 00:4579 CD E1 46 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:457C C9 -  -  -  		ret
   36 00:457D -  -  -  -  
   37 00:457D -  -  -  -  ; ***************************************************************************************
   38 00:457D -  -  -  -  ;
   39 00:457D -  -  -  -  ;									Changes and Updates
   40 00:457D -  -  -  -  ;
   41 00:457D -  -  -  -  ; ***************************************************************************************
   42 00:457D -  -  -  -  ;
   43 00:457D -  -  -  -  ;		Date			Notes
   44 00:457D -  -  -  -  ;		==== 			=====
   45 00:457D -  -  -  -  ;
   46 00:457D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:457D -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:457D -  -  -  -  ; ***************************************************************************************
    2 00:457D -  -  -  -  ; ***************************************************************************************
    3 00:457D -  -  -  -  ;
    4 00:457D -  -  -  -  ;		Name : 		compare.asm
    5 00:457D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:457D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:457D -  -  -  -  ;		Reviewed :	No
    8 00:457D -  -  -  -  ;		Purpose :	Comparison code
    9 00:457D -  -  -  -  ;
   10 00:457D -  -  -  -  ; ***************************************************************************************
   11 00:457D -  -  -  -  ; ***************************************************************************************
   12 00:457D -  -  -  -  
   13 00:457D -  -  -  -  #macro compare_equals(n)
   14 00:457D             		call 	CompareBaseCode
   15 00:457D             		cp 		n
   16 00:457D             		jr 		z,UnaryInt32True
   17 00:457D             		jr 		UnaryInt32False
   18 00:457D             #endmacro
   19 00:457D -  -  -  -  
   20 00:457D -  -  -  -  #macro compare_not_equals(n)
   21 00:457D             		call 	CompareBaseCode
   22 00:457D             		cp 		n
   23 00:457D             		jr 		nz,UnaryInt32True
   24 00:457D             		jr 		UnaryInt32False
   25 00:457D             #endmacro
   26 00:457D -  -  -  -  
   27 00:457D -  -  -  -  ; ***************************************************************************************
   28 00:457D -  -  -  -  ;
   29 00:457D -  -  -  -  ; 								Return True/False
   30 00:457D -  -  -  -  ;
   31 00:457D -  -  -  -  ; ***************************************************************************************
   32 00:457D -  -  -  -  
   33 00:457D -  -  -  -  UnaryInt32True:	;; [true]
   34 00:457D 3E FF -  -  		ld 		a,255
   35 00:457F 18 01 -  -  		jr 		_Int32Logical
   36 00:4581 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:4581 AF -  -  -  		xor 	a
   38 00:4582 -  -  -  -  _Int32Logical:
   39 00:4582 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4583 67 -  -  -  		ld 		h,a
   41 00:4584 D9 -  -  -  		exx
   42 00:4585 6F -  -  -  		ld 		l,a
   43 00:4586 67 -  -  -  		ld 		h,a
   44 00:4587 D9 -  -  -  		exx
   45 00:4588 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:458A C9 -  -  -  		ret
   47 00:458B -  -  -  -  
   48 00:458B -  -  -  -  ; ***************************************************************************************
   49 00:458B -  -  -  -  ;
   50 00:458B -  -  -  -  ; 										> = < (compare == value)
   51 00:458B -  -  -  -  ;
   52 00:458B -  -  -  -  ; ***************************************************************************************
   53 00:458B -  -  -  -  
   54 00:458B -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:458B CD C1 45 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4594 -  -  -  -  
   57 00:4594 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4594 CD C1 45 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:459D -  -  -  -  
   60 00:459D -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:459D CD C1 45 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:45A6 -  -  -  -  
   63 00:45A6 -  -  -  -  ; ***************************************************************************************
   64 00:45A6 -  -  -  -  ;
   65 00:45A6 -  -  -  -  ; 										> = < (compare <> value)
   66 00:45A6 -  -  -  -  ;
   67 00:45A6 -  -  -  -  ; ***************************************************************************************
   68 00:45A6 -  -  -  -  
   69 00:45A6 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:45A6 CD C1 45 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:45AF -  -  -  -  
   72 00:45AF -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:45AF CD C1 45 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:45B8 -  -  -  -  
   75 00:45B8 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:45B8 CD C1 45 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:45C1 -  -  -  -  
   78 00:45C1 -  -  -  -  ; ***************************************************************************************
   79 00:45C1 -  -  -  -  ;
   80 00:45C1 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:45C1 -  -  -  -  ;
   82 00:45C1 -  -  -  -  ; ***************************************************************************************
   83 00:45C1 -  -  -  -  
   84 00:45C1 -  -  -  -  CompareBaseCode:
   85 00:45C1 CD F8 45 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:45C4 -  -  -  -  
   87 00:45C4 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:45C5 A1 -  -  -  		and 	c
   89 00:45C6 CB 47 -  -  		bit 	CIsString,a 
   90 00:45C8 C2 D7 45 -  		jp 		nz,StringCompare
   91 00:45CB -  -  -  -  
   92 00:45CB 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:45CC B1 -  -  -  		or 		c
   94 00:45CD CB 47 -  -  		bit 	CIsString,a 
   95 00:45CF CA 30 52 -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:45D2 -  -  -  -  
   97 00:45D2 3E 02 C3 A3 
              44 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:45D7 -  -  -  -  ;
   99 00:45D7 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:45D7 -  -  -  -  ;
  101 00:45D7 -  -  -  -  StringCompare:
  102 00:45D7 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:45D8 BE -  -  -  		cp 		(hl)
  104 00:45D9 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:45DB 20 08 -  -  		jr 		nz,_SCLess
  106 00:45DD 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:45DE 23 -  -  -  		inc 	hl
  108 00:45DF FE 20 -  -  		cp 		' '
  109 00:45E1 30 F4 -  -  		jr 		nc,StringCompare
  110 00:45E3 AF -  -  -  		xor 	a 							; return 0.
  111 00:45E4 C9 -  -  -  		ret
  112 00:45E5 -  -  -  -  
  113 00:45E5 -  -  -  -  _SCLess:
  114 00:45E5 3E FF -  -  		ld 		a,$FF
  115 00:45E7 C9 -  -  -  		ret
  116 00:45E8 -  -  -  -  _SCGreater:
  117 00:45E8 3E 01 -  -  		ld 		a,1
  118 00:45EA C9 -  -  -  		ret
  119 00:45EB -  -  -  -  
  120 00:45EB 3E 19 C3 A3 
              44 -  -  -  		ERR_TODO()
  121 00:45F0 -  -  -  -  
  122 00:45F0 -  -  -  -  ; ***************************************************************************************
  123 00:45F0 -  -  -  -  ;
  124 00:45F0 -  -  -  -  ;									Changes and Updates
  125 00:45F0 -  -  -  -  ;
  126 00:45F0 -  -  -  -  ; ***************************************************************************************
  127 00:45F0 -  -  -  -  ;
  128 00:45F0 -  -  -  -  ;		Date			Notes
  129 00:45F0 -  -  -  -  ;		==== 			=====
  130 00:45F0 -  -  -  -  ;
  131 00:45F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:45F0 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:45F0 -  -  -  -  ; ***************************************************************************************
    2 00:45F0 -  -  -  -  ; ***************************************************************************************
    3 00:45F0 -  -  -  -  ;
    4 00:45F0 -  -  -  -  ;		Name : 		utility.asm
    5 00:45F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45F0 -  -  -  -  ;		Reviewed :	No
    8 00:45F0 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:45F0 -  -  -  -  ;
   10 00:45F0 -  -  -  -  ; ***************************************************************************************
   11 00:45F0 -  -  -  -  ; ***************************************************************************************
   12 00:45F0 -  -  -  -  
   13 00:45F0 -  -  -  -  ; ***************************************************************************************
   14 00:45F0 -  -  -  -  ;
   15 00:45F0 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:45F0 -  -  -  -  ;
   17 00:45F0 -  -  -  -  ; ***************************************************************************************
   18 00:45F0 -  -  -  -  
   19 00:45F0 -  -  -  -  SwapHLDE:
   20 00:45F0 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:45F1 D9 -  -  -  			exx
   22 00:45F2 EB -  -  -  			ex 		de,hl
   23 00:45F3 D9 -  -  -  			exx
   24 00:45F4 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:45F5 41 -  -  -  			ld 		b,c
   26 00:45F6 4F -  -  -  			ld 		c,a
   27 00:45F7 C9 -  -  -  			ret
   28 00:45F8 -  -  -  -  
   29 00:45F8 -  -  -  -  ; ***************************************************************************************
   30 00:45F8 -  -  -  -  ;
   31 00:45F8 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:45F8 -  -  -  -  ;
   33 00:45F8 -  -  -  -  ; ***************************************************************************************
   34 00:45F8 -  -  -  -  
   35 00:45F8 -  -  -  -  DereferenceBoth:
   36 00:45F8 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:45FA C4 B3 46 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:45FD CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:45FF C8 -  -  -  			ret 	z
   40 00:4600 CD F0 45 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:4603 CD B3 46 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4606 CD F0 45 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4609 C9 -  -  -  			ret
   44 00:460A -  -  -  -  
   45 00:460A -  -  -  -  ; ***************************************************************************************
   46 00:460A -  -  -  -  ;
   47 00:460A -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:460A -  -  -  -  ;
   49 00:460A -  -  -  -  ; ***************************************************************************************
   50 00:460A -  -  -  -  
   51 00:460A -  -  -  -  NegateHLHL:	
   52 00:460A CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:460C C2 F6 44 -  			jp 		nz,TypeMismatch
   54 00:460F CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4611 C4 B3 46 -  			call 	nz,Dereference 			; if required.
   56 00:4614 CD 57 52 -  			call 	Int32Negate
   57 00:4617 C9 -  -  -  			ret
Listing for file "_build.asm"
   34 00:4618 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4618 -  -  -  -  ; ***************************************************************************************
    2 00:4618 -  -  -  -  ; ***************************************************************************************
    3 00:4618 -  -  -  -  ;
    4 00:4618 -  -  -  -  ;		Name : 		expression.asm
    5 00:4618 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4618 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4618 -  -  -  -  ;		Reviewed :	None
    8 00:4618 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4618 -  -  -  -  ;
   10 00:4618 -  -  -  -  ; ***************************************************************************************
   11 00:4618 -  -  -  -  ; ***************************************************************************************
   12 00:4618 -  -  -  -  
   13 00:4618 -  -  -  -  ; ***************************************************************************************
   14 00:4618 -  -  -  -  ;
   15 00:4618 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4618 -  -  -  -  ;
   17 00:4618 -  -  -  -  ; ***************************************************************************************
   18 00:4618 -  -  -  -  
   19 00:4618 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4618 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4619 -  -  -  -  EvaluateAtPrecedence:
   22 00:4619 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:461A -  -  -  -  		;
   24 00:461A -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:461A -  -  -  -  		;
   26 00:461A CD E3 46 -  		call 	EvaluateTerm 				; get term
   27 00:461D -  -  -  -  		;
   28 00:461D -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:461D -  -  -  -  		;
   30 00:461D D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:461E -  -  -  -  _EAPLoop:
   32 00:461E DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4621 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:4623 D8 -  -  -  		ret 	c
   35 00:4624 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4626 D0 -  -  -  		ret 	nc
   37 00:4627 -  -  -  -  		;
   38 00:4627 -  -  -  -  		; 		Get the precedence.
   39 00:4627 -  -  -  -  		;
   40 00:4627 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:4628 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:462A 21 00 4E -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:462D B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:462E 6F -  -  -  		ld 		l,a
   45 00:462F 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4630 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4631 -  -  -  -  		;
   48 00:4631 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4631 -  -  -  -  		;
   50 00:4631 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4632 BB -  -  -  		cp 		e
   52 00:4633 D0 -  -  -  		ret 	nc
   53 00:4634 -  -  -  -  
   54 00:4634 -  -  -  -  		;
   55 00:4634 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4634 -  -  -  -  		;
   57 00:4634 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4635 -  -  -  -  		;
   59 00:4635 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:4638 F5 -  -  -  		push 	af
   61 00:4639 -  -  -  -  		;
   62 00:4639 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:463A D9 -  -  -  		exx 								; save HL'
   64 00:463B E5 -  -  -  		push 	hl
   65 00:463C D9 -  -  -  		exx 								
   66 00:463D E5 -  -  -  		push 	hl 							; save HL
   67 00:463E -  -  -  -  		;
   68 00:463E DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4640 -  -  -  -  		;
   70 00:4640 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4640 -  -  -  -  		;
   72 00:4640 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4641 CD 19 46 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4644 -  -  -  -  		;
   75 00:4644 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4644 -  -  -  -  		;
   77 00:4644 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4645 -  -  -  -  
   79 00:4645 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4646 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4647 D9 -  -  -  		exx
   82 00:4648 EB -  -  -  		ex 		de,hl
   83 00:4649 E1 -  -  -  		pop 	hl
   84 00:464A D9 -  -  -  		exx
   85 00:464B C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:464C 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:464D -  -  -  -  		;
   88 00:464D -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:464D -  -  -  -  		; 		is in B (type) DE'DE
   90 00:464D -  -  -  -  		;
   91 00:464D F1 -  -  -  		pop 	af 							; get operator in A
   92 00:464E -  -  -  -  		;
   93 00:464E -  -  -  -  		; 		Call the binary operator in A.
   94 00:464E -  -  -  -  		;
   95 00:464E D5 -  -  -  		push 	de
   96 00:464F E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4650 E6 7F 21 00 
              00 6F 29 11 
              26 50 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4662 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4663 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4664 CD 60 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4667 -  -  -  -  		;
  102 00:4667 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:4668 -  -  -  -  		;
  104 00:4668 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:466A -  -  -  -  
  106 00:466A -  -  -  -  ; ***************************************************************************************
  107 00:466A -  -  -  -  ;
  108 00:466A -  -  -  -  ;									Changes and Updates
  109 00:466A -  -  -  -  ;
  110 00:466A -  -  -  -  ; ***************************************************************************************
  111 00:466A -  -  -  -  ;
  112 00:466A -  -  -  -  ;		Date			Notes
  113 00:466A -  -  -  -  ;		==== 			=====
  114 00:466A -  -  -  -  ;
  115 00:466A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:466A -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:466A -  -  -  -  ; ***************************************************************************************
    2 00:466A -  -  -  -  ; ***************************************************************************************
    3 00:466A -  -  -  -  ;
    4 00:466A -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:466A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:466A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:466A -  -  -  -  ;		Reviewed :	No
    8 00:466A -  -  -  -  ;		Purpose :	Expression support functions
    9 00:466A -  -  -  -  ;
   10 00:466A -  -  -  -  ; ***************************************************************************************
   11 00:466A -  -  -  -  ; ***************************************************************************************
   12 00:466A -  -  -  -  
   13 00:466A -  -  -  -  ; ***************************************************************************************
   14 00:466A -  -  -  -  ;
   15 00:466A -  -  -  -  ; 								Evaluate an integer term
   16 00:466A -  -  -  -  ;
   17 00:466A -  -  -  -  ; ***************************************************************************************
   18 00:466A -  -  -  -  
   19 00:466A -  -  -  -  EvaluateIntegerTerm:
   20 00:466A CD E3 46 -  		call 	EvaluateTerm
   21 00:466D CD B3 46 -  		call 	DeReference
   22 00:4670 CB 41 -  -  		bit 	CIsString,c
   23 00:4672 C8 -  -  -  		ret 	z
   24 00:4673 C3 F6 44 -  		jp 		TypeMismatch
   25 00:4676 -  -  -  -  
   26 00:4676 -  -  -  -  ; ***************************************************************************************
   27 00:4676 -  -  -  -  ;
   28 00:4676 -  -  -  -  ; 								Evaluate a string term
   29 00:4676 -  -  -  -  ;
   30 00:4676 -  -  -  -  ; ***************************************************************************************
   31 00:4676 -  -  -  -  
   32 00:4676 -  -  -  -  EvaluateStringTerm:
   33 00:4676 CD E3 46 -  		call 	EvaluateTerm
   34 00:4679 CD B3 46 -  		call 	DeReference
   35 00:467C CB 41 -  -  		bit 	CIsString,c
   36 00:467E C0 -  -  -  		ret 	nz
   37 00:467F C3 F6 44 -  		jp 		TypeMismatch
   38 00:4682 -  -  -  -  
   39 00:4682 -  -  -  -  ; ***************************************************************************************
   40 00:4682 -  -  -  -  ;
   41 00:4682 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4682 -  -  -  -  ;
   43 00:4682 -  -  -  -  ; ***************************************************************************************
   44 00:4682 -  -  -  -  
   45 00:4682 -  -  -  -  EvaluateValue:
   46 00:4682 CD 18 46 -  		call 	EvaluateAtPrecedence0
   47 00:4685 C3 B3 46 -  		jp 		Dereference
   48 00:4688 -  -  -  -  
   49 00:4688 -  -  -  -  ; ***************************************************************************************
   50 00:4688 -  -  -  -  ;
   51 00:4688 -  -  -  -  ; 									Evaluate a number
   52 00:4688 -  -  -  -  ;
   53 00:4688 -  -  -  -  ; ***************************************************************************************
   54 00:4688 -  -  -  -  
   55 00:4688 -  -  -  -  EvaluateInteger:
   56 00:4688 CD 82 46 -  		call 	EvaluateValue
   57 00:468B CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:468D C8 -  -  -  		ret 	z
   59 00:468E C3 F6 44 -  		jp 		TypeMismatch
   60 00:4691 -  -  -  -  
   61 00:4691 -  -  -  -  ; ***************************************************************************************
   62 00:4691 -  -  -  -  ;
   63 00:4691 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4691 -  -  -  -  ;
   65 00:4691 -  -  -  -  ; ***************************************************************************************
   66 00:4691 -  -  -  -  
   67 00:4691 -  -  -  -  Evaluate8BitInteger:
   68 00:4691 CD 88 46 -  		call 	EvaluateInteger
   69 00:4694 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4695 7C -  -  -  		ld 		a,h
   71 00:4696 B5 -  -  -  		or 		l
   72 00:4697 D9 -  -  -  		exx 	
   73 00:4698 B4 -  -  -  		or 		h
   74 00:4699 C2 FB 44 -  		jp 		nz,BadValue
   75 00:469C 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:469D C9 -  -  -  		ret
   77 00:469E -  -  -  -  		
   78 00:469E -  -  -  -  ; ***************************************************************************************
   79 00:469E -  -  -  -  ;
   80 00:469E -  -  -  -  ; 									Evaluate a string
   81 00:469E -  -  -  -  ;
   82 00:469E -  -  -  -  ; ***************************************************************************************
   83 00:469E -  -  -  -  
   84 00:469E -  -  -  -  EvaluateString:
   85 00:469E CD 82 46 -  		call 	EvaluateValue
   86 00:46A1 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:46A3 CA F6 44 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:46A6 C9 -  -  -  		ret
   89 00:46A7 -  -  -  -  
   90 00:46A7 -  -  -  -  ; ***************************************************************************************
   91 00:46A7 -  -  -  -  ;
   92 00:46A7 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:46A7 -  -  -  -  ;
   94 00:46A7 -  -  -  -  ; ***************************************************************************************
   95 00:46A7 -  -  -  -  
   96 00:46A7 -  -  -  -  Return8BitConstant:
   97 00:46A7 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:46AA 6F -  -  -  		ld 		l,a
   99 00:46AB -  -  -  -  Return16BitConstant:
  100 00:46AB D9 -  -  -  		exx 								; clear HL'
  101 00:46AC 21 00 00 -  		ld 		hl,0
  102 00:46AF D9 -  -  -  		exx
  103 00:46B0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:46B2 C9 -  -  -  		ret
  105 00:46B3 -  -  -  -  
  106 00:46B3 -  -  -  -  ; ***************************************************************************************
  107 00:46B3 -  -  -  -  ;
  108 00:46B3 -  -  -  -  ;									Changes and Updates
  109 00:46B3 -  -  -  -  ;
  110 00:46B3 -  -  -  -  ; ***************************************************************************************
  111 00:46B3 -  -  -  -  ;
  112 00:46B3 -  -  -  -  ;		Date			Notes
  113 00:46B3 -  -  -  -  ;		==== 			=====
  114 00:46B3 -  -  -  -  ;
  115 00:46B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:46B3 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:46B3 -  -  -  -  ; ***************************************************************************************
    2 00:46B3 -  -  -  -  ; ***************************************************************************************
    3 00:46B3 -  -  -  -  ;
    4 00:46B3 -  -  -  -  ;		Name : 		reference.asm
    5 00:46B3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46B3 -  -  -  -  ;		Date : 		1st May 2022
    7 00:46B3 -  -  -  -  ;		Reviewed :	No
    8 00:46B3 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:46B3 -  -  -  -  ;
   10 00:46B3 -  -  -  -  ; ***************************************************************************************
   11 00:46B3 -  -  -  -  ; ***************************************************************************************
   12 00:46B3 -  -  -  -  
   13 00:46B3 -  -  -  -  ; ***************************************************************************************
   14 00:46B3 -  -  -  -  ;
   15 00:46B3 -  -  -  -  ; 									Dereference HL'HL C
   16 00:46B3 -  -  -  -  ;
   17 00:46B3 -  -  -  -  ; ***************************************************************************************
   18 00:46B3 -  -  -  -  
   19 00:46B3 -  -  -  -  Dereference:
   20 00:46B3 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:46B5 C8 -  -  -  		ret 	z
   22 00:46B6 -  -  -  -  
   23 00:46B6 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:46B8 -  -  -  -  		
   25 00:46B8 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:46BA 20 20 -  -  		jr 		nz,_DRInternal
   27 00:46BC -  -  -  -  
   28 00:46BC CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:46BE 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:46C0 -  -  -  -  
   31 00:46C0 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:46C1 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:46C5 D9 -  -  -  		exx
   34 00:46C6 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:46C7 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:46C8 23 -  -  -  		inc  	hl
   37 00:46C9 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:46CD D9 -  -  -  		exx 								; fix back
   39 00:46CE C9 -  -  -  		ret
   40 00:46CF -  -  -  -  
   41 00:46CF -  -  -  -  _DeRefByte:		
   42 00:46CF 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:46D0 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:46D3 6F -  -  -  		ld	 	l,a
   45 00:46D4 D9 -  -  -  		exx
   46 00:46D5 21 00 00 -  		ld 		hl,$0000
   47 00:46D8 D9 -  -  -  		exx
   48 00:46D9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:46DB C9 -  -  -  		ret
   50 00:46DC -  -  -  -  
   51 00:46DC -  -  -  -  _DRInternal:
   52 00:46DC 3E 06 C3 A3 
              44 -  -  -  		ERR_DISABLED
   53 00:46E1 -  -  -  -  
   54 00:46E1 -  -  -  -  ; ***************************************************************************************
   55 00:46E1 -  -  -  -  ;
   56 00:46E1 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:46E1 -  -  -  -  ;
   58 00:46E1 -  -  -  -  ; ***************************************************************************************
   59 00:46E1 -  -  -  -  
   60 00:46E1 -  -  -  -  DRConvertHLHLToAddress:
   61 00:46E1 -  -  -  -  		#ifdef EZ80
   62 00:46E1             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:46E1             		exx
   64 00:46E1             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:46E1             		ld 		hl,$0000 					; zero HL'
   66 00:46E1             		exx
   67 00:46E1             		ld 		hl,(AConvert) 				; load UHL
   68 00:46E1             		#endif
   69 00:46E1 C9 -  -  -  		ret
   70 00:46E2 -  -  -  -  
   71 00:46E2 -  -  -  -  ; ***************************************************************************************
   72 00:46E2 -  -  -  -  ;
   73 00:46E2 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:46E2 -  -  -  -  ;
   75 00:46E2 -  -  -  -  ; ***************************************************************************************
   76 00:46E2 -  -  -  -  
   77 00:46E2 -  -  -  -  DRConvertAddressToHLHL:
   78 00:46E2 -  -  -  -  		#ifdef EZ80
   79 00:46E2             		ld 		(AConvert),hl
   80 00:46E2             		ld 		hl,$0000
   81 00:46E2             		ld 		(AConvert+3),hl
   82 00:46E2             		exx
   83 00:46E2             		ld 		hl,(AConvert+2)
   84 00:46E2             		exx
   85 00:46E2             		xor 	a
   86 00:46E2             		ld 		(AConvert+2),a
   87 00:46E2             		ld 		hl,(AConvert)
   88 00:46E2             		#endif
   89 00:46E2 C9 -  -  -  		ret
   90 00:46E3 -  -  -  -  
   91 00:46E3 -  -  -  -  ; ***************************************************************************************
   92 00:46E3 -  -  -  -  ;
   93 00:46E3 -  -  -  -  ;									Changes and Updates
   94 00:46E3 -  -  -  -  ;
   95 00:46E3 -  -  -  -  ; ***************************************************************************************
   96 00:46E3 -  -  -  -  ;
   97 00:46E3 -  -  -  -  ;		Date			Notes
   98 00:46E3 -  -  -  -  ;		==== 			=====
   99 00:46E3 -  -  -  -  ;
  100 00:46E3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:46E3 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:46E3 -  -  -  -  ; ***************************************************************************************
    2 00:46E3 -  -  -  -  ; ***************************************************************************************
    3 00:46E3 -  -  -  -  ;
    4 00:46E3 -  -  -  -  ;		Name : 		term.asm
    5 00:46E3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46E3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46E3 -  -  -  -  ;		Reviewed :	No
    8 00:46E3 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:46E3 -  -  -  -  ;
   10 00:46E3 -  -  -  -  ; ***************************************************************************************
   11 00:46E3 -  -  -  -  ; ***************************************************************************************
   12 00:46E3 -  -  -  -  
   13 00:46E3 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:46E3             		add_hlhl_16
   15 00:46E3             		exx
   16 00:46E3             		adc_hlhl_16
   17 00:46E3             		exx
   18 00:46E3             #endmacro
   19 00:46E3 -  -  -  -  
   20 00:46E3 -  -  -  -  ; ***************************************************************************************
   21 00:46E3 -  -  -  -  ;
   22 00:46E3 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:46E3 -  -  -  -  ;
   24 00:46E3 -  -  -  -  ; ***************************************************************************************
   25 00:46E3 -  -  -  -  ;
   26 00:46E3 -  -  -  -  ; 		Terms can be:
   27 00:46E3 -  -  -  -  ;
   28 00:46E3 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:46E3 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:46E3 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:46E3 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:46E3 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:46E3 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:46E3 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:46E3 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:46E3 -  -  -  -  ; 														reference of some sort.
   37 00:46E3 -  -  -  -  ;
   38 00:46E3 -  -  -  -  ; ***************************************************************************************
   39 00:46E3 -  -  -  -  
   40 00:46E3 -  -  -  -  EvaluateTerm:		
   41 00:46E3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:46E5 D9 -  -  -  		exx
   43 00:46E6 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:46E9 D9 -  -  -  		exx
   45 00:46EA 21 00 00 -  		ld 		hl,$0000		
   46 00:46ED -  -  -  -  		;
   47 00:46ED DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:46F0 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:46F2 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:46F4 DA 92 47 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:46F7 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:46F9 C2 41 47 -  		jp 		nz,_ETFoundKeyword 
   53 00:46FC -  -  -  -  		;
   54 00:46FC -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:46FC -  -  -  -  		;
   56 00:46FC -  -  -  -  _ETIntegerConstant:
   57 00:46FC -  -  -  -  		;
   58 00:46FC -  -  -  -  _ETIntegerLoop:		
   59 00:46FC DD 7E 00 -  		ld 		a,(ix+0)
   60 00:46FF E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4701 B5 -  -  -  		or 		l 							; or into L
   62 00:4702 6F -  -  -  		ld 		l,a
   63 00:4703 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4705 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:4708 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:470A FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:470C D8 -  -  -  		ret 	c
   68 00:470D -  -  -  -  
   69 00:470D 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4712 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4717 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:471C 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4721 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4726 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:472B -  -  -  -  
   76 00:472B 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:472D -  -  -  -  		;
   78 00:472D -  -  -  -  		; 		Found the $3F string marker.
   79 00:472D -  -  -  -  		;
   80 00:472D -  -  -  -  _ETStringMarker:		
   81 00:472D DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:472F DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4731 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:4733 E1 -  -  -  		pop 	hl
   85 00:4734 11 00 00 -  		ld 		de,$0000
   86 00:4737 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:473A DD 19 -  -  		add 	ix,de
   88 00:473C DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:473E 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4740 C9 -  -  -  		ret
   91 00:4741 -  -  -  -  		;
   92 00:4741 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4741 -  -  -  -  		;
   94 00:4741 -  -  -  -  _ETFoundKeyword:
   95 00:4741 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:4743 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4745 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4747 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:4749 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:474B -  -  -  -  		;
  101 00:474B -  -  -  -  		;		Unary group 0
  102 00:474B -  -  -  -  		;
  103 00:474B E6 7F 21 00 
              00 6F 29 11 
              26 50 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:475D C3 60 40 -  		jp 		JumpCode 					; and go there.
  105 00:4760 -  -  -  -  
  106 00:4760 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4760 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4762 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4764 -  -  -  -  		;
  110 00:4764 -  -  -  -  		; 		- term
  111 00:4764 -  -  -  -  		;
  112 00:4764 CD 6A 46 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4767 CD 0A 46 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:476A C9 -  -  -  		ret
  115 00:476B -  -  -  -  		;
  116 00:476B -  -  -  -  		;		! ? indirection check
  117 00:476B -  -  -  -  		;
  118 00:476B -  -  -  -  _ETCheckIndirection:	
  119 00:476B FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:476D 28 05 -  -  		jr 		z,_ETIndirection
  121 00:476F FE 83 -  -  		cp 		KWD_PLING
  122 00:4771 C2 00 45 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4774 -  -  -  -  		;
  124 00:4774 -  -  -  -  		; 		! ? indirection
  125 00:4774 -  -  -  -  		;
  126 00:4774 -  -  -  -  _ETIndirection:
  127 00:4774 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4775 CD E3 46 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:4778 CD B3 46 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:477B CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:477D 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:477F CD E1 46 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4782 F1 -  -  -  		pop 	af 							; get type back
  134 00:4783 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4785 CB F9 -  -  		set 	CIsReference,c
  136 00:4787 FE 83 -  -  		cp 		KWD_PLING
  137 00:4789 C8 -  -  -  		ret 	z
  138 00:478A CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:478C C9 -  -  -  		ret
  140 00:478D -  -  -  -  _ETStringIndirect:
  141 00:478D 3E 02 C3 A3 
              44 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4792 -  -  -  -  		;
  143 00:4792 -  -  -  -  		; 		Found an identifier.
  144 00:4792 -  -  -  -  		;
  145 00:4792 -  -  -  -  _ETVariable:
  146 00:4792 CD FC 4C -  		call 	FindVariable 				; find the variable.
  147 00:4795 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4796 3E 1A C3 A3 
              44 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:479B -  -  -  -  		
  150 00:479B -  -  -  -  ; ***************************************************************************************
  151 00:479B -  -  -  -  ;
  152 00:479B -  -  -  -  ;									Changes and Updates
  153 00:479B -  -  -  -  ;
  154 00:479B -  -  -  -  ; ***************************************************************************************
  155 00:479B -  -  -  -  ;
  156 00:479B -  -  -  -  ;		Date			Notes
  157 00:479B -  -  -  -  ;		==== 			=====
  158 00:479B -  -  -  -  ;
  159 00:479B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:479B -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:479B -  -  -  -  ; ***************************************************************************************
    2 00:479B -  -  -  -  ; ***************************************************************************************
    3 00:479B -  -  -  -  ;
    4 00:479B -  -  -  -  ;		Name : 		abs.asm
    5 00:479B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:479B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:479B -  -  -  -  ;		Reviewed :	No
    8 00:479B -  -  -  -  ;		Purpose :	Absolute value 
    9 00:479B -  -  -  -  ;
   10 00:479B -  -  -  -  ; ***************************************************************************************
   11 00:479B -  -  -  -  ; ***************************************************************************************
   12 00:479B -  -  -  -  
   13 00:479B -  -  -  -  ; ***************************************************************************************
   14 00:479B -  -  -  -  ;
   15 00:479B -  -  -  -  ;								abs( unary function
   16 00:479B -  -  -  -  ;
   17 00:479B -  -  -  -  ; ***************************************************************************************
   18 00:479B -  -  -  -  
   19 00:479B -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:479B CD 6A 46 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:479E D9 -  -  -  		exx 								; test MSB
   22 00:479F CB 7C -  -  		bit 	7,h
   23 00:47A1 D9 -  -  -  		exx
   24 00:47A2 C4 0A 46 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:47A5 C9 -  -  -  		ret
   26 00:47A6 -  -  -  -  
   27 00:47A6 -  -  -  -  ; ***************************************************************************************
   28 00:47A6 -  -  -  -  ;
   29 00:47A6 -  -  -  -  ;									Changes and Updates
   30 00:47A6 -  -  -  -  ;
   31 00:47A6 -  -  -  -  ; ***************************************************************************************
   32 00:47A6 -  -  -  -  ;
   33 00:47A6 -  -  -  -  ;		Date			Notes
   34 00:47A6 -  -  -  -  ;		==== 			=====
   35 00:47A6 -  -  -  -  ;
   36 00:47A6 -  -  -  -  ; ***************************************************************************************
   37 00:47A6 -  -  -  -  		
Listing for file "_build.asm"
   39 00:47A6 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:47A6 -  -  -  -  ; ***************************************************************************************
    2 00:47A6 -  -  -  -  ; ***************************************************************************************
    3 00:47A6 -  -  -  -  ;
    4 00:47A6 -  -  -  -  ;		Name : 		asc.asm
    5 00:47A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47A6 -  -  -  -  ;		Reviewed :	No
    8 00:47A6 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:47A6 -  -  -  -  ;
   10 00:47A6 -  -  -  -  ; ***************************************************************************************
   11 00:47A6 -  -  -  -  ; ***************************************************************************************
   12 00:47A6 -  -  -  -  
   13 00:47A6 -  -  -  -  ; ***************************************************************************************
   14 00:47A6 -  -  -  -  ;
   15 00:47A6 -  -  -  -  ;								Asc unary function
   16 00:47A6 -  -  -  -  ;
   17 00:47A6 -  -  -  -  ; ***************************************************************************************
   18 00:47A6 -  -  -  -  
   19 00:47A6 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:47A6 CD 76 46 -  		call	EvaluateStringTerm			; Get string
   21 00:47A9 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:47AA C3 A7 46 -  		jp 		Return8BitConstant
   23 00:47AD -  -  -  -  
   24 00:47AD -  -  -  -  ; ***************************************************************************************
   25 00:47AD -  -  -  -  ;
   26 00:47AD -  -  -  -  ;									Changes and Updates
   27 00:47AD -  -  -  -  ;
   28 00:47AD -  -  -  -  ; ***************************************************************************************
   29 00:47AD -  -  -  -  ;
   30 00:47AD -  -  -  -  ;		Date			Notes
   31 00:47AD -  -  -  -  ;		==== 			=====
   32 00:47AD -  -  -  -  ;
   33 00:47AD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:47AD -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:47AD -  -  -  -  ; ***************************************************************************************
    2 00:47AD -  -  -  -  ; ***************************************************************************************
    3 00:47AD -  -  -  -  ;
    4 00:47AD -  -  -  -  ;		Name : 		chr.asm
    5 00:47AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47AD -  -  -  -  ;		Reviewed :	No
    8 00:47AD -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:47AD -  -  -  -  ;
   10 00:47AD -  -  -  -  ; ***************************************************************************************
   11 00:47AD -  -  -  -  ; ***************************************************************************************
   12 00:47AD -  -  -  -  
   13 00:47AD -  -  -  -  ; ***************************************************************************************
   14 00:47AD -  -  -  -  ;
   15 00:47AD -  -  -  -  ;								Chr$() unary function
   16 00:47AD -  -  -  -  ;
   17 00:47AD -  -  -  -  ; ***************************************************************************************
   18 00:47AD -  -  -  -  
   19 00:47AD -  -  -  -  Unary_Chr:	;; [chr]
   20 00:47AD CD 7E 44 -  		call 	CheckDollar
   21 00:47B0 CD 6A 46 -  		call 	EvaluateIntegerTerm
   22 00:47B3 7D -  -  -  		ld 		a,l 						; get character
   23 00:47B4 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:47B6 21 A1 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:47B9 36 0D -  -  		ld 		(hl),13
   26 00:47BB 2B -  -  -  		dec 	hl
   27 00:47BC 77 -  -  -  		ld 		(hl),a
   28 00:47BD C9 -  -  -  		ret
   29 00:47BE -  -  -  -  
   30 00:47BE -  -  -  -  ; ***************************************************************************************
   31 00:47BE -  -  -  -  ;
   32 00:47BE -  -  -  -  ;									Changes and Updates
   33 00:47BE -  -  -  -  ;
   34 00:47BE -  -  -  -  ; ***************************************************************************************
   35 00:47BE -  -  -  -  ;
   36 00:47BE -  -  -  -  ;		Date			Notes
   37 00:47BE -  -  -  -  ;		==== 			=====
   38 00:47BE -  -  -  -  ;
   39 00:47BE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:47BE -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:47BE -  -  -  -  ; ***************************************************************************************
    2 00:47BE -  -  -  -  ; ***************************************************************************************
    3 00:47BE -  -  -  -  ;
    4 00:47BE -  -  -  -  ;		Name : 		len.asm
    5 00:47BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47BE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47BE -  -  -  -  ;		Reviewed :	None
    8 00:47BE -  -  -  -  ;		Purpose :	String Length
    9 00:47BE -  -  -  -  ;
   10 00:47BE -  -  -  -  ; ***************************************************************************************
   11 00:47BE -  -  -  -  ; ***************************************************************************************
   12 00:47BE -  -  -  -  
   13 00:47BE -  -  -  -  ; ***************************************************************************************
   14 00:47BE -  -  -  -  ;
   15 00:47BE -  -  -  -  ;								Len unary function
   16 00:47BE -  -  -  -  ;
   17 00:47BE -  -  -  -  ; ***************************************************************************************
   18 00:47BE -  -  -  -  
   19 00:47BE -  -  -  -  Unary_Len:	;; [len]
   20 00:47BE CD 76 46 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:47C1 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:47C2 CD 81 45 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:47C5 -  -  -  -  _ULCount:
   24 00:47C5 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:47C6 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:47C8 D8 -  -  -  		ret 	c
   27 00:47C9 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:47CA 13 -  -  -  		inc 	de
   29 00:47CB 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:47CD -  -  -  -  
   31 00:47CD -  -  -  -  ; ***************************************************************************************
   32 00:47CD -  -  -  -  ;
   33 00:47CD -  -  -  -  ;									Changes and Updates
   34 00:47CD -  -  -  -  ;
   35 00:47CD -  -  -  -  ; ***************************************************************************************
   36 00:47CD -  -  -  -  ;
   37 00:47CD -  -  -  -  ;		Date			Notes
   38 00:47CD -  -  -  -  ;		==== 			=====
   39 00:47CD -  -  -  -  ;
   40 00:47CD -  -  -  -  ; ***************************************************************************************
   41 00:47CD -  -  -  -  		
Listing for file "_build.asm"
   42 00:47CD -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:47CD -  -  -  -  ; ***************************************************************************************
    2 00:47CD -  -  -  -  ; ***************************************************************************************
    3 00:47CD -  -  -  -  ;
    4 00:47CD -  -  -  -  ;		Name : 		makestring.asm
    5 00:47CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47CD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47CD -  -  -  -  ;		Reviewed :	No
    8 00:47CD -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:47CD -  -  -  -  ;
   10 00:47CD -  -  -  -  ; ***************************************************************************************
   11 00:47CD -  -  -  -  ; ***************************************************************************************
   12 00:47CD -  -  -  -  
   13 00:47CD -  -  -  -  ; ***************************************************************************************
   14 00:47CD -  -  -  -  ;
   15 00:47CD -  -  -  -  ;								Str$() unary function
   16 00:47CD -  -  -  -  ;
   17 00:47CD -  -  -  -  ; ***************************************************************************************
   18 00:47CD -  -  -  -  
   19 00:47CD -  -  -  -  Unary_MkStr:	;; [$]
   20 00:47CD CD 6A 46 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:47D0 CD E1 46 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:47D3 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:47D5 C9 -  -  -  		ret
   24 00:47D6 -  -  -  -  
   25 00:47D6 -  -  -  -  ; ***************************************************************************************
   26 00:47D6 -  -  -  -  ;
   27 00:47D6 -  -  -  -  ;									Changes and Updates
   28 00:47D6 -  -  -  -  ;
   29 00:47D6 -  -  -  -  ; ***************************************************************************************
   30 00:47D6 -  -  -  -  ;
   31 00:47D6 -  -  -  -  ;		Date			Notes
   32 00:47D6 -  -  -  -  ;		==== 			=====
   33 00:47D6 -  -  -  -  ;
   34 00:47D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:47D6 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:47D6 -  -  -  -  ; ***************************************************************************************
    2 00:47D6 -  -  -  -  ; ***************************************************************************************
    3 00:47D6 -  -  -  -  ;
    4 00:47D6 -  -  -  -  ;		Name : 		not.asm
    5 00:47D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47D6 -  -  -  -  ;		Date : 		5th June 2023
    7 00:47D6 -  -  -  -  ;		Reviewed :	No
    8 00:47D6 -  -  -  -  ;		Purpose :	Logical not
    9 00:47D6 -  -  -  -  ;
   10 00:47D6 -  -  -  -  ; ***************************************************************************************
   11 00:47D6 -  -  -  -  ; ***************************************************************************************
   12 00:47D6 -  -  -  -  
   13 00:47D6 -  -  -  -  ; ***************************************************************************************
   14 00:47D6 -  -  -  -  ;
   15 00:47D6 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:47D6 -  -  -  -  ;
   17 00:47D6 -  -  -  -  ; ***************************************************************************************
   18 00:47D6 -  -  -  -  
   19 00:47D6 -  -  -  -  Unary_Not:		;; [not]
   20 00:47D6 CD 6A 46 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:47D9 CD E0 47 -  		call 	__UNSwap 					; not and swap twice.
   22 00:47DC CD E0 47 -  		call 	__UNSwap		
   23 00:47DF C9 -  -  -  		ret
   24 00:47E0 -  -  -  -  
   25 00:47E0 -  -  -  -  __UNSwap:
   26 00:47E0 7C -  -  -  		ld 		a,h
   27 00:47E1 2F -  -  -  		cpl
   28 00:47E2 67 -  -  -  		ld 		h,a
   29 00:47E3 7D -  -  -  		ld 		a,l
   30 00:47E4 2F -  -  -  		cpl 	
   31 00:47E5 6F -  -  -  		ld 		l,a
   32 00:47E6 D9 -  -  -  		exx
   33 00:47E7 C9 -  -  -  		ret
   34 00:47E8 -  -  -  -  
   35 00:47E8 -  -  -  -  ; ***************************************************************************************
   36 00:47E8 -  -  -  -  ;
   37 00:47E8 -  -  -  -  ;									Changes and Updates
   38 00:47E8 -  -  -  -  ;
   39 00:47E8 -  -  -  -  ; ***************************************************************************************
   40 00:47E8 -  -  -  -  ;
   41 00:47E8 -  -  -  -  ;		Date			Notes
   42 00:47E8 -  -  -  -  ;		==== 			=====
   43 00:47E8 -  -  -  -  ;
   44 00:47E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:47E8 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:47E8 -  -  -  -  ; ***************************************************************************************
    2 00:47E8 -  -  -  -  ; ***************************************************************************************
    3 00:47E8 -  -  -  -  ;
    4 00:47E8 -  -  -  -  ;		Name : 		page.asm
    5 00:47E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47E8 -  -  -  -  ;		Reviewed :	No
    8 00:47E8 -  -  -  -  ;		Purpose :	Various constants.
    9 00:47E8 -  -  -  -  ;
   10 00:47E8 -  -  -  -  ; ***************************************************************************************
   11 00:47E8 -  -  -  -  ; ***************************************************************************************
   12 00:47E8 -  -  -  -  
   13 00:47E8 -  -  -  -  ; ***************************************************************************************
   14 00:47E8 -  -  -  -  ;
   15 00:47E8 -  -  -  -  ;							page unary function (no bracket)
   16 00:47E8 -  -  -  -  ;
   17 00:47E8 -  -  -  -  ; ***************************************************************************************
   18 00:47E8 -  -  -  -  
   19 00:47E8 -  -  -  -  Unary_Page:	;; [page]
   20 00:47E8 2A 34 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:47EB D9 -  -  -  			exx
   22 00:47EC 2A 36 40 -  			ld 		hl,(CodeAddress+2)
   23 00:47EF D9 -  -  -  			exx
   24 00:47F0 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:47F2 C9 -  -  -  			ret
   26 00:47F3 -  -  -  -  
   27 00:47F3 -  -  -  -  ; ***************************************************************************************
   28 00:47F3 -  -  -  -  ;
   29 00:47F3 -  -  -  -  ;									Changes and Updates
   30 00:47F3 -  -  -  -  ;
   31 00:47F3 -  -  -  -  ; ***************************************************************************************
   32 00:47F3 -  -  -  -  ;
   33 00:47F3 -  -  -  -  ;		Date			Notes
   34 00:47F3 -  -  -  -  ;		==== 			=====
   35 00:47F3 -  -  -  -  ;
   36 00:47F3 -  -  -  -  ; ***************************************************************************************
   37 00:47F3 -  -  -  -  			
Listing for file "_build.asm"
   45 00:47F3 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:47F3 -  -  -  -  ; ***************************************************************************************
    2 00:47F3 -  -  -  -  ; ***************************************************************************************
    3 00:47F3 -  -  -  -  ;
    4 00:47F3 -  -  -  -  ;		Name : 		random.asm
    5 00:47F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47F3 -  -  -  -  ;		Reviewed :	No
    8 00:47F3 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:47F3 -  -  -  -  ;
   10 00:47F3 -  -  -  -  ; ***************************************************************************************
   11 00:47F3 -  -  -  -  ; ***************************************************************************************
   12 00:47F3 -  -  -  -  
   13 00:47F3 -  -  -  -  ; ***************************************************************************************
   14 00:47F3 -  -  -  -  ;
   15 00:47F3 -  -  -  -  ;								Random unary function
   16 00:47F3 -  -  -  -  ;
   17 00:47F3 -  -  -  -  ; ***************************************************************************************
   18 00:47F3 -  -  -  -  
   19 00:47F3 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:47F3 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:47F4 CD 6A 46 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:47F7 D9 -  -  -  		exx 								; is it -ve
   23 00:47F8 CB 7C -  -  		bit 	7,h
   24 00:47FA D9 -  -  -  		exx
   25 00:47FB 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:47FD 22 6C 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4800 D9 -  -  -  		exx
   28 00:4801 22 70 40 -  		ld 		(RandomSeed+4),hl
   29 00:4804 D9 -  -  -  		exx
   30 00:4805 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4807 C9 -  -  -  		ret
   32 00:4808 -  -  -  -  _URDontSeed:		
   33 00:4808 -  -  -  -  
   34 00:4808 CD 29 52 -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:480B 28 19 -  -  		jr 		z,_URFail
   36 00:480D E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:480E D9 -  -  -  		exx
   38 00:480F E5 -  -  -  		push 	hl
   39 00:4810 D9 -  -  -  		exx
   40 00:4811 -  -  -  -  		;
   41 00:4811 CD 35 48 -  		call 	URandomHL 					; get random HL'HL
   42 00:4814 D9 -  -  -  		exx
   43 00:4815 CD 35 48 -  		call 	URandomHL
   44 00:4818 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:481A D9 -  -  -  		exx
   46 00:481B -  -  -  -  		;
   47 00:481B D9 -  -  -  		exx 								; restore range.
   48 00:481C D1 -  -  -  		pop 	de
   49 00:481D D9 -  -  -  		exx
   50 00:481E D1 -  -  -  		pop 	de
   51 00:481F -  -  -  -  		;
   52 00:481F CD D5 50 -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4822 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:4823 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4825 C9 -  -  -  		ret
   56 00:4826 -  -  -  -  _URFail:
   57 00:4826 3E 03 C3 A3 
              44 -  -  -  		ERR_BADVALUE
   58 00:482B -  -  -  -  ; ***************************************************************************************
   59 00:482B -  -  -  -  ;
   60 00:482B -  -  -  -  ; 									Push RNG off zero
   61 00:482B -  -  -  -  ;
   62 00:482B -  -  -  -  ; ***************************************************************************************
   63 00:482B -  -  -  -  
   64 00:482B -  -  -  -  UnaryRandomInitialise:
   65 00:482B 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:482D -  -  -  -  _URILoop:
   67 00:482D C5 -  -  -  		push 	bc
   68 00:482E CD 35 48 -  		call 	URandomHL
   69 00:4831 C1 -  -  -  		pop 	bc
   70 00:4832 10 F9 -  -  		djnz 	_URILoop
   71 00:4834 C9 -  -  -  		ret
   72 00:4835 -  -  -  -  
   73 00:4835 -  -  -  -  ; ***************************************************************************************
   74 00:4835 -  -  -  -  ;
   75 00:4835 -  -  -  -  ;							16 bit random number generator
   76 00:4835 -  -  -  -  ;
   77 00:4835 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4835 -  -  -  -  ;		Actual author unspecified.
   79 00:4835 -  -  -  -  ;
   80 00:4835 -  -  -  -  ; ***************************************************************************************
   81 00:4835 -  -  -  -  
   82 00:4835 -  -  -  -  URandomHL:
   83 00:4835 2A 6C 40 -  	    ld 		hl,(RandomSeed)
   84 00:4838 ED 5B 70 40 	    ld 		de,(RandomSeed+4)
   85 00:483C 44 -  -  -  	    ld 		b,h
   86 00:483D 4D -  -  -  	    ld 		c,l
   87 00:483E 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:4843 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:4848 2C -  -  -  	    inc 	l
   90 00:4849 09 -  -  -  	    add 	hl,bc
   91 00:484A 22 6C 40 -  	    ld 		(RandomSeed),hl
   92 00:484D 2A 70 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:4850 ED 5A -  -  	    adc 	hl,de
   94 00:4852 22 70 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4855 EB -  -  -  	    ex 		de,hl
   96 00:4856 2A 74 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:4859 ED 4B 78 40 	    ld 		bc,(RandomSeed+12)
   98 00:485D 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4862 ED 43 78 40 	    ld 		(RandomSeed+12),bc
  100 00:4866 9F -  -  -  	    sbc 	a,a
  101 00:4867 E6 C5 -  -  	    and 	%11000101
  102 00:4869 AD -  -  -  	    xor 	l
  103 00:486A 6F -  -  -  	    ld 		l,a
  104 00:486B 22 74 40 -  	    ld 		(RandomSeed+8),hl
  105 00:486E EB -  -  -  	    ex 		de,hl
  106 00:486F 09 -  -  -  	    add 	hl,bc
  107 00:4870 C9 -  -  -  	    ret		
  108 00:4871 -  -  -  -  
  109 00:4871 -  -  -  -  ; ***************************************************************************************
  110 00:4871 -  -  -  -  ;
  111 00:4871 -  -  -  -  ;									Changes and Updates
  112 00:4871 -  -  -  -  ;
  113 00:4871 -  -  -  -  ; ***************************************************************************************
  114 00:4871 -  -  -  -  ;
  115 00:4871 -  -  -  -  ;		Date			Notes
  116 00:4871 -  -  -  -  ;		==== 			=====
  117 00:4871 -  -  -  -  ;
  118 00:4871 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:4871 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4871 -  -  -  -  ; ***************************************************************************************
    2 00:4871 -  -  -  -  ; ***************************************************************************************
    3 00:4871 -  -  -  -  ;
    4 00:4871 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4871 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4871 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4871 -  -  -  -  ;		Reviewed :	No
    8 00:4871 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4871 -  -  -  -  ;
   10 00:4871 -  -  -  -  ; ***************************************************************************************
   11 00:4871 -  -  -  -  ; ***************************************************************************************
   12 00:4871 -  -  -  -  
   13 00:4871 -  -  -  -  ; ***************************************************************************************
   14 00:4871 -  -  -  -  ;
   15 00:4871 -  -  -  -  ;								sgn unary function
   16 00:4871 -  -  -  -  ;
   17 00:4871 -  -  -  -  ; ***************************************************************************************
   18 00:4871 -  -  -  -  
   19 00:4871 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4871 CD 6A 46 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4874 CD 29 52 -  		call 	Int32Zero 					; integer sgn() code
   22 00:4877 CA 81 45 -  		jp 		z,UnaryInt32False
   23 00:487A D9 -  -  -  		exx
   24 00:487B CB 7C -  -  		bit 	7,h
   25 00:487D D9 -  -  -  		exx
   26 00:487E C2 7D 45 -  		jp 		nz,UnaryInt32True
   27 00:4881 3E 01 -  -  		ld 		a,1
   28 00:4883 C3 A7 46 -  		jp 		Return8BitConstant
   29 00:4886 -  -  -  -  
   30 00:4886 -  -  -  -  ; ***************************************************************************************
   31 00:4886 -  -  -  -  ;
   32 00:4886 -  -  -  -  ;									Changes and Updates
   33 00:4886 -  -  -  -  ;
   34 00:4886 -  -  -  -  ; ***************************************************************************************
   35 00:4886 -  -  -  -  ;
   36 00:4886 -  -  -  -  ;		Date			Notes
   37 00:4886 -  -  -  -  ;		==== 			=====
   38 00:4886 -  -  -  -  ;
   39 00:4886 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:4886 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4886 -  -  -  -  ; ***************************************************************************************
    2 00:4886 -  -  -  -  ; ***************************************************************************************
    3 00:4886 -  -  -  -  ;
    4 00:4886 -  -  -  -  ;		Name : 		simple.asm
    5 00:4886 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4886 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4886 -  -  -  -  ;		Reviewed :	No
    8 00:4886 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4886 -  -  -  -  ;
   10 00:4886 -  -  -  -  ; ***************************************************************************************
   11 00:4886 -  -  -  -  ; ***************************************************************************************
   12 00:4886 -  -  -  -  
   13 00:4886 -  -  -  -  ; ***************************************************************************************
   14 00:4886 -  -  -  -  ;
   15 00:4886 -  -  -  -  ;								( unary function (think about it)
   16 00:4886 -  -  -  -  ;
   17 00:4886 -  -  -  -  ; ***************************************************************************************
   18 00:4886 -  -  -  -  
   19 00:4886 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4886 CD 18 46 -  		call 	EvaluateAtPrecedence0
   21 00:4889 C3 71 44 -  		jp  	CheckRightBracket
   22 00:488C -  -  -  -  
   23 00:488C -  -  -  -  ; ***************************************************************************************
   24 00:488C -  -  -  -  ;
   25 00:488C -  -  -  -  ;									Handle &x
   26 00:488C -  -  -  -  ;
   27 00:488C -  -  -  -  ; ***************************************************************************************
   28 00:488C -  -  -  -  
   29 00:488C -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:488C DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:488F E6 C0 -  -  		and 		$C0
   32 00:4891 FE 40 -  -  		cp 			$40
   33 00:4893 C2 00 45 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4896 C3 E3 46 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4899 -  -  -  -  
   36 00:4899 -  -  -  -  ; ***************************************************************************************
   37 00:4899 -  -  -  -  ;
   38 00:4899 -  -  -  -  ;									Changes and Updates
   39 00:4899 -  -  -  -  ;
   40 00:4899 -  -  -  -  ; ***************************************************************************************
   41 00:4899 -  -  -  -  ;
   42 00:4899 -  -  -  -  ;		Date			Notes
   43 00:4899 -  -  -  -  ;		==== 			=====
   44 00:4899 -  -  -  -  ;
   45 00:4899 -  -  -  -  ; ***************************************************************************************
   46 00:4899 -  -  -  -  		
Listing for file "_build.asm"
   48 00:4899 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4899 -  -  -  -  ; ***************************************************************************************
    2 00:4899 -  -  -  -  ; ***************************************************************************************
    3 00:4899 -  -  -  -  ;
    4 00:4899 -  -  -  -  ;		Name : 		str.asm
    5 00:4899 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4899 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4899 -  -  -  -  ;		Reviewed :	No
    8 00:4899 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4899 -  -  -  -  ;
   10 00:4899 -  -  -  -  ; ***************************************************************************************
   11 00:4899 -  -  -  -  ; ***************************************************************************************
   12 00:4899 -  -  -  -  
   13 00:4899 -  -  -  -  ; ***************************************************************************************
   14 00:4899 -  -  -  -  ;
   15 00:4899 -  -  -  -  ;								Str$() unary function
   16 00:4899 -  -  -  -  ;
   17 00:4899 -  -  -  -  ; ***************************************************************************************
   18 00:4899 -  -  -  -  
   19 00:4899 -  -  -  -  Unary_Str:	;; [str]
   20 00:4899 CD 7E 44 -  		call 	CheckDollar
   21 00:489C DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:489F EE AC -  -  		xor		KWD_TILDE
   23 00:48A1 F5 -  -  -  		push 	af
   24 00:48A2 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:48A4 DD 23 -  -  		inc 	ix
   26 00:48A6 -  -  -  -  _USNotHex:		
   27 00:48A6 CD 6A 46 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:48A9 01 90 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:48AC F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:48AD 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:48AF 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:48B1 3E 10 -  -  		ld 		a,16
   33 00:48B3 -  -  -  -  _USNotHex2:		
   34 00:48B3 CD 6A 52 -  		call 	Int32ToString 				
   35 00:48B6 21 90 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:48B9 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:48BB C9 -  -  -  		ret
   38 00:48BC -  -  -  -  
   39 00:48BC -  -  -  -  ; ***************************************************************************************
   40 00:48BC -  -  -  -  ;
   41 00:48BC -  -  -  -  ;									Changes and Updates
   42 00:48BC -  -  -  -  ;
   43 00:48BC -  -  -  -  ; ***************************************************************************************
   44 00:48BC -  -  -  -  ;
   45 00:48BC -  -  -  -  ;		Date			Notes
   46 00:48BC -  -  -  -  ;		==== 			=====
   47 00:48BC -  -  -  -  ;
   48 00:48BC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:48BC -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:48BC -  -  -  -  ; ***************************************************************************************
    2 00:48BC -  -  -  -  ; ***************************************************************************************
    3 00:48BC -  -  -  -  ;
    4 00:48BC -  -  -  -  ;		Name : 		time.asm
    5 00:48BC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48BC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:48BC -  -  -  -  ;		Reviewed :	No
    8 00:48BC -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:48BC -  -  -  -  ;
   10 00:48BC -  -  -  -  ; ***************************************************************************************
   11 00:48BC -  -  -  -  ; ***************************************************************************************
   12 00:48BC -  -  -  -  
   13 00:48BC -  -  -  -  ; ***************************************************************************************
   14 00:48BC -  -  -  -  ;
   15 00:48BC -  -  -  -  ;							Get system time in ms
   16 00:48BC -  -  -  -  ;
   17 00:48BC -  -  -  -  ; ***************************************************************************************
   18 00:48BC -  -  -  -  
   19 00:48BC -  -  -  -  Unary_Time:	;; [time]
   20 00:48BC CD E1 52 -  			call 	SYSGetTimer
   21 00:48BF 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:48C1 C9 -  -  -  			ret
   23 00:48C2 -  -  -  -  
   24 00:48C2 -  -  -  -  ; ***************************************************************************************
   25 00:48C2 -  -  -  -  ;
   26 00:48C2 -  -  -  -  ;									Changes and Updates
   27 00:48C2 -  -  -  -  ;
   28 00:48C2 -  -  -  -  ; ***************************************************************************************
   29 00:48C2 -  -  -  -  ;
   30 00:48C2 -  -  -  -  ;		Date			Notes
   31 00:48C2 -  -  -  -  ;		==== 			=====
   32 00:48C2 -  -  -  -  ;
   33 00:48C2 -  -  -  -  ; ***************************************************************************************
   34 00:48C2 -  -  -  -  			
Listing for file "_build.asm"
   50 00:48C2 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:48C2 -  -  -  -  ; ***************************************************************************************
    2 00:48C2 -  -  -  -  ; ***************************************************************************************
    3 00:48C2 -  -  -  -  ;
    4 00:48C2 -  -  -  -  ;		Name : 		top.asm
    5 00:48C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:48C2 -  -  -  -  ;		Reviewed :	No
    8 00:48C2 -  -  -  -  ;		Purpose :	Various constants.
    9 00:48C2 -  -  -  -  ;
   10 00:48C2 -  -  -  -  ; ***************************************************************************************
   11 00:48C2 -  -  -  -  ; ***************************************************************************************
   12 00:48C2 -  -  -  -  
   13 00:48C2 -  -  -  -  ; ***************************************************************************************
   14 00:48C2 -  -  -  -  ;
   15 00:48C2 -  -  -  -  ;							page unary function (no bracket)
   16 00:48C2 -  -  -  -  ;
   17 00:48C2 -  -  -  -  ; ***************************************************************************************
   18 00:48C2 -  -  -  -  
   19 00:48C2 -  -  -  -  Unary_Top:	;; [top]
   20 00:48C2 2A 50 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:48C5 D9 -  -  -  			exx
   22 00:48C6 2A 52 40 -  			ld 		hl,(TopMemory+2)
   23 00:48C9 D9 -  -  -  			exx
   24 00:48CA 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:48CC C9 -  -  -  			ret
   26 00:48CD -  -  -  -  
   27 00:48CD -  -  -  -  ; ***************************************************************************************
   28 00:48CD -  -  -  -  ;
   29 00:48CD -  -  -  -  ;									Changes and Updates
   30 00:48CD -  -  -  -  ;
   31 00:48CD -  -  -  -  ; ***************************************************************************************
   32 00:48CD -  -  -  -  ;
   33 00:48CD -  -  -  -  ;		Date			Notes
   34 00:48CD -  -  -  -  ;		==== 			=====
   35 00:48CD -  -  -  -  ;
   36 00:48CD -  -  -  -  ; ***************************************************************************************
   37 00:48CD -  -  -  -  			
Listing for file "_build.asm"
   51 00:48CD -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:48CD -  -  -  -  ; ***************************************************************************************
    2 00:48CD -  -  -  -  ; ***************************************************************************************
    3 00:48CD -  -  -  -  ;
    4 00:48CD -  -  -  -  ;		Name : 		val.asm
    5 00:48CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48CD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:48CD -  -  -  -  ;		Reviewed :	No
    8 00:48CD -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:48CD -  -  -  -  ;
   10 00:48CD -  -  -  -  ; ***************************************************************************************
   11 00:48CD -  -  -  -  ; ***************************************************************************************
   12 00:48CD -  -  -  -  
   13 00:48CD -  -  -  -  ; ***************************************************************************************
   14 00:48CD -  -  -  -  ;
   15 00:48CD -  -  -  -  ;								val( unary function
   16 00:48CD -  -  -  -  ;
   17 00:48CD -  -  -  -  ; ***************************************************************************************
   18 00:48CD -  -  -  -  
   19 00:48CD -  -  -  -  Unary_Val:	;; [val]
   20 00:48CD CD 76 46 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:48D0 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:48D1 C1 -  -  -  		pop 	bc
   23 00:48D2 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:48D4 CD 60 51 -  		call 	Int32FromString 			; get the integer part.
   25 00:48D7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:48D9 C8 -  -  -  		ret		z 							; okay
   27 00:48DA 3E 03 C3 A3 
              44 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:48DF -  -  -  -  
   29 00:48DF -  -  -  -  ; ***************************************************************************************
   30 00:48DF -  -  -  -  ;
   31 00:48DF -  -  -  -  ;									Changes and Updates
   32 00:48DF -  -  -  -  ;
   33 00:48DF -  -  -  -  ; ***************************************************************************************
   34 00:48DF -  -  -  -  ;
   35 00:48DF -  -  -  -  ;		Date			Notes
   36 00:48DF -  -  -  -  ;		==== 			=====
   37 00:48DF -  -  -  -  ;
   38 00:48DF -  -  -  -  ; ***************************************************************************************
   39 00:48DF -  -  -  -  		
Listing for file "_build.asm"
   52 00:48DF -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 00:48DF -  -  -  -  ; ***************************************************************************************
    2 00:48DF -  -  -  -  ; ***************************************************************************************
    3 00:48DF -  -  -  -  ;
    4 00:48DF -  -  -  -  ;		Name : 		locals.asm
    5 00:48DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48DF -  -  -  -  ;		Date : 		8th June 2022
    7 00:48DF -  -  -  -  ;		Reviewed :	No
    8 00:48DF -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 00:48DF -  -  -  -  ;
   10 00:48DF -  -  -  -  ; ***************************************************************************************
   11 00:48DF -  -  -  -  ; ***************************************************************************************
   12 00:48DF -  -  -  -  
   13 00:48DF -  -  -  -  ; ***************************************************************************************
   14 00:48DF -  -  -  -  ;
   15 00:48DF -  -  -  -  ;									Locals command
   16 00:48DF -  -  -  -  ;
   17 00:48DF -  -  -  -  ; ***************************************************************************************
   18 00:48DF -  -  -  -  
   19 00:48DF -  -  -  -  Command_LOCAL:	;; [local]
   20 00:48DF 21 00 00 -  		ld 		hl,0 						; set HL'HL, the default value, to zero
   21 00:48E2 D9 -  -  -  		exx
   22 00:48E3 21 00 00 -  		ld 		hl,0
   23 00:48E6 D9 -  -  -  		exx
   24 00:48E7 CD F4 48 -  		call 	LocalCreateVariable 		; create a variable
   25 00:48EA DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a comma ?
   26 00:48ED FE A6 -  -  		cp 		KWD_COMMA
   27 00:48EF C0 -  -  -  		ret 	nz 							; exit if not
   28 00:48F0 DD 23 -  -  		inc 	ix 							; skip comma
   29 00:48F2 18 EB -  -  		jr 		Command_LOCAL 				; and go try the next one.
   30 00:48F4 -  -  -  -  		
   31 00:48F4 -  -  -  -  ; ***************************************************************************************
   32 00:48F4 -  -  -  -  ;
   33 00:48F4 -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   34 00:48F4 -  -  -  -  ;						(used for parameters and locals)
   35 00:48F4 -  -  -  -  ;
   36 00:48F4 -  -  -  -  ; ***************************************************************************************
   37 00:48F4 -  -  -  -  
   38 00:48F4 -  -  -  -  LocalCreateVariable:
   39 00:48F4 E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   40 00:48F5 D9 -  -  -  		exx
   41 00:48F6 E5 -  -  -  		push 	hl
   42 00:48F7 D9 -  -  -  		exx
   43 00:48F8 -  -  -  -  
   44 00:48F8 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   45 00:48FA 32 7C 40 -  		ld 		(AllowAutoCreate),a
   46 00:48FD CD FC 4C -  		call 	FindVariable 				; locate the variable, address in UHL now.
   47 00:4900 E5 -  -  -  		push 	hl 							; save variable address.
   48 00:4901 -  -  -  -  
   49 00:4901 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   50 00:4903 CD 4A 4C -  		call 	StackOpenFrame
   51 00:4906 -  -  -  -  
   52 00:4906 2A 54 40 -  		ld 		hl,(BasicSP) 				; point to SP+1
   53 00:4909 23 -  -  -  		inc 	hl
   54 00:490A D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   55 00:490B D5 -  -  -  		push 	de
   56 00:490C 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   57 00:4912 -  -  -  -  		;
   58 00:4912 EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   59 00:4913 CD 32 49 -  		call 	_LCVRead32HL 				; read HL current value into HL'HL
   60 00:4916 CD 22 49 -  		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   61 00:4919 -  -  -  -  		;
   62 00:4919 D1 -  -  -  		pop 	de 							; the address of the variable itself.
   63 00:491A -  -  -  -  		;
   64 00:491A D9 -  -  -  		exx 								; restore the value being initialised to.
   65 00:491B E1 -  -  -  		pop 	hl
   66 00:491C D9 -  -  -  		exx
   67 00:491D E1 -  -  -  		pop 	hl
   68 00:491E CD 22 49 -  		call 	_LCVWrite32HL 				; write HL'HL to DE.
   69 00:4921 C9 -  -  -  		ret
   70 00:4922 -  -  -  -  
   71 00:4922 -  -  -  -  ; ***************************************************************************************
   72 00:4922 -  -  -  -  ;
   73 00:4922 -  -  -  -  ;									Write HL'HL to DE.
   74 00:4922 -  -  -  -  ;
   75 00:4922 -  -  -  -  ; ***************************************************************************************
   76 00:4922 -  -  -  -  
   77 00:4922 -  -  -  -  _LCVWrite32HL:
   78 00:4922 7D -  -  -  		ld 		a,l
   79 00:4923 12 -  -  -  		ld 		(de),a
   80 00:4924 13 -  -  -  		inc 	de
   81 00:4925 7C -  -  -  		ld 		a,h
   82 00:4926 12 -  -  -  		ld 		(de),a
   83 00:4927 13 -  -  -  		inc 	de
   84 00:4928 D5 -  -  -  		push 	de
   85 00:4929 D9 -  -  -  		exx
   86 00:492A D1 -  -  -  		pop 	de
   87 00:492B 7D -  -  -  		ld 		a,l
   88 00:492C 12 -  -  -  		ld 		(de),a
   89 00:492D 13 -  -  -  		inc 	de
   90 00:492E 7C -  -  -  		ld 		a,h
   91 00:492F 12 -  -  -  		ld 		(de),a
   92 00:4930 D9 -  -  -  		exx
   93 00:4931 C9 -  -  -  		ret
   94 00:4932 -  -  -  -  
   95 00:4932 -  -  -  -  ; ***************************************************************************************
   96 00:4932 -  -  -  -  ;
   97 00:4932 -  -  -  -  ;									Read (HL) to HL'HL
   98 00:4932 -  -  -  -  ;
   99 00:4932 -  -  -  -  ; ***************************************************************************************
  100 00:4932 -  -  -  -  
  101 00:4932 -  -  -  -  _LCVRead32HL:
  102 00:4932 E5 -  -  -  		push 	hl
  103 00:4933 7E 23 66 6F 		ld_ind_hl
  104 00:4937 D9 -  -  -  		exx
  105 00:4938 E1 -  -  -  		pop 	hl
  106 00:4939 23 -  -  -  		inc 	hl
  107 00:493A 23 -  -  -  		inc 	hl
  108 00:493B 7E 23 66 6F 		ld_ind_hl
  109 00:493F D9 -  -  -  		exx
  110 00:4940 C9 -  -  -  		ret
  111 00:4941 -  -  -  -  
  112 00:4941 -  -  -  -  ; ***************************************************************************************
  113 00:4941 -  -  -  -  ;
  114 00:4941 -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
  115 00:4941 -  -  -  -  ;			or parameter
  116 00:4941 -  -  -  -  ;
  117 00:4941 -  -  -  -  ; ***************************************************************************************
  118 00:4941 -  -  -  -  
  119 00:4941 -  -  -  -  PopLocals:
  120 00:4941 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  121 00:4943 CD 7A 4C -  		call 	StackCheckFrame
  122 00:4946 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  123 00:4947 -  -  -  -  
  124 00:4947 2A 54 40 -  		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  125 00:494A 23 -  -  -  		inc 	hl
  126 00:494B E5 -  -  -  		push 	hl 							; save it
  127 00:494C 7E 23 66 6F 		ld_ind_hl 							; read address into HL
  128 00:4950 EB -  -  -  		ex 		de,hl 						; target address is in DE.
  129 00:4951 -  -  -  -  		;
  130 00:4951 E1 -  -  -  		pop 	hl 							; address of old value
  131 00:4952 23 -  -  -  		inc 	hl
  132 00:4953 23 -  -  -  		inc 	hl
  133 00:4954 23 -  -  -  		inc 	hl
  134 00:4955 23 -  -  -  		inc 	hl
  135 00:4956 CD 32 49 -  		call 	_LCVRead32HL 				; value into HL'HL
  136 00:4959 CD 22 49 -  		call 	_LCVWrite32HL 				; and write it out again to var address
  137 00:495C -  -  -  -  
  138 00:495C CD 6A 4C -  		call 	StackCloseFrame 			; remove the local/parameter
  139 00:495F 18 E0 -  -  		jr 		PopLocals 					; check any more ?
  140 00:4961 -  -  -  -  
  141 00:4961 -  -  -  -  ; ***************************************************************************************
  142 00:4961 -  -  -  -  ;
  143 00:4961 -  -  -  -  ;									Changes and Updates
  144 00:4961 -  -  -  -  ;
  145 00:4961 -  -  -  -  ; ***************************************************************************************
  146 00:4961 -  -  -  -  ;
  147 00:4961 -  -  -  -  ;		Date			Notes
  148 00:4961 -  -  -  -  ;		==== 			=====
  149 00:4961 -  -  -  -  ;
  150 00:4961 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:4961 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 00:4961 -  -  -  -  ; ***************************************************************************************
    2 00:4961 -  -  -  -  ; ***************************************************************************************
    3 00:4961 -  -  -  -  ;
    4 00:4961 -  -  -  -  ;		Name : 		proc.asm
    5 00:4961 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4961 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4961 -  -  -  -  ;		Reviewed :	No
    8 00:4961 -  -  -  -  ;		Purpose :	Proc command
    9 00:4961 -  -  -  -  ;
   10 00:4961 -  -  -  -  ; ***************************************************************************************
   11 00:4961 -  -  -  -  ; ***************************************************************************************
   12 00:4961 -  -  -  -  
   13 00:4961 -  -  -  -  ; ***************************************************************************************
   14 00:4961 -  -  -  -  ;
   15 00:4961 -  -  -  -  ;										PROC Command
   16 00:4961 -  -  -  -  ;
   17 00:4961 -  -  -  -  ; ***************************************************************************************
   18 00:4961 -  -  -  -  
   19 00:4961 -  -  -  -  Command_PROC: 	;; [proc]
   20 00:4961 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 00:4963 CD 4A 4C -  			call 	StackOpenFrame 			; marker position.
   22 00:4966 -  -  -  -  			;
   23 00:4966 DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 00:4969 FE 26 -  -  			cp 		IDENTIFIER_END
   25 00:496B D2 00 45 -  			jp 		nc,SyntaxError 			; no , no call possible.
   26 00:496E CD D4 49 -  			call 	SearchProcedure 		; find procedure referenced at IX.
   27 00:4971 -  -  -  -  			;
   28 00:4971 -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 00:4971 -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 00:4971 -  -  -  -  			;
   31 00:4971 D5 -  -  -  			push 	de 						; save start of line
   32 00:4972 DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 00:4975 FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 00:4977 CC 8A 49 -  			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 00:497A -  -  -  -  			;
   36 00:497A E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 00:497B -  -  -  -  			;
   38 00:497B 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 00:497D CD 4A 4C -  			call 	StackOpenFrame 
   40 00:4980 CD 7F 4C -  			call 	StackSavePosition 		; and save the return address on the stack.
   41 00:4983 -  -  -  -  
   42 00:4983 DD E1 -  -  			pop 	ix 						; new position in code
   43 00:4985 E1 -  -  -  			pop 	hl 						; start of line
   44 00:4986 22 58 40 -  			ld 		(CurrentLineStart),hl 	; save start of line
   45 00:4989 C9 -  -  -  			ret
   46 00:498A -  -  -  -  
   47 00:498A -  -  -  -  ; ***************************************************************************************
   48 00:498A -  -  -  -  ;
   49 00:498A -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 00:498A -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 00:498A -  -  -  -  ;
   52 00:498A -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 00:498A -  -  -  -  ;			final ) on the parameter lists.
   54 00:498A -  -  -  -  ;
   55 00:498A -  -  -  -  ; ***************************************************************************************
   56 00:498A -  -  -  -  
   57 00:498A -  -  -  -  ProcDoParameterList:
   58 00:498A 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 00:498B DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 00:498E 20 1C -  -  			jr 		nz,_ParamError
   61 00:4990 -  -  -  -  			;
   62 00:4990 DD 23 -  -  			inc 	ix 						; skip over it
   63 00:4992 23 -  -  -  			inc 	hl
   64 00:4993 FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 00:4995 C8 -  -  -  			ret 	z
   66 00:4996 -  -  -  -  			;
   67 00:4996 FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 00:4998 28 04 -  -  			jr 		z,_PDPFound
   69 00:499A FE A6 -  -  			cp 		KWD_COMMA
   70 00:499C 20 0E -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 00:499E -  -  -  -  			;
   72 00:499E -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 00:499E -  -  -  -  			;
   74 00:499E -  -  -  -  _PDPFound:			
   75 00:499E E5 -  -  -  			push 	hl 						; save callee on stack
   76 00:499F CD 88 46 -  			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 00:49A2 DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 00:49A4 CD F4 48 -  			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 00:49A7 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 00:49A9 E1 -  -  -  			pop 	hl 						; and HL the callee
   81 00:49AA 18 DE -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 00:49AC -  -  -  -  
   83 00:49AC -  -  -  -  _ParamError:
   84 00:49AC 3E 13 C3 A3 
              44 -  -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 00:49B1 -  -  -  -  
   86 00:49B1 -  -  -  -  ; ***************************************************************************************
   87 00:49B1 -  -  -  -  ;
   88 00:49B1 -  -  -  -  ;										ENDPROC Command
   89 00:49B1 -  -  -  -  ;
   90 00:49B1 -  -  -  -  ; ***************************************************************************************
   91 00:49B1 -  -  -  -  
   92 00:49B1 -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 00:49B1 CD 41 49 -  			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 00:49B4 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 00:49B6 CD 7A 4C -  			call 	StackCheckFrame
   96 00:49B9 20 14 -  -  			jr 		nz,_EndProcError
   97 00:49BB CD 98 4C -  			call 	StackLoadPosition 		; restore position into IX/SOL
   98 00:49BE CD 6A 4C -  			call 	StackCloseFrame 		
   99 00:49C1 -  -  -  -  
  100 00:49C1 CD 41 49 -  			call 	PopLocals 				; restore any locals (parameters)
  101 00:49C4 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 00:49C6 CD 7A 4C -  			call 	StackCheckFrame
  103 00:49C9 20 04 -  -  			jr 		nz,_EndProcError
  104 00:49CB CD 6A 4C -  			call 	StackCloseFrame 		
  105 00:49CE C9 -  -  -  			ret
  106 00:49CF -  -  -  -  _EndProcError:
  107 00:49CF 3E 10 C3 A3 
              44 -  -  -  			ERR_NOPROC
  108 00:49D4 -  -  -  -  
  109 00:49D4 -  -  -  -  ; ***************************************************************************************
  110 00:49D4 -  -  -  -  ;
  111 00:49D4 -  -  -  -  ;									Changes and Updates
  112 00:49D4 -  -  -  -  ;
  113 00:49D4 -  -  -  -  ; ***************************************************************************************
  114 00:49D4 -  -  -  -  ;
  115 00:49D4 -  -  -  -  ;		Date			Notes
  116 00:49D4 -  -  -  -  ;		==== 			=====
  117 00:49D4 -  -  -  -  ;
  118 00:49D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:49D4 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 00:49D4 -  -  -  -  ; ***************************************************************************************
    2 00:49D4 -  -  -  -  ; ***************************************************************************************
    3 00:49D4 -  -  -  -  ;
    4 00:49D4 -  -  -  -  ;		Name : 		search.asm
    5 00:49D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49D4 -  -  -  -  ;		Date : 		8th June 2022
    7 00:49D4 -  -  -  -  ;		Reviewed :	No
    8 00:49D4 -  -  -  -  ;		Purpose :	Search program for procedures
    9 00:49D4 -  -  -  -  ;
   10 00:49D4 -  -  -  -  ; ***************************************************************************************
   11 00:49D4 -  -  -  -  ; ***************************************************************************************
   12 00:49D4 -  -  -  -  
   13 00:49D4 -  -  -  -  ; ***************************************************************************************
   14 00:49D4 -  -  -  -  ;
   15 00:49D4 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 00:49D4 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 00:49D4 -  -  -  -  ;
   18 00:49D4 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 00:49D4 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 00:49D4 -  -  -  -  ;
   21 00:49D4 -  -  -  -  ; ***************************************************************************************
   22 00:49D4 -  -  -  -  
   23 00:49D4 -  -  -  -  SearchProcedure:
   24 00:49D4 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 00:49D7 -  -  -  -  
   26 00:49D7 2A 34 40 -  			ld 		hl,(CodeAddress) 		; start of program space
   27 00:49DA -  -  -  -  			;
   28 00:49DA -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 00:49DA -  -  -  -  			;
   30 00:49DA 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 00:49DB B7 -  -  -  			or 		a
   32 00:49DC 28 37 -  -  			jr 		z,_SPFail
   33 00:49DE E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 00:49DF 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 00:49E0 23 -  -  -  			inc 	hl
   36 00:49E1 23 -  -  -  			inc 	hl
   37 00:49E2 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 00:49E3 FE B6 -  -  			cp 		KWD_DEF 				
   39 00:49E5 20 0B -  -  			jr 		nz,_SPNext
   40 00:49E7 23 -  -  -  			inc 	hl 				
   41 00:49E8 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 00:49E9 FE B7 -  -  			cp 		KWD_PROC
   43 00:49EB 20 05 -  -  			jr 		nz,_SPNext
   44 00:49ED 23 -  -  -  			inc 	hl
   45 00:49EE 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 00:49EF B9 -  -  -  			cp 		c
   47 00:49F0 28 08 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 00:49F2 -  -  -  -  			;
   49 00:49F2 -  -  -  -  			;		Advance to next entry.
   50 00:49F2 -  -  -  -  			;			
   51 00:49F2 E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 00:49F3 11 00 00 -  			ld 		de,0 					; offset into UDE
   53 00:49F6 5E -  -  -  			ld 		e,(hl)
   54 00:49F7 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 00:49F8 18 E0 -  -  			jr 		_SPLoop
   56 00:49FA -  -  -  -  			;
   57 00:49FA -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 00:49FA -  -  -  -  			; 		DEF PROC line.
   59 00:49FA -  -  -  -  			;		
   60 00:49FA -  -  -  -  			;		Already know the first characters match
   61 00:49FA -  -  -  -  			;
   62 00:49FA -  -  -  -  _SPFullCheck:
   63 00:49FA DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 00:49FC -  -  -  -  _SPCheckLoop:
   65 00:49FC DD 23 -  -  			inc 	ix 						; look at next character.
   66 00:49FE 23 -  -  -  			inc 	hl
   67 00:49FF DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 00:4A02 FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 00:4A04 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 00:4A06 BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 00:4A07 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 00:4A09 -  -  -  -  			;
   73 00:4A09 -  -  -  -  			;		Full check failed.
   74 00:4A09 -  -  -  -  			;
   75 00:4A09 -  -  -  -  _SPFullCheckFailed:			
   76 00:4A09 DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 00:4A0B 18 E5 -  -  			jr 		_SPNext 				; do the next line.
   78 00:4A0D -  -  -  -  			;
   79 00:4A0D -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 00:4A0D -  -  -  -  			;
   81 00:4A0D -  -  -  -  _SPCheckBothEnd:
   82 00:4A0D 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 00:4A0E FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 00:4A10 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 00:4A12 -  -  -  -  			;
   86 00:4A12 -  -  -  -  			;	 	We found it.
   87 00:4A12 -  -  -  -  			;
   88 00:4A12 C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 00:4A13 D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 00:4A14 C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 00:4A15 -  -  -  -  
   92 00:4A15 -  -  -  -  _SPFail: 									; come here when not found.
   93 00:4A15 3E 14 C3 A3 
              44 -  -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 00:4A1A -  -  -  -  
   95 00:4A1A -  -  -  -  ; ***************************************************************************************
   96 00:4A1A -  -  -  -  ;
   97 00:4A1A -  -  -  -  ;									Changes and Updates
   98 00:4A1A -  -  -  -  ;
   99 00:4A1A -  -  -  -  ; ***************************************************************************************
  100 00:4A1A -  -  -  -  ;
  101 00:4A1A -  -  -  -  ;		Date			Notes
  102 00:4A1A -  -  -  -  ;		==== 			=====
  103 00:4A1A -  -  -  -  ;
  104 00:4A1A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4A1A -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4A1A -  -  -  -  ; ***************************************************************************************
    2 00:4A1A -  -  -  -  ; ***************************************************************************************
    3 00:4A1A -  -  -  -  ;
    4 00:4A1A -  -  -  -  ;		Name : 		allocate.asm
    5 00:4A1A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A1A -  -  -  -  ;		Date : 		4th June 2022
    7 00:4A1A -  -  -  -  ;		Reviewed :	No
    8 00:4A1A -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4A1A -  -  -  -  ;
   10 00:4A1A -  -  -  -  ; ***************************************************************************************
   11 00:4A1A -  -  -  -  ; ***************************************************************************************
   12 00:4A1A -  -  -  -  
   13 00:4A1A -  -  -  -  ; ***************************************************************************************
   14 00:4A1A -  -  -  -  ;
   15 00:4A1A -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4A1A -  -  -  -  ;
   17 00:4A1A -  -  -  -  ; ***************************************************************************************
   18 00:4A1A -  -  -  -  
   19 00:4A1A -  -  -  -  AllocateBytes:
   20 00:4A1A EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:4A1B 21 00 00 -  		ld 		hl,$000000
   22 00:4A1E 62 -  -  -  		ld 		h,d
   23 00:4A1F 6B -  -  -  		ld 		l,e
   24 00:4A20 -  -  -  -  		;
   25 00:4A20 ED 5B 4C 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:4A24 D5 -  -  -  		push 	de 							; save on stack
   27 00:4A25 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:4A26 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; update it
   29 00:4A29 -  -  -  -  		;
   30 00:4A29 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:4A2A 2A 48 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:4A2D AF -  -  -  		xor 	a
   33 00:4A2E ED 52 -  -  		sbc 	hl,de
   34 00:4A30 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:4A31 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:4A32 3E 0B C3 A3 
              44 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:4A37 -  -  -  -  
   38 00:4A37 -  -  -  -  ; ***************************************************************************************
   39 00:4A37 -  -  -  -  ;
   40 00:4A37 -  -  -  -  ;									Changes and Updates
   41 00:4A37 -  -  -  -  ;
   42 00:4A37 -  -  -  -  ; ***************************************************************************************
   43 00:4A37 -  -  -  -  ;
   44 00:4A37 -  -  -  -  ;		Date			Notes
   45 00:4A37 -  -  -  -  ;		==== 			=====
   46 00:4A37 -  -  -  -  ;
   47 00:4A37 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4A37 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4A37 -  -  -  -  ; ***************************************************************************************
    2 00:4A37 -  -  -  -  ; ***************************************************************************************
    3 00:4A37 -  -  -  -  ;
    4 00:4A37 -  -  -  -  ;		Name : 		clear.asm
    5 00:4A37 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A37 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A37 -  -  -  -  ;		Reviewed :	No
    8 00:4A37 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4A37 -  -  -  -  ;
   10 00:4A37 -  -  -  -  ; ***************************************************************************************
   11 00:4A37 -  -  -  -  ; ***************************************************************************************
   12 00:4A37 -  -  -  -  
   13 00:4A37 -  -  -  -  ; ***************************************************************************************
   14 00:4A37 -  -  -  -  ;
   15 00:4A37 -  -  -  -  ;										CLEAR command
   16 00:4A37 -  -  -  -  ;
   17 00:4A37 -  -  -  -  ; ***************************************************************************************
   18 00:4A37 -  -  -  -  
   19 00:4A37 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4A37 -  -  -  -  		;
   21 00:4A37 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4A37 -  -  -  -  		;
   23 00:4A37 2A 2C 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4A3A -  -  -  -  _CCFindLow:
   25 00:4A3A 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4A3D 5E -  -  -  		ld 		e,(hl)		
   27 00:4A3E 19 -  -  -  		add 	hl,de
   28 00:4A3F 7B -  -  -  		ld 		a,e
   29 00:4A40 B7 -  -  -  		or 		a
   30 00:4A41 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4A43 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4A44 22 50 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4A47 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4A48 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:4A4B -  -  -  -  		;
   36 00:4A4B -  -  -  -  		; 	 		Reset the language stack
   37 00:4A4B -  -  -  -  		;
   38 00:4A4B 2A 30 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:4A4E -  -  -  -  		;
   40 00:4A4E 22 38 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:4A51 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:4A54 19 -  -  -  		add 	hl,de
   43 00:4A55 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:4A57 22 3C 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:4A5A -  -  -  -  		;
   46 00:4A5A 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:4A5D 19 -  -  -  		add 	hl,de
   48 00:4A5E 22 40 40 -  		ld 		(StandardIntegers),hl
   49 00:4A61 -  -  -  -  		;
   50 00:4A61 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:4A61 -  -  -  -  		;
   52 00:4A61 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:4A64 -  -  -  -  _CCFClearHT:
   54 00:4A64 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:4A65 36 00 -  -  		ld 		(hl),0
   56 00:4A67 1B -  -  -  		dec 	de
   57 00:4A68 7A -  -  -  		ld 		a,d
   58 00:4A69 B3 -  -  -  		or 		e
   59 00:4A6A 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:4A6C 22 44 40 -  		ld 		(HashTableBase),hl 			; save table base
   61 00:4A6F -  -  -  -  		;
   62 00:4A6F -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:4A6F -  -  -  -  		;
   64 00:4A6F 22 48 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:4A72 -  -  -  -  		;
   66 00:4A72 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:4A72 -  -  -  -  		;
   68 00:4A72 CD 2B 48 -  		call 	UnaryRandomInitialise
   69 00:4A75 -  -  -  -  		;
   70 00:4A75 -  -  -  -  		;		Erase the stack
   71 00:4A75 -  -  -  -  		;
   72 00:4A75 CD 40 4C -  		call 	StackReset 					; reset the basic stack to empty
   73 00:4A78 -  -  -  -  		;
   74 00:4A78 -  -  -  -  		;		Reset READ/DATA
   75 00:4A78 -  -  -  -  		;
   76 00:4A78 CD 55 44 -  		call 	Command_RESTORE
   77 00:4A7B C9 -  -  -  		ret
   78 00:4A7C -  -  -  -  
   79 00:4A7C -  -  -  -  ; ***************************************************************************************
   80 00:4A7C -  -  -  -  ;
   81 00:4A7C -  -  -  -  ;									Changes and Updates
   82 00:4A7C -  -  -  -  ;
   83 00:4A7C -  -  -  -  ; ***************************************************************************************
   84 00:4A7C -  -  -  -  ;
   85 00:4A7C -  -  -  -  ;		Date			Notes
   86 00:4A7C -  -  -  -  ;		==== 			=====
   87 00:4A7C -  -  -  -  ;
   88 00:4A7C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:4A7C -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4A7C -  -  -  -  ; ***************************************************************************************
    2 00:4A7C -  -  -  -  ; ***************************************************************************************
    3 00:4A7C -  -  -  -  ;
    4 00:4A7C -  -  -  -  ;		Name : 		instance.asm
    5 00:4A7C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A7C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A7C -  -  -  -  ;		Reviewed :	No
    8 00:4A7C -  -  -  -  ;		Purpose :	Instance handling
    9 00:4A7C -  -  -  -  ;
   10 00:4A7C -  -  -  -  ; ***************************************************************************************
   11 00:4A7C -  -  -  -  ; ***************************************************************************************
   12 00:4A7C -  -  -  -  
   13 00:4A7C -  -  -  -  ; ***************************************************************************************
   14 00:4A7C -  -  -  -  ;
   15 00:4A7C -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4A7C -  -  -  -  ;
   17 00:4A7C -  -  -  -  ; ***************************************************************************************
   18 00:4A7C -  -  -  -  
   19 00:4A7C -  -  -  -  SetCurrentInstance:
   20 00:4A7C ED 53 2C 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4A80 22 30 40 -  		ld 		(HighMemory),hl 
   22 00:4A83 ED 53 34 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:4A87 -  -  -  -  
   24 00:4A87 C9 -  -  -  		ret
   25 00:4A88 -  -  -  -  
   26 00:4A88 -  -  -  -  
   27 00:4A88 -  -  -  -  ; ***************************************************************************************
   28 00:4A88 -  -  -  -  ;
   29 00:4A88 -  -  -  -  ;									Changes and Updates
   30 00:4A88 -  -  -  -  ;
   31 00:4A88 -  -  -  -  ; ***************************************************************************************
   32 00:4A88 -  -  -  -  ;
   33 00:4A88 -  -  -  -  ;		Date			Notes
   34 00:4A88 -  -  -  -  ;		==== 			=====
   35 00:4A88 -  -  -  -  ;
   36 00:4A88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:4A88 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:4A88 -  -  -  -  ; ***************************************************************************************
    2 00:4A88 -  -  -  -  ; ***************************************************************************************
    3 00:4A88 -  -  -  -  ;
    4 00:4A88 -  -  -  -  ;		Name : 		new.asm
    5 00:4A88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A88 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A88 -  -  -  -  ;		Reviewed :	No
    8 00:4A88 -  -  -  -  ;		Purpose :	New command.
    9 00:4A88 -  -  -  -  ;
   10 00:4A88 -  -  -  -  ; ***************************************************************************************
   11 00:4A88 -  -  -  -  ; ***************************************************************************************
   12 00:4A88 -  -  -  -  
   13 00:4A88 -  -  -  -  ; ***************************************************************************************
   14 00:4A88 -  -  -  -  ;
   15 00:4A88 -  -  -  -  ;										NEW command
   16 00:4A88 -  -  -  -  ;
   17 00:4A88 -  -  -  -  ; ***************************************************************************************
   18 00:4A88 -  -  -  -  
   19 00:4A88 -  -  -  -  Command_NEW: 	;; [new]
   20 00:4A88 2A 34 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4A8B 36 00 -  -  		ld 		(hl),0
   22 00:4A8D CD 37 4A -  		call 	Command_CLEAR 				; clear all variables
   23 00:4A90 3E 00 C3 A3 
              44 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:4A95 -  -  -  -  
   25 00:4A95 -  -  -  -  ; ***************************************************************************************
   26 00:4A95 -  -  -  -  ;
   27 00:4A95 -  -  -  -  ;									Changes and Updates
   28 00:4A95 -  -  -  -  ;
   29 00:4A95 -  -  -  -  ; ***************************************************************************************
   30 00:4A95 -  -  -  -  ;
   31 00:4A95 -  -  -  -  ;		Date			Notes
   32 00:4A95 -  -  -  -  ;		==== 			=====
   33 00:4A95 -  -  -  -  ;
   34 00:4A95 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:4A95 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 00:4A95 -  -  -  -  ; ***************************************************************************************
    2 00:4A95 -  -  -  -  ; ***************************************************************************************
    3 00:4A95 -  -  -  -  ;
    4 00:4A95 -  -  -  -  ;		Name : 		for.asm
    5 00:4A95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A95 -  -  -  -  ;		Date : 		7th June 2022
    7 00:4A95 -  -  -  -  ;		Reviewed :	No
    8 00:4A95 -  -  -  -  ;		Purpose :	For/Next command
    9 00:4A95 -  -  -  -  ;
   10 00:4A95 -  -  -  -  ; ***************************************************************************************
   11 00:4A95 -  -  -  -  
   12 00:4A95 -  -  -  -  ; ***************************************************************************************
   13 00:4A95 -  -  -  -  ;
   14 00:4A95 -  -  -  -  ;									For Command
   15 00:4A95 -  -  -  -  ;
   16 00:4A95 -  -  -  -  ; ***************************************************************************************
   17 00:4A95 -  -  -  -  
   18 00:4A95 -  -  -  -  Command_FOR: ;; [for]
   19 00:4A95 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 00:4A97 CD 4A 4C -  			call 	StackOpenFrame
   21 00:4A9A -  -  -  -  			;
   22 00:4A9A -  -  -  -  			;		Variable Reference to increment
   23 00:4A9A -  -  -  -  			;
   24 00:4A9A DD E5 -  -  			push	ix 						; save start position
   25 00:4A9C 3E FF -  -  			ld 		a,255 					; FOR can create
   26 00:4A9E 32 7C 40 -  			ld 		(AllowAutoCreate),a
   27 00:4AA1 CD E3 46 -  			call 	EvaluateTerm 			; get term
   28 00:4AA4 AF -  -  -  			xor 	a 						; autocreate off.
   29 00:4AA5 32 7C 40 -  			ld 		(AllowAutoCreate),a
   30 00:4AA8 DD E1 -  -  			pop 	ix 						; get start position
   31 00:4AAA E5 -  -  -  			push 	hl 						; save reference address.
   32 00:4AAB -  -  -  -  			;
   33 00:4AAB CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 00:4AAD C2 00 45 -  			jp 		nz,SyntaxError
   35 00:4AB0 EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 00:4AB1 -  -  -  -  			;
   37 00:4AB1 2A 54 40 -  			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 00:4AB4 01 06 00 -  			ld 		bc,6
   39 00:4AB7 09 -  -  -  			add 	hl,bc 
   40 00:4AB8 D1 -  -  -  			pop 	de 						; get reference.
   41 00:4AB9 73 23 72 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 00:4ABF -  -  -  -  			;
   43 00:4ABF -  -  -  -  			;		var = value
   44 00:4ABF -  -  -  -  			;
   45 00:4ABF CD 81 42 -  			call 	Command_LET 			; so we do I = 1 or whatever.
   46 00:4AC2 -  -  -  -  			; 		
   47 00:4AC2 -  -  -  -  			; 		TO
   48 00:4AC2 -  -  -  -  			;
   49 00:4AC2 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 00:4AC4 CD 98 44 -  			call 	CheckNextA
   51 00:4AC7 -  -  -  -  			;
   52 00:4AC7 -  -  -  -  			;		value
   53 00:4AC7 -  -  -  -  			;
   54 00:4AC7 CD 88 46 -  			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 00:4ACA 3E 0A -  -  			ld 		a,10
   56 00:4ACC CD 03 4B -  			call 	CFWriteHLHLToA 
   57 00:4ACF -  -  -  -  			;
   58 00:4ACF -  -  -  -  			;		Check STEP ?
   59 00:4ACF -  -  -  -  			;
   60 00:4ACF 21 01 00 -  			ld 		hl,1 					; default STEP is 1.
   61 00:4AD2 D9 -  -  -  			exx
   62 00:4AD3 21 00 00 -  			ld 		hl,0
   63 00:4AD6 D9 -  -  -  			exx			
   64 00:4AD7 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 00:4ADA FE B4 -  -  			cp 		KWD_STEP 				
   66 00:4ADC 20 05 -  -  			jr 		nz,_CFDefaultStep
   67 00:4ADE -  -  -  -  			;
   68 00:4ADE DD 23 -  -  			inc 	ix 						; get step
   69 00:4AE0 CD 88 46 -  			call 	EvaluateInteger
   70 00:4AE3 -  -  -  -  _CFDefaultStep:			
   71 00:4AE3 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 00:4AE5 CD 03 4B -  			call 	CFWriteHLHLToA 
   73 00:4AE8 CD 7F 4C -  			call 	StackSavePosition 		; save loop address
   74 00:4AEB C9 -  -  -  			ret
   75 00:4AEC -  -  -  -  
   76 00:4AEC -  -  -  -  ; ***************************************************************************************
   77 00:4AEC -  -  -  -  ;
   78 00:4AEC -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 00:4AEC -  -  -  -  ;
   80 00:4AEC -  -  -  -  ; ***************************************************************************************
   81 00:4AEC -  -  -  -  
   82 00:4AEC -  -  -  -  CFReadAToHLHL:
   83 00:4AEC 01 00 00 -  			ld 		bc,0 					; BC = 00|A
   84 00:4AEF 4F -  -  -  			ld 		c,a
   85 00:4AF0 2A 54 40 -  			ld 		hl,(BasicSP) 			; add stack base
   86 00:4AF3 09 -  -  -  			add 	hl,bc
   87 00:4AF4 -  -  -  -  
   88 00:4AF4 -  -  -  -  CFReadHLToHLHL:
   89 00:4AF4 E5 -  -  -  			push 	hl
   90 00:4AF5 7E 23 66 6F 			ld_ind_hl 						; get low word
   91 00:4AF9 D9 -  -  -  			exx
   92 00:4AFA -  -  -  -  
   93 00:4AFA E1 -  -  -  			pop 	hl 						; get high word
   94 00:4AFB 23 -  -  -  			inc 	hl
   95 00:4AFC 23 -  -  -  			inc 	hl
   96 00:4AFD 7E 23 66 6F 			ld_ind_hl
   97 00:4B01 D9 -  -  -  			exx
   98 00:4B02 -  -  -  -  
   99 00:4B02 C9 -  -  -  			ret
  100 00:4B03 -  -  -  -  
  101 00:4B03 -  -  -  -  ; ***************************************************************************************
  102 00:4B03 -  -  -  -  ;
  103 00:4B03 -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 00:4B03 -  -  -  -  ;
  105 00:4B03 -  -  -  -  ; ***************************************************************************************
  106 00:4B03 -  -  -  -  
  107 00:4B03 -  -  -  -  CFWriteHLHLToA:
  108 00:4B03 EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 00:4B04 D9 -  -  -  			exx
  110 00:4B05 EB -  -  -  			ex 		de,hl
  111 00:4B06 D9 -  -  -  			exx
  112 00:4B07 -  -  -  -  
  113 00:4B07 01 00 00 -  			ld 		bc,0 					; BC = 00|A
  114 00:4B0A 4F -  -  -  			ld 		c,a
  115 00:4B0B 2A 54 40 -  			ld 		hl,(BasicSP) 			; add stack base
  116 00:4B0E 09 -  -  -  			add 	hl,bc
  117 00:4B0F -  -  -  -  
  118 00:4B0F -  -  -  -  CFWriteDEDEToHL:
  119 00:4B0F 73 -  -  -  			ld 		(hl),e 					; write low word
  120 00:4B10 23 -  -  -  			inc 	hl
  121 00:4B11 72 -  -  -  			ld 		(hl),d
  122 00:4B12 23 -  -  -  			inc 	hl
  123 00:4B13 -  -  -  -  
  124 00:4B13 E5 -  -  -  			push 	hl 						; write high word
  125 00:4B14 D9 -  -  -  			exx
  126 00:4B15 E1 -  -  -  			pop 	hl
  127 00:4B16 73 -  -  -  			ld 		(hl),e
  128 00:4B17 23 -  -  -  			inc 	hl
  129 00:4B18 72 -  -  -  			ld 		(hl),d
  130 00:4B19 D9 -  -  -  			exx
  131 00:4B1A C9 -  -  -  			ret			
  132 00:4B1B -  -  -  -  
  133 00:4B1B -  -  -  -  ; ***************************************************************************************
  134 00:4B1B -  -  -  -  ;
  135 00:4B1B -  -  -  -  ;									Next Command
  136 00:4B1B -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 00:4B1B -  -  -  -  ;
  138 00:4B1B -  -  -  -  ; ***************************************************************************************
  139 00:4B1B -  -  -  -  
  140 00:4B1B -  -  -  -  Command_Next:	;; [next]
  141 00:4B1B 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 00:4B1D CD 7A 4C -  			call 	StackCheckFrame
  143 00:4B20 -  -  -  -  			;
  144 00:4B20 -  -  -  -  			;		Get address of FOR variable
  145 00:4B20 -  -  -  -  			;
  146 00:4B20 2A 54 40 -  			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 00:4B23 01 06 00 -  			ld 		bc,6
  148 00:4B26 09 -  -  -  			add 	hl,bc
  149 00:4B27 7E 23 66 6F 			ld_ind_hl
  150 00:4B2B -  -  -  -  			;
  151 00:4B2B -  -  -  -  			; 		Save reference, read value into DE.
  152 00:4B2B -  -  -  -  			;
  153 00:4B2B E5 -  -  -  			push 	hl 						; save index address
  154 00:4B2C CD F4 4A -  			call 	CFReadHLToHLHL 			; read the index value.
  155 00:4B2F -  -  -  -  
  156 00:4B2F EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 00:4B30 D9 -  -  -  			exx
  158 00:4B31 EB -  -  -  			ex 		de,hl
  159 00:4B32 D9 -  -  -  			exx
  160 00:4B33 -  -  -  -  			;
  161 00:4B33 -  -  -  -  			; 		Read step and Add
  162 00:4B33 -  -  -  -  			;
  163 00:4B33 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 00:4B35 CD EC 4A -  			call 	CFReadAToHLHL
  165 00:4B38 D9 -  -  -  			exx 							; msb of step on stack
  166 00:4B39 7C -  -  -  			ld 		a,h
  167 00:4B3A D9 -  -  -  			exx
  168 00:4B3B F5 -  -  -  			push 	af
  169 00:4B3C CD F7 51 -  			call 	Int32Add 				; add step to offset => HL'HL
  170 00:4B3F -  -  -  -  			;
  171 00:4B3F -  -  -  -  			;		Put result in DE and write back out
  172 00:4B3F -  -  -  -  			;
  173 00:4B3F EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 00:4B40 D9 -  -  -  			exx
  175 00:4B41 EB -  -  -  			ex 		de,hl
  176 00:4B42 D9 -  -  -  			exx
  177 00:4B43 F1 -  -  -  			pop 	af 						; get msb of step
  178 00:4B44 E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 00:4B45 F5 -  -  -  			push 	af 						; push msb of step back.
  180 00:4B46 CD 0F 4B -  			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 00:4B49 -  -  -  -  			;
  182 00:4B49 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 00:4B49 -  -  -  -  			;
  184 00:4B49 3E 0A -  -  			ld 		a,10 					; load limit
  185 00:4B4B CD EC 4A -  			call 	CFReadAToHLHL
  186 00:4B4E CD 30 52 -  			call 	Int32Compare 			; compare limit to index.
  187 00:4B51 C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 00:4B52 B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 00:4B53 28 0A -  -  			jr 		z,_CNXLoopBack
  190 00:4B55 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 00:4B57 28 02 -  -  			jr 		z,_CNXNotMStep
  192 00:4B59 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 00:4B5B -  -  -  -  _CNXNotMStep:			
  194 00:4B5B E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 00:4B5D 20 03 -  -  			jr 		nz,_CNXLoopOver
  196 00:4B5F -  -  -  -  			;
  197 00:4B5F -  -  -  -  			;		For loop goes round again.
  198 00:4B5F -  -  -  -  			;
  199 00:4B5F -  -  -  -  _CNXLoopBack:			
  200 00:4B5F C3 98 4C -  			jp 		StackLoadPosition
  201 00:4B62 -  -  -  -  			;
  202 00:4B62 -  -  -  -  			;		For loop completed
  203 00:4B62 -  -  -  -  			;
  204 00:4B62 -  -  -  -  _CNXLoopOver:
  205 00:4B62 C3 6A 4C -  			jp 		StackCloseFrame
  206 00:4B65 76 -  -  -  			debug
  207 00:4B66 -  -  -  -  
  208 00:4B66 -  -  -  -  ; ***************************************************************************************
  209 00:4B66 -  -  -  -  ;
  210 00:4B66 -  -  -  -  ;									Changes and Updates
  211 00:4B66 -  -  -  -  ;
  212 00:4B66 -  -  -  -  ; ***************************************************************************************
  213 00:4B66 -  -  -  -  ;
  214 00:4B66 -  -  -  -  ;		Date			Notes
  215 00:4B66 -  -  -  -  ;		==== 			=====
  216 00:4B66 -  -  -  -  ;
  217 00:4B66 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:4B66 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:4B66 -  -  -  -  ; ***************************************************************************************
    2 00:4B66 -  -  -  -  ; ***************************************************************************************
    3 00:4B66 -  -  -  -  ;
    4 00:4B66 -  -  -  -  ;		Name : 		gosub.asm
    5 00:4B66 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B66 -  -  -  -  ;		Date : 		7th June 2022
    7 00:4B66 -  -  -  -  ;		Reviewed :	No
    8 00:4B66 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:4B66 -  -  -  -  ;
   10 00:4B66 -  -  -  -  ; ***************************************************************************************
   11 00:4B66 -  -  -  -  
   12 00:4B66 -  -  -  -  ; ***************************************************************************************
   13 00:4B66 -  -  -  -  ;
   14 00:4B66 -  -  -  -  ;									Gosub Command
   15 00:4B66 -  -  -  -  ;
   16 00:4B66 -  -  -  -  ; ***************************************************************************************
   17 00:4B66 -  -  -  -  
   18 00:4B66 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:4B66 3E 13 -  -  			ld		a,STM_GOSUB
   20 00:4B68 CD 4A 4C -  			call 	StackOpenFrame
   21 00:4B6B CD 91 4B -  			call 	GoGetLineNumber
   22 00:4B6E E5 -  -  -  			push 	hl
   23 00:4B6F CD 7F 4C -  			call 	StackSavePosition
   24 00:4B72 E1 -  -  -  			pop 	hl
   25 00:4B73 CD 9C 4B -  			call	TransferToLineHL
   26 00:4B76 C9 -  -  -  			ret
   27 00:4B77 -  -  -  -  
   28 00:4B77 -  -  -  -  ; ***************************************************************************************
   29 00:4B77 -  -  -  -  ;
   30 00:4B77 -  -  -  -  ;									Return command
   31 00:4B77 -  -  -  -  ;
   32 00:4B77 -  -  -  -  ; ***************************************************************************************
   33 00:4B77 -  -  -  -  
   34 00:4B77 -  -  -  -  Command_Return: ;; [return]
   35 00:4B77 3E 13 -  -  			ld		a,STM_GOSUB
   36 00:4B79 CD 7A 4C -  			call 	StackCheckFrame
   37 00:4B7C 20 07 -  -  			jr 		nz,_ReturnError
   38 00:4B7E CD 98 4C -  			call 	StackLoadPosition
   39 00:4B81 CD 6A 4C -  			call 	StackCloseFrame
   40 00:4B84 C9 -  -  -  			ret
   41 00:4B85 -  -  -  -  _ReturnError:
   42 00:4B85 3E 08 C3 A3 
              44 -  -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:4B8A -  -  -  -  
   44 00:4B8A -  -  -  -  ; ***************************************************************************************
   45 00:4B8A -  -  -  -  ;
   46 00:4B8A -  -  -  -  ;									Changes and Updates
   47 00:4B8A -  -  -  -  ;
   48 00:4B8A -  -  -  -  ; ***************************************************************************************
   49 00:4B8A -  -  -  -  ;
   50 00:4B8A -  -  -  -  ;		Date			Notes
   51 00:4B8A -  -  -  -  ;		==== 			=====
   52 00:4B8A -  -  -  -  ;
   53 00:4B8A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4B8A -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:4B8A -  -  -  -  ; ***************************************************************************************
    2 00:4B8A -  -  -  -  ; ***************************************************************************************
    3 00:4B8A -  -  -  -  ;
    4 00:4B8A -  -  -  -  ;		Name : 		goto.asm
    5 00:4B8A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8A -  -  -  -  ;		Date : 		6th June 2022
    7 00:4B8A -  -  -  -  ;		Reviewed :	No
    8 00:4B8A -  -  -  -  ;		Purpose :	Goto command
    9 00:4B8A -  -  -  -  ;
   10 00:4B8A -  -  -  -  ; ***************************************************************************************
   11 00:4B8A -  -  -  -  
   12 00:4B8A -  -  -  -  ; ***************************************************************************************
   13 00:4B8A -  -  -  -  ;
   14 00:4B8A -  -  -  -  ;									Goto Command
   15 00:4B8A -  -  -  -  ;
   16 00:4B8A -  -  -  -  ; ***************************************************************************************
   17 00:4B8A -  -  -  -  
   18 00:4B8A -  -  -  -  Command_GOTO: ;; [goto]
   19 00:4B8A CD 91 4B -  			call 	GoGetLineNumber
   20 00:4B8D CD 9C 4B -  			call	TransferToLineHL
   21 00:4B90 C9 -  -  -  			ret
   22 00:4B91 -  -  -  -  
   23 00:4B91 -  -  -  -  ; ***************************************************************************************
   24 00:4B91 -  -  -  -  ;
   25 00:4B91 -  -  -  -  ;							Get and validate a line number in HL
   26 00:4B91 -  -  -  -  ;
   27 00:4B91 -  -  -  -  ; ***************************************************************************************
   28 00:4B91 -  -  -  -  
   29 00:4B91 -  -  -  -  GoGetLineNumber:
   30 00:4B91 CD 88 46 -  			call 	EvaluateInteger
   31 00:4B94 D9 -  -  -  			exx
   32 00:4B95 7C -  -  -  			ld 		a,h
   33 00:4B96 B5 -  -  -  			or 		l
   34 00:4B97 D9 -  -  -  			exx
   35 00:4B98 C8 -  -  -  			ret 	z
   36 00:4B99 C3 FB 44 -  			jp 		BadValue
   37 00:4B9C -  -  -  -  
   38 00:4B9C -  -  -  -  ; ***************************************************************************************
   39 00:4B9C -  -  -  -  ;
   40 00:4B9C -  -  -  -  ;							Transfer to Line Number HL
   41 00:4B9C -  -  -  -  ;
   42 00:4B9C -  -  -  -  ; ***************************************************************************************
   43 00:4B9C -  -  -  -  
   44 00:4B9C -  -  -  -  TransferToLineHL:
   45 00:4B9C EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:4B9D 01 00 00 -  			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:4BA0 DD 2A 34 40 			ld 		ix,(CodeAddress)
   48 00:4BA4 -  -  -  -  _TLSearch:	
   49 00:4BA4 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:4BA6 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:4BA9 B7 -  -  -  			or 		a 						; if zero
   52 00:4BAA 28 18 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:4BAC 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:4BAD -  -  -  -  
   55 00:4BAD 7B -  -  -  			ld 		a,e						; compare line address
   56 00:4BAE DD BE 01 -  			cp 		(ix+1)
   57 00:4BB1 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:4BB3 7A -  -  -  			ld 		a,d
   59 00:4BB4 DD BE 02 -  			cp 		(ix+2)
   60 00:4BB7 20 EB -  -  			jr 		nz,_TLSearch
   61 00:4BB9 -  -  -  -  			;
   62 00:4BB9 DD 22 58 40 			ld 		(CurrentLineStart),ix 	; set line start
   63 00:4BBD DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:4BBF DD 23 -  -  			inc 	ix
   65 00:4BC1 DD 23 -  -  			inc 	ix
   66 00:4BC3 -  -  -  -  
   67 00:4BC3 C9 -  -  -  			ret
   68 00:4BC4 -  -  -  -  
   69 00:4BC4 -  -  -  -  _TLNotFound:
   70 00:4BC4 3E 0A C3 A3 
              44 -  -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:4BC9 -  -  -  -  
   72 00:4BC9 -  -  -  -  ; ***************************************************************************************
   73 00:4BC9 -  -  -  -  ;
   74 00:4BC9 -  -  -  -  ;									Changes and Updates
   75 00:4BC9 -  -  -  -  ;
   76 00:4BC9 -  -  -  -  ; ***************************************************************************************
   77 00:4BC9 -  -  -  -  ;
   78 00:4BC9 -  -  -  -  ;		Date			Notes
   79 00:4BC9 -  -  -  -  ;		==== 			=====
   80 00:4BC9 -  -  -  -  ;
   81 00:4BC9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4BC9 -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 00:4BC9 -  -  -  -  ; ***************************************************************************************
    2 00:4BC9 -  -  -  -  ; ***************************************************************************************
    3 00:4BC9 -  -  -  -  ;
    4 00:4BC9 -  -  -  -  ;		Name : 		if.asm
    5 00:4BC9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BC9 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4BC9 -  -  -  -  ;		Reviewed :	No
    8 00:4BC9 -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 00:4BC9 -  -  -  -  ;
   10 00:4BC9 -  -  -  -  ; ***************************************************************************************
   11 00:4BC9 -  -  -  -  
   12 00:4BC9 -  -  -  -  ; ***************************************************************************************
   13 00:4BC9 -  -  -  -  ;
   14 00:4BC9 -  -  -  -  ;									If Command
   15 00:4BC9 -  -  -  -  ;
   16 00:4BC9 -  -  -  -  ; ***************************************************************************************
   17 00:4BC9 -  -  -  -  
   18 00:4BC9 -  -  -  -  Command_IF: ;; [if]
   19 00:4BC9 CD 88 46 -  		call 	EvaluateInteger 			; work out the test.
   20 00:4BCC CD 29 52 -  		call 	Int32Zero 					; test if zero
   21 00:4BCF 28 1A -  -  		jr 		z,_IFFail
   22 00:4BD1 -  -  -  -  		;
   23 00:4BD1 -  -  -  -  		;	 	Passed
   24 00:4BD1 -  -  -  -  		;
   25 00:4BD1 DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 00:4BD4 DD 23 -  -  		inc 	ix
   27 00:4BD6 FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 00:4BD8 CA 8A 4B -  		jp 		z,Command_GOTO
   29 00:4BDB FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 00:4BDD C2 00 45 -  		jp 		nz,SyntaxError
   31 00:4BE0 DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 00:4BE3 E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 00:4BE5 FE 40 -  -  		cp 		$40
   34 00:4BE7 CA 8A 4B -  		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 00:4BEA C9 -  -  -  		ret 								; otherwise carry on.
   36 00:4BEB -  -  -  -  		;
   37 00:4BEB -  -  -  -  		;		Failed.
   38 00:4BEB -  -  -  -  		;
   39 00:4BEB -  -  -  -  _IFFail:
   40 00:4BEB 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 00:4BED 0E B1 -  -  		ld 		c,KWD_ELSE
   42 00:4BEF CD 1D 4C -  		call 	SearchForwardTokens 		; searching forward.
   43 00:4BF2 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 00:4BF4 CA 6E 42 -  		jp 		z,EOLHandler 				; do the next line code.
   45 00:4BF7 C9 -  -  -  		ret 								; otherwise carry on.
   46 00:4BF8 -  -  -  -  
   47 00:4BF8 -  -  -  -  ; ***************************************************************************************
   48 00:4BF8 -  -  -  -  ;
   49 00:4BF8 -  -  -  -  ;						Else command => Progress to next line
   50 00:4BF8 -  -  -  -  ;
   51 00:4BF8 -  -  -  -  ; ***************************************************************************************
   52 00:4BF8 -  -  -  -  
   53 00:4BF8 -  -  -  -  Command_Else: ;; [else]
   54 00:4BF8 C3 6E 42 -  		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 00:4BFB -  -  -  -  
   56 00:4BFB -  -  -  -  ; ***************************************************************************************
   57 00:4BFB -  -  -  -  ;
   58 00:4BFB -  -  -  -  ;									Changes and Updates
   59 00:4BFB -  -  -  -  ;
   60 00:4BFB -  -  -  -  ; ***************************************************************************************
   61 00:4BFB -  -  -  -  ;
   62 00:4BFB -  -  -  -  ;		Date			Notes
   63 00:4BFB -  -  -  -  ;		==== 			=====
   64 00:4BFB -  -  -  -  ;
   65 00:4BFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4BFB -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:4BFB -  -  -  -  ; ***************************************************************************************
    2 00:4BFB -  -  -  -  ; ***************************************************************************************
    3 00:4BFB -  -  -  -  ;
    4 00:4BFB -  -  -  -  ;		Name : 		repeat.asm
    5 00:4BFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BFB -  -  -  -  ;		Date : 		7th June 2022
    7 00:4BFB -  -  -  -  ;		Reviewed :	No
    8 00:4BFB -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:4BFB -  -  -  -  ;
   10 00:4BFB -  -  -  -  ; ***************************************************************************************
   11 00:4BFB -  -  -  -  
   12 00:4BFB -  -  -  -  ; ***************************************************************************************
   13 00:4BFB -  -  -  -  ;
   14 00:4BFB -  -  -  -  ;									Repeat Command
   15 00:4BFB -  -  -  -  ;
   16 00:4BFB -  -  -  -  ; ***************************************************************************************
   17 00:4BFB -  -  -  -  
   18 00:4BFB -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:4BFB 3E 23 -  -  			ld		a,STM_REPEAT
   20 00:4BFD CD 4A 4C -  			call 	StackOpenFrame
   21 00:4C00 CD 7F 4C -  			call 	StackSavePosition
   22 00:4C03 C9 -  -  -  			ret
   23 00:4C04 -  -  -  -  
   24 00:4C04 -  -  -  -  ; ***************************************************************************************
   25 00:4C04 -  -  -  -  ;
   26 00:4C04 -  -  -  -  ;									Until command
   27 00:4C04 -  -  -  -  ;
   28 00:4C04 -  -  -  -  ; ***************************************************************************************
   29 00:4C04 -  -  -  -  
   30 00:4C04 -  -  -  -  Command_Until: ;; [until]
   31 00:4C04 3E 23 -  -  			ld		a,STM_REPEAT
   32 00:4C06 CD 7A 4C -  			call 	StackCheckFrame
   33 00:4C09 20 0D -  -  			jr 		nz,_UntilError
   34 00:4C0B CD 88 46 -  			call	EvaluateInteger 		; until what
   35 00:4C0E CD 29 52 -  			call 	Int32Zero 				; check zero
   36 00:4C11 CA 98 4C -  			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:4C14 CD 6A 4C -  			call 	StackCloseFrame 		; otherwise end frame.
   38 00:4C17 C9 -  -  -  			ret
   39 00:4C18 -  -  -  -  _UntilError:
   40 00:4C18 3E 15 C3 A3 
              44 -  -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:4C1D -  -  -  -  
   42 00:4C1D -  -  -  -  ; ***************************************************************************************
   43 00:4C1D -  -  -  -  ;
   44 00:4C1D -  -  -  -  ;									Changes and Updates
   45 00:4C1D -  -  -  -  ;
   46 00:4C1D -  -  -  -  ; ***************************************************************************************
   47 00:4C1D -  -  -  -  ;
   48 00:4C1D -  -  -  -  ;		Date			Notes
   49 00:4C1D -  -  -  -  ;		==== 			=====
   50 00:4C1D -  -  -  -  ;
   51 00:4C1D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:4C1D -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 00:4C1D -  -  -  -  ; ***************************************************************************************
    2 00:4C1D -  -  -  -  ; ***************************************************************************************
    3 00:4C1D -  -  -  -  ;
    4 00:4C1D -  -  -  -  ;		Name : 		search.asm
    5 00:4C1D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C1D -  -  -  -  ;		Date : 		8th June 2022
    7 00:4C1D -  -  -  -  ;		Reviewed :	No
    8 00:4C1D -  -  -  -  ;		Purpose :	Search forward for token
    9 00:4C1D -  -  -  -  ;
   10 00:4C1D -  -  -  -  ; ***************************************************************************************
   11 00:4C1D -  -  -  -  
   12 00:4C1D -  -  -  -  ; ***************************************************************************************
   13 00:4C1D -  -  -  -  ;
   14 00:4C1D -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 00:4C1D -  -  -  -  ; 		and IX points to next byte.
   16 00:4C1D -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 00:4C1D -  -  -  -  ;
   18 00:4C1D -  -  -  -  ; ***************************************************************************************
   19 00:4C1D -  -  -  -  
   20 00:4C1D -  -  -  -  SearchForwardTokens:
   21 00:4C1D DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 00:4C20 DD 23 -  -  		inc 	ix
   23 00:4C22 B8 -  -  -  		cp 		b 							; exit if either found.
   24 00:4C23 C8 -  -  -  		ret 	z
   25 00:4C24 B9 -  -  -  		cp 		c
   26 00:4C25 C8 -  -  -  		ret 	z
   27 00:4C26 -  -  -  -  		;
   28 00:4C26 FE 81 -  -  		cp 		KWC_SHIFT_1 				; needs fixing if shift keywords added.
   29 00:4C28 CA F1 44 -  		jp 		z,NotImplemented
   30 00:4C2B FE 82 -  -  		cp 		KWC_SHIFT_2
   31 00:4C2D CA F1 44 -  		jp 		z,NotImplemented
   32 00:4C30 -  -  -  -  		;
   33 00:4C30 FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   34 00:4C32 20 E9 -  -  		jr 		nz,SearchForwardTokens
   35 00:4C34 -  -  -  -  
   36 00:4C34 11 00 00 -  		ld 		de,0 						; put length into DE
   37 00:4C37 DD 5E 00 -  		ld 		e,(ix+0)
   38 00:4C3A 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   39 00:4C3B 13 -  -  -  		inc 	de
   40 00:4C3C DD 19 -  -  		add 	ix,de 						; jump forward
   41 00:4C3E 18 DD -  -  		jr 		SearchForwardTokens
   42 00:4C40 -  -  -  -  
   43 00:4C40 -  -  -  -  ; ***************************************************************************************
   44 00:4C40 -  -  -  -  ;
   45 00:4C40 -  -  -  -  ;									Changes and Updates
   46 00:4C40 -  -  -  -  ;
   47 00:4C40 -  -  -  -  ; ***************************************************************************************
   48 00:4C40 -  -  -  -  ;
   49 00:4C40 -  -  -  -  ;		Date			Notes
   50 00:4C40 -  -  -  -  ;		==== 			=====
   51 00:4C40 -  -  -  -  ;
   52 00:4C40 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4C40 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:4C40 -  -  -  -  ; ***************************************************************************************
    2 00:4C40 -  -  -  -  ; ***************************************************************************************
    3 00:4C40 -  -  -  -  ;
    4 00:4C40 -  -  -  -  ;		Name : 		stack.asm
    5 00:4C40 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C40 -  -  -  -  ;		Date : 		6th June 2022
    7 00:4C40 -  -  -  -  ;		Reviewed :	No
    8 00:4C40 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4C40 -  -  -  -  ;
   10 00:4C40 -  -  -  -  ; ***************************************************************************************
   11 00:4C40 -  -  -  -  ; ***************************************************************************************
   12 00:4C40 -  -  -  -  ;
   13 00:4C40 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:4C40 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 00:4C40 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:4C40 -  -  -  -  ;
   17 00:4C40 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:4C40 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:4C40 -  -  -  -  ;
   20 00:4C40 -  -  -  -  ; ***************************************************************************************
   21 00:4C40 -  -  -  -  ;
   22 00:4C40 -  -  -  -  ;								Clear the stack
   23 00:4C40 -  -  -  -  ;
   24 00:4C40 -  -  -  -  ; ***************************************************************************************
   25 00:4C40 -  -  -  -  
   26 00:4C40 -  -  -  -  StackReset:
   27 00:4C40 2A 38 40 -  		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:4C43 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:4C44 22 54 40 -  		ld 		(BasicSP),hl 				; write out current position
   30 00:4C47 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:4C49 C9 -  -  -  		ret
   32 00:4C4A -  -  -  -  
   33 00:4C4A -  -  -  -  ; ***************************************************************************************
   34 00:4C4A -  -  -  -  ;
   35 00:4C4A -  -  -  -  ;								Open a stack frame type A
   36 00:4C4A -  -  -  -  ;
   37 00:4C4A -  -  -  -  ; ***************************************************************************************
   38 00:4C4A -  -  -  -  
   39 00:4C4A -  -  -  -  StackOpenFrame:
   40 00:4C4A F5 -  -  -  		push 	af 							; save frame type
   41 00:4C4B E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:4C4D 87 -  -  -  		add 	a,a 						; double it
   43 00:4C4E 11 00 00 -  		ld 		de,$0000 					; put in UDE
   44 00:4C51 5F -  -  -  		ld 		e,a
   45 00:4C52 2A 54 40 -  		ld 		hl,(BasicSP) 				; get stack pointer
   46 00:4C55 AF -  -  -  		xor 	a
   47 00:4C56 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 00:4C58 22 54 40 -  		ld 		(BasicSP),hl
   49 00:4C5B F1 -  -  -  		pop 	af 							; copy out frame type
   50 00:4C5C 77 -  -  -  		ld 		(hl),a
   51 00:4C5D ED 5B 3C 40 		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 00:4C61 AF -  -  -  		xor 	a
   53 00:4C62 ED 52 -  -  		sbc 	hl,de
   54 00:4C64 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 00:4C65 3E 16 C3 A3 
              44 -  -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 00:4C6A -  -  -  -  
   57 00:4C6A -  -  -  -  ; ***************************************************************************************
   58 00:4C6A -  -  -  -  ;
   59 00:4C6A -  -  -  -  ;								Close Stack Frame
   60 00:4C6A -  -  -  -  ;
   61 00:4C6A -  -  -  -  ; ***************************************************************************************
   62 00:4C6A -  -  -  -  
   63 00:4C6A -  -  -  -  StackCloseFrame:
   64 00:4C6A 2A 54 40 -  		ld 		hl,(BasicSP)				; get stack frame
   65 00:4C6D 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 00:4C6E E6 0F -  -  		and 	$0F 						; put into UDE
   67 00:4C70 87 -  -  -  		add 	a,a 						; double it
   68 00:4C71 11 00 00 -  		ld 		de,$000000
   69 00:4C74 5F -  -  -  		ld 		e,a
   70 00:4C75 19 -  -  -  		add 	hl,de 						; close it
   71 00:4C76 22 54 40 -  		ld 		(BasicSP),hl 				; write it back
   72 00:4C79 C9 -  -  -  		ret
   73 00:4C7A -  -  -  -  
   74 00:4C7A -  -  -  -  ; ***************************************************************************************
   75 00:4C7A -  -  -  -  ;
   76 00:4C7A -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 00:4C7A -  -  -  -  ;
   78 00:4C7A -  -  -  -  ; ***************************************************************************************
   79 00:4C7A -  -  -  -  
   80 00:4C7A -  -  -  -  StackCheckFrame:
   81 00:4C7A 2A 54 40 -  		ld 		hl,(BasicSP)				; get stack frame
   82 00:4C7D BE -  -  -  		cp 		(hl) 						; get stack marker
   83 00:4C7E C9 -  -  -  		ret
   84 00:4C7F -  -  -  -  
   85 00:4C7F -  -  -  -  ; ***************************************************************************************
   86 00:4C7F -  -  -  -  ;
   87 00:4C7F -  -  -  -  ;								Save position on stack
   88 00:4C7F -  -  -  -  ;
   89 00:4C7F -  -  -  -  ; ***************************************************************************************
   90 00:4C7F -  -  -  -  
   91 00:4C7F -  -  -  -  StackSavePosition:
   92 00:4C7F 2A 54 40 -  		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 00:4C82 23 -  -  -  		inc 	hl
   94 00:4C83 ED 5B 58 40 		ld 		de,(CurrentLineStart) 		; work out current start line
   95 00:4C87 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 00:4C8D -  -  -  -  		;
   97 00:4C8D E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 00:4C8E DD E5 -  -  		push 	ix 							; HL = current position
   99 00:4C90 E1 -  -  -  		pop 	hl
  100 00:4C91 AF -  -  -  		xor 	a 							; calculate offset
  101 00:4C92 ED 52 -  -  		sbc 	hl,de
  102 00:4C94 7D -  -  -  		ld 		a,l 						; into A
  103 00:4C95 E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 00:4C96 77 -  -  -  		ld 		(hl),a
  105 00:4C97 C9 -  -  -  		ret
  106 00:4C98 -  -  -  -  
  107 00:4C98 -  -  -  -  ; ***************************************************************************************
  108 00:4C98 -  -  -  -  ;
  109 00:4C98 -  -  -  -  ;								Load position off stack
  110 00:4C98 -  -  -  -  ;
  111 00:4C98 -  -  -  -  ; ***************************************************************************************
  112 00:4C98 -  -  -  -  
  113 00:4C98 -  -  -  -  StackLoadPosition:
  114 00:4C98 2A 54 40 -  		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 00:4C9B 23 -  -  -  		inc 	hl
  116 00:4C9C E5 -  -  -  		push 	hl 							; save on stack
  117 00:4C9D 7E 23 66 6F 		ld_ind_hl 							; get start of line
  118 00:4CA1 22 58 40 -  		ld 		(CurrentLineStart),hl 		; write it back
  119 00:4CA4 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 00:4CA5 13 -  -  -  		inc 	de
  121 00:4CA6 13 -  -  -  		inc 	de
  122 00:4CA7 13 -  -  -  		inc 	de
  123 00:4CA8 13 -  -  -  		inc 	de
  124 00:4CA9 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 00:4CAA 11 00 00 -  		ld 		de,$000000
  126 00:4CAD 5F -  -  -  		ld 		e,a
  127 00:4CAE 19 -  -  -  		add 	hl,de 						; add to start => position
  128 00:4CAF E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 00:4CB0 DD E1 -  -  		pop 	ix
  130 00:4CB2 C9 -  -  -  		ret
  131 00:4CB3 -  -  -  -  
  132 00:4CB3 -  -  -  -  ; ***************************************************************************************
  133 00:4CB3 -  -  -  -  ;
  134 00:4CB3 -  -  -  -  ;									Changes and Updates
  135 00:4CB3 -  -  -  -  ;
  136 00:4CB3 -  -  -  -  ; ***************************************************************************************
  137 00:4CB3 -  -  -  -  ;
  138 00:4CB3 -  -  -  -  ;		Date			Notes
  139 00:4CB3 -  -  -  -  ;		==== 			=====
  140 00:4CB3 -  -  -  -  ;
  141 00:4CB3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4CB3 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:4CB3 -  -  -  -  ; ***************************************************************************************
    2 00:4CB3 -  -  -  -  ; ***************************************************************************************
    3 00:4CB3 -  -  -  -  ;
    4 00:4CB3 -  -  -  -  ;		Name : 		utility.asm
    5 00:4CB3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CB3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CB3 -  -  -  -  ;		Reviewed :	No
    8 00:4CB3 -  -  -  -  ;		Purpose :	Utility routines
    9 00:4CB3 -  -  -  -  ;
   10 00:4CB3 -  -  -  -  ; ***************************************************************************************
   11 00:4CB3 -  -  -  -  ; ***************************************************************************************
   12 00:4CB3 -  -  -  -  
   13 00:4CB3 -  -  -  -  ; ***************************************************************************************
   14 00:4CB3 -  -  -  -  ;
   15 00:4CB3 -  -  -  -  ;							Print ASCII string at HL
   16 00:4CB3 -  -  -  -  ;
   17 00:4CB3 -  -  -  -  ; ***************************************************************************************
   18 00:4CB3 -  -  -  -  
   19 00:4CB3 -  -  -  -  PrintStringAtHL:
   20 00:4CB3 7E -  -  -  		ld 		a,(hl)
   21 00:4CB4 FE 20 -  -  		cp 		$20		
   22 00:4CB6 D8 -  -  -  		ret 	c
   23 00:4CB7 CD B8 52 -  		call 	SYSPrintChar
   24 00:4CBA 23 -  -  -  		inc 	hl
   25 00:4CBB 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4CBD -  -  -  -  
   27 00:4CBD -  -  -  -  ; ***************************************************************************************
   28 00:4CBD -  -  -  -  ;
   29 00:4CBD -  -  -  -  ;									Changes and Updates
   30 00:4CBD -  -  -  -  ;
   31 00:4CBD -  -  -  -  ; ***************************************************************************************
   32 00:4CBD -  -  -  -  ;
   33 00:4CBD -  -  -  -  ;		Date			Notes
   34 00:4CBD -  -  -  -  ;		==== 			=====
   35 00:4CBD -  -  -  -  ;
   36 00:4CBD -  -  -  -  ; ***************************************************************************************
   37 00:4CBD -  -  -  -  		
Listing for file "_build.asm"
   67 00:4CBD -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:4CBD -  -  -  -  ; ***************************************************************************************
    2 00:4CBD -  -  -  -  ; ***************************************************************************************
    3 00:4CBD -  -  -  -  ;
    4 00:4CBD -  -  -  -  ;		Name : 		create.asm
    5 00:4CBD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CBD -  -  -  -  ;		Date : 		4th June 2022
    7 00:4CBD -  -  -  -  ;		Reviewed :	No
    8 00:4CBD -  -  -  -  ;		Purpose :	Create a variable.
    9 00:4CBD -  -  -  -  ;
   10 00:4CBD -  -  -  -  ; ***************************************************************************************
   11 00:4CBD -  -  -  -  ; ***************************************************************************************
   12 00:4CBD -  -  -  -  
   13 00:4CBD -  -  -  -  ; ***************************************************************************************
   14 00:4CBD -  -  -  -  ;
   15 00:4CBD -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:4CBD -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:4CBD -  -  -  -  ;
   18 00:4CBD -  -  -  -  ; ***************************************************************************************
   19 00:4CBD -  -  -  -  
   20 00:4CBD -  -  -  -  VariableCreate:		
   21 00:4CBD -  -  -  -  		;
   22 00:4CBD -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:4CBD -  -  -  -  		;
   24 00:4CBD 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:4CC0 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:4CC1 E5 -  -  -  		push 	hl 							; save count.
   27 00:4CC2 CD 1A 4A -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4CC5 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4CC6 -  -  -  -  		;
   30 00:4CC6 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4CC6 -  -  -  -  		;
   32 00:4CC6 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4CC7 -  -  -  -  _VCClear:
   34 00:4CC7 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4CC9 23 -  -  -  		inc 	hl
   36 00:4CCA 0B -  -  -  		dec 	bc
   37 00:4CCB 78 -  -  -  		ld		a,b
   38 00:4CCC B1 -  -  -  		or 		c
   39 00:4CCD 20 F8 -  -  		jr 		nz,_VCClear
   40 00:4CCF E1 -  -  -  		pop 	hl							; restore start address
   41 00:4CD0 -  -  -  -  		;
   42 00:4CD0 -  -  -  -  		;		Now start to create the data.
   43 00:4CD0 -  -  -  -  		;
   44 00:4CD0 E5 -  -  -  		push 	hl 							; save start
   45 00:4CD1 -  -  -  -  		;
   46 00:4CD1 -  -  -  -  		;		Write hash to +0
   47 00:4CD1 -  -  -  -  		;
   48 00:4CD1 3A 8A 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:4CD4 77 -  -  -  		ld 		(hl),a
   50 00:4CD5 23 -  -  -  		inc 	hl
   51 00:4CD6 -  -  -  -  		;
   52 00:4CD6 -  -  -  -  		;		Write list head to +1
   53 00:4CD6 -  -  -  -  		;
   54 00:4CD6 E5 -  -  -  		push 	hl 							; save write position
   55 00:4CD7 2A 8C 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4CDA 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:4CDE EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:4CDF E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:4CE0 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4CE6 -  -  -  -  		;
   61 00:4CE6 -  -  -  -  		;		Write variable name to +5
   62 00:4CE6 -  -  -  -  		;
   63 00:4CE6 ED 5B 86 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4CEA 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:4CF0 -  -  -  -  		;
   66 00:4CF0 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:4CF1 2A 8C 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4CF4 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4CFA -  -  -  -  		;
   70 00:4CFA EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4CFB C9 -  -  -  		ret
   72 00:4CFC -  -  -  -  
   73 00:4CFC -  -  -  -  ; ***************************************************************************************
   74 00:4CFC -  -  -  -  ;
   75 00:4CFC -  -  -  -  ;									Changes and Updates
   76 00:4CFC -  -  -  -  ;
   77 00:4CFC -  -  -  -  ; ***************************************************************************************
   78 00:4CFC -  -  -  -  ;
   79 00:4CFC -  -  -  -  ;		Date			Notes
   80 00:4CFC -  -  -  -  ;		==== 			=====
   81 00:4CFC -  -  -  -  ;
   82 00:4CFC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4CFC -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4CFC -  -  -  -  ; ***************************************************************************************
    2 00:4CFC -  -  -  -  ; ***************************************************************************************
    3 00:4CFC -  -  -  -  ;
    4 00:4CFC -  -  -  -  ;		Name : 		find.asm
    5 00:4CFC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CFC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CFC -  -  -  -  ;		Reviewed :	No
    8 00:4CFC -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4CFC -  -  -  -  ;
   10 00:4CFC -  -  -  -  ; ***************************************************************************************
   11 00:4CFC -  -  -  -  ; ***************************************************************************************
   12 00:4CFC -  -  -  -  
   13 00:4CFC -  -  -  -  ; ***************************************************************************************
   14 00:4CFC -  -  -  -  ;
   15 00:4CFC -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4CFC -  -  -  -  ; 		variable information at (IX)
   17 00:4CFC -  -  -  -  ;
   18 00:4CFC -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4CFC -  -  -  -  ;		Don't autocreate arrays.
   20 00:4CFC -  -  -  -  ;
   21 00:4CFC -  -  -  -  ; ***************************************************************************************
   22 00:4CFC -  -  -  -  
   23 00:4CFC -  -  -  -  FindVariable:
   24 00:4CFC DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:4CFF FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:4D01 D2 00 45 -  		jp 		nc,SyntaxError 		
   27 00:4D04 -  -  -  -  
   28 00:4D04 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4D07 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4D09 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4D0B FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:4D0D 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:4D0F -  -  -  -  		;
   34 00:4D0F -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:4D0F -  -  -  -  		;
   36 00:4D0F 2A 40 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:4D12 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4D15 87 -  -  -  		add 	a,a 						; x4
   39 00:4D16 87 -  -  -  		add 	a,a
   40 00:4D17 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4D18 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4D19 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4D1B CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4D1D DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4D1F AF -  -  -  		xor 	a 							; clear carry and return
   46 00:4D20 C9 -  -  -  		ret
   47 00:4D21 -  -  -  -  		;
   48 00:4D21 -  -  -  -  		;		Not a standard simple variable.
   49 00:4D21 -  -  -  -  		;
   50 00:4D21 -  -  -  -  _FVNotSimple:
   51 00:4D21 CD 7D 4D -  		call 	VariableInformation 		; get information about the variable.
   52 00:4D24 CD B3 4D -  		call 	VariableSearchList 			; search the linked list
   53 00:4D27 38 12 -  -  		jr 		c,_FVNotFound  				
   54 00:4D29 -  -  -  -  		;
   55 00:4D29 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4D29 -  -  -  -  		;
   57 00:4D29 -  -  -  -  _FVExitReference:		
   58 00:4D29 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4D2C 19 -  -  -  		add 	hl,de 
   60 00:4D2D -  -  -  -  		;
   61 00:4D2D -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:4D2D -  -  -  -  		;
   63 00:4D2D DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:4D30 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:4D32 CC 56 4D -  		call 	z,ArrayLookup 				; array access required.
   66 00:4D35 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:4D37 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:4D39 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:4D3A C9 -  -  -  		ret
   70 00:4D3B -  -  -  -  		;
   71 00:4D3B -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:4D3B -  -  -  -  		;
   73 00:4D3B -  -  -  -  _FVNotFound:		
   74 00:4D3B 3A 7C 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:4D3E B7 -  -  -  		or 		a
   76 00:4D3F 28 0F -  -  		jr 		z,_FVFail
   77 00:4D41 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:4D44 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:4D46 28 08 -  -  		jr 		z,_FVFail
   80 00:4D48 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   81 00:4D4B CD BD 4C -  		call 	VariableCreate 				; create a new variable.
   82 00:4D4E 18 D9 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:4D50 -  -  -  -  
   84 00:4D50 -  -  -  -  _FVFail:
   85 00:4D50 DD 2A 86 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:4D54 37 -  -  -  		scf
   87 00:4D55 C9 -  -  -  		ret
   88 00:4D56 -  -  -  -  
   89 00:4D56 -  -  -  -  ; ***************************************************************************************
   90 00:4D56 -  -  -  -  ;
   91 00:4D56 -  -  -  -  ;									 Array lookup
   92 00:4D56 -  -  -  -  ;
   93 00:4D56 -  -  -  -  ; ***************************************************************************************
   94 00:4D56 -  -  -  -  
   95 00:4D56 -  -  -  -  ArrayLookup:
   96 00:4D56 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:4D57 CD 6A 46 -  		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:4D5A D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:4D5B 7C -  -  -  		ld 		a,h
  100 00:4D5C B5 -  -  -  		or 		l
  101 00:4D5D D9 -  -  -  		exx
  102 00:4D5E 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:4D60 11 00 00 -  		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:4D63 54 -  -  -  		ld 		d,h
  105 00:4D64 5D -  -  -  		ld 		e,l
  106 00:4D65 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:4D66 E5 -  -  -  		push 	hl
  108 00:4D67 7E 23 66 6F 		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:4D6B AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:4D6C ED 52 -  -  		sbc 	hl,de
  111 00:4D6E DA 78 4D -  		jp 		c,_ALBadValue 				; if max < index then error
  112 00:4D71 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:4D72 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:4D73 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:4D74 29 -  -  -  		add 	hl,hl
  116 00:4D75 D1 -  -  -  		pop 	de 							; get array base back
  117 00:4D76 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:4D77 C9 -  -  -  		ret
  119 00:4D78 -  -  -  -  
  120 00:4D78 -  -  -  -  _ALBadValue:
  121 00:4D78 3E 09 C3 A3 
              44 -  -  -  		ERR_INDEX
  122 00:4D7D -  -  -  -  		
  123 00:4D7D -  -  -  -  ; ***************************************************************************************
  124 00:4D7D -  -  -  -  ;
  125 00:4D7D -  -  -  -  ;									Changes and Updates
  126 00:4D7D -  -  -  -  ;
  127 00:4D7D -  -  -  -  ; ***************************************************************************************
  128 00:4D7D -  -  -  -  ;
  129 00:4D7D -  -  -  -  ;		Date			Notes
  130 00:4D7D -  -  -  -  ;		==== 			=====
  131 00:4D7D -  -  -  -  ;
  132 00:4D7D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:4D7D -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4D7D -  -  -  -  ; ***************************************************************************************
    2 00:4D7D -  -  -  -  ; ***************************************************************************************
    3 00:4D7D -  -  -  -  ;
    4 00:4D7D -  -  -  -  ;		Name : 		info.asm
    5 00:4D7D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D7D -  -  -  -  ;		Date : 		4th June 2022
    7 00:4D7D -  -  -  -  ;		Reviewed :	No
    8 00:4D7D -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4D7D -  -  -  -  ;
   10 00:4D7D -  -  -  -  ; ***************************************************************************************
   11 00:4D7D -  -  -  -  ; ***************************************************************************************
   12 00:4D7D -  -  -  -  
   13 00:4D7D -  -  -  -  ; ***************************************************************************************
   14 00:4D7D -  -  -  -  ;
   15 00:4D7D -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4D7D -  -  -  -  ; 		after the identifier.
   17 00:4D7D -  -  -  -  ;
   18 00:4D7D -  -  -  -  ; ***************************************************************************************
   19 00:4D7D -  -  -  -  
   20 00:4D7D -  -  -  -  VariableInformation:
   21 00:4D7D DD 22 86 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4D81 -  -  -  -  		;
   23 00:4D81 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4D81 -  -  -  -  		;
   25 00:4D81 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4D83 -  -  -  -  _VICalculateHash:
   27 00:4D83 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4D86 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4D88 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4D8A 80 -  -  -  		add 	a,b 						; add to hash
   31 00:4D8B 07 -  -  -  		rlca
   32 00:4D8C 07 -  -  -  		rlca
   33 00:4D8D 80 -  -  -  		add 	a,b
   34 00:4D8E 47 -  -  -  		ld 		b,a 						; update hash
   35 00:4D8F DD 23 -  -  		inc 	ix 							; next character
   36 00:4D91 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:4D93 -  -  -  -  		;
   38 00:4D93 -  -  -  -  _VIHashDone:
   39 00:4D93 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:4D94 -  -  -  -  		;
   41 00:4D94 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:4D94 -  -  -  -  		;
   43 00:4D94 32 8A 40 -  		ld 		(VarHash),a
   44 00:4D97 -  -  -  -  		;
   45 00:4D97 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:4D97 -  -  -  -  		;		
   47 00:4D97 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:4D99 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:4D9C 6F -  -  -  		ld 		l,a
   50 00:4D9D 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:4D9E 29 -  -  -  		add 	hl,hl
   52 00:4D9F -  -  -  -  		;
   53 00:4D9F ED 5B 44 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:4DA3 19 -  -  -  		add 	hl,de
   55 00:4DA4 -  -  -  -  		;
   56 00:4DA4 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:4DA7 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:4DA9 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:4DAB 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:4DAE 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:4DAF -  -  -  -  _VINotArray:
   62 00:4DAF 22 8C 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:4DB2 C9 -  -  -  		ret
   64 00:4DB3 -  -  -  -  
   65 00:4DB3 -  -  -  -  ; ***************************************************************************************
   66 00:4DB3 -  -  -  -  ;
   67 00:4DB3 -  -  -  -  ;									Changes and Updates
   68 00:4DB3 -  -  -  -  ;
   69 00:4DB3 -  -  -  -  ; ***************************************************************************************
   70 00:4DB3 -  -  -  -  ;
   71 00:4DB3 -  -  -  -  ;		Date			Notes
   72 00:4DB3 -  -  -  -  ;		==== 			=====
   73 00:4DB3 -  -  -  -  ;
   74 00:4DB3 -  -  -  -  ; ***************************************************************************************
   75 00:4DB3 -  -  -  -  
Listing for file "_build.asm"
   70 00:4DB3 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:4DB3 -  -  -  -  ; ***************************************************************************************
    2 00:4DB3 -  -  -  -  ; ***************************************************************************************
    3 00:4DB3 -  -  -  -  ;
    4 00:4DB3 -  -  -  -  ;		Name : 		search.asm
    5 00:4DB3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4DB3 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4DB3 -  -  -  -  ;		Reviewed :	No
    8 00:4DB3 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:4DB3 -  -  -  -  ;
   10 00:4DB3 -  -  -  -  ; ***************************************************************************************
   11 00:4DB3 -  -  -  -  ; ***************************************************************************************
   12 00:4DB3 -  -  -  -  
   13 00:4DB3 -  -  -  -  ; ***************************************************************************************
   14 00:4DB3 -  -  -  -  ;
   15 00:4DB3 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:4DB3 -  -  -  -  ;		CS if failed.
   17 00:4DB3 -  -  -  -  ;
   18 00:4DB3 -  -  -  -  ; ***************************************************************************************
   19 00:4DB3 -  -  -  -  
   20 00:4DB3 -  -  -  -  VariableSearchList:
   21 00:4DB3 2A 8C 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4DB6 -  -  -  -  		;
   23 00:4DB6 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4DB6 -  -  -  -  		;		the address of the hash record
   25 00:4DB6 -  -  -  -  		;
   26 00:4DB6 -  -  -  -  _VSLLoop:
   27 00:4DB6 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4DBA -  -  -  -  		;
   29 00:4DBA E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4DBB AF -  -  -  		xor 	a
   31 00:4DBC ED 6A -  -  		adc 	hl,hl
   32 00:4DBE E1 -  -  -  		pop 	hl
   33 00:4DBF 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:4DC1 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:4DC2 C8 -  -  -  		ret 	z
   36 00:4DC3 -  -  -  -  _VSLRecord:
   37 00:4DC3 -  -  -  -  		;
   38 00:4DC3 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:4DC3 -  -  -  -  		;
   40 00:4DC3 3A 8A 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:4DC6 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:4DC7 23 -  -  -  		inc 	hl 							; points to link back
   43 00:4DC8 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4DCA -  -  -  -  		;
   45 00:4DCA -  -  -  -  		;		Now check the name
   46 00:4DCA -  -  -  -  		;
   47 00:4DCA E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4DCB 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4DCC 23 -  -  -  		inc 	hl
   50 00:4DCD 23 -  -  -  		inc 	hl
   51 00:4DCE 23 -  -  -  		inc 	hl
   52 00:4DCF 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:4DD3 ED 5B 86 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:4DD7 -  -  -  -  		;
   55 00:4DD7 -  -  -  -  		;		Check individual characters
   56 00:4DD7 -  -  -  -  		;
   57 00:4DD7 -  -  -  -  _VSLCharacter:
   58 00:4DD7 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:4DD8 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4DDA 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4DDC BE -  -  -  		cp 		(hl) 						; compare them
   62 00:4DDD 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:4DDE 13 -  -  -  		inc 	de
   64 00:4DDF 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:4DE1 -  -  -  -  		;
   66 00:4DE1 -  -  -  -  _VSLFailed:
   67 00:4DE1 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:4DE2 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:4DE4 -  -  -  -  		;
   70 00:4DE4 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:4DE4 -  -  -  -  		;		
   72 00:4DE4 -  -  -  -  _VSLEndIdentifier:
   73 00:4DE4 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:4DE5 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4DE7 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4DE9 -  -  -  -  		;
   77 00:4DE9 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4DEA 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4DEB AF -  -  -  		xor 	a 							; clear carry
   80 00:4DEC C9 -  -  -  		ret
   81 00:4DED -  -  -  -  
   82 00:4DED -  -  -  -  ; ***************************************************************************************
   83 00:4DED -  -  -  -  ;
   84 00:4DED -  -  -  -  ;									Changes and Updates
   85 00:4DED -  -  -  -  ;
   86 00:4DED -  -  -  -  ; ***************************************************************************************
   87 00:4DED -  -  -  -  ;
   88 00:4DED -  -  -  -  ;		Date			Notes
   89 00:4DED -  -  -  -  ;		==== 			=====
   90 00:4DED -  -  -  -  ;
   91 00:4DED -  -  -  -  ; ***************************************************************************************
   92 00:4DED -  -  -  -  		
Listing for file "_build.asm"
   71 00:4DED -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4DED -  -  -  -  ;
    2 00:4DED -  -  -  -  ;	This file is automatically generated.
    3 00:4DED -  -  -  -  ;
    4 00:4DED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:4E00 -  -  -  -  PrecedenceTable:
    6 00:4E00 06 -  -  -  	.db	6	; $0083 !
    7 00:4E01 06 -  -  -  	.db	6	; $0084 ?
    8 00:4E02 05 -  -  -  	.db	5	; $0085 *
    9 00:4E03 05 -  -  -  	.db	5	; $0086 /
   10 00:4E04 05 -  -  -  	.db	5	; $0087 mod
   11 00:4E05 05 -  -  -  	.db	5	; $0088 div
   12 00:4E06 04 -  -  -  	.db	4	; $0089 +
   13 00:4E07 04 -  -  -  	.db	4	; $008a -
   14 00:4E08 03 -  -  -  	.db	3	; $008b >=
   15 00:4E09 03 -  -  -  	.db	3	; $008c <=
   16 00:4E0A 03 -  -  -  	.db	3	; $008d >
   17 00:4E0B 03 -  -  -  	.db	3	; $008e <
   18 00:4E0C 03 -  -  -  	.db	3	; $008f =
   19 00:4E0D 03 -  -  -  	.db	3	; $0090 <>
   20 00:4E0E 02 -  -  -  	.db	2	; $0091 and
   21 00:4E0F 01 -  -  -  	.db	1	; $0092 or
   22 00:4E10 01 -  -  -  	.db	1	; $0093 eor
   23 00:4E11 -  -  -  -  
Listing for file "_build.asm"
   72 00:4E11 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4E11 -  -  -  -  ;
    2 00:4E11 -  -  -  -  ;	This is automatically generated.
    3 00:4E11 -  -  -  -  ;
    4 00:4E11 -  -  -  -  ErrorIDTable:
    5 00:4E11 7D 4E 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4E15 83 4E 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4E19 94 4E 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:4E1D A2 4E 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4E21 AC 4E 00 00 	.dw	ErrText_data & $FFFF,ErrText_data >> 16
   10 00:4E25 B8 4E 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   11 00:4E29 C2 4E 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   12 00:4E2D DC 4E 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   13 00:4E31 ED 4E 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   14 00:4E35 02 4F 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   15 00:4E39 12 4F 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   16 00:4E3D 27 4F 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   17 00:4E41 35 4F 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   18 00:4E45 46 4F 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   19 00:4E49 54 4F 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   20 00:4E4D 5E 4F 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   21 00:4E51 73 4F 00 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   22 00:4E55 88 4F 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   23 00:4E59 9E 4F 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   24 00:4E5D AC 4F 00 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   25 00:4E61 BF 4F 00 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   26 00:4E65 D1 4F 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   27 00:4E69 E6 4F 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   28 00:4E6D F2 4F 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   29 00:4E71 F7 4F 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   30 00:4E75 04 50 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   31 00:4E79 15 50 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   32 00:4E7D -  -  -  -  
   33 00:4E7D -  -  -  -  ErrText_warmstart:
   34 00:4E7D 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   35 00:4E83 -  -  -  -  ErrText_assert:
   36 00:4E83 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   37 00:4E94 -  -  -  -  ErrText_badtype:
   38 00:4E94 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   39 00:4EA2 -  -  -  -  ErrText_badvalue:
   40 00:4EA2 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   41 00:4EAC -  -  -  -  ErrText_data:
   42 00:4EAC 4F 75 74 20 
              6F 66 20 44 
              61 74 61 00 	.db "Out of Data",0
   43 00:4EB8 -  -  -  -  ErrText_dim:
   44 00:4EB8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   45 00:4EC2 -  -  -  -  ErrText_disabled:
   46 00:4EC2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   47 00:4EDC -  -  -  -  ErrText_divzero:
   48 00:4EDC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   49 00:4EED -  -  -  -  ErrText_gosub:
   50 00:4EED 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   51 00:4F02 -  -  -  -  ErrText_index:
   52 00:4F02 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   53 00:4F12 -  -  -  -  ErrText_lineno:
   54 00:4F12 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   55 00:4F27 -  -  -  -  ErrText_memory:
   56 00:4F27 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   57 00:4F35 -  -  -  -  ErrText_next:
   58 00:4F35 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   59 00:4F46 -  -  -  -  ErrText_nocomma:
   60 00:4F46 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   61 00:4F54 -  -  -  -  ErrText_nodollar:
   62 00:4F54 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   63 00:4F5E -  -  -  -  ErrText_nolbracket:
   64 00:4F5E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   65 00:4F73 -  -  -  -  ErrText_noproc:
   66 00:4F73 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   67 00:4F88 -  -  -  -  ErrText_norbracket:
   68 00:4F88 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   69 00:4F9E -  -  -  -  ErrText_notref:
   70 00:4F9E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   71 00:4FAC -  -  -  -  ErrText_param:
   72 00:4FAC 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   73 00:4FBF -  -  -  -  ErrText_proc:
   74 00:4FBF 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   75 00:4FD1 -  -  -  -  ErrText_repeat:
   76 00:4FD1 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   77 00:4FE6 -  -  -  -  ErrText_stack:
   78 00:4FE6 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   79 00:4FF2 -  -  -  -  ErrText_stop:
   80 00:4FF2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   81 00:4FF7 -  -  -  -  ErrText_syntax:
   82 00:4FF7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   83 00:5004 -  -  -  -  ErrText_todo:
   84 00:5004 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   85 00:5015 -  -  -  -  ErrText_unknownvar:
   86 00:5015 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   73 00:5026 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:5026 -  -  -  -  ;
    2 00:5026 -  -  -  -  ;	Vectors for set 0
    3 00:5026 -  -  -  -  ;
    4 00:5026 -  -  -  -  VectorsSet0:
    5 00:5026 6E 42 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:5028 22 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:502A 22 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:502C 5D 45 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:502E 65 45 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:5030 1B 45 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:5032 26 45 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:5034 31 45 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:5036 26 45 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:5038 05 45 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:503A 10 45 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:503C B8 45 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:503E AF 45 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:5040 9D 45 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:5042 94 45 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:5044 8B 45 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:5046 A6 45 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:5048 3C 45 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:504A 47 45 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:504C 52 45 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:504E 8C 48 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:5050 86 48 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:5052 CD 47 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:5054 F3 47 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:5056 BE 47 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:5058 9B 47 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:505A 71 48 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:505C 99 48 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:505E AD 47 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:5060 A6 47 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:5062 D6 47 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:5064 E8 47 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:5066 BC 48 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:5068 C2 48 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:506A CD 48 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:506C 7D 45 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:506E 81 45 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:5070 C5 41 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:5072 C5 41 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:5074 C8 41 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:5076 C5 41 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:5078 3B 43 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:507A C5 41 -  -  	addr(BadCmd_LSBracket)           ; $00aa [
   48 00:507C C5 41 -  -  	addr(BadCmd_RSBracket)           ; $00ab ]
   49 00:507E C5 41 -  -  	addr(BadCmd_Comma)               ; $00ac ~
   50 00:5080 FB 4B -  -  	addr(Command_REPEAT)             ; $00ad repeat
   51 00:5082 04 4C -  -  	addr(Command_Until)              ; $00ae until
   52 00:5084 C9 4B -  -  	addr(Command_IF)                 ; $00af if
   53 00:5086 C5 41 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:5088 F8 4B -  -  	addr(Command_Else)               ; $00b1 else
   55 00:508A 95 4A -  -  	addr(Command_FOR)                ; $00b2 for
   56 00:508C C5 41 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:508E C5 41 -  -  	addr(BadCmd_Step)                ; $00b4 step
   58 00:5090 1B 4B -  -  	addr(Command_Next)               ; $00b5 next
   59 00:5092 C5 41 -  -  	addr(BadCmd_Def)                 ; $00b6 def
   60 00:5094 61 49 -  -  	addr(Command_PROC)               ; $00b7 proc
   61 00:5096 B1 49 -  -  	addr(Command_ENDPROC)            ; $00b8 endproc
   62 00:5098 66 4B -  -  	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:509A 77 4B -  -  	addr(Command_Return)             ; $00ba return
   64 00:509C 8A 4B -  -  	addr(Command_GOTO)               ; $00bb goto
   65 00:509E DF 48 -  -  	addr(Command_LOCAL)              ; $00bc local
   66 00:50A0 C9 41 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:50A2 3B 43 -  -  	addr(Command_REM)                ; $00be rem
   68 00:50A4 81 42 -  -  	addr(Command_LET)                ; $00bf let
   69 00:50A6 BE 43 -  -  	addr(Command_VDU)                ; $00c0 vdu
   70 00:50A8 DB 42 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:50AA 22 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:50AC 22 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:50AE 43 54 -  -  	addr(Command_LIST)               ; $00c4 list
   74 00:50B0 88 4A -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:50B2 56 43 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:50B4 EE 43 -  -  	addr(Command_READ)               ; $00c7 read
   77 00:50B6 C5 41 -  -  	addr(BadCmd_Data)                ; $00c8 data
   78 00:50B8 55 44 -  -  	addr(Command_RESTORE)            ; $00c9 restore
   79 00:50BA B6 41 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:50BC 37 4A -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:50BE 69 42 -  -  	addr(Command_END)                ; $00cc end
   82 00:50C0 B9 43 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:50C2 22 40 -  -  	addr(Unimplemented)              ; $00ce move
   84 00:50C4 22 40 -  -  	addr(Unimplemented)              ; $00cf draw
   85 00:50C6 22 40 -  -  	addr(Unimplemented)              ; $00d0 plot
   86 00:50C8 22 40 -  -  	addr(Unimplemented)              ; $00d1 mode
   87 00:50CA 22 40 -  -  	addr(Unimplemented)              ; $00d2 colour
   88 00:50CC 22 40 -  -  	addr(Unimplemented)              ; $00d3 gcol
   89 00:50CE -  -  -  -  ;
   90 00:50CE -  -  -  -  ;	Vectors for set 1
   91 00:50CE -  -  -  -  ;
   92 00:50CE -  -  -  -  VectorsSet1:
   93 00:50CE -  -  -  -  ;
   94 00:50CE -  -  -  -  ;	Vectors for set 2
   95 00:50CE -  -  -  -  ;
   96 00:50CE -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   74 00:50CE -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:50CE -  -  -  -  ; ***************************************************************************************
    2 00:50CE -  -  -  -  ; ***************************************************************************************
    3 00:50CE -  -  -  -  ;
    4 00:50CE -  -  -  -  ;		Name : 		idivide.asm
    5 00:50CE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:50CE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:50CE -  -  -  -  ;		Reviewed :	No
    8 00:50CE -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:50CE -  -  -  -  ;
   10 00:50CE -  -  -  -  ; ***************************************************************************************
   11 00:50CE -  -  -  -  ; ***************************************************************************************
   12 00:50CE -  -  -  -  
   13 00:50CE -  -  -  -  ; ***************************************************************************************
   14 00:50CE -  -  -  -  ;
   15 00:50CE -  -  -  -  ;								Unsigned integer divide
   16 00:50CE -  -  -  -  ;
   17 00:50CE -  -  -  -  ; ***************************************************************************************
   18 00:50CE -  -  -  -  
   19 00:50CE -  -  -  -  Int32UDivide:
   20 00:50CE 37 -  -  -  		scf
   21 00:50CF C3 0D 51 -  		jp 		_I32UnsignedDivide		
   22 00:50D2 -  -  -  -  
   23 00:50D2 -  -  -  -  ; ***************************************************************************************
   24 00:50D2 -  -  -  -  ;
   25 00:50D2 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:50D2 -  -  -  -  ;
   27 00:50D2 -  -  -  -  ; ***************************************************************************************
   28 00:50D2 -  -  -  -  
   29 00:50D2 -  -  -  -  Int32SDivide:
   30 00:50D2 37 -  -  -  		scf
   31 00:50D3 18 01 -  -  		jr 		_I32SDivide
   32 00:50D5 -  -  -  -  Int32Modulus:
   33 00:50D5 AF -  -  -  		xor 	a
   34 00:50D6 -  -  -  -  _I32SDivide:
   35 00:50D6 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:50D7 F5 -  -  -  		push 	af
   37 00:50D8 08 -  -  -  		ex 		af,af'
   38 00:50D9 -  -  -  -  
   39 00:50D9 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:50DA D9 -  -  -  		exx
   41 00:50DB D5 -  -  -  		push 	de
   42 00:50DC D9 -  -  -  		exx
   43 00:50DD -  -  -  -  
   44 00:50DD F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:50DE AF -  -  -  		xor 	a 							; clear sign count.
   46 00:50DF CD FB 50 -  		call 	_I32CheckHLSignSwap
   47 00:50E2 CD FB 50 -  		call 	_I32CheckHLSignSwap
   48 00:50E5 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:50E6 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:50E7 F5 -  -  -  		push 	af
   51 00:50E8 CD 0D 51 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:50EB F1 -  -  -  		pop 	af 							; get function back
   53 00:50EC 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:50EE 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:50EF CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:50F1 C4 57 52 -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:50F4 -  -  -  -  _I32SDExit:
   58 00:50F4 D9 -  -  -  		exx 								; restore DE'DE
   59 00:50F5 D1 -  -  -  		pop 	de
   60 00:50F6 D9 -  -  -  		exx
   61 00:50F7 D1 -  -  -  		pop 	de
   62 00:50F8 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:50F9 08 -  -  -  		ex 		af,af'
   64 00:50FA C9 -  -  -  		ret
   65 00:50FB -  -  -  -  
   66 00:50FB -  -  -  -  
   67 00:50FB -  -  -  -  _I32CheckHLSignSwap:
   68 00:50FB D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:50FC CB 7C -  -  		bit 	7,h
   70 00:50FE D9 -  -  -  		exx
   71 00:50FF 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:5101 -  -  -  -  		;
   73 00:5101 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:5103 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:5104 CD 57 52 -  		call 	Int32Negate 				
   76 00:5107 F1 -  -  -  		pop 	af
   77 00:5108 -  -  -  -  _I32CHSPositive:
   78 00:5108 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:5109 EB -  -  -  		ex 		de,hl
   80 00:510A D9 -  -  -  		exx		
   81 00:510B EB -  -  -  		ex 		de,hl
   82 00:510C C9 -  -  -  		ret
   83 00:510D -  -  -  -  
   84 00:510D -  -  -  -  ; ***************************************************************************************
   85 00:510D -  -  -  -  ;
   86 00:510D -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:510D -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:510D -  -  -  -  ;
   89 00:510D -  -  -  -  ; ***************************************************************************************
   90 00:510D -  -  -  -  
   91 00:510D -  -  -  -  _I32UnsignedDivide:
   92 00:510D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:510E D5 -  -  -  		push 	de
   94 00:510F D9 -  -  -  		exx
   95 00:5110 C5 -  -  -  		push 	bc
   96 00:5111 D5 -  -  -  		push 	de 							
   97 00:5112 D9 -  -  -  		exx
   98 00:5113 -  -  -  -  
   99 00:5113 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:5114 -  -  -  -  
  101 00:5114 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:5115 B3 -  -  -  		or 		e
  103 00:5116 D9 -  -  -  		exx
  104 00:5117 B2 -  -  -  		or 		d
  105 00:5118 B3 -  -  -  		or 		e
  106 00:5119 D9 -  -  -  		exx
  107 00:511A CA 27 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:511D -  -  -  -  
  109 00:511D -  -  -  -  
  110 00:511D 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:511E 4D -  -  -  		ld		c,l
  112 00:511F 21 00 00 -  		ld 		hl,$0000
  113 00:5122 D9 -  -  -  		exx
  114 00:5123 44 -  -  -  		ld 		b,h
  115 00:5124 4D -  -  -  		ld		c,l
  116 00:5125 21 00 00 -  		ld 		hl,$0000
  117 00:5128 D9 -  -  -  		exx
  118 00:5129 -  -  -  -  
  119 00:5129 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:512B -  -  -  -  _I32DivideLoop:
  121 00:512B F5 -  -  -  		push 	af
  122 00:512C -  -  -  -  
  123 00:512C CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:512E CB 10 -  -  		rl 		b
  125 00:5130 D9 -  -  -  		exx
  126 00:5131 CB 11 -  -  		rl 		c
  127 00:5133 CB 10 -  -  		rl 		b
  128 00:5135 D9 -  -  -  		exx
  129 00:5136 CB 15 -  -  		rl 		l
  130 00:5138 CB 14 -  -  		rl 		h
  131 00:513A D9 -  -  -  		exx
  132 00:513B CB 15 -  -  		rl 		l
  133 00:513D CB 14 -  -  		rl 		h
  134 00:513F D9 -  -  -  		exx
  135 00:5140 -  -  -  -  
  136 00:5140 CD FD 51 -  		call 	Int32Subtract 				; A = A - M
  137 00:5143 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:5145 -  -  -  -  
  139 00:5145 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:5146 18 03 -  -  		jr 		_I32Next
  141 00:5148 -  -  -  -  
  142 00:5148 -  -  -  -  _I32Borrow:
  143 00:5148 CD F7 51 -  		call 	Int32Add 					; A = A + M
  144 00:514B -  -  -  -  _I32Next:
  145 00:514B F1 -  -  -  		pop 	af
  146 00:514C 3D -  -  -  		dec 	a
  147 00:514D 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:514F -  -  -  -  
  149 00:514F F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:5150 -  -  -  -  
  151 00:5150 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:5151 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:5153 -  -  -  -  
  154 00:5153 60 -  -  -  		ld  	h,b
  155 00:5154 69 -  -  -  		ld 		l,c
  156 00:5155 D9 -  -  -  		exx
  157 00:5156 60 -  -  -  		ld  	h,b
  158 00:5157 69 -  -  -  		ld 		l,c
  159 00:5158 D9 -  -  -  		exx
  160 00:5159 -  -  -  -  _I32Modulus1:		
  161 00:5159 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:515A D1 -  -  -  		pop 	de
  163 00:515B C1 -  -  -  		pop 	bc
  164 00:515C D9 -  -  -  		exx
  165 00:515D D1 -  -  -  		pop 	de
  166 00:515E C1 -  -  -  		pop 	bc
  167 00:515F C9 -  -  -  		ret
  168 00:5160 -  -  -  -  
  169 00:5160 -  -  -  -  ; ***************************************************************************************
  170 00:5160 -  -  -  -  ;
  171 00:5160 -  -  -  -  ;									Changes and Updates
  172 00:5160 -  -  -  -  ;
  173 00:5160 -  -  -  -  ; ***************************************************************************************
  174 00:5160 -  -  -  -  ;
  175 00:5160 -  -  -  -  ;		Date			Notes
  176 00:5160 -  -  -  -  ;		==== 			=====
  177 00:5160 -  -  -  -  ;
  178 00:5160 -  -  -  -  ; ***************************************************************************************
  179 00:5160 -  -  -  -  		
Listing for file "_build.asm"
   75 00:5160 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:5160 -  -  -  -  ; ***************************************************************************************
    2 00:5160 -  -  -  -  ; ***************************************************************************************
    3 00:5160 -  -  -  -  ;
    4 00:5160 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:5160 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5160 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:5160 -  -  -  -  ;		Reviewed :	No
    8 00:5160 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:5160 -  -  -  -  ;
   10 00:5160 -  -  -  -  ; ***************************************************************************************
   11 00:5160 -  -  -  -  ; ***************************************************************************************
   12 00:5160 -  -  -  -  
   13 00:5160 -  -  -  -  ; ***************************************************************************************
   14 00:5160 -  -  -  -  ;
   15 00:5160 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:5160 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:5160 -  -  -  -  ;
   18 00:5160 -  -  -  -  ; ***************************************************************************************
   19 00:5160 -  -  -  -  
   20 00:5160 -  -  -  -  Int32FromString:
   21 00:5160 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:5161 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:5162 D5 -  -  -  		push 	de
   24 00:5163 D9 -  -  -  		exx
   25 00:5164 D5 -  -  -  		push 	de
   26 00:5165 -  -  -  -  
   27 00:5165 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:5168 11 00 00 -  		ld 		de,$0000
   29 00:516B D9 -  -  -  		exx
   30 00:516C 21 00 00 -  		ld 		hl,$0000
   31 00:516F 11 00 00 -  		ld 		de,$0000
   32 00:5172 D9 -  -  -  		exx
   33 00:5173 -  -  -  -  
   34 00:5173 5F -  -  -  		ld 		e,a 						; base in E
   35 00:5174 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:5176 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:5178 ED 44 -  -  		neg 		 						; fix up the base
   38 00:517A 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:517B -  -  -  -  		;
   40 00:517B 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:517C F5 -  -  -  		push 	af
   42 00:517D FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:517F 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:5180 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:5182 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:5183 18 01 -  -  		jr 		_I32FSMain
   47 00:5185 -  -  -  -  _I32FSNotSigned:		
   48 00:5185 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:5186 -  -  -  -  		;
   50 00:5186 -  -  -  -  		; 		Main conversion loop.
   51 00:5186 -  -  -  -  		; 		
   52 00:5186 -  -  -  -  _I32FSMain:		
   53 00:5186 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:5187 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:5189 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:518B D6 20 -  -  		sub 	32
   57 00:518D -  -  -  -  _I32FSNotLower:
   58 00:518D FE 30 -  -  		cp 		'0' 						; check in range
   59 00:518F 38 21 -  -  		jr 		c,_I32FSExit
   60 00:5191 FE 3A -  -  		cp 		'9'+1
   61 00:5193 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:5195 FE 41 -  -  		cp 		'A'
   63 00:5197 38 19 -  -  		jr 		c,_I32FSExit
   64 00:5199 FE 47 -  -  		cp 		'F'+1
   65 00:519B 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:519D D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:519F -  -  -  -  _I32FSOkay:
   68 00:519F D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:51A1 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:51A2 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:51A4 03 -  -  -  		inc 	bc 							; consume character
   72 00:51A5 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:51A6 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:51A7 CD C1 51 -  		call 	Int32Multiply 				; result *= base
   75 00:51AA F1 -  -  -  		pop 	af 							; additive in DE
   76 00:51AB 5F -  -  -  		ld 		e,a
   77 00:51AC CD F7 51 -  		call 	Int32Add 					; and add it.
   78 00:51AF D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:51B0 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:51B2 -  -  -  -  
   81 00:51B2 -  -  -  -  _I32FSExit:
   82 00:51B2 F1 -  -  -  		pop 	af 							; get sign back
   83 00:51B3 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:51B5 CC 57 52 -  		call 	z,Int32Negate
   85 00:51B8 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:51B9 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:51BA D9 -  -  -  		exx
   88 00:51BB D1 -  -  -  		pop 	de
   89 00:51BC D9 -  -  -  		exx
   90 00:51BD C1 -  -  -  		pop 	bc
   91 00:51BE FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:51C0 C9 -  -  -  		ret				
   93 00:51C1 -  -  -  -  
   94 00:51C1 -  -  -  -  ; ***************************************************************************************
   95 00:51C1 -  -  -  -  ;
   96 00:51C1 -  -  -  -  ;									Changes and Updates
   97 00:51C1 -  -  -  -  ;
   98 00:51C1 -  -  -  -  ; ***************************************************************************************
   99 00:51C1 -  -  -  -  ;
  100 00:51C1 -  -  -  -  ;		Date			Notes
  101 00:51C1 -  -  -  -  ;		==== 			=====
  102 00:51C1 -  -  -  -  ;
  103 00:51C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   76 00:51C1 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:51C1 -  -  -  -  ; ***************************************************************************************
    2 00:51C1 -  -  -  -  ; ***************************************************************************************
    3 00:51C1 -  -  -  -  ;
    4 00:51C1 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:51C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:51C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:51C1 -  -  -  -  ;		Reviewed :	No
    8 00:51C1 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:51C1 -  -  -  -  ;
   10 00:51C1 -  -  -  -  ; ***************************************************************************************
   11 00:51C1 -  -  -  -  ; ***************************************************************************************
   12 00:51C1 -  -  -  -  
   13 00:51C1 -  -  -  -  Int32Multiply:
   14 00:51C1 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:51C2 D5 -  -  -  		push 	de
   16 00:51C3 44 -  -  -  		ld 		b,h
   17 00:51C4 4D -  -  -  		ld 		c,l
   18 00:51C5 21 00 00 -  		ld 		hl,$0000
   19 00:51C8 -  -  -  -  
   20 00:51C8 D9 -  -  -  		exx
   21 00:51C9 C5 -  -  -  		push 	bc
   22 00:51CA D5 -  -  -  		push 	de
   23 00:51CB 44 -  -  -  		ld 		b,h
   24 00:51CC 4D -  -  -  		ld 		c,l
   25 00:51CD 21 00 00 -  		ld 		hl,$0000		
   26 00:51D0 D9 -  -  -  		exx
   27 00:51D1 -  -  -  -  
   28 00:51D1 -  -  -  -  _I32MultiplyLoop:
   29 00:51D1 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:51D3 C4 F7 51 -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:51D6 -  -  -  -  		;
   32 00:51D6 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:51D7 CB 38 -  -  		srl 	b
   34 00:51D9 CB 19 -  -  		rr 		c
   35 00:51DB D9 -  -  -  		exx
   36 00:51DC CB 18 -  -  		rr 		b
   37 00:51DE CB 19 -  -  		rr 		c
   38 00:51E0 -  -  -  -  		;
   39 00:51E0 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:51E2 CB 12 -  -  		rl 		d
   41 00:51E4 D9 -  -  -  		exx
   42 00:51E5 CB 13 -  -  		rl 		e
   43 00:51E7 CB 12 -  -  		rl 		d
   44 00:51E9 -  -  -  -  
   45 00:51E9 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:51EA B1 -  -  -  		or 		c
   47 00:51EB D9 -  -  -  		exx
   48 00:51EC B0 -  -  -  		or 		b
   49 00:51ED B1 -  -  -  		or 		c
   50 00:51EE 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:51F0 -  -  -  -  
   52 00:51F0 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:51F1 D1 -  -  -  		pop 	de
   54 00:51F2 C1 -  -  -  		pop 	bc
   55 00:51F3 D9 -  -  -  		exx
   56 00:51F4 D1 -  -  -  		pop 	de
   57 00:51F5 C1 -  -  -  		pop 	bc
   58 00:51F6 C9 -  -  -  		ret
   59 00:51F7 -  -  -  -  
   60 00:51F7 -  -  -  -  ; ***************************************************************************************
   61 00:51F7 -  -  -  -  ;
   62 00:51F7 -  -  -  -  ;									Changes and Updates
   63 00:51F7 -  -  -  -  ;
   64 00:51F7 -  -  -  -  ; ***************************************************************************************
   65 00:51F7 -  -  -  -  ;
   66 00:51F7 -  -  -  -  ;		Date			Notes
   67 00:51F7 -  -  -  -  ;		==== 			=====
   68 00:51F7 -  -  -  -  ;
   69 00:51F7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 00:51F7 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:51F7 -  -  -  -  ; ***************************************************************************************
    2 00:51F7 -  -  -  -  ; ***************************************************************************************
    3 00:51F7 -  -  -  -  ;
    4 00:51F7 -  -  -  -  ;		Name : 		isimple.asm
    5 00:51F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:51F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:51F7 -  -  -  -  ;		Reviewed :	No
    8 00:51F7 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:51F7 -  -  -  -  ;
   10 00:51F7 -  -  -  -  ; ***************************************************************************************
   11 00:51F7 -  -  -  -  ; ***************************************************************************************
   12 00:51F7 -  -  -  -  
   13 00:51F7 -  -  -  -  ; ***************************************************************************************
   14 00:51F7 -  -  -  -  ;
   15 00:51F7 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:51F7 -  -  -  -  ;
   17 00:51F7 -  -  -  -  ; ***************************************************************************************
   18 00:51F7 -  -  -  -  
   19 00:51F7 -  -  -  -  Int32Add:
   20 00:51F7 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:51F8 D9 -  -  -  		exx
   22 00:51F9 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:51FB D9 -  -  -  		exx
   24 00:51FC C9 -  -  -  		ret
   25 00:51FD -  -  -  -  
   26 00:51FD -  -  -  -  ; ***************************************************************************************
   27 00:51FD -  -  -  -  ;
   28 00:51FD -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:51FD -  -  -  -  ;
   30 00:51FD -  -  -  -  ; ***************************************************************************************
   31 00:51FD -  -  -  -  
   32 00:51FD -  -  -  -  Int32Subtract:
   33 00:51FD AF -  -  -  		xor 	a 							; clear carry
   34 00:51FE ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:5200 D9 -  -  -  		exx
   36 00:5201 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:5203 D9 -  -  -  		exx
   38 00:5204 C9 -  -  -  		ret
   39 00:5205 -  -  -  -  
   40 00:5205 -  -  -  -  ; ***************************************************************************************
   41 00:5205 -  -  -  -  ;
   42 00:5205 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:5205 -  -  -  -  ;
   44 00:5205 -  -  -  -  ; ***************************************************************************************
   45 00:5205 -  -  -  -  
   46 00:5205 -  -  -  -  Int32And:
   47 00:5205 D9 -  -  -  		exx
   48 00:5206 CD 0A 52 -  		call 	_I32AndHLDE
   49 00:5209 D9 -  -  -  		exx
   50 00:520A -  -  -  -  _I32AndHLDE:		
   51 00:520A 7C -  -  -  		ld 		a,h
   52 00:520B A2 -  -  -  		and 	d
   53 00:520C 67 -  -  -  		ld 		h,a
   54 00:520D 7D -  -  -  		ld 		a,l
   55 00:520E A3 -  -  -  		and 	e
   56 00:520F 6F -  -  -  		ld 		l,a
   57 00:5210 C9 -  -  -  		ret
   58 00:5211 -  -  -  -  
   59 00:5211 -  -  -  -  ; ***************************************************************************************
   60 00:5211 -  -  -  -  ;
   61 00:5211 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:5211 -  -  -  -  ;
   63 00:5211 -  -  -  -  ; ***************************************************************************************
   64 00:5211 -  -  -  -  
   65 00:5211 -  -  -  -  Int32Or:
   66 00:5211 D9 -  -  -  		exx
   67 00:5212 CD 16 52 -  		call 	_I32OrHLDE
   68 00:5215 D9 -  -  -  		exx
   69 00:5216 -  -  -  -  _I32OrHLDE:		
   70 00:5216 7C -  -  -  		ld 		a,h
   71 00:5217 B2 -  -  -  		or 		d
   72 00:5218 67 -  -  -  		ld 		h,a
   73 00:5219 7D -  -  -  		ld 		a,l
   74 00:521A B3 -  -  -  		or 		e
   75 00:521B 6F -  -  -  		ld 		l,a
   76 00:521C C9 -  -  -  		ret
   77 00:521D -  -  -  -  
   78 00:521D -  -  -  -  ; ***************************************************************************************
   79 00:521D -  -  -  -  ;
   80 00:521D -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:521D -  -  -  -  ;
   82 00:521D -  -  -  -  ; ***************************************************************************************
   83 00:521D -  -  -  -  
   84 00:521D -  -  -  -  Int32Xor:
   85 00:521D D9 -  -  -  		exx
   86 00:521E CD 22 52 -  		call 	_I32XorHLDE
   87 00:5221 D9 -  -  -  		exx
   88 00:5222 -  -  -  -  _I32XorHLDE:		
   89 00:5222 7C -  -  -  		ld 		a,h
   90 00:5223 AA -  -  -  		xor 	d
   91 00:5224 67 -  -  -  		ld 		h,a
   92 00:5225 7D -  -  -  		ld 		a,l
   93 00:5226 AB -  -  -  		xor 	e
   94 00:5227 6F -  -  -  		ld 		l,a
   95 00:5228 C9 -  -  -  		ret
   96 00:5229 -  -  -  -  
   97 00:5229 -  -  -  -  ; ***************************************************************************************
   98 00:5229 -  -  -  -  ;
   99 00:5229 -  -  -  -  ;								 Check if HL'HL zero
  100 00:5229 -  -  -  -  ;
  101 00:5229 -  -  -  -  ; ***************************************************************************************
  102 00:5229 -  -  -  -  
  103 00:5229 -  -  -  -  Int32Zero:
  104 00:5229 D9 -  -  -  		exx
  105 00:522A 7D -  -  -  		ld 		a,l
  106 00:522B B4 -  -  -  		or 		h
  107 00:522C D9 -  -  -  		exx
  108 00:522D B5 -  -  -  		or 		l
  109 00:522E B4 -  -  -  		or 		h
  110 00:522F C9 -  -  -  		ret
  111 00:5230 -  -  -  -  
  112 00:5230 -  -  -  -  ; ***************************************************************************************
  113 00:5230 -  -  -  -  ;
  114 00:5230 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:5230 -  -  -  -  ;
  116 00:5230 -  -  -  -  ; ***************************************************************************************
  117 00:5230 -  -  -  -  
  118 00:5230 -  -  -  -  Int32Compare:
  119 00:5230 E5 -  -  -  		push 	hl 							; save HL
  120 00:5231 AF -  -  -  		xor 	a 							; clear carry
  121 00:5232 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:5234 D9 -  -  -  		exx
  123 00:5235 E5 -  -  -  		push 	hl 							; save HL'
  124 00:5236 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:5238 -  -  -  -  		;
  126 00:5238 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:5239 E2 40 52 -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:523C 78 -  -  -  		ld 		a,b
  129 00:523D EE 80 -  -  		xor 	$80
  130 00:523F 47 -  -  -  		ld 		b,a
  131 00:5240 -  -  -  -  _I32CNoOverflow:
  132 00:5240 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:5241 B5 -  -  -  		or 		l
  134 00:5242 D9 -  -  -  		exx 
  135 00:5243 B4 -  -  -  		or 		h
  136 00:5244 B5 -  -  -  		or 		l
  137 00:5245 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:5247 -  -  -  -  		;
  139 00:5247 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:5248 CB 78 -  -  		bit 	7,b
  141 00:524A D9 -  -  -  		exx
  142 00:524B 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:524D 28 02 -  -  		jr 		z,_I32NotPos
  144 00:524F 3E FF -  -  		ld 		a,$FF
  145 00:5251 -  -  -  -  _I32NotPos:
  146 00:5251 D9 -  -  -  		exx
  147 00:5252 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:5253 D9 -  -  -  		exx
  149 00:5254 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:5255 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:5256 C9 -  -  -  		ret
  152 00:5257 -  -  -  -  
  153 00:5257 -  -  -  -  ; ***************************************************************************************
  154 00:5257 -  -  -  -  ;
  155 00:5257 -  -  -  -  ;										Negate HL'HL
  156 00:5257 -  -  -  -  ;
  157 00:5257 -  -  -  -  ; ***************************************************************************************
  158 00:5257 -  -  -  -  
  159 00:5257 -  -  -  -  Int32Negate:
  160 00:5257 AF -  -  -  		xor 	a
  161 00:5258 CD 61 52 -  		call 	_I32NSubtract
  162 00:525B D9 -  -  -  		exx
  163 00:525C CD 61 52 -  		call 	_I32NSubtract
  164 00:525F D9 -  -  -  		exx
  165 00:5260 C9 -  -  -  		ret
  166 00:5261 -  -  -  -  _I32NSubtract:
  167 00:5261 D5 -  -  -  		push 	de
  168 00:5262 EB -  -  -  		ex 		de,hl
  169 00:5263 21 00 00 -  		ld 		hl,$0000
  170 00:5266 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:5268 D1 -  -  -  		pop 	de
  172 00:5269 C9 -  -  -  		ret
  173 00:526A -  -  -  -  		
  174 00:526A -  -  -  -  ; ***************************************************************************************
  175 00:526A -  -  -  -  ;
  176 00:526A -  -  -  -  ;									Changes and Updates
  177 00:526A -  -  -  -  ;
  178 00:526A -  -  -  -  ; ***************************************************************************************
  179 00:526A -  -  -  -  ;
  180 00:526A -  -  -  -  ;		Date			Notes
  181 00:526A -  -  -  -  ;		==== 			=====
  182 00:526A -  -  -  -  ;
  183 00:526A -  -  -  -  ; ***************************************************************************************
  184 00:526A -  -  -  -  		
Listing for file "_build.asm"
   78 00:526A -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:526A -  -  -  -  ; ***************************************************************************************
    2 00:526A -  -  -  -  ; ***************************************************************************************
    3 00:526A -  -  -  -  ;
    4 00:526A -  -  -  -  ;		Name : 		itostring.asm
    5 00:526A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:526A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:526A -  -  -  -  ;		Reviewed :	No
    8 00:526A -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:526A -  -  -  -  ;
   10 00:526A -  -  -  -  ; ***************************************************************************************
   11 00:526A -  -  -  -  ;
   12 00:526A -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:526A -  -  -  -  ;
   14 00:526A -  -  -  -  ; ***************************************************************************************
   15 00:526A -  -  -  -  
   16 00:526A -  -  -  -  Int32ToString:
   17 00:526A C5 -  -  -  		push 	bc 							; save string start
   18 00:526B D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:526C E5 -  -  -  		push 	hl
   20 00:526D 11 00 00 -  		ld	 	de,$0000
   21 00:5270 D9 -  -  -  		exx
   22 00:5271 D5 -  -  -  		push 	de
   23 00:5272 E5 -  -  -  		push 	hl
   24 00:5273 11 00 00 -  		ld 		de,$000
   25 00:5276 D9 -  -  -  		exx
   26 00:5277 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:5278 -  -  -  -  		;
   28 00:5278 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:527A 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:527C ED 44 -  -  		neg 								; negate base and put in E
   31 00:527E 5F -  -  -  		ld 		e,a
   32 00:527F -  -  -  -  		;
   33 00:527F D9 -  -  -  		exx 								; is it -ve ?
   34 00:5280 CB 7C -  -  		bit 	7,h
   35 00:5282 D9 -  -  -  		exx
   36 00:5283 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:5285 -  -  -  -  		;
   38 00:5285 CD 57 52 -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:5288 -  -  -  -  		;
   40 00:5288 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:528A 02 -  -  -  		ld 		(bc),a
   42 00:528B 03 -  -  -  		inc 	bc
   43 00:528C -  -  -  -  _I32TSNotNegative:	
   44 00:528C CD 9A 52 -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:528F -  -  -  -  _I32TSExit:
   46 00:528F 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:5291 02 -  -  -  		ld 		(bc),a 
   48 00:5292 -  -  -  -  
   49 00:5292 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:5293 E1 -  -  -  		pop 	hl
   51 00:5294 D1 -  -  -  		pop 	de
   52 00:5295 D9 -  -  -  		exx
   53 00:5296 E1 -  -  -  		pop 	hl
   54 00:5297 D1 -  -  -  		pop 	de
   55 00:5298 C1 -  -  -  		pop 	bc
   56 00:5299 C9 -  -  -  		ret
   57 00:529A -  -  -  -  
   58 00:529A -  -  -  -  _I32RecursiveConvert:
   59 00:529A CD CE 50 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:529D F5 -  -  -  		push 	af 							; save remainder
   61 00:529E CD 29 52 -  		call 	Int32Zero		 			; check result is non zero
   62 00:52A1 C4 9A 52 -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:52A4 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:52A5 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:52A7 38 02 -  -  		jr 		c,_I32NotHex
   66 00:52A9 C6 07 -  -  		add 	a,7
   67 00:52AB -  -  -  -  _I32NotHex:
   68 00:52AB C6 30 -  -  		add 	a,48
   69 00:52AD 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:52AE 03 -  -  -  		inc 	bc
   71 00:52AF C9 -  -  -  		ret		
   72 00:52B0 -  -  -  -  
   73 00:52B0 -  -  -  -  ; ***************************************************************************************
   74 00:52B0 -  -  -  -  ;
   75 00:52B0 -  -  -  -  ;									Changes and Updates
   76 00:52B0 -  -  -  -  ;
   77 00:52B0 -  -  -  -  ; ***************************************************************************************
   78 00:52B0 -  -  -  -  ;
   79 00:52B0 -  -  -  -  ;		Date			Notes
   80 00:52B0 -  -  -  -  ;		==== 			=====
   81 00:52B0 -  -  -  -  ;
   82 00:52B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 00:52B0 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:52B0 -  -  -  -  ; ***************************************************************************************
    2 00:52B0 -  -  -  -  ; ***************************************************************************************
    3 00:52B0 -  -  -  -  ;
    4 00:52B0 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:52B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:52B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:52B0 -  -  -  -  ;		Reviewed :	No
    8 00:52B0 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:52B0 -  -  -  -  ;
   10 00:52B0 -  -  -  -  ; ***************************************************************************************
   11 00:52B0 -  -  -  -  ; ***************************************************************************************
   12 00:52B0 -  -  -  -  
   13 00:52B0 -  -  -  -  #ifdef AQUARIUS
   14 00:52B0 -  -  -  -  
   15 00:52B0 -  -  -  -  ; ***************************************************************************************
   16 00:52B0 -  -  -  -  ;
   17 00:52B0 -  -  -  -  ;								Initialise system stuff
   18 00:52B0 -  -  -  -  ;
   19 00:52B0 -  -  -  -  ; ***************************************************************************************
   20 00:52B0 -  -  -  -  
   21 00:52B0 -  -  -  -  SYSInitialise:
   22 00:52B0 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:52B2 CD B8 52 -  	call 	SYSPrintChar
   24 00:52B5 C9 -  -  -  	ret
   25 00:52B6 -  -  -  -  
   26 00:52B6 -  -  -  -  ; ***************************************************************************************
   27 00:52B6 -  -  -  -  ;
   28 00:52B6 -  -  -  -  ;								Terminate system stuff
   29 00:52B6 -  -  -  -  ;
   30 00:52B6 -  -  -  -  ; ***************************************************************************************
   31 00:52B6 -  -  -  -  
   32 00:52B6 -  -  -  -  SYSTerminate:
   33 00:52B6 18 FE -  -  	jr 		SYSTerminate
   34 00:52B8 -  -  -  -  
   35 00:52B8 -  -  -  -  ; ***************************************************************************************
   36 00:52B8 -  -  -  -  ;
   37 00:52B8 -  -  -  -  ;						Print A character (note 13,10 required for CRLF)
   38 00:52B8 -  -  -  -  ;
   39 00:52B8 -  -  -  -  ; ***************************************************************************************
   40 00:52B8 -  -  -  -  
   41 00:52B8 -  -  -  -  SYSPrintChar:
   42 00:52B8 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:52B9 C5 -  -  -  	push 	bc
   44 00:52BA D5 -  -  -  	push 	de
   45 00:52BB E5 -  -  -  	push 	hl
   46 00:52BC DD E5 -  -  	push 	ix
   47 00:52BE FD E5 -  -  	push 	iy
   48 00:52C0 D9 -  -  -  	exx
   49 00:52C1 C5 -  -  -  	push 	bc
   50 00:52C2 D5 -  -  -  	push 	de
   51 00:52C3 E5 -  -  -  	push 	hl
   52 00:52C4 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:52C7 E1 -  -  -  	pop 	hl
   54 00:52C8 D1 -  -  -  	pop 	de
   55 00:52C9 C1 -  -  -  	pop 	bc
   56 00:52CA D9 -  -  -  	exx
   57 00:52CB FD E1 -  -  	pop 	iy
   58 00:52CD DD E1 -  -  	pop 	ix
   59 00:52CF E1 -  -  -  	pop 	hl
   60 00:52D0 D1 -  -  -  	pop 	de
   61 00:52D1 C1 -  -  -  	pop 	bc
   62 00:52D2 F1 -  -  -  	pop 	af
   63 00:52D3 C9 -  -  -  	ret		
   64 00:52D4 -  -  -  -  
   65 00:52D4 -  -  -  -  ; ***************************************************************************************
   66 00:52D4 -  -  -  -  ;
   67 00:52D4 -  -  -  -  ;									Print Newline
   68 00:52D4 -  -  -  -  ;
   69 00:52D4 -  -  -  -  ; ***************************************************************************************
   70 00:52D4 -  -  -  -  
   71 00:52D4 -  -  -  -  SYSPrintCRLF:
   72 00:52D4 F5 -  -  -  	push 	af
   73 00:52D5 3E 0D -  -  	ld 		a,13
   74 00:52D7 CD B8 52 -  	call 	SYSPrintChar
   75 00:52DA 3E 0A -  -  	ld 		a,10
   76 00:52DC CD B8 52 -  	call 	SYSPrintChar
   77 00:52DF F1 -  -  -  	pop 	af
   78 00:52E0 C9 -  -  -  	ret
   79 00:52E1 -  -  -  -  
   80 00:52E1 -  -  -  -  ; ***************************************************************************************
   81 00:52E1 -  -  -  -  ;
   82 00:52E1 -  -  -  -  ;									Get time into HL'HL
   83 00:52E1 -  -  -  -  ;
   84 00:52E1 -  -  -  -  ; ***************************************************************************************
   85 00:52E1 -  -  -  -  
   86 00:52E1 -  -  -  -  SYSGetTimer:
   87 00:52E1 DB 00 -  -   	in 		a,($00)
   88 00:52E3 6F -  -  -   	ld 		l,a
   89 00:52E4 DB 01 -  -   	in 		a,($01)
   90 00:52E6 67 -  -  -   	ld 		h,a
   91 00:52E7 D9 -  -  -   	exx
   92 00:52E8 DB 02 -  -   	in 		a,($02)
   93 00:52EA 6F -  -  -   	ld 		l,a
   94 00:52EB DB 03 -  -   	in 		a,($03)
   95 00:52ED 67 -  -  -   	ld 		h,a
   96 00:52EE D9 -  -  -   	exx
   97 00:52EF C9 -  -  -  	ret 	
   98 00:52F0 -  -  -  -  	
   99 00:52F0 -  -  -  -  #endif
  100 00:52F0 -  -  -  -  
  101 00:52F0 -  -  -  -  ; ***************************************************************************************
  102 00:52F0 -  -  -  -  ;
  103 00:52F0 -  -  -  -  ;									Changes and Updates
  104 00:52F0 -  -  -  -  ;
  105 00:52F0 -  -  -  -  ; ***************************************************************************************
  106 00:52F0 -  -  -  -  ;
  107 00:52F0 -  -  -  -  ;		Date			Notes
  108 00:52F0 -  -  -  -  ;		==== 			=====
  109 00:52F0 -  -  -  -  ;
  110 00:52F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 00:52F0 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:52F0 -  -  -  -  ; ***************************************************************************************
    2 00:52F0 -  -  -  -  ; ***************************************************************************************
    3 00:52F0 -  -  -  -  ;
    4 00:52F0 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:52F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:52F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:52F0 -  -  -  -  ;		Reviewed :	No
    8 00:52F0 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:52F0 -  -  -  -  ;
   10 00:52F0 -  -  -  -  ; ***************************************************************************************
   11 00:52F0 -  -  -  -  ; ***************************************************************************************
   12 00:52F0 -  -  -  -  
   13 00:52F0 -  -  -  -  #ifdef CLEANEZ80
   14 00:52F0             
   15 00:52F0             ; ***************************************************************************************
   16 00:52F0             ;
   17 00:52F0             ;								Initialise system stuff
   18 00:52F0             ;
   19 00:52F0             ; ***************************************************************************************
   20 00:52F0             
   21 00:52F0             SYSInitialise:
   22 00:52F0             	ret
   23 00:52F0             
   24 00:52F0             ; ***************************************************************************************
   25 00:52F0             ;
   26 00:52F0             ;								Terminate system stuff
   27 00:52F0             ;
   28 00:52F0             ; ***************************************************************************************
   29 00:52F0             
   30 00:52F0             SYSTerminate:
   31 00:52F0             	ret
   32 00:52F0             
   33 00:52F0             ; ***************************************************************************************
   34 00:52F0             ;
   35 00:52F0             ;								Print A character
   36 00:52F0             ;
   37 00:52F0             ; ***************************************************************************************
   38 00:52F0             
   39 00:52F0             SYSPrintChar:
   40 00:52F0             	ret		
   41 00:52F0             
   42 00:52F0             ; ***************************************************************************************
   43 00:52F0             ;
   44 00:52F0             ;									Print Newline
   45 00:52F0             ;
   46 00:52F0             ; ***************************************************************************************
   47 00:52F0             
   48 00:52F0             SYSPrintCRLF:
   49 00:52F0             	ret
   50 00:52F0             
   51 00:52F0             ; ***************************************************************************************
   52 00:52F0             ;
   53 00:52F0             ;									Get time into HL'HL
   54 00:52F0             ;
   55 00:52F0             ; ***************************************************************************************
   56 00:52F0             
   57 00:52F0             SYSGetTimer:
   58 00:52F0             	ret
   59 00:52F0             
   60 00:52F0             #endif
   61 00:52F0 -  -  -  -  
   62 00:52F0 -  -  -  -  ; ***************************************************************************************
   63 00:52F0 -  -  -  -  ;
   64 00:52F0 -  -  -  -  ;									Changes and Updates
   65 00:52F0 -  -  -  -  ;
   66 00:52F0 -  -  -  -  ; ***************************************************************************************
   67 00:52F0 -  -  -  -  ;
   68 00:52F0 -  -  -  -  ;		Date			Notes
   69 00:52F0 -  -  -  -  ;		==== 			=====
   70 00:52F0 -  -  -  -  ;
   71 00:52F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 00:52F0 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:52F0 -  -  -  -  ; ***************************************************************************************
    2 00:52F0 -  -  -  -  ; ***************************************************************************************
    3 00:52F0 -  -  -  -  ;
    4 00:52F0 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:52F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:52F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:52F0 -  -  -  -  ;		Reviewed :	No
    8 00:52F0 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:52F0 -  -  -  -  ;
   10 00:52F0 -  -  -  -  ; ***************************************************************************************
   11 00:52F0 -  -  -  -  ; ***************************************************************************************
   12 00:52F0 -  -  -  -  
   13 00:52F0 -  -  -  -  #ifdef TI84
   14 00:52F0             
   15 00:52F0             ; ***************************************************************************************
   16 00:52F0             ;
   17 00:52F0             ;								Initialise system stuff
   18 00:52F0             ;
   19 00:52F0             ; ***************************************************************************************
   20 00:52F0             
   21 00:52F0             SYSInitialise:
   22 00:52F0             	di
   23 00:52F0             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:52F0             	ld 		(_IYTemp84),iy
   25 00:52F0             	ret
   26 00:52F0             
   27 00:52F0             ; ***************************************************************************************
   28 00:52F0             ;
   29 00:52F0             ;								Terminate system stuff
   30 00:52F0             ;
   31 00:52F0             ; ***************************************************************************************
   32 00:52F0             
   33 00:52F0             SYSTerminate:
   34 00:52F0             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:52F0             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:52F0             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:52F0             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:52F0             	ei
   39 00:52F0             	ret 										; and exit.
   40 00:52F0             
   41 00:52F0             _StackTemp84:									; temp var for TI84 only.
   42 00:52F0             	.dw 	0,0
   43 00:52F0             _IYTemp84:
   44 00:52F0             	.dw 	0,0		
   45 00:52F0             
   46 00:52F0             ; ***************************************************************************************
   47 00:52F0             ;
   48 00:52F0             ;								Print A character
   49 00:52F0             ;
   50 00:52F0             ; ***************************************************************************************
   51 00:52F0             
   52 00:52F0             SYSPrintChar:
   53 00:52F0             	push 	af 									; we stack everything including alt registers
   54 00:52F0             	push 	bc
   55 00:52F0             	push 	de
   56 00:52F0             	push 	hl
   57 00:52F0             	push 	ix
   58 00:52F0             	push 	iy
   59 00:52F0             	exx
   60 00:52F0             	push 	bc
   61 00:52F0             	push 	de
   62 00:52F0             	push 	hl
   63 00:52F0             
   64 00:52F0             	ld 		iy,(_IYTemp84)
   65 00:52F0             	call 	_PutC 								; print A as character
   66 00:52F0             	di
   67 00:52F0             	ld 		(_IYTemp84),iy
   68 00:52F0             
   69 00:52F0             	pop 	hl
   70 00:52F0             	pop 	de
   71 00:52F0             	pop 	bc
   72 00:52F0             	exx
   73 00:52F0             	pop 	iy
   74 00:52F0             	pop 	ix
   75 00:52F0             	pop 	hl
   76 00:52F0             	pop 	de
   77 00:52F0             	pop 	bc
   78 00:52F0             	pop 	af
   79 00:52F0             	ret		
   80 00:52F0             
   81 00:52F0             ; ***************************************************************************************
   82 00:52F0             ;
   83 00:52F0             ;									Print Newline
   84 00:52F0             ;
   85 00:52F0             ; ***************************************************************************************
   86 00:52F0             
   87 00:52F0             SYSPrintCRLF:
   88 00:52F0             	push 	af 									; we stack everything including alt registers
   89 00:52F0             	push 	bc
   90 00:52F0             	push 	de
   91 00:52F0             	push 	hl
   92 00:52F0             	push 	ix
   93 00:52F0             	push 	iy
   94 00:52F0             	exx
   95 00:52F0             	push 	bc
   96 00:52F0             	push 	de
   97 00:52F0             	push 	hl
   98 00:52F0             
   99 00:52F0             	ld 		iy,(_IYTemp84)
  100 00:52F0             	call 	_newline
  101 00:52F0             	di
  102 00:52F0             	ld 		(_IYTemp84),iy
  103 00:52F0             
  104 00:52F0             	pop 	hl
  105 00:52F0             	pop 	de
  106 00:52F0             	pop 	bc
  107 00:52F0             	exx
  108 00:52F0             	pop 	iy
  109 00:52F0             	pop 	ix
  110 00:52F0             	pop 	hl
  111 00:52F0             	pop 	de
  112 00:52F0             	pop 	bc
  113 00:52F0             	pop 	af
  114 00:52F0             	ret
  115 00:52F0             
  116 00:52F0             ; ***************************************************************************************
  117 00:52F0             ;
  118 00:52F0             ;									Get time into HL'HL
  119 00:52F0             ;
  120 00:52F0             ; ***************************************************************************************
  121 00:52F0             
  122 00:52F0             SYSGetTimer:
  123 00:52F0             	ld 		hl,$1234
  124 00:52F0             	exx
  125 00:52F0             	ld 		hl,$5678
  126 00:52F0             	exx
  127 00:52F0             	ret
  128 00:52F0             
  129 00:52F0             #endif
  130 00:52F0 -  -  -  -  
  131 00:52F0 -  -  -  -  ; ***************************************************************************************
  132 00:52F0 -  -  -  -  ;
  133 00:52F0 -  -  -  -  ;									Changes and Updates
  134 00:52F0 -  -  -  -  ;
  135 00:52F0 -  -  -  -  ; ***************************************************************************************
  136 00:52F0 -  -  -  -  ;
  137 00:52F0 -  -  -  -  ;		Date			Notes
  138 00:52F0 -  -  -  -  ;		==== 			=====
  139 00:52F0 -  -  -  -  ;
  140 00:52F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   82 00:52F0 -  -  -  -  #include "tokeniser/generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/tokeniser/generated/kwd_keywords.asm"
    1 00:52F0 -  -  -  -  ;
    2 00:52F0 -  -  -  -  ;	This file is automatically generated.
    3 00:52F0 -  -  -  -  ;
    4 00:52F0 -  -  -  -  ;
    5 00:52F0 -  -  -  -  ;	Keywords for set 0
    6 00:52F0 -  -  -  -  ;
    7 00:52F0 -  -  -  -  KeywordsSet0:
    8 00:52F0 01 20 -  -  	.db	1," "              ; $0080
    9 00:52F2 01 20 -  -  	.db	1," "              ; $0081
   10 00:52F4 01 20 -  -  	.db	1," "              ; $0082
   11 00:52F6 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:52F8 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:52FA 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:52FC 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:52FE 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:5302 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:5306 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:5308 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:530A 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:530D 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:5310 01 3E -  -  	.db	1,">"              ; $008d
   22 00:5312 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:5314 01 3D -  -  	.db	1,"="              ; $008f
   24 00:5316 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:5319 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:531D 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:5320 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:5324 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:5326 01 28 -  -  	.db	1,"("              ; $0095
   30 00:5328 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:532A 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:532E 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:5332 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:5336 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:533A 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:533E 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:5342 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:5346 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:534A 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:534F 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:5354 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:5358 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:535C 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 00:5361 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 00:5367 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:5369 01 2C -  -  	.db	1,","              ; $00a6
   47 00:536B 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:536D 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:536F 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:5371 01 5B -  -  	.db	1,"["              ; $00aa
   51 00:5373 01 5D -  -  	.db	1,"]"              ; $00ab
   52 00:5375 01 7E -  -  	.db	1,"~"              ; $00ac
   53 00:5377 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00ad
   54 00:537E 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ae
   55 00:5384 02 49 46 -  	.db	2,"IF"             ; $00af
   56 00:5387 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00b0
   57 00:538C 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00b1
   58 00:5391 03 46 4F 52 	.db	3,"FOR"            ; $00b2
   59 00:5395 02 54 4F -  	.db	2,"TO"             ; $00b3
   60 00:5398 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b4
   61 00:539D 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b5
   62 00:53A2 03 44 45 46 	.db	3,"DEF"            ; $00b6
   63 00:53A6 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b7
   64 00:53AB 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b8
   65 00:53B3 05 47 4F 53 
              55 42 -  -  	.db	5,"GOSUB"          ; $00b9
   66 00:53B9 06 52 45 54 
              55 52 4E -  	.db	6,"RETURN"         ; $00ba
   67 00:53C0 04 47 4F 54 
              4F -  -  -  	.db	4,"GOTO"           ; $00bb
   68 00:53C5 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00bc
   69 00:53CB 03 44 49 4D 	.db	3,"DIM"            ; $00bd
   70 00:53CF 03 52 45 4D 	.db	3,"REM"            ; $00be
   71 00:53D3 03 4C 45 54 	.db	3,"LET"            ; $00bf
   72 00:53D7 03 56 44 55 	.db	3,"VDU"            ; $00c0
   73 00:53DB 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00c1
   74 00:53E1 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00c2
   75 00:53E6 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00c3
   76 00:53EB 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00c4
   77 00:53F0 03 4E 45 57 	.db	3,"NEW"            ; $00c5
   78 00:53F4 03 52 55 4E 	.db	3,"RUN"            ; $00c6
   79 00:53F8 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c7
   80 00:53FD 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c8
   81 00:5402 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c9
   82 00:540A 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00ca
   83 00:5411 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00cb
   84 00:5417 03 45 4E 44 	.db	3,"END"            ; $00cc
   85 00:541B 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00cd
   86 00:5420 04 4D 4F 56 
              45 -  -  -  	.db	4,"MOVE"           ; $00ce
   87 00:5425 04 44 52 41 
              57 -  -  -  	.db	4,"DRAW"           ; $00cf
   88 00:542A 04 50 4C 4F 
              54 -  -  -  	.db	4,"PLOT"           ; $00d0
   89 00:542F 04 4D 4F 44 
              45 -  -  -  	.db	4,"MODE"           ; $00d1
   90 00:5434 06 43 4F 4C 
              4F 55 52 -  	.db	6,"COLOUR"         ; $00d2
   91 00:543B 04 47 43 4F 
              4C -  -  -  	.db	4,"GCOL"           ; $00d3
   92 00:5440 00 -  -  -  	.db	0
   93 00:5441 -  -  -  -  ;
   94 00:5441 -  -  -  -  ;	Keywords for set 1
   95 00:5441 -  -  -  -  ;
   96 00:5441 -  -  -  -  KeywordsSet1:
   97 00:5441 00 -  -  -  	.db	0
   98 00:5442 -  -  -  -  ;
   99 00:5442 -  -  -  -  ;	Keywords for set 2
  100 00:5442 -  -  -  -  ;
  101 00:5442 -  -  -  -  KeywordsSet2:
  102 00:5442 00 -  -  -  	.db	0
Listing for file "_build.asm"
   83 00:5443 -  -  -  -  #include "tokeniser/list.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/tokeniser/list.asm"
    1 00:5443 -  -  -  -  ; ***************************************************************************************
    2 00:5443 -  -  -  -  ; ***************************************************************************************
    3 00:5443 -  -  -  -  ;
    4 00:5443 -  -  -  -  ;		Name : 		list.asm
    5 00:5443 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5443 -  -  -  -  ;		Date : 		9th June 2022
    7 00:5443 -  -  -  -  ;		Reviewed :	No
    8 00:5443 -  -  -  -  ;		Purpose :	Program listing.
    9 00:5443 -  -  -  -  ;
   10 00:5443 -  -  -  -  ; ***************************************************************************************
   11 00:5443 -  -  -  -  ; ***************************************************************************************
   12 00:5443 -  -  -  -  
   13 00:5443 -  -  -  -  ; ***************************************************************************************
   14 00:5443 -  -  -  -  ;
   15 00:5443 -  -  -  -  ;										LIST a program
   16 00:5443 -  -  -  -  ;
   17 00:5443 -  -  -  -  ; ***************************************************************************************
   18 00:5443 -  -  -  -  
   19 00:5443 -  -  -  -  Command_LIST: 	;; [list]
   20 00:5443 01 00 00 -  		ld 		bc,$0000 					; BC is the low value
   21 00:5446 11 FF FF -  		ld 		de,$FFFF 					; DE is the high value
   22 00:5449 -  -  -  -  		;
   23 00:5449 -  -  -  -  		;		Unpack the command
   24 00:5449 -  -  -  -  		;		
   25 00:5449 DD 7E 00 -  		ld 		a,(ix+0) 					; what's there ?
   26 00:544C FE A6 -  -  		cp	 	KWD_COMMA 					; if , then do the second part
   27 00:544E 28 16 -  -  		jr 		z,_CLUpperRange
   28 00:5450 E6 C0 -  -  		and 	$C0 						; check number follows.
   29 00:5452 FE 40 -  -  		cp 		$40
   30 00:5454 20 20 -  -  		jr 		nz,_CLList 			
   31 00:5456 CD AC 54 -  		call 	_CLGetInteger 				; get a line number
   32 00:5459 44 -  -  -  		ld  	b,h 						; put into BC
   33 00:545A 4D -  -  -  		ld 		c,l
   34 00:545B DD 7E 00 -  		ld 		a,(ix+0)					; , follows ?
   35 00:545E FE A6 -  -  		cp 		KWD_COMMA
   36 00:5460 28 04 -  -  		jr 		z,_CLUpperRange
   37 00:5462 54 -  -  -  		ld 		d,h 						; one number only, so in BC and DE
   38 00:5463 5D -  -  -  		ld 		e,l
   39 00:5464 18 10 -  -  		jr 		_CLList
   40 00:5466 -  -  -  -  		;
   41 00:5466 -  -  -  -  		;		Second number.
   42 00:5466 -  -  -  -  		;
   43 00:5466 -  -  -  -  _CLUpperRange:
   44 00:5466 DD 23 -  -  		inc 	ix 							; skip comma
   45 00:5468 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a number
   46 00:546B E6 C0 -  -  		and 	$C0
   47 00:546D FE 40 -  -  		cp 		$40
   48 00:546F 20 05 -  -  		jr 		nz,_CLList 					; No listing done
   49 00:5471 CD AC 54 -  		call 	_CLGetInteger 				; get a number
   50 00:5474 54 -  -  -  		ld 		d,h 						; put into DE
   51 00:5475 5D -  -  -  		ld 		e,l		
   52 00:5476 -  -  -  -  		;
   53 00:5476 -  -  -  -  		;		List from line no.s BC to DE.
   54 00:5476 -  -  -  -  		;
   55 00:5476 -  -  -  -  _CLList:		
   56 00:5476 DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start of code.
   57 00:547A -  -  -  -  		;
   58 00:547A -  -  -  -  		;		List main loop
   59 00:547A -  -  -  -  		;
   60 00:547A -  -  -  -  _CLNextLine:		
   61 00:547A DD 7E 00 -  		ld 		a,(ix+0) 					; offset = 0, then end.
   62 00:547D B7 -  -  -  		or 		a
   63 00:547E CA 69 42 -  		jp 		z,Command_END
   64 00:5481 -  -  -  -  		;
   65 00:5481 21 00 00 -  		ld 		hl,$0000 					; line number into HL
   66 00:5484 DD 6E 01 -  		ld 		l,(ix+1) 						
   67 00:5487 DD 66 02 -  		ld 		h,(ix+2)
   68 00:548A CD 9C 54 -  		call 	CLCheckLineNumber
   69 00:548D D4 BB 54 -  		call 	nc,CLPrintLine
   70 00:5490 -  -  -  -  		;
   71 00:5490 C5 -  -  -  		push 	bc 							; go to next line
   72 00:5491 01 00 00 -  		ld 		bc,0 						; BC is offset
   73 00:5494 DD 4E 00 -  		ld 		c,(ix+0)
   74 00:5497 DD 09 -  -  		add 	ix,bc
   75 00:5499 C1 -  -  -  		pop 	bc
   76 00:549A -  -  -  -  		;
   77 00:549A 18 DE -  -  		jr 		_CLNextLine 				; go round again.
   78 00:549C -  -  -  -  
   79 00:549C -  -  -  -  ; ***************************************************************************************
   80 00:549C -  -  -  -  ;
   81 00:549C -  -  -  -  ;				Compare line number in HL vs BC/DE, NC if listable
   82 00:549C -  -  -  -  ;
   83 00:549C -  -  -  -  ; ***************************************************************************************
   84 00:549C -  -  -  -  
   85 00:549C -  -  -  -  CLCheckLineNumber:
   86 00:549C E5 -  -  -  		push 	hl 							; compare against BC
   87 00:549D AF -  -  -  		xor		a
   88 00:549E ED 42 -  -  		sbc 	hl,bc
   89 00:54A0 E1 -  -  -  		pop 	hl
   90 00:54A1 D8 -  -  -  		ret		c 							; if < BC then fail.
   91 00:54A2 ED 52 -  -  		sbc 	hl,de
   92 00:54A4 28 04 -  -  		jr 		z,_CLCLOkay 				; if <= DE then okay
   93 00:54A6 38 02 -  -  		jr 		c,_CLCLOkay
   94 00:54A8 37 -  -  -  		scf
   95 00:54A9 C9 -  -  -  		ret
   96 00:54AA -  -  -  -  _CLCLOkay:
   97 00:54AA AF -  -  -  		xor 	a
   98 00:54AB C9 -  -  -  		ret
   99 00:54AC -  -  -  -  
  100 00:54AC -  -  -  -  ; ***************************************************************************************
  101 00:54AC -  -  -  -  ;
  102 00:54AC -  -  -  -  ;						Get 16 bit integer (for line numbers)
  103 00:54AC -  -  -  -  ;
  104 00:54AC -  -  -  -  ; ***************************************************************************************
  105 00:54AC -  -  -  -  
  106 00:54AC -  -  -  -  _CLGetInteger:
  107 00:54AC C5 -  -  -  		push 	bc
  108 00:54AD D5 -  -  -  		push 	de
  109 00:54AE CD 88 46 -  		call 	EvaluateInteger
  110 00:54B1 D9 -  -  -  		exx
  111 00:54B2 7C -  -  -  		ld 		a,h
  112 00:54B3 B5 -  -  -  		or 		l
  113 00:54B4 D9 -  -  -  		exx
  114 00:54B5 CA FB 44 -  		jp 		z,BadValue
  115 00:54B8 D1 -  -  -  		pop 	de
  116 00:54B9 C1 -  -  -  		pop 	bc
  117 00:54BA C9 -  -  -  		ret
  118 00:54BB -  -  -  -  
  119 00:54BB -  -  -  -  ; ***************************************************************************************
  120 00:54BB -  -  -  -  ;
  121 00:54BB -  -  -  -  ;								Print line starting at IX
  122 00:54BB -  -  -  -  ;
  123 00:54BB -  -  -  -  ; ***************************************************************************************
  124 00:54BB -  -  -  -  
  125 00:54BB -  -  -  -  CLPrintLine:
  126 00:54BB CD C8 54 -  		call 	CLExpandLine
  127 00:54BE 21 B2 40 -  		ld 		hl,TokenBuffer
  128 00:54C1 CD B3 4C -  		call 	PrintStringAtHL 
  129 00:54C4 CD D4 52 -  		call 	SYSPrintCRLF
  130 00:54C7 C9 -  -  -  		ret
  131 00:54C8 -  -  -  -  
  132 00:54C8 -  -  -  -  ; ***************************************************************************************
  133 00:54C8 -  -  -  -  ;
  134 00:54C8 -  -  -  -  ;						 Expand line to buffer starting at IX
  135 00:54C8 -  -  -  -  ;
  136 00:54C8 -  -  -  -  ; ***************************************************************************************
  137 00:54C8 -  -  -  -  
  138 00:54C8 -  -  -  -  CLExpandLine:
  139 00:54C8 C5 -  -  -  		push 	bc
  140 00:54C9 D5 -  -  -  		push 	de
  141 00:54CA DD E5 -  -  		push 	ix
  142 00:54CC 21 B2 40 -  		ld 		hl,TokenBuffer 				; set the token buffer pointer
  143 00:54CF 22 B2 41 -  		ld 		(TWPointer),hl
  144 00:54D2 CD A3 55 -  		call 	CLDecodeLineNumber
  145 00:54D5 -  -  -  -  _CLSpaceOut:		
  146 00:54D5 CD 11 55 -  		call 	CLPrintSpace
  147 00:54D8 3A B2 41 -  		ld 		a,(TWPointer)
  148 00:54DB FE B8 -  -  		cp 		(6+TokenBuffer) & $FF
  149 00:54DD 20 F6 -  -  		jr 		nz,_CLSpaceOut
  150 00:54DF DD 23 -  -  		inc 	ix 							; point to line star.
  151 00:54E1 DD 23 -  -  		inc 	ix
  152 00:54E3 DD 23 -  -  		inc 	ix
  153 00:54E5 -  -  -  -  _CLPLLoop		
  154 00:54E5 DD 7E 00 -  		ld 		a,(ix+0) 					; next token.
  155 00:54E8 FE 80 -  -  		cp 		$80 						; EOL 
  156 00:54EA 28 20 -  -  		jr 		z,_CLPLLExit 				; if so, exit.
  157 00:54EC B7 -  -  -  		or 		a
  158 00:54ED FC 20 55 -  		call 	m,CLDecodeKeyword
  159 00:54F0 -  -  -  -  
  160 00:54F0 06 10 -  -  		ld 		b,16
  161 00:54F2 FE 94 -  -  		cp 		KWD_AMPERSAND
  162 00:54F4 CC 94 55 -  		call 	z,CLDecodeInteger
  163 00:54F7 -  -  -  -  
  164 00:54F7 FE 26 -  -  		cp 		IDENTIFIER_END
  165 00:54F9 DC 51 55 -  		call 	c,CLDecodeIdentifier
  166 00:54FC -  -  -  -  
  167 00:54FC FE 3F -  -  		cp 		STRING_MARKER
  168 00:54FE CC 75 55 -  		call 	z,CLDecodeString
  169 00:5501 -  -  -  -  
  170 00:5501 E6 C0 -  -  		and 	$C0
  171 00:5503 FE 40 -  -  		cp 		$40
  172 00:5505 06 0A -  -  		ld 		b,10
  173 00:5507 CC 94 55 -  		call 	z,CLDecodeInteger
  174 00:550A 18 D9 -  -  		jr 		_CLPLLoop
  175 00:550C -  -  -  -  
  176 00:550C -  -  -  -  _CLPLLExit:		
  177 00:550C DD E1 -  -  		pop 	ix
  178 00:550E D1 -  -  -  		pop 	de
  179 00:550F C1 -  -  -  		pop 	bc
  180 00:5510 C9 -  -  -  		ret
  181 00:5511 -  -  -  -  
  182 00:5511 -  -  -  -  ; ***************************************************************************************
  183 00:5511 -  -  -  -  ;
  184 00:5511 -  -  -  -  ;								Print Space/A to output
  185 00:5511 -  -  -  -  ;
  186 00:5511 -  -  -  -  ; ***************************************************************************************
  187 00:5511 -  -  -  -  
  188 00:5511 -  -  -  -  CLPrintSpace:
  189 00:5511 3E 20 -  -  		ld 		a,' '
  190 00:5513 -  -  -  -  CLPrintA:
  191 00:5513 E5 -  -  -  		push 	hl
  192 00:5514 2A B2 41 -  		ld 		hl,(TWPointer)		
  193 00:5517 77 -  -  -  		ld 		(hl),a
  194 00:5518 23 -  -  -  		inc 	hl
  195 00:5519 22 B2 41 -  		ld 		(TWPointer),hl
  196 00:551C 36 00 -  -  		ld 		(hl),0
  197 00:551E E1 -  -  -  		pop 	hl
  198 00:551F C9 -  -  -  		ret
  199 00:5520 -  -  -  -  
  200 00:5520 -  -  -  -  ; ***************************************************************************************
  201 00:5520 -  -  -  -  ;
  202 00:5520 -  -  -  -  ;									Decode Keyword A
  203 00:5520 -  -  -  -  ;
  204 00:5520 -  -  -  -  ; ***************************************************************************************
  205 00:5520 -  -  -  -  
  206 00:5520 -  -  -  -  CLDecodeKeyword:
  207 00:5520 F5 -  -  -  		push 	af
  208 00:5521 FE 81 -  -  		cp 		KWC_SHIFT_1 				; needs fixing if shift keywords added.
  209 00:5523 CA F1 44 -  		jp 		z,NotImplemented
  210 00:5526 FE 82 -  -  		cp 		KWC_SHIFT_2
  211 00:5528 CA F1 44 -  		jp 		z,NotImplemented
  212 00:552B -  -  -  -  
  213 00:552B DD 23 -  -  		inc 	ix 							; consume keyword
  214 00:552D 47 -  -  -  		ld 		b,a 						; put keyword # in B
  215 00:552E 21 F0 52 -  		ld 		hl,KeywordsSet0 			; start with set 0
  216 00:5531 -  -  -  -  _CLFindKeyword:
  217 00:5531 05 -  -  -  		dec 	b
  218 00:5532 F2 3D 55 -  		jp 		p,_CLFoundKeyword 			; if $7F have found keyword.
  219 00:5535 11 00 00 -  		ld 		de,0 						; get length into DE
  220 00:5538 5E -  -  -  		ld 		e,(hl)
  221 00:5539 13 -  -  -  		inc 	de 							; +1 for the length
  222 00:553A 19 -  -  -  		add 	hl,de 						; go to next keyword		
  223 00:553B 18 F4 -  -  		jr 		_CLFindKeyword
  224 00:553D -  -  -  -  _CLFoundKeyword:
  225 00:553D 46 -  -  -  		ld 		b,(hl) 						; get length into B
  226 00:553E 23 -  -  -  		inc 	hl
  227 00:553F 7E -  -  -  		ld 		a,(hl) 						; is first char identifier
  228 00:5540 CD D4 55 -  		call 	CLGetCharacterType 			
  229 00:5543 FE 01 -  -  		cp 		1 							; if so, space requied maybe ?
  230 00:5545 CC C4 55 -  		call 	z,CLCheckLastIdentifier
  231 00:5548 -  -  -  -  _CLCopyKeyword:
  232 00:5548 7E -  -  -  		ld 		a,(hl)						; copy that many characters			
  233 00:5549 23 -  -  -  		inc 	hl 		
  234 00:554A CD 13 55 -  		call 	CLPrintA
  235 00:554D 10 F9 -  -  		djnz 	_CLCopyKeyword
  236 00:554F F1 -  -  -  		pop 	af
  237 00:5550 C9 -  -  -  		ret
  238 00:5551 -  -  -  -  
  239 00:5551 -  -  -  -  ; ***************************************************************************************
  240 00:5551 -  -  -  -  ;
  241 00:5551 -  -  -  -  ;								 Decode Identifier at IX
  242 00:5551 -  -  -  -  ;
  243 00:5551 -  -  -  -  ; ***************************************************************************************
  244 00:5551 -  -  -  -  
  245 00:5551 -  -  -  -  CLDecodeIdentifier:
  246 00:5551 F5 -  -  -  		push 	af
  247 00:5552 CD C4 55 -  		call 	CLCheckLastIdentifier 		; check if identifier
  248 00:5555 -  -  -  -  _CLDILoop:
  249 00:5555 DD 7E 00 -  		ld 		a,(ix+0) 					; get identifier.
  250 00:5558 DD 23 -  -  		inc 	ix
  251 00:555A 06 61 -  -  		ld 		b,97 
  252 00:555C FE 1A -  -  		cp 		26
  253 00:555E 38 08 -  -  		jr 		c,_CLDIDoChar
  254 00:5560 06 16 -  -  		ld 		b,48-26
  255 00:5562 FE 24 -  -  		cp 		36
  256 00:5564 38 02 -  -  		jr 		c,_CLDIDoChar
  257 00:5566 06 3B -  -  		ld 		b,'_'-36
  258 00:5568 -  -  -  -  _CLDIDoChar:
  259 00:5568 80 -  -  -  		add 	a,b
  260 00:5569 CD 13 55 -  		call 	CLPrintA		
  261 00:556C DD 7E 00 -  		ld 		a,(ix+0) 					; check next is identifier
  262 00:556F FE 26 -  -  		cp 		IDENTIFIER_END
  263 00:5571 38 E2 -  -  		jr 		c,_CLDILoop
  264 00:5573 F1 -  -  -  		pop 	af
  265 00:5574 C9 -  -  -  		ret
  266 00:5575 -  -  -  -  
  267 00:5575 -  -  -  -  ; ***************************************************************************************
  268 00:5575 -  -  -  -  ;
  269 00:5575 -  -  -  -  ;								 Decode String at IX
  270 00:5575 -  -  -  -  ;
  271 00:5575 -  -  -  -  ; ***************************************************************************************
  272 00:5575 -  -  -  -  
  273 00:5575 -  -  -  -  CLDecodeString:
  274 00:5575 F5 -  -  -  		push 	af
  275 00:5576 3E 22 -  -  		ld	 	a,'"'
  276 00:5578 CD 13 55 -  		call 	CLPrintA
  277 00:557B DD 23 -  -  		inc 	ix
  278 00:557D DD 23 -  -  		inc 	ix
  279 00:557F -  -  -  -  _CLDSOut:
  280 00:557F DD 7E 00 -  		ld 		a,(ix+0)
  281 00:5582 DD 23 -  -  		inc 	ix
  282 00:5584 FE 20 -  -  		cp 		' '	
  283 00:5586 38 05 -  -  		jr 		c,_CLDSEnd
  284 00:5588 CD 13 55 -  		call 	CLPrintA
  285 00:558B 18 F2 -  -  		jr 		_CLDSOut
  286 00:558D -  -  -  -  _CLDSEnd:		
  287 00:558D 3E 22 -  -  		ld	 	a,'"'
  288 00:558F CD 13 55 -  		call 	CLPrintA
  289 00:5592 F1 -  -  -  		pop 	af
  290 00:5593 C9 -  -  -  		ret
  291 00:5594 -  -  -  -  
  292 00:5594 -  -  -  -  ; ***************************************************************************************
  293 00:5594 -  -  -  -  ;
  294 00:5594 -  -  -  -  ;							Decode Integer at IX, base B
  295 00:5594 -  -  -  -  ;
  296 00:5594 -  -  -  -  ; ***************************************************************************************
  297 00:5594 -  -  -  -  
  298 00:5594 -  -  -  -  CLDecodeInteger:
  299 00:5594 F5 -  -  -  		push 	af
  300 00:5595 C5 -  -  -  		push 	bc
  301 00:5596 CD C4 55 -  		call 	CLCheckLastIdentifier 		; check if identifier
  302 00:5599 CD 6A 46 -  		call 	EvaluateIntegerTerm 		; get the number only
  303 00:559C C1 -  -  -  		pop 	bc
  304 00:559D 78 -  -  -  		ld 		a,b 						; base
  305 00:559E CD B0 55 -  		call 	CLExpandInt32ToBuffer
  306 00:55A1 F1 -  -  -  		pop 	af
  307 00:55A2 C9 -  -  -  		ret
  308 00:55A3 -  -  -  -  
  309 00:55A3 -  -  -  -  ; ***************************************************************************************
  310 00:55A3 -  -  -  -  ;
  311 00:55A3 -  -  -  -  ;							 Decode Line Number into Token Buffer
  312 00:55A3 -  -  -  -  ;
  313 00:55A3 -  -  -  -  ; ***************************************************************************************
  314 00:55A3 -  -  -  -  
  315 00:55A3 -  -  -  -  CLDecodeLineNumber:
  316 00:55A3 DD 6E 01 -  		ld 		l,(ix+1)					; get line# to HL'HL
  317 00:55A6 DD 66 02 -  		ld 		h,(ix+2)
  318 00:55A9 D9 -  -  -  		exx
  319 00:55AA 21 00 00 -  		ld 		hl,$000000
  320 00:55AD D9 -  -  -  		exx
  321 00:55AE 3E 0A -  -  		ld 		a,10 						; base
  322 00:55B0 -  -  -  -  CLExpandInt32ToBuffer:
  323 00:55B0 ED 4B B2 41 		ld 		bc,(TWPointer) 				; where it goes.
  324 00:55B4 CD 6A 52 -  		call 	Int32ToString
  325 00:55B7 -  -  -  -  _CLEI3End: 									; look for number end.
  326 00:55B7 0A -  -  -  		ld 		a,(bc)
  327 00:55B8 ED 43 B2 41 		ld 		(TWPointer),bc
  328 00:55BC 03 -  -  -  		inc 	bc
  329 00:55BD FE 20 -  -  		cp 		' '
  330 00:55BF 30 F6 -  -  		jr 		nc,_CLEI3End
  331 00:55C1 AF -  -  -  		xor 	a 							; add EOS
  332 00:55C2 02 -  -  -  		ld 		(bc),a				
  333 00:55C3 C9 -  -  -  		ret
  334 00:55C4 -  -  -  -  
  335 00:55C4 -  -  -  -  ; ***************************************************************************************
  336 00:55C4 -  -  -  -  ;
  337 00:55C4 -  -  -  -  ;						Check if last was identifier, if so add space
  338 00:55C4 -  -  -  -  ;
  339 00:55C4 -  -  -  -  ; ***************************************************************************************
  340 00:55C4 -  -  -  -  
  341 00:55C4 -  -  -  -  CLCheckLastIdentifier:
  342 00:55C4 E5 -  -  -  		push	hl 							; get last character written
  343 00:55C5 2A B2 41 -  		ld 		hl,(TWPointer)
  344 00:55C8 2B -  -  -  		dec 	hl
  345 00:55C9 7E -  -  -  		ld 		a,(hl)
  346 00:55CA E1 -  -  -  		pop 	hl
  347 00:55CB CD D4 55 -  		call 	CLGetCharacterType 			; get type
  348 00:55CE FE 01 -  -  		cp 		1  							; if identifier (A-Z0-9_)
  349 00:55D0 CC 11 55 -  		call 	z,CLPrintSpace 				; space needed
  350 00:55D3 C9 -  -  -  		ret
  351 00:55D4 -  -  -  -  
  352 00:55D4 -  -  -  -  ; ***************************************************************************************
  353 00:55D4 -  -  -  -  ;
  354 00:55D4 -  -  -  -  ;								Get character type
  355 00:55D4 -  -  -  -  ;						0 = Space, 1 = 0-9a-zA-Z_ 2 = the rest
  356 00:55D4 -  -  -  -  ;
  357 00:55D4 -  -  -  -  ; ***************************************************************************************
  358 00:55D4 -  -  -  -  
  359 00:55D4 -  -  -  -  CLGetCharacterType:
  360 00:55D4 EE 20 -  -  		xor 	' ' 						; zero if space
  361 00:55D6 C8 -  -  -  		ret 	z
  362 00:55D7 EE 20 -  -  		xor 	' '							; get it back
  363 00:55D9 -  -  -  -  		;
  364 00:55D9 FE 5F -  -  		cp 		'_' 						; identifier if underscore.
  365 00:55DB 28 16 -  -  		jr 		z,_CLIsIdentifier
  366 00:55DD -  -  -  -  		;
  367 00:55DD FE 30 -  -  		cp 		'0' 						; check 0-9
  368 00:55DF 38 15 -  -  		jr 		c,_CLNotIdentifier
  369 00:55E1 FE 3A -  -  		cp 		'9'+1
  370 00:55E3 38 0E -  -  		jr 		c,_CLIsIdentifier
  371 00:55E5 -  -  -  -  		;
  372 00:55E5 FE 60 -  -  		cp 		96 							; shift l/c down
  373 00:55E7 38 02 -  -  		jr 		c,_CLNotUpper
  374 00:55E9 D6 20 -  -  		sub 	a,32
  375 00:55EB -  -  -  -  _CLNotUpper:
  376 00:55EB FE 41 -  -  		cp 		'A'
  377 00:55ED 38 07 -  -  		jr 		c,_CLNotIdentifier
  378 00:55EF FE 5B -  -  		cp 		'Z'+1
  379 00:55F1 30 00 -  -  		jr 		nc,_CLIsIdentifier		
  380 00:55F3 -  -  -  -  _CLIsIdentifier:
  381 00:55F3 3E 01 -  -  		ld 		a,1
  382 00:55F5 C9 -  -  -  		ret
  383 00:55F6 -  -  -  -  _CLNotIdentifier:
  384 00:55F6 3E 02 -  -  		ld 		a,2
  385 00:55F8 C9 -  -  -  		ret
  386 00:55F9 -  -  -  -  
  387 00:55F9 -  -  -  -  ; ***************************************************************************************
  388 00:55F9 -  -  -  -  ;
  389 00:55F9 -  -  -  -  ;									Changes and Updates
  390 00:55F9 -  -  -  -  ;
  391 00:55F9 -  -  -  -  ; ***************************************************************************************
  392 00:55F9 -  -  -  -  ;
  393 00:55F9 -  -  -  -  ;		Date			Notes
  394 00:55F9 -  -  -  -  ;		==== 			=====
  395 00:55F9 -  -  -  -  ;
  396 00:55F9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   84 00:55F9 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:55F9 -  -  -  -  ; ***************************************************************************************
    2 00:55F9 -  -  -  -  ; ***************************************************************************************
    3 00:55F9 -  -  -  -  ;
    4 00:55F9 -  -  -  -  ;		Name : 		basic.asm
    5 00:55F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:55F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:55F9 -  -  -  -  ;		Reviewed :	No
    8 00:55F9 -  -  -  -  ;		Purpose :	Main program.
    9 00:55F9 -  -  -  -  ;
   10 00:55F9 -  -  -  -  ; ***************************************************************************************
   11 00:55F9 -  -  -  -  ; ***************************************************************************************
   12 00:55F9 -  -  -  -  
   13 00:55F9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:5800 -  -  -  -  TestInstance:
   15 00:5800 10 04 00 BF 
              00 8F 0A 86 
              42 85 43 89 
              44 8A 45 80 
              05 0A 00 C4 
              80 0F 0C 00 
              00 01 02 24 
              1B 1C 1D 8F 
              17 A7 CD 80 
              08 14 00 BF 
              0A 8F 40 80 
              09 19 00 BD 
              0C 95 45 A5 
              80 0A 1E 00 
              BF 0A 8F 0A 
              89 41 80 10 
              28 00 BF 00 
              8F 0A 86 42 
              85 43 89 44 
              8A 45 80 07 
              2D 00 B9 4A 
              7C 80 0A 2E 
              00 B2 0B 8F 
              41 B3 45 80 
              0B 2F 00 BF 
              0C 95 0B A5 
              8F 00 80 05 
              30 00 B5 80 
              0D 32 00 AF 
              0A 8E 42 5C 
              50 B0 BB 5E 
              80 13 3C 00 
              C1 3F 0B 48 
              65 6C 6C 6F 
              20 77 6F 72 
              6C 64 0D 80 
              0D 58 02 B6 
              B7 13 04 12 
              13 95 00 A5 
              80 0C 5D 02 
              00 8F 94 4A 
              64 A7 C1 00 
              80 05 62 02 
              B8 80 05 AC 
              58 BA 80 -  		#import 	"testprogram/testprogram.dax"
   16 00:58B3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:68B3 -  -  -  -  EndTestInstance:
   18 00:68B3 -  -  -  -  		
   19 00:68B3 -  -  -  -  ; ***************************************************************************************
   20 00:68B3 -  -  -  -  ;
   21 00:68B3 -  -  -  -  ;									Changes and Updates
   22 00:68B3 -  -  -  -  ;
   23 00:68B3 -  -  -  -  ; ***************************************************************************************
   24 00:68B3 -  -  -  -  ;
   25 00:68B3 -  -  -  -  ;		Date			Notes
   26 00:68B3 -  -  -  -  ;		==== 			=====
   27 00:68B3 -  -  -  -  ;
   28 00:68B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   85 00:68B3 -  -  -  -  FinalAddress:
