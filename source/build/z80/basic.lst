    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ac ; repeat
   54 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ad ; until
   55 00:0000 -  -  -  -  #define KWD_IF                              	$00ae ; if
   56 00:0000 -  -  -  -  #define KWD_THEN                            	$00af ; then
   57 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b0 ; else
   58 00:0000 -  -  -  -  #define KWD_FOR                             	$00b1 ; for
   59 00:0000 -  -  -  -  #define KWD_TO                              	$00b2 ; to
   60 00:0000 -  -  -  -  #define KWD_STEP                            	$00b3 ; step
   61 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b4 ; next
   62 00:0000 -  -  -  -  #define KWD_DEF                             	$00b5 ; def
   63 00:0000 -  -  -  -  #define KWD_PROC                            	$00b6 ; proc
   64 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b7 ; endproc
   65 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b8 ; gosub
   66 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b9 ; return
   67 00:0000 -  -  -  -  #define KWD_GOTO                            	$00ba ; goto
   68 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bb ; local
   69 00:0000 -  -  -  -  #define KWD_DIM                             	$00bc ; dim
   70 00:0000 -  -  -  -  #define KWD_REM                             	$00bd ; rem
   71 00:0000 -  -  -  -  #define KWD_LET                             	$00be ; let
   72 00:0000 -  -  -  -  #define KWD_VDU                             	$00bf ; vdu
   73 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c0 ; print
   74 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c1 ; load
   75 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c2 ; save
   76 00:0000 -  -  -  -  #define KWD_LIST                            	$00c3 ; list
   77 00:0000 -  -  -  -  #define KWD_NEW                             	$00c4 ; new
   78 00:0000 -  -  -  -  #define KWD_RUN                             	$00c5 ; run
   79 00:0000 -  -  -  -  #define KWD_READ                            	$00c6 ; read
   80 00:0000 -  -  -  -  #define KWD_DATA                            	$00c7 ; data
   81 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c8 ; restore
   82 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c9 ; assert
   83 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00ca ; clear
   84 00:0000 -  -  -  -  #define KWD_END                             	$00cb ; end
   85 00:0000 -  -  -  -  #define KWD_STOP                            	$00cc ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 88 4C -  		call 	SYSInitialise
   44 00:4006 11 00 50 -  		ld 		de,TestInstance
   45 00:4009 21 53 60 -  		ld 		hl,EndTestInstance
   46 00:400C CD 7F 47 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 59 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 4D 42 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 90 4C -  		call 	SYSPrintChar
   56 00:401C CD 8E 4C -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 05 C3 F4 
              42 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 06 C3 F4 
              42 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  											; must be power of 2. 
   24 00:4029 -  -  -  -  
   25 00:4029 -  -  -  -  ; ***************************************************************************************
   26 00:4029 -  -  -  -  ;
   27 00:4029 -  -  -  -  ;								Defines the current instance
   28 00:4029 -  -  -  -  ;
   29 00:4029 -  -  -  -  ; ***************************************************************************************
   30 00:4029 -  -  -  -  
   31 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:4029 00 00 00 00 		.dw 	0,0
   33 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:402D 00 00 00 00 		.dw 	0,0		
   35 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4031 00 00 00 00 		.dw 	0,0 							
   37 00:4035 -  -  -  -  
   38 00:4035 -  -  -  -  ; ***************************************************************************************
   39 00:4035 -  -  -  -  ;
   40 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4035 -  -  -  -  ;
   42 00:4035 -  -  -  -  ; ***************************************************************************************
   43 00:4035 -  -  -  -  
   44 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4035 00 00 00 00 		.dw 	0,0
   46 00:4039 -  -  -  -  
   47 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:4039 00 00 00 00 		.dw 	0,0		
   49 00:403D -  -  -  -  
   50 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:403D 00 00 00 00 		.dw 	0,0
   52 00:4041 -  -  -  -  
   53 00:4041 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4041 00 00 00 00 		.dw 	0,0
   55 00:4045 -  -  -  -  
   56 00:4045 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4045 00 00 00 00 		.dw 	0,0		
   58 00:4049 -  -  -  -  
   59 00:4049 -  -  -  -  ;
   60 00:4049 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:4049 -  -  -  -  ;
   62 00:4049 -  -  -  -  
   63 00:4049 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:4049 00 00 00 00 		.dw 	0,0
   65 00:404D -  -  -  -  		
   66 00:404D -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:404D 00 00 00 00 		.dw 	0,0
   68 00:4051 -  -  -  -  
   69 00:4051 -  -  -  -  ; ***************************************************************************************
   70 00:4051 -  -  -  -  ;
   71 00:4051 -  -  -  -  ;										Run variables
   72 00:4051 -  -  -  -  ;
   73 00:4051 -  -  -  -  ; ***************************************************************************************
   74 00:4051 -  -  -  -  
   75 00:4051 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4051 00 00 00 00 		.dw 	0,0
   77 00:4055 -  -  -  -  		
   78 00:4055 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4055 00 00 00 00 		.dw 	0,0
   80 00:4059 -  -  -  -  
   81 00:4059 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:4059 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:405F -  -  -  -  
   84 00:405F -  -  -  -  AConvert: 									; used for address conversions.
   85 00:405F 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4065 -  -  -  -  		
   87 00:4065 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4065 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4075 -  -  -  -  
   90 00:4075 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4075 00 00 -  -  		.dw 	0
   92 00:4077 -  -  -  -  
   93 00:4077 -  -  -  -  ; ***************************************************************************************
   94 00:4077 -  -  -  -  ;
   95 00:4077 -  -  -  -  ;									Variable Information
   96 00:4077 -  -  -  -  ;
   97 00:4077 -  -  -  -  ; ***************************************************************************************
   98 00:4077 -  -  -  -  
   99 00:4077 -  -  -  -  VarNameStart: 								; first byte of name
  100 00:4077 00 00 00 00 		.dw 	0,0
  101 00:407B -  -  -  -  VarHash: 									; name hash value
  102 00:407B 00 00 -  -  		.dw 	0		
  103 00:407D -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:407D 00 00 00 00 		.dw 	0,0
  105 00:4081 -  -  -  -  		
  106 00:4081 -  -  -  -  ; ***************************************************************************************
  107 00:4081 -  -  -  -  ;
  108 00:4081 -  -  -  -  ;										  Buffers
  109 00:4081 -  -  -  -  ;
  110 00:4081 -  -  -  -  ; ***************************************************************************************
  111 00:4081 -  -  -  -  
  112 00:4081 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:4081 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:4091 -  -  -  -  
  115 00:4091 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:4091 00 00 -  -  		.dw 	0
  117 00:4093 -  -  -  -  
  118 00:4093 -  -  -  -  ConvertBuffer: 								; general usage
  119 00:4093 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:40D3 -  -  -  -  
  121 00:40D3 -  -  -  -  ; ***************************************************************************************
  122 00:40D3 -  -  -  -  ;
  123 00:40D3 -  -  -  -  ;									Changes and Updates
  124 00:40D3 -  -  -  -  ;
  125 00:40D3 -  -  -  -  ; ***************************************************************************************
  126 00:40D3 -  -  -  -  ;
  127 00:40D3 -  -  -  -  ;		Date			Notes
  128 00:40D3 -  -  -  -  ;		==== 			=====
  129 00:40D3 -  -  -  -  ;
  130 00:40D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D3 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D3 -  -  -  -  ; ***************************************************************************************
    2 00:40D3 -  -  -  -  ; ***************************************************************************************
    3 00:40D3 -  -  -  -  ;
    4 00:40D3 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D3 -  -  -  -  ;		Reviewed :	No
    8 00:40D3 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D3 -  -  -  -  ;
   10 00:40D3 -  -  -  -  ; ***************************************************************************************
   11 00:40D3 -  -  -  -  ; ***************************************************************************************
   12 00:40D3 -  -  -  -  
   13 00:40D3 -  -  -  -  ; ***************************************************************************************
   14 00:40D3 -  -  -  -  ;
   15 00:40D3 -  -  -  -  ;									ASSERT command
   16 00:40D3 -  -  -  -  ;
   17 00:40D3 -  -  -  -  ; ***************************************************************************************
   18 00:40D3 -  -  -  -  
   19 00:40D3 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D3 CD D9 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40D6 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40DC C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40DD 3E 01 C3 F4 
              42 -  -  -  		ERR_ASSERT
   24 00:40E2 -  -  -  -  
   25 00:40E2 -  -  -  -  ; ***************************************************************************************
   26 00:40E2 -  -  -  -  ;
   27 00:40E2 -  -  -  -  ;									Changes and Updates
   28 00:40E2 -  -  -  -  ;
   29 00:40E2 -  -  -  -  ; ***************************************************************************************
   30 00:40E2 -  -  -  -  ;
   31 00:40E2 -  -  -  -  ;		Date			Notes
   32 00:40E2 -  -  -  -  ;		==== 			=====
   33 00:40E2 -  -  -  -  ;
   34 00:40E2 -  -  -  -  ; ***************************************************************************************
   35 00:40E2 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E2 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E2 -  -  -  -  ; ***************************************************************************************
    2 00:40E2 -  -  -  -  ; ***************************************************************************************
    3 00:40E2 -  -  -  -  ;
    4 00:40E2 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E2 -  -  -  -  ;		Reviewed :	No
    8 00:40E2 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E2 -  -  -  -  ;
   10 00:40E2 -  -  -  -  ; ***************************************************************************************
   11 00:40E2 -  -  -  -  ; ***************************************************************************************
   12 00:40E2 -  -  -  -  
   13 00:40E2 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E2 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E2 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E2 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40E2 -  -  -  -  BadCmd_To: 			;; [to]
   18 00:40E2 C3 51 43 -  		jp 		SyntaxError
   19 00:40E5 -  -  -  -  
   20 00:40E5 -  -  -  -  ; ***************************************************************************************
   21 00:40E5 -  -  -  -  ;
   22 00:40E5 -  -  -  -  ;									Changes and Updates
   23 00:40E5 -  -  -  -  ;
   24 00:40E5 -  -  -  -  ; ***************************************************************************************
   25 00:40E5 -  -  -  -  ;
   26 00:40E5 -  -  -  -  ;		Date			Notes
   27 00:40E5 -  -  -  -  ;		==== 			=====
   28 00:40E5 -  -  -  -  ;
   29 00:40E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40E5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40E5 -  -  -  -  ; ***************************************************************************************
    2 00:40E5 -  -  -  -  ; ***************************************************************************************
    3 00:40E5 -  -  -  -  ;
    4 00:40E5 -  -  -  -  ;		Name : 		colon.asm
    5 00:40E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40E5 -  -  -  -  ;		Reviewed :	No
    8 00:40E5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40E5 -  -  -  -  ;
   10 00:40E5 -  -  -  -  ; ***************************************************************************************
   11 00:40E5 -  -  -  -  ; ***************************************************************************************
   12 00:40E5 -  -  -  -  
   13 00:40E5 -  -  -  -  ; ***************************************************************************************
   14 00:40E5 -  -  -  -  ;
   15 00:40E5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40E5 -  -  -  -  ;
   17 00:40E5 -  -  -  -  ; ***************************************************************************************
   18 00:40E5 -  -  -  -  
   19 00:40E5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40E5 C9 -  -  -  		ret
   21 00:40E6 -  -  -  -  
   22 00:40E6 -  -  -  -  ; ***************************************************************************************
   23 00:40E6 -  -  -  -  ;
   24 00:40E6 -  -  -  -  ;									Changes and Updates
   25 00:40E6 -  -  -  -  ;
   26 00:40E6 -  -  -  -  ; ***************************************************************************************
   27 00:40E6 -  -  -  -  ;
   28 00:40E6 -  -  -  -  ;		Date			Notes
   29 00:40E6 -  -  -  -  ;		==== 			=====
   30 00:40E6 -  -  -  -  ;
   31 00:40E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40E6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40E6 -  -  -  -  ; ***************************************************************************************
    2 00:40E6 -  -  -  -  ; ***************************************************************************************
    3 00:40E6 -  -  -  -  ;
    4 00:40E6 -  -  -  -  ;		Name : 		dim.asm
    5 00:40E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:40E6 -  -  -  -  ;		Reviewed :	No
    8 00:40E6 -  -  -  -  ;		Purpose :	Dim command
    9 00:40E6 -  -  -  -  ;
   10 00:40E6 -  -  -  -  ; ***************************************************************************************
   11 00:40E6 -  -  -  -  ; ***************************************************************************************
   12 00:40E6 -  -  -  -  
   13 00:40E6 -  -  -  -  ; ***************************************************************************************
   14 00:40E6 -  -  -  -  ;
   15 00:40E6 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40E6 -  -  -  -  ;	
   17 00:40E6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40E6 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40E6 -  -  -  -  ;								(can be comma chained)
   20 00:40E6 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40E6 -  -  -  -  ;
   22 00:40E6 -  -  -  -  ; ***************************************************************************************
   23 00:40E6 -  -  -  -  
   24 00:40E6 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40E6 -  -  -  -  		;
   26 00:40E6 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40E6 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40E6 -  -  -  -  		;
   29 00:40E6 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40E8 D1 -  -  -  		pop 	de
   31 00:40E9 -  -  -  -  		;
   32 00:40E9 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40EC FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40EE D2 51 43 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40F1 -  -  -  -  _DISkip:
   36 00:40F1 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40F3 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40F6 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:40F8 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:40FA -  -  -  -  		;
   41 00:40FA DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:40FD FE 95 -  -  		cp 		KWD_LPAREN
   43 00:40FF F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4100 CC 57 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:4103 F1 -  -  -  		pop 	af
   46 00:4104 C4 16 41 -  		call 	nz,DimensionAllocate
   47 00:4107 -  -  -  -  		;
   48 00:4107 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:410A FE A6 -  -  		cp 		KWD_COMMA
   50 00:410C C0 -  -  -  		ret 	nz
   51 00:410D DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:410F 18 D5 -  -  		jr 		Command_DIM
   53 00:4111 -  -  -  -  
   54 00:4111 -  -  -  -  _CDError:
   55 00:4111 3E 04 C3 F4 
              42 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:4116 -  -  -  -  
   57 00:4116 -  -  -  -  ; ***************************************************************************************
   58 00:4116 -  -  -  -  ;
   59 00:4116 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:4116 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:4116 -  -  -  -  ;
   62 00:4116 -  -  -  -  ; ***************************************************************************************
   63 00:4116 -  -  -  -  
   64 00:4116 -  -  -  -  DimensionAllocate:
   65 00:4116 D5 -  -  -  		push 	de 							; save start on stack
   66 00:4117 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:4119 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:411B 32 75 40 -  		ld 		(AllowAutoCreate),a
   69 00:411E CD E1 47 -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:4121 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:4123 28 EC -  -  		jr 		z,_CDError
   72 00:4125 CB 41 -  -  		bit 	CIsString,c
   73 00:4127 20 E8 -  -  		jr 		nz,_CDError
   74 00:4129 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:412B E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:412C 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:412E CD E9 42 -  		call 	CheckNextA 					; check for [
   78 00:4131 CD D9 44 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:4134 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:4136 CD E9 42 -  		call 	CheckNextA 					; check for ]
   81 00:4139 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:413A 7C -  -  -  		ld 		a,h
   83 00:413B B5 -  -  -  		or 		l
   84 00:413C 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:413E D9 -  -  -  		exx
   86 00:413F 23 -  -  -  		inc 	hl
   87 00:4140 D9 -  -  -  		exx
   88 00:4141 -  -  -  -  _DANoCarry:
   89 00:4141 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:4142 7C -  -  -  		ld 		a,h
   91 00:4143 B5 -  -  -  		or 		l
   92 00:4144 D9 -  -  -  		exx
   93 00:4145 20 CA -  -  		jr 		nz,_CDError
   94 00:4147 CD 21 47 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:414A EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:414B E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:414C 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:4152 AF -  -  -  		xor 	a 							; autocreate off
   99 00:4153 32 75 40 -  		ld 		(AllowAutoCreate),a
  100 00:4156 C9 -  -  -  		ret
  101 00:4157 -  -  -  -  
  102 00:4157 -  -  -  -  ; ***************************************************************************************
  103 00:4157 -  -  -  -  ;
  104 00:4157 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:4157 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:4157 -  -  -  -  ;
  107 00:4157 -  -  -  -  ; ***************************************************************************************
  108 00:4157 -  -  -  -  
  109 00:4157 -  -  -  -  DimensionArray:
  110 00:4157 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:4158 -  -  -  -  		;
  112 00:4158 CD D9 44 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:415B 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:415C E6 FC -  -  		and 	$FC
  115 00:415E D9 -  -  -  		exx
  116 00:415F B4 -  -  -  		or 		h
  117 00:4160 B5 -  -  -  		or 		l
  118 00:4161 D9 -  -  -  		exx
  119 00:4162 20 AD -  -  		jr 		nz,_CDError
  120 00:4164 -  -  -  -  		;
  121 00:4164 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:4166 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:4167 -  -  -  -  		;
  124 00:4167 CD 33 48 -  		call 	VariableInformation 		; get information about this array
  125 00:416A CD 69 48 -  		call 	VariableSearchList 			; look to see if already present.
  126 00:416D 30 A2 -  -  		jr 		nc,_CDError 				; not found.
  127 00:416F -  -  -  -  		;
  128 00:416F E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4170 E5 -  -  -  		push 	hl
  130 00:4171 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:4172 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:4173 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:4174 29 -  -  -  		add 	hl,hl
  134 00:4175 CD A2 47 -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:4178 -  -  -  -  		;
  136 00:4178 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:4179 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:417C 09 -  -  -  		add 	hl,bc
  139 00:417D 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:4183 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:4185 C9 -  -  -  		ret		
  142 00:4186 -  -  -  -  
  143 00:4186 -  -  -  -  
  144 00:4186 -  -  -  -  ; ***************************************************************************************
  145 00:4186 -  -  -  -  ;
  146 00:4186 -  -  -  -  ;									Changes and Updates
  147 00:4186 -  -  -  -  ;
  148 00:4186 -  -  -  -  ; ***************************************************************************************
  149 00:4186 -  -  -  -  ;
  150 00:4186 -  -  -  -  ;		Date			Notes
  151 00:4186 -  -  -  -  ;		==== 			=====
  152 00:4186 -  -  -  -  ;
  153 00:4186 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:4186 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:4186 -  -  -  -  ; ***************************************************************************************
    2 00:4186 -  -  -  -  ; ***************************************************************************************
    3 00:4186 -  -  -  -  ;
    4 00:4186 -  -  -  -  ;		Name : 		end.asm
    5 00:4186 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4186 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4186 -  -  -  -  ;		Reviewed :	No
    8 00:4186 -  -  -  -  ;		Purpose :	End command
    9 00:4186 -  -  -  -  ;
   10 00:4186 -  -  -  -  ; ***************************************************************************************
   11 00:4186 -  -  -  -  ; ***************************************************************************************
   12 00:4186 -  -  -  -  
   13 00:4186 -  -  -  -  ; ***************************************************************************************
   14 00:4186 -  -  -  -  ;
   15 00:4186 -  -  -  -  ;										END command
   16 00:4186 -  -  -  -  ;
   17 00:4186 -  -  -  -  ; ***************************************************************************************
   18 00:4186 -  -  -  -  
   19 00:4186 -  -  -  -  Command_END: 	;; [end]
   20 00:4186 3E 00 C3 F4 
              42 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:418B -  -  -  -  
   22 00:418B -  -  -  -  ; ***************************************************************************************
   23 00:418B -  -  -  -  ;
   24 00:418B -  -  -  -  ;									Changes and Updates
   25 00:418B -  -  -  -  ;
   26 00:418B -  -  -  -  ; ***************************************************************************************
   27 00:418B -  -  -  -  ;
   28 00:418B -  -  -  -  ;		Date			Notes
   29 00:418B -  -  -  -  ;		==== 			=====
   30 00:418B -  -  -  -  ;
   31 00:418B -  -  -  -  ; ***************************************************************************************
   32 00:418B -  -  -  -  		
Listing for file "_build.asm"
   18 00:418B -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:418B -  -  -  -  ; ***************************************************************************************
    2 00:418B -  -  -  -  ; ***************************************************************************************
    3 00:418B -  -  -  -  ;
    4 00:418B -  -  -  -  ;		Name : 		endofline.asm
    5 00:418B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:418B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:418B -  -  -  -  ;		Reviewed :	None
    8 00:418B -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:418B -  -  -  -  ;
   10 00:418B -  -  -  -  ; ***************************************************************************************
   11 00:418B -  -  -  -  ; ***************************************************************************************
   12 00:418B -  -  -  -  
   13 00:418B -  -  -  -  ; ***************************************************************************************
   14 00:418B -  -  -  -  ;
   15 00:418B -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:418B -  -  -  -  ;
   17 00:418B -  -  -  -  ; ***************************************************************************************
   18 00:418B -  -  -  -  
   19 00:418B -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:418B DD 2A 51 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:418F 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:4192 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:4195 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:4197 -  -  -  -  		;
   25 00:4197 ED 7B 55 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:419B C3 5C 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:419E -  -  -  -  
   28 00:419E -  -  -  -  ; ***************************************************************************************
   29 00:419E -  -  -  -  ;
   30 00:419E -  -  -  -  ;									Changes and Updates
   31 00:419E -  -  -  -  ;
   32 00:419E -  -  -  -  ; ***************************************************************************************
   33 00:419E -  -  -  -  ;
   34 00:419E -  -  -  -  ;		Date			Notes
   35 00:419E -  -  -  -  ;		==== 			=====
   36 00:419E -  -  -  -  ;
   37 00:419E -  -  -  -  ; ***************************************************************************************
   38 00:419E -  -  -  -  		
Listing for file "_build.asm"
   19 00:419E -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:419E -  -  -  -  ; ***************************************************************************************
    2 00:419E -  -  -  -  ; ***************************************************************************************
    3 00:419E -  -  -  -  ;
    4 00:419E -  -  -  -  ;		Name : 		let.asm
    5 00:419E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:419E -  -  -  -  ;		Date : 		4th June 2022
    7 00:419E -  -  -  -  ;		Reviewed :	No
    8 00:419E -  -  -  -  ;		Purpose :	Assignment statement
    9 00:419E -  -  -  -  ;
   10 00:419E -  -  -  -  ; ***************************************************************************************
   11 00:419E -  -  -  -  ; ***************************************************************************************
   12 00:419E -  -  -  -  
   13 00:419E -  -  -  -  ; ***************************************************************************************
   14 00:419E -  -  -  -  ;
   15 00:419E -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:419E -  -  -  -  ;
   17 00:419E -  -  -  -  ; ***************************************************************************************
   18 00:419E -  -  -  -  
   19 00:419E -  -  -  -  Command_LET: 	;; [let]
   20 00:419E DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41A1 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41A3 28 28 -  -  		jr 		z,_CLString
   23 00:41A5 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41A7 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41A9 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41AB 32 75 40 -  		ld 		(AllowAutoCreate),a
   27 00:41AE -  -  -  -  _CLNoAuto:
   28 00:41AE 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41B0 CD 6A 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41B3 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41B5 CA 51 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41B8 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41B9 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41BA AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41BB 32 75 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41BE 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41C0 CD E9 42 -  		call 	CheckNextA
   38 00:41C3 -  -  -  -  
   39 00:41C3 CD D3 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41C6 -  -  -  -  
   41 00:41C6 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41C7 43 -  -  -  		ld 		b,e 						
   43 00:41C8 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41C9 -  -  -  -  		;
   45 00:41C9 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41C9 -  -  -  -  		;
   47 00:41C9 CD CE 41 -  		call 	WriteHLToDE
   48 00:41CC C9 -  -  -  		ret
   49 00:41CD -  -  -  -  		;
   50 00:41CD -  -  -  -  		; 		String assignment code.
   51 00:41CD -  -  -  -  		;
   52 00:41CD -  -  -  -  _CLString:
   53 00:41CD 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:41CE -  -  -  -  
   55 00:41CE -  -  -  -  ; ***************************************************************************************
   56 00:41CE -  -  -  -  ;
   57 00:41CE -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:41CE -  -  -  -  ;
   59 00:41CE -  -  -  -  ; ***************************************************************************************
   60 00:41CE -  -  -  -  
   61 00:41CE -  -  -  -  WriteHLToDE:
   62 00:41CE CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:41D0 C2 47 43 -  		jp 		nz,TypeMismatch
   64 00:41D3 -  -  -  -  		;
   65 00:41D3 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:41D3 -  -  -  -  		;		
   67 00:41D3 -  -  -  -  _WHDWriteNumber:
   68 00:41D3 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:41D4 D9 -  -  -  		exx
   70 00:41D5 EB -  -  -  		ex 		de,hl
   71 00:41D6 D9 -  -  -  		exx
   72 00:41D7 -  -  -  -  
   73 00:41D7 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:41D8 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:41D9 72 -  -  -  		ld 		(hl),d
   76 00:41DA 23 -  -  -  		inc 	hl
   77 00:41DB E5 -  -  -  		push 	hl
   78 00:41DC D9 -  -  -  		exx
   79 00:41DD E1 -  -  -  		pop 	hl
   80 00:41DE 73 -  -  -  		ld 		(hl),e
   81 00:41DF 23 -  -  -  		inc 	hl
   82 00:41E0 72 -  -  -  		ld 		(hl),d
   83 00:41E1 D9 -  -  -  		exx
   84 00:41E2 -  -  -  -  
   85 00:41E2 C9 -  -  -  		ret
   86 00:41E3 -  -  -  -  
   87 00:41E3 -  -  -  -  ; ***************************************************************************************
   88 00:41E3 -  -  -  -  ;
   89 00:41E3 -  -  -  -  ;									Changes and Updates
   90 00:41E3 -  -  -  -  ;
   91 00:41E3 -  -  -  -  ; ***************************************************************************************
   92 00:41E3 -  -  -  -  ;
   93 00:41E3 -  -  -  -  ;		Date			Notes
   94 00:41E3 -  -  -  -  ;		==== 			=====
   95 00:41E3 -  -  -  -  ;
   96 00:41E3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:41E3 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:41E3 -  -  -  -  ; ***************************************************************************************
    2 00:41E3 -  -  -  -  ; ***************************************************************************************
    3 00:41E3 -  -  -  -  ;
    4 00:41E3 -  -  -  -  ;		Name : 		print.asm
    5 00:41E3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41E3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41E3 -  -  -  -  ;		Reviewed :	No
    8 00:41E3 -  -  -  -  ;		Purpose :	Print command
    9 00:41E3 -  -  -  -  ;
   10 00:41E3 -  -  -  -  ; ***************************************************************************************
   11 00:41E3 -  -  -  -  ; ***************************************************************************************
   12 00:41E3 -  -  -  -  
   13 00:41E3 -  -  -  -  ; ***************************************************************************************
   14 00:41E3 -  -  -  -  ;
   15 00:41E3 -  -  -  -  ;										PRINT command
   16 00:41E3 -  -  -  -  ;
   17 00:41E3 -  -  -  -  ; ***************************************************************************************
   18 00:41E3 -  -  -  -  
   19 00:41E3 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:41E3 -  -  -  -  		;
   21 00:41E3 -  -  -  -  		;		Main loop
   22 00:41E3 -  -  -  -  		;
   23 00:41E3 -  -  -  -  _CPRLoop:
   24 00:41E3 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:41E6 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:41E8 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:41EA FE A7 -  -  		cp 		KWD_COLON 	
   28 00:41EC 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:41EE FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:41F0 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:41F2 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:41F4 28 26 -  -  		jr 		z,_CPRTab
   33 00:41F6 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:41F8 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:41FA -  -  -  -  		;
   36 00:41FA CD D3 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:41FD CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:41FF 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:4201 -  -  -  -  		;
   40 00:4201 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:4203 -  -  -  -  _CPRPrintNumber:
   42 00:4203 F5 -  -  -  		push 	af 							; print leading space
   43 00:4204 3E 20 -  -  		ld 		a,' '
   44 00:4206 CD 90 4C -  		call 	SYSPrintChar
   45 00:4209 F1 -  -  -  		pop 	af
   46 00:420A 01 93 40 -  		ld  	bc,ConvertBuffer
   47 00:420D C5 -  -  -  		push 	bc
   48 00:420E CD 42 4C -  		call 	Int32ToString 				; convert to string
   49 00:4211 E1 -  -  -  		pop 	hl
   50 00:4212 -  -  -  -  		;
   51 00:4212 -  -  -  -  		; 		Print text at HL.
   52 00:4212 -  -  -  -  		;
   53 00:4212 -  -  -  -  _CPRPrintHL:
   54 00:4212 CD 98 47 -  		call 	PrintStringAtHL 			; print string out
   55 00:4215 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4217 -  -  -  -  		;
   57 00:4217 -  -  -  -  		; 		New line (')
   58 00:4217 -  -  -  -  		;
   59 00:4217 -  -  -  -  _CPRNewLine:
   60 00:4217 CD AC 4C -  		call 	SYSPrintCRLF
   61 00:421A 18 05 -  -  		jr 		_CPRCheckNext
   62 00:421C -  -  -  -  		;
   63 00:421C -  -  -  -  		; 		Tab command (,)
   64 00:421C -  -  -  -  		;
   65 00:421C -  -  -  -  _CPRTab:
   66 00:421C 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:421E CD 90 4C -  		call 	SYSPrintChar
   68 00:4221 -  -  -  -  		;
   69 00:4221 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:4221 -  -  -  -  		;
   71 00:4221 -  -  -  -  _CPRCheckNext:
   72 00:4221 DD 23 -  -  		inc 	ix 							; consume current
   73 00:4223 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:4226 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:4228 C8 -  -  -  		ret 	z
   76 00:4229 FE A7 -  -  		cp 		KWD_COLON
   77 00:422B C8 -  -  -  		ret 	z
   78 00:422C 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:422E -  -  -  -  		;
   80 00:422E -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:422E -  -  -  -  		;
   82 00:422E -  -  -  -  _CPRExitNL:
   83 00:422E CD AC 4C -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:4231 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:4232 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4232 -  -  -  -  ; ***************************************************************************************
    2 00:4232 -  -  -  -  ; ***************************************************************************************
    3 00:4232 -  -  -  -  ;
    4 00:4232 -  -  -  -  ;		Name : 		rem.asm
    5 00:4232 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4232 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4232 -  -  -  -  ;		Reviewed :	No
    8 00:4232 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4232 -  -  -  -  ;
   10 00:4232 -  -  -  -  ; ***************************************************************************************
   11 00:4232 -  -  -  -  ; ***************************************************************************************
   12 00:4232 -  -  -  -  
   13 00:4232 -  -  -  -  ; ***************************************************************************************
   14 00:4232 -  -  -  -  ;
   15 00:4232 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4232 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4232 -  -  -  -  ;
   18 00:4232 -  -  -  -  ; ***************************************************************************************
   19 00:4232 -  -  -  -  
   20 00:4232 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4232 -  -  -  -  Command_REM2: 	;; [']
   22 00:4232 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:4235 DD 23 -  -  		inc 	ix
   24 00:4237 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:4239 C8 -  -  -  		ret 	z
   26 00:423A FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:423C C8 -  -  -  		ret 	z
   28 00:423D FE 3F -  -  		cp 		STRING_MARKER
   29 00:423F C2 51 43 -  		jp 		nz,SyntaxError
   30 00:4242 -  -  -  -  		;		
   31 00:4242 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:4245 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4248 13 -  -  -  		inc 	de 
   34 00:4249 13 -  -  -  		inc 	de
   35 00:424A DD 19 -  -  		add 	ix,de 						; skip string
   36 00:424C C9 -  -  -  		ret
   37 00:424D -  -  -  -  
   38 00:424D -  -  -  -  ; ***************************************************************************************
   39 00:424D -  -  -  -  ;
   40 00:424D -  -  -  -  ;									Changes and Updates
   41 00:424D -  -  -  -  ;
   42 00:424D -  -  -  -  ; ***************************************************************************************
   43 00:424D -  -  -  -  ;
   44 00:424D -  -  -  -  ;		Date			Notes
   45 00:424D -  -  -  -  ;		==== 			=====
   46 00:424D -  -  -  -  ;
   47 00:424D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:424D -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:424D -  -  -  -  ; ***************************************************************************************
    2 00:424D -  -  -  -  ; ***************************************************************************************
    3 00:424D -  -  -  -  ;
    4 00:424D -  -  -  -  ;		Name : 		run.asm
    5 00:424D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:424D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:424D -  -  -  -  ;		Reviewed :	No
    8 00:424D -  -  -  -  ;		Purpose :	Run command
    9 00:424D -  -  -  -  ;
   10 00:424D -  -  -  -  ; ***************************************************************************************
   11 00:424D -  -  -  -  ; ***************************************************************************************
   12 00:424D -  -  -  -  
   13 00:424D -  -  -  -  ; ***************************************************************************************
   14 00:424D -  -  -  -  ;
   15 00:424D -  -  -  -  ;										RUN command
   16 00:424D -  -  -  -  ;
   17 00:424D -  -  -  -  ; ***************************************************************************************
   18 00:424D -  -  -  -  
   19 00:424D -  -  -  -  Command_RUN: 	;; [run]
   20 00:424D CD 3E 47 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4250 -  -  -  -  
   22 00:4250 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:4254 ED 73 55 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4258 AF -  -  -  		xor 	a
   25 00:4259 32 75 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:425C -  -  -  -  		;
   27 00:425C -  -  -  -  		; 		New line at IX.
   28 00:425C -  -  -  -  		;
   29 00:425C -  -  -  -  CRNewLine:
   30 00:425C DD 22 51 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:4260 -  -  -  -  		;
   32 00:4260 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:4263 B7 -  -  -  		or 		a
   34 00:4264 CA 86 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4267 -  -  -  -  		;
   36 00:4267 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4269 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:426B DD 23 -  -  		inc 	ix
   39 00:426D -  -  -  -  		;
   40 00:426D -  -  -  -  		; 		New command at IX
   41 00:426D -  -  -  -  		;
   42 00:426D -  -  -  -  _CRNewCommand:	
   43 00:426D DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:4270 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:4271 F2 A5 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:4274 -  -  -  -  		;
   47 00:4274 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:4276 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:4278 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:427A D2 96 42 -  		jp 		nc,_CRAlternateLets
   51 00:427D -  -  -  -  		;
   52 00:427D -  -  -  -  _CRDoCommand:		
   53 00:427D E6 7F 21 00 
              00 6F 29 11 
              0C 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:428F DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:4291 CD 59 40 -  		call 	JumpCode 					; call the routine.
   56 00:4294 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:4296 -  -  -  -  		;
   58 00:4296 -  -  -  -  		; 		Do CALL (HL)
   59 00:4296 -  -  -  -  		;
   60 00:4296 -  -  -  -  		;
   61 00:4296 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:4296 -  -  -  -  		;		
   63 00:4296 -  -  -  -  _CRAlternateLets:		
   64 00:4296 FE 83 -  -  		cp 		KWD_PLING
   65 00:4298 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:429A FE 84 -  -  		cp 		KWD_QMARK
   67 00:429C 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:429E FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42A0 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42A2 C3 51 43 -  		jp 		SyntaxError
   71 00:42A5 -  -  -  -  		;
   72 00:42A5 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42A5 -  -  -  -  		;
   74 00:42A5 -  -  -  -  _CRAssignmentHandler:		
   75 00:42A5 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42A7 D2 51 43 -  		jp 		nc,SyntaxError
   77 00:42AA -  -  -  -  _CRAssignmentLet:		
   78 00:42AA CD 9E 41 -  		call	Command_LET 				; do LET.
   79 00:42AD C3 6D 42 -  		jp 		_CRNewCommand
   80 00:42B0 -  -  -  -  
   81 00:42B0 -  -  -  -  ; ***************************************************************************************
   82 00:42B0 -  -  -  -  ;
   83 00:42B0 -  -  -  -  ;									Changes and Updates
   84 00:42B0 -  -  -  -  ;
   85 00:42B0 -  -  -  -  ; ***************************************************************************************
   86 00:42B0 -  -  -  -  ;
   87 00:42B0 -  -  -  -  ;		Date			Notes
   88 00:42B0 -  -  -  -  ;		==== 			=====
   89 00:42B0 -  -  -  -  ;
   90 00:42B0 -  -  -  -  ; ***************************************************************************************
   91 00:42B0 -  -  -  -  		
Listing for file "_build.asm"
   23 00:42B0 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42B0 -  -  -  -  ; ***************************************************************************************
    2 00:42B0 -  -  -  -  ; ***************************************************************************************
    3 00:42B0 -  -  -  -  ;
    4 00:42B0 -  -  -  -  ;		Name : 		stop.asm
    5 00:42B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42B0 -  -  -  -  ;		Reviewed :	No
    8 00:42B0 -  -  -  -  ;		Purpose :	Stop command
    9 00:42B0 -  -  -  -  ;
   10 00:42B0 -  -  -  -  ; ***************************************************************************************
   11 00:42B0 -  -  -  -  ; ***************************************************************************************
   12 00:42B0 -  -  -  -  
   13 00:42B0 -  -  -  -  ; ***************************************************************************************
   14 00:42B0 -  -  -  -  ;
   15 00:42B0 -  -  -  -  ;										STOP command
   16 00:42B0 -  -  -  -  ;
   17 00:42B0 -  -  -  -  ; ***************************************************************************************
   18 00:42B0 -  -  -  -  
   19 00:42B0 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42B0 3E 0D C3 F4 
              42 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42B5 -  -  -  -  
   22 00:42B5 -  -  -  -  ; ***************************************************************************************
   23 00:42B5 -  -  -  -  ;
   24 00:42B5 -  -  -  -  ;									Changes and Updates
   25 00:42B5 -  -  -  -  ;
   26 00:42B5 -  -  -  -  ; ***************************************************************************************
   27 00:42B5 -  -  -  -  ;
   28 00:42B5 -  -  -  -  ;		Date			Notes
   29 00:42B5 -  -  -  -  ;		==== 			=====
   30 00:42B5 -  -  -  -  ;
   31 00:42B5 -  -  -  -  ; ***************************************************************************************
   32 00:42B5 -  -  -  -  		
Listing for file "_build.asm"
   24 00:42B5 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:42B5 -  -  -  -  ; ***************************************************************************************
    2 00:42B5 -  -  -  -  ; ***************************************************************************************
    3 00:42B5 -  -  -  -  ;
    4 00:42B5 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:42B5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42B5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42B5 -  -  -  -  ;		Reviewed :	No
    8 00:42B5 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:42B5 -  -  -  -  ;
   10 00:42B5 -  -  -  -  ; ***************************************************************************************
   11 00:42B5 -  -  -  -  ; ***************************************************************************************
   12 00:42B5 -  -  -  -  
   13 00:42B5 -  -  -  -  ; ***************************************************************************************
   14 00:42B5 -  -  -  -  ;
   15 00:42B5 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:42B5 -  -  -  -  ;
   17 00:42B5 -  -  -  -  ; ***************************************************************************************
   18 00:42B5 -  -  -  -  
   19 00:42B5 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:42B5             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:42B5             		inc 	ix
   22 00:42B5             		cp 		ch 							; exit if matches
   23 00:42B5             		ret 	z
   24 00:42B5             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:42B5             		jp 		ErrorHandler
   26 00:42B5             #endmacro
   27 00:42B5 -  -  -  -  
   28 00:42B5 -  -  -  -  CheckLeftBracket:
   29 00:42B5 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 F4 
              42 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:42C2 -  -  -  -  
   31 00:42C2 -  -  -  -  CheckRightBracket:
   32 00:42C2 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 F4 
              42 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:42CF -  -  -  -  
   34 00:42CF -  -  -  -  CheckDollar:
   35 00:42CF DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 F4 
              42 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:42DC -  -  -  -  		
   37 00:42DC -  -  -  -  CheckComma:
   38 00:42DC DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 F4 
              42 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:42E9 -  -  -  -  
   40 00:42E9 -  -  -  -  ; ***************************************************************************************
   41 00:42E9 -  -  -  -  ;
   42 00:42E9 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:42E9 -  -  -  -  ;
   44 00:42E9 -  -  -  -  ; ***************************************************************************************
   45 00:42E9 -  -  -  -  
   46 00:42E9 -  -  -  -  CheckNextA:
   47 00:42E9 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:42EC DD 23 -  -  		inc 	ix 							; skip character
   49 00:42EE C8 -  -  -  		ret 	z 							; yes, okay
   50 00:42EF 3E 0E C3 F4 
              42 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:42F4 -  -  -  -  		
   52 00:42F4 -  -  -  -  ; ***************************************************************************************
   53 00:42F4 -  -  -  -  ;
   54 00:42F4 -  -  -  -  ;									Changes and Updates
   55 00:42F4 -  -  -  -  ;
   56 00:42F4 -  -  -  -  ; ***************************************************************************************
   57 00:42F4 -  -  -  -  ;
   58 00:42F4 -  -  -  -  ;		Date			Notes
   59 00:42F4 -  -  -  -  ;		==== 			=====
   60 00:42F4 -  -  -  -  ;
   61 00:42F4 -  -  -  -  ; ***************************************************************************************
   62 00:42F4 -  -  -  -  		
Listing for file "_build.asm"
   25 00:42F4 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:42F4 -  -  -  -  ; ***************************************************************************************
    2 00:42F4 -  -  -  -  ; ***************************************************************************************
    3 00:42F4 -  -  -  -  ;
    4 00:42F4 -  -  -  -  ;		Name : 		errors.asm
    5 00:42F4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42F4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42F4 -  -  -  -  ;		Reviewed :	No
    8 00:42F4 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:42F4 -  -  -  -  ;
   10 00:42F4 -  -  -  -  ; ***************************************************************************************
   11 00:42F4 -  -  -  -  ; ***************************************************************************************
   12 00:42F4 -  -  -  -  
   13 00:42F4 -  -  -  -  ; ***************************************************************************************
   14 00:42F4 -  -  -  -  ;
   15 00:42F4 -  -  -  -  ;								Error handler, message A 
   16 00:42F4 -  -  -  -  ;
   17 00:42F4 -  -  -  -  ; ***************************************************************************************
   18 00:42F4 -  -  -  -  
   19 00:42F4 -  -  -  -  ErrorHandler:
   20 00:42F4 F5 -  -  -  		push 	af 						; save error ID
   21 00:42F5 -  -  -  -  
   22 00:42F5 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:42F8 6F -  -  -  		ld 		l,a
   24 00:42F9 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:42FA 29 -  -  -  		add 	hl,hl 		
   26 00:42FB 11 D1 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:42FE 19 -  -  -  		add 	hl,de
   28 00:42FF 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4303 CD 98 47 -  		call 	PrintStringAtHL
   30 00:4306 -  -  -  -  		;
   31 00:4306 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4307 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4308 28 28 -  -  		jr 		z,_EHExit
   34 00:430A -  -  -  -  		;
   35 00:430A DD 2A 51 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:430E DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4311 B7 -  -  -  		or 		a
   38 00:4312 28 1E -  -  		jr 		z,_EHExit
   39 00:4314 -  -  -  -  
   40 00:4314 21 38 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4317 CD 98 47 -  		call 	PrintStringAtHL 
   42 00:431A -  -  -  -  		
   43 00:431A D9 -  -  -  		exx								; HL'HL = line number
   44 00:431B 21 00 00 -  		ld 		hl,$0000 		
   45 00:431E D9 -  -  -  		exx 
   46 00:431F DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4322 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4325 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4327 01 93 40 -  		ld 		bc,ConvertBuffer
   50 00:432A CD 42 4C -  		call 	Int32ToString
   51 00:432D C5 -  -  -  		push 	bc
   52 00:432E E1 -  -  -  		pop 	hl
   53 00:432F CD 98 47 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4332 -  -  -  -  _EHExit:		
   55 00:4332 CD AC 4C -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4335 C3 17 40 -  		jp 		WarmStart
   57 00:4338 -  -  -  -  
   58 00:4338 -  -  -  -  _EHAtText:
   59 00:4338 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4342 -  -  -  -  
   61 00:4342 -  -  -  -  NotImplemented:
   62 00:4342 3E 05 C3 F4 
              42 -  -  -  		ERR_DISABLED
   63 00:4347 -  -  -  -  TypeMismatch:
   64 00:4347 3E 02 C3 F4 
              42 -  -  -  		ERR_BADTYPE
   65 00:434C -  -  -  -  BadValue:
   66 00:434C 3E 03 C3 F4 
              42 -  -  -  		ERR_BADVALUE
   67 00:4351 -  -  -  -  SyntaxError:
   68 00:4351 3E 0E C3 F4 
              42 -  -  -  		ERR_SYNTAX
   69 00:4356 -  -  -  -  						
   70 00:4356 -  -  -  -  ; ***************************************************************************************
   71 00:4356 -  -  -  -  ;
   72 00:4356 -  -  -  -  ;									Changes and Updates
   73 00:4356 -  -  -  -  ;
   74 00:4356 -  -  -  -  ; ***************************************************************************************
   75 00:4356 -  -  -  -  ;
   76 00:4356 -  -  -  -  ;		Date			Notes
   77 00:4356 -  -  -  -  ;		==== 			=====
   78 00:4356 -  -  -  -  ;
   79 00:4356 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:4356 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4356 -  -  -  -  ; ***************************************************************************************
    2 00:4356 -  -  -  -  ; ***************************************************************************************
    3 00:4356 -  -  -  -  ;
    4 00:4356 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4356 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4356 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4356 -  -  -  -  ;		Reviewed :	No
    8 00:4356 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4356 -  -  -  -  ;
   10 00:4356 -  -  -  -  ; ***************************************************************************************
   11 00:4356 -  -  -  -  ; ***************************************************************************************
   12 00:4356 -  -  -  -  
   13 00:4356 -  -  -  -  ; ***************************************************************************************
   14 00:4356 -  -  -  -  ;
   15 00:4356 -  -  -  -  ; 									Addition
   16 00:4356 -  -  -  -  ;
   17 00:4356 -  -  -  -  ; ***************************************************************************************
   18 00:4356 -  -  -  -  
   19 00:4356 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4356 CD 49 44 78 
              B1 C2 47 43 
              C3 CF 4B -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4361 -  -  -  -  
   22 00:4361 -  -  -  -  ; ***************************************************************************************
   23 00:4361 -  -  -  -  ;
   24 00:4361 -  -  -  -  ; 									Subtraction
   25 00:4361 -  -  -  -  ;
   26 00:4361 -  -  -  -  ; ***************************************************************************************
   27 00:4361 -  -  -  -  
   28 00:4361 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4361 CD 49 44 78 
              B1 C2 47 43 
              C3 D5 4B -  		IntegerDispatch(Int32Subtract)
   30 00:436C -  -  -  -  
   31 00:436C -  -  -  -  ; ***************************************************************************************
   32 00:436C -  -  -  -  ;
   33 00:436C -  -  -  -  ; 									  Multiply
   34 00:436C -  -  -  -  ;
   35 00:436C -  -  -  -  ; ***************************************************************************************
   36 00:436C -  -  -  -  
   37 00:436C -  -  -  -  ALUMultiply: 	;; [*]
   38 00:436C CD 49 44 78 
              B1 C2 47 43 
              C3 99 4B -  		IntegerDispatch(Int32Multiply)
   39 00:4377 -  -  -  -  
   40 00:4377 -  -  -  -  ; ***************************************************************************************
   41 00:4377 -  -  -  -  ;
   42 00:4377 -  -  -  -  ; 									  Divide
   43 00:4377 -  -  -  -  ;
   44 00:4377 -  -  -  -  ; ***************************************************************************************
   45 00:4377 -  -  -  -  
   46 00:4377 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4377 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4377 CD 49 44 78 
              B1 C2 47 43 
              C3 AA 4A -  		IntegerDispatch(Int32SDivide)
   49 00:4382 -  -  -  -  
   50 00:4382 -  -  -  -  ; ***************************************************************************************
   51 00:4382 -  -  -  -  ;
   52 00:4382 -  -  -  -  ; 									  Modulus
   53 00:4382 -  -  -  -  ;
   54 00:4382 -  -  -  -  ; ***************************************************************************************
   55 00:4382 -  -  -  -  
   56 00:4382 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4382 CD 49 44 78 
              B1 C2 47 43 
              C3 AD 4A -  		IntegerDispatch(Int32Modulus)
   58 00:438D -  -  -  -  
   59 00:438D -  -  -  -  ; ***************************************************************************************
   60 00:438D -  -  -  -  ;
   61 00:438D -  -  -  -  ; 									  Logical
   62 00:438D -  -  -  -  ;
   63 00:438D -  -  -  -  ; ***************************************************************************************
   64 00:438D -  -  -  -  
   65 00:438D -  -  -  -  ALUAnd: 		;; [and]
   66 00:438D CD 49 44 78 
              B1 C2 47 43 
              C3 DD 4B -  		IntegerDispatch(Int32And)
   67 00:4398 -  -  -  -  
   68 00:4398 -  -  -  -  ALUOr: 			;; [or]
   69 00:4398 CD 49 44 78 
              B1 C2 47 43 
              C3 E9 4B -  		IntegerDispatch(Int32Or)
   70 00:43A3 -  -  -  -  
   71 00:43A3 -  -  -  -  ALUXor: 		;; [eor]
   72 00:43A3 CD 49 44 78 
              B1 C2 47 43 
              C3 F5 4B -  		IntegerDispatch(Int32Xor)
   73 00:43AE -  -  -  -  
   74 00:43AE -  -  -  -  ; ***************************************************************************************
   75 00:43AE -  -  -  -  ;
   76 00:43AE -  -  -  -  ;									Changes and Updates
   77 00:43AE -  -  -  -  ;
   78 00:43AE -  -  -  -  ; ***************************************************************************************
   79 00:43AE -  -  -  -  ;
   80 00:43AE -  -  -  -  ;		Date			Notes
   81 00:43AE -  -  -  -  ;		==== 			=====
   82 00:43AE -  -  -  -  ;
   83 00:43AE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:43AE -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:43AE -  -  -  -  ; ***************************************************************************************
    2 00:43AE -  -  -  -  ; ***************************************************************************************
    3 00:43AE -  -  -  -  ;
    4 00:43AE -  -  -  -  ;		Name : 		binrefs.asm
    5 00:43AE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43AE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43AE -  -  -  -  ;		Reviewed :	No
    8 00:43AE -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:43AE -  -  -  -  ;
   10 00:43AE -  -  -  -  ; ***************************************************************************************
   11 00:43AE -  -  -  -  ; ***************************************************************************************
   12 00:43AE -  -  -  -  
   13 00:43AE -  -  -  -  ; ***************************************************************************************
   14 00:43AE -  -  -  -  ;
   15 00:43AE -  -  -  -  ; 									<l> <op> <r>
   16 00:43AE -  -  -  -  ;
   17 00:43AE -  -  -  -  ; ***************************************************************************************
   18 00:43AE -  -  -  -  
   19 00:43AE -  -  -  -  ALULongReference:			;; [!]
   20 00:43AE CD BC 43 -  		call 	BRGetAddress 				; calculate address
   21 00:43B1 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:43B3 CB F9 -  -  		set 	CIsReference,c
   23 00:43B5 C9 -  -  -  		ret
   24 00:43B6 -  -  -  -  
   25 00:43B6 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:43B6 CD AE 43 -  		call 	ALULongReference
   27 00:43B9 CB F1 -  -  		set 	CIsByteReference,c
   28 00:43BB C9 -  -  -  		ret
   29 00:43BC -  -  -  -  
   30 00:43BC -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:43BC CD 49 44 78 
              B1 C2 47 43 
              C3 C7 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:43C7 -  -  -  -  _BRGAMain:		
   33 00:43C7 CD CF 4B -  		call 	Int32Add 					; address in HL'HL
   34 00:43CA CD 32 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:43CD C9 -  -  -  		ret
   36 00:43CE -  -  -  -  
   37 00:43CE -  -  -  -  ; ***************************************************************************************
   38 00:43CE -  -  -  -  ;
   39 00:43CE -  -  -  -  ;									Changes and Updates
   40 00:43CE -  -  -  -  ;
   41 00:43CE -  -  -  -  ; ***************************************************************************************
   42 00:43CE -  -  -  -  ;
   43 00:43CE -  -  -  -  ;		Date			Notes
   44 00:43CE -  -  -  -  ;		==== 			=====
   45 00:43CE -  -  -  -  ;
   46 00:43CE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43CE -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:43CE -  -  -  -  ; ***************************************************************************************
    2 00:43CE -  -  -  -  ; ***************************************************************************************
    3 00:43CE -  -  -  -  ;
    4 00:43CE -  -  -  -  ;		Name : 		compare.asm
    5 00:43CE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43CE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43CE -  -  -  -  ;		Reviewed :	No
    8 00:43CE -  -  -  -  ;		Purpose :	Comparison code
    9 00:43CE -  -  -  -  ;
   10 00:43CE -  -  -  -  ; ***************************************************************************************
   11 00:43CE -  -  -  -  ; ***************************************************************************************
   12 00:43CE -  -  -  -  
   13 00:43CE -  -  -  -  #macro compare_equals(n)
   14 00:43CE             		call 	CompareBaseCode
   15 00:43CE             		cp 		n
   16 00:43CE             		jr 		z,UnaryInt32True
   17 00:43CE             		jr 		UnaryInt32False
   18 00:43CE             #endmacro
   19 00:43CE -  -  -  -  
   20 00:43CE -  -  -  -  #macro compare_not_equals(n)
   21 00:43CE             		call 	CompareBaseCode
   22 00:43CE             		cp 		n
   23 00:43CE             		jr 		nz,UnaryInt32True
   24 00:43CE             		jr 		UnaryInt32False
   25 00:43CE             #endmacro
   26 00:43CE -  -  -  -  
   27 00:43CE -  -  -  -  ; ***************************************************************************************
   28 00:43CE -  -  -  -  ;
   29 00:43CE -  -  -  -  ; 								Return True/False
   30 00:43CE -  -  -  -  ;
   31 00:43CE -  -  -  -  ; ***************************************************************************************
   32 00:43CE -  -  -  -  
   33 00:43CE -  -  -  -  UnaryInt32True:	;; [true]
   34 00:43CE 3E FF -  -  		ld 		a,255
   35 00:43D0 18 01 -  -  		jr 		_Int32Logical
   36 00:43D2 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:43D2 AF -  -  -  		xor 	a
   38 00:43D3 -  -  -  -  _Int32Logical:
   39 00:43D3 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:43D4 67 -  -  -  		ld 		h,a
   41 00:43D5 D9 -  -  -  		exx
   42 00:43D6 6F -  -  -  		ld 		l,a
   43 00:43D7 67 -  -  -  		ld 		h,a
   44 00:43D8 D9 -  -  -  		exx
   45 00:43D9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:43DB C9 -  -  -  		ret
   47 00:43DC -  -  -  -  
   48 00:43DC -  -  -  -  ; ***************************************************************************************
   49 00:43DC -  -  -  -  ;
   50 00:43DC -  -  -  -  ; 										> = < (compare == value)
   51 00:43DC -  -  -  -  ;
   52 00:43DC -  -  -  -  ; ***************************************************************************************
   53 00:43DC -  -  -  -  
   54 00:43DC -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:43DC CD 12 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:43E5 -  -  -  -  
   57 00:43E5 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:43E5 CD 12 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:43EE -  -  -  -  
   60 00:43EE -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:43EE CD 12 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:43F7 -  -  -  -  
   63 00:43F7 -  -  -  -  ; ***************************************************************************************
   64 00:43F7 -  -  -  -  ;
   65 00:43F7 -  -  -  -  ; 										> = < (compare <> value)
   66 00:43F7 -  -  -  -  ;
   67 00:43F7 -  -  -  -  ; ***************************************************************************************
   68 00:43F7 -  -  -  -  
   69 00:43F7 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:43F7 CD 12 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4400 -  -  -  -  
   72 00:4400 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4400 CD 12 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4409 -  -  -  -  
   75 00:4409 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4409 CD 12 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4412 -  -  -  -  
   78 00:4412 -  -  -  -  ; ***************************************************************************************
   79 00:4412 -  -  -  -  ;
   80 00:4412 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4412 -  -  -  -  ;
   82 00:4412 -  -  -  -  ; ***************************************************************************************
   83 00:4412 -  -  -  -  
   84 00:4412 -  -  -  -  CompareBaseCode:
   85 00:4412 CD 49 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4415 -  -  -  -  
   87 00:4415 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4416 A1 -  -  -  		and 	c
   89 00:4417 CB 47 -  -  		bit 	CIsString,a 
   90 00:4419 C2 28 44 -  		jp 		nz,StringCompare
   91 00:441C -  -  -  -  
   92 00:441C 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:441D B1 -  -  -  		or 		c
   94 00:441E CB 47 -  -  		bit 	CIsString,a 
   95 00:4420 CA 08 4C -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4423 -  -  -  -  
   97 00:4423 3E 02 C3 F4 
              42 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4428 -  -  -  -  ;
   99 00:4428 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4428 -  -  -  -  ;
  101 00:4428 -  -  -  -  StringCompare:
  102 00:4428 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4429 BE -  -  -  		cp 		(hl)
  104 00:442A 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:442C 20 08 -  -  		jr 		nz,_SCLess
  106 00:442E 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:442F 23 -  -  -  		inc 	hl
  108 00:4430 FE 20 -  -  		cp 		' '
  109 00:4432 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4434 AF -  -  -  		xor 	a 							; return 0.
  111 00:4435 C9 -  -  -  		ret
  112 00:4436 -  -  -  -  
  113 00:4436 -  -  -  -  _SCLess:
  114 00:4436 3E FF -  -  		ld 		a,$FF
  115 00:4438 C9 -  -  -  		ret
  116 00:4439 -  -  -  -  _SCGreater:
  117 00:4439 3E 01 -  -  		ld 		a,1
  118 00:443B C9 -  -  -  		ret
  119 00:443C -  -  -  -  
  120 00:443C 3E 0F C3 F4 
              42 -  -  -  		ERR_TODO()
  121 00:4441 -  -  -  -  
  122 00:4441 -  -  -  -  ; ***************************************************************************************
  123 00:4441 -  -  -  -  ;
  124 00:4441 -  -  -  -  ;									Changes and Updates
  125 00:4441 -  -  -  -  ;
  126 00:4441 -  -  -  -  ; ***************************************************************************************
  127 00:4441 -  -  -  -  ;
  128 00:4441 -  -  -  -  ;		Date			Notes
  129 00:4441 -  -  -  -  ;		==== 			=====
  130 00:4441 -  -  -  -  ;
  131 00:4441 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:4441 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:4441 -  -  -  -  ; ***************************************************************************************
    2 00:4441 -  -  -  -  ; ***************************************************************************************
    3 00:4441 -  -  -  -  ;
    4 00:4441 -  -  -  -  ;		Name : 		utility.asm
    5 00:4441 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4441 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4441 -  -  -  -  ;		Reviewed :	No
    8 00:4441 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:4441 -  -  -  -  ;
   10 00:4441 -  -  -  -  ; ***************************************************************************************
   11 00:4441 -  -  -  -  ; ***************************************************************************************
   12 00:4441 -  -  -  -  
   13 00:4441 -  -  -  -  ; ***************************************************************************************
   14 00:4441 -  -  -  -  ;
   15 00:4441 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:4441 -  -  -  -  ;
   17 00:4441 -  -  -  -  ; ***************************************************************************************
   18 00:4441 -  -  -  -  
   19 00:4441 -  -  -  -  SwapHLDE:
   20 00:4441 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4442 D9 -  -  -  			exx
   22 00:4443 EB -  -  -  			ex 		de,hl
   23 00:4444 D9 -  -  -  			exx
   24 00:4445 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4446 41 -  -  -  			ld 		b,c
   26 00:4447 4F -  -  -  			ld 		c,a
   27 00:4448 C9 -  -  -  			ret
   28 00:4449 -  -  -  -  
   29 00:4449 -  -  -  -  ; ***************************************************************************************
   30 00:4449 -  -  -  -  ;
   31 00:4449 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:4449 -  -  -  -  ;
   33 00:4449 -  -  -  -  ; ***************************************************************************************
   34 00:4449 -  -  -  -  
   35 00:4449 -  -  -  -  DereferenceBoth:
   36 00:4449 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:444B C4 04 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:444E CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:4450 C8 -  -  -  			ret 	z
   40 00:4451 CD 41 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:4454 CD 04 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4457 CD 41 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:445A C9 -  -  -  			ret
   44 00:445B -  -  -  -  
   45 00:445B -  -  -  -  ; ***************************************************************************************
   46 00:445B -  -  -  -  ;
   47 00:445B -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:445B -  -  -  -  ;
   49 00:445B -  -  -  -  ; ***************************************************************************************
   50 00:445B -  -  -  -  
   51 00:445B -  -  -  -  NegateHLHL:	
   52 00:445B CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:445D C2 47 43 -  			jp 		nz,TypeMismatch
   54 00:4460 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4462 C4 04 45 -  			call 	nz,Dereference 			; if required.
   56 00:4465 CD 2F 4C -  			call 	Int32Negate
   57 00:4468 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:4469 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4469 -  -  -  -  ; ***************************************************************************************
    2 00:4469 -  -  -  -  ; ***************************************************************************************
    3 00:4469 -  -  -  -  ;
    4 00:4469 -  -  -  -  ;		Name : 		expression.asm
    5 00:4469 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4469 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4469 -  -  -  -  ;		Reviewed :	None
    8 00:4469 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4469 -  -  -  -  ;
   10 00:4469 -  -  -  -  ; ***************************************************************************************
   11 00:4469 -  -  -  -  ; ***************************************************************************************
   12 00:4469 -  -  -  -  
   13 00:4469 -  -  -  -  ; ***************************************************************************************
   14 00:4469 -  -  -  -  ;
   15 00:4469 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4469 -  -  -  -  ;
   17 00:4469 -  -  -  -  ; ***************************************************************************************
   18 00:4469 -  -  -  -  
   19 00:4469 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4469 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:446A -  -  -  -  EvaluateAtPrecedence:
   22 00:446A F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:446B -  -  -  -  		;
   24 00:446B -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:446B -  -  -  -  		;
   26 00:446B CD 34 45 -  		call 	EvaluateTerm 				; get term
   27 00:446E -  -  -  -  		;
   28 00:446E -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:446E -  -  -  -  		;
   30 00:446E D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:446F -  -  -  -  _EAPLoop:
   32 00:446F DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4472 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:4474 D8 -  -  -  		ret 	c
   35 00:4475 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4477 D0 -  -  -  		ret 	nc
   37 00:4478 -  -  -  -  		;
   38 00:4478 -  -  -  -  		; 		Get the precedence.
   39 00:4478 -  -  -  -  		;
   40 00:4478 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:4479 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:447B 21 C0 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:447E B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:447F 6F -  -  -  		ld 		l,a
   45 00:4480 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4481 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4482 -  -  -  -  		;
   48 00:4482 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4482 -  -  -  -  		;
   50 00:4482 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4483 BB -  -  -  		cp 		e
   52 00:4484 D0 -  -  -  		ret 	nc
   53 00:4485 -  -  -  -  
   54 00:4485 -  -  -  -  		;
   55 00:4485 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4485 -  -  -  -  		;
   57 00:4485 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4486 -  -  -  -  		;
   59 00:4486 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:4489 F5 -  -  -  		push 	af
   61 00:448A -  -  -  -  		;
   62 00:448A C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:448B D9 -  -  -  		exx 								; save HL'
   64 00:448C E5 -  -  -  		push 	hl
   65 00:448D D9 -  -  -  		exx 								
   66 00:448E E5 -  -  -  		push 	hl 							; save HL
   67 00:448F -  -  -  -  		;
   68 00:448F DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4491 -  -  -  -  		;
   70 00:4491 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4491 -  -  -  -  		;
   72 00:4491 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4492 CD 6A 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4495 -  -  -  -  		;
   75 00:4495 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4495 -  -  -  -  		;
   77 00:4495 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4496 -  -  -  -  
   79 00:4496 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4497 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4498 D9 -  -  -  		exx
   82 00:4499 EB -  -  -  		ex 		de,hl
   83 00:449A E1 -  -  -  		pop 	hl
   84 00:449B D9 -  -  -  		exx
   85 00:449C C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:449D 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:449E -  -  -  -  		;
   88 00:449E -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:449E -  -  -  -  		; 		is in B (type) DE'DE
   90 00:449E -  -  -  -  		;
   91 00:449E F1 -  -  -  		pop 	af 							; get operator in A
   92 00:449F -  -  -  -  		;
   93 00:449F -  -  -  -  		; 		Call the binary operator in A.
   94 00:449F -  -  -  -  		;
   95 00:449F D5 -  -  -  		push 	de
   96 00:44A0 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:44A1 E6 7F 21 00 
              00 6F 29 11 
              0C 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:44B3 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:44B4 D1 -  -  -  		pop 	de 							; restore DE
  100 00:44B5 CD 59 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:44B8 -  -  -  -  		;
  102 00:44B8 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:44B9 -  -  -  -  		;
  104 00:44B9 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:44BB -  -  -  -  
  106 00:44BB -  -  -  -  ; ***************************************************************************************
  107 00:44BB -  -  -  -  ;
  108 00:44BB -  -  -  -  ;									Changes and Updates
  109 00:44BB -  -  -  -  ;
  110 00:44BB -  -  -  -  ; ***************************************************************************************
  111 00:44BB -  -  -  -  ;
  112 00:44BB -  -  -  -  ;		Date			Notes
  113 00:44BB -  -  -  -  ;		==== 			=====
  114 00:44BB -  -  -  -  ;
  115 00:44BB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:44BB -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:44BB -  -  -  -  ; ***************************************************************************************
    2 00:44BB -  -  -  -  ; ***************************************************************************************
    3 00:44BB -  -  -  -  ;
    4 00:44BB -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:44BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44BB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44BB -  -  -  -  ;		Reviewed :	No
    8 00:44BB -  -  -  -  ;		Purpose :	Expression support functions
    9 00:44BB -  -  -  -  ;
   10 00:44BB -  -  -  -  ; ***************************************************************************************
   11 00:44BB -  -  -  -  ; ***************************************************************************************
   12 00:44BB -  -  -  -  
   13 00:44BB -  -  -  -  ; ***************************************************************************************
   14 00:44BB -  -  -  -  ;
   15 00:44BB -  -  -  -  ; 								Evaluate an integer term
   16 00:44BB -  -  -  -  ;
   17 00:44BB -  -  -  -  ; ***************************************************************************************
   18 00:44BB -  -  -  -  
   19 00:44BB -  -  -  -  EvaluateIntegerTerm:
   20 00:44BB CD 34 45 -  		call 	EvaluateTerm
   21 00:44BE CD 04 45 -  		call 	DeReference
   22 00:44C1 CB 41 -  -  		bit 	CIsString,c
   23 00:44C3 C8 -  -  -  		ret 	z
   24 00:44C4 C3 47 43 -  		jp 		TypeMismatch
   25 00:44C7 -  -  -  -  
   26 00:44C7 -  -  -  -  ; ***************************************************************************************
   27 00:44C7 -  -  -  -  ;
   28 00:44C7 -  -  -  -  ; 								Evaluate a string term
   29 00:44C7 -  -  -  -  ;
   30 00:44C7 -  -  -  -  ; ***************************************************************************************
   31 00:44C7 -  -  -  -  
   32 00:44C7 -  -  -  -  EvaluateStringTerm:
   33 00:44C7 CD 34 45 -  		call 	EvaluateTerm
   34 00:44CA CD 04 45 -  		call 	DeReference
   35 00:44CD CB 41 -  -  		bit 	CIsString,c
   36 00:44CF C0 -  -  -  		ret 	nz
   37 00:44D0 C3 47 43 -  		jp 		TypeMismatch
   38 00:44D3 -  -  -  -  
   39 00:44D3 -  -  -  -  ; ***************************************************************************************
   40 00:44D3 -  -  -  -  ;
   41 00:44D3 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:44D3 -  -  -  -  ;
   43 00:44D3 -  -  -  -  ; ***************************************************************************************
   44 00:44D3 -  -  -  -  
   45 00:44D3 -  -  -  -  EvaluateValue:
   46 00:44D3 CD 69 44 -  		call 	EvaluateAtPrecedence0
   47 00:44D6 C3 04 45 -  		jp 		Dereference
   48 00:44D9 -  -  -  -  
   49 00:44D9 -  -  -  -  ; ***************************************************************************************
   50 00:44D9 -  -  -  -  ;
   51 00:44D9 -  -  -  -  ; 									Evaluate a number
   52 00:44D9 -  -  -  -  ;
   53 00:44D9 -  -  -  -  ; ***************************************************************************************
   54 00:44D9 -  -  -  -  
   55 00:44D9 -  -  -  -  EvaluateInteger:
   56 00:44D9 CD D3 44 -  		call 	EvaluateValue
   57 00:44DC CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:44DE C8 -  -  -  		ret 	z
   59 00:44DF C3 47 43 -  		jp 		TypeMismatch
   60 00:44E2 -  -  -  -  
   61 00:44E2 -  -  -  -  ; ***************************************************************************************
   62 00:44E2 -  -  -  -  ;
   63 00:44E2 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:44E2 -  -  -  -  ;
   65 00:44E2 -  -  -  -  ; ***************************************************************************************
   66 00:44E2 -  -  -  -  
   67 00:44E2 -  -  -  -  Evaluate8BitInteger:
   68 00:44E2 CD D9 44 -  		call 	EvaluateInteger
   69 00:44E5 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:44E6 7C -  -  -  		ld 		a,h
   71 00:44E7 B5 -  -  -  		or 		l
   72 00:44E8 D9 -  -  -  		exx 	
   73 00:44E9 B4 -  -  -  		or 		h
   74 00:44EA C2 4C 43 -  		jp 		nz,BadValue
   75 00:44ED 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:44EE C9 -  -  -  		ret
   77 00:44EF -  -  -  -  		
   78 00:44EF -  -  -  -  ; ***************************************************************************************
   79 00:44EF -  -  -  -  ;
   80 00:44EF -  -  -  -  ; 									Evaluate a string
   81 00:44EF -  -  -  -  ;
   82 00:44EF -  -  -  -  ; ***************************************************************************************
   83 00:44EF -  -  -  -  
   84 00:44EF -  -  -  -  EvaluateStringOnly:
   85 00:44EF CD D3 44 -  		call 	EvaluateValue
   86 00:44F2 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:44F4 CA 47 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:44F7 C9 -  -  -  		ret
   89 00:44F8 -  -  -  -  
   90 00:44F8 -  -  -  -  ; ***************************************************************************************
   91 00:44F8 -  -  -  -  ;
   92 00:44F8 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:44F8 -  -  -  -  ;
   94 00:44F8 -  -  -  -  ; ***************************************************************************************
   95 00:44F8 -  -  -  -  
   96 00:44F8 -  -  -  -  Return8BitConstant:
   97 00:44F8 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:44FB 6F -  -  -  		ld 		l,a
   99 00:44FC -  -  -  -  Return16BitConstant:
  100 00:44FC D9 -  -  -  		exx 								; clear HL'
  101 00:44FD 21 00 00 -  		ld 		hl,0
  102 00:4500 D9 -  -  -  		exx
  103 00:4501 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4503 C9 -  -  -  		ret
  105 00:4504 -  -  -  -  
  106 00:4504 -  -  -  -  ; ***************************************************************************************
  107 00:4504 -  -  -  -  ;
  108 00:4504 -  -  -  -  ;									Changes and Updates
  109 00:4504 -  -  -  -  ;
  110 00:4504 -  -  -  -  ; ***************************************************************************************
  111 00:4504 -  -  -  -  ;
  112 00:4504 -  -  -  -  ;		Date			Notes
  113 00:4504 -  -  -  -  ;		==== 			=====
  114 00:4504 -  -  -  -  ;
  115 00:4504 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:4504 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4504 -  -  -  -  ; ***************************************************************************************
    2 00:4504 -  -  -  -  ; ***************************************************************************************
    3 00:4504 -  -  -  -  ;
    4 00:4504 -  -  -  -  ;		Name : 		reference.asm
    5 00:4504 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4504 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4504 -  -  -  -  ;		Reviewed :	No
    8 00:4504 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4504 -  -  -  -  ;
   10 00:4504 -  -  -  -  ; ***************************************************************************************
   11 00:4504 -  -  -  -  ; ***************************************************************************************
   12 00:4504 -  -  -  -  
   13 00:4504 -  -  -  -  ; ***************************************************************************************
   14 00:4504 -  -  -  -  ;
   15 00:4504 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4504 -  -  -  -  ;
   17 00:4504 -  -  -  -  ; ***************************************************************************************
   18 00:4504 -  -  -  -  
   19 00:4504 -  -  -  -  Dereference:
   20 00:4504 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4506 C8 -  -  -  		ret 	z
   22 00:4507 -  -  -  -  
   23 00:4507 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4509 -  -  -  -  		
   25 00:4509 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:450B 20 20 -  -  		jr 		nz,_DRInternal
   27 00:450D -  -  -  -  
   28 00:450D CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:450F 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4511 -  -  -  -  
   31 00:4511 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4512 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4516 D9 -  -  -  		exx
   34 00:4517 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4518 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4519 23 -  -  -  		inc  	hl
   37 00:451A 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:451E D9 -  -  -  		exx 								; fix back
   39 00:451F C9 -  -  -  		ret
   40 00:4520 -  -  -  -  
   41 00:4520 -  -  -  -  _DeRefByte:		
   42 00:4520 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4521 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4524 6F -  -  -  		ld	 	l,a
   45 00:4525 D9 -  -  -  		exx
   46 00:4526 21 00 00 -  		ld 		hl,$0000
   47 00:4529 D9 -  -  -  		exx
   48 00:452A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:452C C9 -  -  -  		ret
   50 00:452D -  -  -  -  
   51 00:452D -  -  -  -  _DRInternal:
   52 00:452D 3E 05 C3 F4 
              42 -  -  -  		ERR_DISABLED
   53 00:4532 -  -  -  -  
   54 00:4532 -  -  -  -  ; ***************************************************************************************
   55 00:4532 -  -  -  -  ;
   56 00:4532 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4532 -  -  -  -  ;
   58 00:4532 -  -  -  -  ; ***************************************************************************************
   59 00:4532 -  -  -  -  
   60 00:4532 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4532 -  -  -  -  		#ifdef EZ80
   62 00:4532             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4532             		exx
   64 00:4532             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4532             		ld 		hl,$0000 					; zero HL'
   66 00:4532             		exx
   67 00:4532             		ld 		hl,(AConvert) 				; load UHL
   68 00:4532             		#endif
   69 00:4532 C9 -  -  -  		ret
   70 00:4533 -  -  -  -  
   71 00:4533 -  -  -  -  ; ***************************************************************************************
   72 00:4533 -  -  -  -  ;
   73 00:4533 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4533 -  -  -  -  ;
   75 00:4533 -  -  -  -  ; ***************************************************************************************
   76 00:4533 -  -  -  -  
   77 00:4533 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4533 -  -  -  -  		#ifdef EZ80
   79 00:4533             		ld 		(AConvert),hl
   80 00:4533             		ld 		hl,$0000
   81 00:4533             		ld 		(AConvert+3),hl
   82 00:4533             		exx
   83 00:4533             		ld 		hl,(AConvert+2)
   84 00:4533             		exx
   85 00:4533             		xor 	a
   86 00:4533             		ld 		(AConvert+2),a
   87 00:4533             		ld 		hl,(AConvert)
   88 00:4533             		#endif
   89 00:4533 C9 -  -  -  		ret
   90 00:4534 -  -  -  -  
   91 00:4534 -  -  -  -  ; ***************************************************************************************
   92 00:4534 -  -  -  -  ;
   93 00:4534 -  -  -  -  ;									Changes and Updates
   94 00:4534 -  -  -  -  ;
   95 00:4534 -  -  -  -  ; ***************************************************************************************
   96 00:4534 -  -  -  -  ;
   97 00:4534 -  -  -  -  ;		Date			Notes
   98 00:4534 -  -  -  -  ;		==== 			=====
   99 00:4534 -  -  -  -  ;
  100 00:4534 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:4534 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4534 -  -  -  -  ; ***************************************************************************************
    2 00:4534 -  -  -  -  ; ***************************************************************************************
    3 00:4534 -  -  -  -  ;
    4 00:4534 -  -  -  -  ;		Name : 		term.asm
    5 00:4534 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4534 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4534 -  -  -  -  ;		Reviewed :	No
    8 00:4534 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4534 -  -  -  -  ;
   10 00:4534 -  -  -  -  ; ***************************************************************************************
   11 00:4534 -  -  -  -  ; ***************************************************************************************
   12 00:4534 -  -  -  -  
   13 00:4534 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4534             		add_hlhl_16
   15 00:4534             		exx
   16 00:4534             		adc_hlhl_16
   17 00:4534             		exx
   18 00:4534             #endmacro
   19 00:4534 -  -  -  -  
   20 00:4534 -  -  -  -  ; ***************************************************************************************
   21 00:4534 -  -  -  -  ;
   22 00:4534 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4534 -  -  -  -  ;
   24 00:4534 -  -  -  -  ; ***************************************************************************************
   25 00:4534 -  -  -  -  ;
   26 00:4534 -  -  -  -  ; 		Terms can be:
   27 00:4534 -  -  -  -  ;
   28 00:4534 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4534 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4534 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4534 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4534 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4534 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4534 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4534 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4534 -  -  -  -  ; 														reference of some sort.
   37 00:4534 -  -  -  -  ;
   38 00:4534 -  -  -  -  ; ***************************************************************************************
   39 00:4534 -  -  -  -  
   40 00:4534 -  -  -  -  EvaluateTerm:		
   41 00:4534 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4536 D9 -  -  -  		exx
   43 00:4537 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:453A D9 -  -  -  		exx
   45 00:453B 21 00 00 -  		ld 		hl,$0000		
   46 00:453E -  -  -  -  		;
   47 00:453E DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:4541 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4543 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:4545 DA E3 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4548 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:454A C2 92 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:454D -  -  -  -  		;
   54 00:454D -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:454D -  -  -  -  		;
   56 00:454D -  -  -  -  _ETIntegerConstant:
   57 00:454D -  -  -  -  		;
   58 00:454D -  -  -  -  _ETIntegerLoop:		
   59 00:454D DD 7E 00 -  		ld 		a,(ix+0)
   60 00:4550 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4552 B5 -  -  -  		or 		l 							; or into L
   62 00:4553 6F -  -  -  		ld 		l,a
   63 00:4554 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4556 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:4559 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:455B FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:455D D8 -  -  -  		ret 	c
   68 00:455E -  -  -  -  
   69 00:455E 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4563 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4568 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:456D 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4572 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4577 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:457C -  -  -  -  
   76 00:457C 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:457E -  -  -  -  		;
   78 00:457E -  -  -  -  		; 		Found the $3F string marker.
   79 00:457E -  -  -  -  		;
   80 00:457E -  -  -  -  _ETStringMarker:		
   81 00:457E DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4580 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4582 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:4584 E1 -  -  -  		pop 	hl
   85 00:4585 11 00 00 -  		ld 		de,$0000
   86 00:4588 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:458B DD 19 -  -  		add 	ix,de
   88 00:458D DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:458F 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4591 C9 -  -  -  		ret
   91 00:4592 -  -  -  -  		;
   92 00:4592 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4592 -  -  -  -  		;
   94 00:4592 -  -  -  -  _ETFoundKeyword:
   95 00:4592 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:4594 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4596 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4598 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:459A 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:459C -  -  -  -  		;
  101 00:459C -  -  -  -  		;		Unary group 0
  102 00:459C -  -  -  -  		;
  103 00:459C E6 7F 21 00 
              00 6F 29 11 
              0C 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:45AE C3 59 40 -  		jp 		JumpCode 					; and go there.
  105 00:45B1 -  -  -  -  
  106 00:45B1 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:45B1 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:45B3 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:45B5 -  -  -  -  		;
  110 00:45B5 -  -  -  -  		; 		- term
  111 00:45B5 -  -  -  -  		;
  112 00:45B5 CD BB 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:45B8 CD 5B 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:45BB C9 -  -  -  		ret
  115 00:45BC -  -  -  -  		;
  116 00:45BC -  -  -  -  		;		! ? indirection check
  117 00:45BC -  -  -  -  		;
  118 00:45BC -  -  -  -  _ETCheckIndirection:	
  119 00:45BC FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:45BE 28 05 -  -  		jr 		z,_ETIndirection
  121 00:45C0 FE 83 -  -  		cp 		KWD_PLING
  122 00:45C2 C2 51 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:45C5 -  -  -  -  		;
  124 00:45C5 -  -  -  -  		; 		! ? indirection
  125 00:45C5 -  -  -  -  		;
  126 00:45C5 -  -  -  -  _ETIndirection:
  127 00:45C5 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:45C6 CD 34 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:45C9 CD 04 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:45CC CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:45CE 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:45D0 CD 32 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:45D3 F1 -  -  -  		pop 	af 							; get type back
  134 00:45D4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:45D6 CB F9 -  -  		set 	CIsReference,c
  136 00:45D8 FE 83 -  -  		cp 		KWD_PLING
  137 00:45DA C8 -  -  -  		ret 	z
  138 00:45DB CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:45DD C9 -  -  -  		ret
  140 00:45DE -  -  -  -  _ETStringIndirect:
  141 00:45DE 3E 02 C3 F4 
              42 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:45E3 -  -  -  -  		;
  143 00:45E3 -  -  -  -  		; 		Found an identifier.
  144 00:45E3 -  -  -  -  		;
  145 00:45E3 -  -  -  -  _ETVariable:
  146 00:45E3 CD E1 47 -  		call 	FindVariable 				; find the variable.
  147 00:45E6 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:45E7 3E 10 C3 F4 
              42 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:45EC -  -  -  -  		
  150 00:45EC -  -  -  -  ; ***************************************************************************************
  151 00:45EC -  -  -  -  ;
  152 00:45EC -  -  -  -  ;									Changes and Updates
  153 00:45EC -  -  -  -  ;
  154 00:45EC -  -  -  -  ; ***************************************************************************************
  155 00:45EC -  -  -  -  ;
  156 00:45EC -  -  -  -  ;		Date			Notes
  157 00:45EC -  -  -  -  ;		==== 			=====
  158 00:45EC -  -  -  -  ;
  159 00:45EC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:45EC -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:45EC -  -  -  -  ; ***************************************************************************************
    2 00:45EC -  -  -  -  ; ***************************************************************************************
    3 00:45EC -  -  -  -  ;
    4 00:45EC -  -  -  -  ;		Name : 		abs.asm
    5 00:45EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45EC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45EC -  -  -  -  ;		Reviewed :	No
    8 00:45EC -  -  -  -  ;		Purpose :	Absolute value 
    9 00:45EC -  -  -  -  ;
   10 00:45EC -  -  -  -  ; ***************************************************************************************
   11 00:45EC -  -  -  -  ; ***************************************************************************************
   12 00:45EC -  -  -  -  
   13 00:45EC -  -  -  -  ; ***************************************************************************************
   14 00:45EC -  -  -  -  ;
   15 00:45EC -  -  -  -  ;								abs( unary function
   16 00:45EC -  -  -  -  ;
   17 00:45EC -  -  -  -  ; ***************************************************************************************
   18 00:45EC -  -  -  -  
   19 00:45EC -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:45EC CD BB 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:45EF D9 -  -  -  		exx 								; test MSB
   22 00:45F0 CB 7C -  -  		bit 	7,h
   23 00:45F2 D9 -  -  -  		exx
   24 00:45F3 C4 5B 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:45F6 C9 -  -  -  		ret
   26 00:45F7 -  -  -  -  
   27 00:45F7 -  -  -  -  ; ***************************************************************************************
   28 00:45F7 -  -  -  -  ;
   29 00:45F7 -  -  -  -  ;									Changes and Updates
   30 00:45F7 -  -  -  -  ;
   31 00:45F7 -  -  -  -  ; ***************************************************************************************
   32 00:45F7 -  -  -  -  ;
   33 00:45F7 -  -  -  -  ;		Date			Notes
   34 00:45F7 -  -  -  -  ;		==== 			=====
   35 00:45F7 -  -  -  -  ;
   36 00:45F7 -  -  -  -  ; ***************************************************************************************
   37 00:45F7 -  -  -  -  		
Listing for file "_build.asm"
   35 00:45F7 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:45F7 -  -  -  -  ; ***************************************************************************************
    2 00:45F7 -  -  -  -  ; ***************************************************************************************
    3 00:45F7 -  -  -  -  ;
    4 00:45F7 -  -  -  -  ;		Name : 		asc.asm
    5 00:45F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45F7 -  -  -  -  ;		Reviewed :	No
    8 00:45F7 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:45F7 -  -  -  -  ;
   10 00:45F7 -  -  -  -  ; ***************************************************************************************
   11 00:45F7 -  -  -  -  ; ***************************************************************************************
   12 00:45F7 -  -  -  -  
   13 00:45F7 -  -  -  -  ; ***************************************************************************************
   14 00:45F7 -  -  -  -  ;
   15 00:45F7 -  -  -  -  ;								Asc unary function
   16 00:45F7 -  -  -  -  ;
   17 00:45F7 -  -  -  -  ; ***************************************************************************************
   18 00:45F7 -  -  -  -  
   19 00:45F7 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:45F7 CD C7 44 -  		call	EvaluateStringTerm			; Get string
   21 00:45FA 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:45FB C3 F8 44 -  		jp 		Return8BitConstant
   23 00:45FE -  -  -  -  
   24 00:45FE -  -  -  -  ; ***************************************************************************************
   25 00:45FE -  -  -  -  ;
   26 00:45FE -  -  -  -  ;									Changes and Updates
   27 00:45FE -  -  -  -  ;
   28 00:45FE -  -  -  -  ; ***************************************************************************************
   29 00:45FE -  -  -  -  ;
   30 00:45FE -  -  -  -  ;		Date			Notes
   31 00:45FE -  -  -  -  ;		==== 			=====
   32 00:45FE -  -  -  -  ;
   33 00:45FE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:45FE -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:45FE -  -  -  -  ; ***************************************************************************************
    2 00:45FE -  -  -  -  ; ***************************************************************************************
    3 00:45FE -  -  -  -  ;
    4 00:45FE -  -  -  -  ;		Name : 		chr.asm
    5 00:45FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45FE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45FE -  -  -  -  ;		Reviewed :	No
    8 00:45FE -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:45FE -  -  -  -  ;
   10 00:45FE -  -  -  -  ; ***************************************************************************************
   11 00:45FE -  -  -  -  ; ***************************************************************************************
   12 00:45FE -  -  -  -  
   13 00:45FE -  -  -  -  ; ***************************************************************************************
   14 00:45FE -  -  -  -  ;
   15 00:45FE -  -  -  -  ;								Chr$() unary function
   16 00:45FE -  -  -  -  ;
   17 00:45FE -  -  -  -  ; ***************************************************************************************
   18 00:45FE -  -  -  -  
   19 00:45FE -  -  -  -  Unary_Chr:	;; [chr]
   20 00:45FE CD CF 42 -  		call 	CheckDollar
   21 00:4601 CD BB 44 -  		call 	EvaluateIntegerTerm
   22 00:4604 7D -  -  -  		ld 		a,l 						; get character
   23 00:4605 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4607 21 92 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:460A 36 0D -  -  		ld 		(hl),13
   26 00:460C 2B -  -  -  		dec 	hl
   27 00:460D 77 -  -  -  		ld 		(hl),a
   28 00:460E C9 -  -  -  		ret
   29 00:460F -  -  -  -  
   30 00:460F -  -  -  -  ; ***************************************************************************************
   31 00:460F -  -  -  -  ;
   32 00:460F -  -  -  -  ;									Changes and Updates
   33 00:460F -  -  -  -  ;
   34 00:460F -  -  -  -  ; ***************************************************************************************
   35 00:460F -  -  -  -  ;
   36 00:460F -  -  -  -  ;		Date			Notes
   37 00:460F -  -  -  -  ;		==== 			=====
   38 00:460F -  -  -  -  ;
   39 00:460F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:460F -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:460F -  -  -  -  ; ***************************************************************************************
    2 00:460F -  -  -  -  ; ***************************************************************************************
    3 00:460F -  -  -  -  ;
    4 00:460F -  -  -  -  ;		Name : 		len.asm
    5 00:460F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:460F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:460F -  -  -  -  ;		Reviewed :	None
    8 00:460F -  -  -  -  ;		Purpose :	String Length
    9 00:460F -  -  -  -  ;
   10 00:460F -  -  -  -  ; ***************************************************************************************
   11 00:460F -  -  -  -  ; ***************************************************************************************
   12 00:460F -  -  -  -  
   13 00:460F -  -  -  -  ; ***************************************************************************************
   14 00:460F -  -  -  -  ;
   15 00:460F -  -  -  -  ;								Len unary function
   16 00:460F -  -  -  -  ;
   17 00:460F -  -  -  -  ; ***************************************************************************************
   18 00:460F -  -  -  -  
   19 00:460F -  -  -  -  Unary_Len:	;; [len]
   20 00:460F CD C7 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4612 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4613 CD D2 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4616 -  -  -  -  _ULCount:
   24 00:4616 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4617 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4619 D8 -  -  -  		ret 	c
   27 00:461A 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:461B 13 -  -  -  		inc 	de
   29 00:461C 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:461E -  -  -  -  
   31 00:461E -  -  -  -  ; ***************************************************************************************
   32 00:461E -  -  -  -  ;
   33 00:461E -  -  -  -  ;									Changes and Updates
   34 00:461E -  -  -  -  ;
   35 00:461E -  -  -  -  ; ***************************************************************************************
   36 00:461E -  -  -  -  ;
   37 00:461E -  -  -  -  ;		Date			Notes
   38 00:461E -  -  -  -  ;		==== 			=====
   39 00:461E -  -  -  -  ;
   40 00:461E -  -  -  -  ; ***************************************************************************************
   41 00:461E -  -  -  -  		
Listing for file "_build.asm"
   38 00:461E -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:461E -  -  -  -  ; ***************************************************************************************
    2 00:461E -  -  -  -  ; ***************************************************************************************
    3 00:461E -  -  -  -  ;
    4 00:461E -  -  -  -  ;		Name : 		makestring.asm
    5 00:461E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:461E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:461E -  -  -  -  ;		Reviewed :	No
    8 00:461E -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:461E -  -  -  -  ;
   10 00:461E -  -  -  -  ; ***************************************************************************************
   11 00:461E -  -  -  -  ; ***************************************************************************************
   12 00:461E -  -  -  -  
   13 00:461E -  -  -  -  ; ***************************************************************************************
   14 00:461E -  -  -  -  ;
   15 00:461E -  -  -  -  ;								Str$() unary function
   16 00:461E -  -  -  -  ;
   17 00:461E -  -  -  -  ; ***************************************************************************************
   18 00:461E -  -  -  -  
   19 00:461E -  -  -  -  Unary_MkStr:	;; [$]
   20 00:461E CD BB 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4621 CD 32 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4624 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4626 C9 -  -  -  		ret
   24 00:4627 -  -  -  -  
   25 00:4627 -  -  -  -  ; ***************************************************************************************
   26 00:4627 -  -  -  -  ;
   27 00:4627 -  -  -  -  ;									Changes and Updates
   28 00:4627 -  -  -  -  ;
   29 00:4627 -  -  -  -  ; ***************************************************************************************
   30 00:4627 -  -  -  -  ;
   31 00:4627 -  -  -  -  ;		Date			Notes
   32 00:4627 -  -  -  -  ;		==== 			=====
   33 00:4627 -  -  -  -  ;
   34 00:4627 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4627 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4627 -  -  -  -  ; ***************************************************************************************
    2 00:4627 -  -  -  -  ; ***************************************************************************************
    3 00:4627 -  -  -  -  ;
    4 00:4627 -  -  -  -  ;		Name : 		not.asm
    5 00:4627 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4627 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4627 -  -  -  -  ;		Reviewed :	No
    8 00:4627 -  -  -  -  ;		Purpose :	Logical not
    9 00:4627 -  -  -  -  ;
   10 00:4627 -  -  -  -  ; ***************************************************************************************
   11 00:4627 -  -  -  -  ; ***************************************************************************************
   12 00:4627 -  -  -  -  
   13 00:4627 -  -  -  -  ; ***************************************************************************************
   14 00:4627 -  -  -  -  ;
   15 00:4627 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4627 -  -  -  -  ;
   17 00:4627 -  -  -  -  ; ***************************************************************************************
   18 00:4627 -  -  -  -  
   19 00:4627 -  -  -  -  Unary_Not:		;; [not]
   20 00:4627 CD BB 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:462A CD 31 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:462D CD 31 46 -  		call 	__UNSwap		
   23 00:4630 C9 -  -  -  		ret
   24 00:4631 -  -  -  -  
   25 00:4631 -  -  -  -  __UNSwap:
   26 00:4631 7C -  -  -  		ld 		a,h
   27 00:4632 2F -  -  -  		cpl
   28 00:4633 67 -  -  -  		ld 		h,a
   29 00:4634 7D -  -  -  		ld 		a,l
   30 00:4635 2F -  -  -  		cpl 	
   31 00:4636 6F -  -  -  		ld 		l,a
   32 00:4637 D9 -  -  -  		exx
   33 00:4638 C9 -  -  -  		ret
   34 00:4639 -  -  -  -  
   35 00:4639 -  -  -  -  ; ***************************************************************************************
   36 00:4639 -  -  -  -  ;
   37 00:4639 -  -  -  -  ;									Changes and Updates
   38 00:4639 -  -  -  -  ;
   39 00:4639 -  -  -  -  ; ***************************************************************************************
   40 00:4639 -  -  -  -  ;
   41 00:4639 -  -  -  -  ;		Date			Notes
   42 00:4639 -  -  -  -  ;		==== 			=====
   43 00:4639 -  -  -  -  ;
   44 00:4639 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:4639 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4639 -  -  -  -  ; ***************************************************************************************
    2 00:4639 -  -  -  -  ; ***************************************************************************************
    3 00:4639 -  -  -  -  ;
    4 00:4639 -  -  -  -  ;		Name : 		page.asm
    5 00:4639 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4639 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4639 -  -  -  -  ;		Reviewed :	No
    8 00:4639 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4639 -  -  -  -  ;
   10 00:4639 -  -  -  -  ; ***************************************************************************************
   11 00:4639 -  -  -  -  ; ***************************************************************************************
   12 00:4639 -  -  -  -  
   13 00:4639 -  -  -  -  ; ***************************************************************************************
   14 00:4639 -  -  -  -  ;
   15 00:4639 -  -  -  -  ;							page unary function (no bracket)
   16 00:4639 -  -  -  -  ;
   17 00:4639 -  -  -  -  ; ***************************************************************************************
   18 00:4639 -  -  -  -  
   19 00:4639 -  -  -  -  Unary_Page:	;; [page]
   20 00:4639 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:463C D9 -  -  -  			exx
   22 00:463D 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:4640 D9 -  -  -  			exx
   24 00:4641 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4643 C9 -  -  -  			ret
   26 00:4644 -  -  -  -  
   27 00:4644 -  -  -  -  ; ***************************************************************************************
   28 00:4644 -  -  -  -  ;
   29 00:4644 -  -  -  -  ;									Changes and Updates
   30 00:4644 -  -  -  -  ;
   31 00:4644 -  -  -  -  ; ***************************************************************************************
   32 00:4644 -  -  -  -  ;
   33 00:4644 -  -  -  -  ;		Date			Notes
   34 00:4644 -  -  -  -  ;		==== 			=====
   35 00:4644 -  -  -  -  ;
   36 00:4644 -  -  -  -  ; ***************************************************************************************
   37 00:4644 -  -  -  -  			
Listing for file "_build.asm"
   41 00:4644 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:4644 -  -  -  -  ; ***************************************************************************************
    2 00:4644 -  -  -  -  ; ***************************************************************************************
    3 00:4644 -  -  -  -  ;
    4 00:4644 -  -  -  -  ;		Name : 		random.asm
    5 00:4644 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4644 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4644 -  -  -  -  ;		Reviewed :	No
    8 00:4644 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:4644 -  -  -  -  ;
   10 00:4644 -  -  -  -  ; ***************************************************************************************
   11 00:4644 -  -  -  -  ; ***************************************************************************************
   12 00:4644 -  -  -  -  
   13 00:4644 -  -  -  -  ; ***************************************************************************************
   14 00:4644 -  -  -  -  ;
   15 00:4644 -  -  -  -  ;								Random unary function
   16 00:4644 -  -  -  -  ;
   17 00:4644 -  -  -  -  ; ***************************************************************************************
   18 00:4644 -  -  -  -  
   19 00:4644 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:4644 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:4645 CD BB 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4648 D9 -  -  -  		exx 								; is it -ve
   23 00:4649 CB 7C -  -  		bit 	7,h
   24 00:464B D9 -  -  -  		exx
   25 00:464C 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:464E 22 65 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4651 D9 -  -  -  		exx
   28 00:4652 22 69 40 -  		ld 		(RandomSeed+4),hl
   29 00:4655 D9 -  -  -  		exx
   30 00:4656 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4658 C9 -  -  -  		ret
   32 00:4659 -  -  -  -  _URDontSeed:		
   33 00:4659 -  -  -  -  
   34 00:4659 CD 01 4C -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:465C 28 19 -  -  		jr 		z,_URFail
   36 00:465E E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:465F D9 -  -  -  		exx
   38 00:4660 E5 -  -  -  		push 	hl
   39 00:4661 D9 -  -  -  		exx
   40 00:4662 -  -  -  -  		;
   41 00:4662 CD 86 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:4665 D9 -  -  -  		exx
   43 00:4666 CD 86 46 -  		call 	URandomHL
   44 00:4669 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:466B D9 -  -  -  		exx
   46 00:466C -  -  -  -  		;
   47 00:466C D9 -  -  -  		exx 								; restore range.
   48 00:466D D1 -  -  -  		pop 	de
   49 00:466E D9 -  -  -  		exx
   50 00:466F D1 -  -  -  		pop 	de
   51 00:4670 -  -  -  -  		;
   52 00:4670 CD AD 4A -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4673 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:4674 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4676 C9 -  -  -  		ret
   56 00:4677 -  -  -  -  _URFail:
   57 00:4677 3E 03 C3 F4 
              42 -  -  -  		ERR_BADVALUE
   58 00:467C -  -  -  -  ; ***************************************************************************************
   59 00:467C -  -  -  -  ;
   60 00:467C -  -  -  -  ; 									Push RNG off zero
   61 00:467C -  -  -  -  ;
   62 00:467C -  -  -  -  ; ***************************************************************************************
   63 00:467C -  -  -  -  
   64 00:467C -  -  -  -  UnaryRandomInitialise:
   65 00:467C 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:467E -  -  -  -  _URILoop:
   67 00:467E C5 -  -  -  		push 	bc
   68 00:467F CD 86 46 -  		call 	URandomHL
   69 00:4682 C1 -  -  -  		pop 	bc
   70 00:4683 10 F9 -  -  		djnz 	_URILoop
   71 00:4685 C9 -  -  -  		ret
   72 00:4686 -  -  -  -  
   73 00:4686 -  -  -  -  ; ***************************************************************************************
   74 00:4686 -  -  -  -  ;
   75 00:4686 -  -  -  -  ;							16 bit random number generator
   76 00:4686 -  -  -  -  ;
   77 00:4686 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4686 -  -  -  -  ;		Actual author unspecified.
   79 00:4686 -  -  -  -  ;
   80 00:4686 -  -  -  -  ; ***************************************************************************************
   81 00:4686 -  -  -  -  
   82 00:4686 -  -  -  -  URandomHL:
   83 00:4686 2A 65 40 -  	    ld 		hl,(RandomSeed)
   84 00:4689 ED 5B 69 40 	    ld 		de,(RandomSeed+4)
   85 00:468D 44 -  -  -  	    ld 		b,h
   86 00:468E 4D -  -  -  	    ld 		c,l
   87 00:468F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:4694 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:4699 2C -  -  -  	    inc 	l
   90 00:469A 09 -  -  -  	    add 	hl,bc
   91 00:469B 22 65 40 -  	    ld 		(RandomSeed),hl
   92 00:469E 2A 69 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:46A1 ED 5A -  -  	    adc 	hl,de
   94 00:46A3 22 69 40 -  	    ld 		(RandomSeed+4),hl
   95 00:46A6 EB -  -  -  	    ex 		de,hl
   96 00:46A7 2A 6D 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:46AA ED 4B 71 40 	    ld 		bc,(RandomSeed+12)
   98 00:46AE 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:46B3 ED 43 71 40 	    ld 		(RandomSeed+12),bc
  100 00:46B7 9F -  -  -  	    sbc 	a,a
  101 00:46B8 E6 C5 -  -  	    and 	%11000101
  102 00:46BA AD -  -  -  	    xor 	l
  103 00:46BB 6F -  -  -  	    ld 		l,a
  104 00:46BC 22 6D 40 -  	    ld 		(RandomSeed+8),hl
  105 00:46BF EB -  -  -  	    ex 		de,hl
  106 00:46C0 09 -  -  -  	    add 	hl,bc
  107 00:46C1 C9 -  -  -  	    ret		
  108 00:46C2 -  -  -  -  
  109 00:46C2 -  -  -  -  ; ***************************************************************************************
  110 00:46C2 -  -  -  -  ;
  111 00:46C2 -  -  -  -  ;									Changes and Updates
  112 00:46C2 -  -  -  -  ;
  113 00:46C2 -  -  -  -  ; ***************************************************************************************
  114 00:46C2 -  -  -  -  ;
  115 00:46C2 -  -  -  -  ;		Date			Notes
  116 00:46C2 -  -  -  -  ;		==== 			=====
  117 00:46C2 -  -  -  -  ;
  118 00:46C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:46C2 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:46C2 -  -  -  -  ; ***************************************************************************************
    2 00:46C2 -  -  -  -  ; ***************************************************************************************
    3 00:46C2 -  -  -  -  ;
    4 00:46C2 -  -  -  -  ;		Name : 		sgn.asm
    5 00:46C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C2 -  -  -  -  ;		Reviewed :	No
    8 00:46C2 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:46C2 -  -  -  -  ;
   10 00:46C2 -  -  -  -  ; ***************************************************************************************
   11 00:46C2 -  -  -  -  ; ***************************************************************************************
   12 00:46C2 -  -  -  -  
   13 00:46C2 -  -  -  -  ; ***************************************************************************************
   14 00:46C2 -  -  -  -  ;
   15 00:46C2 -  -  -  -  ;								sgn unary function
   16 00:46C2 -  -  -  -  ;
   17 00:46C2 -  -  -  -  ; ***************************************************************************************
   18 00:46C2 -  -  -  -  
   19 00:46C2 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:46C2 CD BB 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:46C5 CD 01 4C -  		call 	Int32Zero 					; integer sgn() code
   22 00:46C8 CA D2 43 -  		jp 		z,UnaryInt32False
   23 00:46CB D9 -  -  -  		exx
   24 00:46CC CB 7C -  -  		bit 	7,h
   25 00:46CE D9 -  -  -  		exx
   26 00:46CF C2 CE 43 -  		jp 		nz,UnaryInt32True
   27 00:46D2 3E 01 -  -  		ld 		a,1
   28 00:46D4 C3 F8 44 -  		jp 		Return8BitConstant
   29 00:46D7 -  -  -  -  
   30 00:46D7 -  -  -  -  ; ***************************************************************************************
   31 00:46D7 -  -  -  -  ;
   32 00:46D7 -  -  -  -  ;									Changes and Updates
   33 00:46D7 -  -  -  -  ;
   34 00:46D7 -  -  -  -  ; ***************************************************************************************
   35 00:46D7 -  -  -  -  ;
   36 00:46D7 -  -  -  -  ;		Date			Notes
   37 00:46D7 -  -  -  -  ;		==== 			=====
   38 00:46D7 -  -  -  -  ;
   39 00:46D7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:46D7 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:46D7 -  -  -  -  ; ***************************************************************************************
    2 00:46D7 -  -  -  -  ; ***************************************************************************************
    3 00:46D7 -  -  -  -  ;
    4 00:46D7 -  -  -  -  ;		Name : 		simple.asm
    5 00:46D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D7 -  -  -  -  ;		Reviewed :	No
    8 00:46D7 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:46D7 -  -  -  -  ;
   10 00:46D7 -  -  -  -  ; ***************************************************************************************
   11 00:46D7 -  -  -  -  ; ***************************************************************************************
   12 00:46D7 -  -  -  -  
   13 00:46D7 -  -  -  -  ; ***************************************************************************************
   14 00:46D7 -  -  -  -  ;
   15 00:46D7 -  -  -  -  ;								( unary function (think about it)
   16 00:46D7 -  -  -  -  ;
   17 00:46D7 -  -  -  -  ; ***************************************************************************************
   18 00:46D7 -  -  -  -  
   19 00:46D7 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:46D7 CD 69 44 -  		call 	EvaluateAtPrecedence0
   21 00:46DA C3 C2 42 -  		jp  	CheckRightBracket
   22 00:46DD -  -  -  -  
   23 00:46DD -  -  -  -  ; ***************************************************************************************
   24 00:46DD -  -  -  -  ;
   25 00:46DD -  -  -  -  ;									Handle &x
   26 00:46DD -  -  -  -  ;
   27 00:46DD -  -  -  -  ; ***************************************************************************************
   28 00:46DD -  -  -  -  
   29 00:46DD -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:46DD DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:46E0 E6 C0 -  -  		and 		$C0
   32 00:46E2 FE 40 -  -  		cp 			$40
   33 00:46E4 C2 51 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:46E7 C3 34 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:46EA -  -  -  -  
   36 00:46EA -  -  -  -  ; ***************************************************************************************
   37 00:46EA -  -  -  -  ;
   38 00:46EA -  -  -  -  ;									Changes and Updates
   39 00:46EA -  -  -  -  ;
   40 00:46EA -  -  -  -  ; ***************************************************************************************
   41 00:46EA -  -  -  -  ;
   42 00:46EA -  -  -  -  ;		Date			Notes
   43 00:46EA -  -  -  -  ;		==== 			=====
   44 00:46EA -  -  -  -  ;
   45 00:46EA -  -  -  -  ; ***************************************************************************************
   46 00:46EA -  -  -  -  		
Listing for file "_build.asm"
   44 00:46EA -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:46EA -  -  -  -  ; ***************************************************************************************
    2 00:46EA -  -  -  -  ; ***************************************************************************************
    3 00:46EA -  -  -  -  ;
    4 00:46EA -  -  -  -  ;		Name : 		str.asm
    5 00:46EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46EA -  -  -  -  ;		Reviewed :	No
    8 00:46EA -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:46EA -  -  -  -  ;
   10 00:46EA -  -  -  -  ; ***************************************************************************************
   11 00:46EA -  -  -  -  ; ***************************************************************************************
   12 00:46EA -  -  -  -  
   13 00:46EA -  -  -  -  ; ***************************************************************************************
   14 00:46EA -  -  -  -  ;
   15 00:46EA -  -  -  -  ;								Str$() unary function
   16 00:46EA -  -  -  -  ;
   17 00:46EA -  -  -  -  ; ***************************************************************************************
   18 00:46EA -  -  -  -  
   19 00:46EA -  -  -  -  Unary_Str:	;; [str]
   20 00:46EA CD CF 42 -  		call 	CheckDollar
   21 00:46ED CD BB 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:46F0 01 81 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:46F3 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:46F5 CD 42 4C -  		call 	Int32ToString 				
   25 00:46F8 21 81 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:46FB 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:46FD C9 -  -  -  		ret
   28 00:46FE -  -  -  -  
   29 00:46FE -  -  -  -  ; ***************************************************************************************
   30 00:46FE -  -  -  -  ;
   31 00:46FE -  -  -  -  ;									Changes and Updates
   32 00:46FE -  -  -  -  ;
   33 00:46FE -  -  -  -  ; ***************************************************************************************
   34 00:46FE -  -  -  -  ;
   35 00:46FE -  -  -  -  ;		Date			Notes
   36 00:46FE -  -  -  -  ;		==== 			=====
   37 00:46FE -  -  -  -  ;
   38 00:46FE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:46FE -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:46FE -  -  -  -  ; ***************************************************************************************
    2 00:46FE -  -  -  -  ; ***************************************************************************************
    3 00:46FE -  -  -  -  ;
    4 00:46FE -  -  -  -  ;		Name : 		time.asm
    5 00:46FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46FE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46FE -  -  -  -  ;		Reviewed :	No
    8 00:46FE -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:46FE -  -  -  -  ;
   10 00:46FE -  -  -  -  ; ***************************************************************************************
   11 00:46FE -  -  -  -  ; ***************************************************************************************
   12 00:46FE -  -  -  -  
   13 00:46FE -  -  -  -  ; ***************************************************************************************
   14 00:46FE -  -  -  -  ;
   15 00:46FE -  -  -  -  ;							Get system time in ms
   16 00:46FE -  -  -  -  ;
   17 00:46FE -  -  -  -  ; ***************************************************************************************
   18 00:46FE -  -  -  -  
   19 00:46FE -  -  -  -  Unary_Time:	;; [time]
   20 00:46FE CD B9 4C -  			call 	SYSGetTimer
   21 00:4701 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4703 C9 -  -  -  			ret
   23 00:4704 -  -  -  -  
   24 00:4704 -  -  -  -  ; ***************************************************************************************
   25 00:4704 -  -  -  -  ;
   26 00:4704 -  -  -  -  ;									Changes and Updates
   27 00:4704 -  -  -  -  ;
   28 00:4704 -  -  -  -  ; ***************************************************************************************
   29 00:4704 -  -  -  -  ;
   30 00:4704 -  -  -  -  ;		Date			Notes
   31 00:4704 -  -  -  -  ;		==== 			=====
   32 00:4704 -  -  -  -  ;
   33 00:4704 -  -  -  -  ; ***************************************************************************************
   34 00:4704 -  -  -  -  			
Listing for file "_build.asm"
   46 00:4704 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4704 -  -  -  -  ; ***************************************************************************************
    2 00:4704 -  -  -  -  ; ***************************************************************************************
    3 00:4704 -  -  -  -  ;
    4 00:4704 -  -  -  -  ;		Name : 		top.asm
    5 00:4704 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4704 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4704 -  -  -  -  ;		Reviewed :	No
    8 00:4704 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4704 -  -  -  -  ;
   10 00:4704 -  -  -  -  ; ***************************************************************************************
   11 00:4704 -  -  -  -  ; ***************************************************************************************
   12 00:4704 -  -  -  -  
   13 00:4704 -  -  -  -  ; ***************************************************************************************
   14 00:4704 -  -  -  -  ;
   15 00:4704 -  -  -  -  ;							page unary function (no bracket)
   16 00:4704 -  -  -  -  ;
   17 00:4704 -  -  -  -  ; ***************************************************************************************
   18 00:4704 -  -  -  -  
   19 00:4704 -  -  -  -  Unary_Top:	;; [top]
   20 00:4704 2A 4D 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4707 D9 -  -  -  			exx
   22 00:4708 2A 4F 40 -  			ld 		hl,(TopMemory+2)
   23 00:470B D9 -  -  -  			exx
   24 00:470C 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:470E C9 -  -  -  			ret
   26 00:470F -  -  -  -  
   27 00:470F -  -  -  -  ; ***************************************************************************************
   28 00:470F -  -  -  -  ;
   29 00:470F -  -  -  -  ;									Changes and Updates
   30 00:470F -  -  -  -  ;
   31 00:470F -  -  -  -  ; ***************************************************************************************
   32 00:470F -  -  -  -  ;
   33 00:470F -  -  -  -  ;		Date			Notes
   34 00:470F -  -  -  -  ;		==== 			=====
   35 00:470F -  -  -  -  ;
   36 00:470F -  -  -  -  ; ***************************************************************************************
   37 00:470F -  -  -  -  			
Listing for file "_build.asm"
   47 00:470F -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:470F -  -  -  -  ; ***************************************************************************************
    2 00:470F -  -  -  -  ; ***************************************************************************************
    3 00:470F -  -  -  -  ;
    4 00:470F -  -  -  -  ;		Name : 		val.asm
    5 00:470F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:470F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:470F -  -  -  -  ;		Reviewed :	No
    8 00:470F -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:470F -  -  -  -  ;
   10 00:470F -  -  -  -  ; ***************************************************************************************
   11 00:470F -  -  -  -  ; ***************************************************************************************
   12 00:470F -  -  -  -  
   13 00:470F -  -  -  -  ; ***************************************************************************************
   14 00:470F -  -  -  -  ;
   15 00:470F -  -  -  -  ;								val( unary function
   16 00:470F -  -  -  -  ;
   17 00:470F -  -  -  -  ; ***************************************************************************************
   18 00:470F -  -  -  -  
   19 00:470F -  -  -  -  Unary_Val:	;; [val]
   20 00:470F CD C7 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4712 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4713 C1 -  -  -  		pop 	bc
   23 00:4714 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4716 CD 38 4B -  		call 	Int32FromString 			; get the integer part.
   25 00:4719 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:471B C8 -  -  -  		ret		z 							; okay
   27 00:471C 3E 03 C3 F4 
              42 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4721 -  -  -  -  
   29 00:4721 -  -  -  -  ; ***************************************************************************************
   30 00:4721 -  -  -  -  ;
   31 00:4721 -  -  -  -  ;									Changes and Updates
   32 00:4721 -  -  -  -  ;
   33 00:4721 -  -  -  -  ; ***************************************************************************************
   34 00:4721 -  -  -  -  ;
   35 00:4721 -  -  -  -  ;		Date			Notes
   36 00:4721 -  -  -  -  ;		==== 			=====
   37 00:4721 -  -  -  -  ;
   38 00:4721 -  -  -  -  ; ***************************************************************************************
   39 00:4721 -  -  -  -  		
Listing for file "_build.asm"
   48 00:4721 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4721 -  -  -  -  ; ***************************************************************************************
    2 00:4721 -  -  -  -  ; ***************************************************************************************
    3 00:4721 -  -  -  -  ;
    4 00:4721 -  -  -  -  ;		Name : 		allocate.asm
    5 00:4721 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4721 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4721 -  -  -  -  ;		Reviewed :	No
    8 00:4721 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4721 -  -  -  -  ;
   10 00:4721 -  -  -  -  ; ***************************************************************************************
   11 00:4721 -  -  -  -  ; ***************************************************************************************
   12 00:4721 -  -  -  -  
   13 00:4721 -  -  -  -  ; ***************************************************************************************
   14 00:4721 -  -  -  -  ;
   15 00:4721 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4721 -  -  -  -  ;
   17 00:4721 -  -  -  -  ; ***************************************************************************************
   18 00:4721 -  -  -  -  
   19 00:4721 -  -  -  -  AllocateBytes:
   20 00:4721 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:4722 21 00 00 -  		ld 		hl,$000000
   22 00:4725 62 -  -  -  		ld 		h,d
   23 00:4726 6B -  -  -  		ld 		l,e
   24 00:4727 ED 5B 49 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   25 00:472B D5 -  -  -  		push 	de 							; save on stack
   26 00:472C 19 -  -  -  		add 	hl,de 						; HL is the new highest
   27 00:472D 22 49 40 -  		ld 		(LowAllocMemory),hl 		; update it
   28 00:4730 EB -  -  -  		ex 		de,hl 						; put in DE
   29 00:4731 2A 45 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   30 00:4734 AF -  -  -  		xor 	a
   31 00:4735 ED 52 -  -  		sbc 	hl,de
   32 00:4737 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   33 00:4738 D0 -  -  -  		ret 	nc 							; return if high >= low
   34 00:4739 3E 07 C3 F4 
              42 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   35 00:473E -  -  -  -  
   36 00:473E -  -  -  -  ; ***************************************************************************************
   37 00:473E -  -  -  -  ;
   38 00:473E -  -  -  -  ;									Changes and Updates
   39 00:473E -  -  -  -  ;
   40 00:473E -  -  -  -  ; ***************************************************************************************
   41 00:473E -  -  -  -  ;
   42 00:473E -  -  -  -  ;		Date			Notes
   43 00:473E -  -  -  -  ;		==== 			=====
   44 00:473E -  -  -  -  ;
   45 00:473E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:473E -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:473E -  -  -  -  ; ***************************************************************************************
    2 00:473E -  -  -  -  ; ***************************************************************************************
    3 00:473E -  -  -  -  ;
    4 00:473E -  -  -  -  ;		Name : 		clear.asm
    5 00:473E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:473E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:473E -  -  -  -  ;		Reviewed :	No
    8 00:473E -  -  -  -  ;		Purpose :	Clear command.
    9 00:473E -  -  -  -  ;
   10 00:473E -  -  -  -  ; ***************************************************************************************
   11 00:473E -  -  -  -  ; ***************************************************************************************
   12 00:473E -  -  -  -  
   13 00:473E -  -  -  -  ; ***************************************************************************************
   14 00:473E -  -  -  -  ;
   15 00:473E -  -  -  -  ;										CLEAR command
   16 00:473E -  -  -  -  ;
   17 00:473E -  -  -  -  ; ***************************************************************************************
   18 00:473E -  -  -  -  
   19 00:473E -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:473E -  -  -  -  		;
   21 00:473E -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:473E -  -  -  -  		;
   23 00:473E 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4741 -  -  -  -  _CCFindLow:
   25 00:4741 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4744 5E -  -  -  		ld 		e,(hl)		
   27 00:4745 19 -  -  -  		add 	hl,de
   28 00:4746 7B -  -  -  		ld 		a,e
   29 00:4747 B7 -  -  -  		or 		a
   30 00:4748 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:474A 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:474B 22 4D 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:474E 23 -  -  -  		inc 	hl 							; one for luck
   34 00:474F 22 49 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:4752 -  -  -  -  		;
   36 00:4752 -  -  -  -  		; 	 		Reset the language stack
   37 00:4752 -  -  -  -  		;
   38 00:4752 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:4755 -  -  -  -  		;
   40 00:4755 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:4757 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:475A 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:475D 19 -  -  -  		add 	hl,de
   44 00:475E 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4760 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4763 -  -  -  -  		;
   47 00:4763 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:4766 19 -  -  -  		add 	hl,de
   49 00:4767 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:476A -  -  -  -  		;
   51 00:476A -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:476A -  -  -  -  		;
   53 00:476A 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:476D -  -  -  -  _CCFClearHT:
   55 00:476D 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:476E 36 00 -  -  		ld 		(hl),0
   57 00:4770 1B -  -  -  		dec 	de
   58 00:4771 7A -  -  -  		ld 		a,d
   59 00:4772 B3 -  -  -  		or 		e
   60 00:4773 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:4775 22 41 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:4778 -  -  -  -  		;
   63 00:4778 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:4778 -  -  -  -  		;
   65 00:4778 22 45 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:477B -  -  -  -  		;
   67 00:477B -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:477B -  -  -  -  		;
   69 00:477B CD 7C 46 -  		call 	UnaryRandomInitialise
   70 00:477E C9 -  -  -  		ret
   71 00:477F -  -  -  -  
   72 00:477F -  -  -  -  ; ***************************************************************************************
   73 00:477F -  -  -  -  ;
   74 00:477F -  -  -  -  ;									Changes and Updates
   75 00:477F -  -  -  -  ;
   76 00:477F -  -  -  -  ; ***************************************************************************************
   77 00:477F -  -  -  -  ;
   78 00:477F -  -  -  -  ;		Date			Notes
   79 00:477F -  -  -  -  ;		==== 			=====
   80 00:477F -  -  -  -  ;
   81 00:477F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:477F -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:477F -  -  -  -  ; ***************************************************************************************
    2 00:477F -  -  -  -  ; ***************************************************************************************
    3 00:477F -  -  -  -  ;
    4 00:477F -  -  -  -  ;		Name : 		instance.asm
    5 00:477F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:477F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:477F -  -  -  -  ;		Reviewed :	No
    8 00:477F -  -  -  -  ;		Purpose :	Instance handling
    9 00:477F -  -  -  -  ;
   10 00:477F -  -  -  -  ; ***************************************************************************************
   11 00:477F -  -  -  -  ; ***************************************************************************************
   12 00:477F -  -  -  -  
   13 00:477F -  -  -  -  ; ***************************************************************************************
   14 00:477F -  -  -  -  ;
   15 00:477F -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:477F -  -  -  -  ;
   17 00:477F -  -  -  -  ; ***************************************************************************************
   18 00:477F -  -  -  -  
   19 00:477F -  -  -  -  SetCurrentInstance:
   20 00:477F ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4783 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:4786 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:478A -  -  -  -  
   24 00:478A C9 -  -  -  		ret
   25 00:478B -  -  -  -  
   26 00:478B -  -  -  -  
   27 00:478B -  -  -  -  ; ***************************************************************************************
   28 00:478B -  -  -  -  ;
   29 00:478B -  -  -  -  ;									Changes and Updates
   30 00:478B -  -  -  -  ;
   31 00:478B -  -  -  -  ; ***************************************************************************************
   32 00:478B -  -  -  -  ;
   33 00:478B -  -  -  -  ;		Date			Notes
   34 00:478B -  -  -  -  ;		==== 			=====
   35 00:478B -  -  -  -  ;
   36 00:478B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:478B -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:478B -  -  -  -  ; ***************************************************************************************
    2 00:478B -  -  -  -  ; ***************************************************************************************
    3 00:478B -  -  -  -  ;
    4 00:478B -  -  -  -  ;		Name : 		new.asm
    5 00:478B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:478B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:478B -  -  -  -  ;		Reviewed :	No
    8 00:478B -  -  -  -  ;		Purpose :	New command.
    9 00:478B -  -  -  -  ;
   10 00:478B -  -  -  -  ; ***************************************************************************************
   11 00:478B -  -  -  -  ; ***************************************************************************************
   12 00:478B -  -  -  -  
   13 00:478B -  -  -  -  ; ***************************************************************************************
   14 00:478B -  -  -  -  ;
   15 00:478B -  -  -  -  ;										NEW command
   16 00:478B -  -  -  -  ;
   17 00:478B -  -  -  -  ; ***************************************************************************************
   18 00:478B -  -  -  -  
   19 00:478B -  -  -  -  Command_NEW: 	;; [new]
   20 00:478B 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:478E 36 00 -  -  		ld 		(hl),0
   22 00:4790 CD 3E 47 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4793 3E 00 C3 F4 
              42 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:4798 -  -  -  -  
   25 00:4798 -  -  -  -  ; ***************************************************************************************
   26 00:4798 -  -  -  -  ;
   27 00:4798 -  -  -  -  ;									Changes and Updates
   28 00:4798 -  -  -  -  ;
   29 00:4798 -  -  -  -  ; ***************************************************************************************
   30 00:4798 -  -  -  -  ;
   31 00:4798 -  -  -  -  ;		Date			Notes
   32 00:4798 -  -  -  -  ;		==== 			=====
   33 00:4798 -  -  -  -  ;
   34 00:4798 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:4798 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:4798 -  -  -  -  ; ***************************************************************************************
    2 00:4798 -  -  -  -  ; ***************************************************************************************
    3 00:4798 -  -  -  -  ;
    4 00:4798 -  -  -  -  ;		Name : 		utility.asm
    5 00:4798 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4798 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4798 -  -  -  -  ;		Reviewed :	No
    8 00:4798 -  -  -  -  ;		Purpose :	Utility routines
    9 00:4798 -  -  -  -  ;
   10 00:4798 -  -  -  -  ; ***************************************************************************************
   11 00:4798 -  -  -  -  ; ***************************************************************************************
   12 00:4798 -  -  -  -  
   13 00:4798 -  -  -  -  ; ***************************************************************************************
   14 00:4798 -  -  -  -  ;
   15 00:4798 -  -  -  -  ;							Print ASCII string at HL
   16 00:4798 -  -  -  -  ;
   17 00:4798 -  -  -  -  ; ***************************************************************************************
   18 00:4798 -  -  -  -  
   19 00:4798 -  -  -  -  PrintStringAtHL:
   20 00:4798 7E -  -  -  		ld 		a,(hl)
   21 00:4799 FE 20 -  -  		cp 		$20		
   22 00:479B D8 -  -  -  		ret 	c
   23 00:479C CD 90 4C -  		call 	SYSPrintChar
   24 00:479F 23 -  -  -  		inc 	hl
   25 00:47A0 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:47A2 -  -  -  -  
   27 00:47A2 -  -  -  -  ; ***************************************************************************************
   28 00:47A2 -  -  -  -  ;
   29 00:47A2 -  -  -  -  ;									Changes and Updates
   30 00:47A2 -  -  -  -  ;
   31 00:47A2 -  -  -  -  ; ***************************************************************************************
   32 00:47A2 -  -  -  -  ;
   33 00:47A2 -  -  -  -  ;		Date			Notes
   34 00:47A2 -  -  -  -  ;		==== 			=====
   35 00:47A2 -  -  -  -  ;
   36 00:47A2 -  -  -  -  ; ***************************************************************************************
   37 00:47A2 -  -  -  -  		
Listing for file "_build.asm"
   53 00:47A2 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:47A2 -  -  -  -  ; ***************************************************************************************
    2 00:47A2 -  -  -  -  ; ***************************************************************************************
    3 00:47A2 -  -  -  -  ;
    4 00:47A2 -  -  -  -  ;		Name : 		create.asm
    5 00:47A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47A2 -  -  -  -  ;		Date : 		4th June 2022
    7 00:47A2 -  -  -  -  ;		Reviewed :	No
    8 00:47A2 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:47A2 -  -  -  -  ;
   10 00:47A2 -  -  -  -  ; ***************************************************************************************
   11 00:47A2 -  -  -  -  ; ***************************************************************************************
   12 00:47A2 -  -  -  -  
   13 00:47A2 -  -  -  -  ; ***************************************************************************************
   14 00:47A2 -  -  -  -  ;
   15 00:47A2 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:47A2 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:47A2 -  -  -  -  ;
   18 00:47A2 -  -  -  -  ; ***************************************************************************************
   19 00:47A2 -  -  -  -  
   20 00:47A2 -  -  -  -  VariableCreate:		
   21 00:47A2 -  -  -  -  		;
   22 00:47A2 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:47A2 -  -  -  -  		;
   24 00:47A2 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:47A5 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:47A6 E5 -  -  -  		push 	hl 							; save count.
   27 00:47A7 CD 21 47 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:47AA C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:47AB -  -  -  -  		;
   30 00:47AB -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:47AB -  -  -  -  		;
   32 00:47AB E5 -  -  -  		push	hl 							; save start address on stack
   33 00:47AC -  -  -  -  _VCClear:
   34 00:47AC 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:47AE 23 -  -  -  		inc 	hl
   36 00:47AF 0B -  -  -  		dec 	bc
   37 00:47B0 78 -  -  -  		ld		a,b
   38 00:47B1 B1 -  -  -  		or 		c
   39 00:47B2 20 F8 -  -  		jr 		nz,_VCClear
   40 00:47B4 E1 -  -  -  		pop 	hl							; restore start address
   41 00:47B5 -  -  -  -  		;
   42 00:47B5 -  -  -  -  		;		Now start to create the data.
   43 00:47B5 -  -  -  -  		;
   44 00:47B5 E5 -  -  -  		push 	hl 							; save start
   45 00:47B6 -  -  -  -  		;
   46 00:47B6 -  -  -  -  		;		Write hash to +0
   47 00:47B6 -  -  -  -  		;
   48 00:47B6 3A 7B 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:47B9 77 -  -  -  		ld 		(hl),a
   50 00:47BA 23 -  -  -  		inc 	hl
   51 00:47BB -  -  -  -  		;
   52 00:47BB -  -  -  -  		;		Write list head to +1
   53 00:47BB -  -  -  -  		;
   54 00:47BB E5 -  -  -  		push 	hl 							; save write position
   55 00:47BC 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:47BF 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:47C3 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:47C4 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:47C5 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:47CB -  -  -  -  		;
   61 00:47CB -  -  -  -  		;		Write variable name to +5
   62 00:47CB -  -  -  -  		;
   63 00:47CB ED 5B 77 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:47CF 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:47D5 -  -  -  -  		;
   66 00:47D5 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:47D6 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:47D9 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:47DF -  -  -  -  		;
   70 00:47DF EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:47E0 C9 -  -  -  		ret
   72 00:47E1 -  -  -  -  
   73 00:47E1 -  -  -  -  ; ***************************************************************************************
   74 00:47E1 -  -  -  -  ;
   75 00:47E1 -  -  -  -  ;									Changes and Updates
   76 00:47E1 -  -  -  -  ;
   77 00:47E1 -  -  -  -  ; ***************************************************************************************
   78 00:47E1 -  -  -  -  ;
   79 00:47E1 -  -  -  -  ;		Date			Notes
   80 00:47E1 -  -  -  -  ;		==== 			=====
   81 00:47E1 -  -  -  -  ;
   82 00:47E1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:47E1 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:47E1 -  -  -  -  ; ***************************************************************************************
    2 00:47E1 -  -  -  -  ; ***************************************************************************************
    3 00:47E1 -  -  -  -  ;
    4 00:47E1 -  -  -  -  ;		Name : 		find.asm
    5 00:47E1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47E1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47E1 -  -  -  -  ;		Reviewed :	No
    8 00:47E1 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:47E1 -  -  -  -  ;
   10 00:47E1 -  -  -  -  ; ***************************************************************************************
   11 00:47E1 -  -  -  -  ; ***************************************************************************************
   12 00:47E1 -  -  -  -  
   13 00:47E1 -  -  -  -  ; ***************************************************************************************
   14 00:47E1 -  -  -  -  ;
   15 00:47E1 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:47E1 -  -  -  -  ; 		variable information at (IX)
   17 00:47E1 -  -  -  -  ;
   18 00:47E1 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:47E1 -  -  -  -  ;		Don't autocreate arrays.
   20 00:47E1 -  -  -  -  ;
   21 00:47E1 -  -  -  -  ; ***************************************************************************************
   22 00:47E1 -  -  -  -  
   23 00:47E1 -  -  -  -  FindVariable:
   24 00:47E1 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:47E4 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:47E6 D2 51 43 -  		jp 		nc,SyntaxError 		
   27 00:47E9 -  -  -  -  
   28 00:47E9 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:47EC FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:47EE 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:47F0 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:47F2 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:47F4 -  -  -  -  		;
   34 00:47F4 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:47F4 -  -  -  -  		;
   36 00:47F4 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:47F7 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:47FA 87 -  -  -  		add 	a,a 						; x4
   39 00:47FB 87 -  -  -  		add 	a,a
   40 00:47FC B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:47FD 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:47FE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4800 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4802 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4804 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:4805 C9 -  -  -  		ret
   47 00:4806 -  -  -  -  		;
   48 00:4806 -  -  -  -  		;		Not a standard simple variable.
   49 00:4806 -  -  -  -  		;
   50 00:4806 -  -  -  -  _FVNotSimple:
   51 00:4806 CD 33 48 -  		call 	VariableInformation 		; get information about the variable.
   52 00:4809 CD 69 48 -  		call 	VariableSearchList 			; search the linked list
   53 00:480C 38 0A -  -  		jr 		c,_FVNotFound  				
   54 00:480E -  -  -  -  		;
   55 00:480E -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:480E -  -  -  -  		;
   57 00:480E -  -  -  -  _FVExitReference:		
   58 00:480E 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4811 19 -  -  -  		add 	hl,de 
   60 00:4812 -  -  -  -  		;
   61 00:4812 -  -  -  -  		; 		TODO: Array check code.
   62 00:4812 -  -  -  -  		;
   63 00:4812 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:4814 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:4816 AF -  -  -  		xor 	a 							; clear carry and return
   66 00:4817 C9 -  -  -  		ret
   67 00:4818 -  -  -  -  		;
   68 00:4818 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:4818 -  -  -  -  		;
   70 00:4818 -  -  -  -  _FVNotFound:		
   71 00:4818 3A 75 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:481B B7 -  -  -  		or 		a
   73 00:481C 28 0F -  -  		jr 		z,_FVFail
   74 00:481E DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:4821 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:4823 28 08 -  -  		jr 		z,_FVFail
   77 00:4825 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   78 00:4828 CD A2 47 -  		call 	VariableCreate 				; create a new variable.
   79 00:482B 18 E1 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:482D -  -  -  -  
   81 00:482D -  -  -  -  _FVFail:
   82 00:482D DD 2A 77 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:4831 37 -  -  -  		scf
   84 00:4832 C9 -  -  -  		ret
   85 00:4833 -  -  -  -  
   86 00:4833 -  -  -  -  ; ***************************************************************************************
   87 00:4833 -  -  -  -  ;
   88 00:4833 -  -  -  -  ;									Changes and Updates
   89 00:4833 -  -  -  -  ;
   90 00:4833 -  -  -  -  ; ***************************************************************************************
   91 00:4833 -  -  -  -  ;
   92 00:4833 -  -  -  -  ;		Date			Notes
   93 00:4833 -  -  -  -  ;		==== 			=====
   94 00:4833 -  -  -  -  ;
   95 00:4833 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4833 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4833 -  -  -  -  ; ***************************************************************************************
    2 00:4833 -  -  -  -  ; ***************************************************************************************
    3 00:4833 -  -  -  -  ;
    4 00:4833 -  -  -  -  ;		Name : 		info.asm
    5 00:4833 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4833 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4833 -  -  -  -  ;		Reviewed :	No
    8 00:4833 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4833 -  -  -  -  ;
   10 00:4833 -  -  -  -  ; ***************************************************************************************
   11 00:4833 -  -  -  -  ; ***************************************************************************************
   12 00:4833 -  -  -  -  
   13 00:4833 -  -  -  -  ; ***************************************************************************************
   14 00:4833 -  -  -  -  ;
   15 00:4833 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4833 -  -  -  -  ; 		after the identifier.
   17 00:4833 -  -  -  -  ;
   18 00:4833 -  -  -  -  ; ***************************************************************************************
   19 00:4833 -  -  -  -  
   20 00:4833 -  -  -  -  VariableInformation:
   21 00:4833 DD 22 77 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4837 -  -  -  -  		;
   23 00:4837 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4837 -  -  -  -  		;
   25 00:4837 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4839 -  -  -  -  _VICalculateHash:
   27 00:4839 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:483C FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:483E 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4840 80 -  -  -  		add 	a,b 						; add to hash
   31 00:4841 07 -  -  -  		rlca
   32 00:4842 07 -  -  -  		rlca
   33 00:4843 80 -  -  -  		add 	a,b
   34 00:4844 47 -  -  -  		ld 		b,a 						; update hash
   35 00:4845 DD 23 -  -  		inc 	ix 							; next character
   36 00:4847 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:4849 -  -  -  -  		;
   38 00:4849 -  -  -  -  _VIHashDone:
   39 00:4849 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:484A -  -  -  -  		;
   41 00:484A -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:484A -  -  -  -  		;
   43 00:484A 32 7B 40 -  		ld 		(VarHash),a
   44 00:484D -  -  -  -  		;
   45 00:484D -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:484D -  -  -  -  		;		
   47 00:484D E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:484F 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:4852 6F -  -  -  		ld 		l,a
   50 00:4853 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:4854 29 -  -  -  		add 	hl,hl
   52 00:4855 -  -  -  -  		;
   53 00:4855 ED 5B 41 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:4859 19 -  -  -  		add 	hl,de
   55 00:485A -  -  -  -  		;
   56 00:485A DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:485D FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:485F 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:4861 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:4864 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:4865 -  -  -  -  _VINotArray:
   62 00:4865 22 7D 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:4868 C9 -  -  -  		ret
   64 00:4869 -  -  -  -  
   65 00:4869 -  -  -  -  ; ***************************************************************************************
   66 00:4869 -  -  -  -  ;
   67 00:4869 -  -  -  -  ;									Changes and Updates
   68 00:4869 -  -  -  -  ;
   69 00:4869 -  -  -  -  ; ***************************************************************************************
   70 00:4869 -  -  -  -  ;
   71 00:4869 -  -  -  -  ;		Date			Notes
   72 00:4869 -  -  -  -  ;		==== 			=====
   73 00:4869 -  -  -  -  ;
   74 00:4869 -  -  -  -  ; ***************************************************************************************
   75 00:4869 -  -  -  -  
Listing for file "_build.asm"
   56 00:4869 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:4869 -  -  -  -  ; ***************************************************************************************
    2 00:4869 -  -  -  -  ; ***************************************************************************************
    3 00:4869 -  -  -  -  ;
    4 00:4869 -  -  -  -  ;		Name : 		search.asm
    5 00:4869 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4869 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4869 -  -  -  -  ;		Reviewed :	No
    8 00:4869 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:4869 -  -  -  -  ;
   10 00:4869 -  -  -  -  ; ***************************************************************************************
   11 00:4869 -  -  -  -  ; ***************************************************************************************
   12 00:4869 -  -  -  -  
   13 00:4869 -  -  -  -  ; ***************************************************************************************
   14 00:4869 -  -  -  -  ;
   15 00:4869 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:4869 -  -  -  -  ;		CS if failed.
   17 00:4869 -  -  -  -  ;
   18 00:4869 -  -  -  -  ; ***************************************************************************************
   19 00:4869 -  -  -  -  
   20 00:4869 -  -  -  -  VariableSearchList:
   21 00:4869 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:486C -  -  -  -  		;
   23 00:486C -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:486C -  -  -  -  		;		the address of the hash record
   25 00:486C -  -  -  -  		;
   26 00:486C -  -  -  -  _VSLLoop:
   27 00:486C 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4870 -  -  -  -  		;
   29 00:4870 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4871 AF -  -  -  		xor 	a
   31 00:4872 ED 6A -  -  		adc 	hl,hl
   32 00:4874 E1 -  -  -  		pop 	hl
   33 00:4875 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:4877 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:4878 C8 -  -  -  		ret 	z
   36 00:4879 -  -  -  -  _VSLRecord:
   37 00:4879 -  -  -  -  		;
   38 00:4879 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:4879 -  -  -  -  		;
   40 00:4879 3A 7B 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:487C BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:487D 23 -  -  -  		inc 	hl 							; points to link back
   43 00:487E 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4880 -  -  -  -  		;
   45 00:4880 -  -  -  -  		;		Now check the name
   46 00:4880 -  -  -  -  		;
   47 00:4880 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4881 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4882 23 -  -  -  		inc 	hl
   50 00:4883 23 -  -  -  		inc 	hl
   51 00:4884 23 -  -  -  		inc 	hl
   52 00:4885 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:4889 ED 5B 77 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:488D -  -  -  -  		;
   55 00:488D -  -  -  -  		;		Check individual characters
   56 00:488D -  -  -  -  		;
   57 00:488D -  -  -  -  _VSLCharacter:
   58 00:488D 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:488E FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4890 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4892 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:4893 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:4894 13 -  -  -  		inc 	de
   64 00:4895 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:4897 -  -  -  -  		;
   66 00:4897 -  -  -  -  _VSLFailed:
   67 00:4897 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:4898 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:489A -  -  -  -  		;
   70 00:489A -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:489A -  -  -  -  		;		
   72 00:489A -  -  -  -  _VSLEndIdentifier:
   73 00:489A 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:489B FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:489D 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:489F -  -  -  -  		;
   77 00:489F E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:48A0 2B -  -  -  		dec 	hl 							; now start of record
   79 00:48A1 AF -  -  -  		xor 	a 							; clear carry
   80 00:48A2 C9 -  -  -  		ret
   81 00:48A3 -  -  -  -  
   82 00:48A3 -  -  -  -  ; ***************************************************************************************
   83 00:48A3 -  -  -  -  ;
   84 00:48A3 -  -  -  -  ;									Changes and Updates
   85 00:48A3 -  -  -  -  ;
   86 00:48A3 -  -  -  -  ; ***************************************************************************************
   87 00:48A3 -  -  -  -  ;
   88 00:48A3 -  -  -  -  ;		Date			Notes
   89 00:48A3 -  -  -  -  ;		==== 			=====
   90 00:48A3 -  -  -  -  ;
   91 00:48A3 -  -  -  -  ; ***************************************************************************************
   92 00:48A3 -  -  -  -  		
Listing for file "_build.asm"
   57 00:48A3 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:48A3 -  -  -  -  ;
    2 00:48A3 -  -  -  -  ;	This file is automatically generated.
    3 00:48A3 -  -  -  -  ;
    4 00:48A3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:48C0 -  -  -  -  PrecedenceTable:
    6 00:48C0 06 -  -  -  	.db	6	; $0083 !
    7 00:48C1 06 -  -  -  	.db	6	; $0084 ?
    8 00:48C2 05 -  -  -  	.db	5	; $0085 *
    9 00:48C3 05 -  -  -  	.db	5	; $0086 /
   10 00:48C4 05 -  -  -  	.db	5	; $0087 mod
   11 00:48C5 05 -  -  -  	.db	5	; $0088 div
   12 00:48C6 04 -  -  -  	.db	4	; $0089 +
   13 00:48C7 04 -  -  -  	.db	4	; $008a -
   14 00:48C8 03 -  -  -  	.db	3	; $008b >=
   15 00:48C9 03 -  -  -  	.db	3	; $008c <=
   16 00:48CA 03 -  -  -  	.db	3	; $008d >
   17 00:48CB 03 -  -  -  	.db	3	; $008e <
   18 00:48CC 03 -  -  -  	.db	3	; $008f =
   19 00:48CD 03 -  -  -  	.db	3	; $0090 <>
   20 00:48CE 02 -  -  -  	.db	2	; $0091 and
   21 00:48CF 01 -  -  -  	.db	1	; $0092 or
   22 00:48D0 01 -  -  -  	.db	1	; $0093 eor
   23 00:48D1 -  -  -  -  
Listing for file "_build.asm"
   58 00:48D1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:48D1 -  -  -  -  ;
    2 00:48D1 -  -  -  -  ;	This is automatically generated.
    3 00:48D1 -  -  -  -  ;
    4 00:48D1 -  -  -  -  ErrorIDTable:
    5 00:48D1 15 49 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:48D5 1B 49 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:48D9 2C 49 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:48DD 3A 49 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:48E1 44 49 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:48E5 4E 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:48E9 68 49 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:48ED 79 49 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:48F1 87 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:48F5 95 49 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:48F9 9F 49 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:48FD B4 49 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:4901 CA 49 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:4905 D8 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:4909 DD 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:490D EA 49 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:4911 FB 49 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:4915 -  -  -  -  
   23 00:4915 -  -  -  -  ErrText_warmstart:
   24 00:4915 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:491B -  -  -  -  ErrText_assert:
   26 00:491B 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:492C -  -  -  -  ErrText_badtype:
   28 00:492C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:493A -  -  -  -  ErrText_badvalue:
   30 00:493A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:4944 -  -  -  -  ErrText_dim:
   32 00:4944 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:494E -  -  -  -  ErrText_disabled:
   34 00:494E 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:4968 -  -  -  -  ErrText_divzero:
   36 00:4968 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:4979 -  -  -  -  ErrText_memory:
   38 00:4979 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:4987 -  -  -  -  ErrText_nocomma:
   40 00:4987 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:4995 -  -  -  -  ErrText_nodollar:
   42 00:4995 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:499F -  -  -  -  ErrText_nolbracket:
   44 00:499F 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:49B4 -  -  -  -  ErrText_norbracket:
   46 00:49B4 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:49CA -  -  -  -  ErrText_notref:
   48 00:49CA 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:49D8 -  -  -  -  ErrText_stop:
   50 00:49D8 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:49DD -  -  -  -  ErrText_syntax:
   52 00:49DD 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:49EA -  -  -  -  ErrText_todo:
   54 00:49EA 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:49FB -  -  -  -  ErrText_unknownvar:
   56 00:49FB 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:4A0C -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4A0C -  -  -  -  ;
    2 00:4A0C -  -  -  -  ;	Vectors for set 0
    3 00:4A0C -  -  -  -  ;
    4 00:4A0C -  -  -  -  VectorsSet0:
    5 00:4A0C 8B 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4A0E 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4A10 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4A12 AE 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4A14 B6 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4A16 6C 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4A18 77 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4A1A 82 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4A1C 77 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4A1E 56 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4A20 61 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4A22 09 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4A24 00 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4A26 EE 43 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4A28 E5 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4A2A DC 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4A2C F7 43 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4A2E 8D 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4A30 98 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4A32 A3 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4A34 DD 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4A36 D7 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4A38 1E 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4A3A 44 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4A3C 0F 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4A3E EC 45 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4A40 C2 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4A42 EA 46 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4A44 FE 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4A46 F7 45 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4A48 27 46 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4A4A 39 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4A4C FE 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4A4E 04 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4A50 0F 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4A52 CE 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4A54 D2 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4A56 E2 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4A58 E2 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4A5A E5 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4A5C E2 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4A5E 32 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4A60 1F 40 -  -  	addr(Unimplemented)              ; $00aa [
   48 00:4A62 1F 40 -  -  	addr(Unimplemented)              ; $00ab ]
   49 00:4A64 1F 40 -  -  	addr(Unimplemented)              ; $00ac repeat
   50 00:4A66 1F 40 -  -  	addr(Unimplemented)              ; $00ad until
   51 00:4A68 1F 40 -  -  	addr(Unimplemented)              ; $00ae if
   52 00:4A6A E2 40 -  -  	addr(BadCmd_Then)                ; $00af then
   53 00:4A6C 1F 40 -  -  	addr(Unimplemented)              ; $00b0 else
   54 00:4A6E 1F 40 -  -  	addr(Unimplemented)              ; $00b1 for
   55 00:4A70 E2 40 -  -  	addr(BadCmd_To)                  ; $00b2 to
   56 00:4A72 1F 40 -  -  	addr(Unimplemented)              ; $00b3 step
   57 00:4A74 1F 40 -  -  	addr(Unimplemented)              ; $00b4 next
   58 00:4A76 1F 40 -  -  	addr(Unimplemented)              ; $00b5 def
   59 00:4A78 1F 40 -  -  	addr(Unimplemented)              ; $00b6 proc
   60 00:4A7A 1F 40 -  -  	addr(Unimplemented)              ; $00b7 endproc
   61 00:4A7C 1F 40 -  -  	addr(Unimplemented)              ; $00b8 gosub
   62 00:4A7E 1F 40 -  -  	addr(Unimplemented)              ; $00b9 return
   63 00:4A80 1F 40 -  -  	addr(Unimplemented)              ; $00ba goto
   64 00:4A82 1F 40 -  -  	addr(Unimplemented)              ; $00bb local
   65 00:4A84 E6 40 -  -  	addr(Command_DIM)                ; $00bc dim
   66 00:4A86 32 42 -  -  	addr(Command_REM)                ; $00bd rem
   67 00:4A88 9E 41 -  -  	addr(Command_LET)                ; $00be let
   68 00:4A8A 1F 40 -  -  	addr(Unimplemented)              ; $00bf vdu
   69 00:4A8C E3 41 -  -  	addr(Command_PRINT)              ; $00c0 print
   70 00:4A8E 1F 40 -  -  	addr(Unimplemented)              ; $00c1 load
   71 00:4A90 1F 40 -  -  	addr(Unimplemented)              ; $00c2 save
   72 00:4A92 1F 40 -  -  	addr(Unimplemented)              ; $00c3 list
   73 00:4A94 8B 47 -  -  	addr(Command_NEW)                ; $00c4 new
   74 00:4A96 4D 42 -  -  	addr(Command_RUN)                ; $00c5 run
   75 00:4A98 1F 40 -  -  	addr(Unimplemented)              ; $00c6 read
   76 00:4A9A 1F 40 -  -  	addr(Unimplemented)              ; $00c7 data
   77 00:4A9C 1F 40 -  -  	addr(Unimplemented)              ; $00c8 restore
   78 00:4A9E D3 40 -  -  	addr(Command_ASSERT)             ; $00c9 assert
   79 00:4AA0 3E 47 -  -  	addr(Command_CLEAR)              ; $00ca clear
   80 00:4AA2 86 41 -  -  	addr(Command_END)                ; $00cb end
   81 00:4AA4 B0 42 -  -  	addr(Command_STOP)               ; $00cc stop
   82 00:4AA6 -  -  -  -  ;
   83 00:4AA6 -  -  -  -  ;	Vectors for set 1
   84 00:4AA6 -  -  -  -  ;
   85 00:4AA6 -  -  -  -  VectorsSet1:
   86 00:4AA6 -  -  -  -  ;
   87 00:4AA6 -  -  -  -  ;	Vectors for set 2
   88 00:4AA6 -  -  -  -  ;
   89 00:4AA6 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:4AA6 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4AA6 -  -  -  -  ; ***************************************************************************************
    2 00:4AA6 -  -  -  -  ; ***************************************************************************************
    3 00:4AA6 -  -  -  -  ;
    4 00:4AA6 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4AA6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AA6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AA6 -  -  -  -  ;		Reviewed :	No
    8 00:4AA6 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4AA6 -  -  -  -  ;
   10 00:4AA6 -  -  -  -  ; ***************************************************************************************
   11 00:4AA6 -  -  -  -  ; ***************************************************************************************
   12 00:4AA6 -  -  -  -  
   13 00:4AA6 -  -  -  -  ; ***************************************************************************************
   14 00:4AA6 -  -  -  -  ;
   15 00:4AA6 -  -  -  -  ;								Unsigned integer divide
   16 00:4AA6 -  -  -  -  ;
   17 00:4AA6 -  -  -  -  ; ***************************************************************************************
   18 00:4AA6 -  -  -  -  
   19 00:4AA6 -  -  -  -  Int32UDivide:
   20 00:4AA6 37 -  -  -  		scf
   21 00:4AA7 C3 E5 4A -  		jp 		_I32UnsignedDivide		
   22 00:4AAA -  -  -  -  
   23 00:4AAA -  -  -  -  ; ***************************************************************************************
   24 00:4AAA -  -  -  -  ;
   25 00:4AAA -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4AAA -  -  -  -  ;
   27 00:4AAA -  -  -  -  ; ***************************************************************************************
   28 00:4AAA -  -  -  -  
   29 00:4AAA -  -  -  -  Int32SDivide:
   30 00:4AAA 37 -  -  -  		scf
   31 00:4AAB 18 01 -  -  		jr 		_I32SDivide
   32 00:4AAD -  -  -  -  Int32Modulus:
   33 00:4AAD AF -  -  -  		xor 	a
   34 00:4AAE -  -  -  -  _I32SDivide:
   35 00:4AAE 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4AAF F5 -  -  -  		push 	af
   37 00:4AB0 08 -  -  -  		ex 		af,af'
   38 00:4AB1 -  -  -  -  
   39 00:4AB1 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4AB2 D9 -  -  -  		exx
   41 00:4AB3 D5 -  -  -  		push 	de
   42 00:4AB4 D9 -  -  -  		exx
   43 00:4AB5 -  -  -  -  
   44 00:4AB5 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4AB6 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4AB7 CD D3 4A -  		call 	_I32CheckHLSignSwap
   47 00:4ABA CD D3 4A -  		call 	_I32CheckHLSignSwap
   48 00:4ABD 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4ABE F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4ABF F5 -  -  -  		push 	af
   51 00:4AC0 CD E5 4A -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4AC3 F1 -  -  -  		pop 	af 							; get function back
   53 00:4AC4 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4AC6 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4AC7 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4AC9 C4 2F 4C -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4ACC -  -  -  -  _I32SDExit:
   58 00:4ACC D9 -  -  -  		exx 								; restore DE'DE
   59 00:4ACD D1 -  -  -  		pop 	de
   60 00:4ACE D9 -  -  -  		exx
   61 00:4ACF D1 -  -  -  		pop 	de
   62 00:4AD0 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4AD1 08 -  -  -  		ex 		af,af'
   64 00:4AD2 C9 -  -  -  		ret
   65 00:4AD3 -  -  -  -  
   66 00:4AD3 -  -  -  -  
   67 00:4AD3 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4AD3 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4AD4 CB 7C -  -  		bit 	7,h
   70 00:4AD6 D9 -  -  -  		exx
   71 00:4AD7 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4AD9 -  -  -  -  		;
   73 00:4AD9 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4ADB F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4ADC CD 2F 4C -  		call 	Int32Negate 				
   76 00:4ADF F1 -  -  -  		pop 	af
   77 00:4AE0 -  -  -  -  _I32CHSPositive:
   78 00:4AE0 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4AE1 EB -  -  -  		ex 		de,hl
   80 00:4AE2 D9 -  -  -  		exx		
   81 00:4AE3 EB -  -  -  		ex 		de,hl
   82 00:4AE4 C9 -  -  -  		ret
   83 00:4AE5 -  -  -  -  
   84 00:4AE5 -  -  -  -  ; ***************************************************************************************
   85 00:4AE5 -  -  -  -  ;
   86 00:4AE5 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4AE5 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4AE5 -  -  -  -  ;
   89 00:4AE5 -  -  -  -  ; ***************************************************************************************
   90 00:4AE5 -  -  -  -  
   91 00:4AE5 -  -  -  -  _I32UnsignedDivide:
   92 00:4AE5 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4AE6 D5 -  -  -  		push 	de
   94 00:4AE7 D9 -  -  -  		exx
   95 00:4AE8 C5 -  -  -  		push 	bc
   96 00:4AE9 D5 -  -  -  		push 	de 							
   97 00:4AEA D9 -  -  -  		exx
   98 00:4AEB -  -  -  -  
   99 00:4AEB F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4AEC -  -  -  -  
  101 00:4AEC 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4AED B3 -  -  -  		or 		e
  103 00:4AEE D9 -  -  -  		exx
  104 00:4AEF B2 -  -  -  		or 		d
  105 00:4AF0 B3 -  -  -  		or 		e
  106 00:4AF1 D9 -  -  -  		exx
  107 00:4AF2 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4AF5 -  -  -  -  
  109 00:4AF5 -  -  -  -  
  110 00:4AF5 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4AF6 4D -  -  -  		ld		c,l
  112 00:4AF7 21 00 00 -  		ld 		hl,$0000
  113 00:4AFA D9 -  -  -  		exx
  114 00:4AFB 44 -  -  -  		ld 		b,h
  115 00:4AFC 4D -  -  -  		ld		c,l
  116 00:4AFD 21 00 00 -  		ld 		hl,$0000
  117 00:4B00 D9 -  -  -  		exx
  118 00:4B01 -  -  -  -  
  119 00:4B01 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4B03 -  -  -  -  _I32DivideLoop:
  121 00:4B03 F5 -  -  -  		push 	af
  122 00:4B04 -  -  -  -  
  123 00:4B04 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4B06 CB 10 -  -  		rl 		b
  125 00:4B08 D9 -  -  -  		exx
  126 00:4B09 CB 11 -  -  		rl 		c
  127 00:4B0B CB 10 -  -  		rl 		b
  128 00:4B0D D9 -  -  -  		exx
  129 00:4B0E CB 15 -  -  		rl 		l
  130 00:4B10 CB 14 -  -  		rl 		h
  131 00:4B12 D9 -  -  -  		exx
  132 00:4B13 CB 15 -  -  		rl 		l
  133 00:4B15 CB 14 -  -  		rl 		h
  134 00:4B17 D9 -  -  -  		exx
  135 00:4B18 -  -  -  -  
  136 00:4B18 CD D5 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4B1B 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4B1D -  -  -  -  
  139 00:4B1D 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4B1E 18 03 -  -  		jr 		_I32Next
  141 00:4B20 -  -  -  -  
  142 00:4B20 -  -  -  -  _I32Borrow:
  143 00:4B20 CD CF 4B -  		call 	Int32Add 					; A = A + M
  144 00:4B23 -  -  -  -  _I32Next:
  145 00:4B23 F1 -  -  -  		pop 	af
  146 00:4B24 3D -  -  -  		dec 	a
  147 00:4B25 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4B27 -  -  -  -  
  149 00:4B27 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4B28 -  -  -  -  
  151 00:4B28 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4B29 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4B2B -  -  -  -  
  154 00:4B2B 60 -  -  -  		ld  	h,b
  155 00:4B2C 69 -  -  -  		ld 		l,c
  156 00:4B2D D9 -  -  -  		exx
  157 00:4B2E 60 -  -  -  		ld  	h,b
  158 00:4B2F 69 -  -  -  		ld 		l,c
  159 00:4B30 D9 -  -  -  		exx
  160 00:4B31 -  -  -  -  _I32Modulus1:		
  161 00:4B31 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4B32 D1 -  -  -  		pop 	de
  163 00:4B33 C1 -  -  -  		pop 	bc
  164 00:4B34 D9 -  -  -  		exx
  165 00:4B35 D1 -  -  -  		pop 	de
  166 00:4B36 C1 -  -  -  		pop 	bc
  167 00:4B37 C9 -  -  -  		ret
  168 00:4B38 -  -  -  -  
  169 00:4B38 -  -  -  -  ; ***************************************************************************************
  170 00:4B38 -  -  -  -  ;
  171 00:4B38 -  -  -  -  ;									Changes and Updates
  172 00:4B38 -  -  -  -  ;
  173 00:4B38 -  -  -  -  ; ***************************************************************************************
  174 00:4B38 -  -  -  -  ;
  175 00:4B38 -  -  -  -  ;		Date			Notes
  176 00:4B38 -  -  -  -  ;		==== 			=====
  177 00:4B38 -  -  -  -  ;
  178 00:4B38 -  -  -  -  ; ***************************************************************************************
  179 00:4B38 -  -  -  -  		
Listing for file "_build.asm"
   61 00:4B38 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4B38 -  -  -  -  ; ***************************************************************************************
    2 00:4B38 -  -  -  -  ; ***************************************************************************************
    3 00:4B38 -  -  -  -  ;
    4 00:4B38 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4B38 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B38 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B38 -  -  -  -  ;		Reviewed :	No
    8 00:4B38 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4B38 -  -  -  -  ;
   10 00:4B38 -  -  -  -  ; ***************************************************************************************
   11 00:4B38 -  -  -  -  ; ***************************************************************************************
   12 00:4B38 -  -  -  -  
   13 00:4B38 -  -  -  -  ; ***************************************************************************************
   14 00:4B38 -  -  -  -  ;
   15 00:4B38 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4B38 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4B38 -  -  -  -  ;
   18 00:4B38 -  -  -  -  ; ***************************************************************************************
   19 00:4B38 -  -  -  -  
   20 00:4B38 -  -  -  -  Int32FromString:
   21 00:4B38 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4B39 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4B3A D5 -  -  -  		push 	de
   24 00:4B3B D9 -  -  -  		exx
   25 00:4B3C D5 -  -  -  		push 	de
   26 00:4B3D -  -  -  -  
   27 00:4B3D 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4B40 11 00 00 -  		ld 		de,$0000
   29 00:4B43 D9 -  -  -  		exx
   30 00:4B44 21 00 00 -  		ld 		hl,$0000
   31 00:4B47 11 00 00 -  		ld 		de,$0000
   32 00:4B4A D9 -  -  -  		exx
   33 00:4B4B -  -  -  -  
   34 00:4B4B 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4B4C CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4B4E 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4B50 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4B52 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4B53 -  -  -  -  		;
   40 00:4B53 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4B54 F5 -  -  -  		push 	af
   42 00:4B55 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4B57 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4B58 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4B5A 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4B5B 18 01 -  -  		jr 		_I32FSMain
   47 00:4B5D -  -  -  -  _I32FSNotSigned:		
   48 00:4B5D E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4B5E -  -  -  -  		;
   50 00:4B5E -  -  -  -  		; 		Main conversion loop.
   51 00:4B5E -  -  -  -  		; 		
   52 00:4B5E -  -  -  -  _I32FSMain:		
   53 00:4B5E 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4B5F FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4B61 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4B63 D6 20 -  -  		sub 	32
   57 00:4B65 -  -  -  -  _I32FSNotLower:
   58 00:4B65 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4B67 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4B69 FE 3A -  -  		cp 		'9'+1
   61 00:4B6B 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4B6D FE 41 -  -  		cp 		'A'
   63 00:4B6F 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4B71 FE 47 -  -  		cp 		'F'+1
   65 00:4B73 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4B75 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4B77 -  -  -  -  _I32FSOkay:
   68 00:4B77 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4B79 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4B7A 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4B7C 03 -  -  -  		inc 	bc 							; consume character
   72 00:4B7D D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4B7E F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4B7F CD 99 4B -  		call 	Int32Multiply 				; result *= base
   75 00:4B82 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4B83 5F -  -  -  		ld 		e,a
   77 00:4B84 CD CF 4B -  		call 	Int32Add 					; and add it.
   78 00:4B87 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4B88 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4B8A -  -  -  -  
   81 00:4B8A -  -  -  -  _I32FSExit:
   82 00:4B8A F1 -  -  -  		pop 	af 							; get sign back
   83 00:4B8B FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4B8D CC 2F 4C -  		call 	z,Int32Negate
   85 00:4B90 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4B91 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4B92 D9 -  -  -  		exx
   88 00:4B93 D1 -  -  -  		pop 	de
   89 00:4B94 D9 -  -  -  		exx
   90 00:4B95 C1 -  -  -  		pop 	bc
   91 00:4B96 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4B98 C9 -  -  -  		ret				
   93 00:4B99 -  -  -  -  
   94 00:4B99 -  -  -  -  ; ***************************************************************************************
   95 00:4B99 -  -  -  -  ;
   96 00:4B99 -  -  -  -  ;									Changes and Updates
   97 00:4B99 -  -  -  -  ;
   98 00:4B99 -  -  -  -  ; ***************************************************************************************
   99 00:4B99 -  -  -  -  ;
  100 00:4B99 -  -  -  -  ;		Date			Notes
  101 00:4B99 -  -  -  -  ;		==== 			=====
  102 00:4B99 -  -  -  -  ;
  103 00:4B99 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4B99 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4B99 -  -  -  -  ; ***************************************************************************************
    2 00:4B99 -  -  -  -  ; ***************************************************************************************
    3 00:4B99 -  -  -  -  ;
    4 00:4B99 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4B99 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B99 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B99 -  -  -  -  ;		Reviewed :	No
    8 00:4B99 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4B99 -  -  -  -  ;
   10 00:4B99 -  -  -  -  ; ***************************************************************************************
   11 00:4B99 -  -  -  -  ; ***************************************************************************************
   12 00:4B99 -  -  -  -  
   13 00:4B99 -  -  -  -  Int32Multiply:
   14 00:4B99 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4B9A D5 -  -  -  		push 	de
   16 00:4B9B 44 -  -  -  		ld 		b,h
   17 00:4B9C 4D -  -  -  		ld 		c,l
   18 00:4B9D 21 00 00 -  		ld 		hl,$0000
   19 00:4BA0 -  -  -  -  
   20 00:4BA0 D9 -  -  -  		exx
   21 00:4BA1 C5 -  -  -  		push 	bc
   22 00:4BA2 D5 -  -  -  		push 	de
   23 00:4BA3 44 -  -  -  		ld 		b,h
   24 00:4BA4 4D -  -  -  		ld 		c,l
   25 00:4BA5 21 00 00 -  		ld 		hl,$0000		
   26 00:4BA8 D9 -  -  -  		exx
   27 00:4BA9 -  -  -  -  
   28 00:4BA9 -  -  -  -  _I32MultiplyLoop:
   29 00:4BA9 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4BAB C4 CF 4B -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4BAE -  -  -  -  		;
   32 00:4BAE D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4BAF CB 38 -  -  		srl 	b
   34 00:4BB1 CB 19 -  -  		rr 		c
   35 00:4BB3 D9 -  -  -  		exx
   36 00:4BB4 CB 18 -  -  		rr 		b
   37 00:4BB6 CB 19 -  -  		rr 		c
   38 00:4BB8 -  -  -  -  		;
   39 00:4BB8 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4BBA CB 12 -  -  		rl 		d
   41 00:4BBC D9 -  -  -  		exx
   42 00:4BBD CB 13 -  -  		rl 		e
   43 00:4BBF CB 12 -  -  		rl 		d
   44 00:4BC1 -  -  -  -  
   45 00:4BC1 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4BC2 B1 -  -  -  		or 		c
   47 00:4BC3 D9 -  -  -  		exx
   48 00:4BC4 B0 -  -  -  		or 		b
   49 00:4BC5 B1 -  -  -  		or 		c
   50 00:4BC6 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4BC8 -  -  -  -  
   52 00:4BC8 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4BC9 D1 -  -  -  		pop 	de
   54 00:4BCA C1 -  -  -  		pop 	bc
   55 00:4BCB D9 -  -  -  		exx
   56 00:4BCC D1 -  -  -  		pop 	de
   57 00:4BCD C1 -  -  -  		pop 	bc
   58 00:4BCE C9 -  -  -  		ret
   59 00:4BCF -  -  -  -  
   60 00:4BCF -  -  -  -  ; ***************************************************************************************
   61 00:4BCF -  -  -  -  ;
   62 00:4BCF -  -  -  -  ;									Changes and Updates
   63 00:4BCF -  -  -  -  ;
   64 00:4BCF -  -  -  -  ; ***************************************************************************************
   65 00:4BCF -  -  -  -  ;
   66 00:4BCF -  -  -  -  ;		Date			Notes
   67 00:4BCF -  -  -  -  ;		==== 			=====
   68 00:4BCF -  -  -  -  ;
   69 00:4BCF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4BCF -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4BCF -  -  -  -  ; ***************************************************************************************
    2 00:4BCF -  -  -  -  ; ***************************************************************************************
    3 00:4BCF -  -  -  -  ;
    4 00:4BCF -  -  -  -  ;		Name : 		isimple.asm
    5 00:4BCF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BCF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BCF -  -  -  -  ;		Reviewed :	No
    8 00:4BCF -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4BCF -  -  -  -  ;
   10 00:4BCF -  -  -  -  ; ***************************************************************************************
   11 00:4BCF -  -  -  -  ; ***************************************************************************************
   12 00:4BCF -  -  -  -  
   13 00:4BCF -  -  -  -  ; ***************************************************************************************
   14 00:4BCF -  -  -  -  ;
   15 00:4BCF -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4BCF -  -  -  -  ;
   17 00:4BCF -  -  -  -  ; ***************************************************************************************
   18 00:4BCF -  -  -  -  
   19 00:4BCF -  -  -  -  Int32Add:
   20 00:4BCF 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4BD0 D9 -  -  -  		exx
   22 00:4BD1 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4BD3 D9 -  -  -  		exx
   24 00:4BD4 C9 -  -  -  		ret
   25 00:4BD5 -  -  -  -  
   26 00:4BD5 -  -  -  -  ; ***************************************************************************************
   27 00:4BD5 -  -  -  -  ;
   28 00:4BD5 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4BD5 -  -  -  -  ;
   30 00:4BD5 -  -  -  -  ; ***************************************************************************************
   31 00:4BD5 -  -  -  -  
   32 00:4BD5 -  -  -  -  Int32Subtract:
   33 00:4BD5 AF -  -  -  		xor 	a 							; clear carry
   34 00:4BD6 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4BD8 D9 -  -  -  		exx
   36 00:4BD9 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4BDB D9 -  -  -  		exx
   38 00:4BDC C9 -  -  -  		ret
   39 00:4BDD -  -  -  -  
   40 00:4BDD -  -  -  -  ; ***************************************************************************************
   41 00:4BDD -  -  -  -  ;
   42 00:4BDD -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4BDD -  -  -  -  ;
   44 00:4BDD -  -  -  -  ; ***************************************************************************************
   45 00:4BDD -  -  -  -  
   46 00:4BDD -  -  -  -  Int32And:
   47 00:4BDD D9 -  -  -  		exx
   48 00:4BDE CD E2 4B -  		call 	_I32AndHLDE
   49 00:4BE1 D9 -  -  -  		exx
   50 00:4BE2 -  -  -  -  _I32AndHLDE:		
   51 00:4BE2 7C -  -  -  		ld 		a,h
   52 00:4BE3 A2 -  -  -  		and 	d
   53 00:4BE4 67 -  -  -  		ld 		h,a
   54 00:4BE5 7D -  -  -  		ld 		a,l
   55 00:4BE6 A3 -  -  -  		and 	e
   56 00:4BE7 6F -  -  -  		ld 		l,a
   57 00:4BE8 C9 -  -  -  		ret
   58 00:4BE9 -  -  -  -  
   59 00:4BE9 -  -  -  -  ; ***************************************************************************************
   60 00:4BE9 -  -  -  -  ;
   61 00:4BE9 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4BE9 -  -  -  -  ;
   63 00:4BE9 -  -  -  -  ; ***************************************************************************************
   64 00:4BE9 -  -  -  -  
   65 00:4BE9 -  -  -  -  Int32Or:
   66 00:4BE9 D9 -  -  -  		exx
   67 00:4BEA CD EE 4B -  		call 	_I32OrHLDE
   68 00:4BED D9 -  -  -  		exx
   69 00:4BEE -  -  -  -  _I32OrHLDE:		
   70 00:4BEE 7C -  -  -  		ld 		a,h
   71 00:4BEF B2 -  -  -  		or 		d
   72 00:4BF0 67 -  -  -  		ld 		h,a
   73 00:4BF1 7D -  -  -  		ld 		a,l
   74 00:4BF2 B3 -  -  -  		or 		e
   75 00:4BF3 6F -  -  -  		ld 		l,a
   76 00:4BF4 C9 -  -  -  		ret
   77 00:4BF5 -  -  -  -  
   78 00:4BF5 -  -  -  -  ; ***************************************************************************************
   79 00:4BF5 -  -  -  -  ;
   80 00:4BF5 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4BF5 -  -  -  -  ;
   82 00:4BF5 -  -  -  -  ; ***************************************************************************************
   83 00:4BF5 -  -  -  -  
   84 00:4BF5 -  -  -  -  Int32Xor:
   85 00:4BF5 D9 -  -  -  		exx
   86 00:4BF6 CD FA 4B -  		call 	_I32XorHLDE
   87 00:4BF9 D9 -  -  -  		exx
   88 00:4BFA -  -  -  -  _I32XorHLDE:		
   89 00:4BFA 7C -  -  -  		ld 		a,h
   90 00:4BFB AA -  -  -  		xor 	d
   91 00:4BFC 67 -  -  -  		ld 		h,a
   92 00:4BFD 7D -  -  -  		ld 		a,l
   93 00:4BFE AB -  -  -  		xor 	e
   94 00:4BFF 6F -  -  -  		ld 		l,a
   95 00:4C00 C9 -  -  -  		ret
   96 00:4C01 -  -  -  -  
   97 00:4C01 -  -  -  -  ; ***************************************************************************************
   98 00:4C01 -  -  -  -  ;
   99 00:4C01 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4C01 -  -  -  -  ;
  101 00:4C01 -  -  -  -  ; ***************************************************************************************
  102 00:4C01 -  -  -  -  
  103 00:4C01 -  -  -  -  Int32Zero:
  104 00:4C01 D9 -  -  -  		exx
  105 00:4C02 7D -  -  -  		ld 		a,l
  106 00:4C03 B4 -  -  -  		or 		h
  107 00:4C04 D9 -  -  -  		exx
  108 00:4C05 B5 -  -  -  		or 		l
  109 00:4C06 B4 -  -  -  		or 		h
  110 00:4C07 C9 -  -  -  		ret
  111 00:4C08 -  -  -  -  
  112 00:4C08 -  -  -  -  ; ***************************************************************************************
  113 00:4C08 -  -  -  -  ;
  114 00:4C08 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4C08 -  -  -  -  ;
  116 00:4C08 -  -  -  -  ; ***************************************************************************************
  117 00:4C08 -  -  -  -  
  118 00:4C08 -  -  -  -  Int32Compare:
  119 00:4C08 E5 -  -  -  		push 	hl 							; save HL
  120 00:4C09 AF -  -  -  		xor 	a 							; clear carry
  121 00:4C0A ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4C0C D9 -  -  -  		exx
  123 00:4C0D E5 -  -  -  		push 	hl 							; save HL'
  124 00:4C0E ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4C10 -  -  -  -  		;
  126 00:4C10 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4C11 E2 18 4C -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4C14 78 -  -  -  		ld 		a,b
  129 00:4C15 EE 80 -  -  		xor 	$80
  130 00:4C17 47 -  -  -  		ld 		b,a
  131 00:4C18 -  -  -  -  _I32CNoOverflow:
  132 00:4C18 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4C19 B5 -  -  -  		or 		l
  134 00:4C1A D9 -  -  -  		exx 
  135 00:4C1B B4 -  -  -  		or 		h
  136 00:4C1C B5 -  -  -  		or 		l
  137 00:4C1D 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4C1F -  -  -  -  		;
  139 00:4C1F D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4C20 CB 78 -  -  		bit 	7,b
  141 00:4C22 D9 -  -  -  		exx
  142 00:4C23 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4C25 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4C27 3E FF -  -  		ld 		a,$FF
  145 00:4C29 -  -  -  -  _I32NotPos:
  146 00:4C29 D9 -  -  -  		exx
  147 00:4C2A E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4C2B D9 -  -  -  		exx
  149 00:4C2C E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4C2D B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4C2E C9 -  -  -  		ret
  152 00:4C2F -  -  -  -  
  153 00:4C2F -  -  -  -  ; ***************************************************************************************
  154 00:4C2F -  -  -  -  ;
  155 00:4C2F -  -  -  -  ;										Negate HL'HL
  156 00:4C2F -  -  -  -  ;
  157 00:4C2F -  -  -  -  ; ***************************************************************************************
  158 00:4C2F -  -  -  -  
  159 00:4C2F -  -  -  -  Int32Negate:
  160 00:4C2F AF -  -  -  		xor 	a
  161 00:4C30 CD 39 4C -  		call 	_I32NSubtract
  162 00:4C33 D9 -  -  -  		exx
  163 00:4C34 CD 39 4C -  		call 	_I32NSubtract
  164 00:4C37 D9 -  -  -  		exx
  165 00:4C38 C9 -  -  -  		ret
  166 00:4C39 -  -  -  -  _I32NSubtract:
  167 00:4C39 D5 -  -  -  		push 	de
  168 00:4C3A EB -  -  -  		ex 		de,hl
  169 00:4C3B 21 00 00 -  		ld 		hl,$0000
  170 00:4C3E ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4C40 D1 -  -  -  		pop 	de
  172 00:4C41 C9 -  -  -  		ret
  173 00:4C42 -  -  -  -  		
  174 00:4C42 -  -  -  -  ; ***************************************************************************************
  175 00:4C42 -  -  -  -  ;
  176 00:4C42 -  -  -  -  ;									Changes and Updates
  177 00:4C42 -  -  -  -  ;
  178 00:4C42 -  -  -  -  ; ***************************************************************************************
  179 00:4C42 -  -  -  -  ;
  180 00:4C42 -  -  -  -  ;		Date			Notes
  181 00:4C42 -  -  -  -  ;		==== 			=====
  182 00:4C42 -  -  -  -  ;
  183 00:4C42 -  -  -  -  ; ***************************************************************************************
  184 00:4C42 -  -  -  -  		
Listing for file "_build.asm"
   64 00:4C42 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4C42 -  -  -  -  ; ***************************************************************************************
    2 00:4C42 -  -  -  -  ; ***************************************************************************************
    3 00:4C42 -  -  -  -  ;
    4 00:4C42 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4C42 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C42 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C42 -  -  -  -  ;		Reviewed :	No
    8 00:4C42 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4C42 -  -  -  -  ;
   10 00:4C42 -  -  -  -  ; ***************************************************************************************
   11 00:4C42 -  -  -  -  ;
   12 00:4C42 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4C42 -  -  -  -  ;
   14 00:4C42 -  -  -  -  ; ***************************************************************************************
   15 00:4C42 -  -  -  -  
   16 00:4C42 -  -  -  -  Int32ToString:
   17 00:4C42 C5 -  -  -  		push 	bc 							; save string start
   18 00:4C43 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4C44 E5 -  -  -  		push 	hl
   20 00:4C45 11 00 00 -  		ld	 	de,$0000
   21 00:4C48 D9 -  -  -  		exx
   22 00:4C49 D5 -  -  -  		push 	de
   23 00:4C4A E5 -  -  -  		push 	hl
   24 00:4C4B 11 00 00 -  		ld 		de,$000
   25 00:4C4E D9 -  -  -  		exx
   26 00:4C4F 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4C50 -  -  -  -  		;
   28 00:4C50 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4C52 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4C54 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4C56 5F -  -  -  		ld 		e,a
   32 00:4C57 -  -  -  -  		;
   33 00:4C57 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4C58 CB 7C -  -  		bit 	7,h
   35 00:4C5A D9 -  -  -  		exx
   36 00:4C5B 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4C5D -  -  -  -  		;
   38 00:4C5D CD 2F 4C -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4C60 -  -  -  -  		;
   40 00:4C60 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4C62 02 -  -  -  		ld 		(bc),a
   42 00:4C63 03 -  -  -  		inc 	bc
   43 00:4C64 -  -  -  -  _I32TSNotNegative:	
   44 00:4C64 CD 72 4C -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4C67 -  -  -  -  _I32TSExit:
   46 00:4C67 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4C69 02 -  -  -  		ld 		(bc),a 
   48 00:4C6A -  -  -  -  
   49 00:4C6A D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4C6B E1 -  -  -  		pop 	hl
   51 00:4C6C D1 -  -  -  		pop 	de
   52 00:4C6D D9 -  -  -  		exx
   53 00:4C6E E1 -  -  -  		pop 	hl
   54 00:4C6F D1 -  -  -  		pop 	de
   55 00:4C70 C1 -  -  -  		pop 	bc
   56 00:4C71 C9 -  -  -  		ret
   57 00:4C72 -  -  -  -  
   58 00:4C72 -  -  -  -  _I32RecursiveConvert:
   59 00:4C72 CD A6 4A -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4C75 F5 -  -  -  		push 	af 							; save remainder
   61 00:4C76 CD 01 4C -  		call 	Int32Zero		 			; check result is non zero
   62 00:4C79 C4 72 4C -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4C7C F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4C7D FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4C7F 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4C81 C6 07 -  -  		add 	a,7
   67 00:4C83 -  -  -  -  _I32NotHex:
   68 00:4C83 C6 30 -  -  		add 	a,48
   69 00:4C85 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4C86 03 -  -  -  		inc 	bc
   71 00:4C87 C9 -  -  -  		ret		
   72 00:4C88 -  -  -  -  
   73 00:4C88 -  -  -  -  ; ***************************************************************************************
   74 00:4C88 -  -  -  -  ;
   75 00:4C88 -  -  -  -  ;									Changes and Updates
   76 00:4C88 -  -  -  -  ;
   77 00:4C88 -  -  -  -  ; ***************************************************************************************
   78 00:4C88 -  -  -  -  ;
   79 00:4C88 -  -  -  -  ;		Date			Notes
   80 00:4C88 -  -  -  -  ;		==== 			=====
   81 00:4C88 -  -  -  -  ;
   82 00:4C88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4C88 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4C88 -  -  -  -  ; ***************************************************************************************
    2 00:4C88 -  -  -  -  ; ***************************************************************************************
    3 00:4C88 -  -  -  -  ;
    4 00:4C88 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4C88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C88 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C88 -  -  -  -  ;		Reviewed :	No
    8 00:4C88 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4C88 -  -  -  -  ;
   10 00:4C88 -  -  -  -  ; ***************************************************************************************
   11 00:4C88 -  -  -  -  ; ***************************************************************************************
   12 00:4C88 -  -  -  -  
   13 00:4C88 -  -  -  -  #ifdef AQUARIUS
   14 00:4C88 -  -  -  -  
   15 00:4C88 -  -  -  -  ; ***************************************************************************************
   16 00:4C88 -  -  -  -  ;
   17 00:4C88 -  -  -  -  ;								Initialise system stuff
   18 00:4C88 -  -  -  -  ;
   19 00:4C88 -  -  -  -  ; ***************************************************************************************
   20 00:4C88 -  -  -  -  
   21 00:4C88 -  -  -  -  SYSInitialise:
   22 00:4C88 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4C8A CD 90 4C -  	call 	SYSPrintChar
   24 00:4C8D C9 -  -  -  	ret
   25 00:4C8E -  -  -  -  
   26 00:4C8E -  -  -  -  ; ***************************************************************************************
   27 00:4C8E -  -  -  -  ;
   28 00:4C8E -  -  -  -  ;								Terminate system stuff
   29 00:4C8E -  -  -  -  ;
   30 00:4C8E -  -  -  -  ; ***************************************************************************************
   31 00:4C8E -  -  -  -  
   32 00:4C8E -  -  -  -  SYSTerminate:
   33 00:4C8E 18 FE -  -  	jr 		SYSTerminate
   34 00:4C90 -  -  -  -  
   35 00:4C90 -  -  -  -  ; ***************************************************************************************
   36 00:4C90 -  -  -  -  ;
   37 00:4C90 -  -  -  -  ;								Print A character
   38 00:4C90 -  -  -  -  ;
   39 00:4C90 -  -  -  -  ; ***************************************************************************************
   40 00:4C90 -  -  -  -  
   41 00:4C90 -  -  -  -  SYSPrintChar:
   42 00:4C90 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4C91 C5 -  -  -  	push 	bc
   44 00:4C92 D5 -  -  -  	push 	de
   45 00:4C93 E5 -  -  -  	push 	hl
   46 00:4C94 DD E5 -  -  	push 	ix
   47 00:4C96 FD E5 -  -  	push 	iy
   48 00:4C98 D9 -  -  -  	exx
   49 00:4C99 C5 -  -  -  	push 	bc
   50 00:4C9A D5 -  -  -  	push 	de
   51 00:4C9B E5 -  -  -  	push 	hl
   52 00:4C9C CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4C9F E1 -  -  -  	pop 	hl
   54 00:4CA0 D1 -  -  -  	pop 	de
   55 00:4CA1 C1 -  -  -  	pop 	bc
   56 00:4CA2 D9 -  -  -  	exx
   57 00:4CA3 FD E1 -  -  	pop 	iy
   58 00:4CA5 DD E1 -  -  	pop 	ix
   59 00:4CA7 E1 -  -  -  	pop 	hl
   60 00:4CA8 D1 -  -  -  	pop 	de
   61 00:4CA9 C1 -  -  -  	pop 	bc
   62 00:4CAA F1 -  -  -  	pop 	af
   63 00:4CAB C9 -  -  -  	ret		
   64 00:4CAC -  -  -  -  
   65 00:4CAC -  -  -  -  ; ***************************************************************************************
   66 00:4CAC -  -  -  -  ;
   67 00:4CAC -  -  -  -  ;									Print Newline
   68 00:4CAC -  -  -  -  ;
   69 00:4CAC -  -  -  -  ; ***************************************************************************************
   70 00:4CAC -  -  -  -  
   71 00:4CAC -  -  -  -  SYSPrintCRLF:
   72 00:4CAC F5 -  -  -  	push 	af
   73 00:4CAD 3E 0D -  -  	ld 		a,13
   74 00:4CAF CD 90 4C -  	call 	SYSPrintChar
   75 00:4CB2 3E 0A -  -  	ld 		a,10
   76 00:4CB4 CD 90 4C -  	call 	SYSPrintChar
   77 00:4CB7 F1 -  -  -  	pop 	af
   78 00:4CB8 C9 -  -  -  	ret
   79 00:4CB9 -  -  -  -  
   80 00:4CB9 -  -  -  -  ; ***************************************************************************************
   81 00:4CB9 -  -  -  -  ;
   82 00:4CB9 -  -  -  -  ;									Get time into HL'HL
   83 00:4CB9 -  -  -  -  ;
   84 00:4CB9 -  -  -  -  ; ***************************************************************************************
   85 00:4CB9 -  -  -  -  
   86 00:4CB9 -  -  -  -  SYSGetTimer:
   87 00:4CB9 DB 00 -  -   	in 		a,($00)
   88 00:4CBB 6F -  -  -   	ld 		l,a
   89 00:4CBC DB 01 -  -   	in 		a,($01)
   90 00:4CBE 67 -  -  -   	ld 		h,a
   91 00:4CBF D9 -  -  -   	exx
   92 00:4CC0 DB 02 -  -   	in 		a,($02)
   93 00:4CC2 6F -  -  -   	ld 		l,a
   94 00:4CC3 DB 03 -  -   	in 		a,($03)
   95 00:4CC5 67 -  -  -   	ld 		h,a
   96 00:4CC6 D9 -  -  -   	exx
   97 00:4CC7 C9 -  -  -  	ret 	
   98 00:4CC8 -  -  -  -  	
   99 00:4CC8 -  -  -  -  #endif
  100 00:4CC8 -  -  -  -  
  101 00:4CC8 -  -  -  -  ; ***************************************************************************************
  102 00:4CC8 -  -  -  -  ;
  103 00:4CC8 -  -  -  -  ;									Changes and Updates
  104 00:4CC8 -  -  -  -  ;
  105 00:4CC8 -  -  -  -  ; ***************************************************************************************
  106 00:4CC8 -  -  -  -  ;
  107 00:4CC8 -  -  -  -  ;		Date			Notes
  108 00:4CC8 -  -  -  -  ;		==== 			=====
  109 00:4CC8 -  -  -  -  ;
  110 00:4CC8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4CC8 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4CC8 -  -  -  -  ; ***************************************************************************************
    2 00:4CC8 -  -  -  -  ; ***************************************************************************************
    3 00:4CC8 -  -  -  -  ;
    4 00:4CC8 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4CC8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CC8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CC8 -  -  -  -  ;		Reviewed :	No
    8 00:4CC8 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4CC8 -  -  -  -  ;
   10 00:4CC8 -  -  -  -  ; ***************************************************************************************
   11 00:4CC8 -  -  -  -  ; ***************************************************************************************
   12 00:4CC8 -  -  -  -  
   13 00:4CC8 -  -  -  -  #ifdef CLEANEZ80
   14 00:4CC8             
   15 00:4CC8             ; ***************************************************************************************
   16 00:4CC8             ;
   17 00:4CC8             ;								Initialise system stuff
   18 00:4CC8             ;
   19 00:4CC8             ; ***************************************************************************************
   20 00:4CC8             
   21 00:4CC8             SYSInitialise:
   22 00:4CC8             	ret
   23 00:4CC8             
   24 00:4CC8             ; ***************************************************************************************
   25 00:4CC8             ;
   26 00:4CC8             ;								Terminate system stuff
   27 00:4CC8             ;
   28 00:4CC8             ; ***************************************************************************************
   29 00:4CC8             
   30 00:4CC8             SYSTerminate:
   31 00:4CC8             	ret
   32 00:4CC8             
   33 00:4CC8             ; ***************************************************************************************
   34 00:4CC8             ;
   35 00:4CC8             ;								Print A character
   36 00:4CC8             ;
   37 00:4CC8             ; ***************************************************************************************
   38 00:4CC8             
   39 00:4CC8             SYSPrintChar:
   40 00:4CC8             	ret		
   41 00:4CC8             
   42 00:4CC8             ; ***************************************************************************************
   43 00:4CC8             ;
   44 00:4CC8             ;									Print Newline
   45 00:4CC8             ;
   46 00:4CC8             ; ***************************************************************************************
   47 00:4CC8             
   48 00:4CC8             SYSPrintCRLF:
   49 00:4CC8             	ret
   50 00:4CC8             
   51 00:4CC8             ; ***************************************************************************************
   52 00:4CC8             ;
   53 00:4CC8             ;									Get time into HL'HL
   54 00:4CC8             ;
   55 00:4CC8             ; ***************************************************************************************
   56 00:4CC8             
   57 00:4CC8             SYSGetTimer:
   58 00:4CC8             	ret
   59 00:4CC8             
   60 00:4CC8             #endif
   61 00:4CC8 -  -  -  -  
   62 00:4CC8 -  -  -  -  ; ***************************************************************************************
   63 00:4CC8 -  -  -  -  ;
   64 00:4CC8 -  -  -  -  ;									Changes and Updates
   65 00:4CC8 -  -  -  -  ;
   66 00:4CC8 -  -  -  -  ; ***************************************************************************************
   67 00:4CC8 -  -  -  -  ;
   68 00:4CC8 -  -  -  -  ;		Date			Notes
   69 00:4CC8 -  -  -  -  ;		==== 			=====
   70 00:4CC8 -  -  -  -  ;
   71 00:4CC8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4CC8 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4CC8 -  -  -  -  ; ***************************************************************************************
    2 00:4CC8 -  -  -  -  ; ***************************************************************************************
    3 00:4CC8 -  -  -  -  ;
    4 00:4CC8 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4CC8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CC8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CC8 -  -  -  -  ;		Reviewed :	No
    8 00:4CC8 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4CC8 -  -  -  -  ;
   10 00:4CC8 -  -  -  -  ; ***************************************************************************************
   11 00:4CC8 -  -  -  -  ; ***************************************************************************************
   12 00:4CC8 -  -  -  -  
   13 00:4CC8 -  -  -  -  #ifdef TI84
   14 00:4CC8             
   15 00:4CC8             ; ***************************************************************************************
   16 00:4CC8             ;
   17 00:4CC8             ;								Initialise system stuff
   18 00:4CC8             ;
   19 00:4CC8             ; ***************************************************************************************
   20 00:4CC8             
   21 00:4CC8             SYSInitialise:
   22 00:4CC8             	di
   23 00:4CC8             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4CC8             	ld 		(_IYTemp84),iy
   25 00:4CC8             	ret
   26 00:4CC8             
   27 00:4CC8             ; ***************************************************************************************
   28 00:4CC8             ;
   29 00:4CC8             ;								Terminate system stuff
   30 00:4CC8             ;
   31 00:4CC8             ; ***************************************************************************************
   32 00:4CC8             
   33 00:4CC8             SYSTerminate:
   34 00:4CC8             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4CC8             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4CC8             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4CC8             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4CC8             	ei
   39 00:4CC8             	ret 										; and exit.
   40 00:4CC8             
   41 00:4CC8             _StackTemp84:									; temp var for TI84 only.
   42 00:4CC8             	.dw 	0,0
   43 00:4CC8             _IYTemp84:
   44 00:4CC8             	.dw 	0,0		
   45 00:4CC8             
   46 00:4CC8             ; ***************************************************************************************
   47 00:4CC8             ;
   48 00:4CC8             ;								Print A character
   49 00:4CC8             ;
   50 00:4CC8             ; ***************************************************************************************
   51 00:4CC8             
   52 00:4CC8             SYSPrintChar:
   53 00:4CC8             	push 	af 									; we stack everything including alt registers
   54 00:4CC8             	push 	bc
   55 00:4CC8             	push 	de
   56 00:4CC8             	push 	hl
   57 00:4CC8             	push 	ix
   58 00:4CC8             	push 	iy
   59 00:4CC8             	exx
   60 00:4CC8             	push 	bc
   61 00:4CC8             	push 	de
   62 00:4CC8             	push 	hl
   63 00:4CC8             
   64 00:4CC8             	ld 		iy,(_IYTemp84)
   65 00:4CC8             	call 	_PutC 								; print A as character
   66 00:4CC8             	di
   67 00:4CC8             	ld 		(_IYTemp84),iy
   68 00:4CC8             
   69 00:4CC8             	pop 	hl
   70 00:4CC8             	pop 	de
   71 00:4CC8             	pop 	bc
   72 00:4CC8             	exx
   73 00:4CC8             	pop 	iy
   74 00:4CC8             	pop 	ix
   75 00:4CC8             	pop 	hl
   76 00:4CC8             	pop 	de
   77 00:4CC8             	pop 	bc
   78 00:4CC8             	pop 	af
   79 00:4CC8             	ret		
   80 00:4CC8             
   81 00:4CC8             ; ***************************************************************************************
   82 00:4CC8             ;
   83 00:4CC8             ;									Print Newline
   84 00:4CC8             ;
   85 00:4CC8             ; ***************************************************************************************
   86 00:4CC8             
   87 00:4CC8             SYSPrintCRLF:
   88 00:4CC8             	push 	af 									; we stack everything including alt registers
   89 00:4CC8             	push 	bc
   90 00:4CC8             	push 	de
   91 00:4CC8             	push 	hl
   92 00:4CC8             	push 	ix
   93 00:4CC8             	push 	iy
   94 00:4CC8             	exx
   95 00:4CC8             	push 	bc
   96 00:4CC8             	push 	de
   97 00:4CC8             	push 	hl
   98 00:4CC8             
   99 00:4CC8             	ld 		iy,(_IYTemp84)
  100 00:4CC8             	call 	_newline
  101 00:4CC8             	di
  102 00:4CC8             	ld 		(_IYTemp84),iy
  103 00:4CC8             
  104 00:4CC8             	pop 	hl
  105 00:4CC8             	pop 	de
  106 00:4CC8             	pop 	bc
  107 00:4CC8             	exx
  108 00:4CC8             	pop 	iy
  109 00:4CC8             	pop 	ix
  110 00:4CC8             	pop 	hl
  111 00:4CC8             	pop 	de
  112 00:4CC8             	pop 	bc
  113 00:4CC8             	pop 	af
  114 00:4CC8             	ret
  115 00:4CC8             
  116 00:4CC8             ; ***************************************************************************************
  117 00:4CC8             ;
  118 00:4CC8             ;									Get time into HL'HL
  119 00:4CC8             ;
  120 00:4CC8             ; ***************************************************************************************
  121 00:4CC8             
  122 00:4CC8             SYSGetTimer:
  123 00:4CC8             	ld 		hl,$1234
  124 00:4CC8             	exx
  125 00:4CC8             	ld 		hl,$5678
  126 00:4CC8             	exx
  127 00:4CC8             	ret
  128 00:4CC8             
  129 00:4CC8             #endif
  130 00:4CC8 -  -  -  -  
  131 00:4CC8 -  -  -  -  ; ***************************************************************************************
  132 00:4CC8 -  -  -  -  ;
  133 00:4CC8 -  -  -  -  ;									Changes and Updates
  134 00:4CC8 -  -  -  -  ;
  135 00:4CC8 -  -  -  -  ; ***************************************************************************************
  136 00:4CC8 -  -  -  -  ;
  137 00:4CC8 -  -  -  -  ;		Date			Notes
  138 00:4CC8 -  -  -  -  ;		==== 			=====
  139 00:4CC8 -  -  -  -  ;
  140 00:4CC8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4CC8 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4CC8 -  -  -  -  ; ***************************************************************************************
    2 00:4CC8 -  -  -  -  ; ***************************************************************************************
    3 00:4CC8 -  -  -  -  ;
    4 00:4CC8 -  -  -  -  ;		Name : 		basic.asm
    5 00:4CC8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CC8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CC8 -  -  -  -  ;		Reviewed :	No
    8 00:4CC8 -  -  -  -  ;		Purpose :	Main program.
    9 00:4CC8 -  -  -  -  ;
   10 00:4CC8 -  -  -  -  ; ***************************************************************************************
   11 00:4CC8 -  -  -  -  ; ***************************************************************************************
   12 00:4CC8 -  -  -  -  
   13 00:4CC8 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 21 01 00 BD 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 06 02 00 
              C0 19 80 0D 
              03 00 BC 19 
              AA 8A 41 AB 
              A7 C0 19 80 
              11 04 00 BC 
              02 95 44 A5 
              A6 13 04 12 
              13 95 48 A5 
              80 0D 05 00 
              BC 00 AA 8A 
              41 AB A7 C0 
              00 80 00 -  	.db	$21,$01,$00,$bd,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$06,$02,$00,$c0,$19,$80,$0d,$03,$00,$bc,$19,$aa,$8a,$41,$ab,$a7,$c0,$19,$80,$11,$04,$00,$bc,$02,$95,$44,$a5,$a6,$13,$04,$12,$13,$95,$48,$a5,$80,$0d,$05,$00,$bc,$00,$aa,$8a,$41,$ab,$a7,$c0,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5053 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6053 -  -  -  -  EndTestInstance:
   18 00:6053 -  -  -  -  		
   19 00:6053 -  -  -  -  ; ***************************************************************************************
   20 00:6053 -  -  -  -  ;
   21 00:6053 -  -  -  -  ;									Changes and Updates
   22 00:6053 -  -  -  -  ;
   23 00:6053 -  -  -  -  ; ***************************************************************************************
   24 00:6053 -  -  -  -  ;
   25 00:6053 -  -  -  -  ;		Date			Notes
   26 00:6053 -  -  -  -  ;		==== 			=====
   27 00:6053 -  -  -  -  ;
   28 00:6053 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:6053 -  -  -  -  FinalAddress:
