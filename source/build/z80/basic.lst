    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ac ; repeat
   54 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ad ; until
   55 00:0000 -  -  -  -  #define KWD_IF                              	$00ae ; if
   56 00:0000 -  -  -  -  #define KWD_THEN                            	$00af ; then
   57 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b0 ; else
   58 00:0000 -  -  -  -  #define KWD_FOR                             	$00b1 ; for
   59 00:0000 -  -  -  -  #define KWD_TO                              	$00b2 ; to
   60 00:0000 -  -  -  -  #define KWD_STEP                            	$00b3 ; step
   61 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b4 ; next
   62 00:0000 -  -  -  -  #define KWD_DEF                             	$00b5 ; def
   63 00:0000 -  -  -  -  #define KWD_PROC                            	$00b6 ; proc
   64 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b7 ; endproc
   65 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b8 ; gosub
   66 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b9 ; return
   67 00:0000 -  -  -  -  #define KWD_GOTO                            	$00ba ; goto
   68 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bb ; local
   69 00:0000 -  -  -  -  #define KWD_DIM                             	$00bc ; dim
   70 00:0000 -  -  -  -  #define KWD_REM                             	$00bd ; rem
   71 00:0000 -  -  -  -  #define KWD_LET                             	$00be ; let
   72 00:0000 -  -  -  -  #define KWD_VDU                             	$00bf ; vdu
   73 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c0 ; print
   74 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c1 ; load
   75 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c2 ; save
   76 00:0000 -  -  -  -  #define KWD_LIST                            	$00c3 ; list
   77 00:0000 -  -  -  -  #define KWD_NEW                             	$00c4 ; new
   78 00:0000 -  -  -  -  #define KWD_RUN                             	$00c5 ; run
   79 00:0000 -  -  -  -  #define KWD_READ                            	$00c6 ; read
   80 00:0000 -  -  -  -  #define KWD_DATA                            	$00c7 ; data
   81 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c8 ; restore
   82 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c9 ; assert
   83 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00ca ; clear
   84 00:0000 -  -  -  -  #define KWD_END                             	$00cb ; end
   85 00:0000 -  -  -  -  #define KWD_STOP                            	$00cc ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 48 4C -  		call 	SYSInitialise
   44 00:4006 11 00 50 -  		ld 		de,TestInstance
   45 00:4009 21 6C 60 -  		ld 		hl,EndTestInstance
   46 00:400C CD 55 47 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 59 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 23 42 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 50 4C -  		call 	SYSPrintChar
   56 00:401C CD 4E 4C -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 05 C3 CA 
              42 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 06 C3 CA 
              42 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  											; must be power of 2. 
   24 00:4029 -  -  -  -  
   25 00:4029 -  -  -  -  ; ***************************************************************************************
   26 00:4029 -  -  -  -  ;
   27 00:4029 -  -  -  -  ;								Defines the current instance
   28 00:4029 -  -  -  -  ;
   29 00:4029 -  -  -  -  ; ***************************************************************************************
   30 00:4029 -  -  -  -  
   31 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:4029 00 00 00 00 		.dw 	0,0
   33 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:402D 00 00 00 00 		.dw 	0,0		
   35 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4031 00 00 00 00 		.dw 	0,0 							
   37 00:4035 -  -  -  -  
   38 00:4035 -  -  -  -  ; ***************************************************************************************
   39 00:4035 -  -  -  -  ;
   40 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4035 -  -  -  -  ;
   42 00:4035 -  -  -  -  ; ***************************************************************************************
   43 00:4035 -  -  -  -  
   44 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4035 00 00 00 00 		.dw 	0,0
   46 00:4039 -  -  -  -  
   47 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:4039 00 00 00 00 		.dw 	0,0		
   49 00:403D -  -  -  -  
   50 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:403D 00 00 00 00 		.dw 	0,0
   52 00:4041 -  -  -  -  
   53 00:4041 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4041 00 00 00 00 		.dw 	0,0
   55 00:4045 -  -  -  -  
   56 00:4045 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4045 00 00 00 00 		.dw 	0,0		
   58 00:4049 -  -  -  -  
   59 00:4049 -  -  -  -  ;
   60 00:4049 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:4049 -  -  -  -  ;
   62 00:4049 -  -  -  -  
   63 00:4049 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:4049 00 00 00 00 		.dw 	0,0
   65 00:404D -  -  -  -  		
   66 00:404D -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:404D 00 00 00 00 		.dw 	0,0
   68 00:4051 -  -  -  -  
   69 00:4051 -  -  -  -  ; ***************************************************************************************
   70 00:4051 -  -  -  -  ;
   71 00:4051 -  -  -  -  ;										Run variables
   72 00:4051 -  -  -  -  ;
   73 00:4051 -  -  -  -  ; ***************************************************************************************
   74 00:4051 -  -  -  -  
   75 00:4051 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4051 00 00 00 00 		.dw 	0,0
   77 00:4055 -  -  -  -  		
   78 00:4055 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4055 00 00 00 00 		.dw 	0,0
   80 00:4059 -  -  -  -  
   81 00:4059 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:4059 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:405F -  -  -  -  
   84 00:405F -  -  -  -  AConvert: 									; used for address conversions.
   85 00:405F 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4065 -  -  -  -  		
   87 00:4065 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4065 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4075 -  -  -  -  
   90 00:4075 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4075 00 00 -  -  		.dw 	0
   92 00:4077 -  -  -  -  
   93 00:4077 -  -  -  -  ; ***************************************************************************************
   94 00:4077 -  -  -  -  ;
   95 00:4077 -  -  -  -  ;									Variable Information
   96 00:4077 -  -  -  -  ;
   97 00:4077 -  -  -  -  ; ***************************************************************************************
   98 00:4077 -  -  -  -  
   99 00:4077 -  -  -  -  VarNameStart: 								; first byte of name
  100 00:4077 00 00 00 00 		.dw 	0,0
  101 00:407B -  -  -  -  VarHash: 									; name hash value
  102 00:407B 00 00 -  -  		.dw 	0		
  103 00:407D -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:407D 00 00 00 00 		.dw 	0,0
  105 00:4081 -  -  -  -  		
  106 00:4081 -  -  -  -  ; ***************************************************************************************
  107 00:4081 -  -  -  -  ;
  108 00:4081 -  -  -  -  ;										  Buffers
  109 00:4081 -  -  -  -  ;
  110 00:4081 -  -  -  -  ; ***************************************************************************************
  111 00:4081 -  -  -  -  
  112 00:4081 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:4081 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:4091 -  -  -  -  
  115 00:4091 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:4091 00 00 -  -  		.dw 	0
  117 00:4093 -  -  -  -  
  118 00:4093 -  -  -  -  ConvertBuffer: 								; general usage
  119 00:4093 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:40D3 -  -  -  -  
  121 00:40D3 -  -  -  -  ; ***************************************************************************************
  122 00:40D3 -  -  -  -  ;
  123 00:40D3 -  -  -  -  ;									Changes and Updates
  124 00:40D3 -  -  -  -  ;
  125 00:40D3 -  -  -  -  ; ***************************************************************************************
  126 00:40D3 -  -  -  -  ;
  127 00:40D3 -  -  -  -  ;		Date			Notes
  128 00:40D3 -  -  -  -  ;		==== 			=====
  129 00:40D3 -  -  -  -  ;
  130 00:40D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D3 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D3 -  -  -  -  ; ***************************************************************************************
    2 00:40D3 -  -  -  -  ; ***************************************************************************************
    3 00:40D3 -  -  -  -  ;
    4 00:40D3 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D3 -  -  -  -  ;		Reviewed :	No
    8 00:40D3 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D3 -  -  -  -  ;
   10 00:40D3 -  -  -  -  ; ***************************************************************************************
   11 00:40D3 -  -  -  -  ; ***************************************************************************************
   12 00:40D3 -  -  -  -  
   13 00:40D3 -  -  -  -  ; ***************************************************************************************
   14 00:40D3 -  -  -  -  ;
   15 00:40D3 -  -  -  -  ;									ASSERT command
   16 00:40D3 -  -  -  -  ;
   17 00:40D3 -  -  -  -  ; ***************************************************************************************
   18 00:40D3 -  -  -  -  
   19 00:40D3 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D3 CD AF 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40D6 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40DC C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40DD 3E 01 C3 CA 
              42 -  -  -  		ERR_ASSERT
   24 00:40E2 -  -  -  -  
   25 00:40E2 -  -  -  -  ; ***************************************************************************************
   26 00:40E2 -  -  -  -  ;
   27 00:40E2 -  -  -  -  ;									Changes and Updates
   28 00:40E2 -  -  -  -  ;
   29 00:40E2 -  -  -  -  ; ***************************************************************************************
   30 00:40E2 -  -  -  -  ;
   31 00:40E2 -  -  -  -  ;		Date			Notes
   32 00:40E2 -  -  -  -  ;		==== 			=====
   33 00:40E2 -  -  -  -  ;
   34 00:40E2 -  -  -  -  ; ***************************************************************************************
   35 00:40E2 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E2 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E2 -  -  -  -  ; ***************************************************************************************
    2 00:40E2 -  -  -  -  ; ***************************************************************************************
    3 00:40E2 -  -  -  -  ;
    4 00:40E2 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E2 -  -  -  -  ;		Reviewed :	No
    8 00:40E2 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E2 -  -  -  -  ;
   10 00:40E2 -  -  -  -  ; ***************************************************************************************
   11 00:40E2 -  -  -  -  ; ***************************************************************************************
   12 00:40E2 -  -  -  -  
   13 00:40E2 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E2 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E2 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E2 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40E2 -  -  -  -  BadCmd_To: 			;; [to]
   18 00:40E2 C3 27 43 -  		jp 		SyntaxError
   19 00:40E5 -  -  -  -  
   20 00:40E5 -  -  -  -  ; ***************************************************************************************
   21 00:40E5 -  -  -  -  ;
   22 00:40E5 -  -  -  -  ;									Changes and Updates
   23 00:40E5 -  -  -  -  ;
   24 00:40E5 -  -  -  -  ; ***************************************************************************************
   25 00:40E5 -  -  -  -  ;
   26 00:40E5 -  -  -  -  ;		Date			Notes
   27 00:40E5 -  -  -  -  ;		==== 			=====
   28 00:40E5 -  -  -  -  ;
   29 00:40E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40E5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40E5 -  -  -  -  ; ***************************************************************************************
    2 00:40E5 -  -  -  -  ; ***************************************************************************************
    3 00:40E5 -  -  -  -  ;
    4 00:40E5 -  -  -  -  ;		Name : 		colon.asm
    5 00:40E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40E5 -  -  -  -  ;		Reviewed :	No
    8 00:40E5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40E5 -  -  -  -  ;
   10 00:40E5 -  -  -  -  ; ***************************************************************************************
   11 00:40E5 -  -  -  -  ; ***************************************************************************************
   12 00:40E5 -  -  -  -  
   13 00:40E5 -  -  -  -  ; ***************************************************************************************
   14 00:40E5 -  -  -  -  ;
   15 00:40E5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40E5 -  -  -  -  ;
   17 00:40E5 -  -  -  -  ; ***************************************************************************************
   18 00:40E5 -  -  -  -  
   19 00:40E5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40E5 C9 -  -  -  		ret
   21 00:40E6 -  -  -  -  
   22 00:40E6 -  -  -  -  ; ***************************************************************************************
   23 00:40E6 -  -  -  -  ;
   24 00:40E6 -  -  -  -  ;									Changes and Updates
   25 00:40E6 -  -  -  -  ;
   26 00:40E6 -  -  -  -  ; ***************************************************************************************
   27 00:40E6 -  -  -  -  ;
   28 00:40E6 -  -  -  -  ;		Date			Notes
   29 00:40E6 -  -  -  -  ;		==== 			=====
   30 00:40E6 -  -  -  -  ;
   31 00:40E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40E6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40E6 -  -  -  -  ; ***************************************************************************************
    2 00:40E6 -  -  -  -  ; ***************************************************************************************
    3 00:40E6 -  -  -  -  ;
    4 00:40E6 -  -  -  -  ;		Name : 		dim.asm
    5 00:40E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:40E6 -  -  -  -  ;		Reviewed :	No
    8 00:40E6 -  -  -  -  ;		Purpose :	Dim command
    9 00:40E6 -  -  -  -  ;
   10 00:40E6 -  -  -  -  ; ***************************************************************************************
   11 00:40E6 -  -  -  -  ; ***************************************************************************************
   12 00:40E6 -  -  -  -  
   13 00:40E6 -  -  -  -  ; ***************************************************************************************
   14 00:40E6 -  -  -  -  ;
   15 00:40E6 -  -  -  -  ;		DIM command
   16 00:40E6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 00:40E6 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 00:40E6 -  -  -  -  ;								(can be comma chained)
   19 00:40E6 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 00:40E6 -  -  -  -  ;
   21 00:40E6 -  -  -  -  ; ***************************************************************************************
   22 00:40E6 -  -  -  -  
   23 00:40E6 -  -  -  -  Command_DIM: 	;; [dim]
   24 00:40E6 -  -  -  -  		;
   25 00:40E6 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   26 00:40E6 -  -  -  -  		; 		we cannot just get a l-value here.
   27 00:40E6 -  -  -  -  		;
   28 00:40E6 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   29 00:40E8 D1 -  -  -  		pop 	de
   30 00:40E9 -  -  -  -  		;
   31 00:40E9 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   32 00:40EC FE 26 -  -  		cp 		IDENTIFIER_END 				
   33 00:40EE D2 27 43 -  		jp 		nc,SyntaxError 				; no identifier here
   34 00:40F1 -  -  -  -  _DISkip:
   35 00:40F1 DD 23 -  -  		inc 	ix 							; skip over identifier
   36 00:40F3 DD 7E 00 -  		ld 		a,(ix+0)
   37 00:40F6 FE 26 -  -  		cp 		IDENTIFIER_END
   38 00:40F8 38 F7 -  -  		jr 		c,_DISkip 					
   39 00:40FA -  -  -  -  		;
   40 00:40FA DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   41 00:40FD FE 95 -  -  		cp 		KWD_LPAREN
   42 00:40FF F5 -  -  -  		push 	af 							; call whichever function depending.
   43 00:4100 CC 57 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   44 00:4103 F1 -  -  -  		pop 	af
   45 00:4104 C4 16 41 -  		call 	nz,DimensionAllocate
   46 00:4107 -  -  -  -  		;
   47 00:4107 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   48 00:410A FE A6 -  -  		cp 		KWD_COMMA
   49 00:410C C0 -  -  -  		ret 	nz
   50 00:410D DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   51 00:410F 18 D5 -  -  		jr 		Command_DIM
   52 00:4111 -  -  -  -  
   53 00:4111 -  -  -  -  _CDError:
   54 00:4111 3E 04 C3 CA 
              42 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   55 00:4116 -  -  -  -  
   56 00:4116 -  -  -  -  ; ***************************************************************************************
   57 00:4116 -  -  -  -  ;
   58 00:4116 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   59 00:4116 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   60 00:4116 -  -  -  -  ;
   61 00:4116 -  -  -  -  ; ***************************************************************************************
   62 00:4116 -  -  -  -  
   63 00:4116 -  -  -  -  DimensionAllocate:
   64 00:4116 D5 -  -  -  		push 	de 							; save start on stack
   65 00:4117 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   66 00:4119 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   67 00:411B 32 75 40 -  		ld 		(AllowAutoCreate),a
   68 00:411E CD B7 47 -  		call 	FindVariable 				; find/create the variable appropriately.
   69 00:4121 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   70 00:4123 28 EC -  -  		jr 		z,_CDError
   71 00:4125 CB 41 -  -  		bit 	CIsString,c
   72 00:4127 20 E8 -  -  		jr 		nz,_CDError
   73 00:4129 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   74 00:412B E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   75 00:412C 3E AA -  -  		ld  	a,KWD_LSQPAREN
   76 00:412E CD BF 42 -  		call 	CheckNextA 					; check for [
   77 00:4131 CD AF 44 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   78 00:4134 3E AB -  -  		ld  	a,KWD_RSQPAREN
   79 00:4136 CD BF 42 -  		call 	CheckNextA 					; check for ]
   80 00:4139 23 -  -  -  		inc 	hl 							; increment HL,HL'
   81 00:413A 7C -  -  -  		ld 		a,h
   82 00:413B B5 -  -  -  		or 		l
   83 00:413C 20 03 -  -  		jr 		nz,_DANoCarry
   84 00:413E D9 -  -  -  		exx
   85 00:413F 23 -  -  -  		inc 	hl
   86 00:4140 D9 -  -  -  		exx
   87 00:4141 -  -  -  -  _DANoCarry:
   88 00:4141 D9 -  -  -  		exx 								; check if HL' is zero
   89 00:4142 7C -  -  -  		ld 		a,h
   90 00:4143 B5 -  -  -  		or 		l
   91 00:4144 D9 -  -  -  		exx
   92 00:4145 20 CA -  -  		jr 		nz,_CDError
   93 00:4147 CD F7 46 -  		call 	AllocateBytes 				; allocate that much memory.
   94 00:414A EB -  -  -  		ex 		de,hl 						; put address into UDE
   95 00:414B E1 -  -  -  		pop 	hl 							; this is where it goes.
   96 00:414C 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   97 00:4152 AF -  -  -  		xor 	a 							; autocreate off
   98 00:4153 32 75 40 -  		ld 		(AllowAutoCreate),a
   99 00:4156 C9 -  -  -  		ret
  100 00:4157 -  -  -  -  
  101 00:4157 -  -  -  -  ; ***************************************************************************************
  102 00:4157 -  -  -  -  ;
  103 00:4157 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  104 00:4157 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  105 00:4157 -  -  -  -  ;
  106 00:4157 -  -  -  -  ; ***************************************************************************************
  107 00:4157 -  -  -  -  
  108 00:4157 -  -  -  -  DimensionArray:
  109 00:4157 3E 0F C3 CA 
              42 -  -  -  		ERR_TODO
  110 00:415C -  -  -  -  
  111 00:415C -  -  -  -  
  112 00:415C -  -  -  -  ; ***************************************************************************************
  113 00:415C -  -  -  -  ;
  114 00:415C -  -  -  -  ;									Changes and Updates
  115 00:415C -  -  -  -  ;
  116 00:415C -  -  -  -  ; ***************************************************************************************
  117 00:415C -  -  -  -  ;
  118 00:415C -  -  -  -  ;		Date			Notes
  119 00:415C -  -  -  -  ;		==== 			=====
  120 00:415C -  -  -  -  ;
  121 00:415C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:415C -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:415C -  -  -  -  ; ***************************************************************************************
    2 00:415C -  -  -  -  ; ***************************************************************************************
    3 00:415C -  -  -  -  ;
    4 00:415C -  -  -  -  ;		Name : 		end.asm
    5 00:415C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:415C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:415C -  -  -  -  ;		Reviewed :	No
    8 00:415C -  -  -  -  ;		Purpose :	End command
    9 00:415C -  -  -  -  ;
   10 00:415C -  -  -  -  ; ***************************************************************************************
   11 00:415C -  -  -  -  ; ***************************************************************************************
   12 00:415C -  -  -  -  
   13 00:415C -  -  -  -  ; ***************************************************************************************
   14 00:415C -  -  -  -  ;
   15 00:415C -  -  -  -  ;										END command
   16 00:415C -  -  -  -  ;
   17 00:415C -  -  -  -  ; ***************************************************************************************
   18 00:415C -  -  -  -  
   19 00:415C -  -  -  -  Command_END: 	;; [end]
   20 00:415C 3E 00 C3 CA 
              42 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:4161 -  -  -  -  
   22 00:4161 -  -  -  -  ; ***************************************************************************************
   23 00:4161 -  -  -  -  ;
   24 00:4161 -  -  -  -  ;									Changes and Updates
   25 00:4161 -  -  -  -  ;
   26 00:4161 -  -  -  -  ; ***************************************************************************************
   27 00:4161 -  -  -  -  ;
   28 00:4161 -  -  -  -  ;		Date			Notes
   29 00:4161 -  -  -  -  ;		==== 			=====
   30 00:4161 -  -  -  -  ;
   31 00:4161 -  -  -  -  ; ***************************************************************************************
   32 00:4161 -  -  -  -  		
Listing for file "_build.asm"
   18 00:4161 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:4161 -  -  -  -  ; ***************************************************************************************
    2 00:4161 -  -  -  -  ; ***************************************************************************************
    3 00:4161 -  -  -  -  ;
    4 00:4161 -  -  -  -  ;		Name : 		endofline.asm
    5 00:4161 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4161 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4161 -  -  -  -  ;		Reviewed :	None
    8 00:4161 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:4161 -  -  -  -  ;
   10 00:4161 -  -  -  -  ; ***************************************************************************************
   11 00:4161 -  -  -  -  ; ***************************************************************************************
   12 00:4161 -  -  -  -  
   13 00:4161 -  -  -  -  ; ***************************************************************************************
   14 00:4161 -  -  -  -  ;
   15 00:4161 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:4161 -  -  -  -  ;
   17 00:4161 -  -  -  -  ; ***************************************************************************************
   18 00:4161 -  -  -  -  
   19 00:4161 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:4161 DD 2A 51 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4165 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:4168 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:416B DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:416D -  -  -  -  		;
   25 00:416D ED 7B 55 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:4171 C3 32 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:4174 -  -  -  -  
   28 00:4174 -  -  -  -  ; ***************************************************************************************
   29 00:4174 -  -  -  -  ;
   30 00:4174 -  -  -  -  ;									Changes and Updates
   31 00:4174 -  -  -  -  ;
   32 00:4174 -  -  -  -  ; ***************************************************************************************
   33 00:4174 -  -  -  -  ;
   34 00:4174 -  -  -  -  ;		Date			Notes
   35 00:4174 -  -  -  -  ;		==== 			=====
   36 00:4174 -  -  -  -  ;
   37 00:4174 -  -  -  -  ; ***************************************************************************************
   38 00:4174 -  -  -  -  		
Listing for file "_build.asm"
   19 00:4174 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:4174 -  -  -  -  ; ***************************************************************************************
    2 00:4174 -  -  -  -  ; ***************************************************************************************
    3 00:4174 -  -  -  -  ;
    4 00:4174 -  -  -  -  ;		Name : 		let.asm
    5 00:4174 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4174 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4174 -  -  -  -  ;		Reviewed :	No
    8 00:4174 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:4174 -  -  -  -  ;
   10 00:4174 -  -  -  -  ; ***************************************************************************************
   11 00:4174 -  -  -  -  ; ***************************************************************************************
   12 00:4174 -  -  -  -  
   13 00:4174 -  -  -  -  ; ***************************************************************************************
   14 00:4174 -  -  -  -  ;
   15 00:4174 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:4174 -  -  -  -  ;
   17 00:4174 -  -  -  -  ; ***************************************************************************************
   18 00:4174 -  -  -  -  
   19 00:4174 -  -  -  -  Command_LET: 	;; [let]
   20 00:4174 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:4177 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:4179 28 28 -  -  		jr 		z,_CLString
   23 00:417B FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:417D 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:417F 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:4181 32 75 40 -  		ld 		(AllowAutoCreate),a
   27 00:4184 -  -  -  -  _CLNoAuto:
   28 00:4184 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:4186 CD 40 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:4189 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:418B CA 27 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:418E E5 -  -  -  		push 	hl 							; save address on stack
   33 00:418F C5 -  -  -  		push 	bc 							; save type on stack
   34 00:4190 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:4191 32 75 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:4194 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:4196 CD BF 42 -  		call 	CheckNextA
   38 00:4199 -  -  -  -  
   39 00:4199 CD A9 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:419C -  -  -  -  
   41 00:419C D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:419D 43 -  -  -  		ld 		b,e 						
   43 00:419E D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:419F -  -  -  -  		;
   45 00:419F -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:419F -  -  -  -  		;
   47 00:419F CD A4 41 -  		call 	WriteHLToDE
   48 00:41A2 C9 -  -  -  		ret
   49 00:41A3 -  -  -  -  		;
   50 00:41A3 -  -  -  -  		; 		String assignment code.
   51 00:41A3 -  -  -  -  		;
   52 00:41A3 -  -  -  -  _CLString:
   53 00:41A3 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:41A4 -  -  -  -  
   55 00:41A4 -  -  -  -  ; ***************************************************************************************
   56 00:41A4 -  -  -  -  ;
   57 00:41A4 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:41A4 -  -  -  -  ;
   59 00:41A4 -  -  -  -  ; ***************************************************************************************
   60 00:41A4 -  -  -  -  
   61 00:41A4 -  -  -  -  WriteHLToDE:
   62 00:41A4 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:41A6 C2 1D 43 -  		jp 		nz,TypeMismatch
   64 00:41A9 -  -  -  -  		;
   65 00:41A9 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:41A9 -  -  -  -  		;		
   67 00:41A9 -  -  -  -  _WHDWriteNumber:
   68 00:41A9 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:41AA D9 -  -  -  		exx
   70 00:41AB EB -  -  -  		ex 		de,hl
   71 00:41AC D9 -  -  -  		exx
   72 00:41AD -  -  -  -  
   73 00:41AD 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:41AE 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:41AF 72 -  -  -  		ld 		(hl),d
   76 00:41B0 23 -  -  -  		inc 	hl
   77 00:41B1 E5 -  -  -  		push 	hl
   78 00:41B2 D9 -  -  -  		exx
   79 00:41B3 E1 -  -  -  		pop 	hl
   80 00:41B4 73 -  -  -  		ld 		(hl),e
   81 00:41B5 23 -  -  -  		inc 	hl
   82 00:41B6 72 -  -  -  		ld 		(hl),d
   83 00:41B7 D9 -  -  -  		exx
   84 00:41B8 -  -  -  -  
   85 00:41B8 C9 -  -  -  		ret
   86 00:41B9 -  -  -  -  
   87 00:41B9 -  -  -  -  ; ***************************************************************************************
   88 00:41B9 -  -  -  -  ;
   89 00:41B9 -  -  -  -  ;									Changes and Updates
   90 00:41B9 -  -  -  -  ;
   91 00:41B9 -  -  -  -  ; ***************************************************************************************
   92 00:41B9 -  -  -  -  ;
   93 00:41B9 -  -  -  -  ;		Date			Notes
   94 00:41B9 -  -  -  -  ;		==== 			=====
   95 00:41B9 -  -  -  -  ;
   96 00:41B9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:41B9 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:41B9 -  -  -  -  ; ***************************************************************************************
    2 00:41B9 -  -  -  -  ; ***************************************************************************************
    3 00:41B9 -  -  -  -  ;
    4 00:41B9 -  -  -  -  ;		Name : 		print.asm
    5 00:41B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41B9 -  -  -  -  ;		Reviewed :	No
    8 00:41B9 -  -  -  -  ;		Purpose :	Print command
    9 00:41B9 -  -  -  -  ;
   10 00:41B9 -  -  -  -  ; ***************************************************************************************
   11 00:41B9 -  -  -  -  ; ***************************************************************************************
   12 00:41B9 -  -  -  -  
   13 00:41B9 -  -  -  -  ; ***************************************************************************************
   14 00:41B9 -  -  -  -  ;
   15 00:41B9 -  -  -  -  ;										PRINT command
   16 00:41B9 -  -  -  -  ;
   17 00:41B9 -  -  -  -  ; ***************************************************************************************
   18 00:41B9 -  -  -  -  
   19 00:41B9 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:41B9 -  -  -  -  		;
   21 00:41B9 -  -  -  -  		;		Main loop
   22 00:41B9 -  -  -  -  		;
   23 00:41B9 -  -  -  -  _CPRLoop:
   24 00:41B9 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:41BC FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:41BE 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:41C0 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:41C2 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:41C4 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:41C6 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:41C8 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:41CA 28 26 -  -  		jr 		z,_CPRTab
   33 00:41CC FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:41CE 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:41D0 -  -  -  -  		;
   36 00:41D0 CD A9 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:41D3 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:41D5 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:41D7 -  -  -  -  		;
   40 00:41D7 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:41D9 -  -  -  -  _CPRPrintNumber:
   42 00:41D9 F5 -  -  -  		push 	af 							; print leading space
   43 00:41DA 3E 20 -  -  		ld 		a,' '
   44 00:41DC CD 50 4C -  		call 	SYSPrintChar
   45 00:41DF F1 -  -  -  		pop 	af
   46 00:41E0 01 93 40 -  		ld  	bc,ConvertBuffer
   47 00:41E3 C5 -  -  -  		push 	bc
   48 00:41E4 CD 02 4C -  		call 	Int32ToString 				; convert to string
   49 00:41E7 E1 -  -  -  		pop 	hl
   50 00:41E8 -  -  -  -  		;
   51 00:41E8 -  -  -  -  		; 		Print text at HL.
   52 00:41E8 -  -  -  -  		;
   53 00:41E8 -  -  -  -  _CPRPrintHL:
   54 00:41E8 CD 6E 47 -  		call 	PrintStringAtHL 			; print string out
   55 00:41EB 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:41ED -  -  -  -  		;
   57 00:41ED -  -  -  -  		; 		New line (')
   58 00:41ED -  -  -  -  		;
   59 00:41ED -  -  -  -  _CPRNewLine:
   60 00:41ED CD 6C 4C -  		call 	SYSPrintCRLF
   61 00:41F0 18 05 -  -  		jr 		_CPRCheckNext
   62 00:41F2 -  -  -  -  		;
   63 00:41F2 -  -  -  -  		; 		Tab command (,)
   64 00:41F2 -  -  -  -  		;
   65 00:41F2 -  -  -  -  _CPRTab:
   66 00:41F2 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:41F4 CD 50 4C -  		call 	SYSPrintChar
   68 00:41F7 -  -  -  -  		;
   69 00:41F7 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:41F7 -  -  -  -  		;
   71 00:41F7 -  -  -  -  _CPRCheckNext:
   72 00:41F7 DD 23 -  -  		inc 	ix 							; consume current
   73 00:41F9 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:41FC FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:41FE C8 -  -  -  		ret 	z
   76 00:41FF FE A7 -  -  		cp 		KWD_COLON
   77 00:4201 C8 -  -  -  		ret 	z
   78 00:4202 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:4204 -  -  -  -  		;
   80 00:4204 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:4204 -  -  -  -  		;
   82 00:4204 -  -  -  -  _CPRExitNL:
   83 00:4204 CD 6C 4C -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:4207 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:4208 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4208 -  -  -  -  ; ***************************************************************************************
    2 00:4208 -  -  -  -  ; ***************************************************************************************
    3 00:4208 -  -  -  -  ;
    4 00:4208 -  -  -  -  ;		Name : 		rem.asm
    5 00:4208 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4208 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4208 -  -  -  -  ;		Reviewed :	No
    8 00:4208 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4208 -  -  -  -  ;
   10 00:4208 -  -  -  -  ; ***************************************************************************************
   11 00:4208 -  -  -  -  ; ***************************************************************************************
   12 00:4208 -  -  -  -  
   13 00:4208 -  -  -  -  ; ***************************************************************************************
   14 00:4208 -  -  -  -  ;
   15 00:4208 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4208 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4208 -  -  -  -  ;
   18 00:4208 -  -  -  -  ; ***************************************************************************************
   19 00:4208 -  -  -  -  
   20 00:4208 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4208 -  -  -  -  Command_REM2: 	;; [']
   22 00:4208 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:420B DD 23 -  -  		inc 	ix
   24 00:420D FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:420F C8 -  -  -  		ret 	z
   26 00:4210 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:4212 C8 -  -  -  		ret 	z
   28 00:4213 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4215 C2 27 43 -  		jp 		nz,SyntaxError
   30 00:4218 -  -  -  -  		;		
   31 00:4218 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:421B DD 5E 00 -  		ld 		e,(ix+0)
   33 00:421E 13 -  -  -  		inc 	de 
   34 00:421F 13 -  -  -  		inc 	de
   35 00:4220 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4222 C9 -  -  -  		ret
   37 00:4223 -  -  -  -  
   38 00:4223 -  -  -  -  ; ***************************************************************************************
   39 00:4223 -  -  -  -  ;
   40 00:4223 -  -  -  -  ;									Changes and Updates
   41 00:4223 -  -  -  -  ;
   42 00:4223 -  -  -  -  ; ***************************************************************************************
   43 00:4223 -  -  -  -  ;
   44 00:4223 -  -  -  -  ;		Date			Notes
   45 00:4223 -  -  -  -  ;		==== 			=====
   46 00:4223 -  -  -  -  ;
   47 00:4223 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:4223 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4223 -  -  -  -  ; ***************************************************************************************
    2 00:4223 -  -  -  -  ; ***************************************************************************************
    3 00:4223 -  -  -  -  ;
    4 00:4223 -  -  -  -  ;		Name : 		run.asm
    5 00:4223 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4223 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4223 -  -  -  -  ;		Reviewed :	No
    8 00:4223 -  -  -  -  ;		Purpose :	Run command
    9 00:4223 -  -  -  -  ;
   10 00:4223 -  -  -  -  ; ***************************************************************************************
   11 00:4223 -  -  -  -  ; ***************************************************************************************
   12 00:4223 -  -  -  -  
   13 00:4223 -  -  -  -  ; ***************************************************************************************
   14 00:4223 -  -  -  -  ;
   15 00:4223 -  -  -  -  ;										RUN command
   16 00:4223 -  -  -  -  ;
   17 00:4223 -  -  -  -  ; ***************************************************************************************
   18 00:4223 -  -  -  -  
   19 00:4223 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4223 CD 14 47 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4226 -  -  -  -  
   22 00:4226 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:422A ED 73 55 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:422E AF -  -  -  		xor 	a
   25 00:422F 32 75 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:4232 -  -  -  -  		;
   27 00:4232 -  -  -  -  		; 		New line at IX.
   28 00:4232 -  -  -  -  		;
   29 00:4232 -  -  -  -  CRNewLine:
   30 00:4232 DD 22 51 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:4236 -  -  -  -  		;
   32 00:4236 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:4239 B7 -  -  -  		or 		a
   34 00:423A CA 5C 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:423D -  -  -  -  		;
   36 00:423D DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:423F DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:4241 DD 23 -  -  		inc 	ix
   39 00:4243 -  -  -  -  		;
   40 00:4243 -  -  -  -  		; 		New command at IX
   41 00:4243 -  -  -  -  		;
   42 00:4243 -  -  -  -  _CRNewCommand:	
   43 00:4243 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:4246 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:4247 F2 7B 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:424A -  -  -  -  		;
   47 00:424A FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:424C 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:424E FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:4250 D2 6C 42 -  		jp 		nc,_CRAlternateLets
   51 00:4253 -  -  -  -  		;
   52 00:4253 -  -  -  -  _CRDoCommand:		
   53 00:4253 E6 7F 21 00 
              00 6F 29 11 
              CC 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:4265 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:4267 CD 59 40 -  		call 	JumpCode 					; call the routine.
   56 00:426A 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:426C -  -  -  -  		;
   58 00:426C -  -  -  -  		; 		Do CALL (HL)
   59 00:426C -  -  -  -  		;
   60 00:426C -  -  -  -  		;
   61 00:426C -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:426C -  -  -  -  		;		
   63 00:426C -  -  -  -  _CRAlternateLets:		
   64 00:426C FE 83 -  -  		cp 		KWD_PLING
   65 00:426E 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:4270 FE 84 -  -  		cp 		KWD_QMARK
   67 00:4272 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:4274 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:4276 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:4278 C3 27 43 -  		jp 		SyntaxError
   71 00:427B -  -  -  -  		;
   72 00:427B -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:427B -  -  -  -  		;
   74 00:427B -  -  -  -  _CRAssignmentHandler:		
   75 00:427B FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:427D D2 27 43 -  		jp 		nc,SyntaxError
   77 00:4280 -  -  -  -  _CRAssignmentLet:		
   78 00:4280 CD 74 41 -  		call	Command_LET 				; do LET.
   79 00:4283 C3 43 42 -  		jp 		_CRNewCommand
   80 00:4286 -  -  -  -  
   81 00:4286 -  -  -  -  ; ***************************************************************************************
   82 00:4286 -  -  -  -  ;
   83 00:4286 -  -  -  -  ;									Changes and Updates
   84 00:4286 -  -  -  -  ;
   85 00:4286 -  -  -  -  ; ***************************************************************************************
   86 00:4286 -  -  -  -  ;
   87 00:4286 -  -  -  -  ;		Date			Notes
   88 00:4286 -  -  -  -  ;		==== 			=====
   89 00:4286 -  -  -  -  ;
   90 00:4286 -  -  -  -  ; ***************************************************************************************
   91 00:4286 -  -  -  -  		
Listing for file "_build.asm"
   23 00:4286 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:4286 -  -  -  -  ; ***************************************************************************************
    2 00:4286 -  -  -  -  ; ***************************************************************************************
    3 00:4286 -  -  -  -  ;
    4 00:4286 -  -  -  -  ;		Name : 		stop.asm
    5 00:4286 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4286 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4286 -  -  -  -  ;		Reviewed :	No
    8 00:4286 -  -  -  -  ;		Purpose :	Stop command
    9 00:4286 -  -  -  -  ;
   10 00:4286 -  -  -  -  ; ***************************************************************************************
   11 00:4286 -  -  -  -  ; ***************************************************************************************
   12 00:4286 -  -  -  -  
   13 00:4286 -  -  -  -  ; ***************************************************************************************
   14 00:4286 -  -  -  -  ;
   15 00:4286 -  -  -  -  ;										STOP command
   16 00:4286 -  -  -  -  ;
   17 00:4286 -  -  -  -  ; ***************************************************************************************
   18 00:4286 -  -  -  -  
   19 00:4286 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:4286 3E 0D C3 CA 
              42 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:428B -  -  -  -  
   22 00:428B -  -  -  -  ; ***************************************************************************************
   23 00:428B -  -  -  -  ;
   24 00:428B -  -  -  -  ;									Changes and Updates
   25 00:428B -  -  -  -  ;
   26 00:428B -  -  -  -  ; ***************************************************************************************
   27 00:428B -  -  -  -  ;
   28 00:428B -  -  -  -  ;		Date			Notes
   29 00:428B -  -  -  -  ;		==== 			=====
   30 00:428B -  -  -  -  ;
   31 00:428B -  -  -  -  ; ***************************************************************************************
   32 00:428B -  -  -  -  		
Listing for file "_build.asm"
   24 00:428B -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:428B -  -  -  -  ; ***************************************************************************************
    2 00:428B -  -  -  -  ; ***************************************************************************************
    3 00:428B -  -  -  -  ;
    4 00:428B -  -  -  -  ;		Name : 		charcheck.asm
    5 00:428B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:428B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:428B -  -  -  -  ;		Reviewed :	No
    8 00:428B -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:428B -  -  -  -  ;
   10 00:428B -  -  -  -  ; ***************************************************************************************
   11 00:428B -  -  -  -  ; ***************************************************************************************
   12 00:428B -  -  -  -  
   13 00:428B -  -  -  -  ; ***************************************************************************************
   14 00:428B -  -  -  -  ;
   15 00:428B -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:428B -  -  -  -  ;
   17 00:428B -  -  -  -  ; ***************************************************************************************
   18 00:428B -  -  -  -  
   19 00:428B -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:428B             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:428B             		inc 	ix
   22 00:428B             		cp 		ch 							; exit if matches
   23 00:428B             		ret 	z
   24 00:428B             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:428B             		jp 		ErrorHandler
   26 00:428B             #endmacro
   27 00:428B -  -  -  -  
   28 00:428B -  -  -  -  CheckLeftBracket:
   29 00:428B DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 CA 
              42 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4298 -  -  -  -  
   31 00:4298 -  -  -  -  CheckRightBracket:
   32 00:4298 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 CA 
              42 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:42A5 -  -  -  -  
   34 00:42A5 -  -  -  -  CheckDollar:
   35 00:42A5 DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 CA 
              42 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:42B2 -  -  -  -  		
   37 00:42B2 -  -  -  -  CheckComma:
   38 00:42B2 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 CA 
              42 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:42BF -  -  -  -  
   40 00:42BF -  -  -  -  ; ***************************************************************************************
   41 00:42BF -  -  -  -  ;
   42 00:42BF -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:42BF -  -  -  -  ;
   44 00:42BF -  -  -  -  ; ***************************************************************************************
   45 00:42BF -  -  -  -  
   46 00:42BF -  -  -  -  CheckNextA:
   47 00:42BF DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:42C2 DD 23 -  -  		inc 	ix 							; skip character
   49 00:42C4 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:42C5 3E 0E C3 CA 
              42 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:42CA -  -  -  -  		
   52 00:42CA -  -  -  -  ; ***************************************************************************************
   53 00:42CA -  -  -  -  ;
   54 00:42CA -  -  -  -  ;									Changes and Updates
   55 00:42CA -  -  -  -  ;
   56 00:42CA -  -  -  -  ; ***************************************************************************************
   57 00:42CA -  -  -  -  ;
   58 00:42CA -  -  -  -  ;		Date			Notes
   59 00:42CA -  -  -  -  ;		==== 			=====
   60 00:42CA -  -  -  -  ;
   61 00:42CA -  -  -  -  ; ***************************************************************************************
   62 00:42CA -  -  -  -  		
Listing for file "_build.asm"
   25 00:42CA -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:42CA -  -  -  -  ; ***************************************************************************************
    2 00:42CA -  -  -  -  ; ***************************************************************************************
    3 00:42CA -  -  -  -  ;
    4 00:42CA -  -  -  -  ;		Name : 		errors.asm
    5 00:42CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CA -  -  -  -  ;		Reviewed :	No
    8 00:42CA -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:42CA -  -  -  -  ;
   10 00:42CA -  -  -  -  ; ***************************************************************************************
   11 00:42CA -  -  -  -  ; ***************************************************************************************
   12 00:42CA -  -  -  -  
   13 00:42CA -  -  -  -  ; ***************************************************************************************
   14 00:42CA -  -  -  -  ;
   15 00:42CA -  -  -  -  ;								Error handler, message A 
   16 00:42CA -  -  -  -  ;
   17 00:42CA -  -  -  -  ; ***************************************************************************************
   18 00:42CA -  -  -  -  
   19 00:42CA -  -  -  -  ErrorHandler:
   20 00:42CA F5 -  -  -  		push 	af 						; save error ID
   21 00:42CB -  -  -  -  
   22 00:42CB 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:42CE 6F -  -  -  		ld 		l,a
   24 00:42CF 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:42D0 29 -  -  -  		add 	hl,hl 		
   26 00:42D1 11 91 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:42D4 19 -  -  -  		add 	hl,de
   28 00:42D5 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:42D9 CD 6E 47 -  		call 	PrintStringAtHL
   30 00:42DC -  -  -  -  		;
   31 00:42DC F1 -  -  -  		pop 	af 						; restore error ID
   32 00:42DD B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:42DE 28 28 -  -  		jr 		z,_EHExit
   34 00:42E0 -  -  -  -  		;
   35 00:42E0 DD 2A 51 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:42E4 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:42E7 B7 -  -  -  		or 		a
   38 00:42E8 28 1E -  -  		jr 		z,_EHExit
   39 00:42EA -  -  -  -  
   40 00:42EA 21 0E 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:42ED CD 6E 47 -  		call 	PrintStringAtHL 
   42 00:42F0 -  -  -  -  		
   43 00:42F0 D9 -  -  -  		exx								; HL'HL = line number
   44 00:42F1 21 00 00 -  		ld 		hl,$0000 		
   45 00:42F4 D9 -  -  -  		exx 
   46 00:42F5 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:42F8 DD 66 02 -  		ld 		h,(ix+2)
   48 00:42FB 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:42FD 01 93 40 -  		ld 		bc,ConvertBuffer
   50 00:4300 CD 02 4C -  		call 	Int32ToString
   51 00:4303 C5 -  -  -  		push 	bc
   52 00:4304 E1 -  -  -  		pop 	hl
   53 00:4305 CD 6E 47 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4308 -  -  -  -  _EHExit:		
   55 00:4308 CD 6C 4C -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:430B C3 17 40 -  		jp 		WarmStart
   57 00:430E -  -  -  -  
   58 00:430E -  -  -  -  _EHAtText:
   59 00:430E 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4318 -  -  -  -  
   61 00:4318 -  -  -  -  NotImplemented:
   62 00:4318 3E 05 C3 CA 
              42 -  -  -  		ERR_DISABLED
   63 00:431D -  -  -  -  TypeMismatch:
   64 00:431D 3E 02 C3 CA 
              42 -  -  -  		ERR_BADTYPE
   65 00:4322 -  -  -  -  BadValue:
   66 00:4322 3E 03 C3 CA 
              42 -  -  -  		ERR_BADVALUE
   67 00:4327 -  -  -  -  SyntaxError:
   68 00:4327 3E 0E C3 CA 
              42 -  -  -  		ERR_SYNTAX
   69 00:432C -  -  -  -  						
   70 00:432C -  -  -  -  ; ***************************************************************************************
   71 00:432C -  -  -  -  ;
   72 00:432C -  -  -  -  ;									Changes and Updates
   73 00:432C -  -  -  -  ;
   74 00:432C -  -  -  -  ; ***************************************************************************************
   75 00:432C -  -  -  -  ;
   76 00:432C -  -  -  -  ;		Date			Notes
   77 00:432C -  -  -  -  ;		==== 			=====
   78 00:432C -  -  -  -  ;
   79 00:432C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:432C -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:432C -  -  -  -  ; ***************************************************************************************
    2 00:432C -  -  -  -  ; ***************************************************************************************
    3 00:432C -  -  -  -  ;
    4 00:432C -  -  -  -  ;		Name : 		basicmath.asm
    5 00:432C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:432C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:432C -  -  -  -  ;		Reviewed :	No
    8 00:432C -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:432C -  -  -  -  ;
   10 00:432C -  -  -  -  ; ***************************************************************************************
   11 00:432C -  -  -  -  ; ***************************************************************************************
   12 00:432C -  -  -  -  
   13 00:432C -  -  -  -  ; ***************************************************************************************
   14 00:432C -  -  -  -  ;
   15 00:432C -  -  -  -  ; 									Addition
   16 00:432C -  -  -  -  ;
   17 00:432C -  -  -  -  ; ***************************************************************************************
   18 00:432C -  -  -  -  
   19 00:432C -  -  -  -  ALUAdd: 		;; [+]
   20 00:432C CD 1F 44 78 
              B1 C2 1D 43 
              C3 8F 4B -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4337 -  -  -  -  
   22 00:4337 -  -  -  -  ; ***************************************************************************************
   23 00:4337 -  -  -  -  ;
   24 00:4337 -  -  -  -  ; 									Subtraction
   25 00:4337 -  -  -  -  ;
   26 00:4337 -  -  -  -  ; ***************************************************************************************
   27 00:4337 -  -  -  -  
   28 00:4337 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4337 CD 1F 44 78 
              B1 C2 1D 43 
              C3 95 4B -  		IntegerDispatch(Int32Subtract)
   30 00:4342 -  -  -  -  
   31 00:4342 -  -  -  -  ; ***************************************************************************************
   32 00:4342 -  -  -  -  ;
   33 00:4342 -  -  -  -  ; 									  Multiply
   34 00:4342 -  -  -  -  ;
   35 00:4342 -  -  -  -  ; ***************************************************************************************
   36 00:4342 -  -  -  -  
   37 00:4342 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:4342 CD 1F 44 78 
              B1 C2 1D 43 
              C3 59 4B -  		IntegerDispatch(Int32Multiply)
   39 00:434D -  -  -  -  
   40 00:434D -  -  -  -  ; ***************************************************************************************
   41 00:434D -  -  -  -  ;
   42 00:434D -  -  -  -  ; 									  Divide
   43 00:434D -  -  -  -  ;
   44 00:434D -  -  -  -  ; ***************************************************************************************
   45 00:434D -  -  -  -  
   46 00:434D -  -  -  -  ALUDivide: 	;; [/]
   47 00:434D -  -  -  -  ALUDivide2:	;; [div]
   48 00:434D CD 1F 44 78 
              B1 C2 1D 43 
              C3 6A 4A -  		IntegerDispatch(Int32SDivide)
   49 00:4358 -  -  -  -  
   50 00:4358 -  -  -  -  ; ***************************************************************************************
   51 00:4358 -  -  -  -  ;
   52 00:4358 -  -  -  -  ; 									  Modulus
   53 00:4358 -  -  -  -  ;
   54 00:4358 -  -  -  -  ; ***************************************************************************************
   55 00:4358 -  -  -  -  
   56 00:4358 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4358 CD 1F 44 78 
              B1 C2 1D 43 
              C3 6D 4A -  		IntegerDispatch(Int32Modulus)
   58 00:4363 -  -  -  -  
   59 00:4363 -  -  -  -  ; ***************************************************************************************
   60 00:4363 -  -  -  -  ;
   61 00:4363 -  -  -  -  ; 									  Logical
   62 00:4363 -  -  -  -  ;
   63 00:4363 -  -  -  -  ; ***************************************************************************************
   64 00:4363 -  -  -  -  
   65 00:4363 -  -  -  -  ALUAnd: 		;; [and]
   66 00:4363 CD 1F 44 78 
              B1 C2 1D 43 
              C3 9D 4B -  		IntegerDispatch(Int32And)
   67 00:436E -  -  -  -  
   68 00:436E -  -  -  -  ALUOr: 			;; [or]
   69 00:436E CD 1F 44 78 
              B1 C2 1D 43 
              C3 A9 4B -  		IntegerDispatch(Int32Or)
   70 00:4379 -  -  -  -  
   71 00:4379 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4379 CD 1F 44 78 
              B1 C2 1D 43 
              C3 B5 4B -  		IntegerDispatch(Int32Xor)
   73 00:4384 -  -  -  -  
   74 00:4384 -  -  -  -  ; ***************************************************************************************
   75 00:4384 -  -  -  -  ;
   76 00:4384 -  -  -  -  ;									Changes and Updates
   77 00:4384 -  -  -  -  ;
   78 00:4384 -  -  -  -  ; ***************************************************************************************
   79 00:4384 -  -  -  -  ;
   80 00:4384 -  -  -  -  ;		Date			Notes
   81 00:4384 -  -  -  -  ;		==== 			=====
   82 00:4384 -  -  -  -  ;
   83 00:4384 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:4384 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:4384 -  -  -  -  ; ***************************************************************************************
    2 00:4384 -  -  -  -  ; ***************************************************************************************
    3 00:4384 -  -  -  -  ;
    4 00:4384 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:4384 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4384 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4384 -  -  -  -  ;		Reviewed :	No
    8 00:4384 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:4384 -  -  -  -  ;
   10 00:4384 -  -  -  -  ; ***************************************************************************************
   11 00:4384 -  -  -  -  ; ***************************************************************************************
   12 00:4384 -  -  -  -  
   13 00:4384 -  -  -  -  ; ***************************************************************************************
   14 00:4384 -  -  -  -  ;
   15 00:4384 -  -  -  -  ; 									<l> <op> <r>
   16 00:4384 -  -  -  -  ;
   17 00:4384 -  -  -  -  ; ***************************************************************************************
   18 00:4384 -  -  -  -  
   19 00:4384 -  -  -  -  ALULongReference:			;; [!]
   20 00:4384 CD 92 43 -  		call 	BRGetAddress 				; calculate address
   21 00:4387 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4389 CB F9 -  -  		set 	CIsReference,c
   23 00:438B C9 -  -  -  		ret
   24 00:438C -  -  -  -  
   25 00:438C -  -  -  -  ALUByteReference: 			;; [?]
   26 00:438C CD 84 43 -  		call 	ALULongReference
   27 00:438F CB F1 -  -  		set 	CIsByteReference,c
   28 00:4391 C9 -  -  -  		ret
   29 00:4392 -  -  -  -  
   30 00:4392 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:4392 CD 1F 44 78 
              B1 C2 1D 43 
              C3 9D 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:439D -  -  -  -  _BRGAMain:		
   33 00:439D CD 8F 4B -  		call 	Int32Add 					; address in HL'HL
   34 00:43A0 CD 08 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:43A3 C9 -  -  -  		ret
   36 00:43A4 -  -  -  -  
   37 00:43A4 -  -  -  -  ; ***************************************************************************************
   38 00:43A4 -  -  -  -  ;
   39 00:43A4 -  -  -  -  ;									Changes and Updates
   40 00:43A4 -  -  -  -  ;
   41 00:43A4 -  -  -  -  ; ***************************************************************************************
   42 00:43A4 -  -  -  -  ;
   43 00:43A4 -  -  -  -  ;		Date			Notes
   44 00:43A4 -  -  -  -  ;		==== 			=====
   45 00:43A4 -  -  -  -  ;
   46 00:43A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43A4 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:43A4 -  -  -  -  ; ***************************************************************************************
    2 00:43A4 -  -  -  -  ; ***************************************************************************************
    3 00:43A4 -  -  -  -  ;
    4 00:43A4 -  -  -  -  ;		Name : 		compare.asm
    5 00:43A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43A4 -  -  -  -  ;		Reviewed :	No
    8 00:43A4 -  -  -  -  ;		Purpose :	Comparison code
    9 00:43A4 -  -  -  -  ;
   10 00:43A4 -  -  -  -  ; ***************************************************************************************
   11 00:43A4 -  -  -  -  ; ***************************************************************************************
   12 00:43A4 -  -  -  -  
   13 00:43A4 -  -  -  -  #macro compare_equals(n)
   14 00:43A4             		call 	CompareBaseCode
   15 00:43A4             		cp 		n
   16 00:43A4             		jr 		z,UnaryInt32True
   17 00:43A4             		jr 		UnaryInt32False
   18 00:43A4             #endmacro
   19 00:43A4 -  -  -  -  
   20 00:43A4 -  -  -  -  #macro compare_not_equals(n)
   21 00:43A4             		call 	CompareBaseCode
   22 00:43A4             		cp 		n
   23 00:43A4             		jr 		nz,UnaryInt32True
   24 00:43A4             		jr 		UnaryInt32False
   25 00:43A4             #endmacro
   26 00:43A4 -  -  -  -  
   27 00:43A4 -  -  -  -  ; ***************************************************************************************
   28 00:43A4 -  -  -  -  ;
   29 00:43A4 -  -  -  -  ; 								Return True/False
   30 00:43A4 -  -  -  -  ;
   31 00:43A4 -  -  -  -  ; ***************************************************************************************
   32 00:43A4 -  -  -  -  
   33 00:43A4 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:43A4 3E FF -  -  		ld 		a,255
   35 00:43A6 18 01 -  -  		jr 		_Int32Logical
   36 00:43A8 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:43A8 AF -  -  -  		xor 	a
   38 00:43A9 -  -  -  -  _Int32Logical:
   39 00:43A9 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:43AA 67 -  -  -  		ld 		h,a
   41 00:43AB D9 -  -  -  		exx
   42 00:43AC 6F -  -  -  		ld 		l,a
   43 00:43AD 67 -  -  -  		ld 		h,a
   44 00:43AE D9 -  -  -  		exx
   45 00:43AF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:43B1 C9 -  -  -  		ret
   47 00:43B2 -  -  -  -  
   48 00:43B2 -  -  -  -  ; ***************************************************************************************
   49 00:43B2 -  -  -  -  ;
   50 00:43B2 -  -  -  -  ; 										> = < (compare == value)
   51 00:43B2 -  -  -  -  ;
   52 00:43B2 -  -  -  -  ; ***************************************************************************************
   53 00:43B2 -  -  -  -  
   54 00:43B2 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:43B2 CD E8 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:43BB -  -  -  -  
   57 00:43BB -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:43BB CD E8 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:43C4 -  -  -  -  
   60 00:43C4 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:43C4 CD E8 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:43CD -  -  -  -  
   63 00:43CD -  -  -  -  ; ***************************************************************************************
   64 00:43CD -  -  -  -  ;
   65 00:43CD -  -  -  -  ; 										> = < (compare <> value)
   66 00:43CD -  -  -  -  ;
   67 00:43CD -  -  -  -  ; ***************************************************************************************
   68 00:43CD -  -  -  -  
   69 00:43CD -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:43CD CD E8 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:43D6 -  -  -  -  
   72 00:43D6 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:43D6 CD E8 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:43DF -  -  -  -  
   75 00:43DF -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:43DF CD E8 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:43E8 -  -  -  -  
   78 00:43E8 -  -  -  -  ; ***************************************************************************************
   79 00:43E8 -  -  -  -  ;
   80 00:43E8 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:43E8 -  -  -  -  ;
   82 00:43E8 -  -  -  -  ; ***************************************************************************************
   83 00:43E8 -  -  -  -  
   84 00:43E8 -  -  -  -  CompareBaseCode:
   85 00:43E8 CD 1F 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:43EB -  -  -  -  
   87 00:43EB 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:43EC A1 -  -  -  		and 	c
   89 00:43ED CB 47 -  -  		bit 	CIsString,a 
   90 00:43EF C2 FE 43 -  		jp 		nz,StringCompare
   91 00:43F2 -  -  -  -  
   92 00:43F2 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:43F3 B1 -  -  -  		or 		c
   94 00:43F4 CB 47 -  -  		bit 	CIsString,a 
   95 00:43F6 CA C8 4B -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:43F9 -  -  -  -  
   97 00:43F9 3E 02 C3 CA 
              42 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:43FE -  -  -  -  ;
   99 00:43FE -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:43FE -  -  -  -  ;
  101 00:43FE -  -  -  -  StringCompare:
  102 00:43FE 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:43FF BE -  -  -  		cp 		(hl)
  104 00:4400 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:4402 20 08 -  -  		jr 		nz,_SCLess
  106 00:4404 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4405 23 -  -  -  		inc 	hl
  108 00:4406 FE 20 -  -  		cp 		' '
  109 00:4408 30 F4 -  -  		jr 		nc,StringCompare
  110 00:440A AF -  -  -  		xor 	a 							; return 0.
  111 00:440B C9 -  -  -  		ret
  112 00:440C -  -  -  -  
  113 00:440C -  -  -  -  _SCLess:
  114 00:440C 3E FF -  -  		ld 		a,$FF
  115 00:440E C9 -  -  -  		ret
  116 00:440F -  -  -  -  _SCGreater:
  117 00:440F 3E 01 -  -  		ld 		a,1
  118 00:4411 C9 -  -  -  		ret
  119 00:4412 -  -  -  -  
  120 00:4412 3E 0F C3 CA 
              42 -  -  -  		ERR_TODO()
  121 00:4417 -  -  -  -  
  122 00:4417 -  -  -  -  ; ***************************************************************************************
  123 00:4417 -  -  -  -  ;
  124 00:4417 -  -  -  -  ;									Changes and Updates
  125 00:4417 -  -  -  -  ;
  126 00:4417 -  -  -  -  ; ***************************************************************************************
  127 00:4417 -  -  -  -  ;
  128 00:4417 -  -  -  -  ;		Date			Notes
  129 00:4417 -  -  -  -  ;		==== 			=====
  130 00:4417 -  -  -  -  ;
  131 00:4417 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:4417 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:4417 -  -  -  -  ; ***************************************************************************************
    2 00:4417 -  -  -  -  ; ***************************************************************************************
    3 00:4417 -  -  -  -  ;
    4 00:4417 -  -  -  -  ;		Name : 		utility.asm
    5 00:4417 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4417 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4417 -  -  -  -  ;		Reviewed :	No
    8 00:4417 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:4417 -  -  -  -  ;
   10 00:4417 -  -  -  -  ; ***************************************************************************************
   11 00:4417 -  -  -  -  ; ***************************************************************************************
   12 00:4417 -  -  -  -  
   13 00:4417 -  -  -  -  ; ***************************************************************************************
   14 00:4417 -  -  -  -  ;
   15 00:4417 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:4417 -  -  -  -  ;
   17 00:4417 -  -  -  -  ; ***************************************************************************************
   18 00:4417 -  -  -  -  
   19 00:4417 -  -  -  -  SwapHLDE:
   20 00:4417 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4418 D9 -  -  -  			exx
   22 00:4419 EB -  -  -  			ex 		de,hl
   23 00:441A D9 -  -  -  			exx
   24 00:441B 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:441C 41 -  -  -  			ld 		b,c
   26 00:441D 4F -  -  -  			ld 		c,a
   27 00:441E C9 -  -  -  			ret
   28 00:441F -  -  -  -  
   29 00:441F -  -  -  -  ; ***************************************************************************************
   30 00:441F -  -  -  -  ;
   31 00:441F -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:441F -  -  -  -  ;
   33 00:441F -  -  -  -  ; ***************************************************************************************
   34 00:441F -  -  -  -  
   35 00:441F -  -  -  -  DereferenceBoth:
   36 00:441F CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:4421 C4 DA 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:4424 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:4426 C8 -  -  -  			ret 	z
   40 00:4427 CD 17 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:442A CD DA 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:442D CD 17 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4430 C9 -  -  -  			ret
   44 00:4431 -  -  -  -  
   45 00:4431 -  -  -  -  ; ***************************************************************************************
   46 00:4431 -  -  -  -  ;
   47 00:4431 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:4431 -  -  -  -  ;
   49 00:4431 -  -  -  -  ; ***************************************************************************************
   50 00:4431 -  -  -  -  
   51 00:4431 -  -  -  -  NegateHLHL:	
   52 00:4431 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:4433 C2 1D 43 -  			jp 		nz,TypeMismatch
   54 00:4436 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4438 C4 DA 44 -  			call 	nz,Dereference 			; if required.
   56 00:443B CD EF 4B -  			call 	Int32Negate
   57 00:443E C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:443F -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:443F -  -  -  -  ; ***************************************************************************************
    2 00:443F -  -  -  -  ; ***************************************************************************************
    3 00:443F -  -  -  -  ;
    4 00:443F -  -  -  -  ;		Name : 		expression.asm
    5 00:443F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:443F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:443F -  -  -  -  ;		Reviewed :	None
    8 00:443F -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:443F -  -  -  -  ;
   10 00:443F -  -  -  -  ; ***************************************************************************************
   11 00:443F -  -  -  -  ; ***************************************************************************************
   12 00:443F -  -  -  -  
   13 00:443F -  -  -  -  ; ***************************************************************************************
   14 00:443F -  -  -  -  ;
   15 00:443F -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:443F -  -  -  -  ;
   17 00:443F -  -  -  -  ; ***************************************************************************************
   18 00:443F -  -  -  -  
   19 00:443F -  -  -  -  EvaluateAtPrecedence0:
   20 00:443F AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4440 -  -  -  -  EvaluateAtPrecedence:
   22 00:4440 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:4441 -  -  -  -  		;
   24 00:4441 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:4441 -  -  -  -  		;
   26 00:4441 CD 0A 45 -  		call 	EvaluateTerm 				; get term
   27 00:4444 -  -  -  -  		;
   28 00:4444 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4444 -  -  -  -  		;
   30 00:4444 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4445 -  -  -  -  _EAPLoop:
   32 00:4445 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4448 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:444A D8 -  -  -  		ret 	c
   35 00:444B FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:444D D0 -  -  -  		ret 	nc
   37 00:444E -  -  -  -  		;
   38 00:444E -  -  -  -  		; 		Get the precedence.
   39 00:444E -  -  -  -  		;
   40 00:444E E5 -  -  -  		push 	hl 							; want to use HL
   41 00:444F D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:4451 21 80 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4454 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4455 6F -  -  -  		ld 		l,a
   45 00:4456 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4457 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4458 -  -  -  -  		;
   48 00:4458 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4458 -  -  -  -  		;
   50 00:4458 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4459 BB -  -  -  		cp 		e
   52 00:445A D0 -  -  -  		ret 	nc
   53 00:445B -  -  -  -  
   54 00:445B -  -  -  -  		;
   55 00:445B -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:445B -  -  -  -  		;
   57 00:445B D5 -  -  -  		push 	de 							; save precedence information.
   58 00:445C -  -  -  -  		;
   59 00:445C DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:445F F5 -  -  -  		push 	af
   61 00:4460 -  -  -  -  		;
   62 00:4460 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:4461 D9 -  -  -  		exx 								; save HL'
   64 00:4462 E5 -  -  -  		push 	hl
   65 00:4463 D9 -  -  -  		exx 								
   66 00:4464 E5 -  -  -  		push 	hl 							; save HL
   67 00:4465 -  -  -  -  		;
   68 00:4465 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4467 -  -  -  -  		;
   70 00:4467 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4467 -  -  -  -  		;
   72 00:4467 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4468 CD 40 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:446B -  -  -  -  		;
   75 00:446B -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:446B -  -  -  -  		;
   77 00:446B 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:446C -  -  -  -  
   79 00:446C EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:446D E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:446E D9 -  -  -  		exx
   82 00:446F EB -  -  -  		ex 		de,hl
   83 00:4470 E1 -  -  -  		pop 	hl
   84 00:4471 D9 -  -  -  		exx
   85 00:4472 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:4473 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:4474 -  -  -  -  		;
   88 00:4474 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:4474 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:4474 -  -  -  -  		;
   91 00:4474 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:4475 -  -  -  -  		;
   93 00:4475 -  -  -  -  		; 		Call the binary operator in A.
   94 00:4475 -  -  -  -  		;
   95 00:4475 D5 -  -  -  		push 	de
   96 00:4476 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4477 E6 7F 21 00 
              00 6F 29 11 
              CC 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4489 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:448A D1 -  -  -  		pop 	de 							; restore DE
  100 00:448B CD 59 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:448E -  -  -  -  		;
  102 00:448E D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:448F -  -  -  -  		;
  104 00:448F 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:4491 -  -  -  -  
  106 00:4491 -  -  -  -  ; ***************************************************************************************
  107 00:4491 -  -  -  -  ;
  108 00:4491 -  -  -  -  ;									Changes and Updates
  109 00:4491 -  -  -  -  ;
  110 00:4491 -  -  -  -  ; ***************************************************************************************
  111 00:4491 -  -  -  -  ;
  112 00:4491 -  -  -  -  ;		Date			Notes
  113 00:4491 -  -  -  -  ;		==== 			=====
  114 00:4491 -  -  -  -  ;
  115 00:4491 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4491 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:4491 -  -  -  -  ; ***************************************************************************************
    2 00:4491 -  -  -  -  ; ***************************************************************************************
    3 00:4491 -  -  -  -  ;
    4 00:4491 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:4491 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4491 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4491 -  -  -  -  ;		Reviewed :	No
    8 00:4491 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:4491 -  -  -  -  ;
   10 00:4491 -  -  -  -  ; ***************************************************************************************
   11 00:4491 -  -  -  -  ; ***************************************************************************************
   12 00:4491 -  -  -  -  
   13 00:4491 -  -  -  -  ; ***************************************************************************************
   14 00:4491 -  -  -  -  ;
   15 00:4491 -  -  -  -  ; 								Evaluate an integer term
   16 00:4491 -  -  -  -  ;
   17 00:4491 -  -  -  -  ; ***************************************************************************************
   18 00:4491 -  -  -  -  
   19 00:4491 -  -  -  -  EvaluateIntegerTerm:
   20 00:4491 CD 0A 45 -  		call 	EvaluateTerm
   21 00:4494 CD DA 44 -  		call 	DeReference
   22 00:4497 CB 41 -  -  		bit 	CIsString,c
   23 00:4499 C8 -  -  -  		ret 	z
   24 00:449A C3 1D 43 -  		jp 		TypeMismatch
   25 00:449D -  -  -  -  
   26 00:449D -  -  -  -  ; ***************************************************************************************
   27 00:449D -  -  -  -  ;
   28 00:449D -  -  -  -  ; 								Evaluate a string term
   29 00:449D -  -  -  -  ;
   30 00:449D -  -  -  -  ; ***************************************************************************************
   31 00:449D -  -  -  -  
   32 00:449D -  -  -  -  EvaluateStringTerm:
   33 00:449D CD 0A 45 -  		call 	EvaluateTerm
   34 00:44A0 CD DA 44 -  		call 	DeReference
   35 00:44A3 CB 41 -  -  		bit 	CIsString,c
   36 00:44A5 C0 -  -  -  		ret 	nz
   37 00:44A6 C3 1D 43 -  		jp 		TypeMismatch
   38 00:44A9 -  -  -  -  
   39 00:44A9 -  -  -  -  ; ***************************************************************************************
   40 00:44A9 -  -  -  -  ;
   41 00:44A9 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:44A9 -  -  -  -  ;
   43 00:44A9 -  -  -  -  ; ***************************************************************************************
   44 00:44A9 -  -  -  -  
   45 00:44A9 -  -  -  -  EvaluateValue:
   46 00:44A9 CD 3F 44 -  		call 	EvaluateAtPrecedence0
   47 00:44AC C3 DA 44 -  		jp 		Dereference
   48 00:44AF -  -  -  -  
   49 00:44AF -  -  -  -  ; ***************************************************************************************
   50 00:44AF -  -  -  -  ;
   51 00:44AF -  -  -  -  ; 									Evaluate a number
   52 00:44AF -  -  -  -  ;
   53 00:44AF -  -  -  -  ; ***************************************************************************************
   54 00:44AF -  -  -  -  
   55 00:44AF -  -  -  -  EvaluateInteger:
   56 00:44AF CD A9 44 -  		call 	EvaluateValue
   57 00:44B2 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:44B4 C8 -  -  -  		ret 	z
   59 00:44B5 C3 1D 43 -  		jp 		TypeMismatch
   60 00:44B8 -  -  -  -  
   61 00:44B8 -  -  -  -  ; ***************************************************************************************
   62 00:44B8 -  -  -  -  ;
   63 00:44B8 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:44B8 -  -  -  -  ;
   65 00:44B8 -  -  -  -  ; ***************************************************************************************
   66 00:44B8 -  -  -  -  
   67 00:44B8 -  -  -  -  Evaluate8BitInteger:
   68 00:44B8 CD AF 44 -  		call 	EvaluateInteger
   69 00:44BB D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:44BC 7C -  -  -  		ld 		a,h
   71 00:44BD B5 -  -  -  		or 		l
   72 00:44BE D9 -  -  -  		exx 	
   73 00:44BF B4 -  -  -  		or 		h
   74 00:44C0 C2 22 43 -  		jp 		nz,BadValue
   75 00:44C3 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:44C4 C9 -  -  -  		ret
   77 00:44C5 -  -  -  -  		
   78 00:44C5 -  -  -  -  ; ***************************************************************************************
   79 00:44C5 -  -  -  -  ;
   80 00:44C5 -  -  -  -  ; 									Evaluate a string
   81 00:44C5 -  -  -  -  ;
   82 00:44C5 -  -  -  -  ; ***************************************************************************************
   83 00:44C5 -  -  -  -  
   84 00:44C5 -  -  -  -  EvaluateStringOnly:
   85 00:44C5 CD A9 44 -  		call 	EvaluateValue
   86 00:44C8 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:44CA CA 1D 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:44CD C9 -  -  -  		ret
   89 00:44CE -  -  -  -  
   90 00:44CE -  -  -  -  ; ***************************************************************************************
   91 00:44CE -  -  -  -  ;
   92 00:44CE -  -  -  -  ; 								Return 8/16 bit constant
   93 00:44CE -  -  -  -  ;
   94 00:44CE -  -  -  -  ; ***************************************************************************************
   95 00:44CE -  -  -  -  
   96 00:44CE -  -  -  -  Return8BitConstant:
   97 00:44CE 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:44D1 6F -  -  -  		ld 		l,a
   99 00:44D2 -  -  -  -  Return16BitConstant:
  100 00:44D2 D9 -  -  -  		exx 								; clear HL'
  101 00:44D3 21 00 00 -  		ld 		hl,0
  102 00:44D6 D9 -  -  -  		exx
  103 00:44D7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:44D9 C9 -  -  -  		ret
  105 00:44DA -  -  -  -  
  106 00:44DA -  -  -  -  ; ***************************************************************************************
  107 00:44DA -  -  -  -  ;
  108 00:44DA -  -  -  -  ;									Changes and Updates
  109 00:44DA -  -  -  -  ;
  110 00:44DA -  -  -  -  ; ***************************************************************************************
  111 00:44DA -  -  -  -  ;
  112 00:44DA -  -  -  -  ;		Date			Notes
  113 00:44DA -  -  -  -  ;		==== 			=====
  114 00:44DA -  -  -  -  ;
  115 00:44DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:44DA -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:44DA -  -  -  -  ; ***************************************************************************************
    2 00:44DA -  -  -  -  ; ***************************************************************************************
    3 00:44DA -  -  -  -  ;
    4 00:44DA -  -  -  -  ;		Name : 		reference.asm
    5 00:44DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44DA -  -  -  -  ;		Date : 		1st May 2022
    7 00:44DA -  -  -  -  ;		Reviewed :	No
    8 00:44DA -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:44DA -  -  -  -  ;
   10 00:44DA -  -  -  -  ; ***************************************************************************************
   11 00:44DA -  -  -  -  ; ***************************************************************************************
   12 00:44DA -  -  -  -  
   13 00:44DA -  -  -  -  ; ***************************************************************************************
   14 00:44DA -  -  -  -  ;
   15 00:44DA -  -  -  -  ; 									Dereference HL'HL C
   16 00:44DA -  -  -  -  ;
   17 00:44DA -  -  -  -  ; ***************************************************************************************
   18 00:44DA -  -  -  -  
   19 00:44DA -  -  -  -  Dereference:
   20 00:44DA CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:44DC C8 -  -  -  		ret 	z
   22 00:44DD -  -  -  -  
   23 00:44DD CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:44DF -  -  -  -  		
   25 00:44DF CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:44E1 20 20 -  -  		jr 		nz,_DRInternal
   27 00:44E3 -  -  -  -  
   28 00:44E3 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:44E5 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:44E7 -  -  -  -  
   31 00:44E7 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:44E8 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:44EC D9 -  -  -  		exx
   34 00:44ED E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:44EE 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:44EF 23 -  -  -  		inc  	hl
   37 00:44F0 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:44F4 D9 -  -  -  		exx 								; fix back
   39 00:44F5 C9 -  -  -  		ret
   40 00:44F6 -  -  -  -  
   41 00:44F6 -  -  -  -  _DeRefByte:		
   42 00:44F6 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:44F7 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:44FA 6F -  -  -  		ld	 	l,a
   45 00:44FB D9 -  -  -  		exx
   46 00:44FC 21 00 00 -  		ld 		hl,$0000
   47 00:44FF D9 -  -  -  		exx
   48 00:4500 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:4502 C9 -  -  -  		ret
   50 00:4503 -  -  -  -  
   51 00:4503 -  -  -  -  _DRInternal:
   52 00:4503 3E 05 C3 CA 
              42 -  -  -  		ERR_DISABLED
   53 00:4508 -  -  -  -  
   54 00:4508 -  -  -  -  ; ***************************************************************************************
   55 00:4508 -  -  -  -  ;
   56 00:4508 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4508 -  -  -  -  ;
   58 00:4508 -  -  -  -  ; ***************************************************************************************
   59 00:4508 -  -  -  -  
   60 00:4508 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4508 -  -  -  -  		#ifdef EZ80
   62 00:4508             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4508             		exx
   64 00:4508             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4508             		ld 		hl,$0000 					; zero HL'
   66 00:4508             		exx
   67 00:4508             		ld 		hl,(AConvert) 				; load UHL
   68 00:4508             		#endif
   69 00:4508 C9 -  -  -  		ret
   70 00:4509 -  -  -  -  
   71 00:4509 -  -  -  -  ; ***************************************************************************************
   72 00:4509 -  -  -  -  ;
   73 00:4509 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4509 -  -  -  -  ;
   75 00:4509 -  -  -  -  ; ***************************************************************************************
   76 00:4509 -  -  -  -  
   77 00:4509 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4509 -  -  -  -  		#ifdef EZ80
   79 00:4509             		ld 		(AConvert),hl
   80 00:4509             		ld 		hl,$0000
   81 00:4509             		ld 		(AConvert+3),hl
   82 00:4509             		exx
   83 00:4509             		ld 		hl,(AConvert+2)
   84 00:4509             		exx
   85 00:4509             		xor 	a
   86 00:4509             		ld 		(AConvert+2),a
   87 00:4509             		ld 		hl,(AConvert)
   88 00:4509             		#endif
   89 00:4509 C9 -  -  -  		ret
   90 00:450A -  -  -  -  
   91 00:450A -  -  -  -  ; ***************************************************************************************
   92 00:450A -  -  -  -  ;
   93 00:450A -  -  -  -  ;									Changes and Updates
   94 00:450A -  -  -  -  ;
   95 00:450A -  -  -  -  ; ***************************************************************************************
   96 00:450A -  -  -  -  ;
   97 00:450A -  -  -  -  ;		Date			Notes
   98 00:450A -  -  -  -  ;		==== 			=====
   99 00:450A -  -  -  -  ;
  100 00:450A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:450A -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:450A -  -  -  -  ; ***************************************************************************************
    2 00:450A -  -  -  -  ; ***************************************************************************************
    3 00:450A -  -  -  -  ;
    4 00:450A -  -  -  -  ;		Name : 		term.asm
    5 00:450A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:450A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:450A -  -  -  -  ;		Reviewed :	No
    8 00:450A -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:450A -  -  -  -  ;
   10 00:450A -  -  -  -  ; ***************************************************************************************
   11 00:450A -  -  -  -  ; ***************************************************************************************
   12 00:450A -  -  -  -  
   13 00:450A -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:450A             		add_hlhl_16
   15 00:450A             		exx
   16 00:450A             		adc_hlhl_16
   17 00:450A             		exx
   18 00:450A             #endmacro
   19 00:450A -  -  -  -  
   20 00:450A -  -  -  -  ; ***************************************************************************************
   21 00:450A -  -  -  -  ;
   22 00:450A -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:450A -  -  -  -  ;
   24 00:450A -  -  -  -  ; ***************************************************************************************
   25 00:450A -  -  -  -  ;
   26 00:450A -  -  -  -  ; 		Terms can be:
   27 00:450A -  -  -  -  ;
   28 00:450A -  -  -  -  ;			<integer> 			42 						not negative
   29 00:450A -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:450A -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:450A -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:450A -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:450A -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:450A -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:450A -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:450A -  -  -  -  ; 														reference of some sort.
   37 00:450A -  -  -  -  ;
   38 00:450A -  -  -  -  ; ***************************************************************************************
   39 00:450A -  -  -  -  
   40 00:450A -  -  -  -  EvaluateTerm:		
   41 00:450A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:450C D9 -  -  -  		exx
   43 00:450D 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4510 D9 -  -  -  		exx
   45 00:4511 21 00 00 -  		ld 		hl,$0000		
   46 00:4514 -  -  -  -  		;
   47 00:4514 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:4517 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4519 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:451B DA B9 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:451E CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4520 C2 68 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:4523 -  -  -  -  		;
   54 00:4523 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:4523 -  -  -  -  		;
   56 00:4523 -  -  -  -  _ETIntegerConstant:
   57 00:4523 -  -  -  -  		;
   58 00:4523 -  -  -  -  _ETIntegerLoop:		
   59 00:4523 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:4526 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4528 B5 -  -  -  		or 		l 							; or into L
   62 00:4529 6F -  -  -  		ld 		l,a
   63 00:452A DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:452C DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:452F C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:4531 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:4533 D8 -  -  -  		ret 	c
   68 00:4534 -  -  -  -  
   69 00:4534 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4539 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:453E 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4543 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4548 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:454D 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:4552 -  -  -  -  
   76 00:4552 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4554 -  -  -  -  		;
   78 00:4554 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4554 -  -  -  -  		;
   80 00:4554 -  -  -  -  _ETStringMarker:		
   81 00:4554 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4556 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4558 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:455A E1 -  -  -  		pop 	hl
   85 00:455B 11 00 00 -  		ld 		de,$0000
   86 00:455E DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:4561 DD 19 -  -  		add 	ix,de
   88 00:4563 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:4565 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4567 C9 -  -  -  		ret
   91 00:4568 -  -  -  -  		;
   92 00:4568 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4568 -  -  -  -  		;
   94 00:4568 -  -  -  -  _ETFoundKeyword:
   95 00:4568 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:456A FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:456C 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:456E FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:4570 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:4572 -  -  -  -  		;
  101 00:4572 -  -  -  -  		;		Unary group 0
  102 00:4572 -  -  -  -  		;
  103 00:4572 E6 7F 21 00 
              00 6F 29 11 
              CC 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:4584 C3 59 40 -  		jp 		JumpCode 					; and go there.
  105 00:4587 -  -  -  -  
  106 00:4587 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4587 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4589 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:458B -  -  -  -  		;
  110 00:458B -  -  -  -  		; 		- term
  111 00:458B -  -  -  -  		;
  112 00:458B CD 91 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:458E CD 31 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:4591 C9 -  -  -  		ret
  115 00:4592 -  -  -  -  		;
  116 00:4592 -  -  -  -  		;		! ? indirection check
  117 00:4592 -  -  -  -  		;
  118 00:4592 -  -  -  -  _ETCheckIndirection:	
  119 00:4592 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:4594 28 05 -  -  		jr 		z,_ETIndirection
  121 00:4596 FE 83 -  -  		cp 		KWD_PLING
  122 00:4598 C2 27 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:459B -  -  -  -  		;
  124 00:459B -  -  -  -  		; 		! ? indirection
  125 00:459B -  -  -  -  		;
  126 00:459B -  -  -  -  _ETIndirection:
  127 00:459B F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:459C CD 0A 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:459F CD DA 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:45A2 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:45A4 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:45A6 CD 08 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:45A9 F1 -  -  -  		pop 	af 							; get type back
  134 00:45AA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:45AC CB F9 -  -  		set 	CIsReference,c
  136 00:45AE FE 83 -  -  		cp 		KWD_PLING
  137 00:45B0 C8 -  -  -  		ret 	z
  138 00:45B1 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:45B3 C9 -  -  -  		ret
  140 00:45B4 -  -  -  -  _ETStringIndirect:
  141 00:45B4 3E 02 C3 CA 
              42 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:45B9 -  -  -  -  		;
  143 00:45B9 -  -  -  -  		; 		Found an identifier.
  144 00:45B9 -  -  -  -  		;
  145 00:45B9 -  -  -  -  _ETVariable:
  146 00:45B9 CD B7 47 -  		call 	FindVariable 				; find the variable.
  147 00:45BC D0 -  -  -  		ret 	nc 							; return if found.
  148 00:45BD 3E 10 C3 CA 
              42 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:45C2 -  -  -  -  		
  150 00:45C2 -  -  -  -  ; ***************************************************************************************
  151 00:45C2 -  -  -  -  ;
  152 00:45C2 -  -  -  -  ;									Changes and Updates
  153 00:45C2 -  -  -  -  ;
  154 00:45C2 -  -  -  -  ; ***************************************************************************************
  155 00:45C2 -  -  -  -  ;
  156 00:45C2 -  -  -  -  ;		Date			Notes
  157 00:45C2 -  -  -  -  ;		==== 			=====
  158 00:45C2 -  -  -  -  ;
  159 00:45C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:45C2 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:45C2 -  -  -  -  ; ***************************************************************************************
    2 00:45C2 -  -  -  -  ; ***************************************************************************************
    3 00:45C2 -  -  -  -  ;
    4 00:45C2 -  -  -  -  ;		Name : 		abs.asm
    5 00:45C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45C2 -  -  -  -  ;		Reviewed :	No
    8 00:45C2 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:45C2 -  -  -  -  ;
   10 00:45C2 -  -  -  -  ; ***************************************************************************************
   11 00:45C2 -  -  -  -  ; ***************************************************************************************
   12 00:45C2 -  -  -  -  
   13 00:45C2 -  -  -  -  ; ***************************************************************************************
   14 00:45C2 -  -  -  -  ;
   15 00:45C2 -  -  -  -  ;								abs( unary function
   16 00:45C2 -  -  -  -  ;
   17 00:45C2 -  -  -  -  ; ***************************************************************************************
   18 00:45C2 -  -  -  -  
   19 00:45C2 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:45C2 CD 91 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:45C5 D9 -  -  -  		exx 								; test MSB
   22 00:45C6 CB 7C -  -  		bit 	7,h
   23 00:45C8 D9 -  -  -  		exx
   24 00:45C9 C4 31 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:45CC C9 -  -  -  		ret
   26 00:45CD -  -  -  -  
   27 00:45CD -  -  -  -  ; ***************************************************************************************
   28 00:45CD -  -  -  -  ;
   29 00:45CD -  -  -  -  ;									Changes and Updates
   30 00:45CD -  -  -  -  ;
   31 00:45CD -  -  -  -  ; ***************************************************************************************
   32 00:45CD -  -  -  -  ;
   33 00:45CD -  -  -  -  ;		Date			Notes
   34 00:45CD -  -  -  -  ;		==== 			=====
   35 00:45CD -  -  -  -  ;
   36 00:45CD -  -  -  -  ; ***************************************************************************************
   37 00:45CD -  -  -  -  		
Listing for file "_build.asm"
   35 00:45CD -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:45CD -  -  -  -  ; ***************************************************************************************
    2 00:45CD -  -  -  -  ; ***************************************************************************************
    3 00:45CD -  -  -  -  ;
    4 00:45CD -  -  -  -  ;		Name : 		asc.asm
    5 00:45CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45CD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45CD -  -  -  -  ;		Reviewed :	No
    8 00:45CD -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:45CD -  -  -  -  ;
   10 00:45CD -  -  -  -  ; ***************************************************************************************
   11 00:45CD -  -  -  -  ; ***************************************************************************************
   12 00:45CD -  -  -  -  
   13 00:45CD -  -  -  -  ; ***************************************************************************************
   14 00:45CD -  -  -  -  ;
   15 00:45CD -  -  -  -  ;								Asc unary function
   16 00:45CD -  -  -  -  ;
   17 00:45CD -  -  -  -  ; ***************************************************************************************
   18 00:45CD -  -  -  -  
   19 00:45CD -  -  -  -  Unary_Asc:	;; [asc]
   20 00:45CD CD 9D 44 -  		call	EvaluateStringTerm			; Get string
   21 00:45D0 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:45D1 C3 CE 44 -  		jp 		Return8BitConstant
   23 00:45D4 -  -  -  -  
   24 00:45D4 -  -  -  -  ; ***************************************************************************************
   25 00:45D4 -  -  -  -  ;
   26 00:45D4 -  -  -  -  ;									Changes and Updates
   27 00:45D4 -  -  -  -  ;
   28 00:45D4 -  -  -  -  ; ***************************************************************************************
   29 00:45D4 -  -  -  -  ;
   30 00:45D4 -  -  -  -  ;		Date			Notes
   31 00:45D4 -  -  -  -  ;		==== 			=====
   32 00:45D4 -  -  -  -  ;
   33 00:45D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:45D4 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:45D4 -  -  -  -  ; ***************************************************************************************
    2 00:45D4 -  -  -  -  ; ***************************************************************************************
    3 00:45D4 -  -  -  -  ;
    4 00:45D4 -  -  -  -  ;		Name : 		chr.asm
    5 00:45D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45D4 -  -  -  -  ;		Reviewed :	No
    8 00:45D4 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:45D4 -  -  -  -  ;
   10 00:45D4 -  -  -  -  ; ***************************************************************************************
   11 00:45D4 -  -  -  -  ; ***************************************************************************************
   12 00:45D4 -  -  -  -  
   13 00:45D4 -  -  -  -  ; ***************************************************************************************
   14 00:45D4 -  -  -  -  ;
   15 00:45D4 -  -  -  -  ;								Chr$() unary function
   16 00:45D4 -  -  -  -  ;
   17 00:45D4 -  -  -  -  ; ***************************************************************************************
   18 00:45D4 -  -  -  -  
   19 00:45D4 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:45D4 CD A5 42 -  		call 	CheckDollar
   21 00:45D7 CD 91 44 -  		call 	EvaluateIntegerTerm
   22 00:45DA 7D -  -  -  		ld 		a,l 						; get character
   23 00:45DB 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:45DD 21 92 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:45E0 36 0D -  -  		ld 		(hl),13
   26 00:45E2 2B -  -  -  		dec 	hl
   27 00:45E3 77 -  -  -  		ld 		(hl),a
   28 00:45E4 C9 -  -  -  		ret
   29 00:45E5 -  -  -  -  
   30 00:45E5 -  -  -  -  ; ***************************************************************************************
   31 00:45E5 -  -  -  -  ;
   32 00:45E5 -  -  -  -  ;									Changes and Updates
   33 00:45E5 -  -  -  -  ;
   34 00:45E5 -  -  -  -  ; ***************************************************************************************
   35 00:45E5 -  -  -  -  ;
   36 00:45E5 -  -  -  -  ;		Date			Notes
   37 00:45E5 -  -  -  -  ;		==== 			=====
   38 00:45E5 -  -  -  -  ;
   39 00:45E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:45E5 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:45E5 -  -  -  -  ; ***************************************************************************************
    2 00:45E5 -  -  -  -  ; ***************************************************************************************
    3 00:45E5 -  -  -  -  ;
    4 00:45E5 -  -  -  -  ;		Name : 		len.asm
    5 00:45E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45E5 -  -  -  -  ;		Reviewed :	None
    8 00:45E5 -  -  -  -  ;		Purpose :	String Length
    9 00:45E5 -  -  -  -  ;
   10 00:45E5 -  -  -  -  ; ***************************************************************************************
   11 00:45E5 -  -  -  -  ; ***************************************************************************************
   12 00:45E5 -  -  -  -  
   13 00:45E5 -  -  -  -  ; ***************************************************************************************
   14 00:45E5 -  -  -  -  ;
   15 00:45E5 -  -  -  -  ;								Len unary function
   16 00:45E5 -  -  -  -  ;
   17 00:45E5 -  -  -  -  ; ***************************************************************************************
   18 00:45E5 -  -  -  -  
   19 00:45E5 -  -  -  -  Unary_Len:	;; [len]
   20 00:45E5 CD 9D 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:45E8 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:45E9 CD A8 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:45EC -  -  -  -  _ULCount:
   24 00:45EC 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:45ED FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:45EF D8 -  -  -  		ret 	c
   27 00:45F0 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:45F1 13 -  -  -  		inc 	de
   29 00:45F2 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:45F4 -  -  -  -  
   31 00:45F4 -  -  -  -  ; ***************************************************************************************
   32 00:45F4 -  -  -  -  ;
   33 00:45F4 -  -  -  -  ;									Changes and Updates
   34 00:45F4 -  -  -  -  ;
   35 00:45F4 -  -  -  -  ; ***************************************************************************************
   36 00:45F4 -  -  -  -  ;
   37 00:45F4 -  -  -  -  ;		Date			Notes
   38 00:45F4 -  -  -  -  ;		==== 			=====
   39 00:45F4 -  -  -  -  ;
   40 00:45F4 -  -  -  -  ; ***************************************************************************************
   41 00:45F4 -  -  -  -  		
Listing for file "_build.asm"
   38 00:45F4 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:45F4 -  -  -  -  ; ***************************************************************************************
    2 00:45F4 -  -  -  -  ; ***************************************************************************************
    3 00:45F4 -  -  -  -  ;
    4 00:45F4 -  -  -  -  ;		Name : 		makestring.asm
    5 00:45F4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45F4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45F4 -  -  -  -  ;		Reviewed :	No
    8 00:45F4 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:45F4 -  -  -  -  ;
   10 00:45F4 -  -  -  -  ; ***************************************************************************************
   11 00:45F4 -  -  -  -  ; ***************************************************************************************
   12 00:45F4 -  -  -  -  
   13 00:45F4 -  -  -  -  ; ***************************************************************************************
   14 00:45F4 -  -  -  -  ;
   15 00:45F4 -  -  -  -  ;								Str$() unary function
   16 00:45F4 -  -  -  -  ;
   17 00:45F4 -  -  -  -  ; ***************************************************************************************
   18 00:45F4 -  -  -  -  
   19 00:45F4 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:45F4 CD 91 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:45F7 CD 08 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:45FA 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:45FC C9 -  -  -  		ret
   24 00:45FD -  -  -  -  
   25 00:45FD -  -  -  -  ; ***************************************************************************************
   26 00:45FD -  -  -  -  ;
   27 00:45FD -  -  -  -  ;									Changes and Updates
   28 00:45FD -  -  -  -  ;
   29 00:45FD -  -  -  -  ; ***************************************************************************************
   30 00:45FD -  -  -  -  ;
   31 00:45FD -  -  -  -  ;		Date			Notes
   32 00:45FD -  -  -  -  ;		==== 			=====
   33 00:45FD -  -  -  -  ;
   34 00:45FD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:45FD -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:45FD -  -  -  -  ; ***************************************************************************************
    2 00:45FD -  -  -  -  ; ***************************************************************************************
    3 00:45FD -  -  -  -  ;
    4 00:45FD -  -  -  -  ;		Name : 		not.asm
    5 00:45FD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45FD -  -  -  -  ;		Date : 		5th June 2023
    7 00:45FD -  -  -  -  ;		Reviewed :	No
    8 00:45FD -  -  -  -  ;		Purpose :	Logical not
    9 00:45FD -  -  -  -  ;
   10 00:45FD -  -  -  -  ; ***************************************************************************************
   11 00:45FD -  -  -  -  ; ***************************************************************************************
   12 00:45FD -  -  -  -  
   13 00:45FD -  -  -  -  ; ***************************************************************************************
   14 00:45FD -  -  -  -  ;
   15 00:45FD -  -  -  -  ;							not(x) e.g. one's complement
   16 00:45FD -  -  -  -  ;
   17 00:45FD -  -  -  -  ; ***************************************************************************************
   18 00:45FD -  -  -  -  
   19 00:45FD -  -  -  -  Unary_Not:		;; [not]
   20 00:45FD CD 91 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4600 CD 07 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:4603 CD 07 46 -  		call 	__UNSwap		
   23 00:4606 C9 -  -  -  		ret
   24 00:4607 -  -  -  -  
   25 00:4607 -  -  -  -  __UNSwap:
   26 00:4607 7C -  -  -  		ld 		a,h
   27 00:4608 2F -  -  -  		cpl
   28 00:4609 67 -  -  -  		ld 		h,a
   29 00:460A 7D -  -  -  		ld 		a,l
   30 00:460B 2F -  -  -  		cpl 	
   31 00:460C 6F -  -  -  		ld 		l,a
   32 00:460D D9 -  -  -  		exx
   33 00:460E C9 -  -  -  		ret
   34 00:460F -  -  -  -  
   35 00:460F -  -  -  -  ; ***************************************************************************************
   36 00:460F -  -  -  -  ;
   37 00:460F -  -  -  -  ;									Changes and Updates
   38 00:460F -  -  -  -  ;
   39 00:460F -  -  -  -  ; ***************************************************************************************
   40 00:460F -  -  -  -  ;
   41 00:460F -  -  -  -  ;		Date			Notes
   42 00:460F -  -  -  -  ;		==== 			=====
   43 00:460F -  -  -  -  ;
   44 00:460F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:460F -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:460F -  -  -  -  ; ***************************************************************************************
    2 00:460F -  -  -  -  ; ***************************************************************************************
    3 00:460F -  -  -  -  ;
    4 00:460F -  -  -  -  ;		Name : 		page.asm
    5 00:460F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:460F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:460F -  -  -  -  ;		Reviewed :	No
    8 00:460F -  -  -  -  ;		Purpose :	Various constants.
    9 00:460F -  -  -  -  ;
   10 00:460F -  -  -  -  ; ***************************************************************************************
   11 00:460F -  -  -  -  ; ***************************************************************************************
   12 00:460F -  -  -  -  
   13 00:460F -  -  -  -  ; ***************************************************************************************
   14 00:460F -  -  -  -  ;
   15 00:460F -  -  -  -  ;							page unary function (no bracket)
   16 00:460F -  -  -  -  ;
   17 00:460F -  -  -  -  ; ***************************************************************************************
   18 00:460F -  -  -  -  
   19 00:460F -  -  -  -  Unary_Page:	;; [page]
   20 00:460F 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:4612 D9 -  -  -  			exx
   22 00:4613 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:4616 D9 -  -  -  			exx
   24 00:4617 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4619 C9 -  -  -  			ret
   26 00:461A -  -  -  -  
   27 00:461A -  -  -  -  ; ***************************************************************************************
   28 00:461A -  -  -  -  ;
   29 00:461A -  -  -  -  ;									Changes and Updates
   30 00:461A -  -  -  -  ;
   31 00:461A -  -  -  -  ; ***************************************************************************************
   32 00:461A -  -  -  -  ;
   33 00:461A -  -  -  -  ;		Date			Notes
   34 00:461A -  -  -  -  ;		==== 			=====
   35 00:461A -  -  -  -  ;
   36 00:461A -  -  -  -  ; ***************************************************************************************
   37 00:461A -  -  -  -  			
Listing for file "_build.asm"
   41 00:461A -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:461A -  -  -  -  ; ***************************************************************************************
    2 00:461A -  -  -  -  ; ***************************************************************************************
    3 00:461A -  -  -  -  ;
    4 00:461A -  -  -  -  ;		Name : 		random.asm
    5 00:461A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:461A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:461A -  -  -  -  ;		Reviewed :	No
    8 00:461A -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:461A -  -  -  -  ;
   10 00:461A -  -  -  -  ; ***************************************************************************************
   11 00:461A -  -  -  -  ; ***************************************************************************************
   12 00:461A -  -  -  -  
   13 00:461A -  -  -  -  ; ***************************************************************************************
   14 00:461A -  -  -  -  ;
   15 00:461A -  -  -  -  ;								Random unary function
   16 00:461A -  -  -  -  ;
   17 00:461A -  -  -  -  ; ***************************************************************************************
   18 00:461A -  -  -  -  
   19 00:461A -  -  -  -  Unary_Random:	;; [rnd]
   20 00:461A 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:461B CD 91 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:461E D9 -  -  -  		exx 								; is it -ve
   23 00:461F CB 7C -  -  		bit 	7,h
   24 00:4621 D9 -  -  -  		exx
   25 00:4622 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4624 22 65 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4627 D9 -  -  -  		exx
   28 00:4628 22 69 40 -  		ld 		(RandomSeed+4),hl
   29 00:462B D9 -  -  -  		exx
   30 00:462C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:462E C9 -  -  -  		ret
   32 00:462F -  -  -  -  _URDontSeed:		
   33 00:462F -  -  -  -  
   34 00:462F CD C1 4B -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:4632 28 19 -  -  		jr 		z,_URFail
   36 00:4634 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4635 D9 -  -  -  		exx
   38 00:4636 E5 -  -  -  		push 	hl
   39 00:4637 D9 -  -  -  		exx
   40 00:4638 -  -  -  -  		;
   41 00:4638 CD 5C 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:463B D9 -  -  -  		exx
   43 00:463C CD 5C 46 -  		call 	URandomHL
   44 00:463F CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:4641 D9 -  -  -  		exx
   46 00:4642 -  -  -  -  		;
   47 00:4642 D9 -  -  -  		exx 								; restore range.
   48 00:4643 D1 -  -  -  		pop 	de
   49 00:4644 D9 -  -  -  		exx
   50 00:4645 D1 -  -  -  		pop 	de
   51 00:4646 -  -  -  -  		;
   52 00:4646 CD 6D 4A -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4649 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:464A 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:464C C9 -  -  -  		ret
   56 00:464D -  -  -  -  _URFail:
   57 00:464D 3E 03 C3 CA 
              42 -  -  -  		ERR_BADVALUE
   58 00:4652 -  -  -  -  ; ***************************************************************************************
   59 00:4652 -  -  -  -  ;
   60 00:4652 -  -  -  -  ; 									Push RNG off zero
   61 00:4652 -  -  -  -  ;
   62 00:4652 -  -  -  -  ; ***************************************************************************************
   63 00:4652 -  -  -  -  
   64 00:4652 -  -  -  -  UnaryRandomInitialise:
   65 00:4652 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4654 -  -  -  -  _URILoop:
   67 00:4654 C5 -  -  -  		push 	bc
   68 00:4655 CD 5C 46 -  		call 	URandomHL
   69 00:4658 C1 -  -  -  		pop 	bc
   70 00:4659 10 F9 -  -  		djnz 	_URILoop
   71 00:465B C9 -  -  -  		ret
   72 00:465C -  -  -  -  
   73 00:465C -  -  -  -  ; ***************************************************************************************
   74 00:465C -  -  -  -  ;
   75 00:465C -  -  -  -  ;							16 bit random number generator
   76 00:465C -  -  -  -  ;
   77 00:465C -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:465C -  -  -  -  ;		Actual author unspecified.
   79 00:465C -  -  -  -  ;
   80 00:465C -  -  -  -  ; ***************************************************************************************
   81 00:465C -  -  -  -  
   82 00:465C -  -  -  -  URandomHL:
   83 00:465C 2A 65 40 -  	    ld 		hl,(RandomSeed)
   84 00:465F ED 5B 69 40 	    ld 		de,(RandomSeed+4)
   85 00:4663 44 -  -  -  	    ld 		b,h
   86 00:4664 4D -  -  -  	    ld 		c,l
   87 00:4665 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:466A 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:466F 2C -  -  -  	    inc 	l
   90 00:4670 09 -  -  -  	    add 	hl,bc
   91 00:4671 22 65 40 -  	    ld 		(RandomSeed),hl
   92 00:4674 2A 69 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:4677 ED 5A -  -  	    adc 	hl,de
   94 00:4679 22 69 40 -  	    ld 		(RandomSeed+4),hl
   95 00:467C EB -  -  -  	    ex 		de,hl
   96 00:467D 2A 6D 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:4680 ED 4B 71 40 	    ld 		bc,(RandomSeed+12)
   98 00:4684 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4689 ED 43 71 40 	    ld 		(RandomSeed+12),bc
  100 00:468D 9F -  -  -  	    sbc 	a,a
  101 00:468E E6 C5 -  -  	    and 	%11000101
  102 00:4690 AD -  -  -  	    xor 	l
  103 00:4691 6F -  -  -  	    ld 		l,a
  104 00:4692 22 6D 40 -  	    ld 		(RandomSeed+8),hl
  105 00:4695 EB -  -  -  	    ex 		de,hl
  106 00:4696 09 -  -  -  	    add 	hl,bc
  107 00:4697 C9 -  -  -  	    ret		
  108 00:4698 -  -  -  -  
  109 00:4698 -  -  -  -  ; ***************************************************************************************
  110 00:4698 -  -  -  -  ;
  111 00:4698 -  -  -  -  ;									Changes and Updates
  112 00:4698 -  -  -  -  ;
  113 00:4698 -  -  -  -  ; ***************************************************************************************
  114 00:4698 -  -  -  -  ;
  115 00:4698 -  -  -  -  ;		Date			Notes
  116 00:4698 -  -  -  -  ;		==== 			=====
  117 00:4698 -  -  -  -  ;
  118 00:4698 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:4698 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4698 -  -  -  -  ; ***************************************************************************************
    2 00:4698 -  -  -  -  ; ***************************************************************************************
    3 00:4698 -  -  -  -  ;
    4 00:4698 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4698 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4698 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4698 -  -  -  -  ;		Reviewed :	No
    8 00:4698 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4698 -  -  -  -  ;
   10 00:4698 -  -  -  -  ; ***************************************************************************************
   11 00:4698 -  -  -  -  ; ***************************************************************************************
   12 00:4698 -  -  -  -  
   13 00:4698 -  -  -  -  ; ***************************************************************************************
   14 00:4698 -  -  -  -  ;
   15 00:4698 -  -  -  -  ;								sgn unary function
   16 00:4698 -  -  -  -  ;
   17 00:4698 -  -  -  -  ; ***************************************************************************************
   18 00:4698 -  -  -  -  
   19 00:4698 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4698 CD 91 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:469B CD C1 4B -  		call 	Int32Zero 					; integer sgn() code
   22 00:469E CA A8 43 -  		jp 		z,UnaryInt32False
   23 00:46A1 D9 -  -  -  		exx
   24 00:46A2 CB 7C -  -  		bit 	7,h
   25 00:46A4 D9 -  -  -  		exx
   26 00:46A5 C2 A4 43 -  		jp 		nz,UnaryInt32True
   27 00:46A8 3E 01 -  -  		ld 		a,1
   28 00:46AA C3 CE 44 -  		jp 		Return8BitConstant
   29 00:46AD -  -  -  -  
   30 00:46AD -  -  -  -  ; ***************************************************************************************
   31 00:46AD -  -  -  -  ;
   32 00:46AD -  -  -  -  ;									Changes and Updates
   33 00:46AD -  -  -  -  ;
   34 00:46AD -  -  -  -  ; ***************************************************************************************
   35 00:46AD -  -  -  -  ;
   36 00:46AD -  -  -  -  ;		Date			Notes
   37 00:46AD -  -  -  -  ;		==== 			=====
   38 00:46AD -  -  -  -  ;
   39 00:46AD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:46AD -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:46AD -  -  -  -  ; ***************************************************************************************
    2 00:46AD -  -  -  -  ; ***************************************************************************************
    3 00:46AD -  -  -  -  ;
    4 00:46AD -  -  -  -  ;		Name : 		simple.asm
    5 00:46AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46AD -  -  -  -  ;		Reviewed :	No
    8 00:46AD -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:46AD -  -  -  -  ;
   10 00:46AD -  -  -  -  ; ***************************************************************************************
   11 00:46AD -  -  -  -  ; ***************************************************************************************
   12 00:46AD -  -  -  -  
   13 00:46AD -  -  -  -  ; ***************************************************************************************
   14 00:46AD -  -  -  -  ;
   15 00:46AD -  -  -  -  ;								( unary function (think about it)
   16 00:46AD -  -  -  -  ;
   17 00:46AD -  -  -  -  ; ***************************************************************************************
   18 00:46AD -  -  -  -  
   19 00:46AD -  -  -  -  Unary_Brackets:	;; [(]
   20 00:46AD CD 3F 44 -  		call 	EvaluateAtPrecedence0
   21 00:46B0 C3 98 42 -  		jp  	CheckRightBracket
   22 00:46B3 -  -  -  -  
   23 00:46B3 -  -  -  -  ; ***************************************************************************************
   24 00:46B3 -  -  -  -  ;
   25 00:46B3 -  -  -  -  ;									Handle &x
   26 00:46B3 -  -  -  -  ;
   27 00:46B3 -  -  -  -  ; ***************************************************************************************
   28 00:46B3 -  -  -  -  
   29 00:46B3 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:46B3 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:46B6 E6 C0 -  -  		and 		$C0
   32 00:46B8 FE 40 -  -  		cp 			$40
   33 00:46BA C2 27 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:46BD C3 0A 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:46C0 -  -  -  -  
   36 00:46C0 -  -  -  -  ; ***************************************************************************************
   37 00:46C0 -  -  -  -  ;
   38 00:46C0 -  -  -  -  ;									Changes and Updates
   39 00:46C0 -  -  -  -  ;
   40 00:46C0 -  -  -  -  ; ***************************************************************************************
   41 00:46C0 -  -  -  -  ;
   42 00:46C0 -  -  -  -  ;		Date			Notes
   43 00:46C0 -  -  -  -  ;		==== 			=====
   44 00:46C0 -  -  -  -  ;
   45 00:46C0 -  -  -  -  ; ***************************************************************************************
   46 00:46C0 -  -  -  -  		
Listing for file "_build.asm"
   44 00:46C0 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:46C0 -  -  -  -  ; ***************************************************************************************
    2 00:46C0 -  -  -  -  ; ***************************************************************************************
    3 00:46C0 -  -  -  -  ;
    4 00:46C0 -  -  -  -  ;		Name : 		str.asm
    5 00:46C0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C0 -  -  -  -  ;		Reviewed :	No
    8 00:46C0 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:46C0 -  -  -  -  ;
   10 00:46C0 -  -  -  -  ; ***************************************************************************************
   11 00:46C0 -  -  -  -  ; ***************************************************************************************
   12 00:46C0 -  -  -  -  
   13 00:46C0 -  -  -  -  ; ***************************************************************************************
   14 00:46C0 -  -  -  -  ;
   15 00:46C0 -  -  -  -  ;								Str$() unary function
   16 00:46C0 -  -  -  -  ;
   17 00:46C0 -  -  -  -  ; ***************************************************************************************
   18 00:46C0 -  -  -  -  
   19 00:46C0 -  -  -  -  Unary_Str:	;; [str]
   20 00:46C0 CD A5 42 -  		call 	CheckDollar
   21 00:46C3 CD 91 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:46C6 01 81 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:46C9 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:46CB CD 02 4C -  		call 	Int32ToString 				
   25 00:46CE 21 81 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:46D1 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:46D3 C9 -  -  -  		ret
   28 00:46D4 -  -  -  -  
   29 00:46D4 -  -  -  -  ; ***************************************************************************************
   30 00:46D4 -  -  -  -  ;
   31 00:46D4 -  -  -  -  ;									Changes and Updates
   32 00:46D4 -  -  -  -  ;
   33 00:46D4 -  -  -  -  ; ***************************************************************************************
   34 00:46D4 -  -  -  -  ;
   35 00:46D4 -  -  -  -  ;		Date			Notes
   36 00:46D4 -  -  -  -  ;		==== 			=====
   37 00:46D4 -  -  -  -  ;
   38 00:46D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:46D4 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:46D4 -  -  -  -  ; ***************************************************************************************
    2 00:46D4 -  -  -  -  ; ***************************************************************************************
    3 00:46D4 -  -  -  -  ;
    4 00:46D4 -  -  -  -  ;		Name : 		time.asm
    5 00:46D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D4 -  -  -  -  ;		Reviewed :	No
    8 00:46D4 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:46D4 -  -  -  -  ;
   10 00:46D4 -  -  -  -  ; ***************************************************************************************
   11 00:46D4 -  -  -  -  ; ***************************************************************************************
   12 00:46D4 -  -  -  -  
   13 00:46D4 -  -  -  -  ; ***************************************************************************************
   14 00:46D4 -  -  -  -  ;
   15 00:46D4 -  -  -  -  ;							Get system time in ms
   16 00:46D4 -  -  -  -  ;
   17 00:46D4 -  -  -  -  ; ***************************************************************************************
   18 00:46D4 -  -  -  -  
   19 00:46D4 -  -  -  -  Unary_Time:	;; [time]
   20 00:46D4 CD 79 4C -  			call 	SYSGetTimer
   21 00:46D7 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:46D9 C9 -  -  -  			ret
   23 00:46DA -  -  -  -  
   24 00:46DA -  -  -  -  ; ***************************************************************************************
   25 00:46DA -  -  -  -  ;
   26 00:46DA -  -  -  -  ;									Changes and Updates
   27 00:46DA -  -  -  -  ;
   28 00:46DA -  -  -  -  ; ***************************************************************************************
   29 00:46DA -  -  -  -  ;
   30 00:46DA -  -  -  -  ;		Date			Notes
   31 00:46DA -  -  -  -  ;		==== 			=====
   32 00:46DA -  -  -  -  ;
   33 00:46DA -  -  -  -  ; ***************************************************************************************
   34 00:46DA -  -  -  -  			
Listing for file "_build.asm"
   46 00:46DA -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:46DA -  -  -  -  ; ***************************************************************************************
    2 00:46DA -  -  -  -  ; ***************************************************************************************
    3 00:46DA -  -  -  -  ;
    4 00:46DA -  -  -  -  ;		Name : 		top.asm
    5 00:46DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46DA -  -  -  -  ;		Reviewed :	No
    8 00:46DA -  -  -  -  ;		Purpose :	Various constants.
    9 00:46DA -  -  -  -  ;
   10 00:46DA -  -  -  -  ; ***************************************************************************************
   11 00:46DA -  -  -  -  ; ***************************************************************************************
   12 00:46DA -  -  -  -  
   13 00:46DA -  -  -  -  ; ***************************************************************************************
   14 00:46DA -  -  -  -  ;
   15 00:46DA -  -  -  -  ;							page unary function (no bracket)
   16 00:46DA -  -  -  -  ;
   17 00:46DA -  -  -  -  ; ***************************************************************************************
   18 00:46DA -  -  -  -  
   19 00:46DA -  -  -  -  Unary_Top:	;; [top]
   20 00:46DA 2A 4D 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:46DD D9 -  -  -  			exx
   22 00:46DE 2A 4F 40 -  			ld 		hl,(TopMemory+2)
   23 00:46E1 D9 -  -  -  			exx
   24 00:46E2 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:46E4 C9 -  -  -  			ret
   26 00:46E5 -  -  -  -  
   27 00:46E5 -  -  -  -  ; ***************************************************************************************
   28 00:46E5 -  -  -  -  ;
   29 00:46E5 -  -  -  -  ;									Changes and Updates
   30 00:46E5 -  -  -  -  ;
   31 00:46E5 -  -  -  -  ; ***************************************************************************************
   32 00:46E5 -  -  -  -  ;
   33 00:46E5 -  -  -  -  ;		Date			Notes
   34 00:46E5 -  -  -  -  ;		==== 			=====
   35 00:46E5 -  -  -  -  ;
   36 00:46E5 -  -  -  -  ; ***************************************************************************************
   37 00:46E5 -  -  -  -  			
Listing for file "_build.asm"
   47 00:46E5 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:46E5 -  -  -  -  ; ***************************************************************************************
    2 00:46E5 -  -  -  -  ; ***************************************************************************************
    3 00:46E5 -  -  -  -  ;
    4 00:46E5 -  -  -  -  ;		Name : 		val.asm
    5 00:46E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46E5 -  -  -  -  ;		Reviewed :	No
    8 00:46E5 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:46E5 -  -  -  -  ;
   10 00:46E5 -  -  -  -  ; ***************************************************************************************
   11 00:46E5 -  -  -  -  ; ***************************************************************************************
   12 00:46E5 -  -  -  -  
   13 00:46E5 -  -  -  -  ; ***************************************************************************************
   14 00:46E5 -  -  -  -  ;
   15 00:46E5 -  -  -  -  ;								val( unary function
   16 00:46E5 -  -  -  -  ;
   17 00:46E5 -  -  -  -  ; ***************************************************************************************
   18 00:46E5 -  -  -  -  
   19 00:46E5 -  -  -  -  Unary_Val:	;; [val]
   20 00:46E5 CD 9D 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:46E8 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:46E9 C1 -  -  -  		pop 	bc
   23 00:46EA 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:46EC CD F8 4A -  		call 	Int32FromString 			; get the integer part.
   25 00:46EF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:46F1 C8 -  -  -  		ret		z 							; okay
   27 00:46F2 3E 03 C3 CA 
              42 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:46F7 -  -  -  -  
   29 00:46F7 -  -  -  -  ; ***************************************************************************************
   30 00:46F7 -  -  -  -  ;
   31 00:46F7 -  -  -  -  ;									Changes and Updates
   32 00:46F7 -  -  -  -  ;
   33 00:46F7 -  -  -  -  ; ***************************************************************************************
   34 00:46F7 -  -  -  -  ;
   35 00:46F7 -  -  -  -  ;		Date			Notes
   36 00:46F7 -  -  -  -  ;		==== 			=====
   37 00:46F7 -  -  -  -  ;
   38 00:46F7 -  -  -  -  ; ***************************************************************************************
   39 00:46F7 -  -  -  -  		
Listing for file "_build.asm"
   48 00:46F7 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:46F7 -  -  -  -  ; ***************************************************************************************
    2 00:46F7 -  -  -  -  ; ***************************************************************************************
    3 00:46F7 -  -  -  -  ;
    4 00:46F7 -  -  -  -  ;		Name : 		allocate.asm
    5 00:46F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F7 -  -  -  -  ;		Date : 		4th June 2022
    7 00:46F7 -  -  -  -  ;		Reviewed :	No
    8 00:46F7 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:46F7 -  -  -  -  ;
   10 00:46F7 -  -  -  -  ; ***************************************************************************************
   11 00:46F7 -  -  -  -  ; ***************************************************************************************
   12 00:46F7 -  -  -  -  
   13 00:46F7 -  -  -  -  ; ***************************************************************************************
   14 00:46F7 -  -  -  -  ;
   15 00:46F7 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:46F7 -  -  -  -  ;
   17 00:46F7 -  -  -  -  ; ***************************************************************************************
   18 00:46F7 -  -  -  -  
   19 00:46F7 -  -  -  -  AllocateBytes:
   20 00:46F7 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:46F8 21 00 00 -  		ld 		hl,$000000
   22 00:46FB 62 -  -  -  		ld 		h,d
   23 00:46FC 6B -  -  -  		ld 		l,e
   24 00:46FD ED 5B 49 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   25 00:4701 D5 -  -  -  		push 	de 							; save on stack
   26 00:4702 19 -  -  -  		add 	hl,de 						; HL is the new highest
   27 00:4703 22 49 40 -  		ld 		(LowAllocMemory),hl 		; update it
   28 00:4706 EB -  -  -  		ex 		de,hl 						; put in DE
   29 00:4707 2A 45 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   30 00:470A AF -  -  -  		xor 	a
   31 00:470B ED 52 -  -  		sbc 	hl,de
   32 00:470D E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   33 00:470E D0 -  -  -  		ret 	nc 							; return if high >= low
   34 00:470F 3E 07 C3 CA 
              42 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   35 00:4714 -  -  -  -  
   36 00:4714 -  -  -  -  ; ***************************************************************************************
   37 00:4714 -  -  -  -  ;
   38 00:4714 -  -  -  -  ;									Changes and Updates
   39 00:4714 -  -  -  -  ;
   40 00:4714 -  -  -  -  ; ***************************************************************************************
   41 00:4714 -  -  -  -  ;
   42 00:4714 -  -  -  -  ;		Date			Notes
   43 00:4714 -  -  -  -  ;		==== 			=====
   44 00:4714 -  -  -  -  ;
   45 00:4714 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:4714 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4714 -  -  -  -  ; ***************************************************************************************
    2 00:4714 -  -  -  -  ; ***************************************************************************************
    3 00:4714 -  -  -  -  ;
    4 00:4714 -  -  -  -  ;		Name : 		clear.asm
    5 00:4714 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4714 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4714 -  -  -  -  ;		Reviewed :	No
    8 00:4714 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4714 -  -  -  -  ;
   10 00:4714 -  -  -  -  ; ***************************************************************************************
   11 00:4714 -  -  -  -  ; ***************************************************************************************
   12 00:4714 -  -  -  -  
   13 00:4714 -  -  -  -  ; ***************************************************************************************
   14 00:4714 -  -  -  -  ;
   15 00:4714 -  -  -  -  ;										CLEAR command
   16 00:4714 -  -  -  -  ;
   17 00:4714 -  -  -  -  ; ***************************************************************************************
   18 00:4714 -  -  -  -  
   19 00:4714 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4714 -  -  -  -  		;
   21 00:4714 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4714 -  -  -  -  		;
   23 00:4714 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4717 -  -  -  -  _CCFindLow:
   25 00:4717 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:471A 5E -  -  -  		ld 		e,(hl)		
   27 00:471B 19 -  -  -  		add 	hl,de
   28 00:471C 7B -  -  -  		ld 		a,e
   29 00:471D B7 -  -  -  		or 		a
   30 00:471E 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4720 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4721 22 4D 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4724 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4725 22 49 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:4728 -  -  -  -  		;
   36 00:4728 -  -  -  -  		; 	 		Reset the language stack
   37 00:4728 -  -  -  -  		;
   38 00:4728 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:472B -  -  -  -  		;
   40 00:472B 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:472D 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:4730 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:4733 19 -  -  -  		add 	hl,de
   44 00:4734 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4736 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4739 -  -  -  -  		;
   47 00:4739 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:473C 19 -  -  -  		add 	hl,de
   49 00:473D 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:4740 -  -  -  -  		;
   51 00:4740 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:4740 -  -  -  -  		;
   53 00:4740 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:4743 -  -  -  -  _CCFClearHT:
   55 00:4743 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:4744 36 00 -  -  		ld 		(hl),0
   57 00:4746 1B -  -  -  		dec 	de
   58 00:4747 7A -  -  -  		ld 		a,d
   59 00:4748 B3 -  -  -  		or 		e
   60 00:4749 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:474B 22 41 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:474E -  -  -  -  		;
   63 00:474E -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:474E -  -  -  -  		;
   65 00:474E 22 45 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:4751 -  -  -  -  		;
   67 00:4751 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:4751 -  -  -  -  		;
   69 00:4751 CD 52 46 -  		call 	UnaryRandomInitialise
   70 00:4754 C9 -  -  -  		ret
   71 00:4755 -  -  -  -  
   72 00:4755 -  -  -  -  ; ***************************************************************************************
   73 00:4755 -  -  -  -  ;
   74 00:4755 -  -  -  -  ;									Changes and Updates
   75 00:4755 -  -  -  -  ;
   76 00:4755 -  -  -  -  ; ***************************************************************************************
   77 00:4755 -  -  -  -  ;
   78 00:4755 -  -  -  -  ;		Date			Notes
   79 00:4755 -  -  -  -  ;		==== 			=====
   80 00:4755 -  -  -  -  ;
   81 00:4755 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:4755 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4755 -  -  -  -  ; ***************************************************************************************
    2 00:4755 -  -  -  -  ; ***************************************************************************************
    3 00:4755 -  -  -  -  ;
    4 00:4755 -  -  -  -  ;		Name : 		instance.asm
    5 00:4755 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4755 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4755 -  -  -  -  ;		Reviewed :	No
    8 00:4755 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4755 -  -  -  -  ;
   10 00:4755 -  -  -  -  ; ***************************************************************************************
   11 00:4755 -  -  -  -  ; ***************************************************************************************
   12 00:4755 -  -  -  -  
   13 00:4755 -  -  -  -  ; ***************************************************************************************
   14 00:4755 -  -  -  -  ;
   15 00:4755 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4755 -  -  -  -  ;
   17 00:4755 -  -  -  -  ; ***************************************************************************************
   18 00:4755 -  -  -  -  
   19 00:4755 -  -  -  -  SetCurrentInstance:
   20 00:4755 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4759 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:475C ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:4760 -  -  -  -  
   24 00:4760 C9 -  -  -  		ret
   25 00:4761 -  -  -  -  
   26 00:4761 -  -  -  -  
   27 00:4761 -  -  -  -  ; ***************************************************************************************
   28 00:4761 -  -  -  -  ;
   29 00:4761 -  -  -  -  ;									Changes and Updates
   30 00:4761 -  -  -  -  ;
   31 00:4761 -  -  -  -  ; ***************************************************************************************
   32 00:4761 -  -  -  -  ;
   33 00:4761 -  -  -  -  ;		Date			Notes
   34 00:4761 -  -  -  -  ;		==== 			=====
   35 00:4761 -  -  -  -  ;
   36 00:4761 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:4761 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:4761 -  -  -  -  ; ***************************************************************************************
    2 00:4761 -  -  -  -  ; ***************************************************************************************
    3 00:4761 -  -  -  -  ;
    4 00:4761 -  -  -  -  ;		Name : 		new.asm
    5 00:4761 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4761 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4761 -  -  -  -  ;		Reviewed :	No
    8 00:4761 -  -  -  -  ;		Purpose :	New command.
    9 00:4761 -  -  -  -  ;
   10 00:4761 -  -  -  -  ; ***************************************************************************************
   11 00:4761 -  -  -  -  ; ***************************************************************************************
   12 00:4761 -  -  -  -  
   13 00:4761 -  -  -  -  ; ***************************************************************************************
   14 00:4761 -  -  -  -  ;
   15 00:4761 -  -  -  -  ;										NEW command
   16 00:4761 -  -  -  -  ;
   17 00:4761 -  -  -  -  ; ***************************************************************************************
   18 00:4761 -  -  -  -  
   19 00:4761 -  -  -  -  Command_NEW: 	;; [new]
   20 00:4761 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4764 36 00 -  -  		ld 		(hl),0
   22 00:4766 CD 14 47 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4769 3E 00 C3 CA 
              42 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:476E -  -  -  -  
   25 00:476E -  -  -  -  ; ***************************************************************************************
   26 00:476E -  -  -  -  ;
   27 00:476E -  -  -  -  ;									Changes and Updates
   28 00:476E -  -  -  -  ;
   29 00:476E -  -  -  -  ; ***************************************************************************************
   30 00:476E -  -  -  -  ;
   31 00:476E -  -  -  -  ;		Date			Notes
   32 00:476E -  -  -  -  ;		==== 			=====
   33 00:476E -  -  -  -  ;
   34 00:476E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:476E -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:476E -  -  -  -  ; ***************************************************************************************
    2 00:476E -  -  -  -  ; ***************************************************************************************
    3 00:476E -  -  -  -  ;
    4 00:476E -  -  -  -  ;		Name : 		utility.asm
    5 00:476E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:476E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:476E -  -  -  -  ;		Reviewed :	No
    8 00:476E -  -  -  -  ;		Purpose :	Utility routines
    9 00:476E -  -  -  -  ;
   10 00:476E -  -  -  -  ; ***************************************************************************************
   11 00:476E -  -  -  -  ; ***************************************************************************************
   12 00:476E -  -  -  -  
   13 00:476E -  -  -  -  ; ***************************************************************************************
   14 00:476E -  -  -  -  ;
   15 00:476E -  -  -  -  ;							Print ASCII string at HL
   16 00:476E -  -  -  -  ;
   17 00:476E -  -  -  -  ; ***************************************************************************************
   18 00:476E -  -  -  -  
   19 00:476E -  -  -  -  PrintStringAtHL:
   20 00:476E 7E -  -  -  		ld 		a,(hl)
   21 00:476F FE 20 -  -  		cp 		$20		
   22 00:4771 D8 -  -  -  		ret 	c
   23 00:4772 CD 50 4C -  		call 	SYSPrintChar
   24 00:4775 23 -  -  -  		inc 	hl
   25 00:4776 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4778 -  -  -  -  
   27 00:4778 -  -  -  -  ; ***************************************************************************************
   28 00:4778 -  -  -  -  ;
   29 00:4778 -  -  -  -  ;									Changes and Updates
   30 00:4778 -  -  -  -  ;
   31 00:4778 -  -  -  -  ; ***************************************************************************************
   32 00:4778 -  -  -  -  ;
   33 00:4778 -  -  -  -  ;		Date			Notes
   34 00:4778 -  -  -  -  ;		==== 			=====
   35 00:4778 -  -  -  -  ;
   36 00:4778 -  -  -  -  ; ***************************************************************************************
   37 00:4778 -  -  -  -  		
Listing for file "_build.asm"
   53 00:4778 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:4778 -  -  -  -  ; ***************************************************************************************
    2 00:4778 -  -  -  -  ; ***************************************************************************************
    3 00:4778 -  -  -  -  ;
    4 00:4778 -  -  -  -  ;		Name : 		create.asm
    5 00:4778 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4778 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4778 -  -  -  -  ;		Reviewed :	No
    8 00:4778 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:4778 -  -  -  -  ;
   10 00:4778 -  -  -  -  ; ***************************************************************************************
   11 00:4778 -  -  -  -  ; ***************************************************************************************
   12 00:4778 -  -  -  -  
   13 00:4778 -  -  -  -  ; ***************************************************************************************
   14 00:4778 -  -  -  -  ;
   15 00:4778 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:4778 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:4778 -  -  -  -  ;
   18 00:4778 -  -  -  -  ; ***************************************************************************************
   19 00:4778 -  -  -  -  
   20 00:4778 -  -  -  -  VariableCreate:		
   21 00:4778 -  -  -  -  		;
   22 00:4778 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:4778 -  -  -  -  		;
   24 00:4778 11 09 00 -  		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:477B 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:477C E5 -  -  -  		push 	hl 							; save count.
   27 00:477D CD F7 46 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4780 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4781 -  -  -  -  		;
   30 00:4781 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4781 -  -  -  -  		;
   32 00:4781 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4782 -  -  -  -  _VCClear:
   34 00:4782 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4784 23 -  -  -  		inc 	hl
   36 00:4785 0B -  -  -  		dec 	bc
   37 00:4786 78 -  -  -  		ld		a,b
   38 00:4787 B1 -  -  -  		or 		c
   39 00:4788 20 F8 -  -  		jr 		nz,_VCClear
   40 00:478A E1 -  -  -  		pop 	hl							; restore start address
   41 00:478B -  -  -  -  		;
   42 00:478B -  -  -  -  		;		Now start to create the data.
   43 00:478B -  -  -  -  		;
   44 00:478B E5 -  -  -  		push 	hl 							; save start
   45 00:478C -  -  -  -  		;
   46 00:478C -  -  -  -  		;		Write hash to +0
   47 00:478C -  -  -  -  		;
   48 00:478C 3A 7B 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:478F 77 -  -  -  		ld 		(hl),a
   50 00:4790 23 -  -  -  		inc 	hl
   51 00:4791 -  -  -  -  		;
   52 00:4791 -  -  -  -  		;		Write list head to +1
   53 00:4791 -  -  -  -  		;
   54 00:4791 E5 -  -  -  		push 	hl 							; save write position
   55 00:4792 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4795 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:4799 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:479A E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:479B 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:47A1 -  -  -  -  		;
   61 00:47A1 -  -  -  -  		;		Write variable name to +5
   62 00:47A1 -  -  -  -  		;
   63 00:47A1 ED 5B 77 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:47A5 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:47AB -  -  -  -  		;
   66 00:47AB D1 -  -  -  		pop 	de 							; get the start address back
   67 00:47AC 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:47AF 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:47B5 -  -  -  -  		;
   70 00:47B5 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:47B6 C9 -  -  -  		ret
   72 00:47B7 -  -  -  -  
   73 00:47B7 -  -  -  -  ; ***************************************************************************************
   74 00:47B7 -  -  -  -  ;
   75 00:47B7 -  -  -  -  ;									Changes and Updates
   76 00:47B7 -  -  -  -  ;
   77 00:47B7 -  -  -  -  ; ***************************************************************************************
   78 00:47B7 -  -  -  -  ;
   79 00:47B7 -  -  -  -  ;		Date			Notes
   80 00:47B7 -  -  -  -  ;		==== 			=====
   81 00:47B7 -  -  -  -  ;
   82 00:47B7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:47B7 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:47B7 -  -  -  -  ; ***************************************************************************************
    2 00:47B7 -  -  -  -  ; ***************************************************************************************
    3 00:47B7 -  -  -  -  ;
    4 00:47B7 -  -  -  -  ;		Name : 		find.asm
    5 00:47B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47B7 -  -  -  -  ;		Reviewed :	No
    8 00:47B7 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:47B7 -  -  -  -  ;
   10 00:47B7 -  -  -  -  ; ***************************************************************************************
   11 00:47B7 -  -  -  -  ; ***************************************************************************************
   12 00:47B7 -  -  -  -  
   13 00:47B7 -  -  -  -  ; ***************************************************************************************
   14 00:47B7 -  -  -  -  ;
   15 00:47B7 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:47B7 -  -  -  -  ; 		variable information at (IX)
   17 00:47B7 -  -  -  -  ;
   18 00:47B7 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:47B7 -  -  -  -  ;		Don't autocreate arrays.
   20 00:47B7 -  -  -  -  ;
   21 00:47B7 -  -  -  -  ; ***************************************************************************************
   22 00:47B7 -  -  -  -  
   23 00:47B7 -  -  -  -  FindVariable:
   24 00:47B7 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:47BA FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:47BC D2 27 43 -  		jp 		nc,SyntaxError 		
   27 00:47BF -  -  -  -  
   28 00:47BF DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:47C2 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:47C4 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:47C6 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:47C8 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:47CA -  -  -  -  		;
   34 00:47CA -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:47CA -  -  -  -  		;
   36 00:47CA 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:47CD DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:47D0 87 -  -  -  		add 	a,a 						; x4
   39 00:47D1 87 -  -  -  		add 	a,a
   40 00:47D2 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:47D3 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:47D4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:47D6 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:47D8 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:47DA AF -  -  -  		xor 	a 							; clear carry and return
   46 00:47DB C9 -  -  -  		ret
   47 00:47DC -  -  -  -  		;
   48 00:47DC -  -  -  -  		;		Not a standard simple variable.
   49 00:47DC -  -  -  -  		;
   50 00:47DC -  -  -  -  _FVNotSimple:
   51 00:47DC CD 09 48 -  		call 	VariableInformation 		; get information about the variable.
   52 00:47DF CD 3F 48 -  		call 	VariableSearchList 			; search the linked list
   53 00:47E2 38 0A -  -  		jr 		c,_FVNotFound  				
   54 00:47E4 -  -  -  -  		;
   55 00:47E4 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:47E4 -  -  -  -  		;
   57 00:47E4 -  -  -  -  _FVExitReference:		
   58 00:47E4 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:47E7 19 -  -  -  		add 	hl,de 
   60 00:47E8 -  -  -  -  		;
   61 00:47E8 -  -  -  -  		; 		TODO: Array check code.
   62 00:47E8 -  -  -  -  		;
   63 00:47E8 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:47EA CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:47EC AF -  -  -  		xor 	a 							; clear carry and return
   66 00:47ED C9 -  -  -  		ret
   67 00:47EE -  -  -  -  		;
   68 00:47EE -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:47EE -  -  -  -  		;
   70 00:47EE -  -  -  -  _FVNotFound:		
   71 00:47EE 3A 75 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:47F1 B7 -  -  -  		or 		a
   73 00:47F2 28 0F -  -  		jr 		z,_FVFail
   74 00:47F4 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:47F7 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:47F9 28 08 -  -  		jr 		z,_FVFail
   77 00:47FB 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   78 00:47FE CD 78 47 -  		call 	VariableCreate 				; create a new variable.
   79 00:4801 18 E1 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:4803 -  -  -  -  
   81 00:4803 -  -  -  -  _FVFail:
   82 00:4803 DD 2A 77 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:4807 37 -  -  -  		scf
   84 00:4808 C9 -  -  -  		ret
   85 00:4809 -  -  -  -  
   86 00:4809 -  -  -  -  ; ***************************************************************************************
   87 00:4809 -  -  -  -  ;
   88 00:4809 -  -  -  -  ;									Changes and Updates
   89 00:4809 -  -  -  -  ;
   90 00:4809 -  -  -  -  ; ***************************************************************************************
   91 00:4809 -  -  -  -  ;
   92 00:4809 -  -  -  -  ;		Date			Notes
   93 00:4809 -  -  -  -  ;		==== 			=====
   94 00:4809 -  -  -  -  ;
   95 00:4809 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4809 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4809 -  -  -  -  ; ***************************************************************************************
    2 00:4809 -  -  -  -  ; ***************************************************************************************
    3 00:4809 -  -  -  -  ;
    4 00:4809 -  -  -  -  ;		Name : 		info.asm
    5 00:4809 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4809 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4809 -  -  -  -  ;		Reviewed :	No
    8 00:4809 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4809 -  -  -  -  ;
   10 00:4809 -  -  -  -  ; ***************************************************************************************
   11 00:4809 -  -  -  -  ; ***************************************************************************************
   12 00:4809 -  -  -  -  
   13 00:4809 -  -  -  -  ; ***************************************************************************************
   14 00:4809 -  -  -  -  ;
   15 00:4809 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4809 -  -  -  -  ; 		after the identifier.
   17 00:4809 -  -  -  -  ;
   18 00:4809 -  -  -  -  ; ***************************************************************************************
   19 00:4809 -  -  -  -  
   20 00:4809 -  -  -  -  VariableInformation:
   21 00:4809 DD 22 77 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:480D -  -  -  -  		;
   23 00:480D -  -  -  -  		; 		Calculate hash, find end.
   24 00:480D -  -  -  -  		;
   25 00:480D 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:480F -  -  -  -  _VICalculateHash:
   27 00:480F DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4812 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4814 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4816 80 -  -  -  		add 	a,b 						; add to hash
   31 00:4817 07 -  -  -  		rlca
   32 00:4818 07 -  -  -  		rlca
   33 00:4819 80 -  -  -  		add 	a,b
   34 00:481A 47 -  -  -  		ld 		b,a 						; update hash
   35 00:481B DD 23 -  -  		inc 	ix 							; next character
   36 00:481D 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:481F -  -  -  -  		;
   38 00:481F -  -  -  -  _VIHashDone:
   39 00:481F 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:4820 -  -  -  -  		;
   41 00:4820 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:4820 -  -  -  -  		;
   43 00:4820 32 7B 40 -  		ld 		(VarHash),a
   44 00:4823 -  -  -  -  		;
   45 00:4823 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:4823 -  -  -  -  		;		
   47 00:4823 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:4825 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:4828 6F -  -  -  		ld 		l,a
   50 00:4829 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:482A 29 -  -  -  		add 	hl,hl
   52 00:482B -  -  -  -  		;
   53 00:482B ED 5B 41 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:482F 19 -  -  -  		add 	hl,de
   55 00:4830 -  -  -  -  		;
   56 00:4830 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:4833 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:4835 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:4837 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:483A 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:483B -  -  -  -  _VINotArray:
   62 00:483B 22 7D 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:483E C9 -  -  -  		ret
   64 00:483F -  -  -  -  
   65 00:483F -  -  -  -  ; ***************************************************************************************
   66 00:483F -  -  -  -  ;
   67 00:483F -  -  -  -  ;									Changes and Updates
   68 00:483F -  -  -  -  ;
   69 00:483F -  -  -  -  ; ***************************************************************************************
   70 00:483F -  -  -  -  ;
   71 00:483F -  -  -  -  ;		Date			Notes
   72 00:483F -  -  -  -  ;		==== 			=====
   73 00:483F -  -  -  -  ;
   74 00:483F -  -  -  -  ; ***************************************************************************************
   75 00:483F -  -  -  -  
Listing for file "_build.asm"
   56 00:483F -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:483F -  -  -  -  ; ***************************************************************************************
    2 00:483F -  -  -  -  ; ***************************************************************************************
    3 00:483F -  -  -  -  ;
    4 00:483F -  -  -  -  ;		Name : 		search.asm
    5 00:483F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:483F -  -  -  -  ;		Date : 		4th June 2022
    7 00:483F -  -  -  -  ;		Reviewed :	No
    8 00:483F -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:483F -  -  -  -  ;
   10 00:483F -  -  -  -  ; ***************************************************************************************
   11 00:483F -  -  -  -  ; ***************************************************************************************
   12 00:483F -  -  -  -  
   13 00:483F -  -  -  -  ; ***************************************************************************************
   14 00:483F -  -  -  -  ;
   15 00:483F -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:483F -  -  -  -  ;		CS if failed.
   17 00:483F -  -  -  -  ;
   18 00:483F -  -  -  -  ; ***************************************************************************************
   19 00:483F -  -  -  -  
   20 00:483F -  -  -  -  VariableSearchList:
   21 00:483F 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4842 -  -  -  -  		;
   23 00:4842 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4842 -  -  -  -  		;		the address of the hash record
   25 00:4842 -  -  -  -  		;
   26 00:4842 -  -  -  -  _VSLLoop:
   27 00:4842 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4846 -  -  -  -  		;
   29 00:4846 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4847 AF -  -  -  		xor 	a
   31 00:4848 ED 6A -  -  		adc 	hl,hl
   32 00:484A E1 -  -  -  		pop 	hl
   33 00:484B 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:484D 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:484E C8 -  -  -  		ret 	z
   36 00:484F -  -  -  -  _VSLRecord:
   37 00:484F -  -  -  -  		;
   38 00:484F -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:484F -  -  -  -  		;
   40 00:484F 3A 7B 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:4852 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:4853 23 -  -  -  		inc 	hl 							; points to link back
   43 00:4854 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4856 -  -  -  -  		;
   45 00:4856 -  -  -  -  		;		Now check the name
   46 00:4856 -  -  -  -  		;
   47 00:4856 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4857 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4858 23 -  -  -  		inc 	hl
   50 00:4859 23 -  -  -  		inc 	hl
   51 00:485A 23 -  -  -  		inc 	hl
   52 00:485B 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:485F ED 5B 77 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:4863 -  -  -  -  		;
   55 00:4863 -  -  -  -  		;		Check individual characters
   56 00:4863 -  -  -  -  		;
   57 00:4863 -  -  -  -  _VSLCharacter:
   58 00:4863 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:4864 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4866 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4868 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:4869 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:486A 13 -  -  -  		inc 	de
   64 00:486B 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:486D -  -  -  -  		;
   66 00:486D -  -  -  -  _VSLFailed:
   67 00:486D E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:486E 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:4870 -  -  -  -  		;
   70 00:4870 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:4870 -  -  -  -  		;		
   72 00:4870 -  -  -  -  _VSLEndIdentifier:
   73 00:4870 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:4871 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4873 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4875 -  -  -  -  		;
   77 00:4875 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4876 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4877 AF -  -  -  		xor 	a 							; clear carry
   80 00:4878 C9 -  -  -  		ret
   81 00:4879 -  -  -  -  
   82 00:4879 -  -  -  -  ; ***************************************************************************************
   83 00:4879 -  -  -  -  ;
   84 00:4879 -  -  -  -  ;									Changes and Updates
   85 00:4879 -  -  -  -  ;
   86 00:4879 -  -  -  -  ; ***************************************************************************************
   87 00:4879 -  -  -  -  ;
   88 00:4879 -  -  -  -  ;		Date			Notes
   89 00:4879 -  -  -  -  ;		==== 			=====
   90 00:4879 -  -  -  -  ;
   91 00:4879 -  -  -  -  ; ***************************************************************************************
   92 00:4879 -  -  -  -  		
Listing for file "_build.asm"
   57 00:4879 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4879 -  -  -  -  ;
    2 00:4879 -  -  -  -  ;	This file is automatically generated.
    3 00:4879 -  -  -  -  ;
    4 00:4879 00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:4880 -  -  -  -  PrecedenceTable:
    6 00:4880 06 -  -  -  	.db	6	; $0083 !
    7 00:4881 06 -  -  -  	.db	6	; $0084 ?
    8 00:4882 05 -  -  -  	.db	5	; $0085 *
    9 00:4883 05 -  -  -  	.db	5	; $0086 /
   10 00:4884 05 -  -  -  	.db	5	; $0087 mod
   11 00:4885 05 -  -  -  	.db	5	; $0088 div
   12 00:4886 04 -  -  -  	.db	4	; $0089 +
   13 00:4887 04 -  -  -  	.db	4	; $008a -
   14 00:4888 03 -  -  -  	.db	3	; $008b >=
   15 00:4889 03 -  -  -  	.db	3	; $008c <=
   16 00:488A 03 -  -  -  	.db	3	; $008d >
   17 00:488B 03 -  -  -  	.db	3	; $008e <
   18 00:488C 03 -  -  -  	.db	3	; $008f =
   19 00:488D 03 -  -  -  	.db	3	; $0090 <>
   20 00:488E 02 -  -  -  	.db	2	; $0091 and
   21 00:488F 01 -  -  -  	.db	1	; $0092 or
   22 00:4890 01 -  -  -  	.db	1	; $0093 eor
   23 00:4891 -  -  -  -  
Listing for file "_build.asm"
   58 00:4891 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4891 -  -  -  -  ;
    2 00:4891 -  -  -  -  ;	This is automatically generated.
    3 00:4891 -  -  -  -  ;
    4 00:4891 -  -  -  -  ErrorIDTable:
    5 00:4891 D5 48 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4895 DB 48 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4899 EC 48 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:489D FA 48 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:48A1 04 49 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:48A5 0E 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:48A9 28 49 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:48AD 39 49 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:48B1 47 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:48B5 55 49 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:48B9 5F 49 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:48BD 74 49 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:48C1 8A 49 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:48C5 98 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:48C9 9D 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:48CD AA 49 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:48D1 BB 49 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:48D5 -  -  -  -  
   23 00:48D5 -  -  -  -  ErrText_warmstart:
   24 00:48D5 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:48DB -  -  -  -  ErrText_assert:
   26 00:48DB 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:48EC -  -  -  -  ErrText_badtype:
   28 00:48EC 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:48FA -  -  -  -  ErrText_badvalue:
   30 00:48FA 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:4904 -  -  -  -  ErrText_dim:
   32 00:4904 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:490E -  -  -  -  ErrText_disabled:
   34 00:490E 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:4928 -  -  -  -  ErrText_divzero:
   36 00:4928 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:4939 -  -  -  -  ErrText_memory:
   38 00:4939 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:4947 -  -  -  -  ErrText_nocomma:
   40 00:4947 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:4955 -  -  -  -  ErrText_nodollar:
   42 00:4955 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:495F -  -  -  -  ErrText_nolbracket:
   44 00:495F 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:4974 -  -  -  -  ErrText_norbracket:
   46 00:4974 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:498A -  -  -  -  ErrText_notref:
   48 00:498A 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:4998 -  -  -  -  ErrText_stop:
   50 00:4998 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:499D -  -  -  -  ErrText_syntax:
   52 00:499D 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:49AA -  -  -  -  ErrText_todo:
   54 00:49AA 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:49BB -  -  -  -  ErrText_unknownvar:
   56 00:49BB 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:49CC -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:49CC -  -  -  -  ;
    2 00:49CC -  -  -  -  ;	Vectors for set 0
    3 00:49CC -  -  -  -  ;
    4 00:49CC -  -  -  -  VectorsSet0:
    5 00:49CC 61 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:49CE 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:49D0 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:49D2 84 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:49D4 8C 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:49D6 42 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:49D8 4D 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:49DA 58 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:49DC 4D 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:49DE 2C 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:49E0 37 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:49E2 DF 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:49E4 D6 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:49E6 C4 43 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:49E8 BB 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:49EA B2 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:49EC CD 43 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:49EE 63 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:49F0 6E 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:49F2 79 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:49F4 B3 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:49F6 AD 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:49F8 F4 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:49FA 1A 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:49FC E5 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:49FE C2 45 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4A00 98 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4A02 C0 46 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4A04 D4 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4A06 CD 45 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4A08 FD 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4A0A 0F 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4A0C D4 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4A0E DA 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4A10 E5 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4A12 A4 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4A14 A8 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4A16 E2 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4A18 E2 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4A1A E5 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4A1C E2 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4A1E 08 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4A20 1F 40 -  -  	addr(Unimplemented)              ; $00aa [
   48 00:4A22 1F 40 -  -  	addr(Unimplemented)              ; $00ab ]
   49 00:4A24 1F 40 -  -  	addr(Unimplemented)              ; $00ac repeat
   50 00:4A26 1F 40 -  -  	addr(Unimplemented)              ; $00ad until
   51 00:4A28 1F 40 -  -  	addr(Unimplemented)              ; $00ae if
   52 00:4A2A E2 40 -  -  	addr(BadCmd_Then)                ; $00af then
   53 00:4A2C 1F 40 -  -  	addr(Unimplemented)              ; $00b0 else
   54 00:4A2E 1F 40 -  -  	addr(Unimplemented)              ; $00b1 for
   55 00:4A30 E2 40 -  -  	addr(BadCmd_To)                  ; $00b2 to
   56 00:4A32 1F 40 -  -  	addr(Unimplemented)              ; $00b3 step
   57 00:4A34 1F 40 -  -  	addr(Unimplemented)              ; $00b4 next
   58 00:4A36 1F 40 -  -  	addr(Unimplemented)              ; $00b5 def
   59 00:4A38 1F 40 -  -  	addr(Unimplemented)              ; $00b6 proc
   60 00:4A3A 1F 40 -  -  	addr(Unimplemented)              ; $00b7 endproc
   61 00:4A3C 1F 40 -  -  	addr(Unimplemented)              ; $00b8 gosub
   62 00:4A3E 1F 40 -  -  	addr(Unimplemented)              ; $00b9 return
   63 00:4A40 1F 40 -  -  	addr(Unimplemented)              ; $00ba goto
   64 00:4A42 1F 40 -  -  	addr(Unimplemented)              ; $00bb local
   65 00:4A44 E6 40 -  -  	addr(Command_DIM)                ; $00bc dim
   66 00:4A46 08 42 -  -  	addr(Command_REM)                ; $00bd rem
   67 00:4A48 74 41 -  -  	addr(Command_LET)                ; $00be let
   68 00:4A4A 1F 40 -  -  	addr(Unimplemented)              ; $00bf vdu
   69 00:4A4C B9 41 -  -  	addr(Command_PRINT)              ; $00c0 print
   70 00:4A4E 1F 40 -  -  	addr(Unimplemented)              ; $00c1 load
   71 00:4A50 1F 40 -  -  	addr(Unimplemented)              ; $00c2 save
   72 00:4A52 1F 40 -  -  	addr(Unimplemented)              ; $00c3 list
   73 00:4A54 61 47 -  -  	addr(Command_NEW)                ; $00c4 new
   74 00:4A56 23 42 -  -  	addr(Command_RUN)                ; $00c5 run
   75 00:4A58 1F 40 -  -  	addr(Unimplemented)              ; $00c6 read
   76 00:4A5A 1F 40 -  -  	addr(Unimplemented)              ; $00c7 data
   77 00:4A5C 1F 40 -  -  	addr(Unimplemented)              ; $00c8 restore
   78 00:4A5E D3 40 -  -  	addr(Command_ASSERT)             ; $00c9 assert
   79 00:4A60 14 47 -  -  	addr(Command_CLEAR)              ; $00ca clear
   80 00:4A62 5C 41 -  -  	addr(Command_END)                ; $00cb end
   81 00:4A64 86 42 -  -  	addr(Command_STOP)               ; $00cc stop
   82 00:4A66 -  -  -  -  ;
   83 00:4A66 -  -  -  -  ;	Vectors for set 1
   84 00:4A66 -  -  -  -  ;
   85 00:4A66 -  -  -  -  VectorsSet1:
   86 00:4A66 -  -  -  -  ;
   87 00:4A66 -  -  -  -  ;	Vectors for set 2
   88 00:4A66 -  -  -  -  ;
   89 00:4A66 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:4A66 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4A66 -  -  -  -  ; ***************************************************************************************
    2 00:4A66 -  -  -  -  ; ***************************************************************************************
    3 00:4A66 -  -  -  -  ;
    4 00:4A66 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4A66 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A66 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A66 -  -  -  -  ;		Reviewed :	No
    8 00:4A66 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4A66 -  -  -  -  ;
   10 00:4A66 -  -  -  -  ; ***************************************************************************************
   11 00:4A66 -  -  -  -  ; ***************************************************************************************
   12 00:4A66 -  -  -  -  
   13 00:4A66 -  -  -  -  ; ***************************************************************************************
   14 00:4A66 -  -  -  -  ;
   15 00:4A66 -  -  -  -  ;								Unsigned integer divide
   16 00:4A66 -  -  -  -  ;
   17 00:4A66 -  -  -  -  ; ***************************************************************************************
   18 00:4A66 -  -  -  -  
   19 00:4A66 -  -  -  -  Int32UDivide:
   20 00:4A66 37 -  -  -  		scf
   21 00:4A67 C3 A5 4A -  		jp 		_I32UnsignedDivide		
   22 00:4A6A -  -  -  -  
   23 00:4A6A -  -  -  -  ; ***************************************************************************************
   24 00:4A6A -  -  -  -  ;
   25 00:4A6A -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4A6A -  -  -  -  ;
   27 00:4A6A -  -  -  -  ; ***************************************************************************************
   28 00:4A6A -  -  -  -  
   29 00:4A6A -  -  -  -  Int32SDivide:
   30 00:4A6A 37 -  -  -  		scf
   31 00:4A6B 18 01 -  -  		jr 		_I32SDivide
   32 00:4A6D -  -  -  -  Int32Modulus:
   33 00:4A6D AF -  -  -  		xor 	a
   34 00:4A6E -  -  -  -  _I32SDivide:
   35 00:4A6E 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4A6F F5 -  -  -  		push 	af
   37 00:4A70 08 -  -  -  		ex 		af,af'
   38 00:4A71 -  -  -  -  
   39 00:4A71 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4A72 D9 -  -  -  		exx
   41 00:4A73 D5 -  -  -  		push 	de
   42 00:4A74 D9 -  -  -  		exx
   43 00:4A75 -  -  -  -  
   44 00:4A75 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4A76 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4A77 CD 93 4A -  		call 	_I32CheckHLSignSwap
   47 00:4A7A CD 93 4A -  		call 	_I32CheckHLSignSwap
   48 00:4A7D 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4A7E F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4A7F F5 -  -  -  		push 	af
   51 00:4A80 CD A5 4A -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4A83 F1 -  -  -  		pop 	af 							; get function back
   53 00:4A84 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4A86 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4A87 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4A89 C4 EF 4B -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4A8C -  -  -  -  _I32SDExit:
   58 00:4A8C D9 -  -  -  		exx 								; restore DE'DE
   59 00:4A8D D1 -  -  -  		pop 	de
   60 00:4A8E D9 -  -  -  		exx
   61 00:4A8F D1 -  -  -  		pop 	de
   62 00:4A90 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4A91 08 -  -  -  		ex 		af,af'
   64 00:4A92 C9 -  -  -  		ret
   65 00:4A93 -  -  -  -  
   66 00:4A93 -  -  -  -  
   67 00:4A93 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4A93 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4A94 CB 7C -  -  		bit 	7,h
   70 00:4A96 D9 -  -  -  		exx
   71 00:4A97 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4A99 -  -  -  -  		;
   73 00:4A99 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4A9B F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4A9C CD EF 4B -  		call 	Int32Negate 				
   76 00:4A9F F1 -  -  -  		pop 	af
   77 00:4AA0 -  -  -  -  _I32CHSPositive:
   78 00:4AA0 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4AA1 EB -  -  -  		ex 		de,hl
   80 00:4AA2 D9 -  -  -  		exx		
   81 00:4AA3 EB -  -  -  		ex 		de,hl
   82 00:4AA4 C9 -  -  -  		ret
   83 00:4AA5 -  -  -  -  
   84 00:4AA5 -  -  -  -  ; ***************************************************************************************
   85 00:4AA5 -  -  -  -  ;
   86 00:4AA5 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4AA5 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4AA5 -  -  -  -  ;
   89 00:4AA5 -  -  -  -  ; ***************************************************************************************
   90 00:4AA5 -  -  -  -  
   91 00:4AA5 -  -  -  -  _I32UnsignedDivide:
   92 00:4AA5 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4AA6 D5 -  -  -  		push 	de
   94 00:4AA7 D9 -  -  -  		exx
   95 00:4AA8 C5 -  -  -  		push 	bc
   96 00:4AA9 D5 -  -  -  		push 	de 							
   97 00:4AAA D9 -  -  -  		exx
   98 00:4AAB -  -  -  -  
   99 00:4AAB F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4AAC -  -  -  -  
  101 00:4AAC 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4AAD B3 -  -  -  		or 		e
  103 00:4AAE D9 -  -  -  		exx
  104 00:4AAF B2 -  -  -  		or 		d
  105 00:4AB0 B3 -  -  -  		or 		e
  106 00:4AB1 D9 -  -  -  		exx
  107 00:4AB2 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4AB5 -  -  -  -  
  109 00:4AB5 -  -  -  -  
  110 00:4AB5 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4AB6 4D -  -  -  		ld		c,l
  112 00:4AB7 21 00 00 -  		ld 		hl,$0000
  113 00:4ABA D9 -  -  -  		exx
  114 00:4ABB 44 -  -  -  		ld 		b,h
  115 00:4ABC 4D -  -  -  		ld		c,l
  116 00:4ABD 21 00 00 -  		ld 		hl,$0000
  117 00:4AC0 D9 -  -  -  		exx
  118 00:4AC1 -  -  -  -  
  119 00:4AC1 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4AC3 -  -  -  -  _I32DivideLoop:
  121 00:4AC3 F5 -  -  -  		push 	af
  122 00:4AC4 -  -  -  -  
  123 00:4AC4 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4AC6 CB 10 -  -  		rl 		b
  125 00:4AC8 D9 -  -  -  		exx
  126 00:4AC9 CB 11 -  -  		rl 		c
  127 00:4ACB CB 10 -  -  		rl 		b
  128 00:4ACD D9 -  -  -  		exx
  129 00:4ACE CB 15 -  -  		rl 		l
  130 00:4AD0 CB 14 -  -  		rl 		h
  131 00:4AD2 D9 -  -  -  		exx
  132 00:4AD3 CB 15 -  -  		rl 		l
  133 00:4AD5 CB 14 -  -  		rl 		h
  134 00:4AD7 D9 -  -  -  		exx
  135 00:4AD8 -  -  -  -  
  136 00:4AD8 CD 95 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4ADB 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4ADD -  -  -  -  
  139 00:4ADD 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4ADE 18 03 -  -  		jr 		_I32Next
  141 00:4AE0 -  -  -  -  
  142 00:4AE0 -  -  -  -  _I32Borrow:
  143 00:4AE0 CD 8F 4B -  		call 	Int32Add 					; A = A + M
  144 00:4AE3 -  -  -  -  _I32Next:
  145 00:4AE3 F1 -  -  -  		pop 	af
  146 00:4AE4 3D -  -  -  		dec 	a
  147 00:4AE5 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4AE7 -  -  -  -  
  149 00:4AE7 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4AE8 -  -  -  -  
  151 00:4AE8 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4AE9 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4AEB -  -  -  -  
  154 00:4AEB 60 -  -  -  		ld  	h,b
  155 00:4AEC 69 -  -  -  		ld 		l,c
  156 00:4AED D9 -  -  -  		exx
  157 00:4AEE 60 -  -  -  		ld  	h,b
  158 00:4AEF 69 -  -  -  		ld 		l,c
  159 00:4AF0 D9 -  -  -  		exx
  160 00:4AF1 -  -  -  -  _I32Modulus1:		
  161 00:4AF1 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4AF2 D1 -  -  -  		pop 	de
  163 00:4AF3 C1 -  -  -  		pop 	bc
  164 00:4AF4 D9 -  -  -  		exx
  165 00:4AF5 D1 -  -  -  		pop 	de
  166 00:4AF6 C1 -  -  -  		pop 	bc
  167 00:4AF7 C9 -  -  -  		ret
  168 00:4AF8 -  -  -  -  
  169 00:4AF8 -  -  -  -  ; ***************************************************************************************
  170 00:4AF8 -  -  -  -  ;
  171 00:4AF8 -  -  -  -  ;									Changes and Updates
  172 00:4AF8 -  -  -  -  ;
  173 00:4AF8 -  -  -  -  ; ***************************************************************************************
  174 00:4AF8 -  -  -  -  ;
  175 00:4AF8 -  -  -  -  ;		Date			Notes
  176 00:4AF8 -  -  -  -  ;		==== 			=====
  177 00:4AF8 -  -  -  -  ;
  178 00:4AF8 -  -  -  -  ; ***************************************************************************************
  179 00:4AF8 -  -  -  -  		
Listing for file "_build.asm"
   61 00:4AF8 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4AF8 -  -  -  -  ; ***************************************************************************************
    2 00:4AF8 -  -  -  -  ; ***************************************************************************************
    3 00:4AF8 -  -  -  -  ;
    4 00:4AF8 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4AF8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AF8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AF8 -  -  -  -  ;		Reviewed :	No
    8 00:4AF8 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4AF8 -  -  -  -  ;
   10 00:4AF8 -  -  -  -  ; ***************************************************************************************
   11 00:4AF8 -  -  -  -  ; ***************************************************************************************
   12 00:4AF8 -  -  -  -  
   13 00:4AF8 -  -  -  -  ; ***************************************************************************************
   14 00:4AF8 -  -  -  -  ;
   15 00:4AF8 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4AF8 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4AF8 -  -  -  -  ;
   18 00:4AF8 -  -  -  -  ; ***************************************************************************************
   19 00:4AF8 -  -  -  -  
   20 00:4AF8 -  -  -  -  Int32FromString:
   21 00:4AF8 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4AF9 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4AFA D5 -  -  -  		push 	de
   24 00:4AFB D9 -  -  -  		exx
   25 00:4AFC D5 -  -  -  		push 	de
   26 00:4AFD -  -  -  -  
   27 00:4AFD 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4B00 11 00 00 -  		ld 		de,$0000
   29 00:4B03 D9 -  -  -  		exx
   30 00:4B04 21 00 00 -  		ld 		hl,$0000
   31 00:4B07 11 00 00 -  		ld 		de,$0000
   32 00:4B0A D9 -  -  -  		exx
   33 00:4B0B -  -  -  -  
   34 00:4B0B 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4B0C CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4B0E 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4B10 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4B12 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4B13 -  -  -  -  		;
   40 00:4B13 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4B14 F5 -  -  -  		push 	af
   42 00:4B15 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4B17 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4B18 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4B1A 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4B1B 18 01 -  -  		jr 		_I32FSMain
   47 00:4B1D -  -  -  -  _I32FSNotSigned:		
   48 00:4B1D E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4B1E -  -  -  -  		;
   50 00:4B1E -  -  -  -  		; 		Main conversion loop.
   51 00:4B1E -  -  -  -  		; 		
   52 00:4B1E -  -  -  -  _I32FSMain:		
   53 00:4B1E 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4B1F FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4B21 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4B23 D6 20 -  -  		sub 	32
   57 00:4B25 -  -  -  -  _I32FSNotLower:
   58 00:4B25 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4B27 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4B29 FE 3A -  -  		cp 		'9'+1
   61 00:4B2B 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4B2D FE 41 -  -  		cp 		'A'
   63 00:4B2F 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4B31 FE 47 -  -  		cp 		'F'+1
   65 00:4B33 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4B35 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4B37 -  -  -  -  _I32FSOkay:
   68 00:4B37 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4B39 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4B3A 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4B3C 03 -  -  -  		inc 	bc 							; consume character
   72 00:4B3D D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4B3E F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4B3F CD 59 4B -  		call 	Int32Multiply 				; result *= base
   75 00:4B42 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4B43 5F -  -  -  		ld 		e,a
   77 00:4B44 CD 8F 4B -  		call 	Int32Add 					; and add it.
   78 00:4B47 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4B48 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4B4A -  -  -  -  
   81 00:4B4A -  -  -  -  _I32FSExit:
   82 00:4B4A F1 -  -  -  		pop 	af 							; get sign back
   83 00:4B4B FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4B4D CC EF 4B -  		call 	z,Int32Negate
   85 00:4B50 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4B51 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4B52 D9 -  -  -  		exx
   88 00:4B53 D1 -  -  -  		pop 	de
   89 00:4B54 D9 -  -  -  		exx
   90 00:4B55 C1 -  -  -  		pop 	bc
   91 00:4B56 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4B58 C9 -  -  -  		ret				
   93 00:4B59 -  -  -  -  
   94 00:4B59 -  -  -  -  ; ***************************************************************************************
   95 00:4B59 -  -  -  -  ;
   96 00:4B59 -  -  -  -  ;									Changes and Updates
   97 00:4B59 -  -  -  -  ;
   98 00:4B59 -  -  -  -  ; ***************************************************************************************
   99 00:4B59 -  -  -  -  ;
  100 00:4B59 -  -  -  -  ;		Date			Notes
  101 00:4B59 -  -  -  -  ;		==== 			=====
  102 00:4B59 -  -  -  -  ;
  103 00:4B59 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4B59 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4B59 -  -  -  -  ; ***************************************************************************************
    2 00:4B59 -  -  -  -  ; ***************************************************************************************
    3 00:4B59 -  -  -  -  ;
    4 00:4B59 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4B59 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B59 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B59 -  -  -  -  ;		Reviewed :	No
    8 00:4B59 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4B59 -  -  -  -  ;
   10 00:4B59 -  -  -  -  ; ***************************************************************************************
   11 00:4B59 -  -  -  -  ; ***************************************************************************************
   12 00:4B59 -  -  -  -  
   13 00:4B59 -  -  -  -  Int32Multiply:
   14 00:4B59 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4B5A D5 -  -  -  		push 	de
   16 00:4B5B 44 -  -  -  		ld 		b,h
   17 00:4B5C 4D -  -  -  		ld 		c,l
   18 00:4B5D 21 00 00 -  		ld 		hl,$0000
   19 00:4B60 -  -  -  -  
   20 00:4B60 D9 -  -  -  		exx
   21 00:4B61 C5 -  -  -  		push 	bc
   22 00:4B62 D5 -  -  -  		push 	de
   23 00:4B63 44 -  -  -  		ld 		b,h
   24 00:4B64 4D -  -  -  		ld 		c,l
   25 00:4B65 21 00 00 -  		ld 		hl,$0000		
   26 00:4B68 D9 -  -  -  		exx
   27 00:4B69 -  -  -  -  
   28 00:4B69 -  -  -  -  _I32MultiplyLoop:
   29 00:4B69 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4B6B C4 8F 4B -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4B6E -  -  -  -  		;
   32 00:4B6E D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4B6F CB 38 -  -  		srl 	b
   34 00:4B71 CB 19 -  -  		rr 		c
   35 00:4B73 D9 -  -  -  		exx
   36 00:4B74 CB 18 -  -  		rr 		b
   37 00:4B76 CB 19 -  -  		rr 		c
   38 00:4B78 -  -  -  -  		;
   39 00:4B78 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4B7A CB 12 -  -  		rl 		d
   41 00:4B7C D9 -  -  -  		exx
   42 00:4B7D CB 13 -  -  		rl 		e
   43 00:4B7F CB 12 -  -  		rl 		d
   44 00:4B81 -  -  -  -  
   45 00:4B81 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4B82 B1 -  -  -  		or 		c
   47 00:4B83 D9 -  -  -  		exx
   48 00:4B84 B0 -  -  -  		or 		b
   49 00:4B85 B1 -  -  -  		or 		c
   50 00:4B86 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4B88 -  -  -  -  
   52 00:4B88 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4B89 D1 -  -  -  		pop 	de
   54 00:4B8A C1 -  -  -  		pop 	bc
   55 00:4B8B D9 -  -  -  		exx
   56 00:4B8C D1 -  -  -  		pop 	de
   57 00:4B8D C1 -  -  -  		pop 	bc
   58 00:4B8E C9 -  -  -  		ret
   59 00:4B8F -  -  -  -  
   60 00:4B8F -  -  -  -  ; ***************************************************************************************
   61 00:4B8F -  -  -  -  ;
   62 00:4B8F -  -  -  -  ;									Changes and Updates
   63 00:4B8F -  -  -  -  ;
   64 00:4B8F -  -  -  -  ; ***************************************************************************************
   65 00:4B8F -  -  -  -  ;
   66 00:4B8F -  -  -  -  ;		Date			Notes
   67 00:4B8F -  -  -  -  ;		==== 			=====
   68 00:4B8F -  -  -  -  ;
   69 00:4B8F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4B8F -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4B8F -  -  -  -  ; ***************************************************************************************
    2 00:4B8F -  -  -  -  ; ***************************************************************************************
    3 00:4B8F -  -  -  -  ;
    4 00:4B8F -  -  -  -  ;		Name : 		isimple.asm
    5 00:4B8F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B8F -  -  -  -  ;		Reviewed :	No
    8 00:4B8F -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4B8F -  -  -  -  ;
   10 00:4B8F -  -  -  -  ; ***************************************************************************************
   11 00:4B8F -  -  -  -  ; ***************************************************************************************
   12 00:4B8F -  -  -  -  
   13 00:4B8F -  -  -  -  ; ***************************************************************************************
   14 00:4B8F -  -  -  -  ;
   15 00:4B8F -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4B8F -  -  -  -  ;
   17 00:4B8F -  -  -  -  ; ***************************************************************************************
   18 00:4B8F -  -  -  -  
   19 00:4B8F -  -  -  -  Int32Add:
   20 00:4B8F 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4B90 D9 -  -  -  		exx
   22 00:4B91 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4B93 D9 -  -  -  		exx
   24 00:4B94 C9 -  -  -  		ret
   25 00:4B95 -  -  -  -  
   26 00:4B95 -  -  -  -  ; ***************************************************************************************
   27 00:4B95 -  -  -  -  ;
   28 00:4B95 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4B95 -  -  -  -  ;
   30 00:4B95 -  -  -  -  ; ***************************************************************************************
   31 00:4B95 -  -  -  -  
   32 00:4B95 -  -  -  -  Int32Subtract:
   33 00:4B95 AF -  -  -  		xor 	a 							; clear carry
   34 00:4B96 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4B98 D9 -  -  -  		exx
   36 00:4B99 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4B9B D9 -  -  -  		exx
   38 00:4B9C C9 -  -  -  		ret
   39 00:4B9D -  -  -  -  
   40 00:4B9D -  -  -  -  ; ***************************************************************************************
   41 00:4B9D -  -  -  -  ;
   42 00:4B9D -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4B9D -  -  -  -  ;
   44 00:4B9D -  -  -  -  ; ***************************************************************************************
   45 00:4B9D -  -  -  -  
   46 00:4B9D -  -  -  -  Int32And:
   47 00:4B9D D9 -  -  -  		exx
   48 00:4B9E CD A2 4B -  		call 	_I32AndHLDE
   49 00:4BA1 D9 -  -  -  		exx
   50 00:4BA2 -  -  -  -  _I32AndHLDE:		
   51 00:4BA2 7C -  -  -  		ld 		a,h
   52 00:4BA3 A2 -  -  -  		and 	d
   53 00:4BA4 67 -  -  -  		ld 		h,a
   54 00:4BA5 7D -  -  -  		ld 		a,l
   55 00:4BA6 A3 -  -  -  		and 	e
   56 00:4BA7 6F -  -  -  		ld 		l,a
   57 00:4BA8 C9 -  -  -  		ret
   58 00:4BA9 -  -  -  -  
   59 00:4BA9 -  -  -  -  ; ***************************************************************************************
   60 00:4BA9 -  -  -  -  ;
   61 00:4BA9 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4BA9 -  -  -  -  ;
   63 00:4BA9 -  -  -  -  ; ***************************************************************************************
   64 00:4BA9 -  -  -  -  
   65 00:4BA9 -  -  -  -  Int32Or:
   66 00:4BA9 D9 -  -  -  		exx
   67 00:4BAA CD AE 4B -  		call 	_I32OrHLDE
   68 00:4BAD D9 -  -  -  		exx
   69 00:4BAE -  -  -  -  _I32OrHLDE:		
   70 00:4BAE 7C -  -  -  		ld 		a,h
   71 00:4BAF B2 -  -  -  		or 		d
   72 00:4BB0 67 -  -  -  		ld 		h,a
   73 00:4BB1 7D -  -  -  		ld 		a,l
   74 00:4BB2 B3 -  -  -  		or 		e
   75 00:4BB3 6F -  -  -  		ld 		l,a
   76 00:4BB4 C9 -  -  -  		ret
   77 00:4BB5 -  -  -  -  
   78 00:4BB5 -  -  -  -  ; ***************************************************************************************
   79 00:4BB5 -  -  -  -  ;
   80 00:4BB5 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4BB5 -  -  -  -  ;
   82 00:4BB5 -  -  -  -  ; ***************************************************************************************
   83 00:4BB5 -  -  -  -  
   84 00:4BB5 -  -  -  -  Int32Xor:
   85 00:4BB5 D9 -  -  -  		exx
   86 00:4BB6 CD BA 4B -  		call 	_I32XorHLDE
   87 00:4BB9 D9 -  -  -  		exx
   88 00:4BBA -  -  -  -  _I32XorHLDE:		
   89 00:4BBA 7C -  -  -  		ld 		a,h
   90 00:4BBB AA -  -  -  		xor 	d
   91 00:4BBC 67 -  -  -  		ld 		h,a
   92 00:4BBD 7D -  -  -  		ld 		a,l
   93 00:4BBE AB -  -  -  		xor 	e
   94 00:4BBF 6F -  -  -  		ld 		l,a
   95 00:4BC0 C9 -  -  -  		ret
   96 00:4BC1 -  -  -  -  
   97 00:4BC1 -  -  -  -  ; ***************************************************************************************
   98 00:4BC1 -  -  -  -  ;
   99 00:4BC1 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4BC1 -  -  -  -  ;
  101 00:4BC1 -  -  -  -  ; ***************************************************************************************
  102 00:4BC1 -  -  -  -  
  103 00:4BC1 -  -  -  -  Int32Zero:
  104 00:4BC1 D9 -  -  -  		exx
  105 00:4BC2 7D -  -  -  		ld 		a,l
  106 00:4BC3 B4 -  -  -  		or 		h
  107 00:4BC4 D9 -  -  -  		exx
  108 00:4BC5 B5 -  -  -  		or 		l
  109 00:4BC6 B4 -  -  -  		or 		h
  110 00:4BC7 C9 -  -  -  		ret
  111 00:4BC8 -  -  -  -  
  112 00:4BC8 -  -  -  -  ; ***************************************************************************************
  113 00:4BC8 -  -  -  -  ;
  114 00:4BC8 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4BC8 -  -  -  -  ;
  116 00:4BC8 -  -  -  -  ; ***************************************************************************************
  117 00:4BC8 -  -  -  -  
  118 00:4BC8 -  -  -  -  Int32Compare:
  119 00:4BC8 E5 -  -  -  		push 	hl 							; save HL
  120 00:4BC9 AF -  -  -  		xor 	a 							; clear carry
  121 00:4BCA ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4BCC D9 -  -  -  		exx
  123 00:4BCD E5 -  -  -  		push 	hl 							; save HL'
  124 00:4BCE ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4BD0 -  -  -  -  		;
  126 00:4BD0 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4BD1 E2 D8 4B -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4BD4 78 -  -  -  		ld 		a,b
  129 00:4BD5 EE 80 -  -  		xor 	$80
  130 00:4BD7 47 -  -  -  		ld 		b,a
  131 00:4BD8 -  -  -  -  _I32CNoOverflow:
  132 00:4BD8 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4BD9 B5 -  -  -  		or 		l
  134 00:4BDA D9 -  -  -  		exx 
  135 00:4BDB B4 -  -  -  		or 		h
  136 00:4BDC B5 -  -  -  		or 		l
  137 00:4BDD 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4BDF -  -  -  -  		;
  139 00:4BDF D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4BE0 CB 78 -  -  		bit 	7,b
  141 00:4BE2 D9 -  -  -  		exx
  142 00:4BE3 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4BE5 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4BE7 3E FF -  -  		ld 		a,$FF
  145 00:4BE9 -  -  -  -  _I32NotPos:
  146 00:4BE9 D9 -  -  -  		exx
  147 00:4BEA E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4BEB D9 -  -  -  		exx
  149 00:4BEC E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4BED B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4BEE C9 -  -  -  		ret
  152 00:4BEF -  -  -  -  
  153 00:4BEF -  -  -  -  ; ***************************************************************************************
  154 00:4BEF -  -  -  -  ;
  155 00:4BEF -  -  -  -  ;										Negate HL'HL
  156 00:4BEF -  -  -  -  ;
  157 00:4BEF -  -  -  -  ; ***************************************************************************************
  158 00:4BEF -  -  -  -  
  159 00:4BEF -  -  -  -  Int32Negate:
  160 00:4BEF AF -  -  -  		xor 	a
  161 00:4BF0 CD F9 4B -  		call 	_I32NSubtract
  162 00:4BF3 D9 -  -  -  		exx
  163 00:4BF4 CD F9 4B -  		call 	_I32NSubtract
  164 00:4BF7 D9 -  -  -  		exx
  165 00:4BF8 C9 -  -  -  		ret
  166 00:4BF9 -  -  -  -  _I32NSubtract:
  167 00:4BF9 D5 -  -  -  		push 	de
  168 00:4BFA EB -  -  -  		ex 		de,hl
  169 00:4BFB 21 00 00 -  		ld 		hl,$0000
  170 00:4BFE ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4C00 D1 -  -  -  		pop 	de
  172 00:4C01 C9 -  -  -  		ret
  173 00:4C02 -  -  -  -  		
  174 00:4C02 -  -  -  -  ; ***************************************************************************************
  175 00:4C02 -  -  -  -  ;
  176 00:4C02 -  -  -  -  ;									Changes and Updates
  177 00:4C02 -  -  -  -  ;
  178 00:4C02 -  -  -  -  ; ***************************************************************************************
  179 00:4C02 -  -  -  -  ;
  180 00:4C02 -  -  -  -  ;		Date			Notes
  181 00:4C02 -  -  -  -  ;		==== 			=====
  182 00:4C02 -  -  -  -  ;
  183 00:4C02 -  -  -  -  ; ***************************************************************************************
  184 00:4C02 -  -  -  -  		
Listing for file "_build.asm"
   64 00:4C02 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4C02 -  -  -  -  ; ***************************************************************************************
    2 00:4C02 -  -  -  -  ; ***************************************************************************************
    3 00:4C02 -  -  -  -  ;
    4 00:4C02 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4C02 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C02 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C02 -  -  -  -  ;		Reviewed :	No
    8 00:4C02 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4C02 -  -  -  -  ;
   10 00:4C02 -  -  -  -  ; ***************************************************************************************
   11 00:4C02 -  -  -  -  ;
   12 00:4C02 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4C02 -  -  -  -  ;
   14 00:4C02 -  -  -  -  ; ***************************************************************************************
   15 00:4C02 -  -  -  -  
   16 00:4C02 -  -  -  -  Int32ToString:
   17 00:4C02 C5 -  -  -  		push 	bc 							; save string start
   18 00:4C03 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4C04 E5 -  -  -  		push 	hl
   20 00:4C05 11 00 00 -  		ld	 	de,$0000
   21 00:4C08 D9 -  -  -  		exx
   22 00:4C09 D5 -  -  -  		push 	de
   23 00:4C0A E5 -  -  -  		push 	hl
   24 00:4C0B 11 00 00 -  		ld 		de,$000
   25 00:4C0E D9 -  -  -  		exx
   26 00:4C0F 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4C10 -  -  -  -  		;
   28 00:4C10 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4C12 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4C14 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4C16 5F -  -  -  		ld 		e,a
   32 00:4C17 -  -  -  -  		;
   33 00:4C17 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4C18 CB 7C -  -  		bit 	7,h
   35 00:4C1A D9 -  -  -  		exx
   36 00:4C1B 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4C1D -  -  -  -  		;
   38 00:4C1D CD EF 4B -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4C20 -  -  -  -  		;
   40 00:4C20 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4C22 02 -  -  -  		ld 		(bc),a
   42 00:4C23 03 -  -  -  		inc 	bc
   43 00:4C24 -  -  -  -  _I32TSNotNegative:	
   44 00:4C24 CD 32 4C -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4C27 -  -  -  -  _I32TSExit:
   46 00:4C27 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4C29 02 -  -  -  		ld 		(bc),a 
   48 00:4C2A -  -  -  -  
   49 00:4C2A D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4C2B E1 -  -  -  		pop 	hl
   51 00:4C2C D1 -  -  -  		pop 	de
   52 00:4C2D D9 -  -  -  		exx
   53 00:4C2E E1 -  -  -  		pop 	hl
   54 00:4C2F D1 -  -  -  		pop 	de
   55 00:4C30 C1 -  -  -  		pop 	bc
   56 00:4C31 C9 -  -  -  		ret
   57 00:4C32 -  -  -  -  
   58 00:4C32 -  -  -  -  _I32RecursiveConvert:
   59 00:4C32 CD 66 4A -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4C35 F5 -  -  -  		push 	af 							; save remainder
   61 00:4C36 CD C1 4B -  		call 	Int32Zero		 			; check result is non zero
   62 00:4C39 C4 32 4C -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4C3C F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4C3D FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4C3F 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4C41 C6 07 -  -  		add 	a,7
   67 00:4C43 -  -  -  -  _I32NotHex:
   68 00:4C43 C6 30 -  -  		add 	a,48
   69 00:4C45 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4C46 03 -  -  -  		inc 	bc
   71 00:4C47 C9 -  -  -  		ret		
   72 00:4C48 -  -  -  -  
   73 00:4C48 -  -  -  -  ; ***************************************************************************************
   74 00:4C48 -  -  -  -  ;
   75 00:4C48 -  -  -  -  ;									Changes and Updates
   76 00:4C48 -  -  -  -  ;
   77 00:4C48 -  -  -  -  ; ***************************************************************************************
   78 00:4C48 -  -  -  -  ;
   79 00:4C48 -  -  -  -  ;		Date			Notes
   80 00:4C48 -  -  -  -  ;		==== 			=====
   81 00:4C48 -  -  -  -  ;
   82 00:4C48 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4C48 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4C48 -  -  -  -  ; ***************************************************************************************
    2 00:4C48 -  -  -  -  ; ***************************************************************************************
    3 00:4C48 -  -  -  -  ;
    4 00:4C48 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4C48 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C48 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C48 -  -  -  -  ;		Reviewed :	No
    8 00:4C48 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4C48 -  -  -  -  ;
   10 00:4C48 -  -  -  -  ; ***************************************************************************************
   11 00:4C48 -  -  -  -  ; ***************************************************************************************
   12 00:4C48 -  -  -  -  
   13 00:4C48 -  -  -  -  #ifdef AQUARIUS
   14 00:4C48 -  -  -  -  
   15 00:4C48 -  -  -  -  ; ***************************************************************************************
   16 00:4C48 -  -  -  -  ;
   17 00:4C48 -  -  -  -  ;								Initialise system stuff
   18 00:4C48 -  -  -  -  ;
   19 00:4C48 -  -  -  -  ; ***************************************************************************************
   20 00:4C48 -  -  -  -  
   21 00:4C48 -  -  -  -  SYSInitialise:
   22 00:4C48 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4C4A CD 50 4C -  	call 	SYSPrintChar
   24 00:4C4D C9 -  -  -  	ret
   25 00:4C4E -  -  -  -  
   26 00:4C4E -  -  -  -  ; ***************************************************************************************
   27 00:4C4E -  -  -  -  ;
   28 00:4C4E -  -  -  -  ;								Terminate system stuff
   29 00:4C4E -  -  -  -  ;
   30 00:4C4E -  -  -  -  ; ***************************************************************************************
   31 00:4C4E -  -  -  -  
   32 00:4C4E -  -  -  -  SYSTerminate:
   33 00:4C4E 18 FE -  -  	jr 		SYSTerminate
   34 00:4C50 -  -  -  -  
   35 00:4C50 -  -  -  -  ; ***************************************************************************************
   36 00:4C50 -  -  -  -  ;
   37 00:4C50 -  -  -  -  ;								Print A character
   38 00:4C50 -  -  -  -  ;
   39 00:4C50 -  -  -  -  ; ***************************************************************************************
   40 00:4C50 -  -  -  -  
   41 00:4C50 -  -  -  -  SYSPrintChar:
   42 00:4C50 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4C51 C5 -  -  -  	push 	bc
   44 00:4C52 D5 -  -  -  	push 	de
   45 00:4C53 E5 -  -  -  	push 	hl
   46 00:4C54 DD E5 -  -  	push 	ix
   47 00:4C56 FD E5 -  -  	push 	iy
   48 00:4C58 D9 -  -  -  	exx
   49 00:4C59 C5 -  -  -  	push 	bc
   50 00:4C5A D5 -  -  -  	push 	de
   51 00:4C5B E5 -  -  -  	push 	hl
   52 00:4C5C CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4C5F E1 -  -  -  	pop 	hl
   54 00:4C60 D1 -  -  -  	pop 	de
   55 00:4C61 C1 -  -  -  	pop 	bc
   56 00:4C62 D9 -  -  -  	exx
   57 00:4C63 FD E1 -  -  	pop 	iy
   58 00:4C65 DD E1 -  -  	pop 	ix
   59 00:4C67 E1 -  -  -  	pop 	hl
   60 00:4C68 D1 -  -  -  	pop 	de
   61 00:4C69 C1 -  -  -  	pop 	bc
   62 00:4C6A F1 -  -  -  	pop 	af
   63 00:4C6B C9 -  -  -  	ret		
   64 00:4C6C -  -  -  -  
   65 00:4C6C -  -  -  -  ; ***************************************************************************************
   66 00:4C6C -  -  -  -  ;
   67 00:4C6C -  -  -  -  ;									Print Newline
   68 00:4C6C -  -  -  -  ;
   69 00:4C6C -  -  -  -  ; ***************************************************************************************
   70 00:4C6C -  -  -  -  
   71 00:4C6C -  -  -  -  SYSPrintCRLF:
   72 00:4C6C F5 -  -  -  	push 	af
   73 00:4C6D 3E 0D -  -  	ld 		a,13
   74 00:4C6F CD 50 4C -  	call 	SYSPrintChar
   75 00:4C72 3E 0A -  -  	ld 		a,10
   76 00:4C74 CD 50 4C -  	call 	SYSPrintChar
   77 00:4C77 F1 -  -  -  	pop 	af
   78 00:4C78 C9 -  -  -  	ret
   79 00:4C79 -  -  -  -  
   80 00:4C79 -  -  -  -  ; ***************************************************************************************
   81 00:4C79 -  -  -  -  ;
   82 00:4C79 -  -  -  -  ;									Get time into HL'HL
   83 00:4C79 -  -  -  -  ;
   84 00:4C79 -  -  -  -  ; ***************************************************************************************
   85 00:4C79 -  -  -  -  
   86 00:4C79 -  -  -  -  SYSGetTimer:
   87 00:4C79 DB 00 -  -   	in 		a,($00)
   88 00:4C7B 6F -  -  -   	ld 		l,a
   89 00:4C7C DB 01 -  -   	in 		a,($01)
   90 00:4C7E 67 -  -  -   	ld 		h,a
   91 00:4C7F D9 -  -  -   	exx
   92 00:4C80 DB 02 -  -   	in 		a,($02)
   93 00:4C82 6F -  -  -   	ld 		l,a
   94 00:4C83 DB 03 -  -   	in 		a,($03)
   95 00:4C85 67 -  -  -   	ld 		h,a
   96 00:4C86 D9 -  -  -   	exx
   97 00:4C87 C9 -  -  -  	ret 	
   98 00:4C88 -  -  -  -  	
   99 00:4C88 -  -  -  -  #endif
  100 00:4C88 -  -  -  -  
  101 00:4C88 -  -  -  -  ; ***************************************************************************************
  102 00:4C88 -  -  -  -  ;
  103 00:4C88 -  -  -  -  ;									Changes and Updates
  104 00:4C88 -  -  -  -  ;
  105 00:4C88 -  -  -  -  ; ***************************************************************************************
  106 00:4C88 -  -  -  -  ;
  107 00:4C88 -  -  -  -  ;		Date			Notes
  108 00:4C88 -  -  -  -  ;		==== 			=====
  109 00:4C88 -  -  -  -  ;
  110 00:4C88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4C88 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4C88 -  -  -  -  ; ***************************************************************************************
    2 00:4C88 -  -  -  -  ; ***************************************************************************************
    3 00:4C88 -  -  -  -  ;
    4 00:4C88 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4C88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C88 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C88 -  -  -  -  ;		Reviewed :	No
    8 00:4C88 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4C88 -  -  -  -  ;
   10 00:4C88 -  -  -  -  ; ***************************************************************************************
   11 00:4C88 -  -  -  -  ; ***************************************************************************************
   12 00:4C88 -  -  -  -  
   13 00:4C88 -  -  -  -  #ifdef CLEANEZ80
   14 00:4C88             
   15 00:4C88             ; ***************************************************************************************
   16 00:4C88             ;
   17 00:4C88             ;								Initialise system stuff
   18 00:4C88             ;
   19 00:4C88             ; ***************************************************************************************
   20 00:4C88             
   21 00:4C88             SYSInitialise:
   22 00:4C88             	ret
   23 00:4C88             
   24 00:4C88             ; ***************************************************************************************
   25 00:4C88             ;
   26 00:4C88             ;								Terminate system stuff
   27 00:4C88             ;
   28 00:4C88             ; ***************************************************************************************
   29 00:4C88             
   30 00:4C88             SYSTerminate:
   31 00:4C88             	ret
   32 00:4C88             
   33 00:4C88             ; ***************************************************************************************
   34 00:4C88             ;
   35 00:4C88             ;								Print A character
   36 00:4C88             ;
   37 00:4C88             ; ***************************************************************************************
   38 00:4C88             
   39 00:4C88             SYSPrintChar:
   40 00:4C88             	ret		
   41 00:4C88             
   42 00:4C88             ; ***************************************************************************************
   43 00:4C88             ;
   44 00:4C88             ;									Print Newline
   45 00:4C88             ;
   46 00:4C88             ; ***************************************************************************************
   47 00:4C88             
   48 00:4C88             SYSPrintCRLF:
   49 00:4C88             	ret
   50 00:4C88             
   51 00:4C88             ; ***************************************************************************************
   52 00:4C88             ;
   53 00:4C88             ;									Get time into HL'HL
   54 00:4C88             ;
   55 00:4C88             ; ***************************************************************************************
   56 00:4C88             
   57 00:4C88             SYSGetTimer:
   58 00:4C88             	ret
   59 00:4C88             
   60 00:4C88             #endif
   61 00:4C88 -  -  -  -  
   62 00:4C88 -  -  -  -  ; ***************************************************************************************
   63 00:4C88 -  -  -  -  ;
   64 00:4C88 -  -  -  -  ;									Changes and Updates
   65 00:4C88 -  -  -  -  ;
   66 00:4C88 -  -  -  -  ; ***************************************************************************************
   67 00:4C88 -  -  -  -  ;
   68 00:4C88 -  -  -  -  ;		Date			Notes
   69 00:4C88 -  -  -  -  ;		==== 			=====
   70 00:4C88 -  -  -  -  ;
   71 00:4C88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4C88 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4C88 -  -  -  -  ; ***************************************************************************************
    2 00:4C88 -  -  -  -  ; ***************************************************************************************
    3 00:4C88 -  -  -  -  ;
    4 00:4C88 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4C88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C88 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C88 -  -  -  -  ;		Reviewed :	No
    8 00:4C88 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4C88 -  -  -  -  ;
   10 00:4C88 -  -  -  -  ; ***************************************************************************************
   11 00:4C88 -  -  -  -  ; ***************************************************************************************
   12 00:4C88 -  -  -  -  
   13 00:4C88 -  -  -  -  #ifdef TI84
   14 00:4C88             
   15 00:4C88             ; ***************************************************************************************
   16 00:4C88             ;
   17 00:4C88             ;								Initialise system stuff
   18 00:4C88             ;
   19 00:4C88             ; ***************************************************************************************
   20 00:4C88             
   21 00:4C88             SYSInitialise:
   22 00:4C88             	di
   23 00:4C88             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4C88             	ld 		(_IYTemp84),iy
   25 00:4C88             	ret
   26 00:4C88             
   27 00:4C88             ; ***************************************************************************************
   28 00:4C88             ;
   29 00:4C88             ;								Terminate system stuff
   30 00:4C88             ;
   31 00:4C88             ; ***************************************************************************************
   32 00:4C88             
   33 00:4C88             SYSTerminate:
   34 00:4C88             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4C88             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4C88             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4C88             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4C88             	ei
   39 00:4C88             	ret 										; and exit.
   40 00:4C88             
   41 00:4C88             _StackTemp84:									; temp var for TI84 only.
   42 00:4C88             	.dw 	0,0
   43 00:4C88             _IYTemp84:
   44 00:4C88             	.dw 	0,0		
   45 00:4C88             
   46 00:4C88             ; ***************************************************************************************
   47 00:4C88             ;
   48 00:4C88             ;								Print A character
   49 00:4C88             ;
   50 00:4C88             ; ***************************************************************************************
   51 00:4C88             
   52 00:4C88             SYSPrintChar:
   53 00:4C88             	push 	af 									; we stack everything including alt registers
   54 00:4C88             	push 	bc
   55 00:4C88             	push 	de
   56 00:4C88             	push 	hl
   57 00:4C88             	push 	ix
   58 00:4C88             	push 	iy
   59 00:4C88             	exx
   60 00:4C88             	push 	bc
   61 00:4C88             	push 	de
   62 00:4C88             	push 	hl
   63 00:4C88             
   64 00:4C88             	ld 		iy,(_IYTemp84)
   65 00:4C88             	call 	_PutC 								; print A as character
   66 00:4C88             	di
   67 00:4C88             	ld 		(_IYTemp84),iy
   68 00:4C88             
   69 00:4C88             	pop 	hl
   70 00:4C88             	pop 	de
   71 00:4C88             	pop 	bc
   72 00:4C88             	exx
   73 00:4C88             	pop 	iy
   74 00:4C88             	pop 	ix
   75 00:4C88             	pop 	hl
   76 00:4C88             	pop 	de
   77 00:4C88             	pop 	bc
   78 00:4C88             	pop 	af
   79 00:4C88             	ret		
   80 00:4C88             
   81 00:4C88             ; ***************************************************************************************
   82 00:4C88             ;
   83 00:4C88             ;									Print Newline
   84 00:4C88             ;
   85 00:4C88             ; ***************************************************************************************
   86 00:4C88             
   87 00:4C88             SYSPrintCRLF:
   88 00:4C88             	push 	af 									; we stack everything including alt registers
   89 00:4C88             	push 	bc
   90 00:4C88             	push 	de
   91 00:4C88             	push 	hl
   92 00:4C88             	push 	ix
   93 00:4C88             	push 	iy
   94 00:4C88             	exx
   95 00:4C88             	push 	bc
   96 00:4C88             	push 	de
   97 00:4C88             	push 	hl
   98 00:4C88             
   99 00:4C88             	ld 		iy,(_IYTemp84)
  100 00:4C88             	call 	_newline
  101 00:4C88             	di
  102 00:4C88             	ld 		(_IYTemp84),iy
  103 00:4C88             
  104 00:4C88             	pop 	hl
  105 00:4C88             	pop 	de
  106 00:4C88             	pop 	bc
  107 00:4C88             	exx
  108 00:4C88             	pop 	iy
  109 00:4C88             	pop 	ix
  110 00:4C88             	pop 	hl
  111 00:4C88             	pop 	de
  112 00:4C88             	pop 	bc
  113 00:4C88             	pop 	af
  114 00:4C88             	ret
  115 00:4C88             
  116 00:4C88             ; ***************************************************************************************
  117 00:4C88             ;
  118 00:4C88             ;									Get time into HL'HL
  119 00:4C88             ;
  120 00:4C88             ; ***************************************************************************************
  121 00:4C88             
  122 00:4C88             SYSGetTimer:
  123 00:4C88             	ld 		hl,$1234
  124 00:4C88             	exx
  125 00:4C88             	ld 		hl,$5678
  126 00:4C88             	exx
  127 00:4C88             	ret
  128 00:4C88             
  129 00:4C88             #endif
  130 00:4C88 -  -  -  -  
  131 00:4C88 -  -  -  -  ; ***************************************************************************************
  132 00:4C88 -  -  -  -  ;
  133 00:4C88 -  -  -  -  ;									Changes and Updates
  134 00:4C88 -  -  -  -  ;
  135 00:4C88 -  -  -  -  ; ***************************************************************************************
  136 00:4C88 -  -  -  -  ;
  137 00:4C88 -  -  -  -  ;		Date			Notes
  138 00:4C88 -  -  -  -  ;		==== 			=====
  139 00:4C88 -  -  -  -  ;
  140 00:4C88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4C88 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4C88 -  -  -  -  ; ***************************************************************************************
    2 00:4C88 -  -  -  -  ; ***************************************************************************************
    3 00:4C88 -  -  -  -  ;
    4 00:4C88 -  -  -  -  ;		Name : 		basic.asm
    5 00:4C88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C88 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C88 -  -  -  -  ;		Reviewed :	No
    8 00:4C88 -  -  -  -  ;		Purpose :	Main program.
    9 00:4C88 -  -  -  -  ;
   10 00:4C88 -  -  -  -  ; ***************************************************************************************
   11 00:4C88 -  -  -  -  ; ***************************************************************************************
   12 00:4C88 -  -  -  -  
   13 00:4C88 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 21 01 00 BD 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 15 02 00 
              BC 12 13 00 
              11 13 AA 8A 
              41 AB A7 C0 
              12 13 00 11 
              13 80 09 03 
              00 BC 00 AA 
              4C AB 80 06 
              04 00 C0 00 
              80 09 05 00 
              BC 04 AA 42 
              AB 80 09 06 
              00 BC 05 AA 
              4C AB 80 0A 
              07 00 C0 00 
              A6 04 A6 05 
              80 0A 08 00 
              BC 19 AA 8A 
              41 AB 80 00 	.db	$21,$01,$00,$bd,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$15,$02,$00,$bc,$12,$13,$00,$11,$13,$aa,$8a,$41,$ab,$a7,$c0,$12,$13,$00,$11,$13,$80,$09,$03,$00,$bc,$00,$aa,$4c,$ab,$80,$06,$04,$00,$c0,$00,$80,$09,$05,$00,$bc,$04,$aa,$42,$ab,$80,$09,$06,$00,$bc,$05,$aa,$4c,$ab,$80,$0a,$07,$00,$c0,$00,$a6,$04,$a6,$05,$80,$0a,$08,$00,$bc,$19,$aa,$8a,$41,$ab,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:506C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:606C -  -  -  -  EndTestInstance:
   18 00:606C -  -  -  -  		
   19 00:606C -  -  -  -  ; ***************************************************************************************
   20 00:606C -  -  -  -  ;
   21 00:606C -  -  -  -  ;									Changes and Updates
   22 00:606C -  -  -  -  ;
   23 00:606C -  -  -  -  ; ***************************************************************************************
   24 00:606C -  -  -  -  ;
   25 00:606C -  -  -  -  ;		Date			Notes
   26 00:606C -  -  -  -  ;		==== 			=====
   27 00:606C -  -  -  -  ;
   28 00:606C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:606C -  -  -  -  FinalAddress:
