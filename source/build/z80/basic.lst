    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DATA = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DATA
   35 00:0000             	ld a,ERRID_DATA
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIM = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIM
   42 00:0000             	ld a,ERRID_DIM
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DISABLED = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DISABLED
   49 00:0000             	ld a,ERRID_DISABLED
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_DIVZERO = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_DIVZERO
   56 00:0000             	ld a,ERRID_DIVZERO
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_GOSUB = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_GOSUB
   63 00:0000             	ld a,ERRID_GOSUB
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_INDEX = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_INDEX
   70 00:0000             	ld a,ERRID_INDEX
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_LINENO = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_LINENO
   77 00:0000             	ld a,ERRID_LINENO
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_MEMORY = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_MEMORY
   84 00:0000             	ld a,ERRID_MEMORY
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NEXT = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NEXT
   91 00:0000             	ld a,ERRID_NEXT
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOCOMMA = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   98 00:0000             	ld a,ERRID_NOCOMMA
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NODOLLAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NODOLLAR
  105 00:0000             	ld a,ERRID_NODOLLAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOLBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  112 00:0000             	ld a,ERRID_NOLBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOPROC = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOPROC
  119 00:0000             	ld a,ERRID_NOPROC
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NORBRACKET = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  126 00:0000             	ld a,ERRID_NORBRACKET
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_NOTREF = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_NOTREF
  133 00:0000             	ld a,ERRID_NOTREF
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PARAM = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PARAM
  140 00:0000             	ld a,ERRID_PARAM
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_PROC = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_PROC
  147 00:0000             	ld a,ERRID_PROC
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_REPEAT = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_REPEAT
  154 00:0000             	ld a,ERRID_REPEAT
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STACK = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STACK
  161 00:0000             	ld a,ERRID_STACK
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_STOP = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_STOP
  168 00:0000             	ld a,ERRID_STOP
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_SYNTAX = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_SYNTAX
  175 00:0000             	ld a,ERRID_SYNTAX
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_TODO = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_TODO
  182 00:0000             	ld a,ERRID_TODO
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
  186 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 26
  187 00:0000 -  -  -  -  
  188 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  189 00:0000             	ld a,ERRID_UNKNOWNVAR
  190 00:0000             	jp ErrorHandler
  191 00:0000             #endmacro
  192 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 21 40 40 -  		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:4003 31 FF BF -  		ld 		sp,$BFFF
   41 00:4006 -  -  -  -  #endif
   42 00:4006 -  -  -  -  
   43 00:4006 -  -  -  -  #endif
   44 00:4006 CD C4 51 -  		call 	SYSInitialise
   45 00:4009 11 00 54 -  		ld 		de,TestInstance
   46 00:400C 21 38 64 -  		ld 		hl,EndTestInstance
   47 00:400F CD A8 49 -  		call 	SetCurrentInstance
   48 00:4012 -  -  -  -  
   49 00:4012 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:4014 32 60 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:4017 -  -  -  -  		
   52 00:4017 C3 82 42 -  		jp 		Command_RUN
   53 00:401A -  -  -  -  
   54 00:401A -  -  -  -  WarmStart:		
   55 00:401A 3E 2A -  -  		ld 		a,'*'
   56 00:401C CD CC 51 -  		call 	SYSPrintChar
   57 00:401F CD CA 51 -  		call 	SYSTerminate
   58 00:4022 -  -  -  -  
   59 00:4022 -  -  -  -  Unimplemented:
   60 00:4022 3E 06 C3 CF 
              43 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:4027 -  -  -  -  Int32DivZeroHandler:
   62 00:4027 3E 07 C3 CF 
              43 -  -  -  		ERR_DIVZERO
   63 00:402C -  -  -  -  
   64 00:402C -  -  -  -  ; ***************************************************************************************
   65 00:402C -  -  -  -  ;
   66 00:402C -  -  -  -  ;									Changes and Updates
   67 00:402C -  -  -  -  ;
   68 00:402C -  -  -  -  ; ***************************************************************************************
   69 00:402C -  -  -  -  ;
   70 00:402C -  -  -  -  ;		Date			Notes
   71 00:402C -  -  -  -  ;		==== 			=====
   72 00:402C -  -  -  -  ;
   73 00:402C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:402C -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:402C -  -  -  -  ; ***************************************************************************************
    2 00:402C -  -  -  -  ; ***************************************************************************************
    3 00:402C -  -  -  -  ;
    4 00:402C -  -  -  -  ;		Name : 		01data.asm
    5 00:402C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:402C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:402C -  -  -  -  ;		Reviewed :	No
    8 00:402C -  -  -  -  ;		Purpose :	Data space
    9 00:402C -  -  -  -  ;
   10 00:402C -  -  -  -  ; ***************************************************************************************
   11 00:402C -  -  -  -  ; ***************************************************************************************
   12 00:402C -  -  -  -  
   13 00:402C -  -  -  -  ; ***************************************************************************************
   14 00:402C -  -  -  -  ;
   15 00:402C -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:402C -  -  -  -  ;				LD (xxx),rr etc.
   17 00:402C -  -  -  -  ;
   18 00:402C -  -  -  -  ; ***************************************************************************************
   19 00:402C -  -  -  -  
   20 00:402C -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:402C -  -  -  -  
   22 00:402C -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:402C -  -  -  -  											; must be power of 2. 
   24 00:402C -  -  -  -  
   25 00:402C -  -  -  -  ; ***************************************************************************************
   26 00:402C -  -  -  -  ;
   27 00:402C -  -  -  -  ;								Defines the current instance
   28 00:402C -  -  -  -  ;
   29 00:402C -  -  -  -  ; ***************************************************************************************
   30 00:402C -  -  -  -  
   31 00:402C -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:402C 00 00 00 00 		.dw 	0,0
   33 00:4030 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:4030 00 00 00 00 		.dw 	0,0		
   35 00:4034 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4034 00 00 00 00 		.dw 	0,0 							
   37 00:4038 -  -  -  -  
   38 00:4038 -  -  -  -  ; ***************************************************************************************
   39 00:4038 -  -  -  -  ;
   40 00:4038 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4038 -  -  -  -  ;
   42 00:4038 -  -  -  -  ; ***************************************************************************************
   43 00:4038 -  -  -  -  
   44 00:4038 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4038 00 00 00 00 		.dw 	0,0
   46 00:403C -  -  -  -  
   47 00:403C -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:403C 00 00 00 00 		.dw 	0,0		
   49 00:4040 -  -  -  -  
   50 00:4040 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:4040 00 00 00 00 		.dw 	0,0
   52 00:4044 -  -  -  -  
   53 00:4044 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4044 00 00 00 00 		.dw 	0,0
   55 00:4048 -  -  -  -  
   56 00:4048 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4048 00 00 00 00 		.dw 	0,0		
   58 00:404C -  -  -  -  
   59 00:404C -  -  -  -  ;
   60 00:404C -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:404C -  -  -  -  ;
   62 00:404C -  -  -  -  
   63 00:404C -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:404C 00 00 00 00 		.dw 	0,0
   65 00:4050 -  -  -  -  		
   66 00:4050 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:4050 00 00 00 00 		.dw 	0,0
   68 00:4054 -  -  -  -  
   69 00:4054 -  -  -  -  ; ***************************************************************************************
   70 00:4054 -  -  -  -  ;
   71 00:4054 -  -  -  -  ;										Run variables
   72 00:4054 -  -  -  -  ;
   73 00:4054 -  -  -  -  ; ***************************************************************************************
   74 00:4054 -  -  -  -  
   75 00:4054 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:4054 00 00 00 00 		.dw 	0,0
   77 00:4058 -  -  -  -  
   78 00:4058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:4058 00 00 00 00 		.dw 	0,0
   80 00:405C -  -  -  -  		
   81 00:405C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:405C 00 00 00 00 		.dw 	0,0
   83 00:4060 -  -  -  -  
   84 00:4060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:4060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4066 -  -  -  -  
   87 00:4066 -  -  -  -  AConvert: 									; used for address conversions.
   88 00:4066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:406C -  -  -  -  		
   90 00:406C -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:406C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:407C -  -  -  -  
   93 00:407C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:407C 00 00 -  -  		.dw 	0
   95 00:407E -  -  -  -  
   96 00:407E -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:407E 00 00 -  -  		.dw 	0 
   98 00:4080 -  -  -  -  
   99 00:4080 -  -  -  -  ReadDataPointer: 							; pointer for READ/DATA.
  100 00:4080 00 00 00 00 		.dw 	0,0
  101 00:4084 -  -  -  -  
  102 00:4084 -  -  -  -  DataScanRequired: 							; flag set when scan forward for DATA required.
  103 00:4084 00 00 -  -  		.dw 	0		
  104 00:4086 -  -  -  -  
  105 00:4086 -  -  -  -  ; ***************************************************************************************
  106 00:4086 -  -  -  -  ;
  107 00:4086 -  -  -  -  ;									Variable Information
  108 00:4086 -  -  -  -  ;
  109 00:4086 -  -  -  -  ; ***************************************************************************************
  110 00:4086 -  -  -  -  
  111 00:4086 -  -  -  -  VarNameStart: 								; first byte of name
  112 00:4086 00 00 00 00 		.dw 	0,0
  113 00:408A -  -  -  -  VarHash: 									; name hash value
  114 00:408A 00 00 -  -  		.dw 	0		
  115 00:408C -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  116 00:408C 00 00 00 00 		.dw 	0,0
  117 00:4090 -  -  -  -  		
  118 00:4090 -  -  -  -  ; ***************************************************************************************
  119 00:4090 -  -  -  -  ;
  120 00:4090 -  -  -  -  ;										  Buffers
  121 00:4090 -  -  -  -  ;
  122 00:4090 -  -  -  -  ; ***************************************************************************************
  123 00:4090 -  -  -  -  
  124 00:4090 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  125 00:4090 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  126 00:40A0 -  -  -  -  
  127 00:40A0 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  128 00:40A0 00 00 -  -  		.dw 	0
  129 00:40A2 -  -  -  -  
  130 00:40A2 -  -  -  -  ConvertBuffer: 								; general usage
  131 00:40A2 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  132 00:40E2 -  -  -  -  
  133 00:40E2 -  -  -  -  ; ***************************************************************************************
  134 00:40E2 -  -  -  -  ;
  135 00:40E2 -  -  -  -  ;									Changes and Updates
  136 00:40E2 -  -  -  -  ;
  137 00:40E2 -  -  -  -  ; ***************************************************************************************
  138 00:40E2 -  -  -  -  ;
  139 00:40E2 -  -  -  -  ;		Date			Notes
  140 00:40E2 -  -  -  -  ;		==== 			=====
  141 00:40E2 -  -  -  -  ;
  142 00:40E2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:40E2 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40E2 -  -  -  -  ; ***************************************************************************************
    2 00:40E2 -  -  -  -  ; ***************************************************************************************
    3 00:40E2 -  -  -  -  ;
    4 00:40E2 -  -  -  -  ;		Name : 		assert.asm
    5 00:40E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E2 -  -  -  -  ;		Reviewed :	No
    8 00:40E2 -  -  -  -  ;		Purpose :	Assert command
    9 00:40E2 -  -  -  -  ;
   10 00:40E2 -  -  -  -  ; ***************************************************************************************
   11 00:40E2 -  -  -  -  ; ***************************************************************************************
   12 00:40E2 -  -  -  -  
   13 00:40E2 -  -  -  -  ; ***************************************************************************************
   14 00:40E2 -  -  -  -  ;
   15 00:40E2 -  -  -  -  ;									ASSERT command
   16 00:40E2 -  -  -  -  ;
   17 00:40E2 -  -  -  -  ; ***************************************************************************************
   18 00:40E2 -  -  -  -  
   19 00:40E2 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40E2 CD B4 45 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40E5 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40EB C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40EC 3E 01 C3 CF 
              43 -  -  -  		ERR_ASSERT
   24 00:40F1 -  -  -  -  
   25 00:40F1 -  -  -  -  ; ***************************************************************************************
   26 00:40F1 -  -  -  -  ;
   27 00:40F1 -  -  -  -  ;									Changes and Updates
   28 00:40F1 -  -  -  -  ;
   29 00:40F1 -  -  -  -  ; ***************************************************************************************
   30 00:40F1 -  -  -  -  ;
   31 00:40F1 -  -  -  -  ;		Date			Notes
   32 00:40F1 -  -  -  -  ;		==== 			=====
   33 00:40F1 -  -  -  -  ;
   34 00:40F1 -  -  -  -  ; ***************************************************************************************
   35 00:40F1 -  -  -  -  		
Listing for file "_build.asm"
   15 00:40F1 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40F1 -  -  -  -  ; ***************************************************************************************
    2 00:40F1 -  -  -  -  ; ***************************************************************************************
    3 00:40F1 -  -  -  -  ;
    4 00:40F1 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40F1 -  -  -  -  ;		Reviewed :	No
    8 00:40F1 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40F1 -  -  -  -  ;
   10 00:40F1 -  -  -  -  ; ***************************************************************************************
   11 00:40F1 -  -  -  -  ; ***************************************************************************************
   12 00:40F1 -  -  -  -  
   13 00:40F1 -  -  -  -  BadCmd_Def: 		;; [def]
   14 00:40F1 -  -  -  -  BadCmd_Data: 		;; [data]
   15 00:40F1 -  -  -  -  BadCmd_Then: 		;; [then]
   16 00:40F1 -  -  -  -  BadCmd_RBracket: 	;; [)]
   17 00:40F1 -  -  -  -  BadCmd_LSBracket: 	;; [[]
   18 00:40F1 -  -  -  -  BadCmd_RSBracket: 	;; []]
   19 00:40F1 -  -  -  -  BadCmd_Comma: 		;; [,]
   20 00:40F1 -  -  -  -  BadCmd_Comma: 		;; [~]
   21 00:40F1 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   22 00:40F1 -  -  -  -  BadCmd_To: 			;; [to]
   23 00:40F1 -  -  -  -  BadCmd_Step: 		;; [step]
   24 00:40F1 C3 2C 44 -  		jp 		SyntaxError
   25 00:40F4 -  -  -  -  
   26 00:40F4 -  -  -  -  ; ***************************************************************************************
   27 00:40F4 -  -  -  -  ;
   28 00:40F4 -  -  -  -  ;									Changes and Updates
   29 00:40F4 -  -  -  -  ;
   30 00:40F4 -  -  -  -  ; ***************************************************************************************
   31 00:40F4 -  -  -  -  ;
   32 00:40F4 -  -  -  -  ;		Date			Notes
   33 00:40F4 -  -  -  -  ;		==== 			=====
   34 00:40F4 -  -  -  -  ;
   35 00:40F4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40F4 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40F4 -  -  -  -  ; ***************************************************************************************
    2 00:40F4 -  -  -  -  ; ***************************************************************************************
    3 00:40F4 -  -  -  -  ;
    4 00:40F4 -  -  -  -  ;		Name : 		colon.asm
    5 00:40F4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40F4 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40F4 -  -  -  -  ;		Reviewed :	No
    8 00:40F4 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40F4 -  -  -  -  ;
   10 00:40F4 -  -  -  -  ; ***************************************************************************************
   11 00:40F4 -  -  -  -  ; ***************************************************************************************
   12 00:40F4 -  -  -  -  
   13 00:40F4 -  -  -  -  ; ***************************************************************************************
   14 00:40F4 -  -  -  -  ;
   15 00:40F4 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40F4 -  -  -  -  ;
   17 00:40F4 -  -  -  -  ; ***************************************************************************************
   18 00:40F4 -  -  -  -  
   19 00:40F4 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40F4 C9 -  -  -  		ret
   21 00:40F5 -  -  -  -  
   22 00:40F5 -  -  -  -  ; ***************************************************************************************
   23 00:40F5 -  -  -  -  ;
   24 00:40F5 -  -  -  -  ;									Changes and Updates
   25 00:40F5 -  -  -  -  ;
   26 00:40F5 -  -  -  -  ; ***************************************************************************************
   27 00:40F5 -  -  -  -  ;
   28 00:40F5 -  -  -  -  ;		Date			Notes
   29 00:40F5 -  -  -  -  ;		==== 			=====
   30 00:40F5 -  -  -  -  ;
   31 00:40F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:40F5 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40F5 -  -  -  -  ; ***************************************************************************************
    2 00:40F5 -  -  -  -  ; ***************************************************************************************
    3 00:40F5 -  -  -  -  ;
    4 00:40F5 -  -  -  -  ;		Name : 		dim.asm
    5 00:40F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40F5 -  -  -  -  ;		Date : 		4th June 2022
    7 00:40F5 -  -  -  -  ;		Reviewed :	No
    8 00:40F5 -  -  -  -  ;		Purpose :	Dim command
    9 00:40F5 -  -  -  -  ;
   10 00:40F5 -  -  -  -  ; ***************************************************************************************
   11 00:40F5 -  -  -  -  ; ***************************************************************************************
   12 00:40F5 -  -  -  -  
   13 00:40F5 -  -  -  -  ; ***************************************************************************************
   14 00:40F5 -  -  -  -  ;
   15 00:40F5 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40F5 -  -  -  -  ;	
   17 00:40F5 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40F5 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40F5 -  -  -  -  ;								(can be comma chained)
   20 00:40F5 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40F5 -  -  -  -  ;
   22 00:40F5 -  -  -  -  ; ***************************************************************************************
   23 00:40F5 -  -  -  -  
   24 00:40F5 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40F5 -  -  -  -  		;
   26 00:40F5 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40F5 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40F5 -  -  -  -  		;
   29 00:40F5 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40F7 D1 -  -  -  		pop 	de
   31 00:40F8 -  -  -  -  		;
   32 00:40F8 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40FB FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40FD D2 2C 44 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:4100 -  -  -  -  _DISkip:
   36 00:4100 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:4102 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:4105 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:4107 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:4109 -  -  -  -  		;
   41 00:4109 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:410C FE 95 -  -  		cp 		KWD_LPAREN
   43 00:410E F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:410F CC 66 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:4112 F1 -  -  -  		pop 	af
   46 00:4113 C4 25 41 -  		call 	nz,DimensionAllocate
   47 00:4116 -  -  -  -  		;
   48 00:4116 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:4119 FE A6 -  -  		cp 		KWD_COMMA
   50 00:411B C0 -  -  -  		ret 	nz
   51 00:411C DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:411E 18 D5 -  -  		jr 		Command_DIM
   53 00:4120 -  -  -  -  
   54 00:4120 -  -  -  -  _CDError:
   55 00:4120 3E 05 C3 CF 
              43 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:4125 -  -  -  -  
   57 00:4125 -  -  -  -  ; ***************************************************************************************
   58 00:4125 -  -  -  -  ;
   59 00:4125 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:4125 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:4125 -  -  -  -  ;
   62 00:4125 -  -  -  -  ; ***************************************************************************************
   63 00:4125 -  -  -  -  
   64 00:4125 -  -  -  -  DimensionAllocate:
   65 00:4125 D5 -  -  -  		push 	de 							; save start on stack
   66 00:4126 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:4128 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:412A 32 7C 40 -  		ld 		(AllowAutoCreate),a
   69 00:412D CD 1E 4C -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:4130 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:4132 28 EC -  -  		jr 		z,_CDError
   72 00:4134 CB 41 -  -  		bit 	CIsString,c
   73 00:4136 20 E8 -  -  		jr 		nz,_CDError
   74 00:4138 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:413A E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:413B 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:413D CD C4 43 -  		call 	CheckNextA 					; check for [
   78 00:4140 CD B4 45 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:4143 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:4145 CD C4 43 -  		call 	CheckNextA 					; check for ]
   81 00:4148 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:4149 7C -  -  -  		ld 		a,h
   83 00:414A B5 -  -  -  		or 		l
   84 00:414B 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:414D D9 -  -  -  		exx
   86 00:414E 23 -  -  -  		inc 	hl
   87 00:414F D9 -  -  -  		exx
   88 00:4150 -  -  -  -  _DANoCarry:
   89 00:4150 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:4151 7C -  -  -  		ld 		a,h
   91 00:4152 B5 -  -  -  		or 		l
   92 00:4153 D9 -  -  -  		exx
   93 00:4154 20 CA -  -  		jr 		nz,_CDError
   94 00:4156 CD 46 49 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:4159 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:415A E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:415B 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:4161 AF -  -  -  		xor 	a 							; autocreate off
   99 00:4162 32 7C 40 -  		ld 		(AllowAutoCreate),a
  100 00:4165 C9 -  -  -  		ret
  101 00:4166 -  -  -  -  
  102 00:4166 -  -  -  -  ; ***************************************************************************************
  103 00:4166 -  -  -  -  ;
  104 00:4166 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:4166 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:4166 -  -  -  -  ;
  107 00:4166 -  -  -  -  ; ***************************************************************************************
  108 00:4166 -  -  -  -  
  109 00:4166 -  -  -  -  DimensionArray:
  110 00:4166 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:4167 -  -  -  -  		;
  112 00:4167 CD B4 45 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:416A 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:416B E6 FC -  -  		and 	$FC
  115 00:416D D9 -  -  -  		exx
  116 00:416E B4 -  -  -  		or 		h
  117 00:416F B5 -  -  -  		or 		l
  118 00:4170 D9 -  -  -  		exx
  119 00:4171 20 AD -  -  		jr 		nz,_CDError
  120 00:4173 -  -  -  -  		;
  121 00:4173 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:4175 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:4176 -  -  -  -  		;
  124 00:4176 CD 9F 4C -  		call 	VariableInformation 		; get information about this array
  125 00:4179 CD D5 4C -  		call 	VariableSearchList 			; look to see if already present.
  126 00:417C 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:417E -  -  -  -  		;
  128 00:417E E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:417F E5 -  -  -  		push 	hl
  130 00:4180 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:4181 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:4182 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:4183 29 -  -  -  		add 	hl,hl
  134 00:4184 CD DF 4B -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:4187 -  -  -  -  		;
  136 00:4187 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:4188 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:418B 09 -  -  -  		add 	hl,bc
  139 00:418C 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:4192 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:4194 C9 -  -  -  		ret		
  142 00:4195 -  -  -  -  
  143 00:4195 -  -  -  -  
  144 00:4195 -  -  -  -  ; ***************************************************************************************
  145 00:4195 -  -  -  -  ;
  146 00:4195 -  -  -  -  ;									Changes and Updates
  147 00:4195 -  -  -  -  ;
  148 00:4195 -  -  -  -  ; ***************************************************************************************
  149 00:4195 -  -  -  -  ;
  150 00:4195 -  -  -  -  ;		Date			Notes
  151 00:4195 -  -  -  -  ;		==== 			=====
  152 00:4195 -  -  -  -  ;
  153 00:4195 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:4195 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:4195 -  -  -  -  ; ***************************************************************************************
    2 00:4195 -  -  -  -  ; ***************************************************************************************
    3 00:4195 -  -  -  -  ;
    4 00:4195 -  -  -  -  ;		Name : 		end.asm
    5 00:4195 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4195 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4195 -  -  -  -  ;		Reviewed :	No
    8 00:4195 -  -  -  -  ;		Purpose :	End command
    9 00:4195 -  -  -  -  ;
   10 00:4195 -  -  -  -  ; ***************************************************************************************
   11 00:4195 -  -  -  -  ; ***************************************************************************************
   12 00:4195 -  -  -  -  
   13 00:4195 -  -  -  -  ; ***************************************************************************************
   14 00:4195 -  -  -  -  ;
   15 00:4195 -  -  -  -  ;										END command
   16 00:4195 -  -  -  -  ;
   17 00:4195 -  -  -  -  ; ***************************************************************************************
   18 00:4195 -  -  -  -  
   19 00:4195 -  -  -  -  Command_END: 	;; [end]
   20 00:4195 3E 00 C3 CF 
              43 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:419A -  -  -  -  
   22 00:419A -  -  -  -  ; ***************************************************************************************
   23 00:419A -  -  -  -  ;
   24 00:419A -  -  -  -  ;									Changes and Updates
   25 00:419A -  -  -  -  ;
   26 00:419A -  -  -  -  ; ***************************************************************************************
   27 00:419A -  -  -  -  ;
   28 00:419A -  -  -  -  ;		Date			Notes
   29 00:419A -  -  -  -  ;		==== 			=====
   30 00:419A -  -  -  -  ;
   31 00:419A -  -  -  -  ; ***************************************************************************************
   32 00:419A -  -  -  -  		
Listing for file "_build.asm"
   19 00:419A -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:419A -  -  -  -  ; ***************************************************************************************
    2 00:419A -  -  -  -  ; ***************************************************************************************
    3 00:419A -  -  -  -  ;
    4 00:419A -  -  -  -  ;		Name : 		endofline.asm
    5 00:419A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:419A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:419A -  -  -  -  ;		Reviewed :	None
    8 00:419A -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:419A -  -  -  -  ;
   10 00:419A -  -  -  -  ; ***************************************************************************************
   11 00:419A -  -  -  -  ; ***************************************************************************************
   12 00:419A -  -  -  -  
   13 00:419A -  -  -  -  ; ***************************************************************************************
   14 00:419A -  -  -  -  ;
   15 00:419A -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:419A -  -  -  -  ;
   17 00:419A -  -  -  -  ; ***************************************************************************************
   18 00:419A -  -  -  -  
   19 00:419A -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:419A DD 2A 58 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:419E 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:41A1 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:41A4 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:41A6 -  -  -  -  		;
   25 00:41A6 ED 7B 5C 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:41AA C3 91 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:41AD -  -  -  -  
   28 00:41AD -  -  -  -  ; ***************************************************************************************
   29 00:41AD -  -  -  -  ;
   30 00:41AD -  -  -  -  ;									Changes and Updates
   31 00:41AD -  -  -  -  ;
   32 00:41AD -  -  -  -  ; ***************************************************************************************
   33 00:41AD -  -  -  -  ;
   34 00:41AD -  -  -  -  ;		Date			Notes
   35 00:41AD -  -  -  -  ;		==== 			=====
   36 00:41AD -  -  -  -  ;
   37 00:41AD -  -  -  -  ; ***************************************************************************************
   38 00:41AD -  -  -  -  		
Listing for file "_build.asm"
   20 00:41AD -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:41AD -  -  -  -  ; ***************************************************************************************
    2 00:41AD -  -  -  -  ; ***************************************************************************************
    3 00:41AD -  -  -  -  ;
    4 00:41AD -  -  -  -  ;		Name : 		let.asm
    5 00:41AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41AD -  -  -  -  ;		Date : 		4th June 2022
    7 00:41AD -  -  -  -  ;		Reviewed :	No
    8 00:41AD -  -  -  -  ;		Purpose :	Assignment statement
    9 00:41AD -  -  -  -  ;
   10 00:41AD -  -  -  -  ; ***************************************************************************************
   11 00:41AD -  -  -  -  ; ***************************************************************************************
   12 00:41AD -  -  -  -  
   13 00:41AD -  -  -  -  ; ***************************************************************************************
   14 00:41AD -  -  -  -  ;
   15 00:41AD -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:41AD -  -  -  -  ;
   17 00:41AD -  -  -  -  ; ***************************************************************************************
   18 00:41AD -  -  -  -  
   19 00:41AD -  -  -  -  Command_LET: 	;; [let]
   20 00:41AD DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41B0 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41B2 28 28 -  -  		jr 		z,_CLString
   23 00:41B4 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41B6 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41B8 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41BA 32 7C 40 -  		ld 		(AllowAutoCreate),a
   27 00:41BD -  -  -  -  _CLNoAuto:
   28 00:41BD 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41BF CD 45 45 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41C2 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41C4 CA 2C 44 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41C7 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41C8 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41C9 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41CA 32 7C 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41CD 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41CF CD C4 43 -  		call 	CheckNextA
   38 00:41D2 -  -  -  -  
   39 00:41D2 CD AE 45 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41D5 -  -  -  -  
   41 00:41D5 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41D6 43 -  -  -  		ld 		b,e 						
   43 00:41D7 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41D8 -  -  -  -  		;
   45 00:41D8 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41D8 -  -  -  -  		;
   47 00:41D8 CD F2 41 -  		call 	WriteHLToDE
   48 00:41DB C9 -  -  -  		ret
   49 00:41DC -  -  -  -  		;
   50 00:41DC -  -  -  -  		; 		String assignment code.
   51 00:41DC -  -  -  -  		;
   52 00:41DC -  -  -  -  _CLString:
   53 00:41DC CD A2 45 -  		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:41DF E5 -  -  -  		push 	hl 							; save target expression
   55 00:41E0 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:41E2 CD C4 43 -  		call 	CheckNextA
   57 00:41E5 CD CA 45 -  		call 	EvaluateString 				; get the thing to copy
   58 00:41E8 D1 -  -  -  		pop 	de 							; target in DE.
   59 00:41E9 -  -  -  -  _CLCopy:
   60 00:41E9 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:41EA 12 -  -  -  		ld 		(de),a
   62 00:41EB 23 -  -  -  		inc 	hl
   63 00:41EC 13 -  -  -  		inc 	de
   64 00:41ED FE 20 -  -  		cp 		$20 						; until control character
   65 00:41EF 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:41F1 C9 -  -  -  		ret
   67 00:41F2 -  -  -  -  
   68 00:41F2 -  -  -  -  ; ***************************************************************************************
   69 00:41F2 -  -  -  -  ;
   70 00:41F2 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:41F2 -  -  -  -  ;
   72 00:41F2 -  -  -  -  ; ***************************************************************************************
   73 00:41F2 -  -  -  -  
   74 00:41F2 -  -  -  -  WriteHLToDE:
   75 00:41F2 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:41F4 C2 22 44 -  		jp 		nz,TypeMismatch
   77 00:41F7 -  -  -  -  		;
   78 00:41F7 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:41F7 -  -  -  -  		;		
   80 00:41F7 -  -  -  -  _WHDWriteNumber:
   81 00:41F7 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:41F8 D9 -  -  -  		exx
   83 00:41F9 EB -  -  -  		ex 		de,hl
   84 00:41FA D9 -  -  -  		exx
   85 00:41FB -  -  -  -  
   86 00:41FB 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:41FC 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:41FD 72 -  -  -  		ld 		(hl),d
   89 00:41FE 23 -  -  -  		inc 	hl
   90 00:41FF E5 -  -  -  		push 	hl
   91 00:4200 D9 -  -  -  		exx
   92 00:4201 E1 -  -  -  		pop 	hl
   93 00:4202 73 -  -  -  		ld 		(hl),e
   94 00:4203 23 -  -  -  		inc 	hl
   95 00:4204 72 -  -  -  		ld 		(hl),d
   96 00:4205 D9 -  -  -  		exx
   97 00:4206 -  -  -  -  
   98 00:4206 C9 -  -  -  		ret
   99 00:4207 -  -  -  -  
  100 00:4207 -  -  -  -  ; ***************************************************************************************
  101 00:4207 -  -  -  -  ;
  102 00:4207 -  -  -  -  ;									Changes and Updates
  103 00:4207 -  -  -  -  ;
  104 00:4207 -  -  -  -  ; ***************************************************************************************
  105 00:4207 -  -  -  -  ;
  106 00:4207 -  -  -  -  ;		Date			Notes
  107 00:4207 -  -  -  -  ;		==== 			=====
  108 00:4207 -  -  -  -  ;
  109 00:4207 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:4207 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:4207 -  -  -  -  ; ***************************************************************************************
    2 00:4207 -  -  -  -  ; ***************************************************************************************
    3 00:4207 -  -  -  -  ;
    4 00:4207 -  -  -  -  ;		Name : 		print.asm
    5 00:4207 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4207 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4207 -  -  -  -  ;		Reviewed :	No
    8 00:4207 -  -  -  -  ;		Purpose :	Print command
    9 00:4207 -  -  -  -  ;
   10 00:4207 -  -  -  -  ; ***************************************************************************************
   11 00:4207 -  -  -  -  ; ***************************************************************************************
   12 00:4207 -  -  -  -  
   13 00:4207 -  -  -  -  ; ***************************************************************************************
   14 00:4207 -  -  -  -  ;
   15 00:4207 -  -  -  -  ;										PRINT command
   16 00:4207 -  -  -  -  ;
   17 00:4207 -  -  -  -  ; ***************************************************************************************
   18 00:4207 -  -  -  -  
   19 00:4207 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:4207 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:4209 32 7E 40 -  		ld 		(PrintBase),a
   22 00:420C -  -  -  -  		;
   23 00:420C -  -  -  -  		;		Main loop
   24 00:420C -  -  -  -  		;
   25 00:420C -  -  -  -  _CPRLoop:
   26 00:420C DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:420F FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:4211 28 50 -  -  		jr 		z,_CPRExitNL
   29 00:4213 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:4215 28 4C -  -  		jr 		z,_CPRExitNL
   31 00:4217 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:4219 28 36 -  -  		jr 		z,_CPRCheckNext10
   33 00:421B FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:421D 28 2D -  -  		jr 		z,_CPRTab
   35 00:421F FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:4221 28 24 -  -  		jr 		z,_CPRNewLine
   37 00:4223 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:4225 28 17 -  -  		jr 		z,_CPRHexMode
   39 00:4227 -  -  -  -  		;
   40 00:4227 CD AE 45 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:422A CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:422C 20 0B -  -  		jr 		nz,_CPRPrintHL
   43 00:422E -  -  -  -  		;
   44 00:422E 3A 7E 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:4231 -  -  -  -  _CPRPrintNumber:
   46 00:4231 01 A2 40 -  		ld  	bc,ConvertBuffer
   47 00:4234 C5 -  -  -  		push 	bc
   48 00:4235 CD 7E 51 -  		call 	Int32ToString 				; convert to string
   49 00:4238 E1 -  -  -  		pop 	hl
   50 00:4239 -  -  -  -  		;
   51 00:4239 -  -  -  -  		; 		Print text at HL.
   52 00:4239 -  -  -  -  		;
   53 00:4239 -  -  -  -  _CPRPrintHL:
   54 00:4239 CD D5 4B -  		call 	PrintStringAtHL 			; print string out
   55 00:423C 18 CE -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:423E -  -  -  -  		;
   57 00:423E -  -  -  -  		;		Hex mode (~)
   58 00:423E -  -  -  -  		;
   59 00:423E -  -  -  -  _CPRHexMode:		
   60 00:423E 3E 10 -  -  		ld 		a,16
   61 00:4240 32 7E 40 -  		ld 		(PrintBase),a
   62 00:4243 DD 23 -  -  		inc 	ix
   63 00:4245 18 C5 -  -  		jr 		_CPRLoop
   64 00:4247 -  -  -  -  		;
   65 00:4247 -  -  -  -  		; 		New line (')
   66 00:4247 -  -  -  -  		;
   67 00:4247 -  -  -  -  _CPRNewLine:
   68 00:4247 CD E8 51 -  		call 	SYSPrintCRLF
   69 00:424A 18 0A -  -  		jr 		_CPRCheckNext
   70 00:424C -  -  -  -  		;
   71 00:424C -  -  -  -  		; 		Tab command (,)
   72 00:424C -  -  -  -  		;
   73 00:424C -  -  -  -  _CPRTab:
   74 00:424C 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:424E CD CC 51 -  		call 	SYSPrintChar
   76 00:4251 -  -  -  -  		;
   77 00:4251 -  -  -  -  		;		Set to base 10 then check next character
   78 00:4251 -  -  -  -  		;
   79 00:4251 -  -  -  -  _CPRCheckNext10:		
   80 00:4251 3E F6 -  -  		ld 		a,-10
   81 00:4253 32 7E 40 -  		ld 		(PrintBase),a
   82 00:4256 -  -  -  -  		;
   83 00:4256 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:4256 -  -  -  -  		;		
   85 00:4256 -  -  -  -  _CPRCheckNext:
   86 00:4256 DD 23 -  -  		inc 	ix 							; consume current
   87 00:4258 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:425B FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:425D C8 -  -  -  		ret 	z
   90 00:425E FE A7 -  -  		cp 		KWD_COLON
   91 00:4260 C8 -  -  -  		ret 	z
   92 00:4261 18 A9 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:4263 -  -  -  -  		;
   94 00:4263 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:4263 -  -  -  -  		;
   96 00:4263 -  -  -  -  _CPRExitNL:
   97 00:4263 CD E8 51 -  		call 	SYSPrintCRLF 				; do CR/LF
   98 00:4266 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:4267 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4267 -  -  -  -  ; ***************************************************************************************
    2 00:4267 -  -  -  -  ; ***************************************************************************************
    3 00:4267 -  -  -  -  ;
    4 00:4267 -  -  -  -  ;		Name : 		rem.asm
    5 00:4267 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4267 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4267 -  -  -  -  ;		Reviewed :	No
    8 00:4267 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4267 -  -  -  -  ;
   10 00:4267 -  -  -  -  ; ***************************************************************************************
   11 00:4267 -  -  -  -  ; ***************************************************************************************
   12 00:4267 -  -  -  -  
   13 00:4267 -  -  -  -  ; ***************************************************************************************
   14 00:4267 -  -  -  -  ;
   15 00:4267 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4267 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4267 -  -  -  -  ;
   18 00:4267 -  -  -  -  ; ***************************************************************************************
   19 00:4267 -  -  -  -  
   20 00:4267 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4267 -  -  -  -  Command_REM2: 	;; [']
   22 00:4267 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:426A FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:426C C8 -  -  -  		ret 	z
   25 00:426D DD 23 -  -  		inc 	ix
   26 00:426F FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:4271 C8 -  -  -  		ret 	z
   28 00:4272 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4274 C2 2C 44 -  		jp 		nz,SyntaxError
   30 00:4277 -  -  -  -  		;		
   31 00:4277 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:427A DD 5E 00 -  		ld 		e,(ix+0)
   33 00:427D 13 -  -  -  		inc 	de 
   34 00:427E 13 -  -  -  		inc 	de
   35 00:427F DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4281 C9 -  -  -  		ret
   37 00:4282 -  -  -  -  
   38 00:4282 -  -  -  -  ; ***************************************************************************************
   39 00:4282 -  -  -  -  ;
   40 00:4282 -  -  -  -  ;									Changes and Updates
   41 00:4282 -  -  -  -  ;
   42 00:4282 -  -  -  -  ; ***************************************************************************************
   43 00:4282 -  -  -  -  ;
   44 00:4282 -  -  -  -  ;		Date			Notes
   45 00:4282 -  -  -  -  ;		==== 			=====
   46 00:4282 -  -  -  -  ;
   47 00:4282 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:4282 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4282 -  -  -  -  ; ***************************************************************************************
    2 00:4282 -  -  -  -  ; ***************************************************************************************
    3 00:4282 -  -  -  -  ;
    4 00:4282 -  -  -  -  ;		Name : 		run.asm
    5 00:4282 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4282 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4282 -  -  -  -  ;		Reviewed :	No
    8 00:4282 -  -  -  -  ;		Purpose :	Run command
    9 00:4282 -  -  -  -  ;
   10 00:4282 -  -  -  -  ; ***************************************************************************************
   11 00:4282 -  -  -  -  ; ***************************************************************************************
   12 00:4282 -  -  -  -  
   13 00:4282 -  -  -  -  ; ***************************************************************************************
   14 00:4282 -  -  -  -  ;
   15 00:4282 -  -  -  -  ;										RUN command
   16 00:4282 -  -  -  -  ;
   17 00:4282 -  -  -  -  ; ***************************************************************************************
   18 00:4282 -  -  -  -  
   19 00:4282 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4282 CD 63 49 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4285 -  -  -  -  
   22 00:4285 DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:4289 ED 73 5C 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:428D AF -  -  -  		xor 	a
   25 00:428E 32 7C 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:4291 -  -  -  -  		;
   27 00:4291 -  -  -  -  		; 		New line at IX.
   28 00:4291 -  -  -  -  		;
   29 00:4291 -  -  -  -  CRNewLine:
   30 00:4291 DD 22 58 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:4295 -  -  -  -  		;
   32 00:4295 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:4298 B7 -  -  -  		or 		a
   34 00:4299 CA 95 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:429C -  -  -  -  		;
   36 00:429C DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:429E DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:42A0 DD 23 -  -  		inc 	ix
   39 00:42A2 -  -  -  -  		;
   40 00:42A2 -  -  -  -  		; 		New command at IX
   41 00:42A2 -  -  -  -  		;
   42 00:42A2 -  -  -  -  _CRNewCommand:	
   43 00:42A2 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:42A5 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:42A6 F2 DA 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:42A9 -  -  -  -  		;
   47 00:42A9 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:42AB 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:42AD FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:42AF D2 CB 42 -  		jp 		nc,_CRAlternateLets
   51 00:42B2 -  -  -  -  		;
   52 00:42B2 -  -  -  -  _CRDoCommand:		
   53 00:42B2 E6 7F 21 00 
              00 6F 29 11 
              46 4F 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:42C4 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:42C6 CD 60 40 -  		call 	JumpCode 					; call the routine.
   56 00:42C9 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:42CB -  -  -  -  		;
   58 00:42CB -  -  -  -  		; 		Do CALL (HL)
   59 00:42CB -  -  -  -  		;
   60 00:42CB -  -  -  -  		;
   61 00:42CB -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:42CB -  -  -  -  		;		
   63 00:42CB -  -  -  -  _CRAlternateLets:		
   64 00:42CB FE 83 -  -  		cp 		KWD_PLING
   65 00:42CD 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:42CF FE 84 -  -  		cp 		KWD_QMARK
   67 00:42D1 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:42D3 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42D5 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42D7 C3 2C 44 -  		jp 		SyntaxError
   71 00:42DA -  -  -  -  		;
   72 00:42DA -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42DA -  -  -  -  		;
   74 00:42DA -  -  -  -  _CRAssignmentHandler:		
   75 00:42DA FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42DC D2 2C 44 -  		jp 		nc,SyntaxError
   77 00:42DF -  -  -  -  _CRAssignmentLet:		
   78 00:42DF CD AD 41 -  		call	Command_LET 				; do LET.
   79 00:42E2 C3 A2 42 -  		jp 		_CRNewCommand
   80 00:42E5 -  -  -  -  
   81 00:42E5 -  -  -  -  ; ***************************************************************************************
   82 00:42E5 -  -  -  -  ;
   83 00:42E5 -  -  -  -  ;									Changes and Updates
   84 00:42E5 -  -  -  -  ;
   85 00:42E5 -  -  -  -  ; ***************************************************************************************
   86 00:42E5 -  -  -  -  ;
   87 00:42E5 -  -  -  -  ;		Date			Notes
   88 00:42E5 -  -  -  -  ;		==== 			=====
   89 00:42E5 -  -  -  -  ;
   90 00:42E5 -  -  -  -  ; ***************************************************************************************
   91 00:42E5 -  -  -  -  		
Listing for file "_build.asm"
   24 00:42E5 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42E5 -  -  -  -  ; ***************************************************************************************
    2 00:42E5 -  -  -  -  ; ***************************************************************************************
    3 00:42E5 -  -  -  -  ;
    4 00:42E5 -  -  -  -  ;		Name : 		stop.asm
    5 00:42E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42E5 -  -  -  -  ;		Reviewed :	No
    8 00:42E5 -  -  -  -  ;		Purpose :	Stop command
    9 00:42E5 -  -  -  -  ;
   10 00:42E5 -  -  -  -  ; ***************************************************************************************
   11 00:42E5 -  -  -  -  ; ***************************************************************************************
   12 00:42E5 -  -  -  -  
   13 00:42E5 -  -  -  -  ; ***************************************************************************************
   14 00:42E5 -  -  -  -  ;
   15 00:42E5 -  -  -  -  ;										STOP command
   16 00:42E5 -  -  -  -  ;
   17 00:42E5 -  -  -  -  ; ***************************************************************************************
   18 00:42E5 -  -  -  -  
   19 00:42E5 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42E5 3E 17 C3 CF 
              43 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42EA -  -  -  -  
   22 00:42EA -  -  -  -  ; ***************************************************************************************
   23 00:42EA -  -  -  -  ;
   24 00:42EA -  -  -  -  ;									Changes and Updates
   25 00:42EA -  -  -  -  ;
   26 00:42EA -  -  -  -  ; ***************************************************************************************
   27 00:42EA -  -  -  -  ;
   28 00:42EA -  -  -  -  ;		Date			Notes
   29 00:42EA -  -  -  -  ;		==== 			=====
   30 00:42EA -  -  -  -  ;
   31 00:42EA -  -  -  -  ; ***************************************************************************************
   32 00:42EA -  -  -  -  		
Listing for file "_build.asm"
   25 00:42EA -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 00:42EA -  -  -  -  ; ***************************************************************************************
    2 00:42EA -  -  -  -  ; ***************************************************************************************
    3 00:42EA -  -  -  -  ;
    4 00:42EA -  -  -  -  ;		Name : 		vdu.asm
    5 00:42EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42EA -  -  -  -  ;		Date : 		8th June 2022
    7 00:42EA -  -  -  -  ;		Reviewed :	No
    8 00:42EA -  -  -  -  ;		Purpose :	Vdu command
    9 00:42EA -  -  -  -  ;
   10 00:42EA -  -  -  -  ; ***************************************************************************************
   11 00:42EA -  -  -  -  ; ***************************************************************************************
   12 00:42EA -  -  -  -  
   13 00:42EA -  -  -  -  ; ***************************************************************************************
   14 00:42EA -  -  -  -  ;
   15 00:42EA -  -  -  -  ;										END command
   16 00:42EA -  -  -  -  ;
   17 00:42EA -  -  -  -  ; ***************************************************************************************
   18 00:42EA -  -  -  -  
   19 00:42EA -  -  -  -  Command_VDU: 	;; [vdu]
   20 00:42EA DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 00:42ED FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 00:42EF C8 -  -  -  		ret 	z
   23 00:42F0 FE A7 -  -  		cp 		KWD_COLON
   24 00:42F2 C8 -  -  -  		ret 	z
   25 00:42F3 -  -  -  -  		;
   26 00:42F3 CD B4 45 -  		call 	EvaluateInteger 			; evaluate integer value
   27 00:42F6 D9 -  -  -  		exx 								; check 0-FFFF
   28 00:42F7 7C -  -  -  		ld 		a,h
   29 00:42F8 B5 -  -  -  		or 		l
   30 00:42F9 D9 -  -  -  		exx
   31 00:42FA C2 27 44 -  		jp  	nz,BadValue
   32 00:42FD E5 -  -  -  		push 	hl 							; save on stack
   33 00:42FE 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 00:42FF CD CC 51 -  		call 	SYSPrintChar
   35 00:4302 E1 -  -  -  		pop 	hl 							; get upper back
   36 00:4303 DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 00:4306 DD 23 -  -  		inc 	ix 
   38 00:4308 FE A6 -  -  		cp 		KWD_COMMA 					
   39 00:430A 28 DE -  -  		jr 		z,Command_VDU
   40 00:430C FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 00:430E 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 00:4310 DD 2B -  -  		dec 	ix 							; go back and try again
   43 00:4312 18 D6 -  -  		jr 		Command_VDU
   44 00:4314 -  -  -  -  
   45 00:4314 -  -  -  -  _VDUUpper:
   46 00:4314 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 00:4315 CD CC 51 -  		call 	SYSPrintChar
   48 00:4318 18 D0 -  -  		jr 		Command_VDU		
   49 00:431A -  -  -  -  
   50 00:431A -  -  -  -  ; ***************************************************************************************
   51 00:431A -  -  -  -  ;
   52 00:431A -  -  -  -  ;									Changes and Updates
   53 00:431A -  -  -  -  ;
   54 00:431A -  -  -  -  ; ***************************************************************************************
   55 00:431A -  -  -  -  ;
   56 00:431A -  -  -  -  ;		Date			Notes
   57 00:431A -  -  -  -  ;		==== 			=====
   58 00:431A -  -  -  -  ;
   59 00:431A -  -  -  -  ; ***************************************************************************************
   60 00:431A -  -  -  -  		
Listing for file "_build.asm"
   26 00:431A -  -  -  -  #include "core/data/read.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
    1 00:431A -  -  -  -  ; ***************************************************************************************
    2 00:431A -  -  -  -  ; ***************************************************************************************
    3 00:431A -  -  -  -  ;
    4 00:431A -  -  -  -  ;		Name : 		read.asm
    5 00:431A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:431A -  -  -  -  ;		Date : 		9th June 2022
    7 00:431A -  -  -  -  ;		Reviewed :	No
    8 00:431A -  -  -  -  ;		Purpose :	READ command
    9 00:431A -  -  -  -  ;
   10 00:431A -  -  -  -  ; ***************************************************************************************
   11 00:431A -  -  -  -  
   12 00:431A -  -  -  -  ; ***************************************************************************************
   13 00:431A -  -  -  -  ;
   14 00:431A -  -  -  -  ;									Read Command
   15 00:431A -  -  -  -  ;
   16 00:431A -  -  -  -  ; ***************************************************************************************
   17 00:431A -  -  -  -  
   18 00:431A -  -  -  -  Command_READ: ;; [read]
   19 00:431A -  -  -  -  			;
   20 00:431A -  -  -  -  			;		READ loop
   21 00:431A -  -  -  -  			;
   22 00:431A -  -  -  -  _CRLoop:	
   23 00:431A 21 84 40 -  			ld 		hl,DataScanRequired 	; check and clear scan required flag
   24 00:431D 7E -  -  -  			ld 		a,(hl)
   25 00:431E 36 00 -  -  			ld 		(hl),0 
   26 00:4320 B7 -  -  -  			or 		a
   27 00:4321 C4 58 43 -  			call 	nz,CRScanForward 		; if required, scan forward to the first data
   28 00:4324 -  -  -  -  			;
   29 00:4324 3E FF -  -  			ld 		a,$FF 					; we can autocreate READ variables
   30 00:4326 32 7C 40 -  			ld 		(AllowAutoCreate),a
   31 00:4329 CD 1E 4C -  			call 	FindVariable 			; locate the variable, address in UHL now.
   32 00:432C AF -  -  -  			xor 	a 						
   33 00:432D 32 7C 40 -  			ld 		(AllowAutoCreate),a
   34 00:4330 DD E5 -  -  			push 	ix 						; save position in program
   35 00:4332 E5 -  -  -  			push 	hl						; save variable target address.
   36 00:4333 -  -  -  -  			;
   37 00:4333 -  -  -  -  _CRLocateData:			
   38 00:4333 DD 2A 80 40 			ld 		ix,(ReadDataPointer) 	; current read position
   39 00:4337 CD B4 45 -  			call 	EvaluateInteger 		; should be an integer there.
   40 00:433A D1 -  -  -  			pop 	de 						; target address in DE
   41 00:433B CD 4E 48 -  			call 	_LCVWrite32HL 			; function to write HL'HL to DE
   42 00:433E -  -  -  -  			;
   43 00:433E DD 7E 00 -  			ld 		a,(ix+0) 				; get following.
   44 00:4341 DD 23 -  -  			inc 	ix
   45 00:4343 DD 22 80 40 			ld 		(ReadDataPointer),ix 	; skip over it. It should be , EOS or :
   46 00:4347 -  -  -  -  			;
   47 00:4347 EE A6 -  -  			xor 	KWD_COMMA 				; will be zero if a comma, hence no scan required
   48 00:4349 32 84 40 -  			ld 		(DataScanRequired),a 	; update the flag accordingly.
   49 00:434C -  -  -  -  			;
   50 00:434C DD E1 -  -  			pop 	ix						; get program position back
   51 00:434E DD 7E 00 -  			ld 		a,(ix+0) 				; is it followed by a comma
   52 00:4351 FE A6 -  -  			cp 		KWD_COMMA
   53 00:4353 C0 -  -  -  			ret 	nz 						; no, end of READ
   54 00:4354 DD 23 -  -  			inc 	ix 						; skip comma
   55 00:4356 18 C2 -  -  			jr 		_CRLoop 				; go round again.
   56 00:4358 -  -  -  -  
   57 00:4358 -  -  -  -  ; ***************************************************************************************
   58 00:4358 -  -  -  -  ;
   59 00:4358 -  -  -  -  ;			Scan the data pointer forward to the next data statement, error if none.
   60 00:4358 -  -  -  -  ;
   61 00:4358 -  -  -  -  ; ***************************************************************************************
   62 00:4358 -  -  -  -  
   63 00:4358 -  -  -  -  CRScanForward:
   64 00:4358 DD E5 -  -  			push 	ix
   65 00:435A DD 2A 80 40 			ld 		ix,(ReadDataPointer)
   66 00:435E -  -  -  -  _CRScanLoop:
   67 00:435E 06 C8 -  -  			ld 		b,KWD_DATA 				; want to search for DATA or EOL
   68 00:4360 0E 80 -  -  			ld 		c,KWC_EOL_MARKER
   69 00:4362 CD 49 4B -  			call 	SearchForwardTokens 	; look for DATA or EOL in current line.
   70 00:4365 FE C8 -  -  			cp 		KWD_DATA 				; DATA found, we can exit
   71 00:4367 28 11 -  -  			jr 		z,_CRScanExit
   72 00:4369 -  -  -  -  			;
   73 00:4369 DD 7E 00 -  			ld 		a,(ix+0) 				; get offset
   74 00:436C DD 23 -  -  			inc 	ix 						; point to start of next line.
   75 00:436E DD 23 -  -  			inc 	ix
   76 00:4370 DD 23 -  -  			inc 	ix
   77 00:4372 B7 -  -  -  			or 		a 						; if offset non zero try that line.
   78 00:4373 20 E9 -  -  			jr 		nz,_CRScanLoop
   79 00:4375 3E 04 C3 CF 
              43 -  -  -  			ERR_DATA 						; we have no data.
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
   80 00:437A -  -  -  -  
   81 00:437A -  -  -  -  _CRScanExit:
   82 00:437A DD 22 80 40 			ld 		(ReadDataPointer),ix 	; update pointer at new DATA.
   83 00:437E DD E1 -  -  			pop 	ix
   84 00:4380 C9 -  -  -  			ret
   85 00:4381 -  -  -  -  
   86 00:4381 -  -  -  -  ; ***************************************************************************************
   87 00:4381 -  -  -  -  ;
   88 00:4381 -  -  -  -  ;									Changes and Updates
   89 00:4381 -  -  -  -  ;
   90 00:4381 -  -  -  -  ; ***************************************************************************************
   91 00:4381 -  -  -  -  ;
   92 00:4381 -  -  -  -  ;		Date			Notes
   93 00:4381 -  -  -  -  ;		==== 			=====
   94 00:4381 -  -  -  -  ;
   95 00:4381 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:4381 -  -  -  -  #include "core/data/restore.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/restore.asm"
    1 00:4381 -  -  -  -  ; ***************************************************************************************
    2 00:4381 -  -  -  -  ; ***************************************************************************************
    3 00:4381 -  -  -  -  ;
    4 00:4381 -  -  -  -  ;		Name : 		restore.asm
    5 00:4381 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4381 -  -  -  -  ;		Date : 		9th June 2022
    7 00:4381 -  -  -  -  ;		Reviewed :	No
    8 00:4381 -  -  -  -  ;		Purpose :	RESTORE command
    9 00:4381 -  -  -  -  ;
   10 00:4381 -  -  -  -  ; ***************************************************************************************
   11 00:4381 -  -  -  -  
   12 00:4381 -  -  -  -  ; ***************************************************************************************
   13 00:4381 -  -  -  -  ;
   14 00:4381 -  -  -  -  ;									Restore Command
   15 00:4381 -  -  -  -  ;
   16 00:4381 -  -  -  -  ; ***************************************************************************************
   17 00:4381 -  -  -  -  
   18 00:4381 -  -  -  -  Command_RESTORE: ;; [restore]
   19 00:4381 2A 34 40 -  			ld 		hl,(CodeAddress)		; HL+3 is the first token.
   20 00:4384 23 -  -  -  			inc 	hl
   21 00:4385 23 -  -  -  			inc 	hl
   22 00:4386 23 -  -  -  			inc 	hl
   23 00:4387 22 80 40 -  			ld 		(ReadDataPointer),hl 	; scan from here.
   24 00:438A 3E FF -  -  			ld 		a,$FF 					; scan required first time out.
   25 00:438C 32 84 40 -  			ld 		(DataScanRequired),a
   26 00:438F C9 -  -  -  			ret 					
   27 00:4390 -  -  -  -  
   28 00:4390 -  -  -  -  ; ***************************************************************************************
   29 00:4390 -  -  -  -  ;
   30 00:4390 -  -  -  -  ;									Changes and Updates
   31 00:4390 -  -  -  -  ;
   32 00:4390 -  -  -  -  ; ***************************************************************************************
   33 00:4390 -  -  -  -  ;
   34 00:4390 -  -  -  -  ;		Date			Notes
   35 00:4390 -  -  -  -  ;		==== 			=====
   36 00:4390 -  -  -  -  ;
   37 00:4390 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:4390 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4390 -  -  -  -  ; ***************************************************************************************
    2 00:4390 -  -  -  -  ; ***************************************************************************************
    3 00:4390 -  -  -  -  ;
    4 00:4390 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4390 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4390 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4390 -  -  -  -  ;		Reviewed :	No
    8 00:4390 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4390 -  -  -  -  ;
   10 00:4390 -  -  -  -  ; ***************************************************************************************
   11 00:4390 -  -  -  -  ; ***************************************************************************************
   12 00:4390 -  -  -  -  
   13 00:4390 -  -  -  -  ; ***************************************************************************************
   14 00:4390 -  -  -  -  ;
   15 00:4390 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4390 -  -  -  -  ;
   17 00:4390 -  -  -  -  ; ***************************************************************************************
   18 00:4390 -  -  -  -  
   19 00:4390 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4390             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4390             		inc 	ix
   22 00:4390             		cp 		ch 							; exit if matches
   23 00:4390             		ret 	z
   24 00:4390             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4390             		jp 		ErrorHandler
   26 00:4390             #endmacro
   27 00:4390 -  -  -  -  
   28 00:4390 -  -  -  -  CheckLeftBracket:
   29 00:4390 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0F C3 CF 
              43 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:439D -  -  -  -  
   31 00:439D -  -  -  -  CheckRightBracket:
   32 00:439D DD 7E 00 DD 
              23 FE A5 C8 
              3E 11 C3 CF 
              43 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:43AA -  -  -  -  
   34 00:43AA -  -  -  -  CheckDollar:
   35 00:43AA DD 7E 00 DD 
              23 FE 96 C8 
              3E 0E C3 CF 
              43 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:43B7 -  -  -  -  		
   37 00:43B7 -  -  -  -  CheckComma:
   38 00:43B7 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0D C3 CF 
              43 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:43C4 -  -  -  -  
   40 00:43C4 -  -  -  -  ; ***************************************************************************************
   41 00:43C4 -  -  -  -  ;
   42 00:43C4 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:43C4 -  -  -  -  ;
   44 00:43C4 -  -  -  -  ; ***************************************************************************************
   45 00:43C4 -  -  -  -  
   46 00:43C4 -  -  -  -  CheckNextA:
   47 00:43C4 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:43C7 DD 23 -  -  		inc 	ix 							; skip character
   49 00:43C9 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:43CA 3E 18 C3 CF 
              43 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:43CF -  -  -  -  		
   52 00:43CF -  -  -  -  ; ***************************************************************************************
   53 00:43CF -  -  -  -  ;
   54 00:43CF -  -  -  -  ;									Changes and Updates
   55 00:43CF -  -  -  -  ;
   56 00:43CF -  -  -  -  ; ***************************************************************************************
   57 00:43CF -  -  -  -  ;
   58 00:43CF -  -  -  -  ;		Date			Notes
   59 00:43CF -  -  -  -  ;		==== 			=====
   60 00:43CF -  -  -  -  ;
   61 00:43CF -  -  -  -  ; ***************************************************************************************
   62 00:43CF -  -  -  -  		
Listing for file "_build.asm"
   29 00:43CF -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:43CF -  -  -  -  ; ***************************************************************************************
    2 00:43CF -  -  -  -  ; ***************************************************************************************
    3 00:43CF -  -  -  -  ;
    4 00:43CF -  -  -  -  ;		Name : 		errors.asm
    5 00:43CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43CF -  -  -  -  ;		Reviewed :	No
    8 00:43CF -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:43CF -  -  -  -  ;
   10 00:43CF -  -  -  -  ; ***************************************************************************************
   11 00:43CF -  -  -  -  ; ***************************************************************************************
   12 00:43CF -  -  -  -  
   13 00:43CF -  -  -  -  ; ***************************************************************************************
   14 00:43CF -  -  -  -  ;
   15 00:43CF -  -  -  -  ;								Error handler, message A 
   16 00:43CF -  -  -  -  ;
   17 00:43CF -  -  -  -  ; ***************************************************************************************
   18 00:43CF -  -  -  -  
   19 00:43CF -  -  -  -  ErrorHandler:
   20 00:43CF F5 -  -  -  		push 	af 						; save error ID
   21 00:43D0 -  -  -  -  
   22 00:43D0 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:43D3 6F -  -  -  		ld 		l,a
   24 00:43D4 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:43D5 29 -  -  -  		add 	hl,hl 		
   26 00:43D6 11 31 4D -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:43D9 19 -  -  -  		add 	hl,de
   28 00:43DA 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:43DE CD D5 4B -  		call 	PrintStringAtHL
   30 00:43E1 -  -  -  -  		;
   31 00:43E1 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:43E2 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:43E3 28 28 -  -  		jr 		z,_EHExit
   34 00:43E5 -  -  -  -  		;
   35 00:43E5 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:43E9 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:43EC B7 -  -  -  		or 		a
   38 00:43ED 28 1E -  -  		jr 		z,_EHExit
   39 00:43EF -  -  -  -  
   40 00:43EF 21 13 44 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:43F2 CD D5 4B -  		call 	PrintStringAtHL 
   42 00:43F5 -  -  -  -  		
   43 00:43F5 D9 -  -  -  		exx								; HL'HL = line number
   44 00:43F6 21 00 00 -  		ld 		hl,$0000 		
   45 00:43F9 D9 -  -  -  		exx 
   46 00:43FA DD 6E 01 -  		ld 		l,(ix+1)
   47 00:43FD DD 66 02 -  		ld 		h,(ix+2)
   48 00:4400 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4402 01 A2 40 -  		ld 		bc,ConvertBuffer
   50 00:4405 CD 7E 51 -  		call 	Int32ToString
   51 00:4408 C5 -  -  -  		push 	bc
   52 00:4409 E1 -  -  -  		pop 	hl
   53 00:440A CD D5 4B -  		call 	PrintStringAtHL			; print error line number.
   54 00:440D -  -  -  -  _EHExit:		
   55 00:440D CD E8 51 -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4410 C3 1A 40 -  		jp 		WarmStart
   57 00:4413 -  -  -  -  
   58 00:4413 -  -  -  -  _EHAtText:
   59 00:4413 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:441D -  -  -  -  
   61 00:441D -  -  -  -  NotImplemented:
   62 00:441D 3E 06 C3 CF 
              43 -  -  -  		ERR_DISABLED
   63 00:4422 -  -  -  -  TypeMismatch:
   64 00:4422 3E 02 C3 CF 
              43 -  -  -  		ERR_BADTYPE
   65 00:4427 -  -  -  -  BadValue:
   66 00:4427 3E 03 C3 CF 
              43 -  -  -  		ERR_BADVALUE
   67 00:442C -  -  -  -  SyntaxError:
   68 00:442C 3E 18 C3 CF 
              43 -  -  -  		ERR_SYNTAX
   69 00:4431 -  -  -  -  						
   70 00:4431 -  -  -  -  ; ***************************************************************************************
   71 00:4431 -  -  -  -  ;
   72 00:4431 -  -  -  -  ;									Changes and Updates
   73 00:4431 -  -  -  -  ;
   74 00:4431 -  -  -  -  ; ***************************************************************************************
   75 00:4431 -  -  -  -  ;
   76 00:4431 -  -  -  -  ;		Date			Notes
   77 00:4431 -  -  -  -  ;		==== 			=====
   78 00:4431 -  -  -  -  ;
   79 00:4431 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:4431 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4431 -  -  -  -  ; ***************************************************************************************
    2 00:4431 -  -  -  -  ; ***************************************************************************************
    3 00:4431 -  -  -  -  ;
    4 00:4431 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4431 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4431 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4431 -  -  -  -  ;		Reviewed :	No
    8 00:4431 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4431 -  -  -  -  ;
   10 00:4431 -  -  -  -  ; ***************************************************************************************
   11 00:4431 -  -  -  -  ; ***************************************************************************************
   12 00:4431 -  -  -  -  
   13 00:4431 -  -  -  -  ; ***************************************************************************************
   14 00:4431 -  -  -  -  ;
   15 00:4431 -  -  -  -  ; 									Addition
   16 00:4431 -  -  -  -  ;
   17 00:4431 -  -  -  -  ; ***************************************************************************************
   18 00:4431 -  -  -  -  
   19 00:4431 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4431 CD 24 45 78 
              B1 C2 22 44 
              C3 0B 51 -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:443C -  -  -  -  
   22 00:443C -  -  -  -  ; ***************************************************************************************
   23 00:443C -  -  -  -  ;
   24 00:443C -  -  -  -  ; 									Subtraction
   25 00:443C -  -  -  -  ;
   26 00:443C -  -  -  -  ; ***************************************************************************************
   27 00:443C -  -  -  -  
   28 00:443C -  -  -  -  ALUSubtract: 	;; [-]
   29 00:443C CD 24 45 78 
              B1 C2 22 44 
              C3 11 51 -  		IntegerDispatch(Int32Subtract)
   30 00:4447 -  -  -  -  
   31 00:4447 -  -  -  -  ; ***************************************************************************************
   32 00:4447 -  -  -  -  ;
   33 00:4447 -  -  -  -  ; 									  Multiply
   34 00:4447 -  -  -  -  ;
   35 00:4447 -  -  -  -  ; ***************************************************************************************
   36 00:4447 -  -  -  -  
   37 00:4447 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:4447 CD 24 45 78 
              B1 C2 22 44 
              C3 D5 50 -  		IntegerDispatch(Int32Multiply)
   39 00:4452 -  -  -  -  
   40 00:4452 -  -  -  -  ; ***************************************************************************************
   41 00:4452 -  -  -  -  ;
   42 00:4452 -  -  -  -  ; 									  Divide
   43 00:4452 -  -  -  -  ;
   44 00:4452 -  -  -  -  ; ***************************************************************************************
   45 00:4452 -  -  -  -  
   46 00:4452 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4452 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4452 CD 24 45 78 
              B1 C2 22 44 
              C3 E6 4F -  		IntegerDispatch(Int32SDivide)
   49 00:445D -  -  -  -  
   50 00:445D -  -  -  -  ; ***************************************************************************************
   51 00:445D -  -  -  -  ;
   52 00:445D -  -  -  -  ; 									  Modulus
   53 00:445D -  -  -  -  ;
   54 00:445D -  -  -  -  ; ***************************************************************************************
   55 00:445D -  -  -  -  
   56 00:445D -  -  -  -  ALUModulus: 	;; [mod]
   57 00:445D CD 24 45 78 
              B1 C2 22 44 
              C3 E9 4F -  		IntegerDispatch(Int32Modulus)
   58 00:4468 -  -  -  -  
   59 00:4468 -  -  -  -  ; ***************************************************************************************
   60 00:4468 -  -  -  -  ;
   61 00:4468 -  -  -  -  ; 									  Logical
   62 00:4468 -  -  -  -  ;
   63 00:4468 -  -  -  -  ; ***************************************************************************************
   64 00:4468 -  -  -  -  
   65 00:4468 -  -  -  -  ALUAnd: 		;; [and]
   66 00:4468 CD 24 45 78 
              B1 C2 22 44 
              C3 19 51 -  		IntegerDispatch(Int32And)
   67 00:4473 -  -  -  -  
   68 00:4473 -  -  -  -  ALUOr: 			;; [or]
   69 00:4473 CD 24 45 78 
              B1 C2 22 44 
              C3 25 51 -  		IntegerDispatch(Int32Or)
   70 00:447E -  -  -  -  
   71 00:447E -  -  -  -  ALUXor: 		;; [eor]
   72 00:447E CD 24 45 78 
              B1 C2 22 44 
              C3 31 51 -  		IntegerDispatch(Int32Xor)
   73 00:4489 -  -  -  -  
   74 00:4489 -  -  -  -  ; ***************************************************************************************
   75 00:4489 -  -  -  -  ;
   76 00:4489 -  -  -  -  ;									Changes and Updates
   77 00:4489 -  -  -  -  ;
   78 00:4489 -  -  -  -  ; ***************************************************************************************
   79 00:4489 -  -  -  -  ;
   80 00:4489 -  -  -  -  ;		Date			Notes
   81 00:4489 -  -  -  -  ;		==== 			=====
   82 00:4489 -  -  -  -  ;
   83 00:4489 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4489 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:4489 -  -  -  -  ; ***************************************************************************************
    2 00:4489 -  -  -  -  ; ***************************************************************************************
    3 00:4489 -  -  -  -  ;
    4 00:4489 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:4489 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4489 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4489 -  -  -  -  ;		Reviewed :	No
    8 00:4489 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:4489 -  -  -  -  ;
   10 00:4489 -  -  -  -  ; ***************************************************************************************
   11 00:4489 -  -  -  -  ; ***************************************************************************************
   12 00:4489 -  -  -  -  
   13 00:4489 -  -  -  -  ; ***************************************************************************************
   14 00:4489 -  -  -  -  ;
   15 00:4489 -  -  -  -  ; 									<l> <op> <r>
   16 00:4489 -  -  -  -  ;
   17 00:4489 -  -  -  -  ; ***************************************************************************************
   18 00:4489 -  -  -  -  
   19 00:4489 -  -  -  -  ALULongReference:			;; [!]
   20 00:4489 CD 97 44 -  		call 	BRGetAddress 				; calculate address
   21 00:448C 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:448E CB F9 -  -  		set 	CIsReference,c
   23 00:4490 C9 -  -  -  		ret
   24 00:4491 -  -  -  -  
   25 00:4491 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4491 CD 89 44 -  		call 	ALULongReference
   27 00:4494 CB F1 -  -  		set 	CIsByteReference,c
   28 00:4496 C9 -  -  -  		ret
   29 00:4497 -  -  -  -  
   30 00:4497 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:4497 CD 24 45 78 
              B1 C2 22 44 
              C3 A2 44 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:44A2 -  -  -  -  _BRGAMain:		
   33 00:44A2 CD 0B 51 -  		call 	Int32Add 					; address in HL'HL
   34 00:44A5 CD 0D 46 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:44A8 C9 -  -  -  		ret
   36 00:44A9 -  -  -  -  
   37 00:44A9 -  -  -  -  ; ***************************************************************************************
   38 00:44A9 -  -  -  -  ;
   39 00:44A9 -  -  -  -  ;									Changes and Updates
   40 00:44A9 -  -  -  -  ;
   41 00:44A9 -  -  -  -  ; ***************************************************************************************
   42 00:44A9 -  -  -  -  ;
   43 00:44A9 -  -  -  -  ;		Date			Notes
   44 00:44A9 -  -  -  -  ;		==== 			=====
   45 00:44A9 -  -  -  -  ;
   46 00:44A9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:44A9 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:44A9 -  -  -  -  ; ***************************************************************************************
    2 00:44A9 -  -  -  -  ; ***************************************************************************************
    3 00:44A9 -  -  -  -  ;
    4 00:44A9 -  -  -  -  ;		Name : 		compare.asm
    5 00:44A9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44A9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44A9 -  -  -  -  ;		Reviewed :	No
    8 00:44A9 -  -  -  -  ;		Purpose :	Comparison code
    9 00:44A9 -  -  -  -  ;
   10 00:44A9 -  -  -  -  ; ***************************************************************************************
   11 00:44A9 -  -  -  -  ; ***************************************************************************************
   12 00:44A9 -  -  -  -  
   13 00:44A9 -  -  -  -  #macro compare_equals(n)
   14 00:44A9             		call 	CompareBaseCode
   15 00:44A9             		cp 		n
   16 00:44A9             		jr 		z,UnaryInt32True
   17 00:44A9             		jr 		UnaryInt32False
   18 00:44A9             #endmacro
   19 00:44A9 -  -  -  -  
   20 00:44A9 -  -  -  -  #macro compare_not_equals(n)
   21 00:44A9             		call 	CompareBaseCode
   22 00:44A9             		cp 		n
   23 00:44A9             		jr 		nz,UnaryInt32True
   24 00:44A9             		jr 		UnaryInt32False
   25 00:44A9             #endmacro
   26 00:44A9 -  -  -  -  
   27 00:44A9 -  -  -  -  ; ***************************************************************************************
   28 00:44A9 -  -  -  -  ;
   29 00:44A9 -  -  -  -  ; 								Return True/False
   30 00:44A9 -  -  -  -  ;
   31 00:44A9 -  -  -  -  ; ***************************************************************************************
   32 00:44A9 -  -  -  -  
   33 00:44A9 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:44A9 3E FF -  -  		ld 		a,255
   35 00:44AB 18 01 -  -  		jr 		_Int32Logical
   36 00:44AD -  -  -  -  UnaryInt32False: ;; [false]
   37 00:44AD AF -  -  -  		xor 	a
   38 00:44AE -  -  -  -  _Int32Logical:
   39 00:44AE 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:44AF 67 -  -  -  		ld 		h,a
   41 00:44B0 D9 -  -  -  		exx
   42 00:44B1 6F -  -  -  		ld 		l,a
   43 00:44B2 67 -  -  -  		ld 		h,a
   44 00:44B3 D9 -  -  -  		exx
   45 00:44B4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:44B6 C9 -  -  -  		ret
   47 00:44B7 -  -  -  -  
   48 00:44B7 -  -  -  -  ; ***************************************************************************************
   49 00:44B7 -  -  -  -  ;
   50 00:44B7 -  -  -  -  ; 										> = < (compare == value)
   51 00:44B7 -  -  -  -  ;
   52 00:44B7 -  -  -  -  ; ***************************************************************************************
   53 00:44B7 -  -  -  -  
   54 00:44B7 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:44B7 CD ED 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:44C0 -  -  -  -  
   57 00:44C0 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:44C0 CD ED 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:44C9 -  -  -  -  
   60 00:44C9 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:44C9 CD ED 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:44D2 -  -  -  -  
   63 00:44D2 -  -  -  -  ; ***************************************************************************************
   64 00:44D2 -  -  -  -  ;
   65 00:44D2 -  -  -  -  ; 										> = < (compare <> value)
   66 00:44D2 -  -  -  -  ;
   67 00:44D2 -  -  -  -  ; ***************************************************************************************
   68 00:44D2 -  -  -  -  
   69 00:44D2 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:44D2 CD ED 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:44DB -  -  -  -  
   72 00:44DB -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:44DB CD ED 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:44E4 -  -  -  -  
   75 00:44E4 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:44E4 CD ED 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:44ED -  -  -  -  
   78 00:44ED -  -  -  -  ; ***************************************************************************************
   79 00:44ED -  -  -  -  ;
   80 00:44ED -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:44ED -  -  -  -  ;
   82 00:44ED -  -  -  -  ; ***************************************************************************************
   83 00:44ED -  -  -  -  
   84 00:44ED -  -  -  -  CompareBaseCode:
   85 00:44ED CD 24 45 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:44F0 -  -  -  -  
   87 00:44F0 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:44F1 A1 -  -  -  		and 	c
   89 00:44F2 CB 47 -  -  		bit 	CIsString,a 
   90 00:44F4 C2 03 45 -  		jp 		nz,StringCompare
   91 00:44F7 -  -  -  -  
   92 00:44F7 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:44F8 B1 -  -  -  		or 		c
   94 00:44F9 CB 47 -  -  		bit 	CIsString,a 
   95 00:44FB CA 44 51 -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:44FE -  -  -  -  
   97 00:44FE 3E 02 C3 CF 
              43 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4503 -  -  -  -  ;
   99 00:4503 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4503 -  -  -  -  ;
  101 00:4503 -  -  -  -  StringCompare:
  102 00:4503 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4504 BE -  -  -  		cp 		(hl)
  104 00:4505 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:4507 20 08 -  -  		jr 		nz,_SCLess
  106 00:4509 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:450A 23 -  -  -  		inc 	hl
  108 00:450B FE 20 -  -  		cp 		' '
  109 00:450D 30 F4 -  -  		jr 		nc,StringCompare
  110 00:450F AF -  -  -  		xor 	a 							; return 0.
  111 00:4510 C9 -  -  -  		ret
  112 00:4511 -  -  -  -  
  113 00:4511 -  -  -  -  _SCLess:
  114 00:4511 3E FF -  -  		ld 		a,$FF
  115 00:4513 C9 -  -  -  		ret
  116 00:4514 -  -  -  -  _SCGreater:
  117 00:4514 3E 01 -  -  		ld 		a,1
  118 00:4516 C9 -  -  -  		ret
  119 00:4517 -  -  -  -  
  120 00:4517 3E 19 C3 CF 
              43 -  -  -  		ERR_TODO()
  121 00:451C -  -  -  -  
  122 00:451C -  -  -  -  ; ***************************************************************************************
  123 00:451C -  -  -  -  ;
  124 00:451C -  -  -  -  ;									Changes and Updates
  125 00:451C -  -  -  -  ;
  126 00:451C -  -  -  -  ; ***************************************************************************************
  127 00:451C -  -  -  -  ;
  128 00:451C -  -  -  -  ;		Date			Notes
  129 00:451C -  -  -  -  ;		==== 			=====
  130 00:451C -  -  -  -  ;
  131 00:451C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:451C -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:451C -  -  -  -  ; ***************************************************************************************
    2 00:451C -  -  -  -  ; ***************************************************************************************
    3 00:451C -  -  -  -  ;
    4 00:451C -  -  -  -  ;		Name : 		utility.asm
    5 00:451C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:451C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:451C -  -  -  -  ;		Reviewed :	No
    8 00:451C -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:451C -  -  -  -  ;
   10 00:451C -  -  -  -  ; ***************************************************************************************
   11 00:451C -  -  -  -  ; ***************************************************************************************
   12 00:451C -  -  -  -  
   13 00:451C -  -  -  -  ; ***************************************************************************************
   14 00:451C -  -  -  -  ;
   15 00:451C -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:451C -  -  -  -  ;
   17 00:451C -  -  -  -  ; ***************************************************************************************
   18 00:451C -  -  -  -  
   19 00:451C -  -  -  -  SwapHLDE:
   20 00:451C EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:451D D9 -  -  -  			exx
   22 00:451E EB -  -  -  			ex 		de,hl
   23 00:451F D9 -  -  -  			exx
   24 00:4520 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4521 41 -  -  -  			ld 		b,c
   26 00:4522 4F -  -  -  			ld 		c,a
   27 00:4523 C9 -  -  -  			ret
   28 00:4524 -  -  -  -  
   29 00:4524 -  -  -  -  ; ***************************************************************************************
   30 00:4524 -  -  -  -  ;
   31 00:4524 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:4524 -  -  -  -  ;
   33 00:4524 -  -  -  -  ; ***************************************************************************************
   34 00:4524 -  -  -  -  
   35 00:4524 -  -  -  -  DereferenceBoth:
   36 00:4524 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:4526 C4 DF 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:4529 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:452B C8 -  -  -  			ret 	z
   40 00:452C CD 1C 45 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:452F CD DF 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4532 CD 1C 45 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4535 C9 -  -  -  			ret
   44 00:4536 -  -  -  -  
   45 00:4536 -  -  -  -  ; ***************************************************************************************
   46 00:4536 -  -  -  -  ;
   47 00:4536 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:4536 -  -  -  -  ;
   49 00:4536 -  -  -  -  ; ***************************************************************************************
   50 00:4536 -  -  -  -  
   51 00:4536 -  -  -  -  NegateHLHL:	
   52 00:4536 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:4538 C2 22 44 -  			jp 		nz,TypeMismatch
   54 00:453B CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:453D C4 DF 45 -  			call 	nz,Dereference 			; if required.
   56 00:4540 CD 6B 51 -  			call 	Int32Negate
   57 00:4543 C9 -  -  -  			ret
Listing for file "_build.asm"
   34 00:4544 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4544 -  -  -  -  ; ***************************************************************************************
    2 00:4544 -  -  -  -  ; ***************************************************************************************
    3 00:4544 -  -  -  -  ;
    4 00:4544 -  -  -  -  ;		Name : 		expression.asm
    5 00:4544 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4544 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4544 -  -  -  -  ;		Reviewed :	None
    8 00:4544 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4544 -  -  -  -  ;
   10 00:4544 -  -  -  -  ; ***************************************************************************************
   11 00:4544 -  -  -  -  ; ***************************************************************************************
   12 00:4544 -  -  -  -  
   13 00:4544 -  -  -  -  ; ***************************************************************************************
   14 00:4544 -  -  -  -  ;
   15 00:4544 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4544 -  -  -  -  ;
   17 00:4544 -  -  -  -  ; ***************************************************************************************
   18 00:4544 -  -  -  -  
   19 00:4544 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4544 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4545 -  -  -  -  EvaluateAtPrecedence:
   22 00:4545 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:4546 -  -  -  -  		;
   24 00:4546 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:4546 -  -  -  -  		;
   26 00:4546 CD 0F 46 -  		call 	EvaluateTerm 				; get term
   27 00:4549 -  -  -  -  		;
   28 00:4549 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4549 -  -  -  -  		;
   30 00:4549 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:454A -  -  -  -  _EAPLoop:
   32 00:454A DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:454D FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:454F D8 -  -  -  		ret 	c
   35 00:4550 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4552 D0 -  -  -  		ret 	nc
   37 00:4553 -  -  -  -  		;
   38 00:4553 -  -  -  -  		; 		Get the precedence.
   39 00:4553 -  -  -  -  		;
   40 00:4553 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:4554 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:4556 21 20 4D -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4559 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:455A 6F -  -  -  		ld 		l,a
   45 00:455B 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:455C E1 -  -  -  		pop 	hl 							; restore HL
   47 00:455D -  -  -  -  		;
   48 00:455D -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:455D -  -  -  -  		;
   50 00:455D 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:455E BB -  -  -  		cp 		e
   52 00:455F D0 -  -  -  		ret 	nc
   53 00:4560 -  -  -  -  
   54 00:4560 -  -  -  -  		;
   55 00:4560 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4560 -  -  -  -  		;
   57 00:4560 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4561 -  -  -  -  		;
   59 00:4561 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:4564 F5 -  -  -  		push 	af
   61 00:4565 -  -  -  -  		;
   62 00:4565 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:4566 D9 -  -  -  		exx 								; save HL'
   64 00:4567 E5 -  -  -  		push 	hl
   65 00:4568 D9 -  -  -  		exx 								
   66 00:4569 E5 -  -  -  		push 	hl 							; save HL
   67 00:456A -  -  -  -  		;
   68 00:456A DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:456C -  -  -  -  		;
   70 00:456C -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:456C -  -  -  -  		;
   72 00:456C 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:456D CD 45 45 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4570 -  -  -  -  		;
   75 00:4570 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4570 -  -  -  -  		;
   77 00:4570 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4571 -  -  -  -  
   79 00:4571 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4572 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4573 D9 -  -  -  		exx
   82 00:4574 EB -  -  -  		ex 		de,hl
   83 00:4575 E1 -  -  -  		pop 	hl
   84 00:4576 D9 -  -  -  		exx
   85 00:4577 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:4578 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:4579 -  -  -  -  		;
   88 00:4579 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:4579 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:4579 -  -  -  -  		;
   91 00:4579 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:457A -  -  -  -  		;
   93 00:457A -  -  -  -  		; 		Call the binary operator in A.
   94 00:457A -  -  -  -  		;
   95 00:457A D5 -  -  -  		push 	de
   96 00:457B E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:457C E6 7F 21 00 
              00 6F 29 11 
              46 4F 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:458E E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:458F D1 -  -  -  		pop 	de 							; restore DE
  100 00:4590 CD 60 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4593 -  -  -  -  		;
  102 00:4593 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:4594 -  -  -  -  		;
  104 00:4594 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:4596 -  -  -  -  
  106 00:4596 -  -  -  -  ; ***************************************************************************************
  107 00:4596 -  -  -  -  ;
  108 00:4596 -  -  -  -  ;									Changes and Updates
  109 00:4596 -  -  -  -  ;
  110 00:4596 -  -  -  -  ; ***************************************************************************************
  111 00:4596 -  -  -  -  ;
  112 00:4596 -  -  -  -  ;		Date			Notes
  113 00:4596 -  -  -  -  ;		==== 			=====
  114 00:4596 -  -  -  -  ;
  115 00:4596 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:4596 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:4596 -  -  -  -  ; ***************************************************************************************
    2 00:4596 -  -  -  -  ; ***************************************************************************************
    3 00:4596 -  -  -  -  ;
    4 00:4596 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:4596 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4596 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4596 -  -  -  -  ;		Reviewed :	No
    8 00:4596 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:4596 -  -  -  -  ;
   10 00:4596 -  -  -  -  ; ***************************************************************************************
   11 00:4596 -  -  -  -  ; ***************************************************************************************
   12 00:4596 -  -  -  -  
   13 00:4596 -  -  -  -  ; ***************************************************************************************
   14 00:4596 -  -  -  -  ;
   15 00:4596 -  -  -  -  ; 								Evaluate an integer term
   16 00:4596 -  -  -  -  ;
   17 00:4596 -  -  -  -  ; ***************************************************************************************
   18 00:4596 -  -  -  -  
   19 00:4596 -  -  -  -  EvaluateIntegerTerm:
   20 00:4596 CD 0F 46 -  		call 	EvaluateTerm
   21 00:4599 CD DF 45 -  		call 	DeReference
   22 00:459C CB 41 -  -  		bit 	CIsString,c
   23 00:459E C8 -  -  -  		ret 	z
   24 00:459F C3 22 44 -  		jp 		TypeMismatch
   25 00:45A2 -  -  -  -  
   26 00:45A2 -  -  -  -  ; ***************************************************************************************
   27 00:45A2 -  -  -  -  ;
   28 00:45A2 -  -  -  -  ; 								Evaluate a string term
   29 00:45A2 -  -  -  -  ;
   30 00:45A2 -  -  -  -  ; ***************************************************************************************
   31 00:45A2 -  -  -  -  
   32 00:45A2 -  -  -  -  EvaluateStringTerm:
   33 00:45A2 CD 0F 46 -  		call 	EvaluateTerm
   34 00:45A5 CD DF 45 -  		call 	DeReference
   35 00:45A8 CB 41 -  -  		bit 	CIsString,c
   36 00:45AA C0 -  -  -  		ret 	nz
   37 00:45AB C3 22 44 -  		jp 		TypeMismatch
   38 00:45AE -  -  -  -  
   39 00:45AE -  -  -  -  ; ***************************************************************************************
   40 00:45AE -  -  -  -  ;
   41 00:45AE -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:45AE -  -  -  -  ;
   43 00:45AE -  -  -  -  ; ***************************************************************************************
   44 00:45AE -  -  -  -  
   45 00:45AE -  -  -  -  EvaluateValue:
   46 00:45AE CD 44 45 -  		call 	EvaluateAtPrecedence0
   47 00:45B1 C3 DF 45 -  		jp 		Dereference
   48 00:45B4 -  -  -  -  
   49 00:45B4 -  -  -  -  ; ***************************************************************************************
   50 00:45B4 -  -  -  -  ;
   51 00:45B4 -  -  -  -  ; 									Evaluate a number
   52 00:45B4 -  -  -  -  ;
   53 00:45B4 -  -  -  -  ; ***************************************************************************************
   54 00:45B4 -  -  -  -  
   55 00:45B4 -  -  -  -  EvaluateInteger:
   56 00:45B4 CD AE 45 -  		call 	EvaluateValue
   57 00:45B7 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:45B9 C8 -  -  -  		ret 	z
   59 00:45BA C3 22 44 -  		jp 		TypeMismatch
   60 00:45BD -  -  -  -  
   61 00:45BD -  -  -  -  ; ***************************************************************************************
   62 00:45BD -  -  -  -  ;
   63 00:45BD -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:45BD -  -  -  -  ;
   65 00:45BD -  -  -  -  ; ***************************************************************************************
   66 00:45BD -  -  -  -  
   67 00:45BD -  -  -  -  Evaluate8BitInteger:
   68 00:45BD CD B4 45 -  		call 	EvaluateInteger
   69 00:45C0 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:45C1 7C -  -  -  		ld 		a,h
   71 00:45C2 B5 -  -  -  		or 		l
   72 00:45C3 D9 -  -  -  		exx 	
   73 00:45C4 B4 -  -  -  		or 		h
   74 00:45C5 C2 27 44 -  		jp 		nz,BadValue
   75 00:45C8 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:45C9 C9 -  -  -  		ret
   77 00:45CA -  -  -  -  		
   78 00:45CA -  -  -  -  ; ***************************************************************************************
   79 00:45CA -  -  -  -  ;
   80 00:45CA -  -  -  -  ; 									Evaluate a string
   81 00:45CA -  -  -  -  ;
   82 00:45CA -  -  -  -  ; ***************************************************************************************
   83 00:45CA -  -  -  -  
   84 00:45CA -  -  -  -  EvaluateString:
   85 00:45CA CD AE 45 -  		call 	EvaluateValue
   86 00:45CD CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:45CF CA 22 44 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:45D2 C9 -  -  -  		ret
   89 00:45D3 -  -  -  -  
   90 00:45D3 -  -  -  -  ; ***************************************************************************************
   91 00:45D3 -  -  -  -  ;
   92 00:45D3 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:45D3 -  -  -  -  ;
   94 00:45D3 -  -  -  -  ; ***************************************************************************************
   95 00:45D3 -  -  -  -  
   96 00:45D3 -  -  -  -  Return8BitConstant:
   97 00:45D3 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:45D6 6F -  -  -  		ld 		l,a
   99 00:45D7 -  -  -  -  Return16BitConstant:
  100 00:45D7 D9 -  -  -  		exx 								; clear HL'
  101 00:45D8 21 00 00 -  		ld 		hl,0
  102 00:45DB D9 -  -  -  		exx
  103 00:45DC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:45DE C9 -  -  -  		ret
  105 00:45DF -  -  -  -  
  106 00:45DF -  -  -  -  ; ***************************************************************************************
  107 00:45DF -  -  -  -  ;
  108 00:45DF -  -  -  -  ;									Changes and Updates
  109 00:45DF -  -  -  -  ;
  110 00:45DF -  -  -  -  ; ***************************************************************************************
  111 00:45DF -  -  -  -  ;
  112 00:45DF -  -  -  -  ;		Date			Notes
  113 00:45DF -  -  -  -  ;		==== 			=====
  114 00:45DF -  -  -  -  ;
  115 00:45DF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:45DF -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:45DF -  -  -  -  ; ***************************************************************************************
    2 00:45DF -  -  -  -  ; ***************************************************************************************
    3 00:45DF -  -  -  -  ;
    4 00:45DF -  -  -  -  ;		Name : 		reference.asm
    5 00:45DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45DF -  -  -  -  ;		Date : 		1st May 2022
    7 00:45DF -  -  -  -  ;		Reviewed :	No
    8 00:45DF -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:45DF -  -  -  -  ;
   10 00:45DF -  -  -  -  ; ***************************************************************************************
   11 00:45DF -  -  -  -  ; ***************************************************************************************
   12 00:45DF -  -  -  -  
   13 00:45DF -  -  -  -  ; ***************************************************************************************
   14 00:45DF -  -  -  -  ;
   15 00:45DF -  -  -  -  ; 									Dereference HL'HL C
   16 00:45DF -  -  -  -  ;
   17 00:45DF -  -  -  -  ; ***************************************************************************************
   18 00:45DF -  -  -  -  
   19 00:45DF -  -  -  -  Dereference:
   20 00:45DF CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:45E1 C8 -  -  -  		ret 	z
   22 00:45E2 -  -  -  -  
   23 00:45E2 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:45E4 -  -  -  -  		
   25 00:45E4 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:45E6 20 20 -  -  		jr 		nz,_DRInternal
   27 00:45E8 -  -  -  -  
   28 00:45E8 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:45EA 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:45EC -  -  -  -  
   31 00:45EC E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:45ED 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:45F1 D9 -  -  -  		exx
   34 00:45F2 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:45F3 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:45F4 23 -  -  -  		inc  	hl
   37 00:45F5 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:45F9 D9 -  -  -  		exx 								; fix back
   39 00:45FA C9 -  -  -  		ret
   40 00:45FB -  -  -  -  
   41 00:45FB -  -  -  -  _DeRefByte:		
   42 00:45FB 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:45FC 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:45FF 6F -  -  -  		ld	 	l,a
   45 00:4600 D9 -  -  -  		exx
   46 00:4601 21 00 00 -  		ld 		hl,$0000
   47 00:4604 D9 -  -  -  		exx
   48 00:4605 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:4607 C9 -  -  -  		ret
   50 00:4608 -  -  -  -  
   51 00:4608 -  -  -  -  _DRInternal:
   52 00:4608 3E 06 C3 CF 
              43 -  -  -  		ERR_DISABLED
   53 00:460D -  -  -  -  
   54 00:460D -  -  -  -  ; ***************************************************************************************
   55 00:460D -  -  -  -  ;
   56 00:460D -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:460D -  -  -  -  ;
   58 00:460D -  -  -  -  ; ***************************************************************************************
   59 00:460D -  -  -  -  
   60 00:460D -  -  -  -  DRConvertHLHLToAddress:
   61 00:460D -  -  -  -  		#ifdef EZ80
   62 00:460D             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:460D             		exx
   64 00:460D             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:460D             		ld 		hl,$0000 					; zero HL'
   66 00:460D             		exx
   67 00:460D             		ld 		hl,(AConvert) 				; load UHL
   68 00:460D             		#endif
   69 00:460D C9 -  -  -  		ret
   70 00:460E -  -  -  -  
   71 00:460E -  -  -  -  ; ***************************************************************************************
   72 00:460E -  -  -  -  ;
   73 00:460E -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:460E -  -  -  -  ;
   75 00:460E -  -  -  -  ; ***************************************************************************************
   76 00:460E -  -  -  -  
   77 00:460E -  -  -  -  DRConvertAddressToHLHL:
   78 00:460E -  -  -  -  		#ifdef EZ80
   79 00:460E             		ld 		(AConvert),hl
   80 00:460E             		ld 		hl,$0000
   81 00:460E             		ld 		(AConvert+3),hl
   82 00:460E             		exx
   83 00:460E             		ld 		hl,(AConvert+2)
   84 00:460E             		exx
   85 00:460E             		xor 	a
   86 00:460E             		ld 		(AConvert+2),a
   87 00:460E             		ld 		hl,(AConvert)
   88 00:460E             		#endif
   89 00:460E C9 -  -  -  		ret
   90 00:460F -  -  -  -  
   91 00:460F -  -  -  -  ; ***************************************************************************************
   92 00:460F -  -  -  -  ;
   93 00:460F -  -  -  -  ;									Changes and Updates
   94 00:460F -  -  -  -  ;
   95 00:460F -  -  -  -  ; ***************************************************************************************
   96 00:460F -  -  -  -  ;
   97 00:460F -  -  -  -  ;		Date			Notes
   98 00:460F -  -  -  -  ;		==== 			=====
   99 00:460F -  -  -  -  ;
  100 00:460F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:460F -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:460F -  -  -  -  ; ***************************************************************************************
    2 00:460F -  -  -  -  ; ***************************************************************************************
    3 00:460F -  -  -  -  ;
    4 00:460F -  -  -  -  ;		Name : 		term.asm
    5 00:460F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:460F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:460F -  -  -  -  ;		Reviewed :	No
    8 00:460F -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:460F -  -  -  -  ;
   10 00:460F -  -  -  -  ; ***************************************************************************************
   11 00:460F -  -  -  -  ; ***************************************************************************************
   12 00:460F -  -  -  -  
   13 00:460F -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:460F             		add_hlhl_16
   15 00:460F             		exx
   16 00:460F             		adc_hlhl_16
   17 00:460F             		exx
   18 00:460F             #endmacro
   19 00:460F -  -  -  -  
   20 00:460F -  -  -  -  ; ***************************************************************************************
   21 00:460F -  -  -  -  ;
   22 00:460F -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:460F -  -  -  -  ;
   24 00:460F -  -  -  -  ; ***************************************************************************************
   25 00:460F -  -  -  -  ;
   26 00:460F -  -  -  -  ; 		Terms can be:
   27 00:460F -  -  -  -  ;
   28 00:460F -  -  -  -  ;			<integer> 			42 						not negative
   29 00:460F -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:460F -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:460F -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:460F -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:460F -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:460F -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:460F -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:460F -  -  -  -  ; 														reference of some sort.
   37 00:460F -  -  -  -  ;
   38 00:460F -  -  -  -  ; ***************************************************************************************
   39 00:460F -  -  -  -  
   40 00:460F -  -  -  -  EvaluateTerm:		
   41 00:460F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4611 D9 -  -  -  		exx
   43 00:4612 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4615 D9 -  -  -  		exx
   45 00:4616 21 00 00 -  		ld 		hl,$0000		
   46 00:4619 -  -  -  -  		;
   47 00:4619 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:461C FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:461E 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:4620 DA BE 46 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4623 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4625 C2 6D 46 -  		jp 		nz,_ETFoundKeyword 
   53 00:4628 -  -  -  -  		;
   54 00:4628 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:4628 -  -  -  -  		;
   56 00:4628 -  -  -  -  _ETIntegerConstant:
   57 00:4628 -  -  -  -  		;
   58 00:4628 -  -  -  -  _ETIntegerLoop:		
   59 00:4628 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:462B E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:462D B5 -  -  -  		or 		l 							; or into L
   62 00:462E 6F -  -  -  		ld 		l,a
   63 00:462F DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4631 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:4634 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:4636 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:4638 D8 -  -  -  		ret 	c
   68 00:4639 -  -  -  -  
   69 00:4639 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:463E 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4643 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4648 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:464D 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4652 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:4657 -  -  -  -  
   76 00:4657 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4659 -  -  -  -  		;
   78 00:4659 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4659 -  -  -  -  		;
   80 00:4659 -  -  -  -  _ETStringMarker:		
   81 00:4659 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:465B DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:465D DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:465F E1 -  -  -  		pop 	hl
   85 00:4660 11 00 00 -  		ld 		de,$0000
   86 00:4663 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:4666 DD 19 -  -  		add 	ix,de
   88 00:4668 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:466A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:466C C9 -  -  -  		ret
   91 00:466D -  -  -  -  		;
   92 00:466D -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:466D -  -  -  -  		;
   94 00:466D -  -  -  -  _ETFoundKeyword:
   95 00:466D DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:466F FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4671 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4673 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:4675 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:4677 -  -  -  -  		;
  101 00:4677 -  -  -  -  		;		Unary group 0
  102 00:4677 -  -  -  -  		;
  103 00:4677 E6 7F 21 00 
              00 6F 29 11 
              46 4F 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:4689 C3 60 40 -  		jp 		JumpCode 					; and go there.
  105 00:468C -  -  -  -  
  106 00:468C -  -  -  -  _ETNotUnaryFunction0:	
  107 00:468C FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:468E 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4690 -  -  -  -  		;
  110 00:4690 -  -  -  -  		; 		- term
  111 00:4690 -  -  -  -  		;
  112 00:4690 CD 96 45 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4693 CD 36 45 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:4696 C9 -  -  -  		ret
  115 00:4697 -  -  -  -  		;
  116 00:4697 -  -  -  -  		;		! ? indirection check
  117 00:4697 -  -  -  -  		;
  118 00:4697 -  -  -  -  _ETCheckIndirection:	
  119 00:4697 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:4699 28 05 -  -  		jr 		z,_ETIndirection
  121 00:469B FE 83 -  -  		cp 		KWD_PLING
  122 00:469D C2 2C 44 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:46A0 -  -  -  -  		;
  124 00:46A0 -  -  -  -  		; 		! ? indirection
  125 00:46A0 -  -  -  -  		;
  126 00:46A0 -  -  -  -  _ETIndirection:
  127 00:46A0 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:46A1 CD 0F 46 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:46A4 CD DF 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:46A7 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:46A9 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:46AB CD 0D 46 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:46AE F1 -  -  -  		pop 	af 							; get type back
  134 00:46AF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:46B1 CB F9 -  -  		set 	CIsReference,c
  136 00:46B3 FE 83 -  -  		cp 		KWD_PLING
  137 00:46B5 C8 -  -  -  		ret 	z
  138 00:46B6 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:46B8 C9 -  -  -  		ret
  140 00:46B9 -  -  -  -  _ETStringIndirect:
  141 00:46B9 3E 02 C3 CF 
              43 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:46BE -  -  -  -  		;
  143 00:46BE -  -  -  -  		; 		Found an identifier.
  144 00:46BE -  -  -  -  		;
  145 00:46BE -  -  -  -  _ETVariable:
  146 00:46BE CD 1E 4C -  		call 	FindVariable 				; find the variable.
  147 00:46C1 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:46C2 3E 1A C3 CF 
              43 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:46C7 -  -  -  -  		
  150 00:46C7 -  -  -  -  ; ***************************************************************************************
  151 00:46C7 -  -  -  -  ;
  152 00:46C7 -  -  -  -  ;									Changes and Updates
  153 00:46C7 -  -  -  -  ;
  154 00:46C7 -  -  -  -  ; ***************************************************************************************
  155 00:46C7 -  -  -  -  ;
  156 00:46C7 -  -  -  -  ;		Date			Notes
  157 00:46C7 -  -  -  -  ;		==== 			=====
  158 00:46C7 -  -  -  -  ;
  159 00:46C7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:46C7 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:46C7 -  -  -  -  ; ***************************************************************************************
    2 00:46C7 -  -  -  -  ; ***************************************************************************************
    3 00:46C7 -  -  -  -  ;
    4 00:46C7 -  -  -  -  ;		Name : 		abs.asm
    5 00:46C7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C7 -  -  -  -  ;		Reviewed :	No
    8 00:46C7 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:46C7 -  -  -  -  ;
   10 00:46C7 -  -  -  -  ; ***************************************************************************************
   11 00:46C7 -  -  -  -  ; ***************************************************************************************
   12 00:46C7 -  -  -  -  
   13 00:46C7 -  -  -  -  ; ***************************************************************************************
   14 00:46C7 -  -  -  -  ;
   15 00:46C7 -  -  -  -  ;								abs( unary function
   16 00:46C7 -  -  -  -  ;
   17 00:46C7 -  -  -  -  ; ***************************************************************************************
   18 00:46C7 -  -  -  -  
   19 00:46C7 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:46C7 CD 96 45 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:46CA D9 -  -  -  		exx 								; test MSB
   22 00:46CB CB 7C -  -  		bit 	7,h
   23 00:46CD D9 -  -  -  		exx
   24 00:46CE C4 36 45 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:46D1 C9 -  -  -  		ret
   26 00:46D2 -  -  -  -  
   27 00:46D2 -  -  -  -  ; ***************************************************************************************
   28 00:46D2 -  -  -  -  ;
   29 00:46D2 -  -  -  -  ;									Changes and Updates
   30 00:46D2 -  -  -  -  ;
   31 00:46D2 -  -  -  -  ; ***************************************************************************************
   32 00:46D2 -  -  -  -  ;
   33 00:46D2 -  -  -  -  ;		Date			Notes
   34 00:46D2 -  -  -  -  ;		==== 			=====
   35 00:46D2 -  -  -  -  ;
   36 00:46D2 -  -  -  -  ; ***************************************************************************************
   37 00:46D2 -  -  -  -  		
Listing for file "_build.asm"
   39 00:46D2 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:46D2 -  -  -  -  ; ***************************************************************************************
    2 00:46D2 -  -  -  -  ; ***************************************************************************************
    3 00:46D2 -  -  -  -  ;
    4 00:46D2 -  -  -  -  ;		Name : 		asc.asm
    5 00:46D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D2 -  -  -  -  ;		Reviewed :	No
    8 00:46D2 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:46D2 -  -  -  -  ;
   10 00:46D2 -  -  -  -  ; ***************************************************************************************
   11 00:46D2 -  -  -  -  ; ***************************************************************************************
   12 00:46D2 -  -  -  -  
   13 00:46D2 -  -  -  -  ; ***************************************************************************************
   14 00:46D2 -  -  -  -  ;
   15 00:46D2 -  -  -  -  ;								Asc unary function
   16 00:46D2 -  -  -  -  ;
   17 00:46D2 -  -  -  -  ; ***************************************************************************************
   18 00:46D2 -  -  -  -  
   19 00:46D2 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:46D2 CD A2 45 -  		call	EvaluateStringTerm			; Get string
   21 00:46D5 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:46D6 C3 D3 45 -  		jp 		Return8BitConstant
   23 00:46D9 -  -  -  -  
   24 00:46D9 -  -  -  -  ; ***************************************************************************************
   25 00:46D9 -  -  -  -  ;
   26 00:46D9 -  -  -  -  ;									Changes and Updates
   27 00:46D9 -  -  -  -  ;
   28 00:46D9 -  -  -  -  ; ***************************************************************************************
   29 00:46D9 -  -  -  -  ;
   30 00:46D9 -  -  -  -  ;		Date			Notes
   31 00:46D9 -  -  -  -  ;		==== 			=====
   32 00:46D9 -  -  -  -  ;
   33 00:46D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:46D9 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:46D9 -  -  -  -  ; ***************************************************************************************
    2 00:46D9 -  -  -  -  ; ***************************************************************************************
    3 00:46D9 -  -  -  -  ;
    4 00:46D9 -  -  -  -  ;		Name : 		chr.asm
    5 00:46D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D9 -  -  -  -  ;		Reviewed :	No
    8 00:46D9 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:46D9 -  -  -  -  ;
   10 00:46D9 -  -  -  -  ; ***************************************************************************************
   11 00:46D9 -  -  -  -  ; ***************************************************************************************
   12 00:46D9 -  -  -  -  
   13 00:46D9 -  -  -  -  ; ***************************************************************************************
   14 00:46D9 -  -  -  -  ;
   15 00:46D9 -  -  -  -  ;								Chr$() unary function
   16 00:46D9 -  -  -  -  ;
   17 00:46D9 -  -  -  -  ; ***************************************************************************************
   18 00:46D9 -  -  -  -  
   19 00:46D9 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:46D9 CD AA 43 -  		call 	CheckDollar
   21 00:46DC CD 96 45 -  		call 	EvaluateIntegerTerm
   22 00:46DF 7D -  -  -  		ld 		a,l 						; get character
   23 00:46E0 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:46E2 21 A1 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:46E5 36 0D -  -  		ld 		(hl),13
   26 00:46E7 2B -  -  -  		dec 	hl
   27 00:46E8 77 -  -  -  		ld 		(hl),a
   28 00:46E9 C9 -  -  -  		ret
   29 00:46EA -  -  -  -  
   30 00:46EA -  -  -  -  ; ***************************************************************************************
   31 00:46EA -  -  -  -  ;
   32 00:46EA -  -  -  -  ;									Changes and Updates
   33 00:46EA -  -  -  -  ;
   34 00:46EA -  -  -  -  ; ***************************************************************************************
   35 00:46EA -  -  -  -  ;
   36 00:46EA -  -  -  -  ;		Date			Notes
   37 00:46EA -  -  -  -  ;		==== 			=====
   38 00:46EA -  -  -  -  ;
   39 00:46EA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:46EA -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:46EA -  -  -  -  ; ***************************************************************************************
    2 00:46EA -  -  -  -  ; ***************************************************************************************
    3 00:46EA -  -  -  -  ;
    4 00:46EA -  -  -  -  ;		Name : 		len.asm
    5 00:46EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46EA -  -  -  -  ;		Reviewed :	None
    8 00:46EA -  -  -  -  ;		Purpose :	String Length
    9 00:46EA -  -  -  -  ;
   10 00:46EA -  -  -  -  ; ***************************************************************************************
   11 00:46EA -  -  -  -  ; ***************************************************************************************
   12 00:46EA -  -  -  -  
   13 00:46EA -  -  -  -  ; ***************************************************************************************
   14 00:46EA -  -  -  -  ;
   15 00:46EA -  -  -  -  ;								Len unary function
   16 00:46EA -  -  -  -  ;
   17 00:46EA -  -  -  -  ; ***************************************************************************************
   18 00:46EA -  -  -  -  
   19 00:46EA -  -  -  -  Unary_Len:	;; [len]
   20 00:46EA CD A2 45 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:46ED EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:46EE CD AD 44 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:46F1 -  -  -  -  _ULCount:
   24 00:46F1 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:46F2 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:46F4 D8 -  -  -  		ret 	c
   27 00:46F5 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:46F6 13 -  -  -  		inc 	de
   29 00:46F7 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:46F9 -  -  -  -  
   31 00:46F9 -  -  -  -  ; ***************************************************************************************
   32 00:46F9 -  -  -  -  ;
   33 00:46F9 -  -  -  -  ;									Changes and Updates
   34 00:46F9 -  -  -  -  ;
   35 00:46F9 -  -  -  -  ; ***************************************************************************************
   36 00:46F9 -  -  -  -  ;
   37 00:46F9 -  -  -  -  ;		Date			Notes
   38 00:46F9 -  -  -  -  ;		==== 			=====
   39 00:46F9 -  -  -  -  ;
   40 00:46F9 -  -  -  -  ; ***************************************************************************************
   41 00:46F9 -  -  -  -  		
Listing for file "_build.asm"
   42 00:46F9 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:46F9 -  -  -  -  ; ***************************************************************************************
    2 00:46F9 -  -  -  -  ; ***************************************************************************************
    3 00:46F9 -  -  -  -  ;
    4 00:46F9 -  -  -  -  ;		Name : 		makestring.asm
    5 00:46F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46F9 -  -  -  -  ;		Reviewed :	No
    8 00:46F9 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:46F9 -  -  -  -  ;
   10 00:46F9 -  -  -  -  ; ***************************************************************************************
   11 00:46F9 -  -  -  -  ; ***************************************************************************************
   12 00:46F9 -  -  -  -  
   13 00:46F9 -  -  -  -  ; ***************************************************************************************
   14 00:46F9 -  -  -  -  ;
   15 00:46F9 -  -  -  -  ;								Str$() unary function
   16 00:46F9 -  -  -  -  ;
   17 00:46F9 -  -  -  -  ; ***************************************************************************************
   18 00:46F9 -  -  -  -  
   19 00:46F9 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:46F9 CD 96 45 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:46FC CD 0D 46 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:46FF 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4701 C9 -  -  -  		ret
   24 00:4702 -  -  -  -  
   25 00:4702 -  -  -  -  ; ***************************************************************************************
   26 00:4702 -  -  -  -  ;
   27 00:4702 -  -  -  -  ;									Changes and Updates
   28 00:4702 -  -  -  -  ;
   29 00:4702 -  -  -  -  ; ***************************************************************************************
   30 00:4702 -  -  -  -  ;
   31 00:4702 -  -  -  -  ;		Date			Notes
   32 00:4702 -  -  -  -  ;		==== 			=====
   33 00:4702 -  -  -  -  ;
   34 00:4702 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:4702 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4702 -  -  -  -  ; ***************************************************************************************
    2 00:4702 -  -  -  -  ; ***************************************************************************************
    3 00:4702 -  -  -  -  ;
    4 00:4702 -  -  -  -  ;		Name : 		not.asm
    5 00:4702 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4702 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4702 -  -  -  -  ;		Reviewed :	No
    8 00:4702 -  -  -  -  ;		Purpose :	Logical not
    9 00:4702 -  -  -  -  ;
   10 00:4702 -  -  -  -  ; ***************************************************************************************
   11 00:4702 -  -  -  -  ; ***************************************************************************************
   12 00:4702 -  -  -  -  
   13 00:4702 -  -  -  -  ; ***************************************************************************************
   14 00:4702 -  -  -  -  ;
   15 00:4702 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4702 -  -  -  -  ;
   17 00:4702 -  -  -  -  ; ***************************************************************************************
   18 00:4702 -  -  -  -  
   19 00:4702 -  -  -  -  Unary_Not:		;; [not]
   20 00:4702 CD 96 45 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4705 CD 0C 47 -  		call 	__UNSwap 					; not and swap twice.
   22 00:4708 CD 0C 47 -  		call 	__UNSwap		
   23 00:470B C9 -  -  -  		ret
   24 00:470C -  -  -  -  
   25 00:470C -  -  -  -  __UNSwap:
   26 00:470C 7C -  -  -  		ld 		a,h
   27 00:470D 2F -  -  -  		cpl
   28 00:470E 67 -  -  -  		ld 		h,a
   29 00:470F 7D -  -  -  		ld 		a,l
   30 00:4710 2F -  -  -  		cpl 	
   31 00:4711 6F -  -  -  		ld 		l,a
   32 00:4712 D9 -  -  -  		exx
   33 00:4713 C9 -  -  -  		ret
   34 00:4714 -  -  -  -  
   35 00:4714 -  -  -  -  ; ***************************************************************************************
   36 00:4714 -  -  -  -  ;
   37 00:4714 -  -  -  -  ;									Changes and Updates
   38 00:4714 -  -  -  -  ;
   39 00:4714 -  -  -  -  ; ***************************************************************************************
   40 00:4714 -  -  -  -  ;
   41 00:4714 -  -  -  -  ;		Date			Notes
   42 00:4714 -  -  -  -  ;		==== 			=====
   43 00:4714 -  -  -  -  ;
   44 00:4714 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:4714 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4714 -  -  -  -  ; ***************************************************************************************
    2 00:4714 -  -  -  -  ; ***************************************************************************************
    3 00:4714 -  -  -  -  ;
    4 00:4714 -  -  -  -  ;		Name : 		page.asm
    5 00:4714 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4714 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4714 -  -  -  -  ;		Reviewed :	No
    8 00:4714 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4714 -  -  -  -  ;
   10 00:4714 -  -  -  -  ; ***************************************************************************************
   11 00:4714 -  -  -  -  ; ***************************************************************************************
   12 00:4714 -  -  -  -  
   13 00:4714 -  -  -  -  ; ***************************************************************************************
   14 00:4714 -  -  -  -  ;
   15 00:4714 -  -  -  -  ;							page unary function (no bracket)
   16 00:4714 -  -  -  -  ;
   17 00:4714 -  -  -  -  ; ***************************************************************************************
   18 00:4714 -  -  -  -  
   19 00:4714 -  -  -  -  Unary_Page:	;; [page]
   20 00:4714 2A 34 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:4717 D9 -  -  -  			exx
   22 00:4718 2A 36 40 -  			ld 		hl,(CodeAddress+2)
   23 00:471B D9 -  -  -  			exx
   24 00:471C 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:471E C9 -  -  -  			ret
   26 00:471F -  -  -  -  
   27 00:471F -  -  -  -  ; ***************************************************************************************
   28 00:471F -  -  -  -  ;
   29 00:471F -  -  -  -  ;									Changes and Updates
   30 00:471F -  -  -  -  ;
   31 00:471F -  -  -  -  ; ***************************************************************************************
   32 00:471F -  -  -  -  ;
   33 00:471F -  -  -  -  ;		Date			Notes
   34 00:471F -  -  -  -  ;		==== 			=====
   35 00:471F -  -  -  -  ;
   36 00:471F -  -  -  -  ; ***************************************************************************************
   37 00:471F -  -  -  -  			
Listing for file "_build.asm"
   45 00:471F -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:471F -  -  -  -  ; ***************************************************************************************
    2 00:471F -  -  -  -  ; ***************************************************************************************
    3 00:471F -  -  -  -  ;
    4 00:471F -  -  -  -  ;		Name : 		random.asm
    5 00:471F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:471F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:471F -  -  -  -  ;		Reviewed :	No
    8 00:471F -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:471F -  -  -  -  ;
   10 00:471F -  -  -  -  ; ***************************************************************************************
   11 00:471F -  -  -  -  ; ***************************************************************************************
   12 00:471F -  -  -  -  
   13 00:471F -  -  -  -  ; ***************************************************************************************
   14 00:471F -  -  -  -  ;
   15 00:471F -  -  -  -  ;								Random unary function
   16 00:471F -  -  -  -  ;
   17 00:471F -  -  -  -  ; ***************************************************************************************
   18 00:471F -  -  -  -  
   19 00:471F -  -  -  -  Unary_Random:	;; [rnd]
   20 00:471F 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:4720 CD 96 45 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4723 D9 -  -  -  		exx 								; is it -ve
   23 00:4724 CB 7C -  -  		bit 	7,h
   24 00:4726 D9 -  -  -  		exx
   25 00:4727 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4729 22 6C 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:472C D9 -  -  -  		exx
   28 00:472D 22 70 40 -  		ld 		(RandomSeed+4),hl
   29 00:4730 D9 -  -  -  		exx
   30 00:4731 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4733 C9 -  -  -  		ret
   32 00:4734 -  -  -  -  _URDontSeed:		
   33 00:4734 -  -  -  -  
   34 00:4734 CD 3D 51 -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:4737 28 19 -  -  		jr 		z,_URFail
   36 00:4739 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:473A D9 -  -  -  		exx
   38 00:473B E5 -  -  -  		push 	hl
   39 00:473C D9 -  -  -  		exx
   40 00:473D -  -  -  -  		;
   41 00:473D CD 61 47 -  		call 	URandomHL 					; get random HL'HL
   42 00:4740 D9 -  -  -  		exx
   43 00:4741 CD 61 47 -  		call 	URandomHL
   44 00:4744 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:4746 D9 -  -  -  		exx
   46 00:4747 -  -  -  -  		;
   47 00:4747 D9 -  -  -  		exx 								; restore range.
   48 00:4748 D1 -  -  -  		pop 	de
   49 00:4749 D9 -  -  -  		exx
   50 00:474A D1 -  -  -  		pop 	de
   51 00:474B -  -  -  -  		;
   52 00:474B CD E9 4F -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:474E 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:474F 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4751 C9 -  -  -  		ret
   56 00:4752 -  -  -  -  _URFail:
   57 00:4752 3E 03 C3 CF 
              43 -  -  -  		ERR_BADVALUE
   58 00:4757 -  -  -  -  ; ***************************************************************************************
   59 00:4757 -  -  -  -  ;
   60 00:4757 -  -  -  -  ; 									Push RNG off zero
   61 00:4757 -  -  -  -  ;
   62 00:4757 -  -  -  -  ; ***************************************************************************************
   63 00:4757 -  -  -  -  
   64 00:4757 -  -  -  -  UnaryRandomInitialise:
   65 00:4757 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4759 -  -  -  -  _URILoop:
   67 00:4759 C5 -  -  -  		push 	bc
   68 00:475A CD 61 47 -  		call 	URandomHL
   69 00:475D C1 -  -  -  		pop 	bc
   70 00:475E 10 F9 -  -  		djnz 	_URILoop
   71 00:4760 C9 -  -  -  		ret
   72 00:4761 -  -  -  -  
   73 00:4761 -  -  -  -  ; ***************************************************************************************
   74 00:4761 -  -  -  -  ;
   75 00:4761 -  -  -  -  ;							16 bit random number generator
   76 00:4761 -  -  -  -  ;
   77 00:4761 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4761 -  -  -  -  ;		Actual author unspecified.
   79 00:4761 -  -  -  -  ;
   80 00:4761 -  -  -  -  ; ***************************************************************************************
   81 00:4761 -  -  -  -  
   82 00:4761 -  -  -  -  URandomHL:
   83 00:4761 2A 6C 40 -  	    ld 		hl,(RandomSeed)
   84 00:4764 ED 5B 70 40 	    ld 		de,(RandomSeed+4)
   85 00:4768 44 -  -  -  	    ld 		b,h
   86 00:4769 4D -  -  -  	    ld 		c,l
   87 00:476A 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:476F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:4774 2C -  -  -  	    inc 	l
   90 00:4775 09 -  -  -  	    add 	hl,bc
   91 00:4776 22 6C 40 -  	    ld 		(RandomSeed),hl
   92 00:4779 2A 70 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:477C ED 5A -  -  	    adc 	hl,de
   94 00:477E 22 70 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4781 EB -  -  -  	    ex 		de,hl
   96 00:4782 2A 74 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:4785 ED 4B 78 40 	    ld 		bc,(RandomSeed+12)
   98 00:4789 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:478E ED 43 78 40 	    ld 		(RandomSeed+12),bc
  100 00:4792 9F -  -  -  	    sbc 	a,a
  101 00:4793 E6 C5 -  -  	    and 	%11000101
  102 00:4795 AD -  -  -  	    xor 	l
  103 00:4796 6F -  -  -  	    ld 		l,a
  104 00:4797 22 74 40 -  	    ld 		(RandomSeed+8),hl
  105 00:479A EB -  -  -  	    ex 		de,hl
  106 00:479B 09 -  -  -  	    add 	hl,bc
  107 00:479C C9 -  -  -  	    ret		
  108 00:479D -  -  -  -  
  109 00:479D -  -  -  -  ; ***************************************************************************************
  110 00:479D -  -  -  -  ;
  111 00:479D -  -  -  -  ;									Changes and Updates
  112 00:479D -  -  -  -  ;
  113 00:479D -  -  -  -  ; ***************************************************************************************
  114 00:479D -  -  -  -  ;
  115 00:479D -  -  -  -  ;		Date			Notes
  116 00:479D -  -  -  -  ;		==== 			=====
  117 00:479D -  -  -  -  ;
  118 00:479D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:479D -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:479D -  -  -  -  ; ***************************************************************************************
    2 00:479D -  -  -  -  ; ***************************************************************************************
    3 00:479D -  -  -  -  ;
    4 00:479D -  -  -  -  ;		Name : 		sgn.asm
    5 00:479D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:479D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:479D -  -  -  -  ;		Reviewed :	No
    8 00:479D -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:479D -  -  -  -  ;
   10 00:479D -  -  -  -  ; ***************************************************************************************
   11 00:479D -  -  -  -  ; ***************************************************************************************
   12 00:479D -  -  -  -  
   13 00:479D -  -  -  -  ; ***************************************************************************************
   14 00:479D -  -  -  -  ;
   15 00:479D -  -  -  -  ;								sgn unary function
   16 00:479D -  -  -  -  ;
   17 00:479D -  -  -  -  ; ***************************************************************************************
   18 00:479D -  -  -  -  
   19 00:479D -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:479D CD 96 45 -  		call	EvaluateIntegerTerm 		; get value
   21 00:47A0 CD 3D 51 -  		call 	Int32Zero 					; integer sgn() code
   22 00:47A3 CA AD 44 -  		jp 		z,UnaryInt32False
   23 00:47A6 D9 -  -  -  		exx
   24 00:47A7 CB 7C -  -  		bit 	7,h
   25 00:47A9 D9 -  -  -  		exx
   26 00:47AA C2 A9 44 -  		jp 		nz,UnaryInt32True
   27 00:47AD 3E 01 -  -  		ld 		a,1
   28 00:47AF C3 D3 45 -  		jp 		Return8BitConstant
   29 00:47B2 -  -  -  -  
   30 00:47B2 -  -  -  -  ; ***************************************************************************************
   31 00:47B2 -  -  -  -  ;
   32 00:47B2 -  -  -  -  ;									Changes and Updates
   33 00:47B2 -  -  -  -  ;
   34 00:47B2 -  -  -  -  ; ***************************************************************************************
   35 00:47B2 -  -  -  -  ;
   36 00:47B2 -  -  -  -  ;		Date			Notes
   37 00:47B2 -  -  -  -  ;		==== 			=====
   38 00:47B2 -  -  -  -  ;
   39 00:47B2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:47B2 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:47B2 -  -  -  -  ; ***************************************************************************************
    2 00:47B2 -  -  -  -  ; ***************************************************************************************
    3 00:47B2 -  -  -  -  ;
    4 00:47B2 -  -  -  -  ;		Name : 		simple.asm
    5 00:47B2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47B2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47B2 -  -  -  -  ;		Reviewed :	No
    8 00:47B2 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:47B2 -  -  -  -  ;
   10 00:47B2 -  -  -  -  ; ***************************************************************************************
   11 00:47B2 -  -  -  -  ; ***************************************************************************************
   12 00:47B2 -  -  -  -  
   13 00:47B2 -  -  -  -  ; ***************************************************************************************
   14 00:47B2 -  -  -  -  ;
   15 00:47B2 -  -  -  -  ;								( unary function (think about it)
   16 00:47B2 -  -  -  -  ;
   17 00:47B2 -  -  -  -  ; ***************************************************************************************
   18 00:47B2 -  -  -  -  
   19 00:47B2 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:47B2 CD 44 45 -  		call 	EvaluateAtPrecedence0
   21 00:47B5 C3 9D 43 -  		jp  	CheckRightBracket
   22 00:47B8 -  -  -  -  
   23 00:47B8 -  -  -  -  ; ***************************************************************************************
   24 00:47B8 -  -  -  -  ;
   25 00:47B8 -  -  -  -  ;									Handle &x
   26 00:47B8 -  -  -  -  ;
   27 00:47B8 -  -  -  -  ; ***************************************************************************************
   28 00:47B8 -  -  -  -  
   29 00:47B8 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:47B8 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:47BB E6 C0 -  -  		and 		$C0
   32 00:47BD FE 40 -  -  		cp 			$40
   33 00:47BF C2 2C 44 -  		jp 			nz,SyntaxError 			; no then error
   34 00:47C2 C3 0F 46 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:47C5 -  -  -  -  
   36 00:47C5 -  -  -  -  ; ***************************************************************************************
   37 00:47C5 -  -  -  -  ;
   38 00:47C5 -  -  -  -  ;									Changes and Updates
   39 00:47C5 -  -  -  -  ;
   40 00:47C5 -  -  -  -  ; ***************************************************************************************
   41 00:47C5 -  -  -  -  ;
   42 00:47C5 -  -  -  -  ;		Date			Notes
   43 00:47C5 -  -  -  -  ;		==== 			=====
   44 00:47C5 -  -  -  -  ;
   45 00:47C5 -  -  -  -  ; ***************************************************************************************
   46 00:47C5 -  -  -  -  		
Listing for file "_build.asm"
   48 00:47C5 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:47C5 -  -  -  -  ; ***************************************************************************************
    2 00:47C5 -  -  -  -  ; ***************************************************************************************
    3 00:47C5 -  -  -  -  ;
    4 00:47C5 -  -  -  -  ;		Name : 		str.asm
    5 00:47C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47C5 -  -  -  -  ;		Reviewed :	No
    8 00:47C5 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:47C5 -  -  -  -  ;
   10 00:47C5 -  -  -  -  ; ***************************************************************************************
   11 00:47C5 -  -  -  -  ; ***************************************************************************************
   12 00:47C5 -  -  -  -  
   13 00:47C5 -  -  -  -  ; ***************************************************************************************
   14 00:47C5 -  -  -  -  ;
   15 00:47C5 -  -  -  -  ;								Str$() unary function
   16 00:47C5 -  -  -  -  ;
   17 00:47C5 -  -  -  -  ; ***************************************************************************************
   18 00:47C5 -  -  -  -  
   19 00:47C5 -  -  -  -  Unary_Str:	;; [str]
   20 00:47C5 CD AA 43 -  		call 	CheckDollar
   21 00:47C8 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:47CB EE AC -  -  		xor		KWD_TILDE
   23 00:47CD F5 -  -  -  		push 	af
   24 00:47CE 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:47D0 DD 23 -  -  		inc 	ix
   26 00:47D2 -  -  -  -  _USNotHex:		
   27 00:47D2 CD 96 45 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:47D5 01 90 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:47D8 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:47D9 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:47DB 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:47DD 3E 10 -  -  		ld 		a,16
   33 00:47DF -  -  -  -  _USNotHex2:		
   34 00:47DF CD 7E 51 -  		call 	Int32ToString 				
   35 00:47E2 21 90 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:47E5 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:47E7 C9 -  -  -  		ret
   38 00:47E8 -  -  -  -  
   39 00:47E8 -  -  -  -  ; ***************************************************************************************
   40 00:47E8 -  -  -  -  ;
   41 00:47E8 -  -  -  -  ;									Changes and Updates
   42 00:47E8 -  -  -  -  ;
   43 00:47E8 -  -  -  -  ; ***************************************************************************************
   44 00:47E8 -  -  -  -  ;
   45 00:47E8 -  -  -  -  ;		Date			Notes
   46 00:47E8 -  -  -  -  ;		==== 			=====
   47 00:47E8 -  -  -  -  ;
   48 00:47E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:47E8 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:47E8 -  -  -  -  ; ***************************************************************************************
    2 00:47E8 -  -  -  -  ; ***************************************************************************************
    3 00:47E8 -  -  -  -  ;
    4 00:47E8 -  -  -  -  ;		Name : 		time.asm
    5 00:47E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47E8 -  -  -  -  ;		Reviewed :	No
    8 00:47E8 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:47E8 -  -  -  -  ;
   10 00:47E8 -  -  -  -  ; ***************************************************************************************
   11 00:47E8 -  -  -  -  ; ***************************************************************************************
   12 00:47E8 -  -  -  -  
   13 00:47E8 -  -  -  -  ; ***************************************************************************************
   14 00:47E8 -  -  -  -  ;
   15 00:47E8 -  -  -  -  ;							Get system time in ms
   16 00:47E8 -  -  -  -  ;
   17 00:47E8 -  -  -  -  ; ***************************************************************************************
   18 00:47E8 -  -  -  -  
   19 00:47E8 -  -  -  -  Unary_Time:	;; [time]
   20 00:47E8 CD F5 51 -  			call 	SYSGetTimer
   21 00:47EB 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:47ED C9 -  -  -  			ret
   23 00:47EE -  -  -  -  
   24 00:47EE -  -  -  -  ; ***************************************************************************************
   25 00:47EE -  -  -  -  ;
   26 00:47EE -  -  -  -  ;									Changes and Updates
   27 00:47EE -  -  -  -  ;
   28 00:47EE -  -  -  -  ; ***************************************************************************************
   29 00:47EE -  -  -  -  ;
   30 00:47EE -  -  -  -  ;		Date			Notes
   31 00:47EE -  -  -  -  ;		==== 			=====
   32 00:47EE -  -  -  -  ;
   33 00:47EE -  -  -  -  ; ***************************************************************************************
   34 00:47EE -  -  -  -  			
Listing for file "_build.asm"
   50 00:47EE -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:47EE -  -  -  -  ; ***************************************************************************************
    2 00:47EE -  -  -  -  ; ***************************************************************************************
    3 00:47EE -  -  -  -  ;
    4 00:47EE -  -  -  -  ;		Name : 		top.asm
    5 00:47EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47EE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47EE -  -  -  -  ;		Reviewed :	No
    8 00:47EE -  -  -  -  ;		Purpose :	Various constants.
    9 00:47EE -  -  -  -  ;
   10 00:47EE -  -  -  -  ; ***************************************************************************************
   11 00:47EE -  -  -  -  ; ***************************************************************************************
   12 00:47EE -  -  -  -  
   13 00:47EE -  -  -  -  ; ***************************************************************************************
   14 00:47EE -  -  -  -  ;
   15 00:47EE -  -  -  -  ;							page unary function (no bracket)
   16 00:47EE -  -  -  -  ;
   17 00:47EE -  -  -  -  ; ***************************************************************************************
   18 00:47EE -  -  -  -  
   19 00:47EE -  -  -  -  Unary_Top:	;; [top]
   20 00:47EE 2A 50 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:47F1 D9 -  -  -  			exx
   22 00:47F2 2A 52 40 -  			ld 		hl,(TopMemory+2)
   23 00:47F5 D9 -  -  -  			exx
   24 00:47F6 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:47F8 C9 -  -  -  			ret
   26 00:47F9 -  -  -  -  
   27 00:47F9 -  -  -  -  ; ***************************************************************************************
   28 00:47F9 -  -  -  -  ;
   29 00:47F9 -  -  -  -  ;									Changes and Updates
   30 00:47F9 -  -  -  -  ;
   31 00:47F9 -  -  -  -  ; ***************************************************************************************
   32 00:47F9 -  -  -  -  ;
   33 00:47F9 -  -  -  -  ;		Date			Notes
   34 00:47F9 -  -  -  -  ;		==== 			=====
   35 00:47F9 -  -  -  -  ;
   36 00:47F9 -  -  -  -  ; ***************************************************************************************
   37 00:47F9 -  -  -  -  			
Listing for file "_build.asm"
   51 00:47F9 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:47F9 -  -  -  -  ; ***************************************************************************************
    2 00:47F9 -  -  -  -  ; ***************************************************************************************
    3 00:47F9 -  -  -  -  ;
    4 00:47F9 -  -  -  -  ;		Name : 		val.asm
    5 00:47F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47F9 -  -  -  -  ;		Reviewed :	No
    8 00:47F9 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:47F9 -  -  -  -  ;
   10 00:47F9 -  -  -  -  ; ***************************************************************************************
   11 00:47F9 -  -  -  -  ; ***************************************************************************************
   12 00:47F9 -  -  -  -  
   13 00:47F9 -  -  -  -  ; ***************************************************************************************
   14 00:47F9 -  -  -  -  ;
   15 00:47F9 -  -  -  -  ;								val( unary function
   16 00:47F9 -  -  -  -  ;
   17 00:47F9 -  -  -  -  ; ***************************************************************************************
   18 00:47F9 -  -  -  -  
   19 00:47F9 -  -  -  -  Unary_Val:	;; [val]
   20 00:47F9 CD A2 45 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:47FC E5 -  -  -  		push 	hl 							; copy to BC
   22 00:47FD C1 -  -  -  		pop 	bc
   23 00:47FE 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4800 CD 74 50 -  		call 	Int32FromString 			; get the integer part.
   25 00:4803 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4805 C8 -  -  -  		ret		z 							; okay
   27 00:4806 3E 03 C3 CF 
              43 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:480B -  -  -  -  
   29 00:480B -  -  -  -  ; ***************************************************************************************
   30 00:480B -  -  -  -  ;
   31 00:480B -  -  -  -  ;									Changes and Updates
   32 00:480B -  -  -  -  ;
   33 00:480B -  -  -  -  ; ***************************************************************************************
   34 00:480B -  -  -  -  ;
   35 00:480B -  -  -  -  ;		Date			Notes
   36 00:480B -  -  -  -  ;		==== 			=====
   37 00:480B -  -  -  -  ;
   38 00:480B -  -  -  -  ; ***************************************************************************************
   39 00:480B -  -  -  -  		
Listing for file "_build.asm"
   52 00:480B -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 00:480B -  -  -  -  ; ***************************************************************************************
    2 00:480B -  -  -  -  ; ***************************************************************************************
    3 00:480B -  -  -  -  ;
    4 00:480B -  -  -  -  ;		Name : 		locals.asm
    5 00:480B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:480B -  -  -  -  ;		Date : 		8th June 2022
    7 00:480B -  -  -  -  ;		Reviewed :	No
    8 00:480B -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 00:480B -  -  -  -  ;
   10 00:480B -  -  -  -  ; ***************************************************************************************
   11 00:480B -  -  -  -  ; ***************************************************************************************
   12 00:480B -  -  -  -  
   13 00:480B -  -  -  -  ; ***************************************************************************************
   14 00:480B -  -  -  -  ;
   15 00:480B -  -  -  -  ;									Locals command
   16 00:480B -  -  -  -  ;
   17 00:480B -  -  -  -  ; ***************************************************************************************
   18 00:480B -  -  -  -  
   19 00:480B -  -  -  -  Command_LOCAL:	;; [local]
   20 00:480B 21 00 00 -  		ld 		hl,0 						; set HL'HL, the default value, to zero
   21 00:480E D9 -  -  -  		exx
   22 00:480F 21 00 00 -  		ld 		hl,0
   23 00:4812 D9 -  -  -  		exx
   24 00:4813 CD 20 48 -  		call 	LocalCreateVariable 		; create a variable
   25 00:4816 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a comma ?
   26 00:4819 FE A6 -  -  		cp 		KWD_COMMA
   27 00:481B C0 -  -  -  		ret 	nz 							; exit if not
   28 00:481C DD 23 -  -  		inc 	ix 							; skip comma
   29 00:481E 18 EB -  -  		jr 		Command_LOCAL 				; and go try the next one.
   30 00:4820 -  -  -  -  		
   31 00:4820 -  -  -  -  ; ***************************************************************************************
   32 00:4820 -  -  -  -  ;
   33 00:4820 -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   34 00:4820 -  -  -  -  ;						(used for parameters and locals)
   35 00:4820 -  -  -  -  ;
   36 00:4820 -  -  -  -  ; ***************************************************************************************
   37 00:4820 -  -  -  -  
   38 00:4820 -  -  -  -  LocalCreateVariable:
   39 00:4820 E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   40 00:4821 D9 -  -  -  		exx
   41 00:4822 E5 -  -  -  		push 	hl
   42 00:4823 D9 -  -  -  		exx
   43 00:4824 -  -  -  -  
   44 00:4824 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   45 00:4826 32 7C 40 -  		ld 		(AllowAutoCreate),a
   46 00:4829 CD 1E 4C -  		call 	FindVariable 				; locate the variable, address in UHL now.
   47 00:482C E5 -  -  -  		push 	hl 							; save variable address.
   48 00:482D -  -  -  -  
   49 00:482D 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   50 00:482F CD 6C 4B -  		call 	StackOpenFrame
   51 00:4832 -  -  -  -  
   52 00:4832 2A 54 40 -  		ld 		hl,(BasicSP) 				; point to SP+1
   53 00:4835 23 -  -  -  		inc 	hl
   54 00:4836 D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   55 00:4837 D5 -  -  -  		push 	de
   56 00:4838 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   57 00:483E -  -  -  -  		;
   58 00:483E EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   59 00:483F CD 5E 48 -  		call 	_LCVRead32HL 				; read HL current value into HL'HL
   60 00:4842 CD 4E 48 -  		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   61 00:4845 -  -  -  -  		;
   62 00:4845 D1 -  -  -  		pop 	de 							; the address of the variable itself.
   63 00:4846 -  -  -  -  		;
   64 00:4846 D9 -  -  -  		exx 								; restore the value being initialised to.
   65 00:4847 E1 -  -  -  		pop 	hl
   66 00:4848 D9 -  -  -  		exx
   67 00:4849 E1 -  -  -  		pop 	hl
   68 00:484A CD 4E 48 -  		call 	_LCVWrite32HL 				; write HL'HL to DE.
   69 00:484D C9 -  -  -  		ret
   70 00:484E -  -  -  -  
   71 00:484E -  -  -  -  ; ***************************************************************************************
   72 00:484E -  -  -  -  ;
   73 00:484E -  -  -  -  ;									Write HL'HL to DE.
   74 00:484E -  -  -  -  ;
   75 00:484E -  -  -  -  ; ***************************************************************************************
   76 00:484E -  -  -  -  
   77 00:484E -  -  -  -  _LCVWrite32HL:
   78 00:484E 7D -  -  -  		ld 		a,l
   79 00:484F 12 -  -  -  		ld 		(de),a
   80 00:4850 13 -  -  -  		inc 	de
   81 00:4851 7C -  -  -  		ld 		a,h
   82 00:4852 12 -  -  -  		ld 		(de),a
   83 00:4853 13 -  -  -  		inc 	de
   84 00:4854 D5 -  -  -  		push 	de
   85 00:4855 D9 -  -  -  		exx
   86 00:4856 D1 -  -  -  		pop 	de
   87 00:4857 7D -  -  -  		ld 		a,l
   88 00:4858 12 -  -  -  		ld 		(de),a
   89 00:4859 13 -  -  -  		inc 	de
   90 00:485A 7C -  -  -  		ld 		a,h
   91 00:485B 12 -  -  -  		ld 		(de),a
   92 00:485C D9 -  -  -  		exx
   93 00:485D C9 -  -  -  		ret
   94 00:485E -  -  -  -  
   95 00:485E -  -  -  -  ; ***************************************************************************************
   96 00:485E -  -  -  -  ;
   97 00:485E -  -  -  -  ;									Read (HL) to HL'HL
   98 00:485E -  -  -  -  ;
   99 00:485E -  -  -  -  ; ***************************************************************************************
  100 00:485E -  -  -  -  
  101 00:485E -  -  -  -  _LCVRead32HL:
  102 00:485E E5 -  -  -  		push 	hl
  103 00:485F 7E 23 66 6F 		ld_ind_hl
  104 00:4863 D9 -  -  -  		exx
  105 00:4864 E1 -  -  -  		pop 	hl
  106 00:4865 23 -  -  -  		inc 	hl
  107 00:4866 23 -  -  -  		inc 	hl
  108 00:4867 7E 23 66 6F 		ld_ind_hl
  109 00:486B D9 -  -  -  		exx
  110 00:486C C9 -  -  -  		ret
  111 00:486D -  -  -  -  
  112 00:486D -  -  -  -  ; ***************************************************************************************
  113 00:486D -  -  -  -  ;
  114 00:486D -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
  115 00:486D -  -  -  -  ;			or parameter
  116 00:486D -  -  -  -  ;
  117 00:486D -  -  -  -  ; ***************************************************************************************
  118 00:486D -  -  -  -  
  119 00:486D -  -  -  -  PopLocals:
  120 00:486D 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  121 00:486F CD 9C 4B -  		call 	StackCheckFrame
  122 00:4872 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  123 00:4873 -  -  -  -  
  124 00:4873 2A 54 40 -  		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  125 00:4876 23 -  -  -  		inc 	hl
  126 00:4877 E5 -  -  -  		push 	hl 							; save it
  127 00:4878 7E 23 66 6F 		ld_ind_hl 							; read address into HL
  128 00:487C EB -  -  -  		ex 		de,hl 						; target address is in DE.
  129 00:487D -  -  -  -  		;
  130 00:487D E1 -  -  -  		pop 	hl 							; address of old value
  131 00:487E 23 -  -  -  		inc 	hl
  132 00:487F 23 -  -  -  		inc 	hl
  133 00:4880 23 -  -  -  		inc 	hl
  134 00:4881 23 -  -  -  		inc 	hl
  135 00:4882 CD 5E 48 -  		call 	_LCVRead32HL 				; value into HL'HL
  136 00:4885 CD 4E 48 -  		call 	_LCVWrite32HL 				; and write it out again to var address
  137 00:4888 -  -  -  -  
  138 00:4888 CD 8C 4B -  		call 	StackCloseFrame 			; remove the local/parameter
  139 00:488B 18 E0 -  -  		jr 		PopLocals 					; check any more ?
  140 00:488D -  -  -  -  
  141 00:488D -  -  -  -  ; ***************************************************************************************
  142 00:488D -  -  -  -  ;
  143 00:488D -  -  -  -  ;									Changes and Updates
  144 00:488D -  -  -  -  ;
  145 00:488D -  -  -  -  ; ***************************************************************************************
  146 00:488D -  -  -  -  ;
  147 00:488D -  -  -  -  ;		Date			Notes
  148 00:488D -  -  -  -  ;		==== 			=====
  149 00:488D -  -  -  -  ;
  150 00:488D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:488D -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 00:488D -  -  -  -  ; ***************************************************************************************
    2 00:488D -  -  -  -  ; ***************************************************************************************
    3 00:488D -  -  -  -  ;
    4 00:488D -  -  -  -  ;		Name : 		proc.asm
    5 00:488D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:488D -  -  -  -  ;		Date : 		8th June 2022
    7 00:488D -  -  -  -  ;		Reviewed :	No
    8 00:488D -  -  -  -  ;		Purpose :	Proc command
    9 00:488D -  -  -  -  ;
   10 00:488D -  -  -  -  ; ***************************************************************************************
   11 00:488D -  -  -  -  ; ***************************************************************************************
   12 00:488D -  -  -  -  
   13 00:488D -  -  -  -  ; ***************************************************************************************
   14 00:488D -  -  -  -  ;
   15 00:488D -  -  -  -  ;										PROC Command
   16 00:488D -  -  -  -  ;
   17 00:488D -  -  -  -  ; ***************************************************************************************
   18 00:488D -  -  -  -  
   19 00:488D -  -  -  -  Command_PROC: 	;; [proc]
   20 00:488D 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 00:488F CD 6C 4B -  			call 	StackOpenFrame 			; marker position.
   22 00:4892 -  -  -  -  			;
   23 00:4892 DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 00:4895 FE 26 -  -  			cp 		IDENTIFIER_END
   25 00:4897 D2 2C 44 -  			jp 		nc,SyntaxError 			; no , no call possible.
   26 00:489A CD 00 49 -  			call 	SearchProcedure 		; find procedure referenced at IX.
   27 00:489D -  -  -  -  			;
   28 00:489D -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 00:489D -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 00:489D -  -  -  -  			;
   31 00:489D D5 -  -  -  			push 	de 						; save start of line
   32 00:489E DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 00:48A1 FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 00:48A3 CC B6 48 -  			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 00:48A6 -  -  -  -  			;
   36 00:48A6 E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 00:48A7 -  -  -  -  			;
   38 00:48A7 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 00:48A9 CD 6C 4B -  			call 	StackOpenFrame 
   40 00:48AC CD A1 4B -  			call 	StackSavePosition 		; and save the return address on the stack.
   41 00:48AF -  -  -  -  
   42 00:48AF DD E1 -  -  			pop 	ix 						; new position in code
   43 00:48B1 E1 -  -  -  			pop 	hl 						; start of line
   44 00:48B2 22 58 40 -  			ld 		(CurrentLineStart),hl 	; save start of line
   45 00:48B5 C9 -  -  -  			ret
   46 00:48B6 -  -  -  -  
   47 00:48B6 -  -  -  -  ; ***************************************************************************************
   48 00:48B6 -  -  -  -  ;
   49 00:48B6 -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 00:48B6 -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 00:48B6 -  -  -  -  ;
   52 00:48B6 -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 00:48B6 -  -  -  -  ;			final ) on the parameter lists.
   54 00:48B6 -  -  -  -  ;
   55 00:48B6 -  -  -  -  ; ***************************************************************************************
   56 00:48B6 -  -  -  -  
   57 00:48B6 -  -  -  -  ProcDoParameterList:
   58 00:48B6 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 00:48B7 DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 00:48BA 20 1C -  -  			jr 		nz,_ParamError
   61 00:48BC -  -  -  -  			;
   62 00:48BC DD 23 -  -  			inc 	ix 						; skip over it
   63 00:48BE 23 -  -  -  			inc 	hl
   64 00:48BF FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 00:48C1 C8 -  -  -  			ret 	z
   66 00:48C2 -  -  -  -  			;
   67 00:48C2 FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 00:48C4 28 04 -  -  			jr 		z,_PDPFound
   69 00:48C6 FE A6 -  -  			cp 		KWD_COMMA
   70 00:48C8 20 0E -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 00:48CA -  -  -  -  			;
   72 00:48CA -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 00:48CA -  -  -  -  			;
   74 00:48CA -  -  -  -  _PDPFound:			
   75 00:48CA E5 -  -  -  			push 	hl 						; save callee on stack
   76 00:48CB CD B4 45 -  			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 00:48CE DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 00:48D0 CD 20 48 -  			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 00:48D3 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 00:48D5 E1 -  -  -  			pop 	hl 						; and HL the callee
   81 00:48D6 18 DE -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 00:48D8 -  -  -  -  
   83 00:48D8 -  -  -  -  _ParamError:
   84 00:48D8 3E 13 C3 CF 
              43 -  -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 00:48DD -  -  -  -  
   86 00:48DD -  -  -  -  ; ***************************************************************************************
   87 00:48DD -  -  -  -  ;
   88 00:48DD -  -  -  -  ;										ENDPROC Command
   89 00:48DD -  -  -  -  ;
   90 00:48DD -  -  -  -  ; ***************************************************************************************
   91 00:48DD -  -  -  -  
   92 00:48DD -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 00:48DD CD 6D 48 -  			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 00:48E0 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 00:48E2 CD 9C 4B -  			call 	StackCheckFrame
   96 00:48E5 20 14 -  -  			jr 		nz,_EndProcError
   97 00:48E7 CD BA 4B -  			call 	StackLoadPosition 		; restore position into IX/SOL
   98 00:48EA CD 8C 4B -  			call 	StackCloseFrame 		
   99 00:48ED -  -  -  -  
  100 00:48ED CD 6D 48 -  			call 	PopLocals 				; restore any locals (parameters)
  101 00:48F0 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 00:48F2 CD 9C 4B -  			call 	StackCheckFrame
  103 00:48F5 20 04 -  -  			jr 		nz,_EndProcError
  104 00:48F7 CD 8C 4B -  			call 	StackCloseFrame 		
  105 00:48FA C9 -  -  -  			ret
  106 00:48FB -  -  -  -  _EndProcError:
  107 00:48FB 3E 10 C3 CF 
              43 -  -  -  			ERR_NOPROC
  108 00:4900 -  -  -  -  
  109 00:4900 -  -  -  -  ; ***************************************************************************************
  110 00:4900 -  -  -  -  ;
  111 00:4900 -  -  -  -  ;									Changes and Updates
  112 00:4900 -  -  -  -  ;
  113 00:4900 -  -  -  -  ; ***************************************************************************************
  114 00:4900 -  -  -  -  ;
  115 00:4900 -  -  -  -  ;		Date			Notes
  116 00:4900 -  -  -  -  ;		==== 			=====
  117 00:4900 -  -  -  -  ;
  118 00:4900 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:4900 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 00:4900 -  -  -  -  ; ***************************************************************************************
    2 00:4900 -  -  -  -  ; ***************************************************************************************
    3 00:4900 -  -  -  -  ;
    4 00:4900 -  -  -  -  ;		Name : 		search.asm
    5 00:4900 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4900 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4900 -  -  -  -  ;		Reviewed :	No
    8 00:4900 -  -  -  -  ;		Purpose :	Search program for procedures
    9 00:4900 -  -  -  -  ;
   10 00:4900 -  -  -  -  ; ***************************************************************************************
   11 00:4900 -  -  -  -  ; ***************************************************************************************
   12 00:4900 -  -  -  -  
   13 00:4900 -  -  -  -  ; ***************************************************************************************
   14 00:4900 -  -  -  -  ;
   15 00:4900 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 00:4900 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 00:4900 -  -  -  -  ;
   18 00:4900 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 00:4900 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 00:4900 -  -  -  -  ;
   21 00:4900 -  -  -  -  ; ***************************************************************************************
   22 00:4900 -  -  -  -  
   23 00:4900 -  -  -  -  SearchProcedure:
   24 00:4900 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 00:4903 -  -  -  -  
   26 00:4903 2A 34 40 -  			ld 		hl,(CodeAddress) 		; start of program space
   27 00:4906 -  -  -  -  			;
   28 00:4906 -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 00:4906 -  -  -  -  			;
   30 00:4906 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 00:4907 B7 -  -  -  			or 		a
   32 00:4908 28 37 -  -  			jr 		z,_SPFail
   33 00:490A E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 00:490B 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 00:490C 23 -  -  -  			inc 	hl
   36 00:490D 23 -  -  -  			inc 	hl
   37 00:490E 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 00:490F FE B6 -  -  			cp 		KWD_DEF 				
   39 00:4911 20 0B -  -  			jr 		nz,_SPNext
   40 00:4913 23 -  -  -  			inc 	hl 				
   41 00:4914 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 00:4915 FE B7 -  -  			cp 		KWD_PROC
   43 00:4917 20 05 -  -  			jr 		nz,_SPNext
   44 00:4919 23 -  -  -  			inc 	hl
   45 00:491A 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 00:491B B9 -  -  -  			cp 		c
   47 00:491C 28 08 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 00:491E -  -  -  -  			;
   49 00:491E -  -  -  -  			;		Advance to next entry.
   50 00:491E -  -  -  -  			;			
   51 00:491E E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 00:491F 11 00 00 -  			ld 		de,0 					; offset into UDE
   53 00:4922 5E -  -  -  			ld 		e,(hl)
   54 00:4923 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 00:4924 18 E0 -  -  			jr 		_SPLoop
   56 00:4926 -  -  -  -  			;
   57 00:4926 -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 00:4926 -  -  -  -  			; 		DEF PROC line.
   59 00:4926 -  -  -  -  			;		
   60 00:4926 -  -  -  -  			;		Already know the first characters match
   61 00:4926 -  -  -  -  			;
   62 00:4926 -  -  -  -  _SPFullCheck:
   63 00:4926 DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 00:4928 -  -  -  -  _SPCheckLoop:
   65 00:4928 DD 23 -  -  			inc 	ix 						; look at next character.
   66 00:492A 23 -  -  -  			inc 	hl
   67 00:492B DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 00:492E FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 00:4930 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 00:4932 BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 00:4933 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 00:4935 -  -  -  -  			;
   73 00:4935 -  -  -  -  			;		Full check failed.
   74 00:4935 -  -  -  -  			;
   75 00:4935 -  -  -  -  _SPFullCheckFailed:			
   76 00:4935 DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 00:4937 18 E5 -  -  			jr 		_SPNext 				; do the next line.
   78 00:4939 -  -  -  -  			;
   79 00:4939 -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 00:4939 -  -  -  -  			;
   81 00:4939 -  -  -  -  _SPCheckBothEnd:
   82 00:4939 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 00:493A FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 00:493C 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 00:493E -  -  -  -  			;
   86 00:493E -  -  -  -  			;	 	We found it.
   87 00:493E -  -  -  -  			;
   88 00:493E C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 00:493F D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 00:4940 C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 00:4941 -  -  -  -  
   92 00:4941 -  -  -  -  _SPFail: 									; come here when not found.
   93 00:4941 3E 14 C3 CF 
              43 -  -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 00:4946 -  -  -  -  
   95 00:4946 -  -  -  -  ; ***************************************************************************************
   96 00:4946 -  -  -  -  ;
   97 00:4946 -  -  -  -  ;									Changes and Updates
   98 00:4946 -  -  -  -  ;
   99 00:4946 -  -  -  -  ; ***************************************************************************************
  100 00:4946 -  -  -  -  ;
  101 00:4946 -  -  -  -  ;		Date			Notes
  102 00:4946 -  -  -  -  ;		==== 			=====
  103 00:4946 -  -  -  -  ;
  104 00:4946 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4946 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4946 -  -  -  -  ; ***************************************************************************************
    2 00:4946 -  -  -  -  ; ***************************************************************************************
    3 00:4946 -  -  -  -  ;
    4 00:4946 -  -  -  -  ;		Name : 		allocate.asm
    5 00:4946 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4946 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4946 -  -  -  -  ;		Reviewed :	No
    8 00:4946 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4946 -  -  -  -  ;
   10 00:4946 -  -  -  -  ; ***************************************************************************************
   11 00:4946 -  -  -  -  ; ***************************************************************************************
   12 00:4946 -  -  -  -  
   13 00:4946 -  -  -  -  ; ***************************************************************************************
   14 00:4946 -  -  -  -  ;
   15 00:4946 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4946 -  -  -  -  ;
   17 00:4946 -  -  -  -  ; ***************************************************************************************
   18 00:4946 -  -  -  -  
   19 00:4946 -  -  -  -  AllocateBytes:
   20 00:4946 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:4947 21 00 00 -  		ld 		hl,$000000
   22 00:494A 62 -  -  -  		ld 		h,d
   23 00:494B 6B -  -  -  		ld 		l,e
   24 00:494C -  -  -  -  		;
   25 00:494C ED 5B 4C 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:4950 D5 -  -  -  		push 	de 							; save on stack
   27 00:4951 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:4952 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; update it
   29 00:4955 -  -  -  -  		;
   30 00:4955 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:4956 2A 48 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:4959 AF -  -  -  		xor 	a
   33 00:495A ED 52 -  -  		sbc 	hl,de
   34 00:495C E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:495D D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:495E 3E 0B C3 CF 
              43 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:4963 -  -  -  -  
   38 00:4963 -  -  -  -  ; ***************************************************************************************
   39 00:4963 -  -  -  -  ;
   40 00:4963 -  -  -  -  ;									Changes and Updates
   41 00:4963 -  -  -  -  ;
   42 00:4963 -  -  -  -  ; ***************************************************************************************
   43 00:4963 -  -  -  -  ;
   44 00:4963 -  -  -  -  ;		Date			Notes
   45 00:4963 -  -  -  -  ;		==== 			=====
   46 00:4963 -  -  -  -  ;
   47 00:4963 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4963 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4963 -  -  -  -  ; ***************************************************************************************
    2 00:4963 -  -  -  -  ; ***************************************************************************************
    3 00:4963 -  -  -  -  ;
    4 00:4963 -  -  -  -  ;		Name : 		clear.asm
    5 00:4963 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4963 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4963 -  -  -  -  ;		Reviewed :	No
    8 00:4963 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4963 -  -  -  -  ;
   10 00:4963 -  -  -  -  ; ***************************************************************************************
   11 00:4963 -  -  -  -  ; ***************************************************************************************
   12 00:4963 -  -  -  -  
   13 00:4963 -  -  -  -  ; ***************************************************************************************
   14 00:4963 -  -  -  -  ;
   15 00:4963 -  -  -  -  ;										CLEAR command
   16 00:4963 -  -  -  -  ;
   17 00:4963 -  -  -  -  ; ***************************************************************************************
   18 00:4963 -  -  -  -  
   19 00:4963 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4963 -  -  -  -  		;
   21 00:4963 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4963 -  -  -  -  		;
   23 00:4963 2A 2C 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4966 -  -  -  -  _CCFindLow:
   25 00:4966 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4969 5E -  -  -  		ld 		e,(hl)		
   27 00:496A 19 -  -  -  		add 	hl,de
   28 00:496B 7B -  -  -  		ld 		a,e
   29 00:496C B7 -  -  -  		or 		a
   30 00:496D 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:496F 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4970 22 50 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4973 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4974 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:4977 -  -  -  -  		;
   36 00:4977 -  -  -  -  		; 	 		Reset the language stack
   37 00:4977 -  -  -  -  		;
   38 00:4977 2A 30 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:497A -  -  -  -  		;
   40 00:497A 22 38 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:497D 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:4980 19 -  -  -  		add 	hl,de
   43 00:4981 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:4983 22 3C 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:4986 -  -  -  -  		;
   46 00:4986 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:4989 19 -  -  -  		add 	hl,de
   48 00:498A 22 40 40 -  		ld 		(StandardIntegers),hl
   49 00:498D -  -  -  -  		;
   50 00:498D -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:498D -  -  -  -  		;
   52 00:498D 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:4990 -  -  -  -  _CCFClearHT:
   54 00:4990 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:4991 36 00 -  -  		ld 		(hl),0
   56 00:4993 1B -  -  -  		dec 	de
   57 00:4994 7A -  -  -  		ld 		a,d
   58 00:4995 B3 -  -  -  		or 		e
   59 00:4996 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:4998 22 44 40 -  		ld 		(HashTableBase),hl 			; save table base
   61 00:499B -  -  -  -  		;
   62 00:499B -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:499B -  -  -  -  		;
   64 00:499B 22 48 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:499E -  -  -  -  		;
   66 00:499E -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:499E -  -  -  -  		;
   68 00:499E CD 57 47 -  		call 	UnaryRandomInitialise
   69 00:49A1 -  -  -  -  		;
   70 00:49A1 -  -  -  -  		;		Erase the stack
   71 00:49A1 -  -  -  -  		;
   72 00:49A1 CD 62 4B -  		call 	StackReset 					; reset the basic stack to empty
   73 00:49A4 -  -  -  -  		;
   74 00:49A4 -  -  -  -  		;		Reset READ/DATA
   75 00:49A4 -  -  -  -  		;
   76 00:49A4 CD 81 43 -  		call 	Command_RESTORE
   77 00:49A7 C9 -  -  -  		ret
   78 00:49A8 -  -  -  -  
   79 00:49A8 -  -  -  -  ; ***************************************************************************************
   80 00:49A8 -  -  -  -  ;
   81 00:49A8 -  -  -  -  ;									Changes and Updates
   82 00:49A8 -  -  -  -  ;
   83 00:49A8 -  -  -  -  ; ***************************************************************************************
   84 00:49A8 -  -  -  -  ;
   85 00:49A8 -  -  -  -  ;		Date			Notes
   86 00:49A8 -  -  -  -  ;		==== 			=====
   87 00:49A8 -  -  -  -  ;
   88 00:49A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:49A8 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:49A8 -  -  -  -  ; ***************************************************************************************
    2 00:49A8 -  -  -  -  ; ***************************************************************************************
    3 00:49A8 -  -  -  -  ;
    4 00:49A8 -  -  -  -  ;		Name : 		instance.asm
    5 00:49A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49A8 -  -  -  -  ;		Reviewed :	No
    8 00:49A8 -  -  -  -  ;		Purpose :	Instance handling
    9 00:49A8 -  -  -  -  ;
   10 00:49A8 -  -  -  -  ; ***************************************************************************************
   11 00:49A8 -  -  -  -  ; ***************************************************************************************
   12 00:49A8 -  -  -  -  
   13 00:49A8 -  -  -  -  ; ***************************************************************************************
   14 00:49A8 -  -  -  -  ;
   15 00:49A8 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:49A8 -  -  -  -  ;
   17 00:49A8 -  -  -  -  ; ***************************************************************************************
   18 00:49A8 -  -  -  -  
   19 00:49A8 -  -  -  -  SetCurrentInstance:
   20 00:49A8 ED 53 2C 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:49AC 22 30 40 -  		ld 		(HighMemory),hl 
   22 00:49AF ED 53 34 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:49B3 -  -  -  -  
   24 00:49B3 C9 -  -  -  		ret
   25 00:49B4 -  -  -  -  
   26 00:49B4 -  -  -  -  
   27 00:49B4 -  -  -  -  ; ***************************************************************************************
   28 00:49B4 -  -  -  -  ;
   29 00:49B4 -  -  -  -  ;									Changes and Updates
   30 00:49B4 -  -  -  -  ;
   31 00:49B4 -  -  -  -  ; ***************************************************************************************
   32 00:49B4 -  -  -  -  ;
   33 00:49B4 -  -  -  -  ;		Date			Notes
   34 00:49B4 -  -  -  -  ;		==== 			=====
   35 00:49B4 -  -  -  -  ;
   36 00:49B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:49B4 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:49B4 -  -  -  -  ; ***************************************************************************************
    2 00:49B4 -  -  -  -  ; ***************************************************************************************
    3 00:49B4 -  -  -  -  ;
    4 00:49B4 -  -  -  -  ;		Name : 		new.asm
    5 00:49B4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49B4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49B4 -  -  -  -  ;		Reviewed :	No
    8 00:49B4 -  -  -  -  ;		Purpose :	New command.
    9 00:49B4 -  -  -  -  ;
   10 00:49B4 -  -  -  -  ; ***************************************************************************************
   11 00:49B4 -  -  -  -  ; ***************************************************************************************
   12 00:49B4 -  -  -  -  
   13 00:49B4 -  -  -  -  ; ***************************************************************************************
   14 00:49B4 -  -  -  -  ;
   15 00:49B4 -  -  -  -  ;										NEW command
   16 00:49B4 -  -  -  -  ;
   17 00:49B4 -  -  -  -  ; ***************************************************************************************
   18 00:49B4 -  -  -  -  
   19 00:49B4 -  -  -  -  Command_NEW: 	;; [new]
   20 00:49B4 2A 34 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:49B7 36 00 -  -  		ld 		(hl),0
   22 00:49B9 CD 63 49 -  		call 	Command_CLEAR 				; clear all variables
   23 00:49BC 3E 00 C3 CF 
              43 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:49C1 -  -  -  -  
   25 00:49C1 -  -  -  -  ; ***************************************************************************************
   26 00:49C1 -  -  -  -  ;
   27 00:49C1 -  -  -  -  ;									Changes and Updates
   28 00:49C1 -  -  -  -  ;
   29 00:49C1 -  -  -  -  ; ***************************************************************************************
   30 00:49C1 -  -  -  -  ;
   31 00:49C1 -  -  -  -  ;		Date			Notes
   32 00:49C1 -  -  -  -  ;		==== 			=====
   33 00:49C1 -  -  -  -  ;
   34 00:49C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:49C1 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 00:49C1 -  -  -  -  ; ***************************************************************************************
    2 00:49C1 -  -  -  -  ; ***************************************************************************************
    3 00:49C1 -  -  -  -  ;
    4 00:49C1 -  -  -  -  ;		Name : 		for.asm
    5 00:49C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49C1 -  -  -  -  ;		Date : 		7th June 2022
    7 00:49C1 -  -  -  -  ;		Reviewed :	No
    8 00:49C1 -  -  -  -  ;		Purpose :	For/Next command
    9 00:49C1 -  -  -  -  ;
   10 00:49C1 -  -  -  -  ; ***************************************************************************************
   11 00:49C1 -  -  -  -  
   12 00:49C1 -  -  -  -  ; ***************************************************************************************
   13 00:49C1 -  -  -  -  ;
   14 00:49C1 -  -  -  -  ;									For Command
   15 00:49C1 -  -  -  -  ;
   16 00:49C1 -  -  -  -  ; ***************************************************************************************
   17 00:49C1 -  -  -  -  
   18 00:49C1 -  -  -  -  Command_FOR: ;; [for]
   19 00:49C1 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 00:49C3 CD 6C 4B -  			call 	StackOpenFrame
   21 00:49C6 -  -  -  -  			;
   22 00:49C6 -  -  -  -  			;		Variable Reference to increment
   23 00:49C6 -  -  -  -  			;
   24 00:49C6 DD E5 -  -  			push	ix 						; save start position
   25 00:49C8 3E FF -  -  			ld 		a,255 					; FOR can create
   26 00:49CA 32 7C 40 -  			ld 		(AllowAutoCreate),a
   27 00:49CD CD 0F 46 -  			call 	EvaluateTerm 			; get term
   28 00:49D0 AF -  -  -  			xor 	a 						; autocreate off.
   29 00:49D1 32 7C 40 -  			ld 		(AllowAutoCreate),a
   30 00:49D4 DD E1 -  -  			pop 	ix 						; get start position
   31 00:49D6 E5 -  -  -  			push 	hl 						; save reference address.
   32 00:49D7 -  -  -  -  			;
   33 00:49D7 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 00:49D9 C2 2C 44 -  			jp 		nz,SyntaxError
   35 00:49DC EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 00:49DD -  -  -  -  			;
   37 00:49DD 2A 54 40 -  			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 00:49E0 01 06 00 -  			ld 		bc,6
   39 00:49E3 09 -  -  -  			add 	hl,bc 
   40 00:49E4 D1 -  -  -  			pop 	de 						; get reference.
   41 00:49E5 73 23 72 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 00:49EB -  -  -  -  			;
   43 00:49EB -  -  -  -  			;		var = value
   44 00:49EB -  -  -  -  			;
   45 00:49EB CD AD 41 -  			call 	Command_LET 			; so we do I = 1 or whatever.
   46 00:49EE -  -  -  -  			; 		
   47 00:49EE -  -  -  -  			; 		TO
   48 00:49EE -  -  -  -  			;
   49 00:49EE 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 00:49F0 CD C4 43 -  			call 	CheckNextA
   51 00:49F3 -  -  -  -  			;
   52 00:49F3 -  -  -  -  			;		value
   53 00:49F3 -  -  -  -  			;
   54 00:49F3 CD B4 45 -  			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 00:49F6 3E 0A -  -  			ld 		a,10
   56 00:49F8 CD 2F 4A -  			call 	CFWriteHLHLToA 
   57 00:49FB -  -  -  -  			;
   58 00:49FB -  -  -  -  			;		Check STEP ?
   59 00:49FB -  -  -  -  			;
   60 00:49FB 21 01 00 -  			ld 		hl,1 					; default STEP is 1.
   61 00:49FE D9 -  -  -  			exx
   62 00:49FF 21 00 00 -  			ld 		hl,0
   63 00:4A02 D9 -  -  -  			exx			
   64 00:4A03 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 00:4A06 FE B4 -  -  			cp 		KWD_STEP 				
   66 00:4A08 20 05 -  -  			jr 		nz,_CFDefaultStep
   67 00:4A0A -  -  -  -  			;
   68 00:4A0A DD 23 -  -  			inc 	ix 						; get step
   69 00:4A0C CD B4 45 -  			call 	EvaluateInteger
   70 00:4A0F -  -  -  -  _CFDefaultStep:			
   71 00:4A0F 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 00:4A11 CD 2F 4A -  			call 	CFWriteHLHLToA 
   73 00:4A14 CD A1 4B -  			call 	StackSavePosition 		; save loop address
   74 00:4A17 C9 -  -  -  			ret
   75 00:4A18 -  -  -  -  
   76 00:4A18 -  -  -  -  ; ***************************************************************************************
   77 00:4A18 -  -  -  -  ;
   78 00:4A18 -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 00:4A18 -  -  -  -  ;
   80 00:4A18 -  -  -  -  ; ***************************************************************************************
   81 00:4A18 -  -  -  -  
   82 00:4A18 -  -  -  -  CFReadAToHLHL:
   83 00:4A18 01 00 00 -  			ld 		bc,0 					; BC = 00|A
   84 00:4A1B 4F -  -  -  			ld 		c,a
   85 00:4A1C 2A 54 40 -  			ld 		hl,(BasicSP) 			; add stack base
   86 00:4A1F 09 -  -  -  			add 	hl,bc
   87 00:4A20 -  -  -  -  
   88 00:4A20 -  -  -  -  CFReadHLToHLHL:
   89 00:4A20 E5 -  -  -  			push 	hl
   90 00:4A21 7E 23 66 6F 			ld_ind_hl 						; get low word
   91 00:4A25 D9 -  -  -  			exx
   92 00:4A26 -  -  -  -  
   93 00:4A26 E1 -  -  -  			pop 	hl 						; get high word
   94 00:4A27 23 -  -  -  			inc 	hl
   95 00:4A28 23 -  -  -  			inc 	hl
   96 00:4A29 7E 23 66 6F 			ld_ind_hl
   97 00:4A2D D9 -  -  -  			exx
   98 00:4A2E -  -  -  -  
   99 00:4A2E C9 -  -  -  			ret
  100 00:4A2F -  -  -  -  
  101 00:4A2F -  -  -  -  ; ***************************************************************************************
  102 00:4A2F -  -  -  -  ;
  103 00:4A2F -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 00:4A2F -  -  -  -  ;
  105 00:4A2F -  -  -  -  ; ***************************************************************************************
  106 00:4A2F -  -  -  -  
  107 00:4A2F -  -  -  -  CFWriteHLHLToA:
  108 00:4A2F EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 00:4A30 D9 -  -  -  			exx
  110 00:4A31 EB -  -  -  			ex 		de,hl
  111 00:4A32 D9 -  -  -  			exx
  112 00:4A33 -  -  -  -  
  113 00:4A33 01 00 00 -  			ld 		bc,0 					; BC = 00|A
  114 00:4A36 4F -  -  -  			ld 		c,a
  115 00:4A37 2A 54 40 -  			ld 		hl,(BasicSP) 			; add stack base
  116 00:4A3A 09 -  -  -  			add 	hl,bc
  117 00:4A3B -  -  -  -  
  118 00:4A3B -  -  -  -  CFWriteDEDEToHL:
  119 00:4A3B 73 -  -  -  			ld 		(hl),e 					; write low word
  120 00:4A3C 23 -  -  -  			inc 	hl
  121 00:4A3D 72 -  -  -  			ld 		(hl),d
  122 00:4A3E 23 -  -  -  			inc 	hl
  123 00:4A3F -  -  -  -  
  124 00:4A3F E5 -  -  -  			push 	hl 						; write high word
  125 00:4A40 D9 -  -  -  			exx
  126 00:4A41 E1 -  -  -  			pop 	hl
  127 00:4A42 73 -  -  -  			ld 		(hl),e
  128 00:4A43 23 -  -  -  			inc 	hl
  129 00:4A44 72 -  -  -  			ld 		(hl),d
  130 00:4A45 D9 -  -  -  			exx
  131 00:4A46 C9 -  -  -  			ret			
  132 00:4A47 -  -  -  -  
  133 00:4A47 -  -  -  -  ; ***************************************************************************************
  134 00:4A47 -  -  -  -  ;
  135 00:4A47 -  -  -  -  ;									Next Command
  136 00:4A47 -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 00:4A47 -  -  -  -  ;
  138 00:4A47 -  -  -  -  ; ***************************************************************************************
  139 00:4A47 -  -  -  -  
  140 00:4A47 -  -  -  -  Command_Next:	;; [next]
  141 00:4A47 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 00:4A49 CD 9C 4B -  			call 	StackCheckFrame
  143 00:4A4C -  -  -  -  			;
  144 00:4A4C -  -  -  -  			;		Get address of FOR variable
  145 00:4A4C -  -  -  -  			;
  146 00:4A4C 2A 54 40 -  			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 00:4A4F 01 06 00 -  			ld 		bc,6
  148 00:4A52 09 -  -  -  			add 	hl,bc
  149 00:4A53 7E 23 66 6F 			ld_ind_hl
  150 00:4A57 -  -  -  -  			;
  151 00:4A57 -  -  -  -  			; 		Save reference, read value into DE.
  152 00:4A57 -  -  -  -  			;
  153 00:4A57 E5 -  -  -  			push 	hl 						; save index address
  154 00:4A58 CD 20 4A -  			call 	CFReadHLToHLHL 			; read the index value.
  155 00:4A5B -  -  -  -  
  156 00:4A5B EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 00:4A5C D9 -  -  -  			exx
  158 00:4A5D EB -  -  -  			ex 		de,hl
  159 00:4A5E D9 -  -  -  			exx
  160 00:4A5F -  -  -  -  			;
  161 00:4A5F -  -  -  -  			; 		Read step and Add
  162 00:4A5F -  -  -  -  			;
  163 00:4A5F 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 00:4A61 CD 18 4A -  			call 	CFReadAToHLHL
  165 00:4A64 D9 -  -  -  			exx 							; msb of step on stack
  166 00:4A65 7C -  -  -  			ld 		a,h
  167 00:4A66 D9 -  -  -  			exx
  168 00:4A67 F5 -  -  -  			push 	af
  169 00:4A68 CD 0B 51 -  			call 	Int32Add 				; add step to offset => HL'HL
  170 00:4A6B -  -  -  -  			;
  171 00:4A6B -  -  -  -  			;		Put result in DE and write back out
  172 00:4A6B -  -  -  -  			;
  173 00:4A6B EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 00:4A6C D9 -  -  -  			exx
  175 00:4A6D EB -  -  -  			ex 		de,hl
  176 00:4A6E D9 -  -  -  			exx
  177 00:4A6F F1 -  -  -  			pop 	af 						; get msb of step
  178 00:4A70 E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 00:4A71 F5 -  -  -  			push 	af 						; push msb of step back.
  180 00:4A72 CD 3B 4A -  			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 00:4A75 -  -  -  -  			;
  182 00:4A75 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 00:4A75 -  -  -  -  			;
  184 00:4A75 3E 0A -  -  			ld 		a,10 					; load limit
  185 00:4A77 CD 18 4A -  			call 	CFReadAToHLHL
  186 00:4A7A CD 44 51 -  			call 	Int32Compare 			; compare limit to index.
  187 00:4A7D C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 00:4A7E B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 00:4A7F 28 0A -  -  			jr 		z,_CNXLoopBack
  190 00:4A81 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 00:4A83 28 02 -  -  			jr 		z,_CNXNotMStep
  192 00:4A85 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 00:4A87 -  -  -  -  _CNXNotMStep:			
  194 00:4A87 E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 00:4A89 20 03 -  -  			jr 		nz,_CNXLoopOver
  196 00:4A8B -  -  -  -  			;
  197 00:4A8B -  -  -  -  			;		For loop goes round again.
  198 00:4A8B -  -  -  -  			;
  199 00:4A8B -  -  -  -  _CNXLoopBack:			
  200 00:4A8B C3 BA 4B -  			jp 		StackLoadPosition
  201 00:4A8E -  -  -  -  			;
  202 00:4A8E -  -  -  -  			;		For loop completed
  203 00:4A8E -  -  -  -  			;
  204 00:4A8E -  -  -  -  _CNXLoopOver:
  205 00:4A8E C3 8C 4B -  			jp 		StackCloseFrame
  206 00:4A91 76 -  -  -  			debug
  207 00:4A92 -  -  -  -  
  208 00:4A92 -  -  -  -  ; ***************************************************************************************
  209 00:4A92 -  -  -  -  ;
  210 00:4A92 -  -  -  -  ;									Changes and Updates
  211 00:4A92 -  -  -  -  ;
  212 00:4A92 -  -  -  -  ; ***************************************************************************************
  213 00:4A92 -  -  -  -  ;
  214 00:4A92 -  -  -  -  ;		Date			Notes
  215 00:4A92 -  -  -  -  ;		==== 			=====
  216 00:4A92 -  -  -  -  ;
  217 00:4A92 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:4A92 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:4A92 -  -  -  -  ; ***************************************************************************************
    2 00:4A92 -  -  -  -  ; ***************************************************************************************
    3 00:4A92 -  -  -  -  ;
    4 00:4A92 -  -  -  -  ;		Name : 		gosub.asm
    5 00:4A92 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A92 -  -  -  -  ;		Date : 		7th June 2022
    7 00:4A92 -  -  -  -  ;		Reviewed :	No
    8 00:4A92 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:4A92 -  -  -  -  ;
   10 00:4A92 -  -  -  -  ; ***************************************************************************************
   11 00:4A92 -  -  -  -  
   12 00:4A92 -  -  -  -  ; ***************************************************************************************
   13 00:4A92 -  -  -  -  ;
   14 00:4A92 -  -  -  -  ;									Gosub Command
   15 00:4A92 -  -  -  -  ;
   16 00:4A92 -  -  -  -  ; ***************************************************************************************
   17 00:4A92 -  -  -  -  
   18 00:4A92 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:4A92 3E 13 -  -  			ld		a,STM_GOSUB
   20 00:4A94 CD 6C 4B -  			call 	StackOpenFrame
   21 00:4A97 CD BD 4A -  			call 	GoGetLineNumber
   22 00:4A9A E5 -  -  -  			push 	hl
   23 00:4A9B CD A1 4B -  			call 	StackSavePosition
   24 00:4A9E E1 -  -  -  			pop 	hl
   25 00:4A9F CD C8 4A -  			call	TransferToLineHL
   26 00:4AA2 C9 -  -  -  			ret
   27 00:4AA3 -  -  -  -  
   28 00:4AA3 -  -  -  -  ; ***************************************************************************************
   29 00:4AA3 -  -  -  -  ;
   30 00:4AA3 -  -  -  -  ;									Return command
   31 00:4AA3 -  -  -  -  ;
   32 00:4AA3 -  -  -  -  ; ***************************************************************************************
   33 00:4AA3 -  -  -  -  
   34 00:4AA3 -  -  -  -  Command_Return: ;; [return]
   35 00:4AA3 3E 13 -  -  			ld		a,STM_GOSUB
   36 00:4AA5 CD 9C 4B -  			call 	StackCheckFrame
   37 00:4AA8 20 07 -  -  			jr 		nz,_ReturnError
   38 00:4AAA CD BA 4B -  			call 	StackLoadPosition
   39 00:4AAD CD 8C 4B -  			call 	StackCloseFrame
   40 00:4AB0 C9 -  -  -  			ret
   41 00:4AB1 -  -  -  -  _ReturnError:
   42 00:4AB1 3E 08 C3 CF 
              43 -  -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:4AB6 -  -  -  -  
   44 00:4AB6 -  -  -  -  ; ***************************************************************************************
   45 00:4AB6 -  -  -  -  ;
   46 00:4AB6 -  -  -  -  ;									Changes and Updates
   47 00:4AB6 -  -  -  -  ;
   48 00:4AB6 -  -  -  -  ; ***************************************************************************************
   49 00:4AB6 -  -  -  -  ;
   50 00:4AB6 -  -  -  -  ;		Date			Notes
   51 00:4AB6 -  -  -  -  ;		==== 			=====
   52 00:4AB6 -  -  -  -  ;
   53 00:4AB6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4AB6 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:4AB6 -  -  -  -  ; ***************************************************************************************
    2 00:4AB6 -  -  -  -  ; ***************************************************************************************
    3 00:4AB6 -  -  -  -  ;
    4 00:4AB6 -  -  -  -  ;		Name : 		goto.asm
    5 00:4AB6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AB6 -  -  -  -  ;		Date : 		6th June 2022
    7 00:4AB6 -  -  -  -  ;		Reviewed :	No
    8 00:4AB6 -  -  -  -  ;		Purpose :	Goto command
    9 00:4AB6 -  -  -  -  ;
   10 00:4AB6 -  -  -  -  ; ***************************************************************************************
   11 00:4AB6 -  -  -  -  
   12 00:4AB6 -  -  -  -  ; ***************************************************************************************
   13 00:4AB6 -  -  -  -  ;
   14 00:4AB6 -  -  -  -  ;									Goto Command
   15 00:4AB6 -  -  -  -  ;
   16 00:4AB6 -  -  -  -  ; ***************************************************************************************
   17 00:4AB6 -  -  -  -  
   18 00:4AB6 -  -  -  -  Command_GOTO: ;; [goto]
   19 00:4AB6 CD BD 4A -  			call 	GoGetLineNumber
   20 00:4AB9 CD C8 4A -  			call	TransferToLineHL
   21 00:4ABC C9 -  -  -  			ret
   22 00:4ABD -  -  -  -  
   23 00:4ABD -  -  -  -  ; ***************************************************************************************
   24 00:4ABD -  -  -  -  ;
   25 00:4ABD -  -  -  -  ;							Get and validate a line number in HL
   26 00:4ABD -  -  -  -  ;
   27 00:4ABD -  -  -  -  ; ***************************************************************************************
   28 00:4ABD -  -  -  -  
   29 00:4ABD -  -  -  -  GoGetLineNumber:
   30 00:4ABD CD B4 45 -  			call 	EvaluateInteger
   31 00:4AC0 D9 -  -  -  			exx
   32 00:4AC1 7C -  -  -  			ld 		a,h
   33 00:4AC2 B5 -  -  -  			or 		l
   34 00:4AC3 D9 -  -  -  			exx
   35 00:4AC4 C8 -  -  -  			ret 	z
   36 00:4AC5 C3 27 44 -  			jp 		BadValue
   37 00:4AC8 -  -  -  -  
   38 00:4AC8 -  -  -  -  ; ***************************************************************************************
   39 00:4AC8 -  -  -  -  ;
   40 00:4AC8 -  -  -  -  ;							Transfer to Line Number HL
   41 00:4AC8 -  -  -  -  ;
   42 00:4AC8 -  -  -  -  ; ***************************************************************************************
   43 00:4AC8 -  -  -  -  
   44 00:4AC8 -  -  -  -  TransferToLineHL:
   45 00:4AC8 EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:4AC9 01 00 00 -  			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:4ACC DD 2A 34 40 			ld 		ix,(CodeAddress)
   48 00:4AD0 -  -  -  -  _TLSearch:	
   49 00:4AD0 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:4AD2 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:4AD5 B7 -  -  -  			or 		a 						; if zero
   52 00:4AD6 28 18 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:4AD8 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:4AD9 -  -  -  -  
   55 00:4AD9 7B -  -  -  			ld 		a,e						; compare line address
   56 00:4ADA DD BE 01 -  			cp 		(ix+1)
   57 00:4ADD 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:4ADF 7A -  -  -  			ld 		a,d
   59 00:4AE0 DD BE 02 -  			cp 		(ix+2)
   60 00:4AE3 20 EB -  -  			jr 		nz,_TLSearch
   61 00:4AE5 -  -  -  -  			;
   62 00:4AE5 DD 22 58 40 			ld 		(CurrentLineStart),ix 	; set line start
   63 00:4AE9 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:4AEB DD 23 -  -  			inc 	ix
   65 00:4AED DD 23 -  -  			inc 	ix
   66 00:4AEF -  -  -  -  
   67 00:4AEF C9 -  -  -  			ret
   68 00:4AF0 -  -  -  -  
   69 00:4AF0 -  -  -  -  _TLNotFound:
   70 00:4AF0 3E 0A C3 CF 
              43 -  -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:4AF5 -  -  -  -  
   72 00:4AF5 -  -  -  -  ; ***************************************************************************************
   73 00:4AF5 -  -  -  -  ;
   74 00:4AF5 -  -  -  -  ;									Changes and Updates
   75 00:4AF5 -  -  -  -  ;
   76 00:4AF5 -  -  -  -  ; ***************************************************************************************
   77 00:4AF5 -  -  -  -  ;
   78 00:4AF5 -  -  -  -  ;		Date			Notes
   79 00:4AF5 -  -  -  -  ;		==== 			=====
   80 00:4AF5 -  -  -  -  ;
   81 00:4AF5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4AF5 -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 00:4AF5 -  -  -  -  ; ***************************************************************************************
    2 00:4AF5 -  -  -  -  ; ***************************************************************************************
    3 00:4AF5 -  -  -  -  ;
    4 00:4AF5 -  -  -  -  ;		Name : 		if.asm
    5 00:4AF5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AF5 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4AF5 -  -  -  -  ;		Reviewed :	No
    8 00:4AF5 -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 00:4AF5 -  -  -  -  ;
   10 00:4AF5 -  -  -  -  ; ***************************************************************************************
   11 00:4AF5 -  -  -  -  
   12 00:4AF5 -  -  -  -  ; ***************************************************************************************
   13 00:4AF5 -  -  -  -  ;
   14 00:4AF5 -  -  -  -  ;									If Command
   15 00:4AF5 -  -  -  -  ;
   16 00:4AF5 -  -  -  -  ; ***************************************************************************************
   17 00:4AF5 -  -  -  -  
   18 00:4AF5 -  -  -  -  Command_IF: ;; [if]
   19 00:4AF5 CD B4 45 -  		call 	EvaluateInteger 			; work out the test.
   20 00:4AF8 CD 3D 51 -  		call 	Int32Zero 					; test if zero
   21 00:4AFB 28 1A -  -  		jr 		z,_IFFail
   22 00:4AFD -  -  -  -  		;
   23 00:4AFD -  -  -  -  		;	 	Passed
   24 00:4AFD -  -  -  -  		;
   25 00:4AFD DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 00:4B00 DD 23 -  -  		inc 	ix
   27 00:4B02 FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 00:4B04 CA B6 4A -  		jp 		z,Command_GOTO
   29 00:4B07 FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 00:4B09 C2 2C 44 -  		jp 		nz,SyntaxError
   31 00:4B0C DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 00:4B0F E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 00:4B11 FE 40 -  -  		cp 		$40
   34 00:4B13 CA B6 4A -  		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 00:4B16 C9 -  -  -  		ret 								; otherwise carry on.
   36 00:4B17 -  -  -  -  		;
   37 00:4B17 -  -  -  -  		;		Failed.
   38 00:4B17 -  -  -  -  		;
   39 00:4B17 -  -  -  -  _IFFail:
   40 00:4B17 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 00:4B19 0E B1 -  -  		ld 		c,KWD_ELSE
   42 00:4B1B CD 49 4B -  		call 	SearchForwardTokens 		; searching forward.
   43 00:4B1E FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 00:4B20 CA 9A 41 -  		jp 		z,EOLHandler 				; do the next line code.
   45 00:4B23 C9 -  -  -  		ret 								; otherwise carry on.
   46 00:4B24 -  -  -  -  
   47 00:4B24 -  -  -  -  ; ***************************************************************************************
   48 00:4B24 -  -  -  -  ;
   49 00:4B24 -  -  -  -  ;						Else command => Progress to next line
   50 00:4B24 -  -  -  -  ;
   51 00:4B24 -  -  -  -  ; ***************************************************************************************
   52 00:4B24 -  -  -  -  
   53 00:4B24 -  -  -  -  Command_Else: ;; [else]
   54 00:4B24 C3 9A 41 -  		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 00:4B27 -  -  -  -  
   56 00:4B27 -  -  -  -  ; ***************************************************************************************
   57 00:4B27 -  -  -  -  ;
   58 00:4B27 -  -  -  -  ;									Changes and Updates
   59 00:4B27 -  -  -  -  ;
   60 00:4B27 -  -  -  -  ; ***************************************************************************************
   61 00:4B27 -  -  -  -  ;
   62 00:4B27 -  -  -  -  ;		Date			Notes
   63 00:4B27 -  -  -  -  ;		==== 			=====
   64 00:4B27 -  -  -  -  ;
   65 00:4B27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4B27 -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:4B27 -  -  -  -  ; ***************************************************************************************
    2 00:4B27 -  -  -  -  ; ***************************************************************************************
    3 00:4B27 -  -  -  -  ;
    4 00:4B27 -  -  -  -  ;		Name : 		repeat.asm
    5 00:4B27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B27 -  -  -  -  ;		Date : 		7th June 2022
    7 00:4B27 -  -  -  -  ;		Reviewed :	No
    8 00:4B27 -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:4B27 -  -  -  -  ;
   10 00:4B27 -  -  -  -  ; ***************************************************************************************
   11 00:4B27 -  -  -  -  
   12 00:4B27 -  -  -  -  ; ***************************************************************************************
   13 00:4B27 -  -  -  -  ;
   14 00:4B27 -  -  -  -  ;									Repeat Command
   15 00:4B27 -  -  -  -  ;
   16 00:4B27 -  -  -  -  ; ***************************************************************************************
   17 00:4B27 -  -  -  -  
   18 00:4B27 -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:4B27 3E 23 -  -  			ld		a,STM_REPEAT
   20 00:4B29 CD 6C 4B -  			call 	StackOpenFrame
   21 00:4B2C CD A1 4B -  			call 	StackSavePosition
   22 00:4B2F C9 -  -  -  			ret
   23 00:4B30 -  -  -  -  
   24 00:4B30 -  -  -  -  ; ***************************************************************************************
   25 00:4B30 -  -  -  -  ;
   26 00:4B30 -  -  -  -  ;									Until command
   27 00:4B30 -  -  -  -  ;
   28 00:4B30 -  -  -  -  ; ***************************************************************************************
   29 00:4B30 -  -  -  -  
   30 00:4B30 -  -  -  -  Command_Until: ;; [until]
   31 00:4B30 3E 23 -  -  			ld		a,STM_REPEAT
   32 00:4B32 CD 9C 4B -  			call 	StackCheckFrame
   33 00:4B35 20 0D -  -  			jr 		nz,_UntilError
   34 00:4B37 CD B4 45 -  			call	EvaluateInteger 		; until what
   35 00:4B3A CD 3D 51 -  			call 	Int32Zero 				; check zero
   36 00:4B3D CA BA 4B -  			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:4B40 CD 8C 4B -  			call 	StackCloseFrame 		; otherwise end frame.
   38 00:4B43 C9 -  -  -  			ret
   39 00:4B44 -  -  -  -  _UntilError:
   40 00:4B44 3E 15 C3 CF 
              43 -  -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:4B49 -  -  -  -  
   42 00:4B49 -  -  -  -  ; ***************************************************************************************
   43 00:4B49 -  -  -  -  ;
   44 00:4B49 -  -  -  -  ;									Changes and Updates
   45 00:4B49 -  -  -  -  ;
   46 00:4B49 -  -  -  -  ; ***************************************************************************************
   47 00:4B49 -  -  -  -  ;
   48 00:4B49 -  -  -  -  ;		Date			Notes
   49 00:4B49 -  -  -  -  ;		==== 			=====
   50 00:4B49 -  -  -  -  ;
   51 00:4B49 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:4B49 -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 00:4B49 -  -  -  -  ; ***************************************************************************************
    2 00:4B49 -  -  -  -  ; ***************************************************************************************
    3 00:4B49 -  -  -  -  ;
    4 00:4B49 -  -  -  -  ;		Name : 		search.asm
    5 00:4B49 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B49 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4B49 -  -  -  -  ;		Reviewed :	No
    8 00:4B49 -  -  -  -  ;		Purpose :	Search forward for token
    9 00:4B49 -  -  -  -  ;
   10 00:4B49 -  -  -  -  ; ***************************************************************************************
   11 00:4B49 -  -  -  -  
   12 00:4B49 -  -  -  -  ; ***************************************************************************************
   13 00:4B49 -  -  -  -  ;
   14 00:4B49 -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 00:4B49 -  -  -  -  ; 		and IX points to next byte.
   16 00:4B49 -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 00:4B49 -  -  -  -  ;
   18 00:4B49 -  -  -  -  ; ***************************************************************************************
   19 00:4B49 -  -  -  -  
   20 00:4B49 -  -  -  -  SearchForwardTokens:
   21 00:4B49 DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 00:4B4C DD 23 -  -  		inc 	ix
   23 00:4B4E B8 -  -  -  		cp 		b 							; exit if either found.
   24 00:4B4F C8 -  -  -  		ret 	z
   25 00:4B50 B9 -  -  -  		cp 		c
   26 00:4B51 C8 -  -  -  		ret 	z
   27 00:4B52 -  -  -  -  		;
   28 00:4B52 FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 00:4B54 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 00:4B56 -  -  -  -  
   31 00:4B56 11 00 00 -  		ld 		de,0 						; put length into DE
   32 00:4B59 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4B5C 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 00:4B5D 13 -  -  -  		inc 	de
   35 00:4B5E DD 19 -  -  		add 	ix,de 						; jump forward
   36 00:4B60 18 E7 -  -  		jr 		SearchForwardTokens
   37 00:4B62 -  -  -  -  
   38 00:4B62 -  -  -  -  ; ***************************************************************************************
   39 00:4B62 -  -  -  -  ;
   40 00:4B62 -  -  -  -  ;									Changes and Updates
   41 00:4B62 -  -  -  -  ;
   42 00:4B62 -  -  -  -  ; ***************************************************************************************
   43 00:4B62 -  -  -  -  ;
   44 00:4B62 -  -  -  -  ;		Date			Notes
   45 00:4B62 -  -  -  -  ;		==== 			=====
   46 00:4B62 -  -  -  -  ;
   47 00:4B62 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4B62 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:4B62 -  -  -  -  ; ***************************************************************************************
    2 00:4B62 -  -  -  -  ; ***************************************************************************************
    3 00:4B62 -  -  -  -  ;
    4 00:4B62 -  -  -  -  ;		Name : 		stack.asm
    5 00:4B62 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B62 -  -  -  -  ;		Date : 		6th June 2022
    7 00:4B62 -  -  -  -  ;		Reviewed :	No
    8 00:4B62 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4B62 -  -  -  -  ;
   10 00:4B62 -  -  -  -  ; ***************************************************************************************
   11 00:4B62 -  -  -  -  ; ***************************************************************************************
   12 00:4B62 -  -  -  -  ;
   13 00:4B62 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:4B62 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 00:4B62 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:4B62 -  -  -  -  ;
   17 00:4B62 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:4B62 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:4B62 -  -  -  -  ;
   20 00:4B62 -  -  -  -  ; ***************************************************************************************
   21 00:4B62 -  -  -  -  ;
   22 00:4B62 -  -  -  -  ;								Clear the stack
   23 00:4B62 -  -  -  -  ;
   24 00:4B62 -  -  -  -  ; ***************************************************************************************
   25 00:4B62 -  -  -  -  
   26 00:4B62 -  -  -  -  StackReset:
   27 00:4B62 2A 38 40 -  		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:4B65 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:4B66 22 54 40 -  		ld 		(BasicSP),hl 				; write out current position
   30 00:4B69 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:4B6B C9 -  -  -  		ret
   32 00:4B6C -  -  -  -  
   33 00:4B6C -  -  -  -  ; ***************************************************************************************
   34 00:4B6C -  -  -  -  ;
   35 00:4B6C -  -  -  -  ;								Open a stack frame type A
   36 00:4B6C -  -  -  -  ;
   37 00:4B6C -  -  -  -  ; ***************************************************************************************
   38 00:4B6C -  -  -  -  
   39 00:4B6C -  -  -  -  StackOpenFrame:
   40 00:4B6C F5 -  -  -  		push 	af 							; save frame type
   41 00:4B6D E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:4B6F 87 -  -  -  		add 	a,a 						; double it
   43 00:4B70 11 00 00 -  		ld 		de,$0000 					; put in UDE
   44 00:4B73 5F -  -  -  		ld 		e,a
   45 00:4B74 2A 54 40 -  		ld 		hl,(BasicSP) 				; get stack pointer
   46 00:4B77 AF -  -  -  		xor 	a
   47 00:4B78 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 00:4B7A 22 54 40 -  		ld 		(BasicSP),hl
   49 00:4B7D F1 -  -  -  		pop 	af 							; copy out frame type
   50 00:4B7E 77 -  -  -  		ld 		(hl),a
   51 00:4B7F ED 5B 3C 40 		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 00:4B83 AF -  -  -  		xor 	a
   53 00:4B84 ED 52 -  -  		sbc 	hl,de
   54 00:4B86 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 00:4B87 3E 16 C3 CF 
              43 -  -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 00:4B8C -  -  -  -  
   57 00:4B8C -  -  -  -  ; ***************************************************************************************
   58 00:4B8C -  -  -  -  ;
   59 00:4B8C -  -  -  -  ;								Close Stack Frame
   60 00:4B8C -  -  -  -  ;
   61 00:4B8C -  -  -  -  ; ***************************************************************************************
   62 00:4B8C -  -  -  -  
   63 00:4B8C -  -  -  -  StackCloseFrame:
   64 00:4B8C 2A 54 40 -  		ld 		hl,(BasicSP)				; get stack frame
   65 00:4B8F 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 00:4B90 E6 0F -  -  		and 	$0F 						; put into UDE
   67 00:4B92 87 -  -  -  		add 	a,a 						; double it
   68 00:4B93 11 00 00 -  		ld 		de,$000000
   69 00:4B96 5F -  -  -  		ld 		e,a
   70 00:4B97 19 -  -  -  		add 	hl,de 						; close it
   71 00:4B98 22 54 40 -  		ld 		(BasicSP),hl 				; write it back
   72 00:4B9B C9 -  -  -  		ret
   73 00:4B9C -  -  -  -  
   74 00:4B9C -  -  -  -  ; ***************************************************************************************
   75 00:4B9C -  -  -  -  ;
   76 00:4B9C -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 00:4B9C -  -  -  -  ;
   78 00:4B9C -  -  -  -  ; ***************************************************************************************
   79 00:4B9C -  -  -  -  
   80 00:4B9C -  -  -  -  StackCheckFrame:
   81 00:4B9C 2A 54 40 -  		ld 		hl,(BasicSP)				; get stack frame
   82 00:4B9F BE -  -  -  		cp 		(hl) 						; get stack marker
   83 00:4BA0 C9 -  -  -  		ret
   84 00:4BA1 -  -  -  -  
   85 00:4BA1 -  -  -  -  ; ***************************************************************************************
   86 00:4BA1 -  -  -  -  ;
   87 00:4BA1 -  -  -  -  ;								Save position on stack
   88 00:4BA1 -  -  -  -  ;
   89 00:4BA1 -  -  -  -  ; ***************************************************************************************
   90 00:4BA1 -  -  -  -  
   91 00:4BA1 -  -  -  -  StackSavePosition:
   92 00:4BA1 2A 54 40 -  		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 00:4BA4 23 -  -  -  		inc 	hl
   94 00:4BA5 ED 5B 58 40 		ld 		de,(CurrentLineStart) 		; work out current start line
   95 00:4BA9 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 00:4BAF -  -  -  -  		;
   97 00:4BAF E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 00:4BB0 DD E5 -  -  		push 	ix 							; HL = current position
   99 00:4BB2 E1 -  -  -  		pop 	hl
  100 00:4BB3 AF -  -  -  		xor 	a 							; calculate offset
  101 00:4BB4 ED 52 -  -  		sbc 	hl,de
  102 00:4BB6 7D -  -  -  		ld 		a,l 						; into A
  103 00:4BB7 E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 00:4BB8 77 -  -  -  		ld 		(hl),a
  105 00:4BB9 C9 -  -  -  		ret
  106 00:4BBA -  -  -  -  
  107 00:4BBA -  -  -  -  ; ***************************************************************************************
  108 00:4BBA -  -  -  -  ;
  109 00:4BBA -  -  -  -  ;								Load position off stack
  110 00:4BBA -  -  -  -  ;
  111 00:4BBA -  -  -  -  ; ***************************************************************************************
  112 00:4BBA -  -  -  -  
  113 00:4BBA -  -  -  -  StackLoadPosition:
  114 00:4BBA 2A 54 40 -  		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 00:4BBD 23 -  -  -  		inc 	hl
  116 00:4BBE E5 -  -  -  		push 	hl 							; save on stack
  117 00:4BBF 7E 23 66 6F 		ld_ind_hl 							; get start of line
  118 00:4BC3 22 58 40 -  		ld 		(CurrentLineStart),hl 		; write it back
  119 00:4BC6 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 00:4BC7 13 -  -  -  		inc 	de
  121 00:4BC8 13 -  -  -  		inc 	de
  122 00:4BC9 13 -  -  -  		inc 	de
  123 00:4BCA 13 -  -  -  		inc 	de
  124 00:4BCB 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 00:4BCC 11 00 00 -  		ld 		de,$000000
  126 00:4BCF 5F -  -  -  		ld 		e,a
  127 00:4BD0 19 -  -  -  		add 	hl,de 						; add to start => position
  128 00:4BD1 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 00:4BD2 DD E1 -  -  		pop 	ix
  130 00:4BD4 C9 -  -  -  		ret
  131 00:4BD5 -  -  -  -  
  132 00:4BD5 -  -  -  -  ; ***************************************************************************************
  133 00:4BD5 -  -  -  -  ;
  134 00:4BD5 -  -  -  -  ;									Changes and Updates
  135 00:4BD5 -  -  -  -  ;
  136 00:4BD5 -  -  -  -  ; ***************************************************************************************
  137 00:4BD5 -  -  -  -  ;
  138 00:4BD5 -  -  -  -  ;		Date			Notes
  139 00:4BD5 -  -  -  -  ;		==== 			=====
  140 00:4BD5 -  -  -  -  ;
  141 00:4BD5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4BD5 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:4BD5 -  -  -  -  ; ***************************************************************************************
    2 00:4BD5 -  -  -  -  ; ***************************************************************************************
    3 00:4BD5 -  -  -  -  ;
    4 00:4BD5 -  -  -  -  ;		Name : 		utility.asm
    5 00:4BD5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BD5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BD5 -  -  -  -  ;		Reviewed :	No
    8 00:4BD5 -  -  -  -  ;		Purpose :	Utility routines
    9 00:4BD5 -  -  -  -  ;
   10 00:4BD5 -  -  -  -  ; ***************************************************************************************
   11 00:4BD5 -  -  -  -  ; ***************************************************************************************
   12 00:4BD5 -  -  -  -  
   13 00:4BD5 -  -  -  -  ; ***************************************************************************************
   14 00:4BD5 -  -  -  -  ;
   15 00:4BD5 -  -  -  -  ;							Print ASCII string at HL
   16 00:4BD5 -  -  -  -  ;
   17 00:4BD5 -  -  -  -  ; ***************************************************************************************
   18 00:4BD5 -  -  -  -  
   19 00:4BD5 -  -  -  -  PrintStringAtHL:
   20 00:4BD5 7E -  -  -  		ld 		a,(hl)
   21 00:4BD6 FE 20 -  -  		cp 		$20		
   22 00:4BD8 D8 -  -  -  		ret 	c
   23 00:4BD9 CD CC 51 -  		call 	SYSPrintChar
   24 00:4BDC 23 -  -  -  		inc 	hl
   25 00:4BDD 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4BDF -  -  -  -  
   27 00:4BDF -  -  -  -  ; ***************************************************************************************
   28 00:4BDF -  -  -  -  ;
   29 00:4BDF -  -  -  -  ;									Changes and Updates
   30 00:4BDF -  -  -  -  ;
   31 00:4BDF -  -  -  -  ; ***************************************************************************************
   32 00:4BDF -  -  -  -  ;
   33 00:4BDF -  -  -  -  ;		Date			Notes
   34 00:4BDF -  -  -  -  ;		==== 			=====
   35 00:4BDF -  -  -  -  ;
   36 00:4BDF -  -  -  -  ; ***************************************************************************************
   37 00:4BDF -  -  -  -  		
Listing for file "_build.asm"
   67 00:4BDF -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:4BDF -  -  -  -  ; ***************************************************************************************
    2 00:4BDF -  -  -  -  ; ***************************************************************************************
    3 00:4BDF -  -  -  -  ;
    4 00:4BDF -  -  -  -  ;		Name : 		create.asm
    5 00:4BDF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BDF -  -  -  -  ;		Date : 		4th June 2022
    7 00:4BDF -  -  -  -  ;		Reviewed :	No
    8 00:4BDF -  -  -  -  ;		Purpose :	Create a variable.
    9 00:4BDF -  -  -  -  ;
   10 00:4BDF -  -  -  -  ; ***************************************************************************************
   11 00:4BDF -  -  -  -  ; ***************************************************************************************
   12 00:4BDF -  -  -  -  
   13 00:4BDF -  -  -  -  ; ***************************************************************************************
   14 00:4BDF -  -  -  -  ;
   15 00:4BDF -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:4BDF -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:4BDF -  -  -  -  ;
   18 00:4BDF -  -  -  -  ; ***************************************************************************************
   19 00:4BDF -  -  -  -  
   20 00:4BDF -  -  -  -  VariableCreate:		
   21 00:4BDF -  -  -  -  		;
   22 00:4BDF -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:4BDF -  -  -  -  		;
   24 00:4BDF 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:4BE2 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:4BE3 E5 -  -  -  		push 	hl 							; save count.
   27 00:4BE4 CD 46 49 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4BE7 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4BE8 -  -  -  -  		;
   30 00:4BE8 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4BE8 -  -  -  -  		;
   32 00:4BE8 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4BE9 -  -  -  -  _VCClear:
   34 00:4BE9 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4BEB 23 -  -  -  		inc 	hl
   36 00:4BEC 0B -  -  -  		dec 	bc
   37 00:4BED 78 -  -  -  		ld		a,b
   38 00:4BEE B1 -  -  -  		or 		c
   39 00:4BEF 20 F8 -  -  		jr 		nz,_VCClear
   40 00:4BF1 E1 -  -  -  		pop 	hl							; restore start address
   41 00:4BF2 -  -  -  -  		;
   42 00:4BF2 -  -  -  -  		;		Now start to create the data.
   43 00:4BF2 -  -  -  -  		;
   44 00:4BF2 E5 -  -  -  		push 	hl 							; save start
   45 00:4BF3 -  -  -  -  		;
   46 00:4BF3 -  -  -  -  		;		Write hash to +0
   47 00:4BF3 -  -  -  -  		;
   48 00:4BF3 3A 8A 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:4BF6 77 -  -  -  		ld 		(hl),a
   50 00:4BF7 23 -  -  -  		inc 	hl
   51 00:4BF8 -  -  -  -  		;
   52 00:4BF8 -  -  -  -  		;		Write list head to +1
   53 00:4BF8 -  -  -  -  		;
   54 00:4BF8 E5 -  -  -  		push 	hl 							; save write position
   55 00:4BF9 2A 8C 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4BFC 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:4C00 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:4C01 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:4C02 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4C08 -  -  -  -  		;
   61 00:4C08 -  -  -  -  		;		Write variable name to +5
   62 00:4C08 -  -  -  -  		;
   63 00:4C08 ED 5B 86 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4C0C 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:4C12 -  -  -  -  		;
   66 00:4C12 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:4C13 2A 8C 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4C16 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4C1C -  -  -  -  		;
   70 00:4C1C EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4C1D C9 -  -  -  		ret
   72 00:4C1E -  -  -  -  
   73 00:4C1E -  -  -  -  ; ***************************************************************************************
   74 00:4C1E -  -  -  -  ;
   75 00:4C1E -  -  -  -  ;									Changes and Updates
   76 00:4C1E -  -  -  -  ;
   77 00:4C1E -  -  -  -  ; ***************************************************************************************
   78 00:4C1E -  -  -  -  ;
   79 00:4C1E -  -  -  -  ;		Date			Notes
   80 00:4C1E -  -  -  -  ;		==== 			=====
   81 00:4C1E -  -  -  -  ;
   82 00:4C1E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4C1E -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4C1E -  -  -  -  ; ***************************************************************************************
    2 00:4C1E -  -  -  -  ; ***************************************************************************************
    3 00:4C1E -  -  -  -  ;
    4 00:4C1E -  -  -  -  ;		Name : 		find.asm
    5 00:4C1E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C1E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C1E -  -  -  -  ;		Reviewed :	No
    8 00:4C1E -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4C1E -  -  -  -  ;
   10 00:4C1E -  -  -  -  ; ***************************************************************************************
   11 00:4C1E -  -  -  -  ; ***************************************************************************************
   12 00:4C1E -  -  -  -  
   13 00:4C1E -  -  -  -  ; ***************************************************************************************
   14 00:4C1E -  -  -  -  ;
   15 00:4C1E -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4C1E -  -  -  -  ; 		variable information at (IX)
   17 00:4C1E -  -  -  -  ;
   18 00:4C1E -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4C1E -  -  -  -  ;		Don't autocreate arrays.
   20 00:4C1E -  -  -  -  ;
   21 00:4C1E -  -  -  -  ; ***************************************************************************************
   22 00:4C1E -  -  -  -  
   23 00:4C1E -  -  -  -  FindVariable:
   24 00:4C1E DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:4C21 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:4C23 D2 2C 44 -  		jp 		nc,SyntaxError 		
   27 00:4C26 -  -  -  -  
   28 00:4C26 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4C29 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4C2B 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4C2D FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:4C2F 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:4C31 -  -  -  -  		;
   34 00:4C31 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:4C31 -  -  -  -  		;
   36 00:4C31 2A 40 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:4C34 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4C37 87 -  -  -  		add 	a,a 						; x4
   39 00:4C38 87 -  -  -  		add 	a,a
   40 00:4C39 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4C3A 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4C3B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4C3D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4C3F DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4C41 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:4C42 C9 -  -  -  		ret
   47 00:4C43 -  -  -  -  		;
   48 00:4C43 -  -  -  -  		;		Not a standard simple variable.
   49 00:4C43 -  -  -  -  		;
   50 00:4C43 -  -  -  -  _FVNotSimple:
   51 00:4C43 CD 9F 4C -  		call 	VariableInformation 		; get information about the variable.
   52 00:4C46 CD D5 4C -  		call 	VariableSearchList 			; search the linked list
   53 00:4C49 38 12 -  -  		jr 		c,_FVNotFound  				
   54 00:4C4B -  -  -  -  		;
   55 00:4C4B -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4C4B -  -  -  -  		;
   57 00:4C4B -  -  -  -  _FVExitReference:		
   58 00:4C4B 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4C4E 19 -  -  -  		add 	hl,de 
   60 00:4C4F -  -  -  -  		;
   61 00:4C4F -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:4C4F -  -  -  -  		;
   63 00:4C4F DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:4C52 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:4C54 CC 78 4C -  		call 	z,ArrayLookup 				; array access required.
   66 00:4C57 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:4C59 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:4C5B AF -  -  -  		xor 	a 							; clear carry and return
   69 00:4C5C C9 -  -  -  		ret
   70 00:4C5D -  -  -  -  		;
   71 00:4C5D -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:4C5D -  -  -  -  		;
   73 00:4C5D -  -  -  -  _FVNotFound:		
   74 00:4C5D 3A 7C 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:4C60 B7 -  -  -  		or 		a
   76 00:4C61 28 0F -  -  		jr 		z,_FVFail
   77 00:4C63 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:4C66 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:4C68 28 08 -  -  		jr 		z,_FVFail
   80 00:4C6A 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   81 00:4C6D CD DF 4B -  		call 	VariableCreate 				; create a new variable.
   82 00:4C70 18 D9 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:4C72 -  -  -  -  
   84 00:4C72 -  -  -  -  _FVFail:
   85 00:4C72 DD 2A 86 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:4C76 37 -  -  -  		scf
   87 00:4C77 C9 -  -  -  		ret
   88 00:4C78 -  -  -  -  
   89 00:4C78 -  -  -  -  ; ***************************************************************************************
   90 00:4C78 -  -  -  -  ;
   91 00:4C78 -  -  -  -  ;									 Array lookup
   92 00:4C78 -  -  -  -  ;
   93 00:4C78 -  -  -  -  ; ***************************************************************************************
   94 00:4C78 -  -  -  -  
   95 00:4C78 -  -  -  -  ArrayLookup:
   96 00:4C78 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:4C79 CD 96 45 -  		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:4C7C D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:4C7D 7C -  -  -  		ld 		a,h
  100 00:4C7E B5 -  -  -  		or 		l
  101 00:4C7F D9 -  -  -  		exx
  102 00:4C80 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:4C82 11 00 00 -  		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:4C85 54 -  -  -  		ld 		d,h
  105 00:4C86 5D -  -  -  		ld 		e,l
  106 00:4C87 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:4C88 E5 -  -  -  		push 	hl
  108 00:4C89 7E 23 66 6F 		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:4C8D AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:4C8E ED 52 -  -  		sbc 	hl,de
  111 00:4C90 DA 9A 4C -  		jp 		c,_ALBadValue 				; if max < index then error
  112 00:4C93 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:4C94 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:4C95 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:4C96 29 -  -  -  		add 	hl,hl
  116 00:4C97 D1 -  -  -  		pop 	de 							; get array base back
  117 00:4C98 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:4C99 C9 -  -  -  		ret
  119 00:4C9A -  -  -  -  
  120 00:4C9A -  -  -  -  _ALBadValue:
  121 00:4C9A 3E 09 C3 CF 
              43 -  -  -  		ERR_INDEX
  122 00:4C9F -  -  -  -  		
  123 00:4C9F -  -  -  -  ; ***************************************************************************************
  124 00:4C9F -  -  -  -  ;
  125 00:4C9F -  -  -  -  ;									Changes and Updates
  126 00:4C9F -  -  -  -  ;
  127 00:4C9F -  -  -  -  ; ***************************************************************************************
  128 00:4C9F -  -  -  -  ;
  129 00:4C9F -  -  -  -  ;		Date			Notes
  130 00:4C9F -  -  -  -  ;		==== 			=====
  131 00:4C9F -  -  -  -  ;
  132 00:4C9F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:4C9F -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4C9F -  -  -  -  ; ***************************************************************************************
    2 00:4C9F -  -  -  -  ; ***************************************************************************************
    3 00:4C9F -  -  -  -  ;
    4 00:4C9F -  -  -  -  ;		Name : 		info.asm
    5 00:4C9F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C9F -  -  -  -  ;		Date : 		4th June 2022
    7 00:4C9F -  -  -  -  ;		Reviewed :	No
    8 00:4C9F -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4C9F -  -  -  -  ;
   10 00:4C9F -  -  -  -  ; ***************************************************************************************
   11 00:4C9F -  -  -  -  ; ***************************************************************************************
   12 00:4C9F -  -  -  -  
   13 00:4C9F -  -  -  -  ; ***************************************************************************************
   14 00:4C9F -  -  -  -  ;
   15 00:4C9F -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4C9F -  -  -  -  ; 		after the identifier.
   17 00:4C9F -  -  -  -  ;
   18 00:4C9F -  -  -  -  ; ***************************************************************************************
   19 00:4C9F -  -  -  -  
   20 00:4C9F -  -  -  -  VariableInformation:
   21 00:4C9F DD 22 86 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4CA3 -  -  -  -  		;
   23 00:4CA3 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4CA3 -  -  -  -  		;
   25 00:4CA3 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4CA5 -  -  -  -  _VICalculateHash:
   27 00:4CA5 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4CA8 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4CAA 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4CAC 80 -  -  -  		add 	a,b 						; add to hash
   31 00:4CAD 07 -  -  -  		rlca
   32 00:4CAE 07 -  -  -  		rlca
   33 00:4CAF 80 -  -  -  		add 	a,b
   34 00:4CB0 47 -  -  -  		ld 		b,a 						; update hash
   35 00:4CB1 DD 23 -  -  		inc 	ix 							; next character
   36 00:4CB3 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:4CB5 -  -  -  -  		;
   38 00:4CB5 -  -  -  -  _VIHashDone:
   39 00:4CB5 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:4CB6 -  -  -  -  		;
   41 00:4CB6 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:4CB6 -  -  -  -  		;
   43 00:4CB6 32 8A 40 -  		ld 		(VarHash),a
   44 00:4CB9 -  -  -  -  		;
   45 00:4CB9 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:4CB9 -  -  -  -  		;		
   47 00:4CB9 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:4CBB 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:4CBE 6F -  -  -  		ld 		l,a
   50 00:4CBF 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:4CC0 29 -  -  -  		add 	hl,hl
   52 00:4CC1 -  -  -  -  		;
   53 00:4CC1 ED 5B 44 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:4CC5 19 -  -  -  		add 	hl,de
   55 00:4CC6 -  -  -  -  		;
   56 00:4CC6 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:4CC9 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:4CCB 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:4CCD 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:4CD0 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:4CD1 -  -  -  -  _VINotArray:
   62 00:4CD1 22 8C 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:4CD4 C9 -  -  -  		ret
   64 00:4CD5 -  -  -  -  
   65 00:4CD5 -  -  -  -  ; ***************************************************************************************
   66 00:4CD5 -  -  -  -  ;
   67 00:4CD5 -  -  -  -  ;									Changes and Updates
   68 00:4CD5 -  -  -  -  ;
   69 00:4CD5 -  -  -  -  ; ***************************************************************************************
   70 00:4CD5 -  -  -  -  ;
   71 00:4CD5 -  -  -  -  ;		Date			Notes
   72 00:4CD5 -  -  -  -  ;		==== 			=====
   73 00:4CD5 -  -  -  -  ;
   74 00:4CD5 -  -  -  -  ; ***************************************************************************************
   75 00:4CD5 -  -  -  -  
Listing for file "_build.asm"
   70 00:4CD5 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:4CD5 -  -  -  -  ; ***************************************************************************************
    2 00:4CD5 -  -  -  -  ; ***************************************************************************************
    3 00:4CD5 -  -  -  -  ;
    4 00:4CD5 -  -  -  -  ;		Name : 		search.asm
    5 00:4CD5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CD5 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4CD5 -  -  -  -  ;		Reviewed :	No
    8 00:4CD5 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:4CD5 -  -  -  -  ;
   10 00:4CD5 -  -  -  -  ; ***************************************************************************************
   11 00:4CD5 -  -  -  -  ; ***************************************************************************************
   12 00:4CD5 -  -  -  -  
   13 00:4CD5 -  -  -  -  ; ***************************************************************************************
   14 00:4CD5 -  -  -  -  ;
   15 00:4CD5 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:4CD5 -  -  -  -  ;		CS if failed.
   17 00:4CD5 -  -  -  -  ;
   18 00:4CD5 -  -  -  -  ; ***************************************************************************************
   19 00:4CD5 -  -  -  -  
   20 00:4CD5 -  -  -  -  VariableSearchList:
   21 00:4CD5 2A 8C 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4CD8 -  -  -  -  		;
   23 00:4CD8 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4CD8 -  -  -  -  		;		the address of the hash record
   25 00:4CD8 -  -  -  -  		;
   26 00:4CD8 -  -  -  -  _VSLLoop:
   27 00:4CD8 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4CDC -  -  -  -  		;
   29 00:4CDC E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4CDD AF -  -  -  		xor 	a
   31 00:4CDE ED 6A -  -  		adc 	hl,hl
   32 00:4CE0 E1 -  -  -  		pop 	hl
   33 00:4CE1 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:4CE3 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:4CE4 C8 -  -  -  		ret 	z
   36 00:4CE5 -  -  -  -  _VSLRecord:
   37 00:4CE5 -  -  -  -  		;
   38 00:4CE5 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:4CE5 -  -  -  -  		;
   40 00:4CE5 3A 8A 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:4CE8 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:4CE9 23 -  -  -  		inc 	hl 							; points to link back
   43 00:4CEA 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4CEC -  -  -  -  		;
   45 00:4CEC -  -  -  -  		;		Now check the name
   46 00:4CEC -  -  -  -  		;
   47 00:4CEC E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4CED 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4CEE 23 -  -  -  		inc 	hl
   50 00:4CEF 23 -  -  -  		inc 	hl
   51 00:4CF0 23 -  -  -  		inc 	hl
   52 00:4CF1 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:4CF5 ED 5B 86 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:4CF9 -  -  -  -  		;
   55 00:4CF9 -  -  -  -  		;		Check individual characters
   56 00:4CF9 -  -  -  -  		;
   57 00:4CF9 -  -  -  -  _VSLCharacter:
   58 00:4CF9 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:4CFA FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4CFC 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4CFE BE -  -  -  		cp 		(hl) 						; compare them
   62 00:4CFF 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:4D00 13 -  -  -  		inc 	de
   64 00:4D01 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:4D03 -  -  -  -  		;
   66 00:4D03 -  -  -  -  _VSLFailed:
   67 00:4D03 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:4D04 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:4D06 -  -  -  -  		;
   70 00:4D06 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:4D06 -  -  -  -  		;		
   72 00:4D06 -  -  -  -  _VSLEndIdentifier:
   73 00:4D06 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:4D07 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4D09 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4D0B -  -  -  -  		;
   77 00:4D0B E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4D0C 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4D0D AF -  -  -  		xor 	a 							; clear carry
   80 00:4D0E C9 -  -  -  		ret
   81 00:4D0F -  -  -  -  
   82 00:4D0F -  -  -  -  ; ***************************************************************************************
   83 00:4D0F -  -  -  -  ;
   84 00:4D0F -  -  -  -  ;									Changes and Updates
   85 00:4D0F -  -  -  -  ;
   86 00:4D0F -  -  -  -  ; ***************************************************************************************
   87 00:4D0F -  -  -  -  ;
   88 00:4D0F -  -  -  -  ;		Date			Notes
   89 00:4D0F -  -  -  -  ;		==== 			=====
   90 00:4D0F -  -  -  -  ;
   91 00:4D0F -  -  -  -  ; ***************************************************************************************
   92 00:4D0F -  -  -  -  		
Listing for file "_build.asm"
   71 00:4D0F -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4D0F -  -  -  -  ;
    2 00:4D0F -  -  -  -  ;	This file is automatically generated.
    3 00:4D0F -  -  -  -  ;
    4 00:4D0F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:4D20 -  -  -  -  PrecedenceTable:
    6 00:4D20 06 -  -  -  	.db	6	; $0083 !
    7 00:4D21 06 -  -  -  	.db	6	; $0084 ?
    8 00:4D22 05 -  -  -  	.db	5	; $0085 *
    9 00:4D23 05 -  -  -  	.db	5	; $0086 /
   10 00:4D24 05 -  -  -  	.db	5	; $0087 mod
   11 00:4D25 05 -  -  -  	.db	5	; $0088 div
   12 00:4D26 04 -  -  -  	.db	4	; $0089 +
   13 00:4D27 04 -  -  -  	.db	4	; $008a -
   14 00:4D28 03 -  -  -  	.db	3	; $008b >=
   15 00:4D29 03 -  -  -  	.db	3	; $008c <=
   16 00:4D2A 03 -  -  -  	.db	3	; $008d >
   17 00:4D2B 03 -  -  -  	.db	3	; $008e <
   18 00:4D2C 03 -  -  -  	.db	3	; $008f =
   19 00:4D2D 03 -  -  -  	.db	3	; $0090 <>
   20 00:4D2E 02 -  -  -  	.db	2	; $0091 and
   21 00:4D2F 01 -  -  -  	.db	1	; $0092 or
   22 00:4D30 01 -  -  -  	.db	1	; $0093 eor
   23 00:4D31 -  -  -  -  
Listing for file "_build.asm"
   72 00:4D31 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4D31 -  -  -  -  ;
    2 00:4D31 -  -  -  -  ;	This is automatically generated.
    3 00:4D31 -  -  -  -  ;
    4 00:4D31 -  -  -  -  ErrorIDTable:
    5 00:4D31 9D 4D 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4D35 A3 4D 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4D39 B4 4D 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:4D3D C2 4D 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4D41 CC 4D 00 00 	.dw	ErrText_data & $FFFF,ErrText_data >> 16
   10 00:4D45 D8 4D 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   11 00:4D49 E2 4D 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   12 00:4D4D FC 4D 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   13 00:4D51 0D 4E 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   14 00:4D55 22 4E 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   15 00:4D59 32 4E 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   16 00:4D5D 47 4E 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   17 00:4D61 55 4E 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   18 00:4D65 66 4E 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   19 00:4D69 74 4E 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   20 00:4D6D 7E 4E 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   21 00:4D71 93 4E 00 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   22 00:4D75 A8 4E 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   23 00:4D79 BE 4E 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   24 00:4D7D CC 4E 00 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   25 00:4D81 DF 4E 00 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   26 00:4D85 F1 4E 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   27 00:4D89 06 4F 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   28 00:4D8D 12 4F 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   29 00:4D91 17 4F 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   30 00:4D95 24 4F 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   31 00:4D99 35 4F 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   32 00:4D9D -  -  -  -  
   33 00:4D9D -  -  -  -  ErrText_warmstart:
   34 00:4D9D 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   35 00:4DA3 -  -  -  -  ErrText_assert:
   36 00:4DA3 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   37 00:4DB4 -  -  -  -  ErrText_badtype:
   38 00:4DB4 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   39 00:4DC2 -  -  -  -  ErrText_badvalue:
   40 00:4DC2 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   41 00:4DCC -  -  -  -  ErrText_data:
   42 00:4DCC 4F 75 74 20 
              6F 66 20 44 
              61 74 61 00 	.db "Out of Data",0
   43 00:4DD8 -  -  -  -  ErrText_dim:
   44 00:4DD8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   45 00:4DE2 -  -  -  -  ErrText_disabled:
   46 00:4DE2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   47 00:4DFC -  -  -  -  ErrText_divzero:
   48 00:4DFC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   49 00:4E0D -  -  -  -  ErrText_gosub:
   50 00:4E0D 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   51 00:4E22 -  -  -  -  ErrText_index:
   52 00:4E22 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   53 00:4E32 -  -  -  -  ErrText_lineno:
   54 00:4E32 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   55 00:4E47 -  -  -  -  ErrText_memory:
   56 00:4E47 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   57 00:4E55 -  -  -  -  ErrText_next:
   58 00:4E55 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   59 00:4E66 -  -  -  -  ErrText_nocomma:
   60 00:4E66 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   61 00:4E74 -  -  -  -  ErrText_nodollar:
   62 00:4E74 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   63 00:4E7E -  -  -  -  ErrText_nolbracket:
   64 00:4E7E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   65 00:4E93 -  -  -  -  ErrText_noproc:
   66 00:4E93 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   67 00:4EA8 -  -  -  -  ErrText_norbracket:
   68 00:4EA8 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   69 00:4EBE -  -  -  -  ErrText_notref:
   70 00:4EBE 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   71 00:4ECC -  -  -  -  ErrText_param:
   72 00:4ECC 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   73 00:4EDF -  -  -  -  ErrText_proc:
   74 00:4EDF 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   75 00:4EF1 -  -  -  -  ErrText_repeat:
   76 00:4EF1 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   77 00:4F06 -  -  -  -  ErrText_stack:
   78 00:4F06 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   79 00:4F12 -  -  -  -  ErrText_stop:
   80 00:4F12 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   81 00:4F17 -  -  -  -  ErrText_syntax:
   82 00:4F17 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   83 00:4F24 -  -  -  -  ErrText_todo:
   84 00:4F24 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   85 00:4F35 -  -  -  -  ErrText_unknownvar:
   86 00:4F35 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   73 00:4F46 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4F46 -  -  -  -  ;
    2 00:4F46 -  -  -  -  ;	Vectors for set 0
    3 00:4F46 -  -  -  -  ;
    4 00:4F46 -  -  -  -  VectorsSet0:
    5 00:4F46 9A 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4F48 22 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4F4A 22 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4F4C 89 44 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4F4E 91 44 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4F50 47 44 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4F52 52 44 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4F54 5D 44 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4F56 52 44 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4F58 31 44 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4F5A 3C 44 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4F5C E4 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4F5E DB 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4F60 C9 44 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4F62 C0 44 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4F64 B7 44 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4F66 D2 44 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4F68 68 44 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4F6A 73 44 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4F6C 7E 44 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4F6E B8 47 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4F70 B2 47 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4F72 F9 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4F74 1F 47 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4F76 EA 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4F78 C7 46 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4F7A 9D 47 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4F7C C5 47 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4F7E D9 46 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4F80 D2 46 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4F82 02 47 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4F84 14 47 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4F86 E8 47 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4F88 EE 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4F8A F9 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4F8C A9 44 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4F8E AD 44 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4F90 F1 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4F92 F1 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4F94 F4 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4F96 F1 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4F98 67 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4F9A F1 40 -  -  	addr(BadCmd_LSBracket)           ; $00aa [
   48 00:4F9C F1 40 -  -  	addr(BadCmd_RSBracket)           ; $00ab ]
   49 00:4F9E F1 40 -  -  	addr(BadCmd_Comma)               ; $00ac ~
   50 00:4FA0 27 4B -  -  	addr(Command_REPEAT)             ; $00ad repeat
   51 00:4FA2 30 4B -  -  	addr(Command_Until)              ; $00ae until
   52 00:4FA4 F5 4A -  -  	addr(Command_IF)                 ; $00af if
   53 00:4FA6 F1 40 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:4FA8 24 4B -  -  	addr(Command_Else)               ; $00b1 else
   55 00:4FAA C1 49 -  -  	addr(Command_FOR)                ; $00b2 for
   56 00:4FAC F1 40 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:4FAE F1 40 -  -  	addr(BadCmd_Step)                ; $00b4 step
   58 00:4FB0 47 4A -  -  	addr(Command_Next)               ; $00b5 next
   59 00:4FB2 F1 40 -  -  	addr(BadCmd_Def)                 ; $00b6 def
   60 00:4FB4 8D 48 -  -  	addr(Command_PROC)               ; $00b7 proc
   61 00:4FB6 DD 48 -  -  	addr(Command_ENDPROC)            ; $00b8 endproc
   62 00:4FB8 92 4A -  -  	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:4FBA A3 4A -  -  	addr(Command_Return)             ; $00ba return
   64 00:4FBC B6 4A -  -  	addr(Command_GOTO)               ; $00bb goto
   65 00:4FBE 0B 48 -  -  	addr(Command_LOCAL)              ; $00bc local
   66 00:4FC0 F5 40 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:4FC2 67 42 -  -  	addr(Command_REM)                ; $00be rem
   68 00:4FC4 AD 41 -  -  	addr(Command_LET)                ; $00bf let
   69 00:4FC6 EA 42 -  -  	addr(Command_VDU)                ; $00c0 vdu
   70 00:4FC8 07 42 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:4FCA 22 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:4FCC 22 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:4FCE 22 40 -  -  	addr(Unimplemented)              ; $00c4 list
   74 00:4FD0 B4 49 -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:4FD2 82 42 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:4FD4 1A 43 -  -  	addr(Command_READ)               ; $00c7 read
   77 00:4FD6 F1 40 -  -  	addr(BadCmd_Data)                ; $00c8 data
   78 00:4FD8 81 43 -  -  	addr(Command_RESTORE)            ; $00c9 restore
   79 00:4FDA E2 40 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:4FDC 63 49 -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:4FDE 95 41 -  -  	addr(Command_END)                ; $00cc end
   82 00:4FE0 E5 42 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:4FE2 -  -  -  -  ;
   84 00:4FE2 -  -  -  -  ;	Vectors for set 1
   85 00:4FE2 -  -  -  -  ;
   86 00:4FE2 -  -  -  -  VectorsSet1:
   87 00:4FE2 -  -  -  -  ;
   88 00:4FE2 -  -  -  -  ;	Vectors for set 2
   89 00:4FE2 -  -  -  -  ;
   90 00:4FE2 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   74 00:4FE2 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4FE2 -  -  -  -  ; ***************************************************************************************
    2 00:4FE2 -  -  -  -  ; ***************************************************************************************
    3 00:4FE2 -  -  -  -  ;
    4 00:4FE2 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4FE2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4FE2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4FE2 -  -  -  -  ;		Reviewed :	No
    8 00:4FE2 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4FE2 -  -  -  -  ;
   10 00:4FE2 -  -  -  -  ; ***************************************************************************************
   11 00:4FE2 -  -  -  -  ; ***************************************************************************************
   12 00:4FE2 -  -  -  -  
   13 00:4FE2 -  -  -  -  ; ***************************************************************************************
   14 00:4FE2 -  -  -  -  ;
   15 00:4FE2 -  -  -  -  ;								Unsigned integer divide
   16 00:4FE2 -  -  -  -  ;
   17 00:4FE2 -  -  -  -  ; ***************************************************************************************
   18 00:4FE2 -  -  -  -  
   19 00:4FE2 -  -  -  -  Int32UDivide:
   20 00:4FE2 37 -  -  -  		scf
   21 00:4FE3 C3 21 50 -  		jp 		_I32UnsignedDivide		
   22 00:4FE6 -  -  -  -  
   23 00:4FE6 -  -  -  -  ; ***************************************************************************************
   24 00:4FE6 -  -  -  -  ;
   25 00:4FE6 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4FE6 -  -  -  -  ;
   27 00:4FE6 -  -  -  -  ; ***************************************************************************************
   28 00:4FE6 -  -  -  -  
   29 00:4FE6 -  -  -  -  Int32SDivide:
   30 00:4FE6 37 -  -  -  		scf
   31 00:4FE7 18 01 -  -  		jr 		_I32SDivide
   32 00:4FE9 -  -  -  -  Int32Modulus:
   33 00:4FE9 AF -  -  -  		xor 	a
   34 00:4FEA -  -  -  -  _I32SDivide:
   35 00:4FEA 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4FEB F5 -  -  -  		push 	af
   37 00:4FEC 08 -  -  -  		ex 		af,af'
   38 00:4FED -  -  -  -  
   39 00:4FED D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4FEE D9 -  -  -  		exx
   41 00:4FEF D5 -  -  -  		push 	de
   42 00:4FF0 D9 -  -  -  		exx
   43 00:4FF1 -  -  -  -  
   44 00:4FF1 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4FF2 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4FF3 CD 0F 50 -  		call 	_I32CheckHLSignSwap
   47 00:4FF6 CD 0F 50 -  		call 	_I32CheckHLSignSwap
   48 00:4FF9 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4FFA F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4FFB F5 -  -  -  		push 	af
   51 00:4FFC CD 21 50 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4FFF F1 -  -  -  		pop 	af 							; get function back
   53 00:5000 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:5002 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:5003 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:5005 C4 6B 51 -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:5008 -  -  -  -  _I32SDExit:
   58 00:5008 D9 -  -  -  		exx 								; restore DE'DE
   59 00:5009 D1 -  -  -  		pop 	de
   60 00:500A D9 -  -  -  		exx
   61 00:500B D1 -  -  -  		pop 	de
   62 00:500C F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:500D 08 -  -  -  		ex 		af,af'
   64 00:500E C9 -  -  -  		ret
   65 00:500F -  -  -  -  
   66 00:500F -  -  -  -  
   67 00:500F -  -  -  -  _I32CheckHLSignSwap:
   68 00:500F D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:5010 CB 7C -  -  		bit 	7,h
   70 00:5012 D9 -  -  -  		exx
   71 00:5013 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:5015 -  -  -  -  		;
   73 00:5015 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:5017 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:5018 CD 6B 51 -  		call 	Int32Negate 				
   76 00:501B F1 -  -  -  		pop 	af
   77 00:501C -  -  -  -  _I32CHSPositive:
   78 00:501C D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:501D EB -  -  -  		ex 		de,hl
   80 00:501E D9 -  -  -  		exx		
   81 00:501F EB -  -  -  		ex 		de,hl
   82 00:5020 C9 -  -  -  		ret
   83 00:5021 -  -  -  -  
   84 00:5021 -  -  -  -  ; ***************************************************************************************
   85 00:5021 -  -  -  -  ;
   86 00:5021 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:5021 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:5021 -  -  -  -  ;
   89 00:5021 -  -  -  -  ; ***************************************************************************************
   90 00:5021 -  -  -  -  
   91 00:5021 -  -  -  -  _I32UnsignedDivide:
   92 00:5021 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:5022 D5 -  -  -  		push 	de
   94 00:5023 D9 -  -  -  		exx
   95 00:5024 C5 -  -  -  		push 	bc
   96 00:5025 D5 -  -  -  		push 	de 							
   97 00:5026 D9 -  -  -  		exx
   98 00:5027 -  -  -  -  
   99 00:5027 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:5028 -  -  -  -  
  101 00:5028 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:5029 B3 -  -  -  		or 		e
  103 00:502A D9 -  -  -  		exx
  104 00:502B B2 -  -  -  		or 		d
  105 00:502C B3 -  -  -  		or 		e
  106 00:502D D9 -  -  -  		exx
  107 00:502E CA 27 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:5031 -  -  -  -  
  109 00:5031 -  -  -  -  
  110 00:5031 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:5032 4D -  -  -  		ld		c,l
  112 00:5033 21 00 00 -  		ld 		hl,$0000
  113 00:5036 D9 -  -  -  		exx
  114 00:5037 44 -  -  -  		ld 		b,h
  115 00:5038 4D -  -  -  		ld		c,l
  116 00:5039 21 00 00 -  		ld 		hl,$0000
  117 00:503C D9 -  -  -  		exx
  118 00:503D -  -  -  -  
  119 00:503D 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:503F -  -  -  -  _I32DivideLoop:
  121 00:503F F5 -  -  -  		push 	af
  122 00:5040 -  -  -  -  
  123 00:5040 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:5042 CB 10 -  -  		rl 		b
  125 00:5044 D9 -  -  -  		exx
  126 00:5045 CB 11 -  -  		rl 		c
  127 00:5047 CB 10 -  -  		rl 		b
  128 00:5049 D9 -  -  -  		exx
  129 00:504A CB 15 -  -  		rl 		l
  130 00:504C CB 14 -  -  		rl 		h
  131 00:504E D9 -  -  -  		exx
  132 00:504F CB 15 -  -  		rl 		l
  133 00:5051 CB 14 -  -  		rl 		h
  134 00:5053 D9 -  -  -  		exx
  135 00:5054 -  -  -  -  
  136 00:5054 CD 11 51 -  		call 	Int32Subtract 				; A = A - M
  137 00:5057 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:5059 -  -  -  -  
  139 00:5059 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:505A 18 03 -  -  		jr 		_I32Next
  141 00:505C -  -  -  -  
  142 00:505C -  -  -  -  _I32Borrow:
  143 00:505C CD 0B 51 -  		call 	Int32Add 					; A = A + M
  144 00:505F -  -  -  -  _I32Next:
  145 00:505F F1 -  -  -  		pop 	af
  146 00:5060 3D -  -  -  		dec 	a
  147 00:5061 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:5063 -  -  -  -  
  149 00:5063 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:5064 -  -  -  -  
  151 00:5064 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:5065 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:5067 -  -  -  -  
  154 00:5067 60 -  -  -  		ld  	h,b
  155 00:5068 69 -  -  -  		ld 		l,c
  156 00:5069 D9 -  -  -  		exx
  157 00:506A 60 -  -  -  		ld  	h,b
  158 00:506B 69 -  -  -  		ld 		l,c
  159 00:506C D9 -  -  -  		exx
  160 00:506D -  -  -  -  _I32Modulus1:		
  161 00:506D D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:506E D1 -  -  -  		pop 	de
  163 00:506F C1 -  -  -  		pop 	bc
  164 00:5070 D9 -  -  -  		exx
  165 00:5071 D1 -  -  -  		pop 	de
  166 00:5072 C1 -  -  -  		pop 	bc
  167 00:5073 C9 -  -  -  		ret
  168 00:5074 -  -  -  -  
  169 00:5074 -  -  -  -  ; ***************************************************************************************
  170 00:5074 -  -  -  -  ;
  171 00:5074 -  -  -  -  ;									Changes and Updates
  172 00:5074 -  -  -  -  ;
  173 00:5074 -  -  -  -  ; ***************************************************************************************
  174 00:5074 -  -  -  -  ;
  175 00:5074 -  -  -  -  ;		Date			Notes
  176 00:5074 -  -  -  -  ;		==== 			=====
  177 00:5074 -  -  -  -  ;
  178 00:5074 -  -  -  -  ; ***************************************************************************************
  179 00:5074 -  -  -  -  		
Listing for file "_build.asm"
   75 00:5074 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:5074 -  -  -  -  ; ***************************************************************************************
    2 00:5074 -  -  -  -  ; ***************************************************************************************
    3 00:5074 -  -  -  -  ;
    4 00:5074 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:5074 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5074 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:5074 -  -  -  -  ;		Reviewed :	No
    8 00:5074 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:5074 -  -  -  -  ;
   10 00:5074 -  -  -  -  ; ***************************************************************************************
   11 00:5074 -  -  -  -  ; ***************************************************************************************
   12 00:5074 -  -  -  -  
   13 00:5074 -  -  -  -  ; ***************************************************************************************
   14 00:5074 -  -  -  -  ;
   15 00:5074 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:5074 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:5074 -  -  -  -  ;
   18 00:5074 -  -  -  -  ; ***************************************************************************************
   19 00:5074 -  -  -  -  
   20 00:5074 -  -  -  -  Int32FromString:
   21 00:5074 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:5075 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:5076 D5 -  -  -  		push 	de
   24 00:5077 D9 -  -  -  		exx
   25 00:5078 D5 -  -  -  		push 	de
   26 00:5079 -  -  -  -  
   27 00:5079 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:507C 11 00 00 -  		ld 		de,$0000
   29 00:507F D9 -  -  -  		exx
   30 00:5080 21 00 00 -  		ld 		hl,$0000
   31 00:5083 11 00 00 -  		ld 		de,$0000
   32 00:5086 D9 -  -  -  		exx
   33 00:5087 -  -  -  -  
   34 00:5087 5F -  -  -  		ld 		e,a 						; base in E
   35 00:5088 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:508A 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:508C ED 44 -  -  		neg 		 						; fix up the base
   38 00:508E 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:508F -  -  -  -  		;
   40 00:508F 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:5090 F5 -  -  -  		push 	af
   42 00:5091 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:5093 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:5094 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:5096 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:5097 18 01 -  -  		jr 		_I32FSMain
   47 00:5099 -  -  -  -  _I32FSNotSigned:		
   48 00:5099 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:509A -  -  -  -  		;
   50 00:509A -  -  -  -  		; 		Main conversion loop.
   51 00:509A -  -  -  -  		; 		
   52 00:509A -  -  -  -  _I32FSMain:		
   53 00:509A 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:509B FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:509D 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:509F D6 20 -  -  		sub 	32
   57 00:50A1 -  -  -  -  _I32FSNotLower:
   58 00:50A1 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:50A3 38 21 -  -  		jr 		c,_I32FSExit
   60 00:50A5 FE 3A -  -  		cp 		'9'+1
   61 00:50A7 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:50A9 FE 41 -  -  		cp 		'A'
   63 00:50AB 38 19 -  -  		jr 		c,_I32FSExit
   64 00:50AD FE 47 -  -  		cp 		'F'+1
   65 00:50AF 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:50B1 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:50B3 -  -  -  -  _I32FSOkay:
   68 00:50B3 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:50B5 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:50B6 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:50B8 03 -  -  -  		inc 	bc 							; consume character
   72 00:50B9 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:50BA F5 -  -  -  		push 	af 							; save additive on stack
   74 00:50BB CD D5 50 -  		call 	Int32Multiply 				; result *= base
   75 00:50BE F1 -  -  -  		pop 	af 							; additive in DE
   76 00:50BF 5F -  -  -  		ld 		e,a
   77 00:50C0 CD 0B 51 -  		call 	Int32Add 					; and add it.
   78 00:50C3 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:50C4 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:50C6 -  -  -  -  
   81 00:50C6 -  -  -  -  _I32FSExit:
   82 00:50C6 F1 -  -  -  		pop 	af 							; get sign back
   83 00:50C7 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:50C9 CC 6B 51 -  		call 	z,Int32Negate
   85 00:50CC 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:50CD D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:50CE D9 -  -  -  		exx
   88 00:50CF D1 -  -  -  		pop 	de
   89 00:50D0 D9 -  -  -  		exx
   90 00:50D1 C1 -  -  -  		pop 	bc
   91 00:50D2 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:50D4 C9 -  -  -  		ret				
   93 00:50D5 -  -  -  -  
   94 00:50D5 -  -  -  -  ; ***************************************************************************************
   95 00:50D5 -  -  -  -  ;
   96 00:50D5 -  -  -  -  ;									Changes and Updates
   97 00:50D5 -  -  -  -  ;
   98 00:50D5 -  -  -  -  ; ***************************************************************************************
   99 00:50D5 -  -  -  -  ;
  100 00:50D5 -  -  -  -  ;		Date			Notes
  101 00:50D5 -  -  -  -  ;		==== 			=====
  102 00:50D5 -  -  -  -  ;
  103 00:50D5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   76 00:50D5 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:50D5 -  -  -  -  ; ***************************************************************************************
    2 00:50D5 -  -  -  -  ; ***************************************************************************************
    3 00:50D5 -  -  -  -  ;
    4 00:50D5 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:50D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:50D5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:50D5 -  -  -  -  ;		Reviewed :	No
    8 00:50D5 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:50D5 -  -  -  -  ;
   10 00:50D5 -  -  -  -  ; ***************************************************************************************
   11 00:50D5 -  -  -  -  ; ***************************************************************************************
   12 00:50D5 -  -  -  -  
   13 00:50D5 -  -  -  -  Int32Multiply:
   14 00:50D5 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:50D6 D5 -  -  -  		push 	de
   16 00:50D7 44 -  -  -  		ld 		b,h
   17 00:50D8 4D -  -  -  		ld 		c,l
   18 00:50D9 21 00 00 -  		ld 		hl,$0000
   19 00:50DC -  -  -  -  
   20 00:50DC D9 -  -  -  		exx
   21 00:50DD C5 -  -  -  		push 	bc
   22 00:50DE D5 -  -  -  		push 	de
   23 00:50DF 44 -  -  -  		ld 		b,h
   24 00:50E0 4D -  -  -  		ld 		c,l
   25 00:50E1 21 00 00 -  		ld 		hl,$0000		
   26 00:50E4 D9 -  -  -  		exx
   27 00:50E5 -  -  -  -  
   28 00:50E5 -  -  -  -  _I32MultiplyLoop:
   29 00:50E5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:50E7 C4 0B 51 -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:50EA -  -  -  -  		;
   32 00:50EA D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:50EB CB 38 -  -  		srl 	b
   34 00:50ED CB 19 -  -  		rr 		c
   35 00:50EF D9 -  -  -  		exx
   36 00:50F0 CB 18 -  -  		rr 		b
   37 00:50F2 CB 19 -  -  		rr 		c
   38 00:50F4 -  -  -  -  		;
   39 00:50F4 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:50F6 CB 12 -  -  		rl 		d
   41 00:50F8 D9 -  -  -  		exx
   42 00:50F9 CB 13 -  -  		rl 		e
   43 00:50FB CB 12 -  -  		rl 		d
   44 00:50FD -  -  -  -  
   45 00:50FD 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:50FE B1 -  -  -  		or 		c
   47 00:50FF D9 -  -  -  		exx
   48 00:5100 B0 -  -  -  		or 		b
   49 00:5101 B1 -  -  -  		or 		c
   50 00:5102 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:5104 -  -  -  -  
   52 00:5104 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:5105 D1 -  -  -  		pop 	de
   54 00:5106 C1 -  -  -  		pop 	bc
   55 00:5107 D9 -  -  -  		exx
   56 00:5108 D1 -  -  -  		pop 	de
   57 00:5109 C1 -  -  -  		pop 	bc
   58 00:510A C9 -  -  -  		ret
   59 00:510B -  -  -  -  
   60 00:510B -  -  -  -  ; ***************************************************************************************
   61 00:510B -  -  -  -  ;
   62 00:510B -  -  -  -  ;									Changes and Updates
   63 00:510B -  -  -  -  ;
   64 00:510B -  -  -  -  ; ***************************************************************************************
   65 00:510B -  -  -  -  ;
   66 00:510B -  -  -  -  ;		Date			Notes
   67 00:510B -  -  -  -  ;		==== 			=====
   68 00:510B -  -  -  -  ;
   69 00:510B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 00:510B -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:510B -  -  -  -  ; ***************************************************************************************
    2 00:510B -  -  -  -  ; ***************************************************************************************
    3 00:510B -  -  -  -  ;
    4 00:510B -  -  -  -  ;		Name : 		isimple.asm
    5 00:510B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:510B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:510B -  -  -  -  ;		Reviewed :	No
    8 00:510B -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:510B -  -  -  -  ;
   10 00:510B -  -  -  -  ; ***************************************************************************************
   11 00:510B -  -  -  -  ; ***************************************************************************************
   12 00:510B -  -  -  -  
   13 00:510B -  -  -  -  ; ***************************************************************************************
   14 00:510B -  -  -  -  ;
   15 00:510B -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:510B -  -  -  -  ;
   17 00:510B -  -  -  -  ; ***************************************************************************************
   18 00:510B -  -  -  -  
   19 00:510B -  -  -  -  Int32Add:
   20 00:510B 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:510C D9 -  -  -  		exx
   22 00:510D ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:510F D9 -  -  -  		exx
   24 00:5110 C9 -  -  -  		ret
   25 00:5111 -  -  -  -  
   26 00:5111 -  -  -  -  ; ***************************************************************************************
   27 00:5111 -  -  -  -  ;
   28 00:5111 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:5111 -  -  -  -  ;
   30 00:5111 -  -  -  -  ; ***************************************************************************************
   31 00:5111 -  -  -  -  
   32 00:5111 -  -  -  -  Int32Subtract:
   33 00:5111 AF -  -  -  		xor 	a 							; clear carry
   34 00:5112 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:5114 D9 -  -  -  		exx
   36 00:5115 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:5117 D9 -  -  -  		exx
   38 00:5118 C9 -  -  -  		ret
   39 00:5119 -  -  -  -  
   40 00:5119 -  -  -  -  ; ***************************************************************************************
   41 00:5119 -  -  -  -  ;
   42 00:5119 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:5119 -  -  -  -  ;
   44 00:5119 -  -  -  -  ; ***************************************************************************************
   45 00:5119 -  -  -  -  
   46 00:5119 -  -  -  -  Int32And:
   47 00:5119 D9 -  -  -  		exx
   48 00:511A CD 1E 51 -  		call 	_I32AndHLDE
   49 00:511D D9 -  -  -  		exx
   50 00:511E -  -  -  -  _I32AndHLDE:		
   51 00:511E 7C -  -  -  		ld 		a,h
   52 00:511F A2 -  -  -  		and 	d
   53 00:5120 67 -  -  -  		ld 		h,a
   54 00:5121 7D -  -  -  		ld 		a,l
   55 00:5122 A3 -  -  -  		and 	e
   56 00:5123 6F -  -  -  		ld 		l,a
   57 00:5124 C9 -  -  -  		ret
   58 00:5125 -  -  -  -  
   59 00:5125 -  -  -  -  ; ***************************************************************************************
   60 00:5125 -  -  -  -  ;
   61 00:5125 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:5125 -  -  -  -  ;
   63 00:5125 -  -  -  -  ; ***************************************************************************************
   64 00:5125 -  -  -  -  
   65 00:5125 -  -  -  -  Int32Or:
   66 00:5125 D9 -  -  -  		exx
   67 00:5126 CD 2A 51 -  		call 	_I32OrHLDE
   68 00:5129 D9 -  -  -  		exx
   69 00:512A -  -  -  -  _I32OrHLDE:		
   70 00:512A 7C -  -  -  		ld 		a,h
   71 00:512B B2 -  -  -  		or 		d
   72 00:512C 67 -  -  -  		ld 		h,a
   73 00:512D 7D -  -  -  		ld 		a,l
   74 00:512E B3 -  -  -  		or 		e
   75 00:512F 6F -  -  -  		ld 		l,a
   76 00:5130 C9 -  -  -  		ret
   77 00:5131 -  -  -  -  
   78 00:5131 -  -  -  -  ; ***************************************************************************************
   79 00:5131 -  -  -  -  ;
   80 00:5131 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:5131 -  -  -  -  ;
   82 00:5131 -  -  -  -  ; ***************************************************************************************
   83 00:5131 -  -  -  -  
   84 00:5131 -  -  -  -  Int32Xor:
   85 00:5131 D9 -  -  -  		exx
   86 00:5132 CD 36 51 -  		call 	_I32XorHLDE
   87 00:5135 D9 -  -  -  		exx
   88 00:5136 -  -  -  -  _I32XorHLDE:		
   89 00:5136 7C -  -  -  		ld 		a,h
   90 00:5137 AA -  -  -  		xor 	d
   91 00:5138 67 -  -  -  		ld 		h,a
   92 00:5139 7D -  -  -  		ld 		a,l
   93 00:513A AB -  -  -  		xor 	e
   94 00:513B 6F -  -  -  		ld 		l,a
   95 00:513C C9 -  -  -  		ret
   96 00:513D -  -  -  -  
   97 00:513D -  -  -  -  ; ***************************************************************************************
   98 00:513D -  -  -  -  ;
   99 00:513D -  -  -  -  ;								 Check if HL'HL zero
  100 00:513D -  -  -  -  ;
  101 00:513D -  -  -  -  ; ***************************************************************************************
  102 00:513D -  -  -  -  
  103 00:513D -  -  -  -  Int32Zero:
  104 00:513D D9 -  -  -  		exx
  105 00:513E 7D -  -  -  		ld 		a,l
  106 00:513F B4 -  -  -  		or 		h
  107 00:5140 D9 -  -  -  		exx
  108 00:5141 B5 -  -  -  		or 		l
  109 00:5142 B4 -  -  -  		or 		h
  110 00:5143 C9 -  -  -  		ret
  111 00:5144 -  -  -  -  
  112 00:5144 -  -  -  -  ; ***************************************************************************************
  113 00:5144 -  -  -  -  ;
  114 00:5144 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:5144 -  -  -  -  ;
  116 00:5144 -  -  -  -  ; ***************************************************************************************
  117 00:5144 -  -  -  -  
  118 00:5144 -  -  -  -  Int32Compare:
  119 00:5144 E5 -  -  -  		push 	hl 							; save HL
  120 00:5145 AF -  -  -  		xor 	a 							; clear carry
  121 00:5146 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:5148 D9 -  -  -  		exx
  123 00:5149 E5 -  -  -  		push 	hl 							; save HL'
  124 00:514A ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:514C -  -  -  -  		;
  126 00:514C 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:514D E2 54 51 -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:5150 78 -  -  -  		ld 		a,b
  129 00:5151 EE 80 -  -  		xor 	$80
  130 00:5153 47 -  -  -  		ld 		b,a
  131 00:5154 -  -  -  -  _I32CNoOverflow:
  132 00:5154 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:5155 B5 -  -  -  		or 		l
  134 00:5156 D9 -  -  -  		exx 
  135 00:5157 B4 -  -  -  		or 		h
  136 00:5158 B5 -  -  -  		or 		l
  137 00:5159 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:515B -  -  -  -  		;
  139 00:515B D9 -  -  -  		exx 								; is B' -ve 	
  140 00:515C CB 78 -  -  		bit 	7,b
  141 00:515E D9 -  -  -  		exx
  142 00:515F 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:5161 28 02 -  -  		jr 		z,_I32NotPos
  144 00:5163 3E FF -  -  		ld 		a,$FF
  145 00:5165 -  -  -  -  _I32NotPos:
  146 00:5165 D9 -  -  -  		exx
  147 00:5166 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:5167 D9 -  -  -  		exx
  149 00:5168 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:5169 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:516A C9 -  -  -  		ret
  152 00:516B -  -  -  -  
  153 00:516B -  -  -  -  ; ***************************************************************************************
  154 00:516B -  -  -  -  ;
  155 00:516B -  -  -  -  ;										Negate HL'HL
  156 00:516B -  -  -  -  ;
  157 00:516B -  -  -  -  ; ***************************************************************************************
  158 00:516B -  -  -  -  
  159 00:516B -  -  -  -  Int32Negate:
  160 00:516B AF -  -  -  		xor 	a
  161 00:516C CD 75 51 -  		call 	_I32NSubtract
  162 00:516F D9 -  -  -  		exx
  163 00:5170 CD 75 51 -  		call 	_I32NSubtract
  164 00:5173 D9 -  -  -  		exx
  165 00:5174 C9 -  -  -  		ret
  166 00:5175 -  -  -  -  _I32NSubtract:
  167 00:5175 D5 -  -  -  		push 	de
  168 00:5176 EB -  -  -  		ex 		de,hl
  169 00:5177 21 00 00 -  		ld 		hl,$0000
  170 00:517A ED 52 -  -  		zm_sbc_hlde_16		
  171 00:517C D1 -  -  -  		pop 	de
  172 00:517D C9 -  -  -  		ret
  173 00:517E -  -  -  -  		
  174 00:517E -  -  -  -  ; ***************************************************************************************
  175 00:517E -  -  -  -  ;
  176 00:517E -  -  -  -  ;									Changes and Updates
  177 00:517E -  -  -  -  ;
  178 00:517E -  -  -  -  ; ***************************************************************************************
  179 00:517E -  -  -  -  ;
  180 00:517E -  -  -  -  ;		Date			Notes
  181 00:517E -  -  -  -  ;		==== 			=====
  182 00:517E -  -  -  -  ;
  183 00:517E -  -  -  -  ; ***************************************************************************************
  184 00:517E -  -  -  -  		
Listing for file "_build.asm"
   78 00:517E -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:517E -  -  -  -  ; ***************************************************************************************
    2 00:517E -  -  -  -  ; ***************************************************************************************
    3 00:517E -  -  -  -  ;
    4 00:517E -  -  -  -  ;		Name : 		itostring.asm
    5 00:517E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:517E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:517E -  -  -  -  ;		Reviewed :	No
    8 00:517E -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:517E -  -  -  -  ;
   10 00:517E -  -  -  -  ; ***************************************************************************************
   11 00:517E -  -  -  -  ;
   12 00:517E -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:517E -  -  -  -  ;
   14 00:517E -  -  -  -  ; ***************************************************************************************
   15 00:517E -  -  -  -  
   16 00:517E -  -  -  -  Int32ToString:
   17 00:517E C5 -  -  -  		push 	bc 							; save string start
   18 00:517F D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:5180 E5 -  -  -  		push 	hl
   20 00:5181 11 00 00 -  		ld	 	de,$0000
   21 00:5184 D9 -  -  -  		exx
   22 00:5185 D5 -  -  -  		push 	de
   23 00:5186 E5 -  -  -  		push 	hl
   24 00:5187 11 00 00 -  		ld 		de,$000
   25 00:518A D9 -  -  -  		exx
   26 00:518B 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:518C -  -  -  -  		;
   28 00:518C CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:518E 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:5190 ED 44 -  -  		neg 								; negate base and put in E
   31 00:5192 5F -  -  -  		ld 		e,a
   32 00:5193 -  -  -  -  		;
   33 00:5193 D9 -  -  -  		exx 								; is it -ve ?
   34 00:5194 CB 7C -  -  		bit 	7,h
   35 00:5196 D9 -  -  -  		exx
   36 00:5197 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:5199 -  -  -  -  		;
   38 00:5199 CD 6B 51 -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:519C -  -  -  -  		;
   40 00:519C 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:519E 02 -  -  -  		ld 		(bc),a
   42 00:519F 03 -  -  -  		inc 	bc
   43 00:51A0 -  -  -  -  _I32TSNotNegative:	
   44 00:51A0 CD AE 51 -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:51A3 -  -  -  -  _I32TSExit:
   46 00:51A3 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:51A5 02 -  -  -  		ld 		(bc),a 
   48 00:51A6 -  -  -  -  
   49 00:51A6 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:51A7 E1 -  -  -  		pop 	hl
   51 00:51A8 D1 -  -  -  		pop 	de
   52 00:51A9 D9 -  -  -  		exx
   53 00:51AA E1 -  -  -  		pop 	hl
   54 00:51AB D1 -  -  -  		pop 	de
   55 00:51AC C1 -  -  -  		pop 	bc
   56 00:51AD C9 -  -  -  		ret
   57 00:51AE -  -  -  -  
   58 00:51AE -  -  -  -  _I32RecursiveConvert:
   59 00:51AE CD E2 4F -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:51B1 F5 -  -  -  		push 	af 							; save remainder
   61 00:51B2 CD 3D 51 -  		call 	Int32Zero		 			; check result is non zero
   62 00:51B5 C4 AE 51 -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:51B8 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:51B9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:51BB 38 02 -  -  		jr 		c,_I32NotHex
   66 00:51BD C6 07 -  -  		add 	a,7
   67 00:51BF -  -  -  -  _I32NotHex:
   68 00:51BF C6 30 -  -  		add 	a,48
   69 00:51C1 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:51C2 03 -  -  -  		inc 	bc
   71 00:51C3 C9 -  -  -  		ret		
   72 00:51C4 -  -  -  -  
   73 00:51C4 -  -  -  -  ; ***************************************************************************************
   74 00:51C4 -  -  -  -  ;
   75 00:51C4 -  -  -  -  ;									Changes and Updates
   76 00:51C4 -  -  -  -  ;
   77 00:51C4 -  -  -  -  ; ***************************************************************************************
   78 00:51C4 -  -  -  -  ;
   79 00:51C4 -  -  -  -  ;		Date			Notes
   80 00:51C4 -  -  -  -  ;		==== 			=====
   81 00:51C4 -  -  -  -  ;
   82 00:51C4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 00:51C4 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:51C4 -  -  -  -  ; ***************************************************************************************
    2 00:51C4 -  -  -  -  ; ***************************************************************************************
    3 00:51C4 -  -  -  -  ;
    4 00:51C4 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:51C4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:51C4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:51C4 -  -  -  -  ;		Reviewed :	No
    8 00:51C4 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:51C4 -  -  -  -  ;
   10 00:51C4 -  -  -  -  ; ***************************************************************************************
   11 00:51C4 -  -  -  -  ; ***************************************************************************************
   12 00:51C4 -  -  -  -  
   13 00:51C4 -  -  -  -  #ifdef AQUARIUS
   14 00:51C4 -  -  -  -  
   15 00:51C4 -  -  -  -  ; ***************************************************************************************
   16 00:51C4 -  -  -  -  ;
   17 00:51C4 -  -  -  -  ;								Initialise system stuff
   18 00:51C4 -  -  -  -  ;
   19 00:51C4 -  -  -  -  ; ***************************************************************************************
   20 00:51C4 -  -  -  -  
   21 00:51C4 -  -  -  -  SYSInitialise:
   22 00:51C4 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:51C6 CD CC 51 -  	call 	SYSPrintChar
   24 00:51C9 C9 -  -  -  	ret
   25 00:51CA -  -  -  -  
   26 00:51CA -  -  -  -  ; ***************************************************************************************
   27 00:51CA -  -  -  -  ;
   28 00:51CA -  -  -  -  ;								Terminate system stuff
   29 00:51CA -  -  -  -  ;
   30 00:51CA -  -  -  -  ; ***************************************************************************************
   31 00:51CA -  -  -  -  
   32 00:51CA -  -  -  -  SYSTerminate:
   33 00:51CA 18 FE -  -  	jr 		SYSTerminate
   34 00:51CC -  -  -  -  
   35 00:51CC -  -  -  -  ; ***************************************************************************************
   36 00:51CC -  -  -  -  ;
   37 00:51CC -  -  -  -  ;						Print A character (note 13,10 required for CRLF)
   38 00:51CC -  -  -  -  ;
   39 00:51CC -  -  -  -  ; ***************************************************************************************
   40 00:51CC -  -  -  -  
   41 00:51CC -  -  -  -  SYSPrintChar:
   42 00:51CC F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:51CD C5 -  -  -  	push 	bc
   44 00:51CE D5 -  -  -  	push 	de
   45 00:51CF E5 -  -  -  	push 	hl
   46 00:51D0 DD E5 -  -  	push 	ix
   47 00:51D2 FD E5 -  -  	push 	iy
   48 00:51D4 D9 -  -  -  	exx
   49 00:51D5 C5 -  -  -  	push 	bc
   50 00:51D6 D5 -  -  -  	push 	de
   51 00:51D7 E5 -  -  -  	push 	hl
   52 00:51D8 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:51DB E1 -  -  -  	pop 	hl
   54 00:51DC D1 -  -  -  	pop 	de
   55 00:51DD C1 -  -  -  	pop 	bc
   56 00:51DE D9 -  -  -  	exx
   57 00:51DF FD E1 -  -  	pop 	iy
   58 00:51E1 DD E1 -  -  	pop 	ix
   59 00:51E3 E1 -  -  -  	pop 	hl
   60 00:51E4 D1 -  -  -  	pop 	de
   61 00:51E5 C1 -  -  -  	pop 	bc
   62 00:51E6 F1 -  -  -  	pop 	af
   63 00:51E7 C9 -  -  -  	ret		
   64 00:51E8 -  -  -  -  
   65 00:51E8 -  -  -  -  ; ***************************************************************************************
   66 00:51E8 -  -  -  -  ;
   67 00:51E8 -  -  -  -  ;									Print Newline
   68 00:51E8 -  -  -  -  ;
   69 00:51E8 -  -  -  -  ; ***************************************************************************************
   70 00:51E8 -  -  -  -  
   71 00:51E8 -  -  -  -  SYSPrintCRLF:
   72 00:51E8 F5 -  -  -  	push 	af
   73 00:51E9 3E 0D -  -  	ld 		a,13
   74 00:51EB CD CC 51 -  	call 	SYSPrintChar
   75 00:51EE 3E 0A -  -  	ld 		a,10
   76 00:51F0 CD CC 51 -  	call 	SYSPrintChar
   77 00:51F3 F1 -  -  -  	pop 	af
   78 00:51F4 C9 -  -  -  	ret
   79 00:51F5 -  -  -  -  
   80 00:51F5 -  -  -  -  ; ***************************************************************************************
   81 00:51F5 -  -  -  -  ;
   82 00:51F5 -  -  -  -  ;									Get time into HL'HL
   83 00:51F5 -  -  -  -  ;
   84 00:51F5 -  -  -  -  ; ***************************************************************************************
   85 00:51F5 -  -  -  -  
   86 00:51F5 -  -  -  -  SYSGetTimer:
   87 00:51F5 DB 00 -  -   	in 		a,($00)
   88 00:51F7 6F -  -  -   	ld 		l,a
   89 00:51F8 DB 01 -  -   	in 		a,($01)
   90 00:51FA 67 -  -  -   	ld 		h,a
   91 00:51FB D9 -  -  -   	exx
   92 00:51FC DB 02 -  -   	in 		a,($02)
   93 00:51FE 6F -  -  -   	ld 		l,a
   94 00:51FF DB 03 -  -   	in 		a,($03)
   95 00:5201 67 -  -  -   	ld 		h,a
   96 00:5202 D9 -  -  -   	exx
   97 00:5203 C9 -  -  -  	ret 	
   98 00:5204 -  -  -  -  	
   99 00:5204 -  -  -  -  #endif
  100 00:5204 -  -  -  -  
  101 00:5204 -  -  -  -  ; ***************************************************************************************
  102 00:5204 -  -  -  -  ;
  103 00:5204 -  -  -  -  ;									Changes and Updates
  104 00:5204 -  -  -  -  ;
  105 00:5204 -  -  -  -  ; ***************************************************************************************
  106 00:5204 -  -  -  -  ;
  107 00:5204 -  -  -  -  ;		Date			Notes
  108 00:5204 -  -  -  -  ;		==== 			=====
  109 00:5204 -  -  -  -  ;
  110 00:5204 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 00:5204 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:5204 -  -  -  -  ; ***************************************************************************************
    2 00:5204 -  -  -  -  ; ***************************************************************************************
    3 00:5204 -  -  -  -  ;
    4 00:5204 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:5204 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5204 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:5204 -  -  -  -  ;		Reviewed :	No
    8 00:5204 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:5204 -  -  -  -  ;
   10 00:5204 -  -  -  -  ; ***************************************************************************************
   11 00:5204 -  -  -  -  ; ***************************************************************************************
   12 00:5204 -  -  -  -  
   13 00:5204 -  -  -  -  #ifdef CLEANEZ80
   14 00:5204             
   15 00:5204             ; ***************************************************************************************
   16 00:5204             ;
   17 00:5204             ;								Initialise system stuff
   18 00:5204             ;
   19 00:5204             ; ***************************************************************************************
   20 00:5204             
   21 00:5204             SYSInitialise:
   22 00:5204             	ret
   23 00:5204             
   24 00:5204             ; ***************************************************************************************
   25 00:5204             ;
   26 00:5204             ;								Terminate system stuff
   27 00:5204             ;
   28 00:5204             ; ***************************************************************************************
   29 00:5204             
   30 00:5204             SYSTerminate:
   31 00:5204             	ret
   32 00:5204             
   33 00:5204             ; ***************************************************************************************
   34 00:5204             ;
   35 00:5204             ;								Print A character
   36 00:5204             ;
   37 00:5204             ; ***************************************************************************************
   38 00:5204             
   39 00:5204             SYSPrintChar:
   40 00:5204             	ret		
   41 00:5204             
   42 00:5204             ; ***************************************************************************************
   43 00:5204             ;
   44 00:5204             ;									Print Newline
   45 00:5204             ;
   46 00:5204             ; ***************************************************************************************
   47 00:5204             
   48 00:5204             SYSPrintCRLF:
   49 00:5204             	ret
   50 00:5204             
   51 00:5204             ; ***************************************************************************************
   52 00:5204             ;
   53 00:5204             ;									Get time into HL'HL
   54 00:5204             ;
   55 00:5204             ; ***************************************************************************************
   56 00:5204             
   57 00:5204             SYSGetTimer:
   58 00:5204             	ret
   59 00:5204             
   60 00:5204             #endif
   61 00:5204 -  -  -  -  
   62 00:5204 -  -  -  -  ; ***************************************************************************************
   63 00:5204 -  -  -  -  ;
   64 00:5204 -  -  -  -  ;									Changes and Updates
   65 00:5204 -  -  -  -  ;
   66 00:5204 -  -  -  -  ; ***************************************************************************************
   67 00:5204 -  -  -  -  ;
   68 00:5204 -  -  -  -  ;		Date			Notes
   69 00:5204 -  -  -  -  ;		==== 			=====
   70 00:5204 -  -  -  -  ;
   71 00:5204 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 00:5204 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:5204 -  -  -  -  ; ***************************************************************************************
    2 00:5204 -  -  -  -  ; ***************************************************************************************
    3 00:5204 -  -  -  -  ;
    4 00:5204 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:5204 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5204 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:5204 -  -  -  -  ;		Reviewed :	No
    8 00:5204 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:5204 -  -  -  -  ;
   10 00:5204 -  -  -  -  ; ***************************************************************************************
   11 00:5204 -  -  -  -  ; ***************************************************************************************
   12 00:5204 -  -  -  -  
   13 00:5204 -  -  -  -  #ifdef TI84
   14 00:5204             
   15 00:5204             ; ***************************************************************************************
   16 00:5204             ;
   17 00:5204             ;								Initialise system stuff
   18 00:5204             ;
   19 00:5204             ; ***************************************************************************************
   20 00:5204             
   21 00:5204             SYSInitialise:
   22 00:5204             	di
   23 00:5204             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:5204             	ld 		(_IYTemp84),iy
   25 00:5204             	ret
   26 00:5204             
   27 00:5204             ; ***************************************************************************************
   28 00:5204             ;
   29 00:5204             ;								Terminate system stuff
   30 00:5204             ;
   31 00:5204             ; ***************************************************************************************
   32 00:5204             
   33 00:5204             SYSTerminate:
   34 00:5204             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:5204             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:5204             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:5204             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:5204             	ei
   39 00:5204             	ret 										; and exit.
   40 00:5204             
   41 00:5204             _StackTemp84:									; temp var for TI84 only.
   42 00:5204             	.dw 	0,0
   43 00:5204             _IYTemp84:
   44 00:5204             	.dw 	0,0		
   45 00:5204             
   46 00:5204             ; ***************************************************************************************
   47 00:5204             ;
   48 00:5204             ;								Print A character
   49 00:5204             ;
   50 00:5204             ; ***************************************************************************************
   51 00:5204             
   52 00:5204             SYSPrintChar:
   53 00:5204             	push 	af 									; we stack everything including alt registers
   54 00:5204             	push 	bc
   55 00:5204             	push 	de
   56 00:5204             	push 	hl
   57 00:5204             	push 	ix
   58 00:5204             	push 	iy
   59 00:5204             	exx
   60 00:5204             	push 	bc
   61 00:5204             	push 	de
   62 00:5204             	push 	hl
   63 00:5204             
   64 00:5204             	ld 		iy,(_IYTemp84)
   65 00:5204             	call 	_PutC 								; print A as character
   66 00:5204             	di
   67 00:5204             	ld 		(_IYTemp84),iy
   68 00:5204             
   69 00:5204             	pop 	hl
   70 00:5204             	pop 	de
   71 00:5204             	pop 	bc
   72 00:5204             	exx
   73 00:5204             	pop 	iy
   74 00:5204             	pop 	ix
   75 00:5204             	pop 	hl
   76 00:5204             	pop 	de
   77 00:5204             	pop 	bc
   78 00:5204             	pop 	af
   79 00:5204             	ret		
   80 00:5204             
   81 00:5204             ; ***************************************************************************************
   82 00:5204             ;
   83 00:5204             ;									Print Newline
   84 00:5204             ;
   85 00:5204             ; ***************************************************************************************
   86 00:5204             
   87 00:5204             SYSPrintCRLF:
   88 00:5204             	push 	af 									; we stack everything including alt registers
   89 00:5204             	push 	bc
   90 00:5204             	push 	de
   91 00:5204             	push 	hl
   92 00:5204             	push 	ix
   93 00:5204             	push 	iy
   94 00:5204             	exx
   95 00:5204             	push 	bc
   96 00:5204             	push 	de
   97 00:5204             	push 	hl
   98 00:5204             
   99 00:5204             	ld 		iy,(_IYTemp84)
  100 00:5204             	call 	_newline
  101 00:5204             	di
  102 00:5204             	ld 		(_IYTemp84),iy
  103 00:5204             
  104 00:5204             	pop 	hl
  105 00:5204             	pop 	de
  106 00:5204             	pop 	bc
  107 00:5204             	exx
  108 00:5204             	pop 	iy
  109 00:5204             	pop 	ix
  110 00:5204             	pop 	hl
  111 00:5204             	pop 	de
  112 00:5204             	pop 	bc
  113 00:5204             	pop 	af
  114 00:5204             	ret
  115 00:5204             
  116 00:5204             ; ***************************************************************************************
  117 00:5204             ;
  118 00:5204             ;									Get time into HL'HL
  119 00:5204             ;
  120 00:5204             ; ***************************************************************************************
  121 00:5204             
  122 00:5204             SYSGetTimer:
  123 00:5204             	ld 		hl,$1234
  124 00:5204             	exx
  125 00:5204             	ld 		hl,$5678
  126 00:5204             	exx
  127 00:5204             	ret
  128 00:5204             
  129 00:5204             #endif
  130 00:5204 -  -  -  -  
  131 00:5204 -  -  -  -  ; ***************************************************************************************
  132 00:5204 -  -  -  -  ;
  133 00:5204 -  -  -  -  ;									Changes and Updates
  134 00:5204 -  -  -  -  ;
  135 00:5204 -  -  -  -  ; ***************************************************************************************
  136 00:5204 -  -  -  -  ;
  137 00:5204 -  -  -  -  ;		Date			Notes
  138 00:5204 -  -  -  -  ;		==== 			=====
  139 00:5204 -  -  -  -  ;
  140 00:5204 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   82 00:5204 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:5204 -  -  -  -  ; ***************************************************************************************
    2 00:5204 -  -  -  -  ; ***************************************************************************************
    3 00:5204 -  -  -  -  ;
    4 00:5204 -  -  -  -  ;		Name : 		basic.asm
    5 00:5204 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5204 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:5204 -  -  -  -  ;		Reviewed :	No
    8 00:5204 -  -  -  -  ;		Purpose :	Main program.
    9 00:5204 -  -  -  -  ;
   10 00:5204 -  -  -  -  ; ***************************************************************************************
   11 00:5204 -  -  -  -  ; ***************************************************************************************
   12 00:5204 -  -  -  -  
   13 00:5204 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5400 -  -  -  -  TestInstance:
   15 00:5400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5400 -  -  -  -  ;
    2 00:5400 -  -  -  -  ;	This code automatically generated.
    3 00:5400 -  -  -  -  ;
    4 00:5400 -  -  -  -  TestProgram:
    5 00:5400 0B 01 00 B2 
              0D 1B 8F 41 
              B3 46 80 0B 
              02 00 C7 15 
              1B A7 C1 15 
              1B 80 05 03 
              00 B5 80 05 
              04 00 CC 80 
              09 05 00 C8 
              6A A6 41 63 
              80 0E 06 00 
              C8 41 44 A6 
              41 47 A6 41 
              A6 42 80 00 	.db	$0b,$01,$00,$b2,$0d,$1b,$8f,$41,$b3,$46,$80,$0b,$02,$00,$c7,$15,$1b,$a7,$c1,$15,$1b,$80,$05,$03,$00,$b5,$80,$05,$04,$00,$cc,$80,$09,$05,$00,$c8,$6a,$a6,$41,$63,$80,$0e,$06,$00,$c8,$41,$44,$a6,$41,$47,$a6,$41,$a6,$42,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5438 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6438 -  -  -  -  EndTestInstance:
   18 00:6438 -  -  -  -  		
   19 00:6438 -  -  -  -  ; ***************************************************************************************
   20 00:6438 -  -  -  -  ;
   21 00:6438 -  -  -  -  ;									Changes and Updates
   22 00:6438 -  -  -  -  ;
   23 00:6438 -  -  -  -  ; ***************************************************************************************
   24 00:6438 -  -  -  -  ;
   25 00:6438 -  -  -  -  ;		Date			Notes
   26 00:6438 -  -  -  -  ;		==== 			=====
   27 00:6438 -  -  -  -  ;
   28 00:6438 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   83 00:6438 -  -  -  -  FinalAddress:
