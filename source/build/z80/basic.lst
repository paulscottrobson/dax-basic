    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_MEMORY = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_MEMORY
   63 00:0000             	ld a,ERRID_MEMORY
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOCOMMA = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   70 00:0000             	ld a,ERRID_NOCOMMA
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NODOLLAR = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   77 00:0000             	ld a,ERRID_NODOLLAR
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOLBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   84 00:0000             	ld a,ERRID_NOLBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NORBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   91 00:0000             	ld a,ERRID_NORBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOTREF = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOTREF
   98 00:0000             	ld a,ERRID_NOTREF
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_STOP = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_STOP
  105 00:0000             	ld a,ERRID_STOP
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_SYNTAX = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_SYNTAX
  112 00:0000             	ld a,ERRID_SYNTAX
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_TODO = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_TODO
  119 00:0000             	ld a,ERRID_TODO
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  126 00:0000             	ld a,ERRID_UNKNOWNVAR
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 21 40 40 -  		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:4003 31 FF BF -  		ld 		sp,$BFFF
   41 00:4006 -  -  -  -  #endif
   42 00:4006 -  -  -  -  
   43 00:4006 -  -  -  -  #endif
   44 00:4006 CD DE 4C -  		call 	SYSInitialise
   45 00:4009 11 00 50 -  		ld 		de,TestInstance
   46 00:400C 21 63 72 -  		ld 		hl,EndTestInstance
   47 00:400F CD A4 47 -  		call 	SetCurrentInstance
   48 00:4012 -  -  -  -  
   49 00:4012 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:4014 32 5C 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:4017 -  -  -  -  		
   52 00:4017 C3 63 42 -  		jp 		Command_RUN
   53 00:401A -  -  -  -  
   54 00:401A -  -  -  -  WarmStart:		
   55 00:401A 3E 2A -  -  		ld 		a,'*'
   56 00:401C CD E6 4C -  		call 	SYSPrintChar
   57 00:401F CD E4 4C -  		call 	SYSTerminate
   58 00:4022 -  -  -  -  
   59 00:4022 -  -  -  -  Unimplemented:
   60 00:4022 3E 05 C3 0A 
              43 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:4027 -  -  -  -  Int32DivZeroHandler:
   62 00:4027 3E 06 C3 0A 
              43 -  -  -  		ERR_DIVZERO
   63 00:402C -  -  -  -  
   64 00:402C -  -  -  -  ; ***************************************************************************************
   65 00:402C -  -  -  -  ;
   66 00:402C -  -  -  -  ;									Changes and Updates
   67 00:402C -  -  -  -  ;
   68 00:402C -  -  -  -  ; ***************************************************************************************
   69 00:402C -  -  -  -  ;
   70 00:402C -  -  -  -  ;		Date			Notes
   71 00:402C -  -  -  -  ;		==== 			=====
   72 00:402C -  -  -  -  ;
   73 00:402C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:402C -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:402C -  -  -  -  ; ***************************************************************************************
    2 00:402C -  -  -  -  ; ***************************************************************************************
    3 00:402C -  -  -  -  ;
    4 00:402C -  -  -  -  ;		Name : 		01data.asm
    5 00:402C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:402C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:402C -  -  -  -  ;		Reviewed :	No
    8 00:402C -  -  -  -  ;		Purpose :	Data space
    9 00:402C -  -  -  -  ;
   10 00:402C -  -  -  -  ; ***************************************************************************************
   11 00:402C -  -  -  -  ; ***************************************************************************************
   12 00:402C -  -  -  -  
   13 00:402C -  -  -  -  ; ***************************************************************************************
   14 00:402C -  -  -  -  ;
   15 00:402C -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:402C -  -  -  -  ;				LD (xxx),rr etc.
   17 00:402C -  -  -  -  ;
   18 00:402C -  -  -  -  ; ***************************************************************************************
   19 00:402C -  -  -  -  
   20 00:402C -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:402C -  -  -  -  
   22 00:402C -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:402C -  -  -  -  											; must be power of 2. 
   24 00:402C -  -  -  -  
   25 00:402C -  -  -  -  ; ***************************************************************************************
   26 00:402C -  -  -  -  ;
   27 00:402C -  -  -  -  ;								Defines the current instance
   28 00:402C -  -  -  -  ;
   29 00:402C -  -  -  -  ; ***************************************************************************************
   30 00:402C -  -  -  -  
   31 00:402C -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:402C 00 00 00 00 		.dw 	0,0
   33 00:4030 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:4030 00 00 00 00 		.dw 	0,0		
   35 00:4034 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4034 00 00 00 00 		.dw 	0,0 							
   37 00:4038 -  -  -  -  
   38 00:4038 -  -  -  -  ; ***************************************************************************************
   39 00:4038 -  -  -  -  ;
   40 00:4038 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4038 -  -  -  -  ;
   42 00:4038 -  -  -  -  ; ***************************************************************************************
   43 00:4038 -  -  -  -  
   44 00:4038 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4038 00 00 00 00 		.dw 	0,0
   46 00:403C -  -  -  -  
   47 00:403C -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:403C 00 00 00 00 		.dw 	0,0		
   49 00:4040 -  -  -  -  
   50 00:4040 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:4040 00 00 00 00 		.dw 	0,0
   52 00:4044 -  -  -  -  
   53 00:4044 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4044 00 00 00 00 		.dw 	0,0
   55 00:4048 -  -  -  -  
   56 00:4048 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4048 00 00 00 00 		.dw 	0,0		
   58 00:404C -  -  -  -  
   59 00:404C -  -  -  -  ;
   60 00:404C -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:404C -  -  -  -  ;
   62 00:404C -  -  -  -  
   63 00:404C -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:404C 00 00 00 00 		.dw 	0,0
   65 00:4050 -  -  -  -  		
   66 00:4050 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:4050 00 00 00 00 		.dw 	0,0
   68 00:4054 -  -  -  -  
   69 00:4054 -  -  -  -  ; ***************************************************************************************
   70 00:4054 -  -  -  -  ;
   71 00:4054 -  -  -  -  ;										Run variables
   72 00:4054 -  -  -  -  ;
   73 00:4054 -  -  -  -  ; ***************************************************************************************
   74 00:4054 -  -  -  -  
   75 00:4054 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4054 00 00 00 00 		.dw 	0,0
   77 00:4058 -  -  -  -  		
   78 00:4058 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4058 00 00 00 00 		.dw 	0,0
   80 00:405C -  -  -  -  
   81 00:405C -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:405C 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:4062 -  -  -  -  
   84 00:4062 -  -  -  -  AConvert: 									; used for address conversions.
   85 00:4062 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4068 -  -  -  -  		
   87 00:4068 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4068 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4078 -  -  -  -  
   90 00:4078 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4078 00 00 -  -  		.dw 	0
   92 00:407A -  -  -  -  
   93 00:407A -  -  -  -  PrintBase: 									; current base for PRINT
   94 00:407A 00 00 -  -  		.dw 	0 
   95 00:407C -  -  -  -  		
   96 00:407C -  -  -  -  ; ***************************************************************************************
   97 00:407C -  -  -  -  ;
   98 00:407C -  -  -  -  ;									Variable Information
   99 00:407C -  -  -  -  ;
  100 00:407C -  -  -  -  ; ***************************************************************************************
  101 00:407C -  -  -  -  
  102 00:407C -  -  -  -  VarNameStart: 								; first byte of name
  103 00:407C 00 00 00 00 		.dw 	0,0
  104 00:4080 -  -  -  -  VarHash: 									; name hash value
  105 00:4080 00 00 -  -  		.dw 	0		
  106 00:4082 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  107 00:4082 00 00 00 00 		.dw 	0,0
  108 00:4086 -  -  -  -  		
  109 00:4086 -  -  -  -  ; ***************************************************************************************
  110 00:4086 -  -  -  -  ;
  111 00:4086 -  -  -  -  ;										  Buffers
  112 00:4086 -  -  -  -  ;
  113 00:4086 -  -  -  -  ; ***************************************************************************************
  114 00:4086 -  -  -  -  
  115 00:4086 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  116 00:4086 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  117 00:4096 -  -  -  -  
  118 00:4096 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  119 00:4096 00 00 -  -  		.dw 	0
  120 00:4098 -  -  -  -  
  121 00:4098 -  -  -  -  ConvertBuffer: 								; general usage
  122 00:4098 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  123 00:40D8 -  -  -  -  
  124 00:40D8 -  -  -  -  ; ***************************************************************************************
  125 00:40D8 -  -  -  -  ;
  126 00:40D8 -  -  -  -  ;									Changes and Updates
  127 00:40D8 -  -  -  -  ;
  128 00:40D8 -  -  -  -  ; ***************************************************************************************
  129 00:40D8 -  -  -  -  ;
  130 00:40D8 -  -  -  -  ;		Date			Notes
  131 00:40D8 -  -  -  -  ;		==== 			=====
  132 00:40D8 -  -  -  -  ;
  133 00:40D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D8 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D8 -  -  -  -  ; ***************************************************************************************
    2 00:40D8 -  -  -  -  ; ***************************************************************************************
    3 00:40D8 -  -  -  -  ;
    4 00:40D8 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D8 -  -  -  -  ;		Reviewed :	No
    8 00:40D8 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D8 -  -  -  -  ;
   10 00:40D8 -  -  -  -  ; ***************************************************************************************
   11 00:40D8 -  -  -  -  ; ***************************************************************************************
   12 00:40D8 -  -  -  -  
   13 00:40D8 -  -  -  -  ; ***************************************************************************************
   14 00:40D8 -  -  -  -  ;
   15 00:40D8 -  -  -  -  ;									ASSERT command
   16 00:40D8 -  -  -  -  ;
   17 00:40D8 -  -  -  -  ; ***************************************************************************************
   18 00:40D8 -  -  -  -  
   19 00:40D8 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D8 CD EF 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40DB 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40E1 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40E2 3E 01 C3 0A 
              43 -  -  -  		ERR_ASSERT
   24 00:40E7 -  -  -  -  
   25 00:40E7 -  -  -  -  ; ***************************************************************************************
   26 00:40E7 -  -  -  -  ;
   27 00:40E7 -  -  -  -  ;									Changes and Updates
   28 00:40E7 -  -  -  -  ;
   29 00:40E7 -  -  -  -  ; ***************************************************************************************
   30 00:40E7 -  -  -  -  ;
   31 00:40E7 -  -  -  -  ;		Date			Notes
   32 00:40E7 -  -  -  -  ;		==== 			=====
   33 00:40E7 -  -  -  -  ;
   34 00:40E7 -  -  -  -  ; ***************************************************************************************
   35 00:40E7 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E7 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E7 -  -  -  -  ; ***************************************************************************************
    2 00:40E7 -  -  -  -  ; ***************************************************************************************
    3 00:40E7 -  -  -  -  ;
    4 00:40E7 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E7 -  -  -  -  ;		Reviewed :	No
    8 00:40E7 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E7 -  -  -  -  ;
   10 00:40E7 -  -  -  -  ; ***************************************************************************************
   11 00:40E7 -  -  -  -  ; ***************************************************************************************
   12 00:40E7 -  -  -  -  
   13 00:40E7 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E7 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E7 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E7 -  -  -  -  BadCmd_Comma: 		;; [~]
   17 00:40E7 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 00:40E7 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40E7 C3 67 43 -  		jp 		SyntaxError
   20 00:40EA -  -  -  -  
   21 00:40EA -  -  -  -  ; ***************************************************************************************
   22 00:40EA -  -  -  -  ;
   23 00:40EA -  -  -  -  ;									Changes and Updates
   24 00:40EA -  -  -  -  ;
   25 00:40EA -  -  -  -  ; ***************************************************************************************
   26 00:40EA -  -  -  -  ;
   27 00:40EA -  -  -  -  ;		Date			Notes
   28 00:40EA -  -  -  -  ;		==== 			=====
   29 00:40EA -  -  -  -  ;
   30 00:40EA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40EA -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40EA -  -  -  -  ; ***************************************************************************************
    2 00:40EA -  -  -  -  ; ***************************************************************************************
    3 00:40EA -  -  -  -  ;
    4 00:40EA -  -  -  -  ;		Name : 		colon.asm
    5 00:40EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EA -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40EA -  -  -  -  ;		Reviewed :	No
    8 00:40EA -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40EA -  -  -  -  ;
   10 00:40EA -  -  -  -  ; ***************************************************************************************
   11 00:40EA -  -  -  -  ; ***************************************************************************************
   12 00:40EA -  -  -  -  
   13 00:40EA -  -  -  -  ; ***************************************************************************************
   14 00:40EA -  -  -  -  ;
   15 00:40EA -  -  -  -  ;								Colon command, this is ignored.
   16 00:40EA -  -  -  -  ;
   17 00:40EA -  -  -  -  ; ***************************************************************************************
   18 00:40EA -  -  -  -  
   19 00:40EA -  -  -  -  Command_Colon: 	;; [:]
   20 00:40EA C9 -  -  -  		ret
   21 00:40EB -  -  -  -  
   22 00:40EB -  -  -  -  ; ***************************************************************************************
   23 00:40EB -  -  -  -  ;
   24 00:40EB -  -  -  -  ;									Changes and Updates
   25 00:40EB -  -  -  -  ;
   26 00:40EB -  -  -  -  ; ***************************************************************************************
   27 00:40EB -  -  -  -  ;
   28 00:40EB -  -  -  -  ;		Date			Notes
   29 00:40EB -  -  -  -  ;		==== 			=====
   30 00:40EB -  -  -  -  ;
   31 00:40EB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40EB -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40EB -  -  -  -  ; ***************************************************************************************
    2 00:40EB -  -  -  -  ; ***************************************************************************************
    3 00:40EB -  -  -  -  ;
    4 00:40EB -  -  -  -  ;		Name : 		dim.asm
    5 00:40EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EB -  -  -  -  ;		Date : 		4th June 2022
    7 00:40EB -  -  -  -  ;		Reviewed :	No
    8 00:40EB -  -  -  -  ;		Purpose :	Dim command
    9 00:40EB -  -  -  -  ;
   10 00:40EB -  -  -  -  ; ***************************************************************************************
   11 00:40EB -  -  -  -  ; ***************************************************************************************
   12 00:40EB -  -  -  -  
   13 00:40EB -  -  -  -  ; ***************************************************************************************
   14 00:40EB -  -  -  -  ;
   15 00:40EB -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40EB -  -  -  -  ;	
   17 00:40EB -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40EB -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40EB -  -  -  -  ;								(can be comma chained)
   20 00:40EB -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40EB -  -  -  -  ;
   22 00:40EB -  -  -  -  ; ***************************************************************************************
   23 00:40EB -  -  -  -  
   24 00:40EB -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40EB -  -  -  -  		;
   26 00:40EB -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40EB -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40EB -  -  -  -  		;
   29 00:40EB DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40ED D1 -  -  -  		pop 	de
   31 00:40EE -  -  -  -  		;
   32 00:40EE DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40F1 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40F3 D2 67 43 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40F6 -  -  -  -  _DISkip:
   36 00:40F6 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40F8 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40FB FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:40FD 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:40FF -  -  -  -  		;
   41 00:40FF DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:4102 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:4104 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4105 CC 5C 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:4108 F1 -  -  -  		pop 	af
   46 00:4109 C4 1B 41 -  		call 	nz,DimensionAllocate
   47 00:410C -  -  -  -  		;
   48 00:410C DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:410F FE A6 -  -  		cp 		KWD_COMMA
   50 00:4111 C0 -  -  -  		ret 	nz
   51 00:4112 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:4114 18 D5 -  -  		jr 		Command_DIM
   53 00:4116 -  -  -  -  
   54 00:4116 -  -  -  -  _CDError:
   55 00:4116 3E 04 C3 0A 
              43 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:411B -  -  -  -  
   57 00:411B -  -  -  -  ; ***************************************************************************************
   58 00:411B -  -  -  -  ;
   59 00:411B -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:411B -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:411B -  -  -  -  ;
   62 00:411B -  -  -  -  ; ***************************************************************************************
   63 00:411B -  -  -  -  
   64 00:411B -  -  -  -  DimensionAllocate:
   65 00:411B D5 -  -  -  		push 	de 							; save start on stack
   66 00:411C DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:411E 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:4120 32 78 40 -  		ld 		(AllowAutoCreate),a
   69 00:4123 CD 06 48 -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:4126 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:4128 28 EC -  -  		jr 		z,_CDError
   72 00:412A CB 41 -  -  		bit 	CIsString,c
   73 00:412C 20 E8 -  -  		jr 		nz,_CDError
   74 00:412E DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:4130 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:4131 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:4133 CD FF 42 -  		call 	CheckNextA 					; check for [
   78 00:4136 CD EF 44 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:4139 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:413B CD FF 42 -  		call 	CheckNextA 					; check for ]
   81 00:413E 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:413F 7C -  -  -  		ld 		a,h
   83 00:4140 B5 -  -  -  		or 		l
   84 00:4141 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:4143 D9 -  -  -  		exx
   86 00:4144 23 -  -  -  		inc 	hl
   87 00:4145 D9 -  -  -  		exx
   88 00:4146 -  -  -  -  _DANoCarry:
   89 00:4146 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:4147 7C -  -  -  		ld 		a,h
   91 00:4148 B5 -  -  -  		or 		l
   92 00:4149 D9 -  -  -  		exx
   93 00:414A 20 CA -  -  		jr 		nz,_CDError
   94 00:414C CD 46 47 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:414F EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:4150 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:4151 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:4157 AF -  -  -  		xor 	a 							; autocreate off
   99 00:4158 32 78 40 -  		ld 		(AllowAutoCreate),a
  100 00:415B C9 -  -  -  		ret
  101 00:415C -  -  -  -  
  102 00:415C -  -  -  -  ; ***************************************************************************************
  103 00:415C -  -  -  -  ;
  104 00:415C -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:415C -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:415C -  -  -  -  ;
  107 00:415C -  -  -  -  ; ***************************************************************************************
  108 00:415C -  -  -  -  
  109 00:415C -  -  -  -  DimensionArray:
  110 00:415C D5 -  -  -  		push 	de 							; save start on stack.
  111 00:415D -  -  -  -  		;
  112 00:415D CD EF 44 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:4160 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:4161 E6 FC -  -  		and 	$FC
  115 00:4163 D9 -  -  -  		exx
  116 00:4164 B4 -  -  -  		or 		h
  117 00:4165 B5 -  -  -  		or 		l
  118 00:4166 D9 -  -  -  		exx
  119 00:4167 20 AD -  -  		jr 		nz,_CDError
  120 00:4169 -  -  -  -  		;
  121 00:4169 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:416B E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:416C -  -  -  -  		;
  124 00:416C CD 87 48 -  		call 	VariableInformation 		; get information about this array
  125 00:416F CD BD 48 -  		call 	VariableSearchList 			; look to see if already present.
  126 00:4172 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:4174 -  -  -  -  		;
  128 00:4174 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4175 E5 -  -  -  		push 	hl
  130 00:4176 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:4177 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:4178 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:4179 29 -  -  -  		add 	hl,hl
  134 00:417A CD C7 47 -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:417D -  -  -  -  		;
  136 00:417D D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:417E 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:4181 09 -  -  -  		add 	hl,bc
  139 00:4182 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:4188 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:418A C9 -  -  -  		ret		
  142 00:418B -  -  -  -  
  143 00:418B -  -  -  -  
  144 00:418B -  -  -  -  ; ***************************************************************************************
  145 00:418B -  -  -  -  ;
  146 00:418B -  -  -  -  ;									Changes and Updates
  147 00:418B -  -  -  -  ;
  148 00:418B -  -  -  -  ; ***************************************************************************************
  149 00:418B -  -  -  -  ;
  150 00:418B -  -  -  -  ;		Date			Notes
  151 00:418B -  -  -  -  ;		==== 			=====
  152 00:418B -  -  -  -  ;
  153 00:418B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:418B -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:418B -  -  -  -  ; ***************************************************************************************
    2 00:418B -  -  -  -  ; ***************************************************************************************
    3 00:418B -  -  -  -  ;
    4 00:418B -  -  -  -  ;		Name : 		end.asm
    5 00:418B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:418B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:418B -  -  -  -  ;		Reviewed :	No
    8 00:418B -  -  -  -  ;		Purpose :	End command
    9 00:418B -  -  -  -  ;
   10 00:418B -  -  -  -  ; ***************************************************************************************
   11 00:418B -  -  -  -  ; ***************************************************************************************
   12 00:418B -  -  -  -  
   13 00:418B -  -  -  -  ; ***************************************************************************************
   14 00:418B -  -  -  -  ;
   15 00:418B -  -  -  -  ;										END command
   16 00:418B -  -  -  -  ;
   17 00:418B -  -  -  -  ; ***************************************************************************************
   18 00:418B -  -  -  -  
   19 00:418B -  -  -  -  Command_END: 	;; [end]
   20 00:418B 3E 00 C3 0A 
              43 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:4190 -  -  -  -  
   22 00:4190 -  -  -  -  ; ***************************************************************************************
   23 00:4190 -  -  -  -  ;
   24 00:4190 -  -  -  -  ;									Changes and Updates
   25 00:4190 -  -  -  -  ;
   26 00:4190 -  -  -  -  ; ***************************************************************************************
   27 00:4190 -  -  -  -  ;
   28 00:4190 -  -  -  -  ;		Date			Notes
   29 00:4190 -  -  -  -  ;		==== 			=====
   30 00:4190 -  -  -  -  ;
   31 00:4190 -  -  -  -  ; ***************************************************************************************
   32 00:4190 -  -  -  -  		
Listing for file "_build.asm"
   18 00:4190 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:4190 -  -  -  -  ; ***************************************************************************************
    2 00:4190 -  -  -  -  ; ***************************************************************************************
    3 00:4190 -  -  -  -  ;
    4 00:4190 -  -  -  -  ;		Name : 		endofline.asm
    5 00:4190 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4190 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4190 -  -  -  -  ;		Reviewed :	None
    8 00:4190 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:4190 -  -  -  -  ;
   10 00:4190 -  -  -  -  ; ***************************************************************************************
   11 00:4190 -  -  -  -  ; ***************************************************************************************
   12 00:4190 -  -  -  -  
   13 00:4190 -  -  -  -  ; ***************************************************************************************
   14 00:4190 -  -  -  -  ;
   15 00:4190 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:4190 -  -  -  -  ;
   17 00:4190 -  -  -  -  ; ***************************************************************************************
   18 00:4190 -  -  -  -  
   19 00:4190 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:4190 DD 2A 54 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4194 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:4197 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:419A DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:419C -  -  -  -  		;
   25 00:419C ED 7B 58 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:41A0 C3 72 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:41A3 -  -  -  -  
   28 00:41A3 -  -  -  -  ; ***************************************************************************************
   29 00:41A3 -  -  -  -  ;
   30 00:41A3 -  -  -  -  ;									Changes and Updates
   31 00:41A3 -  -  -  -  ;
   32 00:41A3 -  -  -  -  ; ***************************************************************************************
   33 00:41A3 -  -  -  -  ;
   34 00:41A3 -  -  -  -  ;		Date			Notes
   35 00:41A3 -  -  -  -  ;		==== 			=====
   36 00:41A3 -  -  -  -  ;
   37 00:41A3 -  -  -  -  ; ***************************************************************************************
   38 00:41A3 -  -  -  -  		
Listing for file "_build.asm"
   19 00:41A3 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:41A3 -  -  -  -  ; ***************************************************************************************
    2 00:41A3 -  -  -  -  ; ***************************************************************************************
    3 00:41A3 -  -  -  -  ;
    4 00:41A3 -  -  -  -  ;		Name : 		let.asm
    5 00:41A3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41A3 -  -  -  -  ;		Date : 		4th June 2022
    7 00:41A3 -  -  -  -  ;		Reviewed :	No
    8 00:41A3 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:41A3 -  -  -  -  ;
   10 00:41A3 -  -  -  -  ; ***************************************************************************************
   11 00:41A3 -  -  -  -  ; ***************************************************************************************
   12 00:41A3 -  -  -  -  
   13 00:41A3 -  -  -  -  ; ***************************************************************************************
   14 00:41A3 -  -  -  -  ;
   15 00:41A3 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:41A3 -  -  -  -  ;
   17 00:41A3 -  -  -  -  ; ***************************************************************************************
   18 00:41A3 -  -  -  -  
   19 00:41A3 -  -  -  -  Command_LET: 	;; [let]
   20 00:41A3 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41A6 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41A8 28 28 -  -  		jr 		z,_CLString
   23 00:41AA FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41AC 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41AE 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41B0 32 78 40 -  		ld 		(AllowAutoCreate),a
   27 00:41B3 -  -  -  -  _CLNoAuto:
   28 00:41B3 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41B5 CD 80 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41B8 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41BA CA 67 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41BD E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41BE C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41BF AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41C0 32 78 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41C3 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41C5 CD FF 42 -  		call 	CheckNextA
   38 00:41C8 -  -  -  -  
   39 00:41C8 CD E9 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41CB -  -  -  -  
   41 00:41CB D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41CC 43 -  -  -  		ld 		b,e 						
   43 00:41CD D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41CE -  -  -  -  		;
   45 00:41CE -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41CE -  -  -  -  		;
   47 00:41CE CD D3 41 -  		call 	WriteHLToDE
   48 00:41D1 C9 -  -  -  		ret
   49 00:41D2 -  -  -  -  		;
   50 00:41D2 -  -  -  -  		; 		String assignment code.
   51 00:41D2 -  -  -  -  		;
   52 00:41D2 -  -  -  -  _CLString:
   53 00:41D2 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:41D3 -  -  -  -  
   55 00:41D3 -  -  -  -  ; ***************************************************************************************
   56 00:41D3 -  -  -  -  ;
   57 00:41D3 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:41D3 -  -  -  -  ;
   59 00:41D3 -  -  -  -  ; ***************************************************************************************
   60 00:41D3 -  -  -  -  
   61 00:41D3 -  -  -  -  WriteHLToDE:
   62 00:41D3 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:41D5 C2 5D 43 -  		jp 		nz,TypeMismatch
   64 00:41D8 -  -  -  -  		;
   65 00:41D8 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:41D8 -  -  -  -  		;		
   67 00:41D8 -  -  -  -  _WHDWriteNumber:
   68 00:41D8 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:41D9 D9 -  -  -  		exx
   70 00:41DA EB -  -  -  		ex 		de,hl
   71 00:41DB D9 -  -  -  		exx
   72 00:41DC -  -  -  -  
   73 00:41DC 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:41DD 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:41DE 72 -  -  -  		ld 		(hl),d
   76 00:41DF 23 -  -  -  		inc 	hl
   77 00:41E0 E5 -  -  -  		push 	hl
   78 00:41E1 D9 -  -  -  		exx
   79 00:41E2 E1 -  -  -  		pop 	hl
   80 00:41E3 73 -  -  -  		ld 		(hl),e
   81 00:41E4 23 -  -  -  		inc 	hl
   82 00:41E5 72 -  -  -  		ld 		(hl),d
   83 00:41E6 D9 -  -  -  		exx
   84 00:41E7 -  -  -  -  
   85 00:41E7 C9 -  -  -  		ret
   86 00:41E8 -  -  -  -  
   87 00:41E8 -  -  -  -  ; ***************************************************************************************
   88 00:41E8 -  -  -  -  ;
   89 00:41E8 -  -  -  -  ;									Changes and Updates
   90 00:41E8 -  -  -  -  ;
   91 00:41E8 -  -  -  -  ; ***************************************************************************************
   92 00:41E8 -  -  -  -  ;
   93 00:41E8 -  -  -  -  ;		Date			Notes
   94 00:41E8 -  -  -  -  ;		==== 			=====
   95 00:41E8 -  -  -  -  ;
   96 00:41E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:41E8 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:41E8 -  -  -  -  ; ***************************************************************************************
    2 00:41E8 -  -  -  -  ; ***************************************************************************************
    3 00:41E8 -  -  -  -  ;
    4 00:41E8 -  -  -  -  ;		Name : 		print.asm
    5 00:41E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41E8 -  -  -  -  ;		Reviewed :	No
    8 00:41E8 -  -  -  -  ;		Purpose :	Print command
    9 00:41E8 -  -  -  -  ;
   10 00:41E8 -  -  -  -  ; ***************************************************************************************
   11 00:41E8 -  -  -  -  ; ***************************************************************************************
   12 00:41E8 -  -  -  -  
   13 00:41E8 -  -  -  -  ; ***************************************************************************************
   14 00:41E8 -  -  -  -  ;
   15 00:41E8 -  -  -  -  ;										PRINT command
   16 00:41E8 -  -  -  -  ;
   17 00:41E8 -  -  -  -  ; ***************************************************************************************
   18 00:41E8 -  -  -  -  
   19 00:41E8 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:41E8 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:41EA 32 7A 40 -  		ld 		(PrintBase),a
   22 00:41ED -  -  -  -  		;
   23 00:41ED -  -  -  -  		;		Main loop
   24 00:41ED -  -  -  -  		;
   25 00:41ED -  -  -  -  _CPRLoop:
   26 00:41ED DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:41F0 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:41F2 28 50 -  -  		jr 		z,_CPRExitNL
   29 00:41F4 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:41F6 28 4C -  -  		jr 		z,_CPRExitNL
   31 00:41F8 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:41FA 28 36 -  -  		jr 		z,_CPRCheckNext10
   33 00:41FC FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:41FE 28 2D -  -  		jr 		z,_CPRTab
   35 00:4200 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:4202 28 24 -  -  		jr 		z,_CPRNewLine
   37 00:4204 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:4206 28 17 -  -  		jr 		z,_CPRHexMode
   39 00:4208 -  -  -  -  		;
   40 00:4208 CD E9 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:420B CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:420D 20 0B -  -  		jr 		nz,_CPRPrintHL
   43 00:420F -  -  -  -  		;
   44 00:420F 3A 7A 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:4212 -  -  -  -  _CPRPrintNumber:
   46 00:4212 01 98 40 -  		ld  	bc,ConvertBuffer
   47 00:4215 C5 -  -  -  		push 	bc
   48 00:4216 CD 98 4C -  		call 	Int32ToString 				; convert to string
   49 00:4219 E1 -  -  -  		pop 	hl
   50 00:421A -  -  -  -  		;
   51 00:421A -  -  -  -  		; 		Print text at HL.
   52 00:421A -  -  -  -  		;
   53 00:421A -  -  -  -  _CPRPrintHL:
   54 00:421A CD BD 47 -  		call 	PrintStringAtHL 			; print string out
   55 00:421D 18 CE -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:421F -  -  -  -  		;
   57 00:421F -  -  -  -  		;		Hex mode (~)
   58 00:421F -  -  -  -  		;
   59 00:421F -  -  -  -  _CPRHexMode:		
   60 00:421F 3E 10 -  -  		ld 		a,16
   61 00:4221 32 7A 40 -  		ld 		(PrintBase),a
   62 00:4224 DD 23 -  -  		inc 	ix
   63 00:4226 18 C5 -  -  		jr 		_CPRLoop
   64 00:4228 -  -  -  -  		;
   65 00:4228 -  -  -  -  		; 		New line (')
   66 00:4228 -  -  -  -  		;
   67 00:4228 -  -  -  -  _CPRNewLine:
   68 00:4228 CD 02 4D -  		call 	SYSPrintCRLF
   69 00:422B 18 0A -  -  		jr 		_CPRCheckNext
   70 00:422D -  -  -  -  		;
   71 00:422D -  -  -  -  		; 		Tab command (,)
   72 00:422D -  -  -  -  		;
   73 00:422D -  -  -  -  _CPRTab:
   74 00:422D 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:422F CD E6 4C -  		call 	SYSPrintChar
   76 00:4232 -  -  -  -  		;
   77 00:4232 -  -  -  -  		;		Set to base 10 then check next character
   78 00:4232 -  -  -  -  		;
   79 00:4232 -  -  -  -  _CPRCheckNext10:		
   80 00:4232 3E F6 -  -  		ld 		a,-10
   81 00:4234 32 7A 40 -  		ld 		(PrintBase),a
   82 00:4237 -  -  -  -  		;
   83 00:4237 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:4237 -  -  -  -  		;		
   85 00:4237 -  -  -  -  _CPRCheckNext:
   86 00:4237 DD 23 -  -  		inc 	ix 							; consume current
   87 00:4239 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:423C FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:423E C8 -  -  -  		ret 	z
   90 00:423F FE A7 -  -  		cp 		KWD_COLON
   91 00:4241 C8 -  -  -  		ret 	z
   92 00:4242 18 A9 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:4244 -  -  -  -  		;
   94 00:4244 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:4244 -  -  -  -  		;
   96 00:4244 -  -  -  -  _CPRExitNL:
   97 00:4244 CD 02 4D -  		call 	SYSPrintCRLF 				; do CR/LF
   98 00:4247 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:4248 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4248 -  -  -  -  ; ***************************************************************************************
    2 00:4248 -  -  -  -  ; ***************************************************************************************
    3 00:4248 -  -  -  -  ;
    4 00:4248 -  -  -  -  ;		Name : 		rem.asm
    5 00:4248 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4248 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4248 -  -  -  -  ;		Reviewed :	No
    8 00:4248 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4248 -  -  -  -  ;
   10 00:4248 -  -  -  -  ; ***************************************************************************************
   11 00:4248 -  -  -  -  ; ***************************************************************************************
   12 00:4248 -  -  -  -  
   13 00:4248 -  -  -  -  ; ***************************************************************************************
   14 00:4248 -  -  -  -  ;
   15 00:4248 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4248 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4248 -  -  -  -  ;
   18 00:4248 -  -  -  -  ; ***************************************************************************************
   19 00:4248 -  -  -  -  
   20 00:4248 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4248 -  -  -  -  Command_REM2: 	;; [']
   22 00:4248 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:424B DD 23 -  -  		inc 	ix
   24 00:424D FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:424F C8 -  -  -  		ret 	z
   26 00:4250 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:4252 C8 -  -  -  		ret 	z
   28 00:4253 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4255 C2 67 43 -  		jp 		nz,SyntaxError
   30 00:4258 -  -  -  -  		;		
   31 00:4258 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:425B DD 5E 00 -  		ld 		e,(ix+0)
   33 00:425E 13 -  -  -  		inc 	de 
   34 00:425F 13 -  -  -  		inc 	de
   35 00:4260 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4262 C9 -  -  -  		ret
   37 00:4263 -  -  -  -  
   38 00:4263 -  -  -  -  ; ***************************************************************************************
   39 00:4263 -  -  -  -  ;
   40 00:4263 -  -  -  -  ;									Changes and Updates
   41 00:4263 -  -  -  -  ;
   42 00:4263 -  -  -  -  ; ***************************************************************************************
   43 00:4263 -  -  -  -  ;
   44 00:4263 -  -  -  -  ;		Date			Notes
   45 00:4263 -  -  -  -  ;		==== 			=====
   46 00:4263 -  -  -  -  ;
   47 00:4263 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:4263 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4263 -  -  -  -  ; ***************************************************************************************
    2 00:4263 -  -  -  -  ; ***************************************************************************************
    3 00:4263 -  -  -  -  ;
    4 00:4263 -  -  -  -  ;		Name : 		run.asm
    5 00:4263 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4263 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4263 -  -  -  -  ;		Reviewed :	No
    8 00:4263 -  -  -  -  ;		Purpose :	Run command
    9 00:4263 -  -  -  -  ;
   10 00:4263 -  -  -  -  ; ***************************************************************************************
   11 00:4263 -  -  -  -  ; ***************************************************************************************
   12 00:4263 -  -  -  -  
   13 00:4263 -  -  -  -  ; ***************************************************************************************
   14 00:4263 -  -  -  -  ;
   15 00:4263 -  -  -  -  ;										RUN command
   16 00:4263 -  -  -  -  ;
   17 00:4263 -  -  -  -  ; ***************************************************************************************
   18 00:4263 -  -  -  -  
   19 00:4263 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4263 CD 63 47 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4266 -  -  -  -  
   22 00:4266 DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:426A ED 73 58 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:426E AF -  -  -  		xor 	a
   25 00:426F 32 78 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:4272 -  -  -  -  		;
   27 00:4272 -  -  -  -  		; 		New line at IX.
   28 00:4272 -  -  -  -  		;
   29 00:4272 -  -  -  -  CRNewLine:
   30 00:4272 DD 22 54 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:4276 -  -  -  -  		;
   32 00:4276 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:4279 B7 -  -  -  		or 		a
   34 00:427A CA 8B 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:427D -  -  -  -  		;
   36 00:427D DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:427F DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:4281 DD 23 -  -  		inc 	ix
   39 00:4283 -  -  -  -  		;
   40 00:4283 -  -  -  -  		; 		New command at IX
   41 00:4283 -  -  -  -  		;
   42 00:4283 -  -  -  -  _CRNewCommand:	
   43 00:4283 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:4286 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:4287 F2 BB 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:428A -  -  -  -  		;
   47 00:428A FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:428C 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:428E FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:4290 D2 AC 42 -  		jp 		nc,_CRAlternateLets
   51 00:4293 -  -  -  -  		;
   52 00:4293 -  -  -  -  _CRDoCommand:		
   53 00:4293 E6 7F 21 00 
              00 6F 29 11 
              60 4A 19 5E 
              23 56 ED 53 
              5D 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:42A5 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:42A7 CD 5C 40 -  		call 	JumpCode 					; call the routine.
   56 00:42AA 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:42AC -  -  -  -  		;
   58 00:42AC -  -  -  -  		; 		Do CALL (HL)
   59 00:42AC -  -  -  -  		;
   60 00:42AC -  -  -  -  		;
   61 00:42AC -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:42AC -  -  -  -  		;		
   63 00:42AC -  -  -  -  _CRAlternateLets:		
   64 00:42AC FE 83 -  -  		cp 		KWD_PLING
   65 00:42AE 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:42B0 FE 84 -  -  		cp 		KWD_QMARK
   67 00:42B2 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:42B4 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42B6 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42B8 C3 67 43 -  		jp 		SyntaxError
   71 00:42BB -  -  -  -  		;
   72 00:42BB -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42BB -  -  -  -  		;
   74 00:42BB -  -  -  -  _CRAssignmentHandler:		
   75 00:42BB FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42BD D2 67 43 -  		jp 		nc,SyntaxError
   77 00:42C0 -  -  -  -  _CRAssignmentLet:		
   78 00:42C0 CD A3 41 -  		call	Command_LET 				; do LET.
   79 00:42C3 C3 83 42 -  		jp 		_CRNewCommand
   80 00:42C6 -  -  -  -  
   81 00:42C6 -  -  -  -  ; ***************************************************************************************
   82 00:42C6 -  -  -  -  ;
   83 00:42C6 -  -  -  -  ;									Changes and Updates
   84 00:42C6 -  -  -  -  ;
   85 00:42C6 -  -  -  -  ; ***************************************************************************************
   86 00:42C6 -  -  -  -  ;
   87 00:42C6 -  -  -  -  ;		Date			Notes
   88 00:42C6 -  -  -  -  ;		==== 			=====
   89 00:42C6 -  -  -  -  ;
   90 00:42C6 -  -  -  -  ; ***************************************************************************************
   91 00:42C6 -  -  -  -  		
Listing for file "_build.asm"
   23 00:42C6 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42C6 -  -  -  -  ; ***************************************************************************************
    2 00:42C6 -  -  -  -  ; ***************************************************************************************
    3 00:42C6 -  -  -  -  ;
    4 00:42C6 -  -  -  -  ;		Name : 		stop.asm
    5 00:42C6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42C6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42C6 -  -  -  -  ;		Reviewed :	No
    8 00:42C6 -  -  -  -  ;		Purpose :	Stop command
    9 00:42C6 -  -  -  -  ;
   10 00:42C6 -  -  -  -  ; ***************************************************************************************
   11 00:42C6 -  -  -  -  ; ***************************************************************************************
   12 00:42C6 -  -  -  -  
   13 00:42C6 -  -  -  -  ; ***************************************************************************************
   14 00:42C6 -  -  -  -  ;
   15 00:42C6 -  -  -  -  ;										STOP command
   16 00:42C6 -  -  -  -  ;
   17 00:42C6 -  -  -  -  ; ***************************************************************************************
   18 00:42C6 -  -  -  -  
   19 00:42C6 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42C6 3E 0E C3 0A 
              43 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42CB -  -  -  -  
   22 00:42CB -  -  -  -  ; ***************************************************************************************
   23 00:42CB -  -  -  -  ;
   24 00:42CB -  -  -  -  ;									Changes and Updates
   25 00:42CB -  -  -  -  ;
   26 00:42CB -  -  -  -  ; ***************************************************************************************
   27 00:42CB -  -  -  -  ;
   28 00:42CB -  -  -  -  ;		Date			Notes
   29 00:42CB -  -  -  -  ;		==== 			=====
   30 00:42CB -  -  -  -  ;
   31 00:42CB -  -  -  -  ; ***************************************************************************************
   32 00:42CB -  -  -  -  		
Listing for file "_build.asm"
   24 00:42CB -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:42CB -  -  -  -  ; ***************************************************************************************
    2 00:42CB -  -  -  -  ; ***************************************************************************************
    3 00:42CB -  -  -  -  ;
    4 00:42CB -  -  -  -  ;		Name : 		charcheck.asm
    5 00:42CB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CB -  -  -  -  ;		Reviewed :	No
    8 00:42CB -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:42CB -  -  -  -  ;
   10 00:42CB -  -  -  -  ; ***************************************************************************************
   11 00:42CB -  -  -  -  ; ***************************************************************************************
   12 00:42CB -  -  -  -  
   13 00:42CB -  -  -  -  ; ***************************************************************************************
   14 00:42CB -  -  -  -  ;
   15 00:42CB -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:42CB -  -  -  -  ;
   17 00:42CB -  -  -  -  ; ***************************************************************************************
   18 00:42CB -  -  -  -  
   19 00:42CB -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:42CB             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:42CB             		inc 	ix
   22 00:42CB             		cp 		ch 							; exit if matches
   23 00:42CB             		ret 	z
   24 00:42CB             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:42CB             		jp 		ErrorHandler
   26 00:42CB             #endmacro
   27 00:42CB -  -  -  -  
   28 00:42CB -  -  -  -  CheckLeftBracket:
   29 00:42CB DD 7E 00 DD 
              23 FE 95 C8 
              3E 0B C3 0A 
              43 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:42D8 -  -  -  -  
   31 00:42D8 -  -  -  -  CheckRightBracket:
   32 00:42D8 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0C C3 0A 
              43 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:42E5 -  -  -  -  
   34 00:42E5 -  -  -  -  CheckDollar:
   35 00:42E5 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0A C3 0A 
              43 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:42F2 -  -  -  -  		
   37 00:42F2 -  -  -  -  CheckComma:
   38 00:42F2 DD 7E 00 DD 
              23 FE A6 C8 
              3E 09 C3 0A 
              43 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:42FF -  -  -  -  
   40 00:42FF -  -  -  -  ; ***************************************************************************************
   41 00:42FF -  -  -  -  ;
   42 00:42FF -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:42FF -  -  -  -  ;
   44 00:42FF -  -  -  -  ; ***************************************************************************************
   45 00:42FF -  -  -  -  
   46 00:42FF -  -  -  -  CheckNextA:
   47 00:42FF DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:4302 DD 23 -  -  		inc 	ix 							; skip character
   49 00:4304 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:4305 3E 0F C3 0A 
              43 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:430A -  -  -  -  		
   52 00:430A -  -  -  -  ; ***************************************************************************************
   53 00:430A -  -  -  -  ;
   54 00:430A -  -  -  -  ;									Changes and Updates
   55 00:430A -  -  -  -  ;
   56 00:430A -  -  -  -  ; ***************************************************************************************
   57 00:430A -  -  -  -  ;
   58 00:430A -  -  -  -  ;		Date			Notes
   59 00:430A -  -  -  -  ;		==== 			=====
   60 00:430A -  -  -  -  ;
   61 00:430A -  -  -  -  ; ***************************************************************************************
   62 00:430A -  -  -  -  		
Listing for file "_build.asm"
   25 00:430A -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:430A -  -  -  -  ; ***************************************************************************************
    2 00:430A -  -  -  -  ; ***************************************************************************************
    3 00:430A -  -  -  -  ;
    4 00:430A -  -  -  -  ;		Name : 		errors.asm
    5 00:430A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:430A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:430A -  -  -  -  ;		Reviewed :	No
    8 00:430A -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:430A -  -  -  -  ;
   10 00:430A -  -  -  -  ; ***************************************************************************************
   11 00:430A -  -  -  -  ; ***************************************************************************************
   12 00:430A -  -  -  -  
   13 00:430A -  -  -  -  ; ***************************************************************************************
   14 00:430A -  -  -  -  ;
   15 00:430A -  -  -  -  ;								Error handler, message A 
   16 00:430A -  -  -  -  ;
   17 00:430A -  -  -  -  ; ***************************************************************************************
   18 00:430A -  -  -  -  
   19 00:430A -  -  -  -  ErrorHandler:
   20 00:430A F5 -  -  -  		push 	af 						; save error ID
   21 00:430B -  -  -  -  
   22 00:430B 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:430E 6F -  -  -  		ld 		l,a
   24 00:430F 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4310 29 -  -  -  		add 	hl,hl 		
   26 00:4311 11 11 49 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4314 19 -  -  -  		add 	hl,de
   28 00:4315 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4319 CD BD 47 -  		call 	PrintStringAtHL
   30 00:431C -  -  -  -  		;
   31 00:431C F1 -  -  -  		pop 	af 						; restore error ID
   32 00:431D B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:431E 28 28 -  -  		jr 		z,_EHExit
   34 00:4320 -  -  -  -  		;
   35 00:4320 DD 2A 54 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:4324 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4327 B7 -  -  -  		or 		a
   38 00:4328 28 1E -  -  		jr 		z,_EHExit
   39 00:432A -  -  -  -  
   40 00:432A 21 4E 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:432D CD BD 47 -  		call 	PrintStringAtHL 
   42 00:4330 -  -  -  -  		
   43 00:4330 D9 -  -  -  		exx								; HL'HL = line number
   44 00:4331 21 00 00 -  		ld 		hl,$0000 		
   45 00:4334 D9 -  -  -  		exx 
   46 00:4335 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4338 DD 66 02 -  		ld 		h,(ix+2)
   48 00:433B 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:433D 01 98 40 -  		ld 		bc,ConvertBuffer
   50 00:4340 CD 98 4C -  		call 	Int32ToString
   51 00:4343 C5 -  -  -  		push 	bc
   52 00:4344 E1 -  -  -  		pop 	hl
   53 00:4345 CD BD 47 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4348 -  -  -  -  _EHExit:		
   55 00:4348 CD 02 4D -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:434B C3 1A 40 -  		jp 		WarmStart
   57 00:434E -  -  -  -  
   58 00:434E -  -  -  -  _EHAtText:
   59 00:434E 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4358 -  -  -  -  
   61 00:4358 -  -  -  -  NotImplemented:
   62 00:4358 3E 05 C3 0A 
              43 -  -  -  		ERR_DISABLED
   63 00:435D -  -  -  -  TypeMismatch:
   64 00:435D 3E 02 C3 0A 
              43 -  -  -  		ERR_BADTYPE
   65 00:4362 -  -  -  -  BadValue:
   66 00:4362 3E 03 C3 0A 
              43 -  -  -  		ERR_BADVALUE
   67 00:4367 -  -  -  -  SyntaxError:
   68 00:4367 3E 0F C3 0A 
              43 -  -  -  		ERR_SYNTAX
   69 00:436C -  -  -  -  						
   70 00:436C -  -  -  -  ; ***************************************************************************************
   71 00:436C -  -  -  -  ;
   72 00:436C -  -  -  -  ;									Changes and Updates
   73 00:436C -  -  -  -  ;
   74 00:436C -  -  -  -  ; ***************************************************************************************
   75 00:436C -  -  -  -  ;
   76 00:436C -  -  -  -  ;		Date			Notes
   77 00:436C -  -  -  -  ;		==== 			=====
   78 00:436C -  -  -  -  ;
   79 00:436C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:436C -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:436C -  -  -  -  ; ***************************************************************************************
    2 00:436C -  -  -  -  ; ***************************************************************************************
    3 00:436C -  -  -  -  ;
    4 00:436C -  -  -  -  ;		Name : 		basicmath.asm
    5 00:436C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:436C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:436C -  -  -  -  ;		Reviewed :	No
    8 00:436C -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:436C -  -  -  -  ;
   10 00:436C -  -  -  -  ; ***************************************************************************************
   11 00:436C -  -  -  -  ; ***************************************************************************************
   12 00:436C -  -  -  -  
   13 00:436C -  -  -  -  ; ***************************************************************************************
   14 00:436C -  -  -  -  ;
   15 00:436C -  -  -  -  ; 									Addition
   16 00:436C -  -  -  -  ;
   17 00:436C -  -  -  -  ; ***************************************************************************************
   18 00:436C -  -  -  -  
   19 00:436C -  -  -  -  ALUAdd: 		;; [+]
   20 00:436C CD 5F 44 78 
              B1 C2 5D 43 
              C3 25 4C -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4377 -  -  -  -  
   22 00:4377 -  -  -  -  ; ***************************************************************************************
   23 00:4377 -  -  -  -  ;
   24 00:4377 -  -  -  -  ; 									Subtraction
   25 00:4377 -  -  -  -  ;
   26 00:4377 -  -  -  -  ; ***************************************************************************************
   27 00:4377 -  -  -  -  
   28 00:4377 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4377 CD 5F 44 78 
              B1 C2 5D 43 
              C3 2B 4C -  		IntegerDispatch(Int32Subtract)
   30 00:4382 -  -  -  -  
   31 00:4382 -  -  -  -  ; ***************************************************************************************
   32 00:4382 -  -  -  -  ;
   33 00:4382 -  -  -  -  ; 									  Multiply
   34 00:4382 -  -  -  -  ;
   35 00:4382 -  -  -  -  ; ***************************************************************************************
   36 00:4382 -  -  -  -  
   37 00:4382 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:4382 CD 5F 44 78 
              B1 C2 5D 43 
              C3 EF 4B -  		IntegerDispatch(Int32Multiply)
   39 00:438D -  -  -  -  
   40 00:438D -  -  -  -  ; ***************************************************************************************
   41 00:438D -  -  -  -  ;
   42 00:438D -  -  -  -  ; 									  Divide
   43 00:438D -  -  -  -  ;
   44 00:438D -  -  -  -  ; ***************************************************************************************
   45 00:438D -  -  -  -  
   46 00:438D -  -  -  -  ALUDivide: 	;; [/]
   47 00:438D -  -  -  -  ALUDivide2:	;; [div]
   48 00:438D CD 5F 44 78 
              B1 C2 5D 43 
              C3 00 4B -  		IntegerDispatch(Int32SDivide)
   49 00:4398 -  -  -  -  
   50 00:4398 -  -  -  -  ; ***************************************************************************************
   51 00:4398 -  -  -  -  ;
   52 00:4398 -  -  -  -  ; 									  Modulus
   53 00:4398 -  -  -  -  ;
   54 00:4398 -  -  -  -  ; ***************************************************************************************
   55 00:4398 -  -  -  -  
   56 00:4398 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4398 CD 5F 44 78 
              B1 C2 5D 43 
              C3 03 4B -  		IntegerDispatch(Int32Modulus)
   58 00:43A3 -  -  -  -  
   59 00:43A3 -  -  -  -  ; ***************************************************************************************
   60 00:43A3 -  -  -  -  ;
   61 00:43A3 -  -  -  -  ; 									  Logical
   62 00:43A3 -  -  -  -  ;
   63 00:43A3 -  -  -  -  ; ***************************************************************************************
   64 00:43A3 -  -  -  -  
   65 00:43A3 -  -  -  -  ALUAnd: 		;; [and]
   66 00:43A3 CD 5F 44 78 
              B1 C2 5D 43 
              C3 33 4C -  		IntegerDispatch(Int32And)
   67 00:43AE -  -  -  -  
   68 00:43AE -  -  -  -  ALUOr: 			;; [or]
   69 00:43AE CD 5F 44 78 
              B1 C2 5D 43 
              C3 3F 4C -  		IntegerDispatch(Int32Or)
   70 00:43B9 -  -  -  -  
   71 00:43B9 -  -  -  -  ALUXor: 		;; [eor]
   72 00:43B9 CD 5F 44 78 
              B1 C2 5D 43 
              C3 4B 4C -  		IntegerDispatch(Int32Xor)
   73 00:43C4 -  -  -  -  
   74 00:43C4 -  -  -  -  ; ***************************************************************************************
   75 00:43C4 -  -  -  -  ;
   76 00:43C4 -  -  -  -  ;									Changes and Updates
   77 00:43C4 -  -  -  -  ;
   78 00:43C4 -  -  -  -  ; ***************************************************************************************
   79 00:43C4 -  -  -  -  ;
   80 00:43C4 -  -  -  -  ;		Date			Notes
   81 00:43C4 -  -  -  -  ;		==== 			=====
   82 00:43C4 -  -  -  -  ;
   83 00:43C4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:43C4 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:43C4 -  -  -  -  ; ***************************************************************************************
    2 00:43C4 -  -  -  -  ; ***************************************************************************************
    3 00:43C4 -  -  -  -  ;
    4 00:43C4 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:43C4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43C4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43C4 -  -  -  -  ;		Reviewed :	No
    8 00:43C4 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:43C4 -  -  -  -  ;
   10 00:43C4 -  -  -  -  ; ***************************************************************************************
   11 00:43C4 -  -  -  -  ; ***************************************************************************************
   12 00:43C4 -  -  -  -  
   13 00:43C4 -  -  -  -  ; ***************************************************************************************
   14 00:43C4 -  -  -  -  ;
   15 00:43C4 -  -  -  -  ; 									<l> <op> <r>
   16 00:43C4 -  -  -  -  ;
   17 00:43C4 -  -  -  -  ; ***************************************************************************************
   18 00:43C4 -  -  -  -  
   19 00:43C4 -  -  -  -  ALULongReference:			;; [!]
   20 00:43C4 CD D2 43 -  		call 	BRGetAddress 				; calculate address
   21 00:43C7 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:43C9 CB F9 -  -  		set 	CIsReference,c
   23 00:43CB C9 -  -  -  		ret
   24 00:43CC -  -  -  -  
   25 00:43CC -  -  -  -  ALUByteReference: 			;; [?]
   26 00:43CC CD C4 43 -  		call 	ALULongReference
   27 00:43CF CB F1 -  -  		set 	CIsByteReference,c
   28 00:43D1 C9 -  -  -  		ret
   29 00:43D2 -  -  -  -  
   30 00:43D2 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:43D2 CD 5F 44 78 
              B1 C2 5D 43 
              C3 DD 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:43DD -  -  -  -  _BRGAMain:		
   33 00:43DD CD 25 4C -  		call 	Int32Add 					; address in HL'HL
   34 00:43E0 CD 48 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:43E3 C9 -  -  -  		ret
   36 00:43E4 -  -  -  -  
   37 00:43E4 -  -  -  -  ; ***************************************************************************************
   38 00:43E4 -  -  -  -  ;
   39 00:43E4 -  -  -  -  ;									Changes and Updates
   40 00:43E4 -  -  -  -  ;
   41 00:43E4 -  -  -  -  ; ***************************************************************************************
   42 00:43E4 -  -  -  -  ;
   43 00:43E4 -  -  -  -  ;		Date			Notes
   44 00:43E4 -  -  -  -  ;		==== 			=====
   45 00:43E4 -  -  -  -  ;
   46 00:43E4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43E4 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:43E4 -  -  -  -  ; ***************************************************************************************
    2 00:43E4 -  -  -  -  ; ***************************************************************************************
    3 00:43E4 -  -  -  -  ;
    4 00:43E4 -  -  -  -  ;		Name : 		compare.asm
    5 00:43E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43E4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43E4 -  -  -  -  ;		Reviewed :	No
    8 00:43E4 -  -  -  -  ;		Purpose :	Comparison code
    9 00:43E4 -  -  -  -  ;
   10 00:43E4 -  -  -  -  ; ***************************************************************************************
   11 00:43E4 -  -  -  -  ; ***************************************************************************************
   12 00:43E4 -  -  -  -  
   13 00:43E4 -  -  -  -  #macro compare_equals(n)
   14 00:43E4             		call 	CompareBaseCode
   15 00:43E4             		cp 		n
   16 00:43E4             		jr 		z,UnaryInt32True
   17 00:43E4             		jr 		UnaryInt32False
   18 00:43E4             #endmacro
   19 00:43E4 -  -  -  -  
   20 00:43E4 -  -  -  -  #macro compare_not_equals(n)
   21 00:43E4             		call 	CompareBaseCode
   22 00:43E4             		cp 		n
   23 00:43E4             		jr 		nz,UnaryInt32True
   24 00:43E4             		jr 		UnaryInt32False
   25 00:43E4             #endmacro
   26 00:43E4 -  -  -  -  
   27 00:43E4 -  -  -  -  ; ***************************************************************************************
   28 00:43E4 -  -  -  -  ;
   29 00:43E4 -  -  -  -  ; 								Return True/False
   30 00:43E4 -  -  -  -  ;
   31 00:43E4 -  -  -  -  ; ***************************************************************************************
   32 00:43E4 -  -  -  -  
   33 00:43E4 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:43E4 3E FF -  -  		ld 		a,255
   35 00:43E6 18 01 -  -  		jr 		_Int32Logical
   36 00:43E8 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:43E8 AF -  -  -  		xor 	a
   38 00:43E9 -  -  -  -  _Int32Logical:
   39 00:43E9 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:43EA 67 -  -  -  		ld 		h,a
   41 00:43EB D9 -  -  -  		exx
   42 00:43EC 6F -  -  -  		ld 		l,a
   43 00:43ED 67 -  -  -  		ld 		h,a
   44 00:43EE D9 -  -  -  		exx
   45 00:43EF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:43F1 C9 -  -  -  		ret
   47 00:43F2 -  -  -  -  
   48 00:43F2 -  -  -  -  ; ***************************************************************************************
   49 00:43F2 -  -  -  -  ;
   50 00:43F2 -  -  -  -  ; 										> = < (compare == value)
   51 00:43F2 -  -  -  -  ;
   52 00:43F2 -  -  -  -  ; ***************************************************************************************
   53 00:43F2 -  -  -  -  
   54 00:43F2 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:43F2 CD 28 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:43FB -  -  -  -  
   57 00:43FB -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:43FB CD 28 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:4404 -  -  -  -  
   60 00:4404 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:4404 CD 28 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:440D -  -  -  -  
   63 00:440D -  -  -  -  ; ***************************************************************************************
   64 00:440D -  -  -  -  ;
   65 00:440D -  -  -  -  ; 										> = < (compare <> value)
   66 00:440D -  -  -  -  ;
   67 00:440D -  -  -  -  ; ***************************************************************************************
   68 00:440D -  -  -  -  
   69 00:440D -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:440D CD 28 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4416 -  -  -  -  
   72 00:4416 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4416 CD 28 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:441F -  -  -  -  
   75 00:441F -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:441F CD 28 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4428 -  -  -  -  
   78 00:4428 -  -  -  -  ; ***************************************************************************************
   79 00:4428 -  -  -  -  ;
   80 00:4428 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4428 -  -  -  -  ;
   82 00:4428 -  -  -  -  ; ***************************************************************************************
   83 00:4428 -  -  -  -  
   84 00:4428 -  -  -  -  CompareBaseCode:
   85 00:4428 CD 5F 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:442B -  -  -  -  
   87 00:442B 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:442C A1 -  -  -  		and 	c
   89 00:442D CB 47 -  -  		bit 	CIsString,a 
   90 00:442F C2 3E 44 -  		jp 		nz,StringCompare
   91 00:4432 -  -  -  -  
   92 00:4432 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:4433 B1 -  -  -  		or 		c
   94 00:4434 CB 47 -  -  		bit 	CIsString,a 
   95 00:4436 CA 5E 4C -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4439 -  -  -  -  
   97 00:4439 3E 02 C3 0A 
              43 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:443E -  -  -  -  ;
   99 00:443E -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:443E -  -  -  -  ;
  101 00:443E -  -  -  -  StringCompare:
  102 00:443E 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:443F BE -  -  -  		cp 		(hl)
  104 00:4440 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:4442 20 08 -  -  		jr 		nz,_SCLess
  106 00:4444 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4445 23 -  -  -  		inc 	hl
  108 00:4446 FE 20 -  -  		cp 		' '
  109 00:4448 30 F4 -  -  		jr 		nc,StringCompare
  110 00:444A AF -  -  -  		xor 	a 							; return 0.
  111 00:444B C9 -  -  -  		ret
  112 00:444C -  -  -  -  
  113 00:444C -  -  -  -  _SCLess:
  114 00:444C 3E FF -  -  		ld 		a,$FF
  115 00:444E C9 -  -  -  		ret
  116 00:444F -  -  -  -  _SCGreater:
  117 00:444F 3E 01 -  -  		ld 		a,1
  118 00:4451 C9 -  -  -  		ret
  119 00:4452 -  -  -  -  
  120 00:4452 3E 10 C3 0A 
              43 -  -  -  		ERR_TODO()
  121 00:4457 -  -  -  -  
  122 00:4457 -  -  -  -  ; ***************************************************************************************
  123 00:4457 -  -  -  -  ;
  124 00:4457 -  -  -  -  ;									Changes and Updates
  125 00:4457 -  -  -  -  ;
  126 00:4457 -  -  -  -  ; ***************************************************************************************
  127 00:4457 -  -  -  -  ;
  128 00:4457 -  -  -  -  ;		Date			Notes
  129 00:4457 -  -  -  -  ;		==== 			=====
  130 00:4457 -  -  -  -  ;
  131 00:4457 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:4457 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:4457 -  -  -  -  ; ***************************************************************************************
    2 00:4457 -  -  -  -  ; ***************************************************************************************
    3 00:4457 -  -  -  -  ;
    4 00:4457 -  -  -  -  ;		Name : 		utility.asm
    5 00:4457 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4457 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4457 -  -  -  -  ;		Reviewed :	No
    8 00:4457 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:4457 -  -  -  -  ;
   10 00:4457 -  -  -  -  ; ***************************************************************************************
   11 00:4457 -  -  -  -  ; ***************************************************************************************
   12 00:4457 -  -  -  -  
   13 00:4457 -  -  -  -  ; ***************************************************************************************
   14 00:4457 -  -  -  -  ;
   15 00:4457 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:4457 -  -  -  -  ;
   17 00:4457 -  -  -  -  ; ***************************************************************************************
   18 00:4457 -  -  -  -  
   19 00:4457 -  -  -  -  SwapHLDE:
   20 00:4457 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4458 D9 -  -  -  			exx
   22 00:4459 EB -  -  -  			ex 		de,hl
   23 00:445A D9 -  -  -  			exx
   24 00:445B 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:445C 41 -  -  -  			ld 		b,c
   26 00:445D 4F -  -  -  			ld 		c,a
   27 00:445E C9 -  -  -  			ret
   28 00:445F -  -  -  -  
   29 00:445F -  -  -  -  ; ***************************************************************************************
   30 00:445F -  -  -  -  ;
   31 00:445F -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:445F -  -  -  -  ;
   33 00:445F -  -  -  -  ; ***************************************************************************************
   34 00:445F -  -  -  -  
   35 00:445F -  -  -  -  DereferenceBoth:
   36 00:445F CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:4461 C4 1A 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:4464 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:4466 C8 -  -  -  			ret 	z
   40 00:4467 CD 57 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:446A CD 1A 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:446D CD 57 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4470 C9 -  -  -  			ret
   44 00:4471 -  -  -  -  
   45 00:4471 -  -  -  -  ; ***************************************************************************************
   46 00:4471 -  -  -  -  ;
   47 00:4471 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:4471 -  -  -  -  ;
   49 00:4471 -  -  -  -  ; ***************************************************************************************
   50 00:4471 -  -  -  -  
   51 00:4471 -  -  -  -  NegateHLHL:	
   52 00:4471 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:4473 C2 5D 43 -  			jp 		nz,TypeMismatch
   54 00:4476 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4478 C4 1A 45 -  			call 	nz,Dereference 			; if required.
   56 00:447B CD 85 4C -  			call 	Int32Negate
   57 00:447E C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:447F -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:447F -  -  -  -  ; ***************************************************************************************
    2 00:447F -  -  -  -  ; ***************************************************************************************
    3 00:447F -  -  -  -  ;
    4 00:447F -  -  -  -  ;		Name : 		expression.asm
    5 00:447F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:447F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:447F -  -  -  -  ;		Reviewed :	None
    8 00:447F -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:447F -  -  -  -  ;
   10 00:447F -  -  -  -  ; ***************************************************************************************
   11 00:447F -  -  -  -  ; ***************************************************************************************
   12 00:447F -  -  -  -  
   13 00:447F -  -  -  -  ; ***************************************************************************************
   14 00:447F -  -  -  -  ;
   15 00:447F -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:447F -  -  -  -  ;
   17 00:447F -  -  -  -  ; ***************************************************************************************
   18 00:447F -  -  -  -  
   19 00:447F -  -  -  -  EvaluateAtPrecedence0:
   20 00:447F AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4480 -  -  -  -  EvaluateAtPrecedence:
   22 00:4480 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:4481 -  -  -  -  		;
   24 00:4481 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:4481 -  -  -  -  		;
   26 00:4481 CD 4A 45 -  		call 	EvaluateTerm 				; get term
   27 00:4484 -  -  -  -  		;
   28 00:4484 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4484 -  -  -  -  		;
   30 00:4484 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4485 -  -  -  -  _EAPLoop:
   32 00:4485 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4488 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:448A D8 -  -  -  		ret 	c
   35 00:448B FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:448D D0 -  -  -  		ret 	nc
   37 00:448E -  -  -  -  		;
   38 00:448E -  -  -  -  		; 		Get the precedence.
   39 00:448E -  -  -  -  		;
   40 00:448E E5 -  -  -  		push 	hl 							; want to use HL
   41 00:448F D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:4491 21 00 49 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4494 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4495 6F -  -  -  		ld 		l,a
   45 00:4496 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4497 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4498 -  -  -  -  		;
   48 00:4498 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4498 -  -  -  -  		;
   50 00:4498 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4499 BB -  -  -  		cp 		e
   52 00:449A D0 -  -  -  		ret 	nc
   53 00:449B -  -  -  -  
   54 00:449B -  -  -  -  		;
   55 00:449B -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:449B -  -  -  -  		;
   57 00:449B D5 -  -  -  		push 	de 							; save precedence information.
   58 00:449C -  -  -  -  		;
   59 00:449C DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:449F F5 -  -  -  		push 	af
   61 00:44A0 -  -  -  -  		;
   62 00:44A0 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:44A1 D9 -  -  -  		exx 								; save HL'
   64 00:44A2 E5 -  -  -  		push 	hl
   65 00:44A3 D9 -  -  -  		exx 								
   66 00:44A4 E5 -  -  -  		push 	hl 							; save HL
   67 00:44A5 -  -  -  -  		;
   68 00:44A5 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:44A7 -  -  -  -  		;
   70 00:44A7 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:44A7 -  -  -  -  		;
   72 00:44A7 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:44A8 CD 80 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:44AB -  -  -  -  		;
   75 00:44AB -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:44AB -  -  -  -  		;
   77 00:44AB 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:44AC -  -  -  -  
   79 00:44AC EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:44AD E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:44AE D9 -  -  -  		exx
   82 00:44AF EB -  -  -  		ex 		de,hl
   83 00:44B0 E1 -  -  -  		pop 	hl
   84 00:44B1 D9 -  -  -  		exx
   85 00:44B2 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:44B3 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:44B4 -  -  -  -  		;
   88 00:44B4 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:44B4 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:44B4 -  -  -  -  		;
   91 00:44B4 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:44B5 -  -  -  -  		;
   93 00:44B5 -  -  -  -  		; 		Call the binary operator in A.
   94 00:44B5 -  -  -  -  		;
   95 00:44B5 D5 -  -  -  		push 	de
   96 00:44B6 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:44B7 E6 7F 21 00 
              00 6F 29 11 
              60 4A 19 5E 
              23 56 ED 53 
              5D 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:44C9 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:44CA D1 -  -  -  		pop 	de 							; restore DE
  100 00:44CB CD 5C 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:44CE -  -  -  -  		;
  102 00:44CE D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:44CF -  -  -  -  		;
  104 00:44CF 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:44D1 -  -  -  -  
  106 00:44D1 -  -  -  -  ; ***************************************************************************************
  107 00:44D1 -  -  -  -  ;
  108 00:44D1 -  -  -  -  ;									Changes and Updates
  109 00:44D1 -  -  -  -  ;
  110 00:44D1 -  -  -  -  ; ***************************************************************************************
  111 00:44D1 -  -  -  -  ;
  112 00:44D1 -  -  -  -  ;		Date			Notes
  113 00:44D1 -  -  -  -  ;		==== 			=====
  114 00:44D1 -  -  -  -  ;
  115 00:44D1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:44D1 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:44D1 -  -  -  -  ; ***************************************************************************************
    2 00:44D1 -  -  -  -  ; ***************************************************************************************
    3 00:44D1 -  -  -  -  ;
    4 00:44D1 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:44D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44D1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44D1 -  -  -  -  ;		Reviewed :	No
    8 00:44D1 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:44D1 -  -  -  -  ;
   10 00:44D1 -  -  -  -  ; ***************************************************************************************
   11 00:44D1 -  -  -  -  ; ***************************************************************************************
   12 00:44D1 -  -  -  -  
   13 00:44D1 -  -  -  -  ; ***************************************************************************************
   14 00:44D1 -  -  -  -  ;
   15 00:44D1 -  -  -  -  ; 								Evaluate an integer term
   16 00:44D1 -  -  -  -  ;
   17 00:44D1 -  -  -  -  ; ***************************************************************************************
   18 00:44D1 -  -  -  -  
   19 00:44D1 -  -  -  -  EvaluateIntegerTerm:
   20 00:44D1 CD 4A 45 -  		call 	EvaluateTerm
   21 00:44D4 CD 1A 45 -  		call 	DeReference
   22 00:44D7 CB 41 -  -  		bit 	CIsString,c
   23 00:44D9 C8 -  -  -  		ret 	z
   24 00:44DA C3 5D 43 -  		jp 		TypeMismatch
   25 00:44DD -  -  -  -  
   26 00:44DD -  -  -  -  ; ***************************************************************************************
   27 00:44DD -  -  -  -  ;
   28 00:44DD -  -  -  -  ; 								Evaluate a string term
   29 00:44DD -  -  -  -  ;
   30 00:44DD -  -  -  -  ; ***************************************************************************************
   31 00:44DD -  -  -  -  
   32 00:44DD -  -  -  -  EvaluateStringTerm:
   33 00:44DD CD 4A 45 -  		call 	EvaluateTerm
   34 00:44E0 CD 1A 45 -  		call 	DeReference
   35 00:44E3 CB 41 -  -  		bit 	CIsString,c
   36 00:44E5 C0 -  -  -  		ret 	nz
   37 00:44E6 C3 5D 43 -  		jp 		TypeMismatch
   38 00:44E9 -  -  -  -  
   39 00:44E9 -  -  -  -  ; ***************************************************************************************
   40 00:44E9 -  -  -  -  ;
   41 00:44E9 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:44E9 -  -  -  -  ;
   43 00:44E9 -  -  -  -  ; ***************************************************************************************
   44 00:44E9 -  -  -  -  
   45 00:44E9 -  -  -  -  EvaluateValue:
   46 00:44E9 CD 7F 44 -  		call 	EvaluateAtPrecedence0
   47 00:44EC C3 1A 45 -  		jp 		Dereference
   48 00:44EF -  -  -  -  
   49 00:44EF -  -  -  -  ; ***************************************************************************************
   50 00:44EF -  -  -  -  ;
   51 00:44EF -  -  -  -  ; 									Evaluate a number
   52 00:44EF -  -  -  -  ;
   53 00:44EF -  -  -  -  ; ***************************************************************************************
   54 00:44EF -  -  -  -  
   55 00:44EF -  -  -  -  EvaluateInteger:
   56 00:44EF CD E9 44 -  		call 	EvaluateValue
   57 00:44F2 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:44F4 C8 -  -  -  		ret 	z
   59 00:44F5 C3 5D 43 -  		jp 		TypeMismatch
   60 00:44F8 -  -  -  -  
   61 00:44F8 -  -  -  -  ; ***************************************************************************************
   62 00:44F8 -  -  -  -  ;
   63 00:44F8 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:44F8 -  -  -  -  ;
   65 00:44F8 -  -  -  -  ; ***************************************************************************************
   66 00:44F8 -  -  -  -  
   67 00:44F8 -  -  -  -  Evaluate8BitInteger:
   68 00:44F8 CD EF 44 -  		call 	EvaluateInteger
   69 00:44FB D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:44FC 7C -  -  -  		ld 		a,h
   71 00:44FD B5 -  -  -  		or 		l
   72 00:44FE D9 -  -  -  		exx 	
   73 00:44FF B4 -  -  -  		or 		h
   74 00:4500 C2 62 43 -  		jp 		nz,BadValue
   75 00:4503 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:4504 C9 -  -  -  		ret
   77 00:4505 -  -  -  -  		
   78 00:4505 -  -  -  -  ; ***************************************************************************************
   79 00:4505 -  -  -  -  ;
   80 00:4505 -  -  -  -  ; 									Evaluate a string
   81 00:4505 -  -  -  -  ;
   82 00:4505 -  -  -  -  ; ***************************************************************************************
   83 00:4505 -  -  -  -  
   84 00:4505 -  -  -  -  EvaluateStringOnly:
   85 00:4505 CD E9 44 -  		call 	EvaluateValue
   86 00:4508 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:450A CA 5D 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:450D C9 -  -  -  		ret
   89 00:450E -  -  -  -  
   90 00:450E -  -  -  -  ; ***************************************************************************************
   91 00:450E -  -  -  -  ;
   92 00:450E -  -  -  -  ; 								Return 8/16 bit constant
   93 00:450E -  -  -  -  ;
   94 00:450E -  -  -  -  ; ***************************************************************************************
   95 00:450E -  -  -  -  
   96 00:450E -  -  -  -  Return8BitConstant:
   97 00:450E 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:4511 6F -  -  -  		ld 		l,a
   99 00:4512 -  -  -  -  Return16BitConstant:
  100 00:4512 D9 -  -  -  		exx 								; clear HL'
  101 00:4513 21 00 00 -  		ld 		hl,0
  102 00:4516 D9 -  -  -  		exx
  103 00:4517 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4519 C9 -  -  -  		ret
  105 00:451A -  -  -  -  
  106 00:451A -  -  -  -  ; ***************************************************************************************
  107 00:451A -  -  -  -  ;
  108 00:451A -  -  -  -  ;									Changes and Updates
  109 00:451A -  -  -  -  ;
  110 00:451A -  -  -  -  ; ***************************************************************************************
  111 00:451A -  -  -  -  ;
  112 00:451A -  -  -  -  ;		Date			Notes
  113 00:451A -  -  -  -  ;		==== 			=====
  114 00:451A -  -  -  -  ;
  115 00:451A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:451A -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:451A -  -  -  -  ; ***************************************************************************************
    2 00:451A -  -  -  -  ; ***************************************************************************************
    3 00:451A -  -  -  -  ;
    4 00:451A -  -  -  -  ;		Name : 		reference.asm
    5 00:451A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:451A -  -  -  -  ;		Date : 		1st May 2022
    7 00:451A -  -  -  -  ;		Reviewed :	No
    8 00:451A -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:451A -  -  -  -  ;
   10 00:451A -  -  -  -  ; ***************************************************************************************
   11 00:451A -  -  -  -  ; ***************************************************************************************
   12 00:451A -  -  -  -  
   13 00:451A -  -  -  -  ; ***************************************************************************************
   14 00:451A -  -  -  -  ;
   15 00:451A -  -  -  -  ; 									Dereference HL'HL C
   16 00:451A -  -  -  -  ;
   17 00:451A -  -  -  -  ; ***************************************************************************************
   18 00:451A -  -  -  -  
   19 00:451A -  -  -  -  Dereference:
   20 00:451A CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:451C C8 -  -  -  		ret 	z
   22 00:451D -  -  -  -  
   23 00:451D CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:451F -  -  -  -  		
   25 00:451F CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:4521 20 20 -  -  		jr 		nz,_DRInternal
   27 00:4523 -  -  -  -  
   28 00:4523 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4525 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4527 -  -  -  -  
   31 00:4527 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4528 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:452C D9 -  -  -  		exx
   34 00:452D E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:452E 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:452F 23 -  -  -  		inc  	hl
   37 00:4530 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:4534 D9 -  -  -  		exx 								; fix back
   39 00:4535 C9 -  -  -  		ret
   40 00:4536 -  -  -  -  
   41 00:4536 -  -  -  -  _DeRefByte:		
   42 00:4536 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4537 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:453A 6F -  -  -  		ld	 	l,a
   45 00:453B D9 -  -  -  		exx
   46 00:453C 21 00 00 -  		ld 		hl,$0000
   47 00:453F D9 -  -  -  		exx
   48 00:4540 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:4542 C9 -  -  -  		ret
   50 00:4543 -  -  -  -  
   51 00:4543 -  -  -  -  _DRInternal:
   52 00:4543 3E 05 C3 0A 
              43 -  -  -  		ERR_DISABLED
   53 00:4548 -  -  -  -  
   54 00:4548 -  -  -  -  ; ***************************************************************************************
   55 00:4548 -  -  -  -  ;
   56 00:4548 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4548 -  -  -  -  ;
   58 00:4548 -  -  -  -  ; ***************************************************************************************
   59 00:4548 -  -  -  -  
   60 00:4548 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4548 -  -  -  -  		#ifdef EZ80
   62 00:4548             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4548             		exx
   64 00:4548             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4548             		ld 		hl,$0000 					; zero HL'
   66 00:4548             		exx
   67 00:4548             		ld 		hl,(AConvert) 				; load UHL
   68 00:4548             		#endif
   69 00:4548 C9 -  -  -  		ret
   70 00:4549 -  -  -  -  
   71 00:4549 -  -  -  -  ; ***************************************************************************************
   72 00:4549 -  -  -  -  ;
   73 00:4549 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4549 -  -  -  -  ;
   75 00:4549 -  -  -  -  ; ***************************************************************************************
   76 00:4549 -  -  -  -  
   77 00:4549 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4549 -  -  -  -  		#ifdef EZ80
   79 00:4549             		ld 		(AConvert),hl
   80 00:4549             		ld 		hl,$0000
   81 00:4549             		ld 		(AConvert+3),hl
   82 00:4549             		exx
   83 00:4549             		ld 		hl,(AConvert+2)
   84 00:4549             		exx
   85 00:4549             		xor 	a
   86 00:4549             		ld 		(AConvert+2),a
   87 00:4549             		ld 		hl,(AConvert)
   88 00:4549             		#endif
   89 00:4549 C9 -  -  -  		ret
   90 00:454A -  -  -  -  
   91 00:454A -  -  -  -  ; ***************************************************************************************
   92 00:454A -  -  -  -  ;
   93 00:454A -  -  -  -  ;									Changes and Updates
   94 00:454A -  -  -  -  ;
   95 00:454A -  -  -  -  ; ***************************************************************************************
   96 00:454A -  -  -  -  ;
   97 00:454A -  -  -  -  ;		Date			Notes
   98 00:454A -  -  -  -  ;		==== 			=====
   99 00:454A -  -  -  -  ;
  100 00:454A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:454A -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:454A -  -  -  -  ; ***************************************************************************************
    2 00:454A -  -  -  -  ; ***************************************************************************************
    3 00:454A -  -  -  -  ;
    4 00:454A -  -  -  -  ;		Name : 		term.asm
    5 00:454A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454A -  -  -  -  ;		Reviewed :	No
    8 00:454A -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:454A -  -  -  -  ;
   10 00:454A -  -  -  -  ; ***************************************************************************************
   11 00:454A -  -  -  -  ; ***************************************************************************************
   12 00:454A -  -  -  -  
   13 00:454A -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:454A             		add_hlhl_16
   15 00:454A             		exx
   16 00:454A             		adc_hlhl_16
   17 00:454A             		exx
   18 00:454A             #endmacro
   19 00:454A -  -  -  -  
   20 00:454A -  -  -  -  ; ***************************************************************************************
   21 00:454A -  -  -  -  ;
   22 00:454A -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:454A -  -  -  -  ;
   24 00:454A -  -  -  -  ; ***************************************************************************************
   25 00:454A -  -  -  -  ;
   26 00:454A -  -  -  -  ; 		Terms can be:
   27 00:454A -  -  -  -  ;
   28 00:454A -  -  -  -  ;			<integer> 			42 						not negative
   29 00:454A -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:454A -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:454A -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:454A -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:454A -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:454A -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:454A -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:454A -  -  -  -  ; 														reference of some sort.
   37 00:454A -  -  -  -  ;
   38 00:454A -  -  -  -  ; ***************************************************************************************
   39 00:454A -  -  -  -  
   40 00:454A -  -  -  -  EvaluateTerm:		
   41 00:454A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:454C D9 -  -  -  		exx
   43 00:454D 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4550 D9 -  -  -  		exx
   45 00:4551 21 00 00 -  		ld 		hl,$0000		
   46 00:4554 -  -  -  -  		;
   47 00:4554 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:4557 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4559 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:455B DA F9 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:455E CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4560 C2 A8 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:4563 -  -  -  -  		;
   54 00:4563 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:4563 -  -  -  -  		;
   56 00:4563 -  -  -  -  _ETIntegerConstant:
   57 00:4563 -  -  -  -  		;
   58 00:4563 -  -  -  -  _ETIntegerLoop:		
   59 00:4563 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:4566 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4568 B5 -  -  -  		or 		l 							; or into L
   62 00:4569 6F -  -  -  		ld 		l,a
   63 00:456A DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:456C DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:456F C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:4571 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:4573 D8 -  -  -  		ret 	c
   68 00:4574 -  -  -  -  
   69 00:4574 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4579 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:457E 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4583 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4588 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:458D 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:4592 -  -  -  -  
   76 00:4592 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4594 -  -  -  -  		;
   78 00:4594 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4594 -  -  -  -  		;
   80 00:4594 -  -  -  -  _ETStringMarker:		
   81 00:4594 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4596 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4598 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:459A E1 -  -  -  		pop 	hl
   85 00:459B 11 00 00 -  		ld 		de,$0000
   86 00:459E DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:45A1 DD 19 -  -  		add 	ix,de
   88 00:45A3 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:45A5 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:45A7 C9 -  -  -  		ret
   91 00:45A8 -  -  -  -  		;
   92 00:45A8 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:45A8 -  -  -  -  		;
   94 00:45A8 -  -  -  -  _ETFoundKeyword:
   95 00:45A8 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:45AA FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:45AC 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:45AE FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:45B0 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:45B2 -  -  -  -  		;
  101 00:45B2 -  -  -  -  		;		Unary group 0
  102 00:45B2 -  -  -  -  		;
  103 00:45B2 E6 7F 21 00 
              00 6F 29 11 
              60 4A 19 5E 
              23 56 ED 53 
              5D 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:45C4 C3 5C 40 -  		jp 		JumpCode 					; and go there.
  105 00:45C7 -  -  -  -  
  106 00:45C7 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:45C7 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:45C9 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:45CB -  -  -  -  		;
  110 00:45CB -  -  -  -  		; 		- term
  111 00:45CB -  -  -  -  		;
  112 00:45CB CD D1 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:45CE CD 71 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:45D1 C9 -  -  -  		ret
  115 00:45D2 -  -  -  -  		;
  116 00:45D2 -  -  -  -  		;		! ? indirection check
  117 00:45D2 -  -  -  -  		;
  118 00:45D2 -  -  -  -  _ETCheckIndirection:	
  119 00:45D2 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:45D4 28 05 -  -  		jr 		z,_ETIndirection
  121 00:45D6 FE 83 -  -  		cp 		KWD_PLING
  122 00:45D8 C2 67 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:45DB -  -  -  -  		;
  124 00:45DB -  -  -  -  		; 		! ? indirection
  125 00:45DB -  -  -  -  		;
  126 00:45DB -  -  -  -  _ETIndirection:
  127 00:45DB F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:45DC CD 4A 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:45DF CD 1A 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:45E2 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:45E4 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:45E6 CD 48 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:45E9 F1 -  -  -  		pop 	af 							; get type back
  134 00:45EA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:45EC CB F9 -  -  		set 	CIsReference,c
  136 00:45EE FE 83 -  -  		cp 		KWD_PLING
  137 00:45F0 C8 -  -  -  		ret 	z
  138 00:45F1 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:45F3 C9 -  -  -  		ret
  140 00:45F4 -  -  -  -  _ETStringIndirect:
  141 00:45F4 3E 02 C3 0A 
              43 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:45F9 -  -  -  -  		;
  143 00:45F9 -  -  -  -  		; 		Found an identifier.
  144 00:45F9 -  -  -  -  		;
  145 00:45F9 -  -  -  -  _ETVariable:
  146 00:45F9 CD 06 48 -  		call 	FindVariable 				; find the variable.
  147 00:45FC D0 -  -  -  		ret 	nc 							; return if found.
  148 00:45FD 3E 11 C3 0A 
              43 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:4602 -  -  -  -  		
  150 00:4602 -  -  -  -  ; ***************************************************************************************
  151 00:4602 -  -  -  -  ;
  152 00:4602 -  -  -  -  ;									Changes and Updates
  153 00:4602 -  -  -  -  ;
  154 00:4602 -  -  -  -  ; ***************************************************************************************
  155 00:4602 -  -  -  -  ;
  156 00:4602 -  -  -  -  ;		Date			Notes
  157 00:4602 -  -  -  -  ;		==== 			=====
  158 00:4602 -  -  -  -  ;
  159 00:4602 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4602 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:4602 -  -  -  -  ; ***************************************************************************************
    2 00:4602 -  -  -  -  ; ***************************************************************************************
    3 00:4602 -  -  -  -  ;
    4 00:4602 -  -  -  -  ;		Name : 		abs.asm
    5 00:4602 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4602 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4602 -  -  -  -  ;		Reviewed :	No
    8 00:4602 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:4602 -  -  -  -  ;
   10 00:4602 -  -  -  -  ; ***************************************************************************************
   11 00:4602 -  -  -  -  ; ***************************************************************************************
   12 00:4602 -  -  -  -  
   13 00:4602 -  -  -  -  ; ***************************************************************************************
   14 00:4602 -  -  -  -  ;
   15 00:4602 -  -  -  -  ;								abs( unary function
   16 00:4602 -  -  -  -  ;
   17 00:4602 -  -  -  -  ; ***************************************************************************************
   18 00:4602 -  -  -  -  
   19 00:4602 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:4602 CD D1 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:4605 D9 -  -  -  		exx 								; test MSB
   22 00:4606 CB 7C -  -  		bit 	7,h
   23 00:4608 D9 -  -  -  		exx
   24 00:4609 C4 71 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:460C C9 -  -  -  		ret
   26 00:460D -  -  -  -  
   27 00:460D -  -  -  -  ; ***************************************************************************************
   28 00:460D -  -  -  -  ;
   29 00:460D -  -  -  -  ;									Changes and Updates
   30 00:460D -  -  -  -  ;
   31 00:460D -  -  -  -  ; ***************************************************************************************
   32 00:460D -  -  -  -  ;
   33 00:460D -  -  -  -  ;		Date			Notes
   34 00:460D -  -  -  -  ;		==== 			=====
   35 00:460D -  -  -  -  ;
   36 00:460D -  -  -  -  ; ***************************************************************************************
   37 00:460D -  -  -  -  		
Listing for file "_build.asm"
   35 00:460D -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:460D -  -  -  -  ; ***************************************************************************************
    2 00:460D -  -  -  -  ; ***************************************************************************************
    3 00:460D -  -  -  -  ;
    4 00:460D -  -  -  -  ;		Name : 		asc.asm
    5 00:460D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:460D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:460D -  -  -  -  ;		Reviewed :	No
    8 00:460D -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:460D -  -  -  -  ;
   10 00:460D -  -  -  -  ; ***************************************************************************************
   11 00:460D -  -  -  -  ; ***************************************************************************************
   12 00:460D -  -  -  -  
   13 00:460D -  -  -  -  ; ***************************************************************************************
   14 00:460D -  -  -  -  ;
   15 00:460D -  -  -  -  ;								Asc unary function
   16 00:460D -  -  -  -  ;
   17 00:460D -  -  -  -  ; ***************************************************************************************
   18 00:460D -  -  -  -  
   19 00:460D -  -  -  -  Unary_Asc:	;; [asc]
   20 00:460D CD DD 44 -  		call	EvaluateStringTerm			; Get string
   21 00:4610 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:4611 C3 0E 45 -  		jp 		Return8BitConstant
   23 00:4614 -  -  -  -  
   24 00:4614 -  -  -  -  ; ***************************************************************************************
   25 00:4614 -  -  -  -  ;
   26 00:4614 -  -  -  -  ;									Changes and Updates
   27 00:4614 -  -  -  -  ;
   28 00:4614 -  -  -  -  ; ***************************************************************************************
   29 00:4614 -  -  -  -  ;
   30 00:4614 -  -  -  -  ;		Date			Notes
   31 00:4614 -  -  -  -  ;		==== 			=====
   32 00:4614 -  -  -  -  ;
   33 00:4614 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:4614 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:4614 -  -  -  -  ; ***************************************************************************************
    2 00:4614 -  -  -  -  ; ***************************************************************************************
    3 00:4614 -  -  -  -  ;
    4 00:4614 -  -  -  -  ;		Name : 		chr.asm
    5 00:4614 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4614 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4614 -  -  -  -  ;		Reviewed :	No
    8 00:4614 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:4614 -  -  -  -  ;
   10 00:4614 -  -  -  -  ; ***************************************************************************************
   11 00:4614 -  -  -  -  ; ***************************************************************************************
   12 00:4614 -  -  -  -  
   13 00:4614 -  -  -  -  ; ***************************************************************************************
   14 00:4614 -  -  -  -  ;
   15 00:4614 -  -  -  -  ;								Chr$() unary function
   16 00:4614 -  -  -  -  ;
   17 00:4614 -  -  -  -  ; ***************************************************************************************
   18 00:4614 -  -  -  -  
   19 00:4614 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:4614 CD E5 42 -  		call 	CheckDollar
   21 00:4617 CD D1 44 -  		call 	EvaluateIntegerTerm
   22 00:461A 7D -  -  -  		ld 		a,l 						; get character
   23 00:461B 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:461D 21 97 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:4620 36 0D -  -  		ld 		(hl),13
   26 00:4622 2B -  -  -  		dec 	hl
   27 00:4623 77 -  -  -  		ld 		(hl),a
   28 00:4624 C9 -  -  -  		ret
   29 00:4625 -  -  -  -  
   30 00:4625 -  -  -  -  ; ***************************************************************************************
   31 00:4625 -  -  -  -  ;
   32 00:4625 -  -  -  -  ;									Changes and Updates
   33 00:4625 -  -  -  -  ;
   34 00:4625 -  -  -  -  ; ***************************************************************************************
   35 00:4625 -  -  -  -  ;
   36 00:4625 -  -  -  -  ;		Date			Notes
   37 00:4625 -  -  -  -  ;		==== 			=====
   38 00:4625 -  -  -  -  ;
   39 00:4625 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:4625 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4625 -  -  -  -  ; ***************************************************************************************
    2 00:4625 -  -  -  -  ; ***************************************************************************************
    3 00:4625 -  -  -  -  ;
    4 00:4625 -  -  -  -  ;		Name : 		len.asm
    5 00:4625 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4625 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4625 -  -  -  -  ;		Reviewed :	None
    8 00:4625 -  -  -  -  ;		Purpose :	String Length
    9 00:4625 -  -  -  -  ;
   10 00:4625 -  -  -  -  ; ***************************************************************************************
   11 00:4625 -  -  -  -  ; ***************************************************************************************
   12 00:4625 -  -  -  -  
   13 00:4625 -  -  -  -  ; ***************************************************************************************
   14 00:4625 -  -  -  -  ;
   15 00:4625 -  -  -  -  ;								Len unary function
   16 00:4625 -  -  -  -  ;
   17 00:4625 -  -  -  -  ; ***************************************************************************************
   18 00:4625 -  -  -  -  
   19 00:4625 -  -  -  -  Unary_Len:	;; [len]
   20 00:4625 CD DD 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4628 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4629 CD E8 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:462C -  -  -  -  _ULCount:
   24 00:462C 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:462D FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:462F D8 -  -  -  		ret 	c
   27 00:4630 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:4631 13 -  -  -  		inc 	de
   29 00:4632 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:4634 -  -  -  -  
   31 00:4634 -  -  -  -  ; ***************************************************************************************
   32 00:4634 -  -  -  -  ;
   33 00:4634 -  -  -  -  ;									Changes and Updates
   34 00:4634 -  -  -  -  ;
   35 00:4634 -  -  -  -  ; ***************************************************************************************
   36 00:4634 -  -  -  -  ;
   37 00:4634 -  -  -  -  ;		Date			Notes
   38 00:4634 -  -  -  -  ;		==== 			=====
   39 00:4634 -  -  -  -  ;
   40 00:4634 -  -  -  -  ; ***************************************************************************************
   41 00:4634 -  -  -  -  		
Listing for file "_build.asm"
   38 00:4634 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:4634 -  -  -  -  ; ***************************************************************************************
    2 00:4634 -  -  -  -  ; ***************************************************************************************
    3 00:4634 -  -  -  -  ;
    4 00:4634 -  -  -  -  ;		Name : 		makestring.asm
    5 00:4634 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4634 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4634 -  -  -  -  ;		Reviewed :	No
    8 00:4634 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:4634 -  -  -  -  ;
   10 00:4634 -  -  -  -  ; ***************************************************************************************
   11 00:4634 -  -  -  -  ; ***************************************************************************************
   12 00:4634 -  -  -  -  
   13 00:4634 -  -  -  -  ; ***************************************************************************************
   14 00:4634 -  -  -  -  ;
   15 00:4634 -  -  -  -  ;								Str$() unary function
   16 00:4634 -  -  -  -  ;
   17 00:4634 -  -  -  -  ; ***************************************************************************************
   18 00:4634 -  -  -  -  
   19 00:4634 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:4634 CD D1 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4637 CD 48 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:463A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:463C C9 -  -  -  		ret
   24 00:463D -  -  -  -  
   25 00:463D -  -  -  -  ; ***************************************************************************************
   26 00:463D -  -  -  -  ;
   27 00:463D -  -  -  -  ;									Changes and Updates
   28 00:463D -  -  -  -  ;
   29 00:463D -  -  -  -  ; ***************************************************************************************
   30 00:463D -  -  -  -  ;
   31 00:463D -  -  -  -  ;		Date			Notes
   32 00:463D -  -  -  -  ;		==== 			=====
   33 00:463D -  -  -  -  ;
   34 00:463D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:463D -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:463D -  -  -  -  ; ***************************************************************************************
    2 00:463D -  -  -  -  ; ***************************************************************************************
    3 00:463D -  -  -  -  ;
    4 00:463D -  -  -  -  ;		Name : 		not.asm
    5 00:463D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:463D -  -  -  -  ;		Date : 		5th June 2023
    7 00:463D -  -  -  -  ;		Reviewed :	No
    8 00:463D -  -  -  -  ;		Purpose :	Logical not
    9 00:463D -  -  -  -  ;
   10 00:463D -  -  -  -  ; ***************************************************************************************
   11 00:463D -  -  -  -  ; ***************************************************************************************
   12 00:463D -  -  -  -  
   13 00:463D -  -  -  -  ; ***************************************************************************************
   14 00:463D -  -  -  -  ;
   15 00:463D -  -  -  -  ;							not(x) e.g. one's complement
   16 00:463D -  -  -  -  ;
   17 00:463D -  -  -  -  ; ***************************************************************************************
   18 00:463D -  -  -  -  
   19 00:463D -  -  -  -  Unary_Not:		;; [not]
   20 00:463D CD D1 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4640 CD 47 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:4643 CD 47 46 -  		call 	__UNSwap		
   23 00:4646 C9 -  -  -  		ret
   24 00:4647 -  -  -  -  
   25 00:4647 -  -  -  -  __UNSwap:
   26 00:4647 7C -  -  -  		ld 		a,h
   27 00:4648 2F -  -  -  		cpl
   28 00:4649 67 -  -  -  		ld 		h,a
   29 00:464A 7D -  -  -  		ld 		a,l
   30 00:464B 2F -  -  -  		cpl 	
   31 00:464C 6F -  -  -  		ld 		l,a
   32 00:464D D9 -  -  -  		exx
   33 00:464E C9 -  -  -  		ret
   34 00:464F -  -  -  -  
   35 00:464F -  -  -  -  ; ***************************************************************************************
   36 00:464F -  -  -  -  ;
   37 00:464F -  -  -  -  ;									Changes and Updates
   38 00:464F -  -  -  -  ;
   39 00:464F -  -  -  -  ; ***************************************************************************************
   40 00:464F -  -  -  -  ;
   41 00:464F -  -  -  -  ;		Date			Notes
   42 00:464F -  -  -  -  ;		==== 			=====
   43 00:464F -  -  -  -  ;
   44 00:464F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:464F -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:464F -  -  -  -  ; ***************************************************************************************
    2 00:464F -  -  -  -  ; ***************************************************************************************
    3 00:464F -  -  -  -  ;
    4 00:464F -  -  -  -  ;		Name : 		page.asm
    5 00:464F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:464F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:464F -  -  -  -  ;		Reviewed :	No
    8 00:464F -  -  -  -  ;		Purpose :	Various constants.
    9 00:464F -  -  -  -  ;
   10 00:464F -  -  -  -  ; ***************************************************************************************
   11 00:464F -  -  -  -  ; ***************************************************************************************
   12 00:464F -  -  -  -  
   13 00:464F -  -  -  -  ; ***************************************************************************************
   14 00:464F -  -  -  -  ;
   15 00:464F -  -  -  -  ;							page unary function (no bracket)
   16 00:464F -  -  -  -  ;
   17 00:464F -  -  -  -  ; ***************************************************************************************
   18 00:464F -  -  -  -  
   19 00:464F -  -  -  -  Unary_Page:	;; [page]
   20 00:464F 2A 34 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:4652 D9 -  -  -  			exx
   22 00:4653 2A 36 40 -  			ld 		hl,(CodeAddress+2)
   23 00:4656 D9 -  -  -  			exx
   24 00:4657 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4659 C9 -  -  -  			ret
   26 00:465A -  -  -  -  
   27 00:465A -  -  -  -  ; ***************************************************************************************
   28 00:465A -  -  -  -  ;
   29 00:465A -  -  -  -  ;									Changes and Updates
   30 00:465A -  -  -  -  ;
   31 00:465A -  -  -  -  ; ***************************************************************************************
   32 00:465A -  -  -  -  ;
   33 00:465A -  -  -  -  ;		Date			Notes
   34 00:465A -  -  -  -  ;		==== 			=====
   35 00:465A -  -  -  -  ;
   36 00:465A -  -  -  -  ; ***************************************************************************************
   37 00:465A -  -  -  -  			
Listing for file "_build.asm"
   41 00:465A -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:465A -  -  -  -  ; ***************************************************************************************
    2 00:465A -  -  -  -  ; ***************************************************************************************
    3 00:465A -  -  -  -  ;
    4 00:465A -  -  -  -  ;		Name : 		random.asm
    5 00:465A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465A -  -  -  -  ;		Reviewed :	No
    8 00:465A -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:465A -  -  -  -  ;
   10 00:465A -  -  -  -  ; ***************************************************************************************
   11 00:465A -  -  -  -  ; ***************************************************************************************
   12 00:465A -  -  -  -  
   13 00:465A -  -  -  -  ; ***************************************************************************************
   14 00:465A -  -  -  -  ;
   15 00:465A -  -  -  -  ;								Random unary function
   16 00:465A -  -  -  -  ;
   17 00:465A -  -  -  -  ; ***************************************************************************************
   18 00:465A -  -  -  -  
   19 00:465A -  -  -  -  Unary_Random:	;; [rnd]
   20 00:465A 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:465B CD D1 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:465E D9 -  -  -  		exx 								; is it -ve
   23 00:465F CB 7C -  -  		bit 	7,h
   24 00:4661 D9 -  -  -  		exx
   25 00:4662 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4664 22 68 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4667 D9 -  -  -  		exx
   28 00:4668 22 6C 40 -  		ld 		(RandomSeed+4),hl
   29 00:466B D9 -  -  -  		exx
   30 00:466C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:466E C9 -  -  -  		ret
   32 00:466F -  -  -  -  _URDontSeed:		
   33 00:466F -  -  -  -  
   34 00:466F CD 57 4C -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:4672 28 19 -  -  		jr 		z,_URFail
   36 00:4674 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4675 D9 -  -  -  		exx
   38 00:4676 E5 -  -  -  		push 	hl
   39 00:4677 D9 -  -  -  		exx
   40 00:4678 -  -  -  -  		;
   41 00:4678 CD 9C 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:467B D9 -  -  -  		exx
   43 00:467C CD 9C 46 -  		call 	URandomHL
   44 00:467F CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:4681 D9 -  -  -  		exx
   46 00:4682 -  -  -  -  		;
   47 00:4682 D9 -  -  -  		exx 								; restore range.
   48 00:4683 D1 -  -  -  		pop 	de
   49 00:4684 D9 -  -  -  		exx
   50 00:4685 D1 -  -  -  		pop 	de
   51 00:4686 -  -  -  -  		;
   52 00:4686 CD 03 4B -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4689 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:468A 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:468C C9 -  -  -  		ret
   56 00:468D -  -  -  -  _URFail:
   57 00:468D 3E 03 C3 0A 
              43 -  -  -  		ERR_BADVALUE
   58 00:4692 -  -  -  -  ; ***************************************************************************************
   59 00:4692 -  -  -  -  ;
   60 00:4692 -  -  -  -  ; 									Push RNG off zero
   61 00:4692 -  -  -  -  ;
   62 00:4692 -  -  -  -  ; ***************************************************************************************
   63 00:4692 -  -  -  -  
   64 00:4692 -  -  -  -  UnaryRandomInitialise:
   65 00:4692 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4694 -  -  -  -  _URILoop:
   67 00:4694 C5 -  -  -  		push 	bc
   68 00:4695 CD 9C 46 -  		call 	URandomHL
   69 00:4698 C1 -  -  -  		pop 	bc
   70 00:4699 10 F9 -  -  		djnz 	_URILoop
   71 00:469B C9 -  -  -  		ret
   72 00:469C -  -  -  -  
   73 00:469C -  -  -  -  ; ***************************************************************************************
   74 00:469C -  -  -  -  ;
   75 00:469C -  -  -  -  ;							16 bit random number generator
   76 00:469C -  -  -  -  ;
   77 00:469C -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:469C -  -  -  -  ;		Actual author unspecified.
   79 00:469C -  -  -  -  ;
   80 00:469C -  -  -  -  ; ***************************************************************************************
   81 00:469C -  -  -  -  
   82 00:469C -  -  -  -  URandomHL:
   83 00:469C 2A 68 40 -  	    ld 		hl,(RandomSeed)
   84 00:469F ED 5B 6C 40 	    ld 		de,(RandomSeed+4)
   85 00:46A3 44 -  -  -  	    ld 		b,h
   86 00:46A4 4D -  -  -  	    ld 		c,l
   87 00:46A5 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:46AA 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:46AF 2C -  -  -  	    inc 	l
   90 00:46B0 09 -  -  -  	    add 	hl,bc
   91 00:46B1 22 68 40 -  	    ld 		(RandomSeed),hl
   92 00:46B4 2A 6C 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:46B7 ED 5A -  -  	    adc 	hl,de
   94 00:46B9 22 6C 40 -  	    ld 		(RandomSeed+4),hl
   95 00:46BC EB -  -  -  	    ex 		de,hl
   96 00:46BD 2A 70 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:46C0 ED 4B 74 40 	    ld 		bc,(RandomSeed+12)
   98 00:46C4 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:46C9 ED 43 74 40 	    ld 		(RandomSeed+12),bc
  100 00:46CD 9F -  -  -  	    sbc 	a,a
  101 00:46CE E6 C5 -  -  	    and 	%11000101
  102 00:46D0 AD -  -  -  	    xor 	l
  103 00:46D1 6F -  -  -  	    ld 		l,a
  104 00:46D2 22 70 40 -  	    ld 		(RandomSeed+8),hl
  105 00:46D5 EB -  -  -  	    ex 		de,hl
  106 00:46D6 09 -  -  -  	    add 	hl,bc
  107 00:46D7 C9 -  -  -  	    ret		
  108 00:46D8 -  -  -  -  
  109 00:46D8 -  -  -  -  ; ***************************************************************************************
  110 00:46D8 -  -  -  -  ;
  111 00:46D8 -  -  -  -  ;									Changes and Updates
  112 00:46D8 -  -  -  -  ;
  113 00:46D8 -  -  -  -  ; ***************************************************************************************
  114 00:46D8 -  -  -  -  ;
  115 00:46D8 -  -  -  -  ;		Date			Notes
  116 00:46D8 -  -  -  -  ;		==== 			=====
  117 00:46D8 -  -  -  -  ;
  118 00:46D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:46D8 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:46D8 -  -  -  -  ; ***************************************************************************************
    2 00:46D8 -  -  -  -  ; ***************************************************************************************
    3 00:46D8 -  -  -  -  ;
    4 00:46D8 -  -  -  -  ;		Name : 		sgn.asm
    5 00:46D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D8 -  -  -  -  ;		Reviewed :	No
    8 00:46D8 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:46D8 -  -  -  -  ;
   10 00:46D8 -  -  -  -  ; ***************************************************************************************
   11 00:46D8 -  -  -  -  ; ***************************************************************************************
   12 00:46D8 -  -  -  -  
   13 00:46D8 -  -  -  -  ; ***************************************************************************************
   14 00:46D8 -  -  -  -  ;
   15 00:46D8 -  -  -  -  ;								sgn unary function
   16 00:46D8 -  -  -  -  ;
   17 00:46D8 -  -  -  -  ; ***************************************************************************************
   18 00:46D8 -  -  -  -  
   19 00:46D8 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:46D8 CD D1 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:46DB CD 57 4C -  		call 	Int32Zero 					; integer sgn() code
   22 00:46DE CA E8 43 -  		jp 		z,UnaryInt32False
   23 00:46E1 D9 -  -  -  		exx
   24 00:46E2 CB 7C -  -  		bit 	7,h
   25 00:46E4 D9 -  -  -  		exx
   26 00:46E5 C2 E4 43 -  		jp 		nz,UnaryInt32True
   27 00:46E8 3E 01 -  -  		ld 		a,1
   28 00:46EA C3 0E 45 -  		jp 		Return8BitConstant
   29 00:46ED -  -  -  -  
   30 00:46ED -  -  -  -  ; ***************************************************************************************
   31 00:46ED -  -  -  -  ;
   32 00:46ED -  -  -  -  ;									Changes and Updates
   33 00:46ED -  -  -  -  ;
   34 00:46ED -  -  -  -  ; ***************************************************************************************
   35 00:46ED -  -  -  -  ;
   36 00:46ED -  -  -  -  ;		Date			Notes
   37 00:46ED -  -  -  -  ;		==== 			=====
   38 00:46ED -  -  -  -  ;
   39 00:46ED -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:46ED -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:46ED -  -  -  -  ; ***************************************************************************************
    2 00:46ED -  -  -  -  ; ***************************************************************************************
    3 00:46ED -  -  -  -  ;
    4 00:46ED -  -  -  -  ;		Name : 		simple.asm
    5 00:46ED -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46ED -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46ED -  -  -  -  ;		Reviewed :	No
    8 00:46ED -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:46ED -  -  -  -  ;
   10 00:46ED -  -  -  -  ; ***************************************************************************************
   11 00:46ED -  -  -  -  ; ***************************************************************************************
   12 00:46ED -  -  -  -  
   13 00:46ED -  -  -  -  ; ***************************************************************************************
   14 00:46ED -  -  -  -  ;
   15 00:46ED -  -  -  -  ;								( unary function (think about it)
   16 00:46ED -  -  -  -  ;
   17 00:46ED -  -  -  -  ; ***************************************************************************************
   18 00:46ED -  -  -  -  
   19 00:46ED -  -  -  -  Unary_Brackets:	;; [(]
   20 00:46ED CD 7F 44 -  		call 	EvaluateAtPrecedence0
   21 00:46F0 C3 D8 42 -  		jp  	CheckRightBracket
   22 00:46F3 -  -  -  -  
   23 00:46F3 -  -  -  -  ; ***************************************************************************************
   24 00:46F3 -  -  -  -  ;
   25 00:46F3 -  -  -  -  ;									Handle &x
   26 00:46F3 -  -  -  -  ;
   27 00:46F3 -  -  -  -  ; ***************************************************************************************
   28 00:46F3 -  -  -  -  
   29 00:46F3 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:46F3 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:46F6 E6 C0 -  -  		and 		$C0
   32 00:46F8 FE 40 -  -  		cp 			$40
   33 00:46FA C2 67 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:46FD C3 4A 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4700 -  -  -  -  
   36 00:4700 -  -  -  -  ; ***************************************************************************************
   37 00:4700 -  -  -  -  ;
   38 00:4700 -  -  -  -  ;									Changes and Updates
   39 00:4700 -  -  -  -  ;
   40 00:4700 -  -  -  -  ; ***************************************************************************************
   41 00:4700 -  -  -  -  ;
   42 00:4700 -  -  -  -  ;		Date			Notes
   43 00:4700 -  -  -  -  ;		==== 			=====
   44 00:4700 -  -  -  -  ;
   45 00:4700 -  -  -  -  ; ***************************************************************************************
   46 00:4700 -  -  -  -  		
Listing for file "_build.asm"
   44 00:4700 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4700 -  -  -  -  ; ***************************************************************************************
    2 00:4700 -  -  -  -  ; ***************************************************************************************
    3 00:4700 -  -  -  -  ;
    4 00:4700 -  -  -  -  ;		Name : 		str.asm
    5 00:4700 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4700 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4700 -  -  -  -  ;		Reviewed :	No
    8 00:4700 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4700 -  -  -  -  ;
   10 00:4700 -  -  -  -  ; ***************************************************************************************
   11 00:4700 -  -  -  -  ; ***************************************************************************************
   12 00:4700 -  -  -  -  
   13 00:4700 -  -  -  -  ; ***************************************************************************************
   14 00:4700 -  -  -  -  ;
   15 00:4700 -  -  -  -  ;								Str$() unary function
   16 00:4700 -  -  -  -  ;
   17 00:4700 -  -  -  -  ; ***************************************************************************************
   18 00:4700 -  -  -  -  
   19 00:4700 -  -  -  -  Unary_Str:	;; [str]
   20 00:4700 CD E5 42 -  		call 	CheckDollar
   21 00:4703 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:4706 EE AC -  -  		xor		KWD_TILDE
   23 00:4708 F5 -  -  -  		push 	af
   24 00:4709 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:470B DD 23 -  -  		inc 	ix
   26 00:470D -  -  -  -  _USNotHex:		
   27 00:470D CD D1 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:4710 01 86 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:4713 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:4714 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:4716 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:4718 3E 10 -  -  		ld 		a,16
   33 00:471A -  -  -  -  _USNotHex2:		
   34 00:471A CD 98 4C -  		call 	Int32ToString 				
   35 00:471D 21 86 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:4720 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:4722 C9 -  -  -  		ret
   38 00:4723 -  -  -  -  
   39 00:4723 -  -  -  -  ; ***************************************************************************************
   40 00:4723 -  -  -  -  ;
   41 00:4723 -  -  -  -  ;									Changes and Updates
   42 00:4723 -  -  -  -  ;
   43 00:4723 -  -  -  -  ; ***************************************************************************************
   44 00:4723 -  -  -  -  ;
   45 00:4723 -  -  -  -  ;		Date			Notes
   46 00:4723 -  -  -  -  ;		==== 			=====
   47 00:4723 -  -  -  -  ;
   48 00:4723 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:4723 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:4723 -  -  -  -  ; ***************************************************************************************
    2 00:4723 -  -  -  -  ; ***************************************************************************************
    3 00:4723 -  -  -  -  ;
    4 00:4723 -  -  -  -  ;		Name : 		time.asm
    5 00:4723 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4723 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4723 -  -  -  -  ;		Reviewed :	No
    8 00:4723 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:4723 -  -  -  -  ;
   10 00:4723 -  -  -  -  ; ***************************************************************************************
   11 00:4723 -  -  -  -  ; ***************************************************************************************
   12 00:4723 -  -  -  -  
   13 00:4723 -  -  -  -  ; ***************************************************************************************
   14 00:4723 -  -  -  -  ;
   15 00:4723 -  -  -  -  ;							Get system time in ms
   16 00:4723 -  -  -  -  ;
   17 00:4723 -  -  -  -  ; ***************************************************************************************
   18 00:4723 -  -  -  -  
   19 00:4723 -  -  -  -  Unary_Time:	;; [time]
   20 00:4723 CD 0F 4D -  			call 	SYSGetTimer
   21 00:4726 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4728 C9 -  -  -  			ret
   23 00:4729 -  -  -  -  
   24 00:4729 -  -  -  -  ; ***************************************************************************************
   25 00:4729 -  -  -  -  ;
   26 00:4729 -  -  -  -  ;									Changes and Updates
   27 00:4729 -  -  -  -  ;
   28 00:4729 -  -  -  -  ; ***************************************************************************************
   29 00:4729 -  -  -  -  ;
   30 00:4729 -  -  -  -  ;		Date			Notes
   31 00:4729 -  -  -  -  ;		==== 			=====
   32 00:4729 -  -  -  -  ;
   33 00:4729 -  -  -  -  ; ***************************************************************************************
   34 00:4729 -  -  -  -  			
Listing for file "_build.asm"
   46 00:4729 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4729 -  -  -  -  ; ***************************************************************************************
    2 00:4729 -  -  -  -  ; ***************************************************************************************
    3 00:4729 -  -  -  -  ;
    4 00:4729 -  -  -  -  ;		Name : 		top.asm
    5 00:4729 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4729 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4729 -  -  -  -  ;		Reviewed :	No
    8 00:4729 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4729 -  -  -  -  ;
   10 00:4729 -  -  -  -  ; ***************************************************************************************
   11 00:4729 -  -  -  -  ; ***************************************************************************************
   12 00:4729 -  -  -  -  
   13 00:4729 -  -  -  -  ; ***************************************************************************************
   14 00:4729 -  -  -  -  ;
   15 00:4729 -  -  -  -  ;							page unary function (no bracket)
   16 00:4729 -  -  -  -  ;
   17 00:4729 -  -  -  -  ; ***************************************************************************************
   18 00:4729 -  -  -  -  
   19 00:4729 -  -  -  -  Unary_Top:	;; [top]
   20 00:4729 2A 50 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:472C D9 -  -  -  			exx
   22 00:472D 2A 52 40 -  			ld 		hl,(TopMemory+2)
   23 00:4730 D9 -  -  -  			exx
   24 00:4731 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4733 C9 -  -  -  			ret
   26 00:4734 -  -  -  -  
   27 00:4734 -  -  -  -  ; ***************************************************************************************
   28 00:4734 -  -  -  -  ;
   29 00:4734 -  -  -  -  ;									Changes and Updates
   30 00:4734 -  -  -  -  ;
   31 00:4734 -  -  -  -  ; ***************************************************************************************
   32 00:4734 -  -  -  -  ;
   33 00:4734 -  -  -  -  ;		Date			Notes
   34 00:4734 -  -  -  -  ;		==== 			=====
   35 00:4734 -  -  -  -  ;
   36 00:4734 -  -  -  -  ; ***************************************************************************************
   37 00:4734 -  -  -  -  			
Listing for file "_build.asm"
   47 00:4734 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:4734 -  -  -  -  ; ***************************************************************************************
    2 00:4734 -  -  -  -  ; ***************************************************************************************
    3 00:4734 -  -  -  -  ;
    4 00:4734 -  -  -  -  ;		Name : 		val.asm
    5 00:4734 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4734 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4734 -  -  -  -  ;		Reviewed :	No
    8 00:4734 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:4734 -  -  -  -  ;
   10 00:4734 -  -  -  -  ; ***************************************************************************************
   11 00:4734 -  -  -  -  ; ***************************************************************************************
   12 00:4734 -  -  -  -  
   13 00:4734 -  -  -  -  ; ***************************************************************************************
   14 00:4734 -  -  -  -  ;
   15 00:4734 -  -  -  -  ;								val( unary function
   16 00:4734 -  -  -  -  ;
   17 00:4734 -  -  -  -  ; ***************************************************************************************
   18 00:4734 -  -  -  -  
   19 00:4734 -  -  -  -  Unary_Val:	;; [val]
   20 00:4734 CD DD 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4737 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4738 C1 -  -  -  		pop 	bc
   23 00:4739 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:473B CD 8E 4B -  		call 	Int32FromString 			; get the integer part.
   25 00:473E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4740 C8 -  -  -  		ret		z 							; okay
   27 00:4741 3E 03 C3 0A 
              43 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4746 -  -  -  -  
   29 00:4746 -  -  -  -  ; ***************************************************************************************
   30 00:4746 -  -  -  -  ;
   31 00:4746 -  -  -  -  ;									Changes and Updates
   32 00:4746 -  -  -  -  ;
   33 00:4746 -  -  -  -  ; ***************************************************************************************
   34 00:4746 -  -  -  -  ;
   35 00:4746 -  -  -  -  ;		Date			Notes
   36 00:4746 -  -  -  -  ;		==== 			=====
   37 00:4746 -  -  -  -  ;
   38 00:4746 -  -  -  -  ; ***************************************************************************************
   39 00:4746 -  -  -  -  		
Listing for file "_build.asm"
   48 00:4746 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4746 -  -  -  -  ; ***************************************************************************************
    2 00:4746 -  -  -  -  ; ***************************************************************************************
    3 00:4746 -  -  -  -  ;
    4 00:4746 -  -  -  -  ;		Name : 		allocate.asm
    5 00:4746 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4746 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4746 -  -  -  -  ;		Reviewed :	No
    8 00:4746 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4746 -  -  -  -  ;
   10 00:4746 -  -  -  -  ; ***************************************************************************************
   11 00:4746 -  -  -  -  ; ***************************************************************************************
   12 00:4746 -  -  -  -  
   13 00:4746 -  -  -  -  ; ***************************************************************************************
   14 00:4746 -  -  -  -  ;
   15 00:4746 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4746 -  -  -  -  ;
   17 00:4746 -  -  -  -  ; ***************************************************************************************
   18 00:4746 -  -  -  -  
   19 00:4746 -  -  -  -  AllocateBytes:
   20 00:4746 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:4747 21 00 00 -  		ld 		hl,$000000
   22 00:474A 62 -  -  -  		ld 		h,d
   23 00:474B 6B -  -  -  		ld 		l,e
   24 00:474C -  -  -  -  		;
   25 00:474C ED 5B 4C 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:4750 D5 -  -  -  		push 	de 							; save on stack
   27 00:4751 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:4752 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; update it
   29 00:4755 -  -  -  -  		;
   30 00:4755 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:4756 2A 48 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:4759 AF -  -  -  		xor 	a
   33 00:475A ED 52 -  -  		sbc 	hl,de
   34 00:475C E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:475D D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:475E 3E 08 C3 0A 
              43 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:4763 -  -  -  -  
   38 00:4763 -  -  -  -  ; ***************************************************************************************
   39 00:4763 -  -  -  -  ;
   40 00:4763 -  -  -  -  ;									Changes and Updates
   41 00:4763 -  -  -  -  ;
   42 00:4763 -  -  -  -  ; ***************************************************************************************
   43 00:4763 -  -  -  -  ;
   44 00:4763 -  -  -  -  ;		Date			Notes
   45 00:4763 -  -  -  -  ;		==== 			=====
   46 00:4763 -  -  -  -  ;
   47 00:4763 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:4763 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4763 -  -  -  -  ; ***************************************************************************************
    2 00:4763 -  -  -  -  ; ***************************************************************************************
    3 00:4763 -  -  -  -  ;
    4 00:4763 -  -  -  -  ;		Name : 		clear.asm
    5 00:4763 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4763 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4763 -  -  -  -  ;		Reviewed :	No
    8 00:4763 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4763 -  -  -  -  ;
   10 00:4763 -  -  -  -  ; ***************************************************************************************
   11 00:4763 -  -  -  -  ; ***************************************************************************************
   12 00:4763 -  -  -  -  
   13 00:4763 -  -  -  -  ; ***************************************************************************************
   14 00:4763 -  -  -  -  ;
   15 00:4763 -  -  -  -  ;										CLEAR command
   16 00:4763 -  -  -  -  ;
   17 00:4763 -  -  -  -  ; ***************************************************************************************
   18 00:4763 -  -  -  -  
   19 00:4763 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4763 -  -  -  -  		;
   21 00:4763 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4763 -  -  -  -  		;
   23 00:4763 2A 2C 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4766 -  -  -  -  _CCFindLow:
   25 00:4766 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4769 5E -  -  -  		ld 		e,(hl)		
   27 00:476A 19 -  -  -  		add 	hl,de
   28 00:476B 7B -  -  -  		ld 		a,e
   29 00:476C B7 -  -  -  		or 		a
   30 00:476D 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:476F 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4770 22 50 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4773 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4774 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:4777 -  -  -  -  		;
   36 00:4777 -  -  -  -  		; 	 		Reset the language stack
   37 00:4777 -  -  -  -  		;
   38 00:4777 2A 30 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:477A -  -  -  -  		;
   40 00:477A 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:477C 22 38 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:477F 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:4782 19 -  -  -  		add 	hl,de
   44 00:4783 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4785 22 3C 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4788 -  -  -  -  		;
   47 00:4788 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:478B 19 -  -  -  		add 	hl,de
   49 00:478C 22 40 40 -  		ld 		(StandardIntegers),hl
   50 00:478F -  -  -  -  		;
   51 00:478F -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:478F -  -  -  -  		;
   53 00:478F 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:4792 -  -  -  -  _CCFClearHT:
   55 00:4792 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:4793 36 00 -  -  		ld 		(hl),0
   57 00:4795 1B -  -  -  		dec 	de
   58 00:4796 7A -  -  -  		ld 		a,d
   59 00:4797 B3 -  -  -  		or 		e
   60 00:4798 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:479A 22 44 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:479D -  -  -  -  		;
   63 00:479D -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:479D -  -  -  -  		;
   65 00:479D 22 48 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:47A0 -  -  -  -  		;
   67 00:47A0 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:47A0 -  -  -  -  		;
   69 00:47A0 CD 92 46 -  		call 	UnaryRandomInitialise
   70 00:47A3 C9 -  -  -  		ret
   71 00:47A4 -  -  -  -  
   72 00:47A4 -  -  -  -  ; ***************************************************************************************
   73 00:47A4 -  -  -  -  ;
   74 00:47A4 -  -  -  -  ;									Changes and Updates
   75 00:47A4 -  -  -  -  ;
   76 00:47A4 -  -  -  -  ; ***************************************************************************************
   77 00:47A4 -  -  -  -  ;
   78 00:47A4 -  -  -  -  ;		Date			Notes
   79 00:47A4 -  -  -  -  ;		==== 			=====
   80 00:47A4 -  -  -  -  ;
   81 00:47A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:47A4 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:47A4 -  -  -  -  ; ***************************************************************************************
    2 00:47A4 -  -  -  -  ; ***************************************************************************************
    3 00:47A4 -  -  -  -  ;
    4 00:47A4 -  -  -  -  ;		Name : 		instance.asm
    5 00:47A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47A4 -  -  -  -  ;		Reviewed :	No
    8 00:47A4 -  -  -  -  ;		Purpose :	Instance handling
    9 00:47A4 -  -  -  -  ;
   10 00:47A4 -  -  -  -  ; ***************************************************************************************
   11 00:47A4 -  -  -  -  ; ***************************************************************************************
   12 00:47A4 -  -  -  -  
   13 00:47A4 -  -  -  -  ; ***************************************************************************************
   14 00:47A4 -  -  -  -  ;
   15 00:47A4 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:47A4 -  -  -  -  ;
   17 00:47A4 -  -  -  -  ; ***************************************************************************************
   18 00:47A4 -  -  -  -  
   19 00:47A4 -  -  -  -  SetCurrentInstance:
   20 00:47A4 ED 53 2C 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:47A8 22 30 40 -  		ld 		(HighMemory),hl 
   22 00:47AB ED 53 34 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:47AF -  -  -  -  
   24 00:47AF C9 -  -  -  		ret
   25 00:47B0 -  -  -  -  
   26 00:47B0 -  -  -  -  
   27 00:47B0 -  -  -  -  ; ***************************************************************************************
   28 00:47B0 -  -  -  -  ;
   29 00:47B0 -  -  -  -  ;									Changes and Updates
   30 00:47B0 -  -  -  -  ;
   31 00:47B0 -  -  -  -  ; ***************************************************************************************
   32 00:47B0 -  -  -  -  ;
   33 00:47B0 -  -  -  -  ;		Date			Notes
   34 00:47B0 -  -  -  -  ;		==== 			=====
   35 00:47B0 -  -  -  -  ;
   36 00:47B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:47B0 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:47B0 -  -  -  -  ; ***************************************************************************************
    2 00:47B0 -  -  -  -  ; ***************************************************************************************
    3 00:47B0 -  -  -  -  ;
    4 00:47B0 -  -  -  -  ;		Name : 		new.asm
    5 00:47B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47B0 -  -  -  -  ;		Reviewed :	No
    8 00:47B0 -  -  -  -  ;		Purpose :	New command.
    9 00:47B0 -  -  -  -  ;
   10 00:47B0 -  -  -  -  ; ***************************************************************************************
   11 00:47B0 -  -  -  -  ; ***************************************************************************************
   12 00:47B0 -  -  -  -  
   13 00:47B0 -  -  -  -  ; ***************************************************************************************
   14 00:47B0 -  -  -  -  ;
   15 00:47B0 -  -  -  -  ;										NEW command
   16 00:47B0 -  -  -  -  ;
   17 00:47B0 -  -  -  -  ; ***************************************************************************************
   18 00:47B0 -  -  -  -  
   19 00:47B0 -  -  -  -  Command_NEW: 	;; [new]
   20 00:47B0 2A 34 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:47B3 36 00 -  -  		ld 		(hl),0
   22 00:47B5 CD 63 47 -  		call 	Command_CLEAR 				; clear all variables
   23 00:47B8 3E 00 C3 0A 
              43 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:47BD -  -  -  -  
   25 00:47BD -  -  -  -  ; ***************************************************************************************
   26 00:47BD -  -  -  -  ;
   27 00:47BD -  -  -  -  ;									Changes and Updates
   28 00:47BD -  -  -  -  ;
   29 00:47BD -  -  -  -  ; ***************************************************************************************
   30 00:47BD -  -  -  -  ;
   31 00:47BD -  -  -  -  ;		Date			Notes
   32 00:47BD -  -  -  -  ;		==== 			=====
   33 00:47BD -  -  -  -  ;
   34 00:47BD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:47BD -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:47BD -  -  -  -  ; ***************************************************************************************
    2 00:47BD -  -  -  -  ; ***************************************************************************************
    3 00:47BD -  -  -  -  ;
    4 00:47BD -  -  -  -  ;		Name : 		utility.asm
    5 00:47BD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47BD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47BD -  -  -  -  ;		Reviewed :	No
    8 00:47BD -  -  -  -  ;		Purpose :	Utility routines
    9 00:47BD -  -  -  -  ;
   10 00:47BD -  -  -  -  ; ***************************************************************************************
   11 00:47BD -  -  -  -  ; ***************************************************************************************
   12 00:47BD -  -  -  -  
   13 00:47BD -  -  -  -  ; ***************************************************************************************
   14 00:47BD -  -  -  -  ;
   15 00:47BD -  -  -  -  ;							Print ASCII string at HL
   16 00:47BD -  -  -  -  ;
   17 00:47BD -  -  -  -  ; ***************************************************************************************
   18 00:47BD -  -  -  -  
   19 00:47BD -  -  -  -  PrintStringAtHL:
   20 00:47BD 7E -  -  -  		ld 		a,(hl)
   21 00:47BE FE 20 -  -  		cp 		$20		
   22 00:47C0 D8 -  -  -  		ret 	c
   23 00:47C1 CD E6 4C -  		call 	SYSPrintChar
   24 00:47C4 23 -  -  -  		inc 	hl
   25 00:47C5 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:47C7 -  -  -  -  
   27 00:47C7 -  -  -  -  ; ***************************************************************************************
   28 00:47C7 -  -  -  -  ;
   29 00:47C7 -  -  -  -  ;									Changes and Updates
   30 00:47C7 -  -  -  -  ;
   31 00:47C7 -  -  -  -  ; ***************************************************************************************
   32 00:47C7 -  -  -  -  ;
   33 00:47C7 -  -  -  -  ;		Date			Notes
   34 00:47C7 -  -  -  -  ;		==== 			=====
   35 00:47C7 -  -  -  -  ;
   36 00:47C7 -  -  -  -  ; ***************************************************************************************
   37 00:47C7 -  -  -  -  		
Listing for file "_build.asm"
   53 00:47C7 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:47C7 -  -  -  -  ; ***************************************************************************************
    2 00:47C7 -  -  -  -  ; ***************************************************************************************
    3 00:47C7 -  -  -  -  ;
    4 00:47C7 -  -  -  -  ;		Name : 		create.asm
    5 00:47C7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C7 -  -  -  -  ;		Date : 		4th June 2022
    7 00:47C7 -  -  -  -  ;		Reviewed :	No
    8 00:47C7 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:47C7 -  -  -  -  ;
   10 00:47C7 -  -  -  -  ; ***************************************************************************************
   11 00:47C7 -  -  -  -  ; ***************************************************************************************
   12 00:47C7 -  -  -  -  
   13 00:47C7 -  -  -  -  ; ***************************************************************************************
   14 00:47C7 -  -  -  -  ;
   15 00:47C7 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:47C7 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:47C7 -  -  -  -  ;
   18 00:47C7 -  -  -  -  ; ***************************************************************************************
   19 00:47C7 -  -  -  -  
   20 00:47C7 -  -  -  -  VariableCreate:		
   21 00:47C7 -  -  -  -  		;
   22 00:47C7 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:47C7 -  -  -  -  		;
   24 00:47C7 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:47CA 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:47CB E5 -  -  -  		push 	hl 							; save count.
   27 00:47CC CD 46 47 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:47CF C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:47D0 -  -  -  -  		;
   30 00:47D0 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:47D0 -  -  -  -  		;
   32 00:47D0 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:47D1 -  -  -  -  _VCClear:
   34 00:47D1 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:47D3 23 -  -  -  		inc 	hl
   36 00:47D4 0B -  -  -  		dec 	bc
   37 00:47D5 78 -  -  -  		ld		a,b
   38 00:47D6 B1 -  -  -  		or 		c
   39 00:47D7 20 F8 -  -  		jr 		nz,_VCClear
   40 00:47D9 E1 -  -  -  		pop 	hl							; restore start address
   41 00:47DA -  -  -  -  		;
   42 00:47DA -  -  -  -  		;		Now start to create the data.
   43 00:47DA -  -  -  -  		;
   44 00:47DA E5 -  -  -  		push 	hl 							; save start
   45 00:47DB -  -  -  -  		;
   46 00:47DB -  -  -  -  		;		Write hash to +0
   47 00:47DB -  -  -  -  		;
   48 00:47DB 3A 80 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:47DE 77 -  -  -  		ld 		(hl),a
   50 00:47DF 23 -  -  -  		inc 	hl
   51 00:47E0 -  -  -  -  		;
   52 00:47E0 -  -  -  -  		;		Write list head to +1
   53 00:47E0 -  -  -  -  		;
   54 00:47E0 E5 -  -  -  		push 	hl 							; save write position
   55 00:47E1 2A 82 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:47E4 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:47E8 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:47E9 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:47EA 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:47F0 -  -  -  -  		;
   61 00:47F0 -  -  -  -  		;		Write variable name to +5
   62 00:47F0 -  -  -  -  		;
   63 00:47F0 ED 5B 7C 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:47F4 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:47FA -  -  -  -  		;
   66 00:47FA D1 -  -  -  		pop 	de 							; get the start address back
   67 00:47FB 2A 82 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:47FE 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4804 -  -  -  -  		;
   70 00:4804 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4805 C9 -  -  -  		ret
   72 00:4806 -  -  -  -  
   73 00:4806 -  -  -  -  ; ***************************************************************************************
   74 00:4806 -  -  -  -  ;
   75 00:4806 -  -  -  -  ;									Changes and Updates
   76 00:4806 -  -  -  -  ;
   77 00:4806 -  -  -  -  ; ***************************************************************************************
   78 00:4806 -  -  -  -  ;
   79 00:4806 -  -  -  -  ;		Date			Notes
   80 00:4806 -  -  -  -  ;		==== 			=====
   81 00:4806 -  -  -  -  ;
   82 00:4806 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:4806 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4806 -  -  -  -  ; ***************************************************************************************
    2 00:4806 -  -  -  -  ; ***************************************************************************************
    3 00:4806 -  -  -  -  ;
    4 00:4806 -  -  -  -  ;		Name : 		find.asm
    5 00:4806 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4806 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4806 -  -  -  -  ;		Reviewed :	No
    8 00:4806 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4806 -  -  -  -  ;
   10 00:4806 -  -  -  -  ; ***************************************************************************************
   11 00:4806 -  -  -  -  ; ***************************************************************************************
   12 00:4806 -  -  -  -  
   13 00:4806 -  -  -  -  ; ***************************************************************************************
   14 00:4806 -  -  -  -  ;
   15 00:4806 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4806 -  -  -  -  ; 		variable information at (IX)
   17 00:4806 -  -  -  -  ;
   18 00:4806 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4806 -  -  -  -  ;		Don't autocreate arrays.
   20 00:4806 -  -  -  -  ;
   21 00:4806 -  -  -  -  ; ***************************************************************************************
   22 00:4806 -  -  -  -  
   23 00:4806 -  -  -  -  FindVariable:
   24 00:4806 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:4809 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:480B D2 67 43 -  		jp 		nc,SyntaxError 		
   27 00:480E -  -  -  -  
   28 00:480E DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4811 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4813 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4815 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:4817 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:4819 -  -  -  -  		;
   34 00:4819 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:4819 -  -  -  -  		;
   36 00:4819 2A 40 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:481C DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:481F 87 -  -  -  		add 	a,a 						; x4
   39 00:4820 87 -  -  -  		add 	a,a
   40 00:4821 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4822 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4823 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4825 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4827 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4829 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:482A C9 -  -  -  		ret
   47 00:482B -  -  -  -  		;
   48 00:482B -  -  -  -  		;		Not a standard simple variable.
   49 00:482B -  -  -  -  		;
   50 00:482B -  -  -  -  _FVNotSimple:
   51 00:482B CD 87 48 -  		call 	VariableInformation 		; get information about the variable.
   52 00:482E CD BD 48 -  		call 	VariableSearchList 			; search the linked list
   53 00:4831 38 12 -  -  		jr 		c,_FVNotFound  				
   54 00:4833 -  -  -  -  		;
   55 00:4833 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4833 -  -  -  -  		;
   57 00:4833 -  -  -  -  _FVExitReference:		
   58 00:4833 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4836 19 -  -  -  		add 	hl,de 
   60 00:4837 -  -  -  -  		;
   61 00:4837 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:4837 -  -  -  -  		;
   63 00:4837 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:483A FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:483C CC 60 48 -  		call 	z,ArrayLookup 				; array access required.
   66 00:483F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:4841 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:4843 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:4844 C9 -  -  -  		ret
   70 00:4845 -  -  -  -  		;
   71 00:4845 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:4845 -  -  -  -  		;
   73 00:4845 -  -  -  -  _FVNotFound:		
   74 00:4845 3A 78 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:4848 B7 -  -  -  		or 		a
   76 00:4849 28 0F -  -  		jr 		z,_FVFail
   77 00:484B DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:484E FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:4850 28 08 -  -  		jr 		z,_FVFail
   80 00:4852 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   81 00:4855 CD C7 47 -  		call 	VariableCreate 				; create a new variable.
   82 00:4858 18 D9 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:485A -  -  -  -  
   84 00:485A -  -  -  -  _FVFail:
   85 00:485A DD 2A 7C 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:485E 37 -  -  -  		scf
   87 00:485F C9 -  -  -  		ret
   88 00:4860 -  -  -  -  
   89 00:4860 -  -  -  -  ; ***************************************************************************************
   90 00:4860 -  -  -  -  ;
   91 00:4860 -  -  -  -  ;									 Array lookup
   92 00:4860 -  -  -  -  ;
   93 00:4860 -  -  -  -  ; ***************************************************************************************
   94 00:4860 -  -  -  -  
   95 00:4860 -  -  -  -  ArrayLookup:
   96 00:4860 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:4861 CD D1 44 -  		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:4864 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:4865 7C -  -  -  		ld 		a,h
  100 00:4866 B5 -  -  -  		or 		l
  101 00:4867 D9 -  -  -  		exx
  102 00:4868 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:486A 11 00 00 -  		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:486D 54 -  -  -  		ld 		d,h
  105 00:486E 5D -  -  -  		ld 		e,l
  106 00:486F E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:4870 E5 -  -  -  		push 	hl
  108 00:4871 7E 23 66 6F 		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:4875 AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:4876 ED 52 -  -  		sbc 	hl,de
  111 00:4878 DA 82 48 -  		jp 		c,_ALBadValue 				; if max < index then error
  112 00:487B EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:487C 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:487D 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:487E 29 -  -  -  		add 	hl,hl
  116 00:487F D1 -  -  -  		pop 	de 							; get array base back
  117 00:4880 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:4881 C9 -  -  -  		ret
  119 00:4882 -  -  -  -  
  120 00:4882 -  -  -  -  _ALBadValue:
  121 00:4882 3E 07 C3 0A 
              43 -  -  -  		ERR_INDEX
  122 00:4887 -  -  -  -  		
  123 00:4887 -  -  -  -  ; ***************************************************************************************
  124 00:4887 -  -  -  -  ;
  125 00:4887 -  -  -  -  ;									Changes and Updates
  126 00:4887 -  -  -  -  ;
  127 00:4887 -  -  -  -  ; ***************************************************************************************
  128 00:4887 -  -  -  -  ;
  129 00:4887 -  -  -  -  ;		Date			Notes
  130 00:4887 -  -  -  -  ;		==== 			=====
  131 00:4887 -  -  -  -  ;
  132 00:4887 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4887 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4887 -  -  -  -  ; ***************************************************************************************
    2 00:4887 -  -  -  -  ; ***************************************************************************************
    3 00:4887 -  -  -  -  ;
    4 00:4887 -  -  -  -  ;		Name : 		info.asm
    5 00:4887 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4887 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4887 -  -  -  -  ;		Reviewed :	No
    8 00:4887 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4887 -  -  -  -  ;
   10 00:4887 -  -  -  -  ; ***************************************************************************************
   11 00:4887 -  -  -  -  ; ***************************************************************************************
   12 00:4887 -  -  -  -  
   13 00:4887 -  -  -  -  ; ***************************************************************************************
   14 00:4887 -  -  -  -  ;
   15 00:4887 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4887 -  -  -  -  ; 		after the identifier.
   17 00:4887 -  -  -  -  ;
   18 00:4887 -  -  -  -  ; ***************************************************************************************
   19 00:4887 -  -  -  -  
   20 00:4887 -  -  -  -  VariableInformation:
   21 00:4887 DD 22 7C 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:488B -  -  -  -  		;
   23 00:488B -  -  -  -  		; 		Calculate hash, find end.
   24 00:488B -  -  -  -  		;
   25 00:488B 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:488D -  -  -  -  _VICalculateHash:
   27 00:488D DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4890 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4892 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4894 80 -  -  -  		add 	a,b 						; add to hash
   31 00:4895 07 -  -  -  		rlca
   32 00:4896 07 -  -  -  		rlca
   33 00:4897 80 -  -  -  		add 	a,b
   34 00:4898 47 -  -  -  		ld 		b,a 						; update hash
   35 00:4899 DD 23 -  -  		inc 	ix 							; next character
   36 00:489B 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:489D -  -  -  -  		;
   38 00:489D -  -  -  -  _VIHashDone:
   39 00:489D 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:489E -  -  -  -  		;
   41 00:489E -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:489E -  -  -  -  		;
   43 00:489E 32 80 40 -  		ld 		(VarHash),a
   44 00:48A1 -  -  -  -  		;
   45 00:48A1 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:48A1 -  -  -  -  		;		
   47 00:48A1 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:48A3 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:48A6 6F -  -  -  		ld 		l,a
   50 00:48A7 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:48A8 29 -  -  -  		add 	hl,hl
   52 00:48A9 -  -  -  -  		;
   53 00:48A9 ED 5B 44 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:48AD 19 -  -  -  		add 	hl,de
   55 00:48AE -  -  -  -  		;
   56 00:48AE DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:48B1 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:48B3 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:48B5 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:48B8 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:48B9 -  -  -  -  _VINotArray:
   62 00:48B9 22 82 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:48BC C9 -  -  -  		ret
   64 00:48BD -  -  -  -  
   65 00:48BD -  -  -  -  ; ***************************************************************************************
   66 00:48BD -  -  -  -  ;
   67 00:48BD -  -  -  -  ;									Changes and Updates
   68 00:48BD -  -  -  -  ;
   69 00:48BD -  -  -  -  ; ***************************************************************************************
   70 00:48BD -  -  -  -  ;
   71 00:48BD -  -  -  -  ;		Date			Notes
   72 00:48BD -  -  -  -  ;		==== 			=====
   73 00:48BD -  -  -  -  ;
   74 00:48BD -  -  -  -  ; ***************************************************************************************
   75 00:48BD -  -  -  -  
Listing for file "_build.asm"
   56 00:48BD -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:48BD -  -  -  -  ; ***************************************************************************************
    2 00:48BD -  -  -  -  ; ***************************************************************************************
    3 00:48BD -  -  -  -  ;
    4 00:48BD -  -  -  -  ;		Name : 		search.asm
    5 00:48BD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48BD -  -  -  -  ;		Date : 		4th June 2022
    7 00:48BD -  -  -  -  ;		Reviewed :	No
    8 00:48BD -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:48BD -  -  -  -  ;
   10 00:48BD -  -  -  -  ; ***************************************************************************************
   11 00:48BD -  -  -  -  ; ***************************************************************************************
   12 00:48BD -  -  -  -  
   13 00:48BD -  -  -  -  ; ***************************************************************************************
   14 00:48BD -  -  -  -  ;
   15 00:48BD -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:48BD -  -  -  -  ;		CS if failed.
   17 00:48BD -  -  -  -  ;
   18 00:48BD -  -  -  -  ; ***************************************************************************************
   19 00:48BD -  -  -  -  
   20 00:48BD -  -  -  -  VariableSearchList:
   21 00:48BD 2A 82 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:48C0 -  -  -  -  		;
   23 00:48C0 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:48C0 -  -  -  -  		;		the address of the hash record
   25 00:48C0 -  -  -  -  		;
   26 00:48C0 -  -  -  -  _VSLLoop:
   27 00:48C0 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:48C4 -  -  -  -  		;
   29 00:48C4 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:48C5 AF -  -  -  		xor 	a
   31 00:48C6 ED 6A -  -  		adc 	hl,hl
   32 00:48C8 E1 -  -  -  		pop 	hl
   33 00:48C9 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:48CB 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:48CC C8 -  -  -  		ret 	z
   36 00:48CD -  -  -  -  _VSLRecord:
   37 00:48CD -  -  -  -  		;
   38 00:48CD -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:48CD -  -  -  -  		;
   40 00:48CD 3A 80 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:48D0 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:48D1 23 -  -  -  		inc 	hl 							; points to link back
   43 00:48D2 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:48D4 -  -  -  -  		;
   45 00:48D4 -  -  -  -  		;		Now check the name
   46 00:48D4 -  -  -  -  		;
   47 00:48D4 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:48D5 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:48D6 23 -  -  -  		inc 	hl
   50 00:48D7 23 -  -  -  		inc 	hl
   51 00:48D8 23 -  -  -  		inc 	hl
   52 00:48D9 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:48DD ED 5B 7C 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:48E1 -  -  -  -  		;
   55 00:48E1 -  -  -  -  		;		Check individual characters
   56 00:48E1 -  -  -  -  		;
   57 00:48E1 -  -  -  -  _VSLCharacter:
   58 00:48E1 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:48E2 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:48E4 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:48E6 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:48E7 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:48E8 13 -  -  -  		inc 	de
   64 00:48E9 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:48EB -  -  -  -  		;
   66 00:48EB -  -  -  -  _VSLFailed:
   67 00:48EB E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:48EC 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:48EE -  -  -  -  		;
   70 00:48EE -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:48EE -  -  -  -  		;		
   72 00:48EE -  -  -  -  _VSLEndIdentifier:
   73 00:48EE 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:48EF FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:48F1 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:48F3 -  -  -  -  		;
   77 00:48F3 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:48F4 2B -  -  -  		dec 	hl 							; now start of record
   79 00:48F5 AF -  -  -  		xor 	a 							; clear carry
   80 00:48F6 C9 -  -  -  		ret
   81 00:48F7 -  -  -  -  
   82 00:48F7 -  -  -  -  ; ***************************************************************************************
   83 00:48F7 -  -  -  -  ;
   84 00:48F7 -  -  -  -  ;									Changes and Updates
   85 00:48F7 -  -  -  -  ;
   86 00:48F7 -  -  -  -  ; ***************************************************************************************
   87 00:48F7 -  -  -  -  ;
   88 00:48F7 -  -  -  -  ;		Date			Notes
   89 00:48F7 -  -  -  -  ;		==== 			=====
   90 00:48F7 -  -  -  -  ;
   91 00:48F7 -  -  -  -  ; ***************************************************************************************
   92 00:48F7 -  -  -  -  		
Listing for file "_build.asm"
   57 00:48F7 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:48F7 -  -  -  -  ;
    2 00:48F7 -  -  -  -  ;	This file is automatically generated.
    3 00:48F7 -  -  -  -  ;
    4 00:48F7 00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:4900 -  -  -  -  PrecedenceTable:
    6 00:4900 06 -  -  -  	.db	6	; $0083 !
    7 00:4901 06 -  -  -  	.db	6	; $0084 ?
    8 00:4902 05 -  -  -  	.db	5	; $0085 *
    9 00:4903 05 -  -  -  	.db	5	; $0086 /
   10 00:4904 05 -  -  -  	.db	5	; $0087 mod
   11 00:4905 05 -  -  -  	.db	5	; $0088 div
   12 00:4906 04 -  -  -  	.db	4	; $0089 +
   13 00:4907 04 -  -  -  	.db	4	; $008a -
   14 00:4908 03 -  -  -  	.db	3	; $008b >=
   15 00:4909 03 -  -  -  	.db	3	; $008c <=
   16 00:490A 03 -  -  -  	.db	3	; $008d >
   17 00:490B 03 -  -  -  	.db	3	; $008e <
   18 00:490C 03 -  -  -  	.db	3	; $008f =
   19 00:490D 03 -  -  -  	.db	3	; $0090 <>
   20 00:490E 02 -  -  -  	.db	2	; $0091 and
   21 00:490F 01 -  -  -  	.db	1	; $0092 or
   22 00:4910 01 -  -  -  	.db	1	; $0093 eor
   23 00:4911 -  -  -  -  
Listing for file "_build.asm"
   58 00:4911 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4911 -  -  -  -  ;
    2 00:4911 -  -  -  -  ;	This is automatically generated.
    3 00:4911 -  -  -  -  ;
    4 00:4911 -  -  -  -  ErrorIDTable:
    5 00:4911 59 49 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4915 5F 49 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4919 70 49 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:491D 7E 49 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4921 88 49 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:4925 92 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:4929 AC 49 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:492D BD 49 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 00:4931 CD 49 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   14 00:4935 DB 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   15 00:4939 E9 49 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   16 00:493D F3 49 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   17 00:4941 08 4A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   18 00:4945 1E 4A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   19 00:4949 2C 4A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   20 00:494D 31 4A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   21 00:4951 3E 4A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   22 00:4955 4F 4A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   23 00:4959 -  -  -  -  
   24 00:4959 -  -  -  -  ErrText_warmstart:
   25 00:4959 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   26 00:495F -  -  -  -  ErrText_assert:
   27 00:495F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   28 00:4970 -  -  -  -  ErrText_badtype:
   29 00:4970 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   30 00:497E -  -  -  -  ErrText_badvalue:
   31 00:497E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   32 00:4988 -  -  -  -  ErrText_dim:
   33 00:4988 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   34 00:4992 -  -  -  -  ErrText_disabled:
   35 00:4992 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   36 00:49AC -  -  -  -  ErrText_divzero:
   37 00:49AC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   38 00:49BD -  -  -  -  ErrText_index:
   39 00:49BD 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   40 00:49CD -  -  -  -  ErrText_memory:
   41 00:49CD 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   42 00:49DB -  -  -  -  ErrText_nocomma:
   43 00:49DB 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   44 00:49E9 -  -  -  -  ErrText_nodollar:
   45 00:49E9 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   46 00:49F3 -  -  -  -  ErrText_nolbracket:
   47 00:49F3 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   48 00:4A08 -  -  -  -  ErrText_norbracket:
   49 00:4A08 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   50 00:4A1E -  -  -  -  ErrText_notref:
   51 00:4A1E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   52 00:4A2C -  -  -  -  ErrText_stop:
   53 00:4A2C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   54 00:4A31 -  -  -  -  ErrText_syntax:
   55 00:4A31 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   56 00:4A3E -  -  -  -  ErrText_todo:
   57 00:4A3E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   58 00:4A4F -  -  -  -  ErrText_unknownvar:
   59 00:4A4F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:4A60 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4A60 -  -  -  -  ;
    2 00:4A60 -  -  -  -  ;	Vectors for set 0
    3 00:4A60 -  -  -  -  ;
    4 00:4A60 -  -  -  -  VectorsSet0:
    5 00:4A60 90 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4A62 22 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4A64 22 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4A66 C4 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4A68 CC 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4A6A 82 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4A6C 8D 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4A6E 98 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4A70 8D 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4A72 6C 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4A74 77 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4A76 1F 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4A78 16 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4A7A 04 44 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4A7C FB 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4A7E F2 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4A80 0D 44 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4A82 A3 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4A84 AE 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4A86 B9 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4A88 F3 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4A8A ED 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4A8C 34 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4A8E 5A 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4A90 25 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4A92 02 46 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4A94 D8 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4A96 00 47 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4A98 14 46 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4A9A 0D 46 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4A9C 3D 46 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4A9E 4F 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4AA0 23 47 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4AA2 29 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4AA4 34 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4AA6 E4 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4AA8 E8 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4AAA E7 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4AAC E7 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4AAE EA 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4AB0 E7 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4AB2 48 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4AB4 22 40 -  -  	addr(Unimplemented)              ; $00aa [
   48 00:4AB6 22 40 -  -  	addr(Unimplemented)              ; $00ab ]
   49 00:4AB8 E7 40 -  -  	addr(BadCmd_Comma)               ; $00ac ~
   50 00:4ABA 22 40 -  -  	addr(Unimplemented)              ; $00ad repeat
   51 00:4ABC 22 40 -  -  	addr(Unimplemented)              ; $00ae until
   52 00:4ABE 22 40 -  -  	addr(Unimplemented)              ; $00af if
   53 00:4AC0 E7 40 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:4AC2 22 40 -  -  	addr(Unimplemented)              ; $00b1 else
   55 00:4AC4 22 40 -  -  	addr(Unimplemented)              ; $00b2 for
   56 00:4AC6 E7 40 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:4AC8 22 40 -  -  	addr(Unimplemented)              ; $00b4 step
   58 00:4ACA 22 40 -  -  	addr(Unimplemented)              ; $00b5 next
   59 00:4ACC 22 40 -  -  	addr(Unimplemented)              ; $00b6 def
   60 00:4ACE 22 40 -  -  	addr(Unimplemented)              ; $00b7 proc
   61 00:4AD0 22 40 -  -  	addr(Unimplemented)              ; $00b8 endproc
   62 00:4AD2 22 40 -  -  	addr(Unimplemented)              ; $00b9 gosub
   63 00:4AD4 22 40 -  -  	addr(Unimplemented)              ; $00ba return
   64 00:4AD6 22 40 -  -  	addr(Unimplemented)              ; $00bb goto
   65 00:4AD8 22 40 -  -  	addr(Unimplemented)              ; $00bc local
   66 00:4ADA EB 40 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:4ADC 48 42 -  -  	addr(Command_REM)                ; $00be rem
   68 00:4ADE A3 41 -  -  	addr(Command_LET)                ; $00bf let
   69 00:4AE0 22 40 -  -  	addr(Unimplemented)              ; $00c0 vdu
   70 00:4AE2 E8 41 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:4AE4 22 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:4AE6 22 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:4AE8 22 40 -  -  	addr(Unimplemented)              ; $00c4 list
   74 00:4AEA B0 47 -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:4AEC 63 42 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:4AEE 22 40 -  -  	addr(Unimplemented)              ; $00c7 read
   77 00:4AF0 22 40 -  -  	addr(Unimplemented)              ; $00c8 data
   78 00:4AF2 22 40 -  -  	addr(Unimplemented)              ; $00c9 restore
   79 00:4AF4 D8 40 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:4AF6 63 47 -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:4AF8 8B 41 -  -  	addr(Command_END)                ; $00cc end
   82 00:4AFA C6 42 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:4AFC -  -  -  -  ;
   84 00:4AFC -  -  -  -  ;	Vectors for set 1
   85 00:4AFC -  -  -  -  ;
   86 00:4AFC -  -  -  -  VectorsSet1:
   87 00:4AFC -  -  -  -  ;
   88 00:4AFC -  -  -  -  ;	Vectors for set 2
   89 00:4AFC -  -  -  -  ;
   90 00:4AFC -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:4AFC -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4AFC -  -  -  -  ; ***************************************************************************************
    2 00:4AFC -  -  -  -  ; ***************************************************************************************
    3 00:4AFC -  -  -  -  ;
    4 00:4AFC -  -  -  -  ;		Name : 		idivide.asm
    5 00:4AFC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AFC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AFC -  -  -  -  ;		Reviewed :	No
    8 00:4AFC -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4AFC -  -  -  -  ;
   10 00:4AFC -  -  -  -  ; ***************************************************************************************
   11 00:4AFC -  -  -  -  ; ***************************************************************************************
   12 00:4AFC -  -  -  -  
   13 00:4AFC -  -  -  -  ; ***************************************************************************************
   14 00:4AFC -  -  -  -  ;
   15 00:4AFC -  -  -  -  ;								Unsigned integer divide
   16 00:4AFC -  -  -  -  ;
   17 00:4AFC -  -  -  -  ; ***************************************************************************************
   18 00:4AFC -  -  -  -  
   19 00:4AFC -  -  -  -  Int32UDivide:
   20 00:4AFC 37 -  -  -  		scf
   21 00:4AFD C3 3B 4B -  		jp 		_I32UnsignedDivide		
   22 00:4B00 -  -  -  -  
   23 00:4B00 -  -  -  -  ; ***************************************************************************************
   24 00:4B00 -  -  -  -  ;
   25 00:4B00 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4B00 -  -  -  -  ;
   27 00:4B00 -  -  -  -  ; ***************************************************************************************
   28 00:4B00 -  -  -  -  
   29 00:4B00 -  -  -  -  Int32SDivide:
   30 00:4B00 37 -  -  -  		scf
   31 00:4B01 18 01 -  -  		jr 		_I32SDivide
   32 00:4B03 -  -  -  -  Int32Modulus:
   33 00:4B03 AF -  -  -  		xor 	a
   34 00:4B04 -  -  -  -  _I32SDivide:
   35 00:4B04 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4B05 F5 -  -  -  		push 	af
   37 00:4B06 08 -  -  -  		ex 		af,af'
   38 00:4B07 -  -  -  -  
   39 00:4B07 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4B08 D9 -  -  -  		exx
   41 00:4B09 D5 -  -  -  		push 	de
   42 00:4B0A D9 -  -  -  		exx
   43 00:4B0B -  -  -  -  
   44 00:4B0B F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4B0C AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4B0D CD 29 4B -  		call 	_I32CheckHLSignSwap
   47 00:4B10 CD 29 4B -  		call 	_I32CheckHLSignSwap
   48 00:4B13 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4B14 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4B15 F5 -  -  -  		push 	af
   51 00:4B16 CD 3B 4B -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4B19 F1 -  -  -  		pop 	af 							; get function back
   53 00:4B1A 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4B1C 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4B1D CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4B1F C4 85 4C -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4B22 -  -  -  -  _I32SDExit:
   58 00:4B22 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4B23 D1 -  -  -  		pop 	de
   60 00:4B24 D9 -  -  -  		exx
   61 00:4B25 D1 -  -  -  		pop 	de
   62 00:4B26 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4B27 08 -  -  -  		ex 		af,af'
   64 00:4B28 C9 -  -  -  		ret
   65 00:4B29 -  -  -  -  
   66 00:4B29 -  -  -  -  
   67 00:4B29 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4B29 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4B2A CB 7C -  -  		bit 	7,h
   70 00:4B2C D9 -  -  -  		exx
   71 00:4B2D 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4B2F -  -  -  -  		;
   73 00:4B2F C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4B31 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4B32 CD 85 4C -  		call 	Int32Negate 				
   76 00:4B35 F1 -  -  -  		pop 	af
   77 00:4B36 -  -  -  -  _I32CHSPositive:
   78 00:4B36 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4B37 EB -  -  -  		ex 		de,hl
   80 00:4B38 D9 -  -  -  		exx		
   81 00:4B39 EB -  -  -  		ex 		de,hl
   82 00:4B3A C9 -  -  -  		ret
   83 00:4B3B -  -  -  -  
   84 00:4B3B -  -  -  -  ; ***************************************************************************************
   85 00:4B3B -  -  -  -  ;
   86 00:4B3B -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4B3B -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4B3B -  -  -  -  ;
   89 00:4B3B -  -  -  -  ; ***************************************************************************************
   90 00:4B3B -  -  -  -  
   91 00:4B3B -  -  -  -  _I32UnsignedDivide:
   92 00:4B3B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4B3C D5 -  -  -  		push 	de
   94 00:4B3D D9 -  -  -  		exx
   95 00:4B3E C5 -  -  -  		push 	bc
   96 00:4B3F D5 -  -  -  		push 	de 							
   97 00:4B40 D9 -  -  -  		exx
   98 00:4B41 -  -  -  -  
   99 00:4B41 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4B42 -  -  -  -  
  101 00:4B42 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4B43 B3 -  -  -  		or 		e
  103 00:4B44 D9 -  -  -  		exx
  104 00:4B45 B2 -  -  -  		or 		d
  105 00:4B46 B3 -  -  -  		or 		e
  106 00:4B47 D9 -  -  -  		exx
  107 00:4B48 CA 27 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4B4B -  -  -  -  
  109 00:4B4B -  -  -  -  
  110 00:4B4B 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4B4C 4D -  -  -  		ld		c,l
  112 00:4B4D 21 00 00 -  		ld 		hl,$0000
  113 00:4B50 D9 -  -  -  		exx
  114 00:4B51 44 -  -  -  		ld 		b,h
  115 00:4B52 4D -  -  -  		ld		c,l
  116 00:4B53 21 00 00 -  		ld 		hl,$0000
  117 00:4B56 D9 -  -  -  		exx
  118 00:4B57 -  -  -  -  
  119 00:4B57 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4B59 -  -  -  -  _I32DivideLoop:
  121 00:4B59 F5 -  -  -  		push 	af
  122 00:4B5A -  -  -  -  
  123 00:4B5A CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4B5C CB 10 -  -  		rl 		b
  125 00:4B5E D9 -  -  -  		exx
  126 00:4B5F CB 11 -  -  		rl 		c
  127 00:4B61 CB 10 -  -  		rl 		b
  128 00:4B63 D9 -  -  -  		exx
  129 00:4B64 CB 15 -  -  		rl 		l
  130 00:4B66 CB 14 -  -  		rl 		h
  131 00:4B68 D9 -  -  -  		exx
  132 00:4B69 CB 15 -  -  		rl 		l
  133 00:4B6B CB 14 -  -  		rl 		h
  134 00:4B6D D9 -  -  -  		exx
  135 00:4B6E -  -  -  -  
  136 00:4B6E CD 2B 4C -  		call 	Int32Subtract 				; A = A - M
  137 00:4B71 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4B73 -  -  -  -  
  139 00:4B73 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4B74 18 03 -  -  		jr 		_I32Next
  141 00:4B76 -  -  -  -  
  142 00:4B76 -  -  -  -  _I32Borrow:
  143 00:4B76 CD 25 4C -  		call 	Int32Add 					; A = A + M
  144 00:4B79 -  -  -  -  _I32Next:
  145 00:4B79 F1 -  -  -  		pop 	af
  146 00:4B7A 3D -  -  -  		dec 	a
  147 00:4B7B 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4B7D -  -  -  -  
  149 00:4B7D F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4B7E -  -  -  -  
  151 00:4B7E 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4B7F 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4B81 -  -  -  -  
  154 00:4B81 60 -  -  -  		ld  	h,b
  155 00:4B82 69 -  -  -  		ld 		l,c
  156 00:4B83 D9 -  -  -  		exx
  157 00:4B84 60 -  -  -  		ld  	h,b
  158 00:4B85 69 -  -  -  		ld 		l,c
  159 00:4B86 D9 -  -  -  		exx
  160 00:4B87 -  -  -  -  _I32Modulus1:		
  161 00:4B87 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4B88 D1 -  -  -  		pop 	de
  163 00:4B89 C1 -  -  -  		pop 	bc
  164 00:4B8A D9 -  -  -  		exx
  165 00:4B8B D1 -  -  -  		pop 	de
  166 00:4B8C C1 -  -  -  		pop 	bc
  167 00:4B8D C9 -  -  -  		ret
  168 00:4B8E -  -  -  -  
  169 00:4B8E -  -  -  -  ; ***************************************************************************************
  170 00:4B8E -  -  -  -  ;
  171 00:4B8E -  -  -  -  ;									Changes and Updates
  172 00:4B8E -  -  -  -  ;
  173 00:4B8E -  -  -  -  ; ***************************************************************************************
  174 00:4B8E -  -  -  -  ;
  175 00:4B8E -  -  -  -  ;		Date			Notes
  176 00:4B8E -  -  -  -  ;		==== 			=====
  177 00:4B8E -  -  -  -  ;
  178 00:4B8E -  -  -  -  ; ***************************************************************************************
  179 00:4B8E -  -  -  -  		
Listing for file "_build.asm"
   61 00:4B8E -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4B8E -  -  -  -  ; ***************************************************************************************
    2 00:4B8E -  -  -  -  ; ***************************************************************************************
    3 00:4B8E -  -  -  -  ;
    4 00:4B8E -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4B8E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B8E -  -  -  -  ;		Reviewed :	No
    8 00:4B8E -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4B8E -  -  -  -  ;
   10 00:4B8E -  -  -  -  ; ***************************************************************************************
   11 00:4B8E -  -  -  -  ; ***************************************************************************************
   12 00:4B8E -  -  -  -  
   13 00:4B8E -  -  -  -  ; ***************************************************************************************
   14 00:4B8E -  -  -  -  ;
   15 00:4B8E -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4B8E -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4B8E -  -  -  -  ;
   18 00:4B8E -  -  -  -  ; ***************************************************************************************
   19 00:4B8E -  -  -  -  
   20 00:4B8E -  -  -  -  Int32FromString:
   21 00:4B8E C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4B8F D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4B90 D5 -  -  -  		push 	de
   24 00:4B91 D9 -  -  -  		exx
   25 00:4B92 D5 -  -  -  		push 	de
   26 00:4B93 -  -  -  -  
   27 00:4B93 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4B96 11 00 00 -  		ld 		de,$0000
   29 00:4B99 D9 -  -  -  		exx
   30 00:4B9A 21 00 00 -  		ld 		hl,$0000
   31 00:4B9D 11 00 00 -  		ld 		de,$0000
   32 00:4BA0 D9 -  -  -  		exx
   33 00:4BA1 -  -  -  -  
   34 00:4BA1 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4BA2 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4BA4 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4BA6 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4BA8 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4BA9 -  -  -  -  		;
   40 00:4BA9 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4BAA F5 -  -  -  		push 	af
   42 00:4BAB FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4BAD 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4BAE 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4BB0 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4BB1 18 01 -  -  		jr 		_I32FSMain
   47 00:4BB3 -  -  -  -  _I32FSNotSigned:		
   48 00:4BB3 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4BB4 -  -  -  -  		;
   50 00:4BB4 -  -  -  -  		; 		Main conversion loop.
   51 00:4BB4 -  -  -  -  		; 		
   52 00:4BB4 -  -  -  -  _I32FSMain:		
   53 00:4BB4 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4BB5 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4BB7 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4BB9 D6 20 -  -  		sub 	32
   57 00:4BBB -  -  -  -  _I32FSNotLower:
   58 00:4BBB FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4BBD 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4BBF FE 3A -  -  		cp 		'9'+1
   61 00:4BC1 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4BC3 FE 41 -  -  		cp 		'A'
   63 00:4BC5 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4BC7 FE 47 -  -  		cp 		'F'+1
   65 00:4BC9 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4BCB D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4BCD -  -  -  -  _I32FSOkay:
   68 00:4BCD D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4BCF BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4BD0 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4BD2 03 -  -  -  		inc 	bc 							; consume character
   72 00:4BD3 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4BD4 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4BD5 CD EF 4B -  		call 	Int32Multiply 				; result *= base
   75 00:4BD8 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4BD9 5F -  -  -  		ld 		e,a
   77 00:4BDA CD 25 4C -  		call 	Int32Add 					; and add it.
   78 00:4BDD D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4BDE 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4BE0 -  -  -  -  
   81 00:4BE0 -  -  -  -  _I32FSExit:
   82 00:4BE0 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4BE1 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4BE3 CC 85 4C -  		call 	z,Int32Negate
   85 00:4BE6 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4BE7 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4BE8 D9 -  -  -  		exx
   88 00:4BE9 D1 -  -  -  		pop 	de
   89 00:4BEA D9 -  -  -  		exx
   90 00:4BEB C1 -  -  -  		pop 	bc
   91 00:4BEC FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4BEE C9 -  -  -  		ret				
   93 00:4BEF -  -  -  -  
   94 00:4BEF -  -  -  -  ; ***************************************************************************************
   95 00:4BEF -  -  -  -  ;
   96 00:4BEF -  -  -  -  ;									Changes and Updates
   97 00:4BEF -  -  -  -  ;
   98 00:4BEF -  -  -  -  ; ***************************************************************************************
   99 00:4BEF -  -  -  -  ;
  100 00:4BEF -  -  -  -  ;		Date			Notes
  101 00:4BEF -  -  -  -  ;		==== 			=====
  102 00:4BEF -  -  -  -  ;
  103 00:4BEF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4BEF -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4BEF -  -  -  -  ; ***************************************************************************************
    2 00:4BEF -  -  -  -  ; ***************************************************************************************
    3 00:4BEF -  -  -  -  ;
    4 00:4BEF -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4BEF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BEF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BEF -  -  -  -  ;		Reviewed :	No
    8 00:4BEF -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4BEF -  -  -  -  ;
   10 00:4BEF -  -  -  -  ; ***************************************************************************************
   11 00:4BEF -  -  -  -  ; ***************************************************************************************
   12 00:4BEF -  -  -  -  
   13 00:4BEF -  -  -  -  Int32Multiply:
   14 00:4BEF C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4BF0 D5 -  -  -  		push 	de
   16 00:4BF1 44 -  -  -  		ld 		b,h
   17 00:4BF2 4D -  -  -  		ld 		c,l
   18 00:4BF3 21 00 00 -  		ld 		hl,$0000
   19 00:4BF6 -  -  -  -  
   20 00:4BF6 D9 -  -  -  		exx
   21 00:4BF7 C5 -  -  -  		push 	bc
   22 00:4BF8 D5 -  -  -  		push 	de
   23 00:4BF9 44 -  -  -  		ld 		b,h
   24 00:4BFA 4D -  -  -  		ld 		c,l
   25 00:4BFB 21 00 00 -  		ld 		hl,$0000		
   26 00:4BFE D9 -  -  -  		exx
   27 00:4BFF -  -  -  -  
   28 00:4BFF -  -  -  -  _I32MultiplyLoop:
   29 00:4BFF CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4C01 C4 25 4C -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4C04 -  -  -  -  		;
   32 00:4C04 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4C05 CB 38 -  -  		srl 	b
   34 00:4C07 CB 19 -  -  		rr 		c
   35 00:4C09 D9 -  -  -  		exx
   36 00:4C0A CB 18 -  -  		rr 		b
   37 00:4C0C CB 19 -  -  		rr 		c
   38 00:4C0E -  -  -  -  		;
   39 00:4C0E CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4C10 CB 12 -  -  		rl 		d
   41 00:4C12 D9 -  -  -  		exx
   42 00:4C13 CB 13 -  -  		rl 		e
   43 00:4C15 CB 12 -  -  		rl 		d
   44 00:4C17 -  -  -  -  
   45 00:4C17 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4C18 B1 -  -  -  		or 		c
   47 00:4C19 D9 -  -  -  		exx
   48 00:4C1A B0 -  -  -  		or 		b
   49 00:4C1B B1 -  -  -  		or 		c
   50 00:4C1C 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4C1E -  -  -  -  
   52 00:4C1E D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4C1F D1 -  -  -  		pop 	de
   54 00:4C20 C1 -  -  -  		pop 	bc
   55 00:4C21 D9 -  -  -  		exx
   56 00:4C22 D1 -  -  -  		pop 	de
   57 00:4C23 C1 -  -  -  		pop 	bc
   58 00:4C24 C9 -  -  -  		ret
   59 00:4C25 -  -  -  -  
   60 00:4C25 -  -  -  -  ; ***************************************************************************************
   61 00:4C25 -  -  -  -  ;
   62 00:4C25 -  -  -  -  ;									Changes and Updates
   63 00:4C25 -  -  -  -  ;
   64 00:4C25 -  -  -  -  ; ***************************************************************************************
   65 00:4C25 -  -  -  -  ;
   66 00:4C25 -  -  -  -  ;		Date			Notes
   67 00:4C25 -  -  -  -  ;		==== 			=====
   68 00:4C25 -  -  -  -  ;
   69 00:4C25 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4C25 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4C25 -  -  -  -  ; ***************************************************************************************
    2 00:4C25 -  -  -  -  ; ***************************************************************************************
    3 00:4C25 -  -  -  -  ;
    4 00:4C25 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4C25 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C25 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C25 -  -  -  -  ;		Reviewed :	No
    8 00:4C25 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4C25 -  -  -  -  ;
   10 00:4C25 -  -  -  -  ; ***************************************************************************************
   11 00:4C25 -  -  -  -  ; ***************************************************************************************
   12 00:4C25 -  -  -  -  
   13 00:4C25 -  -  -  -  ; ***************************************************************************************
   14 00:4C25 -  -  -  -  ;
   15 00:4C25 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4C25 -  -  -  -  ;
   17 00:4C25 -  -  -  -  ; ***************************************************************************************
   18 00:4C25 -  -  -  -  
   19 00:4C25 -  -  -  -  Int32Add:
   20 00:4C25 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4C26 D9 -  -  -  		exx
   22 00:4C27 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4C29 D9 -  -  -  		exx
   24 00:4C2A C9 -  -  -  		ret
   25 00:4C2B -  -  -  -  
   26 00:4C2B -  -  -  -  ; ***************************************************************************************
   27 00:4C2B -  -  -  -  ;
   28 00:4C2B -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4C2B -  -  -  -  ;
   30 00:4C2B -  -  -  -  ; ***************************************************************************************
   31 00:4C2B -  -  -  -  
   32 00:4C2B -  -  -  -  Int32Subtract:
   33 00:4C2B AF -  -  -  		xor 	a 							; clear carry
   34 00:4C2C ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4C2E D9 -  -  -  		exx
   36 00:4C2F ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4C31 D9 -  -  -  		exx
   38 00:4C32 C9 -  -  -  		ret
   39 00:4C33 -  -  -  -  
   40 00:4C33 -  -  -  -  ; ***************************************************************************************
   41 00:4C33 -  -  -  -  ;
   42 00:4C33 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4C33 -  -  -  -  ;
   44 00:4C33 -  -  -  -  ; ***************************************************************************************
   45 00:4C33 -  -  -  -  
   46 00:4C33 -  -  -  -  Int32And:
   47 00:4C33 D9 -  -  -  		exx
   48 00:4C34 CD 38 4C -  		call 	_I32AndHLDE
   49 00:4C37 D9 -  -  -  		exx
   50 00:4C38 -  -  -  -  _I32AndHLDE:		
   51 00:4C38 7C -  -  -  		ld 		a,h
   52 00:4C39 A2 -  -  -  		and 	d
   53 00:4C3A 67 -  -  -  		ld 		h,a
   54 00:4C3B 7D -  -  -  		ld 		a,l
   55 00:4C3C A3 -  -  -  		and 	e
   56 00:4C3D 6F -  -  -  		ld 		l,a
   57 00:4C3E C9 -  -  -  		ret
   58 00:4C3F -  -  -  -  
   59 00:4C3F -  -  -  -  ; ***************************************************************************************
   60 00:4C3F -  -  -  -  ;
   61 00:4C3F -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4C3F -  -  -  -  ;
   63 00:4C3F -  -  -  -  ; ***************************************************************************************
   64 00:4C3F -  -  -  -  
   65 00:4C3F -  -  -  -  Int32Or:
   66 00:4C3F D9 -  -  -  		exx
   67 00:4C40 CD 44 4C -  		call 	_I32OrHLDE
   68 00:4C43 D9 -  -  -  		exx
   69 00:4C44 -  -  -  -  _I32OrHLDE:		
   70 00:4C44 7C -  -  -  		ld 		a,h
   71 00:4C45 B2 -  -  -  		or 		d
   72 00:4C46 67 -  -  -  		ld 		h,a
   73 00:4C47 7D -  -  -  		ld 		a,l
   74 00:4C48 B3 -  -  -  		or 		e
   75 00:4C49 6F -  -  -  		ld 		l,a
   76 00:4C4A C9 -  -  -  		ret
   77 00:4C4B -  -  -  -  
   78 00:4C4B -  -  -  -  ; ***************************************************************************************
   79 00:4C4B -  -  -  -  ;
   80 00:4C4B -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4C4B -  -  -  -  ;
   82 00:4C4B -  -  -  -  ; ***************************************************************************************
   83 00:4C4B -  -  -  -  
   84 00:4C4B -  -  -  -  Int32Xor:
   85 00:4C4B D9 -  -  -  		exx
   86 00:4C4C CD 50 4C -  		call 	_I32XorHLDE
   87 00:4C4F D9 -  -  -  		exx
   88 00:4C50 -  -  -  -  _I32XorHLDE:		
   89 00:4C50 7C -  -  -  		ld 		a,h
   90 00:4C51 AA -  -  -  		xor 	d
   91 00:4C52 67 -  -  -  		ld 		h,a
   92 00:4C53 7D -  -  -  		ld 		a,l
   93 00:4C54 AB -  -  -  		xor 	e
   94 00:4C55 6F -  -  -  		ld 		l,a
   95 00:4C56 C9 -  -  -  		ret
   96 00:4C57 -  -  -  -  
   97 00:4C57 -  -  -  -  ; ***************************************************************************************
   98 00:4C57 -  -  -  -  ;
   99 00:4C57 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4C57 -  -  -  -  ;
  101 00:4C57 -  -  -  -  ; ***************************************************************************************
  102 00:4C57 -  -  -  -  
  103 00:4C57 -  -  -  -  Int32Zero:
  104 00:4C57 D9 -  -  -  		exx
  105 00:4C58 7D -  -  -  		ld 		a,l
  106 00:4C59 B4 -  -  -  		or 		h
  107 00:4C5A D9 -  -  -  		exx
  108 00:4C5B B5 -  -  -  		or 		l
  109 00:4C5C B4 -  -  -  		or 		h
  110 00:4C5D C9 -  -  -  		ret
  111 00:4C5E -  -  -  -  
  112 00:4C5E -  -  -  -  ; ***************************************************************************************
  113 00:4C5E -  -  -  -  ;
  114 00:4C5E -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4C5E -  -  -  -  ;
  116 00:4C5E -  -  -  -  ; ***************************************************************************************
  117 00:4C5E -  -  -  -  
  118 00:4C5E -  -  -  -  Int32Compare:
  119 00:4C5E E5 -  -  -  		push 	hl 							; save HL
  120 00:4C5F AF -  -  -  		xor 	a 							; clear carry
  121 00:4C60 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4C62 D9 -  -  -  		exx
  123 00:4C63 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4C64 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4C66 -  -  -  -  		;
  126 00:4C66 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4C67 E2 6E 4C -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4C6A 78 -  -  -  		ld 		a,b
  129 00:4C6B EE 80 -  -  		xor 	$80
  130 00:4C6D 47 -  -  -  		ld 		b,a
  131 00:4C6E -  -  -  -  _I32CNoOverflow:
  132 00:4C6E 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4C6F B5 -  -  -  		or 		l
  134 00:4C70 D9 -  -  -  		exx 
  135 00:4C71 B4 -  -  -  		or 		h
  136 00:4C72 B5 -  -  -  		or 		l
  137 00:4C73 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4C75 -  -  -  -  		;
  139 00:4C75 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4C76 CB 78 -  -  		bit 	7,b
  141 00:4C78 D9 -  -  -  		exx
  142 00:4C79 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4C7B 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4C7D 3E FF -  -  		ld 		a,$FF
  145 00:4C7F -  -  -  -  _I32NotPos:
  146 00:4C7F D9 -  -  -  		exx
  147 00:4C80 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4C81 D9 -  -  -  		exx
  149 00:4C82 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4C83 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4C84 C9 -  -  -  		ret
  152 00:4C85 -  -  -  -  
  153 00:4C85 -  -  -  -  ; ***************************************************************************************
  154 00:4C85 -  -  -  -  ;
  155 00:4C85 -  -  -  -  ;										Negate HL'HL
  156 00:4C85 -  -  -  -  ;
  157 00:4C85 -  -  -  -  ; ***************************************************************************************
  158 00:4C85 -  -  -  -  
  159 00:4C85 -  -  -  -  Int32Negate:
  160 00:4C85 AF -  -  -  		xor 	a
  161 00:4C86 CD 8F 4C -  		call 	_I32NSubtract
  162 00:4C89 D9 -  -  -  		exx
  163 00:4C8A CD 8F 4C -  		call 	_I32NSubtract
  164 00:4C8D D9 -  -  -  		exx
  165 00:4C8E C9 -  -  -  		ret
  166 00:4C8F -  -  -  -  _I32NSubtract:
  167 00:4C8F D5 -  -  -  		push 	de
  168 00:4C90 EB -  -  -  		ex 		de,hl
  169 00:4C91 21 00 00 -  		ld 		hl,$0000
  170 00:4C94 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4C96 D1 -  -  -  		pop 	de
  172 00:4C97 C9 -  -  -  		ret
  173 00:4C98 -  -  -  -  		
  174 00:4C98 -  -  -  -  ; ***************************************************************************************
  175 00:4C98 -  -  -  -  ;
  176 00:4C98 -  -  -  -  ;									Changes and Updates
  177 00:4C98 -  -  -  -  ;
  178 00:4C98 -  -  -  -  ; ***************************************************************************************
  179 00:4C98 -  -  -  -  ;
  180 00:4C98 -  -  -  -  ;		Date			Notes
  181 00:4C98 -  -  -  -  ;		==== 			=====
  182 00:4C98 -  -  -  -  ;
  183 00:4C98 -  -  -  -  ; ***************************************************************************************
  184 00:4C98 -  -  -  -  		
Listing for file "_build.asm"
   64 00:4C98 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4C98 -  -  -  -  ; ***************************************************************************************
    2 00:4C98 -  -  -  -  ; ***************************************************************************************
    3 00:4C98 -  -  -  -  ;
    4 00:4C98 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4C98 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C98 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C98 -  -  -  -  ;		Reviewed :	No
    8 00:4C98 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4C98 -  -  -  -  ;
   10 00:4C98 -  -  -  -  ; ***************************************************************************************
   11 00:4C98 -  -  -  -  ;
   12 00:4C98 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4C98 -  -  -  -  ;
   14 00:4C98 -  -  -  -  ; ***************************************************************************************
   15 00:4C98 -  -  -  -  
   16 00:4C98 -  -  -  -  Int32ToString:
   17 00:4C98 C5 -  -  -  		push 	bc 							; save string start
   18 00:4C99 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4C9A E5 -  -  -  		push 	hl
   20 00:4C9B 11 00 00 -  		ld	 	de,$0000
   21 00:4C9E D9 -  -  -  		exx
   22 00:4C9F D5 -  -  -  		push 	de
   23 00:4CA0 E5 -  -  -  		push 	hl
   24 00:4CA1 11 00 00 -  		ld 		de,$000
   25 00:4CA4 D9 -  -  -  		exx
   26 00:4CA5 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4CA6 -  -  -  -  		;
   28 00:4CA6 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4CA8 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4CAA ED 44 -  -  		neg 								; negate base and put in E
   31 00:4CAC 5F -  -  -  		ld 		e,a
   32 00:4CAD -  -  -  -  		;
   33 00:4CAD D9 -  -  -  		exx 								; is it -ve ?
   34 00:4CAE CB 7C -  -  		bit 	7,h
   35 00:4CB0 D9 -  -  -  		exx
   36 00:4CB1 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4CB3 -  -  -  -  		;
   38 00:4CB3 CD 85 4C -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4CB6 -  -  -  -  		;
   40 00:4CB6 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4CB8 02 -  -  -  		ld 		(bc),a
   42 00:4CB9 03 -  -  -  		inc 	bc
   43 00:4CBA -  -  -  -  _I32TSNotNegative:	
   44 00:4CBA CD C8 4C -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4CBD -  -  -  -  _I32TSExit:
   46 00:4CBD 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4CBF 02 -  -  -  		ld 		(bc),a 
   48 00:4CC0 -  -  -  -  
   49 00:4CC0 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4CC1 E1 -  -  -  		pop 	hl
   51 00:4CC2 D1 -  -  -  		pop 	de
   52 00:4CC3 D9 -  -  -  		exx
   53 00:4CC4 E1 -  -  -  		pop 	hl
   54 00:4CC5 D1 -  -  -  		pop 	de
   55 00:4CC6 C1 -  -  -  		pop 	bc
   56 00:4CC7 C9 -  -  -  		ret
   57 00:4CC8 -  -  -  -  
   58 00:4CC8 -  -  -  -  _I32RecursiveConvert:
   59 00:4CC8 CD FC 4A -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4CCB F5 -  -  -  		push 	af 							; save remainder
   61 00:4CCC CD 57 4C -  		call 	Int32Zero		 			; check result is non zero
   62 00:4CCF C4 C8 4C -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4CD2 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4CD3 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4CD5 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4CD7 C6 07 -  -  		add 	a,7
   67 00:4CD9 -  -  -  -  _I32NotHex:
   68 00:4CD9 C6 30 -  -  		add 	a,48
   69 00:4CDB 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4CDC 03 -  -  -  		inc 	bc
   71 00:4CDD C9 -  -  -  		ret		
   72 00:4CDE -  -  -  -  
   73 00:4CDE -  -  -  -  ; ***************************************************************************************
   74 00:4CDE -  -  -  -  ;
   75 00:4CDE -  -  -  -  ;									Changes and Updates
   76 00:4CDE -  -  -  -  ;
   77 00:4CDE -  -  -  -  ; ***************************************************************************************
   78 00:4CDE -  -  -  -  ;
   79 00:4CDE -  -  -  -  ;		Date			Notes
   80 00:4CDE -  -  -  -  ;		==== 			=====
   81 00:4CDE -  -  -  -  ;
   82 00:4CDE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4CDE -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4CDE -  -  -  -  ; ***************************************************************************************
    2 00:4CDE -  -  -  -  ; ***************************************************************************************
    3 00:4CDE -  -  -  -  ;
    4 00:4CDE -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4CDE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CDE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CDE -  -  -  -  ;		Reviewed :	No
    8 00:4CDE -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4CDE -  -  -  -  ;
   10 00:4CDE -  -  -  -  ; ***************************************************************************************
   11 00:4CDE -  -  -  -  ; ***************************************************************************************
   12 00:4CDE -  -  -  -  
   13 00:4CDE -  -  -  -  #ifdef AQUARIUS
   14 00:4CDE -  -  -  -  
   15 00:4CDE -  -  -  -  ; ***************************************************************************************
   16 00:4CDE -  -  -  -  ;
   17 00:4CDE -  -  -  -  ;								Initialise system stuff
   18 00:4CDE -  -  -  -  ;
   19 00:4CDE -  -  -  -  ; ***************************************************************************************
   20 00:4CDE -  -  -  -  
   21 00:4CDE -  -  -  -  SYSInitialise:
   22 00:4CDE 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4CE0 CD E6 4C -  	call 	SYSPrintChar
   24 00:4CE3 C9 -  -  -  	ret
   25 00:4CE4 -  -  -  -  
   26 00:4CE4 -  -  -  -  ; ***************************************************************************************
   27 00:4CE4 -  -  -  -  ;
   28 00:4CE4 -  -  -  -  ;								Terminate system stuff
   29 00:4CE4 -  -  -  -  ;
   30 00:4CE4 -  -  -  -  ; ***************************************************************************************
   31 00:4CE4 -  -  -  -  
   32 00:4CE4 -  -  -  -  SYSTerminate:
   33 00:4CE4 18 FE -  -  	jr 		SYSTerminate
   34 00:4CE6 -  -  -  -  
   35 00:4CE6 -  -  -  -  ; ***************************************************************************************
   36 00:4CE6 -  -  -  -  ;
   37 00:4CE6 -  -  -  -  ;								Print A character
   38 00:4CE6 -  -  -  -  ;
   39 00:4CE6 -  -  -  -  ; ***************************************************************************************
   40 00:4CE6 -  -  -  -  
   41 00:4CE6 -  -  -  -  SYSPrintChar:
   42 00:4CE6 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4CE7 C5 -  -  -  	push 	bc
   44 00:4CE8 D5 -  -  -  	push 	de
   45 00:4CE9 E5 -  -  -  	push 	hl
   46 00:4CEA DD E5 -  -  	push 	ix
   47 00:4CEC FD E5 -  -  	push 	iy
   48 00:4CEE D9 -  -  -  	exx
   49 00:4CEF C5 -  -  -  	push 	bc
   50 00:4CF0 D5 -  -  -  	push 	de
   51 00:4CF1 E5 -  -  -  	push 	hl
   52 00:4CF2 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4CF5 E1 -  -  -  	pop 	hl
   54 00:4CF6 D1 -  -  -  	pop 	de
   55 00:4CF7 C1 -  -  -  	pop 	bc
   56 00:4CF8 D9 -  -  -  	exx
   57 00:4CF9 FD E1 -  -  	pop 	iy
   58 00:4CFB DD E1 -  -  	pop 	ix
   59 00:4CFD E1 -  -  -  	pop 	hl
   60 00:4CFE D1 -  -  -  	pop 	de
   61 00:4CFF C1 -  -  -  	pop 	bc
   62 00:4D00 F1 -  -  -  	pop 	af
   63 00:4D01 C9 -  -  -  	ret		
   64 00:4D02 -  -  -  -  
   65 00:4D02 -  -  -  -  ; ***************************************************************************************
   66 00:4D02 -  -  -  -  ;
   67 00:4D02 -  -  -  -  ;									Print Newline
   68 00:4D02 -  -  -  -  ;
   69 00:4D02 -  -  -  -  ; ***************************************************************************************
   70 00:4D02 -  -  -  -  
   71 00:4D02 -  -  -  -  SYSPrintCRLF:
   72 00:4D02 F5 -  -  -  	push 	af
   73 00:4D03 3E 0D -  -  	ld 		a,13
   74 00:4D05 CD E6 4C -  	call 	SYSPrintChar
   75 00:4D08 3E 0A -  -  	ld 		a,10
   76 00:4D0A CD E6 4C -  	call 	SYSPrintChar
   77 00:4D0D F1 -  -  -  	pop 	af
   78 00:4D0E C9 -  -  -  	ret
   79 00:4D0F -  -  -  -  
   80 00:4D0F -  -  -  -  ; ***************************************************************************************
   81 00:4D0F -  -  -  -  ;
   82 00:4D0F -  -  -  -  ;									Get time into HL'HL
   83 00:4D0F -  -  -  -  ;
   84 00:4D0F -  -  -  -  ; ***************************************************************************************
   85 00:4D0F -  -  -  -  
   86 00:4D0F -  -  -  -  SYSGetTimer:
   87 00:4D0F DB 00 -  -   	in 		a,($00)
   88 00:4D11 6F -  -  -   	ld 		l,a
   89 00:4D12 DB 01 -  -   	in 		a,($01)
   90 00:4D14 67 -  -  -   	ld 		h,a
   91 00:4D15 D9 -  -  -   	exx
   92 00:4D16 DB 02 -  -   	in 		a,($02)
   93 00:4D18 6F -  -  -   	ld 		l,a
   94 00:4D19 DB 03 -  -   	in 		a,($03)
   95 00:4D1B 67 -  -  -   	ld 		h,a
   96 00:4D1C D9 -  -  -   	exx
   97 00:4D1D C9 -  -  -  	ret 	
   98 00:4D1E -  -  -  -  	
   99 00:4D1E -  -  -  -  #endif
  100 00:4D1E -  -  -  -  
  101 00:4D1E -  -  -  -  ; ***************************************************************************************
  102 00:4D1E -  -  -  -  ;
  103 00:4D1E -  -  -  -  ;									Changes and Updates
  104 00:4D1E -  -  -  -  ;
  105 00:4D1E -  -  -  -  ; ***************************************************************************************
  106 00:4D1E -  -  -  -  ;
  107 00:4D1E -  -  -  -  ;		Date			Notes
  108 00:4D1E -  -  -  -  ;		==== 			=====
  109 00:4D1E -  -  -  -  ;
  110 00:4D1E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4D1E -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4D1E -  -  -  -  ; ***************************************************************************************
    2 00:4D1E -  -  -  -  ; ***************************************************************************************
    3 00:4D1E -  -  -  -  ;
    4 00:4D1E -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4D1E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D1E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D1E -  -  -  -  ;		Reviewed :	No
    8 00:4D1E -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4D1E -  -  -  -  ;
   10 00:4D1E -  -  -  -  ; ***************************************************************************************
   11 00:4D1E -  -  -  -  ; ***************************************************************************************
   12 00:4D1E -  -  -  -  
   13 00:4D1E -  -  -  -  #ifdef CLEANEZ80
   14 00:4D1E             
   15 00:4D1E             ; ***************************************************************************************
   16 00:4D1E             ;
   17 00:4D1E             ;								Initialise system stuff
   18 00:4D1E             ;
   19 00:4D1E             ; ***************************************************************************************
   20 00:4D1E             
   21 00:4D1E             SYSInitialise:
   22 00:4D1E             	ret
   23 00:4D1E             
   24 00:4D1E             ; ***************************************************************************************
   25 00:4D1E             ;
   26 00:4D1E             ;								Terminate system stuff
   27 00:4D1E             ;
   28 00:4D1E             ; ***************************************************************************************
   29 00:4D1E             
   30 00:4D1E             SYSTerminate:
   31 00:4D1E             	ret
   32 00:4D1E             
   33 00:4D1E             ; ***************************************************************************************
   34 00:4D1E             ;
   35 00:4D1E             ;								Print A character
   36 00:4D1E             ;
   37 00:4D1E             ; ***************************************************************************************
   38 00:4D1E             
   39 00:4D1E             SYSPrintChar:
   40 00:4D1E             	ret		
   41 00:4D1E             
   42 00:4D1E             ; ***************************************************************************************
   43 00:4D1E             ;
   44 00:4D1E             ;									Print Newline
   45 00:4D1E             ;
   46 00:4D1E             ; ***************************************************************************************
   47 00:4D1E             
   48 00:4D1E             SYSPrintCRLF:
   49 00:4D1E             	ret
   50 00:4D1E             
   51 00:4D1E             ; ***************************************************************************************
   52 00:4D1E             ;
   53 00:4D1E             ;									Get time into HL'HL
   54 00:4D1E             ;
   55 00:4D1E             ; ***************************************************************************************
   56 00:4D1E             
   57 00:4D1E             SYSGetTimer:
   58 00:4D1E             	ret
   59 00:4D1E             
   60 00:4D1E             #endif
   61 00:4D1E -  -  -  -  
   62 00:4D1E -  -  -  -  ; ***************************************************************************************
   63 00:4D1E -  -  -  -  ;
   64 00:4D1E -  -  -  -  ;									Changes and Updates
   65 00:4D1E -  -  -  -  ;
   66 00:4D1E -  -  -  -  ; ***************************************************************************************
   67 00:4D1E -  -  -  -  ;
   68 00:4D1E -  -  -  -  ;		Date			Notes
   69 00:4D1E -  -  -  -  ;		==== 			=====
   70 00:4D1E -  -  -  -  ;
   71 00:4D1E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4D1E -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4D1E -  -  -  -  ; ***************************************************************************************
    2 00:4D1E -  -  -  -  ; ***************************************************************************************
    3 00:4D1E -  -  -  -  ;
    4 00:4D1E -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4D1E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D1E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D1E -  -  -  -  ;		Reviewed :	No
    8 00:4D1E -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4D1E -  -  -  -  ;
   10 00:4D1E -  -  -  -  ; ***************************************************************************************
   11 00:4D1E -  -  -  -  ; ***************************************************************************************
   12 00:4D1E -  -  -  -  
   13 00:4D1E -  -  -  -  #ifdef TI84
   14 00:4D1E             
   15 00:4D1E             ; ***************************************************************************************
   16 00:4D1E             ;
   17 00:4D1E             ;								Initialise system stuff
   18 00:4D1E             ;
   19 00:4D1E             ; ***************************************************************************************
   20 00:4D1E             
   21 00:4D1E             SYSInitialise:
   22 00:4D1E             	di
   23 00:4D1E             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4D1E             	ld 		(_IYTemp84),iy
   25 00:4D1E             	ret
   26 00:4D1E             
   27 00:4D1E             ; ***************************************************************************************
   28 00:4D1E             ;
   29 00:4D1E             ;								Terminate system stuff
   30 00:4D1E             ;
   31 00:4D1E             ; ***************************************************************************************
   32 00:4D1E             
   33 00:4D1E             SYSTerminate:
   34 00:4D1E             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4D1E             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4D1E             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4D1E             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4D1E             	ei
   39 00:4D1E             	ret 										; and exit.
   40 00:4D1E             
   41 00:4D1E             _StackTemp84:									; temp var for TI84 only.
   42 00:4D1E             	.dw 	0,0
   43 00:4D1E             _IYTemp84:
   44 00:4D1E             	.dw 	0,0		
   45 00:4D1E             
   46 00:4D1E             ; ***************************************************************************************
   47 00:4D1E             ;
   48 00:4D1E             ;								Print A character
   49 00:4D1E             ;
   50 00:4D1E             ; ***************************************************************************************
   51 00:4D1E             
   52 00:4D1E             SYSPrintChar:
   53 00:4D1E             	push 	af 									; we stack everything including alt registers
   54 00:4D1E             	push 	bc
   55 00:4D1E             	push 	de
   56 00:4D1E             	push 	hl
   57 00:4D1E             	push 	ix
   58 00:4D1E             	push 	iy
   59 00:4D1E             	exx
   60 00:4D1E             	push 	bc
   61 00:4D1E             	push 	de
   62 00:4D1E             	push 	hl
   63 00:4D1E             
   64 00:4D1E             	ld 		iy,(_IYTemp84)
   65 00:4D1E             	call 	_PutC 								; print A as character
   66 00:4D1E             	di
   67 00:4D1E             	ld 		(_IYTemp84),iy
   68 00:4D1E             
   69 00:4D1E             	pop 	hl
   70 00:4D1E             	pop 	de
   71 00:4D1E             	pop 	bc
   72 00:4D1E             	exx
   73 00:4D1E             	pop 	iy
   74 00:4D1E             	pop 	ix
   75 00:4D1E             	pop 	hl
   76 00:4D1E             	pop 	de
   77 00:4D1E             	pop 	bc
   78 00:4D1E             	pop 	af
   79 00:4D1E             	ret		
   80 00:4D1E             
   81 00:4D1E             ; ***************************************************************************************
   82 00:4D1E             ;
   83 00:4D1E             ;									Print Newline
   84 00:4D1E             ;
   85 00:4D1E             ; ***************************************************************************************
   86 00:4D1E             
   87 00:4D1E             SYSPrintCRLF:
   88 00:4D1E             	push 	af 									; we stack everything including alt registers
   89 00:4D1E             	push 	bc
   90 00:4D1E             	push 	de
   91 00:4D1E             	push 	hl
   92 00:4D1E             	push 	ix
   93 00:4D1E             	push 	iy
   94 00:4D1E             	exx
   95 00:4D1E             	push 	bc
   96 00:4D1E             	push 	de
   97 00:4D1E             	push 	hl
   98 00:4D1E             
   99 00:4D1E             	ld 		iy,(_IYTemp84)
  100 00:4D1E             	call 	_newline
  101 00:4D1E             	di
  102 00:4D1E             	ld 		(_IYTemp84),iy
  103 00:4D1E             
  104 00:4D1E             	pop 	hl
  105 00:4D1E             	pop 	de
  106 00:4D1E             	pop 	bc
  107 00:4D1E             	exx
  108 00:4D1E             	pop 	iy
  109 00:4D1E             	pop 	ix
  110 00:4D1E             	pop 	hl
  111 00:4D1E             	pop 	de
  112 00:4D1E             	pop 	bc
  113 00:4D1E             	pop 	af
  114 00:4D1E             	ret
  115 00:4D1E             
  116 00:4D1E             ; ***************************************************************************************
  117 00:4D1E             ;
  118 00:4D1E             ;									Get time into HL'HL
  119 00:4D1E             ;
  120 00:4D1E             ; ***************************************************************************************
  121 00:4D1E             
  122 00:4D1E             SYSGetTimer:
  123 00:4D1E             	ld 		hl,$1234
  124 00:4D1E             	exx
  125 00:4D1E             	ld 		hl,$5678
  126 00:4D1E             	exx
  127 00:4D1E             	ret
  128 00:4D1E             
  129 00:4D1E             #endif
  130 00:4D1E -  -  -  -  
  131 00:4D1E -  -  -  -  ; ***************************************************************************************
  132 00:4D1E -  -  -  -  ;
  133 00:4D1E -  -  -  -  ;									Changes and Updates
  134 00:4D1E -  -  -  -  ;
  135 00:4D1E -  -  -  -  ; ***************************************************************************************
  136 00:4D1E -  -  -  -  ;
  137 00:4D1E -  -  -  -  ;		Date			Notes
  138 00:4D1E -  -  -  -  ;		==== 			=====
  139 00:4D1E -  -  -  -  ;
  140 00:4D1E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4D1E -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4D1E -  -  -  -  ; ***************************************************************************************
    2 00:4D1E -  -  -  -  ; ***************************************************************************************
    3 00:4D1E -  -  -  -  ;
    4 00:4D1E -  -  -  -  ;		Name : 		basic.asm
    5 00:4D1E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D1E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D1E -  -  -  -  ;		Reviewed :	No
    8 00:4D1E -  -  -  -  ;		Purpose :	Main program.
    9 00:4D1E -  -  -  -  ;
   10 00:4D1E -  -  -  -  ; ***************************************************************************************
   11 00:4D1E -  -  -  -  ; ***************************************************************************************
   12 00:4D1E -  -  -  -  
   13 00:4D1E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 22 01 00 BE 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 BE 3F 0C 
              53 65 65 64 
              20 3D 20 31 
              38 32 39 37 
              0D 80 0B 03 
              00 03 8F 8A 
              41 4F 5E 5E 
              80 0B 04 00 
              02 8F 8A 65 
              42 70 5A 80 
              0E 05 00 BD 
              17 0D 06 0F 
              13 04 95 44 
              A5 80 12 06 
              00 17 0D 06 
              0F 13 04 95 
              44 A5 8F 5E 
              5D 5D 5F 80 
              0D 07 00 13 
              1A 14 8F 8A 
              55 60 63 63 
              80 0B 08 00 
              19 8F 8A 5F 
              72 62 40 80 
              0B 09 00 00 
              20 8F 41 42 
              4B 60 80 0E 
              0A 00 05 05 
              0E 1C 8F 8A 
              4D 52 7C 42 
              80 0A 0B 00 
              BD 04 1D 95 
              43 A5 80 0F 
              0C 00 04 1D 
              95 42 A5 8F 
              8A 43 7B 7D 
              77 80 0A 0D 
              00 01 8F 4E 
              7C 79 5B 80 
              0F 0E 00 0A 
              01 00 18 12 
              1B 8F 60 48 
              74 50 80 0B 
              0F 00 17 8F 
              8A 46 7B 79 
              75 80 0B 10 
              00 BD 19 13 
              20 95 47 A5 
              80 10 11 00 
              19 13 20 95 
              46 A5 8F 8A 
              65 5F 6A 65 
              80 0B 12 00 
              0A 8F 8A 43 
              41 4D 47 80 
              0A 13 00 12 
              8F 4C 45 53 
              6F 80 0E 14 
              00 16 07 09 
              1F 21 8F 8A 
              4E 78 5C 80 
              0D 15 00 08 
              1A 0E 8F 8A 
              66 45 69 78 
              80 0B 16 00 
              06 8F 8A 5E 
              7D 72 6D 80 
              10 17 00 0B 
              1B 03 00 10 
              0C 8F 8A 42 
              5E 48 4D 80 
              0A 18 00 0C 
              8F 64 57 76 
              6C 80 10 19 
              00 14 1F 1A 
              03 1D 1A 8F 
              8A 60 6C 52 
              50 80 10 1A 
              00 0D 11 14 
              16 10 20 8F 
              8A 56 4B 7E 
              67 80 0E 1B 
              00 BD 12 1E 
              0B 0E 13 0C 
              95 42 A5 80 
              12 1C 00 12 
              1E 0B 0E 13 
              0C 95 40 A5 
              8F 42 44 54 
              66 80 0D 1D 
              00 BD 11 21 
              06 20 07 95 
              43 A5 80 11 
              1E 00 11 21 
              06 20 07 95 
              42 A5 8F 41 
              47 73 40 80 
              0D 1F 00 0B 
              15 1E 0D 8F 
              46 5B 46 5A 
              80 0C 20 00 
              0D 17 22 8F 
              5C 49 7C 4D 
              80 0D 21 00 
              0C 1A 0C 8F 
              8A 61 58 4B 
              7E 80 0D 22 
              00 03 06 1A 
              8F 8A 51 64 
              4A 5E 80 0B 
              23 00 13 0F 
              8F 48 59 4A 
              55 80 0E 24 
              00 BD 02 10 
              08 17 0A 1E 
              95 4A A5 80 
              13 25 00 02 
              10 08 17 0A 
              1E 95 40 A5 
              8F 8A 44 50 
              60 56 80 0E 
              26 00 06 22 
              03 08 8F 8A 
              43 7B 4B 67 
              80 10 27 00 
              06 20 0A 13 
              0C 1C 8F 8A 
              4F 57 6C 5C 
              80 10 28 00 
              0A 17 1F 14 
              0C 0E 8F 8A 
              55 4F 44 5B 
              80 0C 29 00 
              0E 0B 20 8F 
              4D 7D 7B 69 
              80 0D 2A 00 
              0B 17 10 15 
              8F 4E 52 46 
              69 80 0B 2B 
              00 BD 10 1E 
              0C 95 44 A5 
              80 0F 2C 00 
              10 1E 0C 95 
              44 A5 8F 5A 
              75 62 7F 80 
              0F 2D 00 04 
              0E 08 1F 14 
              8F 8A 60 54 
              76 67 80 0C 
              2E 00 0C 0A 
              8F 8A 4D 68 
              67 59 80 0C 
              2F 00 BD 19 
              0C 1E 1D 95 
              45 A5 80 10 
              30 00 19 0C 
              1E 1D 95 42 
              A5 8F 65 7E 
              41 5B 80 0F 
              31 00 03 17 
              1F 13 1C 08 
              8F 4C 6B 79 
              71 80 0E 32 
              00 11 0B 0B 
              18 8F 8A 65 
              6C 49 6B 80 
              0D 33 00 0B 
              15 1E 0D 8F 
              55 78 74 71 
              80 0B 34 00 
              01 8F 8A 4D 
              6B 6E 5D 80 
              13 35 00 17 
              0D 06 0F 13 
              04 95 40 A5 
              8F 8A 49 50 
              42 7F 80 12 
              36 00 17 0D 
              06 0F 13 04 
              95 43 A5 8F 
              48 6F 60 6F 
              80 10 37 00 
              03 17 1F 13 
              1C 08 8F 8A 
              56 5B 4C 47 
              80 0E 38 00 
              0B 17 10 15 
              8F 8A 5E 5B 
              56 7D 80 0F 
              39 00 16 07 
              09 1F 21 8F 
              8A 46 48 49 
              70 80 0D 3A 
              00 0B 17 10 
              15 8F 5F 4C 
              51 68 80 0B 
              3B 00 00 20 
              8F 47 41 54 
              6F 80 11 3C 
              00 19 0C 1E 
              1D 95 44 A5 
              8F 8A 4B 56 
              4B 77 80 0D 
              3D 00 0B 15 
              1E 0D 8F 5B 
              78 4E 5A 80 
              0D 3E 00 0C 
              1A 0C 8F 8A 
              57 57 66 40 
              80 0E 3F 00 
              16 07 09 1F 
              21 8F 59 64 
              63 7F 80 0D 
              40 00 06 22 
              03 08 8F 4D 
              49 4D 7F 80 
              0D 41 00 0C 
              1A 0C 8F 8A 
              48 71 57 51 
              80 0F 42 00 
              10 1E 0C 95 
              42 A5 8F 54 
              45 49 75 80 
              0D 43 00 0C 
              1A 0C 8F 8A 
              4C 7A 49 6C 
              80 0C 44 00 
              13 0F 8F 8A 
              47 4D 61 78 
              80 0C 45 00 
              0C 0A 8F 8A 
              44 52 72 7D 
              80 0C 46 00 
              0D 17 22 8F 
              5D 5C 7B 4F 
              80 0B 47 00 
              12 8F 8A 65 
              79 79 79 80 
              0D 48 00 0B 
              15 1E 0D 8F 
              4C 71 44 4C 
              80 10 49 00 
              03 17 1F 13 
              1C 08 8F 8A 
              62 4C 4E 5C 
              80 10 4A 00 
              10 1E 0C 95 
              44 A5 8F 8A 
              43 4A 61 7E 
              80 0E 4B 00 
              04 0E 08 1F 
              14 8F 63 44 
              43 76 80 0A 
              4C 00 02 8F 
              59 49 4D 4E 
              80 10 4D 00 
              0A 17 1F 14 
              0C 0E 8F 8A 
              5B 7A 4C 6F 
              80 0E 4E 00 
              06 22 03 08 
              8F 8A 64 44 
              5B 7D 80 10 
              4F 00 0B 1B 
              03 00 10 0C 
              8F 8A 4F 62 
              56 62 80 0B 
              50 00 12 8F 
              8A 61 5D 54 
              6A 80 0E 51 
              00 04 1D 95 
              41 A5 8F 4A 
              4A 5F 4A 80 
              0C 52 00 0E 
              0B 20 8F 56 
              6F 67 5D 80 
              0E 53 00 16 
              07 09 1F 21 
              8F 51 54 43 
              7E 80 0C 54 
              00 13 0F 8F 
              8A 4B 49 52 
              54 80 0D 55 
              00 0B 15 1E 
              0D 8F 4A 63 
              43 40 80 0B 
              56 00 00 20 
              8F 4E 48 4B 
              57 80 0B 57 
              00 00 20 8F 
              55 41 66 66 
              80 12 58 00 
              12 1E 0B 0E 
              13 0C 95 41 
              A5 8F 61 64 
              4D 61 80 12 
              59 00 11 21 
              06 20 07 95 
              41 A5 8F 8A 
              5E 76 55 7B 
              80 10 5A 00 
              19 13 20 95 
              45 A5 8F 8A 
              4A 71 75 68 
              80 0C 5B 00 
              0E 0B 20 8F 
              53 73 66 6D 
              80 10 5C 00 
              0B 1B 03 00 
              10 0C 8F 8A 
              5F 70 55 50 
              80 12 5D 00 
              12 1E 0B 0E 
              13 0C 95 40 
              A5 8F 59 58 
              72 5B 80 0C 
              5E 00 0D 17 
              22 8F 52 62 
              71 69 80 0B 
              5F 00 12 8F 
              8A 4E 61 62 
              58 80 0D 60 
              00 06 22 03 
              08 8F 45 7B 
              70 4F 80 0B 
              61 00 0C 8F 
              8A 4B 4E 46 
              56 80 12 62 
              00 11 21 06 
              20 07 95 42 
              A5 8F 8A 59 
              6E 71 44 80 
              0D 63 00 0B 
              17 10 15 8F 
              5A 61 72 6E 
              80 0D 64 00 
              03 06 1A 8F 
              8A 49 59 62 
              5A 80 0F 65 
              00 14 1F 1A 
              03 1D 1A 8F 
              5B 7A 60 65 
              80 0B 66 00 
              12 8F 8A 5C 
              56 43 44 80 
              0B 67 00 03 
              8F 8A 61 6C 
              7A 49 80 0F 
              68 00 0D 11 
              14 16 10 20 
              8F 4F 50 4A 
              61 80 0C 69 
              00 13 1A 14 
              8F 54 59 53 
              5E 80 0D 6A 
              00 0D 17 22 
              8F 8A 51 61 
              68 4E 80 0C 
              6B 00 0D 17 
              22 8F 55 7B 
              4D 67 80 0D 
              6C 00 05 05 
              0E 1C 8F 49 
              4F 41 4F 80 
              12 6D 00 11 
              21 06 20 07 
              95 41 A5 8F 
              8A 4C 5C 58 
              65 80 0B 6E 
              00 02 8F 8A 
              5F 73 5E 6E 
              80 0E 6F 00 
              04 0E 08 1F 
              14 8F 5F 4A 
              52 78 80 0A 
              70 00 02 8F 
              56 43 50 6E 
              80 0A 71 00 
              0C 8F 4D 48 
              5E 61 80 0B 
              72 00 00 20 
              8F 5D 54 73 
              59 80 0E 73 
              00 0B 17 10 
              15 8F 8A 5E 
              5A 7B 65 80 
              0F 74 00 0D 
              11 14 16 10 
              20 8F 5F 52 
              56 49 80 0F 
              75 00 0A 17 
              1F 14 0C 0E 
              8F 4B 5D 59 
              78 80 0C 76 
              00 0E 0B 20 
              8F 5C 50 65 
              49 80 10 77 
              00 03 17 1F 
              13 1C 08 8F 
              8A 5B 7C 72 
              73 80 10 78 
              00 0D 11 14 
              16 10 20 8F 
              8A 4B 5E 47 
              78 80 0D 79 
              00 08 1A 0E 
              8F 8A 54 64 
              7B 54 80 0B 
              7A 00 0A 8F 
              8A 63 55 71 
              44 80 0B 7B 
              00 13 0F 8F 
              60 69 57 76 
              80 0A 7C 00 
              19 8F 64 4E 
              53 71 80 0C 
              7D 00 0D 17 
              22 8F 4D 58 
              7D 6A 80 0D 
              7E 00 06 22 
              03 08 8F 5A 
              6B 5D 5C 80 
              0E 7F 00 11 
              0B 0B 18 8F 
              8A 47 53 52 
              4B 80 0F 80 
              00 19 13 20 
              95 40 A5 8F 
              43 5B 5B 71 
              80 0A 81 00 
              0C 8F 62 4D 
              7E 79 80 10 
              82 00 0B 1B 
              03 00 10 0C 
              8F 8A 63 6E 
              7B 7D 80 0B 
              83 00 13 0F 
              8F 64 42 60 
              7C 80 0A 84 
              00 0C 8F 4D 
              4F 61 5C 80 
              0D 85 00 08 
              1A 0E 8F 8A 
              58 44 7E 7C 
              80 0D 86 00 
              05 05 0E 1C 
              8F 4C 46 44 
              56 80 0E 87 
              00 16 07 09 
              1F 21 8F 5A 
              6F 6A 43 80 
              0F 88 00 04 
              0E 08 1F 14 
              8F 8A 4D 57 
              50 5C 80 10 
              89 00 0D 11 
              14 16 10 20 
              8F 8A 42 66 
              5A 71 80 0C 
              8A 00 0C 0A 
              8F 8A 5F 4B 
              4B 69 80 0C 
              8B 00 13 0F 
              8F 8A 45 6A 
              4E 4B 80 09 
              8C 00 12 8F 
              77 4D 5A 80 
              0F 8D 00 14 
              1F 1A 03 1D 
              1A 8F 57 50 
              7E 40 80 0B 
              8E 00 0A 8F 
              8A 44 67 47 
              5C 80 0A 8F 
              00 0A 8F 5C 
              76 57 6A 80 
              10 90 00 10 
              1E 0C 95 41 
              A5 8F 8A 5F 
              68 54 4F 80 
              0F 91 00 0B 
              1B 03 00 10 
              0C 8F 46 53 
              61 5B 80 0D 
              92 00 0B 15 
              1E 0D 8F 63 
              43 6E 70 80 
              12 93 00 12 
              1E 0B 0E 13 
              0C 95 41 A5 
              8F 59 5A 48 
              66 80 0B 94 
              00 0C 8F 8A 
              5F 4C 75 52 
              80 0C 95 00 
              00 20 8F 8A 
              66 44 7E 62 
              80 0C 96 00 
              13 1A 14 8F 
              46 41 76 56 
              80 0F 97 00 
              10 1E 0C 95 
              43 A5 8F 5A 
              4E 7E 5B 80 
              0A 98 00 0A 
              8F 63 66 71 
              4C 80 0B 99 
              00 0C 8F 8A 
              58 7F 7F 60 
              80 0A 9A 00 
              19 8F 5C 5D 
              48 4B 80 0A 
              9B 00 06 8F 
              54 7B 4A 6B 
              80 0A 9C 00 
              03 8F 56 49 
              4F 40 80 0A 
              9D 00 06 8F 
              58 74 65 5E 
              80 0B 9E 00 
              02 8F 8A 45 
              5C 5E 4E 80 
              0A 9F 00 01 
              8F 44 4C 4E 
              4A 80 0D A0 
              00 0E 0B 20 
              8F 8A 4C 75 
              62 76 80 0A 
              A1 00 0C 8F 
              42 59 5B 67 
              80 0F A2 00 
              03 17 1F 13 
              1C 08 8F 41 
              72 6B 6B 80 
              0B A3 00 06 
              8F 8A 65 74 
              72 43 80 0F 
              A4 00 0A 01 
              00 18 12 1B 
              8F 59 60 70 
              4C 80 10 A5 
              00 0A 17 1F 
              14 0C 0E 8F 
              8A 43 5E 68 
              76 80 12 A6 
              00 11 21 06 
              20 07 95 43 
              A5 8F 8A 51 
              4F 7A 6C 80 
              0D A7 00 11 
              0B 0B 18 8F 
              56 4F 45 67 
              80 0C A8 00 
              08 1A 0E 8F 
              5B 5D 49 6F 
              80 0B A9 00 
              06 8F 8A 56 
              78 69 64 80 
              0B AA 00 06 
              8F 8A 5E 74 
              79 76 80 10 
              AB 00 0D 11 
              14 16 10 20 
              8F 8A 57 7C 
              4A 72 80 0F 
              AC 00 0A 01 
              00 18 12 1B 
              8F 43 4E 7A 
              64 80 0D AD 
              00 05 05 0E 
              1C 8F 5C 7B 
              50 41 80 12 
              AE 00 02 10 
              08 17 0A 1E 
              95 41 A5 8F 
              5C 6B 7F 46 
              80 12 AF 00 
              11 21 06 20 
              07 95 43 A5 
              8F 8A 4F 6E 
              53 45 80 12 
              B0 00 02 10 
              08 17 0A 1E 
              95 46 A5 8F 
              5A 65 49 49 
              80 0D B1 00 
              03 06 1A 8F 
              8A 41 71 67 
              77 80 11 B2 
              00 19 0C 1E 
              1D 95 40 A5 
              8F 8A 4D 5B 
              58 48 80 10 
              B3 00 10 1E 
              0C 95 43 A5 
              8F 8A 49 5C 
              6C 49 80 11 
              B4 00 19 0C 
              1E 1D 95 43 
              A5 8F 8A 49 
              48 64 57 80 
              12 B5 00 12 
              1E 0B 0E 13 
              0C 95 40 A5 
              8F 65 64 73 
              7E 80 10 B6 
              00 19 0C 1E 
              1D 95 43 A5 
              8F 45 48 7F 
              6E 80 0D B7 
              00 0B 15 1E 
              0D 8F 47 61 
              48 75 80 0B 
              B8 00 02 8F 
              8A 4A 77 7E 
              5B 80 10 B9 
              00 06 20 0A 
              13 0C 1C 8F 
              8A 54 4F 6C 
              6C 80 11 BA 
              00 19 0C 1E 
              1D 95 44 A5 
              8F 8A 49 45 
              75 46 80 12 
              BB 00 12 1E 
              0B 0E 13 0C 
              95 42 A5 8F 
              62 6B 52 64 
              80 0F BC 00 
              10 1E 0C 95 
              41 A5 8F 56 
              5D 43 59 80 
              0C BD 00 13 
              1A 14 8F 65 
              63 4F 58 80 
              0B BE 00 02 
              8F 8A 60 64 
              5D 7D 80 0D 
              BF 00 0B 17 
              10 15 8F 45 
              50 6B 54 80 
              0F C0 00 0D 
              11 14 16 10 
              20 8F 41 74 
              61 6E 80 0C 
              C1 00 00 20 
              8F 8A 4B 6B 
              6B 49 80 10 
              C2 00 0B 1B 
              03 00 10 0C 
              8F 8A 5B 4E 
              78 75 80 10 
              C3 00 19 0C 
              1E 1D 95 40 
              A5 8F 5A 44 
              54 6B 80 0E 
              C4 00 11 0B 
              0B 18 8F 8A 
              5B 4E 6D 49 
              80 0B C5 00 
              00 20 8F 5C 
              5F 47 74 80 
              0E C6 00 04 
              0E 08 1F 14 
              8F 5B 49 43 
              4C 80 0A C7 
              00 02 8F 63 
              48 7B 7E 80 
              0C C8 00 0E 
              0B 20 8F 57 
              43 55 6D 80 
              0C C9 00 0C 
              0A 8F 8A 4A 
              7F 57 7C 80 
              0B CA 00 03 
              8F 8A 42 61 
              72 7E 80 0D 
              CB 00 0E 0B 
              20 8F 8A 43 
              79 47 5E 80 
              13 CC 00 02 
              10 08 17 0A 
              1E 95 48 A5 
              8F 8A 5F 65 
              65 7C 80 0F 
              CD 00 19 13 
              20 95 40 A5 
              8F 57 66 79 
              77 80 0C CE 
              00 13 0F 8F 
              8A 65 6B 7C 
              42 80 0B CF 
              00 01 8F 8A 
              46 58 72 54 
              80 0F D0 00 
              0A 17 1F 14 
              0C 0E 8F 51 
              44 44 49 80 
              0F D1 00 06 
              20 0A 13 0C 
              1C 8F 4E 49 
              53 66 80 0B 
              D2 00 01 8F 
              8A 58 4A 5F 
              77 80 10 D3 
              00 0B 1B 03 
              00 10 0C 8F 
              8A 44 69 72 
              7E 80 0B D4 
              00 12 8F 8A 
              64 7E 62 4D 
              80 0A D5 00 
              12 8F 56 5A 
              5F 45 80 12 
              D6 00 11 21 
              06 20 07 95 
              41 A5 8F 8A 
              60 7F 65 69 
              80 10 D7 00 
              19 13 20 95 
              40 A5 8F 8A 
              50 66 69 64 
              80 12 D8 00 
              11 21 06 20 
              07 95 43 A5 
              8F 8A 42 5C 
              5C 6D 80 0A 
              D9 00 0A 8F 
              54 63 5C 73 
              80 0B DA 00 
              0C 0A 8F 55 
              48 57 7E 80 
              0C DB 00 03 
              06 1A 8F 47 
              66 59 46 80 
              0E DC 00 05 
              05 0E 1C 8F 
              8A 44 6E 47 
              63 80 0F DD 
              00 14 1F 1A 
              03 1D 1A 8F 
              8A 7A 6E 68 
              80 0B DE 00 
              01 8F 8A 4B 
              5F 51 4B 80 
              0D DF 00 13 
              1A 14 8F 8A 
              4C 56 61 60 
              80 0A E0 00 
              03 8F 4B 56 
              77 6A 80 0D 
              E1 00 03 06 
              1A 8F 8A 61 
              7D 59 49 80 
              10 E2 00 03 
              17 1F 13 1C 
              08 8F 8A 53 
              7F 4A 45 80 
              10 E3 00 03 
              17 1F 13 1C 
              08 8F 8A 5D 
              67 5F 4F 80 
              10 E4 00 03 
              17 1F 13 1C 
              08 8F 8A 63 
              45 44 4E 80 
              0A E5 00 0A 
              8F 64 63 68 
              49 80 11 E6 
              00 19 0C 1E 
              1D 95 41 A5 
              8F 8A 53 5E 
              68 7C 80 13 
              E7 00 17 0D 
              06 0F 13 04 
              95 44 A5 8F 
              8A 4D 76 6A 
              42 80 11 E8 
              00 11 21 06 
              20 07 95 40 
              A5 8F 5F 7D 
              41 67 80 0E 
              E9 00 04 0E 
              08 1F 14 8F 
              46 5D 43 5D 
              80 0F EA 00 
              04 1D 95 42 
              A5 8F 8A 4C 
              75 73 72 80 
              0D EB 00 08 
              1A 0E 8F 8A 
              44 74 4B 56 
              80 0B EC 00 
              06 8F 8A 49 
              66 4F 6F 80 
              0D ED 00 03 
              06 1A 8F 8A 
              4E 6E 58 6C 
              80 0B EE 00 
              12 8F 8A 45 
              4E 6A 72 80 
              10 EF 00 0D 
              11 14 16 10 
              20 8F 8A 58 
              51 5F 4C 80 
              0E F0 00 04 
              0E 08 1F 14 
              8F 58 7B 63 
              53 80 13 F1 
              00 17 0D 06 
              0F 13 04 95 
              44 A5 8F 8A 
              47 4A 48 46 
              80 0D F2 00 
              05 05 0E 1C 
              8F 8A 42 50 
              44 80 10 F3 
              00 10 1E 0C 
              95 44 A5 8F 
              8A 4E 46 75 
              5A 80 0F F4 
              00 06 20 0A 
              13 0C 1C 8F 
              5A 5A 43 40 
              80 10 F5 00 
              10 1E 0C 95 
              43 A5 8F 8A 
              54 65 55 5B 
              80 0F F6 00 
              0A 01 00 18 
              12 1B 8F 54 
              79 65 45 80 
              0D F7 00 0B 
              15 1E 0D 8F 
              5A 7F 6B 68 
              80 0C F8 00 
              00 20 8F 8A 
              5B 53 47 46 
              80 0D F9 00 
              0D 17 22 8F 
              8A 61 54 54 
              64 80 0E FA 
              00 11 0B 0B 
              18 8F 8A 5B 
              47 70 60 80 
              0B FB 00 CA 
              03 8F 4B 56 
              77 6A 80 0B 
              FC 00 CA 02 
              8F 63 48 7B 
              7E 80 14 FD 
              00 CA 17 0D 
              06 0F 13 04 
              95 40 A5 8F 
              8A 49 50 42 
              7F 80 10 FE 
              00 CA 17 0D 
              06 0F 13 04 
              95 41 A5 8F 
              40 80 10 FF 
              00 CA 17 0D 
              06 0F 13 04 
              95 42 A5 8F 
              40 80 13 00 
              01 CA 17 0D 
              06 0F 13 04 
              95 43 A5 8F 
              48 6F 60 6F 
              80 14 01 01 
              CA 17 0D 06 
              0F 13 04 95 
              44 A5 8F 8A 
              47 4A 48 46 
              80 08 02 01 
              BE 3F 00 0D 
              80 0E 03 01 
              CA 13 1A 14 
              8F 8A 4C 56 
              61 60 80 0B 
              04 01 CA 19 
              8F 5C 5D 48 
              4B 80 0D 05 
              01 CA 00 20 
              8F 8A 5B 53 
              47 46 80 0E 
              06 01 CA 05 
              05 0E 1C 8F 
              8A 42 50 44 
              80 0C 07 01 
              CA 04 1D 95 
              40 A5 8F 40 
              80 0F 08 01 
              CA 04 1D 95 
              41 A5 8F 4A 
              4A 5F 4A 80 
              10 09 01 CA 
              04 1D 95 42 
              A5 8F 8A 4C 
              75 73 72 80 
              0C 0A 01 CA 
              04 1D 95 43 
              A5 8F 40 80 
              08 0B 01 BE 
              3F 00 0D 80 
              0C 0C 01 CA 
              01 8F 8A 4B 
              5F 51 4B 80 
              10 0D 01 CA 
              0A 01 00 18 
              12 1B 8F 54 
              79 65 45 80 
              0C 0E 01 CA 
              17 8F 8A 46 
              7B 79 75 80 
              11 0F 01 CA 
              19 13 20 95 
              40 A5 8F 8A 
              50 66 69 64 
              80 0D 10 01 
              CA 19 13 20 
              95 41 A5 8F 
              40 80 0D 11 
              01 CA 19 13 
              20 95 42 A5 
              8F 40 80 0D 
              12 01 CA 19 
              13 20 95 43 
              A5 8F 40 80 
              0D 13 01 CA 
              19 13 20 95 
              44 A5 8F 40 
              80 11 14 01 
              CA 19 13 20 
              95 45 A5 8F 
              8A 4A 71 75 
              68 80 11 15 
              01 CA 19 13 
              20 95 46 A5 
              8F 8A 65 5F 
              6A 65 80 0D 
              16 01 CA 19 
              13 20 95 47 
              A5 8F 40 80 
              08 17 01 BE 
              3F 00 0D 80 
              0B 18 01 CA 
              0A 8F 64 63 
              68 49 80 0C 
              19 01 CA 12 
              8F 8A 45 4E 
              6A 72 80 0F 
              1A 01 CA 16 
              07 09 1F 21 
              8F 5A 6F 6A 
              43 80 0E 1B 
              01 CA 08 1A 
              0E 8F 8A 44 
              74 4B 56 80 
              0C 1C 01 CA 
              06 8F 8A 49 
              66 4F 6F 80 
              11 1D 01 CA 
              0B 1B 03 00 
              10 0C 8F 8A 
              44 69 72 7E 
              80 0B 1E 01 
              CA 0C 8F 42 
              59 5B 67 80 
              10 1F 01 CA 
              14 1F 1A 03 
              1D 1A 8F 8A 
              7A 6E 68 80 
              11 20 01 CA 
              0D 11 14 16 
              10 20 8F 8A 
              58 51 5F 4C 
              80 13 21 01 
              CA 12 1E 0B 
              0E 13 0C 95 
              40 A5 8F 65 
              64 73 7E 80 
              13 22 01 CA 
              12 1E 0B 0E 
              13 0C 95 41 
              A5 8F 59 5A 
              48 66 80 13 
              23 01 CA 12 
              1E 0B 0E 13 
              0C 95 42 A5 
              8F 62 6B 52 
              64 80 08 24 
              01 BE 3F 00 
              0D 80 12 25 
              01 CA 11 21 
              06 20 07 95 
              40 A5 8F 5F 
              7D 41 67 80 
              13 26 01 CA 
              11 21 06 20 
              07 95 41 A5 
              8F 8A 60 7F 
              65 69 80 13 
              27 01 CA 11 
              21 06 20 07 
              95 42 A5 8F 
              8A 59 6E 71 
              44 80 13 28 
              01 CA 11 21 
              06 20 07 95 
              43 A5 8F 8A 
              42 5C 5C 6D 
              80 08 29 01 
              BE 3F 00 0D 
              80 0E 2A 01 
              CA 0B 15 1E 
              0D 8F 5A 7F 
              6B 68 80 0E 
              2B 01 CA 0D 
              17 22 8F 8A 
              61 54 54 64 
              80 0E 2C 01 
              CA 0C 1A 0C 
              8F 8A 4C 7A 
              49 6C 80 0E 
              2D 01 CA 03 
              06 1A 8F 8A 
              4E 6E 58 6C 
              80 0D 2E 01 
              CA 13 0F 8F 
              8A 65 6B 7C 
              42 80 14 2F 
              01 CA 02 10 
              08 17 0A 1E 
              95 40 A5 8F 
              8A 44 50 60 
              56 80 13 30 
              01 CA 02 10 
              08 17 0A 1E 
              95 41 A5 8F 
              5C 6B 7F 46 
              80 10 31 01 
              CA 02 10 08 
              17 0A 1E 95 
              42 A5 8F 40 
              80 10 32 01 
              CA 02 10 08 
              17 0A 1E 95 
              43 A5 8F 40 
              80 10 33 01 
              CA 02 10 08 
              17 0A 1E 95 
              44 A5 8F 40 
              80 10 34 01 
              CA 02 10 08 
              17 0A 1E 95 
              45 A5 8F 40 
              80 13 35 01 
              CA 02 10 08 
              17 0A 1E 95 
              46 A5 8F 5A 
              65 49 49 80 
              10 36 01 CA 
              02 10 08 17 
              0A 1E 95 47 
              A5 8F 40 80 
              14 37 01 CA 
              02 10 08 17 
              0A 1E 95 48 
              A5 8F 8A 5F 
              65 65 7C 80 
              10 38 01 CA 
              02 10 08 17 
              0A 1E 95 49 
              A5 8F 40 80 
              10 39 01 CA 
              02 10 08 17 
              0A 1E 95 4A 
              A5 8F 40 80 
              08 3A 01 BE 
              3F 00 0D 80 
              0E 3B 01 CA 
              06 22 03 08 
              8F 5A 6B 5D 
              5C 80 10 3C 
              01 CA 06 20 
              0A 13 0C 1C 
              8F 5A 5A 43 
              40 80 10 3D 
              01 CA 0A 17 
              1F 14 0C 0E 
              8F 51 44 44 
              49 80 0E 3E 
              01 CA 0E 0B 
              20 8F 8A 43 
              79 47 5E 80 
              0E 3F 01 CA 
              0B 17 10 15 
              8F 45 50 6B 
              54 80 0D 40 
              01 CA 10 1E 
              0C 95 40 A5 
              8F 40 80 10 
              41 01 CA 10 
              1E 0C 95 41 
              A5 8F 56 5D 
              43 59 80 10 
              42 01 CA 10 
              1E 0C 95 42 
              A5 8F 54 45 
              49 75 80 11 
              43 01 CA 10 
              1E 0C 95 43 
              A5 8F 8A 54 
              65 55 5B 80 
              11 44 01 CA 
              10 1E 0C 95 
              44 A5 8F 8A 
              4E 46 75 5A 
              80 08 45 01 
              BE 3F 00 0D 
              80 0F 46 01 
              CA 04 0E 08 
              1F 14 8F 58 
              7B 63 53 80 
              0C 47 01 CA 
              0C 0A 8F 55 
              48 57 7E 80 
              11 48 01 CA 
              19 0C 1E 1D 
              95 40 A5 8F 
              5A 44 54 6B 
              80 12 49 01 
              CA 19 0C 1E 
              1D 95 41 A5 
              8F 8A 53 5E 
              68 7C 80 11 
              4A 01 CA 19 
              0C 1E 1D 95 
              42 A5 8F 65 
              7E 41 5B 80 
              11 4B 01 CA 
              19 0C 1E 1D 
              95 43 A5 8F 
              45 48 7F 6E 
              80 12 4C 01 
              CA 19 0C 1E 
              1D 95 44 A5 
              8F 8A 49 45 
              75 46 80 0E 
              4D 01 CA 19 
              0C 1E 1D 95 
              45 A5 8F 40 
              80 08 4E 01 
              BE 3F 00 0D 
              80 11 4F 01 
              CA 03 17 1F 
              13 1C 08 8F 
              8A 63 45 44 
              4E 80 0F 50 
              01 CA 11 0B 
              0B 18 8F 8A 
              5B 47 70 60 
              80 15 51 01 
              C1 3F 0D 4F 
              6B 20 53 65 
              65 64 20 31 
              38 32 39 37 
              0D 80 00 -  	.db	$22,$01,$00,$be,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$be,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$31,$38,$32,$39,$37,$0d,$80,$0b,$03,$00,$03,$8f,$8a,$41,$4f,$5e,$5e,$80,$0b,$04,$00,$02,$8f,$8a,$65,$42,$70,$5a,$80,$0e,$05,$00,$bd,$17,$0d,$06,$0f,$13,$04,$95,$44,$a5,$80,$12,$06,$00,$17,$0d,$06,$0f,$13,$04,$95,$44,$a5,$8f,$5e,$5d,$5d,$5f,$80,$0d,$07,$00,$13,$1a,$14,$8f,$8a,$55,$60,$63,$63,$80,$0b,$08,$00,$19,$8f,$8a,$5f,$72,$62,$40,$80,$0b,$09,$00,$00,$20,$8f,$41,$42,$4b,$60,$80,$0e,$0a,$00,$05,$05,$0e,$1c,$8f,$8a,$4d,$52,$7c,$42,$80,$0a,$0b,$00,$bd,$04,$1d,$95,$43,$a5,$80,$0f,$0c,$00,$04,$1d,$95,$42,$a5,$8f,$8a,$43,$7b,$7d,$77,$80,$0a,$0d,$00,$01,$8f,$4e,$7c,$79,$5b,$80,$0f,$0e,$00,$0a,$01,$00,$18,$12,$1b,$8f,$60,$48,$74,$50,$80,$0b,$0f,$00,$17,$8f,$8a,$46,$7b,$79,$75,$80,$0b,$10,$00,$bd,$19,$13,$20,$95,$47,$a5,$80,$10,$11,$00,$19,$13,$20,$95,$46,$a5,$8f,$8a,$65,$5f,$6a,$65,$80,$0b,$12,$00,$0a,$8f,$8a,$43,$41,$4d,$47,$80,$0a,$13,$00,$12,$8f,$4c,$45,$53,$6f,$80,$0e,$14,$00,$16,$07,$09,$1f,$21,$8f,$8a,$4e,$78,$5c,$80,$0d,$15,$00,$08,$1a,$0e,$8f,$8a,$66,$45,$69,$78,$80,$0b,$16,$00,$06,$8f,$8a,$5e,$7d,$72,$6d,$80,$10,$17,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$42,$5e,$48,$4d,$80,$0a,$18,$00,$0c,$8f,$64,$57,$76,$6c,$80,$10,$19,$00,$14,$1f,$1a,$03,$1d,$1a,$8f,$8a,$60,$6c,$52,$50,$80,$10,$1a,$00,$0d,$11,$14,$16,$10,$20,$8f,$8a,$56,$4b,$7e,$67,$80,$0e,$1b,$00,$bd,$12,$1e,$0b,$0e,$13,$0c,$95,$42,$a5,$80,$12,$1c,$00,$12,$1e,$0b,$0e,$13,$0c,$95,$40,$a5,$8f,$42,$44,$54,$66,$80,$0d,$1d,$00,$bd,$11,$21,$06,$20,$07,$95,$43,$a5,$80,$11,$1e,$00,$11,$21,$06,$20,$07,$95,$42,$a5,$8f,$41,$47,$73,$40,$80,$0d,$1f,$00,$0b,$15,$1e,$0d,$8f,$46,$5b,$46,$5a,$80,$0c,$20,$00,$0d,$17,$22,$8f,$5c,$49,$7c,$4d,$80,$0d,$21,$00,$0c,$1a,$0c,$8f,$8a,$61,$58,$4b,$7e,$80,$0d,$22,$00,$03,$06,$1a,$8f,$8a,$51,$64,$4a,$5e,$80,$0b,$23,$00,$13,$0f,$8f,$48,$59,$4a,$55,$80,$0e,$24,$00,$bd,$02,$10,$08,$17,$0a,$1e,$95,$4a,$a5,$80,$13,$25,$00,$02,$10,$08,$17,$0a,$1e,$95,$40,$a5,$8f,$8a,$44,$50,$60,$56,$80,$0e,$26,$00,$06,$22,$03,$08,$8f,$8a,$43,$7b,$4b,$67,$80,$10,$27,$00,$06,$20,$0a,$13,$0c,$1c,$8f,$8a,$4f,$57,$6c,$5c,$80,$10,$28,$00,$0a,$17,$1f,$14,$0c,$0e,$8f,$8a,$55,$4f,$44,$5b,$80,$0c,$29,$00,$0e,$0b,$20,$8f,$4d,$7d,$7b,$69,$80,$0d,$2a,$00,$0b,$17,$10,$15,$8f,$4e,$52,$46,$69,$80,$0b,$2b,$00,$bd,$10,$1e,$0c,$95,$44,$a5,$80,$0f,$2c,$00,$10,$1e,$0c,$95,$44,$a5,$8f,$5a,$75,$62,$7f,$80,$0f,$2d,$00,$04,$0e,$08,$1f,$14,$8f,$8a,$60,$54,$76,$67,$80,$0c,$2e,$00,$0c,$0a,$8f,$8a,$4d,$68,$67,$59,$80,$0c,$2f,$00,$bd,$19,$0c,$1e,$1d,$95,$45,$a5,$80,$10,$30,$00,$19,$0c,$1e,$1d,$95,$42,$a5,$8f,$65,$7e,$41,$5b,$80,$0f,$31,$00,$03,$17,$1f,$13,$1c,$08,$8f,$4c,$6b,$79,$71,$80,$0e,$32,$00,$11,$0b,$0b,$18,$8f,$8a,$65,$6c,$49,$6b,$80,$0d,$33,$00,$0b,$15,$1e,$0d,$8f,$55,$78,$74,$71,$80,$0b,$34,$00,$01,$8f,$8a,$4d,$6b,$6e,$5d,$80,$13,$35,$00,$17,$0d,$06,$0f,$13,$04,$95,$40,$a5,$8f,$8a,$49,$50,$42,$7f,$80,$12,$36,$00,$17,$0d,$06,$0f,$13,$04,$95,$43,$a5,$8f,$48,$6f,$60,$6f,$80,$10,$37,$00,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$56,$5b,$4c,$47,$80,$0e,$38,$00,$0b,$17,$10,$15,$8f,$8a,$5e,$5b,$56,$7d,$80,$0f,$39,$00,$16,$07,$09,$1f,$21,$8f,$8a,$46,$48,$49,$70,$80,$0d,$3a,$00,$0b,$17,$10,$15,$8f,$5f,$4c,$51,$68,$80,$0b,$3b,$00,$00,$20,$8f,$47,$41,$54,$6f,$80,$11,$3c,$00,$19,$0c,$1e,$1d,$95,$44,$a5,$8f,$8a,$4b,$56,$4b,$77,$80,$0d,$3d,$00,$0b,$15,$1e,$0d,$8f,$5b,$78,$4e,$5a,$80,$0d,$3e,$00,$0c,$1a,$0c,$8f,$8a,$57,$57,$66,$40,$80,$0e,$3f,$00,$16,$07,$09,$1f,$21,$8f,$59,$64,$63,$7f,$80,$0d,$40,$00,$06,$22,$03,$08,$8f,$4d,$49,$4d,$7f,$80,$0d,$41,$00,$0c,$1a,$0c,$8f,$8a,$48,$71,$57,$51,$80,$0f,$42,$00,$10,$1e,$0c,$95,$42,$a5,$8f,$54,$45,$49,$75,$80,$0d,$43,$00,$0c,$1a,$0c,$8f,$8a,$4c,$7a,$49,$6c,$80,$0c,$44,$00,$13,$0f,$8f,$8a,$47,$4d,$61,$78,$80,$0c,$45,$00,$0c,$0a,$8f,$8a,$44,$52,$72,$7d,$80,$0c,$46,$00,$0d,$17,$22,$8f,$5d,$5c,$7b,$4f,$80,$0b,$47,$00,$12,$8f,$8a,$65,$79,$79,$79,$80,$0d,$48,$00,$0b,$15,$1e,$0d,$8f,$4c,$71,$44,$4c,$80,$10,$49,$00,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$62,$4c,$4e,$5c,$80,$10,$4a,$00,$10,$1e,$0c,$95,$44,$a5,$8f,$8a,$43,$4a,$61,$7e,$80,$0e,$4b,$00,$04,$0e,$08,$1f,$14,$8f,$63,$44,$43,$76,$80,$0a,$4c,$00,$02,$8f,$59,$49,$4d,$4e,$80,$10,$4d,$00,$0a,$17,$1f,$14,$0c,$0e,$8f,$8a,$5b,$7a,$4c,$6f,$80,$0e,$4e,$00,$06,$22,$03,$08,$8f,$8a,$64,$44,$5b,$7d,$80,$10,$4f,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$4f,$62,$56,$62,$80,$0b,$50,$00,$12,$8f,$8a,$61,$5d,$54,$6a,$80,$0e,$51,$00,$04,$1d,$95,$41,$a5,$8f,$4a,$4a,$5f,$4a,$80,$0c,$52,$00,$0e,$0b,$20,$8f,$56,$6f,$67,$5d,$80,$0e,$53,$00,$16,$07,$09,$1f,$21,$8f,$51,$54,$43,$7e,$80,$0c,$54,$00,$13,$0f,$8f,$8a,$4b,$49,$52,$54,$80,$0d,$55,$00,$0b,$15,$1e,$0d,$8f,$4a,$63,$43,$40,$80,$0b,$56,$00,$00,$20,$8f,$4e,$48,$4b,$57,$80,$0b,$57,$00,$00,$20,$8f,$55,$41,$66,$66,$80,$12,$58,$00,$12,$1e,$0b,$0e,$13,$0c,$95,$41,$a5,$8f,$61,$64,$4d,$61,$80,$12,$59,$00,$11,$21,$06,$20,$07,$95,$41,$a5,$8f,$8a,$5e,$76,$55,$7b,$80,$10,$5a,$00,$19,$13,$20,$95,$45,$a5,$8f,$8a,$4a,$71,$75,$68,$80,$0c,$5b,$00,$0e,$0b,$20,$8f,$53,$73,$66,$6d,$80,$10,$5c,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$5f,$70,$55,$50,$80,$12,$5d,$00,$12,$1e,$0b,$0e,$13,$0c,$95,$40,$a5,$8f,$59,$58,$72,$5b,$80,$0c,$5e,$00,$0d,$17,$22,$8f,$52,$62,$71,$69,$80,$0b,$5f,$00,$12,$8f,$8a,$4e,$61,$62,$58,$80,$0d,$60,$00,$06,$22,$03,$08,$8f,$45,$7b,$70,$4f,$80,$0b,$61,$00,$0c,$8f,$8a,$4b,$4e,$46,$56,$80,$12,$62,$00,$11,$21,$06,$20,$07,$95,$42,$a5,$8f,$8a,$59,$6e,$71,$44,$80,$0d,$63,$00,$0b,$17,$10,$15,$8f,$5a,$61,$72,$6e,$80,$0d,$64,$00,$03,$06,$1a,$8f,$8a,$49,$59,$62,$5a,$80,$0f,$65,$00,$14,$1f,$1a,$03,$1d,$1a,$8f,$5b,$7a,$60,$65,$80,$0b,$66,$00,$12,$8f,$8a,$5c,$56,$43,$44,$80,$0b,$67,$00,$03,$8f,$8a,$61,$6c,$7a,$49,$80,$0f,$68,$00,$0d,$11,$14,$16,$10,$20,$8f,$4f,$50,$4a,$61,$80,$0c,$69,$00,$13,$1a,$14,$8f,$54,$59,$53,$5e,$80,$0d,$6a,$00,$0d,$17,$22,$8f,$8a,$51,$61,$68,$4e,$80,$0c,$6b,$00,$0d,$17,$22,$8f,$55,$7b,$4d,$67,$80,$0d,$6c,$00,$05,$05,$0e,$1c,$8f,$49,$4f,$41,$4f,$80,$12,$6d,$00,$11,$21,$06,$20,$07,$95,$41,$a5,$8f,$8a,$4c,$5c,$58,$65,$80,$0b,$6e,$00,$02,$8f,$8a,$5f,$73,$5e,$6e,$80,$0e,$6f,$00,$04,$0e,$08,$1f,$14,$8f,$5f,$4a,$52,$78,$80,$0a,$70,$00,$02,$8f,$56,$43,$50,$6e,$80,$0a,$71,$00,$0c,$8f,$4d,$48,$5e,$61,$80,$0b,$72,$00,$00,$20,$8f,$5d,$54,$73,$59,$80,$0e,$73,$00,$0b,$17,$10,$15,$8f,$8a,$5e,$5a,$7b,$65,$80,$0f,$74,$00,$0d,$11,$14,$16,$10,$20,$8f,$5f,$52,$56,$49,$80,$0f,$75,$00,$0a,$17,$1f,$14,$0c,$0e,$8f,$4b,$5d,$59,$78,$80,$0c,$76,$00,$0e,$0b,$20,$8f,$5c,$50,$65,$49,$80,$10,$77,$00,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$5b,$7c,$72,$73,$80,$10,$78,$00,$0d,$11,$14,$16,$10,$20,$8f,$8a,$4b,$5e,$47,$78,$80,$0d,$79,$00,$08,$1a,$0e,$8f,$8a,$54,$64,$7b,$54,$80,$0b,$7a,$00,$0a,$8f,$8a,$63,$55,$71,$44,$80,$0b,$7b,$00,$13,$0f,$8f,$60,$69,$57,$76,$80,$0a,$7c,$00,$19,$8f,$64,$4e,$53,$71,$80,$0c,$7d,$00,$0d,$17,$22,$8f,$4d,$58,$7d,$6a,$80,$0d,$7e,$00,$06,$22,$03,$08,$8f,$5a,$6b,$5d,$5c,$80,$0e,$7f,$00,$11,$0b,$0b,$18,$8f,$8a,$47,$53,$52,$4b,$80,$0f,$80,$00,$19,$13,$20,$95,$40,$a5,$8f,$43,$5b,$5b,$71,$80,$0a,$81,$00,$0c,$8f,$62,$4d,$7e,$79,$80,$10,$82,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$63,$6e,$7b,$7d,$80,$0b,$83,$00,$13,$0f,$8f,$64,$42,$60,$7c,$80,$0a,$84,$00,$0c,$8f,$4d,$4f,$61,$5c,$80,$0d,$85,$00,$08,$1a,$0e,$8f,$8a,$58,$44,$7e,$7c,$80,$0d,$86,$00,$05,$05,$0e,$1c,$8f,$4c,$46,$44,$56,$80,$0e,$87,$00,$16,$07,$09,$1f,$21,$8f,$5a,$6f,$6a,$43,$80,$0f,$88,$00,$04,$0e,$08,$1f,$14,$8f,$8a,$4d,$57,$50,$5c,$80,$10,$89,$00,$0d,$11,$14,$16,$10,$20,$8f,$8a,$42,$66,$5a,$71,$80,$0c,$8a,$00,$0c,$0a,$8f,$8a,$5f,$4b,$4b,$69,$80,$0c,$8b,$00,$13,$0f,$8f,$8a,$45,$6a,$4e,$4b,$80,$09,$8c,$00,$12,$8f,$77,$4d,$5a,$80,$0f,$8d,$00,$14,$1f,$1a,$03,$1d,$1a,$8f,$57,$50,$7e,$40,$80,$0b,$8e,$00,$0a,$8f,$8a,$44,$67,$47,$5c,$80,$0a,$8f,$00,$0a,$8f,$5c,$76,$57,$6a,$80,$10,$90,$00,$10,$1e,$0c,$95,$41,$a5,$8f,$8a,$5f,$68,$54,$4f,$80,$0f,$91,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$46,$53,$61,$5b,$80,$0d,$92,$00,$0b,$15,$1e,$0d,$8f,$63,$43,$6e,$70,$80,$12,$93,$00,$12,$1e,$0b,$0e,$13,$0c,$95,$41,$a5,$8f,$59,$5a,$48,$66,$80,$0b,$94,$00,$0c,$8f,$8a,$5f,$4c,$75,$52,$80,$0c,$95,$00,$00,$20,$8f,$8a,$66,$44,$7e,$62,$80,$0c,$96,$00,$13,$1a,$14,$8f,$46,$41,$76,$56,$80,$0f,$97,$00,$10,$1e,$0c,$95,$43,$a5,$8f,$5a,$4e,$7e,$5b,$80,$0a,$98,$00,$0a,$8f,$63,$66,$71,$4c,$80,$0b,$99,$00,$0c,$8f,$8a,$58,$7f,$7f,$60,$80,$0a,$9a,$00,$19,$8f,$5c,$5d,$48,$4b,$80,$0a,$9b,$00,$06,$8f,$54,$7b,$4a,$6b,$80,$0a,$9c,$00,$03,$8f,$56,$49,$4f,$40,$80,$0a,$9d,$00,$06,$8f,$58,$74,$65,$5e,$80,$0b,$9e,$00,$02,$8f,$8a,$45,$5c,$5e,$4e,$80,$0a,$9f,$00,$01,$8f,$44,$4c,$4e,$4a,$80,$0d,$a0,$00,$0e,$0b,$20,$8f,$8a,$4c,$75,$62,$76,$80,$0a,$a1,$00,$0c,$8f,$42,$59,$5b,$67,$80,$0f,$a2,$00,$03,$17,$1f,$13,$1c,$08,$8f,$41,$72,$6b,$6b,$80,$0b,$a3,$00,$06,$8f,$8a,$65,$74,$72,$43,$80,$0f,$a4,$00,$0a,$01,$00,$18,$12,$1b,$8f,$59,$60,$70,$4c,$80,$10,$a5,$00,$0a,$17,$1f,$14,$0c,$0e,$8f,$8a,$43,$5e,$68,$76,$80,$12,$a6,$00,$11,$21,$06,$20,$07,$95,$43,$a5,$8f,$8a,$51,$4f,$7a,$6c,$80,$0d,$a7,$00,$11,$0b,$0b,$18,$8f,$56,$4f,$45,$67,$80,$0c,$a8,$00,$08,$1a,$0e,$8f,$5b,$5d,$49,$6f,$80,$0b,$a9,$00,$06,$8f,$8a,$56,$78,$69,$64,$80,$0b,$aa,$00,$06,$8f,$8a,$5e,$74,$79,$76,$80,$10,$ab,$00,$0d,$11,$14,$16,$10,$20,$8f,$8a,$57,$7c,$4a,$72,$80,$0f,$ac,$00,$0a,$01,$00,$18,$12,$1b,$8f,$43,$4e,$7a,$64,$80,$0d,$ad,$00,$05,$05,$0e,$1c,$8f,$5c,$7b,$50,$41,$80,$12,$ae,$00,$02,$10,$08,$17,$0a,$1e,$95,$41,$a5,$8f,$5c,$6b,$7f,$46,$80,$12,$af,$00,$11,$21,$06,$20,$07,$95,$43,$a5,$8f,$8a,$4f,$6e,$53,$45,$80,$12,$b0,$00,$02,$10,$08,$17,$0a,$1e,$95,$46,$a5,$8f,$5a,$65,$49,$49,$80,$0d,$b1,$00,$03,$06,$1a,$8f,$8a,$41,$71,$67,$77,$80,$11,$b2,$00,$19,$0c,$1e,$1d,$95,$40,$a5,$8f,$8a,$4d,$5b,$58,$48,$80,$10,$b3,$00,$10,$1e,$0c,$95,$43,$a5,$8f,$8a,$49,$5c,$6c,$49,$80,$11,$b4,$00,$19,$0c,$1e,$1d,$95,$43,$a5,$8f,$8a,$49,$48,$64,$57,$80,$12,$b5,$00,$12,$1e,$0b,$0e,$13,$0c,$95,$40,$a5,$8f,$65,$64,$73,$7e,$80,$10,$b6,$00,$19,$0c,$1e,$1d,$95,$43,$a5,$8f,$45,$48,$7f,$6e,$80,$0d,$b7,$00,$0b,$15,$1e,$0d,$8f,$47,$61,$48,$75,$80,$0b,$b8,$00,$02,$8f,$8a,$4a,$77,$7e,$5b,$80,$10,$b9,$00,$06,$20,$0a,$13,$0c,$1c,$8f,$8a,$54,$4f,$6c,$6c,$80,$11,$ba,$00,$19,$0c,$1e,$1d,$95,$44,$a5,$8f,$8a,$49,$45,$75,$46,$80,$12,$bb,$00,$12,$1e,$0b,$0e,$13,$0c,$95,$42,$a5,$8f,$62,$6b,$52,$64,$80,$0f,$bc,$00,$10,$1e,$0c,$95,$41,$a5,$8f,$56,$5d,$43,$59,$80,$0c,$bd,$00,$13,$1a,$14,$8f,$65,$63,$4f,$58,$80,$0b,$be,$00,$02,$8f,$8a,$60,$64,$5d,$7d,$80,$0d,$bf,$00,$0b,$17,$10,$15,$8f,$45,$50,$6b,$54,$80,$0f,$c0,$00,$0d,$11,$14,$16,$10,$20,$8f,$41,$74,$61,$6e,$80,$0c,$c1,$00,$00,$20,$8f,$8a,$4b,$6b,$6b,$49,$80,$10,$c2,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$5b,$4e,$78,$75,$80,$10,$c3,$00,$19,$0c,$1e,$1d,$95,$40,$a5,$8f,$5a,$44,$54,$6b,$80,$0e,$c4,$00,$11,$0b,$0b,$18,$8f,$8a,$5b,$4e,$6d,$49,$80,$0b,$c5,$00,$00,$20,$8f,$5c,$5f,$47,$74,$80,$0e,$c6,$00,$04,$0e,$08,$1f,$14,$8f,$5b,$49,$43,$4c,$80,$0a,$c7,$00,$02,$8f,$63,$48,$7b,$7e,$80,$0c,$c8,$00,$0e,$0b,$20,$8f,$57,$43,$55,$6d,$80,$0c,$c9,$00,$0c,$0a,$8f,$8a,$4a,$7f,$57,$7c,$80,$0b,$ca,$00,$03,$8f,$8a,$42,$61,$72,$7e,$80,$0d,$cb,$00,$0e,$0b,$20,$8f,$8a,$43,$79,$47,$5e,$80,$13,$cc,$00,$02,$10,$08,$17,$0a,$1e,$95,$48,$a5,$8f,$8a,$5f,$65,$65,$7c,$80,$0f,$cd,$00,$19,$13,$20,$95,$40,$a5,$8f,$57,$66,$79,$77,$80,$0c,$ce,$00,$13,$0f,$8f,$8a,$65,$6b,$7c,$42,$80,$0b,$cf,$00,$01,$8f,$8a,$46,$58,$72,$54,$80,$0f,$d0,$00,$0a,$17,$1f,$14,$0c,$0e,$8f,$51,$44,$44,$49,$80,$0f,$d1,$00,$06,$20,$0a,$13,$0c,$1c,$8f,$4e,$49,$53,$66,$80,$0b,$d2,$00,$01,$8f,$8a,$58,$4a,$5f,$77,$80,$10,$d3,$00,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$44,$69,$72,$7e,$80,$0b,$d4,$00,$12,$8f,$8a,$64,$7e,$62,$4d,$80,$0a,$d5,$00,$12,$8f,$56,$5a,$5f,$45,$80,$12,$d6,$00,$11,$21,$06,$20,$07,$95,$41,$a5,$8f,$8a,$60,$7f,$65,$69,$80,$10,$d7,$00,$19,$13,$20,$95,$40,$a5,$8f,$8a,$50,$66,$69,$64,$80,$12,$d8,$00,$11,$21,$06,$20,$07,$95,$43,$a5,$8f,$8a,$42,$5c,$5c,$6d,$80,$0a,$d9,$00,$0a,$8f,$54,$63,$5c,$73,$80,$0b,$da,$00,$0c,$0a,$8f,$55,$48,$57,$7e,$80,$0c,$db,$00,$03,$06,$1a,$8f,$47,$66,$59,$46,$80,$0e,$dc,$00,$05,$05,$0e,$1c,$8f,$8a,$44,$6e,$47,$63,$80,$0f,$dd,$00,$14,$1f,$1a,$03,$1d,$1a,$8f,$8a,$7a,$6e,$68,$80,$0b,$de,$00,$01,$8f,$8a,$4b,$5f,$51,$4b,$80,$0d,$df,$00,$13,$1a,$14,$8f,$8a,$4c,$56,$61,$60,$80,$0a,$e0,$00,$03,$8f,$4b,$56,$77,$6a,$80,$0d,$e1,$00,$03,$06,$1a,$8f,$8a,$61,$7d,$59,$49,$80,$10,$e2,$00,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$53,$7f,$4a,$45,$80,$10,$e3,$00,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$5d,$67,$5f,$4f,$80,$10,$e4,$00,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$63,$45,$44,$4e,$80,$0a,$e5,$00,$0a,$8f,$64,$63,$68,$49,$80,$11,$e6,$00,$19,$0c,$1e,$1d,$95,$41,$a5,$8f,$8a,$53,$5e,$68,$7c,$80,$13,$e7,$00,$17,$0d,$06,$0f,$13,$04,$95,$44,$a5,$8f,$8a,$4d,$76,$6a,$42,$80,$11,$e8,$00,$11,$21,$06,$20,$07,$95,$40,$a5,$8f,$5f,$7d,$41,$67,$80,$0e,$e9,$00,$04,$0e,$08,$1f,$14,$8f,$46,$5d,$43,$5d,$80,$0f,$ea,$00,$04,$1d,$95,$42,$a5,$8f,$8a,$4c,$75,$73,$72,$80,$0d,$eb,$00,$08,$1a,$0e,$8f,$8a,$44,$74,$4b,$56,$80,$0b,$ec,$00,$06,$8f,$8a,$49,$66,$4f,$6f,$80,$0d,$ed,$00,$03,$06,$1a,$8f,$8a,$4e,$6e,$58,$6c,$80,$0b,$ee,$00,$12,$8f,$8a,$45,$4e,$6a,$72,$80,$10,$ef,$00,$0d,$11,$14,$16,$10,$20,$8f,$8a,$58,$51,$5f,$4c,$80,$0e,$f0,$00,$04,$0e,$08,$1f,$14,$8f,$58,$7b,$63,$53,$80,$13,$f1,$00,$17,$0d,$06,$0f,$13,$04,$95,$44,$a5,$8f,$8a,$47,$4a,$48,$46,$80,$0d,$f2,$00,$05,$05,$0e,$1c,$8f,$8a,$42,$50,$44,$80,$10,$f3,$00,$10,$1e,$0c,$95,$44,$a5,$8f,$8a,$4e,$46,$75,$5a,$80,$0f,$f4,$00,$06,$20,$0a,$13,$0c,$1c,$8f,$5a,$5a,$43,$40,$80,$10,$f5,$00,$10,$1e,$0c,$95,$43,$a5,$8f,$8a,$54,$65,$55,$5b,$80,$0f,$f6,$00,$0a,$01,$00,$18,$12,$1b,$8f,$54,$79,$65,$45,$80,$0d,$f7,$00,$0b,$15,$1e,$0d,$8f,$5a,$7f,$6b,$68,$80,$0c,$f8,$00,$00,$20,$8f,$8a,$5b,$53,$47,$46,$80,$0d,$f9,$00,$0d,$17,$22,$8f,$8a,$61,$54,$54,$64,$80,$0e,$fa,$00,$11,$0b,$0b,$18,$8f,$8a,$5b,$47,$70,$60,$80,$0b,$fb,$00,$ca,$03,$8f,$4b,$56,$77,$6a,$80,$0b,$fc,$00,$ca,$02,$8f,$63,$48,$7b,$7e,$80,$14,$fd,$00,$ca,$17,$0d,$06,$0f,$13,$04,$95,$40,$a5,$8f,$8a,$49,$50,$42,$7f,$80,$10,$fe,$00,$ca,$17,$0d,$06,$0f,$13,$04,$95,$41,$a5,$8f,$40,$80,$10,$ff,$00,$ca,$17,$0d,$06,$0f,$13,$04,$95,$42,$a5,$8f,$40,$80,$13,$00,$01,$ca,$17,$0d,$06,$0f,$13,$04,$95,$43,$a5,$8f,$48,$6f,$60,$6f,$80,$14,$01,$01,$ca,$17,$0d,$06,$0f,$13,$04,$95,$44,$a5,$8f,$8a,$47,$4a,$48,$46,$80,$08,$02,$01,$be,$3f,$00,$0d,$80,$0e,$03,$01,$ca,$13,$1a,$14,$8f,$8a,$4c,$56,$61,$60,$80,$0b,$04,$01,$ca,$19,$8f,$5c,$5d,$48,$4b,$80,$0d,$05,$01,$ca,$00,$20,$8f,$8a,$5b,$53,$47,$46,$80,$0e,$06,$01,$ca,$05,$05,$0e,$1c,$8f,$8a,$42,$50,$44,$80,$0c,$07,$01,$ca,$04,$1d,$95,$40,$a5,$8f,$40,$80,$0f,$08,$01,$ca,$04,$1d,$95,$41,$a5,$8f,$4a,$4a,$5f,$4a,$80,$10,$09,$01,$ca,$04,$1d,$95,$42,$a5,$8f,$8a,$4c,$75,$73,$72,$80,$0c,$0a,$01,$ca,$04,$1d,$95,$43,$a5,$8f,$40,$80,$08,$0b,$01,$be,$3f,$00,$0d,$80,$0c,$0c,$01,$ca,$01,$8f,$8a,$4b,$5f,$51,$4b,$80,$10,$0d,$01,$ca,$0a,$01,$00,$18,$12,$1b,$8f,$54,$79,$65,$45,$80,$0c,$0e,$01,$ca,$17,$8f,$8a,$46,$7b,$79,$75,$80,$11,$0f,$01,$ca,$19,$13,$20,$95,$40,$a5,$8f,$8a,$50,$66,$69,$64,$80,$0d,$10,$01,$ca,$19,$13,$20,$95,$41,$a5,$8f,$40,$80,$0d,$11,$01,$ca,$19,$13,$20,$95,$42,$a5,$8f,$40,$80,$0d,$12,$01,$ca,$19,$13,$20,$95,$43,$a5,$8f,$40,$80,$0d,$13,$01,$ca,$19,$13,$20,$95,$44,$a5,$8f,$40,$80,$11,$14,$01,$ca,$19,$13,$20,$95,$45,$a5,$8f,$8a,$4a,$71,$75,$68,$80,$11,$15,$01,$ca,$19,$13,$20,$95,$46,$a5,$8f,$8a,$65,$5f,$6a,$65,$80,$0d,$16,$01,$ca,$19,$13,$20,$95,$47,$a5,$8f,$40,$80,$08,$17,$01,$be,$3f,$00,$0d,$80,$0b,$18,$01,$ca,$0a,$8f,$64,$63,$68,$49,$80,$0c,$19,$01,$ca,$12,$8f,$8a,$45,$4e,$6a,$72,$80,$0f,$1a,$01,$ca,$16,$07,$09,$1f,$21,$8f,$5a,$6f,$6a,$43,$80,$0e,$1b,$01,$ca,$08,$1a,$0e,$8f,$8a,$44,$74,$4b,$56,$80,$0c,$1c,$01,$ca,$06,$8f,$8a,$49,$66,$4f,$6f,$80,$11,$1d,$01,$ca,$0b,$1b,$03,$00,$10,$0c,$8f,$8a,$44,$69,$72,$7e,$80,$0b,$1e,$01,$ca,$0c,$8f,$42,$59,$5b,$67,$80,$10,$1f,$01,$ca,$14,$1f,$1a,$03,$1d,$1a,$8f,$8a,$7a,$6e,$68,$80,$11,$20,$01,$ca,$0d,$11,$14,$16,$10,$20,$8f,$8a,$58,$51,$5f,$4c,$80,$13,$21,$01,$ca,$12,$1e,$0b,$0e,$13,$0c,$95,$40,$a5,$8f,$65,$64,$73,$7e,$80,$13,$22,$01,$ca,$12,$1e,$0b,$0e,$13,$0c,$95,$41,$a5,$8f,$59,$5a,$48,$66,$80,$13,$23,$01,$ca,$12,$1e,$0b,$0e,$13,$0c,$95,$42,$a5,$8f,$62,$6b,$52,$64,$80,$08,$24,$01,$be,$3f,$00,$0d,$80,$12,$25,$01,$ca,$11,$21,$06,$20,$07,$95,$40,$a5,$8f,$5f,$7d,$41,$67,$80,$13,$26,$01,$ca,$11,$21,$06,$20,$07,$95,$41,$a5,$8f,$8a,$60,$7f,$65,$69,$80,$13,$27,$01,$ca,$11,$21,$06,$20,$07,$95,$42,$a5,$8f,$8a,$59,$6e,$71,$44,$80,$13,$28,$01,$ca,$11,$21,$06,$20,$07,$95,$43,$a5,$8f,$8a,$42,$5c,$5c,$6d,$80,$08,$29,$01,$be,$3f,$00,$0d,$80,$0e,$2a,$01,$ca,$0b,$15,$1e,$0d,$8f,$5a,$7f,$6b,$68,$80,$0e,$2b,$01,$ca,$0d,$17,$22,$8f,$8a,$61,$54,$54,$64,$80,$0e,$2c,$01,$ca,$0c,$1a,$0c,$8f,$8a,$4c,$7a,$49,$6c,$80,$0e,$2d,$01,$ca,$03,$06,$1a,$8f,$8a,$4e,$6e,$58,$6c,$80,$0d,$2e,$01,$ca,$13,$0f,$8f,$8a,$65,$6b,$7c,$42,$80,$14,$2f,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$40,$a5,$8f,$8a,$44,$50,$60,$56,$80,$13,$30,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$41,$a5,$8f,$5c,$6b,$7f,$46,$80,$10,$31,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$42,$a5,$8f,$40,$80,$10,$32,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$43,$a5,$8f,$40,$80,$10,$33,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$44,$a5,$8f,$40,$80,$10,$34,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$45,$a5,$8f,$40,$80,$13,$35,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$46,$a5,$8f,$5a,$65,$49,$49,$80,$10,$36,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$47,$a5,$8f,$40,$80,$14,$37,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$48,$a5,$8f,$8a,$5f,$65,$65,$7c,$80,$10,$38,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$49,$a5,$8f,$40,$80,$10,$39,$01,$ca,$02,$10,$08,$17,$0a,$1e,$95,$4a,$a5,$8f,$40,$80,$08,$3a,$01,$be,$3f,$00,$0d,$80,$0e,$3b,$01,$ca,$06,$22,$03,$08,$8f,$5a,$6b,$5d,$5c,$80,$10,$3c,$01,$ca,$06,$20,$0a,$13,$0c,$1c,$8f,$5a,$5a,$43,$40,$80,$10,$3d,$01,$ca,$0a,$17,$1f,$14,$0c,$0e,$8f,$51,$44,$44,$49,$80,$0e,$3e,$01,$ca,$0e,$0b,$20,$8f,$8a,$43,$79,$47,$5e,$80,$0e,$3f,$01,$ca,$0b,$17,$10,$15,$8f,$45,$50,$6b,$54,$80,$0d,$40,$01,$ca,$10,$1e,$0c,$95,$40,$a5,$8f,$40,$80,$10,$41,$01,$ca,$10,$1e,$0c,$95,$41,$a5,$8f,$56,$5d,$43,$59,$80,$10,$42,$01,$ca,$10,$1e,$0c,$95,$42,$a5,$8f,$54,$45,$49,$75,$80,$11,$43,$01,$ca,$10,$1e,$0c,$95,$43,$a5,$8f,$8a,$54,$65,$55,$5b,$80,$11,$44,$01,$ca,$10,$1e,$0c,$95,$44,$a5,$8f,$8a,$4e,$46,$75,$5a,$80,$08,$45,$01,$be,$3f,$00,$0d,$80,$0f,$46,$01,$ca,$04,$0e,$08,$1f,$14,$8f,$58,$7b,$63,$53,$80,$0c,$47,$01,$ca,$0c,$0a,$8f,$55,$48,$57,$7e,$80,$11,$48,$01,$ca,$19,$0c,$1e,$1d,$95,$40,$a5,$8f,$5a,$44,$54,$6b,$80,$12,$49,$01,$ca,$19,$0c,$1e,$1d,$95,$41,$a5,$8f,$8a,$53,$5e,$68,$7c,$80,$11,$4a,$01,$ca,$19,$0c,$1e,$1d,$95,$42,$a5,$8f,$65,$7e,$41,$5b,$80,$11,$4b,$01,$ca,$19,$0c,$1e,$1d,$95,$43,$a5,$8f,$45,$48,$7f,$6e,$80,$12,$4c,$01,$ca,$19,$0c,$1e,$1d,$95,$44,$a5,$8f,$8a,$49,$45,$75,$46,$80,$0e,$4d,$01,$ca,$19,$0c,$1e,$1d,$95,$45,$a5,$8f,$40,$80,$08,$4e,$01,$be,$3f,$00,$0d,$80,$11,$4f,$01,$ca,$03,$17,$1f,$13,$1c,$08,$8f,$8a,$63,$45,$44,$4e,$80,$0f,$50,$01,$ca,$11,$0b,$0b,$18,$8f,$8a,$5b,$47,$70,$60,$80,$15,$51,$01,$c1,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$31,$38,$32,$39,$37,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:6263 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:7263 -  -  -  -  EndTestInstance:
   18 00:7263 -  -  -  -  		
   19 00:7263 -  -  -  -  ; ***************************************************************************************
   20 00:7263 -  -  -  -  ;
   21 00:7263 -  -  -  -  ;									Changes and Updates
   22 00:7263 -  -  -  -  ;
   23 00:7263 -  -  -  -  ; ***************************************************************************************
   24 00:7263 -  -  -  -  ;
   25 00:7263 -  -  -  -  ;		Date			Notes
   26 00:7263 -  -  -  -  ;		==== 			=====
   27 00:7263 -  -  -  -  ;
   28 00:7263 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:7263 -  -  -  -  FinalAddress:
