    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_EOR                             	$0092 ; eor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 38 49 -  		call 	SYSInitialise
   44 00:4006 11 00 4C -  		ld 		de,TestInstance
   45 00:4009 21 1C 6F -  		ld 		hl,EndTestInstance
   46 00:400C CD 9E 44 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 4D 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 EF 40 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 40 49 -  		call 	SYSPrintChar
   56 00:401C CD 3E 49 -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 76 
              41 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 76 
              41 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  
   59 00:4045 -  -  -  -  ; ***************************************************************************************
   60 00:4045 -  -  -  -  ;
   61 00:4045 -  -  -  -  ;										Run variables
   62 00:4045 -  -  -  -  ;
   63 00:4045 -  -  -  -  ; ***************************************************************************************
   64 00:4045 -  -  -  -  
   65 00:4045 -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 00:4045 00 00 00 00 		.dw 	0,0
   67 00:4049 -  -  -  -  		
   68 00:4049 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  
   71 00:404D -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 00:404D 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 00:4053 -  -  -  -  
   74 00:4053 -  -  -  -  AConvert: 									; used for address conversions.
   75 00:4053 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4059 -  -  -  -  		
   77 00:4059 -  -  -  -  RandomSeed: 								; random number seeds.
   78 00:4059 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 00:4069 -  -  -  -  
   80 00:4069 -  -  -  -  s; ***************************************************************************************
   81 00:4069 -  -  -  -  ;
   82 00:4069 -  -  -  -  ;										  Buffers
   83 00:4069 -  -  -  -  ;
   84 00:4069 -  -  -  -  ; ***************************************************************************************
   85 00:4069 -  -  -  -  
   86 00:4069 -  -  -  -  ConvertBuffer:
   87 00:4069 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 00:40A9 -  -  -  -  
   89 00:40A9 -  -  -  -  ; ***************************************************************************************
   90 00:40A9 -  -  -  -  ;
   91 00:40A9 -  -  -  -  ;									Changes and Updates
   92 00:40A9 -  -  -  -  ;
   93 00:40A9 -  -  -  -  ; ***************************************************************************************
   94 00:40A9 -  -  -  -  ;
   95 00:40A9 -  -  -  -  ;		Date			Notes
   96 00:40A9 -  -  -  -  ;		==== 			=====
   97 00:40A9 -  -  -  -  ;
   98 00:40A9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40A9 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40A9 -  -  -  -  ; ***************************************************************************************
    2 00:40A9 -  -  -  -  ; ***************************************************************************************
    3 00:40A9 -  -  -  -  ;
    4 00:40A9 -  -  -  -  ;		Name : 		assert.asm
    5 00:40A9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40A9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40A9 -  -  -  -  ;		Reviewed :	No
    8 00:40A9 -  -  -  -  ;		Purpose :	Assert command
    9 00:40A9 -  -  -  -  ;
   10 00:40A9 -  -  -  -  ; ***************************************************************************************
   11 00:40A9 -  -  -  -  ; ***************************************************************************************
   12 00:40A9 -  -  -  -  
   13 00:40A9 -  -  -  -  ; ***************************************************************************************
   14 00:40A9 -  -  -  -  ;
   15 00:40A9 -  -  -  -  ;									ASSERT command
   16 00:40A9 -  -  -  -  ;
   17 00:40A9 -  -  -  -  ; ***************************************************************************************
   18 00:40A9 -  -  -  -  
   19 00:40A9 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40A9 CD 42 43 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40AC 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40B2 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40B3 3E 01 C3 76 
              41 -  -  -  		ERR_ASSERT
   24 00:40B8 -  -  -  -  
   25 00:40B8 -  -  -  -  ; ***************************************************************************************
   26 00:40B8 -  -  -  -  ;
   27 00:40B8 -  -  -  -  ;									Changes and Updates
   28 00:40B8 -  -  -  -  ;
   29 00:40B8 -  -  -  -  ; ***************************************************************************************
   30 00:40B8 -  -  -  -  ;
   31 00:40B8 -  -  -  -  ;		Date			Notes
   32 00:40B8 -  -  -  -  ;		==== 			=====
   33 00:40B8 -  -  -  -  ;
   34 00:40B8 -  -  -  -  ; ***************************************************************************************
   35 00:40B8 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40B8 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40B8 -  -  -  -  ; ***************************************************************************************
    2 00:40B8 -  -  -  -  ; ***************************************************************************************
    3 00:40B8 -  -  -  -  ;
    4 00:40B8 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40B8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40B8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40B8 -  -  -  -  ;		Reviewed :	No
    8 00:40B8 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40B8 -  -  -  -  ;
   10 00:40B8 -  -  -  -  ; ***************************************************************************************
   11 00:40B8 -  -  -  -  ; ***************************************************************************************
   12 00:40B8 -  -  -  -  
   13 00:40B8 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40B8 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40B8 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40B8 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40B8 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40B8 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40B8 C3 D3 41 -  		jp 		SyntaxError
   20 00:40BB -  -  -  -  
   21 00:40BB -  -  -  -  ; ***************************************************************************************
   22 00:40BB -  -  -  -  ;
   23 00:40BB -  -  -  -  ;									Changes and Updates
   24 00:40BB -  -  -  -  ;
   25 00:40BB -  -  -  -  ; ***************************************************************************************
   26 00:40BB -  -  -  -  ;
   27 00:40BB -  -  -  -  ;		Date			Notes
   28 00:40BB -  -  -  -  ;		==== 			=====
   29 00:40BB -  -  -  -  ;
   30 00:40BB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40BB -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40BB -  -  -  -  ; ***************************************************************************************
    2 00:40BB -  -  -  -  ; ***************************************************************************************
    3 00:40BB -  -  -  -  ;
    4 00:40BB -  -  -  -  ;		Name : 		colon.asm
    5 00:40BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BB -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40BB -  -  -  -  ;		Reviewed :	No
    8 00:40BB -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40BB -  -  -  -  ;
   10 00:40BB -  -  -  -  ; ***************************************************************************************
   11 00:40BB -  -  -  -  ; ***************************************************************************************
   12 00:40BB -  -  -  -  
   13 00:40BB -  -  -  -  ; ***************************************************************************************
   14 00:40BB -  -  -  -  ;
   15 00:40BB -  -  -  -  ;								Colon command, this is ignored.
   16 00:40BB -  -  -  -  ;
   17 00:40BB -  -  -  -  ; ***************************************************************************************
   18 00:40BB -  -  -  -  
   19 00:40BB -  -  -  -  Command_Colon: 	;; [:]
   20 00:40BB C9 -  -  -  		ret
   21 00:40BC -  -  -  -  
   22 00:40BC -  -  -  -  ; ***************************************************************************************
   23 00:40BC -  -  -  -  ;
   24 00:40BC -  -  -  -  ;									Changes and Updates
   25 00:40BC -  -  -  -  ;
   26 00:40BC -  -  -  -  ; ***************************************************************************************
   27 00:40BC -  -  -  -  ;
   28 00:40BC -  -  -  -  ;		Date			Notes
   29 00:40BC -  -  -  -  ;		==== 			=====
   30 00:40BC -  -  -  -  ;
   31 00:40BC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40BC -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40BC -  -  -  -  ; ***************************************************************************************
    2 00:40BC -  -  -  -  ; ***************************************************************************************
    3 00:40BC -  -  -  -  ;
    4 00:40BC -  -  -  -  ;		Name : 		end.asm
    5 00:40BC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40BC -  -  -  -  ;		Reviewed :	No
    8 00:40BC -  -  -  -  ;		Purpose :	End command
    9 00:40BC -  -  -  -  ;
   10 00:40BC -  -  -  -  ; ***************************************************************************************
   11 00:40BC -  -  -  -  ; ***************************************************************************************
   12 00:40BC -  -  -  -  
   13 00:40BC -  -  -  -  ; ***************************************************************************************
   14 00:40BC -  -  -  -  ;
   15 00:40BC -  -  -  -  ;										END command
   16 00:40BC -  -  -  -  ;
   17 00:40BC -  -  -  -  ; ***************************************************************************************
   18 00:40BC -  -  -  -  
   19 00:40BC -  -  -  -  Command_END: 	;; [end]
   20 00:40BC 3E 00 C3 76 
              41 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40C1 -  -  -  -  
   22 00:40C1 -  -  -  -  ; ***************************************************************************************
   23 00:40C1 -  -  -  -  ;
   24 00:40C1 -  -  -  -  ;									Changes and Updates
   25 00:40C1 -  -  -  -  ;
   26 00:40C1 -  -  -  -  ; ***************************************************************************************
   27 00:40C1 -  -  -  -  ;
   28 00:40C1 -  -  -  -  ;		Date			Notes
   29 00:40C1 -  -  -  -  ;		==== 			=====
   30 00:40C1 -  -  -  -  ;
   31 00:40C1 -  -  -  -  ; ***************************************************************************************
   32 00:40C1 -  -  -  -  		
Listing for file "_build.asm"
   17 00:40C1 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40C1 -  -  -  -  ; ***************************************************************************************
    2 00:40C1 -  -  -  -  ; ***************************************************************************************
    3 00:40C1 -  -  -  -  ;
    4 00:40C1 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40C1 -  -  -  -  ;		Reviewed :	None
    8 00:40C1 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40C1 -  -  -  -  ;
   10 00:40C1 -  -  -  -  ; ***************************************************************************************
   11 00:40C1 -  -  -  -  ; ***************************************************************************************
   12 00:40C1 -  -  -  -  
   13 00:40C1 -  -  -  -  ; ***************************************************************************************
   14 00:40C1 -  -  -  -  ;
   15 00:40C1 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40C1 -  -  -  -  ;
   17 00:40C1 -  -  -  -  ; ***************************************************************************************
   18 00:40C1 -  -  -  -  
   19 00:40C1 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40C1 DD 2A 45 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40C5 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40C8 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40CB DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40CD -  -  -  -  		;
   25 00:40CD ED 7B 49 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40D1 C3 FA 40 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40D4 -  -  -  -  
   28 00:40D4 -  -  -  -  ; ***************************************************************************************
   29 00:40D4 -  -  -  -  ;
   30 00:40D4 -  -  -  -  ;									Changes and Updates
   31 00:40D4 -  -  -  -  ;
   32 00:40D4 -  -  -  -  ; ***************************************************************************************
   33 00:40D4 -  -  -  -  ;
   34 00:40D4 -  -  -  -  ;		Date			Notes
   35 00:40D4 -  -  -  -  ;		==== 			=====
   36 00:40D4 -  -  -  -  ;
   37 00:40D4 -  -  -  -  ; ***************************************************************************************
   38 00:40D4 -  -  -  -  		
Listing for file "_build.asm"
   18 00:40D4 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:40D4 -  -  -  -  ; ***************************************************************************************
    2 00:40D4 -  -  -  -  ; ***************************************************************************************
    3 00:40D4 -  -  -  -  ;
    4 00:40D4 -  -  -  -  ;		Name : 		rem.asm
    5 00:40D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D4 -  -  -  -  ;		Reviewed :	No
    8 00:40D4 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:40D4 -  -  -  -  ;
   10 00:40D4 -  -  -  -  ; ***************************************************************************************
   11 00:40D4 -  -  -  -  ; ***************************************************************************************
   12 00:40D4 -  -  -  -  
   13 00:40D4 -  -  -  -  ; ***************************************************************************************
   14 00:40D4 -  -  -  -  ;
   15 00:40D4 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:40D4 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:40D4 -  -  -  -  ;
   18 00:40D4 -  -  -  -  ; ***************************************************************************************
   19 00:40D4 -  -  -  -  
   20 00:40D4 -  -  -  -  Command_REM: 	;; [rem]
   21 00:40D4 -  -  -  -  Command_REM2: 	;; [']
   22 00:40D4 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:40D7 DD 23 -  -  		inc 	ix
   24 00:40D9 FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:40DB C8 -  -  -  		ret 	z
   26 00:40DC FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:40DE C8 -  -  -  		ret 	z
   28 00:40DF FE 3F -  -  		cp 		STRING_MARKER
   29 00:40E1 C2 D3 41 -  		jp 		nz,SyntaxError
   30 00:40E4 -  -  -  -  		;		
   31 00:40E4 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:40E7 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:40EA 13 -  -  -  		inc 	de 
   34 00:40EB 13 -  -  -  		inc 	de
   35 00:40EC DD 19 -  -  		add 	ix,de 						; skip string
   36 00:40EE C9 -  -  -  		ret
   37 00:40EF -  -  -  -  
   38 00:40EF -  -  -  -  ; ***************************************************************************************
   39 00:40EF -  -  -  -  ;
   40 00:40EF -  -  -  -  ;									Changes and Updates
   41 00:40EF -  -  -  -  ;
   42 00:40EF -  -  -  -  ; ***************************************************************************************
   43 00:40EF -  -  -  -  ;
   44 00:40EF -  -  -  -  ;		Date			Notes
   45 00:40EF -  -  -  -  ;		==== 			=====
   46 00:40EF -  -  -  -  ;
   47 00:40EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:40EF -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:40EF -  -  -  -  ; ***************************************************************************************
    2 00:40EF -  -  -  -  ; ***************************************************************************************
    3 00:40EF -  -  -  -  ;
    4 00:40EF -  -  -  -  ;		Name : 		run.asm
    5 00:40EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EF -  -  -  -  ;		Reviewed :	No
    8 00:40EF -  -  -  -  ;		Purpose :	Run command
    9 00:40EF -  -  -  -  ;
   10 00:40EF -  -  -  -  ; ***************************************************************************************
   11 00:40EF -  -  -  -  ; ***************************************************************************************
   12 00:40EF -  -  -  -  
   13 00:40EF -  -  -  -  ; ***************************************************************************************
   14 00:40EF -  -  -  -  ;
   15 00:40EF -  -  -  -  ;										RUN command
   16 00:40EF -  -  -  -  ;
   17 00:40EF -  -  -  -  ; ***************************************************************************************
   18 00:40EF -  -  -  -  
   19 00:40EF -  -  -  -  Command_RUN: 	;; [run]
   20 00:40EF CD 74 44 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:40F2 -  -  -  -  
   22 00:40F2 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:40F6 ED 73 49 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:40FA -  -  -  -  		;
   25 00:40FA -  -  -  -  		; 		New line at IX.
   26 00:40FA -  -  -  -  		;
   27 00:40FA -  -  -  -  CRNewLine:
   28 00:40FA DD 22 45 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:40FE -  -  -  -  		;
   30 00:40FE DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:4101 B7 -  -  -  		or 		a
   32 00:4102 CA BC 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:4105 -  -  -  -  		;
   34 00:4105 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:4107 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:4109 DD 23 -  -  		inc 	ix
   37 00:410B -  -  -  -  		;
   38 00:410B -  -  -  -  		; 		New command at IX
   39 00:410B -  -  -  -  		;
   40 00:410B -  -  -  -  _CRNewCommand:	
   41 00:410B DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:410E B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:410F F2 3F 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:4112 -  -  -  -  		;
   45 00:4112 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:4114 30 05 -  -  		jr  	nc,_CRDoCommand
   47 00:4116 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:4118 D2 34 41 -  		jp 		nc,_CRAlternateLets
   49 00:411B -  -  -  -  		;
   50 00:411B -  -  -  -  _CRDoCommand:		
   51 00:411B E6 7F 21 00 
              00 6F 29 11 
              D6 46 19 5E 
              23 56 ED 53 
              4E 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:412D DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:412F CD 4D 40 -  		call 	JumpCode 					; call the routine.
   54 00:4132 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:4134 -  -  -  -  		;
   56 00:4134 -  -  -  -  		; 		Do CALL (HL)
   57 00:4134 -  -  -  -  		;
   58 00:4134 -  -  -  -  		;
   59 00:4134 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:4134 -  -  -  -  		;		
   61 00:4134 -  -  -  -  _CRAlternateLets:		
   62 00:4134 FE 83 -  -  		cp 		KWD_PLING
   63 00:4136 28 0C -  -  		jr 		z,_CRAssignmentLet
   64 00:4138 FE 84 -  -  		cp 		KWD_QMARK
   65 00:413A 28 08 -  -  		jr 		z,_CRAssignmentLet
   66 00:413C C3 D3 41 -  		jp 		SyntaxError
   67 00:413F -  -  -  -  		;
   68 00:413F -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:413F -  -  -  -  		;
   70 00:413F -  -  -  -  _CRAssignmentHandler:		
   71 00:413F FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:4141 D2 D3 41 -  		jp 		nc,SyntaxError
   73 00:4144 -  -  -  -  _CRAssignmentLet:		
   74 00:4144 3E 0C C3 76 
              41 -  -  -  		ERR_TODO
   75 00:4149 -  -  -  -  		;call	Command_LET
   76 00:4149 C3 0B 41 -  		jp 		_CRNewCommand
   77 00:414C -  -  -  -  
   78 00:414C -  -  -  -  ; ***************************************************************************************
   79 00:414C -  -  -  -  ;
   80 00:414C -  -  -  -  ;									Changes and Updates
   81 00:414C -  -  -  -  ;
   82 00:414C -  -  -  -  ; ***************************************************************************************
   83 00:414C -  -  -  -  ;
   84 00:414C -  -  -  -  ;		Date			Notes
   85 00:414C -  -  -  -  ;		==== 			=====
   86 00:414C -  -  -  -  ;
   87 00:414C -  -  -  -  ; ***************************************************************************************
   88 00:414C -  -  -  -  		
Listing for file "_build.asm"
   20 00:414C -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:414C -  -  -  -  ; ***************************************************************************************
    2 00:414C -  -  -  -  ; ***************************************************************************************
    3 00:414C -  -  -  -  ;
    4 00:414C -  -  -  -  ;		Name : 		stop.asm
    5 00:414C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:414C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:414C -  -  -  -  ;		Reviewed :	No
    8 00:414C -  -  -  -  ;		Purpose :	Stop command
    9 00:414C -  -  -  -  ;
   10 00:414C -  -  -  -  ; ***************************************************************************************
   11 00:414C -  -  -  -  ; ***************************************************************************************
   12 00:414C -  -  -  -  
   13 00:414C -  -  -  -  ; ***************************************************************************************
   14 00:414C -  -  -  -  ;
   15 00:414C -  -  -  -  ;										STOP command
   16 00:414C -  -  -  -  ;
   17 00:414C -  -  -  -  ; ***************************************************************************************
   18 00:414C -  -  -  -  
   19 00:414C -  -  -  -  Command_STOP: 	;; [stop]
   20 00:414C 3E 0A C3 76 
              41 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4151 -  -  -  -  
   22 00:4151 -  -  -  -  ; ***************************************************************************************
   23 00:4151 -  -  -  -  ;
   24 00:4151 -  -  -  -  ;									Changes and Updates
   25 00:4151 -  -  -  -  ;
   26 00:4151 -  -  -  -  ; ***************************************************************************************
   27 00:4151 -  -  -  -  ;
   28 00:4151 -  -  -  -  ;		Date			Notes
   29 00:4151 -  -  -  -  ;		==== 			=====
   30 00:4151 -  -  -  -  ;
   31 00:4151 -  -  -  -  ; ***************************************************************************************
   32 00:4151 -  -  -  -  		
Listing for file "_build.asm"
   21 00:4151 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4151 -  -  -  -  ; ***************************************************************************************
    2 00:4151 -  -  -  -  ; ***************************************************************************************
    3 00:4151 -  -  -  -  ;
    4 00:4151 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4151 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4151 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4151 -  -  -  -  ;		Reviewed :	No
    8 00:4151 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4151 -  -  -  -  ;
   10 00:4151 -  -  -  -  ; ***************************************************************************************
   11 00:4151 -  -  -  -  ; ***************************************************************************************
   12 00:4151 -  -  -  -  
   13 00:4151 -  -  -  -  ; ***************************************************************************************
   14 00:4151 -  -  -  -  ;
   15 00:4151 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4151 -  -  -  -  ;
   17 00:4151 -  -  -  -  ; ***************************************************************************************
   18 00:4151 -  -  -  -  
   19 00:4151 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4151             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4151             		inc 	ix
   22 00:4151             		cp 		ch 							; exit if matches
   23 00:4151             		ret 	z
   24 00:4151             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4151             		jp 		ErrorHandler
   26 00:4151             #endmacro
   27 00:4151 -  -  -  -  
   28 00:4151 -  -  -  -  CheckRightBracket:
   29 00:4151 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 76 
              41 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:415E -  -  -  -  
   31 00:415E -  -  -  -  CheckComma:
   32 00:415E DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 76 
              41 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 00:416B -  -  -  -  
   34 00:416B -  -  -  -  ; ***************************************************************************************
   35 00:416B -  -  -  -  ;
   36 00:416B -  -  -  -  ; 							Check A, gives Syntax Error
   37 00:416B -  -  -  -  ;
   38 00:416B -  -  -  -  ; ***************************************************************************************
   39 00:416B -  -  -  -  
   40 00:416B -  -  -  -  CheckNextA:
   41 00:416B DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 00:416E DD 23 -  -  		inc 	ix 							; skip character
   43 00:4170 C8 -  -  -  		ret 	z 							; yes, okay
   44 00:4171 3E 0B C3 76 
              41 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   45 00:4176 -  -  -  -  		
   46 00:4176 -  -  -  -  ; ***************************************************************************************
   47 00:4176 -  -  -  -  ;
   48 00:4176 -  -  -  -  ;									Changes and Updates
   49 00:4176 -  -  -  -  ;
   50 00:4176 -  -  -  -  ; ***************************************************************************************
   51 00:4176 -  -  -  -  ;
   52 00:4176 -  -  -  -  ;		Date			Notes
   53 00:4176 -  -  -  -  ;		==== 			=====
   54 00:4176 -  -  -  -  ;
   55 00:4176 -  -  -  -  ; ***************************************************************************************
   56 00:4176 -  -  -  -  		
Listing for file "_build.asm"
   22 00:4176 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4176 -  -  -  -  ; ***************************************************************************************
    2 00:4176 -  -  -  -  ; ***************************************************************************************
    3 00:4176 -  -  -  -  ;
    4 00:4176 -  -  -  -  ;		Name : 		errors.asm
    5 00:4176 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4176 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4176 -  -  -  -  ;		Reviewed :	No
    8 00:4176 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4176 -  -  -  -  ;
   10 00:4176 -  -  -  -  ; ***************************************************************************************
   11 00:4176 -  -  -  -  ; ***************************************************************************************
   12 00:4176 -  -  -  -  
   13 00:4176 -  -  -  -  ; ***************************************************************************************
   14 00:4176 -  -  -  -  ;
   15 00:4176 -  -  -  -  ;								Error handler, message A 
   16 00:4176 -  -  -  -  ;
   17 00:4176 -  -  -  -  ; ***************************************************************************************
   18 00:4176 -  -  -  -  
   19 00:4176 -  -  -  -  ErrorHandler:
   20 00:4176 F5 -  -  -  		push 	af 						; save error ID
   21 00:4177 -  -  -  -  
   22 00:4177 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:417A 6F -  -  -  		ld 		l,a
   24 00:417B 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:417C 29 -  -  -  		add 	hl,hl 		
   26 00:417D 11 D0 45 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4180 19 -  -  -  		add 	hl,de
   28 00:4181 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4185 CD B7 44 -  		call 	PrintStringAtHL
   30 00:4188 -  -  -  -  		;
   31 00:4188 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4189 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:418A 28 28 -  -  		jr 		z,_EHExit
   34 00:418C -  -  -  -  		;
   35 00:418C DD 2A 45 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:4190 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4193 B7 -  -  -  		or 		a
   38 00:4194 28 1E -  -  		jr 		z,_EHExit
   39 00:4196 -  -  -  -  
   40 00:4196 21 BA 41 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4199 CD B7 44 -  		call 	PrintStringAtHL 
   42 00:419C -  -  -  -  		
   43 00:419C D9 -  -  -  		exx								; HL'HL = line number
   44 00:419D 21 00 00 -  		ld 		hl,$0000 		
   45 00:41A0 D9 -  -  -  		exx 
   46 00:41A1 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:41A4 DD 66 02 -  		ld 		h,(ix+2)
   48 00:41A7 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:41A9 01 69 40 -  		ld 		bc,ConvertBuffer
   50 00:41AC CD F3 48 -  		call 	Int32ToString
   51 00:41AF C5 -  -  -  		push 	bc
   52 00:41B0 E1 -  -  -  		pop 	hl
   53 00:41B1 CD B7 44 -  		call 	PrintStringAtHL			; print error line number.
   54 00:41B4 -  -  -  -  _EHExit:		
   55 00:41B4 CD 5C 49 -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:41B7 C3 17 40 -  		jp 		WarmStart
   57 00:41BA -  -  -  -  
   58 00:41BA -  -  -  -  _EHAtText:
   59 00:41BA 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:41C4 -  -  -  -  
   61 00:41C4 -  -  -  -  NotImplemented:
   62 00:41C4 3E 04 C3 76 
              41 -  -  -  		ERR_DISABLED
   63 00:41C9 -  -  -  -  TypeMismatch:
   64 00:41C9 3E 02 C3 76 
              41 -  -  -  		ERR_BADTYPE
   65 00:41CE -  -  -  -  BadValue:
   66 00:41CE 3E 03 C3 76 
              41 -  -  -  		ERR_BADVALUE
   67 00:41D3 -  -  -  -  SyntaxError:
   68 00:41D3 3E 0B C3 76 
              41 -  -  -  		ERR_SYNTAX
   69 00:41D8 -  -  -  -  						
   70 00:41D8 -  -  -  -  ; ***************************************************************************************
   71 00:41D8 -  -  -  -  ;
   72 00:41D8 -  -  -  -  ;									Changes and Updates
   73 00:41D8 -  -  -  -  ;
   74 00:41D8 -  -  -  -  ; ***************************************************************************************
   75 00:41D8 -  -  -  -  ;
   76 00:41D8 -  -  -  -  ;		Date			Notes
   77 00:41D8 -  -  -  -  ;		==== 			=====
   78 00:41D8 -  -  -  -  ;
   79 00:41D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:41D8 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:41D8 -  -  -  -  ; ***************************************************************************************
    2 00:41D8 -  -  -  -  ; ***************************************************************************************
    3 00:41D8 -  -  -  -  ;
    4 00:41D8 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:41D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41D8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41D8 -  -  -  -  ;		Reviewed :	No
    8 00:41D8 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:41D8 -  -  -  -  ;
   10 00:41D8 -  -  -  -  ; ***************************************************************************************
   11 00:41D8 -  -  -  -  ; ***************************************************************************************
   12 00:41D8 -  -  -  -  
   13 00:41D8 -  -  -  -  ; ***************************************************************************************
   14 00:41D8 -  -  -  -  ;
   15 00:41D8 -  -  -  -  ; 									Addition
   16 00:41D8 -  -  -  -  ;
   17 00:41D8 -  -  -  -  ; ***************************************************************************************
   18 00:41D8 -  -  -  -  
   19 00:41D8 -  -  -  -  ALUAdd: 		;; [+]
   20 00:41D8 CD CA 42 78 
              B1 C2 C9 41 
              C3 80 48 -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:41E3 -  -  -  -  
   22 00:41E3 -  -  -  -  ; ***************************************************************************************
   23 00:41E3 -  -  -  -  ;
   24 00:41E3 -  -  -  -  ; 									Subtraction
   25 00:41E3 -  -  -  -  ;
   26 00:41E3 -  -  -  -  ; ***************************************************************************************
   27 00:41E3 -  -  -  -  
   28 00:41E3 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:41E3 CD CA 42 78 
              B1 C2 C9 41 
              C3 86 48 -  		IntegerDispatch(Int32Subtract)
   30 00:41EE -  -  -  -  
   31 00:41EE -  -  -  -  ; ***************************************************************************************
   32 00:41EE -  -  -  -  ;
   33 00:41EE -  -  -  -  ; 									  Multiply
   34 00:41EE -  -  -  -  ;
   35 00:41EE -  -  -  -  ; ***************************************************************************************
   36 00:41EE -  -  -  -  
   37 00:41EE -  -  -  -  ALUMultiply: 	;; [*]
   38 00:41EE CD CA 42 78 
              B1 C2 C9 41 
              C3 4A 48 -  		IntegerDispatch(Int32Multiply)
   39 00:41F9 -  -  -  -  
   40 00:41F9 -  -  -  -  ; ***************************************************************************************
   41 00:41F9 -  -  -  -  ;
   42 00:41F9 -  -  -  -  ; 									  Divide
   43 00:41F9 -  -  -  -  ;
   44 00:41F9 -  -  -  -  ; ***************************************************************************************
   45 00:41F9 -  -  -  -  
   46 00:41F9 -  -  -  -  ALUDivide: 	;; [/]
   47 00:41F9 CD CA 42 78 
              B1 C2 C9 41 
              C3 5C 47 -  		IntegerDispatch(Int32SDivide)
   48 00:4204 -  -  -  -  
   49 00:4204 -  -  -  -  ; ***************************************************************************************
   50 00:4204 -  -  -  -  ;
   51 00:4204 -  -  -  -  ; 									  Modulus
   52 00:4204 -  -  -  -  ;
   53 00:4204 -  -  -  -  ; ***************************************************************************************
   54 00:4204 -  -  -  -  
   55 00:4204 -  -  -  -  ALUModulus: 	;; [mod]
   56 00:4204 CD CA 42 78 
              B1 C2 C9 41 
              C3 5F 47 -  		IntegerDispatch(Int32Modulus)
   57 00:420F -  -  -  -  
   58 00:420F -  -  -  -  ; ***************************************************************************************
   59 00:420F -  -  -  -  ;
   60 00:420F -  -  -  -  ; 									  Logical
   61 00:420F -  -  -  -  ;
   62 00:420F -  -  -  -  ; ***************************************************************************************
   63 00:420F -  -  -  -  
   64 00:420F -  -  -  -  ALUAnd: 		;; [and]
   65 00:420F CD CA 42 78 
              B1 C2 C9 41 
              C3 8E 48 -  		IntegerDispatch(Int32And)
   66 00:421A -  -  -  -  
   67 00:421A -  -  -  -  ALUOr: 			;; [or]
   68 00:421A CD CA 42 78 
              B1 C2 C9 41 
              C3 9A 48 -  		IntegerDispatch(Int32Or)
   69 00:4225 -  -  -  -  
   70 00:4225 -  -  -  -  ALUXor: 		;; [eor]
   71 00:4225 CD CA 42 78 
              B1 C2 C9 41 
              C3 A6 48 -  		IntegerDispatch(Int32Xor)
   72 00:4230 -  -  -  -  
   73 00:4230 -  -  -  -  ; ***************************************************************************************
   74 00:4230 -  -  -  -  ;
   75 00:4230 -  -  -  -  ;									Changes and Updates
   76 00:4230 -  -  -  -  ;
   77 00:4230 -  -  -  -  ; ***************************************************************************************
   78 00:4230 -  -  -  -  ;
   79 00:4230 -  -  -  -  ;		Date			Notes
   80 00:4230 -  -  -  -  ;		==== 			=====
   81 00:4230 -  -  -  -  ;
   82 00:4230 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:4230 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:4230 -  -  -  -  ; ***************************************************************************************
    2 00:4230 -  -  -  -  ; ***************************************************************************************
    3 00:4230 -  -  -  -  ;
    4 00:4230 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:4230 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4230 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4230 -  -  -  -  ;		Reviewed :	No
    8 00:4230 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:4230 -  -  -  -  ;
   10 00:4230 -  -  -  -  ; ***************************************************************************************
   11 00:4230 -  -  -  -  ; ***************************************************************************************
   12 00:4230 -  -  -  -  
   13 00:4230 -  -  -  -  ; ***************************************************************************************
   14 00:4230 -  -  -  -  ;
   15 00:4230 -  -  -  -  ; 									<l> <op> <r>
   16 00:4230 -  -  -  -  ;
   17 00:4230 -  -  -  -  ; ***************************************************************************************
   18 00:4230 -  -  -  -  
   19 00:4230 -  -  -  -  ALULongReference:			;; [!]
   20 00:4230 CD 3E 42 -  		call 	BRGetAddress 				; calculate address
   21 00:4233 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4235 CB F9 -  -  		set 	CIsReference,c
   23 00:4237 C9 -  -  -  		ret
   24 00:4238 -  -  -  -  
   25 00:4238 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4238 CD 30 42 -  		call 	ALULongReference
   27 00:423B CB F1 -  -  		set 	CIsByteReference,c
   28 00:423D C9 -  -  -  		ret
   29 00:423E -  -  -  -  
   30 00:423E -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:423E CD CA 42 78 
              B1 C2 C9 41 
              C3 49 42 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4249 -  -  -  -  _BRGAMain:		
   33 00:4249 CD 80 48 -  		call 	Int32Add 					; address in HL'HL
   34 00:424C CD 9B 43 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:424F C9 -  -  -  		ret
   36 00:4250 -  -  -  -  
   37 00:4250 -  -  -  -  ; ***************************************************************************************
   38 00:4250 -  -  -  -  ;
   39 00:4250 -  -  -  -  ;									Changes and Updates
   40 00:4250 -  -  -  -  ;
   41 00:4250 -  -  -  -  ; ***************************************************************************************
   42 00:4250 -  -  -  -  ;
   43 00:4250 -  -  -  -  ;		Date			Notes
   44 00:4250 -  -  -  -  ;		==== 			=====
   45 00:4250 -  -  -  -  ;
   46 00:4250 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:4250 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:4250 -  -  -  -  ; ***************************************************************************************
    2 00:4250 -  -  -  -  ; ***************************************************************************************
    3 00:4250 -  -  -  -  ;
    4 00:4250 -  -  -  -  ;		Name : 		compare.asm
    5 00:4250 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4250 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4250 -  -  -  -  ;		Reviewed :	No
    8 00:4250 -  -  -  -  ;		Purpose :	Comparison code
    9 00:4250 -  -  -  -  ;
   10 00:4250 -  -  -  -  ; ***************************************************************************************
   11 00:4250 -  -  -  -  ; ***************************************************************************************
   12 00:4250 -  -  -  -  
   13 00:4250 -  -  -  -  #macro compare_equals(n)
   14 00:4250             		call 	CompareBaseCode
   15 00:4250             		cp 		n
   16 00:4250             		jr 		z,UnaryInt32True
   17 00:4250             		jr 		UnaryInt32False
   18 00:4250             #endmacro
   19 00:4250 -  -  -  -  
   20 00:4250 -  -  -  -  #macro compare_not_equals(n)
   21 00:4250             		call 	CompareBaseCode
   22 00:4250             		cp 		n
   23 00:4250             		jr 		nz,UnaryInt32True
   24 00:4250             		jr 		UnaryInt32False
   25 00:4250             #endmacro
   26 00:4250 -  -  -  -  
   27 00:4250 -  -  -  -  ; ***************************************************************************************
   28 00:4250 -  -  -  -  ;
   29 00:4250 -  -  -  -  ; 								Return True/False
   30 00:4250 -  -  -  -  ;
   31 00:4250 -  -  -  -  ; ***************************************************************************************
   32 00:4250 -  -  -  -  
   33 00:4250 -  -  -  -  UnaryInt32True:	
   34 00:4250 3E FF -  -  		ld 		a,255
   35 00:4252 18 01 -  -  		jr 		_Int32Logical
   36 00:4254 -  -  -  -  UnaryInt32False: 
   37 00:4254 AF -  -  -  		xor 	a
   38 00:4255 -  -  -  -  _Int32Logical:
   39 00:4255 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4256 67 -  -  -  		ld 		h,a
   41 00:4257 D9 -  -  -  		exx
   42 00:4258 6F -  -  -  		ld 		l,a
   43 00:4259 67 -  -  -  		ld 		h,a
   44 00:425A D9 -  -  -  		exx
   45 00:425B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:425D C9 -  -  -  		ret
   47 00:425E -  -  -  -  
   48 00:425E -  -  -  -  ; ***************************************************************************************
   49 00:425E -  -  -  -  ;
   50 00:425E -  -  -  -  ; 										> = < (compare == value)
   51 00:425E -  -  -  -  ;
   52 00:425E -  -  -  -  ; ***************************************************************************************
   53 00:425E -  -  -  -  
   54 00:425E -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:425E CD 94 42 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4267 -  -  -  -  
   57 00:4267 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4267 CD 94 42 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:4270 -  -  -  -  
   60 00:4270 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:4270 CD 94 42 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4279 -  -  -  -  
   63 00:4279 -  -  -  -  ; ***************************************************************************************
   64 00:4279 -  -  -  -  ;
   65 00:4279 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4279 -  -  -  -  ;
   67 00:4279 -  -  -  -  ; ***************************************************************************************
   68 00:4279 -  -  -  -  
   69 00:4279 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4279 CD 94 42 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4282 -  -  -  -  
   72 00:4282 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4282 CD 94 42 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:428B -  -  -  -  
   75 00:428B -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:428B CD 94 42 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4294 -  -  -  -  
   78 00:4294 -  -  -  -  ; ***************************************************************************************
   79 00:4294 -  -  -  -  ;
   80 00:4294 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4294 -  -  -  -  ;
   82 00:4294 -  -  -  -  ; ***************************************************************************************
   83 00:4294 -  -  -  -  
   84 00:4294 -  -  -  -  CompareBaseCode:
   85 00:4294 CD CA 42 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4297 -  -  -  -  
   87 00:4297 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4298 A1 -  -  -  		and 	c
   89 00:4299 CB 47 -  -  		bit 	CIsString,a 
   90 00:429B C2 AA 42 -  		jp 		nz,StringCompare
   91 00:429E -  -  -  -  
   92 00:429E 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:429F B1 -  -  -  		or 		c
   94 00:42A0 CB 47 -  -  		bit 	CIsString,a 
   95 00:42A2 CA B9 48 -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:42A5 -  -  -  -  
   97 00:42A5 3E 02 C3 76 
              41 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:42AA -  -  -  -  ;
   99 00:42AA -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:42AA -  -  -  -  ;
  101 00:42AA -  -  -  -  StringCompare:
  102 00:42AA 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:42AB BE -  -  -  		cp 		(hl)
  104 00:42AC 38 0C -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:42AE 20 07 -  -  		jr 		nz,_SCLess
  106 00:42B0 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:42B1 23 -  -  -  		inc 	hl
  108 00:42B2 FE 20 -  -  		cp 		' '
  109 00:42B4 30 F4 -  -  		jr 		nc,StringCompare
  110 00:42B6 C9 -  -  -  		ret
  111 00:42B7 -  -  -  -  
  112 00:42B7 -  -  -  -  _SCLess:
  113 00:42B7 3E FF -  -  		ld 		a,$FF
  114 00:42B9 C9 -  -  -  		ret
  115 00:42BA -  -  -  -  _SCGreater:
  116 00:42BA 3E 01 -  -  		ld 		a,1
  117 00:42BC C9 -  -  -  		ret
  118 00:42BD -  -  -  -  
  119 00:42BD 3E 0C C3 76 
              41 -  -  -  		ERR_TODO()
  120 00:42C2 -  -  -  -  
  121 00:42C2 -  -  -  -  ; ***************************************************************************************
  122 00:42C2 -  -  -  -  ;
  123 00:42C2 -  -  -  -  ;									Changes and Updates
  124 00:42C2 -  -  -  -  ;
  125 00:42C2 -  -  -  -  ; ***************************************************************************************
  126 00:42C2 -  -  -  -  ;
  127 00:42C2 -  -  -  -  ;		Date			Notes
  128 00:42C2 -  -  -  -  ;		==== 			=====
  129 00:42C2 -  -  -  -  ;
  130 00:42C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42C2 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:42C2 -  -  -  -  ; ***************************************************************************************
    2 00:42C2 -  -  -  -  ; ***************************************************************************************
    3 00:42C2 -  -  -  -  ;
    4 00:42C2 -  -  -  -  ;		Name : 		utility.asm
    5 00:42C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42C2 -  -  -  -  ;		Reviewed :	No
    8 00:42C2 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:42C2 -  -  -  -  ;
   10 00:42C2 -  -  -  -  ; ***************************************************************************************
   11 00:42C2 -  -  -  -  ; ***************************************************************************************
   12 00:42C2 -  -  -  -  
   13 00:42C2 -  -  -  -  ; ***************************************************************************************
   14 00:42C2 -  -  -  -  ;
   15 00:42C2 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:42C2 -  -  -  -  ;
   17 00:42C2 -  -  -  -  ; ***************************************************************************************
   18 00:42C2 -  -  -  -  
   19 00:42C2 -  -  -  -  SwapHLDE:
   20 00:42C2 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:42C3 D9 -  -  -  			exx
   22 00:42C4 EB -  -  -  			ex 		de,hl
   23 00:42C5 D9 -  -  -  			exx
   24 00:42C6 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:42C7 41 -  -  -  			ld 		b,c
   26 00:42C8 4F -  -  -  			ld 		c,a
   27 00:42C9 C9 -  -  -  			ret
   28 00:42CA -  -  -  -  
   29 00:42CA -  -  -  -  ; ***************************************************************************************
   30 00:42CA -  -  -  -  ;
   31 00:42CA -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:42CA -  -  -  -  ;
   33 00:42CA -  -  -  -  ; ***************************************************************************************
   34 00:42CA -  -  -  -  
   35 00:42CA -  -  -  -  DereferenceBoth:
   36 00:42CA CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:42CC C4 6D 43 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:42CF CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:42D1 C8 -  -  -  			ret 	z
   40 00:42D2 CD C2 42 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:42D5 CD 6D 43 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:42D8 CD C2 42 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:42DB C9 -  -  -  			ret
   44 00:42DC -  -  -  -  
   45 00:42DC -  -  -  -  ; ***************************************************************************************
   46 00:42DC -  -  -  -  ;
   47 00:42DC -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:42DC -  -  -  -  ;
   49 00:42DC -  -  -  -  ; ***************************************************************************************
   50 00:42DC -  -  -  -  
   51 00:42DC -  -  -  -  NegateHLHL:	
   52 00:42DC CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:42DE C2 C9 41 -  			jp 		nz,TypeMismatch
   54 00:42E1 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:42E3 C4 6D 43 -  			call 	nz,Dereference 			; if required.
   56 00:42E6 CD E0 48 -  			call 	Int32Negate
   57 00:42E9 C9 -  -  -  			ret
Listing for file "_build.asm"
   27 00:42EA -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:42EA -  -  -  -  ; ***************************************************************************************
    2 00:42EA -  -  -  -  ; ***************************************************************************************
    3 00:42EA -  -  -  -  ;
    4 00:42EA -  -  -  -  ;		Name : 		expression.asm
    5 00:42EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42EA -  -  -  -  ;		Reviewed :	None
    8 00:42EA -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:42EA -  -  -  -  ;
   10 00:42EA -  -  -  -  ; ***************************************************************************************
   11 00:42EA -  -  -  -  ; ***************************************************************************************
   12 00:42EA -  -  -  -  
   13 00:42EA -  -  -  -  ; ***************************************************************************************
   14 00:42EA -  -  -  -  ;
   15 00:42EA -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:42EA -  -  -  -  ;
   17 00:42EA -  -  -  -  ; ***************************************************************************************
   18 00:42EA -  -  -  -  
   19 00:42EA -  -  -  -  EvaluateAtPrecedence0:
   20 00:42EA AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:42EB -  -  -  -  EvaluateAtPrecedence:
   22 00:42EB F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:42EC -  -  -  -  		;
   24 00:42EC -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:42EC -  -  -  -  		;
   26 00:42EC CD 9D 43 -  		call 	EvaluateTerm 				; get term
   27 00:42EF -  -  -  -  		;
   28 00:42EF -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:42EF -  -  -  -  		;
   30 00:42EF D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:42F0 -  -  -  -  _EAPLoop:
   32 00:42F0 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:42F3 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:42F5 D8 -  -  -  		ret 	c
   35 00:42F6 FE 93 -  -  		cp 		KWC_FIRST_UNARY
   36 00:42F8 D0 -  -  -  		ret 	nc
   37 00:42F9 -  -  -  -  		;
   38 00:42F9 -  -  -  -  		; 		Get the precedence.
   39 00:42F9 -  -  -  -  		;
   40 00:42F9 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:42FA D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:42FC 21 C0 45 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:42FF B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4300 6F -  -  -  		ld 		l,a
   45 00:4301 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4302 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4303 -  -  -  -  		;
   48 00:4303 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4303 -  -  -  -  		;
   50 00:4303 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4304 BB -  -  -  		cp 		e
   52 00:4305 D0 -  -  -  		ret 	nc
   53 00:4306 -  -  -  -  
   54 00:4306 -  -  -  -  		;
   55 00:4306 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4306 -  -  -  -  		;
   57 00:4306 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4307 -  -  -  -  		;
   59 00:4307 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:430A F5 -  -  -  		push 	af
   61 00:430B -  -  -  -  		;
   62 00:430B C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:430C D9 -  -  -  		exx 								; save HL'
   64 00:430D E5 -  -  -  		push 	hl
   65 00:430E D9 -  -  -  		exx 								
   66 00:430F E5 -  -  -  		push 	hl 							; save HL
   67 00:4310 -  -  -  -  		;
   68 00:4310 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4312 -  -  -  -  		;
   70 00:4312 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4312 -  -  -  -  		;
   72 00:4312 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4313 CD EB 42 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4316 -  -  -  -  		;
   75 00:4316 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4316 -  -  -  -  		;
   77 00:4316 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4317 -  -  -  -  
   79 00:4317 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4318 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4319 D9 -  -  -  		exx
   82 00:431A EB -  -  -  		ex 		de,hl
   83 00:431B E1 -  -  -  		pop 	hl
   84 00:431C D9 -  -  -  		exx
   85 00:431D C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:431E 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:431F -  -  -  -  		;
   88 00:431F -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:431F -  -  -  -  		; 		is in B (type) DE'DE
   90 00:431F -  -  -  -  		;
   91 00:431F F1 -  -  -  		pop 	af 							; get operator in A
   92 00:4320 -  -  -  -  		;
   93 00:4320 -  -  -  -  		; 		Call the binary operator in A.
   94 00:4320 -  -  -  -  		;
   95 00:4320 D5 -  -  -  		push 	de
   96 00:4321 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4322 E6 7F 21 00 
              00 6F 29 11 
              D6 46 19 5E 
              23 56 ED 53 
              4E 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4334 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4335 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4336 CD 4D 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4339 -  -  -  -  		;
  102 00:4339 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:433A -  -  -  -  		;
  104 00:433A 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:433C -  -  -  -  
  106 00:433C -  -  -  -  ; ***************************************************************************************
  107 00:433C -  -  -  -  ;
  108 00:433C -  -  -  -  ;									Changes and Updates
  109 00:433C -  -  -  -  ;
  110 00:433C -  -  -  -  ; ***************************************************************************************
  111 00:433C -  -  -  -  ;
  112 00:433C -  -  -  -  ;		Date			Notes
  113 00:433C -  -  -  -  ;		==== 			=====
  114 00:433C -  -  -  -  ;
  115 00:433C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:433C -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:433C -  -  -  -  ; ***************************************************************************************
    2 00:433C -  -  -  -  ; ***************************************************************************************
    3 00:433C -  -  -  -  ;
    4 00:433C -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:433C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:433C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:433C -  -  -  -  ;		Reviewed :	No
    8 00:433C -  -  -  -  ;		Purpose :	Expression support functions
    9 00:433C -  -  -  -  ;
   10 00:433C -  -  -  -  ; ***************************************************************************************
   11 00:433C -  -  -  -  ; ***************************************************************************************
   12 00:433C -  -  -  -  
   13 00:433C -  -  -  -  ; ***************************************************************************************
   14 00:433C -  -  -  -  ;
   15 00:433C -  -  -  -  ; 						Evaluate and dereference an expression
   16 00:433C -  -  -  -  ;
   17 00:433C -  -  -  -  ; ***************************************************************************************
   18 00:433C -  -  -  -  
   19 00:433C -  -  -  -  EvaluateValue:
   20 00:433C CD EA 42 -  		call 	EvaluateAtPrecedence0
   21 00:433F C3 6D 43 -  		jp 		Dereference
   22 00:4342 -  -  -  -  
   23 00:4342 -  -  -  -  ; ***************************************************************************************
   24 00:4342 -  -  -  -  ;
   25 00:4342 -  -  -  -  ; 									Evaluate a number
   26 00:4342 -  -  -  -  ;
   27 00:4342 -  -  -  -  ; ***************************************************************************************
   28 00:4342 -  -  -  -  
   29 00:4342 -  -  -  -  EvaluateInteger:
   30 00:4342 CD 3C 43 -  		call 	EvaluateValue
   31 00:4345 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   32 00:4347 C8 -  -  -  		ret 	z
   33 00:4348 C3 C9 41 -  		jp 		TypeMismatch
   34 00:434B -  -  -  -  
   35 00:434B -  -  -  -  ; ***************************************************************************************
   36 00:434B -  -  -  -  ;
   37 00:434B -  -  -  -  ; 									Evaluate an 8 bit integer
   38 00:434B -  -  -  -  ;
   39 00:434B -  -  -  -  ; ***************************************************************************************
   40 00:434B -  -  -  -  
   41 00:434B -  -  -  -  Evaluate8BitInteger:
   42 00:434B CD 42 43 -  		call 	EvaluateInteger
   43 00:434E D9 -  -  -  		exx  								; check if upper 3 bytes zero
   44 00:434F 7C -  -  -  		ld 		a,h
   45 00:4350 B5 -  -  -  		or 		l
   46 00:4351 D9 -  -  -  		exx 	
   47 00:4352 B4 -  -  -  		or 		h
   48 00:4353 C2 CE 41 -  		jp 		nz,BadValue
   49 00:4356 7D -  -  -  		ld 		a,l 						; return integer in A
   50 00:4357 C9 -  -  -  		ret
   51 00:4358 -  -  -  -  		
   52 00:4358 -  -  -  -  ; ***************************************************************************************
   53 00:4358 -  -  -  -  ;
   54 00:4358 -  -  -  -  ; 									Evaluate a string
   55 00:4358 -  -  -  -  ;
   56 00:4358 -  -  -  -  ; ***************************************************************************************
   57 00:4358 -  -  -  -  
   58 00:4358 -  -  -  -  EvaluateStringOnly:
   59 00:4358 CD 3C 43 -  		call 	EvaluateValue
   60 00:435B CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   61 00:435D CA C9 41 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   62 00:4360 C9 -  -  -  		ret
   63 00:4361 -  -  -  -  
   64 00:4361 -  -  -  -  ; ***************************************************************************************
   65 00:4361 -  -  -  -  ;
   66 00:4361 -  -  -  -  ; 								Return 8/16 bit constant
   67 00:4361 -  -  -  -  ;
   68 00:4361 -  -  -  -  ; ***************************************************************************************
   69 00:4361 -  -  -  -  
   70 00:4361 -  -  -  -  Return8BitConstant:
   71 00:4361 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   72 00:4364 6F -  -  -  		ld 		l,a
   73 00:4365 -  -  -  -  Return16BitConstant:
   74 00:4365 D9 -  -  -  		exx 								; clear HL'
   75 00:4366 21 00 00 -  		ld 		hl,0
   76 00:4369 D9 -  -  -  		exx
   77 00:436A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
   78 00:436C C9 -  -  -  		ret
   79 00:436D -  -  -  -  
   80 00:436D -  -  -  -  ; ***************************************************************************************
   81 00:436D -  -  -  -  ;
   82 00:436D -  -  -  -  ;									Changes and Updates
   83 00:436D -  -  -  -  ;
   84 00:436D -  -  -  -  ; ***************************************************************************************
   85 00:436D -  -  -  -  ;
   86 00:436D -  -  -  -  ;		Date			Notes
   87 00:436D -  -  -  -  ;		==== 			=====
   88 00:436D -  -  -  -  ;
   89 00:436D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:436D -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:436D -  -  -  -  ; ***************************************************************************************
    2 00:436D -  -  -  -  ; ***************************************************************************************
    3 00:436D -  -  -  -  ;
    4 00:436D -  -  -  -  ;		Name : 		reference.asm
    5 00:436D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:436D -  -  -  -  ;		Date : 		1st May 2022
    7 00:436D -  -  -  -  ;		Reviewed :	No
    8 00:436D -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:436D -  -  -  -  ;
   10 00:436D -  -  -  -  ; ***************************************************************************************
   11 00:436D -  -  -  -  ; ***************************************************************************************
   12 00:436D -  -  -  -  
   13 00:436D -  -  -  -  ; ***************************************************************************************
   14 00:436D -  -  -  -  ;
   15 00:436D -  -  -  -  ; 									Dereference HL'HL C
   16 00:436D -  -  -  -  ;
   17 00:436D -  -  -  -  ; ***************************************************************************************
   18 00:436D -  -  -  -  
   19 00:436D -  -  -  -  Dereference:
   20 00:436D CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:436F C8 -  -  -  		ret 	z
   22 00:4370 -  -  -  -  
   23 00:4370 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4372 -  -  -  -  		
   25 00:4372 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:4374 20 20 -  -  		jr 		nz,_DRInternal
   27 00:4376 -  -  -  -  
   28 00:4376 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4378 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:437A -  -  -  -  
   31 00:437A E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:437B 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:437F D9 -  -  -  		exx
   34 00:4380 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4381 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4382 23 -  -  -  		inc  	hl
   37 00:4383 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:4387 D9 -  -  -  		exx 								; fix back
   39 00:4388 C9 -  -  -  		ret
   40 00:4389 -  -  -  -  
   41 00:4389 -  -  -  -  _DeRefByte:		
   42 00:4389 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:438A 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:438D 6F -  -  -  		ld	 	l,a
   45 00:438E D9 -  -  -  		exx
   46 00:438F 21 00 00 -  		ld 		hl,$0000
   47 00:4392 D9 -  -  -  		exx
   48 00:4393 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:4395 C9 -  -  -  		ret
   50 00:4396 -  -  -  -  
   51 00:4396 -  -  -  -  _DRInternal:
   52 00:4396 3E 04 C3 76 
              41 -  -  -  		ERR_DISABLED
   53 00:439B -  -  -  -  
   54 00:439B -  -  -  -  ; ***************************************************************************************
   55 00:439B -  -  -  -  ;
   56 00:439B -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:439B -  -  -  -  ;
   58 00:439B -  -  -  -  ; ***************************************************************************************
   59 00:439B -  -  -  -  
   60 00:439B -  -  -  -  DRConvertHLHLToAddress:
   61 00:439B -  -  -  -  		#ifdef EZ80
   62 00:439B             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:439B             		exx
   64 00:439B             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:439B             		ld 		hl,$0000 					; zero HL'
   66 00:439B             		exx
   67 00:439B             		ld 		hl,(AConvert) 				; load UHL
   68 00:439B             		#endif
   69 00:439B C9 -  -  -  		ret
   70 00:439C -  -  -  -  
   71 00:439C -  -  -  -  ; ***************************************************************************************
   72 00:439C -  -  -  -  ;
   73 00:439C -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:439C -  -  -  -  ;
   75 00:439C -  -  -  -  ; ***************************************************************************************
   76 00:439C -  -  -  -  
   77 00:439C -  -  -  -  DRConvertAddressToHLHL:
   78 00:439C -  -  -  -  		#ifdef EZ80
   79 00:439C             		ld 		(AConvert),hl
   80 00:439C             		ld 		hl,$0000
   81 00:439C             		ld 		(AConvert+3),hl
   82 00:439C             		exx
   83 00:439C             		ld 		hl,(AConvert+2)
   84 00:439C             		exx
   85 00:439C             		xor 	a
   86 00:439C             		ld 		(AConvert+2),a
   87 00:439C             		ld 		hl,(AConvert)
   88 00:439C             		#endif
   89 00:439C C9 -  -  -  		ret
   90 00:439D -  -  -  -  
   91 00:439D -  -  -  -  ; ***************************************************************************************
   92 00:439D -  -  -  -  ;
   93 00:439D -  -  -  -  ;									Changes and Updates
   94 00:439D -  -  -  -  ;
   95 00:439D -  -  -  -  ; ***************************************************************************************
   96 00:439D -  -  -  -  ;
   97 00:439D -  -  -  -  ;		Date			Notes
   98 00:439D -  -  -  -  ;		==== 			=====
   99 00:439D -  -  -  -  ;
  100 00:439D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:439D -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:439D -  -  -  -  ; ***************************************************************************************
    2 00:439D -  -  -  -  ; ***************************************************************************************
    3 00:439D -  -  -  -  ;
    4 00:439D -  -  -  -  ;		Name : 		term.asm
    5 00:439D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:439D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:439D -  -  -  -  ;		Reviewed :	No
    8 00:439D -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:439D -  -  -  -  ;
   10 00:439D -  -  -  -  ; ***************************************************************************************
   11 00:439D -  -  -  -  ; ***************************************************************************************
   12 00:439D -  -  -  -  
   13 00:439D -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:439D             		add_hlhl_16
   15 00:439D             		exx
   16 00:439D             		adc_hlhl_16
   17 00:439D             		exx
   18 00:439D             #endmacro
   19 00:439D -  -  -  -  
   20 00:439D -  -  -  -  ; ***************************************************************************************
   21 00:439D -  -  -  -  ;
   22 00:439D -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:439D -  -  -  -  ;
   24 00:439D -  -  -  -  ; ***************************************************************************************
   25 00:439D -  -  -  -  ;
   26 00:439D -  -  -  -  ; 		Terms can be:
   27 00:439D -  -  -  -  ;
   28 00:439D -  -  -  -  ;			<integer> 			42 						not negative
   29 00:439D -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:439D -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:439D -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:439D -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:439D -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:439D -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:439D -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:439D -  -  -  -  ; 														reference of some sort.
   37 00:439D -  -  -  -  ;
   38 00:439D -  -  -  -  ; ***************************************************************************************
   39 00:439D -  -  -  -  
   40 00:439D -  -  -  -  EvaluateTerm:		
   41 00:439D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:439F D9 -  -  -  		exx
   43 00:43A0 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:43A3 D9 -  -  -  		exx
   45 00:43A4 21 00 00 -  		ld 		hl,$0000		
   46 00:43A7 -  -  -  -  		;
   47 00:43A7 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:43AA FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:43AC 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:43AE DA 4C 44 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:43B1 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:43B3 C2 FB 43 -  		jp 		nz,_ETFoundKeyword 
   53 00:43B6 -  -  -  -  		;
   54 00:43B6 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:43B6 -  -  -  -  		;
   56 00:43B6 -  -  -  -  _ETIntegerConstant:
   57 00:43B6 -  -  -  -  		;
   58 00:43B6 -  -  -  -  _ETIntegerLoop:		
   59 00:43B6 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:43B9 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:43BB B5 -  -  -  		or 		l 							; or into L
   62 00:43BC 6F -  -  -  		ld 		l,a
   63 00:43BD DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:43BF DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:43C2 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:43C4 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:43C6 D8 -  -  -  		ret 	c
   68 00:43C7 -  -  -  -  
   69 00:43C7 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:43CC 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:43D1 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:43D6 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:43DB 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:43E0 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:43E5 -  -  -  -  
   76 00:43E5 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:43E7 -  -  -  -  		;
   78 00:43E7 -  -  -  -  		; 		Found the $3F string marker.
   79 00:43E7 -  -  -  -  		;
   80 00:43E7 -  -  -  -  _ETStringMarker:		
   81 00:43E7 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:43E9 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:43EB DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:43ED E1 -  -  -  		pop 	hl
   85 00:43EE 11 00 00 -  		ld 		de,$0000
   86 00:43F1 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:43F4 DD 19 -  -  		add 	ix,de
   88 00:43F6 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:43F8 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:43FA C9 -  -  -  		ret
   91 00:43FB -  -  -  -  		;
   92 00:43FB -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:43FB -  -  -  -  		;
   94 00:43FB -  -  -  -  _ETFoundKeyword:
   95 00:43FB DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:43FD FE 93 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:43FF 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4401 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:4403 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:4405 -  -  -  -  		;
  101 00:4405 -  -  -  -  		;		Unary group 0
  102 00:4405 -  -  -  -  		;
  103 00:4405 E6 7F 21 00 
              00 6F 29 11 
              D6 46 19 5E 
              23 56 ED 53 
              4E 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:4417 C3 4D 40 -  		jp 		JumpCode 					; and go there.
  105 00:441A -  -  -  -  
  106 00:441A -  -  -  -  _ETNotUnaryFunction0:	
  107 00:441A FE 89 -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:441C 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:441E -  -  -  -  		;
  110 00:441E -  -  -  -  		; 		- term
  111 00:441E -  -  -  -  		;
  112 00:441E CD 9D 43 -  		call 	EvaluateTerm 				; evaluate term
  113 00:4421 CD DC 42 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:4424 C9 -  -  -  		ret
  115 00:4425 -  -  -  -  		;
  116 00:4425 -  -  -  -  		;		! ? indirection check
  117 00:4425 -  -  -  -  		;
  118 00:4425 -  -  -  -  _ETCheckIndirection:	
  119 00:4425 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:4427 28 05 -  -  		jr 		z,_ETIndirection
  121 00:4429 FE 83 -  -  		cp 		KWD_PLING
  122 00:442B C2 D3 41 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:442E -  -  -  -  		;
  124 00:442E -  -  -  -  		; 		! ? indirection
  125 00:442E -  -  -  -  		;
  126 00:442E -  -  -  -  _ETIndirection:
  127 00:442E F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:442F CD 9D 43 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:4432 CD 6D 43 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:4435 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:4437 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:4439 CD 9B 43 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:443C F1 -  -  -  		pop 	af 							; get type back
  134 00:443D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:443F CB F9 -  -  		set 	CIsReference,c
  136 00:4441 FE 83 -  -  		cp 		KWD_PLING
  137 00:4443 C8 -  -  -  		ret 	z
  138 00:4444 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:4446 C9 -  -  -  		ret
  140 00:4447 -  -  -  -  _ETStringIndirect:
  141 00:4447 3E 02 C3 76 
              41 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:444C -  -  -  -  		;
  143 00:444C -  -  -  -  		; 		Found an identifier.
  144 00:444C -  -  -  -  		;
  145 00:444C -  -  -  -  _ETVariable:
  146 00:444C 3E 0C C3 76 
              41 -  -  -  		ERR_TODO
  147 00:4451 3E 0D C3 76 
              41 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:4456 -  -  -  -  		
  149 00:4456 -  -  -  -  ; ***************************************************************************************
  150 00:4456 -  -  -  -  ;
  151 00:4456 -  -  -  -  ;									Changes and Updates
  152 00:4456 -  -  -  -  ;
  153 00:4456 -  -  -  -  ; ***************************************************************************************
  154 00:4456 -  -  -  -  ;
  155 00:4456 -  -  -  -  ;		Date			Notes
  156 00:4456 -  -  -  -  ;		==== 			=====
  157 00:4456 -  -  -  -  ;
  158 00:4456 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4456 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4456 -  -  -  -  ; ***************************************************************************************
    2 00:4456 -  -  -  -  ; ***************************************************************************************
    3 00:4456 -  -  -  -  ;
    4 00:4456 -  -  -  -  ;		Name : 		page.asm
    5 00:4456 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4456 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4456 -  -  -  -  ;		Reviewed :	No
    8 00:4456 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4456 -  -  -  -  ;
   10 00:4456 -  -  -  -  ; ***************************************************************************************
   11 00:4456 -  -  -  -  ; ***************************************************************************************
   12 00:4456 -  -  -  -  
   13 00:4456 -  -  -  -  ; ***************************************************************************************
   14 00:4456 -  -  -  -  ;
   15 00:4456 -  -  -  -  ;							page unary function (no bracket)
   16 00:4456 -  -  -  -  ;
   17 00:4456 -  -  -  -  ; ***************************************************************************************
   18 00:4456 -  -  -  -  
   19 00:4456 -  -  -  -  Unary_Page:	;; [page]
   20 00:4456 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:4459 D9 -  -  -  			exx
   22 00:445A 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:445D D9 -  -  -  			exx
   24 00:445E 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4460 C9 -  -  -  			ret
   26 00:4461 -  -  -  -  
   27 00:4461 -  -  -  -  ; ***************************************************************************************
   28 00:4461 -  -  -  -  ;
   29 00:4461 -  -  -  -  ;									Changes and Updates
   30 00:4461 -  -  -  -  ;
   31 00:4461 -  -  -  -  ; ***************************************************************************************
   32 00:4461 -  -  -  -  ;
   33 00:4461 -  -  -  -  ;		Date			Notes
   34 00:4461 -  -  -  -  ;		==== 			=====
   35 00:4461 -  -  -  -  ;
   36 00:4461 -  -  -  -  ; ***************************************************************************************
   37 00:4461 -  -  -  -  			
Listing for file "_build.asm"
   32 00:4461 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4461 -  -  -  -  ; ***************************************************************************************
    2 00:4461 -  -  -  -  ; ***************************************************************************************
    3 00:4461 -  -  -  -  ;
    4 00:4461 -  -  -  -  ;		Name : 		simple.asm
    5 00:4461 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4461 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4461 -  -  -  -  ;		Reviewed :	No
    8 00:4461 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4461 -  -  -  -  ;
   10 00:4461 -  -  -  -  ; ***************************************************************************************
   11 00:4461 -  -  -  -  ; ***************************************************************************************
   12 00:4461 -  -  -  -  
   13 00:4461 -  -  -  -  ; ***************************************************************************************
   14 00:4461 -  -  -  -  ;
   15 00:4461 -  -  -  -  ;								( unary function (think about it)
   16 00:4461 -  -  -  -  ;
   17 00:4461 -  -  -  -  ; ***************************************************************************************
   18 00:4461 -  -  -  -  
   19 00:4461 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4461 CD EA 42 -  		call 	EvaluateAtPrecedence0
   21 00:4464 C3 51 41 -  		jp  	CheckRightBracket
   22 00:4467 -  -  -  -  
   23 00:4467 -  -  -  -  ; ***************************************************************************************
   24 00:4467 -  -  -  -  ;
   25 00:4467 -  -  -  -  ;									Handle &x
   26 00:4467 -  -  -  -  ;
   27 00:4467 -  -  -  -  ; ***************************************************************************************
   28 00:4467 -  -  -  -  
   29 00:4467 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:4467 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:446A E6 C0 -  -  		and 		$C0
   32 00:446C FE 40 -  -  		cp 			$40
   33 00:446E C2 D3 41 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4471 C3 9D 43 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4474 -  -  -  -  
   36 00:4474 -  -  -  -  ; ***************************************************************************************
   37 00:4474 -  -  -  -  ;
   38 00:4474 -  -  -  -  ;									Changes and Updates
   39 00:4474 -  -  -  -  ;
   40 00:4474 -  -  -  -  ; ***************************************************************************************
   41 00:4474 -  -  -  -  ;
   42 00:4474 -  -  -  -  ;		Date			Notes
   43 00:4474 -  -  -  -  ;		==== 			=====
   44 00:4474 -  -  -  -  ;
   45 00:4474 -  -  -  -  ; ***************************************************************************************
   46 00:4474 -  -  -  -  		
Listing for file "_build.asm"
   33 00:4474 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4474 -  -  -  -  ; ***************************************************************************************
    2 00:4474 -  -  -  -  ; ***************************************************************************************
    3 00:4474 -  -  -  -  ;
    4 00:4474 -  -  -  -  ;		Name : 		clear.asm
    5 00:4474 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4474 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4474 -  -  -  -  ;		Reviewed :	No
    8 00:4474 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4474 -  -  -  -  ;
   10 00:4474 -  -  -  -  ; ***************************************************************************************
   11 00:4474 -  -  -  -  ; ***************************************************************************************
   12 00:4474 -  -  -  -  
   13 00:4474 -  -  -  -  ; ***************************************************************************************
   14 00:4474 -  -  -  -  ;
   15 00:4474 -  -  -  -  ;										CLEAR command
   16 00:4474 -  -  -  -  ;
   17 00:4474 -  -  -  -  ; ***************************************************************************************
   18 00:4474 -  -  -  -  
   19 00:4474 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4474 -  -  -  -  		;
   21 00:4474 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4474 -  -  -  -  		;
   23 00:4474 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4477 -  -  -  -  _CCFindLow:
   25 00:4477 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:447A 5E -  -  -  		ld 		e,(hl)		
   27 00:447B 19 -  -  -  		add 	hl,de
   28 00:447C 7B -  -  -  		ld 		a,e
   29 00:447D B7 -  -  -  		or 		a
   30 00:447E 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4480 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 00:4481 23 -  -  -  		inc 	hl
   33 00:4482 22 41 40 -  		ld 		(LowAllocMemory),hl
   34 00:4485 -  -  -  -  		;
   35 00:4485 -  -  -  -  		; 	 		Reset the language stack
   36 00:4485 -  -  -  -  		;
   37 00:4485 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 00:4488 -  -  -  -  		;
   39 00:4488 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 00:448A 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:448D 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:4490 19 -  -  -  		add 	hl,de
   43 00:4491 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:4493 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:4496 -  -  -  -  		;
   46 00:4496 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:4499 19 -  -  -  		add 	hl,de
   48 00:449A 22 3D 40 -  		ld 		(StandardIntegers),hl
   49 00:449D -  -  -  -  		;
   50 00:449D -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 00:449D -  -  -  -  		;
   52 00:449D -  -  -  -  
   53 00:449D -  -  -  -  		;
   54 00:449D -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 00:449D -  -  -  -  		;
   56 00:449D -  -  -  -  
   57 00:449D C9 -  -  -  		ret
   58 00:449E -  -  -  -  
   59 00:449E -  -  -  -  ; ***************************************************************************************
   60 00:449E -  -  -  -  ;
   61 00:449E -  -  -  -  ;									Changes and Updates
   62 00:449E -  -  -  -  ;
   63 00:449E -  -  -  -  ; ***************************************************************************************
   64 00:449E -  -  -  -  ;
   65 00:449E -  -  -  -  ;		Date			Notes
   66 00:449E -  -  -  -  ;		==== 			=====
   67 00:449E -  -  -  -  ;
   68 00:449E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:449E -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:449E -  -  -  -  ; ***************************************************************************************
    2 00:449E -  -  -  -  ; ***************************************************************************************
    3 00:449E -  -  -  -  ;
    4 00:449E -  -  -  -  ;		Name : 		instance.asm
    5 00:449E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:449E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:449E -  -  -  -  ;		Reviewed :	No
    8 00:449E -  -  -  -  ;		Purpose :	Instance handling
    9 00:449E -  -  -  -  ;
   10 00:449E -  -  -  -  ; ***************************************************************************************
   11 00:449E -  -  -  -  ; ***************************************************************************************
   12 00:449E -  -  -  -  
   13 00:449E -  -  -  -  ; ***************************************************************************************
   14 00:449E -  -  -  -  ;
   15 00:449E -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:449E -  -  -  -  ;
   17 00:449E -  -  -  -  ; ***************************************************************************************
   18 00:449E -  -  -  -  
   19 00:449E -  -  -  -  SetCurrentInstance:
   20 00:449E ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:44A2 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:44A5 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:44A9 -  -  -  -  
   24 00:44A9 C9 -  -  -  		ret
   25 00:44AA -  -  -  -  
   26 00:44AA -  -  -  -  
   27 00:44AA -  -  -  -  ; ***************************************************************************************
   28 00:44AA -  -  -  -  ;
   29 00:44AA -  -  -  -  ;									Changes and Updates
   30 00:44AA -  -  -  -  ;
   31 00:44AA -  -  -  -  ; ***************************************************************************************
   32 00:44AA -  -  -  -  ;
   33 00:44AA -  -  -  -  ;		Date			Notes
   34 00:44AA -  -  -  -  ;		==== 			=====
   35 00:44AA -  -  -  -  ;
   36 00:44AA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:44AA -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:44AA -  -  -  -  ; ***************************************************************************************
    2 00:44AA -  -  -  -  ; ***************************************************************************************
    3 00:44AA -  -  -  -  ;
    4 00:44AA -  -  -  -  ;		Name : 		new.asm
    5 00:44AA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44AA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44AA -  -  -  -  ;		Reviewed :	No
    8 00:44AA -  -  -  -  ;		Purpose :	New command.
    9 00:44AA -  -  -  -  ;
   10 00:44AA -  -  -  -  ; ***************************************************************************************
   11 00:44AA -  -  -  -  ; ***************************************************************************************
   12 00:44AA -  -  -  -  
   13 00:44AA -  -  -  -  ; ***************************************************************************************
   14 00:44AA -  -  -  -  ;
   15 00:44AA -  -  -  -  ;										NEW command
   16 00:44AA -  -  -  -  ;
   17 00:44AA -  -  -  -  ; ***************************************************************************************
   18 00:44AA -  -  -  -  
   19 00:44AA -  -  -  -  Command_NEW: 	;; [new]
   20 00:44AA 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:44AD 36 00 -  -  		ld 		(hl),0
   22 00:44AF CD 74 44 -  		call 	Command_CLEAR 				; clear all variables
   23 00:44B2 3E 00 C3 76 
              41 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:44B7 -  -  -  -  
   25 00:44B7 -  -  -  -  ; ***************************************************************************************
   26 00:44B7 -  -  -  -  ;
   27 00:44B7 -  -  -  -  ;									Changes and Updates
   28 00:44B7 -  -  -  -  ;
   29 00:44B7 -  -  -  -  ; ***************************************************************************************
   30 00:44B7 -  -  -  -  ;
   31 00:44B7 -  -  -  -  ;		Date			Notes
   32 00:44B7 -  -  -  -  ;		==== 			=====
   33 00:44B7 -  -  -  -  ;
   34 00:44B7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:44B7 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:44B7 -  -  -  -  ; ***************************************************************************************
    2 00:44B7 -  -  -  -  ; ***************************************************************************************
    3 00:44B7 -  -  -  -  ;
    4 00:44B7 -  -  -  -  ;		Name : 		utility.asm
    5 00:44B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44B7 -  -  -  -  ;		Reviewed :	No
    8 00:44B7 -  -  -  -  ;		Purpose :	Utility routines
    9 00:44B7 -  -  -  -  ;
   10 00:44B7 -  -  -  -  ; ***************************************************************************************
   11 00:44B7 -  -  -  -  ; ***************************************************************************************
   12 00:44B7 -  -  -  -  
   13 00:44B7 -  -  -  -  ; ***************************************************************************************
   14 00:44B7 -  -  -  -  ;
   15 00:44B7 -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:44B7 -  -  -  -  ;
   17 00:44B7 -  -  -  -  ; ***************************************************************************************
   18 00:44B7 -  -  -  -  
   19 00:44B7 -  -  -  -  PrintStringAtHL:
   20 00:44B7 7E -  -  -  		ld 		a,(hl)
   21 00:44B8 B7 -  -  -  		or 		a
   22 00:44B9 C8 -  -  -  		ret 	z
   23 00:44BA CD 40 49 -  		call 	SYSPrintChar
   24 00:44BD 23 -  -  -  		inc 	hl
   25 00:44BE 18 F7 -  -  		jr 		PrintStringAtHL
   26 00:44C0 -  -  -  -  
   27 00:44C0 -  -  -  -  ; ***************************************************************************************
   28 00:44C0 -  -  -  -  ;
   29 00:44C0 -  -  -  -  ;									Changes and Updates
   30 00:44C0 -  -  -  -  ;
   31 00:44C0 -  -  -  -  ; ***************************************************************************************
   32 00:44C0 -  -  -  -  ;
   33 00:44C0 -  -  -  -  ;		Date			Notes
   34 00:44C0 -  -  -  -  ;		==== 			=====
   35 00:44C0 -  -  -  -  ;
   36 00:44C0 -  -  -  -  ; ***************************************************************************************
   37 00:44C0 -  -  -  -  		
Listing for file "_build.asm"
   37 00:44C0 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:44C0 -  -  -  -  ;
    2 00:44C0 -  -  -  -  ;	This file is automatically generated.
    3 00:44C0 -  -  -  -  ;
    4 00:44C0 -  -  -  -  ;
    5 00:44C0 -  -  -  -  ;	Keywords for set 0
    6 00:44C0 -  -  -  -  ;
    7 00:44C0 -  -  -  -  KeywordsSet0:
    8 00:44C0 01 20 -  -  	.db	1," "              ; $0080
    9 00:44C2 01 20 -  -  	.db	1," "              ; $0081
   10 00:44C4 01 20 -  -  	.db	1," "              ; $0082
   11 00:44C6 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:44C8 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:44CA 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:44CC 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:44CE 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:44D2 01 2B -  -  	.db	1,"+"              ; $0088
   17 00:44D4 01 2D -  -  	.db	1,"-"              ; $0089
   18 00:44D6 02 3E 3D -  	.db	2,">="             ; $008a
   19 00:44D9 02 3C 3D -  	.db	2,"<="             ; $008b
   20 00:44DC 01 3E -  -  	.db	1,">"              ; $008c
   21 00:44DE 01 3C -  -  	.db	1,"<"              ; $008d
   22 00:44E0 01 3D -  -  	.db	1,"="              ; $008e
   23 00:44E2 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 00:44E5 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 00:44E9 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 00:44EC 03 45 4F 52 	.db	3,"EOR"            ; $0092
   27 00:44F0 01 26 -  -  	.db	1,"&"              ; $0093
   28 00:44F2 01 28 -  -  	.db	1,"("              ; $0094
   29 00:44F4 01 24 -  -  	.db	1,"$"              ; $0095
   30 00:44F6 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 00:44FA 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 00:44FE 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 00:4502 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 00:4506 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 00:450A 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 00:450F 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 00:4513 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 00:4518 01 29 -  -  	.db	1,")"              ; $009e
   39 00:451A 01 2C -  -  	.db	1,","              ; $009f
   40 00:451C 01 3A -  -  	.db	1,":"              ; $00a0
   41 00:451E 01 3B -  -  	.db	1,";"              ; $00a1
   42 00:4520 01 27 -  -  	.db	1,"'"              ; $00a2
   43 00:4522 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 00:4529 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 00:452F 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 00:4532 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 00:4537 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 00:453C 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 00:4540 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 00:4543 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 00:4548 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 00:454D 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 00:4551 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 00:4556 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 00:455E 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 00:4564 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 00:4568 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 00:456C 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 00:4570 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 00:4574 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 00:457A 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 00:457F 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 00:4584 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 00:4589 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 00:458D 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 00:4591 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 00:4596 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 00:459B 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 00:45A3 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 00:45AA 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 00:45B0 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 00:45B4 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 00:45B9 00 -  -  -  	.db	0
   74 00:45BA -  -  -  -  ;
   75 00:45BA -  -  -  -  ;	Keywords for set 1
   76 00:45BA -  -  -  -  ;
   77 00:45BA -  -  -  -  KeywordsSet1:
   78 00:45BA 00 -  -  -  	.db	0
   79 00:45BB -  -  -  -  ;
   80 00:45BB -  -  -  -  ;	Keywords for set 2
   81 00:45BB -  -  -  -  ;
   82 00:45BB -  -  -  -  KeywordsSet2:
   83 00:45BB 00 -  -  -  	.db	0
Listing for file "_build.asm"
   38 00:45BC -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:45BC -  -  -  -  ;
    2 00:45BC -  -  -  -  ;	This file is automatically generated.
    3 00:45BC -  -  -  -  ;
    4 00:45BC 00 00 00 00 	.block	$20-($ & $1F)
    5 00:45C0 -  -  -  -  PrecedenceTable:
    6 00:45C0 06 -  -  -  	.db	6	; $0083 !
    7 00:45C1 06 -  -  -  	.db	6	; $0084 ?
    8 00:45C2 05 -  -  -  	.db	5	; $0085 *
    9 00:45C3 05 -  -  -  	.db	5	; $0086 /
   10 00:45C4 05 -  -  -  	.db	5	; $0087 mod
   11 00:45C5 04 -  -  -  	.db	4	; $0088 +
   12 00:45C6 04 -  -  -  	.db	4	; $0089 -
   13 00:45C7 03 -  -  -  	.db	3	; $008a >=
   14 00:45C8 03 -  -  -  	.db	3	; $008b <=
   15 00:45C9 03 -  -  -  	.db	3	; $008c >
   16 00:45CA 03 -  -  -  	.db	3	; $008d <
   17 00:45CB 03 -  -  -  	.db	3	; $008e =
   18 00:45CC 03 -  -  -  	.db	3	; $008f <>
   19 00:45CD 02 -  -  -  	.db	2	; $0090 and
   20 00:45CE 01 -  -  -  	.db	1	; $0091 or
   21 00:45CF 01 -  -  -  	.db	1	; $0092 eor
   22 00:45D0 -  -  -  -  
Listing for file "_build.asm"
   39 00:45D0 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:45D0 -  -  -  -  ;
    2 00:45D0 -  -  -  -  ;	This is automatically generated.
    3 00:45D0 -  -  -  -  ;
    4 00:45D0 -  -  -  -  ErrorIDTable:
    5 00:45D0 08 46 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:45D4 0E 46 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:45D8 1F 46 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:45DC 2D 46 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:45E0 37 46 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:45E4 51 46 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:45E8 62 46 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:45EC 70 46 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:45F0 7E 46 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 00:45F4 94 46 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 00:45F8 A2 46 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 00:45FC A7 46 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 00:4600 B4 46 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 00:4604 C5 46 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 00:4608 -  -  -  -  
   20 00:4608 -  -  -  -  ErrText_warmstart:
   21 00:4608 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 00:460E -  -  -  -  ErrText_assert:
   23 00:460E 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 00:461F -  -  -  -  ErrText_badtype:
   25 00:461F 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 00:462D -  -  -  -  ErrText_badvalue:
   27 00:462D 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 00:4637 -  -  -  -  ErrText_disabled:
   29 00:4637 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 00:4651 -  -  -  -  ErrText_divzero:
   31 00:4651 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 00:4662 -  -  -  -  ErrText_memory:
   33 00:4662 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 00:4670 -  -  -  -  ErrText_nocomma:
   35 00:4670 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 00:467E -  -  -  -  ErrText_norbracket:
   37 00:467E 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 00:4694 -  -  -  -  ErrText_notref:
   39 00:4694 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 00:46A2 -  -  -  -  ErrText_stop:
   41 00:46A2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 00:46A7 -  -  -  -  ErrText_syntax:
   43 00:46A7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 00:46B4 -  -  -  -  ErrText_todo:
   45 00:46B4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 00:46C5 -  -  -  -  ErrText_unknownvar:
   47 00:46C5 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   40 00:46D6 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:46D6 -  -  -  -  ;
    2 00:46D6 -  -  -  -  ;	Vectors for set 0
    3 00:46D6 -  -  -  -  ;
    4 00:46D6 -  -  -  -  VectorsSet0:
    5 00:46D6 C1 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:46D8 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:46DA 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:46DC 30 42 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:46DE 38 42 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:46E0 EE 41 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:46E2 F9 41 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:46E4 04 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:46E6 D8 41 -  -  	addr(ALUAdd)                     ; $0088 +
   14 00:46E8 E3 41 -  -  	addr(ALUSubtract)                ; $0089 -
   15 00:46EA 8B 42 -  -  	addr(ALUCompareGreaterEqual)     ; $008a >=
   16 00:46EC 82 42 -  -  	addr(ALUCompareLessEqual)        ; $008b <=
   17 00:46EE 70 42 -  -  	addr(ALUCompareGreater)          ; $008c >
   18 00:46F0 67 42 -  -  	addr(ALUCompareLess)             ; $008d <
   19 00:46F2 5E 42 -  -  	addr(ALUCompareEqual)            ; $008e =
   20 00:46F4 79 42 -  -  	addr(ALUCompareNotEqual)         ; $008f <>
   21 00:46F6 0F 42 -  -  	addr(ALUAnd)                     ; $0090 and
   22 00:46F8 1A 42 -  -  	addr(ALUOr)                      ; $0091 or
   23 00:46FA 25 42 -  -  	addr(ALUXor)                     ; $0092 eor
   24 00:46FC 67 44 -  -  	addr(Unary_Ampersand)            ; $0093 &
   25 00:46FE 61 44 -  -  	addr(Unary_Brackets)             ; $0094 (
   26 00:4700 1F 40 -  -  	addr(Unimplemented)              ; $0095 $
   27 00:4702 1F 40 -  -  	addr(Unimplemented)              ; $0096 rnd
   28 00:4704 1F 40 -  -  	addr(Unimplemented)              ; $0097 len
   29 00:4706 1F 40 -  -  	addr(Unimplemented)              ; $0098 abs
   30 00:4708 1F 40 -  -  	addr(Unimplemented)              ; $0099 sgn
   31 00:470A 1F 40 -  -  	addr(Unimplemented)              ; $009a int
   32 00:470C 1F 40 -  -  	addr(Unimplemented)              ; $009b str$
   33 00:470E 1F 40 -  -  	addr(Unimplemented)              ; $009c asc
   34 00:4710 56 44 -  -  	addr(Unary_Page)                 ; $009d page
   35 00:4712 B8 40 -  -  	addr(BadCmd_RBracket)            ; $009e )
   36 00:4714 B8 40 -  -  	addr(BadCmd_Comma)               ; $009f ,
   37 00:4716 BB 40 -  -  	addr(Command_Colon)              ; $00a0 :
   38 00:4718 B8 40 -  -  	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 00:471A D4 40 -  -  	addr(Command_REM2)               ; $00a2 '
   40 00:471C 1F 40 -  -  	addr(Unimplemented)              ; $00a3 repeat
   41 00:471E 1F 40 -  -  	addr(Unimplemented)              ; $00a4 until
   42 00:4720 1F 40 -  -  	addr(Unimplemented)              ; $00a5 if
   43 00:4722 B8 40 -  -  	addr(BadCmd_Then)                ; $00a6 then
   44 00:4724 1F 40 -  -  	addr(Unimplemented)              ; $00a7 else
   45 00:4726 1F 40 -  -  	addr(Unimplemented)              ; $00a8 for
   46 00:4728 B8 40 -  -  	addr(BadCmd_To)                  ; $00a9 to
   47 00:472A 1F 40 -  -  	addr(Unimplemented)              ; $00aa step
   48 00:472C 1F 40 -  -  	addr(Unimplemented)              ; $00ab next
   49 00:472E B8 40 -  -  	addr(BadCmd_Defproc)             ; $00ac def
   50 00:4730 1F 40 -  -  	addr(Unimplemented)              ; $00ad proc
   51 00:4732 1F 40 -  -  	addr(Unimplemented)              ; $00ae endproc
   52 00:4734 1F 40 -  -  	addr(Unimplemented)              ; $00af local
   53 00:4736 1F 40 -  -  	addr(Unimplemented)              ; $00b0 dim
   54 00:4738 D4 40 -  -  	addr(Command_REM)                ; $00b1 rem
   55 00:473A 1F 40 -  -  	addr(Unimplemented)              ; $00b2 let
   56 00:473C 1F 40 -  -  	addr(Unimplemented)              ; $00b3 vdu
   57 00:473E 1F 40 -  -  	addr(Unimplemented)              ; $00b4 print
   58 00:4740 1F 40 -  -  	addr(Unimplemented)              ; $00b5 load
   59 00:4742 1F 40 -  -  	addr(Unimplemented)              ; $00b6 save
   60 00:4744 1F 40 -  -  	addr(Unimplemented)              ; $00b7 list
   61 00:4746 AA 44 -  -  	addr(Command_NEW)                ; $00b8 new
   62 00:4748 EF 40 -  -  	addr(Command_RUN)                ; $00b9 run
   63 00:474A 1F 40 -  -  	addr(Unimplemented)              ; $00ba read
   64 00:474C 1F 40 -  -  	addr(Unimplemented)              ; $00bb data
   65 00:474E 1F 40 -  -  	addr(Unimplemented)              ; $00bc restore
   66 00:4750 A9 40 -  -  	addr(Command_ASSERT)             ; $00bd assert
   67 00:4752 74 44 -  -  	addr(Command_CLEAR)              ; $00be clear
   68 00:4754 BC 40 -  -  	addr(Command_END)                ; $00bf end
   69 00:4756 4C 41 -  -  	addr(Command_STOP)               ; $00c0 stop
   70 00:4758 -  -  -  -  ;
   71 00:4758 -  -  -  -  ;	Vectors for set 1
   72 00:4758 -  -  -  -  ;
   73 00:4758 -  -  -  -  VectorsSet1:
   74 00:4758 -  -  -  -  ;
   75 00:4758 -  -  -  -  ;	Vectors for set 2
   76 00:4758 -  -  -  -  ;
   77 00:4758 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   41 00:4758 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4758 -  -  -  -  ; ***************************************************************************************
    2 00:4758 -  -  -  -  ; ***************************************************************************************
    3 00:4758 -  -  -  -  ;
    4 00:4758 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4758 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4758 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4758 -  -  -  -  ;		Reviewed :	No
    8 00:4758 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4758 -  -  -  -  ;
   10 00:4758 -  -  -  -  ; ***************************************************************************************
   11 00:4758 -  -  -  -  ; ***************************************************************************************
   12 00:4758 -  -  -  -  
   13 00:4758 -  -  -  -  ; ***************************************************************************************
   14 00:4758 -  -  -  -  ;
   15 00:4758 -  -  -  -  ;								Unsigned integer divide
   16 00:4758 -  -  -  -  ;
   17 00:4758 -  -  -  -  ; ***************************************************************************************
   18 00:4758 -  -  -  -  
   19 00:4758 -  -  -  -  Int32UDivide:
   20 00:4758 37 -  -  -  		scf
   21 00:4759 C3 97 47 -  		jp 		_I32UnsignedDivide		
   22 00:475C -  -  -  -  
   23 00:475C -  -  -  -  ; ***************************************************************************************
   24 00:475C -  -  -  -  ;
   25 00:475C -  -  -  -  ;							Signed integer divide/Modulus
   26 00:475C -  -  -  -  ;
   27 00:475C -  -  -  -  ; ***************************************************************************************
   28 00:475C -  -  -  -  
   29 00:475C -  -  -  -  Int32SDivide:
   30 00:475C 37 -  -  -  		scf
   31 00:475D 18 01 -  -  		jr 		_I32SDivide
   32 00:475F -  -  -  -  Int32Modulus:
   33 00:475F AF -  -  -  		xor 	a
   34 00:4760 -  -  -  -  _I32SDivide:
   35 00:4760 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4761 F5 -  -  -  		push 	af
   37 00:4762 08 -  -  -  		ex 		af,af'
   38 00:4763 -  -  -  -  
   39 00:4763 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4764 D9 -  -  -  		exx
   41 00:4765 D5 -  -  -  		push 	de
   42 00:4766 D9 -  -  -  		exx
   43 00:4767 -  -  -  -  
   44 00:4767 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4768 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4769 CD 85 47 -  		call 	_I32CheckHLSignSwap
   47 00:476C CD 85 47 -  		call 	_I32CheckHLSignSwap
   48 00:476F 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4770 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4771 F5 -  -  -  		push 	af
   51 00:4772 CD 97 47 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4775 F1 -  -  -  		pop 	af 							; get function back
   53 00:4776 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4778 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4779 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:477B C4 E0 48 -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:477E -  -  -  -  _I32SDExit:
   58 00:477E D9 -  -  -  		exx 								; restore DE'DE
   59 00:477F D1 -  -  -  		pop 	de
   60 00:4780 D9 -  -  -  		exx
   61 00:4781 D1 -  -  -  		pop 	de
   62 00:4782 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4783 08 -  -  -  		ex 		af,af'
   64 00:4784 C9 -  -  -  		ret
   65 00:4785 -  -  -  -  
   66 00:4785 -  -  -  -  
   67 00:4785 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4785 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4786 CB 7C -  -  		bit 	7,h
   70 00:4788 D9 -  -  -  		exx
   71 00:4789 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:478B -  -  -  -  		;
   73 00:478B C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:478D F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:478E CD E0 48 -  		call 	Int32Negate 				
   76 00:4791 F1 -  -  -  		pop 	af
   77 00:4792 -  -  -  -  _I32CHSPositive:
   78 00:4792 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4793 EB -  -  -  		ex 		de,hl
   80 00:4794 D9 -  -  -  		exx		
   81 00:4795 EB -  -  -  		ex 		de,hl
   82 00:4796 C9 -  -  -  		ret
   83 00:4797 -  -  -  -  
   84 00:4797 -  -  -  -  ; ***************************************************************************************
   85 00:4797 -  -  -  -  ;
   86 00:4797 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4797 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4797 -  -  -  -  ;
   89 00:4797 -  -  -  -  ; ***************************************************************************************
   90 00:4797 -  -  -  -  
   91 00:4797 -  -  -  -  _I32UnsignedDivide:
   92 00:4797 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4798 D5 -  -  -  		push 	de
   94 00:4799 D9 -  -  -  		exx
   95 00:479A C5 -  -  -  		push 	bc
   96 00:479B D5 -  -  -  		push 	de 							
   97 00:479C D9 -  -  -  		exx
   98 00:479D -  -  -  -  
   99 00:479D F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:479E -  -  -  -  
  101 00:479E 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:479F B3 -  -  -  		or 		e
  103 00:47A0 D9 -  -  -  		exx
  104 00:47A1 B2 -  -  -  		or 		d
  105 00:47A2 B3 -  -  -  		or 		e
  106 00:47A3 D9 -  -  -  		exx
  107 00:47A4 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:47A7 -  -  -  -  
  109 00:47A7 -  -  -  -  
  110 00:47A7 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:47A8 4D -  -  -  		ld		c,l
  112 00:47A9 21 00 00 -  		ld 		hl,$0000
  113 00:47AC D9 -  -  -  		exx
  114 00:47AD 44 -  -  -  		ld 		b,h
  115 00:47AE 4D -  -  -  		ld		c,l
  116 00:47AF 21 00 00 -  		ld 		hl,$0000
  117 00:47B2 D9 -  -  -  		exx
  118 00:47B3 -  -  -  -  
  119 00:47B3 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:47B5 -  -  -  -  _I32DivideLoop:
  121 00:47B5 F5 -  -  -  		push 	af
  122 00:47B6 -  -  -  -  
  123 00:47B6 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:47B8 CB 10 -  -  		rl 		b
  125 00:47BA D9 -  -  -  		exx
  126 00:47BB CB 11 -  -  		rl 		c
  127 00:47BD CB 10 -  -  		rl 		b
  128 00:47BF D9 -  -  -  		exx
  129 00:47C0 CB 15 -  -  		rl 		l
  130 00:47C2 CB 14 -  -  		rl 		h
  131 00:47C4 D9 -  -  -  		exx
  132 00:47C5 CB 15 -  -  		rl 		l
  133 00:47C7 CB 14 -  -  		rl 		h
  134 00:47C9 D9 -  -  -  		exx
  135 00:47CA -  -  -  -  
  136 00:47CA CD 86 48 -  		call 	Int32Subtract 				; A = A - M
  137 00:47CD 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:47CF -  -  -  -  
  139 00:47CF 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:47D0 18 03 -  -  		jr 		_I32Next
  141 00:47D2 -  -  -  -  
  142 00:47D2 -  -  -  -  _I32Borrow:
  143 00:47D2 CD 80 48 -  		call 	Int32Add 					; A = A + M
  144 00:47D5 -  -  -  -  _I32Next:
  145 00:47D5 F1 -  -  -  		pop 	af
  146 00:47D6 3D -  -  -  		dec 	a
  147 00:47D7 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:47D9 -  -  -  -  
  149 00:47D9 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:47DA -  -  -  -  
  151 00:47DA 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:47DB 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:47DD -  -  -  -  
  154 00:47DD 60 -  -  -  		ld  	h,b
  155 00:47DE 69 -  -  -  		ld 		l,c
  156 00:47DF D9 -  -  -  		exx
  157 00:47E0 60 -  -  -  		ld  	h,b
  158 00:47E1 69 -  -  -  		ld 		l,c
  159 00:47E2 D9 -  -  -  		exx
  160 00:47E3 -  -  -  -  _I32Modulus1:		
  161 00:47E3 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:47E4 D1 -  -  -  		pop 	de
  163 00:47E5 C1 -  -  -  		pop 	bc
  164 00:47E6 D9 -  -  -  		exx
  165 00:47E7 D1 -  -  -  		pop 	de
  166 00:47E8 C1 -  -  -  		pop 	bc
  167 00:47E9 C9 -  -  -  		ret
  168 00:47EA -  -  -  -  
  169 00:47EA -  -  -  -  ; ***************************************************************************************
  170 00:47EA -  -  -  -  ;
  171 00:47EA -  -  -  -  ;									Changes and Updates
  172 00:47EA -  -  -  -  ;
  173 00:47EA -  -  -  -  ; ***************************************************************************************
  174 00:47EA -  -  -  -  ;
  175 00:47EA -  -  -  -  ;		Date			Notes
  176 00:47EA -  -  -  -  ;		==== 			=====
  177 00:47EA -  -  -  -  ;
  178 00:47EA -  -  -  -  ; ***************************************************************************************
  179 00:47EA -  -  -  -  		
Listing for file "_build.asm"
   42 00:47EA -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:47EA -  -  -  -  ; ***************************************************************************************
    2 00:47EA -  -  -  -  ; ***************************************************************************************
    3 00:47EA -  -  -  -  ;
    4 00:47EA -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:47EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47EA -  -  -  -  ;		Reviewed :	No
    8 00:47EA -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:47EA -  -  -  -  ;
   10 00:47EA -  -  -  -  ; ***************************************************************************************
   11 00:47EA -  -  -  -  ; ***************************************************************************************
   12 00:47EA -  -  -  -  
   13 00:47EA -  -  -  -  ; ***************************************************************************************
   14 00:47EA -  -  -  -  ;
   15 00:47EA -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:47EA -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:47EA -  -  -  -  ;
   18 00:47EA -  -  -  -  ; ***************************************************************************************
   19 00:47EA -  -  -  -  
   20 00:47EA -  -  -  -  Int32FromString:
   21 00:47EA C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:47EB D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:47EC D5 -  -  -  		push 	de
   24 00:47ED D9 -  -  -  		exx
   25 00:47EE D5 -  -  -  		push 	de
   26 00:47EF -  -  -  -  
   27 00:47EF 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:47F2 11 00 00 -  		ld 		de,$0000
   29 00:47F5 D9 -  -  -  		exx
   30 00:47F6 21 00 00 -  		ld 		hl,$0000
   31 00:47F9 11 00 00 -  		ld 		de,$0000
   32 00:47FC D9 -  -  -  		exx
   33 00:47FD -  -  -  -  
   34 00:47FD 5F -  -  -  		ld 		e,a 						; base in E
   35 00:47FE CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4800 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4802 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4804 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4805 -  -  -  -  		;
   40 00:4805 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4806 F5 -  -  -  		push 	af
   42 00:4807 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4809 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:480A 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:480C 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:480D 18 01 -  -  		jr 		_I32FSMain
   47 00:480F -  -  -  -  _I32FSNotSigned:		
   48 00:480F E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4810 -  -  -  -  		;
   50 00:4810 -  -  -  -  		; 		Main conversion loop.
   51 00:4810 -  -  -  -  		; 		
   52 00:4810 -  -  -  -  _I32FSMain:		
   53 00:4810 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4811 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4813 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4815 D6 20 -  -  		sub 	32
   57 00:4817 -  -  -  -  _I32FSNotLower:
   58 00:4817 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4819 38 21 -  -  		jr 		c,_I32FSExit
   60 00:481B FE 3A -  -  		cp 		'9'+1
   61 00:481D 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:481F FE 41 -  -  		cp 		'A'
   63 00:4821 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4823 FE 47 -  -  		cp 		'F'+1
   65 00:4825 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4827 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4829 -  -  -  -  _I32FSOkay:
   68 00:4829 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:482B BB -  -  -  		cp 		e 							; fail if >= base
   70 00:482C 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:482E 03 -  -  -  		inc 	bc 							; consume character
   72 00:482F D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4830 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4831 CD 4A 48 -  		call 	Int32Multiply 				; result *= base
   75 00:4834 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4835 5F -  -  -  		ld 		e,a
   77 00:4836 CD 80 48 -  		call 	Int32Add 					; and add it.
   78 00:4839 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:483A 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:483C -  -  -  -  
   81 00:483C -  -  -  -  _I32FSExit:
   82 00:483C F1 -  -  -  		pop 	af 							; get sign back
   83 00:483D FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:483F CC E0 48 -  		call 	z,Int32Negate
   85 00:4842 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4843 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4844 D9 -  -  -  		exx
   88 00:4845 D1 -  -  -  		pop 	de
   89 00:4846 D9 -  -  -  		exx
   90 00:4847 C1 -  -  -  		pop 	bc
   91 00:4848 B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 00:4849 C9 -  -  -  		ret				
   93 00:484A -  -  -  -  
   94 00:484A -  -  -  -  ; ***************************************************************************************
   95 00:484A -  -  -  -  ;
   96 00:484A -  -  -  -  ;									Changes and Updates
   97 00:484A -  -  -  -  ;
   98 00:484A -  -  -  -  ; ***************************************************************************************
   99 00:484A -  -  -  -  ;
  100 00:484A -  -  -  -  ;		Date			Notes
  101 00:484A -  -  -  -  ;		==== 			=====
  102 00:484A -  -  -  -  ;
  103 00:484A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:484A -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:484A -  -  -  -  ; ***************************************************************************************
    2 00:484A -  -  -  -  ; ***************************************************************************************
    3 00:484A -  -  -  -  ;
    4 00:484A -  -  -  -  ;		Name : 		imultiply.asm
    5 00:484A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:484A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:484A -  -  -  -  ;		Reviewed :	No
    8 00:484A -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:484A -  -  -  -  ;
   10 00:484A -  -  -  -  ; ***************************************************************************************
   11 00:484A -  -  -  -  ; ***************************************************************************************
   12 00:484A -  -  -  -  
   13 00:484A -  -  -  -  Int32Multiply:
   14 00:484A C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:484B D5 -  -  -  		push 	de
   16 00:484C 44 -  -  -  		ld 		b,h
   17 00:484D 4D -  -  -  		ld 		c,l
   18 00:484E 21 00 00 -  		ld 		hl,$0000
   19 00:4851 -  -  -  -  
   20 00:4851 D9 -  -  -  		exx
   21 00:4852 C5 -  -  -  		push 	bc
   22 00:4853 D5 -  -  -  		push 	de
   23 00:4854 44 -  -  -  		ld 		b,h
   24 00:4855 4D -  -  -  		ld 		c,l
   25 00:4856 21 00 00 -  		ld 		hl,$0000		
   26 00:4859 D9 -  -  -  		exx
   27 00:485A -  -  -  -  
   28 00:485A -  -  -  -  _I32MultiplyLoop:
   29 00:485A CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:485C C4 80 48 -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:485F -  -  -  -  		;
   32 00:485F D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4860 CB 38 -  -  		srl 	b
   34 00:4862 CB 19 -  -  		rr 		c
   35 00:4864 D9 -  -  -  		exx
   36 00:4865 CB 18 -  -  		rr 		b
   37 00:4867 CB 19 -  -  		rr 		c
   38 00:4869 -  -  -  -  		;
   39 00:4869 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:486B CB 12 -  -  		rl 		d
   41 00:486D D9 -  -  -  		exx
   42 00:486E CB 13 -  -  		rl 		e
   43 00:4870 CB 12 -  -  		rl 		d
   44 00:4872 -  -  -  -  
   45 00:4872 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4873 B1 -  -  -  		or 		c
   47 00:4874 D9 -  -  -  		exx
   48 00:4875 B0 -  -  -  		or 		b
   49 00:4876 B1 -  -  -  		or 		c
   50 00:4877 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4879 -  -  -  -  
   52 00:4879 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:487A D1 -  -  -  		pop 	de
   54 00:487B C1 -  -  -  		pop 	bc
   55 00:487C D9 -  -  -  		exx
   56 00:487D D1 -  -  -  		pop 	de
   57 00:487E C1 -  -  -  		pop 	bc
   58 00:487F C9 -  -  -  		ret
   59 00:4880 -  -  -  -  
   60 00:4880 -  -  -  -  ; ***************************************************************************************
   61 00:4880 -  -  -  -  ;
   62 00:4880 -  -  -  -  ;									Changes and Updates
   63 00:4880 -  -  -  -  ;
   64 00:4880 -  -  -  -  ; ***************************************************************************************
   65 00:4880 -  -  -  -  ;
   66 00:4880 -  -  -  -  ;		Date			Notes
   67 00:4880 -  -  -  -  ;		==== 			=====
   68 00:4880 -  -  -  -  ;
   69 00:4880 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:4880 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4880 -  -  -  -  ; ***************************************************************************************
    2 00:4880 -  -  -  -  ; ***************************************************************************************
    3 00:4880 -  -  -  -  ;
    4 00:4880 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4880 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4880 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4880 -  -  -  -  ;		Reviewed :	No
    8 00:4880 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4880 -  -  -  -  ;
   10 00:4880 -  -  -  -  ; ***************************************************************************************
   11 00:4880 -  -  -  -  ; ***************************************************************************************
   12 00:4880 -  -  -  -  
   13 00:4880 -  -  -  -  ; ***************************************************************************************
   14 00:4880 -  -  -  -  ;
   15 00:4880 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4880 -  -  -  -  ;
   17 00:4880 -  -  -  -  ; ***************************************************************************************
   18 00:4880 -  -  -  -  
   19 00:4880 -  -  -  -  Int32Add:
   20 00:4880 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4881 D9 -  -  -  		exx
   22 00:4882 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4884 D9 -  -  -  		exx
   24 00:4885 C9 -  -  -  		ret
   25 00:4886 -  -  -  -  
   26 00:4886 -  -  -  -  ; ***************************************************************************************
   27 00:4886 -  -  -  -  ;
   28 00:4886 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4886 -  -  -  -  ;
   30 00:4886 -  -  -  -  ; ***************************************************************************************
   31 00:4886 -  -  -  -  
   32 00:4886 -  -  -  -  Int32Subtract:
   33 00:4886 AF -  -  -  		xor 	a 							; clear carry
   34 00:4887 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4889 D9 -  -  -  		exx
   36 00:488A ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:488C D9 -  -  -  		exx
   38 00:488D C9 -  -  -  		ret
   39 00:488E -  -  -  -  
   40 00:488E -  -  -  -  ; ***************************************************************************************
   41 00:488E -  -  -  -  ;
   42 00:488E -  -  -  -  ;								And DE'DE into HL'HL
   43 00:488E -  -  -  -  ;
   44 00:488E -  -  -  -  ; ***************************************************************************************
   45 00:488E -  -  -  -  
   46 00:488E -  -  -  -  Int32And:
   47 00:488E D9 -  -  -  		exx
   48 00:488F CD 93 48 -  		call 	_I32AndHLDE
   49 00:4892 D9 -  -  -  		exx
   50 00:4893 -  -  -  -  _I32AndHLDE:		
   51 00:4893 7C -  -  -  		ld 		a,h
   52 00:4894 A2 -  -  -  		and 	d
   53 00:4895 67 -  -  -  		ld 		h,a
   54 00:4896 7D -  -  -  		ld 		a,l
   55 00:4897 A3 -  -  -  		and 	e
   56 00:4898 6F -  -  -  		ld 		l,a
   57 00:4899 C9 -  -  -  		ret
   58 00:489A -  -  -  -  
   59 00:489A -  -  -  -  ; ***************************************************************************************
   60 00:489A -  -  -  -  ;
   61 00:489A -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:489A -  -  -  -  ;
   63 00:489A -  -  -  -  ; ***************************************************************************************
   64 00:489A -  -  -  -  
   65 00:489A -  -  -  -  Int32Or:
   66 00:489A D9 -  -  -  		exx
   67 00:489B CD 9F 48 -  		call 	_I32OrHLDE
   68 00:489E D9 -  -  -  		exx
   69 00:489F -  -  -  -  _I32OrHLDE:		
   70 00:489F 7C -  -  -  		ld 		a,h
   71 00:48A0 B2 -  -  -  		or 		d
   72 00:48A1 67 -  -  -  		ld 		h,a
   73 00:48A2 7D -  -  -  		ld 		a,l
   74 00:48A3 B3 -  -  -  		or 		e
   75 00:48A4 6F -  -  -  		ld 		l,a
   76 00:48A5 C9 -  -  -  		ret
   77 00:48A6 -  -  -  -  
   78 00:48A6 -  -  -  -  ; ***************************************************************************************
   79 00:48A6 -  -  -  -  ;
   80 00:48A6 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:48A6 -  -  -  -  ;
   82 00:48A6 -  -  -  -  ; ***************************************************************************************
   83 00:48A6 -  -  -  -  
   84 00:48A6 -  -  -  -  Int32Xor:
   85 00:48A6 D9 -  -  -  		exx
   86 00:48A7 CD AB 48 -  		call 	_I32XorHLDE
   87 00:48AA D9 -  -  -  		exx
   88 00:48AB -  -  -  -  _I32XorHLDE:		
   89 00:48AB 7C -  -  -  		ld 		a,h
   90 00:48AC AA -  -  -  		xor 	d
   91 00:48AD 67 -  -  -  		ld 		h,a
   92 00:48AE 7D -  -  -  		ld 		a,l
   93 00:48AF AB -  -  -  		xor 	e
   94 00:48B0 6F -  -  -  		ld 		l,a
   95 00:48B1 C9 -  -  -  		ret
   96 00:48B2 -  -  -  -  
   97 00:48B2 -  -  -  -  ; ***************************************************************************************
   98 00:48B2 -  -  -  -  ;
   99 00:48B2 -  -  -  -  ;								 Check if HL'HL zero
  100 00:48B2 -  -  -  -  ;
  101 00:48B2 -  -  -  -  ; ***************************************************************************************
  102 00:48B2 -  -  -  -  
  103 00:48B2 -  -  -  -  Int32Zero:
  104 00:48B2 D9 -  -  -  		exx
  105 00:48B3 7D -  -  -  		ld 		a,l
  106 00:48B4 B4 -  -  -  		or 		h
  107 00:48B5 D9 -  -  -  		exx
  108 00:48B6 B5 -  -  -  		or 		l
  109 00:48B7 B4 -  -  -  		or 		h
  110 00:48B8 C9 -  -  -  		ret
  111 00:48B9 -  -  -  -  
  112 00:48B9 -  -  -  -  ; ***************************************************************************************
  113 00:48B9 -  -  -  -  ;
  114 00:48B9 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:48B9 -  -  -  -  ;
  116 00:48B9 -  -  -  -  ; ***************************************************************************************
  117 00:48B9 -  -  -  -  
  118 00:48B9 -  -  -  -  Int32Compare:
  119 00:48B9 E5 -  -  -  		push 	hl 							; save HL
  120 00:48BA AF -  -  -  		xor 	a 							; clear carry
  121 00:48BB ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:48BD D9 -  -  -  		exx
  123 00:48BE E5 -  -  -  		push 	hl 							; save HL'
  124 00:48BF ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:48C1 -  -  -  -  		;
  126 00:48C1 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:48C2 E2 C9 48 -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:48C5 78 -  -  -  		ld 		a,b
  129 00:48C6 EE 80 -  -  		xor 	$80
  130 00:48C8 47 -  -  -  		ld 		b,a
  131 00:48C9 -  -  -  -  _I32CNoOverflow:
  132 00:48C9 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:48CA B5 -  -  -  		or 		l
  134 00:48CB D9 -  -  -  		exx 
  135 00:48CC B4 -  -  -  		or 		h
  136 00:48CD B5 -  -  -  		or 		l
  137 00:48CE 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:48D0 -  -  -  -  		;
  139 00:48D0 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:48D1 CB 78 -  -  		bit 	7,b
  141 00:48D3 D9 -  -  -  		exx
  142 00:48D4 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:48D6 28 02 -  -  		jr 		z,_I32NotPos
  144 00:48D8 3E FF -  -  		ld 		a,$FF
  145 00:48DA -  -  -  -  _I32NotPos:
  146 00:48DA D9 -  -  -  		exx
  147 00:48DB E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:48DC D9 -  -  -  		exx
  149 00:48DD E1 -  -  -  		pop 	hl 							; restore HL
  150 00:48DE B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:48DF C9 -  -  -  		ret
  152 00:48E0 -  -  -  -  
  153 00:48E0 -  -  -  -  ; ***************************************************************************************
  154 00:48E0 -  -  -  -  ;
  155 00:48E0 -  -  -  -  ;										Negate HL'HL
  156 00:48E0 -  -  -  -  ;
  157 00:48E0 -  -  -  -  ; ***************************************************************************************
  158 00:48E0 -  -  -  -  
  159 00:48E0 -  -  -  -  Int32Negate:
  160 00:48E0 AF -  -  -  		xor 	a
  161 00:48E1 CD EA 48 -  		call 	_I32NSubtract
  162 00:48E4 D9 -  -  -  		exx
  163 00:48E5 CD EA 48 -  		call 	_I32NSubtract
  164 00:48E8 D9 -  -  -  		exx
  165 00:48E9 C9 -  -  -  		ret
  166 00:48EA -  -  -  -  _I32NSubtract:
  167 00:48EA D5 -  -  -  		push 	de
  168 00:48EB EB -  -  -  		ex 		de,hl
  169 00:48EC 21 00 00 -  		ld 		hl,$0000
  170 00:48EF ED 52 -  -  		zm_sbc_hlde_16		
  171 00:48F1 D1 -  -  -  		pop 	de
  172 00:48F2 C9 -  -  -  		ret
  173 00:48F3 -  -  -  -  		
  174 00:48F3 -  -  -  -  ; ***************************************************************************************
  175 00:48F3 -  -  -  -  ;
  176 00:48F3 -  -  -  -  ;									Changes and Updates
  177 00:48F3 -  -  -  -  ;
  178 00:48F3 -  -  -  -  ; ***************************************************************************************
  179 00:48F3 -  -  -  -  ;
  180 00:48F3 -  -  -  -  ;		Date			Notes
  181 00:48F3 -  -  -  -  ;		==== 			=====
  182 00:48F3 -  -  -  -  ;
  183 00:48F3 -  -  -  -  ; ***************************************************************************************
  184 00:48F3 -  -  -  -  		
Listing for file "_build.asm"
   45 00:48F3 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:48F3 -  -  -  -  ; ***************************************************************************************
    2 00:48F3 -  -  -  -  ; ***************************************************************************************
    3 00:48F3 -  -  -  -  ;
    4 00:48F3 -  -  -  -  ;		Name : 		itostring.asm
    5 00:48F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:48F3 -  -  -  -  ;		Reviewed :	No
    8 00:48F3 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:48F3 -  -  -  -  ;
   10 00:48F3 -  -  -  -  ; ***************************************************************************************
   11 00:48F3 -  -  -  -  ;
   12 00:48F3 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:48F3 -  -  -  -  ;
   14 00:48F3 -  -  -  -  ; ***************************************************************************************
   15 00:48F3 -  -  -  -  
   16 00:48F3 -  -  -  -  Int32ToString:
   17 00:48F3 C5 -  -  -  		push 	bc 							; save string start
   18 00:48F4 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:48F5 E5 -  -  -  		push 	hl
   20 00:48F6 11 00 00 -  		ld	 	de,$0000
   21 00:48F9 D9 -  -  -  		exx
   22 00:48FA D5 -  -  -  		push 	de
   23 00:48FB E5 -  -  -  		push 	hl
   24 00:48FC 11 00 00 -  		ld 		de,$000
   25 00:48FF D9 -  -  -  		exx
   26 00:4900 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4901 -  -  -  -  		;
   28 00:4901 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4903 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4905 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4907 5F -  -  -  		ld 		e,a
   32 00:4908 -  -  -  -  		;
   33 00:4908 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4909 CB 7C -  -  		bit 	7,h
   35 00:490B D9 -  -  -  		exx
   36 00:490C 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:490E -  -  -  -  		;
   38 00:490E CD E0 48 -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4911 -  -  -  -  		;
   40 00:4911 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4913 02 -  -  -  		ld 		(bc),a
   42 00:4914 03 -  -  -  		inc 	bc
   43 00:4915 -  -  -  -  _I32TSNotNegative:	
   44 00:4915 CD 22 49 -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4918 -  -  -  -  _I32TSExit:
   46 00:4918 AF -  -  -  		xor 	a  							; write the end of string code
   47 00:4919 02 -  -  -  		ld 		(bc),a 
   48 00:491A -  -  -  -  
   49 00:491A D9 -  -  -  		exx 								; restore registers and exit.
   50 00:491B E1 -  -  -  		pop 	hl
   51 00:491C D1 -  -  -  		pop 	de
   52 00:491D D9 -  -  -  		exx
   53 00:491E E1 -  -  -  		pop 	hl
   54 00:491F D1 -  -  -  		pop 	de
   55 00:4920 C1 -  -  -  		pop 	bc
   56 00:4921 C9 -  -  -  		ret
   57 00:4922 -  -  -  -  
   58 00:4922 -  -  -  -  _I32RecursiveConvert:
   59 00:4922 CD 58 47 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4925 F5 -  -  -  		push 	af 							; save remainder
   61 00:4926 CD B2 48 -  		call 	Int32Zero		 			; check result is non zero
   62 00:4929 C4 22 49 -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:492C F1 -  -  -  		pop 	af 							; restore remainder
   64 00:492D FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:492F 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4931 C6 07 -  -  		add 	a,7
   67 00:4933 -  -  -  -  _I32NotHex:
   68 00:4933 C6 30 -  -  		add 	a,48
   69 00:4935 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4936 03 -  -  -  		inc 	bc
   71 00:4937 C9 -  -  -  		ret		
   72 00:4938 -  -  -  -  
   73 00:4938 -  -  -  -  ; ***************************************************************************************
   74 00:4938 -  -  -  -  ;
   75 00:4938 -  -  -  -  ;									Changes and Updates
   76 00:4938 -  -  -  -  ;
   77 00:4938 -  -  -  -  ; ***************************************************************************************
   78 00:4938 -  -  -  -  ;
   79 00:4938 -  -  -  -  ;		Date			Notes
   80 00:4938 -  -  -  -  ;		==== 			=====
   81 00:4938 -  -  -  -  ;
   82 00:4938 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:4938 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4938 -  -  -  -  ; ***************************************************************************************
    2 00:4938 -  -  -  -  ; ***************************************************************************************
    3 00:4938 -  -  -  -  ;
    4 00:4938 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4938 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4938 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4938 -  -  -  -  ;		Reviewed :	No
    8 00:4938 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4938 -  -  -  -  ;
   10 00:4938 -  -  -  -  ; ***************************************************************************************
   11 00:4938 -  -  -  -  ; ***************************************************************************************
   12 00:4938 -  -  -  -  
   13 00:4938 -  -  -  -  #ifdef AQUARIUS
   14 00:4938 -  -  -  -  
   15 00:4938 -  -  -  -  ; ***************************************************************************************
   16 00:4938 -  -  -  -  ;
   17 00:4938 -  -  -  -  ;								Initialise system stuff
   18 00:4938 -  -  -  -  ;
   19 00:4938 -  -  -  -  ; ***************************************************************************************
   20 00:4938 -  -  -  -  
   21 00:4938 -  -  -  -  SYSInitialise:
   22 00:4938 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:493A CD 40 49 -  	call 	SYSPrintChar
   24 00:493D C9 -  -  -  	ret
   25 00:493E -  -  -  -  
   26 00:493E -  -  -  -  ; ***************************************************************************************
   27 00:493E -  -  -  -  ;
   28 00:493E -  -  -  -  ;								Terminate system stuff
   29 00:493E -  -  -  -  ;
   30 00:493E -  -  -  -  ; ***************************************************************************************
   31 00:493E -  -  -  -  
   32 00:493E -  -  -  -  SYSTerminate:
   33 00:493E 18 FE -  -  	jr 		SYSTerminate
   34 00:4940 -  -  -  -  
   35 00:4940 -  -  -  -  ; ***************************************************************************************
   36 00:4940 -  -  -  -  ;
   37 00:4940 -  -  -  -  ;								Print A character
   38 00:4940 -  -  -  -  ;
   39 00:4940 -  -  -  -  ; ***************************************************************************************
   40 00:4940 -  -  -  -  
   41 00:4940 -  -  -  -  SYSPrintChar:
   42 00:4940 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4941 C5 -  -  -  	push 	bc
   44 00:4942 D5 -  -  -  	push 	de
   45 00:4943 E5 -  -  -  	push 	hl
   46 00:4944 DD E5 -  -  	push 	ix
   47 00:4946 FD E5 -  -  	push 	iy
   48 00:4948 D9 -  -  -  	exx
   49 00:4949 C5 -  -  -  	push 	bc
   50 00:494A D5 -  -  -  	push 	de
   51 00:494B E5 -  -  -  	push 	hl
   52 00:494C CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:494F E1 -  -  -  	pop 	hl
   54 00:4950 D1 -  -  -  	pop 	de
   55 00:4951 C1 -  -  -  	pop 	bc
   56 00:4952 D9 -  -  -  	exx
   57 00:4953 FD E1 -  -  	pop 	iy
   58 00:4955 DD E1 -  -  	pop 	ix
   59 00:4957 E1 -  -  -  	pop 	hl
   60 00:4958 D1 -  -  -  	pop 	de
   61 00:4959 C1 -  -  -  	pop 	bc
   62 00:495A F1 -  -  -  	pop 	af
   63 00:495B C9 -  -  -  	ret		
   64 00:495C -  -  -  -  
   65 00:495C -  -  -  -  ; ***************************************************************************************
   66 00:495C -  -  -  -  ;
   67 00:495C -  -  -  -  ;									Print Newline
   68 00:495C -  -  -  -  ;
   69 00:495C -  -  -  -  ; ***************************************************************************************
   70 00:495C -  -  -  -  
   71 00:495C -  -  -  -  SYSPrintCRLF:
   72 00:495C F5 -  -  -  	push 	af
   73 00:495D 3E 0D -  -  	ld 		a,13
   74 00:495F CD 40 49 -  	call 	SYSPrintChar
   75 00:4962 3E 0A -  -  	ld 		a,10
   76 00:4964 CD 40 49 -  	call 	SYSPrintChar
   77 00:4967 F1 -  -  -  	pop 	af
   78 00:4968 C9 -  -  -  	ret
   79 00:4969 -  -  -  -  
   80 00:4969 -  -  -  -  #endif
   81 00:4969 -  -  -  -  
   82 00:4969 -  -  -  -  ; ***************************************************************************************
   83 00:4969 -  -  -  -  ;
   84 00:4969 -  -  -  -  ;									Changes and Updates
   85 00:4969 -  -  -  -  ;
   86 00:4969 -  -  -  -  ; ***************************************************************************************
   87 00:4969 -  -  -  -  ;
   88 00:4969 -  -  -  -  ;		Date			Notes
   89 00:4969 -  -  -  -  ;		==== 			=====
   90 00:4969 -  -  -  -  ;
   91 00:4969 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:4969 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4969 -  -  -  -  ; ***************************************************************************************
    2 00:4969 -  -  -  -  ; ***************************************************************************************
    3 00:4969 -  -  -  -  ;
    4 00:4969 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4969 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4969 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4969 -  -  -  -  ;		Reviewed :	No
    8 00:4969 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4969 -  -  -  -  ;
   10 00:4969 -  -  -  -  ; ***************************************************************************************
   11 00:4969 -  -  -  -  ; ***************************************************************************************
   12 00:4969 -  -  -  -  
   13 00:4969 -  -  -  -  #ifdef CLEANEZ80
   14 00:4969             
   15 00:4969             ; ***************************************************************************************
   16 00:4969             ;
   17 00:4969             ;								Initialise system stuff
   18 00:4969             ;
   19 00:4969             ; ***************************************************************************************
   20 00:4969             
   21 00:4969             SYSInitialise:
   22 00:4969             	ret
   23 00:4969             
   24 00:4969             ; ***************************************************************************************
   25 00:4969             ;
   26 00:4969             ;								Terminate system stuff
   27 00:4969             ;
   28 00:4969             ; ***************************************************************************************
   29 00:4969             
   30 00:4969             SYSTerminate:
   31 00:4969             	ret
   32 00:4969             
   33 00:4969             ; ***************************************************************************************
   34 00:4969             ;
   35 00:4969             ;								Print A character
   36 00:4969             ;
   37 00:4969             ; ***************************************************************************************
   38 00:4969             
   39 00:4969             SYSPrintChar:
   40 00:4969             	ret		
   41 00:4969             
   42 00:4969             ; ***************************************************************************************
   43 00:4969             ;
   44 00:4969             ;									Print Newline
   45 00:4969             ;
   46 00:4969             ; ***************************************************************************************
   47 00:4969             
   48 00:4969             SYSPrintCRLF:
   49 00:4969             	ret
   50 00:4969             
   51 00:4969             #endif
   52 00:4969 -  -  -  -  
   53 00:4969 -  -  -  -  ; ***************************************************************************************
   54 00:4969 -  -  -  -  ;
   55 00:4969 -  -  -  -  ;									Changes and Updates
   56 00:4969 -  -  -  -  ;
   57 00:4969 -  -  -  -  ; ***************************************************************************************
   58 00:4969 -  -  -  -  ;
   59 00:4969 -  -  -  -  ;		Date			Notes
   60 00:4969 -  -  -  -  ;		==== 			=====
   61 00:4969 -  -  -  -  ;
   62 00:4969 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:4969 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4969 -  -  -  -  ; ***************************************************************************************
    2 00:4969 -  -  -  -  ; ***************************************************************************************
    3 00:4969 -  -  -  -  ;
    4 00:4969 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4969 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4969 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4969 -  -  -  -  ;		Reviewed :	No
    8 00:4969 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4969 -  -  -  -  ;
   10 00:4969 -  -  -  -  ; ***************************************************************************************
   11 00:4969 -  -  -  -  ; ***************************************************************************************
   12 00:4969 -  -  -  -  
   13 00:4969 -  -  -  -  #ifdef TI84
   14 00:4969             
   15 00:4969             ; ***************************************************************************************
   16 00:4969             ;
   17 00:4969             ;								Initialise system stuff
   18 00:4969             ;
   19 00:4969             ; ***************************************************************************************
   20 00:4969             
   21 00:4969             SYSInitialise:
   22 00:4969             	di
   23 00:4969             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4969             	ld 		(_IYTemp84),iy
   25 00:4969             	ret
   26 00:4969             
   27 00:4969             ; ***************************************************************************************
   28 00:4969             ;
   29 00:4969             ;								Terminate system stuff
   30 00:4969             ;
   31 00:4969             ; ***************************************************************************************
   32 00:4969             
   33 00:4969             SYSTerminate:
   34 00:4969             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4969             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4969             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4969             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4969             	ei
   39 00:4969             	ret 										; and exit.
   40 00:4969             
   41 00:4969             _StackTemp84:									; temp var for TI84 only.
   42 00:4969             	.dw 	0,0
   43 00:4969             _IYTemp84:
   44 00:4969             	.dw 	0,0		
   45 00:4969             
   46 00:4969             ; ***************************************************************************************
   47 00:4969             ;
   48 00:4969             ;								Print A character
   49 00:4969             ;
   50 00:4969             ; ***************************************************************************************
   51 00:4969             
   52 00:4969             SYSPrintChar:
   53 00:4969             	push 	af 									; we stack everything including alt registers
   54 00:4969             	push 	bc
   55 00:4969             	push 	de
   56 00:4969             	push 	hl
   57 00:4969             	push 	ix
   58 00:4969             	push 	iy
   59 00:4969             	exx
   60 00:4969             	push 	bc
   61 00:4969             	push 	de
   62 00:4969             	push 	hl
   63 00:4969             
   64 00:4969             	ld 		iy,(_IYTemp84)
   65 00:4969             	call 	_PutC 								; print A as character
   66 00:4969             	di
   67 00:4969             	ld 		(_IYTemp84),iy
   68 00:4969             
   69 00:4969             	pop 	hl
   70 00:4969             	pop 	de
   71 00:4969             	pop 	bc
   72 00:4969             	exx
   73 00:4969             	pop 	iy
   74 00:4969             	pop 	ix
   75 00:4969             	pop 	hl
   76 00:4969             	pop 	de
   77 00:4969             	pop 	bc
   78 00:4969             	pop 	af
   79 00:4969             	ret		
   80 00:4969             
   81 00:4969             ; ***************************************************************************************
   82 00:4969             ;
   83 00:4969             ;									Print Newline
   84 00:4969             ;
   85 00:4969             ; ***************************************************************************************
   86 00:4969             
   87 00:4969             SYSPrintCRLF:
   88 00:4969             	push 	af 									; we stack everything including alt registers
   89 00:4969             	push 	bc
   90 00:4969             	push 	de
   91 00:4969             	push 	hl
   92 00:4969             	push 	ix
   93 00:4969             	push 	iy
   94 00:4969             	exx
   95 00:4969             	push 	bc
   96 00:4969             	push 	de
   97 00:4969             	push 	hl
   98 00:4969             
   99 00:4969             	ld 		iy,(_IYTemp84)
  100 00:4969             	call 	_newline
  101 00:4969             	di
  102 00:4969             	ld 		(_IYTemp84),iy
  103 00:4969             
  104 00:4969             	pop 	hl
  105 00:4969             	pop 	de
  106 00:4969             	pop 	bc
  107 00:4969             	exx
  108 00:4969             	pop 	iy
  109 00:4969             	pop 	ix
  110 00:4969             	pop 	hl
  111 00:4969             	pop 	de
  112 00:4969             	pop 	bc
  113 00:4969             	pop 	af
  114 00:4969             	ret
  115 00:4969             
  116 00:4969             #endif
  117 00:4969 -  -  -  -  
  118 00:4969 -  -  -  -  ; ***************************************************************************************
  119 00:4969 -  -  -  -  ;
  120 00:4969 -  -  -  -  ;									Changes and Updates
  121 00:4969 -  -  -  -  ;
  122 00:4969 -  -  -  -  ; ***************************************************************************************
  123 00:4969 -  -  -  -  ;
  124 00:4969 -  -  -  -  ;		Date			Notes
  125 00:4969 -  -  -  -  ;		==== 			=====
  126 00:4969 -  -  -  -  ;
  127 00:4969 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:4969 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4969 -  -  -  -  ; ***************************************************************************************
    2 00:4969 -  -  -  -  ; ***************************************************************************************
    3 00:4969 -  -  -  -  ;
    4 00:4969 -  -  -  -  ;		Name : 		basic.asm
    5 00:4969 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4969 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4969 -  -  -  -  ;		Reviewed :	No
    8 00:4969 -  -  -  -  ;		Purpose :	Main program.
    9 00:4969 -  -  -  -  ;
   10 00:4969 -  -  -  -  ; ***************************************************************************************
   11 00:4969 -  -  -  -  ; ***************************************************************************************
   12 00:4969 -  -  -  -  
   13 00:4969 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:4C00 -  -  -  -  TestInstance:
   15 00:4C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4C00 -  -  -  -  ;
    2 00:4C00 -  -  -  -  ;	This code automatically generated.
    3 00:4C00 -  -  -  -  ;
    4 00:4C00 -  -  -  -  TestProgram:
    5 00:4C00 22 01 00 B1 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B1 3F 0C 
              53 65 65 64 
              20 3D 20 37 
              32 34 39 38 
              0D 80 0D 03 
              00 BD 94 9D 
              84 51 9E 8E 
              41 4C 80 14 
              04 00 BD 94 
              47 6A 5F 54 
              55 86 63 52 
              76 4D 6A 9E 
              8E 40 80 1C 
              05 00 BD 94 
              89 5F 77 48 
              57 43 92 89 
              41 70 78 44 
              4C 62 9E 8E 
              41 6F 4F 4C 
              5B 63 80 1C 
              06 00 BD 94 
              89 73 51 66 
              7F 78 85 89 
              41 52 54 43 
              4C 68 9E 8E 
              41 78 73 7E 
              5B 40 80 1A 
              07 00 BD 94 
              42 74 4F 6A 
              54 91 41 7B 
              6F 54 63 5B 
              9E 8E 41 7B 
              7F 5F 6B 5F 
              80 1A 08 00 
              BD 94 89 55 
              6A 72 55 73 
              89 65 5D 71 
              45 7F 9E 8E 
              89 7B 48 63 
              5B 72 80 1B 
              09 00 BD 94 
              89 41 49 51 
              66 4E 69 88 
              65 53 6F 4A 
              7C 9E 8E 89 
              63 7D 77 43 
              6D 80 19 0A 
              00 BD 94 41 
              50 44 5C 53 
              47 89 5A 4B 
              63 79 60 9E 
              8E 75 78 78 
              59 67 80 19 
              0B 00 BD 94 
              5A 47 76 6B 
              7C 90 41 62 
              42 4B 42 56 
              9E 8E 42 42 
              42 42 54 80 
              1B 0C 00 BD 
              94 41 4E 5F 
              59 4C 70 90 
              41 7B 47 4A 
              67 55 9E 8E 
              41 4A 47 48 
              44 50 80 1A 
              0D 00 BD 94 
              6A 4A 69 68 
              59 89 89 57 
              4F 7F 59 46 
              9E 8E 41 41 
              5A 69 41 5F 
              80 1C 0E 00 
              BD 94 89 41 
              5B 47 40 65 
              58 92 61 5F 
              73 45 42 9E 
              8E 89 41 7A 
              58 73 60 56 
              80 1C 0F 00 
              BD 94 41 4E 
              73 6C 77 42 
              88 89 41 6A 
              54 71 42 42 
              9E 8E 89 5B 
              61 44 4B 40 
              80 1D 10 00 
              BD 94 89 41 
              43 40 56 5D 
              5A 88 89 41 
              4E 61 73 5C 
              60 9E 8E 41 
              6E 5D 76 46 
              46 80 11 11 
              00 BD 94 9D 
              83 53 9E 8E 
              41 51 54 44 
              7D 4E 80 1B 
              12 00 BD 94 
              89 5B 59 4D 
              56 5C 85 89 
              41 73 4E 68 
              4F 4D 9E 8E 
              42 59 5E 47 
              6C 80 1A 13 
              00 BD 94 89 
              48 5C 44 71 
              49 89 89 7A 
              51 45 6A 72 
              9E 8E 71 75 
              40 79 69 80 
              18 14 00 BD 
              94 41 46 72 
              7F 44 57 87 
              51 6B 59 48 
              6A 9E 8E 45 
              5A 61 6F 80 
              1A 15 00 BD 
              94 89 41 5B 
              42 76 62 48 
              87 89 44 72 
              5B 5F 48 9E 
              8E 44 6C 52 
              70 80 1A 16 
              00 BD 94 89 
              41 58 6C 57 
              42 6C 87 76 
              7A 57 52 54 
              9E 8E 61 71 
              7F 70 58 80 
              1C 17 00 BD 
              94 89 5F 45 
              5C 4D 44 88 
              89 41 6B 56 
              4B 76 62 9E 
              8E 41 75 64 
              57 7C 5A 80 
              11 18 00 BD 
              94 9D 83 54 
              9E 8E 41 52 
              54 55 41 4F 
              80 1C 19 00 
              BD 94 89 41 
              4A 60 63 67 
              63 91 41 66 
              7F 59 44 7D 
              9E 8E 89 48 
              40 62 63 43 
              80 1B 1A 00 
              BD 94 41 76 
              78 48 40 57 
              88 89 54 70 
              4E 61 50 9E 
              8E 41 62 47 
              79 5F 47 80 
              1A 1B 00 BD 
              94 4F 54 50 
              75 79 91 89 
              65 47 6D 78 
              42 9E 8E 89 
              60 43 6D 48 
              41 80 11 1C 
              00 BD 94 9D 
              83 48 9E 8E 
              41 46 51 54 
              51 43 80 1B 
              1D 00 BD 94 
              41 65 79 7C 
              42 5F 88 41 
              62 44 4E 4D 
              54 9E 8E 89 
              78 41 75 70 
              4D 80 1C 1E 
              00 BD 94 89 
              41 71 73 41 
              58 70 92 89 
              41 66 63 58 
              66 49 9E 8E 
              57 50 59 7E 
              67 80 1A 1F 
              00 BD 94 54 
              68 6E 76 76 
              92 89 42 45 
              44 78 67 9E 
              8E 89 56 6D 
              6A 4E 51 80 
              1D 20 00 BD 
              94 89 41 60 
              7D 5E 7C 4B 
              90 89 5C 7E 
              6B 5E 72 9E 
              8E 89 41 7C 
              7F 7F 7E 7C 
              80 19 21 00 
              BD 94 6C 64 
              51 6D 50 89 
              89 4D 70 4F 
              5C 66 9E 8E 
              7A 54 61 49 
              76 80 11 22 
              00 BD 94 9D 
              83 54 9E 8E 
              41 52 54 55 
              41 4F 80 19 
              23 00 BD 94 
              41 48 6D 61 
              72 6F 87 54 
              66 7E 4D 75 
              9E 8E 4A 78 
              67 49 50 80 
              16 24 00 BD 
              94 89 52 51 
              74 66 6E 86 
              41 7E 51 4D 
              52 58 9E 8E 
              40 80 0D 25 
              00 BD 94 9D 
              84 4A 9E 8E 
              41 45 80 18 
              26 00 BD 94 
              69 4D 6C 4C 
              56 90 71 5F 
              74 61 5E 9E 
              8E 61 4D 64 
              40 56 80 1C 
              27 00 BD 94 
              41 57 68 71 
              4A 63 88 41 
              62 5E 61 45 
              60 9E 8E 89 
              41 45 78 6D 
              6F 7D 80 18 
              28 00 BD 94 
              73 4C 69 5E 
              5A 87 45 7B 
              45 70 4E 9E 
              8E 43 73 7B 
              5C 6A 80 17 
              29 00 BD 94 
              89 41 61 67 
              68 7F 6F 86 
              41 76 78 42 
              63 43 9E 8E 
              40 80 1B 2A 
              00 BD 94 41 
              45 47 63 49 
              51 91 41 4B 
              70 63 77 7D 
              9E 8E 41 4F 
              77 63 7F 7D 
              80 11 2B 00 
              BD 94 9D 83 
              53 9E 8E 41 
              51 54 44 7D 
              4E 80 17 2C 
              00 BD 94 41 
              62 74 70 6C 
              71 86 89 70 
              71 55 55 6E 
              9E 8E 89 42 
              80 1B 2D 00 
              BD 94 89 6D 
              69 54 6E 47 
              89 5E 41 54 
              47 5A 9E 8E 
              89 41 4B 6A 
              68 75 61 80 
              1B 2E 00 BD 
              94 89 60 57 
              58 4C 69 85 
              41 79 74 63 
              51 7B 9E 8E 
              41 7B 72 7A 
              5D 4D 80 1C 
              2F 00 BD 94 
              89 41 5D 76 
              59 47 73 91 
              70 63 63 5B 
              50 9E 8E 89 
              41 4D 54 58 
              44 63 80 19 
              30 00 BD 94 
              41 73 63 46 
              63 4D 90 70 
              6C 4A 5C 46 
              9E 8E 70 60 
              42 40 44 80 
              11 31 00 BD 
              94 9D 83 4E 
              9E 8E 41 4C 
              52 74 69 49 
              80 1C 32 00 
              BD 94 89 60 
              7B 4C 42 4A 
              88 89 41 66 
              6D 51 4D 63 
              9E 8E 41 78 
              57 62 70 53 
              80 1C 33 00 
              BD 94 89 41 
              56 52 4B 4D 
              6B 85 89 49 
              6A 68 4F 62 
              9E 8E 41 48 
              43 42 55 76 
              80 1B 34 00 
              BD 94 41 76 
              7C 43 4D 59 
              87 89 41 53 
              7F 44 7F 62 
              9E 8E 62 7C 
              7E 4D 77 80 
              16 35 00 BD 
              94 89 73 78 
              6C 6F 41 86 
              41 43 6F 47 
              4B 70 9E 8E 
              40 80 1C 36 
              00 BD 94 4E 
              7A 74 4C 56 
              89 89 41 7E 
              6A 67 75 40 
              9E 8E 89 41 
              72 5A 63 7E 
              6A 80 1A 37 
              00 BD 94 70 
              52 46 4B 46 
              92 89 4D 66 
              76 53 62 9E 
              8E 89 7D 74 
              70 58 68 80 
              1B 38 00 BD 
              94 41 59 70 
              56 73 55 88 
              89 43 46 59 
              59 40 9E 8E 
              41 56 69 7D 
              5A 55 80 0D 
              39 00 BD 94 
              9D 84 4B 9E 
              8E 41 46 80 
              1C 3A 00 BD 
              94 89 41 60 
              77 59 49 54 
              85 41 5B 54 
              4A 58 62 9E 
              8E 89 60 63 
              7E 5C 68 80 
              11 3B 00 BD 
              94 9D 83 51 
              9E 8E 41 4F 
              53 64 75 4C 
              80 0D 3C 00 
              BD 94 9D 84 
              50 9E 8E 41 
              4B 80 19 3D 
              00 BD 94 41 
              7E 52 4A 52 
              4F 85 5B 44 
              5C 75 55 9E 
              8E 5C 59 42 
              59 7B 80 11 
              3E 00 BD 94 
              9D 83 4A 9E 
              8E 41 48 51 
              74 59 45 80 
              1A 3F 00 BD 
              94 89 5E 78 
              6C 7B 6E 89 
              50 7A 56 41 
              52 9E 8E 89 
              6F 73 42 7D 
              40 80 1B 40 
              00 BD 94 89 
              63 71 71 49 
              67 88 89 44 
              66 65 75 74 
              9E 8E 89 68 
              58 56 7F 5B 
              80 1C 41 00 
              BD 94 89 41 
              54 78 5D 51 
              68 88 89 78 
              58 46 54 61 
              9E 8E 41 72 
              6F 5C 59 77 
              80 1A 42 00 
              BD 94 41 5C 
              7C 77 53 71 
              85 6F 6E 67 
              46 62 9E 8E 
              41 7E 72 46 
              46 42 80 1B 
              43 00 BD 94 
              89 41 54 74 
              66 52 47 88 
              64 69 43 7F 
              49 9E 8E 89 
              70 4B 62 52 
              7E 80 14 44 
              00 BD 94 55 
              7A 53 4A 73 
              86 53 57 73 
              78 9E 8E 41 
              48 80 0D 45 
              00 BD 94 9D 
              84 4F 9E 8E 
              41 4A 80 16 
              46 00 BD 94 
              41 76 44 4E 
              46 74 86 41 
              49 6D 77 62 
              5C 9E 8E 41 
              80 0D 47 00 
              BD 94 9D 84 
              54 9E 8E 41 
              4F 80 1B 48 
              00 BD 94 89 
              6C 61 5C 71 
              77 89 89 41 
              71 67 7D 71 
              9E 8E 89 6A 
              6F 74 74 46 
              80 11 49 00 
              BD 94 9D 83 
              4A 9E 8E 41 
              48 51 74 59 
              45 80 1D 4A 
              00 BD 94 89 
              41 50 68 68 
              5C 6B 90 89 
              7F 73 6B 41 
              4A 9E 8E 89 
              41 7F 7B 6B 
              5D 6C 80 18 
              4B 00 BD 94 
              89 60 40 4D 
              4D 7C 91 7F 
              45 54 73 50 
              9E 8E 89 49 
              4C 6C 80 19 
              4C 00 BD 94 
              89 41 79 51 
              60 57 7B 90 
              48 62 66 4F 
              7B 9E 8E 62 
              46 48 41 80 
              11 4D 00 BD 
              94 9D 83 54 
              9E 8E 41 52 
              54 55 41 4F 
              80 1B 4E 00 
              BD 94 89 79 
              62 71 48 78 
              85 48 78 69 
              60 56 9E 8E 
              89 41 5A 4D 
              4D 43 50 80 
              11 4F 00 BD 
              94 9D 83 4E 
              9E 8E 41 4C 
              52 74 69 49 
              80 1C 50 00 
              BD 94 89 41 
              6C 4A 5D 48 
              49 87 41 7D 
              69 5E 6A 52 
              9E 8E 41 6C 
              4A 5D 48 49 
              80 19 51 00 
              BD 94 70 61 
              6E 7E 78 89 
              89 4C 55 51 
              6A 64 9E 8E 
              7C 77 40 69 
              5C 80 1A 52 
              00 BD 94 41 
              60 59 53 61 
              4E 88 89 41 
              5F 5F 67 5A 
              58 9E 8E 79 
              6C 46 76 80 
              17 53 00 BD 
              94 89 41 4A 
              5D 53 73 59 
              86 73 4F 70 
              52 71 9E 8E 
              89 41 80 11 
              54 00 BD 94 
              9D 83 53 9E 
              8E 41 51 54 
              44 7D 4E 80 
              1A 55 00 BD 
              94 89 41 57 
              40 76 76 67 
              91 89 68 75 
              7B 76 62 9E 
              8E 89 72 76 
              61 80 1C 56 
              00 BD 94 41 
              66 7E 75 6E 
              5B 89 89 41 
              5F 75 61 67 
              56 9E 8E 89 
              79 4B 68 6A 
              4F 80 1C 57 
              00 BD 94 41 
              48 76 6A 40 
              60 85 89 7B 
              67 70 64 5F 
              9E 8E 89 41 
              55 7E 68 4F 
              60 80 1A 58 
              00 BD 94 66 
              68 67 44 7B 
              91 89 69 5F 
              47 6E 4E 9E 
              8E 89 49 57 
              40 6A 45 80 
              0D 59 00 BD 
              94 9D 84 4E 
              9E 8E 41 49 
              80 1A 5A 00 
              BD 94 89 57 
              72 60 56 63 
              85 59 56 51 
              42 52 9E 8E 
              89 52 4F 46 
              5B 76 80 1A 
              5B 00 BD 94 
              53 5B 78 52 
              68 92 89 5C 
              62 43 42 7F 
              9E 8E 89 4F 
              79 7B 50 57 
              80 1B 5C 00 
              BD 94 41 7E 
              46 6E 7E 69 
              88 89 47 47 
              79 4F 47 9E 
              8E 41 76 7E 
              75 6F 62 80 
              1B 5D 00 BD 
              94 41 7C 5A 
              7D 49 76 85 
              89 51 4C 40 
              49 70 9E 8E 
              41 6D 43 70 
              41 60 80 19 
              5E 00 BD 94 
              75 70 4D 63 
              51 87 89 5D 
              7F 5B 4C 4C 
              9E 8E 57 70 
              72 57 45 80 
              1B 5F 00 BD 
              94 52 73 49 
              41 42 88 89 
              41 4B 5B 59 
              73 60 9E 8E 
              89 78 68 50 
              72 5E 80 1B 
              60 00 BD 94 
              89 64 5C 53 
              75 52 91 89 
              6F 60 4F 41 
              61 9E 8E 89 
              64 40 43 41 
              41 80 1B 61 
              00 BD 94 56 
              41 6B 50 77 
              85 89 41 5D 
              66 62 6E 75 
              9E 8E 89 57 
              46 4A 5F 63 
              80 1A 62 00 
              BD 94 5D 40 
              68 78 65 91 
              41 49 62 68 
              7C 49 9E 8E 
              41 5D 62 68 
              7C 6D 80 1B 
              63 00 BD 94 
              41 64 55 69 
              72 6D 87 89 
              41 53 52 42 
              44 6F 9E 8E 
              51 43 67 6D 
              7E 80 1B 64 
              00 BD 94 89 
              62 6B 7A 49 
              6D 89 41 7D 
              51 52 46 49 
              9E 8E 41 60 
              42 73 70 4A 
              80 1C 65 00 
              BD 94 89 55 
              4A 77 51 4A 
              88 89 41 74 
              65 58 6C 7D 
              9E 8E 41 76 
              4F 70 41 79 
              80 11 66 00 
              BD 94 9D 83 
              4C 9E 8E 41 
              4A 52 54 61 
              47 80 1A 67 
              00 BD 94 41 
              43 60 5E 41 
              45 85 5F 5F 
              6D 73 73 9E 
              8E 41 6D 7E 
              52 75 7F 80 
              1C 68 00 BD 
              94 89 41 7C 
              4D 7A 77 61 
              88 41 48 79 
              77 44 49 9E 
              8E 89 73 54 
              43 73 58 80 
              14 69 00 BD 
              94 89 67 5E 
              74 74 86 73 
              4B 72 5B 75 
              9E 8E 40 80 
              1B 6A 00 BD 
              94 41 65 52 
              54 7E 51 85 
              41 79 68 52 
              7C 41 9E 8E 
              41 6E 45 5E 
              7A 51 80 1D 
              6B 00 BD 94 
              89 41 53 6F 
              6D 56 63 90 
              89 6F 48 42 
              48 7E 9E 8E 
              89 41 7F 6F 
              6F 5F 40 80 
              1C 6C 00 BD 
              94 89 41 5B 
              7B 5A 56 72 
              88 41 46 68 
              6B 4A 53 9E 
              8E 89 55 52 
              6F 4C 5F 80 
              1C 6D 00 BD 
              94 41 49 45 
              59 5E 4B 88 
              89 41 56 41 
              56 7F 4D 9E 
              8E 89 4C 7B 
              7D 61 42 80 
              1A 6E 00 BD 
              94 43 4E 71 
              4D 48 87 89 
              41 7B 7D 48 
              6C 5C 9E 8E 
              43 4E 71 4D 
              48 80 15 6F 
              00 BD 94 5A 
              68 51 5D 43 
              86 89 5A 6C 
              65 43 48 9E 
              8E 40 80 1A 
              70 00 BD 94 
              5D 55 54 67 
              65 92 41 57 
              77 45 57 6E 
              9E 8E 41 4A 
              62 51 70 4B 
              80 1B 71 00 
              BD 94 89 74 
              7D 7F 79 57 
              91 41 57 60 
              49 44 72 9E 
              8E 89 60 5D 
              76 79 45 80 
              1A 72 00 BD 
              94 41 47 7C 
              7C 50 64 89 
              41 44 54 75 
              76 42 9E 8E 
              43 68 46 5A 
              62 80 1A 73 
              00 BD 94 89 
              41 5F 6F 7F 
              50 69 87 57 
              48 51 47 7A 
              9E 8E 43 4E 
              7A 71 41 80 
              1E 74 00 BD 
              94 89 41 41 
              57 68 7A 48 
              91 89 41 7B 
              58 43 55 49 
              9E 8E 89 41 
              41 50 40 50 
              41 80 11 75 
              00 BD 94 9D 
              83 4C 9E 8E 
              41 4A 52 54 
              61 47 80 1B 
              76 00 BD 94 
              41 41 42 50 
              6E 56 85 44 
              49 7C 7B 6D 
              9E 8E 89 41 
              67 5C 79 48 
              62 80 11 77 
              00 BD 94 9D 
              83 53 9E 8E 
              41 51 54 44 
              7D 4E 80 1B 
              78 00 BD 94 
              89 41 5A 4E 
              4F 5F 70 85 
              41 7E 5F 6F 
              63 48 9E 8E 
              6B 4B 5C 72 
              40 80 11 79 
              00 BD 94 9D 
              83 49 9E 8E 
              41 47 51 64 
              55 44 80 1A 
              7A 00 BD 94 
              89 6D 6E 6A 
              45 5A 91 70 
              54 7B 54 4D 
              9E 8E 89 4D 
              6A 40 41 51 
              80 1A 7B 00 
              BD 94 41 7A 
              46 7E 58 5B 
              91 7C 47 53 
              7D 63 9E 8E 
              41 7E 47 7F 
              7D 7B 80 1A 
              7C 00 BD 94 
              89 77 65 58 
              44 6C 88 70 
              4E 62 73 7E 
              9E 8E 89 47 
              56 75 50 6E 
              80 19 7D 00 
              BD 94 57 4C 
              56 5B 73 90 
              41 6F 51 46 
              75 73 9E 8E 
              47 40 46 51 
              73 80 1C 7E 
              00 BD 94 5F 
              77 67 44 63 
              92 89 41 61 
              58 7D 40 65 
              9E 8E 89 41 
              7E 6F 5A 44 
              48 80 1C 7F 
              00 BD 94 89 
              41 44 7E 77 
              6E 58 92 89 
              6F 50 53 40 
              4C 9E 8E 41 
              6B 6E 64 6E 
              5C 80 11 80 
              00 BD 94 9D 
              83 53 9E 8E 
              41 51 54 44 
              7D 4E 80 11 
              81 00 BD 94 
              9D 83 4D 9E 
              8E 41 4B 52 
              64 65 48 80 
              19 82 00 BD 
              94 89 69 44 
              63 7E 72 87 
              58 74 46 6D 
              79 9E 8E 50 
              50 5D 50 79 
              80 1B 83 00 
              BD 94 41 71 
              6D 50 5D 41 
              91 41 52 63 
              55 7A 45 9E 
              8E 41 73 6F 
              55 7F 45 80 
              1D 84 00 BD 
              94 89 41 56 
              65 54 42 4C 
              88 89 54 71 
              7C 4C 4A 9E 
              8E 89 41 6B 
              57 50 4E 56 
              80 1B 85 00 
              BD 94 89 41 
              5A 61 4A 43 
              74 91 89 45 
              6E 7B 75 7B 
              9E 8E 89 60 
              4A 41 73 80 
              15 86 00 BD 
              94 41 4D 65 
              4B 53 7A 86 
              46 52 5A 71 
              47 9E 8E 4C 
              80 17 87 00 
              BD 94 89 57 
              4A 6D 6C 7B 
              86 89 41 5A 
              55 43 7B 6D 
              9E 8E 40 80 
              1A 88 00 BD 
              94 48 6E 46 
              58 75 91 89 
              4F 5F 51 7C 
              4C 9E 8E 89 
              47 51 51 64 
              4B 80 17 89 
              00 BD 94 41 
              42 4E 51 70 
              5A 86 89 4A 
              71 66 4C 58 
              9E 8E 89 46 
              80 1C 8A 00 
              BD 94 41 46 
              5D 45 60 62 
              85 89 41 7C 
              74 49 59 72 
              9E 8E 41 60 
              7B 4D 53 5C 
              80 1C 8B 00 
              BD 94 89 47 
              5F 6B 45 4E 
              89 89 41 7E 
              5D 42 4E 48 
              9E 8E 41 76 
              7D 57 48 7A 
              80 19 8C 00 
              BD 94 6C 42 
              55 4C 4C 87 
              89 71 53 73 
              7D 56 9E 8E 
              6C 42 55 4C 
              4C 80 1B 8D 
              00 BD 94 89 
              46 7F 70 59 
              7D 91 89 56 
              53 50 74 71 
              9E 8E 89 46 
              53 50 50 71 
              80 11 8E 00 
              BD 94 9D 83 
              54 9E 8E 41 
              52 54 55 41 
              4F 80 1A 8F 
              00 BD 94 42 
              41 4A 59 48 
              88 41 4C 7E 
              7D 4B 7F 9E 
              8E 41 4F 40 
              47 65 47 80 
              1A 90 00 BD 
              94 63 6D 78 
              58 74 85 49 
              63 52 55 59 
              9E 8E 89 41 
              50 4A 4D 4F 
              6C 80 1C 91 
              00 BD 94 41 
              75 6E 63 50 
              60 91 89 41 
              59 57 61 7B 
              59 9E 8E 89 
              48 51 40 6B 
              59 80 19 92 
              00 BD 94 41 
              7E 4E 76 4F 
              68 90 53 5B 
              4B 6B 5E 9E 
              8E 52 4A 42 
              4B 48 80 1A 
              93 00 BD 94 
              89 45 62 73 
              7B 78 87 89 
              5C 42 70 68 
              55 9E 8E 45 
              62 73 7B 78 
              80 18 94 00 
              BD 94 5E 7E 
              56 55 41 88 
              43 45 5F 5C 
              5C 9E 8E 62 
              43 75 71 5D 
              80 11 95 00 
              BD 94 9D 83 
              4A 9E 8E 41 
              48 51 74 59 
              45 80 19 96 
              00 BD 94 89 
              47 45 74 76 
              72 87 7F 77 
              7B 77 79 9E 
              8E 47 45 74 
              76 72 80 1C 
              97 00 BD 94 
              89 41 60 6F 
              71 49 46 88 
              89 72 75 41 
              6B 7A 9E 8E 
              41 6C 5B 4D 
              4B 40 80 18 
              98 00 BD 94 
              41 42 47 5C 
              7B 7A 90 74 
              5A 5D 7B 4F 
              9E 8E 42 5C 
              7B 4A 80 1C 
              99 00 BD 94 
              89 41 49 48 
              6B 55 7B 92 
              89 41 7B 6E 
              63 41 51 9E 
              8E 72 66 48 
              54 6A 80 1B 
              9A 00 BD 94 
              89 41 77 6B 
              4B 74 4D 89 
              41 48 73 6B 
              53 6C 9E 8E 
              7F 61 48 78 
              47 80 1B 9B 
              00 BD 94 41 
              74 7B 41 68 
              7B 85 89 46 
              77 5C 4C 76 
              9E 8E 41 77 
              52 48 5A 4E 
              80 1C 9C 00 
              BD 94 89 41 
              6F 5D 5B 72 
              70 92 41 48 
              75 44 64 7C 
              9E 8E 89 67 
              68 5F 56 54 
              80 1D 9D 00 
              BD 94 89 41 
              64 7C 7B 63 
              6E 85 89 41 
              56 59 7D 5D 
              6A 9E 8E 89 
              67 40 78 6D 
              74 80 1C 9E 
              00 BD 94 89 
              41 60 74 7C 
              78 7F 85 41 
              50 5E 61 7F 
              73 9E 8E 41 
              76 7C 79 64 
              73 80 0D 9F 
              00 BD 94 9D 
              84 47 9E 8E 
              41 42 80 1A 
              A0 00 BD 94 
              41 78 77 70 
              60 75 88 43 
              73 43 48 64 
              9E 8E 41 7C 
              6A 73 69 59 
              80 1B A1 00 
              BD 94 89 4C 
              7A 54 68 44 
              87 89 41 5C 
              40 56 48 7E 
              9E 8E 4C 7A 
              54 68 44 80 
              1C A2 00 BD 
              94 89 41 69 
              76 58 73 6F 
              87 89 41 42 
              50 7A 56 5A 
              9E 8E 67 65 
              5E 5D 55 80 
              18 A3 00 BD 
              94 41 70 66 
              4F 45 44 86 
              89 41 4C 70 
              6C 40 7D 9E 
              8E 89 41 80 
              1B A4 00 BD 
              94 89 68 6A 
              5B 78 6B 90 
              89 4F 50 52 
              67 6D 9E 8E 
              89 6F 7A 5B 
              7F 6F 80 19 
              A5 00 BD 94 
              52 68 7B 5C 
              59 90 41 72 
              4C 57 56 4E 
              9E 8E 52 48 
              53 54 48 80 
              1C A6 00 BD 
              94 41 48 74 
              48 73 6D 92 
              89 41 79 49 
              55 69 77 9E 
              8E 89 71 7D 
              5D 5A 5C 80 
              1A A7 00 BD 
              94 89 62 6B 
              6D 4A 6A 92 
              89 4E 76 49 
              68 7E 9E 8E 
              6C 5D 64 62 
              54 80 1B A8 
              00 BD 94 41 
              72 6B 6A 49 
              7B 91 89 63 
              7C 7E 77 4A 
              9E 8E 89 41 
              54 54 76 41 
              80 17 A9 00 
              BD 94 89 41 
              4C 58 7E 5C 
              60 86 41 5B 
              4D 72 5D 41 
              9E 8E 40 80 
              1A AA 00 BD 
              94 6B 62 5C 
              5E 71 91 41 
              72 63 4A 5B 
              7C 9E 8E 41 
              7B 63 5E 5F 
              7D 80 17 AB 
              00 BD 94 41 
              5F 73 7E 48 
              50 86 89 42 
              7C 7A 7F 72 
              9E 8E 89 60 
              80 19 AC 00 
              BD 94 89 62 
              7D 55 54 7E 
              91 66 79 49 
              76 4E 9E 8E 
              89 44 54 40 
              72 80 1A AD 
              00 BD 94 41 
              55 65 45 55 
              50 92 50 5F 
              65 4F 4A 9E 
              8E 41 45 7A 
              60 5A 5A 80 
              1A AE 00 BD 
              94 41 6F 47 
              41 6F 46 92 
              41 65 79 40 
              7A 6A 9E 8E 
              4A 7E 41 55 
              6C 80 1A AF 
              00 BD 94 41 
              44 61 7A 43 
              6D 88 89 6A 
              5F 62 5A 5B 
              9E 8E 5A 42 
              57 69 52 80 
              0D B0 00 BD 
              94 9D 84 51 
              9E 8E 41 4C 
              80 1B B1 00 
              BD 94 41 74 
              5B 54 4B 7D 
              91 89 7B 56 
              78 73 6E 9E 
              8E 89 4B 44 
              68 70 41 80 
              11 B2 00 BD 
              94 9D 83 4E 
              9E 8E 41 4C 
              52 74 69 49 
              80 0D B3 00 
              BD 94 9D 84 
              48 9E 8E 41 
              43 80 1A B4 
              00 BD 94 56 
              6C 42 60 5B 
              91 41 49 74 
              47 73 5F 9E 
              8E 41 5F 7C 
              47 73 5F 80 
              19 B5 00 BD 
              94 41 5D 74 
              58 54 4C 87 
              46 6F 7A 6F 
              72 9E 8E 46 
              45 5C 67 42 
              80 1A B6 00 
              BD 94 7D 7E 
              70 44 48 92 
              41 61 50 7F 
              46 5C 9E 8E 
              41 5C 6E 4F 
              42 54 80 18 
              B7 00 BD 94 
              66 70 71 5C 
              4F 87 60 61 
              7A 7B 75 9E 
              8E 46 4E 76 
              60 5A 80 11 
              B8 00 BD 94 
              9D 83 4E 9E 
              8E 41 4C 52 
              74 69 49 80 
              1A B9 00 BD 
              94 89 56 5E 
              44 45 6F 87 
              41 5A 55 77 
              4E 5D 9E 8E 
              56 5E 44 45 
              6F 80 15 BA 
              00 BD 94 41 
              55 5E 5C 54 
              5C 86 78 56 
              68 66 64 9E 
              8E 41 80 1E 
              BB 00 BD 94 
              89 41 5D 70 
              60 4E 62 91 
              89 41 60 7B 
              44 5A 44 9E 
              8E 89 41 40 
              70 40 4A 42 
              80 11 BC 00 
              BD 94 9D 83 
              4B 9E 8E 41 
              49 52 44 5D 
              46 80 1B BD 
              00 BD 94 89 
              46 68 63 58 
              46 87 89 41 
              66 5A 68 42 
              64 9E 8E 46 
              68 63 58 46 
              80 15 BE 00 
              BD 94 6B 4A 
              79 4B 51 86 
              41 44 50 73 
              4A 7E 9E 8E 
              40 80 1C BF 
              00 BD 94 48 
              71 59 7F 6F 
              91 89 41 4E 
              56 7C 5A 50 
              9E 8E 89 41 
              46 46 64 40 
              41 80 1B C0 
              00 BD 94 41 
              6E 44 54 6C 
              53 88 89 41 
              60 7A 78 4A 
              72 9E 8E 4D 
              49 5C 61 61 
              80 1C C1 00 
              BD 94 89 41 
              78 7A 77 7E 
              7D 89 89 41 
              7F 44 46 6A 
              72 9E 8E 46 
              49 4E 6B 75 
              80 1B C2 00 
              BD 94 41 71 
              71 66 7B 4C 
              91 41 73 6D 
              4A 77 6F 9E 
              8E 41 73 7D 
              6E 7F 6F 80 
              1B C3 00 BD 
              94 89 41 7F 
              53 4F 6D 4B 
              85 41 47 71 
              56 63 7E 9E 
              8E 7D 74 53 
              4E 56 80 19 
              C4 00 BD 94 
              67 49 4B 73 
              4A 89 6C 62 
              7F 65 65 9E 
              8E 89 45 59 
              73 72 5B 80 
              11 C5 00 BD 
              94 9D 83 49 
              9E 8E 41 47 
              51 64 55 44 
              80 1A C6 00 
              BD 94 41 46 
              62 52 70 68 
              92 4B 63 6A 
              63 7E 9E 8E 
              41 4D 41 78 
              53 56 80 11 
              C7 00 BD 94 
              9D 83 4A 9E 
              8E 41 48 51 
              74 59 45 80 
              0D C8 00 BD 
              94 9D 84 49 
              9E 8E 41 44 
              80 11 C9 00 
              BD 94 9D 83 
              46 9E 8E 41 
              44 50 74 49 
              41 80 0D CA 
              00 BD 94 9D 
              84 4C 9E 8E 
              41 47 80 00 	.db	$22,$01,$00,$b1,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b1,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$37,$32,$34,$39,$38,$0d,$80,$0d,$03,$00,$bd,$94,$9d,$84,$51,$9e,$8e,$41,$4c,$80,$14,$04,$00,$bd,$94,$47,$6a,$5f,$54,$55,$86,$63,$52,$76,$4d,$6a,$9e,$8e,$40,$80,$1c,$05,$00,$bd,$94,$89,$5f,$77,$48,$57,$43,$92,$89,$41,$70,$78,$44,$4c,$62,$9e,$8e,$41,$6f,$4f,$4c,$5b,$63,$80,$1c,$06,$00,$bd,$94,$89,$73,$51,$66,$7f,$78,$85,$89,$41,$52,$54,$43,$4c,$68,$9e,$8e,$41,$78,$73,$7e,$5b,$40,$80,$1a,$07,$00,$bd,$94,$42,$74,$4f,$6a,$54,$91,$41,$7b,$6f,$54,$63,$5b,$9e,$8e,$41,$7b,$7f,$5f,$6b,$5f,$80,$1a,$08,$00,$bd,$94,$89,$55,$6a,$72,$55,$73,$89,$65,$5d,$71,$45,$7f,$9e,$8e,$89,$7b,$48,$63,$5b,$72,$80,$1b,$09,$00,$bd,$94,$89,$41,$49,$51,$66,$4e,$69,$88,$65,$53,$6f,$4a,$7c,$9e,$8e,$89,$63,$7d,$77,$43,$6d,$80,$19,$0a,$00,$bd,$94,$41,$50,$44,$5c,$53,$47,$89,$5a,$4b,$63,$79,$60,$9e,$8e,$75,$78,$78,$59,$67,$80,$19,$0b,$00,$bd,$94,$5a,$47,$76,$6b,$7c,$90,$41,$62,$42,$4b,$42,$56,$9e,$8e,$42,$42,$42,$42,$54,$80,$1b,$0c,$00,$bd,$94,$41,$4e,$5f,$59,$4c,$70,$90,$41,$7b,$47,$4a,$67,$55,$9e,$8e,$41,$4a,$47,$48,$44,$50,$80,$1a,$0d,$00,$bd,$94,$6a,$4a,$69,$68,$59,$89,$89,$57,$4f,$7f,$59,$46,$9e,$8e,$41,$41,$5a,$69,$41,$5f,$80,$1c,$0e,$00,$bd,$94,$89,$41,$5b,$47,$40,$65,$58,$92,$61,$5f,$73,$45,$42,$9e,$8e,$89,$41,$7a,$58,$73,$60,$56,$80,$1c,$0f,$00,$bd,$94,$41,$4e,$73,$6c,$77,$42,$88,$89,$41,$6a,$54,$71,$42,$42,$9e,$8e,$89,$5b,$61,$44,$4b,$40,$80,$1d,$10,$00,$bd,$94,$89,$41,$43,$40,$56,$5d,$5a,$88,$89,$41,$4e,$61,$73,$5c,$60,$9e,$8e,$41,$6e,$5d,$76,$46,$46,$80,$11,$11,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$1b,$12,$00,$bd,$94,$89,$5b,$59,$4d,$56,$5c,$85,$89,$41,$73,$4e,$68,$4f,$4d,$9e,$8e,$42,$59,$5e,$47,$6c,$80,$1a,$13,$00,$bd,$94,$89,$48,$5c,$44,$71,$49,$89,$89,$7a,$51,$45,$6a,$72,$9e,$8e,$71,$75,$40,$79,$69,$80,$18,$14,$00,$bd,$94,$41,$46,$72,$7f,$44,$57,$87,$51,$6b,$59,$48,$6a,$9e,$8e,$45,$5a,$61,$6f,$80,$1a,$15,$00,$bd,$94,$89,$41,$5b,$42,$76,$62,$48,$87,$89,$44,$72,$5b,$5f,$48,$9e,$8e,$44,$6c,$52,$70,$80,$1a,$16,$00,$bd,$94,$89,$41,$58,$6c,$57,$42,$6c,$87,$76,$7a,$57,$52,$54,$9e,$8e,$61,$71,$7f,$70,$58,$80,$1c,$17,$00,$bd,$94,$89,$5f,$45,$5c,$4d,$44,$88,$89,$41,$6b,$56,$4b,$76,$62,$9e,$8e,$41,$75,$64,$57,$7c,$5a,$80,$11,$18,$00,$bd,$94,$9d,$83,$54,$9e,$8e,$41,$52,$54,$55,$41,$4f,$80,$1c,$19,$00,$bd,$94,$89,$41,$4a,$60,$63,$67,$63,$91,$41,$66,$7f,$59,$44,$7d,$9e,$8e,$89,$48,$40,$62,$63,$43,$80,$1b,$1a,$00,$bd,$94,$41,$76,$78,$48,$40,$57,$88,$89,$54,$70,$4e,$61,$50,$9e,$8e,$41,$62,$47,$79,$5f,$47,$80,$1a,$1b,$00,$bd,$94,$4f,$54,$50,$75,$79,$91,$89,$65,$47,$6d,$78,$42,$9e,$8e,$89,$60,$43,$6d,$48,$41,$80,$11,$1c,$00,$bd,$94,$9d,$83,$48,$9e,$8e,$41,$46,$51,$54,$51,$43,$80,$1b,$1d,$00,$bd,$94,$41,$65,$79,$7c,$42,$5f,$88,$41,$62,$44,$4e,$4d,$54,$9e,$8e,$89,$78,$41,$75,$70,$4d,$80,$1c,$1e,$00,$bd,$94,$89,$41,$71,$73,$41,$58,$70,$92,$89,$41,$66,$63,$58,$66,$49,$9e,$8e,$57,$50,$59,$7e,$67,$80,$1a,$1f,$00,$bd,$94,$54,$68,$6e,$76,$76,$92,$89,$42,$45,$44,$78,$67,$9e,$8e,$89,$56,$6d,$6a,$4e,$51,$80,$1d,$20,$00,$bd,$94,$89,$41,$60,$7d,$5e,$7c,$4b,$90,$89,$5c,$7e,$6b,$5e,$72,$9e,$8e,$89,$41,$7c,$7f,$7f,$7e,$7c,$80,$19,$21,$00,$bd,$94,$6c,$64,$51,$6d,$50,$89,$89,$4d,$70,$4f,$5c,$66,$9e,$8e,$7a,$54,$61,$49,$76,$80,$11,$22,$00,$bd,$94,$9d,$83,$54,$9e,$8e,$41,$52,$54,$55,$41,$4f,$80,$19,$23,$00,$bd,$94,$41,$48,$6d,$61,$72,$6f,$87,$54,$66,$7e,$4d,$75,$9e,$8e,$4a,$78,$67,$49,$50,$80,$16,$24,$00,$bd,$94,$89,$52,$51,$74,$66,$6e,$86,$41,$7e,$51,$4d,$52,$58,$9e,$8e,$40,$80,$0d,$25,$00,$bd,$94,$9d,$84,$4a,$9e,$8e,$41,$45,$80,$18,$26,$00,$bd,$94,$69,$4d,$6c,$4c,$56,$90,$71,$5f,$74,$61,$5e,$9e,$8e,$61,$4d,$64,$40,$56,$80,$1c,$27,$00,$bd,$94,$41,$57,$68,$71,$4a,$63,$88,$41,$62,$5e,$61,$45,$60,$9e,$8e,$89,$41,$45,$78,$6d,$6f,$7d,$80,$18,$28,$00,$bd,$94,$73,$4c,$69,$5e,$5a,$87,$45,$7b,$45,$70,$4e,$9e,$8e,$43,$73,$7b,$5c,$6a,$80,$17,$29,$00,$bd,$94,$89,$41,$61,$67,$68,$7f,$6f,$86,$41,$76,$78,$42,$63,$43,$9e,$8e,$40,$80,$1b,$2a,$00,$bd,$94,$41,$45,$47,$63,$49,$51,$91,$41,$4b,$70,$63,$77,$7d,$9e,$8e,$41,$4f,$77,$63,$7f,$7d,$80,$11,$2b,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$17,$2c,$00,$bd,$94,$41,$62,$74,$70,$6c,$71,$86,$89,$70,$71,$55,$55,$6e,$9e,$8e,$89,$42,$80,$1b,$2d,$00,$bd,$94,$89,$6d,$69,$54,$6e,$47,$89,$5e,$41,$54,$47,$5a,$9e,$8e,$89,$41,$4b,$6a,$68,$75,$61,$80,$1b,$2e,$00,$bd,$94,$89,$60,$57,$58,$4c,$69,$85,$41,$79,$74,$63,$51,$7b,$9e,$8e,$41,$7b,$72,$7a,$5d,$4d,$80,$1c,$2f,$00,$bd,$94,$89,$41,$5d,$76,$59,$47,$73,$91,$70,$63,$63,$5b,$50,$9e,$8e,$89,$41,$4d,$54,$58,$44,$63,$80,$19,$30,$00,$bd,$94,$41,$73,$63,$46,$63,$4d,$90,$70,$6c,$4a,$5c,$46,$9e,$8e,$70,$60,$42,$40,$44,$80,$11,$31,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$1c,$32,$00,$bd,$94,$89,$60,$7b,$4c,$42,$4a,$88,$89,$41,$66,$6d,$51,$4d,$63,$9e,$8e,$41,$78,$57,$62,$70,$53,$80,$1c,$33,$00,$bd,$94,$89,$41,$56,$52,$4b,$4d,$6b,$85,$89,$49,$6a,$68,$4f,$62,$9e,$8e,$41,$48,$43,$42,$55,$76,$80,$1b,$34,$00,$bd,$94,$41,$76,$7c,$43,$4d,$59,$87,$89,$41,$53,$7f,$44,$7f,$62,$9e,$8e,$62,$7c,$7e,$4d,$77,$80,$16,$35,$00,$bd,$94,$89,$73,$78,$6c,$6f,$41,$86,$41,$43,$6f,$47,$4b,$70,$9e,$8e,$40,$80,$1c,$36,$00,$bd,$94,$4e,$7a,$74,$4c,$56,$89,$89,$41,$7e,$6a,$67,$75,$40,$9e,$8e,$89,$41,$72,$5a,$63,$7e,$6a,$80,$1a,$37,$00,$bd,$94,$70,$52,$46,$4b,$46,$92,$89,$4d,$66,$76,$53,$62,$9e,$8e,$89,$7d,$74,$70,$58,$68,$80,$1b,$38,$00,$bd,$94,$41,$59,$70,$56,$73,$55,$88,$89,$43,$46,$59,$59,$40,$9e,$8e,$41,$56,$69,$7d,$5a,$55,$80,$0d,$39,$00,$bd,$94,$9d,$84,$4b,$9e,$8e,$41,$46,$80,$1c,$3a,$00,$bd,$94,$89,$41,$60,$77,$59,$49,$54,$85,$41,$5b,$54,$4a,$58,$62,$9e,$8e,$89,$60,$63,$7e,$5c,$68,$80,$11,$3b,$00,$bd,$94,$9d,$83,$51,$9e,$8e,$41,$4f,$53,$64,$75,$4c,$80,$0d,$3c,$00,$bd,$94,$9d,$84,$50,$9e,$8e,$41,$4b,$80,$19,$3d,$00,$bd,$94,$41,$7e,$52,$4a,$52,$4f,$85,$5b,$44,$5c,$75,$55,$9e,$8e,$5c,$59,$42,$59,$7b,$80,$11,$3e,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$1a,$3f,$00,$bd,$94,$89,$5e,$78,$6c,$7b,$6e,$89,$50,$7a,$56,$41,$52,$9e,$8e,$89,$6f,$73,$42,$7d,$40,$80,$1b,$40,$00,$bd,$94,$89,$63,$71,$71,$49,$67,$88,$89,$44,$66,$65,$75,$74,$9e,$8e,$89,$68,$58,$56,$7f,$5b,$80,$1c,$41,$00,$bd,$94,$89,$41,$54,$78,$5d,$51,$68,$88,$89,$78,$58,$46,$54,$61,$9e,$8e,$41,$72,$6f,$5c,$59,$77,$80,$1a,$42,$00,$bd,$94,$41,$5c,$7c,$77,$53,$71,$85,$6f,$6e,$67,$46,$62,$9e,$8e,$41,$7e,$72,$46,$46,$42,$80,$1b,$43,$00,$bd,$94,$89,$41,$54,$74,$66,$52,$47,$88,$64,$69,$43,$7f,$49,$9e,$8e,$89,$70,$4b,$62,$52,$7e,$80,$14,$44,$00,$bd,$94,$55,$7a,$53,$4a,$73,$86,$53,$57,$73,$78,$9e,$8e,$41,$48,$80,$0d,$45,$00,$bd,$94,$9d,$84,$4f,$9e,$8e,$41,$4a,$80,$16,$46,$00,$bd,$94,$41,$76,$44,$4e,$46,$74,$86,$41,$49,$6d,$77,$62,$5c,$9e,$8e,$41,$80,$0d,$47,$00,$bd,$94,$9d,$84,$54,$9e,$8e,$41,$4f,$80,$1b,$48,$00,$bd,$94,$89,$6c,$61,$5c,$71,$77,$89,$89,$41,$71,$67,$7d,$71,$9e,$8e,$89,$6a,$6f,$74,$74,$46,$80,$11,$49,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$1d,$4a,$00,$bd,$94,$89,$41,$50,$68,$68,$5c,$6b,$90,$89,$7f,$73,$6b,$41,$4a,$9e,$8e,$89,$41,$7f,$7b,$6b,$5d,$6c,$80,$18,$4b,$00,$bd,$94,$89,$60,$40,$4d,$4d,$7c,$91,$7f,$45,$54,$73,$50,$9e,$8e,$89,$49,$4c,$6c,$80,$19,$4c,$00,$bd,$94,$89,$41,$79,$51,$60,$57,$7b,$90,$48,$62,$66,$4f,$7b,$9e,$8e,$62,$46,$48,$41,$80,$11,$4d,$00,$bd,$94,$9d,$83,$54,$9e,$8e,$41,$52,$54,$55,$41,$4f,$80,$1b,$4e,$00,$bd,$94,$89,$79,$62,$71,$48,$78,$85,$48,$78,$69,$60,$56,$9e,$8e,$89,$41,$5a,$4d,$4d,$43,$50,$80,$11,$4f,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$1c,$50,$00,$bd,$94,$89,$41,$6c,$4a,$5d,$48,$49,$87,$41,$7d,$69,$5e,$6a,$52,$9e,$8e,$41,$6c,$4a,$5d,$48,$49,$80,$19,$51,$00,$bd,$94,$70,$61,$6e,$7e,$78,$89,$89,$4c,$55,$51,$6a,$64,$9e,$8e,$7c,$77,$40,$69,$5c,$80,$1a,$52,$00,$bd,$94,$41,$60,$59,$53,$61,$4e,$88,$89,$41,$5f,$5f,$67,$5a,$58,$9e,$8e,$79,$6c,$46,$76,$80,$17,$53,$00,$bd,$94,$89,$41,$4a,$5d,$53,$73,$59,$86,$73,$4f,$70,$52,$71,$9e,$8e,$89,$41,$80,$11,$54,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$1a,$55,$00,$bd,$94,$89,$41,$57,$40,$76,$76,$67,$91,$89,$68,$75,$7b,$76,$62,$9e,$8e,$89,$72,$76,$61,$80,$1c,$56,$00,$bd,$94,$41,$66,$7e,$75,$6e,$5b,$89,$89,$41,$5f,$75,$61,$67,$56,$9e,$8e,$89,$79,$4b,$68,$6a,$4f,$80,$1c,$57,$00,$bd,$94,$41,$48,$76,$6a,$40,$60,$85,$89,$7b,$67,$70,$64,$5f,$9e,$8e,$89,$41,$55,$7e,$68,$4f,$60,$80,$1a,$58,$00,$bd,$94,$66,$68,$67,$44,$7b,$91,$89,$69,$5f,$47,$6e,$4e,$9e,$8e,$89,$49,$57,$40,$6a,$45,$80,$0d,$59,$00,$bd,$94,$9d,$84,$4e,$9e,$8e,$41,$49,$80,$1a,$5a,$00,$bd,$94,$89,$57,$72,$60,$56,$63,$85,$59,$56,$51,$42,$52,$9e,$8e,$89,$52,$4f,$46,$5b,$76,$80,$1a,$5b,$00,$bd,$94,$53,$5b,$78,$52,$68,$92,$89,$5c,$62,$43,$42,$7f,$9e,$8e,$89,$4f,$79,$7b,$50,$57,$80,$1b,$5c,$00,$bd,$94,$41,$7e,$46,$6e,$7e,$69,$88,$89,$47,$47,$79,$4f,$47,$9e,$8e,$41,$76,$7e,$75,$6f,$62,$80,$1b,$5d,$00,$bd,$94,$41,$7c,$5a,$7d,$49,$76,$85,$89,$51,$4c,$40,$49,$70,$9e,$8e,$41,$6d,$43,$70,$41,$60,$80,$19,$5e,$00,$bd,$94,$75,$70,$4d,$63,$51,$87,$89,$5d,$7f,$5b,$4c,$4c,$9e,$8e,$57,$70,$72,$57,$45,$80,$1b,$5f,$00,$bd,$94,$52,$73,$49,$41,$42,$88,$89,$41,$4b,$5b,$59,$73,$60,$9e,$8e,$89,$78,$68,$50,$72,$5e,$80,$1b,$60,$00,$bd,$94,$89,$64,$5c,$53,$75,$52,$91,$89,$6f,$60,$4f,$41,$61,$9e,$8e,$89,$64,$40,$43,$41,$41,$80,$1b,$61,$00,$bd,$94,$56,$41,$6b,$50,$77,$85,$89,$41,$5d,$66,$62,$6e,$75,$9e,$8e,$89,$57,$46,$4a,$5f,$63,$80,$1a,$62,$00,$bd,$94,$5d,$40,$68,$78,$65,$91,$41,$49,$62,$68,$7c,$49,$9e,$8e,$41,$5d,$62,$68,$7c,$6d,$80,$1b,$63,$00,$bd,$94,$41,$64,$55,$69,$72,$6d,$87,$89,$41,$53,$52,$42,$44,$6f,$9e,$8e,$51,$43,$67,$6d,$7e,$80,$1b,$64,$00,$bd,$94,$89,$62,$6b,$7a,$49,$6d,$89,$41,$7d,$51,$52,$46,$49,$9e,$8e,$41,$60,$42,$73,$70,$4a,$80,$1c,$65,$00,$bd,$94,$89,$55,$4a,$77,$51,$4a,$88,$89,$41,$74,$65,$58,$6c,$7d,$9e,$8e,$41,$76,$4f,$70,$41,$79,$80,$11,$66,$00,$bd,$94,$9d,$83,$4c,$9e,$8e,$41,$4a,$52,$54,$61,$47,$80,$1a,$67,$00,$bd,$94,$41,$43,$60,$5e,$41,$45,$85,$5f,$5f,$6d,$73,$73,$9e,$8e,$41,$6d,$7e,$52,$75,$7f,$80,$1c,$68,$00,$bd,$94,$89,$41,$7c,$4d,$7a,$77,$61,$88,$41,$48,$79,$77,$44,$49,$9e,$8e,$89,$73,$54,$43,$73,$58,$80,$14,$69,$00,$bd,$94,$89,$67,$5e,$74,$74,$86,$73,$4b,$72,$5b,$75,$9e,$8e,$40,$80,$1b,$6a,$00,$bd,$94,$41,$65,$52,$54,$7e,$51,$85,$41,$79,$68,$52,$7c,$41,$9e,$8e,$41,$6e,$45,$5e,$7a,$51,$80,$1d,$6b,$00,$bd,$94,$89,$41,$53,$6f,$6d,$56,$63,$90,$89,$6f,$48,$42,$48,$7e,$9e,$8e,$89,$41,$7f,$6f,$6f,$5f,$40,$80,$1c,$6c,$00,$bd,$94,$89,$41,$5b,$7b,$5a,$56,$72,$88,$41,$46,$68,$6b,$4a,$53,$9e,$8e,$89,$55,$52,$6f,$4c,$5f,$80,$1c,$6d,$00,$bd,$94,$41,$49,$45,$59,$5e,$4b,$88,$89,$41,$56,$41,$56,$7f,$4d,$9e,$8e,$89,$4c,$7b,$7d,$61,$42,$80,$1a,$6e,$00,$bd,$94,$43,$4e,$71,$4d,$48,$87,$89,$41,$7b,$7d,$48,$6c,$5c,$9e,$8e,$43,$4e,$71,$4d,$48,$80,$15,$6f,$00,$bd,$94,$5a,$68,$51,$5d,$43,$86,$89,$5a,$6c,$65,$43,$48,$9e,$8e,$40,$80,$1a,$70,$00,$bd,$94,$5d,$55,$54,$67,$65,$92,$41,$57,$77,$45,$57,$6e,$9e,$8e,$41,$4a,$62,$51,$70,$4b,$80,$1b,$71,$00,$bd,$94,$89,$74,$7d,$7f,$79,$57,$91,$41,$57,$60,$49,$44,$72,$9e,$8e,$89,$60,$5d,$76,$79,$45,$80,$1a,$72,$00,$bd,$94,$41,$47,$7c,$7c,$50,$64,$89,$41,$44,$54,$75,$76,$42,$9e,$8e,$43,$68,$46,$5a,$62,$80,$1a,$73,$00,$bd,$94,$89,$41,$5f,$6f,$7f,$50,$69,$87,$57,$48,$51,$47,$7a,$9e,$8e,$43,$4e,$7a,$71,$41,$80,$1e,$74,$00,$bd,$94,$89,$41,$41,$57,$68,$7a,$48,$91,$89,$41,$7b,$58,$43,$55,$49,$9e,$8e,$89,$41,$41,$50,$40,$50,$41,$80,$11,$75,$00,$bd,$94,$9d,$83,$4c,$9e,$8e,$41,$4a,$52,$54,$61,$47,$80,$1b,$76,$00,$bd,$94,$41,$41,$42,$50,$6e,$56,$85,$44,$49,$7c,$7b,$6d,$9e,$8e,$89,$41,$67,$5c,$79,$48,$62,$80,$11,$77,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$1b,$78,$00,$bd,$94,$89,$41,$5a,$4e,$4f,$5f,$70,$85,$41,$7e,$5f,$6f,$63,$48,$9e,$8e,$6b,$4b,$5c,$72,$40,$80,$11,$79,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$1a,$7a,$00,$bd,$94,$89,$6d,$6e,$6a,$45,$5a,$91,$70,$54,$7b,$54,$4d,$9e,$8e,$89,$4d,$6a,$40,$41,$51,$80,$1a,$7b,$00,$bd,$94,$41,$7a,$46,$7e,$58,$5b,$91,$7c,$47,$53,$7d,$63,$9e,$8e,$41,$7e,$47,$7f,$7d,$7b,$80,$1a,$7c,$00,$bd,$94,$89,$77,$65,$58,$44,$6c,$88,$70,$4e,$62,$73,$7e,$9e,$8e,$89,$47,$56,$75,$50,$6e,$80,$19,$7d,$00,$bd,$94,$57,$4c,$56,$5b,$73,$90,$41,$6f,$51,$46,$75,$73,$9e,$8e,$47,$40,$46,$51,$73,$80,$1c,$7e,$00,$bd,$94,$5f,$77,$67,$44,$63,$92,$89,$41,$61,$58,$7d,$40,$65,$9e,$8e,$89,$41,$7e,$6f,$5a,$44,$48,$80,$1c,$7f,$00,$bd,$94,$89,$41,$44,$7e,$77,$6e,$58,$92,$89,$6f,$50,$53,$40,$4c,$9e,$8e,$41,$6b,$6e,$64,$6e,$5c,$80,$11,$80,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$11,$81,$00,$bd,$94,$9d,$83,$4d,$9e,$8e,$41,$4b,$52,$64,$65,$48,$80,$19,$82,$00,$bd,$94,$89,$69,$44,$63,$7e,$72,$87,$58,$74,$46,$6d,$79,$9e,$8e,$50,$50,$5d,$50,$79,$80,$1b,$83,$00,$bd,$94,$41,$71,$6d,$50,$5d,$41,$91,$41,$52,$63,$55,$7a,$45,$9e,$8e,$41,$73,$6f,$55,$7f,$45,$80,$1d,$84,$00,$bd,$94,$89,$41,$56,$65,$54,$42,$4c,$88,$89,$54,$71,$7c,$4c,$4a,$9e,$8e,$89,$41,$6b,$57,$50,$4e,$56,$80,$1b,$85,$00,$bd,$94,$89,$41,$5a,$61,$4a,$43,$74,$91,$89,$45,$6e,$7b,$75,$7b,$9e,$8e,$89,$60,$4a,$41,$73,$80,$15,$86,$00,$bd,$94,$41,$4d,$65,$4b,$53,$7a,$86,$46,$52,$5a,$71,$47,$9e,$8e,$4c,$80,$17,$87,$00,$bd,$94,$89,$57,$4a,$6d,$6c,$7b,$86,$89,$41,$5a,$55,$43,$7b,$6d,$9e,$8e,$40,$80,$1a,$88,$00,$bd,$94,$48,$6e,$46,$58,$75,$91,$89,$4f,$5f,$51,$7c,$4c,$9e,$8e,$89,$47,$51,$51,$64,$4b,$80,$17,$89,$00,$bd,$94,$41,$42,$4e,$51,$70,$5a,$86,$89,$4a,$71,$66,$4c,$58,$9e,$8e,$89,$46,$80,$1c,$8a,$00,$bd,$94,$41,$46,$5d,$45,$60,$62,$85,$89,$41,$7c,$74,$49,$59,$72,$9e,$8e,$41,$60,$7b,$4d,$53,$5c,$80,$1c,$8b,$00,$bd,$94,$89,$47,$5f,$6b,$45,$4e,$89,$89,$41,$7e,$5d,$42,$4e,$48,$9e,$8e,$41,$76,$7d,$57,$48,$7a,$80,$19,$8c,$00,$bd,$94,$6c,$42,$55,$4c,$4c,$87,$89,$71,$53,$73,$7d,$56,$9e,$8e,$6c,$42,$55,$4c,$4c,$80,$1b,$8d,$00,$bd,$94,$89,$46,$7f,$70,$59,$7d,$91,$89,$56,$53,$50,$74,$71,$9e,$8e,$89,$46,$53,$50,$50,$71,$80,$11,$8e,$00,$bd,$94,$9d,$83,$54,$9e,$8e,$41,$52,$54,$55,$41,$4f,$80,$1a,$8f,$00,$bd,$94,$42,$41,$4a,$59,$48,$88,$41,$4c,$7e,$7d,$4b,$7f,$9e,$8e,$41,$4f,$40,$47,$65,$47,$80,$1a,$90,$00,$bd,$94,$63,$6d,$78,$58,$74,$85,$49,$63,$52,$55,$59,$9e,$8e,$89,$41,$50,$4a,$4d,$4f,$6c,$80,$1c,$91,$00,$bd,$94,$41,$75,$6e,$63,$50,$60,$91,$89,$41,$59,$57,$61,$7b,$59,$9e,$8e,$89,$48,$51,$40,$6b,$59,$80,$19,$92,$00,$bd,$94,$41,$7e,$4e,$76,$4f,$68,$90,$53,$5b,$4b,$6b,$5e,$9e,$8e,$52,$4a,$42,$4b,$48,$80,$1a,$93,$00,$bd,$94,$89,$45,$62,$73,$7b,$78,$87,$89,$5c,$42,$70,$68,$55,$9e,$8e,$45,$62,$73,$7b,$78,$80,$18,$94,$00,$bd,$94,$5e,$7e,$56,$55,$41,$88,$43,$45,$5f,$5c,$5c,$9e,$8e,$62,$43,$75,$71,$5d,$80,$11,$95,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$19,$96,$00,$bd,$94,$89,$47,$45,$74,$76,$72,$87,$7f,$77,$7b,$77,$79,$9e,$8e,$47,$45,$74,$76,$72,$80,$1c,$97,$00,$bd,$94,$89,$41,$60,$6f,$71,$49,$46,$88,$89,$72,$75,$41,$6b,$7a,$9e,$8e,$41,$6c,$5b,$4d,$4b,$40,$80,$18,$98,$00,$bd,$94,$41,$42,$47,$5c,$7b,$7a,$90,$74,$5a,$5d,$7b,$4f,$9e,$8e,$42,$5c,$7b,$4a,$80,$1c,$99,$00,$bd,$94,$89,$41,$49,$48,$6b,$55,$7b,$92,$89,$41,$7b,$6e,$63,$41,$51,$9e,$8e,$72,$66,$48,$54,$6a,$80,$1b,$9a,$00,$bd,$94,$89,$41,$77,$6b,$4b,$74,$4d,$89,$41,$48,$73,$6b,$53,$6c,$9e,$8e,$7f,$61,$48,$78,$47,$80,$1b,$9b,$00,$bd,$94,$41,$74,$7b,$41,$68,$7b,$85,$89,$46,$77,$5c,$4c,$76,$9e,$8e,$41,$77,$52,$48,$5a,$4e,$80,$1c,$9c,$00,$bd,$94,$89,$41,$6f,$5d,$5b,$72,$70,$92,$41,$48,$75,$44,$64,$7c,$9e,$8e,$89,$67,$68,$5f,$56,$54,$80,$1d,$9d,$00,$bd,$94,$89,$41,$64,$7c,$7b,$63,$6e,$85,$89,$41,$56,$59,$7d,$5d,$6a,$9e,$8e,$89,$67,$40,$78,$6d,$74,$80,$1c,$9e,$00,$bd,$94,$89,$41,$60,$74,$7c,$78,$7f,$85,$41,$50,$5e,$61,$7f,$73,$9e,$8e,$41,$76,$7c,$79,$64,$73,$80,$0d,$9f,$00,$bd,$94,$9d,$84,$47,$9e,$8e,$41,$42,$80,$1a,$a0,$00,$bd,$94,$41,$78,$77,$70,$60,$75,$88,$43,$73,$43,$48,$64,$9e,$8e,$41,$7c,$6a,$73,$69,$59,$80,$1b,$a1,$00,$bd,$94,$89,$4c,$7a,$54,$68,$44,$87,$89,$41,$5c,$40,$56,$48,$7e,$9e,$8e,$4c,$7a,$54,$68,$44,$80,$1c,$a2,$00,$bd,$94,$89,$41,$69,$76,$58,$73,$6f,$87,$89,$41,$42,$50,$7a,$56,$5a,$9e,$8e,$67,$65,$5e,$5d,$55,$80,$18,$a3,$00,$bd,$94,$41,$70,$66,$4f,$45,$44,$86,$89,$41,$4c,$70,$6c,$40,$7d,$9e,$8e,$89,$41,$80,$1b,$a4,$00,$bd,$94,$89,$68,$6a,$5b,$78,$6b,$90,$89,$4f,$50,$52,$67,$6d,$9e,$8e,$89,$6f,$7a,$5b,$7f,$6f,$80,$19,$a5,$00,$bd,$94,$52,$68,$7b,$5c,$59,$90,$41,$72,$4c,$57,$56,$4e,$9e,$8e,$52,$48,$53,$54,$48,$80,$1c,$a6,$00,$bd,$94,$41,$48,$74,$48,$73,$6d,$92,$89,$41,$79,$49,$55,$69,$77,$9e,$8e,$89,$71,$7d,$5d,$5a,$5c,$80,$1a,$a7,$00,$bd,$94,$89,$62,$6b,$6d,$4a,$6a,$92,$89,$4e,$76,$49,$68,$7e,$9e,$8e,$6c,$5d,$64,$62,$54,$80,$1b,$a8,$00,$bd,$94,$41,$72,$6b,$6a,$49,$7b,$91,$89,$63,$7c,$7e,$77,$4a,$9e,$8e,$89,$41,$54,$54,$76,$41,$80,$17,$a9,$00,$bd,$94,$89,$41,$4c,$58,$7e,$5c,$60,$86,$41,$5b,$4d,$72,$5d,$41,$9e,$8e,$40,$80,$1a,$aa,$00,$bd,$94,$6b,$62,$5c,$5e,$71,$91,$41,$72,$63,$4a,$5b,$7c,$9e,$8e,$41,$7b,$63,$5e,$5f,$7d,$80,$17,$ab,$00,$bd,$94,$41,$5f,$73,$7e,$48,$50,$86,$89,$42,$7c,$7a,$7f,$72,$9e,$8e,$89,$60,$80,$19,$ac,$00,$bd,$94,$89,$62,$7d,$55,$54,$7e,$91,$66,$79,$49,$76,$4e,$9e,$8e,$89,$44,$54,$40,$72,$80,$1a,$ad,$00,$bd,$94,$41,$55,$65,$45,$55,$50,$92,$50,$5f,$65,$4f,$4a,$9e,$8e,$41,$45,$7a,$60,$5a,$5a,$80,$1a,$ae,$00,$bd,$94,$41,$6f,$47,$41,$6f,$46,$92,$41,$65,$79,$40,$7a,$6a,$9e,$8e,$4a,$7e,$41,$55,$6c,$80,$1a,$af,$00,$bd,$94,$41,$44,$61,$7a,$43,$6d,$88,$89,$6a,$5f,$62,$5a,$5b,$9e,$8e,$5a,$42,$57,$69,$52,$80,$0d,$b0,$00,$bd,$94,$9d,$84,$51,$9e,$8e,$41,$4c,$80,$1b,$b1,$00,$bd,$94,$41,$74,$5b,$54,$4b,$7d,$91,$89,$7b,$56,$78,$73,$6e,$9e,$8e,$89,$4b,$44,$68,$70,$41,$80,$11,$b2,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$0d,$b3,$00,$bd,$94,$9d,$84,$48,$9e,$8e,$41,$43,$80,$1a,$b4,$00,$bd,$94,$56,$6c,$42,$60,$5b,$91,$41,$49,$74,$47,$73,$5f,$9e,$8e,$41,$5f,$7c,$47,$73,$5f,$80,$19,$b5,$00,$bd,$94,$41,$5d,$74,$58,$54,$4c,$87,$46,$6f,$7a,$6f,$72,$9e,$8e,$46,$45,$5c,$67,$42,$80,$1a,$b6,$00,$bd,$94,$7d,$7e,$70,$44,$48,$92,$41,$61,$50,$7f,$46,$5c,$9e,$8e,$41,$5c,$6e,$4f,$42,$54,$80,$18,$b7,$00,$bd,$94,$66,$70,$71,$5c,$4f,$87,$60,$61,$7a,$7b,$75,$9e,$8e,$46,$4e,$76,$60,$5a,$80,$11,$b8,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$1a,$b9,$00,$bd,$94,$89,$56,$5e,$44,$45,$6f,$87,$41,$5a,$55,$77,$4e,$5d,$9e,$8e,$56,$5e,$44,$45,$6f,$80,$15,$ba,$00,$bd,$94,$41,$55,$5e,$5c,$54,$5c,$86,$78,$56,$68,$66,$64,$9e,$8e,$41,$80,$1e,$bb,$00,$bd,$94,$89,$41,$5d,$70,$60,$4e,$62,$91,$89,$41,$60,$7b,$44,$5a,$44,$9e,$8e,$89,$41,$40,$70,$40,$4a,$42,$80,$11,$bc,$00,$bd,$94,$9d,$83,$4b,$9e,$8e,$41,$49,$52,$44,$5d,$46,$80,$1b,$bd,$00,$bd,$94,$89,$46,$68,$63,$58,$46,$87,$89,$41,$66,$5a,$68,$42,$64,$9e,$8e,$46,$68,$63,$58,$46,$80,$15,$be,$00,$bd,$94,$6b,$4a,$79,$4b,$51,$86,$41,$44,$50,$73,$4a,$7e,$9e,$8e,$40,$80,$1c,$bf,$00,$bd,$94,$48,$71,$59,$7f,$6f,$91,$89,$41,$4e,$56,$7c,$5a,$50,$9e,$8e,$89,$41,$46,$46,$64,$40,$41,$80,$1b,$c0,$00,$bd,$94,$41,$6e,$44,$54,$6c,$53,$88,$89,$41,$60,$7a,$78,$4a,$72,$9e,$8e,$4d,$49,$5c,$61,$61,$80,$1c,$c1,$00,$bd,$94,$89,$41,$78,$7a,$77,$7e,$7d,$89,$89,$41,$7f,$44,$46,$6a,$72,$9e,$8e,$46,$49,$4e,$6b,$75,$80,$1b,$c2,$00,$bd,$94,$41,$71,$71,$66,$7b,$4c,$91,$41,$73,$6d,$4a,$77,$6f,$9e,$8e,$41,$73,$7d,$6e,$7f,$6f,$80,$1b,$c3,$00,$bd,$94,$89,$41,$7f,$53,$4f,$6d,$4b,$85,$41,$47,$71,$56,$63,$7e,$9e,$8e,$7d,$74,$53,$4e,$56,$80,$19,$c4,$00,$bd,$94,$67,$49,$4b,$73,$4a,$89,$6c,$62,$7f,$65,$65,$9e,$8e,$89,$45,$59,$73,$72,$5b,$80,$11,$c5,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$1a,$c6,$00,$bd,$94,$41,$46,$62,$52,$70,$68,$92,$4b,$63,$6a,$63,$7e,$9e,$8e,$41,$4d,$41,$78,$53,$56,$80,$11,$c7,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$0d,$c8,$00,$bd,$94,$9d,$84,$49,$9e,$8e,$41,$44,$80,$11,$c9,$00,$bd,$94,$9d,$83,$46,$9e,$8e,$41,$44,$50,$74,$49,$41,$80,$0d,$ca,$00,$bd,$94,$9d,$84,$4c,$9e,$8e,$41,$47,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5F1C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6F1C -  -  -  -  EndTestInstance:
   18 00:6F1C -  -  -  -  		
   19 00:6F1C -  -  -  -  ; ***************************************************************************************
   20 00:6F1C -  -  -  -  ;
   21 00:6F1C -  -  -  -  ;									Changes and Updates
   22 00:6F1C -  -  -  -  ;
   23 00:6F1C -  -  -  -  ; ***************************************************************************************
   24 00:6F1C -  -  -  -  ;
   25 00:6F1C -  -  -  -  ;		Date			Notes
   26 00:6F1C -  -  -  -  ;		==== 			=====
   27 00:6F1C -  -  -  -  ;
   28 00:6F1C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:6F1C -  -  -  -  FinalAddress:
