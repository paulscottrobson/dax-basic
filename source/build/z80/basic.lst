    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD D0 4B -  		call 	SYSInitialise
   44 00:4006 11 00 50 -  		ld 		de,TestInstance
   45 00:4009 21 36 60 -  		ld 		hl,EndTestInstance
   46 00:400C CD 9F 46 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 51 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 9B 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD D8 4B -  		call 	SYSPrintChar
   56 00:401C CD D6 4B -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 42 
              42 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 42 
              42 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  		
   59 00:4045 -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:4045 00 00 00 00 		.dw 	0,0
   61 00:4049 -  -  -  -  
   62 00:4049 -  -  -  -  ; ***************************************************************************************
   63 00:4049 -  -  -  -  ;
   64 00:4049 -  -  -  -  ;										Run variables
   65 00:4049 -  -  -  -  ;
   66 00:4049 -  -  -  -  ; ***************************************************************************************
   67 00:4049 -  -  -  -  
   68 00:4049 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  		
   71 00:404D -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:404D 00 00 00 00 		.dw 	0,0
   73 00:4051 -  -  -  -  
   74 00:4051 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:4051 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4057 -  -  -  -  
   77 00:4057 -  -  -  -  AConvert: 									; used for address conversions.
   78 00:4057 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:405D -  -  -  -  		
   80 00:405D -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:405D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:406D -  -  -  -  
   83 00:406D -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   84 00:406D 00 00 -  -  		.dw 	0
   85 00:406F -  -  -  -  
   86 00:406F -  -  -  -  ; ***************************************************************************************
   87 00:406F -  -  -  -  ;
   88 00:406F -  -  -  -  ;										  Buffers
   89 00:406F -  -  -  -  ;
   90 00:406F -  -  -  -  ; ***************************************************************************************
   91 00:406F -  -  -  -  
   92 00:406F -  -  -  -  _USBuffer: 									; buffer space for STR$()
   93 00:406F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   94 00:407F -  -  -  -  
   95 00:407F -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   96 00:407F 00 00 -  -  		.dw 	0
   97 00:4081 -  -  -  -  
   98 00:4081 -  -  -  -  ConvertBuffer: 								; general usage
   99 00:4081 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  100 00:40C1 -  -  -  -  
  101 00:40C1 -  -  -  -  ; ***************************************************************************************
  102 00:40C1 -  -  -  -  ;
  103 00:40C1 -  -  -  -  ;									Changes and Updates
  104 00:40C1 -  -  -  -  ;
  105 00:40C1 -  -  -  -  ; ***************************************************************************************
  106 00:40C1 -  -  -  -  ;
  107 00:40C1 -  -  -  -  ;		Date			Notes
  108 00:40C1 -  -  -  -  ;		==== 			=====
  109 00:40C1 -  -  -  -  ;
  110 00:40C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40C1 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40C1 -  -  -  -  ; ***************************************************************************************
    2 00:40C1 -  -  -  -  ; ***************************************************************************************
    3 00:40C1 -  -  -  -  ;
    4 00:40C1 -  -  -  -  ;		Name : 		assert.asm
    5 00:40C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40C1 -  -  -  -  ;		Reviewed :	No
    8 00:40C1 -  -  -  -  ;		Purpose :	Assert command
    9 00:40C1 -  -  -  -  ;
   10 00:40C1 -  -  -  -  ; ***************************************************************************************
   11 00:40C1 -  -  -  -  ; ***************************************************************************************
   12 00:40C1 -  -  -  -  
   13 00:40C1 -  -  -  -  ; ***************************************************************************************
   14 00:40C1 -  -  -  -  ;
   15 00:40C1 -  -  -  -  ;									ASSERT command
   16 00:40C1 -  -  -  -  ;
   17 00:40C1 -  -  -  -  ; ***************************************************************************************
   18 00:40C1 -  -  -  -  
   19 00:40C1 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40C1 CD 27 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40C4 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40CA C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40CB 3E 01 C3 42 
              42 -  -  -  		ERR_ASSERT
   24 00:40D0 -  -  -  -  
   25 00:40D0 -  -  -  -  ; ***************************************************************************************
   26 00:40D0 -  -  -  -  ;
   27 00:40D0 -  -  -  -  ;									Changes and Updates
   28 00:40D0 -  -  -  -  ;
   29 00:40D0 -  -  -  -  ; ***************************************************************************************
   30 00:40D0 -  -  -  -  ;
   31 00:40D0 -  -  -  -  ;		Date			Notes
   32 00:40D0 -  -  -  -  ;		==== 			=====
   33 00:40D0 -  -  -  -  ;
   34 00:40D0 -  -  -  -  ; ***************************************************************************************
   35 00:40D0 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40D0 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40D0 -  -  -  -  ; ***************************************************************************************
    2 00:40D0 -  -  -  -  ; ***************************************************************************************
    3 00:40D0 -  -  -  -  ;
    4 00:40D0 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D0 -  -  -  -  ;		Reviewed :	No
    8 00:40D0 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40D0 -  -  -  -  ;
   10 00:40D0 -  -  -  -  ; ***************************************************************************************
   11 00:40D0 -  -  -  -  ; ***************************************************************************************
   12 00:40D0 -  -  -  -  
   13 00:40D0 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40D0 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40D0 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40D0 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40D0 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40D0 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40D0 C3 9F 42 -  		jp 		SyntaxError
   20 00:40D3 -  -  -  -  
   21 00:40D3 -  -  -  -  ; ***************************************************************************************
   22 00:40D3 -  -  -  -  ;
   23 00:40D3 -  -  -  -  ;									Changes and Updates
   24 00:40D3 -  -  -  -  ;
   25 00:40D3 -  -  -  -  ; ***************************************************************************************
   26 00:40D3 -  -  -  -  ;
   27 00:40D3 -  -  -  -  ;		Date			Notes
   28 00:40D3 -  -  -  -  ;		==== 			=====
   29 00:40D3 -  -  -  -  ;
   30 00:40D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40D3 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40D3 -  -  -  -  ; ***************************************************************************************
    2 00:40D3 -  -  -  -  ; ***************************************************************************************
    3 00:40D3 -  -  -  -  ;
    4 00:40D3 -  -  -  -  ;		Name : 		colon.asm
    5 00:40D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D3 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40D3 -  -  -  -  ;		Reviewed :	No
    8 00:40D3 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40D3 -  -  -  -  ;
   10 00:40D3 -  -  -  -  ; ***************************************************************************************
   11 00:40D3 -  -  -  -  ; ***************************************************************************************
   12 00:40D3 -  -  -  -  
   13 00:40D3 -  -  -  -  ; ***************************************************************************************
   14 00:40D3 -  -  -  -  ;
   15 00:40D3 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40D3 -  -  -  -  ;
   17 00:40D3 -  -  -  -  ; ***************************************************************************************
   18 00:40D3 -  -  -  -  
   19 00:40D3 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40D3 C9 -  -  -  		ret
   21 00:40D4 -  -  -  -  
   22 00:40D4 -  -  -  -  ; ***************************************************************************************
   23 00:40D4 -  -  -  -  ;
   24 00:40D4 -  -  -  -  ;									Changes and Updates
   25 00:40D4 -  -  -  -  ;
   26 00:40D4 -  -  -  -  ; ***************************************************************************************
   27 00:40D4 -  -  -  -  ;
   28 00:40D4 -  -  -  -  ;		Date			Notes
   29 00:40D4 -  -  -  -  ;		==== 			=====
   30 00:40D4 -  -  -  -  ;
   31 00:40D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40D4 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40D4 -  -  -  -  ; ***************************************************************************************
    2 00:40D4 -  -  -  -  ; ***************************************************************************************
    3 00:40D4 -  -  -  -  ;
    4 00:40D4 -  -  -  -  ;		Name : 		end.asm
    5 00:40D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D4 -  -  -  -  ;		Reviewed :	No
    8 00:40D4 -  -  -  -  ;		Purpose :	End command
    9 00:40D4 -  -  -  -  ;
   10 00:40D4 -  -  -  -  ; ***************************************************************************************
   11 00:40D4 -  -  -  -  ; ***************************************************************************************
   12 00:40D4 -  -  -  -  
   13 00:40D4 -  -  -  -  ; ***************************************************************************************
   14 00:40D4 -  -  -  -  ;
   15 00:40D4 -  -  -  -  ;										END command
   16 00:40D4 -  -  -  -  ;
   17 00:40D4 -  -  -  -  ; ***************************************************************************************
   18 00:40D4 -  -  -  -  
   19 00:40D4 -  -  -  -  Command_END: 	;; [end]
   20 00:40D4 3E 00 C3 42 
              42 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40D9 -  -  -  -  
   22 00:40D9 -  -  -  -  ; ***************************************************************************************
   23 00:40D9 -  -  -  -  ;
   24 00:40D9 -  -  -  -  ;									Changes and Updates
   25 00:40D9 -  -  -  -  ;
   26 00:40D9 -  -  -  -  ; ***************************************************************************************
   27 00:40D9 -  -  -  -  ;
   28 00:40D9 -  -  -  -  ;		Date			Notes
   29 00:40D9 -  -  -  -  ;		==== 			=====
   30 00:40D9 -  -  -  -  ;
   31 00:40D9 -  -  -  -  ; ***************************************************************************************
   32 00:40D9 -  -  -  -  		
Listing for file "_build.asm"
   17 00:40D9 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40D9 -  -  -  -  ; ***************************************************************************************
    2 00:40D9 -  -  -  -  ; ***************************************************************************************
    3 00:40D9 -  -  -  -  ;
    4 00:40D9 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D9 -  -  -  -  ;		Reviewed :	None
    8 00:40D9 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40D9 -  -  -  -  ;
   10 00:40D9 -  -  -  -  ; ***************************************************************************************
   11 00:40D9 -  -  -  -  ; ***************************************************************************************
   12 00:40D9 -  -  -  -  
   13 00:40D9 -  -  -  -  ; ***************************************************************************************
   14 00:40D9 -  -  -  -  ;
   15 00:40D9 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40D9 -  -  -  -  ;
   17 00:40D9 -  -  -  -  ; ***************************************************************************************
   18 00:40D9 -  -  -  -  
   19 00:40D9 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40D9 DD 2A 49 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40DD 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40E0 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40E3 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40E5 -  -  -  -  		;
   25 00:40E5 ED 7B 4D 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40E9 C3 AA 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40EC -  -  -  -  
   28 00:40EC -  -  -  -  ; ***************************************************************************************
   29 00:40EC -  -  -  -  ;
   30 00:40EC -  -  -  -  ;									Changes and Updates
   31 00:40EC -  -  -  -  ;
   32 00:40EC -  -  -  -  ; ***************************************************************************************
   33 00:40EC -  -  -  -  ;
   34 00:40EC -  -  -  -  ;		Date			Notes
   35 00:40EC -  -  -  -  ;		==== 			=====
   36 00:40EC -  -  -  -  ;
   37 00:40EC -  -  -  -  ; ***************************************************************************************
   38 00:40EC -  -  -  -  		
Listing for file "_build.asm"
   18 00:40EC -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:40EC -  -  -  -  ; ***************************************************************************************
    2 00:40EC -  -  -  -  ; ***************************************************************************************
    3 00:40EC -  -  -  -  ;
    4 00:40EC -  -  -  -  ;		Name : 		let.asm
    5 00:40EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EC -  -  -  -  ;		Date : 		4th June 2022
    7 00:40EC -  -  -  -  ;		Reviewed :	No
    8 00:40EC -  -  -  -  ;		Purpose :	Assignment statement
    9 00:40EC -  -  -  -  ;
   10 00:40EC -  -  -  -  ; ***************************************************************************************
   11 00:40EC -  -  -  -  ; ***************************************************************************************
   12 00:40EC -  -  -  -  
   13 00:40EC -  -  -  -  ; ***************************************************************************************
   14 00:40EC -  -  -  -  ;
   15 00:40EC -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:40EC -  -  -  -  ;
   17 00:40EC -  -  -  -  ; ***************************************************************************************
   18 00:40EC -  -  -  -  
   19 00:40EC -  -  -  -  Command_LET: 	;; [let]
   20 00:40EC DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:40EF FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:40F1 28 28 -  -  		jr 		z,_CLString
   23 00:40F3 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:40F5 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:40F7 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:40F9 32 6D 40 -  		ld 		(AllowAutoCreate),a
   27 00:40FC -  -  -  -  _CLNoAuto:
   28 00:40FC 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:40FE CD B8 43 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:4101 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:4103 CA 9F 42 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:4106 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:4107 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:4108 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:4109 32 6D 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:410C 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:410E CD 37 42 -  		call 	CheckNextA
   38 00:4111 -  -  -  -  
   39 00:4111 CD 21 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:4114 -  -  -  -  
   41 00:4114 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:4115 43 -  -  -  		ld 		b,e 						
   43 00:4116 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:4117 -  -  -  -  		;
   45 00:4117 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:4117 -  -  -  -  		;
   47 00:4117 CD 1C 41 -  		call 	WriteHLToDE
   48 00:411A C9 -  -  -  		ret
   49 00:411B -  -  -  -  		;
   50 00:411B -  -  -  -  		; 		String assignment code.
   51 00:411B -  -  -  -  		;
   52 00:411B -  -  -  -  _CLString:
   53 00:411B 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:411C -  -  -  -  
   55 00:411C -  -  -  -  ; ***************************************************************************************
   56 00:411C -  -  -  -  ;
   57 00:411C -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:411C -  -  -  -  ;
   59 00:411C -  -  -  -  ; ***************************************************************************************
   60 00:411C -  -  -  -  
   61 00:411C -  -  -  -  WriteHLToDE:
   62 00:411C CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:411E C2 95 42 -  		jp 		nz,TypeMismatch
   64 00:4121 -  -  -  -  		;
   65 00:4121 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:4121 -  -  -  -  		;		
   67 00:4121 -  -  -  -  _WHDWriteNumber:
   68 00:4121 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:4122 D9 -  -  -  		exx
   70 00:4123 EB -  -  -  		ex 		de,hl
   71 00:4124 D9 -  -  -  		exx
   72 00:4125 -  -  -  -  
   73 00:4125 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:4126 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:4127 72 -  -  -  		ld 		(hl),d
   76 00:4128 23 -  -  -  		inc 	hl
   77 00:4129 E5 -  -  -  		push 	hl
   78 00:412A D9 -  -  -  		exx
   79 00:412B E1 -  -  -  		pop 	hl
   80 00:412C 73 -  -  -  		ld 		(hl),e
   81 00:412D 23 -  -  -  		inc 	hl
   82 00:412E 72 -  -  -  		ld 		(hl),d
   83 00:412F D9 -  -  -  		exx
   84 00:4130 -  -  -  -  
   85 00:4130 C9 -  -  -  		ret
   86 00:4131 -  -  -  -  
   87 00:4131 -  -  -  -  ; ***************************************************************************************
   88 00:4131 -  -  -  -  ;
   89 00:4131 -  -  -  -  ;									Changes and Updates
   90 00:4131 -  -  -  -  ;
   91 00:4131 -  -  -  -  ; ***************************************************************************************
   92 00:4131 -  -  -  -  ;
   93 00:4131 -  -  -  -  ;		Date			Notes
   94 00:4131 -  -  -  -  ;		==== 			=====
   95 00:4131 -  -  -  -  ;
   96 00:4131 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:4131 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:4131 -  -  -  -  ; ***************************************************************************************
    2 00:4131 -  -  -  -  ; ***************************************************************************************
    3 00:4131 -  -  -  -  ;
    4 00:4131 -  -  -  -  ;		Name : 		print.asm
    5 00:4131 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4131 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4131 -  -  -  -  ;		Reviewed :	No
    8 00:4131 -  -  -  -  ;		Purpose :	Print command
    9 00:4131 -  -  -  -  ;
   10 00:4131 -  -  -  -  ; ***************************************************************************************
   11 00:4131 -  -  -  -  ; ***************************************************************************************
   12 00:4131 -  -  -  -  
   13 00:4131 -  -  -  -  ; ***************************************************************************************
   14 00:4131 -  -  -  -  ;
   15 00:4131 -  -  -  -  ;										PRINT command
   16 00:4131 -  -  -  -  ;
   17 00:4131 -  -  -  -  ; ***************************************************************************************
   18 00:4131 -  -  -  -  
   19 00:4131 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:4131 -  -  -  -  		;
   21 00:4131 -  -  -  -  		;		Main loop
   22 00:4131 -  -  -  -  		;
   23 00:4131 -  -  -  -  _CPRLoop:
   24 00:4131 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:4134 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:4136 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:4138 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:413A 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:413C FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:413E 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:4140 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:4142 28 26 -  -  		jr 		z,_CPRTab
   33 00:4144 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:4146 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:4148 -  -  -  -  		;
   36 00:4148 CD 21 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:414B CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:414D 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:414F -  -  -  -  		;
   40 00:414F 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:4151 -  -  -  -  _CPRPrintNumber:
   42 00:4151 F5 -  -  -  		push 	af 							; print leading space
   43 00:4152 3E 20 -  -  		ld 		a,' '
   44 00:4154 CD D8 4B -  		call 	SYSPrintChar
   45 00:4157 F1 -  -  -  		pop 	af
   46 00:4158 01 81 40 -  		ld  	bc,ConvertBuffer
   47 00:415B C5 -  -  -  		push 	bc
   48 00:415C CD 8A 4B -  		call 	Int32ToString 				; convert to string
   49 00:415F E1 -  -  -  		pop 	hl
   50 00:4160 -  -  -  -  		;
   51 00:4160 -  -  -  -  		; 		Print text at HL.
   52 00:4160 -  -  -  -  		;
   53 00:4160 -  -  -  -  _CPRPrintHL:
   54 00:4160 CD B8 46 -  		call 	PrintStringAtHL 			; print string out
   55 00:4163 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4165 -  -  -  -  		;
   57 00:4165 -  -  -  -  		; 		New line (')
   58 00:4165 -  -  -  -  		;
   59 00:4165 -  -  -  -  _CPRNewLine:
   60 00:4165 CD F4 4B -  		call 	SYSPrintCRLF
   61 00:4168 18 05 -  -  		jr 		_CPRCheckNext
   62 00:416A -  -  -  -  		;
   63 00:416A -  -  -  -  		; 		Tab command (,)
   64 00:416A -  -  -  -  		;
   65 00:416A -  -  -  -  _CPRTab:
   66 00:416A 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:416C CD D8 4B -  		call 	SYSPrintChar
   68 00:416F -  -  -  -  		;
   69 00:416F -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:416F -  -  -  -  		;
   71 00:416F -  -  -  -  _CPRCheckNext:
   72 00:416F DD 23 -  -  		inc 	ix 							; consume current
   73 00:4171 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:4174 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:4176 C8 -  -  -  		ret 	z
   76 00:4177 FE A7 -  -  		cp 		KWD_COLON
   77 00:4179 C8 -  -  -  		ret 	z
   78 00:417A 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:417C -  -  -  -  		;
   80 00:417C -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:417C -  -  -  -  		;
   82 00:417C -  -  -  -  _CPRExitNL:
   83 00:417C CD F4 4B -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:417F C9 -  -  -  		ret
Listing for file "_build.asm"
   20 00:4180 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4180 -  -  -  -  ; ***************************************************************************************
    2 00:4180 -  -  -  -  ; ***************************************************************************************
    3 00:4180 -  -  -  -  ;
    4 00:4180 -  -  -  -  ;		Name : 		rem.asm
    5 00:4180 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4180 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4180 -  -  -  -  ;		Reviewed :	No
    8 00:4180 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4180 -  -  -  -  ;
   10 00:4180 -  -  -  -  ; ***************************************************************************************
   11 00:4180 -  -  -  -  ; ***************************************************************************************
   12 00:4180 -  -  -  -  
   13 00:4180 -  -  -  -  ; ***************************************************************************************
   14 00:4180 -  -  -  -  ;
   15 00:4180 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4180 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4180 -  -  -  -  ;
   18 00:4180 -  -  -  -  ; ***************************************************************************************
   19 00:4180 -  -  -  -  
   20 00:4180 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4180 -  -  -  -  Command_REM2: 	;; [']
   22 00:4180 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:4183 DD 23 -  -  		inc 	ix
   24 00:4185 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:4187 C8 -  -  -  		ret 	z
   26 00:4188 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:418A C8 -  -  -  		ret 	z
   28 00:418B FE 3F -  -  		cp 		STRING_MARKER
   29 00:418D C2 9F 42 -  		jp 		nz,SyntaxError
   30 00:4190 -  -  -  -  		;		
   31 00:4190 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:4193 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4196 13 -  -  -  		inc 	de 
   34 00:4197 13 -  -  -  		inc 	de
   35 00:4198 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:419A C9 -  -  -  		ret
   37 00:419B -  -  -  -  
   38 00:419B -  -  -  -  ; ***************************************************************************************
   39 00:419B -  -  -  -  ;
   40 00:419B -  -  -  -  ;									Changes and Updates
   41 00:419B -  -  -  -  ;
   42 00:419B -  -  -  -  ; ***************************************************************************************
   43 00:419B -  -  -  -  ;
   44 00:419B -  -  -  -  ;		Date			Notes
   45 00:419B -  -  -  -  ;		==== 			=====
   46 00:419B -  -  -  -  ;
   47 00:419B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:419B -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:419B -  -  -  -  ; ***************************************************************************************
    2 00:419B -  -  -  -  ; ***************************************************************************************
    3 00:419B -  -  -  -  ;
    4 00:419B -  -  -  -  ;		Name : 		run.asm
    5 00:419B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:419B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:419B -  -  -  -  ;		Reviewed :	No
    8 00:419B -  -  -  -  ;		Purpose :	Run command
    9 00:419B -  -  -  -  ;
   10 00:419B -  -  -  -  ; ***************************************************************************************
   11 00:419B -  -  -  -  ; ***************************************************************************************
   12 00:419B -  -  -  -  
   13 00:419B -  -  -  -  ; ***************************************************************************************
   14 00:419B -  -  -  -  ;
   15 00:419B -  -  -  -  ;										RUN command
   16 00:419B -  -  -  -  ;
   17 00:419B -  -  -  -  ; ***************************************************************************************
   18 00:419B -  -  -  -  
   19 00:419B -  -  -  -  Command_RUN: 	;; [run]
   20 00:419B CD 6F 46 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:419E -  -  -  -  
   22 00:419E DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:41A2 ED 73 4D 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:41A6 AF -  -  -  		xor 	a
   25 00:41A7 32 6D 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:41AA -  -  -  -  		;
   27 00:41AA -  -  -  -  		; 		New line at IX.
   28 00:41AA -  -  -  -  		;
   29 00:41AA -  -  -  -  CRNewLine:
   30 00:41AA DD 22 49 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:41AE -  -  -  -  		;
   32 00:41AE DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:41B1 B7 -  -  -  		or 		a
   34 00:41B2 CA D4 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:41B5 -  -  -  -  		;
   36 00:41B5 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:41B7 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:41B9 DD 23 -  -  		inc 	ix
   39 00:41BB -  -  -  -  		;
   40 00:41BB -  -  -  -  		; 		New command at IX
   41 00:41BB -  -  -  -  		;
   42 00:41BB -  -  -  -  _CRNewCommand:	
   43 00:41BB DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:41BE B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:41BF F2 F3 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:41C2 -  -  -  -  		;
   47 00:41C2 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:41C4 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:41C6 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:41C8 D2 E4 41 -  		jp 		nc,_CRAlternateLets
   51 00:41CB -  -  -  -  		;
   52 00:41CB -  -  -  -  _CRDoCommand:		
   53 00:41CB E6 7F 21 00 
              00 6F 29 11 
              5E 49 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:41DD DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:41DF CD 51 40 -  		call 	JumpCode 					; call the routine.
   56 00:41E2 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:41E4 -  -  -  -  		;
   58 00:41E4 -  -  -  -  		; 		Do CALL (HL)
   59 00:41E4 -  -  -  -  		;
   60 00:41E4 -  -  -  -  		;
   61 00:41E4 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:41E4 -  -  -  -  		;		
   63 00:41E4 -  -  -  -  _CRAlternateLets:		
   64 00:41E4 FE 83 -  -  		cp 		KWD_PLING
   65 00:41E6 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:41E8 FE 84 -  -  		cp 		KWD_QMARK
   67 00:41EA 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:41EC FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:41EE 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:41F0 C3 9F 42 -  		jp 		SyntaxError
   71 00:41F3 -  -  -  -  		;
   72 00:41F3 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:41F3 -  -  -  -  		;
   74 00:41F3 -  -  -  -  _CRAssignmentHandler:		
   75 00:41F3 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:41F5 D2 9F 42 -  		jp 		nc,SyntaxError
   77 00:41F8 -  -  -  -  _CRAssignmentLet:		
   78 00:41F8 CD EC 40 -  		call	Command_LET 				; do LET.
   79 00:41FB C3 BB 41 -  		jp 		_CRNewCommand
   80 00:41FE -  -  -  -  
   81 00:41FE -  -  -  -  ; ***************************************************************************************
   82 00:41FE -  -  -  -  ;
   83 00:41FE -  -  -  -  ;									Changes and Updates
   84 00:41FE -  -  -  -  ;
   85 00:41FE -  -  -  -  ; ***************************************************************************************
   86 00:41FE -  -  -  -  ;
   87 00:41FE -  -  -  -  ;		Date			Notes
   88 00:41FE -  -  -  -  ;		==== 			=====
   89 00:41FE -  -  -  -  ;
   90 00:41FE -  -  -  -  ; ***************************************************************************************
   91 00:41FE -  -  -  -  		
Listing for file "_build.asm"
   22 00:41FE -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:41FE -  -  -  -  ; ***************************************************************************************
    2 00:41FE -  -  -  -  ; ***************************************************************************************
    3 00:41FE -  -  -  -  ;
    4 00:41FE -  -  -  -  ;		Name : 		stop.asm
    5 00:41FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41FE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41FE -  -  -  -  ;		Reviewed :	No
    8 00:41FE -  -  -  -  ;		Purpose :	Stop command
    9 00:41FE -  -  -  -  ;
   10 00:41FE -  -  -  -  ; ***************************************************************************************
   11 00:41FE -  -  -  -  ; ***************************************************************************************
   12 00:41FE -  -  -  -  
   13 00:41FE -  -  -  -  ; ***************************************************************************************
   14 00:41FE -  -  -  -  ;
   15 00:41FE -  -  -  -  ;										STOP command
   16 00:41FE -  -  -  -  ;
   17 00:41FE -  -  -  -  ; ***************************************************************************************
   18 00:41FE -  -  -  -  
   19 00:41FE -  -  -  -  Command_STOP: 	;; [stop]
   20 00:41FE 3E 0C C3 42 
              42 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4203 -  -  -  -  
   22 00:4203 -  -  -  -  ; ***************************************************************************************
   23 00:4203 -  -  -  -  ;
   24 00:4203 -  -  -  -  ;									Changes and Updates
   25 00:4203 -  -  -  -  ;
   26 00:4203 -  -  -  -  ; ***************************************************************************************
   27 00:4203 -  -  -  -  ;
   28 00:4203 -  -  -  -  ;		Date			Notes
   29 00:4203 -  -  -  -  ;		==== 			=====
   30 00:4203 -  -  -  -  ;
   31 00:4203 -  -  -  -  ; ***************************************************************************************
   32 00:4203 -  -  -  -  		
Listing for file "_build.asm"
   23 00:4203 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4203 -  -  -  -  ; ***************************************************************************************
    2 00:4203 -  -  -  -  ; ***************************************************************************************
    3 00:4203 -  -  -  -  ;
    4 00:4203 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4203 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4203 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4203 -  -  -  -  ;		Reviewed :	No
    8 00:4203 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4203 -  -  -  -  ;
   10 00:4203 -  -  -  -  ; ***************************************************************************************
   11 00:4203 -  -  -  -  ; ***************************************************************************************
   12 00:4203 -  -  -  -  
   13 00:4203 -  -  -  -  ; ***************************************************************************************
   14 00:4203 -  -  -  -  ;
   15 00:4203 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4203 -  -  -  -  ;
   17 00:4203 -  -  -  -  ; ***************************************************************************************
   18 00:4203 -  -  -  -  
   19 00:4203 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4203             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4203             		inc 	ix
   22 00:4203             		cp 		ch 							; exit if matches
   23 00:4203             		ret 	z
   24 00:4203             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4203             		jp 		ErrorHandler
   26 00:4203             #endmacro
   27 00:4203 -  -  -  -  
   28 00:4203 -  -  -  -  CheckLeftBracket:
   29 00:4203 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 42 
              42 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4210 -  -  -  -  
   31 00:4210 -  -  -  -  CheckRightBracket:
   32 00:4210 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 42 
              42 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:421D -  -  -  -  
   34 00:421D -  -  -  -  CheckDollar:
   35 00:421D DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 42 
              42 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:422A -  -  -  -  		
   37 00:422A -  -  -  -  CheckComma:
   38 00:422A DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 42 
              42 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4237 -  -  -  -  
   40 00:4237 -  -  -  -  ; ***************************************************************************************
   41 00:4237 -  -  -  -  ;
   42 00:4237 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4237 -  -  -  -  ;
   44 00:4237 -  -  -  -  ; ***************************************************************************************
   45 00:4237 -  -  -  -  
   46 00:4237 -  -  -  -  CheckNextA:
   47 00:4237 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:423A DD 23 -  -  		inc 	ix 							; skip character
   49 00:423C C8 -  -  -  		ret 	z 							; yes, okay
   50 00:423D 3E 0D C3 42 
              42 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:4242 -  -  -  -  		
   52 00:4242 -  -  -  -  ; ***************************************************************************************
   53 00:4242 -  -  -  -  ;
   54 00:4242 -  -  -  -  ;									Changes and Updates
   55 00:4242 -  -  -  -  ;
   56 00:4242 -  -  -  -  ; ***************************************************************************************
   57 00:4242 -  -  -  -  ;
   58 00:4242 -  -  -  -  ;		Date			Notes
   59 00:4242 -  -  -  -  ;		==== 			=====
   60 00:4242 -  -  -  -  ;
   61 00:4242 -  -  -  -  ; ***************************************************************************************
   62 00:4242 -  -  -  -  		
Listing for file "_build.asm"
   24 00:4242 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4242 -  -  -  -  ; ***************************************************************************************
    2 00:4242 -  -  -  -  ; ***************************************************************************************
    3 00:4242 -  -  -  -  ;
    4 00:4242 -  -  -  -  ;		Name : 		errors.asm
    5 00:4242 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4242 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4242 -  -  -  -  ;		Reviewed :	No
    8 00:4242 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4242 -  -  -  -  ;
   10 00:4242 -  -  -  -  ; ***************************************************************************************
   11 00:4242 -  -  -  -  ; ***************************************************************************************
   12 00:4242 -  -  -  -  
   13 00:4242 -  -  -  -  ; ***************************************************************************************
   14 00:4242 -  -  -  -  ;
   15 00:4242 -  -  -  -  ;								Error handler, message A 
   16 00:4242 -  -  -  -  ;
   17 00:4242 -  -  -  -  ; ***************************************************************************************
   18 00:4242 -  -  -  -  
   19 00:4242 -  -  -  -  ErrorHandler:
   20 00:4242 F5 -  -  -  		push 	af 						; save error ID
   21 00:4243 -  -  -  -  
   22 00:4243 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4246 6F -  -  -  		ld 		l,a
   24 00:4247 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4248 29 -  -  -  		add 	hl,hl 		
   26 00:4249 11 31 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:424C 19 -  -  -  		add 	hl,de
   28 00:424D 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4251 CD B8 46 -  		call 	PrintStringAtHL
   30 00:4254 -  -  -  -  		;
   31 00:4254 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4255 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4256 28 28 -  -  		jr 		z,_EHExit
   34 00:4258 -  -  -  -  		;
   35 00:4258 DD 2A 49 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:425C DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:425F B7 -  -  -  		or 		a
   38 00:4260 28 1E -  -  		jr 		z,_EHExit
   39 00:4262 -  -  -  -  
   40 00:4262 21 86 42 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4265 CD B8 46 -  		call 	PrintStringAtHL 
   42 00:4268 -  -  -  -  		
   43 00:4268 D9 -  -  -  		exx								; HL'HL = line number
   44 00:4269 21 00 00 -  		ld 		hl,$0000 		
   45 00:426C D9 -  -  -  		exx 
   46 00:426D DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4270 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4273 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4275 01 81 40 -  		ld 		bc,ConvertBuffer
   50 00:4278 CD 8A 4B -  		call 	Int32ToString
   51 00:427B C5 -  -  -  		push 	bc
   52 00:427C E1 -  -  -  		pop 	hl
   53 00:427D CD B8 46 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4280 -  -  -  -  _EHExit:		
   55 00:4280 CD F4 4B -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4283 C3 17 40 -  		jp 		WarmStart
   57 00:4286 -  -  -  -  
   58 00:4286 -  -  -  -  _EHAtText:
   59 00:4286 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4290 -  -  -  -  
   61 00:4290 -  -  -  -  NotImplemented:
   62 00:4290 3E 04 C3 42 
              42 -  -  -  		ERR_DISABLED
   63 00:4295 -  -  -  -  TypeMismatch:
   64 00:4295 3E 02 C3 42 
              42 -  -  -  		ERR_BADTYPE
   65 00:429A -  -  -  -  BadValue:
   66 00:429A 3E 03 C3 42 
              42 -  -  -  		ERR_BADVALUE
   67 00:429F -  -  -  -  SyntaxError:
   68 00:429F 3E 0D C3 42 
              42 -  -  -  		ERR_SYNTAX
   69 00:42A4 -  -  -  -  						
   70 00:42A4 -  -  -  -  ; ***************************************************************************************
   71 00:42A4 -  -  -  -  ;
   72 00:42A4 -  -  -  -  ;									Changes and Updates
   73 00:42A4 -  -  -  -  ;
   74 00:42A4 -  -  -  -  ; ***************************************************************************************
   75 00:42A4 -  -  -  -  ;
   76 00:42A4 -  -  -  -  ;		Date			Notes
   77 00:42A4 -  -  -  -  ;		==== 			=====
   78 00:42A4 -  -  -  -  ;
   79 00:42A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:42A4 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:42A4 -  -  -  -  ; ***************************************************************************************
    2 00:42A4 -  -  -  -  ; ***************************************************************************************
    3 00:42A4 -  -  -  -  ;
    4 00:42A4 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:42A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42A4 -  -  -  -  ;		Reviewed :	No
    8 00:42A4 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:42A4 -  -  -  -  ;
   10 00:42A4 -  -  -  -  ; ***************************************************************************************
   11 00:42A4 -  -  -  -  ; ***************************************************************************************
   12 00:42A4 -  -  -  -  
   13 00:42A4 -  -  -  -  ; ***************************************************************************************
   14 00:42A4 -  -  -  -  ;
   15 00:42A4 -  -  -  -  ; 									Addition
   16 00:42A4 -  -  -  -  ;
   17 00:42A4 -  -  -  -  ; ***************************************************************************************
   18 00:42A4 -  -  -  -  
   19 00:42A4 -  -  -  -  ALUAdd: 		;; [+]
   20 00:42A4 CD 97 43 78 
              B1 C2 95 42 
              C3 17 4B -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:42AF -  -  -  -  
   22 00:42AF -  -  -  -  ; ***************************************************************************************
   23 00:42AF -  -  -  -  ;
   24 00:42AF -  -  -  -  ; 									Subtraction
   25 00:42AF -  -  -  -  ;
   26 00:42AF -  -  -  -  ; ***************************************************************************************
   27 00:42AF -  -  -  -  
   28 00:42AF -  -  -  -  ALUSubtract: 	;; [-]
   29 00:42AF CD 97 43 78 
              B1 C2 95 42 
              C3 1D 4B -  		IntegerDispatch(Int32Subtract)
   30 00:42BA -  -  -  -  
   31 00:42BA -  -  -  -  ; ***************************************************************************************
   32 00:42BA -  -  -  -  ;
   33 00:42BA -  -  -  -  ; 									  Multiply
   34 00:42BA -  -  -  -  ;
   35 00:42BA -  -  -  -  ; ***************************************************************************************
   36 00:42BA -  -  -  -  
   37 00:42BA -  -  -  -  ALUMultiply: 	;; [*]
   38 00:42BA CD 97 43 78 
              B1 C2 95 42 
              C3 E1 4A -  		IntegerDispatch(Int32Multiply)
   39 00:42C5 -  -  -  -  
   40 00:42C5 -  -  -  -  ; ***************************************************************************************
   41 00:42C5 -  -  -  -  ;
   42 00:42C5 -  -  -  -  ; 									  Divide
   43 00:42C5 -  -  -  -  ;
   44 00:42C5 -  -  -  -  ; ***************************************************************************************
   45 00:42C5 -  -  -  -  
   46 00:42C5 -  -  -  -  ALUDivide: 	;; [/]
   47 00:42C5 -  -  -  -  ALUDivide2:	;; [div]
   48 00:42C5 CD 97 43 78 
              B1 C2 95 42 
              C3 F2 49 -  		IntegerDispatch(Int32SDivide)
   49 00:42D0 -  -  -  -  
   50 00:42D0 -  -  -  -  ; ***************************************************************************************
   51 00:42D0 -  -  -  -  ;
   52 00:42D0 -  -  -  -  ; 									  Modulus
   53 00:42D0 -  -  -  -  ;
   54 00:42D0 -  -  -  -  ; ***************************************************************************************
   55 00:42D0 -  -  -  -  
   56 00:42D0 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:42D0 CD 97 43 78 
              B1 C2 95 42 
              C3 F5 49 -  		IntegerDispatch(Int32Modulus)
   58 00:42DB -  -  -  -  
   59 00:42DB -  -  -  -  ; ***************************************************************************************
   60 00:42DB -  -  -  -  ;
   61 00:42DB -  -  -  -  ; 									  Logical
   62 00:42DB -  -  -  -  ;
   63 00:42DB -  -  -  -  ; ***************************************************************************************
   64 00:42DB -  -  -  -  
   65 00:42DB -  -  -  -  ALUAnd: 		;; [and]
   66 00:42DB CD 97 43 78 
              B1 C2 95 42 
              C3 25 4B -  		IntegerDispatch(Int32And)
   67 00:42E6 -  -  -  -  
   68 00:42E6 -  -  -  -  ALUOr: 			;; [or]
   69 00:42E6 CD 97 43 78 
              B1 C2 95 42 
              C3 31 4B -  		IntegerDispatch(Int32Or)
   70 00:42F1 -  -  -  -  
   71 00:42F1 -  -  -  -  ALUXor: 		;; [eor]
   72 00:42F1 CD 97 43 78 
              B1 C2 95 42 
              C3 3D 4B -  		IntegerDispatch(Int32Xor)
   73 00:42FC -  -  -  -  
   74 00:42FC -  -  -  -  ; ***************************************************************************************
   75 00:42FC -  -  -  -  ;
   76 00:42FC -  -  -  -  ;									Changes and Updates
   77 00:42FC -  -  -  -  ;
   78 00:42FC -  -  -  -  ; ***************************************************************************************
   79 00:42FC -  -  -  -  ;
   80 00:42FC -  -  -  -  ;		Date			Notes
   81 00:42FC -  -  -  -  ;		==== 			=====
   82 00:42FC -  -  -  -  ;
   83 00:42FC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42FC -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:42FC -  -  -  -  ; ***************************************************************************************
    2 00:42FC -  -  -  -  ; ***************************************************************************************
    3 00:42FC -  -  -  -  ;
    4 00:42FC -  -  -  -  ;		Name : 		binrefs.asm
    5 00:42FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42FC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42FC -  -  -  -  ;		Reviewed :	No
    8 00:42FC -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:42FC -  -  -  -  ;
   10 00:42FC -  -  -  -  ; ***************************************************************************************
   11 00:42FC -  -  -  -  ; ***************************************************************************************
   12 00:42FC -  -  -  -  
   13 00:42FC -  -  -  -  ; ***************************************************************************************
   14 00:42FC -  -  -  -  ;
   15 00:42FC -  -  -  -  ; 									<l> <op> <r>
   16 00:42FC -  -  -  -  ;
   17 00:42FC -  -  -  -  ; ***************************************************************************************
   18 00:42FC -  -  -  -  
   19 00:42FC -  -  -  -  ALULongReference:			;; [!]
   20 00:42FC CD 0A 43 -  		call 	BRGetAddress 				; calculate address
   21 00:42FF 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4301 CB F9 -  -  		set 	CIsReference,c
   23 00:4303 C9 -  -  -  		ret
   24 00:4304 -  -  -  -  
   25 00:4304 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4304 CD FC 42 -  		call 	ALULongReference
   27 00:4307 CB F1 -  -  		set 	CIsByteReference,c
   28 00:4309 C9 -  -  -  		ret
   29 00:430A -  -  -  -  
   30 00:430A -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:430A CD 97 43 78 
              B1 C2 95 42 
              C3 15 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4315 -  -  -  -  _BRGAMain:		
   33 00:4315 CD 17 4B -  		call 	Int32Add 					; address in HL'HL
   34 00:4318 CD 80 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:431B C9 -  -  -  		ret
   36 00:431C -  -  -  -  
   37 00:431C -  -  -  -  ; ***************************************************************************************
   38 00:431C -  -  -  -  ;
   39 00:431C -  -  -  -  ;									Changes and Updates
   40 00:431C -  -  -  -  ;
   41 00:431C -  -  -  -  ; ***************************************************************************************
   42 00:431C -  -  -  -  ;
   43 00:431C -  -  -  -  ;		Date			Notes
   44 00:431C -  -  -  -  ;		==== 			=====
   45 00:431C -  -  -  -  ;
   46 00:431C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:431C -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:431C -  -  -  -  ; ***************************************************************************************
    2 00:431C -  -  -  -  ; ***************************************************************************************
    3 00:431C -  -  -  -  ;
    4 00:431C -  -  -  -  ;		Name : 		compare.asm
    5 00:431C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:431C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:431C -  -  -  -  ;		Reviewed :	No
    8 00:431C -  -  -  -  ;		Purpose :	Comparison code
    9 00:431C -  -  -  -  ;
   10 00:431C -  -  -  -  ; ***************************************************************************************
   11 00:431C -  -  -  -  ; ***************************************************************************************
   12 00:431C -  -  -  -  
   13 00:431C -  -  -  -  #macro compare_equals(n)
   14 00:431C             		call 	CompareBaseCode
   15 00:431C             		cp 		n
   16 00:431C             		jr 		z,UnaryInt32True
   17 00:431C             		jr 		UnaryInt32False
   18 00:431C             #endmacro
   19 00:431C -  -  -  -  
   20 00:431C -  -  -  -  #macro compare_not_equals(n)
   21 00:431C             		call 	CompareBaseCode
   22 00:431C             		cp 		n
   23 00:431C             		jr 		nz,UnaryInt32True
   24 00:431C             		jr 		UnaryInt32False
   25 00:431C             #endmacro
   26 00:431C -  -  -  -  
   27 00:431C -  -  -  -  ; ***************************************************************************************
   28 00:431C -  -  -  -  ;
   29 00:431C -  -  -  -  ; 								Return True/False
   30 00:431C -  -  -  -  ;
   31 00:431C -  -  -  -  ; ***************************************************************************************
   32 00:431C -  -  -  -  
   33 00:431C -  -  -  -  UnaryInt32True:	;; [true]
   34 00:431C 3E FF -  -  		ld 		a,255
   35 00:431E 18 01 -  -  		jr 		_Int32Logical
   36 00:4320 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:4320 AF -  -  -  		xor 	a
   38 00:4321 -  -  -  -  _Int32Logical:
   39 00:4321 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4322 67 -  -  -  		ld 		h,a
   41 00:4323 D9 -  -  -  		exx
   42 00:4324 6F -  -  -  		ld 		l,a
   43 00:4325 67 -  -  -  		ld 		h,a
   44 00:4326 D9 -  -  -  		exx
   45 00:4327 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:4329 C9 -  -  -  		ret
   47 00:432A -  -  -  -  
   48 00:432A -  -  -  -  ; ***************************************************************************************
   49 00:432A -  -  -  -  ;
   50 00:432A -  -  -  -  ; 										> = < (compare == value)
   51 00:432A -  -  -  -  ;
   52 00:432A -  -  -  -  ; ***************************************************************************************
   53 00:432A -  -  -  -  
   54 00:432A -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:432A CD 60 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4333 -  -  -  -  
   57 00:4333 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4333 CD 60 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:433C -  -  -  -  
   60 00:433C -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:433C CD 60 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4345 -  -  -  -  
   63 00:4345 -  -  -  -  ; ***************************************************************************************
   64 00:4345 -  -  -  -  ;
   65 00:4345 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4345 -  -  -  -  ;
   67 00:4345 -  -  -  -  ; ***************************************************************************************
   68 00:4345 -  -  -  -  
   69 00:4345 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4345 CD 60 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:434E -  -  -  -  
   72 00:434E -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:434E CD 60 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4357 -  -  -  -  
   75 00:4357 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4357 CD 60 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4360 -  -  -  -  
   78 00:4360 -  -  -  -  ; ***************************************************************************************
   79 00:4360 -  -  -  -  ;
   80 00:4360 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4360 -  -  -  -  ;
   82 00:4360 -  -  -  -  ; ***************************************************************************************
   83 00:4360 -  -  -  -  
   84 00:4360 -  -  -  -  CompareBaseCode:
   85 00:4360 CD 97 43 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4363 -  -  -  -  
   87 00:4363 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4364 A1 -  -  -  		and 	c
   89 00:4365 CB 47 -  -  		bit 	CIsString,a 
   90 00:4367 C2 76 43 -  		jp 		nz,StringCompare
   91 00:436A -  -  -  -  
   92 00:436A 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:436B B1 -  -  -  		or 		c
   94 00:436C CB 47 -  -  		bit 	CIsString,a 
   95 00:436E CA 50 4B -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4371 -  -  -  -  
   97 00:4371 3E 02 C3 42 
              42 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4376 -  -  -  -  ;
   99 00:4376 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4376 -  -  -  -  ;
  101 00:4376 -  -  -  -  StringCompare:
  102 00:4376 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4377 BE -  -  -  		cp 		(hl)
  104 00:4378 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:437A 20 08 -  -  		jr 		nz,_SCLess
  106 00:437C 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:437D 23 -  -  -  		inc 	hl
  108 00:437E FE 20 -  -  		cp 		' '
  109 00:4380 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4382 AF -  -  -  		xor 	a 							; return 0.
  111 00:4383 C9 -  -  -  		ret
  112 00:4384 -  -  -  -  
  113 00:4384 -  -  -  -  _SCLess:
  114 00:4384 3E FF -  -  		ld 		a,$FF
  115 00:4386 C9 -  -  -  		ret
  116 00:4387 -  -  -  -  _SCGreater:
  117 00:4387 3E 01 -  -  		ld 		a,1
  118 00:4389 C9 -  -  -  		ret
  119 00:438A -  -  -  -  
  120 00:438A 3E 0E C3 42 
              42 -  -  -  		ERR_TODO()
  121 00:438F -  -  -  -  
  122 00:438F -  -  -  -  ; ***************************************************************************************
  123 00:438F -  -  -  -  ;
  124 00:438F -  -  -  -  ;									Changes and Updates
  125 00:438F -  -  -  -  ;
  126 00:438F -  -  -  -  ; ***************************************************************************************
  127 00:438F -  -  -  -  ;
  128 00:438F -  -  -  -  ;		Date			Notes
  129 00:438F -  -  -  -  ;		==== 			=====
  130 00:438F -  -  -  -  ;
  131 00:438F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:438F -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:438F -  -  -  -  ; ***************************************************************************************
    2 00:438F -  -  -  -  ; ***************************************************************************************
    3 00:438F -  -  -  -  ;
    4 00:438F -  -  -  -  ;		Name : 		utility.asm
    5 00:438F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:438F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:438F -  -  -  -  ;		Reviewed :	No
    8 00:438F -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:438F -  -  -  -  ;
   10 00:438F -  -  -  -  ; ***************************************************************************************
   11 00:438F -  -  -  -  ; ***************************************************************************************
   12 00:438F -  -  -  -  
   13 00:438F -  -  -  -  ; ***************************************************************************************
   14 00:438F -  -  -  -  ;
   15 00:438F -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:438F -  -  -  -  ;
   17 00:438F -  -  -  -  ; ***************************************************************************************
   18 00:438F -  -  -  -  
   19 00:438F -  -  -  -  SwapHLDE:
   20 00:438F EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4390 D9 -  -  -  			exx
   22 00:4391 EB -  -  -  			ex 		de,hl
   23 00:4392 D9 -  -  -  			exx
   24 00:4393 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4394 41 -  -  -  			ld 		b,c
   26 00:4395 4F -  -  -  			ld 		c,a
   27 00:4396 C9 -  -  -  			ret
   28 00:4397 -  -  -  -  
   29 00:4397 -  -  -  -  ; ***************************************************************************************
   30 00:4397 -  -  -  -  ;
   31 00:4397 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:4397 -  -  -  -  ;
   33 00:4397 -  -  -  -  ; ***************************************************************************************
   34 00:4397 -  -  -  -  
   35 00:4397 -  -  -  -  DereferenceBoth:
   36 00:4397 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:4399 C4 52 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:439C CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:439E C8 -  -  -  			ret 	z
   40 00:439F CD 8F 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:43A2 CD 52 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:43A5 CD 8F 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:43A8 C9 -  -  -  			ret
   44 00:43A9 -  -  -  -  
   45 00:43A9 -  -  -  -  ; ***************************************************************************************
   46 00:43A9 -  -  -  -  ;
   47 00:43A9 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:43A9 -  -  -  -  ;
   49 00:43A9 -  -  -  -  ; ***************************************************************************************
   50 00:43A9 -  -  -  -  
   51 00:43A9 -  -  -  -  NegateHLHL:	
   52 00:43A9 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:43AB C2 95 42 -  			jp 		nz,TypeMismatch
   54 00:43AE CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:43B0 C4 52 44 -  			call 	nz,Dereference 			; if required.
   56 00:43B3 CD 77 4B -  			call 	Int32Negate
   57 00:43B6 C9 -  -  -  			ret
Listing for file "_build.asm"
   29 00:43B7 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:43B7 -  -  -  -  ; ***************************************************************************************
    2 00:43B7 -  -  -  -  ; ***************************************************************************************
    3 00:43B7 -  -  -  -  ;
    4 00:43B7 -  -  -  -  ;		Name : 		expression.asm
    5 00:43B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43B7 -  -  -  -  ;		Reviewed :	None
    8 00:43B7 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:43B7 -  -  -  -  ;
   10 00:43B7 -  -  -  -  ; ***************************************************************************************
   11 00:43B7 -  -  -  -  ; ***************************************************************************************
   12 00:43B7 -  -  -  -  
   13 00:43B7 -  -  -  -  ; ***************************************************************************************
   14 00:43B7 -  -  -  -  ;
   15 00:43B7 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:43B7 -  -  -  -  ;
   17 00:43B7 -  -  -  -  ; ***************************************************************************************
   18 00:43B7 -  -  -  -  
   19 00:43B7 -  -  -  -  EvaluateAtPrecedence0:
   20 00:43B7 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:43B8 -  -  -  -  EvaluateAtPrecedence:
   22 00:43B8 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:43B9 -  -  -  -  		;
   24 00:43B9 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:43B9 -  -  -  -  		;
   26 00:43B9 CD 82 44 -  		call 	EvaluateTerm 				; get term
   27 00:43BC -  -  -  -  		;
   28 00:43BC -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:43BC -  -  -  -  		;
   30 00:43BC D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:43BD -  -  -  -  _EAPLoop:
   32 00:43BD DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:43C0 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:43C2 D8 -  -  -  		ret 	c
   35 00:43C3 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:43C5 D0 -  -  -  		ret 	nc
   37 00:43C6 -  -  -  -  		;
   38 00:43C6 -  -  -  -  		; 		Get the precedence.
   39 00:43C6 -  -  -  -  		;
   40 00:43C6 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:43C7 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:43C9 21 20 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:43CC B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:43CD 6F -  -  -  		ld 		l,a
   45 00:43CE 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:43CF E1 -  -  -  		pop 	hl 							; restore HL
   47 00:43D0 -  -  -  -  		;
   48 00:43D0 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:43D0 -  -  -  -  		;
   50 00:43D0 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:43D1 BB -  -  -  		cp 		e
   52 00:43D2 D0 -  -  -  		ret 	nc
   53 00:43D3 -  -  -  -  
   54 00:43D3 -  -  -  -  		;
   55 00:43D3 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:43D3 -  -  -  -  		;
   57 00:43D3 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:43D4 -  -  -  -  		;
   59 00:43D4 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:43D7 F5 -  -  -  		push 	af
   61 00:43D8 -  -  -  -  		;
   62 00:43D8 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:43D9 D9 -  -  -  		exx 								; save HL'
   64 00:43DA E5 -  -  -  		push 	hl
   65 00:43DB D9 -  -  -  		exx 								
   66 00:43DC E5 -  -  -  		push 	hl 							; save HL
   67 00:43DD -  -  -  -  		;
   68 00:43DD DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:43DF -  -  -  -  		;
   70 00:43DF -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:43DF -  -  -  -  		;
   72 00:43DF 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:43E0 CD B8 43 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:43E3 -  -  -  -  		;
   75 00:43E3 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:43E3 -  -  -  -  		;
   77 00:43E3 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:43E4 -  -  -  -  
   79 00:43E4 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:43E5 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:43E6 D9 -  -  -  		exx
   82 00:43E7 EB -  -  -  		ex 		de,hl
   83 00:43E8 E1 -  -  -  		pop 	hl
   84 00:43E9 D9 -  -  -  		exx
   85 00:43EA C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:43EB 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:43EC -  -  -  -  		;
   88 00:43EC -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:43EC -  -  -  -  		; 		is in B (type) DE'DE
   90 00:43EC -  -  -  -  		;
   91 00:43EC F1 -  -  -  		pop 	af 							; get operator in A
   92 00:43ED -  -  -  -  		;
   93 00:43ED -  -  -  -  		; 		Call the binary operator in A.
   94 00:43ED -  -  -  -  		;
   95 00:43ED D5 -  -  -  		push 	de
   96 00:43EE E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:43EF E6 7F 21 00 
              00 6F 29 11 
              5E 49 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4401 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4402 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4403 CD 51 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4406 -  -  -  -  		;
  102 00:4406 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:4407 -  -  -  -  		;
  104 00:4407 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:4409 -  -  -  -  
  106 00:4409 -  -  -  -  ; ***************************************************************************************
  107 00:4409 -  -  -  -  ;
  108 00:4409 -  -  -  -  ;									Changes and Updates
  109 00:4409 -  -  -  -  ;
  110 00:4409 -  -  -  -  ; ***************************************************************************************
  111 00:4409 -  -  -  -  ;
  112 00:4409 -  -  -  -  ;		Date			Notes
  113 00:4409 -  -  -  -  ;		==== 			=====
  114 00:4409 -  -  -  -  ;
  115 00:4409 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:4409 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:4409 -  -  -  -  ; ***************************************************************************************
    2 00:4409 -  -  -  -  ; ***************************************************************************************
    3 00:4409 -  -  -  -  ;
    4 00:4409 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:4409 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4409 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4409 -  -  -  -  ;		Reviewed :	No
    8 00:4409 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:4409 -  -  -  -  ;
   10 00:4409 -  -  -  -  ; ***************************************************************************************
   11 00:4409 -  -  -  -  ; ***************************************************************************************
   12 00:4409 -  -  -  -  
   13 00:4409 -  -  -  -  ; ***************************************************************************************
   14 00:4409 -  -  -  -  ;
   15 00:4409 -  -  -  -  ; 								Evaluate an integer term
   16 00:4409 -  -  -  -  ;
   17 00:4409 -  -  -  -  ; ***************************************************************************************
   18 00:4409 -  -  -  -  
   19 00:4409 -  -  -  -  EvaluateIntegerTerm:
   20 00:4409 CD 82 44 -  		call 	EvaluateTerm
   21 00:440C CD 52 44 -  		call 	DeReference
   22 00:440F CB 41 -  -  		bit 	CIsString,c
   23 00:4411 C8 -  -  -  		ret 	z
   24 00:4412 C3 95 42 -  		jp 		TypeMismatch
   25 00:4415 -  -  -  -  
   26 00:4415 -  -  -  -  ; ***************************************************************************************
   27 00:4415 -  -  -  -  ;
   28 00:4415 -  -  -  -  ; 								Evaluate a string term
   29 00:4415 -  -  -  -  ;
   30 00:4415 -  -  -  -  ; ***************************************************************************************
   31 00:4415 -  -  -  -  
   32 00:4415 -  -  -  -  EvaluateStringTerm:
   33 00:4415 CD 82 44 -  		call 	EvaluateTerm
   34 00:4418 CD 52 44 -  		call 	DeReference
   35 00:441B CB 41 -  -  		bit 	CIsString,c
   36 00:441D C0 -  -  -  		ret 	nz
   37 00:441E C3 95 42 -  		jp 		TypeMismatch
   38 00:4421 -  -  -  -  
   39 00:4421 -  -  -  -  ; ***************************************************************************************
   40 00:4421 -  -  -  -  ;
   41 00:4421 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4421 -  -  -  -  ;
   43 00:4421 -  -  -  -  ; ***************************************************************************************
   44 00:4421 -  -  -  -  
   45 00:4421 -  -  -  -  EvaluateValue:
   46 00:4421 CD B7 43 -  		call 	EvaluateAtPrecedence0
   47 00:4424 C3 52 44 -  		jp 		Dereference
   48 00:4427 -  -  -  -  
   49 00:4427 -  -  -  -  ; ***************************************************************************************
   50 00:4427 -  -  -  -  ;
   51 00:4427 -  -  -  -  ; 									Evaluate a number
   52 00:4427 -  -  -  -  ;
   53 00:4427 -  -  -  -  ; ***************************************************************************************
   54 00:4427 -  -  -  -  
   55 00:4427 -  -  -  -  EvaluateInteger:
   56 00:4427 CD 21 44 -  		call 	EvaluateValue
   57 00:442A CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:442C C8 -  -  -  		ret 	z
   59 00:442D C3 95 42 -  		jp 		TypeMismatch
   60 00:4430 -  -  -  -  
   61 00:4430 -  -  -  -  ; ***************************************************************************************
   62 00:4430 -  -  -  -  ;
   63 00:4430 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4430 -  -  -  -  ;
   65 00:4430 -  -  -  -  ; ***************************************************************************************
   66 00:4430 -  -  -  -  
   67 00:4430 -  -  -  -  Evaluate8BitInteger:
   68 00:4430 CD 27 44 -  		call 	EvaluateInteger
   69 00:4433 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4434 7C -  -  -  		ld 		a,h
   71 00:4435 B5 -  -  -  		or 		l
   72 00:4436 D9 -  -  -  		exx 	
   73 00:4437 B4 -  -  -  		or 		h
   74 00:4438 C2 9A 42 -  		jp 		nz,BadValue
   75 00:443B 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:443C C9 -  -  -  		ret
   77 00:443D -  -  -  -  		
   78 00:443D -  -  -  -  ; ***************************************************************************************
   79 00:443D -  -  -  -  ;
   80 00:443D -  -  -  -  ; 									Evaluate a string
   81 00:443D -  -  -  -  ;
   82 00:443D -  -  -  -  ; ***************************************************************************************
   83 00:443D -  -  -  -  
   84 00:443D -  -  -  -  EvaluateStringOnly:
   85 00:443D CD 21 44 -  		call 	EvaluateValue
   86 00:4440 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:4442 CA 95 42 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4445 C9 -  -  -  		ret
   89 00:4446 -  -  -  -  
   90 00:4446 -  -  -  -  ; ***************************************************************************************
   91 00:4446 -  -  -  -  ;
   92 00:4446 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4446 -  -  -  -  ;
   94 00:4446 -  -  -  -  ; ***************************************************************************************
   95 00:4446 -  -  -  -  
   96 00:4446 -  -  -  -  Return8BitConstant:
   97 00:4446 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:4449 6F -  -  -  		ld 		l,a
   99 00:444A -  -  -  -  Return16BitConstant:
  100 00:444A D9 -  -  -  		exx 								; clear HL'
  101 00:444B 21 00 00 -  		ld 		hl,0
  102 00:444E D9 -  -  -  		exx
  103 00:444F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4451 C9 -  -  -  		ret
  105 00:4452 -  -  -  -  
  106 00:4452 -  -  -  -  ; ***************************************************************************************
  107 00:4452 -  -  -  -  ;
  108 00:4452 -  -  -  -  ;									Changes and Updates
  109 00:4452 -  -  -  -  ;
  110 00:4452 -  -  -  -  ; ***************************************************************************************
  111 00:4452 -  -  -  -  ;
  112 00:4452 -  -  -  -  ;		Date			Notes
  113 00:4452 -  -  -  -  ;		==== 			=====
  114 00:4452 -  -  -  -  ;
  115 00:4452 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4452 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4452 -  -  -  -  ; ***************************************************************************************
    2 00:4452 -  -  -  -  ; ***************************************************************************************
    3 00:4452 -  -  -  -  ;
    4 00:4452 -  -  -  -  ;		Name : 		reference.asm
    5 00:4452 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4452 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4452 -  -  -  -  ;		Reviewed :	No
    8 00:4452 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4452 -  -  -  -  ;
   10 00:4452 -  -  -  -  ; ***************************************************************************************
   11 00:4452 -  -  -  -  ; ***************************************************************************************
   12 00:4452 -  -  -  -  
   13 00:4452 -  -  -  -  ; ***************************************************************************************
   14 00:4452 -  -  -  -  ;
   15 00:4452 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4452 -  -  -  -  ;
   17 00:4452 -  -  -  -  ; ***************************************************************************************
   18 00:4452 -  -  -  -  
   19 00:4452 -  -  -  -  Dereference:
   20 00:4452 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4454 C8 -  -  -  		ret 	z
   22 00:4455 -  -  -  -  
   23 00:4455 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4457 -  -  -  -  		
   25 00:4457 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:4459 20 20 -  -  		jr 		nz,_DRInternal
   27 00:445B -  -  -  -  
   28 00:445B CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:445D 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:445F -  -  -  -  
   31 00:445F E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4460 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4464 D9 -  -  -  		exx
   34 00:4465 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4466 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4467 23 -  -  -  		inc  	hl
   37 00:4468 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:446C D9 -  -  -  		exx 								; fix back
   39 00:446D C9 -  -  -  		ret
   40 00:446E -  -  -  -  
   41 00:446E -  -  -  -  _DeRefByte:		
   42 00:446E 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:446F 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4472 6F -  -  -  		ld	 	l,a
   45 00:4473 D9 -  -  -  		exx
   46 00:4474 21 00 00 -  		ld 		hl,$0000
   47 00:4477 D9 -  -  -  		exx
   48 00:4478 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:447A C9 -  -  -  		ret
   50 00:447B -  -  -  -  
   51 00:447B -  -  -  -  _DRInternal:
   52 00:447B 3E 04 C3 42 
              42 -  -  -  		ERR_DISABLED
   53 00:4480 -  -  -  -  
   54 00:4480 -  -  -  -  ; ***************************************************************************************
   55 00:4480 -  -  -  -  ;
   56 00:4480 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4480 -  -  -  -  ;
   58 00:4480 -  -  -  -  ; ***************************************************************************************
   59 00:4480 -  -  -  -  
   60 00:4480 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4480 -  -  -  -  		#ifdef EZ80
   62 00:4480             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4480             		exx
   64 00:4480             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4480             		ld 		hl,$0000 					; zero HL'
   66 00:4480             		exx
   67 00:4480             		ld 		hl,(AConvert) 				; load UHL
   68 00:4480             		#endif
   69 00:4480 C9 -  -  -  		ret
   70 00:4481 -  -  -  -  
   71 00:4481 -  -  -  -  ; ***************************************************************************************
   72 00:4481 -  -  -  -  ;
   73 00:4481 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4481 -  -  -  -  ;
   75 00:4481 -  -  -  -  ; ***************************************************************************************
   76 00:4481 -  -  -  -  
   77 00:4481 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4481 -  -  -  -  		#ifdef EZ80
   79 00:4481             		ld 		(AConvert),hl
   80 00:4481             		ld 		hl,$0000
   81 00:4481             		ld 		(AConvert+3),hl
   82 00:4481             		exx
   83 00:4481             		ld 		hl,(AConvert+2)
   84 00:4481             		exx
   85 00:4481             		xor 	a
   86 00:4481             		ld 		(AConvert+2),a
   87 00:4481             		ld 		hl,(AConvert)
   88 00:4481             		#endif
   89 00:4481 C9 -  -  -  		ret
   90 00:4482 -  -  -  -  
   91 00:4482 -  -  -  -  ; ***************************************************************************************
   92 00:4482 -  -  -  -  ;
   93 00:4482 -  -  -  -  ;									Changes and Updates
   94 00:4482 -  -  -  -  ;
   95 00:4482 -  -  -  -  ; ***************************************************************************************
   96 00:4482 -  -  -  -  ;
   97 00:4482 -  -  -  -  ;		Date			Notes
   98 00:4482 -  -  -  -  ;		==== 			=====
   99 00:4482 -  -  -  -  ;
  100 00:4482 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:4482 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4482 -  -  -  -  ; ***************************************************************************************
    2 00:4482 -  -  -  -  ; ***************************************************************************************
    3 00:4482 -  -  -  -  ;
    4 00:4482 -  -  -  -  ;		Name : 		term.asm
    5 00:4482 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4482 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4482 -  -  -  -  ;		Reviewed :	No
    8 00:4482 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4482 -  -  -  -  ;
   10 00:4482 -  -  -  -  ; ***************************************************************************************
   11 00:4482 -  -  -  -  ; ***************************************************************************************
   12 00:4482 -  -  -  -  
   13 00:4482 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4482             		add_hlhl_16
   15 00:4482             		exx
   16 00:4482             		adc_hlhl_16
   17 00:4482             		exx
   18 00:4482             #endmacro
   19 00:4482 -  -  -  -  
   20 00:4482 -  -  -  -  ; ***************************************************************************************
   21 00:4482 -  -  -  -  ;
   22 00:4482 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4482 -  -  -  -  ;
   24 00:4482 -  -  -  -  ; ***************************************************************************************
   25 00:4482 -  -  -  -  ;
   26 00:4482 -  -  -  -  ; 		Terms can be:
   27 00:4482 -  -  -  -  ;
   28 00:4482 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4482 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4482 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4482 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4482 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4482 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4482 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4482 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4482 -  -  -  -  ; 														reference of some sort.
   37 00:4482 -  -  -  -  ;
   38 00:4482 -  -  -  -  ; ***************************************************************************************
   39 00:4482 -  -  -  -  
   40 00:4482 -  -  -  -  EvaluateTerm:		
   41 00:4482 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4484 D9 -  -  -  		exx
   43 00:4485 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4488 D9 -  -  -  		exx
   45 00:4489 21 00 00 -  		ld 		hl,$0000		
   46 00:448C -  -  -  -  		;
   47 00:448C DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:448F FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4491 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:4493 DA 31 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4496 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4498 C2 E0 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:449B -  -  -  -  		;
   54 00:449B -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:449B -  -  -  -  		;
   56 00:449B -  -  -  -  _ETIntegerConstant:
   57 00:449B -  -  -  -  		;
   58 00:449B -  -  -  -  _ETIntegerLoop:		
   59 00:449B DD 7E 00 -  		ld 		a,(ix+0)
   60 00:449E E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:44A0 B5 -  -  -  		or 		l 							; or into L
   62 00:44A1 6F -  -  -  		ld 		l,a
   63 00:44A2 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:44A4 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:44A7 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:44A9 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:44AB D8 -  -  -  		ret 	c
   68 00:44AC -  -  -  -  
   69 00:44AC 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:44B1 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:44B6 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:44BB 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:44C0 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:44C5 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:44CA -  -  -  -  
   76 00:44CA 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:44CC -  -  -  -  		;
   78 00:44CC -  -  -  -  		; 		Found the $3F string marker.
   79 00:44CC -  -  -  -  		;
   80 00:44CC -  -  -  -  _ETStringMarker:		
   81 00:44CC DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:44CE DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:44D0 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:44D2 E1 -  -  -  		pop 	hl
   85 00:44D3 11 00 00 -  		ld 		de,$0000
   86 00:44D6 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:44D9 DD 19 -  -  		add 	ix,de
   88 00:44DB DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:44DD 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:44DF C9 -  -  -  		ret
   91 00:44E0 -  -  -  -  		;
   92 00:44E0 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:44E0 -  -  -  -  		;
   94 00:44E0 -  -  -  -  _ETFoundKeyword:
   95 00:44E0 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:44E2 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:44E4 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:44E6 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:44E8 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:44EA -  -  -  -  		;
  101 00:44EA -  -  -  -  		;		Unary group 0
  102 00:44EA -  -  -  -  		;
  103 00:44EA E6 7F 21 00 
              00 6F 29 11 
              5E 49 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:44FC C3 51 40 -  		jp 		JumpCode 					; and go there.
  105 00:44FF -  -  -  -  
  106 00:44FF -  -  -  -  _ETNotUnaryFunction0:	
  107 00:44FF FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4501 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4503 -  -  -  -  		;
  110 00:4503 -  -  -  -  		; 		- term
  111 00:4503 -  -  -  -  		;
  112 00:4503 CD 09 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4506 CD A9 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:4509 C9 -  -  -  		ret
  115 00:450A -  -  -  -  		;
  116 00:450A -  -  -  -  		;		! ? indirection check
  117 00:450A -  -  -  -  		;
  118 00:450A -  -  -  -  _ETCheckIndirection:	
  119 00:450A FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:450C 28 05 -  -  		jr 		z,_ETIndirection
  121 00:450E FE 83 -  -  		cp 		KWD_PLING
  122 00:4510 C2 9F 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4513 -  -  -  -  		;
  124 00:4513 -  -  -  -  		; 		! ? indirection
  125 00:4513 -  -  -  -  		;
  126 00:4513 -  -  -  -  _ETIndirection:
  127 00:4513 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4514 CD 82 44 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:4517 CD 52 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:451A CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:451C 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:451E CD 80 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4521 F1 -  -  -  		pop 	af 							; get type back
  134 00:4522 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4524 CB F9 -  -  		set 	CIsReference,c
  136 00:4526 FE 83 -  -  		cp 		KWD_PLING
  137 00:4528 C8 -  -  -  		ret 	z
  138 00:4529 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:452B C9 -  -  -  		ret
  140 00:452C -  -  -  -  _ETStringIndirect:
  141 00:452C 3E 02 C3 42 
              42 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4531 -  -  -  -  		;
  143 00:4531 -  -  -  -  		; 		Found an identifier.
  144 00:4531 -  -  -  -  		;
  145 00:4531 -  -  -  -  _ETVariable:
  146 00:4531 CD C2 46 -  		call 	FindVariable 				; find the variable.
  147 00:4534 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4535 3E 0F C3 42 
              42 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:453A -  -  -  -  		
  150 00:453A -  -  -  -  ; ***************************************************************************************
  151 00:453A -  -  -  -  ;
  152 00:453A -  -  -  -  ;									Changes and Updates
  153 00:453A -  -  -  -  ;
  154 00:453A -  -  -  -  ; ***************************************************************************************
  155 00:453A -  -  -  -  ;
  156 00:453A -  -  -  -  ;		Date			Notes
  157 00:453A -  -  -  -  ;		==== 			=====
  158 00:453A -  -  -  -  ;
  159 00:453A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:453A -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:453A -  -  -  -  ; ***************************************************************************************
    2 00:453A -  -  -  -  ; ***************************************************************************************
    3 00:453A -  -  -  -  ;
    4 00:453A -  -  -  -  ;		Name : 		abs.asm
    5 00:453A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:453A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:453A -  -  -  -  ;		Reviewed :	No
    8 00:453A -  -  -  -  ;		Purpose :	Absolute value 
    9 00:453A -  -  -  -  ;
   10 00:453A -  -  -  -  ; ***************************************************************************************
   11 00:453A -  -  -  -  ; ***************************************************************************************
   12 00:453A -  -  -  -  
   13 00:453A -  -  -  -  ; ***************************************************************************************
   14 00:453A -  -  -  -  ;
   15 00:453A -  -  -  -  ;								abs( unary function
   16 00:453A -  -  -  -  ;
   17 00:453A -  -  -  -  ; ***************************************************************************************
   18 00:453A -  -  -  -  
   19 00:453A -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:453A CD 09 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:453D D9 -  -  -  		exx 								; test MSB
   22 00:453E CB 7C -  -  		bit 	7,h
   23 00:4540 D9 -  -  -  		exx
   24 00:4541 C4 A9 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4544 C9 -  -  -  		ret
   26 00:4545 -  -  -  -  
   27 00:4545 -  -  -  -  ; ***************************************************************************************
   28 00:4545 -  -  -  -  ;
   29 00:4545 -  -  -  -  ;									Changes and Updates
   30 00:4545 -  -  -  -  ;
   31 00:4545 -  -  -  -  ; ***************************************************************************************
   32 00:4545 -  -  -  -  ;
   33 00:4545 -  -  -  -  ;		Date			Notes
   34 00:4545 -  -  -  -  ;		==== 			=====
   35 00:4545 -  -  -  -  ;
   36 00:4545 -  -  -  -  ; ***************************************************************************************
   37 00:4545 -  -  -  -  		
Listing for file "_build.asm"
   34 00:4545 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4545 -  -  -  -  ; ***************************************************************************************
    2 00:4545 -  -  -  -  ; ***************************************************************************************
    3 00:4545 -  -  -  -  ;
    4 00:4545 -  -  -  -  ;		Name : 		asc.asm
    5 00:4545 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4545 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4545 -  -  -  -  ;		Reviewed :	No
    8 00:4545 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4545 -  -  -  -  ;
   10 00:4545 -  -  -  -  ; ***************************************************************************************
   11 00:4545 -  -  -  -  ; ***************************************************************************************
   12 00:4545 -  -  -  -  
   13 00:4545 -  -  -  -  ; ***************************************************************************************
   14 00:4545 -  -  -  -  ;
   15 00:4545 -  -  -  -  ;								Asc unary function
   16 00:4545 -  -  -  -  ;
   17 00:4545 -  -  -  -  ; ***************************************************************************************
   18 00:4545 -  -  -  -  
   19 00:4545 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4545 CD 15 44 -  		call	EvaluateStringTerm			; Get string
   21 00:4548 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:4549 C3 46 44 -  		jp 		Return8BitConstant
   23 00:454C -  -  -  -  
   24 00:454C -  -  -  -  ; ***************************************************************************************
   25 00:454C -  -  -  -  ;
   26 00:454C -  -  -  -  ;									Changes and Updates
   27 00:454C -  -  -  -  ;
   28 00:454C -  -  -  -  ; ***************************************************************************************
   29 00:454C -  -  -  -  ;
   30 00:454C -  -  -  -  ;		Date			Notes
   31 00:454C -  -  -  -  ;		==== 			=====
   32 00:454C -  -  -  -  ;
   33 00:454C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:454C -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:454C -  -  -  -  ; ***************************************************************************************
    2 00:454C -  -  -  -  ; ***************************************************************************************
    3 00:454C -  -  -  -  ;
    4 00:454C -  -  -  -  ;		Name : 		chr.asm
    5 00:454C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454C -  -  -  -  ;		Reviewed :	No
    8 00:454C -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:454C -  -  -  -  ;
   10 00:454C -  -  -  -  ; ***************************************************************************************
   11 00:454C -  -  -  -  ; ***************************************************************************************
   12 00:454C -  -  -  -  
   13 00:454C -  -  -  -  ; ***************************************************************************************
   14 00:454C -  -  -  -  ;
   15 00:454C -  -  -  -  ;								Chr$() unary function
   16 00:454C -  -  -  -  ;
   17 00:454C -  -  -  -  ; ***************************************************************************************
   18 00:454C -  -  -  -  
   19 00:454C -  -  -  -  Unary_Chr:	;; [chr]
   20 00:454C CD 1D 42 -  		call 	CheckDollar
   21 00:454F CD 09 44 -  		call 	EvaluateIntegerTerm
   22 00:4552 7D -  -  -  		ld 		a,l 						; get character
   23 00:4553 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4555 21 80 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:4558 36 0D -  -  		ld 		(hl),13
   26 00:455A 2B -  -  -  		dec 	hl
   27 00:455B 77 -  -  -  		ld 		(hl),a
   28 00:455C C9 -  -  -  		ret
   29 00:455D -  -  -  -  
   30 00:455D -  -  -  -  ; ***************************************************************************************
   31 00:455D -  -  -  -  ;
   32 00:455D -  -  -  -  ;									Changes and Updates
   33 00:455D -  -  -  -  ;
   34 00:455D -  -  -  -  ; ***************************************************************************************
   35 00:455D -  -  -  -  ;
   36 00:455D -  -  -  -  ;		Date			Notes
   37 00:455D -  -  -  -  ;		==== 			=====
   38 00:455D -  -  -  -  ;
   39 00:455D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:455D -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:455D -  -  -  -  ; ***************************************************************************************
    2 00:455D -  -  -  -  ; ***************************************************************************************
    3 00:455D -  -  -  -  ;
    4 00:455D -  -  -  -  ;		Name : 		len.asm
    5 00:455D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:455D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:455D -  -  -  -  ;		Reviewed :	None
    8 00:455D -  -  -  -  ;		Purpose :	String Length
    9 00:455D -  -  -  -  ;
   10 00:455D -  -  -  -  ; ***************************************************************************************
   11 00:455D -  -  -  -  ; ***************************************************************************************
   12 00:455D -  -  -  -  
   13 00:455D -  -  -  -  ; ***************************************************************************************
   14 00:455D -  -  -  -  ;
   15 00:455D -  -  -  -  ;								Len unary function
   16 00:455D -  -  -  -  ;
   17 00:455D -  -  -  -  ; ***************************************************************************************
   18 00:455D -  -  -  -  
   19 00:455D -  -  -  -  Unary_Len:	;; [len]
   20 00:455D CD 15 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4560 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4561 CD 20 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4564 -  -  -  -  _ULCount:
   24 00:4564 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4565 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4567 D8 -  -  -  		ret 	c
   27 00:4568 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:4569 13 -  -  -  		inc 	de
   29 00:456A 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:456C -  -  -  -  
   31 00:456C -  -  -  -  ; ***************************************************************************************
   32 00:456C -  -  -  -  ;
   33 00:456C -  -  -  -  ;									Changes and Updates
   34 00:456C -  -  -  -  ;
   35 00:456C -  -  -  -  ; ***************************************************************************************
   36 00:456C -  -  -  -  ;
   37 00:456C -  -  -  -  ;		Date			Notes
   38 00:456C -  -  -  -  ;		==== 			=====
   39 00:456C -  -  -  -  ;
   40 00:456C -  -  -  -  ; ***************************************************************************************
   41 00:456C -  -  -  -  		
Listing for file "_build.asm"
   37 00:456C -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:456C -  -  -  -  ; ***************************************************************************************
    2 00:456C -  -  -  -  ; ***************************************************************************************
    3 00:456C -  -  -  -  ;
    4 00:456C -  -  -  -  ;		Name : 		makestring.asm
    5 00:456C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:456C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:456C -  -  -  -  ;		Reviewed :	No
    8 00:456C -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:456C -  -  -  -  ;
   10 00:456C -  -  -  -  ; ***************************************************************************************
   11 00:456C -  -  -  -  ; ***************************************************************************************
   12 00:456C -  -  -  -  
   13 00:456C -  -  -  -  ; ***************************************************************************************
   14 00:456C -  -  -  -  ;
   15 00:456C -  -  -  -  ;								Str$() unary function
   16 00:456C -  -  -  -  ;
   17 00:456C -  -  -  -  ; ***************************************************************************************
   18 00:456C -  -  -  -  
   19 00:456C -  -  -  -  Unary_MkStr:	;; [$]
   20 00:456C CD 09 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:456F CD 80 44 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4572 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4574 C9 -  -  -  		ret
   24 00:4575 -  -  -  -  
   25 00:4575 -  -  -  -  ; ***************************************************************************************
   26 00:4575 -  -  -  -  ;
   27 00:4575 -  -  -  -  ;									Changes and Updates
   28 00:4575 -  -  -  -  ;
   29 00:4575 -  -  -  -  ; ***************************************************************************************
   30 00:4575 -  -  -  -  ;
   31 00:4575 -  -  -  -  ;		Date			Notes
   32 00:4575 -  -  -  -  ;		==== 			=====
   33 00:4575 -  -  -  -  ;
   34 00:4575 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:4575 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4575 -  -  -  -  ; ***************************************************************************************
    2 00:4575 -  -  -  -  ; ***************************************************************************************
    3 00:4575 -  -  -  -  ;
    4 00:4575 -  -  -  -  ;		Name : 		not.asm
    5 00:4575 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4575 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4575 -  -  -  -  ;		Reviewed :	No
    8 00:4575 -  -  -  -  ;		Purpose :	Logical not
    9 00:4575 -  -  -  -  ;
   10 00:4575 -  -  -  -  ; ***************************************************************************************
   11 00:4575 -  -  -  -  ; ***************************************************************************************
   12 00:4575 -  -  -  -  
   13 00:4575 -  -  -  -  ; ***************************************************************************************
   14 00:4575 -  -  -  -  ;
   15 00:4575 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4575 -  -  -  -  ;
   17 00:4575 -  -  -  -  ; ***************************************************************************************
   18 00:4575 -  -  -  -  
   19 00:4575 -  -  -  -  Unary_Not:		;; [not]
   20 00:4575 CD 09 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4578 CD 7F 45 -  		call 	__UNSwap 					; not and swap twice.
   22 00:457B CD 7F 45 -  		call 	__UNSwap		
   23 00:457E C9 -  -  -  		ret
   24 00:457F -  -  -  -  
   25 00:457F -  -  -  -  __UNSwap:
   26 00:457F 7C -  -  -  		ld 		a,h
   27 00:4580 2F -  -  -  		cpl
   28 00:4581 67 -  -  -  		ld 		h,a
   29 00:4582 7D -  -  -  		ld 		a,l
   30 00:4583 2F -  -  -  		cpl 	
   31 00:4584 6F -  -  -  		ld 		l,a
   32 00:4585 D9 -  -  -  		exx
   33 00:4586 C9 -  -  -  		ret
   34 00:4587 -  -  -  -  
   35 00:4587 -  -  -  -  ; ***************************************************************************************
   36 00:4587 -  -  -  -  ;
   37 00:4587 -  -  -  -  ;									Changes and Updates
   38 00:4587 -  -  -  -  ;
   39 00:4587 -  -  -  -  ; ***************************************************************************************
   40 00:4587 -  -  -  -  ;
   41 00:4587 -  -  -  -  ;		Date			Notes
   42 00:4587 -  -  -  -  ;		==== 			=====
   43 00:4587 -  -  -  -  ;
   44 00:4587 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4587 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4587 -  -  -  -  ; ***************************************************************************************
    2 00:4587 -  -  -  -  ; ***************************************************************************************
    3 00:4587 -  -  -  -  ;
    4 00:4587 -  -  -  -  ;		Name : 		page.asm
    5 00:4587 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4587 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4587 -  -  -  -  ;		Reviewed :	No
    8 00:4587 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4587 -  -  -  -  ;
   10 00:4587 -  -  -  -  ; ***************************************************************************************
   11 00:4587 -  -  -  -  ; ***************************************************************************************
   12 00:4587 -  -  -  -  
   13 00:4587 -  -  -  -  ; ***************************************************************************************
   14 00:4587 -  -  -  -  ;
   15 00:4587 -  -  -  -  ;							page unary function (no bracket)
   16 00:4587 -  -  -  -  ;
   17 00:4587 -  -  -  -  ; ***************************************************************************************
   18 00:4587 -  -  -  -  
   19 00:4587 -  -  -  -  Unary_Page:	;; [page]
   20 00:4587 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:458A D9 -  -  -  			exx
   22 00:458B 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:458E D9 -  -  -  			exx
   24 00:458F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4591 C9 -  -  -  			ret
   26 00:4592 -  -  -  -  
   27 00:4592 -  -  -  -  ; ***************************************************************************************
   28 00:4592 -  -  -  -  ;
   29 00:4592 -  -  -  -  ;									Changes and Updates
   30 00:4592 -  -  -  -  ;
   31 00:4592 -  -  -  -  ; ***************************************************************************************
   32 00:4592 -  -  -  -  ;
   33 00:4592 -  -  -  -  ;		Date			Notes
   34 00:4592 -  -  -  -  ;		==== 			=====
   35 00:4592 -  -  -  -  ;
   36 00:4592 -  -  -  -  ; ***************************************************************************************
   37 00:4592 -  -  -  -  			
Listing for file "_build.asm"
   40 00:4592 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:4592 -  -  -  -  ; ***************************************************************************************
    2 00:4592 -  -  -  -  ; ***************************************************************************************
    3 00:4592 -  -  -  -  ;
    4 00:4592 -  -  -  -  ;		Name : 		random.asm
    5 00:4592 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4592 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4592 -  -  -  -  ;		Reviewed :	No
    8 00:4592 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:4592 -  -  -  -  ;
   10 00:4592 -  -  -  -  ; ***************************************************************************************
   11 00:4592 -  -  -  -  ; ***************************************************************************************
   12 00:4592 -  -  -  -  
   13 00:4592 -  -  -  -  ; ***************************************************************************************
   14 00:4592 -  -  -  -  ;
   15 00:4592 -  -  -  -  ;								Random unary function
   16 00:4592 -  -  -  -  ;
   17 00:4592 -  -  -  -  ; ***************************************************************************************
   18 00:4592 -  -  -  -  
   19 00:4592 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:4592 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:4593 CD 09 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4596 D9 -  -  -  		exx 								; is it -ve
   23 00:4597 CB 7C -  -  		bit 	7,h
   24 00:4599 D9 -  -  -  		exx
   25 00:459A 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:459C 22 5D 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:459F D9 -  -  -  		exx
   28 00:45A0 22 61 40 -  		ld 		(RandomSeed+4),hl
   29 00:45A3 D9 -  -  -  		exx
   30 00:45A4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:45A6 C9 -  -  -  		ret
   32 00:45A7 -  -  -  -  _URDontSeed:		
   33 00:45A7 -  -  -  -  
   34 00:45A7 CD 49 4B -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:45AA 28 19 -  -  		jr 		z,_URFail
   36 00:45AC E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:45AD D9 -  -  -  		exx
   38 00:45AE E5 -  -  -  		push 	hl
   39 00:45AF D9 -  -  -  		exx
   40 00:45B0 -  -  -  -  		;
   41 00:45B0 CD D4 45 -  		call 	URandomHL 					; get random HL'HL
   42 00:45B3 D9 -  -  -  		exx
   43 00:45B4 CD D4 45 -  		call 	URandomHL
   44 00:45B7 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:45B9 D9 -  -  -  		exx
   46 00:45BA -  -  -  -  		;
   47 00:45BA D9 -  -  -  		exx 								; restore range.
   48 00:45BB D1 -  -  -  		pop 	de
   49 00:45BC D9 -  -  -  		exx
   50 00:45BD D1 -  -  -  		pop 	de
   51 00:45BE -  -  -  -  		;
   52 00:45BE CD F5 49 -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:45C1 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:45C2 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:45C4 C9 -  -  -  		ret
   56 00:45C5 -  -  -  -  _URFail:
   57 00:45C5 3E 03 C3 42 
              42 -  -  -  		ERR_BADVALUE
   58 00:45CA -  -  -  -  ; ***************************************************************************************
   59 00:45CA -  -  -  -  ;
   60 00:45CA -  -  -  -  ; 									Push RNG off zero
   61 00:45CA -  -  -  -  ;
   62 00:45CA -  -  -  -  ; ***************************************************************************************
   63 00:45CA -  -  -  -  
   64 00:45CA -  -  -  -  UnaryRandomInitialise:
   65 00:45CA 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:45CC -  -  -  -  _URILoop:
   67 00:45CC C5 -  -  -  		push 	bc
   68 00:45CD CD D4 45 -  		call 	URandomHL
   69 00:45D0 C1 -  -  -  		pop 	bc
   70 00:45D1 10 F9 -  -  		djnz 	_URILoop
   71 00:45D3 C9 -  -  -  		ret
   72 00:45D4 -  -  -  -  
   73 00:45D4 -  -  -  -  ; ***************************************************************************************
   74 00:45D4 -  -  -  -  ;
   75 00:45D4 -  -  -  -  ;							16 bit random number generator
   76 00:45D4 -  -  -  -  ;
   77 00:45D4 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:45D4 -  -  -  -  ;		Actual author unspecified.
   79 00:45D4 -  -  -  -  ;
   80 00:45D4 -  -  -  -  ; ***************************************************************************************
   81 00:45D4 -  -  -  -  
   82 00:45D4 -  -  -  -  URandomHL:
   83 00:45D4 2A 5D 40 -  	    ld 		hl,(RandomSeed)
   84 00:45D7 ED 5B 61 40 	    ld 		de,(RandomSeed+4)
   85 00:45DB 44 -  -  -  	    ld 		b,h
   86 00:45DC 4D -  -  -  	    ld 		c,l
   87 00:45DD 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:45E2 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:45E7 2C -  -  -  	    inc 	l
   90 00:45E8 09 -  -  -  	    add 	hl,bc
   91 00:45E9 22 5D 40 -  	    ld 		(RandomSeed),hl
   92 00:45EC 2A 61 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:45EF ED 5A -  -  	    adc 	hl,de
   94 00:45F1 22 61 40 -  	    ld 		(RandomSeed+4),hl
   95 00:45F4 EB -  -  -  	    ex 		de,hl
   96 00:45F5 2A 65 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:45F8 ED 4B 69 40 	    ld 		bc,(RandomSeed+12)
   98 00:45FC 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4601 ED 43 69 40 	    ld 		(RandomSeed+12),bc
  100 00:4605 9F -  -  -  	    sbc 	a,a
  101 00:4606 E6 C5 -  -  	    and 	%11000101
  102 00:4608 AD -  -  -  	    xor 	l
  103 00:4609 6F -  -  -  	    ld 		l,a
  104 00:460A 22 65 40 -  	    ld 		(RandomSeed+8),hl
  105 00:460D EB -  -  -  	    ex 		de,hl
  106 00:460E 09 -  -  -  	    add 	hl,bc
  107 00:460F C9 -  -  -  	    ret		
  108 00:4610 -  -  -  -  
  109 00:4610 -  -  -  -  ; ***************************************************************************************
  110 00:4610 -  -  -  -  ;
  111 00:4610 -  -  -  -  ;									Changes and Updates
  112 00:4610 -  -  -  -  ;
  113 00:4610 -  -  -  -  ; ***************************************************************************************
  114 00:4610 -  -  -  -  ;
  115 00:4610 -  -  -  -  ;		Date			Notes
  116 00:4610 -  -  -  -  ;		==== 			=====
  117 00:4610 -  -  -  -  ;
  118 00:4610 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:4610 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4610 -  -  -  -  ; ***************************************************************************************
    2 00:4610 -  -  -  -  ; ***************************************************************************************
    3 00:4610 -  -  -  -  ;
    4 00:4610 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4610 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4610 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4610 -  -  -  -  ;		Reviewed :	No
    8 00:4610 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4610 -  -  -  -  ;
   10 00:4610 -  -  -  -  ; ***************************************************************************************
   11 00:4610 -  -  -  -  ; ***************************************************************************************
   12 00:4610 -  -  -  -  
   13 00:4610 -  -  -  -  ; ***************************************************************************************
   14 00:4610 -  -  -  -  ;
   15 00:4610 -  -  -  -  ;								sgn unary function
   16 00:4610 -  -  -  -  ;
   17 00:4610 -  -  -  -  ; ***************************************************************************************
   18 00:4610 -  -  -  -  
   19 00:4610 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4610 CD 09 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4613 CD 49 4B -  		call 	Int32Zero 					; integer sgn() code
   22 00:4616 CA 20 43 -  		jp 		z,UnaryInt32False
   23 00:4619 D9 -  -  -  		exx
   24 00:461A CB 7C -  -  		bit 	7,h
   25 00:461C D9 -  -  -  		exx
   26 00:461D C2 1C 43 -  		jp 		nz,UnaryInt32True
   27 00:4620 3E 01 -  -  		ld 		a,1
   28 00:4622 C3 46 44 -  		jp 		Return8BitConstant
   29 00:4625 -  -  -  -  
   30 00:4625 -  -  -  -  ; ***************************************************************************************
   31 00:4625 -  -  -  -  ;
   32 00:4625 -  -  -  -  ;									Changes and Updates
   33 00:4625 -  -  -  -  ;
   34 00:4625 -  -  -  -  ; ***************************************************************************************
   35 00:4625 -  -  -  -  ;
   36 00:4625 -  -  -  -  ;		Date			Notes
   37 00:4625 -  -  -  -  ;		==== 			=====
   38 00:4625 -  -  -  -  ;
   39 00:4625 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:4625 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4625 -  -  -  -  ; ***************************************************************************************
    2 00:4625 -  -  -  -  ; ***************************************************************************************
    3 00:4625 -  -  -  -  ;
    4 00:4625 -  -  -  -  ;		Name : 		simple.asm
    5 00:4625 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4625 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4625 -  -  -  -  ;		Reviewed :	No
    8 00:4625 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4625 -  -  -  -  ;
   10 00:4625 -  -  -  -  ; ***************************************************************************************
   11 00:4625 -  -  -  -  ; ***************************************************************************************
   12 00:4625 -  -  -  -  
   13 00:4625 -  -  -  -  ; ***************************************************************************************
   14 00:4625 -  -  -  -  ;
   15 00:4625 -  -  -  -  ;								( unary function (think about it)
   16 00:4625 -  -  -  -  ;
   17 00:4625 -  -  -  -  ; ***************************************************************************************
   18 00:4625 -  -  -  -  
   19 00:4625 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4625 CD B7 43 -  		call 	EvaluateAtPrecedence0
   21 00:4628 C3 10 42 -  		jp  	CheckRightBracket
   22 00:462B -  -  -  -  
   23 00:462B -  -  -  -  ; ***************************************************************************************
   24 00:462B -  -  -  -  ;
   25 00:462B -  -  -  -  ;									Handle &x
   26 00:462B -  -  -  -  ;
   27 00:462B -  -  -  -  ; ***************************************************************************************
   28 00:462B -  -  -  -  
   29 00:462B -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:462B DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:462E E6 C0 -  -  		and 		$C0
   32 00:4630 FE 40 -  -  		cp 			$40
   33 00:4632 C2 9F 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4635 C3 82 44 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4638 -  -  -  -  
   36 00:4638 -  -  -  -  ; ***************************************************************************************
   37 00:4638 -  -  -  -  ;
   38 00:4638 -  -  -  -  ;									Changes and Updates
   39 00:4638 -  -  -  -  ;
   40 00:4638 -  -  -  -  ; ***************************************************************************************
   41 00:4638 -  -  -  -  ;
   42 00:4638 -  -  -  -  ;		Date			Notes
   43 00:4638 -  -  -  -  ;		==== 			=====
   44 00:4638 -  -  -  -  ;
   45 00:4638 -  -  -  -  ; ***************************************************************************************
   46 00:4638 -  -  -  -  		
Listing for file "_build.asm"
   43 00:4638 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4638 -  -  -  -  ; ***************************************************************************************
    2 00:4638 -  -  -  -  ; ***************************************************************************************
    3 00:4638 -  -  -  -  ;
    4 00:4638 -  -  -  -  ;		Name : 		str.asm
    5 00:4638 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4638 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4638 -  -  -  -  ;		Reviewed :	No
    8 00:4638 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4638 -  -  -  -  ;
   10 00:4638 -  -  -  -  ; ***************************************************************************************
   11 00:4638 -  -  -  -  ; ***************************************************************************************
   12 00:4638 -  -  -  -  
   13 00:4638 -  -  -  -  ; ***************************************************************************************
   14 00:4638 -  -  -  -  ;
   15 00:4638 -  -  -  -  ;								Str$() unary function
   16 00:4638 -  -  -  -  ;
   17 00:4638 -  -  -  -  ; ***************************************************************************************
   18 00:4638 -  -  -  -  
   19 00:4638 -  -  -  -  Unary_Str:	;; [str]
   20 00:4638 CD 1D 42 -  		call 	CheckDollar
   21 00:463B CD 09 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:463E 01 6F 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:4641 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:4643 CD 8A 4B -  		call 	Int32ToString 				
   25 00:4646 21 6F 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:4649 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:464B C9 -  -  -  		ret
   28 00:464C -  -  -  -  
   29 00:464C -  -  -  -  ; ***************************************************************************************
   30 00:464C -  -  -  -  ;
   31 00:464C -  -  -  -  ;									Changes and Updates
   32 00:464C -  -  -  -  ;
   33 00:464C -  -  -  -  ; ***************************************************************************************
   34 00:464C -  -  -  -  ;
   35 00:464C -  -  -  -  ;		Date			Notes
   36 00:464C -  -  -  -  ;		==== 			=====
   37 00:464C -  -  -  -  ;
   38 00:464C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:464C -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:464C -  -  -  -  ; ***************************************************************************************
    2 00:464C -  -  -  -  ; ***************************************************************************************
    3 00:464C -  -  -  -  ;
    4 00:464C -  -  -  -  ;		Name : 		time.asm
    5 00:464C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:464C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:464C -  -  -  -  ;		Reviewed :	No
    8 00:464C -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:464C -  -  -  -  ;
   10 00:464C -  -  -  -  ; ***************************************************************************************
   11 00:464C -  -  -  -  ; ***************************************************************************************
   12 00:464C -  -  -  -  
   13 00:464C -  -  -  -  ; ***************************************************************************************
   14 00:464C -  -  -  -  ;
   15 00:464C -  -  -  -  ;							Get system time in ms
   16 00:464C -  -  -  -  ;
   17 00:464C -  -  -  -  ; ***************************************************************************************
   18 00:464C -  -  -  -  
   19 00:464C -  -  -  -  Unary_Time:	;; [time]
   20 00:464C CD 01 4C -  			call 	SYSGetTimer
   21 00:464F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4651 C9 -  -  -  			ret
   23 00:4652 -  -  -  -  
   24 00:4652 -  -  -  -  ; ***************************************************************************************
   25 00:4652 -  -  -  -  ;
   26 00:4652 -  -  -  -  ;									Changes and Updates
   27 00:4652 -  -  -  -  ;
   28 00:4652 -  -  -  -  ; ***************************************************************************************
   29 00:4652 -  -  -  -  ;
   30 00:4652 -  -  -  -  ;		Date			Notes
   31 00:4652 -  -  -  -  ;		==== 			=====
   32 00:4652 -  -  -  -  ;
   33 00:4652 -  -  -  -  ; ***************************************************************************************
   34 00:4652 -  -  -  -  			
Listing for file "_build.asm"
   45 00:4652 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4652 -  -  -  -  ; ***************************************************************************************
    2 00:4652 -  -  -  -  ; ***************************************************************************************
    3 00:4652 -  -  -  -  ;
    4 00:4652 -  -  -  -  ;		Name : 		top.asm
    5 00:4652 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4652 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4652 -  -  -  -  ;		Reviewed :	No
    8 00:4652 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4652 -  -  -  -  ;
   10 00:4652 -  -  -  -  ; ***************************************************************************************
   11 00:4652 -  -  -  -  ; ***************************************************************************************
   12 00:4652 -  -  -  -  
   13 00:4652 -  -  -  -  ; ***************************************************************************************
   14 00:4652 -  -  -  -  ;
   15 00:4652 -  -  -  -  ;							page unary function (no bracket)
   16 00:4652 -  -  -  -  ;
   17 00:4652 -  -  -  -  ; ***************************************************************************************
   18 00:4652 -  -  -  -  
   19 00:4652 -  -  -  -  Unary_Top:	;; [top]
   20 00:4652 2A 45 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4655 D9 -  -  -  			exx
   22 00:4656 2A 47 40 -  			ld 		hl,(TopMemory+2)
   23 00:4659 D9 -  -  -  			exx
   24 00:465A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:465C C9 -  -  -  			ret
   26 00:465D -  -  -  -  
   27 00:465D -  -  -  -  ; ***************************************************************************************
   28 00:465D -  -  -  -  ;
   29 00:465D -  -  -  -  ;									Changes and Updates
   30 00:465D -  -  -  -  ;
   31 00:465D -  -  -  -  ; ***************************************************************************************
   32 00:465D -  -  -  -  ;
   33 00:465D -  -  -  -  ;		Date			Notes
   34 00:465D -  -  -  -  ;		==== 			=====
   35 00:465D -  -  -  -  ;
   36 00:465D -  -  -  -  ; ***************************************************************************************
   37 00:465D -  -  -  -  			
Listing for file "_build.asm"
   46 00:465D -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:465D -  -  -  -  ; ***************************************************************************************
    2 00:465D -  -  -  -  ; ***************************************************************************************
    3 00:465D -  -  -  -  ;
    4 00:465D -  -  -  -  ;		Name : 		val.asm
    5 00:465D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465D -  -  -  -  ;		Reviewed :	No
    8 00:465D -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:465D -  -  -  -  ;
   10 00:465D -  -  -  -  ; ***************************************************************************************
   11 00:465D -  -  -  -  ; ***************************************************************************************
   12 00:465D -  -  -  -  
   13 00:465D -  -  -  -  ; ***************************************************************************************
   14 00:465D -  -  -  -  ;
   15 00:465D -  -  -  -  ;								val( unary function
   16 00:465D -  -  -  -  ;
   17 00:465D -  -  -  -  ; ***************************************************************************************
   18 00:465D -  -  -  -  
   19 00:465D -  -  -  -  Unary_Val:	;; [val]
   20 00:465D CD 15 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4660 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4661 C1 -  -  -  		pop 	bc
   23 00:4662 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4664 CD 80 4A -  		call 	Int32FromString 			; get the integer part.
   25 00:4667 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4669 C8 -  -  -  		ret		z 							; okay
   27 00:466A 3E 03 C3 42 
              42 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:466F -  -  -  -  
   29 00:466F -  -  -  -  ; ***************************************************************************************
   30 00:466F -  -  -  -  ;
   31 00:466F -  -  -  -  ;									Changes and Updates
   32 00:466F -  -  -  -  ;
   33 00:466F -  -  -  -  ; ***************************************************************************************
   34 00:466F -  -  -  -  ;
   35 00:466F -  -  -  -  ;		Date			Notes
   36 00:466F -  -  -  -  ;		==== 			=====
   37 00:466F -  -  -  -  ;
   38 00:466F -  -  -  -  ; ***************************************************************************************
   39 00:466F -  -  -  -  		
Listing for file "_build.asm"
   47 00:466F -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:466F -  -  -  -  ; ***************************************************************************************
    2 00:466F -  -  -  -  ; ***************************************************************************************
    3 00:466F -  -  -  -  ;
    4 00:466F -  -  -  -  ;		Name : 		clear.asm
    5 00:466F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:466F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:466F -  -  -  -  ;		Reviewed :	No
    8 00:466F -  -  -  -  ;		Purpose :	Clear command.
    9 00:466F -  -  -  -  ;
   10 00:466F -  -  -  -  ; ***************************************************************************************
   11 00:466F -  -  -  -  ; ***************************************************************************************
   12 00:466F -  -  -  -  
   13 00:466F -  -  -  -  ; ***************************************************************************************
   14 00:466F -  -  -  -  ;
   15 00:466F -  -  -  -  ;										CLEAR command
   16 00:466F -  -  -  -  ;
   17 00:466F -  -  -  -  ; ***************************************************************************************
   18 00:466F -  -  -  -  
   19 00:466F -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:466F -  -  -  -  		;
   21 00:466F -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:466F -  -  -  -  		;
   23 00:466F 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4672 -  -  -  -  _CCFindLow:
   25 00:4672 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4675 5E -  -  -  		ld 		e,(hl)		
   27 00:4676 19 -  -  -  		add 	hl,de
   28 00:4677 7B -  -  -  		ld 		a,e
   29 00:4678 B7 -  -  -  		or 		a
   30 00:4679 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:467B 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:467C 22 45 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:467F 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4680 22 41 40 -  		ld 		(LowAllocMemory),hl
   35 00:4683 -  -  -  -  		;
   36 00:4683 -  -  -  -  		; 	 		Reset the language stack
   37 00:4683 -  -  -  -  		;
   38 00:4683 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:4686 -  -  -  -  		;
   40 00:4686 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:4688 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:468B 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:468E 19 -  -  -  		add 	hl,de
   44 00:468F 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4691 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4694 -  -  -  -  		;
   47 00:4694 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:4697 19 -  -  -  		add 	hl,de
   49 00:4698 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:469B -  -  -  -  		;
   51 00:469B -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:469B -  -  -  -  		;
   53 00:469B -  -  -  -  
   54 00:469B -  -  -  -  		;
   55 00:469B -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:469B -  -  -  -  		;
   57 00:469B CD CA 45 -  		call 	UnaryRandomInitialise
   58 00:469E -  -  -  -  		;
   59 00:469E -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:469E -  -  -  -  		;
   61 00:469E C9 -  -  -  		ret
   62 00:469F -  -  -  -  
   63 00:469F -  -  -  -  ; ***************************************************************************************
   64 00:469F -  -  -  -  ;
   65 00:469F -  -  -  -  ;									Changes and Updates
   66 00:469F -  -  -  -  ;
   67 00:469F -  -  -  -  ; ***************************************************************************************
   68 00:469F -  -  -  -  ;
   69 00:469F -  -  -  -  ;		Date			Notes
   70 00:469F -  -  -  -  ;		==== 			=====
   71 00:469F -  -  -  -  ;
   72 00:469F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:469F -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:469F -  -  -  -  ; ***************************************************************************************
    2 00:469F -  -  -  -  ; ***************************************************************************************
    3 00:469F -  -  -  -  ;
    4 00:469F -  -  -  -  ;		Name : 		instance.asm
    5 00:469F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:469F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:469F -  -  -  -  ;		Reviewed :	No
    8 00:469F -  -  -  -  ;		Purpose :	Instance handling
    9 00:469F -  -  -  -  ;
   10 00:469F -  -  -  -  ; ***************************************************************************************
   11 00:469F -  -  -  -  ; ***************************************************************************************
   12 00:469F -  -  -  -  
   13 00:469F -  -  -  -  ; ***************************************************************************************
   14 00:469F -  -  -  -  ;
   15 00:469F -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:469F -  -  -  -  ;
   17 00:469F -  -  -  -  ; ***************************************************************************************
   18 00:469F -  -  -  -  
   19 00:469F -  -  -  -  SetCurrentInstance:
   20 00:469F ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:46A3 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:46A6 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:46AA -  -  -  -  
   24 00:46AA C9 -  -  -  		ret
   25 00:46AB -  -  -  -  
   26 00:46AB -  -  -  -  
   27 00:46AB -  -  -  -  ; ***************************************************************************************
   28 00:46AB -  -  -  -  ;
   29 00:46AB -  -  -  -  ;									Changes and Updates
   30 00:46AB -  -  -  -  ;
   31 00:46AB -  -  -  -  ; ***************************************************************************************
   32 00:46AB -  -  -  -  ;
   33 00:46AB -  -  -  -  ;		Date			Notes
   34 00:46AB -  -  -  -  ;		==== 			=====
   35 00:46AB -  -  -  -  ;
   36 00:46AB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:46AB -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:46AB -  -  -  -  ; ***************************************************************************************
    2 00:46AB -  -  -  -  ; ***************************************************************************************
    3 00:46AB -  -  -  -  ;
    4 00:46AB -  -  -  -  ;		Name : 		new.asm
    5 00:46AB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46AB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46AB -  -  -  -  ;		Reviewed :	No
    8 00:46AB -  -  -  -  ;		Purpose :	New command.
    9 00:46AB -  -  -  -  ;
   10 00:46AB -  -  -  -  ; ***************************************************************************************
   11 00:46AB -  -  -  -  ; ***************************************************************************************
   12 00:46AB -  -  -  -  
   13 00:46AB -  -  -  -  ; ***************************************************************************************
   14 00:46AB -  -  -  -  ;
   15 00:46AB -  -  -  -  ;										NEW command
   16 00:46AB -  -  -  -  ;
   17 00:46AB -  -  -  -  ; ***************************************************************************************
   18 00:46AB -  -  -  -  
   19 00:46AB -  -  -  -  Command_NEW: 	;; [new]
   20 00:46AB 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:46AE 36 00 -  -  		ld 		(hl),0
   22 00:46B0 CD 6F 46 -  		call 	Command_CLEAR 				; clear all variables
   23 00:46B3 3E 00 C3 42 
              42 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:46B8 -  -  -  -  
   25 00:46B8 -  -  -  -  ; ***************************************************************************************
   26 00:46B8 -  -  -  -  ;
   27 00:46B8 -  -  -  -  ;									Changes and Updates
   28 00:46B8 -  -  -  -  ;
   29 00:46B8 -  -  -  -  ; ***************************************************************************************
   30 00:46B8 -  -  -  -  ;
   31 00:46B8 -  -  -  -  ;		Date			Notes
   32 00:46B8 -  -  -  -  ;		==== 			=====
   33 00:46B8 -  -  -  -  ;
   34 00:46B8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:46B8 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:46B8 -  -  -  -  ; ***************************************************************************************
    2 00:46B8 -  -  -  -  ; ***************************************************************************************
    3 00:46B8 -  -  -  -  ;
    4 00:46B8 -  -  -  -  ;		Name : 		utility.asm
    5 00:46B8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46B8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46B8 -  -  -  -  ;		Reviewed :	No
    8 00:46B8 -  -  -  -  ;		Purpose :	Utility routines
    9 00:46B8 -  -  -  -  ;
   10 00:46B8 -  -  -  -  ; ***************************************************************************************
   11 00:46B8 -  -  -  -  ; ***************************************************************************************
   12 00:46B8 -  -  -  -  
   13 00:46B8 -  -  -  -  ; ***************************************************************************************
   14 00:46B8 -  -  -  -  ;
   15 00:46B8 -  -  -  -  ;							Print ASCII string at HL
   16 00:46B8 -  -  -  -  ;
   17 00:46B8 -  -  -  -  ; ***************************************************************************************
   18 00:46B8 -  -  -  -  
   19 00:46B8 -  -  -  -  PrintStringAtHL:
   20 00:46B8 7E -  -  -  		ld 		a,(hl)
   21 00:46B9 FE 20 -  -  		cp 		$20		
   22 00:46BB D8 -  -  -  		ret 	c
   23 00:46BC CD D8 4B -  		call 	SYSPrintChar
   24 00:46BF 23 -  -  -  		inc 	hl
   25 00:46C0 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:46C2 -  -  -  -  
   27 00:46C2 -  -  -  -  ; ***************************************************************************************
   28 00:46C2 -  -  -  -  ;
   29 00:46C2 -  -  -  -  ;									Changes and Updates
   30 00:46C2 -  -  -  -  ;
   31 00:46C2 -  -  -  -  ; ***************************************************************************************
   32 00:46C2 -  -  -  -  ;
   33 00:46C2 -  -  -  -  ;		Date			Notes
   34 00:46C2 -  -  -  -  ;		==== 			=====
   35 00:46C2 -  -  -  -  ;
   36 00:46C2 -  -  -  -  ; ***************************************************************************************
   37 00:46C2 -  -  -  -  		
Listing for file "_build.asm"
   51 00:46C2 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:46C2 -  -  -  -  ; ***************************************************************************************
    2 00:46C2 -  -  -  -  ; ***************************************************************************************
    3 00:46C2 -  -  -  -  ;
    4 00:46C2 -  -  -  -  ;		Name : 		find.asm
    5 00:46C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C2 -  -  -  -  ;		Reviewed :	No
    8 00:46C2 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:46C2 -  -  -  -  ;
   10 00:46C2 -  -  -  -  ; ***************************************************************************************
   11 00:46C2 -  -  -  -  ; ***************************************************************************************
   12 00:46C2 -  -  -  -  
   13 00:46C2 -  -  -  -  ; ***************************************************************************************
   14 00:46C2 -  -  -  -  ;
   15 00:46C2 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:46C2 -  -  -  -  ; 		variable information at (IX)
   17 00:46C2 -  -  -  -  ;
   18 00:46C2 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:46C2 -  -  -  -  ;		Don't autocreate arrays.
   20 00:46C2 -  -  -  -  ;
   21 00:46C2 -  -  -  -  ; ***************************************************************************************
   22 00:46C2 -  -  -  -  
   23 00:46C2 -  -  -  -  FindVariable:
   24 00:46C2 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:46C5 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:46C7 D2 9F 42 -  		jp 		nc,SyntaxError 		
   27 00:46CA -  -  -  -  
   28 00:46CA DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:46CD FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:46CF 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:46D1 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:46D3 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:46D5 -  -  -  -  		;
   34 00:46D5 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:46D5 -  -  -  -  		;
   36 00:46D5 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:46D8 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:46DB 87 -  -  -  		add 	a,a 						; x4
   39 00:46DC 87 -  -  -  		add 	a,a
   40 00:46DD B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:46DE 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:46DF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:46E1 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:46E3 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:46E5 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:46E6 C9 -  -  -  		ret
   47 00:46E7 -  -  -  -  		;
   48 00:46E7 -  -  -  -  		;		Not a standard simple variable.
   49 00:46E7 -  -  -  -  		;
   50 00:46E7 -  -  -  -  _FVNotSimple:
   51 00:46E7 37 -  -  -  		scf
   52 00:46E8 C9 -  -  -  		ret
   53 00:46E9 -  -  -  -  
   54 00:46E9 -  -  -  -  ; ***************************************************************************************
   55 00:46E9 -  -  -  -  ;
   56 00:46E9 -  -  -  -  ;									Changes and Updates
   57 00:46E9 -  -  -  -  ;
   58 00:46E9 -  -  -  -  ; ***************************************************************************************
   59 00:46E9 -  -  -  -  ;
   60 00:46E9 -  -  -  -  ;		Date			Notes
   61 00:46E9 -  -  -  -  ;		==== 			=====
   62 00:46E9 -  -  -  -  ;
   63 00:46E9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:46E9 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:46E9 -  -  -  -  ;
    2 00:46E9 -  -  -  -  ;	This file is automatically generated.
    3 00:46E9 -  -  -  -  ;
    4 00:46E9 -  -  -  -  ;
    5 00:46E9 -  -  -  -  ;	Keywords for set 0
    6 00:46E9 -  -  -  -  ;
    7 00:46E9 -  -  -  -  KeywordsSet0:
    8 00:46E9 01 20 -  -  	.db	1," "              ; $0080
    9 00:46EB 01 20 -  -  	.db	1," "              ; $0081
   10 00:46ED 01 20 -  -  	.db	1," "              ; $0082
   11 00:46EF 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:46F1 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:46F3 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:46F5 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:46F7 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:46FB 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:46FF 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:4701 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:4703 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:4706 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:4709 01 3E -  -  	.db	1,">"              ; $008d
   22 00:470B 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:470D 01 3D -  -  	.db	1,"="              ; $008f
   24 00:470F 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:4712 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:4716 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:4719 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:471D 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:471F 01 28 -  -  	.db	1,"("              ; $0095
   30 00:4721 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:4723 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:4727 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:472B 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:472F 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:4733 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:4737 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:473B 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:473F 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:4743 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:4748 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:474D 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:4751 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:4755 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 00:475A 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 00:4760 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:4762 01 2C -  -  	.db	1,","              ; $00a6
   47 00:4764 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:4766 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:4768 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:476A 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 00:4771 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 00:4777 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 00:477A 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 00:477F 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 00:4784 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 00:4788 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 00:478B 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 00:4790 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 00:4795 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 00:4799 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 00:479E 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 00:47A6 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 00:47AC 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 00:47B0 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 00:47B4 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 00:47B8 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 00:47BC 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 00:47C2 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 00:47C7 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 00:47CC 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 00:47D1 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 00:47D5 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 00:47D9 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 00:47DE 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 00:47E3 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 00:47EB 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 00:47F2 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 00:47F8 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 00:47FC 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 00:4801 00 -  -  -  	.db	0
   81 00:4802 -  -  -  -  ;
   82 00:4802 -  -  -  -  ;	Keywords for set 1
   83 00:4802 -  -  -  -  ;
   84 00:4802 -  -  -  -  KeywordsSet1:
   85 00:4802 00 -  -  -  	.db	0
   86 00:4803 -  -  -  -  ;
   87 00:4803 -  -  -  -  ;	Keywords for set 2
   88 00:4803 -  -  -  -  ;
   89 00:4803 -  -  -  -  KeywordsSet2:
   90 00:4803 00 -  -  -  	.db	0
Listing for file "_build.asm"
   53 00:4804 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4804 -  -  -  -  ;
    2 00:4804 -  -  -  -  ;	This file is automatically generated.
    3 00:4804 -  -  -  -  ;
    4 00:4804 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 00:4820 -  -  -  -  PrecedenceTable:
    6 00:4820 06 -  -  -  	.db	6	; $0083 !
    7 00:4821 06 -  -  -  	.db	6	; $0084 ?
    8 00:4822 05 -  -  -  	.db	5	; $0085 *
    9 00:4823 05 -  -  -  	.db	5	; $0086 /
   10 00:4824 05 -  -  -  	.db	5	; $0087 mod
   11 00:4825 05 -  -  -  	.db	5	; $0088 div
   12 00:4826 04 -  -  -  	.db	4	; $0089 +
   13 00:4827 04 -  -  -  	.db	4	; $008a -
   14 00:4828 03 -  -  -  	.db	3	; $008b >=
   15 00:4829 03 -  -  -  	.db	3	; $008c <=
   16 00:482A 03 -  -  -  	.db	3	; $008d >
   17 00:482B 03 -  -  -  	.db	3	; $008e <
   18 00:482C 03 -  -  -  	.db	3	; $008f =
   19 00:482D 03 -  -  -  	.db	3	; $0090 <>
   20 00:482E 02 -  -  -  	.db	2	; $0091 and
   21 00:482F 01 -  -  -  	.db	1	; $0092 or
   22 00:4830 01 -  -  -  	.db	1	; $0093 eor
   23 00:4831 -  -  -  -  
Listing for file "_build.asm"
   54 00:4831 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4831 -  -  -  -  ;
    2 00:4831 -  -  -  -  ;	This is automatically generated.
    3 00:4831 -  -  -  -  ;
    4 00:4831 -  -  -  -  ErrorIDTable:
    5 00:4831 71 48 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4835 77 48 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4839 88 48 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:483D 96 48 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4841 A0 48 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:4845 BA 48 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:4849 CB 48 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:484D D9 48 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:4851 E7 48 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:4855 F1 48 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:4859 06 49 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:485D 1C 49 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:4861 2A 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:4865 2F 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:4869 3C 49 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:486D 4D 49 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:4871 -  -  -  -  
   22 00:4871 -  -  -  -  ErrText_warmstart:
   23 00:4871 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:4877 -  -  -  -  ErrText_assert:
   25 00:4877 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:4888 -  -  -  -  ErrText_badtype:
   27 00:4888 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:4896 -  -  -  -  ErrText_badvalue:
   29 00:4896 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:48A0 -  -  -  -  ErrText_disabled:
   31 00:48A0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:48BA -  -  -  -  ErrText_divzero:
   33 00:48BA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:48CB -  -  -  -  ErrText_memory:
   35 00:48CB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:48D9 -  -  -  -  ErrText_nocomma:
   37 00:48D9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:48E7 -  -  -  -  ErrText_nodollar:
   39 00:48E7 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:48F1 -  -  -  -  ErrText_nolbracket:
   41 00:48F1 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:4906 -  -  -  -  ErrText_norbracket:
   43 00:4906 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:491C -  -  -  -  ErrText_notref:
   45 00:491C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:492A -  -  -  -  ErrText_stop:
   47 00:492A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:492F -  -  -  -  ErrText_syntax:
   49 00:492F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:493C -  -  -  -  ErrText_todo:
   51 00:493C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:494D -  -  -  -  ErrText_unknownvar:
   53 00:494D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   55 00:495E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:495E -  -  -  -  ;
    2 00:495E -  -  -  -  ;	Vectors for set 0
    3 00:495E -  -  -  -  ;
    4 00:495E -  -  -  -  VectorsSet0:
    5 00:495E D9 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4960 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4962 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4964 FC 42 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4966 04 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4968 BA 42 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:496A C5 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:496C D0 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:496E C5 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4970 A4 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4972 AF 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4974 57 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4976 4E 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4978 3C 43 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:497A 33 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:497C 2A 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:497E 45 43 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4980 DB 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4982 E6 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4984 F1 42 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4986 2B 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4988 25 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:498A 6C 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:498C 92 45 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:498E 5D 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4990 3A 45 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4992 10 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4994 38 46 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4996 4C 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4998 45 45 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:499A 75 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:499C 87 45 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:499E 4C 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:49A0 52 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:49A2 5D 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:49A4 1C 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:49A6 20 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:49A8 D0 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:49AA D0 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:49AC D3 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:49AE D0 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:49B0 80 41 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:49B2 1F 40 -  -  	addr(Unimplemented)              ; $00aa repeat
   48 00:49B4 1F 40 -  -  	addr(Unimplemented)              ; $00ab until
   49 00:49B6 1F 40 -  -  	addr(Unimplemented)              ; $00ac if
   50 00:49B8 D0 40 -  -  	addr(BadCmd_Then)                ; $00ad then
   51 00:49BA 1F 40 -  -  	addr(Unimplemented)              ; $00ae else
   52 00:49BC 1F 40 -  -  	addr(Unimplemented)              ; $00af for
   53 00:49BE D0 40 -  -  	addr(BadCmd_To)                  ; $00b0 to
   54 00:49C0 1F 40 -  -  	addr(Unimplemented)              ; $00b1 step
   55 00:49C2 1F 40 -  -  	addr(Unimplemented)              ; $00b2 next
   56 00:49C4 D0 40 -  -  	addr(BadCmd_Defproc)             ; $00b3 def
   57 00:49C6 1F 40 -  -  	addr(Unimplemented)              ; $00b4 proc
   58 00:49C8 1F 40 -  -  	addr(Unimplemented)              ; $00b5 endproc
   59 00:49CA 1F 40 -  -  	addr(Unimplemented)              ; $00b6 local
   60 00:49CC 1F 40 -  -  	addr(Unimplemented)              ; $00b7 dim
   61 00:49CE 80 41 -  -  	addr(Command_REM)                ; $00b8 rem
   62 00:49D0 EC 40 -  -  	addr(Command_LET)                ; $00b9 let
   63 00:49D2 1F 40 -  -  	addr(Unimplemented)              ; $00ba vdu
   64 00:49D4 31 41 -  -  	addr(Command_PRINT)              ; $00bb print
   65 00:49D6 1F 40 -  -  	addr(Unimplemented)              ; $00bc load
   66 00:49D8 1F 40 -  -  	addr(Unimplemented)              ; $00bd save
   67 00:49DA 1F 40 -  -  	addr(Unimplemented)              ; $00be list
   68 00:49DC AB 46 -  -  	addr(Command_NEW)                ; $00bf new
   69 00:49DE 9B 41 -  -  	addr(Command_RUN)                ; $00c0 run
   70 00:49E0 1F 40 -  -  	addr(Unimplemented)              ; $00c1 read
   71 00:49E2 1F 40 -  -  	addr(Unimplemented)              ; $00c2 data
   72 00:49E4 1F 40 -  -  	addr(Unimplemented)              ; $00c3 restore
   73 00:49E6 C1 40 -  -  	addr(Command_ASSERT)             ; $00c4 assert
   74 00:49E8 6F 46 -  -  	addr(Command_CLEAR)              ; $00c5 clear
   75 00:49EA D4 40 -  -  	addr(Command_END)                ; $00c6 end
   76 00:49EC FE 41 -  -  	addr(Command_STOP)               ; $00c7 stop
   77 00:49EE -  -  -  -  ;
   78 00:49EE -  -  -  -  ;	Vectors for set 1
   79 00:49EE -  -  -  -  ;
   80 00:49EE -  -  -  -  VectorsSet1:
   81 00:49EE -  -  -  -  ;
   82 00:49EE -  -  -  -  ;	Vectors for set 2
   83 00:49EE -  -  -  -  ;
   84 00:49EE -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   56 00:49EE -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:49EE -  -  -  -  ; ***************************************************************************************
    2 00:49EE -  -  -  -  ; ***************************************************************************************
    3 00:49EE -  -  -  -  ;
    4 00:49EE -  -  -  -  ;		Name : 		idivide.asm
    5 00:49EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49EE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49EE -  -  -  -  ;		Reviewed :	No
    8 00:49EE -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:49EE -  -  -  -  ;
   10 00:49EE -  -  -  -  ; ***************************************************************************************
   11 00:49EE -  -  -  -  ; ***************************************************************************************
   12 00:49EE -  -  -  -  
   13 00:49EE -  -  -  -  ; ***************************************************************************************
   14 00:49EE -  -  -  -  ;
   15 00:49EE -  -  -  -  ;								Unsigned integer divide
   16 00:49EE -  -  -  -  ;
   17 00:49EE -  -  -  -  ; ***************************************************************************************
   18 00:49EE -  -  -  -  
   19 00:49EE -  -  -  -  Int32UDivide:
   20 00:49EE 37 -  -  -  		scf
   21 00:49EF C3 2D 4A -  		jp 		_I32UnsignedDivide		
   22 00:49F2 -  -  -  -  
   23 00:49F2 -  -  -  -  ; ***************************************************************************************
   24 00:49F2 -  -  -  -  ;
   25 00:49F2 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:49F2 -  -  -  -  ;
   27 00:49F2 -  -  -  -  ; ***************************************************************************************
   28 00:49F2 -  -  -  -  
   29 00:49F2 -  -  -  -  Int32SDivide:
   30 00:49F2 37 -  -  -  		scf
   31 00:49F3 18 01 -  -  		jr 		_I32SDivide
   32 00:49F5 -  -  -  -  Int32Modulus:
   33 00:49F5 AF -  -  -  		xor 	a
   34 00:49F6 -  -  -  -  _I32SDivide:
   35 00:49F6 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:49F7 F5 -  -  -  		push 	af
   37 00:49F8 08 -  -  -  		ex 		af,af'
   38 00:49F9 -  -  -  -  
   39 00:49F9 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:49FA D9 -  -  -  		exx
   41 00:49FB D5 -  -  -  		push 	de
   42 00:49FC D9 -  -  -  		exx
   43 00:49FD -  -  -  -  
   44 00:49FD F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:49FE AF -  -  -  		xor 	a 							; clear sign count.
   46 00:49FF CD 1B 4A -  		call 	_I32CheckHLSignSwap
   47 00:4A02 CD 1B 4A -  		call 	_I32CheckHLSignSwap
   48 00:4A05 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4A06 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4A07 F5 -  -  -  		push 	af
   51 00:4A08 CD 2D 4A -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4A0B F1 -  -  -  		pop 	af 							; get function back
   53 00:4A0C 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4A0E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4A0F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4A11 C4 77 4B -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4A14 -  -  -  -  _I32SDExit:
   58 00:4A14 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4A15 D1 -  -  -  		pop 	de
   60 00:4A16 D9 -  -  -  		exx
   61 00:4A17 D1 -  -  -  		pop 	de
   62 00:4A18 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4A19 08 -  -  -  		ex 		af,af'
   64 00:4A1A C9 -  -  -  		ret
   65 00:4A1B -  -  -  -  
   66 00:4A1B -  -  -  -  
   67 00:4A1B -  -  -  -  _I32CheckHLSignSwap:
   68 00:4A1B D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4A1C CB 7C -  -  		bit 	7,h
   70 00:4A1E D9 -  -  -  		exx
   71 00:4A1F 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4A21 -  -  -  -  		;
   73 00:4A21 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4A23 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4A24 CD 77 4B -  		call 	Int32Negate 				
   76 00:4A27 F1 -  -  -  		pop 	af
   77 00:4A28 -  -  -  -  _I32CHSPositive:
   78 00:4A28 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4A29 EB -  -  -  		ex 		de,hl
   80 00:4A2A D9 -  -  -  		exx		
   81 00:4A2B EB -  -  -  		ex 		de,hl
   82 00:4A2C C9 -  -  -  		ret
   83 00:4A2D -  -  -  -  
   84 00:4A2D -  -  -  -  ; ***************************************************************************************
   85 00:4A2D -  -  -  -  ;
   86 00:4A2D -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4A2D -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4A2D -  -  -  -  ;
   89 00:4A2D -  -  -  -  ; ***************************************************************************************
   90 00:4A2D -  -  -  -  
   91 00:4A2D -  -  -  -  _I32UnsignedDivide:
   92 00:4A2D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4A2E D5 -  -  -  		push 	de
   94 00:4A2F D9 -  -  -  		exx
   95 00:4A30 C5 -  -  -  		push 	bc
   96 00:4A31 D5 -  -  -  		push 	de 							
   97 00:4A32 D9 -  -  -  		exx
   98 00:4A33 -  -  -  -  
   99 00:4A33 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4A34 -  -  -  -  
  101 00:4A34 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4A35 B3 -  -  -  		or 		e
  103 00:4A36 D9 -  -  -  		exx
  104 00:4A37 B2 -  -  -  		or 		d
  105 00:4A38 B3 -  -  -  		or 		e
  106 00:4A39 D9 -  -  -  		exx
  107 00:4A3A CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4A3D -  -  -  -  
  109 00:4A3D -  -  -  -  
  110 00:4A3D 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4A3E 4D -  -  -  		ld		c,l
  112 00:4A3F 21 00 00 -  		ld 		hl,$0000
  113 00:4A42 D9 -  -  -  		exx
  114 00:4A43 44 -  -  -  		ld 		b,h
  115 00:4A44 4D -  -  -  		ld		c,l
  116 00:4A45 21 00 00 -  		ld 		hl,$0000
  117 00:4A48 D9 -  -  -  		exx
  118 00:4A49 -  -  -  -  
  119 00:4A49 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4A4B -  -  -  -  _I32DivideLoop:
  121 00:4A4B F5 -  -  -  		push 	af
  122 00:4A4C -  -  -  -  
  123 00:4A4C CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4A4E CB 10 -  -  		rl 		b
  125 00:4A50 D9 -  -  -  		exx
  126 00:4A51 CB 11 -  -  		rl 		c
  127 00:4A53 CB 10 -  -  		rl 		b
  128 00:4A55 D9 -  -  -  		exx
  129 00:4A56 CB 15 -  -  		rl 		l
  130 00:4A58 CB 14 -  -  		rl 		h
  131 00:4A5A D9 -  -  -  		exx
  132 00:4A5B CB 15 -  -  		rl 		l
  133 00:4A5D CB 14 -  -  		rl 		h
  134 00:4A5F D9 -  -  -  		exx
  135 00:4A60 -  -  -  -  
  136 00:4A60 CD 1D 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4A63 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4A65 -  -  -  -  
  139 00:4A65 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4A66 18 03 -  -  		jr 		_I32Next
  141 00:4A68 -  -  -  -  
  142 00:4A68 -  -  -  -  _I32Borrow:
  143 00:4A68 CD 17 4B -  		call 	Int32Add 					; A = A + M
  144 00:4A6B -  -  -  -  _I32Next:
  145 00:4A6B F1 -  -  -  		pop 	af
  146 00:4A6C 3D -  -  -  		dec 	a
  147 00:4A6D 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4A6F -  -  -  -  
  149 00:4A6F F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4A70 -  -  -  -  
  151 00:4A70 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4A71 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4A73 -  -  -  -  
  154 00:4A73 60 -  -  -  		ld  	h,b
  155 00:4A74 69 -  -  -  		ld 		l,c
  156 00:4A75 D9 -  -  -  		exx
  157 00:4A76 60 -  -  -  		ld  	h,b
  158 00:4A77 69 -  -  -  		ld 		l,c
  159 00:4A78 D9 -  -  -  		exx
  160 00:4A79 -  -  -  -  _I32Modulus1:		
  161 00:4A79 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4A7A D1 -  -  -  		pop 	de
  163 00:4A7B C1 -  -  -  		pop 	bc
  164 00:4A7C D9 -  -  -  		exx
  165 00:4A7D D1 -  -  -  		pop 	de
  166 00:4A7E C1 -  -  -  		pop 	bc
  167 00:4A7F C9 -  -  -  		ret
  168 00:4A80 -  -  -  -  
  169 00:4A80 -  -  -  -  ; ***************************************************************************************
  170 00:4A80 -  -  -  -  ;
  171 00:4A80 -  -  -  -  ;									Changes and Updates
  172 00:4A80 -  -  -  -  ;
  173 00:4A80 -  -  -  -  ; ***************************************************************************************
  174 00:4A80 -  -  -  -  ;
  175 00:4A80 -  -  -  -  ;		Date			Notes
  176 00:4A80 -  -  -  -  ;		==== 			=====
  177 00:4A80 -  -  -  -  ;
  178 00:4A80 -  -  -  -  ; ***************************************************************************************
  179 00:4A80 -  -  -  -  		
Listing for file "_build.asm"
   57 00:4A80 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4A80 -  -  -  -  ; ***************************************************************************************
    2 00:4A80 -  -  -  -  ; ***************************************************************************************
    3 00:4A80 -  -  -  -  ;
    4 00:4A80 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4A80 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A80 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A80 -  -  -  -  ;		Reviewed :	No
    8 00:4A80 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4A80 -  -  -  -  ;
   10 00:4A80 -  -  -  -  ; ***************************************************************************************
   11 00:4A80 -  -  -  -  ; ***************************************************************************************
   12 00:4A80 -  -  -  -  
   13 00:4A80 -  -  -  -  ; ***************************************************************************************
   14 00:4A80 -  -  -  -  ;
   15 00:4A80 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4A80 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4A80 -  -  -  -  ;
   18 00:4A80 -  -  -  -  ; ***************************************************************************************
   19 00:4A80 -  -  -  -  
   20 00:4A80 -  -  -  -  Int32FromString:
   21 00:4A80 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4A81 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4A82 D5 -  -  -  		push 	de
   24 00:4A83 D9 -  -  -  		exx
   25 00:4A84 D5 -  -  -  		push 	de
   26 00:4A85 -  -  -  -  
   27 00:4A85 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4A88 11 00 00 -  		ld 		de,$0000
   29 00:4A8B D9 -  -  -  		exx
   30 00:4A8C 21 00 00 -  		ld 		hl,$0000
   31 00:4A8F 11 00 00 -  		ld 		de,$0000
   32 00:4A92 D9 -  -  -  		exx
   33 00:4A93 -  -  -  -  
   34 00:4A93 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4A94 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4A96 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4A98 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4A9A 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4A9B -  -  -  -  		;
   40 00:4A9B 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4A9C F5 -  -  -  		push 	af
   42 00:4A9D FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4A9F 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4AA0 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4AA2 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4AA3 18 01 -  -  		jr 		_I32FSMain
   47 00:4AA5 -  -  -  -  _I32FSNotSigned:		
   48 00:4AA5 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4AA6 -  -  -  -  		;
   50 00:4AA6 -  -  -  -  		; 		Main conversion loop.
   51 00:4AA6 -  -  -  -  		; 		
   52 00:4AA6 -  -  -  -  _I32FSMain:		
   53 00:4AA6 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4AA7 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4AA9 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4AAB D6 20 -  -  		sub 	32
   57 00:4AAD -  -  -  -  _I32FSNotLower:
   58 00:4AAD FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4AAF 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4AB1 FE 3A -  -  		cp 		'9'+1
   61 00:4AB3 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4AB5 FE 41 -  -  		cp 		'A'
   63 00:4AB7 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4AB9 FE 47 -  -  		cp 		'F'+1
   65 00:4ABB 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4ABD D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4ABF -  -  -  -  _I32FSOkay:
   68 00:4ABF D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4AC1 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4AC2 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4AC4 03 -  -  -  		inc 	bc 							; consume character
   72 00:4AC5 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4AC6 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4AC7 CD E1 4A -  		call 	Int32Multiply 				; result *= base
   75 00:4ACA F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4ACB 5F -  -  -  		ld 		e,a
   77 00:4ACC CD 17 4B -  		call 	Int32Add 					; and add it.
   78 00:4ACF D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4AD0 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4AD2 -  -  -  -  
   81 00:4AD2 -  -  -  -  _I32FSExit:
   82 00:4AD2 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4AD3 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4AD5 CC 77 4B -  		call 	z,Int32Negate
   85 00:4AD8 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4AD9 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4ADA D9 -  -  -  		exx
   88 00:4ADB D1 -  -  -  		pop 	de
   89 00:4ADC D9 -  -  -  		exx
   90 00:4ADD C1 -  -  -  		pop 	bc
   91 00:4ADE FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4AE0 C9 -  -  -  		ret				
   93 00:4AE1 -  -  -  -  
   94 00:4AE1 -  -  -  -  ; ***************************************************************************************
   95 00:4AE1 -  -  -  -  ;
   96 00:4AE1 -  -  -  -  ;									Changes and Updates
   97 00:4AE1 -  -  -  -  ;
   98 00:4AE1 -  -  -  -  ; ***************************************************************************************
   99 00:4AE1 -  -  -  -  ;
  100 00:4AE1 -  -  -  -  ;		Date			Notes
  101 00:4AE1 -  -  -  -  ;		==== 			=====
  102 00:4AE1 -  -  -  -  ;
  103 00:4AE1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:4AE1 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4AE1 -  -  -  -  ; ***************************************************************************************
    2 00:4AE1 -  -  -  -  ; ***************************************************************************************
    3 00:4AE1 -  -  -  -  ;
    4 00:4AE1 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4AE1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AE1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AE1 -  -  -  -  ;		Reviewed :	No
    8 00:4AE1 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4AE1 -  -  -  -  ;
   10 00:4AE1 -  -  -  -  ; ***************************************************************************************
   11 00:4AE1 -  -  -  -  ; ***************************************************************************************
   12 00:4AE1 -  -  -  -  
   13 00:4AE1 -  -  -  -  Int32Multiply:
   14 00:4AE1 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4AE2 D5 -  -  -  		push 	de
   16 00:4AE3 44 -  -  -  		ld 		b,h
   17 00:4AE4 4D -  -  -  		ld 		c,l
   18 00:4AE5 21 00 00 -  		ld 		hl,$0000
   19 00:4AE8 -  -  -  -  
   20 00:4AE8 D9 -  -  -  		exx
   21 00:4AE9 C5 -  -  -  		push 	bc
   22 00:4AEA D5 -  -  -  		push 	de
   23 00:4AEB 44 -  -  -  		ld 		b,h
   24 00:4AEC 4D -  -  -  		ld 		c,l
   25 00:4AED 21 00 00 -  		ld 		hl,$0000		
   26 00:4AF0 D9 -  -  -  		exx
   27 00:4AF1 -  -  -  -  
   28 00:4AF1 -  -  -  -  _I32MultiplyLoop:
   29 00:4AF1 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4AF3 C4 17 4B -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4AF6 -  -  -  -  		;
   32 00:4AF6 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4AF7 CB 38 -  -  		srl 	b
   34 00:4AF9 CB 19 -  -  		rr 		c
   35 00:4AFB D9 -  -  -  		exx
   36 00:4AFC CB 18 -  -  		rr 		b
   37 00:4AFE CB 19 -  -  		rr 		c
   38 00:4B00 -  -  -  -  		;
   39 00:4B00 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4B02 CB 12 -  -  		rl 		d
   41 00:4B04 D9 -  -  -  		exx
   42 00:4B05 CB 13 -  -  		rl 		e
   43 00:4B07 CB 12 -  -  		rl 		d
   44 00:4B09 -  -  -  -  
   45 00:4B09 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4B0A B1 -  -  -  		or 		c
   47 00:4B0B D9 -  -  -  		exx
   48 00:4B0C B0 -  -  -  		or 		b
   49 00:4B0D B1 -  -  -  		or 		c
   50 00:4B0E 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4B10 -  -  -  -  
   52 00:4B10 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4B11 D1 -  -  -  		pop 	de
   54 00:4B12 C1 -  -  -  		pop 	bc
   55 00:4B13 D9 -  -  -  		exx
   56 00:4B14 D1 -  -  -  		pop 	de
   57 00:4B15 C1 -  -  -  		pop 	bc
   58 00:4B16 C9 -  -  -  		ret
   59 00:4B17 -  -  -  -  
   60 00:4B17 -  -  -  -  ; ***************************************************************************************
   61 00:4B17 -  -  -  -  ;
   62 00:4B17 -  -  -  -  ;									Changes and Updates
   63 00:4B17 -  -  -  -  ;
   64 00:4B17 -  -  -  -  ; ***************************************************************************************
   65 00:4B17 -  -  -  -  ;
   66 00:4B17 -  -  -  -  ;		Date			Notes
   67 00:4B17 -  -  -  -  ;		==== 			=====
   68 00:4B17 -  -  -  -  ;
   69 00:4B17 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:4B17 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4B17 -  -  -  -  ; ***************************************************************************************
    2 00:4B17 -  -  -  -  ; ***************************************************************************************
    3 00:4B17 -  -  -  -  ;
    4 00:4B17 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4B17 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B17 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B17 -  -  -  -  ;		Reviewed :	No
    8 00:4B17 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4B17 -  -  -  -  ;
   10 00:4B17 -  -  -  -  ; ***************************************************************************************
   11 00:4B17 -  -  -  -  ; ***************************************************************************************
   12 00:4B17 -  -  -  -  
   13 00:4B17 -  -  -  -  ; ***************************************************************************************
   14 00:4B17 -  -  -  -  ;
   15 00:4B17 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4B17 -  -  -  -  ;
   17 00:4B17 -  -  -  -  ; ***************************************************************************************
   18 00:4B17 -  -  -  -  
   19 00:4B17 -  -  -  -  Int32Add:
   20 00:4B17 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4B18 D9 -  -  -  		exx
   22 00:4B19 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4B1B D9 -  -  -  		exx
   24 00:4B1C C9 -  -  -  		ret
   25 00:4B1D -  -  -  -  
   26 00:4B1D -  -  -  -  ; ***************************************************************************************
   27 00:4B1D -  -  -  -  ;
   28 00:4B1D -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4B1D -  -  -  -  ;
   30 00:4B1D -  -  -  -  ; ***************************************************************************************
   31 00:4B1D -  -  -  -  
   32 00:4B1D -  -  -  -  Int32Subtract:
   33 00:4B1D AF -  -  -  		xor 	a 							; clear carry
   34 00:4B1E ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4B20 D9 -  -  -  		exx
   36 00:4B21 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4B23 D9 -  -  -  		exx
   38 00:4B24 C9 -  -  -  		ret
   39 00:4B25 -  -  -  -  
   40 00:4B25 -  -  -  -  ; ***************************************************************************************
   41 00:4B25 -  -  -  -  ;
   42 00:4B25 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4B25 -  -  -  -  ;
   44 00:4B25 -  -  -  -  ; ***************************************************************************************
   45 00:4B25 -  -  -  -  
   46 00:4B25 -  -  -  -  Int32And:
   47 00:4B25 D9 -  -  -  		exx
   48 00:4B26 CD 2A 4B -  		call 	_I32AndHLDE
   49 00:4B29 D9 -  -  -  		exx
   50 00:4B2A -  -  -  -  _I32AndHLDE:		
   51 00:4B2A 7C -  -  -  		ld 		a,h
   52 00:4B2B A2 -  -  -  		and 	d
   53 00:4B2C 67 -  -  -  		ld 		h,a
   54 00:4B2D 7D -  -  -  		ld 		a,l
   55 00:4B2E A3 -  -  -  		and 	e
   56 00:4B2F 6F -  -  -  		ld 		l,a
   57 00:4B30 C9 -  -  -  		ret
   58 00:4B31 -  -  -  -  
   59 00:4B31 -  -  -  -  ; ***************************************************************************************
   60 00:4B31 -  -  -  -  ;
   61 00:4B31 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4B31 -  -  -  -  ;
   63 00:4B31 -  -  -  -  ; ***************************************************************************************
   64 00:4B31 -  -  -  -  
   65 00:4B31 -  -  -  -  Int32Or:
   66 00:4B31 D9 -  -  -  		exx
   67 00:4B32 CD 36 4B -  		call 	_I32OrHLDE
   68 00:4B35 D9 -  -  -  		exx
   69 00:4B36 -  -  -  -  _I32OrHLDE:		
   70 00:4B36 7C -  -  -  		ld 		a,h
   71 00:4B37 B2 -  -  -  		or 		d
   72 00:4B38 67 -  -  -  		ld 		h,a
   73 00:4B39 7D -  -  -  		ld 		a,l
   74 00:4B3A B3 -  -  -  		or 		e
   75 00:4B3B 6F -  -  -  		ld 		l,a
   76 00:4B3C C9 -  -  -  		ret
   77 00:4B3D -  -  -  -  
   78 00:4B3D -  -  -  -  ; ***************************************************************************************
   79 00:4B3D -  -  -  -  ;
   80 00:4B3D -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4B3D -  -  -  -  ;
   82 00:4B3D -  -  -  -  ; ***************************************************************************************
   83 00:4B3D -  -  -  -  
   84 00:4B3D -  -  -  -  Int32Xor:
   85 00:4B3D D9 -  -  -  		exx
   86 00:4B3E CD 42 4B -  		call 	_I32XorHLDE
   87 00:4B41 D9 -  -  -  		exx
   88 00:4B42 -  -  -  -  _I32XorHLDE:		
   89 00:4B42 7C -  -  -  		ld 		a,h
   90 00:4B43 AA -  -  -  		xor 	d
   91 00:4B44 67 -  -  -  		ld 		h,a
   92 00:4B45 7D -  -  -  		ld 		a,l
   93 00:4B46 AB -  -  -  		xor 	e
   94 00:4B47 6F -  -  -  		ld 		l,a
   95 00:4B48 C9 -  -  -  		ret
   96 00:4B49 -  -  -  -  
   97 00:4B49 -  -  -  -  ; ***************************************************************************************
   98 00:4B49 -  -  -  -  ;
   99 00:4B49 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4B49 -  -  -  -  ;
  101 00:4B49 -  -  -  -  ; ***************************************************************************************
  102 00:4B49 -  -  -  -  
  103 00:4B49 -  -  -  -  Int32Zero:
  104 00:4B49 D9 -  -  -  		exx
  105 00:4B4A 7D -  -  -  		ld 		a,l
  106 00:4B4B B4 -  -  -  		or 		h
  107 00:4B4C D9 -  -  -  		exx
  108 00:4B4D B5 -  -  -  		or 		l
  109 00:4B4E B4 -  -  -  		or 		h
  110 00:4B4F C9 -  -  -  		ret
  111 00:4B50 -  -  -  -  
  112 00:4B50 -  -  -  -  ; ***************************************************************************************
  113 00:4B50 -  -  -  -  ;
  114 00:4B50 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4B50 -  -  -  -  ;
  116 00:4B50 -  -  -  -  ; ***************************************************************************************
  117 00:4B50 -  -  -  -  
  118 00:4B50 -  -  -  -  Int32Compare:
  119 00:4B50 E5 -  -  -  		push 	hl 							; save HL
  120 00:4B51 AF -  -  -  		xor 	a 							; clear carry
  121 00:4B52 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4B54 D9 -  -  -  		exx
  123 00:4B55 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4B56 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4B58 -  -  -  -  		;
  126 00:4B58 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4B59 E2 60 4B -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4B5C 78 -  -  -  		ld 		a,b
  129 00:4B5D EE 80 -  -  		xor 	$80
  130 00:4B5F 47 -  -  -  		ld 		b,a
  131 00:4B60 -  -  -  -  _I32CNoOverflow:
  132 00:4B60 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4B61 B5 -  -  -  		or 		l
  134 00:4B62 D9 -  -  -  		exx 
  135 00:4B63 B4 -  -  -  		or 		h
  136 00:4B64 B5 -  -  -  		or 		l
  137 00:4B65 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4B67 -  -  -  -  		;
  139 00:4B67 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4B68 CB 78 -  -  		bit 	7,b
  141 00:4B6A D9 -  -  -  		exx
  142 00:4B6B 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4B6D 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4B6F 3E FF -  -  		ld 		a,$FF
  145 00:4B71 -  -  -  -  _I32NotPos:
  146 00:4B71 D9 -  -  -  		exx
  147 00:4B72 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4B73 D9 -  -  -  		exx
  149 00:4B74 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4B75 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4B76 C9 -  -  -  		ret
  152 00:4B77 -  -  -  -  
  153 00:4B77 -  -  -  -  ; ***************************************************************************************
  154 00:4B77 -  -  -  -  ;
  155 00:4B77 -  -  -  -  ;										Negate HL'HL
  156 00:4B77 -  -  -  -  ;
  157 00:4B77 -  -  -  -  ; ***************************************************************************************
  158 00:4B77 -  -  -  -  
  159 00:4B77 -  -  -  -  Int32Negate:
  160 00:4B77 AF -  -  -  		xor 	a
  161 00:4B78 CD 81 4B -  		call 	_I32NSubtract
  162 00:4B7B D9 -  -  -  		exx
  163 00:4B7C CD 81 4B -  		call 	_I32NSubtract
  164 00:4B7F D9 -  -  -  		exx
  165 00:4B80 C9 -  -  -  		ret
  166 00:4B81 -  -  -  -  _I32NSubtract:
  167 00:4B81 D5 -  -  -  		push 	de
  168 00:4B82 EB -  -  -  		ex 		de,hl
  169 00:4B83 21 00 00 -  		ld 		hl,$0000
  170 00:4B86 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4B88 D1 -  -  -  		pop 	de
  172 00:4B89 C9 -  -  -  		ret
  173 00:4B8A -  -  -  -  		
  174 00:4B8A -  -  -  -  ; ***************************************************************************************
  175 00:4B8A -  -  -  -  ;
  176 00:4B8A -  -  -  -  ;									Changes and Updates
  177 00:4B8A -  -  -  -  ;
  178 00:4B8A -  -  -  -  ; ***************************************************************************************
  179 00:4B8A -  -  -  -  ;
  180 00:4B8A -  -  -  -  ;		Date			Notes
  181 00:4B8A -  -  -  -  ;		==== 			=====
  182 00:4B8A -  -  -  -  ;
  183 00:4B8A -  -  -  -  ; ***************************************************************************************
  184 00:4B8A -  -  -  -  		
Listing for file "_build.asm"
   60 00:4B8A -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4B8A -  -  -  -  ; ***************************************************************************************
    2 00:4B8A -  -  -  -  ; ***************************************************************************************
    3 00:4B8A -  -  -  -  ;
    4 00:4B8A -  -  -  -  ;		Name : 		itostring.asm
    5 00:4B8A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B8A -  -  -  -  ;		Reviewed :	No
    8 00:4B8A -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4B8A -  -  -  -  ;
   10 00:4B8A -  -  -  -  ; ***************************************************************************************
   11 00:4B8A -  -  -  -  ;
   12 00:4B8A -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4B8A -  -  -  -  ;
   14 00:4B8A -  -  -  -  ; ***************************************************************************************
   15 00:4B8A -  -  -  -  
   16 00:4B8A -  -  -  -  Int32ToString:
   17 00:4B8A C5 -  -  -  		push 	bc 							; save string start
   18 00:4B8B D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4B8C E5 -  -  -  		push 	hl
   20 00:4B8D 11 00 00 -  		ld	 	de,$0000
   21 00:4B90 D9 -  -  -  		exx
   22 00:4B91 D5 -  -  -  		push 	de
   23 00:4B92 E5 -  -  -  		push 	hl
   24 00:4B93 11 00 00 -  		ld 		de,$000
   25 00:4B96 D9 -  -  -  		exx
   26 00:4B97 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4B98 -  -  -  -  		;
   28 00:4B98 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4B9A 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4B9C ED 44 -  -  		neg 								; negate base and put in E
   31 00:4B9E 5F -  -  -  		ld 		e,a
   32 00:4B9F -  -  -  -  		;
   33 00:4B9F D9 -  -  -  		exx 								; is it -ve ?
   34 00:4BA0 CB 7C -  -  		bit 	7,h
   35 00:4BA2 D9 -  -  -  		exx
   36 00:4BA3 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4BA5 -  -  -  -  		;
   38 00:4BA5 CD 77 4B -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4BA8 -  -  -  -  		;
   40 00:4BA8 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4BAA 02 -  -  -  		ld 		(bc),a
   42 00:4BAB 03 -  -  -  		inc 	bc
   43 00:4BAC -  -  -  -  _I32TSNotNegative:	
   44 00:4BAC CD BA 4B -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4BAF -  -  -  -  _I32TSExit:
   46 00:4BAF 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4BB1 02 -  -  -  		ld 		(bc),a 
   48 00:4BB2 -  -  -  -  
   49 00:4BB2 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4BB3 E1 -  -  -  		pop 	hl
   51 00:4BB4 D1 -  -  -  		pop 	de
   52 00:4BB5 D9 -  -  -  		exx
   53 00:4BB6 E1 -  -  -  		pop 	hl
   54 00:4BB7 D1 -  -  -  		pop 	de
   55 00:4BB8 C1 -  -  -  		pop 	bc
   56 00:4BB9 C9 -  -  -  		ret
   57 00:4BBA -  -  -  -  
   58 00:4BBA -  -  -  -  _I32RecursiveConvert:
   59 00:4BBA CD EE 49 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4BBD F5 -  -  -  		push 	af 							; save remainder
   61 00:4BBE CD 49 4B -  		call 	Int32Zero		 			; check result is non zero
   62 00:4BC1 C4 BA 4B -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4BC4 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4BC5 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4BC7 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4BC9 C6 07 -  -  		add 	a,7
   67 00:4BCB -  -  -  -  _I32NotHex:
   68 00:4BCB C6 30 -  -  		add 	a,48
   69 00:4BCD 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4BCE 03 -  -  -  		inc 	bc
   71 00:4BCF C9 -  -  -  		ret		
   72 00:4BD0 -  -  -  -  
   73 00:4BD0 -  -  -  -  ; ***************************************************************************************
   74 00:4BD0 -  -  -  -  ;
   75 00:4BD0 -  -  -  -  ;									Changes and Updates
   76 00:4BD0 -  -  -  -  ;
   77 00:4BD0 -  -  -  -  ; ***************************************************************************************
   78 00:4BD0 -  -  -  -  ;
   79 00:4BD0 -  -  -  -  ;		Date			Notes
   80 00:4BD0 -  -  -  -  ;		==== 			=====
   81 00:4BD0 -  -  -  -  ;
   82 00:4BD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4BD0 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4BD0 -  -  -  -  ; ***************************************************************************************
    2 00:4BD0 -  -  -  -  ; ***************************************************************************************
    3 00:4BD0 -  -  -  -  ;
    4 00:4BD0 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4BD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BD0 -  -  -  -  ;		Reviewed :	No
    8 00:4BD0 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4BD0 -  -  -  -  ;
   10 00:4BD0 -  -  -  -  ; ***************************************************************************************
   11 00:4BD0 -  -  -  -  ; ***************************************************************************************
   12 00:4BD0 -  -  -  -  
   13 00:4BD0 -  -  -  -  #ifdef AQUARIUS
   14 00:4BD0 -  -  -  -  
   15 00:4BD0 -  -  -  -  ; ***************************************************************************************
   16 00:4BD0 -  -  -  -  ;
   17 00:4BD0 -  -  -  -  ;								Initialise system stuff
   18 00:4BD0 -  -  -  -  ;
   19 00:4BD0 -  -  -  -  ; ***************************************************************************************
   20 00:4BD0 -  -  -  -  
   21 00:4BD0 -  -  -  -  SYSInitialise:
   22 00:4BD0 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4BD2 CD D8 4B -  	call 	SYSPrintChar
   24 00:4BD5 C9 -  -  -  	ret
   25 00:4BD6 -  -  -  -  
   26 00:4BD6 -  -  -  -  ; ***************************************************************************************
   27 00:4BD6 -  -  -  -  ;
   28 00:4BD6 -  -  -  -  ;								Terminate system stuff
   29 00:4BD6 -  -  -  -  ;
   30 00:4BD6 -  -  -  -  ; ***************************************************************************************
   31 00:4BD6 -  -  -  -  
   32 00:4BD6 -  -  -  -  SYSTerminate:
   33 00:4BD6 18 FE -  -  	jr 		SYSTerminate
   34 00:4BD8 -  -  -  -  
   35 00:4BD8 -  -  -  -  ; ***************************************************************************************
   36 00:4BD8 -  -  -  -  ;
   37 00:4BD8 -  -  -  -  ;								Print A character
   38 00:4BD8 -  -  -  -  ;
   39 00:4BD8 -  -  -  -  ; ***************************************************************************************
   40 00:4BD8 -  -  -  -  
   41 00:4BD8 -  -  -  -  SYSPrintChar:
   42 00:4BD8 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4BD9 C5 -  -  -  	push 	bc
   44 00:4BDA D5 -  -  -  	push 	de
   45 00:4BDB E5 -  -  -  	push 	hl
   46 00:4BDC DD E5 -  -  	push 	ix
   47 00:4BDE FD E5 -  -  	push 	iy
   48 00:4BE0 D9 -  -  -  	exx
   49 00:4BE1 C5 -  -  -  	push 	bc
   50 00:4BE2 D5 -  -  -  	push 	de
   51 00:4BE3 E5 -  -  -  	push 	hl
   52 00:4BE4 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4BE7 E1 -  -  -  	pop 	hl
   54 00:4BE8 D1 -  -  -  	pop 	de
   55 00:4BE9 C1 -  -  -  	pop 	bc
   56 00:4BEA D9 -  -  -  	exx
   57 00:4BEB FD E1 -  -  	pop 	iy
   58 00:4BED DD E1 -  -  	pop 	ix
   59 00:4BEF E1 -  -  -  	pop 	hl
   60 00:4BF0 D1 -  -  -  	pop 	de
   61 00:4BF1 C1 -  -  -  	pop 	bc
   62 00:4BF2 F1 -  -  -  	pop 	af
   63 00:4BF3 C9 -  -  -  	ret		
   64 00:4BF4 -  -  -  -  
   65 00:4BF4 -  -  -  -  ; ***************************************************************************************
   66 00:4BF4 -  -  -  -  ;
   67 00:4BF4 -  -  -  -  ;									Print Newline
   68 00:4BF4 -  -  -  -  ;
   69 00:4BF4 -  -  -  -  ; ***************************************************************************************
   70 00:4BF4 -  -  -  -  
   71 00:4BF4 -  -  -  -  SYSPrintCRLF:
   72 00:4BF4 F5 -  -  -  	push 	af
   73 00:4BF5 3E 0D -  -  	ld 		a,13
   74 00:4BF7 CD D8 4B -  	call 	SYSPrintChar
   75 00:4BFA 3E 0A -  -  	ld 		a,10
   76 00:4BFC CD D8 4B -  	call 	SYSPrintChar
   77 00:4BFF F1 -  -  -  	pop 	af
   78 00:4C00 C9 -  -  -  	ret
   79 00:4C01 -  -  -  -  
   80 00:4C01 -  -  -  -  ; ***************************************************************************************
   81 00:4C01 -  -  -  -  ;
   82 00:4C01 -  -  -  -  ;									Get time into HL'HL
   83 00:4C01 -  -  -  -  ;
   84 00:4C01 -  -  -  -  ; ***************************************************************************************
   85 00:4C01 -  -  -  -  
   86 00:4C01 -  -  -  -  SYSGetTimer:
   87 00:4C01 DB 00 -  -   	in 		a,($00)
   88 00:4C03 6F -  -  -   	ld 		l,a
   89 00:4C04 DB 01 -  -   	in 		a,($01)
   90 00:4C06 67 -  -  -   	ld 		h,a
   91 00:4C07 D9 -  -  -   	exx
   92 00:4C08 DB 02 -  -   	in 		a,($02)
   93 00:4C0A 6F -  -  -   	ld 		l,a
   94 00:4C0B DB 03 -  -   	in 		a,($03)
   95 00:4C0D 67 -  -  -   	ld 		h,a
   96 00:4C0E D9 -  -  -   	exx
   97 00:4C0F C9 -  -  -  	ret 	
   98 00:4C10 -  -  -  -  	
   99 00:4C10 -  -  -  -  #endif
  100 00:4C10 -  -  -  -  
  101 00:4C10 -  -  -  -  ; ***************************************************************************************
  102 00:4C10 -  -  -  -  ;
  103 00:4C10 -  -  -  -  ;									Changes and Updates
  104 00:4C10 -  -  -  -  ;
  105 00:4C10 -  -  -  -  ; ***************************************************************************************
  106 00:4C10 -  -  -  -  ;
  107 00:4C10 -  -  -  -  ;		Date			Notes
  108 00:4C10 -  -  -  -  ;		==== 			=====
  109 00:4C10 -  -  -  -  ;
  110 00:4C10 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4C10 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4C10 -  -  -  -  ; ***************************************************************************************
    2 00:4C10 -  -  -  -  ; ***************************************************************************************
    3 00:4C10 -  -  -  -  ;
    4 00:4C10 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4C10 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C10 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C10 -  -  -  -  ;		Reviewed :	No
    8 00:4C10 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4C10 -  -  -  -  ;
   10 00:4C10 -  -  -  -  ; ***************************************************************************************
   11 00:4C10 -  -  -  -  ; ***************************************************************************************
   12 00:4C10 -  -  -  -  
   13 00:4C10 -  -  -  -  #ifdef CLEANEZ80
   14 00:4C10             
   15 00:4C10             ; ***************************************************************************************
   16 00:4C10             ;
   17 00:4C10             ;								Initialise system stuff
   18 00:4C10             ;
   19 00:4C10             ; ***************************************************************************************
   20 00:4C10             
   21 00:4C10             SYSInitialise:
   22 00:4C10             	ret
   23 00:4C10             
   24 00:4C10             ; ***************************************************************************************
   25 00:4C10             ;
   26 00:4C10             ;								Terminate system stuff
   27 00:4C10             ;
   28 00:4C10             ; ***************************************************************************************
   29 00:4C10             
   30 00:4C10             SYSTerminate:
   31 00:4C10             	ret
   32 00:4C10             
   33 00:4C10             ; ***************************************************************************************
   34 00:4C10             ;
   35 00:4C10             ;								Print A character
   36 00:4C10             ;
   37 00:4C10             ; ***************************************************************************************
   38 00:4C10             
   39 00:4C10             SYSPrintChar:
   40 00:4C10             	ret		
   41 00:4C10             
   42 00:4C10             ; ***************************************************************************************
   43 00:4C10             ;
   44 00:4C10             ;									Print Newline
   45 00:4C10             ;
   46 00:4C10             ; ***************************************************************************************
   47 00:4C10             
   48 00:4C10             SYSPrintCRLF:
   49 00:4C10             	ret
   50 00:4C10             
   51 00:4C10             ; ***************************************************************************************
   52 00:4C10             ;
   53 00:4C10             ;									Get time into HL'HL
   54 00:4C10             ;
   55 00:4C10             ; ***************************************************************************************
   56 00:4C10             
   57 00:4C10             SYSGetTimer:
   58 00:4C10             	ret
   59 00:4C10             
   60 00:4C10             #endif
   61 00:4C10 -  -  -  -  
   62 00:4C10 -  -  -  -  ; ***************************************************************************************
   63 00:4C10 -  -  -  -  ;
   64 00:4C10 -  -  -  -  ;									Changes and Updates
   65 00:4C10 -  -  -  -  ;
   66 00:4C10 -  -  -  -  ; ***************************************************************************************
   67 00:4C10 -  -  -  -  ;
   68 00:4C10 -  -  -  -  ;		Date			Notes
   69 00:4C10 -  -  -  -  ;		==== 			=====
   70 00:4C10 -  -  -  -  ;
   71 00:4C10 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4C10 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4C10 -  -  -  -  ; ***************************************************************************************
    2 00:4C10 -  -  -  -  ; ***************************************************************************************
    3 00:4C10 -  -  -  -  ;
    4 00:4C10 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4C10 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C10 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C10 -  -  -  -  ;		Reviewed :	No
    8 00:4C10 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4C10 -  -  -  -  ;
   10 00:4C10 -  -  -  -  ; ***************************************************************************************
   11 00:4C10 -  -  -  -  ; ***************************************************************************************
   12 00:4C10 -  -  -  -  
   13 00:4C10 -  -  -  -  #ifdef TI84
   14 00:4C10             
   15 00:4C10             ; ***************************************************************************************
   16 00:4C10             ;
   17 00:4C10             ;								Initialise system stuff
   18 00:4C10             ;
   19 00:4C10             ; ***************************************************************************************
   20 00:4C10             
   21 00:4C10             SYSInitialise:
   22 00:4C10             	di
   23 00:4C10             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4C10             	ld 		(_IYTemp84),iy
   25 00:4C10             	ret
   26 00:4C10             
   27 00:4C10             ; ***************************************************************************************
   28 00:4C10             ;
   29 00:4C10             ;								Terminate system stuff
   30 00:4C10             ;
   31 00:4C10             ; ***************************************************************************************
   32 00:4C10             
   33 00:4C10             SYSTerminate:
   34 00:4C10             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4C10             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4C10             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4C10             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4C10             	ei
   39 00:4C10             	ret 										; and exit.
   40 00:4C10             
   41 00:4C10             _StackTemp84:									; temp var for TI84 only.
   42 00:4C10             	.dw 	0,0
   43 00:4C10             _IYTemp84:
   44 00:4C10             	.dw 	0,0		
   45 00:4C10             
   46 00:4C10             ; ***************************************************************************************
   47 00:4C10             ;
   48 00:4C10             ;								Print A character
   49 00:4C10             ;
   50 00:4C10             ; ***************************************************************************************
   51 00:4C10             
   52 00:4C10             SYSPrintChar:
   53 00:4C10             	push 	af 									; we stack everything including alt registers
   54 00:4C10             	push 	bc
   55 00:4C10             	push 	de
   56 00:4C10             	push 	hl
   57 00:4C10             	push 	ix
   58 00:4C10             	push 	iy
   59 00:4C10             	exx
   60 00:4C10             	push 	bc
   61 00:4C10             	push 	de
   62 00:4C10             	push 	hl
   63 00:4C10             
   64 00:4C10             	ld 		iy,(_IYTemp84)
   65 00:4C10             	call 	_PutC 								; print A as character
   66 00:4C10             	di
   67 00:4C10             	ld 		(_IYTemp84),iy
   68 00:4C10             
   69 00:4C10             	pop 	hl
   70 00:4C10             	pop 	de
   71 00:4C10             	pop 	bc
   72 00:4C10             	exx
   73 00:4C10             	pop 	iy
   74 00:4C10             	pop 	ix
   75 00:4C10             	pop 	hl
   76 00:4C10             	pop 	de
   77 00:4C10             	pop 	bc
   78 00:4C10             	pop 	af
   79 00:4C10             	ret		
   80 00:4C10             
   81 00:4C10             ; ***************************************************************************************
   82 00:4C10             ;
   83 00:4C10             ;									Print Newline
   84 00:4C10             ;
   85 00:4C10             ; ***************************************************************************************
   86 00:4C10             
   87 00:4C10             SYSPrintCRLF:
   88 00:4C10             	push 	af 									; we stack everything including alt registers
   89 00:4C10             	push 	bc
   90 00:4C10             	push 	de
   91 00:4C10             	push 	hl
   92 00:4C10             	push 	ix
   93 00:4C10             	push 	iy
   94 00:4C10             	exx
   95 00:4C10             	push 	bc
   96 00:4C10             	push 	de
   97 00:4C10             	push 	hl
   98 00:4C10             
   99 00:4C10             	ld 		iy,(_IYTemp84)
  100 00:4C10             	call 	_newline
  101 00:4C10             	di
  102 00:4C10             	ld 		(_IYTemp84),iy
  103 00:4C10             
  104 00:4C10             	pop 	hl
  105 00:4C10             	pop 	de
  106 00:4C10             	pop 	bc
  107 00:4C10             	exx
  108 00:4C10             	pop 	iy
  109 00:4C10             	pop 	ix
  110 00:4C10             	pop 	hl
  111 00:4C10             	pop 	de
  112 00:4C10             	pop 	bc
  113 00:4C10             	pop 	af
  114 00:4C10             	ret
  115 00:4C10             
  116 00:4C10             ; ***************************************************************************************
  117 00:4C10             ;
  118 00:4C10             ;									Get time into HL'HL
  119 00:4C10             ;
  120 00:4C10             ; ***************************************************************************************
  121 00:4C10             
  122 00:4C10             SYSGetTimer:
  123 00:4C10             	ld 		hl,$1234
  124 00:4C10             	exx
  125 00:4C10             	ld 		hl,$5678
  126 00:4C10             	exx
  127 00:4C10             	ret
  128 00:4C10             
  129 00:4C10             #endif
  130 00:4C10 -  -  -  -  
  131 00:4C10 -  -  -  -  ; ***************************************************************************************
  132 00:4C10 -  -  -  -  ;
  133 00:4C10 -  -  -  -  ;									Changes and Updates
  134 00:4C10 -  -  -  -  ;
  135 00:4C10 -  -  -  -  ; ***************************************************************************************
  136 00:4C10 -  -  -  -  ;
  137 00:4C10 -  -  -  -  ;		Date			Notes
  138 00:4C10 -  -  -  -  ;		==== 			=====
  139 00:4C10 -  -  -  -  ;
  140 00:4C10 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:4C10 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4C10 -  -  -  -  ; ***************************************************************************************
    2 00:4C10 -  -  -  -  ; ***************************************************************************************
    3 00:4C10 -  -  -  -  ;
    4 00:4C10 -  -  -  -  ;		Name : 		basic.asm
    5 00:4C10 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C10 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C10 -  -  -  -  ;		Reviewed :	No
    8 00:4C10 -  -  -  -  ;		Purpose :	Main program.
    9 00:4C10 -  -  -  -  ;
   10 00:4C10 -  -  -  -  ; ***************************************************************************************
   11 00:4C10 -  -  -  -  ; ***************************************************************************************
   12 00:4C10 -  -  -  -  
   13 00:4C10 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 21 01 00 B8 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0C 02 00 
              B9 02 8F 4C 
              A7 03 8F 6A 
              80 08 03 00 
              BB 02 A6 03 
              80 00 -  -  	.db	$21,$01,$00,$b8,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0c,$02,$00,$b9,$02,$8f,$4c,$a7,$03,$8f,$6a,$80,$08,$03,$00,$bb,$02,$a6,$03,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5036 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6036 -  -  -  -  EndTestInstance:
   18 00:6036 -  -  -  -  		
   19 00:6036 -  -  -  -  ; ***************************************************************************************
   20 00:6036 -  -  -  -  ;
   21 00:6036 -  -  -  -  ;									Changes and Updates
   22 00:6036 -  -  -  -  ;
   23 00:6036 -  -  -  -  ; ***************************************************************************************
   24 00:6036 -  -  -  -  ;
   25 00:6036 -  -  -  -  ;		Date			Notes
   26 00:6036 -  -  -  -  ;		==== 			=====
   27 00:6036 -  -  -  -  ;
   28 00:6036 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:6036 -  -  -  -  FinalAddress:
