    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 90 4C -  		call 	SYSInitialise
   44 00:4006 11 00 50 -  		ld 		de,TestInstance
   45 00:4009 21 BA 60 -  		ld 		hl,EndTestInstance
   46 00:400C CD D9 46 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 59 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 AD 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 98 4C -  		call 	SYSPrintChar
   56 00:401C CD 96 4C -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 54 
              42 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 54 
              42 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  											; must be power of 2. 
   24 00:4029 -  -  -  -  
   25 00:4029 -  -  -  -  ; ***************************************************************************************
   26 00:4029 -  -  -  -  ;
   27 00:4029 -  -  -  -  ;								Defines the current instance
   28 00:4029 -  -  -  -  ;
   29 00:4029 -  -  -  -  ; ***************************************************************************************
   30 00:4029 -  -  -  -  
   31 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:4029 00 00 00 00 		.dw 	0,0
   33 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:402D 00 00 00 00 		.dw 	0,0		
   35 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4031 00 00 00 00 		.dw 	0,0 							
   37 00:4035 -  -  -  -  
   38 00:4035 -  -  -  -  ; ***************************************************************************************
   39 00:4035 -  -  -  -  ;
   40 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4035 -  -  -  -  ;
   42 00:4035 -  -  -  -  ; ***************************************************************************************
   43 00:4035 -  -  -  -  
   44 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4035 00 00 00 00 		.dw 	0,0
   46 00:4039 -  -  -  -  
   47 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:4039 00 00 00 00 		.dw 	0,0		
   49 00:403D -  -  -  -  
   50 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:403D 00 00 00 00 		.dw 	0,0
   52 00:4041 -  -  -  -  
   53 00:4041 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4041 00 00 00 00 		.dw 	0,0
   55 00:4045 -  -  -  -  
   56 00:4045 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4045 00 00 00 00 		.dw 	0,0		
   58 00:4049 -  -  -  -  
   59 00:4049 -  -  -  -  ;
   60 00:4049 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:4049 -  -  -  -  ;
   62 00:4049 -  -  -  -  
   63 00:4049 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:4049 00 00 00 00 		.dw 	0,0
   65 00:404D -  -  -  -  		
   66 00:404D -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:404D 00 00 00 00 		.dw 	0,0
   68 00:4051 -  -  -  -  
   69 00:4051 -  -  -  -  ; ***************************************************************************************
   70 00:4051 -  -  -  -  ;
   71 00:4051 -  -  -  -  ;										Run variables
   72 00:4051 -  -  -  -  ;
   73 00:4051 -  -  -  -  ; ***************************************************************************************
   74 00:4051 -  -  -  -  
   75 00:4051 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4051 00 00 00 00 		.dw 	0,0
   77 00:4055 -  -  -  -  		
   78 00:4055 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4055 00 00 00 00 		.dw 	0,0
   80 00:4059 -  -  -  -  
   81 00:4059 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:4059 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:405F -  -  -  -  
   84 00:405F -  -  -  -  AConvert: 									; used for address conversions.
   85 00:405F 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4065 -  -  -  -  		
   87 00:4065 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4065 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4075 -  -  -  -  
   90 00:4075 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4075 00 00 -  -  		.dw 	0
   92 00:4077 -  -  -  -  
   93 00:4077 -  -  -  -  ; ***************************************************************************************
   94 00:4077 -  -  -  -  ;
   95 00:4077 -  -  -  -  ;									Variable Information
   96 00:4077 -  -  -  -  ;
   97 00:4077 -  -  -  -  ; ***************************************************************************************
   98 00:4077 -  -  -  -  
   99 00:4077 -  -  -  -  VarNameStart: 								; first byte of name
  100 00:4077 00 00 00 00 		.dw 	0,0
  101 00:407B -  -  -  -  VarHash: 									; name hash value
  102 00:407B 00 00 -  -  		.dw 	0		
  103 00:407D -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:407D 00 00 00 00 		.dw 	0,0
  105 00:4081 -  -  -  -  		
  106 00:4081 -  -  -  -  ; ***************************************************************************************
  107 00:4081 -  -  -  -  ;
  108 00:4081 -  -  -  -  ;										  Buffers
  109 00:4081 -  -  -  -  ;
  110 00:4081 -  -  -  -  ; ***************************************************************************************
  111 00:4081 -  -  -  -  
  112 00:4081 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:4081 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:4091 -  -  -  -  
  115 00:4091 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:4091 00 00 -  -  		.dw 	0
  117 00:4093 -  -  -  -  
  118 00:4093 -  -  -  -  ConvertBuffer: 								; general usage
  119 00:4093 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:40D3 -  -  -  -  
  121 00:40D3 -  -  -  -  ; ***************************************************************************************
  122 00:40D3 -  -  -  -  ;
  123 00:40D3 -  -  -  -  ;									Changes and Updates
  124 00:40D3 -  -  -  -  ;
  125 00:40D3 -  -  -  -  ; ***************************************************************************************
  126 00:40D3 -  -  -  -  ;
  127 00:40D3 -  -  -  -  ;		Date			Notes
  128 00:40D3 -  -  -  -  ;		==== 			=====
  129 00:40D3 -  -  -  -  ;
  130 00:40D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D3 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D3 -  -  -  -  ; ***************************************************************************************
    2 00:40D3 -  -  -  -  ; ***************************************************************************************
    3 00:40D3 -  -  -  -  ;
    4 00:40D3 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D3 -  -  -  -  ;		Reviewed :	No
    8 00:40D3 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D3 -  -  -  -  ;
   10 00:40D3 -  -  -  -  ; ***************************************************************************************
   11 00:40D3 -  -  -  -  ; ***************************************************************************************
   12 00:40D3 -  -  -  -  
   13 00:40D3 -  -  -  -  ; ***************************************************************************************
   14 00:40D3 -  -  -  -  ;
   15 00:40D3 -  -  -  -  ;									ASSERT command
   16 00:40D3 -  -  -  -  ;
   17 00:40D3 -  -  -  -  ; ***************************************************************************************
   18 00:40D3 -  -  -  -  
   19 00:40D3 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D3 CD 39 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40D6 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40DC C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40DD 3E 01 C3 54 
              42 -  -  -  		ERR_ASSERT
   24 00:40E2 -  -  -  -  
   25 00:40E2 -  -  -  -  ; ***************************************************************************************
   26 00:40E2 -  -  -  -  ;
   27 00:40E2 -  -  -  -  ;									Changes and Updates
   28 00:40E2 -  -  -  -  ;
   29 00:40E2 -  -  -  -  ; ***************************************************************************************
   30 00:40E2 -  -  -  -  ;
   31 00:40E2 -  -  -  -  ;		Date			Notes
   32 00:40E2 -  -  -  -  ;		==== 			=====
   33 00:40E2 -  -  -  -  ;
   34 00:40E2 -  -  -  -  ; ***************************************************************************************
   35 00:40E2 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E2 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E2 -  -  -  -  ; ***************************************************************************************
    2 00:40E2 -  -  -  -  ; ***************************************************************************************
    3 00:40E2 -  -  -  -  ;
    4 00:40E2 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E2 -  -  -  -  ;		Reviewed :	No
    8 00:40E2 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E2 -  -  -  -  ;
   10 00:40E2 -  -  -  -  ; ***************************************************************************************
   11 00:40E2 -  -  -  -  ; ***************************************************************************************
   12 00:40E2 -  -  -  -  
   13 00:40E2 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E2 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E2 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E2 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40E2 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40E2 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40E2 C3 B1 42 -  		jp 		SyntaxError
   20 00:40E5 -  -  -  -  
   21 00:40E5 -  -  -  -  ; ***************************************************************************************
   22 00:40E5 -  -  -  -  ;
   23 00:40E5 -  -  -  -  ;									Changes and Updates
   24 00:40E5 -  -  -  -  ;
   25 00:40E5 -  -  -  -  ; ***************************************************************************************
   26 00:40E5 -  -  -  -  ;
   27 00:40E5 -  -  -  -  ;		Date			Notes
   28 00:40E5 -  -  -  -  ;		==== 			=====
   29 00:40E5 -  -  -  -  ;
   30 00:40E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40E5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40E5 -  -  -  -  ; ***************************************************************************************
    2 00:40E5 -  -  -  -  ; ***************************************************************************************
    3 00:40E5 -  -  -  -  ;
    4 00:40E5 -  -  -  -  ;		Name : 		colon.asm
    5 00:40E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40E5 -  -  -  -  ;		Reviewed :	No
    8 00:40E5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40E5 -  -  -  -  ;
   10 00:40E5 -  -  -  -  ; ***************************************************************************************
   11 00:40E5 -  -  -  -  ; ***************************************************************************************
   12 00:40E5 -  -  -  -  
   13 00:40E5 -  -  -  -  ; ***************************************************************************************
   14 00:40E5 -  -  -  -  ;
   15 00:40E5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40E5 -  -  -  -  ;
   17 00:40E5 -  -  -  -  ; ***************************************************************************************
   18 00:40E5 -  -  -  -  
   19 00:40E5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40E5 C9 -  -  -  		ret
   21 00:40E6 -  -  -  -  
   22 00:40E6 -  -  -  -  ; ***************************************************************************************
   23 00:40E6 -  -  -  -  ;
   24 00:40E6 -  -  -  -  ;									Changes and Updates
   25 00:40E6 -  -  -  -  ;
   26 00:40E6 -  -  -  -  ; ***************************************************************************************
   27 00:40E6 -  -  -  -  ;
   28 00:40E6 -  -  -  -  ;		Date			Notes
   29 00:40E6 -  -  -  -  ;		==== 			=====
   30 00:40E6 -  -  -  -  ;
   31 00:40E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40E6 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40E6 -  -  -  -  ; ***************************************************************************************
    2 00:40E6 -  -  -  -  ; ***************************************************************************************
    3 00:40E6 -  -  -  -  ;
    4 00:40E6 -  -  -  -  ;		Name : 		end.asm
    5 00:40E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E6 -  -  -  -  ;		Reviewed :	No
    8 00:40E6 -  -  -  -  ;		Purpose :	End command
    9 00:40E6 -  -  -  -  ;
   10 00:40E6 -  -  -  -  ; ***************************************************************************************
   11 00:40E6 -  -  -  -  ; ***************************************************************************************
   12 00:40E6 -  -  -  -  
   13 00:40E6 -  -  -  -  ; ***************************************************************************************
   14 00:40E6 -  -  -  -  ;
   15 00:40E6 -  -  -  -  ;										END command
   16 00:40E6 -  -  -  -  ;
   17 00:40E6 -  -  -  -  ; ***************************************************************************************
   18 00:40E6 -  -  -  -  
   19 00:40E6 -  -  -  -  Command_END: 	;; [end]
   20 00:40E6 3E 00 C3 54 
              42 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40EB -  -  -  -  
   22 00:40EB -  -  -  -  ; ***************************************************************************************
   23 00:40EB -  -  -  -  ;
   24 00:40EB -  -  -  -  ;									Changes and Updates
   25 00:40EB -  -  -  -  ;
   26 00:40EB -  -  -  -  ; ***************************************************************************************
   27 00:40EB -  -  -  -  ;
   28 00:40EB -  -  -  -  ;		Date			Notes
   29 00:40EB -  -  -  -  ;		==== 			=====
   30 00:40EB -  -  -  -  ;
   31 00:40EB -  -  -  -  ; ***************************************************************************************
   32 00:40EB -  -  -  -  		
Listing for file "_build.asm"
   17 00:40EB -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40EB -  -  -  -  ; ***************************************************************************************
    2 00:40EB -  -  -  -  ; ***************************************************************************************
    3 00:40EB -  -  -  -  ;
    4 00:40EB -  -  -  -  ;		Name : 		endofline.asm
    5 00:40EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EB -  -  -  -  ;		Reviewed :	None
    8 00:40EB -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40EB -  -  -  -  ;
   10 00:40EB -  -  -  -  ; ***************************************************************************************
   11 00:40EB -  -  -  -  ; ***************************************************************************************
   12 00:40EB -  -  -  -  
   13 00:40EB -  -  -  -  ; ***************************************************************************************
   14 00:40EB -  -  -  -  ;
   15 00:40EB -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40EB -  -  -  -  ;
   17 00:40EB -  -  -  -  ; ***************************************************************************************
   18 00:40EB -  -  -  -  
   19 00:40EB -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40EB DD 2A 51 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40EF 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40F2 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40F5 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40F7 -  -  -  -  		;
   25 00:40F7 ED 7B 55 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40FB C3 BC 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40FE -  -  -  -  
   28 00:40FE -  -  -  -  ; ***************************************************************************************
   29 00:40FE -  -  -  -  ;
   30 00:40FE -  -  -  -  ;									Changes and Updates
   31 00:40FE -  -  -  -  ;
   32 00:40FE -  -  -  -  ; ***************************************************************************************
   33 00:40FE -  -  -  -  ;
   34 00:40FE -  -  -  -  ;		Date			Notes
   35 00:40FE -  -  -  -  ;		==== 			=====
   36 00:40FE -  -  -  -  ;
   37 00:40FE -  -  -  -  ; ***************************************************************************************
   38 00:40FE -  -  -  -  		
Listing for file "_build.asm"
   18 00:40FE -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:40FE -  -  -  -  ; ***************************************************************************************
    2 00:40FE -  -  -  -  ; ***************************************************************************************
    3 00:40FE -  -  -  -  ;
    4 00:40FE -  -  -  -  ;		Name : 		let.asm
    5 00:40FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40FE -  -  -  -  ;		Date : 		4th June 2022
    7 00:40FE -  -  -  -  ;		Reviewed :	No
    8 00:40FE -  -  -  -  ;		Purpose :	Assignment statement
    9 00:40FE -  -  -  -  ;
   10 00:40FE -  -  -  -  ; ***************************************************************************************
   11 00:40FE -  -  -  -  ; ***************************************************************************************
   12 00:40FE -  -  -  -  
   13 00:40FE -  -  -  -  ; ***************************************************************************************
   14 00:40FE -  -  -  -  ;
   15 00:40FE -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:40FE -  -  -  -  ;
   17 00:40FE -  -  -  -  ; ***************************************************************************************
   18 00:40FE -  -  -  -  
   19 00:40FE -  -  -  -  Command_LET: 	;; [let]
   20 00:40FE DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:4101 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:4103 28 28 -  -  		jr 		z,_CLString
   23 00:4105 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:4107 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:4109 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:410B 32 75 40 -  		ld 		(AllowAutoCreate),a
   27 00:410E -  -  -  -  _CLNoAuto:
   28 00:410E 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:4110 CD CA 43 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:4113 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:4115 CA B1 42 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:4118 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:4119 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:411A AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:411B 32 75 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:411E 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:4120 CD 49 42 -  		call 	CheckNextA
   38 00:4123 -  -  -  -  
   39 00:4123 CD 33 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:4126 -  -  -  -  
   41 00:4126 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:4127 43 -  -  -  		ld 		b,e 						
   43 00:4128 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:4129 -  -  -  -  		;
   45 00:4129 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:4129 -  -  -  -  		;
   47 00:4129 CD 2E 41 -  		call 	WriteHLToDE
   48 00:412C C9 -  -  -  		ret
   49 00:412D -  -  -  -  		;
   50 00:412D -  -  -  -  		; 		String assignment code.
   51 00:412D -  -  -  -  		;
   52 00:412D -  -  -  -  _CLString:
   53 00:412D 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:412E -  -  -  -  
   55 00:412E -  -  -  -  ; ***************************************************************************************
   56 00:412E -  -  -  -  ;
   57 00:412E -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:412E -  -  -  -  ;
   59 00:412E -  -  -  -  ; ***************************************************************************************
   60 00:412E -  -  -  -  
   61 00:412E -  -  -  -  WriteHLToDE:
   62 00:412E CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:4130 C2 A7 42 -  		jp 		nz,TypeMismatch
   64 00:4133 -  -  -  -  		;
   65 00:4133 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:4133 -  -  -  -  		;		
   67 00:4133 -  -  -  -  _WHDWriteNumber:
   68 00:4133 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:4134 D9 -  -  -  		exx
   70 00:4135 EB -  -  -  		ex 		de,hl
   71 00:4136 D9 -  -  -  		exx
   72 00:4137 -  -  -  -  
   73 00:4137 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:4138 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:4139 72 -  -  -  		ld 		(hl),d
   76 00:413A 23 -  -  -  		inc 	hl
   77 00:413B E5 -  -  -  		push 	hl
   78 00:413C D9 -  -  -  		exx
   79 00:413D E1 -  -  -  		pop 	hl
   80 00:413E 73 -  -  -  		ld 		(hl),e
   81 00:413F 23 -  -  -  		inc 	hl
   82 00:4140 72 -  -  -  		ld 		(hl),d
   83 00:4141 D9 -  -  -  		exx
   84 00:4142 -  -  -  -  
   85 00:4142 C9 -  -  -  		ret
   86 00:4143 -  -  -  -  
   87 00:4143 -  -  -  -  ; ***************************************************************************************
   88 00:4143 -  -  -  -  ;
   89 00:4143 -  -  -  -  ;									Changes and Updates
   90 00:4143 -  -  -  -  ;
   91 00:4143 -  -  -  -  ; ***************************************************************************************
   92 00:4143 -  -  -  -  ;
   93 00:4143 -  -  -  -  ;		Date			Notes
   94 00:4143 -  -  -  -  ;		==== 			=====
   95 00:4143 -  -  -  -  ;
   96 00:4143 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:4143 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:4143 -  -  -  -  ; ***************************************************************************************
    2 00:4143 -  -  -  -  ; ***************************************************************************************
    3 00:4143 -  -  -  -  ;
    4 00:4143 -  -  -  -  ;		Name : 		print.asm
    5 00:4143 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4143 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4143 -  -  -  -  ;		Reviewed :	No
    8 00:4143 -  -  -  -  ;		Purpose :	Print command
    9 00:4143 -  -  -  -  ;
   10 00:4143 -  -  -  -  ; ***************************************************************************************
   11 00:4143 -  -  -  -  ; ***************************************************************************************
   12 00:4143 -  -  -  -  
   13 00:4143 -  -  -  -  ; ***************************************************************************************
   14 00:4143 -  -  -  -  ;
   15 00:4143 -  -  -  -  ;										PRINT command
   16 00:4143 -  -  -  -  ;
   17 00:4143 -  -  -  -  ; ***************************************************************************************
   18 00:4143 -  -  -  -  
   19 00:4143 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:4143 -  -  -  -  		;
   21 00:4143 -  -  -  -  		;		Main loop
   22 00:4143 -  -  -  -  		;
   23 00:4143 -  -  -  -  _CPRLoop:
   24 00:4143 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:4146 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:4148 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:414A FE A7 -  -  		cp 		KWD_COLON 	
   28 00:414C 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:414E FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:4150 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:4152 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:4154 28 26 -  -  		jr 		z,_CPRTab
   33 00:4156 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:4158 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:415A -  -  -  -  		;
   36 00:415A CD 33 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:415D CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:415F 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:4161 -  -  -  -  		;
   40 00:4161 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:4163 -  -  -  -  _CPRPrintNumber:
   42 00:4163 F5 -  -  -  		push 	af 							; print leading space
   43 00:4164 3E 20 -  -  		ld 		a,' '
   44 00:4166 CD 98 4C -  		call 	SYSPrintChar
   45 00:4169 F1 -  -  -  		pop 	af
   46 00:416A 01 93 40 -  		ld  	bc,ConvertBuffer
   47 00:416D C5 -  -  -  		push 	bc
   48 00:416E CD 4A 4C -  		call 	Int32ToString 				; convert to string
   49 00:4171 E1 -  -  -  		pop 	hl
   50 00:4172 -  -  -  -  		;
   51 00:4172 -  -  -  -  		; 		Print text at HL.
   52 00:4172 -  -  -  -  		;
   53 00:4172 -  -  -  -  _CPRPrintHL:
   54 00:4172 CD F2 46 -  		call 	PrintStringAtHL 			; print string out
   55 00:4175 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4177 -  -  -  -  		;
   57 00:4177 -  -  -  -  		; 		New line (')
   58 00:4177 -  -  -  -  		;
   59 00:4177 -  -  -  -  _CPRNewLine:
   60 00:4177 CD B4 4C -  		call 	SYSPrintCRLF
   61 00:417A 18 05 -  -  		jr 		_CPRCheckNext
   62 00:417C -  -  -  -  		;
   63 00:417C -  -  -  -  		; 		Tab command (,)
   64 00:417C -  -  -  -  		;
   65 00:417C -  -  -  -  _CPRTab:
   66 00:417C 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:417E CD 98 4C -  		call 	SYSPrintChar
   68 00:4181 -  -  -  -  		;
   69 00:4181 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:4181 -  -  -  -  		;
   71 00:4181 -  -  -  -  _CPRCheckNext:
   72 00:4181 DD 23 -  -  		inc 	ix 							; consume current
   73 00:4183 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:4186 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:4188 C8 -  -  -  		ret 	z
   76 00:4189 FE A7 -  -  		cp 		KWD_COLON
   77 00:418B C8 -  -  -  		ret 	z
   78 00:418C 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:418E -  -  -  -  		;
   80 00:418E -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:418E -  -  -  -  		;
   82 00:418E -  -  -  -  _CPRExitNL:
   83 00:418E CD B4 4C -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:4191 C9 -  -  -  		ret
Listing for file "_build.asm"
   20 00:4192 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4192 -  -  -  -  ; ***************************************************************************************
    2 00:4192 -  -  -  -  ; ***************************************************************************************
    3 00:4192 -  -  -  -  ;
    4 00:4192 -  -  -  -  ;		Name : 		rem.asm
    5 00:4192 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4192 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4192 -  -  -  -  ;		Reviewed :	No
    8 00:4192 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4192 -  -  -  -  ;
   10 00:4192 -  -  -  -  ; ***************************************************************************************
   11 00:4192 -  -  -  -  ; ***************************************************************************************
   12 00:4192 -  -  -  -  
   13 00:4192 -  -  -  -  ; ***************************************************************************************
   14 00:4192 -  -  -  -  ;
   15 00:4192 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4192 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4192 -  -  -  -  ;
   18 00:4192 -  -  -  -  ; ***************************************************************************************
   19 00:4192 -  -  -  -  
   20 00:4192 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4192 -  -  -  -  Command_REM2: 	;; [']
   22 00:4192 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:4195 DD 23 -  -  		inc 	ix
   24 00:4197 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:4199 C8 -  -  -  		ret 	z
   26 00:419A FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:419C C8 -  -  -  		ret 	z
   28 00:419D FE 3F -  -  		cp 		STRING_MARKER
   29 00:419F C2 B1 42 -  		jp 		nz,SyntaxError
   30 00:41A2 -  -  -  -  		;		
   31 00:41A2 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:41A5 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:41A8 13 -  -  -  		inc 	de 
   34 00:41A9 13 -  -  -  		inc 	de
   35 00:41AA DD 19 -  -  		add 	ix,de 						; skip string
   36 00:41AC C9 -  -  -  		ret
   37 00:41AD -  -  -  -  
   38 00:41AD -  -  -  -  ; ***************************************************************************************
   39 00:41AD -  -  -  -  ;
   40 00:41AD -  -  -  -  ;									Changes and Updates
   41 00:41AD -  -  -  -  ;
   42 00:41AD -  -  -  -  ; ***************************************************************************************
   43 00:41AD -  -  -  -  ;
   44 00:41AD -  -  -  -  ;		Date			Notes
   45 00:41AD -  -  -  -  ;		==== 			=====
   46 00:41AD -  -  -  -  ;
   47 00:41AD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:41AD -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:41AD -  -  -  -  ; ***************************************************************************************
    2 00:41AD -  -  -  -  ; ***************************************************************************************
    3 00:41AD -  -  -  -  ;
    4 00:41AD -  -  -  -  ;		Name : 		run.asm
    5 00:41AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41AD -  -  -  -  ;		Reviewed :	No
    8 00:41AD -  -  -  -  ;		Purpose :	Run command
    9 00:41AD -  -  -  -  ;
   10 00:41AD -  -  -  -  ; ***************************************************************************************
   11 00:41AD -  -  -  -  ; ***************************************************************************************
   12 00:41AD -  -  -  -  
   13 00:41AD -  -  -  -  ; ***************************************************************************************
   14 00:41AD -  -  -  -  ;
   15 00:41AD -  -  -  -  ;										RUN command
   16 00:41AD -  -  -  -  ;
   17 00:41AD -  -  -  -  ; ***************************************************************************************
   18 00:41AD -  -  -  -  
   19 00:41AD -  -  -  -  Command_RUN: 	;; [run]
   20 00:41AD CD 98 46 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:41B0 -  -  -  -  
   22 00:41B0 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:41B4 ED 73 55 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:41B8 AF -  -  -  		xor 	a
   25 00:41B9 32 75 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:41BC -  -  -  -  		;
   27 00:41BC -  -  -  -  		; 		New line at IX.
   28 00:41BC -  -  -  -  		;
   29 00:41BC -  -  -  -  CRNewLine:
   30 00:41BC DD 22 51 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:41C0 -  -  -  -  		;
   32 00:41C0 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:41C3 B7 -  -  -  		or 		a
   34 00:41C4 CA E6 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:41C7 -  -  -  -  		;
   36 00:41C7 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:41C9 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:41CB DD 23 -  -  		inc 	ix
   39 00:41CD -  -  -  -  		;
   40 00:41CD -  -  -  -  		; 		New command at IX
   41 00:41CD -  -  -  -  		;
   42 00:41CD -  -  -  -  _CRNewCommand:	
   43 00:41CD DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:41D0 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:41D1 F2 05 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:41D4 -  -  -  -  		;
   47 00:41D4 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:41D6 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:41D8 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:41DA D2 F6 41 -  		jp 		nc,_CRAlternateLets
   51 00:41DD -  -  -  -  		;
   52 00:41DD -  -  -  -  _CRDoCommand:		
   53 00:41DD E6 7F 21 00 
              00 6F 29 11 
              1E 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:41EF DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:41F1 CD 59 40 -  		call 	JumpCode 					; call the routine.
   56 00:41F4 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:41F6 -  -  -  -  		;
   58 00:41F6 -  -  -  -  		; 		Do CALL (HL)
   59 00:41F6 -  -  -  -  		;
   60 00:41F6 -  -  -  -  		;
   61 00:41F6 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:41F6 -  -  -  -  		;		
   63 00:41F6 -  -  -  -  _CRAlternateLets:		
   64 00:41F6 FE 83 -  -  		cp 		KWD_PLING
   65 00:41F8 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:41FA FE 84 -  -  		cp 		KWD_QMARK
   67 00:41FC 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:41FE FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:4200 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:4202 C3 B1 42 -  		jp 		SyntaxError
   71 00:4205 -  -  -  -  		;
   72 00:4205 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:4205 -  -  -  -  		;
   74 00:4205 -  -  -  -  _CRAssignmentHandler:		
   75 00:4205 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:4207 D2 B1 42 -  		jp 		nc,SyntaxError
   77 00:420A -  -  -  -  _CRAssignmentLet:		
   78 00:420A CD FE 40 -  		call	Command_LET 				; do LET.
   79 00:420D C3 CD 41 -  		jp 		_CRNewCommand
   80 00:4210 -  -  -  -  
   81 00:4210 -  -  -  -  ; ***************************************************************************************
   82 00:4210 -  -  -  -  ;
   83 00:4210 -  -  -  -  ;									Changes and Updates
   84 00:4210 -  -  -  -  ;
   85 00:4210 -  -  -  -  ; ***************************************************************************************
   86 00:4210 -  -  -  -  ;
   87 00:4210 -  -  -  -  ;		Date			Notes
   88 00:4210 -  -  -  -  ;		==== 			=====
   89 00:4210 -  -  -  -  ;
   90 00:4210 -  -  -  -  ; ***************************************************************************************
   91 00:4210 -  -  -  -  		
Listing for file "_build.asm"
   22 00:4210 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:4210 -  -  -  -  ; ***************************************************************************************
    2 00:4210 -  -  -  -  ; ***************************************************************************************
    3 00:4210 -  -  -  -  ;
    4 00:4210 -  -  -  -  ;		Name : 		stop.asm
    5 00:4210 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4210 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4210 -  -  -  -  ;		Reviewed :	No
    8 00:4210 -  -  -  -  ;		Purpose :	Stop command
    9 00:4210 -  -  -  -  ;
   10 00:4210 -  -  -  -  ; ***************************************************************************************
   11 00:4210 -  -  -  -  ; ***************************************************************************************
   12 00:4210 -  -  -  -  
   13 00:4210 -  -  -  -  ; ***************************************************************************************
   14 00:4210 -  -  -  -  ;
   15 00:4210 -  -  -  -  ;										STOP command
   16 00:4210 -  -  -  -  ;
   17 00:4210 -  -  -  -  ; ***************************************************************************************
   18 00:4210 -  -  -  -  
   19 00:4210 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:4210 3E 0C C3 54 
              42 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4215 -  -  -  -  
   22 00:4215 -  -  -  -  ; ***************************************************************************************
   23 00:4215 -  -  -  -  ;
   24 00:4215 -  -  -  -  ;									Changes and Updates
   25 00:4215 -  -  -  -  ;
   26 00:4215 -  -  -  -  ; ***************************************************************************************
   27 00:4215 -  -  -  -  ;
   28 00:4215 -  -  -  -  ;		Date			Notes
   29 00:4215 -  -  -  -  ;		==== 			=====
   30 00:4215 -  -  -  -  ;
   31 00:4215 -  -  -  -  ; ***************************************************************************************
   32 00:4215 -  -  -  -  		
Listing for file "_build.asm"
   23 00:4215 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4215 -  -  -  -  ; ***************************************************************************************
    2 00:4215 -  -  -  -  ; ***************************************************************************************
    3 00:4215 -  -  -  -  ;
    4 00:4215 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4215 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4215 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4215 -  -  -  -  ;		Reviewed :	No
    8 00:4215 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4215 -  -  -  -  ;
   10 00:4215 -  -  -  -  ; ***************************************************************************************
   11 00:4215 -  -  -  -  ; ***************************************************************************************
   12 00:4215 -  -  -  -  
   13 00:4215 -  -  -  -  ; ***************************************************************************************
   14 00:4215 -  -  -  -  ;
   15 00:4215 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4215 -  -  -  -  ;
   17 00:4215 -  -  -  -  ; ***************************************************************************************
   18 00:4215 -  -  -  -  
   19 00:4215 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4215             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4215             		inc 	ix
   22 00:4215             		cp 		ch 							; exit if matches
   23 00:4215             		ret 	z
   24 00:4215             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4215             		jp 		ErrorHandler
   26 00:4215             #endmacro
   27 00:4215 -  -  -  -  
   28 00:4215 -  -  -  -  CheckLeftBracket:
   29 00:4215 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 54 
              42 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4222 -  -  -  -  
   31 00:4222 -  -  -  -  CheckRightBracket:
   32 00:4222 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 54 
              42 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:422F -  -  -  -  
   34 00:422F -  -  -  -  CheckDollar:
   35 00:422F DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 54 
              42 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:423C -  -  -  -  		
   37 00:423C -  -  -  -  CheckComma:
   38 00:423C DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 54 
              42 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4249 -  -  -  -  
   40 00:4249 -  -  -  -  ; ***************************************************************************************
   41 00:4249 -  -  -  -  ;
   42 00:4249 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4249 -  -  -  -  ;
   44 00:4249 -  -  -  -  ; ***************************************************************************************
   45 00:4249 -  -  -  -  
   46 00:4249 -  -  -  -  CheckNextA:
   47 00:4249 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:424C DD 23 -  -  		inc 	ix 							; skip character
   49 00:424E C8 -  -  -  		ret 	z 							; yes, okay
   50 00:424F 3E 0D C3 54 
              42 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:4254 -  -  -  -  		
   52 00:4254 -  -  -  -  ; ***************************************************************************************
   53 00:4254 -  -  -  -  ;
   54 00:4254 -  -  -  -  ;									Changes and Updates
   55 00:4254 -  -  -  -  ;
   56 00:4254 -  -  -  -  ; ***************************************************************************************
   57 00:4254 -  -  -  -  ;
   58 00:4254 -  -  -  -  ;		Date			Notes
   59 00:4254 -  -  -  -  ;		==== 			=====
   60 00:4254 -  -  -  -  ;
   61 00:4254 -  -  -  -  ; ***************************************************************************************
   62 00:4254 -  -  -  -  		
Listing for file "_build.asm"
   24 00:4254 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4254 -  -  -  -  ; ***************************************************************************************
    2 00:4254 -  -  -  -  ; ***************************************************************************************
    3 00:4254 -  -  -  -  ;
    4 00:4254 -  -  -  -  ;		Name : 		errors.asm
    5 00:4254 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4254 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4254 -  -  -  -  ;		Reviewed :	No
    8 00:4254 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4254 -  -  -  -  ;
   10 00:4254 -  -  -  -  ; ***************************************************************************************
   11 00:4254 -  -  -  -  ; ***************************************************************************************
   12 00:4254 -  -  -  -  
   13 00:4254 -  -  -  -  ; ***************************************************************************************
   14 00:4254 -  -  -  -  ;
   15 00:4254 -  -  -  -  ;								Error handler, message A 
   16 00:4254 -  -  -  -  ;
   17 00:4254 -  -  -  -  ; ***************************************************************************************
   18 00:4254 -  -  -  -  
   19 00:4254 -  -  -  -  ErrorHandler:
   20 00:4254 F5 -  -  -  		push 	af 						; save error ID
   21 00:4255 -  -  -  -  
   22 00:4255 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4258 6F -  -  -  		ld 		l,a
   24 00:4259 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:425A 29 -  -  -  		add 	hl,hl 		
   26 00:425B 11 F1 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:425E 19 -  -  -  		add 	hl,de
   28 00:425F 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4263 CD F2 46 -  		call 	PrintStringAtHL
   30 00:4266 -  -  -  -  		;
   31 00:4266 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4267 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4268 28 28 -  -  		jr 		z,_EHExit
   34 00:426A -  -  -  -  		;
   35 00:426A DD 2A 51 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:426E DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4271 B7 -  -  -  		or 		a
   38 00:4272 28 1E -  -  		jr 		z,_EHExit
   39 00:4274 -  -  -  -  
   40 00:4274 21 98 42 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4277 CD F2 46 -  		call 	PrintStringAtHL 
   42 00:427A -  -  -  -  		
   43 00:427A D9 -  -  -  		exx								; HL'HL = line number
   44 00:427B 21 00 00 -  		ld 		hl,$0000 		
   45 00:427E D9 -  -  -  		exx 
   46 00:427F DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4282 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4285 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4287 01 93 40 -  		ld 		bc,ConvertBuffer
   50 00:428A CD 4A 4C -  		call 	Int32ToString
   51 00:428D C5 -  -  -  		push 	bc
   52 00:428E E1 -  -  -  		pop 	hl
   53 00:428F CD F2 46 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4292 -  -  -  -  _EHExit:		
   55 00:4292 CD B4 4C -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4295 C3 17 40 -  		jp 		WarmStart
   57 00:4298 -  -  -  -  
   58 00:4298 -  -  -  -  _EHAtText:
   59 00:4298 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:42A2 -  -  -  -  
   61 00:42A2 -  -  -  -  NotImplemented:
   62 00:42A2 3E 04 C3 54 
              42 -  -  -  		ERR_DISABLED
   63 00:42A7 -  -  -  -  TypeMismatch:
   64 00:42A7 3E 02 C3 54 
              42 -  -  -  		ERR_BADTYPE
   65 00:42AC -  -  -  -  BadValue:
   66 00:42AC 3E 03 C3 54 
              42 -  -  -  		ERR_BADVALUE
   67 00:42B1 -  -  -  -  SyntaxError:
   68 00:42B1 3E 0D C3 54 
              42 -  -  -  		ERR_SYNTAX
   69 00:42B6 -  -  -  -  						
   70 00:42B6 -  -  -  -  ; ***************************************************************************************
   71 00:42B6 -  -  -  -  ;
   72 00:42B6 -  -  -  -  ;									Changes and Updates
   73 00:42B6 -  -  -  -  ;
   74 00:42B6 -  -  -  -  ; ***************************************************************************************
   75 00:42B6 -  -  -  -  ;
   76 00:42B6 -  -  -  -  ;		Date			Notes
   77 00:42B6 -  -  -  -  ;		==== 			=====
   78 00:42B6 -  -  -  -  ;
   79 00:42B6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:42B6 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:42B6 -  -  -  -  ; ***************************************************************************************
    2 00:42B6 -  -  -  -  ; ***************************************************************************************
    3 00:42B6 -  -  -  -  ;
    4 00:42B6 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:42B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42B6 -  -  -  -  ;		Reviewed :	No
    8 00:42B6 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:42B6 -  -  -  -  ;
   10 00:42B6 -  -  -  -  ; ***************************************************************************************
   11 00:42B6 -  -  -  -  ; ***************************************************************************************
   12 00:42B6 -  -  -  -  
   13 00:42B6 -  -  -  -  ; ***************************************************************************************
   14 00:42B6 -  -  -  -  ;
   15 00:42B6 -  -  -  -  ; 									Addition
   16 00:42B6 -  -  -  -  ;
   17 00:42B6 -  -  -  -  ; ***************************************************************************************
   18 00:42B6 -  -  -  -  
   19 00:42B6 -  -  -  -  ALUAdd: 		;; [+]
   20 00:42B6 CD A9 43 78 
              B1 C2 A7 42 
              C3 D7 4B -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:42C1 -  -  -  -  
   22 00:42C1 -  -  -  -  ; ***************************************************************************************
   23 00:42C1 -  -  -  -  ;
   24 00:42C1 -  -  -  -  ; 									Subtraction
   25 00:42C1 -  -  -  -  ;
   26 00:42C1 -  -  -  -  ; ***************************************************************************************
   27 00:42C1 -  -  -  -  
   28 00:42C1 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:42C1 CD A9 43 78 
              B1 C2 A7 42 
              C3 DD 4B -  		IntegerDispatch(Int32Subtract)
   30 00:42CC -  -  -  -  
   31 00:42CC -  -  -  -  ; ***************************************************************************************
   32 00:42CC -  -  -  -  ;
   33 00:42CC -  -  -  -  ; 									  Multiply
   34 00:42CC -  -  -  -  ;
   35 00:42CC -  -  -  -  ; ***************************************************************************************
   36 00:42CC -  -  -  -  
   37 00:42CC -  -  -  -  ALUMultiply: 	;; [*]
   38 00:42CC CD A9 43 78 
              B1 C2 A7 42 
              C3 A1 4B -  		IntegerDispatch(Int32Multiply)
   39 00:42D7 -  -  -  -  
   40 00:42D7 -  -  -  -  ; ***************************************************************************************
   41 00:42D7 -  -  -  -  ;
   42 00:42D7 -  -  -  -  ; 									  Divide
   43 00:42D7 -  -  -  -  ;
   44 00:42D7 -  -  -  -  ; ***************************************************************************************
   45 00:42D7 -  -  -  -  
   46 00:42D7 -  -  -  -  ALUDivide: 	;; [/]
   47 00:42D7 -  -  -  -  ALUDivide2:	;; [div]
   48 00:42D7 CD A9 43 78 
              B1 C2 A7 42 
              C3 B2 4A -  		IntegerDispatch(Int32SDivide)
   49 00:42E2 -  -  -  -  
   50 00:42E2 -  -  -  -  ; ***************************************************************************************
   51 00:42E2 -  -  -  -  ;
   52 00:42E2 -  -  -  -  ; 									  Modulus
   53 00:42E2 -  -  -  -  ;
   54 00:42E2 -  -  -  -  ; ***************************************************************************************
   55 00:42E2 -  -  -  -  
   56 00:42E2 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:42E2 CD A9 43 78 
              B1 C2 A7 42 
              C3 B5 4A -  		IntegerDispatch(Int32Modulus)
   58 00:42ED -  -  -  -  
   59 00:42ED -  -  -  -  ; ***************************************************************************************
   60 00:42ED -  -  -  -  ;
   61 00:42ED -  -  -  -  ; 									  Logical
   62 00:42ED -  -  -  -  ;
   63 00:42ED -  -  -  -  ; ***************************************************************************************
   64 00:42ED -  -  -  -  
   65 00:42ED -  -  -  -  ALUAnd: 		;; [and]
   66 00:42ED CD A9 43 78 
              B1 C2 A7 42 
              C3 E5 4B -  		IntegerDispatch(Int32And)
   67 00:42F8 -  -  -  -  
   68 00:42F8 -  -  -  -  ALUOr: 			;; [or]
   69 00:42F8 CD A9 43 78 
              B1 C2 A7 42 
              C3 F1 4B -  		IntegerDispatch(Int32Or)
   70 00:4303 -  -  -  -  
   71 00:4303 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4303 CD A9 43 78 
              B1 C2 A7 42 
              C3 FD 4B -  		IntegerDispatch(Int32Xor)
   73 00:430E -  -  -  -  
   74 00:430E -  -  -  -  ; ***************************************************************************************
   75 00:430E -  -  -  -  ;
   76 00:430E -  -  -  -  ;									Changes and Updates
   77 00:430E -  -  -  -  ;
   78 00:430E -  -  -  -  ; ***************************************************************************************
   79 00:430E -  -  -  -  ;
   80 00:430E -  -  -  -  ;		Date			Notes
   81 00:430E -  -  -  -  ;		==== 			=====
   82 00:430E -  -  -  -  ;
   83 00:430E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:430E -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:430E -  -  -  -  ; ***************************************************************************************
    2 00:430E -  -  -  -  ; ***************************************************************************************
    3 00:430E -  -  -  -  ;
    4 00:430E -  -  -  -  ;		Name : 		binrefs.asm
    5 00:430E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:430E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:430E -  -  -  -  ;		Reviewed :	No
    8 00:430E -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:430E -  -  -  -  ;
   10 00:430E -  -  -  -  ; ***************************************************************************************
   11 00:430E -  -  -  -  ; ***************************************************************************************
   12 00:430E -  -  -  -  
   13 00:430E -  -  -  -  ; ***************************************************************************************
   14 00:430E -  -  -  -  ;
   15 00:430E -  -  -  -  ; 									<l> <op> <r>
   16 00:430E -  -  -  -  ;
   17 00:430E -  -  -  -  ; ***************************************************************************************
   18 00:430E -  -  -  -  
   19 00:430E -  -  -  -  ALULongReference:			;; [!]
   20 00:430E CD 1C 43 -  		call 	BRGetAddress 				; calculate address
   21 00:4311 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4313 CB F9 -  -  		set 	CIsReference,c
   23 00:4315 C9 -  -  -  		ret
   24 00:4316 -  -  -  -  
   25 00:4316 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4316 CD 0E 43 -  		call 	ALULongReference
   27 00:4319 CB F1 -  -  		set 	CIsByteReference,c
   28 00:431B C9 -  -  -  		ret
   29 00:431C -  -  -  -  
   30 00:431C -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:431C CD A9 43 78 
              B1 C2 A7 42 
              C3 27 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4327 -  -  -  -  _BRGAMain:		
   33 00:4327 CD D7 4B -  		call 	Int32Add 					; address in HL'HL
   34 00:432A CD 92 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:432D C9 -  -  -  		ret
   36 00:432E -  -  -  -  
   37 00:432E -  -  -  -  ; ***************************************************************************************
   38 00:432E -  -  -  -  ;
   39 00:432E -  -  -  -  ;									Changes and Updates
   40 00:432E -  -  -  -  ;
   41 00:432E -  -  -  -  ; ***************************************************************************************
   42 00:432E -  -  -  -  ;
   43 00:432E -  -  -  -  ;		Date			Notes
   44 00:432E -  -  -  -  ;		==== 			=====
   45 00:432E -  -  -  -  ;
   46 00:432E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:432E -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:432E -  -  -  -  ; ***************************************************************************************
    2 00:432E -  -  -  -  ; ***************************************************************************************
    3 00:432E -  -  -  -  ;
    4 00:432E -  -  -  -  ;		Name : 		compare.asm
    5 00:432E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:432E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:432E -  -  -  -  ;		Reviewed :	No
    8 00:432E -  -  -  -  ;		Purpose :	Comparison code
    9 00:432E -  -  -  -  ;
   10 00:432E -  -  -  -  ; ***************************************************************************************
   11 00:432E -  -  -  -  ; ***************************************************************************************
   12 00:432E -  -  -  -  
   13 00:432E -  -  -  -  #macro compare_equals(n)
   14 00:432E             		call 	CompareBaseCode
   15 00:432E             		cp 		n
   16 00:432E             		jr 		z,UnaryInt32True
   17 00:432E             		jr 		UnaryInt32False
   18 00:432E             #endmacro
   19 00:432E -  -  -  -  
   20 00:432E -  -  -  -  #macro compare_not_equals(n)
   21 00:432E             		call 	CompareBaseCode
   22 00:432E             		cp 		n
   23 00:432E             		jr 		nz,UnaryInt32True
   24 00:432E             		jr 		UnaryInt32False
   25 00:432E             #endmacro
   26 00:432E -  -  -  -  
   27 00:432E -  -  -  -  ; ***************************************************************************************
   28 00:432E -  -  -  -  ;
   29 00:432E -  -  -  -  ; 								Return True/False
   30 00:432E -  -  -  -  ;
   31 00:432E -  -  -  -  ; ***************************************************************************************
   32 00:432E -  -  -  -  
   33 00:432E -  -  -  -  UnaryInt32True:	;; [true]
   34 00:432E 3E FF -  -  		ld 		a,255
   35 00:4330 18 01 -  -  		jr 		_Int32Logical
   36 00:4332 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:4332 AF -  -  -  		xor 	a
   38 00:4333 -  -  -  -  _Int32Logical:
   39 00:4333 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4334 67 -  -  -  		ld 		h,a
   41 00:4335 D9 -  -  -  		exx
   42 00:4336 6F -  -  -  		ld 		l,a
   43 00:4337 67 -  -  -  		ld 		h,a
   44 00:4338 D9 -  -  -  		exx
   45 00:4339 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:433B C9 -  -  -  		ret
   47 00:433C -  -  -  -  
   48 00:433C -  -  -  -  ; ***************************************************************************************
   49 00:433C -  -  -  -  ;
   50 00:433C -  -  -  -  ; 										> = < (compare == value)
   51 00:433C -  -  -  -  ;
   52 00:433C -  -  -  -  ; ***************************************************************************************
   53 00:433C -  -  -  -  
   54 00:433C -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:433C CD 72 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4345 -  -  -  -  
   57 00:4345 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4345 CD 72 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:434E -  -  -  -  
   60 00:434E -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:434E CD 72 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4357 -  -  -  -  
   63 00:4357 -  -  -  -  ; ***************************************************************************************
   64 00:4357 -  -  -  -  ;
   65 00:4357 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4357 -  -  -  -  ;
   67 00:4357 -  -  -  -  ; ***************************************************************************************
   68 00:4357 -  -  -  -  
   69 00:4357 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4357 CD 72 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4360 -  -  -  -  
   72 00:4360 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4360 CD 72 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4369 -  -  -  -  
   75 00:4369 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4369 CD 72 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4372 -  -  -  -  
   78 00:4372 -  -  -  -  ; ***************************************************************************************
   79 00:4372 -  -  -  -  ;
   80 00:4372 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4372 -  -  -  -  ;
   82 00:4372 -  -  -  -  ; ***************************************************************************************
   83 00:4372 -  -  -  -  
   84 00:4372 -  -  -  -  CompareBaseCode:
   85 00:4372 CD A9 43 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4375 -  -  -  -  
   87 00:4375 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4376 A1 -  -  -  		and 	c
   89 00:4377 CB 47 -  -  		bit 	CIsString,a 
   90 00:4379 C2 88 43 -  		jp 		nz,StringCompare
   91 00:437C -  -  -  -  
   92 00:437C 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:437D B1 -  -  -  		or 		c
   94 00:437E CB 47 -  -  		bit 	CIsString,a 
   95 00:4380 CA 10 4C -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4383 -  -  -  -  
   97 00:4383 3E 02 C3 54 
              42 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4388 -  -  -  -  ;
   99 00:4388 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4388 -  -  -  -  ;
  101 00:4388 -  -  -  -  StringCompare:
  102 00:4388 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4389 BE -  -  -  		cp 		(hl)
  104 00:438A 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:438C 20 08 -  -  		jr 		nz,_SCLess
  106 00:438E 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:438F 23 -  -  -  		inc 	hl
  108 00:4390 FE 20 -  -  		cp 		' '
  109 00:4392 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4394 AF -  -  -  		xor 	a 							; return 0.
  111 00:4395 C9 -  -  -  		ret
  112 00:4396 -  -  -  -  
  113 00:4396 -  -  -  -  _SCLess:
  114 00:4396 3E FF -  -  		ld 		a,$FF
  115 00:4398 C9 -  -  -  		ret
  116 00:4399 -  -  -  -  _SCGreater:
  117 00:4399 3E 01 -  -  		ld 		a,1
  118 00:439B C9 -  -  -  		ret
  119 00:439C -  -  -  -  
  120 00:439C 3E 0E C3 54 
              42 -  -  -  		ERR_TODO()
  121 00:43A1 -  -  -  -  
  122 00:43A1 -  -  -  -  ; ***************************************************************************************
  123 00:43A1 -  -  -  -  ;
  124 00:43A1 -  -  -  -  ;									Changes and Updates
  125 00:43A1 -  -  -  -  ;
  126 00:43A1 -  -  -  -  ; ***************************************************************************************
  127 00:43A1 -  -  -  -  ;
  128 00:43A1 -  -  -  -  ;		Date			Notes
  129 00:43A1 -  -  -  -  ;		==== 			=====
  130 00:43A1 -  -  -  -  ;
  131 00:43A1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43A1 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:43A1 -  -  -  -  ; ***************************************************************************************
    2 00:43A1 -  -  -  -  ; ***************************************************************************************
    3 00:43A1 -  -  -  -  ;
    4 00:43A1 -  -  -  -  ;		Name : 		utility.asm
    5 00:43A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43A1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43A1 -  -  -  -  ;		Reviewed :	No
    8 00:43A1 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:43A1 -  -  -  -  ;
   10 00:43A1 -  -  -  -  ; ***************************************************************************************
   11 00:43A1 -  -  -  -  ; ***************************************************************************************
   12 00:43A1 -  -  -  -  
   13 00:43A1 -  -  -  -  ; ***************************************************************************************
   14 00:43A1 -  -  -  -  ;
   15 00:43A1 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:43A1 -  -  -  -  ;
   17 00:43A1 -  -  -  -  ; ***************************************************************************************
   18 00:43A1 -  -  -  -  
   19 00:43A1 -  -  -  -  SwapHLDE:
   20 00:43A1 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:43A2 D9 -  -  -  			exx
   22 00:43A3 EB -  -  -  			ex 		de,hl
   23 00:43A4 D9 -  -  -  			exx
   24 00:43A5 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:43A6 41 -  -  -  			ld 		b,c
   26 00:43A7 4F -  -  -  			ld 		c,a
   27 00:43A8 C9 -  -  -  			ret
   28 00:43A9 -  -  -  -  
   29 00:43A9 -  -  -  -  ; ***************************************************************************************
   30 00:43A9 -  -  -  -  ;
   31 00:43A9 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:43A9 -  -  -  -  ;
   33 00:43A9 -  -  -  -  ; ***************************************************************************************
   34 00:43A9 -  -  -  -  
   35 00:43A9 -  -  -  -  DereferenceBoth:
   36 00:43A9 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:43AB C4 64 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:43AE CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:43B0 C8 -  -  -  			ret 	z
   40 00:43B1 CD A1 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:43B4 CD 64 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:43B7 CD A1 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:43BA C9 -  -  -  			ret
   44 00:43BB -  -  -  -  
   45 00:43BB -  -  -  -  ; ***************************************************************************************
   46 00:43BB -  -  -  -  ;
   47 00:43BB -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:43BB -  -  -  -  ;
   49 00:43BB -  -  -  -  ; ***************************************************************************************
   50 00:43BB -  -  -  -  
   51 00:43BB -  -  -  -  NegateHLHL:	
   52 00:43BB CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:43BD C2 A7 42 -  			jp 		nz,TypeMismatch
   54 00:43C0 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:43C2 C4 64 44 -  			call 	nz,Dereference 			; if required.
   56 00:43C5 CD 37 4C -  			call 	Int32Negate
   57 00:43C8 C9 -  -  -  			ret
Listing for file "_build.asm"
   29 00:43C9 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:43C9 -  -  -  -  ; ***************************************************************************************
    2 00:43C9 -  -  -  -  ; ***************************************************************************************
    3 00:43C9 -  -  -  -  ;
    4 00:43C9 -  -  -  -  ;		Name : 		expression.asm
    5 00:43C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43C9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43C9 -  -  -  -  ;		Reviewed :	None
    8 00:43C9 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:43C9 -  -  -  -  ;
   10 00:43C9 -  -  -  -  ; ***************************************************************************************
   11 00:43C9 -  -  -  -  ; ***************************************************************************************
   12 00:43C9 -  -  -  -  
   13 00:43C9 -  -  -  -  ; ***************************************************************************************
   14 00:43C9 -  -  -  -  ;
   15 00:43C9 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:43C9 -  -  -  -  ;
   17 00:43C9 -  -  -  -  ; ***************************************************************************************
   18 00:43C9 -  -  -  -  
   19 00:43C9 -  -  -  -  EvaluateAtPrecedence0:
   20 00:43C9 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:43CA -  -  -  -  EvaluateAtPrecedence:
   22 00:43CA F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:43CB -  -  -  -  		;
   24 00:43CB -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:43CB -  -  -  -  		;
   26 00:43CB CD 94 44 -  		call 	EvaluateTerm 				; get term
   27 00:43CE -  -  -  -  		;
   28 00:43CE -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:43CE -  -  -  -  		;
   30 00:43CE D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:43CF -  -  -  -  _EAPLoop:
   32 00:43CF DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:43D2 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:43D4 D8 -  -  -  		ret 	c
   35 00:43D5 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:43D7 D0 -  -  -  		ret 	nc
   37 00:43D8 -  -  -  -  		;
   38 00:43D8 -  -  -  -  		; 		Get the precedence.
   39 00:43D8 -  -  -  -  		;
   40 00:43D8 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:43D9 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:43DB 21 E0 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:43DE B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:43DF 6F -  -  -  		ld 		l,a
   45 00:43E0 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:43E1 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:43E2 -  -  -  -  		;
   48 00:43E2 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:43E2 -  -  -  -  		;
   50 00:43E2 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:43E3 BB -  -  -  		cp 		e
   52 00:43E4 D0 -  -  -  		ret 	nc
   53 00:43E5 -  -  -  -  
   54 00:43E5 -  -  -  -  		;
   55 00:43E5 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:43E5 -  -  -  -  		;
   57 00:43E5 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:43E6 -  -  -  -  		;
   59 00:43E6 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:43E9 F5 -  -  -  		push 	af
   61 00:43EA -  -  -  -  		;
   62 00:43EA C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:43EB D9 -  -  -  		exx 								; save HL'
   64 00:43EC E5 -  -  -  		push 	hl
   65 00:43ED D9 -  -  -  		exx 								
   66 00:43EE E5 -  -  -  		push 	hl 							; save HL
   67 00:43EF -  -  -  -  		;
   68 00:43EF DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:43F1 -  -  -  -  		;
   70 00:43F1 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:43F1 -  -  -  -  		;
   72 00:43F1 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:43F2 CD CA 43 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:43F5 -  -  -  -  		;
   75 00:43F5 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:43F5 -  -  -  -  		;
   77 00:43F5 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:43F6 -  -  -  -  
   79 00:43F6 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:43F7 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:43F8 D9 -  -  -  		exx
   82 00:43F9 EB -  -  -  		ex 		de,hl
   83 00:43FA E1 -  -  -  		pop 	hl
   84 00:43FB D9 -  -  -  		exx
   85 00:43FC C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:43FD 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:43FE -  -  -  -  		;
   88 00:43FE -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:43FE -  -  -  -  		; 		is in B (type) DE'DE
   90 00:43FE -  -  -  -  		;
   91 00:43FE F1 -  -  -  		pop 	af 							; get operator in A
   92 00:43FF -  -  -  -  		;
   93 00:43FF -  -  -  -  		; 		Call the binary operator in A.
   94 00:43FF -  -  -  -  		;
   95 00:43FF D5 -  -  -  		push 	de
   96 00:4400 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4401 E6 7F 21 00 
              00 6F 29 11 
              1E 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4413 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4414 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4415 CD 59 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4418 -  -  -  -  		;
  102 00:4418 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:4419 -  -  -  -  		;
  104 00:4419 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:441B -  -  -  -  
  106 00:441B -  -  -  -  ; ***************************************************************************************
  107 00:441B -  -  -  -  ;
  108 00:441B -  -  -  -  ;									Changes and Updates
  109 00:441B -  -  -  -  ;
  110 00:441B -  -  -  -  ; ***************************************************************************************
  111 00:441B -  -  -  -  ;
  112 00:441B -  -  -  -  ;		Date			Notes
  113 00:441B -  -  -  -  ;		==== 			=====
  114 00:441B -  -  -  -  ;
  115 00:441B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:441B -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:441B -  -  -  -  ; ***************************************************************************************
    2 00:441B -  -  -  -  ; ***************************************************************************************
    3 00:441B -  -  -  -  ;
    4 00:441B -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:441B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:441B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:441B -  -  -  -  ;		Reviewed :	No
    8 00:441B -  -  -  -  ;		Purpose :	Expression support functions
    9 00:441B -  -  -  -  ;
   10 00:441B -  -  -  -  ; ***************************************************************************************
   11 00:441B -  -  -  -  ; ***************************************************************************************
   12 00:441B -  -  -  -  
   13 00:441B -  -  -  -  ; ***************************************************************************************
   14 00:441B -  -  -  -  ;
   15 00:441B -  -  -  -  ; 								Evaluate an integer term
   16 00:441B -  -  -  -  ;
   17 00:441B -  -  -  -  ; ***************************************************************************************
   18 00:441B -  -  -  -  
   19 00:441B -  -  -  -  EvaluateIntegerTerm:
   20 00:441B CD 94 44 -  		call 	EvaluateTerm
   21 00:441E CD 64 44 -  		call 	DeReference
   22 00:4421 CB 41 -  -  		bit 	CIsString,c
   23 00:4423 C8 -  -  -  		ret 	z
   24 00:4424 C3 A7 42 -  		jp 		TypeMismatch
   25 00:4427 -  -  -  -  
   26 00:4427 -  -  -  -  ; ***************************************************************************************
   27 00:4427 -  -  -  -  ;
   28 00:4427 -  -  -  -  ; 								Evaluate a string term
   29 00:4427 -  -  -  -  ;
   30 00:4427 -  -  -  -  ; ***************************************************************************************
   31 00:4427 -  -  -  -  
   32 00:4427 -  -  -  -  EvaluateStringTerm:
   33 00:4427 CD 94 44 -  		call 	EvaluateTerm
   34 00:442A CD 64 44 -  		call 	DeReference
   35 00:442D CB 41 -  -  		bit 	CIsString,c
   36 00:442F C0 -  -  -  		ret 	nz
   37 00:4430 C3 A7 42 -  		jp 		TypeMismatch
   38 00:4433 -  -  -  -  
   39 00:4433 -  -  -  -  ; ***************************************************************************************
   40 00:4433 -  -  -  -  ;
   41 00:4433 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4433 -  -  -  -  ;
   43 00:4433 -  -  -  -  ; ***************************************************************************************
   44 00:4433 -  -  -  -  
   45 00:4433 -  -  -  -  EvaluateValue:
   46 00:4433 CD C9 43 -  		call 	EvaluateAtPrecedence0
   47 00:4436 C3 64 44 -  		jp 		Dereference
   48 00:4439 -  -  -  -  
   49 00:4439 -  -  -  -  ; ***************************************************************************************
   50 00:4439 -  -  -  -  ;
   51 00:4439 -  -  -  -  ; 									Evaluate a number
   52 00:4439 -  -  -  -  ;
   53 00:4439 -  -  -  -  ; ***************************************************************************************
   54 00:4439 -  -  -  -  
   55 00:4439 -  -  -  -  EvaluateInteger:
   56 00:4439 CD 33 44 -  		call 	EvaluateValue
   57 00:443C CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:443E C8 -  -  -  		ret 	z
   59 00:443F C3 A7 42 -  		jp 		TypeMismatch
   60 00:4442 -  -  -  -  
   61 00:4442 -  -  -  -  ; ***************************************************************************************
   62 00:4442 -  -  -  -  ;
   63 00:4442 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4442 -  -  -  -  ;
   65 00:4442 -  -  -  -  ; ***************************************************************************************
   66 00:4442 -  -  -  -  
   67 00:4442 -  -  -  -  Evaluate8BitInteger:
   68 00:4442 CD 39 44 -  		call 	EvaluateInteger
   69 00:4445 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4446 7C -  -  -  		ld 		a,h
   71 00:4447 B5 -  -  -  		or 		l
   72 00:4448 D9 -  -  -  		exx 	
   73 00:4449 B4 -  -  -  		or 		h
   74 00:444A C2 AC 42 -  		jp 		nz,BadValue
   75 00:444D 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:444E C9 -  -  -  		ret
   77 00:444F -  -  -  -  		
   78 00:444F -  -  -  -  ; ***************************************************************************************
   79 00:444F -  -  -  -  ;
   80 00:444F -  -  -  -  ; 									Evaluate a string
   81 00:444F -  -  -  -  ;
   82 00:444F -  -  -  -  ; ***************************************************************************************
   83 00:444F -  -  -  -  
   84 00:444F -  -  -  -  EvaluateStringOnly:
   85 00:444F CD 33 44 -  		call 	EvaluateValue
   86 00:4452 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:4454 CA A7 42 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4457 C9 -  -  -  		ret
   89 00:4458 -  -  -  -  
   90 00:4458 -  -  -  -  ; ***************************************************************************************
   91 00:4458 -  -  -  -  ;
   92 00:4458 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4458 -  -  -  -  ;
   94 00:4458 -  -  -  -  ; ***************************************************************************************
   95 00:4458 -  -  -  -  
   96 00:4458 -  -  -  -  Return8BitConstant:
   97 00:4458 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:445B 6F -  -  -  		ld 		l,a
   99 00:445C -  -  -  -  Return16BitConstant:
  100 00:445C D9 -  -  -  		exx 								; clear HL'
  101 00:445D 21 00 00 -  		ld 		hl,0
  102 00:4460 D9 -  -  -  		exx
  103 00:4461 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4463 C9 -  -  -  		ret
  105 00:4464 -  -  -  -  
  106 00:4464 -  -  -  -  ; ***************************************************************************************
  107 00:4464 -  -  -  -  ;
  108 00:4464 -  -  -  -  ;									Changes and Updates
  109 00:4464 -  -  -  -  ;
  110 00:4464 -  -  -  -  ; ***************************************************************************************
  111 00:4464 -  -  -  -  ;
  112 00:4464 -  -  -  -  ;		Date			Notes
  113 00:4464 -  -  -  -  ;		==== 			=====
  114 00:4464 -  -  -  -  ;
  115 00:4464 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4464 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4464 -  -  -  -  ; ***************************************************************************************
    2 00:4464 -  -  -  -  ; ***************************************************************************************
    3 00:4464 -  -  -  -  ;
    4 00:4464 -  -  -  -  ;		Name : 		reference.asm
    5 00:4464 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4464 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4464 -  -  -  -  ;		Reviewed :	No
    8 00:4464 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4464 -  -  -  -  ;
   10 00:4464 -  -  -  -  ; ***************************************************************************************
   11 00:4464 -  -  -  -  ; ***************************************************************************************
   12 00:4464 -  -  -  -  
   13 00:4464 -  -  -  -  ; ***************************************************************************************
   14 00:4464 -  -  -  -  ;
   15 00:4464 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4464 -  -  -  -  ;
   17 00:4464 -  -  -  -  ; ***************************************************************************************
   18 00:4464 -  -  -  -  
   19 00:4464 -  -  -  -  Dereference:
   20 00:4464 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4466 C8 -  -  -  		ret 	z
   22 00:4467 -  -  -  -  
   23 00:4467 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4469 -  -  -  -  		
   25 00:4469 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:446B 20 20 -  -  		jr 		nz,_DRInternal
   27 00:446D -  -  -  -  
   28 00:446D CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:446F 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4471 -  -  -  -  
   31 00:4471 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4472 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4476 D9 -  -  -  		exx
   34 00:4477 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4478 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4479 23 -  -  -  		inc  	hl
   37 00:447A 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:447E D9 -  -  -  		exx 								; fix back
   39 00:447F C9 -  -  -  		ret
   40 00:4480 -  -  -  -  
   41 00:4480 -  -  -  -  _DeRefByte:		
   42 00:4480 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4481 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4484 6F -  -  -  		ld	 	l,a
   45 00:4485 D9 -  -  -  		exx
   46 00:4486 21 00 00 -  		ld 		hl,$0000
   47 00:4489 D9 -  -  -  		exx
   48 00:448A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:448C C9 -  -  -  		ret
   50 00:448D -  -  -  -  
   51 00:448D -  -  -  -  _DRInternal:
   52 00:448D 3E 04 C3 54 
              42 -  -  -  		ERR_DISABLED
   53 00:4492 -  -  -  -  
   54 00:4492 -  -  -  -  ; ***************************************************************************************
   55 00:4492 -  -  -  -  ;
   56 00:4492 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4492 -  -  -  -  ;
   58 00:4492 -  -  -  -  ; ***************************************************************************************
   59 00:4492 -  -  -  -  
   60 00:4492 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4492 -  -  -  -  		#ifdef EZ80
   62 00:4492             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4492             		exx
   64 00:4492             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4492             		ld 		hl,$0000 					; zero HL'
   66 00:4492             		exx
   67 00:4492             		ld 		hl,(AConvert) 				; load UHL
   68 00:4492             		#endif
   69 00:4492 C9 -  -  -  		ret
   70 00:4493 -  -  -  -  
   71 00:4493 -  -  -  -  ; ***************************************************************************************
   72 00:4493 -  -  -  -  ;
   73 00:4493 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4493 -  -  -  -  ;
   75 00:4493 -  -  -  -  ; ***************************************************************************************
   76 00:4493 -  -  -  -  
   77 00:4493 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4493 -  -  -  -  		#ifdef EZ80
   79 00:4493             		ld 		(AConvert),hl
   80 00:4493             		ld 		hl,$0000
   81 00:4493             		ld 		(AConvert+3),hl
   82 00:4493             		exx
   83 00:4493             		ld 		hl,(AConvert+2)
   84 00:4493             		exx
   85 00:4493             		xor 	a
   86 00:4493             		ld 		(AConvert+2),a
   87 00:4493             		ld 		hl,(AConvert)
   88 00:4493             		#endif
   89 00:4493 C9 -  -  -  		ret
   90 00:4494 -  -  -  -  
   91 00:4494 -  -  -  -  ; ***************************************************************************************
   92 00:4494 -  -  -  -  ;
   93 00:4494 -  -  -  -  ;									Changes and Updates
   94 00:4494 -  -  -  -  ;
   95 00:4494 -  -  -  -  ; ***************************************************************************************
   96 00:4494 -  -  -  -  ;
   97 00:4494 -  -  -  -  ;		Date			Notes
   98 00:4494 -  -  -  -  ;		==== 			=====
   99 00:4494 -  -  -  -  ;
  100 00:4494 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:4494 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4494 -  -  -  -  ; ***************************************************************************************
    2 00:4494 -  -  -  -  ; ***************************************************************************************
    3 00:4494 -  -  -  -  ;
    4 00:4494 -  -  -  -  ;		Name : 		term.asm
    5 00:4494 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4494 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4494 -  -  -  -  ;		Reviewed :	No
    8 00:4494 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4494 -  -  -  -  ;
   10 00:4494 -  -  -  -  ; ***************************************************************************************
   11 00:4494 -  -  -  -  ; ***************************************************************************************
   12 00:4494 -  -  -  -  
   13 00:4494 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4494             		add_hlhl_16
   15 00:4494             		exx
   16 00:4494             		adc_hlhl_16
   17 00:4494             		exx
   18 00:4494             #endmacro
   19 00:4494 -  -  -  -  
   20 00:4494 -  -  -  -  ; ***************************************************************************************
   21 00:4494 -  -  -  -  ;
   22 00:4494 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4494 -  -  -  -  ;
   24 00:4494 -  -  -  -  ; ***************************************************************************************
   25 00:4494 -  -  -  -  ;
   26 00:4494 -  -  -  -  ; 		Terms can be:
   27 00:4494 -  -  -  -  ;
   28 00:4494 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4494 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4494 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4494 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4494 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4494 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4494 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4494 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4494 -  -  -  -  ; 														reference of some sort.
   37 00:4494 -  -  -  -  ;
   38 00:4494 -  -  -  -  ; ***************************************************************************************
   39 00:4494 -  -  -  -  
   40 00:4494 -  -  -  -  EvaluateTerm:		
   41 00:4494 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4496 D9 -  -  -  		exx
   43 00:4497 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:449A D9 -  -  -  		exx
   45 00:449B 21 00 00 -  		ld 		hl,$0000		
   46 00:449E -  -  -  -  		;
   47 00:449E DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:44A1 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:44A3 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:44A5 DA 43 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:44A8 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:44AA C2 F2 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:44AD -  -  -  -  		;
   54 00:44AD -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:44AD -  -  -  -  		;
   56 00:44AD -  -  -  -  _ETIntegerConstant:
   57 00:44AD -  -  -  -  		;
   58 00:44AD -  -  -  -  _ETIntegerLoop:		
   59 00:44AD DD 7E 00 -  		ld 		a,(ix+0)
   60 00:44B0 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:44B2 B5 -  -  -  		or 		l 							; or into L
   62 00:44B3 6F -  -  -  		ld 		l,a
   63 00:44B4 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:44B6 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:44B9 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:44BB FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:44BD D8 -  -  -  		ret 	c
   68 00:44BE -  -  -  -  
   69 00:44BE 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:44C3 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:44C8 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:44CD 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:44D2 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:44D7 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:44DC -  -  -  -  
   76 00:44DC 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:44DE -  -  -  -  		;
   78 00:44DE -  -  -  -  		; 		Found the $3F string marker.
   79 00:44DE -  -  -  -  		;
   80 00:44DE -  -  -  -  _ETStringMarker:		
   81 00:44DE DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:44E0 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:44E2 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:44E4 E1 -  -  -  		pop 	hl
   85 00:44E5 11 00 00 -  		ld 		de,$0000
   86 00:44E8 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:44EB DD 19 -  -  		add 	ix,de
   88 00:44ED DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:44EF 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:44F1 C9 -  -  -  		ret
   91 00:44F2 -  -  -  -  		;
   92 00:44F2 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:44F2 -  -  -  -  		;
   94 00:44F2 -  -  -  -  _ETFoundKeyword:
   95 00:44F2 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:44F4 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:44F6 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:44F8 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:44FA 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:44FC -  -  -  -  		;
  101 00:44FC -  -  -  -  		;		Unary group 0
  102 00:44FC -  -  -  -  		;
  103 00:44FC E6 7F 21 00 
              00 6F 29 11 
              1E 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:450E C3 59 40 -  		jp 		JumpCode 					; and go there.
  105 00:4511 -  -  -  -  
  106 00:4511 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4511 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4513 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4515 -  -  -  -  		;
  110 00:4515 -  -  -  -  		; 		- term
  111 00:4515 -  -  -  -  		;
  112 00:4515 CD 1B 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4518 CD BB 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:451B C9 -  -  -  		ret
  115 00:451C -  -  -  -  		;
  116 00:451C -  -  -  -  		;		! ? indirection check
  117 00:451C -  -  -  -  		;
  118 00:451C -  -  -  -  _ETCheckIndirection:	
  119 00:451C FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:451E 28 05 -  -  		jr 		z,_ETIndirection
  121 00:4520 FE 83 -  -  		cp 		KWD_PLING
  122 00:4522 C2 B1 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4525 -  -  -  -  		;
  124 00:4525 -  -  -  -  		; 		! ? indirection
  125 00:4525 -  -  -  -  		;
  126 00:4525 -  -  -  -  _ETIndirection:
  127 00:4525 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4526 CD 94 44 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:4529 CD 64 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:452C CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:452E 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:4530 CD 92 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4533 F1 -  -  -  		pop 	af 							; get type back
  134 00:4534 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4536 CB F9 -  -  		set 	CIsReference,c
  136 00:4538 FE 83 -  -  		cp 		KWD_PLING
  137 00:453A C8 -  -  -  		ret 	z
  138 00:453B CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:453D C9 -  -  -  		ret
  140 00:453E -  -  -  -  _ETStringIndirect:
  141 00:453E 3E 02 C3 54 
              42 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4543 -  -  -  -  		;
  143 00:4543 -  -  -  -  		; 		Found an identifier.
  144 00:4543 -  -  -  -  		;
  145 00:4543 -  -  -  -  _ETVariable:
  146 00:4543 CD 3B 47 -  		call 	FindVariable 				; find the variable.
  147 00:4546 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4547 3E 0F C3 54 
              42 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:454C -  -  -  -  		
  150 00:454C -  -  -  -  ; ***************************************************************************************
  151 00:454C -  -  -  -  ;
  152 00:454C -  -  -  -  ;									Changes and Updates
  153 00:454C -  -  -  -  ;
  154 00:454C -  -  -  -  ; ***************************************************************************************
  155 00:454C -  -  -  -  ;
  156 00:454C -  -  -  -  ;		Date			Notes
  157 00:454C -  -  -  -  ;		==== 			=====
  158 00:454C -  -  -  -  ;
  159 00:454C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:454C -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:454C -  -  -  -  ; ***************************************************************************************
    2 00:454C -  -  -  -  ; ***************************************************************************************
    3 00:454C -  -  -  -  ;
    4 00:454C -  -  -  -  ;		Name : 		abs.asm
    5 00:454C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454C -  -  -  -  ;		Reviewed :	No
    8 00:454C -  -  -  -  ;		Purpose :	Absolute value 
    9 00:454C -  -  -  -  ;
   10 00:454C -  -  -  -  ; ***************************************************************************************
   11 00:454C -  -  -  -  ; ***************************************************************************************
   12 00:454C -  -  -  -  
   13 00:454C -  -  -  -  ; ***************************************************************************************
   14 00:454C -  -  -  -  ;
   15 00:454C -  -  -  -  ;								abs( unary function
   16 00:454C -  -  -  -  ;
   17 00:454C -  -  -  -  ; ***************************************************************************************
   18 00:454C -  -  -  -  
   19 00:454C -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:454C CD 1B 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:454F D9 -  -  -  		exx 								; test MSB
   22 00:4550 CB 7C -  -  		bit 	7,h
   23 00:4552 D9 -  -  -  		exx
   24 00:4553 C4 BB 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4556 C9 -  -  -  		ret
   26 00:4557 -  -  -  -  
   27 00:4557 -  -  -  -  ; ***************************************************************************************
   28 00:4557 -  -  -  -  ;
   29 00:4557 -  -  -  -  ;									Changes and Updates
   30 00:4557 -  -  -  -  ;
   31 00:4557 -  -  -  -  ; ***************************************************************************************
   32 00:4557 -  -  -  -  ;
   33 00:4557 -  -  -  -  ;		Date			Notes
   34 00:4557 -  -  -  -  ;		==== 			=====
   35 00:4557 -  -  -  -  ;
   36 00:4557 -  -  -  -  ; ***************************************************************************************
   37 00:4557 -  -  -  -  		
Listing for file "_build.asm"
   34 00:4557 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4557 -  -  -  -  ; ***************************************************************************************
    2 00:4557 -  -  -  -  ; ***************************************************************************************
    3 00:4557 -  -  -  -  ;
    4 00:4557 -  -  -  -  ;		Name : 		asc.asm
    5 00:4557 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4557 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4557 -  -  -  -  ;		Reviewed :	No
    8 00:4557 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4557 -  -  -  -  ;
   10 00:4557 -  -  -  -  ; ***************************************************************************************
   11 00:4557 -  -  -  -  ; ***************************************************************************************
   12 00:4557 -  -  -  -  
   13 00:4557 -  -  -  -  ; ***************************************************************************************
   14 00:4557 -  -  -  -  ;
   15 00:4557 -  -  -  -  ;								Asc unary function
   16 00:4557 -  -  -  -  ;
   17 00:4557 -  -  -  -  ; ***************************************************************************************
   18 00:4557 -  -  -  -  
   19 00:4557 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4557 CD 27 44 -  		call	EvaluateStringTerm			; Get string
   21 00:455A 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:455B C3 58 44 -  		jp 		Return8BitConstant
   23 00:455E -  -  -  -  
   24 00:455E -  -  -  -  ; ***************************************************************************************
   25 00:455E -  -  -  -  ;
   26 00:455E -  -  -  -  ;									Changes and Updates
   27 00:455E -  -  -  -  ;
   28 00:455E -  -  -  -  ; ***************************************************************************************
   29 00:455E -  -  -  -  ;
   30 00:455E -  -  -  -  ;		Date			Notes
   31 00:455E -  -  -  -  ;		==== 			=====
   32 00:455E -  -  -  -  ;
   33 00:455E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:455E -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:455E -  -  -  -  ; ***************************************************************************************
    2 00:455E -  -  -  -  ; ***************************************************************************************
    3 00:455E -  -  -  -  ;
    4 00:455E -  -  -  -  ;		Name : 		chr.asm
    5 00:455E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:455E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:455E -  -  -  -  ;		Reviewed :	No
    8 00:455E -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:455E -  -  -  -  ;
   10 00:455E -  -  -  -  ; ***************************************************************************************
   11 00:455E -  -  -  -  ; ***************************************************************************************
   12 00:455E -  -  -  -  
   13 00:455E -  -  -  -  ; ***************************************************************************************
   14 00:455E -  -  -  -  ;
   15 00:455E -  -  -  -  ;								Chr$() unary function
   16 00:455E -  -  -  -  ;
   17 00:455E -  -  -  -  ; ***************************************************************************************
   18 00:455E -  -  -  -  
   19 00:455E -  -  -  -  Unary_Chr:	;; [chr]
   20 00:455E CD 2F 42 -  		call 	CheckDollar
   21 00:4561 CD 1B 44 -  		call 	EvaluateIntegerTerm
   22 00:4564 7D -  -  -  		ld 		a,l 						; get character
   23 00:4565 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4567 21 92 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:456A 36 0D -  -  		ld 		(hl),13
   26 00:456C 2B -  -  -  		dec 	hl
   27 00:456D 77 -  -  -  		ld 		(hl),a
   28 00:456E C9 -  -  -  		ret
   29 00:456F -  -  -  -  
   30 00:456F -  -  -  -  ; ***************************************************************************************
   31 00:456F -  -  -  -  ;
   32 00:456F -  -  -  -  ;									Changes and Updates
   33 00:456F -  -  -  -  ;
   34 00:456F -  -  -  -  ; ***************************************************************************************
   35 00:456F -  -  -  -  ;
   36 00:456F -  -  -  -  ;		Date			Notes
   37 00:456F -  -  -  -  ;		==== 			=====
   38 00:456F -  -  -  -  ;
   39 00:456F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:456F -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:456F -  -  -  -  ; ***************************************************************************************
    2 00:456F -  -  -  -  ; ***************************************************************************************
    3 00:456F -  -  -  -  ;
    4 00:456F -  -  -  -  ;		Name : 		len.asm
    5 00:456F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:456F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:456F -  -  -  -  ;		Reviewed :	None
    8 00:456F -  -  -  -  ;		Purpose :	String Length
    9 00:456F -  -  -  -  ;
   10 00:456F -  -  -  -  ; ***************************************************************************************
   11 00:456F -  -  -  -  ; ***************************************************************************************
   12 00:456F -  -  -  -  
   13 00:456F -  -  -  -  ; ***************************************************************************************
   14 00:456F -  -  -  -  ;
   15 00:456F -  -  -  -  ;								Len unary function
   16 00:456F -  -  -  -  ;
   17 00:456F -  -  -  -  ; ***************************************************************************************
   18 00:456F -  -  -  -  
   19 00:456F -  -  -  -  Unary_Len:	;; [len]
   20 00:456F CD 27 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4572 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4573 CD 32 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4576 -  -  -  -  _ULCount:
   24 00:4576 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4577 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4579 D8 -  -  -  		ret 	c
   27 00:457A 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:457B 13 -  -  -  		inc 	de
   29 00:457C 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:457E -  -  -  -  
   31 00:457E -  -  -  -  ; ***************************************************************************************
   32 00:457E -  -  -  -  ;
   33 00:457E -  -  -  -  ;									Changes and Updates
   34 00:457E -  -  -  -  ;
   35 00:457E -  -  -  -  ; ***************************************************************************************
   36 00:457E -  -  -  -  ;
   37 00:457E -  -  -  -  ;		Date			Notes
   38 00:457E -  -  -  -  ;		==== 			=====
   39 00:457E -  -  -  -  ;
   40 00:457E -  -  -  -  ; ***************************************************************************************
   41 00:457E -  -  -  -  		
Listing for file "_build.asm"
   37 00:457E -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:457E -  -  -  -  ; ***************************************************************************************
    2 00:457E -  -  -  -  ; ***************************************************************************************
    3 00:457E -  -  -  -  ;
    4 00:457E -  -  -  -  ;		Name : 		makestring.asm
    5 00:457E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:457E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:457E -  -  -  -  ;		Reviewed :	No
    8 00:457E -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:457E -  -  -  -  ;
   10 00:457E -  -  -  -  ; ***************************************************************************************
   11 00:457E -  -  -  -  ; ***************************************************************************************
   12 00:457E -  -  -  -  
   13 00:457E -  -  -  -  ; ***************************************************************************************
   14 00:457E -  -  -  -  ;
   15 00:457E -  -  -  -  ;								Str$() unary function
   16 00:457E -  -  -  -  ;
   17 00:457E -  -  -  -  ; ***************************************************************************************
   18 00:457E -  -  -  -  
   19 00:457E -  -  -  -  Unary_MkStr:	;; [$]
   20 00:457E CD 1B 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4581 CD 92 44 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4584 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4586 C9 -  -  -  		ret
   24 00:4587 -  -  -  -  
   25 00:4587 -  -  -  -  ; ***************************************************************************************
   26 00:4587 -  -  -  -  ;
   27 00:4587 -  -  -  -  ;									Changes and Updates
   28 00:4587 -  -  -  -  ;
   29 00:4587 -  -  -  -  ; ***************************************************************************************
   30 00:4587 -  -  -  -  ;
   31 00:4587 -  -  -  -  ;		Date			Notes
   32 00:4587 -  -  -  -  ;		==== 			=====
   33 00:4587 -  -  -  -  ;
   34 00:4587 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:4587 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4587 -  -  -  -  ; ***************************************************************************************
    2 00:4587 -  -  -  -  ; ***************************************************************************************
    3 00:4587 -  -  -  -  ;
    4 00:4587 -  -  -  -  ;		Name : 		not.asm
    5 00:4587 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4587 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4587 -  -  -  -  ;		Reviewed :	No
    8 00:4587 -  -  -  -  ;		Purpose :	Logical not
    9 00:4587 -  -  -  -  ;
   10 00:4587 -  -  -  -  ; ***************************************************************************************
   11 00:4587 -  -  -  -  ; ***************************************************************************************
   12 00:4587 -  -  -  -  
   13 00:4587 -  -  -  -  ; ***************************************************************************************
   14 00:4587 -  -  -  -  ;
   15 00:4587 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4587 -  -  -  -  ;
   17 00:4587 -  -  -  -  ; ***************************************************************************************
   18 00:4587 -  -  -  -  
   19 00:4587 -  -  -  -  Unary_Not:		;; [not]
   20 00:4587 CD 1B 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:458A CD 91 45 -  		call 	__UNSwap 					; not and swap twice.
   22 00:458D CD 91 45 -  		call 	__UNSwap		
   23 00:4590 C9 -  -  -  		ret
   24 00:4591 -  -  -  -  
   25 00:4591 -  -  -  -  __UNSwap:
   26 00:4591 7C -  -  -  		ld 		a,h
   27 00:4592 2F -  -  -  		cpl
   28 00:4593 67 -  -  -  		ld 		h,a
   29 00:4594 7D -  -  -  		ld 		a,l
   30 00:4595 2F -  -  -  		cpl 	
   31 00:4596 6F -  -  -  		ld 		l,a
   32 00:4597 D9 -  -  -  		exx
   33 00:4598 C9 -  -  -  		ret
   34 00:4599 -  -  -  -  
   35 00:4599 -  -  -  -  ; ***************************************************************************************
   36 00:4599 -  -  -  -  ;
   37 00:4599 -  -  -  -  ;									Changes and Updates
   38 00:4599 -  -  -  -  ;
   39 00:4599 -  -  -  -  ; ***************************************************************************************
   40 00:4599 -  -  -  -  ;
   41 00:4599 -  -  -  -  ;		Date			Notes
   42 00:4599 -  -  -  -  ;		==== 			=====
   43 00:4599 -  -  -  -  ;
   44 00:4599 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4599 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4599 -  -  -  -  ; ***************************************************************************************
    2 00:4599 -  -  -  -  ; ***************************************************************************************
    3 00:4599 -  -  -  -  ;
    4 00:4599 -  -  -  -  ;		Name : 		page.asm
    5 00:4599 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4599 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4599 -  -  -  -  ;		Reviewed :	No
    8 00:4599 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4599 -  -  -  -  ;
   10 00:4599 -  -  -  -  ; ***************************************************************************************
   11 00:4599 -  -  -  -  ; ***************************************************************************************
   12 00:4599 -  -  -  -  
   13 00:4599 -  -  -  -  ; ***************************************************************************************
   14 00:4599 -  -  -  -  ;
   15 00:4599 -  -  -  -  ;							page unary function (no bracket)
   16 00:4599 -  -  -  -  ;
   17 00:4599 -  -  -  -  ; ***************************************************************************************
   18 00:4599 -  -  -  -  
   19 00:4599 -  -  -  -  Unary_Page:	;; [page]
   20 00:4599 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:459C D9 -  -  -  			exx
   22 00:459D 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:45A0 D9 -  -  -  			exx
   24 00:45A1 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:45A3 C9 -  -  -  			ret
   26 00:45A4 -  -  -  -  
   27 00:45A4 -  -  -  -  ; ***************************************************************************************
   28 00:45A4 -  -  -  -  ;
   29 00:45A4 -  -  -  -  ;									Changes and Updates
   30 00:45A4 -  -  -  -  ;
   31 00:45A4 -  -  -  -  ; ***************************************************************************************
   32 00:45A4 -  -  -  -  ;
   33 00:45A4 -  -  -  -  ;		Date			Notes
   34 00:45A4 -  -  -  -  ;		==== 			=====
   35 00:45A4 -  -  -  -  ;
   36 00:45A4 -  -  -  -  ; ***************************************************************************************
   37 00:45A4 -  -  -  -  			
Listing for file "_build.asm"
   40 00:45A4 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:45A4 -  -  -  -  ; ***************************************************************************************
    2 00:45A4 -  -  -  -  ; ***************************************************************************************
    3 00:45A4 -  -  -  -  ;
    4 00:45A4 -  -  -  -  ;		Name : 		random.asm
    5 00:45A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45A4 -  -  -  -  ;		Reviewed :	No
    8 00:45A4 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:45A4 -  -  -  -  ;
   10 00:45A4 -  -  -  -  ; ***************************************************************************************
   11 00:45A4 -  -  -  -  ; ***************************************************************************************
   12 00:45A4 -  -  -  -  
   13 00:45A4 -  -  -  -  ; ***************************************************************************************
   14 00:45A4 -  -  -  -  ;
   15 00:45A4 -  -  -  -  ;								Random unary function
   16 00:45A4 -  -  -  -  ;
   17 00:45A4 -  -  -  -  ; ***************************************************************************************
   18 00:45A4 -  -  -  -  
   19 00:45A4 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:45A4 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:45A5 CD 1B 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:45A8 D9 -  -  -  		exx 								; is it -ve
   23 00:45A9 CB 7C -  -  		bit 	7,h
   24 00:45AB D9 -  -  -  		exx
   25 00:45AC 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:45AE 22 65 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:45B1 D9 -  -  -  		exx
   28 00:45B2 22 69 40 -  		ld 		(RandomSeed+4),hl
   29 00:45B5 D9 -  -  -  		exx
   30 00:45B6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:45B8 C9 -  -  -  		ret
   32 00:45B9 -  -  -  -  _URDontSeed:		
   33 00:45B9 -  -  -  -  
   34 00:45B9 CD 09 4C -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:45BC 28 19 -  -  		jr 		z,_URFail
   36 00:45BE E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:45BF D9 -  -  -  		exx
   38 00:45C0 E5 -  -  -  		push 	hl
   39 00:45C1 D9 -  -  -  		exx
   40 00:45C2 -  -  -  -  		;
   41 00:45C2 CD E6 45 -  		call 	URandomHL 					; get random HL'HL
   42 00:45C5 D9 -  -  -  		exx
   43 00:45C6 CD E6 45 -  		call 	URandomHL
   44 00:45C9 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:45CB D9 -  -  -  		exx
   46 00:45CC -  -  -  -  		;
   47 00:45CC D9 -  -  -  		exx 								; restore range.
   48 00:45CD D1 -  -  -  		pop 	de
   49 00:45CE D9 -  -  -  		exx
   50 00:45CF D1 -  -  -  		pop 	de
   51 00:45D0 -  -  -  -  		;
   52 00:45D0 CD B5 4A -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:45D3 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:45D4 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:45D6 C9 -  -  -  		ret
   56 00:45D7 -  -  -  -  _URFail:
   57 00:45D7 3E 03 C3 54 
              42 -  -  -  		ERR_BADVALUE
   58 00:45DC -  -  -  -  ; ***************************************************************************************
   59 00:45DC -  -  -  -  ;
   60 00:45DC -  -  -  -  ; 									Push RNG off zero
   61 00:45DC -  -  -  -  ;
   62 00:45DC -  -  -  -  ; ***************************************************************************************
   63 00:45DC -  -  -  -  
   64 00:45DC -  -  -  -  UnaryRandomInitialise:
   65 00:45DC 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:45DE -  -  -  -  _URILoop:
   67 00:45DE C5 -  -  -  		push 	bc
   68 00:45DF CD E6 45 -  		call 	URandomHL
   69 00:45E2 C1 -  -  -  		pop 	bc
   70 00:45E3 10 F9 -  -  		djnz 	_URILoop
   71 00:45E5 C9 -  -  -  		ret
   72 00:45E6 -  -  -  -  
   73 00:45E6 -  -  -  -  ; ***************************************************************************************
   74 00:45E6 -  -  -  -  ;
   75 00:45E6 -  -  -  -  ;							16 bit random number generator
   76 00:45E6 -  -  -  -  ;
   77 00:45E6 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:45E6 -  -  -  -  ;		Actual author unspecified.
   79 00:45E6 -  -  -  -  ;
   80 00:45E6 -  -  -  -  ; ***************************************************************************************
   81 00:45E6 -  -  -  -  
   82 00:45E6 -  -  -  -  URandomHL:
   83 00:45E6 2A 65 40 -  	    ld 		hl,(RandomSeed)
   84 00:45E9 ED 5B 69 40 	    ld 		de,(RandomSeed+4)
   85 00:45ED 44 -  -  -  	    ld 		b,h
   86 00:45EE 4D -  -  -  	    ld 		c,l
   87 00:45EF 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:45F4 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:45F9 2C -  -  -  	    inc 	l
   90 00:45FA 09 -  -  -  	    add 	hl,bc
   91 00:45FB 22 65 40 -  	    ld 		(RandomSeed),hl
   92 00:45FE 2A 69 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:4601 ED 5A -  -  	    adc 	hl,de
   94 00:4603 22 69 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4606 EB -  -  -  	    ex 		de,hl
   96 00:4607 2A 6D 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:460A ED 4B 71 40 	    ld 		bc,(RandomSeed+12)
   98 00:460E 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4613 ED 43 71 40 	    ld 		(RandomSeed+12),bc
  100 00:4617 9F -  -  -  	    sbc 	a,a
  101 00:4618 E6 C5 -  -  	    and 	%11000101
  102 00:461A AD -  -  -  	    xor 	l
  103 00:461B 6F -  -  -  	    ld 		l,a
  104 00:461C 22 6D 40 -  	    ld 		(RandomSeed+8),hl
  105 00:461F EB -  -  -  	    ex 		de,hl
  106 00:4620 09 -  -  -  	    add 	hl,bc
  107 00:4621 C9 -  -  -  	    ret		
  108 00:4622 -  -  -  -  
  109 00:4622 -  -  -  -  ; ***************************************************************************************
  110 00:4622 -  -  -  -  ;
  111 00:4622 -  -  -  -  ;									Changes and Updates
  112 00:4622 -  -  -  -  ;
  113 00:4622 -  -  -  -  ; ***************************************************************************************
  114 00:4622 -  -  -  -  ;
  115 00:4622 -  -  -  -  ;		Date			Notes
  116 00:4622 -  -  -  -  ;		==== 			=====
  117 00:4622 -  -  -  -  ;
  118 00:4622 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:4622 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4622 -  -  -  -  ; ***************************************************************************************
    2 00:4622 -  -  -  -  ; ***************************************************************************************
    3 00:4622 -  -  -  -  ;
    4 00:4622 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4622 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4622 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4622 -  -  -  -  ;		Reviewed :	No
    8 00:4622 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4622 -  -  -  -  ;
   10 00:4622 -  -  -  -  ; ***************************************************************************************
   11 00:4622 -  -  -  -  ; ***************************************************************************************
   12 00:4622 -  -  -  -  
   13 00:4622 -  -  -  -  ; ***************************************************************************************
   14 00:4622 -  -  -  -  ;
   15 00:4622 -  -  -  -  ;								sgn unary function
   16 00:4622 -  -  -  -  ;
   17 00:4622 -  -  -  -  ; ***************************************************************************************
   18 00:4622 -  -  -  -  
   19 00:4622 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4622 CD 1B 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4625 CD 09 4C -  		call 	Int32Zero 					; integer sgn() code
   22 00:4628 CA 32 43 -  		jp 		z,UnaryInt32False
   23 00:462B D9 -  -  -  		exx
   24 00:462C CB 7C -  -  		bit 	7,h
   25 00:462E D9 -  -  -  		exx
   26 00:462F C2 2E 43 -  		jp 		nz,UnaryInt32True
   27 00:4632 3E 01 -  -  		ld 		a,1
   28 00:4634 C3 58 44 -  		jp 		Return8BitConstant
   29 00:4637 -  -  -  -  
   30 00:4637 -  -  -  -  ; ***************************************************************************************
   31 00:4637 -  -  -  -  ;
   32 00:4637 -  -  -  -  ;									Changes and Updates
   33 00:4637 -  -  -  -  ;
   34 00:4637 -  -  -  -  ; ***************************************************************************************
   35 00:4637 -  -  -  -  ;
   36 00:4637 -  -  -  -  ;		Date			Notes
   37 00:4637 -  -  -  -  ;		==== 			=====
   38 00:4637 -  -  -  -  ;
   39 00:4637 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:4637 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4637 -  -  -  -  ; ***************************************************************************************
    2 00:4637 -  -  -  -  ; ***************************************************************************************
    3 00:4637 -  -  -  -  ;
    4 00:4637 -  -  -  -  ;		Name : 		simple.asm
    5 00:4637 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4637 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4637 -  -  -  -  ;		Reviewed :	No
    8 00:4637 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4637 -  -  -  -  ;
   10 00:4637 -  -  -  -  ; ***************************************************************************************
   11 00:4637 -  -  -  -  ; ***************************************************************************************
   12 00:4637 -  -  -  -  
   13 00:4637 -  -  -  -  ; ***************************************************************************************
   14 00:4637 -  -  -  -  ;
   15 00:4637 -  -  -  -  ;								( unary function (think about it)
   16 00:4637 -  -  -  -  ;
   17 00:4637 -  -  -  -  ; ***************************************************************************************
   18 00:4637 -  -  -  -  
   19 00:4637 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4637 CD C9 43 -  		call 	EvaluateAtPrecedence0
   21 00:463A C3 22 42 -  		jp  	CheckRightBracket
   22 00:463D -  -  -  -  
   23 00:463D -  -  -  -  ; ***************************************************************************************
   24 00:463D -  -  -  -  ;
   25 00:463D -  -  -  -  ;									Handle &x
   26 00:463D -  -  -  -  ;
   27 00:463D -  -  -  -  ; ***************************************************************************************
   28 00:463D -  -  -  -  
   29 00:463D -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:463D DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:4640 E6 C0 -  -  		and 		$C0
   32 00:4642 FE 40 -  -  		cp 			$40
   33 00:4644 C2 B1 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4647 C3 94 44 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:464A -  -  -  -  
   36 00:464A -  -  -  -  ; ***************************************************************************************
   37 00:464A -  -  -  -  ;
   38 00:464A -  -  -  -  ;									Changes and Updates
   39 00:464A -  -  -  -  ;
   40 00:464A -  -  -  -  ; ***************************************************************************************
   41 00:464A -  -  -  -  ;
   42 00:464A -  -  -  -  ;		Date			Notes
   43 00:464A -  -  -  -  ;		==== 			=====
   44 00:464A -  -  -  -  ;
   45 00:464A -  -  -  -  ; ***************************************************************************************
   46 00:464A -  -  -  -  		
Listing for file "_build.asm"
   43 00:464A -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:464A -  -  -  -  ; ***************************************************************************************
    2 00:464A -  -  -  -  ; ***************************************************************************************
    3 00:464A -  -  -  -  ;
    4 00:464A -  -  -  -  ;		Name : 		str.asm
    5 00:464A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:464A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:464A -  -  -  -  ;		Reviewed :	No
    8 00:464A -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:464A -  -  -  -  ;
   10 00:464A -  -  -  -  ; ***************************************************************************************
   11 00:464A -  -  -  -  ; ***************************************************************************************
   12 00:464A -  -  -  -  
   13 00:464A -  -  -  -  ; ***************************************************************************************
   14 00:464A -  -  -  -  ;
   15 00:464A -  -  -  -  ;								Str$() unary function
   16 00:464A -  -  -  -  ;
   17 00:464A -  -  -  -  ; ***************************************************************************************
   18 00:464A -  -  -  -  
   19 00:464A -  -  -  -  Unary_Str:	;; [str]
   20 00:464A CD 2F 42 -  		call 	CheckDollar
   21 00:464D CD 1B 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:4650 01 81 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:4653 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:4655 CD 4A 4C -  		call 	Int32ToString 				
   25 00:4658 21 81 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:465B 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:465D C9 -  -  -  		ret
   28 00:465E -  -  -  -  
   29 00:465E -  -  -  -  ; ***************************************************************************************
   30 00:465E -  -  -  -  ;
   31 00:465E -  -  -  -  ;									Changes and Updates
   32 00:465E -  -  -  -  ;
   33 00:465E -  -  -  -  ; ***************************************************************************************
   34 00:465E -  -  -  -  ;
   35 00:465E -  -  -  -  ;		Date			Notes
   36 00:465E -  -  -  -  ;		==== 			=====
   37 00:465E -  -  -  -  ;
   38 00:465E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:465E -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:465E -  -  -  -  ; ***************************************************************************************
    2 00:465E -  -  -  -  ; ***************************************************************************************
    3 00:465E -  -  -  -  ;
    4 00:465E -  -  -  -  ;		Name : 		time.asm
    5 00:465E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465E -  -  -  -  ;		Reviewed :	No
    8 00:465E -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:465E -  -  -  -  ;
   10 00:465E -  -  -  -  ; ***************************************************************************************
   11 00:465E -  -  -  -  ; ***************************************************************************************
   12 00:465E -  -  -  -  
   13 00:465E -  -  -  -  ; ***************************************************************************************
   14 00:465E -  -  -  -  ;
   15 00:465E -  -  -  -  ;							Get system time in ms
   16 00:465E -  -  -  -  ;
   17 00:465E -  -  -  -  ; ***************************************************************************************
   18 00:465E -  -  -  -  
   19 00:465E -  -  -  -  Unary_Time:	;; [time]
   20 00:465E CD C1 4C -  			call 	SYSGetTimer
   21 00:4661 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4663 C9 -  -  -  			ret
   23 00:4664 -  -  -  -  
   24 00:4664 -  -  -  -  ; ***************************************************************************************
   25 00:4664 -  -  -  -  ;
   26 00:4664 -  -  -  -  ;									Changes and Updates
   27 00:4664 -  -  -  -  ;
   28 00:4664 -  -  -  -  ; ***************************************************************************************
   29 00:4664 -  -  -  -  ;
   30 00:4664 -  -  -  -  ;		Date			Notes
   31 00:4664 -  -  -  -  ;		==== 			=====
   32 00:4664 -  -  -  -  ;
   33 00:4664 -  -  -  -  ; ***************************************************************************************
   34 00:4664 -  -  -  -  			
Listing for file "_build.asm"
   45 00:4664 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4664 -  -  -  -  ; ***************************************************************************************
    2 00:4664 -  -  -  -  ; ***************************************************************************************
    3 00:4664 -  -  -  -  ;
    4 00:4664 -  -  -  -  ;		Name : 		top.asm
    5 00:4664 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4664 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4664 -  -  -  -  ;		Reviewed :	No
    8 00:4664 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4664 -  -  -  -  ;
   10 00:4664 -  -  -  -  ; ***************************************************************************************
   11 00:4664 -  -  -  -  ; ***************************************************************************************
   12 00:4664 -  -  -  -  
   13 00:4664 -  -  -  -  ; ***************************************************************************************
   14 00:4664 -  -  -  -  ;
   15 00:4664 -  -  -  -  ;							page unary function (no bracket)
   16 00:4664 -  -  -  -  ;
   17 00:4664 -  -  -  -  ; ***************************************************************************************
   18 00:4664 -  -  -  -  
   19 00:4664 -  -  -  -  Unary_Top:	;; [top]
   20 00:4664 2A 4D 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4667 D9 -  -  -  			exx
   22 00:4668 2A 4F 40 -  			ld 		hl,(TopMemory+2)
   23 00:466B D9 -  -  -  			exx
   24 00:466C 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:466E C9 -  -  -  			ret
   26 00:466F -  -  -  -  
   27 00:466F -  -  -  -  ; ***************************************************************************************
   28 00:466F -  -  -  -  ;
   29 00:466F -  -  -  -  ;									Changes and Updates
   30 00:466F -  -  -  -  ;
   31 00:466F -  -  -  -  ; ***************************************************************************************
   32 00:466F -  -  -  -  ;
   33 00:466F -  -  -  -  ;		Date			Notes
   34 00:466F -  -  -  -  ;		==== 			=====
   35 00:466F -  -  -  -  ;
   36 00:466F -  -  -  -  ; ***************************************************************************************
   37 00:466F -  -  -  -  			
Listing for file "_build.asm"
   46 00:466F -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:466F -  -  -  -  ; ***************************************************************************************
    2 00:466F -  -  -  -  ; ***************************************************************************************
    3 00:466F -  -  -  -  ;
    4 00:466F -  -  -  -  ;		Name : 		val.asm
    5 00:466F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:466F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:466F -  -  -  -  ;		Reviewed :	No
    8 00:466F -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:466F -  -  -  -  ;
   10 00:466F -  -  -  -  ; ***************************************************************************************
   11 00:466F -  -  -  -  ; ***************************************************************************************
   12 00:466F -  -  -  -  
   13 00:466F -  -  -  -  ; ***************************************************************************************
   14 00:466F -  -  -  -  ;
   15 00:466F -  -  -  -  ;								val( unary function
   16 00:466F -  -  -  -  ;
   17 00:466F -  -  -  -  ; ***************************************************************************************
   18 00:466F -  -  -  -  
   19 00:466F -  -  -  -  Unary_Val:	;; [val]
   20 00:466F CD 27 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4672 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4673 C1 -  -  -  		pop 	bc
   23 00:4674 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4676 CD 40 4B -  		call 	Int32FromString 			; get the integer part.
   25 00:4679 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:467B C8 -  -  -  		ret		z 							; okay
   27 00:467C 3E 03 C3 54 
              42 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4681 -  -  -  -  
   29 00:4681 -  -  -  -  ; ***************************************************************************************
   30 00:4681 -  -  -  -  ;
   31 00:4681 -  -  -  -  ;									Changes and Updates
   32 00:4681 -  -  -  -  ;
   33 00:4681 -  -  -  -  ; ***************************************************************************************
   34 00:4681 -  -  -  -  ;
   35 00:4681 -  -  -  -  ;		Date			Notes
   36 00:4681 -  -  -  -  ;		==== 			=====
   37 00:4681 -  -  -  -  ;
   38 00:4681 -  -  -  -  ; ***************************************************************************************
   39 00:4681 -  -  -  -  		
Listing for file "_build.asm"
   47 00:4681 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4681 -  -  -  -  ; ***************************************************************************************
    2 00:4681 -  -  -  -  ; ***************************************************************************************
    3 00:4681 -  -  -  -  ;
    4 00:4681 -  -  -  -  ;		Name : 		allocate.asm
    5 00:4681 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4681 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4681 -  -  -  -  ;		Reviewed :	No
    8 00:4681 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4681 -  -  -  -  ;
   10 00:4681 -  -  -  -  ; ***************************************************************************************
   11 00:4681 -  -  -  -  ; ***************************************************************************************
   12 00:4681 -  -  -  -  
   13 00:4681 -  -  -  -  ; ***************************************************************************************
   14 00:4681 -  -  -  -  ;
   15 00:4681 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4681 -  -  -  -  ;
   17 00:4681 -  -  -  -  ; ***************************************************************************************
   18 00:4681 -  -  -  -  
   19 00:4681 -  -  -  -  AllocateBytes:
   20 00:4681 ED 5B 49 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:4685 D5 -  -  -  		push 	de 							; save on stack
   22 00:4686 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:4687 22 49 40 -  		ld 		(LowAllocMemory),hl 		; update it
   24 00:468A EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:468B 2A 45 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:468E AF -  -  -  		xor 	a
   27 00:468F ED 52 -  -  		sbc 	hl,de
   28 00:4691 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:4692 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:4693 3E 06 C3 54 
              42 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:4698 -  -  -  -  
   32 00:4698 -  -  -  -  ; ***************************************************************************************
   33 00:4698 -  -  -  -  ;
   34 00:4698 -  -  -  -  ;									Changes and Updates
   35 00:4698 -  -  -  -  ;
   36 00:4698 -  -  -  -  ; ***************************************************************************************
   37 00:4698 -  -  -  -  ;
   38 00:4698 -  -  -  -  ;		Date			Notes
   39 00:4698 -  -  -  -  ;		==== 			=====
   40 00:4698 -  -  -  -  ;
   41 00:4698 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:4698 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4698 -  -  -  -  ; ***************************************************************************************
    2 00:4698 -  -  -  -  ; ***************************************************************************************
    3 00:4698 -  -  -  -  ;
    4 00:4698 -  -  -  -  ;		Name : 		clear.asm
    5 00:4698 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4698 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4698 -  -  -  -  ;		Reviewed :	No
    8 00:4698 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4698 -  -  -  -  ;
   10 00:4698 -  -  -  -  ; ***************************************************************************************
   11 00:4698 -  -  -  -  ; ***************************************************************************************
   12 00:4698 -  -  -  -  
   13 00:4698 -  -  -  -  ; ***************************************************************************************
   14 00:4698 -  -  -  -  ;
   15 00:4698 -  -  -  -  ;										CLEAR command
   16 00:4698 -  -  -  -  ;
   17 00:4698 -  -  -  -  ; ***************************************************************************************
   18 00:4698 -  -  -  -  
   19 00:4698 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4698 -  -  -  -  		;
   21 00:4698 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4698 -  -  -  -  		;
   23 00:4698 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:469B -  -  -  -  _CCFindLow:
   25 00:469B 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:469E 5E -  -  -  		ld 		e,(hl)		
   27 00:469F 19 -  -  -  		add 	hl,de
   28 00:46A0 7B -  -  -  		ld 		a,e
   29 00:46A1 B7 -  -  -  		or 		a
   30 00:46A2 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:46A4 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:46A5 22 4D 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:46A8 23 -  -  -  		inc 	hl 							; one for luck
   34 00:46A9 22 49 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:46AC -  -  -  -  		;
   36 00:46AC -  -  -  -  		; 	 		Reset the language stack
   37 00:46AC -  -  -  -  		;
   38 00:46AC 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:46AF -  -  -  -  		;
   40 00:46AF 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:46B1 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:46B4 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:46B7 19 -  -  -  		add 	hl,de
   44 00:46B8 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:46BA 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:46BD -  -  -  -  		;
   47 00:46BD 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:46C0 19 -  -  -  		add 	hl,de
   49 00:46C1 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:46C4 -  -  -  -  		;
   51 00:46C4 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:46C4 -  -  -  -  		;
   53 00:46C4 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:46C7 -  -  -  -  _CCFClearHT:
   55 00:46C7 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:46C8 36 00 -  -  		ld 		(hl),0
   57 00:46CA 1B -  -  -  		dec 	de
   58 00:46CB 7A -  -  -  		ld 		a,d
   59 00:46CC B3 -  -  -  		or 		e
   60 00:46CD 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:46CF 22 41 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:46D2 -  -  -  -  		;
   63 00:46D2 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:46D2 -  -  -  -  		;
   65 00:46D2 22 45 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:46D5 -  -  -  -  		;
   67 00:46D5 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:46D5 -  -  -  -  		;
   69 00:46D5 CD DC 45 -  		call 	UnaryRandomInitialise
   70 00:46D8 C9 -  -  -  		ret
   71 00:46D9 -  -  -  -  
   72 00:46D9 -  -  -  -  ; ***************************************************************************************
   73 00:46D9 -  -  -  -  ;
   74 00:46D9 -  -  -  -  ;									Changes and Updates
   75 00:46D9 -  -  -  -  ;
   76 00:46D9 -  -  -  -  ; ***************************************************************************************
   77 00:46D9 -  -  -  -  ;
   78 00:46D9 -  -  -  -  ;		Date			Notes
   79 00:46D9 -  -  -  -  ;		==== 			=====
   80 00:46D9 -  -  -  -  ;
   81 00:46D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:46D9 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:46D9 -  -  -  -  ; ***************************************************************************************
    2 00:46D9 -  -  -  -  ; ***************************************************************************************
    3 00:46D9 -  -  -  -  ;
    4 00:46D9 -  -  -  -  ;		Name : 		instance.asm
    5 00:46D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D9 -  -  -  -  ;		Reviewed :	No
    8 00:46D9 -  -  -  -  ;		Purpose :	Instance handling
    9 00:46D9 -  -  -  -  ;
   10 00:46D9 -  -  -  -  ; ***************************************************************************************
   11 00:46D9 -  -  -  -  ; ***************************************************************************************
   12 00:46D9 -  -  -  -  
   13 00:46D9 -  -  -  -  ; ***************************************************************************************
   14 00:46D9 -  -  -  -  ;
   15 00:46D9 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:46D9 -  -  -  -  ;
   17 00:46D9 -  -  -  -  ; ***************************************************************************************
   18 00:46D9 -  -  -  -  
   19 00:46D9 -  -  -  -  SetCurrentInstance:
   20 00:46D9 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:46DD 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:46E0 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:46E4 -  -  -  -  
   24 00:46E4 C9 -  -  -  		ret
   25 00:46E5 -  -  -  -  
   26 00:46E5 -  -  -  -  
   27 00:46E5 -  -  -  -  ; ***************************************************************************************
   28 00:46E5 -  -  -  -  ;
   29 00:46E5 -  -  -  -  ;									Changes and Updates
   30 00:46E5 -  -  -  -  ;
   31 00:46E5 -  -  -  -  ; ***************************************************************************************
   32 00:46E5 -  -  -  -  ;
   33 00:46E5 -  -  -  -  ;		Date			Notes
   34 00:46E5 -  -  -  -  ;		==== 			=====
   35 00:46E5 -  -  -  -  ;
   36 00:46E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:46E5 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:46E5 -  -  -  -  ; ***************************************************************************************
    2 00:46E5 -  -  -  -  ; ***************************************************************************************
    3 00:46E5 -  -  -  -  ;
    4 00:46E5 -  -  -  -  ;		Name : 		new.asm
    5 00:46E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46E5 -  -  -  -  ;		Reviewed :	No
    8 00:46E5 -  -  -  -  ;		Purpose :	New command.
    9 00:46E5 -  -  -  -  ;
   10 00:46E5 -  -  -  -  ; ***************************************************************************************
   11 00:46E5 -  -  -  -  ; ***************************************************************************************
   12 00:46E5 -  -  -  -  
   13 00:46E5 -  -  -  -  ; ***************************************************************************************
   14 00:46E5 -  -  -  -  ;
   15 00:46E5 -  -  -  -  ;										NEW command
   16 00:46E5 -  -  -  -  ;
   17 00:46E5 -  -  -  -  ; ***************************************************************************************
   18 00:46E5 -  -  -  -  
   19 00:46E5 -  -  -  -  Command_NEW: 	;; [new]
   20 00:46E5 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:46E8 36 00 -  -  		ld 		(hl),0
   22 00:46EA CD 98 46 -  		call 	Command_CLEAR 				; clear all variables
   23 00:46ED 3E 00 C3 54 
              42 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:46F2 -  -  -  -  
   25 00:46F2 -  -  -  -  ; ***************************************************************************************
   26 00:46F2 -  -  -  -  ;
   27 00:46F2 -  -  -  -  ;									Changes and Updates
   28 00:46F2 -  -  -  -  ;
   29 00:46F2 -  -  -  -  ; ***************************************************************************************
   30 00:46F2 -  -  -  -  ;
   31 00:46F2 -  -  -  -  ;		Date			Notes
   32 00:46F2 -  -  -  -  ;		==== 			=====
   33 00:46F2 -  -  -  -  ;
   34 00:46F2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:46F2 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:46F2 -  -  -  -  ; ***************************************************************************************
    2 00:46F2 -  -  -  -  ; ***************************************************************************************
    3 00:46F2 -  -  -  -  ;
    4 00:46F2 -  -  -  -  ;		Name : 		utility.asm
    5 00:46F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46F2 -  -  -  -  ;		Reviewed :	No
    8 00:46F2 -  -  -  -  ;		Purpose :	Utility routines
    9 00:46F2 -  -  -  -  ;
   10 00:46F2 -  -  -  -  ; ***************************************************************************************
   11 00:46F2 -  -  -  -  ; ***************************************************************************************
   12 00:46F2 -  -  -  -  
   13 00:46F2 -  -  -  -  ; ***************************************************************************************
   14 00:46F2 -  -  -  -  ;
   15 00:46F2 -  -  -  -  ;							Print ASCII string at HL
   16 00:46F2 -  -  -  -  ;
   17 00:46F2 -  -  -  -  ; ***************************************************************************************
   18 00:46F2 -  -  -  -  
   19 00:46F2 -  -  -  -  PrintStringAtHL:
   20 00:46F2 7E -  -  -  		ld 		a,(hl)
   21 00:46F3 FE 20 -  -  		cp 		$20		
   22 00:46F5 D8 -  -  -  		ret 	c
   23 00:46F6 CD 98 4C -  		call 	SYSPrintChar
   24 00:46F9 23 -  -  -  		inc 	hl
   25 00:46FA 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:46FC -  -  -  -  
   27 00:46FC -  -  -  -  ; ***************************************************************************************
   28 00:46FC -  -  -  -  ;
   29 00:46FC -  -  -  -  ;									Changes and Updates
   30 00:46FC -  -  -  -  ;
   31 00:46FC -  -  -  -  ; ***************************************************************************************
   32 00:46FC -  -  -  -  ;
   33 00:46FC -  -  -  -  ;		Date			Notes
   34 00:46FC -  -  -  -  ;		==== 			=====
   35 00:46FC -  -  -  -  ;
   36 00:46FC -  -  -  -  ; ***************************************************************************************
   37 00:46FC -  -  -  -  		
Listing for file "_build.asm"
   52 00:46FC -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:46FC -  -  -  -  ; ***************************************************************************************
    2 00:46FC -  -  -  -  ; ***************************************************************************************
    3 00:46FC -  -  -  -  ;
    4 00:46FC -  -  -  -  ;		Name : 		create.asm
    5 00:46FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46FC -  -  -  -  ;		Date : 		4th June 2022
    7 00:46FC -  -  -  -  ;		Reviewed :	No
    8 00:46FC -  -  -  -  ;		Purpose :	Create a variable.
    9 00:46FC -  -  -  -  ;
   10 00:46FC -  -  -  -  ; ***************************************************************************************
   11 00:46FC -  -  -  -  ; ***************************************************************************************
   12 00:46FC -  -  -  -  
   13 00:46FC -  -  -  -  ; ***************************************************************************************
   14 00:46FC -  -  -  -  ;
   15 00:46FC -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:46FC -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:46FC -  -  -  -  ;
   18 00:46FC -  -  -  -  ; ***************************************************************************************
   19 00:46FC -  -  -  -  
   20 00:46FC -  -  -  -  VariableCreate:		
   21 00:46FC -  -  -  -  		;
   22 00:46FC -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:46FC -  -  -  -  		;
   24 00:46FC 11 09 00 -  		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:46FF 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:4700 E5 -  -  -  		push 	hl 							; save count.
   27 00:4701 CD 81 46 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4704 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4705 -  -  -  -  		;
   30 00:4705 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4705 -  -  -  -  		;
   32 00:4705 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4706 -  -  -  -  _VCClear:
   34 00:4706 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4708 23 -  -  -  		inc 	hl
   36 00:4709 0B -  -  -  		dec 	bc
   37 00:470A 78 -  -  -  		ld		a,b
   38 00:470B B1 -  -  -  		or 		c
   39 00:470C 20 F8 -  -  		jr 		nz,_VCClear
   40 00:470E E1 -  -  -  		pop 	hl							; restore start address
   41 00:470F -  -  -  -  		;
   42 00:470F -  -  -  -  		;		Now start to create the data.
   43 00:470F -  -  -  -  		;
   44 00:470F E5 -  -  -  		push 	hl 							; save start
   45 00:4710 -  -  -  -  		;
   46 00:4710 -  -  -  -  		;		Write hash to +0
   47 00:4710 -  -  -  -  		;
   48 00:4710 3A 7B 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:4713 77 -  -  -  		ld 		(hl),a
   50 00:4714 23 -  -  -  		inc 	hl
   51 00:4715 -  -  -  -  		;
   52 00:4715 -  -  -  -  		;		Write list head to +1
   53 00:4715 -  -  -  -  		;
   54 00:4715 E5 -  -  -  		push 	hl 							; save write position
   55 00:4716 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4719 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:471D EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:471E E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:471F 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4725 -  -  -  -  		;
   61 00:4725 -  -  -  -  		;		Write variable name to +5
   62 00:4725 -  -  -  -  		;
   63 00:4725 ED 5B 77 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4729 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:472F -  -  -  -  		;
   66 00:472F D1 -  -  -  		pop 	de 							; get the start address back
   67 00:4730 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4733 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4739 -  -  -  -  		;
   70 00:4739 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:473A C9 -  -  -  		ret
   72 00:473B -  -  -  -  
   73 00:473B -  -  -  -  ; ***************************************************************************************
   74 00:473B -  -  -  -  ;
   75 00:473B -  -  -  -  ;									Changes and Updates
   76 00:473B -  -  -  -  ;
   77 00:473B -  -  -  -  ; ***************************************************************************************
   78 00:473B -  -  -  -  ;
   79 00:473B -  -  -  -  ;		Date			Notes
   80 00:473B -  -  -  -  ;		==== 			=====
   81 00:473B -  -  -  -  ;
   82 00:473B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:473B -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:473B -  -  -  -  ; ***************************************************************************************
    2 00:473B -  -  -  -  ; ***************************************************************************************
    3 00:473B -  -  -  -  ;
    4 00:473B -  -  -  -  ;		Name : 		find.asm
    5 00:473B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:473B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:473B -  -  -  -  ;		Reviewed :	No
    8 00:473B -  -  -  -  ;		Purpose :	Find a variable.
    9 00:473B -  -  -  -  ;
   10 00:473B -  -  -  -  ; ***************************************************************************************
   11 00:473B -  -  -  -  ; ***************************************************************************************
   12 00:473B -  -  -  -  
   13 00:473B -  -  -  -  ; ***************************************************************************************
   14 00:473B -  -  -  -  ;
   15 00:473B -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:473B -  -  -  -  ; 		variable information at (IX)
   17 00:473B -  -  -  -  ;
   18 00:473B -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:473B -  -  -  -  ;		Don't autocreate arrays.
   20 00:473B -  -  -  -  ;
   21 00:473B -  -  -  -  ; ***************************************************************************************
   22 00:473B -  -  -  -  
   23 00:473B -  -  -  -  FindVariable:
   24 00:473B DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:473E FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:4740 D2 B1 42 -  		jp 		nc,SyntaxError 		
   27 00:4743 -  -  -  -  
   28 00:4743 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4746 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4748 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:474A FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:474C 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:474E -  -  -  -  		;
   34 00:474E -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:474E -  -  -  -  		;
   36 00:474E 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:4751 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4754 87 -  -  -  		add 	a,a 						; x4
   39 00:4755 87 -  -  -  		add 	a,a
   40 00:4756 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4757 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4758 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:475A CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:475C DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:475E AF -  -  -  		xor 	a 							; clear carry and return
   46 00:475F C9 -  -  -  		ret
   47 00:4760 -  -  -  -  		;
   48 00:4760 -  -  -  -  		;		Not a standard simple variable.
   49 00:4760 -  -  -  -  		;
   50 00:4760 -  -  -  -  _FVNotSimple:
   51 00:4760 CD 8D 47 -  		call 	VariableInformation 		; get information about the variable.
   52 00:4763 CD C0 47 -  		call 	VariableSearchList 			; search the linked list
   53 00:4766 38 0A -  -  		jr 		c,_FVNotFound  				
   54 00:4768 -  -  -  -  		;
   55 00:4768 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4768 -  -  -  -  		;
   57 00:4768 -  -  -  -  _FVExitReference:		
   58 00:4768 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:476B 19 -  -  -  		add 	hl,de 
   60 00:476C -  -  -  -  		;
   61 00:476C -  -  -  -  		; 		TODO: Array check code.
   62 00:476C -  -  -  -  		;
   63 00:476C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:476E CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:4770 AF -  -  -  		xor 	a 							; clear carry and return
   66 00:4771 C9 -  -  -  		ret
   67 00:4772 -  -  -  -  		;
   68 00:4772 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:4772 -  -  -  -  		;
   70 00:4772 -  -  -  -  _FVNotFound:		
   71 00:4772 3A 75 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:4775 B7 -  -  -  		or 		a
   73 00:4776 28 0F -  -  		jr 		z,_FVFail
   74 00:4778 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:477B FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:477D 28 08 -  -  		jr 		z,_FVFail
   77 00:477F 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   78 00:4782 CD FC 46 -  		call 	VariableCreate 				; create a new variable.
   79 00:4785 18 E1 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:4787 -  -  -  -  
   81 00:4787 -  -  -  -  _FVFail:
   82 00:4787 DD 2A 77 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:478B 37 -  -  -  		scf
   84 00:478C C9 -  -  -  		ret
   85 00:478D -  -  -  -  
   86 00:478D -  -  -  -  ; ***************************************************************************************
   87 00:478D -  -  -  -  ;
   88 00:478D -  -  -  -  ;									Changes and Updates
   89 00:478D -  -  -  -  ;
   90 00:478D -  -  -  -  ; ***************************************************************************************
   91 00:478D -  -  -  -  ;
   92 00:478D -  -  -  -  ;		Date			Notes
   93 00:478D -  -  -  -  ;		==== 			=====
   94 00:478D -  -  -  -  ;
   95 00:478D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:478D -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:478D -  -  -  -  ; ***************************************************************************************
    2 00:478D -  -  -  -  ; ***************************************************************************************
    3 00:478D -  -  -  -  ;
    4 00:478D -  -  -  -  ;		Name : 		info.asm
    5 00:478D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:478D -  -  -  -  ;		Date : 		4th June 2022
    7 00:478D -  -  -  -  ;		Reviewed :	No
    8 00:478D -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:478D -  -  -  -  ;
   10 00:478D -  -  -  -  ; ***************************************************************************************
   11 00:478D -  -  -  -  ; ***************************************************************************************
   12 00:478D -  -  -  -  
   13 00:478D -  -  -  -  ; ***************************************************************************************
   14 00:478D -  -  -  -  ;
   15 00:478D -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:478D -  -  -  -  ; 		after the identifier.
   17 00:478D -  -  -  -  ;
   18 00:478D -  -  -  -  ; ***************************************************************************************
   19 00:478D -  -  -  -  
   20 00:478D -  -  -  -  VariableInformation:
   21 00:478D DD 22 77 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4791 -  -  -  -  		;
   23 00:4791 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4791 -  -  -  -  		;
   25 00:4791 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4793 -  -  -  -  _VICalculateHash:
   27 00:4793 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4796 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4798 30 06 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:479A 80 -  -  -  		add 	a,b 						; add to hash
   31 00:479B 47 -  -  -  		ld 		b,a 						; update hash
   32 00:479C DD 23 -  -  		inc 	ix 							; next character
   33 00:479E 18 F3 -  -  		jr 		_VICalculateHash				
   34 00:47A0 -  -  -  -  		;
   35 00:47A0 -  -  -  -  _VIHashDone:
   36 00:47A0 78 -  -  -  		ld 		a,b 						; write hash byte out
   37 00:47A1 32 7B 40 -  		ld 		(VarHash),a
   38 00:47A4 -  -  -  -  		;
   39 00:47A4 -  -  -  -  		; 		Calculate the hash table address pointer.
   40 00:47A4 -  -  -  -  		;		
   41 00:47A4 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   42 00:47A6 21 00 00 -  		ld 		hl,$0000 					; put in HL
   43 00:47A9 6F -  -  -  		ld 		l,a
   44 00:47AA 29 -  -  -  		add 	hl,hl 						; x 4
   45 00:47AB 29 -  -  -  		add 	hl,hl
   46 00:47AC -  -  -  -  		;
   47 00:47AC ED 5B 41 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   48 00:47B0 19 -  -  -  		add 	hl,de
   49 00:47B1 -  -  -  -  		;
   50 00:47B1 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   51 00:47B4 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   52 00:47B6 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   53 00:47B8 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   54 00:47BB 19 -  -  -  		add 	hl,de 						; for hash tables
   55 00:47BC -  -  -  -  _VINotArray:
   56 00:47BC 22 7D 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   57 00:47BF C9 -  -  -  		ret
   58 00:47C0 -  -  -  -  
   59 00:47C0 -  -  -  -  ; ***************************************************************************************
   60 00:47C0 -  -  -  -  ;
   61 00:47C0 -  -  -  -  ;									Changes and Updates
   62 00:47C0 -  -  -  -  ;
   63 00:47C0 -  -  -  -  ; ***************************************************************************************
   64 00:47C0 -  -  -  -  ;
   65 00:47C0 -  -  -  -  ;		Date			Notes
   66 00:47C0 -  -  -  -  ;		==== 			=====
   67 00:47C0 -  -  -  -  ;
   68 00:47C0 -  -  -  -  ; ***************************************************************************************
   69 00:47C0 -  -  -  -  
Listing for file "_build.asm"
   55 00:47C0 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:47C0 -  -  -  -  ; ***************************************************************************************
    2 00:47C0 -  -  -  -  ; ***************************************************************************************
    3 00:47C0 -  -  -  -  ;
    4 00:47C0 -  -  -  -  ;		Name : 		search.asm
    5 00:47C0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:47C0 -  -  -  -  ;		Reviewed :	No
    8 00:47C0 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:47C0 -  -  -  -  ;
   10 00:47C0 -  -  -  -  ; ***************************************************************************************
   11 00:47C0 -  -  -  -  ; ***************************************************************************************
   12 00:47C0 -  -  -  -  
   13 00:47C0 -  -  -  -  ; ***************************************************************************************
   14 00:47C0 -  -  -  -  ;
   15 00:47C0 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:47C0 -  -  -  -  ;		CS if failed.
   17 00:47C0 -  -  -  -  ;
   18 00:47C0 -  -  -  -  ; ***************************************************************************************
   19 00:47C0 -  -  -  -  
   20 00:47C0 -  -  -  -  VariableSearchList:
   21 00:47C0 37 -  -  -  		scf
   22 00:47C1 C9 -  -  -  		ret
   23 00:47C2 -  -  -  -  
   24 00:47C2 -  -  -  -  ; ***************************************************************************************
   25 00:47C2 -  -  -  -  ;
   26 00:47C2 -  -  -  -  ;									Changes and Updates
   27 00:47C2 -  -  -  -  ;
   28 00:47C2 -  -  -  -  ; ***************************************************************************************
   29 00:47C2 -  -  -  -  ;
   30 00:47C2 -  -  -  -  ;		Date			Notes
   31 00:47C2 -  -  -  -  ;		==== 			=====
   32 00:47C2 -  -  -  -  ;
   33 00:47C2 -  -  -  -  ; ***************************************************************************************
   34 00:47C2 -  -  -  -  		
Listing for file "_build.asm"
   56 00:47C2 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:47C2 -  -  -  -  ;
    2 00:47C2 -  -  -  -  ;	This file is automatically generated.
    3 00:47C2 -  -  -  -  ;
    4 00:47C2 -  -  -  -  ;
    5 00:47C2 -  -  -  -  ;	Keywords for set 0
    6 00:47C2 -  -  -  -  ;
    7 00:47C2 -  -  -  -  KeywordsSet0:
    8 00:47C2 01 20 -  -  	.db	1," "              ; $0080
    9 00:47C4 01 20 -  -  	.db	1," "              ; $0081
   10 00:47C6 01 20 -  -  	.db	1," "              ; $0082
   11 00:47C8 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:47CA 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:47CC 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:47CE 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:47D0 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:47D4 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:47D8 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:47DA 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:47DC 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:47DF 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:47E2 01 3E -  -  	.db	1,">"              ; $008d
   22 00:47E4 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:47E6 01 3D -  -  	.db	1,"="              ; $008f
   24 00:47E8 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:47EB 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:47EF 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:47F2 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:47F6 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:47F8 01 28 -  -  	.db	1,"("              ; $0095
   30 00:47FA 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:47FC 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:4800 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:4804 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:4808 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:480C 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:4810 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:4814 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:4818 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:481C 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:4821 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:4826 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:482A 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:482E 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 00:4833 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 00:4839 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:483B 01 2C -  -  	.db	1,","              ; $00a6
   47 00:483D 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:483F 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:4841 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:4843 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 00:484A 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 00:4850 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 00:4853 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 00:4858 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 00:485D 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 00:4861 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 00:4864 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 00:4869 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 00:486E 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 00:4872 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 00:4877 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 00:487F 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 00:4885 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 00:4889 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 00:488D 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 00:4891 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 00:4895 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 00:489B 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 00:48A0 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 00:48A5 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 00:48AA 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 00:48AE 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 00:48B2 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 00:48B7 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 00:48BC 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 00:48C4 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 00:48CB 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 00:48D1 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 00:48D5 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 00:48DA 00 -  -  -  	.db	0
   81 00:48DB -  -  -  -  ;
   82 00:48DB -  -  -  -  ;	Keywords for set 1
   83 00:48DB -  -  -  -  ;
   84 00:48DB -  -  -  -  KeywordsSet1:
   85 00:48DB 00 -  -  -  	.db	0
   86 00:48DC -  -  -  -  ;
   87 00:48DC -  -  -  -  ;	Keywords for set 2
   88 00:48DC -  -  -  -  ;
   89 00:48DC -  -  -  -  KeywordsSet2:
   90 00:48DC 00 -  -  -  	.db	0
Listing for file "_build.asm"
   57 00:48DD -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:48DD -  -  -  -  ;
    2 00:48DD -  -  -  -  ;	This file is automatically generated.
    3 00:48DD -  -  -  -  ;
    4 00:48DD 00 00 00 -  	.block	$20-($ & $1F)
    5 00:48E0 -  -  -  -  PrecedenceTable:
    6 00:48E0 06 -  -  -  	.db	6	; $0083 !
    7 00:48E1 06 -  -  -  	.db	6	; $0084 ?
    8 00:48E2 05 -  -  -  	.db	5	; $0085 *
    9 00:48E3 05 -  -  -  	.db	5	; $0086 /
   10 00:48E4 05 -  -  -  	.db	5	; $0087 mod
   11 00:48E5 05 -  -  -  	.db	5	; $0088 div
   12 00:48E6 04 -  -  -  	.db	4	; $0089 +
   13 00:48E7 04 -  -  -  	.db	4	; $008a -
   14 00:48E8 03 -  -  -  	.db	3	; $008b >=
   15 00:48E9 03 -  -  -  	.db	3	; $008c <=
   16 00:48EA 03 -  -  -  	.db	3	; $008d >
   17 00:48EB 03 -  -  -  	.db	3	; $008e <
   18 00:48EC 03 -  -  -  	.db	3	; $008f =
   19 00:48ED 03 -  -  -  	.db	3	; $0090 <>
   20 00:48EE 02 -  -  -  	.db	2	; $0091 and
   21 00:48EF 01 -  -  -  	.db	1	; $0092 or
   22 00:48F0 01 -  -  -  	.db	1	; $0093 eor
   23 00:48F1 -  -  -  -  
Listing for file "_build.asm"
   58 00:48F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:48F1 -  -  -  -  ;
    2 00:48F1 -  -  -  -  ;	This is automatically generated.
    3 00:48F1 -  -  -  -  ;
    4 00:48F1 -  -  -  -  ErrorIDTable:
    5 00:48F1 31 49 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:48F5 37 49 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:48F9 48 49 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:48FD 56 49 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4901 60 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:4905 7A 49 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:4909 8B 49 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:490D 99 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:4911 A7 49 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:4915 B1 49 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:4919 C6 49 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:491D DC 49 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:4921 EA 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:4925 EF 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:4929 FC 49 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:492D 0D 4A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:4931 -  -  -  -  
   22 00:4931 -  -  -  -  ErrText_warmstart:
   23 00:4931 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:4937 -  -  -  -  ErrText_assert:
   25 00:4937 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:4948 -  -  -  -  ErrText_badtype:
   27 00:4948 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:4956 -  -  -  -  ErrText_badvalue:
   29 00:4956 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:4960 -  -  -  -  ErrText_disabled:
   31 00:4960 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:497A -  -  -  -  ErrText_divzero:
   33 00:497A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:498B -  -  -  -  ErrText_memory:
   35 00:498B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:4999 -  -  -  -  ErrText_nocomma:
   37 00:4999 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:49A7 -  -  -  -  ErrText_nodollar:
   39 00:49A7 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:49B1 -  -  -  -  ErrText_nolbracket:
   41 00:49B1 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:49C6 -  -  -  -  ErrText_norbracket:
   43 00:49C6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:49DC -  -  -  -  ErrText_notref:
   45 00:49DC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:49EA -  -  -  -  ErrText_stop:
   47 00:49EA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:49EF -  -  -  -  ErrText_syntax:
   49 00:49EF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:49FC -  -  -  -  ErrText_todo:
   51 00:49FC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:4A0D -  -  -  -  ErrText_unknownvar:
   53 00:4A0D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:4A1E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4A1E -  -  -  -  ;
    2 00:4A1E -  -  -  -  ;	Vectors for set 0
    3 00:4A1E -  -  -  -  ;
    4 00:4A1E -  -  -  -  VectorsSet0:
    5 00:4A1E EB 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4A20 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4A22 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4A24 0E 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4A26 16 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4A28 CC 42 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4A2A D7 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4A2C E2 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4A2E D7 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4A30 B6 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4A32 C1 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4A34 69 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4A36 60 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4A38 4E 43 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4A3A 45 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4A3C 3C 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4A3E 57 43 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4A40 ED 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4A42 F8 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4A44 03 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4A46 3D 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4A48 37 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4A4A 7E 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4A4C A4 45 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4A4E 6F 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4A50 4C 45 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4A52 22 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4A54 4A 46 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4A56 5E 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4A58 57 45 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4A5A 87 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4A5C 99 45 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4A5E 5E 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4A60 64 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4A62 6F 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4A64 2E 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4A66 32 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4A68 E2 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4A6A E2 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4A6C E5 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4A6E E2 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4A70 92 41 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4A72 1F 40 -  -  	addr(Unimplemented)              ; $00aa repeat
   48 00:4A74 1F 40 -  -  	addr(Unimplemented)              ; $00ab until
   49 00:4A76 1F 40 -  -  	addr(Unimplemented)              ; $00ac if
   50 00:4A78 E2 40 -  -  	addr(BadCmd_Then)                ; $00ad then
   51 00:4A7A 1F 40 -  -  	addr(Unimplemented)              ; $00ae else
   52 00:4A7C 1F 40 -  -  	addr(Unimplemented)              ; $00af for
   53 00:4A7E E2 40 -  -  	addr(BadCmd_To)                  ; $00b0 to
   54 00:4A80 1F 40 -  -  	addr(Unimplemented)              ; $00b1 step
   55 00:4A82 1F 40 -  -  	addr(Unimplemented)              ; $00b2 next
   56 00:4A84 E2 40 -  -  	addr(BadCmd_Defproc)             ; $00b3 def
   57 00:4A86 1F 40 -  -  	addr(Unimplemented)              ; $00b4 proc
   58 00:4A88 1F 40 -  -  	addr(Unimplemented)              ; $00b5 endproc
   59 00:4A8A 1F 40 -  -  	addr(Unimplemented)              ; $00b6 local
   60 00:4A8C 1F 40 -  -  	addr(Unimplemented)              ; $00b7 dim
   61 00:4A8E 92 41 -  -  	addr(Command_REM)                ; $00b8 rem
   62 00:4A90 FE 40 -  -  	addr(Command_LET)                ; $00b9 let
   63 00:4A92 1F 40 -  -  	addr(Unimplemented)              ; $00ba vdu
   64 00:4A94 43 41 -  -  	addr(Command_PRINT)              ; $00bb print
   65 00:4A96 1F 40 -  -  	addr(Unimplemented)              ; $00bc load
   66 00:4A98 1F 40 -  -  	addr(Unimplemented)              ; $00bd save
   67 00:4A9A 1F 40 -  -  	addr(Unimplemented)              ; $00be list
   68 00:4A9C E5 46 -  -  	addr(Command_NEW)                ; $00bf new
   69 00:4A9E AD 41 -  -  	addr(Command_RUN)                ; $00c0 run
   70 00:4AA0 1F 40 -  -  	addr(Unimplemented)              ; $00c1 read
   71 00:4AA2 1F 40 -  -  	addr(Unimplemented)              ; $00c2 data
   72 00:4AA4 1F 40 -  -  	addr(Unimplemented)              ; $00c3 restore
   73 00:4AA6 D3 40 -  -  	addr(Command_ASSERT)             ; $00c4 assert
   74 00:4AA8 98 46 -  -  	addr(Command_CLEAR)              ; $00c5 clear
   75 00:4AAA E6 40 -  -  	addr(Command_END)                ; $00c6 end
   76 00:4AAC 10 42 -  -  	addr(Command_STOP)               ; $00c7 stop
   77 00:4AAE -  -  -  -  ;
   78 00:4AAE -  -  -  -  ;	Vectors for set 1
   79 00:4AAE -  -  -  -  ;
   80 00:4AAE -  -  -  -  VectorsSet1:
   81 00:4AAE -  -  -  -  ;
   82 00:4AAE -  -  -  -  ;	Vectors for set 2
   83 00:4AAE -  -  -  -  ;
   84 00:4AAE -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:4AAE -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4AAE -  -  -  -  ; ***************************************************************************************
    2 00:4AAE -  -  -  -  ; ***************************************************************************************
    3 00:4AAE -  -  -  -  ;
    4 00:4AAE -  -  -  -  ;		Name : 		idivide.asm
    5 00:4AAE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AAE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AAE -  -  -  -  ;		Reviewed :	No
    8 00:4AAE -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4AAE -  -  -  -  ;
   10 00:4AAE -  -  -  -  ; ***************************************************************************************
   11 00:4AAE -  -  -  -  ; ***************************************************************************************
   12 00:4AAE -  -  -  -  
   13 00:4AAE -  -  -  -  ; ***************************************************************************************
   14 00:4AAE -  -  -  -  ;
   15 00:4AAE -  -  -  -  ;								Unsigned integer divide
   16 00:4AAE -  -  -  -  ;
   17 00:4AAE -  -  -  -  ; ***************************************************************************************
   18 00:4AAE -  -  -  -  
   19 00:4AAE -  -  -  -  Int32UDivide:
   20 00:4AAE 37 -  -  -  		scf
   21 00:4AAF C3 ED 4A -  		jp 		_I32UnsignedDivide		
   22 00:4AB2 -  -  -  -  
   23 00:4AB2 -  -  -  -  ; ***************************************************************************************
   24 00:4AB2 -  -  -  -  ;
   25 00:4AB2 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4AB2 -  -  -  -  ;
   27 00:4AB2 -  -  -  -  ; ***************************************************************************************
   28 00:4AB2 -  -  -  -  
   29 00:4AB2 -  -  -  -  Int32SDivide:
   30 00:4AB2 37 -  -  -  		scf
   31 00:4AB3 18 01 -  -  		jr 		_I32SDivide
   32 00:4AB5 -  -  -  -  Int32Modulus:
   33 00:4AB5 AF -  -  -  		xor 	a
   34 00:4AB6 -  -  -  -  _I32SDivide:
   35 00:4AB6 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4AB7 F5 -  -  -  		push 	af
   37 00:4AB8 08 -  -  -  		ex 		af,af'
   38 00:4AB9 -  -  -  -  
   39 00:4AB9 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4ABA D9 -  -  -  		exx
   41 00:4ABB D5 -  -  -  		push 	de
   42 00:4ABC D9 -  -  -  		exx
   43 00:4ABD -  -  -  -  
   44 00:4ABD F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4ABE AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4ABF CD DB 4A -  		call 	_I32CheckHLSignSwap
   47 00:4AC2 CD DB 4A -  		call 	_I32CheckHLSignSwap
   48 00:4AC5 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4AC6 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4AC7 F5 -  -  -  		push 	af
   51 00:4AC8 CD ED 4A -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4ACB F1 -  -  -  		pop 	af 							; get function back
   53 00:4ACC 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4ACE 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4ACF CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4AD1 C4 37 4C -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4AD4 -  -  -  -  _I32SDExit:
   58 00:4AD4 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4AD5 D1 -  -  -  		pop 	de
   60 00:4AD6 D9 -  -  -  		exx
   61 00:4AD7 D1 -  -  -  		pop 	de
   62 00:4AD8 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4AD9 08 -  -  -  		ex 		af,af'
   64 00:4ADA C9 -  -  -  		ret
   65 00:4ADB -  -  -  -  
   66 00:4ADB -  -  -  -  
   67 00:4ADB -  -  -  -  _I32CheckHLSignSwap:
   68 00:4ADB D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4ADC CB 7C -  -  		bit 	7,h
   70 00:4ADE D9 -  -  -  		exx
   71 00:4ADF 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4AE1 -  -  -  -  		;
   73 00:4AE1 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4AE3 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4AE4 CD 37 4C -  		call 	Int32Negate 				
   76 00:4AE7 F1 -  -  -  		pop 	af
   77 00:4AE8 -  -  -  -  _I32CHSPositive:
   78 00:4AE8 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4AE9 EB -  -  -  		ex 		de,hl
   80 00:4AEA D9 -  -  -  		exx		
   81 00:4AEB EB -  -  -  		ex 		de,hl
   82 00:4AEC C9 -  -  -  		ret
   83 00:4AED -  -  -  -  
   84 00:4AED -  -  -  -  ; ***************************************************************************************
   85 00:4AED -  -  -  -  ;
   86 00:4AED -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4AED -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4AED -  -  -  -  ;
   89 00:4AED -  -  -  -  ; ***************************************************************************************
   90 00:4AED -  -  -  -  
   91 00:4AED -  -  -  -  _I32UnsignedDivide:
   92 00:4AED C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4AEE D5 -  -  -  		push 	de
   94 00:4AEF D9 -  -  -  		exx
   95 00:4AF0 C5 -  -  -  		push 	bc
   96 00:4AF1 D5 -  -  -  		push 	de 							
   97 00:4AF2 D9 -  -  -  		exx
   98 00:4AF3 -  -  -  -  
   99 00:4AF3 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4AF4 -  -  -  -  
  101 00:4AF4 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4AF5 B3 -  -  -  		or 		e
  103 00:4AF6 D9 -  -  -  		exx
  104 00:4AF7 B2 -  -  -  		or 		d
  105 00:4AF8 B3 -  -  -  		or 		e
  106 00:4AF9 D9 -  -  -  		exx
  107 00:4AFA CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4AFD -  -  -  -  
  109 00:4AFD -  -  -  -  
  110 00:4AFD 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4AFE 4D -  -  -  		ld		c,l
  112 00:4AFF 21 00 00 -  		ld 		hl,$0000
  113 00:4B02 D9 -  -  -  		exx
  114 00:4B03 44 -  -  -  		ld 		b,h
  115 00:4B04 4D -  -  -  		ld		c,l
  116 00:4B05 21 00 00 -  		ld 		hl,$0000
  117 00:4B08 D9 -  -  -  		exx
  118 00:4B09 -  -  -  -  
  119 00:4B09 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4B0B -  -  -  -  _I32DivideLoop:
  121 00:4B0B F5 -  -  -  		push 	af
  122 00:4B0C -  -  -  -  
  123 00:4B0C CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4B0E CB 10 -  -  		rl 		b
  125 00:4B10 D9 -  -  -  		exx
  126 00:4B11 CB 11 -  -  		rl 		c
  127 00:4B13 CB 10 -  -  		rl 		b
  128 00:4B15 D9 -  -  -  		exx
  129 00:4B16 CB 15 -  -  		rl 		l
  130 00:4B18 CB 14 -  -  		rl 		h
  131 00:4B1A D9 -  -  -  		exx
  132 00:4B1B CB 15 -  -  		rl 		l
  133 00:4B1D CB 14 -  -  		rl 		h
  134 00:4B1F D9 -  -  -  		exx
  135 00:4B20 -  -  -  -  
  136 00:4B20 CD DD 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4B23 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4B25 -  -  -  -  
  139 00:4B25 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4B26 18 03 -  -  		jr 		_I32Next
  141 00:4B28 -  -  -  -  
  142 00:4B28 -  -  -  -  _I32Borrow:
  143 00:4B28 CD D7 4B -  		call 	Int32Add 					; A = A + M
  144 00:4B2B -  -  -  -  _I32Next:
  145 00:4B2B F1 -  -  -  		pop 	af
  146 00:4B2C 3D -  -  -  		dec 	a
  147 00:4B2D 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4B2F -  -  -  -  
  149 00:4B2F F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4B30 -  -  -  -  
  151 00:4B30 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4B31 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4B33 -  -  -  -  
  154 00:4B33 60 -  -  -  		ld  	h,b
  155 00:4B34 69 -  -  -  		ld 		l,c
  156 00:4B35 D9 -  -  -  		exx
  157 00:4B36 60 -  -  -  		ld  	h,b
  158 00:4B37 69 -  -  -  		ld 		l,c
  159 00:4B38 D9 -  -  -  		exx
  160 00:4B39 -  -  -  -  _I32Modulus1:		
  161 00:4B39 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4B3A D1 -  -  -  		pop 	de
  163 00:4B3B C1 -  -  -  		pop 	bc
  164 00:4B3C D9 -  -  -  		exx
  165 00:4B3D D1 -  -  -  		pop 	de
  166 00:4B3E C1 -  -  -  		pop 	bc
  167 00:4B3F C9 -  -  -  		ret
  168 00:4B40 -  -  -  -  
  169 00:4B40 -  -  -  -  ; ***************************************************************************************
  170 00:4B40 -  -  -  -  ;
  171 00:4B40 -  -  -  -  ;									Changes and Updates
  172 00:4B40 -  -  -  -  ;
  173 00:4B40 -  -  -  -  ; ***************************************************************************************
  174 00:4B40 -  -  -  -  ;
  175 00:4B40 -  -  -  -  ;		Date			Notes
  176 00:4B40 -  -  -  -  ;		==== 			=====
  177 00:4B40 -  -  -  -  ;
  178 00:4B40 -  -  -  -  ; ***************************************************************************************
  179 00:4B40 -  -  -  -  		
Listing for file "_build.asm"
   61 00:4B40 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4B40 -  -  -  -  ; ***************************************************************************************
    2 00:4B40 -  -  -  -  ; ***************************************************************************************
    3 00:4B40 -  -  -  -  ;
    4 00:4B40 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4B40 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B40 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B40 -  -  -  -  ;		Reviewed :	No
    8 00:4B40 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4B40 -  -  -  -  ;
   10 00:4B40 -  -  -  -  ; ***************************************************************************************
   11 00:4B40 -  -  -  -  ; ***************************************************************************************
   12 00:4B40 -  -  -  -  
   13 00:4B40 -  -  -  -  ; ***************************************************************************************
   14 00:4B40 -  -  -  -  ;
   15 00:4B40 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4B40 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4B40 -  -  -  -  ;
   18 00:4B40 -  -  -  -  ; ***************************************************************************************
   19 00:4B40 -  -  -  -  
   20 00:4B40 -  -  -  -  Int32FromString:
   21 00:4B40 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4B41 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4B42 D5 -  -  -  		push 	de
   24 00:4B43 D9 -  -  -  		exx
   25 00:4B44 D5 -  -  -  		push 	de
   26 00:4B45 -  -  -  -  
   27 00:4B45 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4B48 11 00 00 -  		ld 		de,$0000
   29 00:4B4B D9 -  -  -  		exx
   30 00:4B4C 21 00 00 -  		ld 		hl,$0000
   31 00:4B4F 11 00 00 -  		ld 		de,$0000
   32 00:4B52 D9 -  -  -  		exx
   33 00:4B53 -  -  -  -  
   34 00:4B53 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4B54 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4B56 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4B58 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4B5A 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4B5B -  -  -  -  		;
   40 00:4B5B 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4B5C F5 -  -  -  		push 	af
   42 00:4B5D FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4B5F 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4B60 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4B62 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4B63 18 01 -  -  		jr 		_I32FSMain
   47 00:4B65 -  -  -  -  _I32FSNotSigned:		
   48 00:4B65 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4B66 -  -  -  -  		;
   50 00:4B66 -  -  -  -  		; 		Main conversion loop.
   51 00:4B66 -  -  -  -  		; 		
   52 00:4B66 -  -  -  -  _I32FSMain:		
   53 00:4B66 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4B67 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4B69 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4B6B D6 20 -  -  		sub 	32
   57 00:4B6D -  -  -  -  _I32FSNotLower:
   58 00:4B6D FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4B6F 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4B71 FE 3A -  -  		cp 		'9'+1
   61 00:4B73 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4B75 FE 41 -  -  		cp 		'A'
   63 00:4B77 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4B79 FE 47 -  -  		cp 		'F'+1
   65 00:4B7B 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4B7D D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4B7F -  -  -  -  _I32FSOkay:
   68 00:4B7F D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4B81 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4B82 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4B84 03 -  -  -  		inc 	bc 							; consume character
   72 00:4B85 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4B86 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4B87 CD A1 4B -  		call 	Int32Multiply 				; result *= base
   75 00:4B8A F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4B8B 5F -  -  -  		ld 		e,a
   77 00:4B8C CD D7 4B -  		call 	Int32Add 					; and add it.
   78 00:4B8F D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4B90 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4B92 -  -  -  -  
   81 00:4B92 -  -  -  -  _I32FSExit:
   82 00:4B92 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4B93 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4B95 CC 37 4C -  		call 	z,Int32Negate
   85 00:4B98 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4B99 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4B9A D9 -  -  -  		exx
   88 00:4B9B D1 -  -  -  		pop 	de
   89 00:4B9C D9 -  -  -  		exx
   90 00:4B9D C1 -  -  -  		pop 	bc
   91 00:4B9E FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4BA0 C9 -  -  -  		ret				
   93 00:4BA1 -  -  -  -  
   94 00:4BA1 -  -  -  -  ; ***************************************************************************************
   95 00:4BA1 -  -  -  -  ;
   96 00:4BA1 -  -  -  -  ;									Changes and Updates
   97 00:4BA1 -  -  -  -  ;
   98 00:4BA1 -  -  -  -  ; ***************************************************************************************
   99 00:4BA1 -  -  -  -  ;
  100 00:4BA1 -  -  -  -  ;		Date			Notes
  101 00:4BA1 -  -  -  -  ;		==== 			=====
  102 00:4BA1 -  -  -  -  ;
  103 00:4BA1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4BA1 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4BA1 -  -  -  -  ; ***************************************************************************************
    2 00:4BA1 -  -  -  -  ; ***************************************************************************************
    3 00:4BA1 -  -  -  -  ;
    4 00:4BA1 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4BA1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BA1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BA1 -  -  -  -  ;		Reviewed :	No
    8 00:4BA1 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4BA1 -  -  -  -  ;
   10 00:4BA1 -  -  -  -  ; ***************************************************************************************
   11 00:4BA1 -  -  -  -  ; ***************************************************************************************
   12 00:4BA1 -  -  -  -  
   13 00:4BA1 -  -  -  -  Int32Multiply:
   14 00:4BA1 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4BA2 D5 -  -  -  		push 	de
   16 00:4BA3 44 -  -  -  		ld 		b,h
   17 00:4BA4 4D -  -  -  		ld 		c,l
   18 00:4BA5 21 00 00 -  		ld 		hl,$0000
   19 00:4BA8 -  -  -  -  
   20 00:4BA8 D9 -  -  -  		exx
   21 00:4BA9 C5 -  -  -  		push 	bc
   22 00:4BAA D5 -  -  -  		push 	de
   23 00:4BAB 44 -  -  -  		ld 		b,h
   24 00:4BAC 4D -  -  -  		ld 		c,l
   25 00:4BAD 21 00 00 -  		ld 		hl,$0000		
   26 00:4BB0 D9 -  -  -  		exx
   27 00:4BB1 -  -  -  -  
   28 00:4BB1 -  -  -  -  _I32MultiplyLoop:
   29 00:4BB1 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4BB3 C4 D7 4B -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4BB6 -  -  -  -  		;
   32 00:4BB6 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4BB7 CB 38 -  -  		srl 	b
   34 00:4BB9 CB 19 -  -  		rr 		c
   35 00:4BBB D9 -  -  -  		exx
   36 00:4BBC CB 18 -  -  		rr 		b
   37 00:4BBE CB 19 -  -  		rr 		c
   38 00:4BC0 -  -  -  -  		;
   39 00:4BC0 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4BC2 CB 12 -  -  		rl 		d
   41 00:4BC4 D9 -  -  -  		exx
   42 00:4BC5 CB 13 -  -  		rl 		e
   43 00:4BC7 CB 12 -  -  		rl 		d
   44 00:4BC9 -  -  -  -  
   45 00:4BC9 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4BCA B1 -  -  -  		or 		c
   47 00:4BCB D9 -  -  -  		exx
   48 00:4BCC B0 -  -  -  		or 		b
   49 00:4BCD B1 -  -  -  		or 		c
   50 00:4BCE 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4BD0 -  -  -  -  
   52 00:4BD0 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4BD1 D1 -  -  -  		pop 	de
   54 00:4BD2 C1 -  -  -  		pop 	bc
   55 00:4BD3 D9 -  -  -  		exx
   56 00:4BD4 D1 -  -  -  		pop 	de
   57 00:4BD5 C1 -  -  -  		pop 	bc
   58 00:4BD6 C9 -  -  -  		ret
   59 00:4BD7 -  -  -  -  
   60 00:4BD7 -  -  -  -  ; ***************************************************************************************
   61 00:4BD7 -  -  -  -  ;
   62 00:4BD7 -  -  -  -  ;									Changes and Updates
   63 00:4BD7 -  -  -  -  ;
   64 00:4BD7 -  -  -  -  ; ***************************************************************************************
   65 00:4BD7 -  -  -  -  ;
   66 00:4BD7 -  -  -  -  ;		Date			Notes
   67 00:4BD7 -  -  -  -  ;		==== 			=====
   68 00:4BD7 -  -  -  -  ;
   69 00:4BD7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4BD7 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4BD7 -  -  -  -  ; ***************************************************************************************
    2 00:4BD7 -  -  -  -  ; ***************************************************************************************
    3 00:4BD7 -  -  -  -  ;
    4 00:4BD7 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4BD7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BD7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BD7 -  -  -  -  ;		Reviewed :	No
    8 00:4BD7 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4BD7 -  -  -  -  ;
   10 00:4BD7 -  -  -  -  ; ***************************************************************************************
   11 00:4BD7 -  -  -  -  ; ***************************************************************************************
   12 00:4BD7 -  -  -  -  
   13 00:4BD7 -  -  -  -  ; ***************************************************************************************
   14 00:4BD7 -  -  -  -  ;
   15 00:4BD7 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4BD7 -  -  -  -  ;
   17 00:4BD7 -  -  -  -  ; ***************************************************************************************
   18 00:4BD7 -  -  -  -  
   19 00:4BD7 -  -  -  -  Int32Add:
   20 00:4BD7 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4BD8 D9 -  -  -  		exx
   22 00:4BD9 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4BDB D9 -  -  -  		exx
   24 00:4BDC C9 -  -  -  		ret
   25 00:4BDD -  -  -  -  
   26 00:4BDD -  -  -  -  ; ***************************************************************************************
   27 00:4BDD -  -  -  -  ;
   28 00:4BDD -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4BDD -  -  -  -  ;
   30 00:4BDD -  -  -  -  ; ***************************************************************************************
   31 00:4BDD -  -  -  -  
   32 00:4BDD -  -  -  -  Int32Subtract:
   33 00:4BDD AF -  -  -  		xor 	a 							; clear carry
   34 00:4BDE ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4BE0 D9 -  -  -  		exx
   36 00:4BE1 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4BE3 D9 -  -  -  		exx
   38 00:4BE4 C9 -  -  -  		ret
   39 00:4BE5 -  -  -  -  
   40 00:4BE5 -  -  -  -  ; ***************************************************************************************
   41 00:4BE5 -  -  -  -  ;
   42 00:4BE5 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4BE5 -  -  -  -  ;
   44 00:4BE5 -  -  -  -  ; ***************************************************************************************
   45 00:4BE5 -  -  -  -  
   46 00:4BE5 -  -  -  -  Int32And:
   47 00:4BE5 D9 -  -  -  		exx
   48 00:4BE6 CD EA 4B -  		call 	_I32AndHLDE
   49 00:4BE9 D9 -  -  -  		exx
   50 00:4BEA -  -  -  -  _I32AndHLDE:		
   51 00:4BEA 7C -  -  -  		ld 		a,h
   52 00:4BEB A2 -  -  -  		and 	d
   53 00:4BEC 67 -  -  -  		ld 		h,a
   54 00:4BED 7D -  -  -  		ld 		a,l
   55 00:4BEE A3 -  -  -  		and 	e
   56 00:4BEF 6F -  -  -  		ld 		l,a
   57 00:4BF0 C9 -  -  -  		ret
   58 00:4BF1 -  -  -  -  
   59 00:4BF1 -  -  -  -  ; ***************************************************************************************
   60 00:4BF1 -  -  -  -  ;
   61 00:4BF1 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4BF1 -  -  -  -  ;
   63 00:4BF1 -  -  -  -  ; ***************************************************************************************
   64 00:4BF1 -  -  -  -  
   65 00:4BF1 -  -  -  -  Int32Or:
   66 00:4BF1 D9 -  -  -  		exx
   67 00:4BF2 CD F6 4B -  		call 	_I32OrHLDE
   68 00:4BF5 D9 -  -  -  		exx
   69 00:4BF6 -  -  -  -  _I32OrHLDE:		
   70 00:4BF6 7C -  -  -  		ld 		a,h
   71 00:4BF7 B2 -  -  -  		or 		d
   72 00:4BF8 67 -  -  -  		ld 		h,a
   73 00:4BF9 7D -  -  -  		ld 		a,l
   74 00:4BFA B3 -  -  -  		or 		e
   75 00:4BFB 6F -  -  -  		ld 		l,a
   76 00:4BFC C9 -  -  -  		ret
   77 00:4BFD -  -  -  -  
   78 00:4BFD -  -  -  -  ; ***************************************************************************************
   79 00:4BFD -  -  -  -  ;
   80 00:4BFD -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4BFD -  -  -  -  ;
   82 00:4BFD -  -  -  -  ; ***************************************************************************************
   83 00:4BFD -  -  -  -  
   84 00:4BFD -  -  -  -  Int32Xor:
   85 00:4BFD D9 -  -  -  		exx
   86 00:4BFE CD 02 4C -  		call 	_I32XorHLDE
   87 00:4C01 D9 -  -  -  		exx
   88 00:4C02 -  -  -  -  _I32XorHLDE:		
   89 00:4C02 7C -  -  -  		ld 		a,h
   90 00:4C03 AA -  -  -  		xor 	d
   91 00:4C04 67 -  -  -  		ld 		h,a
   92 00:4C05 7D -  -  -  		ld 		a,l
   93 00:4C06 AB -  -  -  		xor 	e
   94 00:4C07 6F -  -  -  		ld 		l,a
   95 00:4C08 C9 -  -  -  		ret
   96 00:4C09 -  -  -  -  
   97 00:4C09 -  -  -  -  ; ***************************************************************************************
   98 00:4C09 -  -  -  -  ;
   99 00:4C09 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4C09 -  -  -  -  ;
  101 00:4C09 -  -  -  -  ; ***************************************************************************************
  102 00:4C09 -  -  -  -  
  103 00:4C09 -  -  -  -  Int32Zero:
  104 00:4C09 D9 -  -  -  		exx
  105 00:4C0A 7D -  -  -  		ld 		a,l
  106 00:4C0B B4 -  -  -  		or 		h
  107 00:4C0C D9 -  -  -  		exx
  108 00:4C0D B5 -  -  -  		or 		l
  109 00:4C0E B4 -  -  -  		or 		h
  110 00:4C0F C9 -  -  -  		ret
  111 00:4C10 -  -  -  -  
  112 00:4C10 -  -  -  -  ; ***************************************************************************************
  113 00:4C10 -  -  -  -  ;
  114 00:4C10 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4C10 -  -  -  -  ;
  116 00:4C10 -  -  -  -  ; ***************************************************************************************
  117 00:4C10 -  -  -  -  
  118 00:4C10 -  -  -  -  Int32Compare:
  119 00:4C10 E5 -  -  -  		push 	hl 							; save HL
  120 00:4C11 AF -  -  -  		xor 	a 							; clear carry
  121 00:4C12 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4C14 D9 -  -  -  		exx
  123 00:4C15 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4C16 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4C18 -  -  -  -  		;
  126 00:4C18 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4C19 E2 20 4C -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4C1C 78 -  -  -  		ld 		a,b
  129 00:4C1D EE 80 -  -  		xor 	$80
  130 00:4C1F 47 -  -  -  		ld 		b,a
  131 00:4C20 -  -  -  -  _I32CNoOverflow:
  132 00:4C20 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4C21 B5 -  -  -  		or 		l
  134 00:4C22 D9 -  -  -  		exx 
  135 00:4C23 B4 -  -  -  		or 		h
  136 00:4C24 B5 -  -  -  		or 		l
  137 00:4C25 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4C27 -  -  -  -  		;
  139 00:4C27 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4C28 CB 78 -  -  		bit 	7,b
  141 00:4C2A D9 -  -  -  		exx
  142 00:4C2B 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4C2D 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4C2F 3E FF -  -  		ld 		a,$FF
  145 00:4C31 -  -  -  -  _I32NotPos:
  146 00:4C31 D9 -  -  -  		exx
  147 00:4C32 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4C33 D9 -  -  -  		exx
  149 00:4C34 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4C35 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4C36 C9 -  -  -  		ret
  152 00:4C37 -  -  -  -  
  153 00:4C37 -  -  -  -  ; ***************************************************************************************
  154 00:4C37 -  -  -  -  ;
  155 00:4C37 -  -  -  -  ;										Negate HL'HL
  156 00:4C37 -  -  -  -  ;
  157 00:4C37 -  -  -  -  ; ***************************************************************************************
  158 00:4C37 -  -  -  -  
  159 00:4C37 -  -  -  -  Int32Negate:
  160 00:4C37 AF -  -  -  		xor 	a
  161 00:4C38 CD 41 4C -  		call 	_I32NSubtract
  162 00:4C3B D9 -  -  -  		exx
  163 00:4C3C CD 41 4C -  		call 	_I32NSubtract
  164 00:4C3F D9 -  -  -  		exx
  165 00:4C40 C9 -  -  -  		ret
  166 00:4C41 -  -  -  -  _I32NSubtract:
  167 00:4C41 D5 -  -  -  		push 	de
  168 00:4C42 EB -  -  -  		ex 		de,hl
  169 00:4C43 21 00 00 -  		ld 		hl,$0000
  170 00:4C46 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4C48 D1 -  -  -  		pop 	de
  172 00:4C49 C9 -  -  -  		ret
  173 00:4C4A -  -  -  -  		
  174 00:4C4A -  -  -  -  ; ***************************************************************************************
  175 00:4C4A -  -  -  -  ;
  176 00:4C4A -  -  -  -  ;									Changes and Updates
  177 00:4C4A -  -  -  -  ;
  178 00:4C4A -  -  -  -  ; ***************************************************************************************
  179 00:4C4A -  -  -  -  ;
  180 00:4C4A -  -  -  -  ;		Date			Notes
  181 00:4C4A -  -  -  -  ;		==== 			=====
  182 00:4C4A -  -  -  -  ;
  183 00:4C4A -  -  -  -  ; ***************************************************************************************
  184 00:4C4A -  -  -  -  		
Listing for file "_build.asm"
   64 00:4C4A -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4C4A -  -  -  -  ; ***************************************************************************************
    2 00:4C4A -  -  -  -  ; ***************************************************************************************
    3 00:4C4A -  -  -  -  ;
    4 00:4C4A -  -  -  -  ;		Name : 		itostring.asm
    5 00:4C4A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C4A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C4A -  -  -  -  ;		Reviewed :	No
    8 00:4C4A -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4C4A -  -  -  -  ;
   10 00:4C4A -  -  -  -  ; ***************************************************************************************
   11 00:4C4A -  -  -  -  ;
   12 00:4C4A -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4C4A -  -  -  -  ;
   14 00:4C4A -  -  -  -  ; ***************************************************************************************
   15 00:4C4A -  -  -  -  
   16 00:4C4A -  -  -  -  Int32ToString:
   17 00:4C4A C5 -  -  -  		push 	bc 							; save string start
   18 00:4C4B D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4C4C E5 -  -  -  		push 	hl
   20 00:4C4D 11 00 00 -  		ld	 	de,$0000
   21 00:4C50 D9 -  -  -  		exx
   22 00:4C51 D5 -  -  -  		push 	de
   23 00:4C52 E5 -  -  -  		push 	hl
   24 00:4C53 11 00 00 -  		ld 		de,$000
   25 00:4C56 D9 -  -  -  		exx
   26 00:4C57 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4C58 -  -  -  -  		;
   28 00:4C58 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4C5A 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4C5C ED 44 -  -  		neg 								; negate base and put in E
   31 00:4C5E 5F -  -  -  		ld 		e,a
   32 00:4C5F -  -  -  -  		;
   33 00:4C5F D9 -  -  -  		exx 								; is it -ve ?
   34 00:4C60 CB 7C -  -  		bit 	7,h
   35 00:4C62 D9 -  -  -  		exx
   36 00:4C63 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4C65 -  -  -  -  		;
   38 00:4C65 CD 37 4C -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4C68 -  -  -  -  		;
   40 00:4C68 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4C6A 02 -  -  -  		ld 		(bc),a
   42 00:4C6B 03 -  -  -  		inc 	bc
   43 00:4C6C -  -  -  -  _I32TSNotNegative:	
   44 00:4C6C CD 7A 4C -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4C6F -  -  -  -  _I32TSExit:
   46 00:4C6F 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4C71 02 -  -  -  		ld 		(bc),a 
   48 00:4C72 -  -  -  -  
   49 00:4C72 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4C73 E1 -  -  -  		pop 	hl
   51 00:4C74 D1 -  -  -  		pop 	de
   52 00:4C75 D9 -  -  -  		exx
   53 00:4C76 E1 -  -  -  		pop 	hl
   54 00:4C77 D1 -  -  -  		pop 	de
   55 00:4C78 C1 -  -  -  		pop 	bc
   56 00:4C79 C9 -  -  -  		ret
   57 00:4C7A -  -  -  -  
   58 00:4C7A -  -  -  -  _I32RecursiveConvert:
   59 00:4C7A CD AE 4A -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4C7D F5 -  -  -  		push 	af 							; save remainder
   61 00:4C7E CD 09 4C -  		call 	Int32Zero		 			; check result is non zero
   62 00:4C81 C4 7A 4C -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4C84 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4C85 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4C87 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4C89 C6 07 -  -  		add 	a,7
   67 00:4C8B -  -  -  -  _I32NotHex:
   68 00:4C8B C6 30 -  -  		add 	a,48
   69 00:4C8D 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4C8E 03 -  -  -  		inc 	bc
   71 00:4C8F C9 -  -  -  		ret		
   72 00:4C90 -  -  -  -  
   73 00:4C90 -  -  -  -  ; ***************************************************************************************
   74 00:4C90 -  -  -  -  ;
   75 00:4C90 -  -  -  -  ;									Changes and Updates
   76 00:4C90 -  -  -  -  ;
   77 00:4C90 -  -  -  -  ; ***************************************************************************************
   78 00:4C90 -  -  -  -  ;
   79 00:4C90 -  -  -  -  ;		Date			Notes
   80 00:4C90 -  -  -  -  ;		==== 			=====
   81 00:4C90 -  -  -  -  ;
   82 00:4C90 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4C90 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4C90 -  -  -  -  ; ***************************************************************************************
    2 00:4C90 -  -  -  -  ; ***************************************************************************************
    3 00:4C90 -  -  -  -  ;
    4 00:4C90 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4C90 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C90 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C90 -  -  -  -  ;		Reviewed :	No
    8 00:4C90 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4C90 -  -  -  -  ;
   10 00:4C90 -  -  -  -  ; ***************************************************************************************
   11 00:4C90 -  -  -  -  ; ***************************************************************************************
   12 00:4C90 -  -  -  -  
   13 00:4C90 -  -  -  -  #ifdef AQUARIUS
   14 00:4C90 -  -  -  -  
   15 00:4C90 -  -  -  -  ; ***************************************************************************************
   16 00:4C90 -  -  -  -  ;
   17 00:4C90 -  -  -  -  ;								Initialise system stuff
   18 00:4C90 -  -  -  -  ;
   19 00:4C90 -  -  -  -  ; ***************************************************************************************
   20 00:4C90 -  -  -  -  
   21 00:4C90 -  -  -  -  SYSInitialise:
   22 00:4C90 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4C92 CD 98 4C -  	call 	SYSPrintChar
   24 00:4C95 C9 -  -  -  	ret
   25 00:4C96 -  -  -  -  
   26 00:4C96 -  -  -  -  ; ***************************************************************************************
   27 00:4C96 -  -  -  -  ;
   28 00:4C96 -  -  -  -  ;								Terminate system stuff
   29 00:4C96 -  -  -  -  ;
   30 00:4C96 -  -  -  -  ; ***************************************************************************************
   31 00:4C96 -  -  -  -  
   32 00:4C96 -  -  -  -  SYSTerminate:
   33 00:4C96 18 FE -  -  	jr 		SYSTerminate
   34 00:4C98 -  -  -  -  
   35 00:4C98 -  -  -  -  ; ***************************************************************************************
   36 00:4C98 -  -  -  -  ;
   37 00:4C98 -  -  -  -  ;								Print A character
   38 00:4C98 -  -  -  -  ;
   39 00:4C98 -  -  -  -  ; ***************************************************************************************
   40 00:4C98 -  -  -  -  
   41 00:4C98 -  -  -  -  SYSPrintChar:
   42 00:4C98 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4C99 C5 -  -  -  	push 	bc
   44 00:4C9A D5 -  -  -  	push 	de
   45 00:4C9B E5 -  -  -  	push 	hl
   46 00:4C9C DD E5 -  -  	push 	ix
   47 00:4C9E FD E5 -  -  	push 	iy
   48 00:4CA0 D9 -  -  -  	exx
   49 00:4CA1 C5 -  -  -  	push 	bc
   50 00:4CA2 D5 -  -  -  	push 	de
   51 00:4CA3 E5 -  -  -  	push 	hl
   52 00:4CA4 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4CA7 E1 -  -  -  	pop 	hl
   54 00:4CA8 D1 -  -  -  	pop 	de
   55 00:4CA9 C1 -  -  -  	pop 	bc
   56 00:4CAA D9 -  -  -  	exx
   57 00:4CAB FD E1 -  -  	pop 	iy
   58 00:4CAD DD E1 -  -  	pop 	ix
   59 00:4CAF E1 -  -  -  	pop 	hl
   60 00:4CB0 D1 -  -  -  	pop 	de
   61 00:4CB1 C1 -  -  -  	pop 	bc
   62 00:4CB2 F1 -  -  -  	pop 	af
   63 00:4CB3 C9 -  -  -  	ret		
   64 00:4CB4 -  -  -  -  
   65 00:4CB4 -  -  -  -  ; ***************************************************************************************
   66 00:4CB4 -  -  -  -  ;
   67 00:4CB4 -  -  -  -  ;									Print Newline
   68 00:4CB4 -  -  -  -  ;
   69 00:4CB4 -  -  -  -  ; ***************************************************************************************
   70 00:4CB4 -  -  -  -  
   71 00:4CB4 -  -  -  -  SYSPrintCRLF:
   72 00:4CB4 F5 -  -  -  	push 	af
   73 00:4CB5 3E 0D -  -  	ld 		a,13
   74 00:4CB7 CD 98 4C -  	call 	SYSPrintChar
   75 00:4CBA 3E 0A -  -  	ld 		a,10
   76 00:4CBC CD 98 4C -  	call 	SYSPrintChar
   77 00:4CBF F1 -  -  -  	pop 	af
   78 00:4CC0 C9 -  -  -  	ret
   79 00:4CC1 -  -  -  -  
   80 00:4CC1 -  -  -  -  ; ***************************************************************************************
   81 00:4CC1 -  -  -  -  ;
   82 00:4CC1 -  -  -  -  ;									Get time into HL'HL
   83 00:4CC1 -  -  -  -  ;
   84 00:4CC1 -  -  -  -  ; ***************************************************************************************
   85 00:4CC1 -  -  -  -  
   86 00:4CC1 -  -  -  -  SYSGetTimer:
   87 00:4CC1 DB 00 -  -   	in 		a,($00)
   88 00:4CC3 6F -  -  -   	ld 		l,a
   89 00:4CC4 DB 01 -  -   	in 		a,($01)
   90 00:4CC6 67 -  -  -   	ld 		h,a
   91 00:4CC7 D9 -  -  -   	exx
   92 00:4CC8 DB 02 -  -   	in 		a,($02)
   93 00:4CCA 6F -  -  -   	ld 		l,a
   94 00:4CCB DB 03 -  -   	in 		a,($03)
   95 00:4CCD 67 -  -  -   	ld 		h,a
   96 00:4CCE D9 -  -  -   	exx
   97 00:4CCF C9 -  -  -  	ret 	
   98 00:4CD0 -  -  -  -  	
   99 00:4CD0 -  -  -  -  #endif
  100 00:4CD0 -  -  -  -  
  101 00:4CD0 -  -  -  -  ; ***************************************************************************************
  102 00:4CD0 -  -  -  -  ;
  103 00:4CD0 -  -  -  -  ;									Changes and Updates
  104 00:4CD0 -  -  -  -  ;
  105 00:4CD0 -  -  -  -  ; ***************************************************************************************
  106 00:4CD0 -  -  -  -  ;
  107 00:4CD0 -  -  -  -  ;		Date			Notes
  108 00:4CD0 -  -  -  -  ;		==== 			=====
  109 00:4CD0 -  -  -  -  ;
  110 00:4CD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4CD0 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4CD0 -  -  -  -  ; ***************************************************************************************
    2 00:4CD0 -  -  -  -  ; ***************************************************************************************
    3 00:4CD0 -  -  -  -  ;
    4 00:4CD0 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4CD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CD0 -  -  -  -  ;		Reviewed :	No
    8 00:4CD0 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4CD0 -  -  -  -  ;
   10 00:4CD0 -  -  -  -  ; ***************************************************************************************
   11 00:4CD0 -  -  -  -  ; ***************************************************************************************
   12 00:4CD0 -  -  -  -  
   13 00:4CD0 -  -  -  -  #ifdef CLEANEZ80
   14 00:4CD0             
   15 00:4CD0             ; ***************************************************************************************
   16 00:4CD0             ;
   17 00:4CD0             ;								Initialise system stuff
   18 00:4CD0             ;
   19 00:4CD0             ; ***************************************************************************************
   20 00:4CD0             
   21 00:4CD0             SYSInitialise:
   22 00:4CD0             	ret
   23 00:4CD0             
   24 00:4CD0             ; ***************************************************************************************
   25 00:4CD0             ;
   26 00:4CD0             ;								Terminate system stuff
   27 00:4CD0             ;
   28 00:4CD0             ; ***************************************************************************************
   29 00:4CD0             
   30 00:4CD0             SYSTerminate:
   31 00:4CD0             	ret
   32 00:4CD0             
   33 00:4CD0             ; ***************************************************************************************
   34 00:4CD0             ;
   35 00:4CD0             ;								Print A character
   36 00:4CD0             ;
   37 00:4CD0             ; ***************************************************************************************
   38 00:4CD0             
   39 00:4CD0             SYSPrintChar:
   40 00:4CD0             	ret		
   41 00:4CD0             
   42 00:4CD0             ; ***************************************************************************************
   43 00:4CD0             ;
   44 00:4CD0             ;									Print Newline
   45 00:4CD0             ;
   46 00:4CD0             ; ***************************************************************************************
   47 00:4CD0             
   48 00:4CD0             SYSPrintCRLF:
   49 00:4CD0             	ret
   50 00:4CD0             
   51 00:4CD0             ; ***************************************************************************************
   52 00:4CD0             ;
   53 00:4CD0             ;									Get time into HL'HL
   54 00:4CD0             ;
   55 00:4CD0             ; ***************************************************************************************
   56 00:4CD0             
   57 00:4CD0             SYSGetTimer:
   58 00:4CD0             	ret
   59 00:4CD0             
   60 00:4CD0             #endif
   61 00:4CD0 -  -  -  -  
   62 00:4CD0 -  -  -  -  ; ***************************************************************************************
   63 00:4CD0 -  -  -  -  ;
   64 00:4CD0 -  -  -  -  ;									Changes and Updates
   65 00:4CD0 -  -  -  -  ;
   66 00:4CD0 -  -  -  -  ; ***************************************************************************************
   67 00:4CD0 -  -  -  -  ;
   68 00:4CD0 -  -  -  -  ;		Date			Notes
   69 00:4CD0 -  -  -  -  ;		==== 			=====
   70 00:4CD0 -  -  -  -  ;
   71 00:4CD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4CD0 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4CD0 -  -  -  -  ; ***************************************************************************************
    2 00:4CD0 -  -  -  -  ; ***************************************************************************************
    3 00:4CD0 -  -  -  -  ;
    4 00:4CD0 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4CD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CD0 -  -  -  -  ;		Reviewed :	No
    8 00:4CD0 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4CD0 -  -  -  -  ;
   10 00:4CD0 -  -  -  -  ; ***************************************************************************************
   11 00:4CD0 -  -  -  -  ; ***************************************************************************************
   12 00:4CD0 -  -  -  -  
   13 00:4CD0 -  -  -  -  #ifdef TI84
   14 00:4CD0             
   15 00:4CD0             ; ***************************************************************************************
   16 00:4CD0             ;
   17 00:4CD0             ;								Initialise system stuff
   18 00:4CD0             ;
   19 00:4CD0             ; ***************************************************************************************
   20 00:4CD0             
   21 00:4CD0             SYSInitialise:
   22 00:4CD0             	di
   23 00:4CD0             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4CD0             	ld 		(_IYTemp84),iy
   25 00:4CD0             	ret
   26 00:4CD0             
   27 00:4CD0             ; ***************************************************************************************
   28 00:4CD0             ;
   29 00:4CD0             ;								Terminate system stuff
   30 00:4CD0             ;
   31 00:4CD0             ; ***************************************************************************************
   32 00:4CD0             
   33 00:4CD0             SYSTerminate:
   34 00:4CD0             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4CD0             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4CD0             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4CD0             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4CD0             	ei
   39 00:4CD0             	ret 										; and exit.
   40 00:4CD0             
   41 00:4CD0             _StackTemp84:									; temp var for TI84 only.
   42 00:4CD0             	.dw 	0,0
   43 00:4CD0             _IYTemp84:
   44 00:4CD0             	.dw 	0,0		
   45 00:4CD0             
   46 00:4CD0             ; ***************************************************************************************
   47 00:4CD0             ;
   48 00:4CD0             ;								Print A character
   49 00:4CD0             ;
   50 00:4CD0             ; ***************************************************************************************
   51 00:4CD0             
   52 00:4CD0             SYSPrintChar:
   53 00:4CD0             	push 	af 									; we stack everything including alt registers
   54 00:4CD0             	push 	bc
   55 00:4CD0             	push 	de
   56 00:4CD0             	push 	hl
   57 00:4CD0             	push 	ix
   58 00:4CD0             	push 	iy
   59 00:4CD0             	exx
   60 00:4CD0             	push 	bc
   61 00:4CD0             	push 	de
   62 00:4CD0             	push 	hl
   63 00:4CD0             
   64 00:4CD0             	ld 		iy,(_IYTemp84)
   65 00:4CD0             	call 	_PutC 								; print A as character
   66 00:4CD0             	di
   67 00:4CD0             	ld 		(_IYTemp84),iy
   68 00:4CD0             
   69 00:4CD0             	pop 	hl
   70 00:4CD0             	pop 	de
   71 00:4CD0             	pop 	bc
   72 00:4CD0             	exx
   73 00:4CD0             	pop 	iy
   74 00:4CD0             	pop 	ix
   75 00:4CD0             	pop 	hl
   76 00:4CD0             	pop 	de
   77 00:4CD0             	pop 	bc
   78 00:4CD0             	pop 	af
   79 00:4CD0             	ret		
   80 00:4CD0             
   81 00:4CD0             ; ***************************************************************************************
   82 00:4CD0             ;
   83 00:4CD0             ;									Print Newline
   84 00:4CD0             ;
   85 00:4CD0             ; ***************************************************************************************
   86 00:4CD0             
   87 00:4CD0             SYSPrintCRLF:
   88 00:4CD0             	push 	af 									; we stack everything including alt registers
   89 00:4CD0             	push 	bc
   90 00:4CD0             	push 	de
   91 00:4CD0             	push 	hl
   92 00:4CD0             	push 	ix
   93 00:4CD0             	push 	iy
   94 00:4CD0             	exx
   95 00:4CD0             	push 	bc
   96 00:4CD0             	push 	de
   97 00:4CD0             	push 	hl
   98 00:4CD0             
   99 00:4CD0             	ld 		iy,(_IYTemp84)
  100 00:4CD0             	call 	_newline
  101 00:4CD0             	di
  102 00:4CD0             	ld 		(_IYTemp84),iy
  103 00:4CD0             
  104 00:4CD0             	pop 	hl
  105 00:4CD0             	pop 	de
  106 00:4CD0             	pop 	bc
  107 00:4CD0             	exx
  108 00:4CD0             	pop 	iy
  109 00:4CD0             	pop 	ix
  110 00:4CD0             	pop 	hl
  111 00:4CD0             	pop 	de
  112 00:4CD0             	pop 	bc
  113 00:4CD0             	pop 	af
  114 00:4CD0             	ret
  115 00:4CD0             
  116 00:4CD0             ; ***************************************************************************************
  117 00:4CD0             ;
  118 00:4CD0             ;									Get time into HL'HL
  119 00:4CD0             ;
  120 00:4CD0             ; ***************************************************************************************
  121 00:4CD0             
  122 00:4CD0             SYSGetTimer:
  123 00:4CD0             	ld 		hl,$1234
  124 00:4CD0             	exx
  125 00:4CD0             	ld 		hl,$5678
  126 00:4CD0             	exx
  127 00:4CD0             	ret
  128 00:4CD0             
  129 00:4CD0             #endif
  130 00:4CD0 -  -  -  -  
  131 00:4CD0 -  -  -  -  ; ***************************************************************************************
  132 00:4CD0 -  -  -  -  ;
  133 00:4CD0 -  -  -  -  ;									Changes and Updates
  134 00:4CD0 -  -  -  -  ;
  135 00:4CD0 -  -  -  -  ; ***************************************************************************************
  136 00:4CD0 -  -  -  -  ;
  137 00:4CD0 -  -  -  -  ;		Date			Notes
  138 00:4CD0 -  -  -  -  ;		==== 			=====
  139 00:4CD0 -  -  -  -  ;
  140 00:4CD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4CD0 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4CD0 -  -  -  -  ; ***************************************************************************************
    2 00:4CD0 -  -  -  -  ; ***************************************************************************************
    3 00:4CD0 -  -  -  -  ;
    4 00:4CD0 -  -  -  -  ;		Name : 		basic.asm
    5 00:4CD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CD0 -  -  -  -  ;		Reviewed :	No
    8 00:4CD0 -  -  -  -  ;		Purpose :	Main program.
    9 00:4CD0 -  -  -  -  ;
   10 00:4CD0 -  -  -  -  ; ***************************************************************************************
   11 00:4CD0 -  -  -  -  ; ***************************************************************************************
   12 00:4CD0 -  -  -  -  
   13 00:4CD0 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 21 01 00 B8 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0C 02 00 
              03 04 0C 0E 
              1B 8F 46 6D 
              80 0C 03 00 
              03 04 0C 0E 
              1C 8F 46 6C 
              80 0C 04 00 
              03 04 0C 0E 
              1D 8F 46 6B 
              80 0C 05 00 
              03 04 0C 0E 
              1E 8F 46 6A 
              80 0C 06 00 
              03 04 0C 0E 
              1F 8F 46 69 
              80 0C 07 00 
              03 04 0C 0E 
              20 8F 46 68 
              80 0C 08 00 
              03 04 0C 0E 
              21 8F 46 67 
              80 0C 09 00 
              03 04 0C 0E 
              22 8F 46 66 
              80 0C 0A 00 
              00 0C 0C 0E 
              1B 8F 46 65 
              80 0C 0B 00 
              00 1B 8F 43 
              89 4C 85 4C 
              80 09 0C 00 
              00 1B 1C 8F 
              4B 80 0B 0D 
              00 00 1B 1D 
              8F 44 85 42 
              80 0C 0E 00 
              00 1C 1B 8F 
              8A 41 8A 42 
              80 00 -  -  	.db	$21,$01,$00,$b8,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0c,$02,$00,$03,$04,$0c,$0e,$1b,$8f,$46,$6d,$80,$0c,$03,$00,$03,$04,$0c,$0e,$1c,$8f,$46,$6c,$80,$0c,$04,$00,$03,$04,$0c,$0e,$1d,$8f,$46,$6b,$80,$0c,$05,$00,$03,$04,$0c,$0e,$1e,$8f,$46,$6a,$80,$0c,$06,$00,$03,$04,$0c,$0e,$1f,$8f,$46,$69,$80,$0c,$07,$00,$03,$04,$0c,$0e,$20,$8f,$46,$68,$80,$0c,$08,$00,$03,$04,$0c,$0e,$21,$8f,$46,$67,$80,$0c,$09,$00,$03,$04,$0c,$0e,$22,$8f,$46,$66,$80,$0c,$0a,$00,$00,$0c,$0c,$0e,$1b,$8f,$46,$65,$80,$0c,$0b,$00,$00,$1b,$8f,$43,$89,$4c,$85,$4c,$80,$09,$0c,$00,$00,$1b,$1c,$8f,$4b,$80,$0b,$0d,$00,$00,$1b,$1d,$8f,$44,$85,$42,$80,$0c,$0e,$00,$00,$1c,$1b,$8f,$8a,$41,$8a,$42,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:50BA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:60BA -  -  -  -  EndTestInstance:
   18 00:60BA -  -  -  -  		
   19 00:60BA -  -  -  -  ; ***************************************************************************************
   20 00:60BA -  -  -  -  ;
   21 00:60BA -  -  -  -  ;									Changes and Updates
   22 00:60BA -  -  -  -  ;
   23 00:60BA -  -  -  -  ; ***************************************************************************************
   24 00:60BA -  -  -  -  ;
   25 00:60BA -  -  -  -  ;		Date			Notes
   26 00:60BA -  -  -  -  ;		==== 			=====
   27 00:60BA -  -  -  -  ;
   28 00:60BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:60BA -  -  -  -  FinalAddress:
