    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_LINENO = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_LINENO
   63 00:0000             	ld a,ERRID_LINENO
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_MEMORY = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_MEMORY
   70 00:0000             	ld a,ERRID_MEMORY
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOCOMMA = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   77 00:0000             	ld a,ERRID_NOCOMMA
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NODOLLAR = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   84 00:0000             	ld a,ERRID_NODOLLAR
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOLBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   91 00:0000             	ld a,ERRID_NOLBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NORBRACKET = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   98 00:0000             	ld a,ERRID_NORBRACKET
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NOTREF = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NOTREF
  105 00:0000             	ld a,ERRID_NOTREF
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_STOP = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_STOP
  112 00:0000             	ld a,ERRID_STOP
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_SYNTAX = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_SYNTAX
  119 00:0000             	ld a,ERRID_SYNTAX
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_TODO = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_TODO
  126 00:0000             	ld a,ERRID_TODO
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  133 00:0000             	ld a,ERRID_UNKNOWNVAR
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 21 40 40 -  		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:4003 31 FF BF -  		ld 		sp,$BFFF
   41 00:4006 -  -  -  -  #endif
   42 00:4006 -  -  -  -  
   43 00:4006 -  -  -  -  #endif
   44 00:4006 CD 57 4D -  		call 	SYSInitialise
   45 00:4009 11 00 50 -  		ld 		de,TestInstance
   46 00:400C 21 2D 60 -  		ld 		hl,EndTestInstance
   47 00:400F CD BE 47 -  		call 	SetCurrentInstance
   48 00:4012 -  -  -  -  
   49 00:4012 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:4014 32 60 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:4017 -  -  -  -  		
   52 00:4017 C3 7C 42 -  		jp 		Command_RUN
   53 00:401A -  -  -  -  
   54 00:401A -  -  -  -  WarmStart:		
   55 00:401A 3E 2A -  -  		ld 		a,'*'
   56 00:401C CD 5F 4D -  		call 	SYSPrintChar
   57 00:401F CD 5D 4D -  		call 	SYSTerminate
   58 00:4022 -  -  -  -  
   59 00:4022 -  -  -  -  Unimplemented:
   60 00:4022 3E 05 C3 23 
              43 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:4027 -  -  -  -  Int32DivZeroHandler:
   62 00:4027 3E 06 C3 23 
              43 -  -  -  		ERR_DIVZERO
   63 00:402C -  -  -  -  
   64 00:402C -  -  -  -  ; ***************************************************************************************
   65 00:402C -  -  -  -  ;
   66 00:402C -  -  -  -  ;									Changes and Updates
   67 00:402C -  -  -  -  ;
   68 00:402C -  -  -  -  ; ***************************************************************************************
   69 00:402C -  -  -  -  ;
   70 00:402C -  -  -  -  ;		Date			Notes
   71 00:402C -  -  -  -  ;		==== 			=====
   72 00:402C -  -  -  -  ;
   73 00:402C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:402C -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:402C -  -  -  -  ; ***************************************************************************************
    2 00:402C -  -  -  -  ; ***************************************************************************************
    3 00:402C -  -  -  -  ;
    4 00:402C -  -  -  -  ;		Name : 		01data.asm
    5 00:402C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:402C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:402C -  -  -  -  ;		Reviewed :	No
    8 00:402C -  -  -  -  ;		Purpose :	Data space
    9 00:402C -  -  -  -  ;
   10 00:402C -  -  -  -  ; ***************************************************************************************
   11 00:402C -  -  -  -  ; ***************************************************************************************
   12 00:402C -  -  -  -  
   13 00:402C -  -  -  -  ; ***************************************************************************************
   14 00:402C -  -  -  -  ;
   15 00:402C -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:402C -  -  -  -  ;				LD (xxx),rr etc.
   17 00:402C -  -  -  -  ;
   18 00:402C -  -  -  -  ; ***************************************************************************************
   19 00:402C -  -  -  -  
   20 00:402C -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:402C -  -  -  -  
   22 00:402C -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:402C -  -  -  -  											; must be power of 2. 
   24 00:402C -  -  -  -  
   25 00:402C -  -  -  -  ; ***************************************************************************************
   26 00:402C -  -  -  -  ;
   27 00:402C -  -  -  -  ;								Defines the current instance
   28 00:402C -  -  -  -  ;
   29 00:402C -  -  -  -  ; ***************************************************************************************
   30 00:402C -  -  -  -  
   31 00:402C -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:402C 00 00 00 00 		.dw 	0,0
   33 00:4030 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:4030 00 00 00 00 		.dw 	0,0		
   35 00:4034 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4034 00 00 00 00 		.dw 	0,0 							
   37 00:4038 -  -  -  -  
   38 00:4038 -  -  -  -  ; ***************************************************************************************
   39 00:4038 -  -  -  -  ;
   40 00:4038 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4038 -  -  -  -  ;
   42 00:4038 -  -  -  -  ; ***************************************************************************************
   43 00:4038 -  -  -  -  
   44 00:4038 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4038 00 00 00 00 		.dw 	0,0
   46 00:403C -  -  -  -  
   47 00:403C -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:403C 00 00 00 00 		.dw 	0,0		
   49 00:4040 -  -  -  -  
   50 00:4040 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:4040 00 00 00 00 		.dw 	0,0
   52 00:4044 -  -  -  -  
   53 00:4044 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4044 00 00 00 00 		.dw 	0,0
   55 00:4048 -  -  -  -  
   56 00:4048 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4048 00 00 00 00 		.dw 	0,0		
   58 00:404C -  -  -  -  
   59 00:404C -  -  -  -  ;
   60 00:404C -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:404C -  -  -  -  ;
   62 00:404C -  -  -  -  
   63 00:404C -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:404C 00 00 00 00 		.dw 	0,0
   65 00:4050 -  -  -  -  		
   66 00:4050 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:4050 00 00 00 00 		.dw 	0,0
   68 00:4054 -  -  -  -  
   69 00:4054 -  -  -  -  ; ***************************************************************************************
   70 00:4054 -  -  -  -  ;
   71 00:4054 -  -  -  -  ;										Run variables
   72 00:4054 -  -  -  -  ;
   73 00:4054 -  -  -  -  ; ***************************************************************************************
   74 00:4054 -  -  -  -  
   75 00:4054 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:4054 00 00 00 00 		.dw 	0,0
   77 00:4058 -  -  -  -  
   78 00:4058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:4058 00 00 00 00 		.dw 	0,0
   80 00:405C -  -  -  -  		
   81 00:405C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:405C 00 00 00 00 		.dw 	0,0
   83 00:4060 -  -  -  -  
   84 00:4060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:4060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4066 -  -  -  -  
   87 00:4066 -  -  -  -  AConvert: 									; used for address conversions.
   88 00:4066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:406C -  -  -  -  		
   90 00:406C -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:406C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:407C -  -  -  -  
   93 00:407C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:407C 00 00 -  -  		.dw 	0
   95 00:407E -  -  -  -  
   96 00:407E -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:407E 00 00 -  -  		.dw 	0 
   98 00:4080 -  -  -  -  		
   99 00:4080 -  -  -  -  ; ***************************************************************************************
  100 00:4080 -  -  -  -  ;
  101 00:4080 -  -  -  -  ;									Variable Information
  102 00:4080 -  -  -  -  ;
  103 00:4080 -  -  -  -  ; ***************************************************************************************
  104 00:4080 -  -  -  -  
  105 00:4080 -  -  -  -  VarNameStart: 								; first byte of name
  106 00:4080 00 00 00 00 		.dw 	0,0
  107 00:4084 -  -  -  -  VarHash: 									; name hash value
  108 00:4084 00 00 -  -  		.dw 	0		
  109 00:4086 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 00:4086 00 00 00 00 		.dw 	0,0
  111 00:408A -  -  -  -  		
  112 00:408A -  -  -  -  ; ***************************************************************************************
  113 00:408A -  -  -  -  ;
  114 00:408A -  -  -  -  ;										  Buffers
  115 00:408A -  -  -  -  ;
  116 00:408A -  -  -  -  ; ***************************************************************************************
  117 00:408A -  -  -  -  
  118 00:408A -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 00:408A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 00:409A -  -  -  -  
  121 00:409A -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 00:409A 00 00 -  -  		.dw 	0
  123 00:409C -  -  -  -  
  124 00:409C -  -  -  -  ConvertBuffer: 								; general usage
  125 00:409C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 00:40DC -  -  -  -  
  127 00:40DC -  -  -  -  ; ***************************************************************************************
  128 00:40DC -  -  -  -  ;
  129 00:40DC -  -  -  -  ;									Changes and Updates
  130 00:40DC -  -  -  -  ;
  131 00:40DC -  -  -  -  ; ***************************************************************************************
  132 00:40DC -  -  -  -  ;
  133 00:40DC -  -  -  -  ;		Date			Notes
  134 00:40DC -  -  -  -  ;		==== 			=====
  135 00:40DC -  -  -  -  ;
  136 00:40DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40DC -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40DC -  -  -  -  ; ***************************************************************************************
    2 00:40DC -  -  -  -  ; ***************************************************************************************
    3 00:40DC -  -  -  -  ;
    4 00:40DC -  -  -  -  ;		Name : 		assert.asm
    5 00:40DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40DC -  -  -  -  ;		Reviewed :	No
    8 00:40DC -  -  -  -  ;		Purpose :	Assert command
    9 00:40DC -  -  -  -  ;
   10 00:40DC -  -  -  -  ; ***************************************************************************************
   11 00:40DC -  -  -  -  ; ***************************************************************************************
   12 00:40DC -  -  -  -  
   13 00:40DC -  -  -  -  ; ***************************************************************************************
   14 00:40DC -  -  -  -  ;
   15 00:40DC -  -  -  -  ;									ASSERT command
   16 00:40DC -  -  -  -  ;
   17 00:40DC -  -  -  -  ; ***************************************************************************************
   18 00:40DC -  -  -  -  
   19 00:40DC -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40DC CD 08 45 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40DF 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40E5 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40E6 3E 01 C3 23 
              43 -  -  -  		ERR_ASSERT
   24 00:40EB -  -  -  -  
   25 00:40EB -  -  -  -  ; ***************************************************************************************
   26 00:40EB -  -  -  -  ;
   27 00:40EB -  -  -  -  ;									Changes and Updates
   28 00:40EB -  -  -  -  ;
   29 00:40EB -  -  -  -  ; ***************************************************************************************
   30 00:40EB -  -  -  -  ;
   31 00:40EB -  -  -  -  ;		Date			Notes
   32 00:40EB -  -  -  -  ;		==== 			=====
   33 00:40EB -  -  -  -  ;
   34 00:40EB -  -  -  -  ; ***************************************************************************************
   35 00:40EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:40EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40EB -  -  -  -  ; ***************************************************************************************
    2 00:40EB -  -  -  -  ; ***************************************************************************************
    3 00:40EB -  -  -  -  ;
    4 00:40EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EB -  -  -  -  ;		Reviewed :	No
    8 00:40EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40EB -  -  -  -  ;
   10 00:40EB -  -  -  -  ; ***************************************************************************************
   11 00:40EB -  -  -  -  ; ***************************************************************************************
   12 00:40EB -  -  -  -  
   13 00:40EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40EB -  -  -  -  BadCmd_Comma: 		;; [~]
   17 00:40EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 00:40EB -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40EB C3 80 43 -  		jp 		SyntaxError
   20 00:40EE -  -  -  -  
   21 00:40EE -  -  -  -  ; ***************************************************************************************
   22 00:40EE -  -  -  -  ;
   23 00:40EE -  -  -  -  ;									Changes and Updates
   24 00:40EE -  -  -  -  ;
   25 00:40EE -  -  -  -  ; ***************************************************************************************
   26 00:40EE -  -  -  -  ;
   27 00:40EE -  -  -  -  ;		Date			Notes
   28 00:40EE -  -  -  -  ;		==== 			=====
   29 00:40EE -  -  -  -  ;
   30 00:40EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40EE -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40EE -  -  -  -  ; ***************************************************************************************
    2 00:40EE -  -  -  -  ; ***************************************************************************************
    3 00:40EE -  -  -  -  ;
    4 00:40EE -  -  -  -  ;		Name : 		colon.asm
    5 00:40EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EE -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40EE -  -  -  -  ;		Reviewed :	No
    8 00:40EE -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40EE -  -  -  -  ;
   10 00:40EE -  -  -  -  ; ***************************************************************************************
   11 00:40EE -  -  -  -  ; ***************************************************************************************
   12 00:40EE -  -  -  -  
   13 00:40EE -  -  -  -  ; ***************************************************************************************
   14 00:40EE -  -  -  -  ;
   15 00:40EE -  -  -  -  ;								Colon command, this is ignored.
   16 00:40EE -  -  -  -  ;
   17 00:40EE -  -  -  -  ; ***************************************************************************************
   18 00:40EE -  -  -  -  
   19 00:40EE -  -  -  -  Command_Colon: 	;; [:]
   20 00:40EE C9 -  -  -  		ret
   21 00:40EF -  -  -  -  
   22 00:40EF -  -  -  -  ; ***************************************************************************************
   23 00:40EF -  -  -  -  ;
   24 00:40EF -  -  -  -  ;									Changes and Updates
   25 00:40EF -  -  -  -  ;
   26 00:40EF -  -  -  -  ; ***************************************************************************************
   27 00:40EF -  -  -  -  ;
   28 00:40EF -  -  -  -  ;		Date			Notes
   29 00:40EF -  -  -  -  ;		==== 			=====
   30 00:40EF -  -  -  -  ;
   31 00:40EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40EF -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40EF -  -  -  -  ; ***************************************************************************************
    2 00:40EF -  -  -  -  ; ***************************************************************************************
    3 00:40EF -  -  -  -  ;
    4 00:40EF -  -  -  -  ;		Name : 		dim.asm
    5 00:40EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EF -  -  -  -  ;		Date : 		4th June 2022
    7 00:40EF -  -  -  -  ;		Reviewed :	No
    8 00:40EF -  -  -  -  ;		Purpose :	Dim command
    9 00:40EF -  -  -  -  ;
   10 00:40EF -  -  -  -  ; ***************************************************************************************
   11 00:40EF -  -  -  -  ; ***************************************************************************************
   12 00:40EF -  -  -  -  
   13 00:40EF -  -  -  -  ; ***************************************************************************************
   14 00:40EF -  -  -  -  ;
   15 00:40EF -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40EF -  -  -  -  ;	
   17 00:40EF -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40EF -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40EF -  -  -  -  ;								(can be comma chained)
   20 00:40EF -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40EF -  -  -  -  ;
   22 00:40EF -  -  -  -  ; ***************************************************************************************
   23 00:40EF -  -  -  -  
   24 00:40EF -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40EF -  -  -  -  		;
   26 00:40EF -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40EF -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40EF -  -  -  -  		;
   29 00:40EF DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40F1 D1 -  -  -  		pop 	de
   31 00:40F2 -  -  -  -  		;
   32 00:40F2 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40F5 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40F7 D2 80 43 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40FA -  -  -  -  _DISkip:
   36 00:40FA DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40FC DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40FF FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:4101 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:4103 -  -  -  -  		;
   41 00:4103 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:4106 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:4108 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4109 CC 60 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:410C F1 -  -  -  		pop 	af
   46 00:410D C4 1F 41 -  		call 	nz,DimensionAllocate
   47 00:4110 -  -  -  -  		;
   48 00:4110 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:4113 FE A6 -  -  		cp 		KWD_COMMA
   50 00:4115 C0 -  -  -  		ret 	nz
   51 00:4116 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:4118 18 D5 -  -  		jr 		Command_DIM
   53 00:411A -  -  -  -  
   54 00:411A -  -  -  -  _CDError:
   55 00:411A 3E 04 C3 23 
              43 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:411F -  -  -  -  
   57 00:411F -  -  -  -  ; ***************************************************************************************
   58 00:411F -  -  -  -  ;
   59 00:411F -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:411F -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:411F -  -  -  -  ;
   62 00:411F -  -  -  -  ; ***************************************************************************************
   63 00:411F -  -  -  -  
   64 00:411F -  -  -  -  DimensionAllocate:
   65 00:411F D5 -  -  -  		push 	de 							; save start on stack
   66 00:4120 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:4122 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:4124 32 7C 40 -  		ld 		(AllowAutoCreate),a
   69 00:4127 CD 69 48 -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:412A CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:412C 28 EC -  -  		jr 		z,_CDError
   72 00:412E CB 41 -  -  		bit 	CIsString,c
   73 00:4130 20 E8 -  -  		jr 		nz,_CDError
   74 00:4132 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:4134 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:4135 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:4137 CD 18 43 -  		call 	CheckNextA 					; check for [
   78 00:413A CD 08 45 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:413D 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:413F CD 18 43 -  		call 	CheckNextA 					; check for ]
   81 00:4142 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:4143 7C -  -  -  		ld 		a,h
   83 00:4144 B5 -  -  -  		or 		l
   84 00:4145 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:4147 D9 -  -  -  		exx
   86 00:4148 23 -  -  -  		inc 	hl
   87 00:4149 D9 -  -  -  		exx
   88 00:414A -  -  -  -  _DANoCarry:
   89 00:414A D9 -  -  -  		exx 								; check if HL' is zero
   90 00:414B 7C -  -  -  		ld 		a,h
   91 00:414C B5 -  -  -  		or 		l
   92 00:414D D9 -  -  -  		exx
   93 00:414E 20 CA -  -  		jr 		nz,_CDError
   94 00:4150 CD 5F 47 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:4153 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:4154 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:4155 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:415B AF -  -  -  		xor 	a 							; autocreate off
   99 00:415C 32 7C 40 -  		ld 		(AllowAutoCreate),a
  100 00:415F C9 -  -  -  		ret
  101 00:4160 -  -  -  -  
  102 00:4160 -  -  -  -  ; ***************************************************************************************
  103 00:4160 -  -  -  -  ;
  104 00:4160 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:4160 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:4160 -  -  -  -  ;
  107 00:4160 -  -  -  -  ; ***************************************************************************************
  108 00:4160 -  -  -  -  
  109 00:4160 -  -  -  -  DimensionArray:
  110 00:4160 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:4161 -  -  -  -  		;
  112 00:4161 CD 08 45 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:4164 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:4165 E6 FC -  -  		and 	$FC
  115 00:4167 D9 -  -  -  		exx
  116 00:4168 B4 -  -  -  		or 		h
  117 00:4169 B5 -  -  -  		or 		l
  118 00:416A D9 -  -  -  		exx
  119 00:416B 20 AD -  -  		jr 		nz,_CDError
  120 00:416D -  -  -  -  		;
  121 00:416D DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:416F E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:4170 -  -  -  -  		;
  124 00:4170 CD EA 48 -  		call 	VariableInformation 		; get information about this array
  125 00:4173 CD 20 49 -  		call 	VariableSearchList 			; look to see if already present.
  126 00:4176 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:4178 -  -  -  -  		;
  128 00:4178 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4179 E5 -  -  -  		push 	hl
  130 00:417A 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:417B 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:417C 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:417D 29 -  -  -  		add 	hl,hl
  134 00:417E CD 2A 48 -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:4181 -  -  -  -  		;
  136 00:4181 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:4182 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:4185 09 -  -  -  		add 	hl,bc
  139 00:4186 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:418C DD E1 -  -  		pop 	ix 							; restore end position
  141 00:418E C9 -  -  -  		ret		
  142 00:418F -  -  -  -  
  143 00:418F -  -  -  -  
  144 00:418F -  -  -  -  ; ***************************************************************************************
  145 00:418F -  -  -  -  ;
  146 00:418F -  -  -  -  ;									Changes and Updates
  147 00:418F -  -  -  -  ;
  148 00:418F -  -  -  -  ; ***************************************************************************************
  149 00:418F -  -  -  -  ;
  150 00:418F -  -  -  -  ;		Date			Notes
  151 00:418F -  -  -  -  ;		==== 			=====
  152 00:418F -  -  -  -  ;
  153 00:418F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:418F -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:418F -  -  -  -  ; ***************************************************************************************
    2 00:418F -  -  -  -  ; ***************************************************************************************
    3 00:418F -  -  -  -  ;
    4 00:418F -  -  -  -  ;		Name : 		end.asm
    5 00:418F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:418F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:418F -  -  -  -  ;		Reviewed :	No
    8 00:418F -  -  -  -  ;		Purpose :	End command
    9 00:418F -  -  -  -  ;
   10 00:418F -  -  -  -  ; ***************************************************************************************
   11 00:418F -  -  -  -  ; ***************************************************************************************
   12 00:418F -  -  -  -  
   13 00:418F -  -  -  -  ; ***************************************************************************************
   14 00:418F -  -  -  -  ;
   15 00:418F -  -  -  -  ;										END command
   16 00:418F -  -  -  -  ;
   17 00:418F -  -  -  -  ; ***************************************************************************************
   18 00:418F -  -  -  -  
   19 00:418F -  -  -  -  Command_END: 	;; [end]
   20 00:418F 3E 00 C3 23 
              43 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:4194 -  -  -  -  
   22 00:4194 -  -  -  -  ; ***************************************************************************************
   23 00:4194 -  -  -  -  ;
   24 00:4194 -  -  -  -  ;									Changes and Updates
   25 00:4194 -  -  -  -  ;
   26 00:4194 -  -  -  -  ; ***************************************************************************************
   27 00:4194 -  -  -  -  ;
   28 00:4194 -  -  -  -  ;		Date			Notes
   29 00:4194 -  -  -  -  ;		==== 			=====
   30 00:4194 -  -  -  -  ;
   31 00:4194 -  -  -  -  ; ***************************************************************************************
   32 00:4194 -  -  -  -  		
Listing for file "_build.asm"
   18 00:4194 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:4194 -  -  -  -  ; ***************************************************************************************
    2 00:4194 -  -  -  -  ; ***************************************************************************************
    3 00:4194 -  -  -  -  ;
    4 00:4194 -  -  -  -  ;		Name : 		endofline.asm
    5 00:4194 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4194 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4194 -  -  -  -  ;		Reviewed :	None
    8 00:4194 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:4194 -  -  -  -  ;
   10 00:4194 -  -  -  -  ; ***************************************************************************************
   11 00:4194 -  -  -  -  ; ***************************************************************************************
   12 00:4194 -  -  -  -  
   13 00:4194 -  -  -  -  ; ***************************************************************************************
   14 00:4194 -  -  -  -  ;
   15 00:4194 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:4194 -  -  -  -  ;
   17 00:4194 -  -  -  -  ; ***************************************************************************************
   18 00:4194 -  -  -  -  
   19 00:4194 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:4194 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4198 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:419B DD 5E 00 -  		ld 		e,(ix+0)
   23 00:419E DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:41A0 -  -  -  -  		;
   25 00:41A0 ED 7B 5C 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:41A4 C3 8B 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:41A7 -  -  -  -  
   28 00:41A7 -  -  -  -  ; ***************************************************************************************
   29 00:41A7 -  -  -  -  ;
   30 00:41A7 -  -  -  -  ;									Changes and Updates
   31 00:41A7 -  -  -  -  ;
   32 00:41A7 -  -  -  -  ; ***************************************************************************************
   33 00:41A7 -  -  -  -  ;
   34 00:41A7 -  -  -  -  ;		Date			Notes
   35 00:41A7 -  -  -  -  ;		==== 			=====
   36 00:41A7 -  -  -  -  ;
   37 00:41A7 -  -  -  -  ; ***************************************************************************************
   38 00:41A7 -  -  -  -  		
Listing for file "_build.asm"
   19 00:41A7 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:41A7 -  -  -  -  ; ***************************************************************************************
    2 00:41A7 -  -  -  -  ; ***************************************************************************************
    3 00:41A7 -  -  -  -  ;
    4 00:41A7 -  -  -  -  ;		Name : 		let.asm
    5 00:41A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41A7 -  -  -  -  ;		Date : 		4th June 2022
    7 00:41A7 -  -  -  -  ;		Reviewed :	No
    8 00:41A7 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:41A7 -  -  -  -  ;
   10 00:41A7 -  -  -  -  ; ***************************************************************************************
   11 00:41A7 -  -  -  -  ; ***************************************************************************************
   12 00:41A7 -  -  -  -  
   13 00:41A7 -  -  -  -  ; ***************************************************************************************
   14 00:41A7 -  -  -  -  ;
   15 00:41A7 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:41A7 -  -  -  -  ;
   17 00:41A7 -  -  -  -  ; ***************************************************************************************
   18 00:41A7 -  -  -  -  
   19 00:41A7 -  -  -  -  Command_LET: 	;; [let]
   20 00:41A7 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41AA FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41AC 28 28 -  -  		jr 		z,_CLString
   23 00:41AE FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41B0 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41B2 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41B4 32 7C 40 -  		ld 		(AllowAutoCreate),a
   27 00:41B7 -  -  -  -  _CLNoAuto:
   28 00:41B7 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41B9 CD 99 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41BC CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41BE CA 80 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41C1 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41C2 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41C3 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41C4 32 7C 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41C7 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41C9 CD 18 43 -  		call 	CheckNextA
   38 00:41CC -  -  -  -  
   39 00:41CC CD 02 45 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41CF -  -  -  -  
   41 00:41CF D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41D0 43 -  -  -  		ld 		b,e 						
   43 00:41D1 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41D2 -  -  -  -  		;
   45 00:41D2 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41D2 -  -  -  -  		;
   47 00:41D2 CD EC 41 -  		call 	WriteHLToDE
   48 00:41D5 C9 -  -  -  		ret
   49 00:41D6 -  -  -  -  		;
   50 00:41D6 -  -  -  -  		; 		String assignment code.
   51 00:41D6 -  -  -  -  		;
   52 00:41D6 -  -  -  -  _CLString:
   53 00:41D6 CD F6 44 -  		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:41D9 E5 -  -  -  		push 	hl 							; save target expression
   55 00:41DA 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:41DC CD 18 43 -  		call 	CheckNextA
   57 00:41DF CD 1E 45 -  		call 	EvaluateString 				; get the thing to copy
   58 00:41E2 D1 -  -  -  		pop 	de 							; target in DE.
   59 00:41E3 -  -  -  -  _CLCopy:
   60 00:41E3 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:41E4 12 -  -  -  		ld 		(de),a
   62 00:41E5 23 -  -  -  		inc 	hl
   63 00:41E6 13 -  -  -  		inc 	de
   64 00:41E7 FE 20 -  -  		cp 		$20 						; until control character
   65 00:41E9 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:41EB C9 -  -  -  		ret
   67 00:41EC -  -  -  -  
   68 00:41EC -  -  -  -  ; ***************************************************************************************
   69 00:41EC -  -  -  -  ;
   70 00:41EC -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:41EC -  -  -  -  ;
   72 00:41EC -  -  -  -  ; ***************************************************************************************
   73 00:41EC -  -  -  -  
   74 00:41EC -  -  -  -  WriteHLToDE:
   75 00:41EC CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:41EE C2 76 43 -  		jp 		nz,TypeMismatch
   77 00:41F1 -  -  -  -  		;
   78 00:41F1 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:41F1 -  -  -  -  		;		
   80 00:41F1 -  -  -  -  _WHDWriteNumber:
   81 00:41F1 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:41F2 D9 -  -  -  		exx
   83 00:41F3 EB -  -  -  		ex 		de,hl
   84 00:41F4 D9 -  -  -  		exx
   85 00:41F5 -  -  -  -  
   86 00:41F5 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:41F6 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:41F7 72 -  -  -  		ld 		(hl),d
   89 00:41F8 23 -  -  -  		inc 	hl
   90 00:41F9 E5 -  -  -  		push 	hl
   91 00:41FA D9 -  -  -  		exx
   92 00:41FB E1 -  -  -  		pop 	hl
   93 00:41FC 73 -  -  -  		ld 		(hl),e
   94 00:41FD 23 -  -  -  		inc 	hl
   95 00:41FE 72 -  -  -  		ld 		(hl),d
   96 00:41FF D9 -  -  -  		exx
   97 00:4200 -  -  -  -  
   98 00:4200 C9 -  -  -  		ret
   99 00:4201 -  -  -  -  
  100 00:4201 -  -  -  -  ; ***************************************************************************************
  101 00:4201 -  -  -  -  ;
  102 00:4201 -  -  -  -  ;									Changes and Updates
  103 00:4201 -  -  -  -  ;
  104 00:4201 -  -  -  -  ; ***************************************************************************************
  105 00:4201 -  -  -  -  ;
  106 00:4201 -  -  -  -  ;		Date			Notes
  107 00:4201 -  -  -  -  ;		==== 			=====
  108 00:4201 -  -  -  -  ;
  109 00:4201 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:4201 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:4201 -  -  -  -  ; ***************************************************************************************
    2 00:4201 -  -  -  -  ; ***************************************************************************************
    3 00:4201 -  -  -  -  ;
    4 00:4201 -  -  -  -  ;		Name : 		print.asm
    5 00:4201 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4201 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4201 -  -  -  -  ;		Reviewed :	No
    8 00:4201 -  -  -  -  ;		Purpose :	Print command
    9 00:4201 -  -  -  -  ;
   10 00:4201 -  -  -  -  ; ***************************************************************************************
   11 00:4201 -  -  -  -  ; ***************************************************************************************
   12 00:4201 -  -  -  -  
   13 00:4201 -  -  -  -  ; ***************************************************************************************
   14 00:4201 -  -  -  -  ;
   15 00:4201 -  -  -  -  ;										PRINT command
   16 00:4201 -  -  -  -  ;
   17 00:4201 -  -  -  -  ; ***************************************************************************************
   18 00:4201 -  -  -  -  
   19 00:4201 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:4201 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:4203 32 7E 40 -  		ld 		(PrintBase),a
   22 00:4206 -  -  -  -  		;
   23 00:4206 -  -  -  -  		;		Main loop
   24 00:4206 -  -  -  -  		;
   25 00:4206 -  -  -  -  _CPRLoop:
   26 00:4206 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:4209 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:420B 28 50 -  -  		jr 		z,_CPRExitNL
   29 00:420D FE A7 -  -  		cp 		KWD_COLON 	
   30 00:420F 28 4C -  -  		jr 		z,_CPRExitNL
   31 00:4211 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:4213 28 36 -  -  		jr 		z,_CPRCheckNext10
   33 00:4215 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:4217 28 2D -  -  		jr 		z,_CPRTab
   35 00:4219 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:421B 28 24 -  -  		jr 		z,_CPRNewLine
   37 00:421D FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:421F 28 17 -  -  		jr 		z,_CPRHexMode
   39 00:4221 -  -  -  -  		;
   40 00:4221 CD 02 45 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:4224 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:4226 20 0B -  -  		jr 		nz,_CPRPrintHL
   43 00:4228 -  -  -  -  		;
   44 00:4228 3A 7E 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:422B -  -  -  -  _CPRPrintNumber:
   46 00:422B 01 9C 40 -  		ld  	bc,ConvertBuffer
   47 00:422E C5 -  -  -  		push 	bc
   48 00:422F CD 11 4D -  		call 	Int32ToString 				; convert to string
   49 00:4232 E1 -  -  -  		pop 	hl
   50 00:4233 -  -  -  -  		;
   51 00:4233 -  -  -  -  		; 		Print text at HL.
   52 00:4233 -  -  -  -  		;
   53 00:4233 -  -  -  -  _CPRPrintHL:
   54 00:4233 CD 20 48 -  		call 	PrintStringAtHL 			; print string out
   55 00:4236 18 CE -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4238 -  -  -  -  		;
   57 00:4238 -  -  -  -  		;		Hex mode (~)
   58 00:4238 -  -  -  -  		;
   59 00:4238 -  -  -  -  _CPRHexMode:		
   60 00:4238 3E 10 -  -  		ld 		a,16
   61 00:423A 32 7E 40 -  		ld 		(PrintBase),a
   62 00:423D DD 23 -  -  		inc 	ix
   63 00:423F 18 C5 -  -  		jr 		_CPRLoop
   64 00:4241 -  -  -  -  		;
   65 00:4241 -  -  -  -  		; 		New line (')
   66 00:4241 -  -  -  -  		;
   67 00:4241 -  -  -  -  _CPRNewLine:
   68 00:4241 CD 7B 4D -  		call 	SYSPrintCRLF
   69 00:4244 18 0A -  -  		jr 		_CPRCheckNext
   70 00:4246 -  -  -  -  		;
   71 00:4246 -  -  -  -  		; 		Tab command (,)
   72 00:4246 -  -  -  -  		;
   73 00:4246 -  -  -  -  _CPRTab:
   74 00:4246 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:4248 CD 5F 4D -  		call 	SYSPrintChar
   76 00:424B -  -  -  -  		;
   77 00:424B -  -  -  -  		;		Set to base 10 then check next character
   78 00:424B -  -  -  -  		;
   79 00:424B -  -  -  -  _CPRCheckNext10:		
   80 00:424B 3E F6 -  -  		ld 		a,-10
   81 00:424D 32 7E 40 -  		ld 		(PrintBase),a
   82 00:4250 -  -  -  -  		;
   83 00:4250 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:4250 -  -  -  -  		;		
   85 00:4250 -  -  -  -  _CPRCheckNext:
   86 00:4250 DD 23 -  -  		inc 	ix 							; consume current
   87 00:4252 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:4255 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:4257 C8 -  -  -  		ret 	z
   90 00:4258 FE A7 -  -  		cp 		KWD_COLON
   91 00:425A C8 -  -  -  		ret 	z
   92 00:425B 18 A9 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:425D -  -  -  -  		;
   94 00:425D -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:425D -  -  -  -  		;
   96 00:425D -  -  -  -  _CPRExitNL:
   97 00:425D CD 7B 4D -  		call 	SYSPrintCRLF 				; do CR/LF
   98 00:4260 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:4261 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4261 -  -  -  -  ; ***************************************************************************************
    2 00:4261 -  -  -  -  ; ***************************************************************************************
    3 00:4261 -  -  -  -  ;
    4 00:4261 -  -  -  -  ;		Name : 		rem.asm
    5 00:4261 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4261 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4261 -  -  -  -  ;		Reviewed :	No
    8 00:4261 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4261 -  -  -  -  ;
   10 00:4261 -  -  -  -  ; ***************************************************************************************
   11 00:4261 -  -  -  -  ; ***************************************************************************************
   12 00:4261 -  -  -  -  
   13 00:4261 -  -  -  -  ; ***************************************************************************************
   14 00:4261 -  -  -  -  ;
   15 00:4261 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4261 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4261 -  -  -  -  ;
   18 00:4261 -  -  -  -  ; ***************************************************************************************
   19 00:4261 -  -  -  -  
   20 00:4261 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4261 -  -  -  -  Command_REM2: 	;; [']
   22 00:4261 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:4264 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:4266 C8 -  -  -  		ret 	z
   25 00:4267 DD 23 -  -  		inc 	ix
   26 00:4269 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:426B C8 -  -  -  		ret 	z
   28 00:426C FE 3F -  -  		cp 		STRING_MARKER
   29 00:426E C2 80 43 -  		jp 		nz,SyntaxError
   30 00:4271 -  -  -  -  		;		
   31 00:4271 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:4274 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4277 13 -  -  -  		inc 	de 
   34 00:4278 13 -  -  -  		inc 	de
   35 00:4279 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:427B C9 -  -  -  		ret
   37 00:427C -  -  -  -  
   38 00:427C -  -  -  -  ; ***************************************************************************************
   39 00:427C -  -  -  -  ;
   40 00:427C -  -  -  -  ;									Changes and Updates
   41 00:427C -  -  -  -  ;
   42 00:427C -  -  -  -  ; ***************************************************************************************
   43 00:427C -  -  -  -  ;
   44 00:427C -  -  -  -  ;		Date			Notes
   45 00:427C -  -  -  -  ;		==== 			=====
   46 00:427C -  -  -  -  ;
   47 00:427C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:427C -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:427C -  -  -  -  ; ***************************************************************************************
    2 00:427C -  -  -  -  ; ***************************************************************************************
    3 00:427C -  -  -  -  ;
    4 00:427C -  -  -  -  ;		Name : 		run.asm
    5 00:427C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:427C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:427C -  -  -  -  ;		Reviewed :	No
    8 00:427C -  -  -  -  ;		Purpose :	Run command
    9 00:427C -  -  -  -  ;
   10 00:427C -  -  -  -  ; ***************************************************************************************
   11 00:427C -  -  -  -  ; ***************************************************************************************
   12 00:427C -  -  -  -  
   13 00:427C -  -  -  -  ; ***************************************************************************************
   14 00:427C -  -  -  -  ;
   15 00:427C -  -  -  -  ;										RUN command
   16 00:427C -  -  -  -  ;
   17 00:427C -  -  -  -  ; ***************************************************************************************
   18 00:427C -  -  -  -  
   19 00:427C -  -  -  -  Command_RUN: 	;; [run]
   20 00:427C CD 7C 47 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:427F -  -  -  -  
   22 00:427F DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:4283 ED 73 5C 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4287 AF -  -  -  		xor 	a
   25 00:4288 32 7C 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:428B -  -  -  -  		;
   27 00:428B -  -  -  -  		; 		New line at IX.
   28 00:428B -  -  -  -  		;
   29 00:428B -  -  -  -  CRNewLine:
   30 00:428B DD 22 58 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:428F -  -  -  -  		;
   32 00:428F DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:4292 B7 -  -  -  		or 		a
   34 00:4293 CA 8F 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4296 -  -  -  -  		;
   36 00:4296 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4298 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:429A DD 23 -  -  		inc 	ix
   39 00:429C -  -  -  -  		;
   40 00:429C -  -  -  -  		; 		New command at IX
   41 00:429C -  -  -  -  		;
   42 00:429C -  -  -  -  _CRNewCommand:	
   43 00:429C DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:429F B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:42A0 F2 D4 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:42A3 -  -  -  -  		;
   47 00:42A3 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:42A5 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:42A7 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:42A9 D2 C5 42 -  		jp 		nc,_CRAlternateLets
   51 00:42AC -  -  -  -  		;
   52 00:42AC -  -  -  -  _CRDoCommand:		
   53 00:42AC E6 7F 21 00 
              00 6F 29 11 
              D9 4A 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:42BE DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:42C0 CD 60 40 -  		call 	JumpCode 					; call the routine.
   56 00:42C3 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:42C5 -  -  -  -  		;
   58 00:42C5 -  -  -  -  		; 		Do CALL (HL)
   59 00:42C5 -  -  -  -  		;
   60 00:42C5 -  -  -  -  		;
   61 00:42C5 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:42C5 -  -  -  -  		;		
   63 00:42C5 -  -  -  -  _CRAlternateLets:		
   64 00:42C5 FE 83 -  -  		cp 		KWD_PLING
   65 00:42C7 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:42C9 FE 84 -  -  		cp 		KWD_QMARK
   67 00:42CB 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:42CD FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42CF 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42D1 C3 80 43 -  		jp 		SyntaxError
   71 00:42D4 -  -  -  -  		;
   72 00:42D4 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42D4 -  -  -  -  		;
   74 00:42D4 -  -  -  -  _CRAssignmentHandler:		
   75 00:42D4 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42D6 D2 80 43 -  		jp 		nc,SyntaxError
   77 00:42D9 -  -  -  -  _CRAssignmentLet:		
   78 00:42D9 CD A7 41 -  		call	Command_LET 				; do LET.
   79 00:42DC C3 9C 42 -  		jp 		_CRNewCommand
   80 00:42DF -  -  -  -  
   81 00:42DF -  -  -  -  ; ***************************************************************************************
   82 00:42DF -  -  -  -  ;
   83 00:42DF -  -  -  -  ;									Changes and Updates
   84 00:42DF -  -  -  -  ;
   85 00:42DF -  -  -  -  ; ***************************************************************************************
   86 00:42DF -  -  -  -  ;
   87 00:42DF -  -  -  -  ;		Date			Notes
   88 00:42DF -  -  -  -  ;		==== 			=====
   89 00:42DF -  -  -  -  ;
   90 00:42DF -  -  -  -  ; ***************************************************************************************
   91 00:42DF -  -  -  -  		
Listing for file "_build.asm"
   23 00:42DF -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42DF -  -  -  -  ; ***************************************************************************************
    2 00:42DF -  -  -  -  ; ***************************************************************************************
    3 00:42DF -  -  -  -  ;
    4 00:42DF -  -  -  -  ;		Name : 		stop.asm
    5 00:42DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42DF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42DF -  -  -  -  ;		Reviewed :	No
    8 00:42DF -  -  -  -  ;		Purpose :	Stop command
    9 00:42DF -  -  -  -  ;
   10 00:42DF -  -  -  -  ; ***************************************************************************************
   11 00:42DF -  -  -  -  ; ***************************************************************************************
   12 00:42DF -  -  -  -  
   13 00:42DF -  -  -  -  ; ***************************************************************************************
   14 00:42DF -  -  -  -  ;
   15 00:42DF -  -  -  -  ;										STOP command
   16 00:42DF -  -  -  -  ;
   17 00:42DF -  -  -  -  ; ***************************************************************************************
   18 00:42DF -  -  -  -  
   19 00:42DF -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42DF 3E 0F C3 23 
              43 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42E4 -  -  -  -  
   22 00:42E4 -  -  -  -  ; ***************************************************************************************
   23 00:42E4 -  -  -  -  ;
   24 00:42E4 -  -  -  -  ;									Changes and Updates
   25 00:42E4 -  -  -  -  ;
   26 00:42E4 -  -  -  -  ; ***************************************************************************************
   27 00:42E4 -  -  -  -  ;
   28 00:42E4 -  -  -  -  ;		Date			Notes
   29 00:42E4 -  -  -  -  ;		==== 			=====
   30 00:42E4 -  -  -  -  ;
   31 00:42E4 -  -  -  -  ; ***************************************************************************************
   32 00:42E4 -  -  -  -  		
Listing for file "_build.asm"
   24 00:42E4 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:42E4 -  -  -  -  ; ***************************************************************************************
    2 00:42E4 -  -  -  -  ; ***************************************************************************************
    3 00:42E4 -  -  -  -  ;
    4 00:42E4 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:42E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42E4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42E4 -  -  -  -  ;		Reviewed :	No
    8 00:42E4 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:42E4 -  -  -  -  ;
   10 00:42E4 -  -  -  -  ; ***************************************************************************************
   11 00:42E4 -  -  -  -  ; ***************************************************************************************
   12 00:42E4 -  -  -  -  
   13 00:42E4 -  -  -  -  ; ***************************************************************************************
   14 00:42E4 -  -  -  -  ;
   15 00:42E4 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:42E4 -  -  -  -  ;
   17 00:42E4 -  -  -  -  ; ***************************************************************************************
   18 00:42E4 -  -  -  -  
   19 00:42E4 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:42E4             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:42E4             		inc 	ix
   22 00:42E4             		cp 		ch 							; exit if matches
   23 00:42E4             		ret 	z
   24 00:42E4             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:42E4             		jp 		ErrorHandler
   26 00:42E4             #endmacro
   27 00:42E4 -  -  -  -  
   28 00:42E4 -  -  -  -  CheckLeftBracket:
   29 00:42E4 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0C C3 23 
              43 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:42F1 -  -  -  -  
   31 00:42F1 -  -  -  -  CheckRightBracket:
   32 00:42F1 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0D C3 23 
              43 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:42FE -  -  -  -  
   34 00:42FE -  -  -  -  CheckDollar:
   35 00:42FE DD 7E 00 DD 
              23 FE 96 C8 
              3E 0B C3 23 
              43 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:430B -  -  -  -  		
   37 00:430B -  -  -  -  CheckComma:
   38 00:430B DD 7E 00 DD 
              23 FE A6 C8 
              3E 0A C3 23 
              43 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4318 -  -  -  -  
   40 00:4318 -  -  -  -  ; ***************************************************************************************
   41 00:4318 -  -  -  -  ;
   42 00:4318 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4318 -  -  -  -  ;
   44 00:4318 -  -  -  -  ; ***************************************************************************************
   45 00:4318 -  -  -  -  
   46 00:4318 -  -  -  -  CheckNextA:
   47 00:4318 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:431B DD 23 -  -  		inc 	ix 							; skip character
   49 00:431D C8 -  -  -  		ret 	z 							; yes, okay
   50 00:431E 3E 10 C3 23 
              43 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:4323 -  -  -  -  		
   52 00:4323 -  -  -  -  ; ***************************************************************************************
   53 00:4323 -  -  -  -  ;
   54 00:4323 -  -  -  -  ;									Changes and Updates
   55 00:4323 -  -  -  -  ;
   56 00:4323 -  -  -  -  ; ***************************************************************************************
   57 00:4323 -  -  -  -  ;
   58 00:4323 -  -  -  -  ;		Date			Notes
   59 00:4323 -  -  -  -  ;		==== 			=====
   60 00:4323 -  -  -  -  ;
   61 00:4323 -  -  -  -  ; ***************************************************************************************
   62 00:4323 -  -  -  -  		
Listing for file "_build.asm"
   25 00:4323 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4323 -  -  -  -  ; ***************************************************************************************
    2 00:4323 -  -  -  -  ; ***************************************************************************************
    3 00:4323 -  -  -  -  ;
    4 00:4323 -  -  -  -  ;		Name : 		errors.asm
    5 00:4323 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4323 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4323 -  -  -  -  ;		Reviewed :	No
    8 00:4323 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4323 -  -  -  -  ;
   10 00:4323 -  -  -  -  ; ***************************************************************************************
   11 00:4323 -  -  -  -  ; ***************************************************************************************
   12 00:4323 -  -  -  -  
   13 00:4323 -  -  -  -  ; ***************************************************************************************
   14 00:4323 -  -  -  -  ;
   15 00:4323 -  -  -  -  ;								Error handler, message A 
   16 00:4323 -  -  -  -  ;
   17 00:4323 -  -  -  -  ; ***************************************************************************************
   18 00:4323 -  -  -  -  
   19 00:4323 -  -  -  -  ErrorHandler:
   20 00:4323 F5 -  -  -  		push 	af 						; save error ID
   21 00:4324 -  -  -  -  
   22 00:4324 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4327 6F -  -  -  		ld 		l,a
   24 00:4328 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4329 29 -  -  -  		add 	hl,hl 		
   26 00:432A 11 71 49 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:432D 19 -  -  -  		add 	hl,de
   28 00:432E 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4332 CD 20 48 -  		call 	PrintStringAtHL
   30 00:4335 -  -  -  -  		;
   31 00:4335 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4336 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4337 28 28 -  -  		jr 		z,_EHExit
   34 00:4339 -  -  -  -  		;
   35 00:4339 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:433D DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4340 B7 -  -  -  		or 		a
   38 00:4341 28 1E -  -  		jr 		z,_EHExit
   39 00:4343 -  -  -  -  
   40 00:4343 21 67 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4346 CD 20 48 -  		call 	PrintStringAtHL 
   42 00:4349 -  -  -  -  		
   43 00:4349 D9 -  -  -  		exx								; HL'HL = line number
   44 00:434A 21 00 00 -  		ld 		hl,$0000 		
   45 00:434D D9 -  -  -  		exx 
   46 00:434E DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4351 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4354 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4356 01 9C 40 -  		ld 		bc,ConvertBuffer
   50 00:4359 CD 11 4D -  		call 	Int32ToString
   51 00:435C C5 -  -  -  		push 	bc
   52 00:435D E1 -  -  -  		pop 	hl
   53 00:435E CD 20 48 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4361 -  -  -  -  _EHExit:		
   55 00:4361 CD 7B 4D -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4364 C3 1A 40 -  		jp 		WarmStart
   57 00:4367 -  -  -  -  
   58 00:4367 -  -  -  -  _EHAtText:
   59 00:4367 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4371 -  -  -  -  
   61 00:4371 -  -  -  -  NotImplemented:
   62 00:4371 3E 05 C3 23 
              43 -  -  -  		ERR_DISABLED
   63 00:4376 -  -  -  -  TypeMismatch:
   64 00:4376 3E 02 C3 23 
              43 -  -  -  		ERR_BADTYPE
   65 00:437B -  -  -  -  BadValue:
   66 00:437B 3E 03 C3 23 
              43 -  -  -  		ERR_BADVALUE
   67 00:4380 -  -  -  -  SyntaxError:
   68 00:4380 3E 10 C3 23 
              43 -  -  -  		ERR_SYNTAX
   69 00:4385 -  -  -  -  						
   70 00:4385 -  -  -  -  ; ***************************************************************************************
   71 00:4385 -  -  -  -  ;
   72 00:4385 -  -  -  -  ;									Changes and Updates
   73 00:4385 -  -  -  -  ;
   74 00:4385 -  -  -  -  ; ***************************************************************************************
   75 00:4385 -  -  -  -  ;
   76 00:4385 -  -  -  -  ;		Date			Notes
   77 00:4385 -  -  -  -  ;		==== 			=====
   78 00:4385 -  -  -  -  ;
   79 00:4385 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:4385 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4385 -  -  -  -  ; ***************************************************************************************
    2 00:4385 -  -  -  -  ; ***************************************************************************************
    3 00:4385 -  -  -  -  ;
    4 00:4385 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4385 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4385 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4385 -  -  -  -  ;		Reviewed :	No
    8 00:4385 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4385 -  -  -  -  ;
   10 00:4385 -  -  -  -  ; ***************************************************************************************
   11 00:4385 -  -  -  -  ; ***************************************************************************************
   12 00:4385 -  -  -  -  
   13 00:4385 -  -  -  -  ; ***************************************************************************************
   14 00:4385 -  -  -  -  ;
   15 00:4385 -  -  -  -  ; 									Addition
   16 00:4385 -  -  -  -  ;
   17 00:4385 -  -  -  -  ; ***************************************************************************************
   18 00:4385 -  -  -  -  
   19 00:4385 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4385 CD 78 44 78 
              B1 C2 76 43 
              C3 9E 4C -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4390 -  -  -  -  
   22 00:4390 -  -  -  -  ; ***************************************************************************************
   23 00:4390 -  -  -  -  ;
   24 00:4390 -  -  -  -  ; 									Subtraction
   25 00:4390 -  -  -  -  ;
   26 00:4390 -  -  -  -  ; ***************************************************************************************
   27 00:4390 -  -  -  -  
   28 00:4390 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4390 CD 78 44 78 
              B1 C2 76 43 
              C3 A4 4C -  		IntegerDispatch(Int32Subtract)
   30 00:439B -  -  -  -  
   31 00:439B -  -  -  -  ; ***************************************************************************************
   32 00:439B -  -  -  -  ;
   33 00:439B -  -  -  -  ; 									  Multiply
   34 00:439B -  -  -  -  ;
   35 00:439B -  -  -  -  ; ***************************************************************************************
   36 00:439B -  -  -  -  
   37 00:439B -  -  -  -  ALUMultiply: 	;; [*]
   38 00:439B CD 78 44 78 
              B1 C2 76 43 
              C3 68 4C -  		IntegerDispatch(Int32Multiply)
   39 00:43A6 -  -  -  -  
   40 00:43A6 -  -  -  -  ; ***************************************************************************************
   41 00:43A6 -  -  -  -  ;
   42 00:43A6 -  -  -  -  ; 									  Divide
   43 00:43A6 -  -  -  -  ;
   44 00:43A6 -  -  -  -  ; ***************************************************************************************
   45 00:43A6 -  -  -  -  
   46 00:43A6 -  -  -  -  ALUDivide: 	;; [/]
   47 00:43A6 -  -  -  -  ALUDivide2:	;; [div]
   48 00:43A6 CD 78 44 78 
              B1 C2 76 43 
              C3 79 4B -  		IntegerDispatch(Int32SDivide)
   49 00:43B1 -  -  -  -  
   50 00:43B1 -  -  -  -  ; ***************************************************************************************
   51 00:43B1 -  -  -  -  ;
   52 00:43B1 -  -  -  -  ; 									  Modulus
   53 00:43B1 -  -  -  -  ;
   54 00:43B1 -  -  -  -  ; ***************************************************************************************
   55 00:43B1 -  -  -  -  
   56 00:43B1 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:43B1 CD 78 44 78 
              B1 C2 76 43 
              C3 7C 4B -  		IntegerDispatch(Int32Modulus)
   58 00:43BC -  -  -  -  
   59 00:43BC -  -  -  -  ; ***************************************************************************************
   60 00:43BC -  -  -  -  ;
   61 00:43BC -  -  -  -  ; 									  Logical
   62 00:43BC -  -  -  -  ;
   63 00:43BC -  -  -  -  ; ***************************************************************************************
   64 00:43BC -  -  -  -  
   65 00:43BC -  -  -  -  ALUAnd: 		;; [and]
   66 00:43BC CD 78 44 78 
              B1 C2 76 43 
              C3 AC 4C -  		IntegerDispatch(Int32And)
   67 00:43C7 -  -  -  -  
   68 00:43C7 -  -  -  -  ALUOr: 			;; [or]
   69 00:43C7 CD 78 44 78 
              B1 C2 76 43 
              C3 B8 4C -  		IntegerDispatch(Int32Or)
   70 00:43D2 -  -  -  -  
   71 00:43D2 -  -  -  -  ALUXor: 		;; [eor]
   72 00:43D2 CD 78 44 78 
              B1 C2 76 43 
              C3 C4 4C -  		IntegerDispatch(Int32Xor)
   73 00:43DD -  -  -  -  
   74 00:43DD -  -  -  -  ; ***************************************************************************************
   75 00:43DD -  -  -  -  ;
   76 00:43DD -  -  -  -  ;									Changes and Updates
   77 00:43DD -  -  -  -  ;
   78 00:43DD -  -  -  -  ; ***************************************************************************************
   79 00:43DD -  -  -  -  ;
   80 00:43DD -  -  -  -  ;		Date			Notes
   81 00:43DD -  -  -  -  ;		==== 			=====
   82 00:43DD -  -  -  -  ;
   83 00:43DD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:43DD -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:43DD -  -  -  -  ; ***************************************************************************************
    2 00:43DD -  -  -  -  ; ***************************************************************************************
    3 00:43DD -  -  -  -  ;
    4 00:43DD -  -  -  -  ;		Name : 		binrefs.asm
    5 00:43DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43DD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43DD -  -  -  -  ;		Reviewed :	No
    8 00:43DD -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:43DD -  -  -  -  ;
   10 00:43DD -  -  -  -  ; ***************************************************************************************
   11 00:43DD -  -  -  -  ; ***************************************************************************************
   12 00:43DD -  -  -  -  
   13 00:43DD -  -  -  -  ; ***************************************************************************************
   14 00:43DD -  -  -  -  ;
   15 00:43DD -  -  -  -  ; 									<l> <op> <r>
   16 00:43DD -  -  -  -  ;
   17 00:43DD -  -  -  -  ; ***************************************************************************************
   18 00:43DD -  -  -  -  
   19 00:43DD -  -  -  -  ALULongReference:			;; [!]
   20 00:43DD CD EB 43 -  		call 	BRGetAddress 				; calculate address
   21 00:43E0 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:43E2 CB F9 -  -  		set 	CIsReference,c
   23 00:43E4 C9 -  -  -  		ret
   24 00:43E5 -  -  -  -  
   25 00:43E5 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:43E5 CD DD 43 -  		call 	ALULongReference
   27 00:43E8 CB F1 -  -  		set 	CIsByteReference,c
   28 00:43EA C9 -  -  -  		ret
   29 00:43EB -  -  -  -  
   30 00:43EB -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:43EB CD 78 44 78 
              B1 C2 76 43 
              C3 F6 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:43F6 -  -  -  -  _BRGAMain:		
   33 00:43F6 CD 9E 4C -  		call 	Int32Add 					; address in HL'HL
   34 00:43F9 CD 61 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:43FC C9 -  -  -  		ret
   36 00:43FD -  -  -  -  
   37 00:43FD -  -  -  -  ; ***************************************************************************************
   38 00:43FD -  -  -  -  ;
   39 00:43FD -  -  -  -  ;									Changes and Updates
   40 00:43FD -  -  -  -  ;
   41 00:43FD -  -  -  -  ; ***************************************************************************************
   42 00:43FD -  -  -  -  ;
   43 00:43FD -  -  -  -  ;		Date			Notes
   44 00:43FD -  -  -  -  ;		==== 			=====
   45 00:43FD -  -  -  -  ;
   46 00:43FD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43FD -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:43FD -  -  -  -  ; ***************************************************************************************
    2 00:43FD -  -  -  -  ; ***************************************************************************************
    3 00:43FD -  -  -  -  ;
    4 00:43FD -  -  -  -  ;		Name : 		compare.asm
    5 00:43FD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43FD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43FD -  -  -  -  ;		Reviewed :	No
    8 00:43FD -  -  -  -  ;		Purpose :	Comparison code
    9 00:43FD -  -  -  -  ;
   10 00:43FD -  -  -  -  ; ***************************************************************************************
   11 00:43FD -  -  -  -  ; ***************************************************************************************
   12 00:43FD -  -  -  -  
   13 00:43FD -  -  -  -  #macro compare_equals(n)
   14 00:43FD             		call 	CompareBaseCode
   15 00:43FD             		cp 		n
   16 00:43FD             		jr 		z,UnaryInt32True
   17 00:43FD             		jr 		UnaryInt32False
   18 00:43FD             #endmacro
   19 00:43FD -  -  -  -  
   20 00:43FD -  -  -  -  #macro compare_not_equals(n)
   21 00:43FD             		call 	CompareBaseCode
   22 00:43FD             		cp 		n
   23 00:43FD             		jr 		nz,UnaryInt32True
   24 00:43FD             		jr 		UnaryInt32False
   25 00:43FD             #endmacro
   26 00:43FD -  -  -  -  
   27 00:43FD -  -  -  -  ; ***************************************************************************************
   28 00:43FD -  -  -  -  ;
   29 00:43FD -  -  -  -  ; 								Return True/False
   30 00:43FD -  -  -  -  ;
   31 00:43FD -  -  -  -  ; ***************************************************************************************
   32 00:43FD -  -  -  -  
   33 00:43FD -  -  -  -  UnaryInt32True:	;; [true]
   34 00:43FD 3E FF -  -  		ld 		a,255
   35 00:43FF 18 01 -  -  		jr 		_Int32Logical
   36 00:4401 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:4401 AF -  -  -  		xor 	a
   38 00:4402 -  -  -  -  _Int32Logical:
   39 00:4402 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4403 67 -  -  -  		ld 		h,a
   41 00:4404 D9 -  -  -  		exx
   42 00:4405 6F -  -  -  		ld 		l,a
   43 00:4406 67 -  -  -  		ld 		h,a
   44 00:4407 D9 -  -  -  		exx
   45 00:4408 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:440A C9 -  -  -  		ret
   47 00:440B -  -  -  -  
   48 00:440B -  -  -  -  ; ***************************************************************************************
   49 00:440B -  -  -  -  ;
   50 00:440B -  -  -  -  ; 										> = < (compare == value)
   51 00:440B -  -  -  -  ;
   52 00:440B -  -  -  -  ; ***************************************************************************************
   53 00:440B -  -  -  -  
   54 00:440B -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:440B CD 41 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4414 -  -  -  -  
   57 00:4414 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4414 CD 41 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:441D -  -  -  -  
   60 00:441D -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:441D CD 41 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4426 -  -  -  -  
   63 00:4426 -  -  -  -  ; ***************************************************************************************
   64 00:4426 -  -  -  -  ;
   65 00:4426 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4426 -  -  -  -  ;
   67 00:4426 -  -  -  -  ; ***************************************************************************************
   68 00:4426 -  -  -  -  
   69 00:4426 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4426 CD 41 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:442F -  -  -  -  
   72 00:442F -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:442F CD 41 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4438 -  -  -  -  
   75 00:4438 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4438 CD 41 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4441 -  -  -  -  
   78 00:4441 -  -  -  -  ; ***************************************************************************************
   79 00:4441 -  -  -  -  ;
   80 00:4441 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4441 -  -  -  -  ;
   82 00:4441 -  -  -  -  ; ***************************************************************************************
   83 00:4441 -  -  -  -  
   84 00:4441 -  -  -  -  CompareBaseCode:
   85 00:4441 CD 78 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4444 -  -  -  -  
   87 00:4444 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4445 A1 -  -  -  		and 	c
   89 00:4446 CB 47 -  -  		bit 	CIsString,a 
   90 00:4448 C2 57 44 -  		jp 		nz,StringCompare
   91 00:444B -  -  -  -  
   92 00:444B 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:444C B1 -  -  -  		or 		c
   94 00:444D CB 47 -  -  		bit 	CIsString,a 
   95 00:444F CA D7 4C -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4452 -  -  -  -  
   97 00:4452 3E 02 C3 23 
              43 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4457 -  -  -  -  ;
   99 00:4457 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4457 -  -  -  -  ;
  101 00:4457 -  -  -  -  StringCompare:
  102 00:4457 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4458 BE -  -  -  		cp 		(hl)
  104 00:4459 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:445B 20 08 -  -  		jr 		nz,_SCLess
  106 00:445D 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:445E 23 -  -  -  		inc 	hl
  108 00:445F FE 20 -  -  		cp 		' '
  109 00:4461 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4463 AF -  -  -  		xor 	a 							; return 0.
  111 00:4464 C9 -  -  -  		ret
  112 00:4465 -  -  -  -  
  113 00:4465 -  -  -  -  _SCLess:
  114 00:4465 3E FF -  -  		ld 		a,$FF
  115 00:4467 C9 -  -  -  		ret
  116 00:4468 -  -  -  -  _SCGreater:
  117 00:4468 3E 01 -  -  		ld 		a,1
  118 00:446A C9 -  -  -  		ret
  119 00:446B -  -  -  -  
  120 00:446B 3E 11 C3 23 
              43 -  -  -  		ERR_TODO()
  121 00:4470 -  -  -  -  
  122 00:4470 -  -  -  -  ; ***************************************************************************************
  123 00:4470 -  -  -  -  ;
  124 00:4470 -  -  -  -  ;									Changes and Updates
  125 00:4470 -  -  -  -  ;
  126 00:4470 -  -  -  -  ; ***************************************************************************************
  127 00:4470 -  -  -  -  ;
  128 00:4470 -  -  -  -  ;		Date			Notes
  129 00:4470 -  -  -  -  ;		==== 			=====
  130 00:4470 -  -  -  -  ;
  131 00:4470 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:4470 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:4470 -  -  -  -  ; ***************************************************************************************
    2 00:4470 -  -  -  -  ; ***************************************************************************************
    3 00:4470 -  -  -  -  ;
    4 00:4470 -  -  -  -  ;		Name : 		utility.asm
    5 00:4470 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4470 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4470 -  -  -  -  ;		Reviewed :	No
    8 00:4470 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:4470 -  -  -  -  ;
   10 00:4470 -  -  -  -  ; ***************************************************************************************
   11 00:4470 -  -  -  -  ; ***************************************************************************************
   12 00:4470 -  -  -  -  
   13 00:4470 -  -  -  -  ; ***************************************************************************************
   14 00:4470 -  -  -  -  ;
   15 00:4470 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:4470 -  -  -  -  ;
   17 00:4470 -  -  -  -  ; ***************************************************************************************
   18 00:4470 -  -  -  -  
   19 00:4470 -  -  -  -  SwapHLDE:
   20 00:4470 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4471 D9 -  -  -  			exx
   22 00:4472 EB -  -  -  			ex 		de,hl
   23 00:4473 D9 -  -  -  			exx
   24 00:4474 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4475 41 -  -  -  			ld 		b,c
   26 00:4476 4F -  -  -  			ld 		c,a
   27 00:4477 C9 -  -  -  			ret
   28 00:4478 -  -  -  -  
   29 00:4478 -  -  -  -  ; ***************************************************************************************
   30 00:4478 -  -  -  -  ;
   31 00:4478 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:4478 -  -  -  -  ;
   33 00:4478 -  -  -  -  ; ***************************************************************************************
   34 00:4478 -  -  -  -  
   35 00:4478 -  -  -  -  DereferenceBoth:
   36 00:4478 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:447A C4 33 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:447D CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:447F C8 -  -  -  			ret 	z
   40 00:4480 CD 70 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:4483 CD 33 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4486 CD 70 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4489 C9 -  -  -  			ret
   44 00:448A -  -  -  -  
   45 00:448A -  -  -  -  ; ***************************************************************************************
   46 00:448A -  -  -  -  ;
   47 00:448A -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:448A -  -  -  -  ;
   49 00:448A -  -  -  -  ; ***************************************************************************************
   50 00:448A -  -  -  -  
   51 00:448A -  -  -  -  NegateHLHL:	
   52 00:448A CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:448C C2 76 43 -  			jp 		nz,TypeMismatch
   54 00:448F CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4491 C4 33 45 -  			call 	nz,Dereference 			; if required.
   56 00:4494 CD FE 4C -  			call 	Int32Negate
   57 00:4497 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:4498 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4498 -  -  -  -  ; ***************************************************************************************
    2 00:4498 -  -  -  -  ; ***************************************************************************************
    3 00:4498 -  -  -  -  ;
    4 00:4498 -  -  -  -  ;		Name : 		expression.asm
    5 00:4498 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4498 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4498 -  -  -  -  ;		Reviewed :	None
    8 00:4498 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4498 -  -  -  -  ;
   10 00:4498 -  -  -  -  ; ***************************************************************************************
   11 00:4498 -  -  -  -  ; ***************************************************************************************
   12 00:4498 -  -  -  -  
   13 00:4498 -  -  -  -  ; ***************************************************************************************
   14 00:4498 -  -  -  -  ;
   15 00:4498 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4498 -  -  -  -  ;
   17 00:4498 -  -  -  -  ; ***************************************************************************************
   18 00:4498 -  -  -  -  
   19 00:4498 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4498 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4499 -  -  -  -  EvaluateAtPrecedence:
   22 00:4499 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:449A -  -  -  -  		;
   24 00:449A -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:449A -  -  -  -  		;
   26 00:449A CD 63 45 -  		call 	EvaluateTerm 				; get term
   27 00:449D -  -  -  -  		;
   28 00:449D -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:449D -  -  -  -  		;
   30 00:449D D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:449E -  -  -  -  _EAPLoop:
   32 00:449E DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:44A1 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:44A3 D8 -  -  -  		ret 	c
   35 00:44A4 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:44A6 D0 -  -  -  		ret 	nc
   37 00:44A7 -  -  -  -  		;
   38 00:44A7 -  -  -  -  		; 		Get the precedence.
   39 00:44A7 -  -  -  -  		;
   40 00:44A7 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:44A8 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:44AA 21 60 49 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:44AD B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:44AE 6F -  -  -  		ld 		l,a
   45 00:44AF 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:44B0 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:44B1 -  -  -  -  		;
   48 00:44B1 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:44B1 -  -  -  -  		;
   50 00:44B1 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:44B2 BB -  -  -  		cp 		e
   52 00:44B3 D0 -  -  -  		ret 	nc
   53 00:44B4 -  -  -  -  
   54 00:44B4 -  -  -  -  		;
   55 00:44B4 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:44B4 -  -  -  -  		;
   57 00:44B4 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:44B5 -  -  -  -  		;
   59 00:44B5 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:44B8 F5 -  -  -  		push 	af
   61 00:44B9 -  -  -  -  		;
   62 00:44B9 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:44BA D9 -  -  -  		exx 								; save HL'
   64 00:44BB E5 -  -  -  		push 	hl
   65 00:44BC D9 -  -  -  		exx 								
   66 00:44BD E5 -  -  -  		push 	hl 							; save HL
   67 00:44BE -  -  -  -  		;
   68 00:44BE DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:44C0 -  -  -  -  		;
   70 00:44C0 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:44C0 -  -  -  -  		;
   72 00:44C0 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:44C1 CD 99 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:44C4 -  -  -  -  		;
   75 00:44C4 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:44C4 -  -  -  -  		;
   77 00:44C4 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:44C5 -  -  -  -  
   79 00:44C5 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:44C6 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:44C7 D9 -  -  -  		exx
   82 00:44C8 EB -  -  -  		ex 		de,hl
   83 00:44C9 E1 -  -  -  		pop 	hl
   84 00:44CA D9 -  -  -  		exx
   85 00:44CB C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:44CC 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:44CD -  -  -  -  		;
   88 00:44CD -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:44CD -  -  -  -  		; 		is in B (type) DE'DE
   90 00:44CD -  -  -  -  		;
   91 00:44CD F1 -  -  -  		pop 	af 							; get operator in A
   92 00:44CE -  -  -  -  		;
   93 00:44CE -  -  -  -  		; 		Call the binary operator in A.
   94 00:44CE -  -  -  -  		;
   95 00:44CE D5 -  -  -  		push 	de
   96 00:44CF E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:44D0 E6 7F 21 00 
              00 6F 29 11 
              D9 4A 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:44E2 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:44E3 D1 -  -  -  		pop 	de 							; restore DE
  100 00:44E4 CD 60 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:44E7 -  -  -  -  		;
  102 00:44E7 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:44E8 -  -  -  -  		;
  104 00:44E8 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:44EA -  -  -  -  
  106 00:44EA -  -  -  -  ; ***************************************************************************************
  107 00:44EA -  -  -  -  ;
  108 00:44EA -  -  -  -  ;									Changes and Updates
  109 00:44EA -  -  -  -  ;
  110 00:44EA -  -  -  -  ; ***************************************************************************************
  111 00:44EA -  -  -  -  ;
  112 00:44EA -  -  -  -  ;		Date			Notes
  113 00:44EA -  -  -  -  ;		==== 			=====
  114 00:44EA -  -  -  -  ;
  115 00:44EA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:44EA -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:44EA -  -  -  -  ; ***************************************************************************************
    2 00:44EA -  -  -  -  ; ***************************************************************************************
    3 00:44EA -  -  -  -  ;
    4 00:44EA -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:44EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44EA -  -  -  -  ;		Reviewed :	No
    8 00:44EA -  -  -  -  ;		Purpose :	Expression support functions
    9 00:44EA -  -  -  -  ;
   10 00:44EA -  -  -  -  ; ***************************************************************************************
   11 00:44EA -  -  -  -  ; ***************************************************************************************
   12 00:44EA -  -  -  -  
   13 00:44EA -  -  -  -  ; ***************************************************************************************
   14 00:44EA -  -  -  -  ;
   15 00:44EA -  -  -  -  ; 								Evaluate an integer term
   16 00:44EA -  -  -  -  ;
   17 00:44EA -  -  -  -  ; ***************************************************************************************
   18 00:44EA -  -  -  -  
   19 00:44EA -  -  -  -  EvaluateIntegerTerm:
   20 00:44EA CD 63 45 -  		call 	EvaluateTerm
   21 00:44ED CD 33 45 -  		call 	DeReference
   22 00:44F0 CB 41 -  -  		bit 	CIsString,c
   23 00:44F2 C8 -  -  -  		ret 	z
   24 00:44F3 C3 76 43 -  		jp 		TypeMismatch
   25 00:44F6 -  -  -  -  
   26 00:44F6 -  -  -  -  ; ***************************************************************************************
   27 00:44F6 -  -  -  -  ;
   28 00:44F6 -  -  -  -  ; 								Evaluate a string term
   29 00:44F6 -  -  -  -  ;
   30 00:44F6 -  -  -  -  ; ***************************************************************************************
   31 00:44F6 -  -  -  -  
   32 00:44F6 -  -  -  -  EvaluateStringTerm:
   33 00:44F6 CD 63 45 -  		call 	EvaluateTerm
   34 00:44F9 CD 33 45 -  		call 	DeReference
   35 00:44FC CB 41 -  -  		bit 	CIsString,c
   36 00:44FE C0 -  -  -  		ret 	nz
   37 00:44FF C3 76 43 -  		jp 		TypeMismatch
   38 00:4502 -  -  -  -  
   39 00:4502 -  -  -  -  ; ***************************************************************************************
   40 00:4502 -  -  -  -  ;
   41 00:4502 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4502 -  -  -  -  ;
   43 00:4502 -  -  -  -  ; ***************************************************************************************
   44 00:4502 -  -  -  -  
   45 00:4502 -  -  -  -  EvaluateValue:
   46 00:4502 CD 98 44 -  		call 	EvaluateAtPrecedence0
   47 00:4505 C3 33 45 -  		jp 		Dereference
   48 00:4508 -  -  -  -  
   49 00:4508 -  -  -  -  ; ***************************************************************************************
   50 00:4508 -  -  -  -  ;
   51 00:4508 -  -  -  -  ; 									Evaluate a number
   52 00:4508 -  -  -  -  ;
   53 00:4508 -  -  -  -  ; ***************************************************************************************
   54 00:4508 -  -  -  -  
   55 00:4508 -  -  -  -  EvaluateInteger:
   56 00:4508 CD 02 45 -  		call 	EvaluateValue
   57 00:450B CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:450D C8 -  -  -  		ret 	z
   59 00:450E C3 76 43 -  		jp 		TypeMismatch
   60 00:4511 -  -  -  -  
   61 00:4511 -  -  -  -  ; ***************************************************************************************
   62 00:4511 -  -  -  -  ;
   63 00:4511 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4511 -  -  -  -  ;
   65 00:4511 -  -  -  -  ; ***************************************************************************************
   66 00:4511 -  -  -  -  
   67 00:4511 -  -  -  -  Evaluate8BitInteger:
   68 00:4511 CD 08 45 -  		call 	EvaluateInteger
   69 00:4514 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4515 7C -  -  -  		ld 		a,h
   71 00:4516 B5 -  -  -  		or 		l
   72 00:4517 D9 -  -  -  		exx 	
   73 00:4518 B4 -  -  -  		or 		h
   74 00:4519 C2 7B 43 -  		jp 		nz,BadValue
   75 00:451C 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:451D C9 -  -  -  		ret
   77 00:451E -  -  -  -  		
   78 00:451E -  -  -  -  ; ***************************************************************************************
   79 00:451E -  -  -  -  ;
   80 00:451E -  -  -  -  ; 									Evaluate a string
   81 00:451E -  -  -  -  ;
   82 00:451E -  -  -  -  ; ***************************************************************************************
   83 00:451E -  -  -  -  
   84 00:451E -  -  -  -  EvaluateString:
   85 00:451E CD 02 45 -  		call 	EvaluateValue
   86 00:4521 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:4523 CA 76 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4526 C9 -  -  -  		ret
   89 00:4527 -  -  -  -  
   90 00:4527 -  -  -  -  ; ***************************************************************************************
   91 00:4527 -  -  -  -  ;
   92 00:4527 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4527 -  -  -  -  ;
   94 00:4527 -  -  -  -  ; ***************************************************************************************
   95 00:4527 -  -  -  -  
   96 00:4527 -  -  -  -  Return8BitConstant:
   97 00:4527 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:452A 6F -  -  -  		ld 		l,a
   99 00:452B -  -  -  -  Return16BitConstant:
  100 00:452B D9 -  -  -  		exx 								; clear HL'
  101 00:452C 21 00 00 -  		ld 		hl,0
  102 00:452F D9 -  -  -  		exx
  103 00:4530 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4532 C9 -  -  -  		ret
  105 00:4533 -  -  -  -  
  106 00:4533 -  -  -  -  ; ***************************************************************************************
  107 00:4533 -  -  -  -  ;
  108 00:4533 -  -  -  -  ;									Changes and Updates
  109 00:4533 -  -  -  -  ;
  110 00:4533 -  -  -  -  ; ***************************************************************************************
  111 00:4533 -  -  -  -  ;
  112 00:4533 -  -  -  -  ;		Date			Notes
  113 00:4533 -  -  -  -  ;		==== 			=====
  114 00:4533 -  -  -  -  ;
  115 00:4533 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:4533 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4533 -  -  -  -  ; ***************************************************************************************
    2 00:4533 -  -  -  -  ; ***************************************************************************************
    3 00:4533 -  -  -  -  ;
    4 00:4533 -  -  -  -  ;		Name : 		reference.asm
    5 00:4533 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4533 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4533 -  -  -  -  ;		Reviewed :	No
    8 00:4533 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4533 -  -  -  -  ;
   10 00:4533 -  -  -  -  ; ***************************************************************************************
   11 00:4533 -  -  -  -  ; ***************************************************************************************
   12 00:4533 -  -  -  -  
   13 00:4533 -  -  -  -  ; ***************************************************************************************
   14 00:4533 -  -  -  -  ;
   15 00:4533 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4533 -  -  -  -  ;
   17 00:4533 -  -  -  -  ; ***************************************************************************************
   18 00:4533 -  -  -  -  
   19 00:4533 -  -  -  -  Dereference:
   20 00:4533 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4535 C8 -  -  -  		ret 	z
   22 00:4536 -  -  -  -  
   23 00:4536 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4538 -  -  -  -  		
   25 00:4538 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:453A 20 20 -  -  		jr 		nz,_DRInternal
   27 00:453C -  -  -  -  
   28 00:453C CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:453E 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4540 -  -  -  -  
   31 00:4540 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4541 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4545 D9 -  -  -  		exx
   34 00:4546 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4547 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4548 23 -  -  -  		inc  	hl
   37 00:4549 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:454D D9 -  -  -  		exx 								; fix back
   39 00:454E C9 -  -  -  		ret
   40 00:454F -  -  -  -  
   41 00:454F -  -  -  -  _DeRefByte:		
   42 00:454F 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4550 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4553 6F -  -  -  		ld	 	l,a
   45 00:4554 D9 -  -  -  		exx
   46 00:4555 21 00 00 -  		ld 		hl,$0000
   47 00:4558 D9 -  -  -  		exx
   48 00:4559 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:455B C9 -  -  -  		ret
   50 00:455C -  -  -  -  
   51 00:455C -  -  -  -  _DRInternal:
   52 00:455C 3E 05 C3 23 
              43 -  -  -  		ERR_DISABLED
   53 00:4561 -  -  -  -  
   54 00:4561 -  -  -  -  ; ***************************************************************************************
   55 00:4561 -  -  -  -  ;
   56 00:4561 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4561 -  -  -  -  ;
   58 00:4561 -  -  -  -  ; ***************************************************************************************
   59 00:4561 -  -  -  -  
   60 00:4561 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4561 -  -  -  -  		#ifdef EZ80
   62 00:4561             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4561             		exx
   64 00:4561             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4561             		ld 		hl,$0000 					; zero HL'
   66 00:4561             		exx
   67 00:4561             		ld 		hl,(AConvert) 				; load UHL
   68 00:4561             		#endif
   69 00:4561 C9 -  -  -  		ret
   70 00:4562 -  -  -  -  
   71 00:4562 -  -  -  -  ; ***************************************************************************************
   72 00:4562 -  -  -  -  ;
   73 00:4562 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4562 -  -  -  -  ;
   75 00:4562 -  -  -  -  ; ***************************************************************************************
   76 00:4562 -  -  -  -  
   77 00:4562 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4562 -  -  -  -  		#ifdef EZ80
   79 00:4562             		ld 		(AConvert),hl
   80 00:4562             		ld 		hl,$0000
   81 00:4562             		ld 		(AConvert+3),hl
   82 00:4562             		exx
   83 00:4562             		ld 		hl,(AConvert+2)
   84 00:4562             		exx
   85 00:4562             		xor 	a
   86 00:4562             		ld 		(AConvert+2),a
   87 00:4562             		ld 		hl,(AConvert)
   88 00:4562             		#endif
   89 00:4562 C9 -  -  -  		ret
   90 00:4563 -  -  -  -  
   91 00:4563 -  -  -  -  ; ***************************************************************************************
   92 00:4563 -  -  -  -  ;
   93 00:4563 -  -  -  -  ;									Changes and Updates
   94 00:4563 -  -  -  -  ;
   95 00:4563 -  -  -  -  ; ***************************************************************************************
   96 00:4563 -  -  -  -  ;
   97 00:4563 -  -  -  -  ;		Date			Notes
   98 00:4563 -  -  -  -  ;		==== 			=====
   99 00:4563 -  -  -  -  ;
  100 00:4563 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:4563 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4563 -  -  -  -  ; ***************************************************************************************
    2 00:4563 -  -  -  -  ; ***************************************************************************************
    3 00:4563 -  -  -  -  ;
    4 00:4563 -  -  -  -  ;		Name : 		term.asm
    5 00:4563 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4563 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4563 -  -  -  -  ;		Reviewed :	No
    8 00:4563 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4563 -  -  -  -  ;
   10 00:4563 -  -  -  -  ; ***************************************************************************************
   11 00:4563 -  -  -  -  ; ***************************************************************************************
   12 00:4563 -  -  -  -  
   13 00:4563 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4563             		add_hlhl_16
   15 00:4563             		exx
   16 00:4563             		adc_hlhl_16
   17 00:4563             		exx
   18 00:4563             #endmacro
   19 00:4563 -  -  -  -  
   20 00:4563 -  -  -  -  ; ***************************************************************************************
   21 00:4563 -  -  -  -  ;
   22 00:4563 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4563 -  -  -  -  ;
   24 00:4563 -  -  -  -  ; ***************************************************************************************
   25 00:4563 -  -  -  -  ;
   26 00:4563 -  -  -  -  ; 		Terms can be:
   27 00:4563 -  -  -  -  ;
   28 00:4563 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4563 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4563 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4563 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4563 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4563 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4563 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4563 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4563 -  -  -  -  ; 														reference of some sort.
   37 00:4563 -  -  -  -  ;
   38 00:4563 -  -  -  -  ; ***************************************************************************************
   39 00:4563 -  -  -  -  
   40 00:4563 -  -  -  -  EvaluateTerm:		
   41 00:4563 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4565 D9 -  -  -  		exx
   43 00:4566 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4569 D9 -  -  -  		exx
   45 00:456A 21 00 00 -  		ld 		hl,$0000		
   46 00:456D -  -  -  -  		;
   47 00:456D DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:4570 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4572 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:4574 DA 12 46 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4577 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4579 C2 C1 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:457C -  -  -  -  		;
   54 00:457C -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:457C -  -  -  -  		;
   56 00:457C -  -  -  -  _ETIntegerConstant:
   57 00:457C -  -  -  -  		;
   58 00:457C -  -  -  -  _ETIntegerLoop:		
   59 00:457C DD 7E 00 -  		ld 		a,(ix+0)
   60 00:457F E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4581 B5 -  -  -  		or 		l 							; or into L
   62 00:4582 6F -  -  -  		ld 		l,a
   63 00:4583 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4585 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:4588 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:458A FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:458C D8 -  -  -  		ret 	c
   68 00:458D -  -  -  -  
   69 00:458D 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4592 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4597 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:459C 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:45A1 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:45A6 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:45AB -  -  -  -  
   76 00:45AB 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:45AD -  -  -  -  		;
   78 00:45AD -  -  -  -  		; 		Found the $3F string marker.
   79 00:45AD -  -  -  -  		;
   80 00:45AD -  -  -  -  _ETStringMarker:		
   81 00:45AD DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:45AF DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:45B1 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:45B3 E1 -  -  -  		pop 	hl
   85 00:45B4 11 00 00 -  		ld 		de,$0000
   86 00:45B7 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:45BA DD 19 -  -  		add 	ix,de
   88 00:45BC DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:45BE 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:45C0 C9 -  -  -  		ret
   91 00:45C1 -  -  -  -  		;
   92 00:45C1 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:45C1 -  -  -  -  		;
   94 00:45C1 -  -  -  -  _ETFoundKeyword:
   95 00:45C1 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:45C3 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:45C5 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:45C7 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:45C9 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:45CB -  -  -  -  		;
  101 00:45CB -  -  -  -  		;		Unary group 0
  102 00:45CB -  -  -  -  		;
  103 00:45CB E6 7F 21 00 
              00 6F 29 11 
              D9 4A 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:45DD C3 60 40 -  		jp 		JumpCode 					; and go there.
  105 00:45E0 -  -  -  -  
  106 00:45E0 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:45E0 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:45E2 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:45E4 -  -  -  -  		;
  110 00:45E4 -  -  -  -  		; 		- term
  111 00:45E4 -  -  -  -  		;
  112 00:45E4 CD EA 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:45E7 CD 8A 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:45EA C9 -  -  -  		ret
  115 00:45EB -  -  -  -  		;
  116 00:45EB -  -  -  -  		;		! ? indirection check
  117 00:45EB -  -  -  -  		;
  118 00:45EB -  -  -  -  _ETCheckIndirection:	
  119 00:45EB FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:45ED 28 05 -  -  		jr 		z,_ETIndirection
  121 00:45EF FE 83 -  -  		cp 		KWD_PLING
  122 00:45F1 C2 80 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:45F4 -  -  -  -  		;
  124 00:45F4 -  -  -  -  		; 		! ? indirection
  125 00:45F4 -  -  -  -  		;
  126 00:45F4 -  -  -  -  _ETIndirection:
  127 00:45F4 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:45F5 CD 63 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:45F8 CD 33 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:45FB CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:45FD 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:45FF CD 61 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4602 F1 -  -  -  		pop 	af 							; get type back
  134 00:4603 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4605 CB F9 -  -  		set 	CIsReference,c
  136 00:4607 FE 83 -  -  		cp 		KWD_PLING
  137 00:4609 C8 -  -  -  		ret 	z
  138 00:460A CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:460C C9 -  -  -  		ret
  140 00:460D -  -  -  -  _ETStringIndirect:
  141 00:460D 3E 02 C3 23 
              43 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4612 -  -  -  -  		;
  143 00:4612 -  -  -  -  		; 		Found an identifier.
  144 00:4612 -  -  -  -  		;
  145 00:4612 -  -  -  -  _ETVariable:
  146 00:4612 CD 69 48 -  		call 	FindVariable 				; find the variable.
  147 00:4615 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4616 3E 12 C3 23 
              43 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:461B -  -  -  -  		
  150 00:461B -  -  -  -  ; ***************************************************************************************
  151 00:461B -  -  -  -  ;
  152 00:461B -  -  -  -  ;									Changes and Updates
  153 00:461B -  -  -  -  ;
  154 00:461B -  -  -  -  ; ***************************************************************************************
  155 00:461B -  -  -  -  ;
  156 00:461B -  -  -  -  ;		Date			Notes
  157 00:461B -  -  -  -  ;		==== 			=====
  158 00:461B -  -  -  -  ;
  159 00:461B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:461B -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:461B -  -  -  -  ; ***************************************************************************************
    2 00:461B -  -  -  -  ; ***************************************************************************************
    3 00:461B -  -  -  -  ;
    4 00:461B -  -  -  -  ;		Name : 		abs.asm
    5 00:461B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:461B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:461B -  -  -  -  ;		Reviewed :	No
    8 00:461B -  -  -  -  ;		Purpose :	Absolute value 
    9 00:461B -  -  -  -  ;
   10 00:461B -  -  -  -  ; ***************************************************************************************
   11 00:461B -  -  -  -  ; ***************************************************************************************
   12 00:461B -  -  -  -  
   13 00:461B -  -  -  -  ; ***************************************************************************************
   14 00:461B -  -  -  -  ;
   15 00:461B -  -  -  -  ;								abs( unary function
   16 00:461B -  -  -  -  ;
   17 00:461B -  -  -  -  ; ***************************************************************************************
   18 00:461B -  -  -  -  
   19 00:461B -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:461B CD EA 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:461E D9 -  -  -  		exx 								; test MSB
   22 00:461F CB 7C -  -  		bit 	7,h
   23 00:4621 D9 -  -  -  		exx
   24 00:4622 C4 8A 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4625 C9 -  -  -  		ret
   26 00:4626 -  -  -  -  
   27 00:4626 -  -  -  -  ; ***************************************************************************************
   28 00:4626 -  -  -  -  ;
   29 00:4626 -  -  -  -  ;									Changes and Updates
   30 00:4626 -  -  -  -  ;
   31 00:4626 -  -  -  -  ; ***************************************************************************************
   32 00:4626 -  -  -  -  ;
   33 00:4626 -  -  -  -  ;		Date			Notes
   34 00:4626 -  -  -  -  ;		==== 			=====
   35 00:4626 -  -  -  -  ;
   36 00:4626 -  -  -  -  ; ***************************************************************************************
   37 00:4626 -  -  -  -  		
Listing for file "_build.asm"
   35 00:4626 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4626 -  -  -  -  ; ***************************************************************************************
    2 00:4626 -  -  -  -  ; ***************************************************************************************
    3 00:4626 -  -  -  -  ;
    4 00:4626 -  -  -  -  ;		Name : 		asc.asm
    5 00:4626 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4626 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4626 -  -  -  -  ;		Reviewed :	No
    8 00:4626 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4626 -  -  -  -  ;
   10 00:4626 -  -  -  -  ; ***************************************************************************************
   11 00:4626 -  -  -  -  ; ***************************************************************************************
   12 00:4626 -  -  -  -  
   13 00:4626 -  -  -  -  ; ***************************************************************************************
   14 00:4626 -  -  -  -  ;
   15 00:4626 -  -  -  -  ;								Asc unary function
   16 00:4626 -  -  -  -  ;
   17 00:4626 -  -  -  -  ; ***************************************************************************************
   18 00:4626 -  -  -  -  
   19 00:4626 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4626 CD F6 44 -  		call	EvaluateStringTerm			; Get string
   21 00:4629 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:462A C3 27 45 -  		jp 		Return8BitConstant
   23 00:462D -  -  -  -  
   24 00:462D -  -  -  -  ; ***************************************************************************************
   25 00:462D -  -  -  -  ;
   26 00:462D -  -  -  -  ;									Changes and Updates
   27 00:462D -  -  -  -  ;
   28 00:462D -  -  -  -  ; ***************************************************************************************
   29 00:462D -  -  -  -  ;
   30 00:462D -  -  -  -  ;		Date			Notes
   31 00:462D -  -  -  -  ;		==== 			=====
   32 00:462D -  -  -  -  ;
   33 00:462D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:462D -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:462D -  -  -  -  ; ***************************************************************************************
    2 00:462D -  -  -  -  ; ***************************************************************************************
    3 00:462D -  -  -  -  ;
    4 00:462D -  -  -  -  ;		Name : 		chr.asm
    5 00:462D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:462D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:462D -  -  -  -  ;		Reviewed :	No
    8 00:462D -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:462D -  -  -  -  ;
   10 00:462D -  -  -  -  ; ***************************************************************************************
   11 00:462D -  -  -  -  ; ***************************************************************************************
   12 00:462D -  -  -  -  
   13 00:462D -  -  -  -  ; ***************************************************************************************
   14 00:462D -  -  -  -  ;
   15 00:462D -  -  -  -  ;								Chr$() unary function
   16 00:462D -  -  -  -  ;
   17 00:462D -  -  -  -  ; ***************************************************************************************
   18 00:462D -  -  -  -  
   19 00:462D -  -  -  -  Unary_Chr:	;; [chr]
   20 00:462D CD FE 42 -  		call 	CheckDollar
   21 00:4630 CD EA 44 -  		call 	EvaluateIntegerTerm
   22 00:4633 7D -  -  -  		ld 		a,l 						; get character
   23 00:4634 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4636 21 9B 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:4639 36 0D -  -  		ld 		(hl),13
   26 00:463B 2B -  -  -  		dec 	hl
   27 00:463C 77 -  -  -  		ld 		(hl),a
   28 00:463D C9 -  -  -  		ret
   29 00:463E -  -  -  -  
   30 00:463E -  -  -  -  ; ***************************************************************************************
   31 00:463E -  -  -  -  ;
   32 00:463E -  -  -  -  ;									Changes and Updates
   33 00:463E -  -  -  -  ;
   34 00:463E -  -  -  -  ; ***************************************************************************************
   35 00:463E -  -  -  -  ;
   36 00:463E -  -  -  -  ;		Date			Notes
   37 00:463E -  -  -  -  ;		==== 			=====
   38 00:463E -  -  -  -  ;
   39 00:463E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:463E -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:463E -  -  -  -  ; ***************************************************************************************
    2 00:463E -  -  -  -  ; ***************************************************************************************
    3 00:463E -  -  -  -  ;
    4 00:463E -  -  -  -  ;		Name : 		len.asm
    5 00:463E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:463E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:463E -  -  -  -  ;		Reviewed :	None
    8 00:463E -  -  -  -  ;		Purpose :	String Length
    9 00:463E -  -  -  -  ;
   10 00:463E -  -  -  -  ; ***************************************************************************************
   11 00:463E -  -  -  -  ; ***************************************************************************************
   12 00:463E -  -  -  -  
   13 00:463E -  -  -  -  ; ***************************************************************************************
   14 00:463E -  -  -  -  ;
   15 00:463E -  -  -  -  ;								Len unary function
   16 00:463E -  -  -  -  ;
   17 00:463E -  -  -  -  ; ***************************************************************************************
   18 00:463E -  -  -  -  
   19 00:463E -  -  -  -  Unary_Len:	;; [len]
   20 00:463E CD F6 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4641 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4642 CD 01 44 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4645 -  -  -  -  _ULCount:
   24 00:4645 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4646 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4648 D8 -  -  -  		ret 	c
   27 00:4649 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:464A 13 -  -  -  		inc 	de
   29 00:464B 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:464D -  -  -  -  
   31 00:464D -  -  -  -  ; ***************************************************************************************
   32 00:464D -  -  -  -  ;
   33 00:464D -  -  -  -  ;									Changes and Updates
   34 00:464D -  -  -  -  ;
   35 00:464D -  -  -  -  ; ***************************************************************************************
   36 00:464D -  -  -  -  ;
   37 00:464D -  -  -  -  ;		Date			Notes
   38 00:464D -  -  -  -  ;		==== 			=====
   39 00:464D -  -  -  -  ;
   40 00:464D -  -  -  -  ; ***************************************************************************************
   41 00:464D -  -  -  -  		
Listing for file "_build.asm"
   38 00:464D -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:464D -  -  -  -  ; ***************************************************************************************
    2 00:464D -  -  -  -  ; ***************************************************************************************
    3 00:464D -  -  -  -  ;
    4 00:464D -  -  -  -  ;		Name : 		makestring.asm
    5 00:464D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:464D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:464D -  -  -  -  ;		Reviewed :	No
    8 00:464D -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:464D -  -  -  -  ;
   10 00:464D -  -  -  -  ; ***************************************************************************************
   11 00:464D -  -  -  -  ; ***************************************************************************************
   12 00:464D -  -  -  -  
   13 00:464D -  -  -  -  ; ***************************************************************************************
   14 00:464D -  -  -  -  ;
   15 00:464D -  -  -  -  ;								Str$() unary function
   16 00:464D -  -  -  -  ;
   17 00:464D -  -  -  -  ; ***************************************************************************************
   18 00:464D -  -  -  -  
   19 00:464D -  -  -  -  Unary_MkStr:	;; [$]
   20 00:464D CD EA 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4650 CD 61 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4653 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4655 C9 -  -  -  		ret
   24 00:4656 -  -  -  -  
   25 00:4656 -  -  -  -  ; ***************************************************************************************
   26 00:4656 -  -  -  -  ;
   27 00:4656 -  -  -  -  ;									Changes and Updates
   28 00:4656 -  -  -  -  ;
   29 00:4656 -  -  -  -  ; ***************************************************************************************
   30 00:4656 -  -  -  -  ;
   31 00:4656 -  -  -  -  ;		Date			Notes
   32 00:4656 -  -  -  -  ;		==== 			=====
   33 00:4656 -  -  -  -  ;
   34 00:4656 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4656 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4656 -  -  -  -  ; ***************************************************************************************
    2 00:4656 -  -  -  -  ; ***************************************************************************************
    3 00:4656 -  -  -  -  ;
    4 00:4656 -  -  -  -  ;		Name : 		not.asm
    5 00:4656 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4656 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4656 -  -  -  -  ;		Reviewed :	No
    8 00:4656 -  -  -  -  ;		Purpose :	Logical not
    9 00:4656 -  -  -  -  ;
   10 00:4656 -  -  -  -  ; ***************************************************************************************
   11 00:4656 -  -  -  -  ; ***************************************************************************************
   12 00:4656 -  -  -  -  
   13 00:4656 -  -  -  -  ; ***************************************************************************************
   14 00:4656 -  -  -  -  ;
   15 00:4656 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4656 -  -  -  -  ;
   17 00:4656 -  -  -  -  ; ***************************************************************************************
   18 00:4656 -  -  -  -  
   19 00:4656 -  -  -  -  Unary_Not:		;; [not]
   20 00:4656 CD EA 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4659 CD 60 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:465C CD 60 46 -  		call 	__UNSwap		
   23 00:465F C9 -  -  -  		ret
   24 00:4660 -  -  -  -  
   25 00:4660 -  -  -  -  __UNSwap:
   26 00:4660 7C -  -  -  		ld 		a,h
   27 00:4661 2F -  -  -  		cpl
   28 00:4662 67 -  -  -  		ld 		h,a
   29 00:4663 7D -  -  -  		ld 		a,l
   30 00:4664 2F -  -  -  		cpl 	
   31 00:4665 6F -  -  -  		ld 		l,a
   32 00:4666 D9 -  -  -  		exx
   33 00:4667 C9 -  -  -  		ret
   34 00:4668 -  -  -  -  
   35 00:4668 -  -  -  -  ; ***************************************************************************************
   36 00:4668 -  -  -  -  ;
   37 00:4668 -  -  -  -  ;									Changes and Updates
   38 00:4668 -  -  -  -  ;
   39 00:4668 -  -  -  -  ; ***************************************************************************************
   40 00:4668 -  -  -  -  ;
   41 00:4668 -  -  -  -  ;		Date			Notes
   42 00:4668 -  -  -  -  ;		==== 			=====
   43 00:4668 -  -  -  -  ;
   44 00:4668 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:4668 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4668 -  -  -  -  ; ***************************************************************************************
    2 00:4668 -  -  -  -  ; ***************************************************************************************
    3 00:4668 -  -  -  -  ;
    4 00:4668 -  -  -  -  ;		Name : 		page.asm
    5 00:4668 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4668 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4668 -  -  -  -  ;		Reviewed :	No
    8 00:4668 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4668 -  -  -  -  ;
   10 00:4668 -  -  -  -  ; ***************************************************************************************
   11 00:4668 -  -  -  -  ; ***************************************************************************************
   12 00:4668 -  -  -  -  
   13 00:4668 -  -  -  -  ; ***************************************************************************************
   14 00:4668 -  -  -  -  ;
   15 00:4668 -  -  -  -  ;							page unary function (no bracket)
   16 00:4668 -  -  -  -  ;
   17 00:4668 -  -  -  -  ; ***************************************************************************************
   18 00:4668 -  -  -  -  
   19 00:4668 -  -  -  -  Unary_Page:	;; [page]
   20 00:4668 2A 34 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:466B D9 -  -  -  			exx
   22 00:466C 2A 36 40 -  			ld 		hl,(CodeAddress+2)
   23 00:466F D9 -  -  -  			exx
   24 00:4670 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4672 C9 -  -  -  			ret
   26 00:4673 -  -  -  -  
   27 00:4673 -  -  -  -  ; ***************************************************************************************
   28 00:4673 -  -  -  -  ;
   29 00:4673 -  -  -  -  ;									Changes and Updates
   30 00:4673 -  -  -  -  ;
   31 00:4673 -  -  -  -  ; ***************************************************************************************
   32 00:4673 -  -  -  -  ;
   33 00:4673 -  -  -  -  ;		Date			Notes
   34 00:4673 -  -  -  -  ;		==== 			=====
   35 00:4673 -  -  -  -  ;
   36 00:4673 -  -  -  -  ; ***************************************************************************************
   37 00:4673 -  -  -  -  			
Listing for file "_build.asm"
   41 00:4673 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:4673 -  -  -  -  ; ***************************************************************************************
    2 00:4673 -  -  -  -  ; ***************************************************************************************
    3 00:4673 -  -  -  -  ;
    4 00:4673 -  -  -  -  ;		Name : 		random.asm
    5 00:4673 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4673 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4673 -  -  -  -  ;		Reviewed :	No
    8 00:4673 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:4673 -  -  -  -  ;
   10 00:4673 -  -  -  -  ; ***************************************************************************************
   11 00:4673 -  -  -  -  ; ***************************************************************************************
   12 00:4673 -  -  -  -  
   13 00:4673 -  -  -  -  ; ***************************************************************************************
   14 00:4673 -  -  -  -  ;
   15 00:4673 -  -  -  -  ;								Random unary function
   16 00:4673 -  -  -  -  ;
   17 00:4673 -  -  -  -  ; ***************************************************************************************
   18 00:4673 -  -  -  -  
   19 00:4673 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:4673 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:4674 CD EA 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4677 D9 -  -  -  		exx 								; is it -ve
   23 00:4678 CB 7C -  -  		bit 	7,h
   24 00:467A D9 -  -  -  		exx
   25 00:467B 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:467D 22 6C 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4680 D9 -  -  -  		exx
   28 00:4681 22 70 40 -  		ld 		(RandomSeed+4),hl
   29 00:4684 D9 -  -  -  		exx
   30 00:4685 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4687 C9 -  -  -  		ret
   32 00:4688 -  -  -  -  _URDontSeed:		
   33 00:4688 -  -  -  -  
   34 00:4688 CD D0 4C -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:468B 28 19 -  -  		jr 		z,_URFail
   36 00:468D E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:468E D9 -  -  -  		exx
   38 00:468F E5 -  -  -  		push 	hl
   39 00:4690 D9 -  -  -  		exx
   40 00:4691 -  -  -  -  		;
   41 00:4691 CD B5 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:4694 D9 -  -  -  		exx
   43 00:4695 CD B5 46 -  		call 	URandomHL
   44 00:4698 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:469A D9 -  -  -  		exx
   46 00:469B -  -  -  -  		;
   47 00:469B D9 -  -  -  		exx 								; restore range.
   48 00:469C D1 -  -  -  		pop 	de
   49 00:469D D9 -  -  -  		exx
   50 00:469E D1 -  -  -  		pop 	de
   51 00:469F -  -  -  -  		;
   52 00:469F CD 7C 4B -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:46A2 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:46A3 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:46A5 C9 -  -  -  		ret
   56 00:46A6 -  -  -  -  _URFail:
   57 00:46A6 3E 03 C3 23 
              43 -  -  -  		ERR_BADVALUE
   58 00:46AB -  -  -  -  ; ***************************************************************************************
   59 00:46AB -  -  -  -  ;
   60 00:46AB -  -  -  -  ; 									Push RNG off zero
   61 00:46AB -  -  -  -  ;
   62 00:46AB -  -  -  -  ; ***************************************************************************************
   63 00:46AB -  -  -  -  
   64 00:46AB -  -  -  -  UnaryRandomInitialise:
   65 00:46AB 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:46AD -  -  -  -  _URILoop:
   67 00:46AD C5 -  -  -  		push 	bc
   68 00:46AE CD B5 46 -  		call 	URandomHL
   69 00:46B1 C1 -  -  -  		pop 	bc
   70 00:46B2 10 F9 -  -  		djnz 	_URILoop
   71 00:46B4 C9 -  -  -  		ret
   72 00:46B5 -  -  -  -  
   73 00:46B5 -  -  -  -  ; ***************************************************************************************
   74 00:46B5 -  -  -  -  ;
   75 00:46B5 -  -  -  -  ;							16 bit random number generator
   76 00:46B5 -  -  -  -  ;
   77 00:46B5 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:46B5 -  -  -  -  ;		Actual author unspecified.
   79 00:46B5 -  -  -  -  ;
   80 00:46B5 -  -  -  -  ; ***************************************************************************************
   81 00:46B5 -  -  -  -  
   82 00:46B5 -  -  -  -  URandomHL:
   83 00:46B5 2A 6C 40 -  	    ld 		hl,(RandomSeed)
   84 00:46B8 ED 5B 70 40 	    ld 		de,(RandomSeed+4)
   85 00:46BC 44 -  -  -  	    ld 		b,h
   86 00:46BD 4D -  -  -  	    ld 		c,l
   87 00:46BE 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:46C3 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:46C8 2C -  -  -  	    inc 	l
   90 00:46C9 09 -  -  -  	    add 	hl,bc
   91 00:46CA 22 6C 40 -  	    ld 		(RandomSeed),hl
   92 00:46CD 2A 70 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:46D0 ED 5A -  -  	    adc 	hl,de
   94 00:46D2 22 70 40 -  	    ld 		(RandomSeed+4),hl
   95 00:46D5 EB -  -  -  	    ex 		de,hl
   96 00:46D6 2A 74 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:46D9 ED 4B 78 40 	    ld 		bc,(RandomSeed+12)
   98 00:46DD 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:46E2 ED 43 78 40 	    ld 		(RandomSeed+12),bc
  100 00:46E6 9F -  -  -  	    sbc 	a,a
  101 00:46E7 E6 C5 -  -  	    and 	%11000101
  102 00:46E9 AD -  -  -  	    xor 	l
  103 00:46EA 6F -  -  -  	    ld 		l,a
  104 00:46EB 22 74 40 -  	    ld 		(RandomSeed+8),hl
  105 00:46EE EB -  -  -  	    ex 		de,hl
  106 00:46EF 09 -  -  -  	    add 	hl,bc
  107 00:46F0 C9 -  -  -  	    ret		
  108 00:46F1 -  -  -  -  
  109 00:46F1 -  -  -  -  ; ***************************************************************************************
  110 00:46F1 -  -  -  -  ;
  111 00:46F1 -  -  -  -  ;									Changes and Updates
  112 00:46F1 -  -  -  -  ;
  113 00:46F1 -  -  -  -  ; ***************************************************************************************
  114 00:46F1 -  -  -  -  ;
  115 00:46F1 -  -  -  -  ;		Date			Notes
  116 00:46F1 -  -  -  -  ;		==== 			=====
  117 00:46F1 -  -  -  -  ;
  118 00:46F1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:46F1 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:46F1 -  -  -  -  ; ***************************************************************************************
    2 00:46F1 -  -  -  -  ; ***************************************************************************************
    3 00:46F1 -  -  -  -  ;
    4 00:46F1 -  -  -  -  ;		Name : 		sgn.asm
    5 00:46F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46F1 -  -  -  -  ;		Reviewed :	No
    8 00:46F1 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:46F1 -  -  -  -  ;
   10 00:46F1 -  -  -  -  ; ***************************************************************************************
   11 00:46F1 -  -  -  -  ; ***************************************************************************************
   12 00:46F1 -  -  -  -  
   13 00:46F1 -  -  -  -  ; ***************************************************************************************
   14 00:46F1 -  -  -  -  ;
   15 00:46F1 -  -  -  -  ;								sgn unary function
   16 00:46F1 -  -  -  -  ;
   17 00:46F1 -  -  -  -  ; ***************************************************************************************
   18 00:46F1 -  -  -  -  
   19 00:46F1 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:46F1 CD EA 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:46F4 CD D0 4C -  		call 	Int32Zero 					; integer sgn() code
   22 00:46F7 CA 01 44 -  		jp 		z,UnaryInt32False
   23 00:46FA D9 -  -  -  		exx
   24 00:46FB CB 7C -  -  		bit 	7,h
   25 00:46FD D9 -  -  -  		exx
   26 00:46FE C2 FD 43 -  		jp 		nz,UnaryInt32True
   27 00:4701 3E 01 -  -  		ld 		a,1
   28 00:4703 C3 27 45 -  		jp 		Return8BitConstant
   29 00:4706 -  -  -  -  
   30 00:4706 -  -  -  -  ; ***************************************************************************************
   31 00:4706 -  -  -  -  ;
   32 00:4706 -  -  -  -  ;									Changes and Updates
   33 00:4706 -  -  -  -  ;
   34 00:4706 -  -  -  -  ; ***************************************************************************************
   35 00:4706 -  -  -  -  ;
   36 00:4706 -  -  -  -  ;		Date			Notes
   37 00:4706 -  -  -  -  ;		==== 			=====
   38 00:4706 -  -  -  -  ;
   39 00:4706 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:4706 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4706 -  -  -  -  ; ***************************************************************************************
    2 00:4706 -  -  -  -  ; ***************************************************************************************
    3 00:4706 -  -  -  -  ;
    4 00:4706 -  -  -  -  ;		Name : 		simple.asm
    5 00:4706 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4706 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4706 -  -  -  -  ;		Reviewed :	No
    8 00:4706 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4706 -  -  -  -  ;
   10 00:4706 -  -  -  -  ; ***************************************************************************************
   11 00:4706 -  -  -  -  ; ***************************************************************************************
   12 00:4706 -  -  -  -  
   13 00:4706 -  -  -  -  ; ***************************************************************************************
   14 00:4706 -  -  -  -  ;
   15 00:4706 -  -  -  -  ;								( unary function (think about it)
   16 00:4706 -  -  -  -  ;
   17 00:4706 -  -  -  -  ; ***************************************************************************************
   18 00:4706 -  -  -  -  
   19 00:4706 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4706 CD 98 44 -  		call 	EvaluateAtPrecedence0
   21 00:4709 C3 F1 42 -  		jp  	CheckRightBracket
   22 00:470C -  -  -  -  
   23 00:470C -  -  -  -  ; ***************************************************************************************
   24 00:470C -  -  -  -  ;
   25 00:470C -  -  -  -  ;									Handle &x
   26 00:470C -  -  -  -  ;
   27 00:470C -  -  -  -  ; ***************************************************************************************
   28 00:470C -  -  -  -  
   29 00:470C -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:470C DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:470F E6 C0 -  -  		and 		$C0
   32 00:4711 FE 40 -  -  		cp 			$40
   33 00:4713 C2 80 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4716 C3 63 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4719 -  -  -  -  
   36 00:4719 -  -  -  -  ; ***************************************************************************************
   37 00:4719 -  -  -  -  ;
   38 00:4719 -  -  -  -  ;									Changes and Updates
   39 00:4719 -  -  -  -  ;
   40 00:4719 -  -  -  -  ; ***************************************************************************************
   41 00:4719 -  -  -  -  ;
   42 00:4719 -  -  -  -  ;		Date			Notes
   43 00:4719 -  -  -  -  ;		==== 			=====
   44 00:4719 -  -  -  -  ;
   45 00:4719 -  -  -  -  ; ***************************************************************************************
   46 00:4719 -  -  -  -  		
Listing for file "_build.asm"
   44 00:4719 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4719 -  -  -  -  ; ***************************************************************************************
    2 00:4719 -  -  -  -  ; ***************************************************************************************
    3 00:4719 -  -  -  -  ;
    4 00:4719 -  -  -  -  ;		Name : 		str.asm
    5 00:4719 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4719 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4719 -  -  -  -  ;		Reviewed :	No
    8 00:4719 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4719 -  -  -  -  ;
   10 00:4719 -  -  -  -  ; ***************************************************************************************
   11 00:4719 -  -  -  -  ; ***************************************************************************************
   12 00:4719 -  -  -  -  
   13 00:4719 -  -  -  -  ; ***************************************************************************************
   14 00:4719 -  -  -  -  ;
   15 00:4719 -  -  -  -  ;								Str$() unary function
   16 00:4719 -  -  -  -  ;
   17 00:4719 -  -  -  -  ; ***************************************************************************************
   18 00:4719 -  -  -  -  
   19 00:4719 -  -  -  -  Unary_Str:	;; [str]
   20 00:4719 CD FE 42 -  		call 	CheckDollar
   21 00:471C DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:471F EE AC -  -  		xor		KWD_TILDE
   23 00:4721 F5 -  -  -  		push 	af
   24 00:4722 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:4724 DD 23 -  -  		inc 	ix
   26 00:4726 -  -  -  -  _USNotHex:		
   27 00:4726 CD EA 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:4729 01 8A 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:472C F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:472D 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:472F 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:4731 3E 10 -  -  		ld 		a,16
   33 00:4733 -  -  -  -  _USNotHex2:		
   34 00:4733 CD 11 4D -  		call 	Int32ToString 				
   35 00:4736 21 8A 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:4739 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:473B C9 -  -  -  		ret
   38 00:473C -  -  -  -  
   39 00:473C -  -  -  -  ; ***************************************************************************************
   40 00:473C -  -  -  -  ;
   41 00:473C -  -  -  -  ;									Changes and Updates
   42 00:473C -  -  -  -  ;
   43 00:473C -  -  -  -  ; ***************************************************************************************
   44 00:473C -  -  -  -  ;
   45 00:473C -  -  -  -  ;		Date			Notes
   46 00:473C -  -  -  -  ;		==== 			=====
   47 00:473C -  -  -  -  ;
   48 00:473C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:473C -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:473C -  -  -  -  ; ***************************************************************************************
    2 00:473C -  -  -  -  ; ***************************************************************************************
    3 00:473C -  -  -  -  ;
    4 00:473C -  -  -  -  ;		Name : 		time.asm
    5 00:473C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:473C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:473C -  -  -  -  ;		Reviewed :	No
    8 00:473C -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:473C -  -  -  -  ;
   10 00:473C -  -  -  -  ; ***************************************************************************************
   11 00:473C -  -  -  -  ; ***************************************************************************************
   12 00:473C -  -  -  -  
   13 00:473C -  -  -  -  ; ***************************************************************************************
   14 00:473C -  -  -  -  ;
   15 00:473C -  -  -  -  ;							Get system time in ms
   16 00:473C -  -  -  -  ;
   17 00:473C -  -  -  -  ; ***************************************************************************************
   18 00:473C -  -  -  -  
   19 00:473C -  -  -  -  Unary_Time:	;; [time]
   20 00:473C CD 88 4D -  			call 	SYSGetTimer
   21 00:473F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4741 C9 -  -  -  			ret
   23 00:4742 -  -  -  -  
   24 00:4742 -  -  -  -  ; ***************************************************************************************
   25 00:4742 -  -  -  -  ;
   26 00:4742 -  -  -  -  ;									Changes and Updates
   27 00:4742 -  -  -  -  ;
   28 00:4742 -  -  -  -  ; ***************************************************************************************
   29 00:4742 -  -  -  -  ;
   30 00:4742 -  -  -  -  ;		Date			Notes
   31 00:4742 -  -  -  -  ;		==== 			=====
   32 00:4742 -  -  -  -  ;
   33 00:4742 -  -  -  -  ; ***************************************************************************************
   34 00:4742 -  -  -  -  			
Listing for file "_build.asm"
   46 00:4742 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4742 -  -  -  -  ; ***************************************************************************************
    2 00:4742 -  -  -  -  ; ***************************************************************************************
    3 00:4742 -  -  -  -  ;
    4 00:4742 -  -  -  -  ;		Name : 		top.asm
    5 00:4742 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4742 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4742 -  -  -  -  ;		Reviewed :	No
    8 00:4742 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4742 -  -  -  -  ;
   10 00:4742 -  -  -  -  ; ***************************************************************************************
   11 00:4742 -  -  -  -  ; ***************************************************************************************
   12 00:4742 -  -  -  -  
   13 00:4742 -  -  -  -  ; ***************************************************************************************
   14 00:4742 -  -  -  -  ;
   15 00:4742 -  -  -  -  ;							page unary function (no bracket)
   16 00:4742 -  -  -  -  ;
   17 00:4742 -  -  -  -  ; ***************************************************************************************
   18 00:4742 -  -  -  -  
   19 00:4742 -  -  -  -  Unary_Top:	;; [top]
   20 00:4742 2A 50 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4745 D9 -  -  -  			exx
   22 00:4746 2A 52 40 -  			ld 		hl,(TopMemory+2)
   23 00:4749 D9 -  -  -  			exx
   24 00:474A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:474C C9 -  -  -  			ret
   26 00:474D -  -  -  -  
   27 00:474D -  -  -  -  ; ***************************************************************************************
   28 00:474D -  -  -  -  ;
   29 00:474D -  -  -  -  ;									Changes and Updates
   30 00:474D -  -  -  -  ;
   31 00:474D -  -  -  -  ; ***************************************************************************************
   32 00:474D -  -  -  -  ;
   33 00:474D -  -  -  -  ;		Date			Notes
   34 00:474D -  -  -  -  ;		==== 			=====
   35 00:474D -  -  -  -  ;
   36 00:474D -  -  -  -  ; ***************************************************************************************
   37 00:474D -  -  -  -  			
Listing for file "_build.asm"
   47 00:474D -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:474D -  -  -  -  ; ***************************************************************************************
    2 00:474D -  -  -  -  ; ***************************************************************************************
    3 00:474D -  -  -  -  ;
    4 00:474D -  -  -  -  ;		Name : 		val.asm
    5 00:474D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:474D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:474D -  -  -  -  ;		Reviewed :	No
    8 00:474D -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:474D -  -  -  -  ;
   10 00:474D -  -  -  -  ; ***************************************************************************************
   11 00:474D -  -  -  -  ; ***************************************************************************************
   12 00:474D -  -  -  -  
   13 00:474D -  -  -  -  ; ***************************************************************************************
   14 00:474D -  -  -  -  ;
   15 00:474D -  -  -  -  ;								val( unary function
   16 00:474D -  -  -  -  ;
   17 00:474D -  -  -  -  ; ***************************************************************************************
   18 00:474D -  -  -  -  
   19 00:474D -  -  -  -  Unary_Val:	;; [val]
   20 00:474D CD F6 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4750 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4751 C1 -  -  -  		pop 	bc
   23 00:4752 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4754 CD 07 4C -  		call 	Int32FromString 			; get the integer part.
   25 00:4757 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4759 C8 -  -  -  		ret		z 							; okay
   27 00:475A 3E 03 C3 23 
              43 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:475F -  -  -  -  
   29 00:475F -  -  -  -  ; ***************************************************************************************
   30 00:475F -  -  -  -  ;
   31 00:475F -  -  -  -  ;									Changes and Updates
   32 00:475F -  -  -  -  ;
   33 00:475F -  -  -  -  ; ***************************************************************************************
   34 00:475F -  -  -  -  ;
   35 00:475F -  -  -  -  ;		Date			Notes
   36 00:475F -  -  -  -  ;		==== 			=====
   37 00:475F -  -  -  -  ;
   38 00:475F -  -  -  -  ; ***************************************************************************************
   39 00:475F -  -  -  -  		
Listing for file "_build.asm"
   48 00:475F -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:475F -  -  -  -  ; ***************************************************************************************
    2 00:475F -  -  -  -  ; ***************************************************************************************
    3 00:475F -  -  -  -  ;
    4 00:475F -  -  -  -  ;		Name : 		allocate.asm
    5 00:475F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:475F -  -  -  -  ;		Date : 		4th June 2022
    7 00:475F -  -  -  -  ;		Reviewed :	No
    8 00:475F -  -  -  -  ;		Purpose :	Allocate memory
    9 00:475F -  -  -  -  ;
   10 00:475F -  -  -  -  ; ***************************************************************************************
   11 00:475F -  -  -  -  ; ***************************************************************************************
   12 00:475F -  -  -  -  
   13 00:475F -  -  -  -  ; ***************************************************************************************
   14 00:475F -  -  -  -  ;
   15 00:475F -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:475F -  -  -  -  ;
   17 00:475F -  -  -  -  ; ***************************************************************************************
   18 00:475F -  -  -  -  
   19 00:475F -  -  -  -  AllocateBytes:
   20 00:475F EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:4760 21 00 00 -  		ld 		hl,$000000
   22 00:4763 62 -  -  -  		ld 		h,d
   23 00:4764 6B -  -  -  		ld 		l,e
   24 00:4765 -  -  -  -  		;
   25 00:4765 ED 5B 4C 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:4769 D5 -  -  -  		push 	de 							; save on stack
   27 00:476A 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:476B 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; update it
   29 00:476E -  -  -  -  		;
   30 00:476E EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:476F 2A 48 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:4772 AF -  -  -  		xor 	a
   33 00:4773 ED 52 -  -  		sbc 	hl,de
   34 00:4775 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:4776 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:4777 3E 09 C3 23 
              43 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:477C -  -  -  -  
   38 00:477C -  -  -  -  ; ***************************************************************************************
   39 00:477C -  -  -  -  ;
   40 00:477C -  -  -  -  ;									Changes and Updates
   41 00:477C -  -  -  -  ;
   42 00:477C -  -  -  -  ; ***************************************************************************************
   43 00:477C -  -  -  -  ;
   44 00:477C -  -  -  -  ;		Date			Notes
   45 00:477C -  -  -  -  ;		==== 			=====
   46 00:477C -  -  -  -  ;
   47 00:477C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:477C -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:477C -  -  -  -  ; ***************************************************************************************
    2 00:477C -  -  -  -  ; ***************************************************************************************
    3 00:477C -  -  -  -  ;
    4 00:477C -  -  -  -  ;		Name : 		clear.asm
    5 00:477C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:477C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:477C -  -  -  -  ;		Reviewed :	No
    8 00:477C -  -  -  -  ;		Purpose :	Clear command.
    9 00:477C -  -  -  -  ;
   10 00:477C -  -  -  -  ; ***************************************************************************************
   11 00:477C -  -  -  -  ; ***************************************************************************************
   12 00:477C -  -  -  -  
   13 00:477C -  -  -  -  ; ***************************************************************************************
   14 00:477C -  -  -  -  ;
   15 00:477C -  -  -  -  ;										CLEAR command
   16 00:477C -  -  -  -  ;
   17 00:477C -  -  -  -  ; ***************************************************************************************
   18 00:477C -  -  -  -  
   19 00:477C -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:477C -  -  -  -  		;
   21 00:477C -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:477C -  -  -  -  		;
   23 00:477C 2A 2C 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:477F -  -  -  -  _CCFindLow:
   25 00:477F 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4782 5E -  -  -  		ld 		e,(hl)		
   27 00:4783 19 -  -  -  		add 	hl,de
   28 00:4784 7B -  -  -  		ld 		a,e
   29 00:4785 B7 -  -  -  		or 		a
   30 00:4786 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4788 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4789 22 50 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:478C 23 -  -  -  		inc 	hl 							; one for luck
   34 00:478D 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:4790 -  -  -  -  		;
   36 00:4790 -  -  -  -  		; 	 		Reset the language stack
   37 00:4790 -  -  -  -  		;
   38 00:4790 2A 30 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:4793 -  -  -  -  		;
   40 00:4793 22 38 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:4796 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:4799 19 -  -  -  		add 	hl,de
   43 00:479A 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:479C 22 3C 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:479F -  -  -  -  		;
   46 00:479F 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:47A2 19 -  -  -  		add 	hl,de
   48 00:47A3 22 40 40 -  		ld 		(StandardIntegers),hl
   49 00:47A6 -  -  -  -  		;
   50 00:47A6 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:47A6 -  -  -  -  		;
   52 00:47A6 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:47A9 -  -  -  -  _CCFClearHT:
   54 00:47A9 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:47AA 36 00 -  -  		ld 		(hl),0
   56 00:47AC 1B -  -  -  		dec 	de
   57 00:47AD 7A -  -  -  		ld 		a,d
   58 00:47AE B3 -  -  -  		or 		e
   59 00:47AF 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:47B1 22 44 40 -  		ld 		(HashTableBase),hl 			; save table base
   61 00:47B4 -  -  -  -  		;
   62 00:47B4 -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:47B4 -  -  -  -  		;
   64 00:47B4 22 48 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:47B7 -  -  -  -  		;
   66 00:47B7 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:47B7 -  -  -  -  		;
   68 00:47B7 CD AB 46 -  		call 	UnaryRandomInitialise
   69 00:47BA -  -  -  -  		;
   70 00:47BA -  -  -  -  		;		Erase the stack
   71 00:47BA -  -  -  -  		;
   72 00:47BA CD D7 47 -  		call 	StackReset 					; reset the basic stack to empty
   73 00:47BD C9 -  -  -  		ret
   74 00:47BE -  -  -  -  
   75 00:47BE -  -  -  -  ; ***************************************************************************************
   76 00:47BE -  -  -  -  ;
   77 00:47BE -  -  -  -  ;									Changes and Updates
   78 00:47BE -  -  -  -  ;
   79 00:47BE -  -  -  -  ; ***************************************************************************************
   80 00:47BE -  -  -  -  ;
   81 00:47BE -  -  -  -  ;		Date			Notes
   82 00:47BE -  -  -  -  ;		==== 			=====
   83 00:47BE -  -  -  -  ;
   84 00:47BE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:47BE -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:47BE -  -  -  -  ; ***************************************************************************************
    2 00:47BE -  -  -  -  ; ***************************************************************************************
    3 00:47BE -  -  -  -  ;
    4 00:47BE -  -  -  -  ;		Name : 		instance.asm
    5 00:47BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47BE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47BE -  -  -  -  ;		Reviewed :	No
    8 00:47BE -  -  -  -  ;		Purpose :	Instance handling
    9 00:47BE -  -  -  -  ;
   10 00:47BE -  -  -  -  ; ***************************************************************************************
   11 00:47BE -  -  -  -  ; ***************************************************************************************
   12 00:47BE -  -  -  -  
   13 00:47BE -  -  -  -  ; ***************************************************************************************
   14 00:47BE -  -  -  -  ;
   15 00:47BE -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:47BE -  -  -  -  ;
   17 00:47BE -  -  -  -  ; ***************************************************************************************
   18 00:47BE -  -  -  -  
   19 00:47BE -  -  -  -  SetCurrentInstance:
   20 00:47BE ED 53 2C 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:47C2 22 30 40 -  		ld 		(HighMemory),hl 
   22 00:47C5 ED 53 34 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:47C9 -  -  -  -  
   24 00:47C9 C9 -  -  -  		ret
   25 00:47CA -  -  -  -  
   26 00:47CA -  -  -  -  
   27 00:47CA -  -  -  -  ; ***************************************************************************************
   28 00:47CA -  -  -  -  ;
   29 00:47CA -  -  -  -  ;									Changes and Updates
   30 00:47CA -  -  -  -  ;
   31 00:47CA -  -  -  -  ; ***************************************************************************************
   32 00:47CA -  -  -  -  ;
   33 00:47CA -  -  -  -  ;		Date			Notes
   34 00:47CA -  -  -  -  ;		==== 			=====
   35 00:47CA -  -  -  -  ;
   36 00:47CA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:47CA -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:47CA -  -  -  -  ; ***************************************************************************************
    2 00:47CA -  -  -  -  ; ***************************************************************************************
    3 00:47CA -  -  -  -  ;
    4 00:47CA -  -  -  -  ;		Name : 		new.asm
    5 00:47CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47CA -  -  -  -  ;		Reviewed :	No
    8 00:47CA -  -  -  -  ;		Purpose :	New command.
    9 00:47CA -  -  -  -  ;
   10 00:47CA -  -  -  -  ; ***************************************************************************************
   11 00:47CA -  -  -  -  ; ***************************************************************************************
   12 00:47CA -  -  -  -  
   13 00:47CA -  -  -  -  ; ***************************************************************************************
   14 00:47CA -  -  -  -  ;
   15 00:47CA -  -  -  -  ;										NEW command
   16 00:47CA -  -  -  -  ;
   17 00:47CA -  -  -  -  ; ***************************************************************************************
   18 00:47CA -  -  -  -  
   19 00:47CA -  -  -  -  Command_NEW: 	;; [new]
   20 00:47CA 2A 34 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:47CD 36 00 -  -  		ld 		(hl),0
   22 00:47CF CD 7C 47 -  		call 	Command_CLEAR 				; clear all variables
   23 00:47D2 3E 00 C3 23 
              43 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:47D7 -  -  -  -  
   25 00:47D7 -  -  -  -  ; ***************************************************************************************
   26 00:47D7 -  -  -  -  ;
   27 00:47D7 -  -  -  -  ;									Changes and Updates
   28 00:47D7 -  -  -  -  ;
   29 00:47D7 -  -  -  -  ; ***************************************************************************************
   30 00:47D7 -  -  -  -  ;
   31 00:47D7 -  -  -  -  ;		Date			Notes
   32 00:47D7 -  -  -  -  ;		==== 			=====
   33 00:47D7 -  -  -  -  ;
   34 00:47D7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:47D7 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:47D7 -  -  -  -  ; ***************************************************************************************
    2 00:47D7 -  -  -  -  ; ***************************************************************************************
    3 00:47D7 -  -  -  -  ;
    4 00:47D7 -  -  -  -  ;		Name : 		stack.asm
    5 00:47D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47D7 -  -  -  -  ;		Date : 		6th June 2022
    7 00:47D7 -  -  -  -  ;		Reviewed :	No
    8 00:47D7 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:47D7 -  -  -  -  ;
   10 00:47D7 -  -  -  -  ; ***************************************************************************************
   11 00:47D7 -  -  -  -  ; ***************************************************************************************
   12 00:47D7 -  -  -  -  ;
   13 00:47D7 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:47D7 -  -  -  -  ;		The low bytes (0..3) doubled the size of the stack in bytes 
   15 00:47D7 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:47D7 -  -  -  -  ;
   17 00:47D7 -  -  -  -  ; ***************************************************************************************
   18 00:47D7 -  -  -  -  ;
   19 00:47D7 -  -  -  -  ;								Clear the stack
   20 00:47D7 -  -  -  -  ;
   21 00:47D7 -  -  -  -  ; ***************************************************************************************
   22 00:47D7 -  -  -  -  
   23 00:47D7 -  -  -  -  StackReset:
   24 00:47D7 2A 38 40 -  		ld 		hl,(LanguageStack) 			; top of language stack
   25 00:47DA 2B -  -  -  		dec 	hl 							; down to make space for end.
   26 00:47DB 22 54 40 -  		ld 		(BasicSP),hl 				; write out current position
   27 00:47DE 36 00 -  -  		ld 		(hl),0 						; Dummy top, as stack size cannot be 0.
   28 00:47E0 C9 -  -  -  		ret
   29 00:47E1 -  -  -  -  
   30 00:47E1 -  -  -  -  ; ***************************************************************************************
   31 00:47E1 -  -  -  -  ;
   32 00:47E1 -  -  -  -  ;									Changes and Updates
   33 00:47E1 -  -  -  -  ;
   34 00:47E1 -  -  -  -  ; ***************************************************************************************
   35 00:47E1 -  -  -  -  ;
   36 00:47E1 -  -  -  -  ;		Date			Notes
   37 00:47E1 -  -  -  -  ;		==== 			=====
   38 00:47E1 -  -  -  -  ;
   39 00:47E1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:47E1 -  -  -  -  #include "core/structures/transfer.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/transfer.asm"
    1 00:47E1 -  -  -  -  ; ***************************************************************************************
    2 00:47E1 -  -  -  -  ; ***************************************************************************************
    3 00:47E1 -  -  -  -  ;
    4 00:47E1 -  -  -  -  ;		Name : 		transfer.asm
    5 00:47E1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47E1 -  -  -  -  ;		Date : 		6th June 2022
    7 00:47E1 -  -  -  -  ;		Reviewed :	No
    8 00:47E1 -  -  -  -  ;		Purpose :	Goto / Gosub / Return
    9 00:47E1 -  -  -  -  ;
   10 00:47E1 -  -  -  -  ; ***************************************************************************************
   11 00:47E1 -  -  -  -  
   12 00:47E1 -  -  -  -  ; ***************************************************************************************
   13 00:47E1 -  -  -  -  ;
   14 00:47E1 -  -  -  -  ;									Goto Command
   15 00:47E1 -  -  -  -  ;
   16 00:47E1 -  -  -  -  ; ***************************************************************************************
   17 00:47E1 -  -  -  -  
   18 00:47E1 -  -  -  -  Command_GOTO: ;; [goto]
   19 00:47E1 CD E8 47 -  			call 	GoGetLineNumber
   20 00:47E4 CD F3 47 -  			call	TransferToLineHL
   21 00:47E7 C9 -  -  -  			ret
   22 00:47E8 -  -  -  -  
   23 00:47E8 -  -  -  -  ; ***************************************************************************************
   24 00:47E8 -  -  -  -  ;
   25 00:47E8 -  -  -  -  ;							Get and validate a line number in HL
   26 00:47E8 -  -  -  -  ;
   27 00:47E8 -  -  -  -  ; ***************************************************************************************
   28 00:47E8 -  -  -  -  
   29 00:47E8 -  -  -  -  GoGetLineNumber:
   30 00:47E8 CD 08 45 -  			call 	EvaluateInteger
   31 00:47EB D9 -  -  -  			exx
   32 00:47EC 7C -  -  -  			ld 		a,h
   33 00:47ED B5 -  -  -  			or 		l
   34 00:47EE D9 -  -  -  			exx
   35 00:47EF C8 -  -  -  			ret 	z
   36 00:47F0 C3 7B 43 -  			jp 		BadValue
   37 00:47F3 -  -  -  -  
   38 00:47F3 -  -  -  -  ; ***************************************************************************************
   39 00:47F3 -  -  -  -  ;
   40 00:47F3 -  -  -  -  ;							Transfer to Line Number HL
   41 00:47F3 -  -  -  -  ;
   42 00:47F3 -  -  -  -  ; ***************************************************************************************
   43 00:47F3 -  -  -  -  
   44 00:47F3 -  -  -  -  TransferToLineHL:
   45 00:47F3 EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:47F4 01 00 00 -  			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:47F7 DD 2A 34 40 			ld 		ix,(CodeAddress)
   48 00:47FB -  -  -  -  _TLSearch:	
   49 00:47FB DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:47FD DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:4800 B7 -  -  -  			or 		a 						; if zero
   52 00:4801 28 18 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:4803 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:4804 -  -  -  -  
   55 00:4804 7B -  -  -  			ld 		a,e						; compare line address
   56 00:4805 DD BE 01 -  			cp 		(ix+1)
   57 00:4808 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:480A 7A -  -  -  			ld 		a,d
   59 00:480B DD BE 02 -  			cp 		(ix+2)
   60 00:480E 20 EB -  -  			jr 		nz,_TLSearch
   61 00:4810 -  -  -  -  			;
   62 00:4810 DD 22 58 40 			ld 		(CurrentLineStart),ix 	; set line start
   63 00:4814 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:4816 DD 23 -  -  			inc 	ix
   65 00:4818 DD 23 -  -  			inc 	ix
   66 00:481A -  -  -  -  
   67 00:481A C9 -  -  -  			ret
   68 00:481B -  -  -  -  
   69 00:481B -  -  -  -  _TLNotFound:
   70 00:481B 3E 08 C3 23 
              43 -  -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/transfer.asm"
   71 00:4820 -  -  -  -  
   72 00:4820 -  -  -  -  ; ***************************************************************************************
   73 00:4820 -  -  -  -  ;
   74 00:4820 -  -  -  -  ;									Changes and Updates
   75 00:4820 -  -  -  -  ;
   76 00:4820 -  -  -  -  ; ***************************************************************************************
   77 00:4820 -  -  -  -  ;
   78 00:4820 -  -  -  -  ;		Date			Notes
   79 00:4820 -  -  -  -  ;		==== 			=====
   80 00:4820 -  -  -  -  ;
   81 00:4820 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:4820 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:4820 -  -  -  -  ; ***************************************************************************************
    2 00:4820 -  -  -  -  ; ***************************************************************************************
    3 00:4820 -  -  -  -  ;
    4 00:4820 -  -  -  -  ;		Name : 		utility.asm
    5 00:4820 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4820 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4820 -  -  -  -  ;		Reviewed :	No
    8 00:4820 -  -  -  -  ;		Purpose :	Utility routines
    9 00:4820 -  -  -  -  ;
   10 00:4820 -  -  -  -  ; ***************************************************************************************
   11 00:4820 -  -  -  -  ; ***************************************************************************************
   12 00:4820 -  -  -  -  
   13 00:4820 -  -  -  -  ; ***************************************************************************************
   14 00:4820 -  -  -  -  ;
   15 00:4820 -  -  -  -  ;							Print ASCII string at HL
   16 00:4820 -  -  -  -  ;
   17 00:4820 -  -  -  -  ; ***************************************************************************************
   18 00:4820 -  -  -  -  
   19 00:4820 -  -  -  -  PrintStringAtHL:
   20 00:4820 7E -  -  -  		ld 		a,(hl)
   21 00:4821 FE 20 -  -  		cp 		$20		
   22 00:4823 D8 -  -  -  		ret 	c
   23 00:4824 CD 5F 4D -  		call 	SYSPrintChar
   24 00:4827 23 -  -  -  		inc 	hl
   25 00:4828 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:482A -  -  -  -  
   27 00:482A -  -  -  -  ; ***************************************************************************************
   28 00:482A -  -  -  -  ;
   29 00:482A -  -  -  -  ;									Changes and Updates
   30 00:482A -  -  -  -  ;
   31 00:482A -  -  -  -  ; ***************************************************************************************
   32 00:482A -  -  -  -  ;
   33 00:482A -  -  -  -  ;		Date			Notes
   34 00:482A -  -  -  -  ;		==== 			=====
   35 00:482A -  -  -  -  ;
   36 00:482A -  -  -  -  ; ***************************************************************************************
   37 00:482A -  -  -  -  		
Listing for file "_build.asm"
   55 00:482A -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:482A -  -  -  -  ; ***************************************************************************************
    2 00:482A -  -  -  -  ; ***************************************************************************************
    3 00:482A -  -  -  -  ;
    4 00:482A -  -  -  -  ;		Name : 		create.asm
    5 00:482A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:482A -  -  -  -  ;		Date : 		4th June 2022
    7 00:482A -  -  -  -  ;		Reviewed :	No
    8 00:482A -  -  -  -  ;		Purpose :	Create a variable.
    9 00:482A -  -  -  -  ;
   10 00:482A -  -  -  -  ; ***************************************************************************************
   11 00:482A -  -  -  -  ; ***************************************************************************************
   12 00:482A -  -  -  -  
   13 00:482A -  -  -  -  ; ***************************************************************************************
   14 00:482A -  -  -  -  ;
   15 00:482A -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:482A -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:482A -  -  -  -  ;
   18 00:482A -  -  -  -  ; ***************************************************************************************
   19 00:482A -  -  -  -  
   20 00:482A -  -  -  -  VariableCreate:		
   21 00:482A -  -  -  -  		;
   22 00:482A -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:482A -  -  -  -  		;
   24 00:482A 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:482D 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:482E E5 -  -  -  		push 	hl 							; save count.
   27 00:482F CD 5F 47 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4832 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4833 -  -  -  -  		;
   30 00:4833 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4833 -  -  -  -  		;
   32 00:4833 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4834 -  -  -  -  _VCClear:
   34 00:4834 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4836 23 -  -  -  		inc 	hl
   36 00:4837 0B -  -  -  		dec 	bc
   37 00:4838 78 -  -  -  		ld		a,b
   38 00:4839 B1 -  -  -  		or 		c
   39 00:483A 20 F8 -  -  		jr 		nz,_VCClear
   40 00:483C E1 -  -  -  		pop 	hl							; restore start address
   41 00:483D -  -  -  -  		;
   42 00:483D -  -  -  -  		;		Now start to create the data.
   43 00:483D -  -  -  -  		;
   44 00:483D E5 -  -  -  		push 	hl 							; save start
   45 00:483E -  -  -  -  		;
   46 00:483E -  -  -  -  		;		Write hash to +0
   47 00:483E -  -  -  -  		;
   48 00:483E 3A 84 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:4841 77 -  -  -  		ld 		(hl),a
   50 00:4842 23 -  -  -  		inc 	hl
   51 00:4843 -  -  -  -  		;
   52 00:4843 -  -  -  -  		;		Write list head to +1
   53 00:4843 -  -  -  -  		;
   54 00:4843 E5 -  -  -  		push 	hl 							; save write position
   55 00:4844 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4847 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:484B EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:484C E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:484D 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4853 -  -  -  -  		;
   61 00:4853 -  -  -  -  		;		Write variable name to +5
   62 00:4853 -  -  -  -  		;
   63 00:4853 ED 5B 80 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4857 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:485D -  -  -  -  		;
   66 00:485D D1 -  -  -  		pop 	de 							; get the start address back
   67 00:485E 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4861 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4867 -  -  -  -  		;
   70 00:4867 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4868 C9 -  -  -  		ret
   72 00:4869 -  -  -  -  
   73 00:4869 -  -  -  -  ; ***************************************************************************************
   74 00:4869 -  -  -  -  ;
   75 00:4869 -  -  -  -  ;									Changes and Updates
   76 00:4869 -  -  -  -  ;
   77 00:4869 -  -  -  -  ; ***************************************************************************************
   78 00:4869 -  -  -  -  ;
   79 00:4869 -  -  -  -  ;		Date			Notes
   80 00:4869 -  -  -  -  ;		==== 			=====
   81 00:4869 -  -  -  -  ;
   82 00:4869 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4869 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4869 -  -  -  -  ; ***************************************************************************************
    2 00:4869 -  -  -  -  ; ***************************************************************************************
    3 00:4869 -  -  -  -  ;
    4 00:4869 -  -  -  -  ;		Name : 		find.asm
    5 00:4869 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4869 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4869 -  -  -  -  ;		Reviewed :	No
    8 00:4869 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4869 -  -  -  -  ;
   10 00:4869 -  -  -  -  ; ***************************************************************************************
   11 00:4869 -  -  -  -  ; ***************************************************************************************
   12 00:4869 -  -  -  -  
   13 00:4869 -  -  -  -  ; ***************************************************************************************
   14 00:4869 -  -  -  -  ;
   15 00:4869 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4869 -  -  -  -  ; 		variable information at (IX)
   17 00:4869 -  -  -  -  ;
   18 00:4869 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4869 -  -  -  -  ;		Don't autocreate arrays.
   20 00:4869 -  -  -  -  ;
   21 00:4869 -  -  -  -  ; ***************************************************************************************
   22 00:4869 -  -  -  -  
   23 00:4869 -  -  -  -  FindVariable:
   24 00:4869 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:486C FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:486E D2 80 43 -  		jp 		nc,SyntaxError 		
   27 00:4871 -  -  -  -  
   28 00:4871 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4874 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4876 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4878 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:487A 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:487C -  -  -  -  		;
   34 00:487C -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:487C -  -  -  -  		;
   36 00:487C 2A 40 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:487F DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4882 87 -  -  -  		add 	a,a 						; x4
   39 00:4883 87 -  -  -  		add 	a,a
   40 00:4884 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4885 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4886 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4888 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:488A DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:488C AF -  -  -  		xor 	a 							; clear carry and return
   46 00:488D C9 -  -  -  		ret
   47 00:488E -  -  -  -  		;
   48 00:488E -  -  -  -  		;		Not a standard simple variable.
   49 00:488E -  -  -  -  		;
   50 00:488E -  -  -  -  _FVNotSimple:
   51 00:488E CD EA 48 -  		call 	VariableInformation 		; get information about the variable.
   52 00:4891 CD 20 49 -  		call 	VariableSearchList 			; search the linked list
   53 00:4894 38 12 -  -  		jr 		c,_FVNotFound  				
   54 00:4896 -  -  -  -  		;
   55 00:4896 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4896 -  -  -  -  		;
   57 00:4896 -  -  -  -  _FVExitReference:		
   58 00:4896 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4899 19 -  -  -  		add 	hl,de 
   60 00:489A -  -  -  -  		;
   61 00:489A -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:489A -  -  -  -  		;
   63 00:489A DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:489D FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:489F CC C3 48 -  		call 	z,ArrayLookup 				; array access required.
   66 00:48A2 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:48A4 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:48A6 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:48A7 C9 -  -  -  		ret
   70 00:48A8 -  -  -  -  		;
   71 00:48A8 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:48A8 -  -  -  -  		;
   73 00:48A8 -  -  -  -  _FVNotFound:		
   74 00:48A8 3A 7C 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:48AB B7 -  -  -  		or 		a
   76 00:48AC 28 0F -  -  		jr 		z,_FVFail
   77 00:48AE DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:48B1 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:48B3 28 08 -  -  		jr 		z,_FVFail
   80 00:48B5 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   81 00:48B8 CD 2A 48 -  		call 	VariableCreate 				; create a new variable.
   82 00:48BB 18 D9 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:48BD -  -  -  -  
   84 00:48BD -  -  -  -  _FVFail:
   85 00:48BD DD 2A 80 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:48C1 37 -  -  -  		scf
   87 00:48C2 C9 -  -  -  		ret
   88 00:48C3 -  -  -  -  
   89 00:48C3 -  -  -  -  ; ***************************************************************************************
   90 00:48C3 -  -  -  -  ;
   91 00:48C3 -  -  -  -  ;									 Array lookup
   92 00:48C3 -  -  -  -  ;
   93 00:48C3 -  -  -  -  ; ***************************************************************************************
   94 00:48C3 -  -  -  -  
   95 00:48C3 -  -  -  -  ArrayLookup:
   96 00:48C3 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:48C4 CD EA 44 -  		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:48C7 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:48C8 7C -  -  -  		ld 		a,h
  100 00:48C9 B5 -  -  -  		or 		l
  101 00:48CA D9 -  -  -  		exx
  102 00:48CB 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:48CD 11 00 00 -  		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:48D0 54 -  -  -  		ld 		d,h
  105 00:48D1 5D -  -  -  		ld 		e,l
  106 00:48D2 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:48D3 E5 -  -  -  		push 	hl
  108 00:48D4 7E 23 66 6F 		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:48D8 AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:48D9 ED 52 -  -  		sbc 	hl,de
  111 00:48DB DA E5 48 -  		jp 		c,_ALBadValue 				; if max < index then error
  112 00:48DE EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:48DF 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:48E0 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:48E1 29 -  -  -  		add 	hl,hl
  116 00:48E2 D1 -  -  -  		pop 	de 							; get array base back
  117 00:48E3 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:48E4 C9 -  -  -  		ret
  119 00:48E5 -  -  -  -  
  120 00:48E5 -  -  -  -  _ALBadValue:
  121 00:48E5 3E 07 C3 23 
              43 -  -  -  		ERR_INDEX
  122 00:48EA -  -  -  -  		
  123 00:48EA -  -  -  -  ; ***************************************************************************************
  124 00:48EA -  -  -  -  ;
  125 00:48EA -  -  -  -  ;									Changes and Updates
  126 00:48EA -  -  -  -  ;
  127 00:48EA -  -  -  -  ; ***************************************************************************************
  128 00:48EA -  -  -  -  ;
  129 00:48EA -  -  -  -  ;		Date			Notes
  130 00:48EA -  -  -  -  ;		==== 			=====
  131 00:48EA -  -  -  -  ;
  132 00:48EA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:48EA -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:48EA -  -  -  -  ; ***************************************************************************************
    2 00:48EA -  -  -  -  ; ***************************************************************************************
    3 00:48EA -  -  -  -  ;
    4 00:48EA -  -  -  -  ;		Name : 		info.asm
    5 00:48EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48EA -  -  -  -  ;		Date : 		4th June 2022
    7 00:48EA -  -  -  -  ;		Reviewed :	No
    8 00:48EA -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:48EA -  -  -  -  ;
   10 00:48EA -  -  -  -  ; ***************************************************************************************
   11 00:48EA -  -  -  -  ; ***************************************************************************************
   12 00:48EA -  -  -  -  
   13 00:48EA -  -  -  -  ; ***************************************************************************************
   14 00:48EA -  -  -  -  ;
   15 00:48EA -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:48EA -  -  -  -  ; 		after the identifier.
   17 00:48EA -  -  -  -  ;
   18 00:48EA -  -  -  -  ; ***************************************************************************************
   19 00:48EA -  -  -  -  
   20 00:48EA -  -  -  -  VariableInformation:
   21 00:48EA DD 22 80 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:48EE -  -  -  -  		;
   23 00:48EE -  -  -  -  		; 		Calculate hash, find end.
   24 00:48EE -  -  -  -  		;
   25 00:48EE 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:48F0 -  -  -  -  _VICalculateHash:
   27 00:48F0 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:48F3 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:48F5 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:48F7 80 -  -  -  		add 	a,b 						; add to hash
   31 00:48F8 07 -  -  -  		rlca
   32 00:48F9 07 -  -  -  		rlca
   33 00:48FA 80 -  -  -  		add 	a,b
   34 00:48FB 47 -  -  -  		ld 		b,a 						; update hash
   35 00:48FC DD 23 -  -  		inc 	ix 							; next character
   36 00:48FE 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:4900 -  -  -  -  		;
   38 00:4900 -  -  -  -  _VIHashDone:
   39 00:4900 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:4901 -  -  -  -  		;
   41 00:4901 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:4901 -  -  -  -  		;
   43 00:4901 32 84 40 -  		ld 		(VarHash),a
   44 00:4904 -  -  -  -  		;
   45 00:4904 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:4904 -  -  -  -  		;		
   47 00:4904 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:4906 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:4909 6F -  -  -  		ld 		l,a
   50 00:490A 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:490B 29 -  -  -  		add 	hl,hl
   52 00:490C -  -  -  -  		;
   53 00:490C ED 5B 44 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:4910 19 -  -  -  		add 	hl,de
   55 00:4911 -  -  -  -  		;
   56 00:4911 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:4914 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:4916 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:4918 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:491B 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:491C -  -  -  -  _VINotArray:
   62 00:491C 22 86 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:491F C9 -  -  -  		ret
   64 00:4920 -  -  -  -  
   65 00:4920 -  -  -  -  ; ***************************************************************************************
   66 00:4920 -  -  -  -  ;
   67 00:4920 -  -  -  -  ;									Changes and Updates
   68 00:4920 -  -  -  -  ;
   69 00:4920 -  -  -  -  ; ***************************************************************************************
   70 00:4920 -  -  -  -  ;
   71 00:4920 -  -  -  -  ;		Date			Notes
   72 00:4920 -  -  -  -  ;		==== 			=====
   73 00:4920 -  -  -  -  ;
   74 00:4920 -  -  -  -  ; ***************************************************************************************
   75 00:4920 -  -  -  -  
Listing for file "_build.asm"
   58 00:4920 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:4920 -  -  -  -  ; ***************************************************************************************
    2 00:4920 -  -  -  -  ; ***************************************************************************************
    3 00:4920 -  -  -  -  ;
    4 00:4920 -  -  -  -  ;		Name : 		search.asm
    5 00:4920 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4920 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4920 -  -  -  -  ;		Reviewed :	No
    8 00:4920 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:4920 -  -  -  -  ;
   10 00:4920 -  -  -  -  ; ***************************************************************************************
   11 00:4920 -  -  -  -  ; ***************************************************************************************
   12 00:4920 -  -  -  -  
   13 00:4920 -  -  -  -  ; ***************************************************************************************
   14 00:4920 -  -  -  -  ;
   15 00:4920 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:4920 -  -  -  -  ;		CS if failed.
   17 00:4920 -  -  -  -  ;
   18 00:4920 -  -  -  -  ; ***************************************************************************************
   19 00:4920 -  -  -  -  
   20 00:4920 -  -  -  -  VariableSearchList:
   21 00:4920 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4923 -  -  -  -  		;
   23 00:4923 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4923 -  -  -  -  		;		the address of the hash record
   25 00:4923 -  -  -  -  		;
   26 00:4923 -  -  -  -  _VSLLoop:
   27 00:4923 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4927 -  -  -  -  		;
   29 00:4927 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4928 AF -  -  -  		xor 	a
   31 00:4929 ED 6A -  -  		adc 	hl,hl
   32 00:492B E1 -  -  -  		pop 	hl
   33 00:492C 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:492E 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:492F C8 -  -  -  		ret 	z
   36 00:4930 -  -  -  -  _VSLRecord:
   37 00:4930 -  -  -  -  		;
   38 00:4930 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:4930 -  -  -  -  		;
   40 00:4930 3A 84 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:4933 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:4934 23 -  -  -  		inc 	hl 							; points to link back
   43 00:4935 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4937 -  -  -  -  		;
   45 00:4937 -  -  -  -  		;		Now check the name
   46 00:4937 -  -  -  -  		;
   47 00:4937 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4938 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4939 23 -  -  -  		inc 	hl
   50 00:493A 23 -  -  -  		inc 	hl
   51 00:493B 23 -  -  -  		inc 	hl
   52 00:493C 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:4940 ED 5B 80 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:4944 -  -  -  -  		;
   55 00:4944 -  -  -  -  		;		Check individual characters
   56 00:4944 -  -  -  -  		;
   57 00:4944 -  -  -  -  _VSLCharacter:
   58 00:4944 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:4945 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4947 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4949 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:494A 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:494B 13 -  -  -  		inc 	de
   64 00:494C 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:494E -  -  -  -  		;
   66 00:494E -  -  -  -  _VSLFailed:
   67 00:494E E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:494F 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:4951 -  -  -  -  		;
   70 00:4951 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:4951 -  -  -  -  		;		
   72 00:4951 -  -  -  -  _VSLEndIdentifier:
   73 00:4951 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:4952 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4954 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4956 -  -  -  -  		;
   77 00:4956 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4957 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4958 AF -  -  -  		xor 	a 							; clear carry
   80 00:4959 C9 -  -  -  		ret
   81 00:495A -  -  -  -  
   82 00:495A -  -  -  -  ; ***************************************************************************************
   83 00:495A -  -  -  -  ;
   84 00:495A -  -  -  -  ;									Changes and Updates
   85 00:495A -  -  -  -  ;
   86 00:495A -  -  -  -  ; ***************************************************************************************
   87 00:495A -  -  -  -  ;
   88 00:495A -  -  -  -  ;		Date			Notes
   89 00:495A -  -  -  -  ;		==== 			=====
   90 00:495A -  -  -  -  ;
   91 00:495A -  -  -  -  ; ***************************************************************************************
   92 00:495A -  -  -  -  		
Listing for file "_build.asm"
   59 00:495A -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:495A -  -  -  -  ;
    2 00:495A -  -  -  -  ;	This file is automatically generated.
    3 00:495A -  -  -  -  ;
    4 00:495A 00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 00:4960 -  -  -  -  PrecedenceTable:
    6 00:4960 06 -  -  -  	.db	6	; $0083 !
    7 00:4961 06 -  -  -  	.db	6	; $0084 ?
    8 00:4962 05 -  -  -  	.db	5	; $0085 *
    9 00:4963 05 -  -  -  	.db	5	; $0086 /
   10 00:4964 05 -  -  -  	.db	5	; $0087 mod
   11 00:4965 05 -  -  -  	.db	5	; $0088 div
   12 00:4966 04 -  -  -  	.db	4	; $0089 +
   13 00:4967 04 -  -  -  	.db	4	; $008a -
   14 00:4968 03 -  -  -  	.db	3	; $008b >=
   15 00:4969 03 -  -  -  	.db	3	; $008c <=
   16 00:496A 03 -  -  -  	.db	3	; $008d >
   17 00:496B 03 -  -  -  	.db	3	; $008e <
   18 00:496C 03 -  -  -  	.db	3	; $008f =
   19 00:496D 03 -  -  -  	.db	3	; $0090 <>
   20 00:496E 02 -  -  -  	.db	2	; $0091 and
   21 00:496F 01 -  -  -  	.db	1	; $0092 or
   22 00:4970 01 -  -  -  	.db	1	; $0093 eor
   23 00:4971 -  -  -  -  
Listing for file "_build.asm"
   60 00:4971 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4971 -  -  -  -  ;
    2 00:4971 -  -  -  -  ;	This is automatically generated.
    3 00:4971 -  -  -  -  ;
    4 00:4971 -  -  -  -  ErrorIDTable:
    5 00:4971 BD 49 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4975 C3 49 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4979 D4 49 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:497D E2 49 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4981 EC 49 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:4985 F6 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:4989 10 4A 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:498D 21 4A 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 00:4991 31 4A 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   14 00:4995 46 4A 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   15 00:4999 54 4A 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   16 00:499D 62 4A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   17 00:49A1 6C 4A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   18 00:49A5 81 4A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   19 00:49A9 97 4A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   20 00:49AD A5 4A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   21 00:49B1 AA 4A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   22 00:49B5 B7 4A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   23 00:49B9 C8 4A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   24 00:49BD -  -  -  -  
   25 00:49BD -  -  -  -  ErrText_warmstart:
   26 00:49BD 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   27 00:49C3 -  -  -  -  ErrText_assert:
   28 00:49C3 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   29 00:49D4 -  -  -  -  ErrText_badtype:
   30 00:49D4 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   31 00:49E2 -  -  -  -  ErrText_badvalue:
   32 00:49E2 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   33 00:49EC -  -  -  -  ErrText_dim:
   34 00:49EC 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   35 00:49F6 -  -  -  -  ErrText_disabled:
   36 00:49F6 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   37 00:4A10 -  -  -  -  ErrText_divzero:
   38 00:4A10 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   39 00:4A21 -  -  -  -  ErrText_index:
   40 00:4A21 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   41 00:4A31 -  -  -  -  ErrText_lineno:
   42 00:4A31 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   43 00:4A46 -  -  -  -  ErrText_memory:
   44 00:4A46 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   45 00:4A54 -  -  -  -  ErrText_nocomma:
   46 00:4A54 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   47 00:4A62 -  -  -  -  ErrText_nodollar:
   48 00:4A62 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   49 00:4A6C -  -  -  -  ErrText_nolbracket:
   50 00:4A6C 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   51 00:4A81 -  -  -  -  ErrText_norbracket:
   52 00:4A81 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   53 00:4A97 -  -  -  -  ErrText_notref:
   54 00:4A97 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   55 00:4AA5 -  -  -  -  ErrText_stop:
   56 00:4AA5 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   57 00:4AAA -  -  -  -  ErrText_syntax:
   58 00:4AAA 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   59 00:4AB7 -  -  -  -  ErrText_todo:
   60 00:4AB7 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   61 00:4AC8 -  -  -  -  ErrText_unknownvar:
   62 00:4AC8 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   61 00:4AD9 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4AD9 -  -  -  -  ;
    2 00:4AD9 -  -  -  -  ;	Vectors for set 0
    3 00:4AD9 -  -  -  -  ;
    4 00:4AD9 -  -  -  -  VectorsSet0:
    5 00:4AD9 94 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4ADB 22 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4ADD 22 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4ADF DD 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4AE1 E5 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4AE3 9B 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4AE5 A6 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4AE7 B1 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4AE9 A6 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4AEB 85 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4AED 90 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4AEF 38 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4AF1 2F 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4AF3 1D 44 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4AF5 14 44 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4AF7 0B 44 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4AF9 26 44 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4AFB BC 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4AFD C7 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4AFF D2 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4B01 0C 47 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4B03 06 47 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4B05 4D 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4B07 73 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4B09 3E 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4B0B 1B 46 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4B0D F1 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4B0F 19 47 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4B11 2D 46 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4B13 26 46 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4B15 56 46 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4B17 68 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4B19 3C 47 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4B1B 42 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4B1D 4D 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4B1F FD 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4B21 01 44 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4B23 EB 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4B25 EB 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4B27 EE 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4B29 EB 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4B2B 61 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4B2D 22 40 -  -  	addr(Unimplemented)              ; $00aa [
   48 00:4B2F 22 40 -  -  	addr(Unimplemented)              ; $00ab ]
   49 00:4B31 EB 40 -  -  	addr(BadCmd_Comma)               ; $00ac ~
   50 00:4B33 22 40 -  -  	addr(Unimplemented)              ; $00ad repeat
   51 00:4B35 22 40 -  -  	addr(Unimplemented)              ; $00ae until
   52 00:4B37 22 40 -  -  	addr(Unimplemented)              ; $00af if
   53 00:4B39 EB 40 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:4B3B 22 40 -  -  	addr(Unimplemented)              ; $00b1 else
   55 00:4B3D 22 40 -  -  	addr(Unimplemented)              ; $00b2 for
   56 00:4B3F EB 40 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:4B41 22 40 -  -  	addr(Unimplemented)              ; $00b4 step
   58 00:4B43 22 40 -  -  	addr(Unimplemented)              ; $00b5 next
   59 00:4B45 22 40 -  -  	addr(Unimplemented)              ; $00b6 def
   60 00:4B47 22 40 -  -  	addr(Unimplemented)              ; $00b7 proc
   61 00:4B49 22 40 -  -  	addr(Unimplemented)              ; $00b8 endproc
   62 00:4B4B 22 40 -  -  	addr(Unimplemented)              ; $00b9 gosub
   63 00:4B4D 22 40 -  -  	addr(Unimplemented)              ; $00ba return
   64 00:4B4F E1 47 -  -  	addr(Command_GOTO)               ; $00bb goto
   65 00:4B51 22 40 -  -  	addr(Unimplemented)              ; $00bc local
   66 00:4B53 EF 40 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:4B55 61 42 -  -  	addr(Command_REM)                ; $00be rem
   68 00:4B57 A7 41 -  -  	addr(Command_LET)                ; $00bf let
   69 00:4B59 22 40 -  -  	addr(Unimplemented)              ; $00c0 vdu
   70 00:4B5B 01 42 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:4B5D 22 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:4B5F 22 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:4B61 22 40 -  -  	addr(Unimplemented)              ; $00c4 list
   74 00:4B63 CA 47 -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:4B65 7C 42 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:4B67 22 40 -  -  	addr(Unimplemented)              ; $00c7 read
   77 00:4B69 22 40 -  -  	addr(Unimplemented)              ; $00c8 data
   78 00:4B6B 22 40 -  -  	addr(Unimplemented)              ; $00c9 restore
   79 00:4B6D DC 40 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:4B6F 7C 47 -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:4B71 8F 41 -  -  	addr(Command_END)                ; $00cc end
   82 00:4B73 DF 42 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:4B75 -  -  -  -  ;
   84 00:4B75 -  -  -  -  ;	Vectors for set 1
   85 00:4B75 -  -  -  -  ;
   86 00:4B75 -  -  -  -  VectorsSet1:
   87 00:4B75 -  -  -  -  ;
   88 00:4B75 -  -  -  -  ;	Vectors for set 2
   89 00:4B75 -  -  -  -  ;
   90 00:4B75 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   62 00:4B75 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4B75 -  -  -  -  ; ***************************************************************************************
    2 00:4B75 -  -  -  -  ; ***************************************************************************************
    3 00:4B75 -  -  -  -  ;
    4 00:4B75 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4B75 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B75 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B75 -  -  -  -  ;		Reviewed :	No
    8 00:4B75 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4B75 -  -  -  -  ;
   10 00:4B75 -  -  -  -  ; ***************************************************************************************
   11 00:4B75 -  -  -  -  ; ***************************************************************************************
   12 00:4B75 -  -  -  -  
   13 00:4B75 -  -  -  -  ; ***************************************************************************************
   14 00:4B75 -  -  -  -  ;
   15 00:4B75 -  -  -  -  ;								Unsigned integer divide
   16 00:4B75 -  -  -  -  ;
   17 00:4B75 -  -  -  -  ; ***************************************************************************************
   18 00:4B75 -  -  -  -  
   19 00:4B75 -  -  -  -  Int32UDivide:
   20 00:4B75 37 -  -  -  		scf
   21 00:4B76 C3 B4 4B -  		jp 		_I32UnsignedDivide		
   22 00:4B79 -  -  -  -  
   23 00:4B79 -  -  -  -  ; ***************************************************************************************
   24 00:4B79 -  -  -  -  ;
   25 00:4B79 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4B79 -  -  -  -  ;
   27 00:4B79 -  -  -  -  ; ***************************************************************************************
   28 00:4B79 -  -  -  -  
   29 00:4B79 -  -  -  -  Int32SDivide:
   30 00:4B79 37 -  -  -  		scf
   31 00:4B7A 18 01 -  -  		jr 		_I32SDivide
   32 00:4B7C -  -  -  -  Int32Modulus:
   33 00:4B7C AF -  -  -  		xor 	a
   34 00:4B7D -  -  -  -  _I32SDivide:
   35 00:4B7D 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4B7E F5 -  -  -  		push 	af
   37 00:4B7F 08 -  -  -  		ex 		af,af'
   38 00:4B80 -  -  -  -  
   39 00:4B80 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4B81 D9 -  -  -  		exx
   41 00:4B82 D5 -  -  -  		push 	de
   42 00:4B83 D9 -  -  -  		exx
   43 00:4B84 -  -  -  -  
   44 00:4B84 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4B85 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4B86 CD A2 4B -  		call 	_I32CheckHLSignSwap
   47 00:4B89 CD A2 4B -  		call 	_I32CheckHLSignSwap
   48 00:4B8C 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4B8D F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4B8E F5 -  -  -  		push 	af
   51 00:4B8F CD B4 4B -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4B92 F1 -  -  -  		pop 	af 							; get function back
   53 00:4B93 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4B95 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4B96 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4B98 C4 FE 4C -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4B9B -  -  -  -  _I32SDExit:
   58 00:4B9B D9 -  -  -  		exx 								; restore DE'DE
   59 00:4B9C D1 -  -  -  		pop 	de
   60 00:4B9D D9 -  -  -  		exx
   61 00:4B9E D1 -  -  -  		pop 	de
   62 00:4B9F F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4BA0 08 -  -  -  		ex 		af,af'
   64 00:4BA1 C9 -  -  -  		ret
   65 00:4BA2 -  -  -  -  
   66 00:4BA2 -  -  -  -  
   67 00:4BA2 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4BA2 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4BA3 CB 7C -  -  		bit 	7,h
   70 00:4BA5 D9 -  -  -  		exx
   71 00:4BA6 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4BA8 -  -  -  -  		;
   73 00:4BA8 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4BAA F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4BAB CD FE 4C -  		call 	Int32Negate 				
   76 00:4BAE F1 -  -  -  		pop 	af
   77 00:4BAF -  -  -  -  _I32CHSPositive:
   78 00:4BAF D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4BB0 EB -  -  -  		ex 		de,hl
   80 00:4BB1 D9 -  -  -  		exx		
   81 00:4BB2 EB -  -  -  		ex 		de,hl
   82 00:4BB3 C9 -  -  -  		ret
   83 00:4BB4 -  -  -  -  
   84 00:4BB4 -  -  -  -  ; ***************************************************************************************
   85 00:4BB4 -  -  -  -  ;
   86 00:4BB4 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4BB4 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4BB4 -  -  -  -  ;
   89 00:4BB4 -  -  -  -  ; ***************************************************************************************
   90 00:4BB4 -  -  -  -  
   91 00:4BB4 -  -  -  -  _I32UnsignedDivide:
   92 00:4BB4 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4BB5 D5 -  -  -  		push 	de
   94 00:4BB6 D9 -  -  -  		exx
   95 00:4BB7 C5 -  -  -  		push 	bc
   96 00:4BB8 D5 -  -  -  		push 	de 							
   97 00:4BB9 D9 -  -  -  		exx
   98 00:4BBA -  -  -  -  
   99 00:4BBA F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4BBB -  -  -  -  
  101 00:4BBB 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4BBC B3 -  -  -  		or 		e
  103 00:4BBD D9 -  -  -  		exx
  104 00:4BBE B2 -  -  -  		or 		d
  105 00:4BBF B3 -  -  -  		or 		e
  106 00:4BC0 D9 -  -  -  		exx
  107 00:4BC1 CA 27 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4BC4 -  -  -  -  
  109 00:4BC4 -  -  -  -  
  110 00:4BC4 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4BC5 4D -  -  -  		ld		c,l
  112 00:4BC6 21 00 00 -  		ld 		hl,$0000
  113 00:4BC9 D9 -  -  -  		exx
  114 00:4BCA 44 -  -  -  		ld 		b,h
  115 00:4BCB 4D -  -  -  		ld		c,l
  116 00:4BCC 21 00 00 -  		ld 		hl,$0000
  117 00:4BCF D9 -  -  -  		exx
  118 00:4BD0 -  -  -  -  
  119 00:4BD0 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4BD2 -  -  -  -  _I32DivideLoop:
  121 00:4BD2 F5 -  -  -  		push 	af
  122 00:4BD3 -  -  -  -  
  123 00:4BD3 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4BD5 CB 10 -  -  		rl 		b
  125 00:4BD7 D9 -  -  -  		exx
  126 00:4BD8 CB 11 -  -  		rl 		c
  127 00:4BDA CB 10 -  -  		rl 		b
  128 00:4BDC D9 -  -  -  		exx
  129 00:4BDD CB 15 -  -  		rl 		l
  130 00:4BDF CB 14 -  -  		rl 		h
  131 00:4BE1 D9 -  -  -  		exx
  132 00:4BE2 CB 15 -  -  		rl 		l
  133 00:4BE4 CB 14 -  -  		rl 		h
  134 00:4BE6 D9 -  -  -  		exx
  135 00:4BE7 -  -  -  -  
  136 00:4BE7 CD A4 4C -  		call 	Int32Subtract 				; A = A - M
  137 00:4BEA 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4BEC -  -  -  -  
  139 00:4BEC 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4BED 18 03 -  -  		jr 		_I32Next
  141 00:4BEF -  -  -  -  
  142 00:4BEF -  -  -  -  _I32Borrow:
  143 00:4BEF CD 9E 4C -  		call 	Int32Add 					; A = A + M
  144 00:4BF2 -  -  -  -  _I32Next:
  145 00:4BF2 F1 -  -  -  		pop 	af
  146 00:4BF3 3D -  -  -  		dec 	a
  147 00:4BF4 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4BF6 -  -  -  -  
  149 00:4BF6 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4BF7 -  -  -  -  
  151 00:4BF7 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4BF8 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4BFA -  -  -  -  
  154 00:4BFA 60 -  -  -  		ld  	h,b
  155 00:4BFB 69 -  -  -  		ld 		l,c
  156 00:4BFC D9 -  -  -  		exx
  157 00:4BFD 60 -  -  -  		ld  	h,b
  158 00:4BFE 69 -  -  -  		ld 		l,c
  159 00:4BFF D9 -  -  -  		exx
  160 00:4C00 -  -  -  -  _I32Modulus1:		
  161 00:4C00 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4C01 D1 -  -  -  		pop 	de
  163 00:4C02 C1 -  -  -  		pop 	bc
  164 00:4C03 D9 -  -  -  		exx
  165 00:4C04 D1 -  -  -  		pop 	de
  166 00:4C05 C1 -  -  -  		pop 	bc
  167 00:4C06 C9 -  -  -  		ret
  168 00:4C07 -  -  -  -  
  169 00:4C07 -  -  -  -  ; ***************************************************************************************
  170 00:4C07 -  -  -  -  ;
  171 00:4C07 -  -  -  -  ;									Changes and Updates
  172 00:4C07 -  -  -  -  ;
  173 00:4C07 -  -  -  -  ; ***************************************************************************************
  174 00:4C07 -  -  -  -  ;
  175 00:4C07 -  -  -  -  ;		Date			Notes
  176 00:4C07 -  -  -  -  ;		==== 			=====
  177 00:4C07 -  -  -  -  ;
  178 00:4C07 -  -  -  -  ; ***************************************************************************************
  179 00:4C07 -  -  -  -  		
Listing for file "_build.asm"
   63 00:4C07 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4C07 -  -  -  -  ; ***************************************************************************************
    2 00:4C07 -  -  -  -  ; ***************************************************************************************
    3 00:4C07 -  -  -  -  ;
    4 00:4C07 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4C07 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C07 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C07 -  -  -  -  ;		Reviewed :	No
    8 00:4C07 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4C07 -  -  -  -  ;
   10 00:4C07 -  -  -  -  ; ***************************************************************************************
   11 00:4C07 -  -  -  -  ; ***************************************************************************************
   12 00:4C07 -  -  -  -  
   13 00:4C07 -  -  -  -  ; ***************************************************************************************
   14 00:4C07 -  -  -  -  ;
   15 00:4C07 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4C07 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4C07 -  -  -  -  ;
   18 00:4C07 -  -  -  -  ; ***************************************************************************************
   19 00:4C07 -  -  -  -  
   20 00:4C07 -  -  -  -  Int32FromString:
   21 00:4C07 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4C08 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4C09 D5 -  -  -  		push 	de
   24 00:4C0A D9 -  -  -  		exx
   25 00:4C0B D5 -  -  -  		push 	de
   26 00:4C0C -  -  -  -  
   27 00:4C0C 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4C0F 11 00 00 -  		ld 		de,$0000
   29 00:4C12 D9 -  -  -  		exx
   30 00:4C13 21 00 00 -  		ld 		hl,$0000
   31 00:4C16 11 00 00 -  		ld 		de,$0000
   32 00:4C19 D9 -  -  -  		exx
   33 00:4C1A -  -  -  -  
   34 00:4C1A 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4C1B CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4C1D 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4C1F ED 44 -  -  		neg 		 						; fix up the base
   38 00:4C21 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4C22 -  -  -  -  		;
   40 00:4C22 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4C23 F5 -  -  -  		push 	af
   42 00:4C24 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4C26 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4C27 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4C29 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4C2A 18 01 -  -  		jr 		_I32FSMain
   47 00:4C2C -  -  -  -  _I32FSNotSigned:		
   48 00:4C2C E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4C2D -  -  -  -  		;
   50 00:4C2D -  -  -  -  		; 		Main conversion loop.
   51 00:4C2D -  -  -  -  		; 		
   52 00:4C2D -  -  -  -  _I32FSMain:		
   53 00:4C2D 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4C2E FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4C30 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4C32 D6 20 -  -  		sub 	32
   57 00:4C34 -  -  -  -  _I32FSNotLower:
   58 00:4C34 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4C36 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4C38 FE 3A -  -  		cp 		'9'+1
   61 00:4C3A 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4C3C FE 41 -  -  		cp 		'A'
   63 00:4C3E 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4C40 FE 47 -  -  		cp 		'F'+1
   65 00:4C42 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4C44 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4C46 -  -  -  -  _I32FSOkay:
   68 00:4C46 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4C48 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4C49 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4C4B 03 -  -  -  		inc 	bc 							; consume character
   72 00:4C4C D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4C4D F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4C4E CD 68 4C -  		call 	Int32Multiply 				; result *= base
   75 00:4C51 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4C52 5F -  -  -  		ld 		e,a
   77 00:4C53 CD 9E 4C -  		call 	Int32Add 					; and add it.
   78 00:4C56 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4C57 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4C59 -  -  -  -  
   81 00:4C59 -  -  -  -  _I32FSExit:
   82 00:4C59 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4C5A FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4C5C CC FE 4C -  		call 	z,Int32Negate
   85 00:4C5F 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4C60 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4C61 D9 -  -  -  		exx
   88 00:4C62 D1 -  -  -  		pop 	de
   89 00:4C63 D9 -  -  -  		exx
   90 00:4C64 C1 -  -  -  		pop 	bc
   91 00:4C65 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4C67 C9 -  -  -  		ret				
   93 00:4C68 -  -  -  -  
   94 00:4C68 -  -  -  -  ; ***************************************************************************************
   95 00:4C68 -  -  -  -  ;
   96 00:4C68 -  -  -  -  ;									Changes and Updates
   97 00:4C68 -  -  -  -  ;
   98 00:4C68 -  -  -  -  ; ***************************************************************************************
   99 00:4C68 -  -  -  -  ;
  100 00:4C68 -  -  -  -  ;		Date			Notes
  101 00:4C68 -  -  -  -  ;		==== 			=====
  102 00:4C68 -  -  -  -  ;
  103 00:4C68 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:4C68 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4C68 -  -  -  -  ; ***************************************************************************************
    2 00:4C68 -  -  -  -  ; ***************************************************************************************
    3 00:4C68 -  -  -  -  ;
    4 00:4C68 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4C68 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C68 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C68 -  -  -  -  ;		Reviewed :	No
    8 00:4C68 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4C68 -  -  -  -  ;
   10 00:4C68 -  -  -  -  ; ***************************************************************************************
   11 00:4C68 -  -  -  -  ; ***************************************************************************************
   12 00:4C68 -  -  -  -  
   13 00:4C68 -  -  -  -  Int32Multiply:
   14 00:4C68 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4C69 D5 -  -  -  		push 	de
   16 00:4C6A 44 -  -  -  		ld 		b,h
   17 00:4C6B 4D -  -  -  		ld 		c,l
   18 00:4C6C 21 00 00 -  		ld 		hl,$0000
   19 00:4C6F -  -  -  -  
   20 00:4C6F D9 -  -  -  		exx
   21 00:4C70 C5 -  -  -  		push 	bc
   22 00:4C71 D5 -  -  -  		push 	de
   23 00:4C72 44 -  -  -  		ld 		b,h
   24 00:4C73 4D -  -  -  		ld 		c,l
   25 00:4C74 21 00 00 -  		ld 		hl,$0000		
   26 00:4C77 D9 -  -  -  		exx
   27 00:4C78 -  -  -  -  
   28 00:4C78 -  -  -  -  _I32MultiplyLoop:
   29 00:4C78 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4C7A C4 9E 4C -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4C7D -  -  -  -  		;
   32 00:4C7D D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4C7E CB 38 -  -  		srl 	b
   34 00:4C80 CB 19 -  -  		rr 		c
   35 00:4C82 D9 -  -  -  		exx
   36 00:4C83 CB 18 -  -  		rr 		b
   37 00:4C85 CB 19 -  -  		rr 		c
   38 00:4C87 -  -  -  -  		;
   39 00:4C87 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4C89 CB 12 -  -  		rl 		d
   41 00:4C8B D9 -  -  -  		exx
   42 00:4C8C CB 13 -  -  		rl 		e
   43 00:4C8E CB 12 -  -  		rl 		d
   44 00:4C90 -  -  -  -  
   45 00:4C90 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4C91 B1 -  -  -  		or 		c
   47 00:4C92 D9 -  -  -  		exx
   48 00:4C93 B0 -  -  -  		or 		b
   49 00:4C94 B1 -  -  -  		or 		c
   50 00:4C95 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4C97 -  -  -  -  
   52 00:4C97 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4C98 D1 -  -  -  		pop 	de
   54 00:4C99 C1 -  -  -  		pop 	bc
   55 00:4C9A D9 -  -  -  		exx
   56 00:4C9B D1 -  -  -  		pop 	de
   57 00:4C9C C1 -  -  -  		pop 	bc
   58 00:4C9D C9 -  -  -  		ret
   59 00:4C9E -  -  -  -  
   60 00:4C9E -  -  -  -  ; ***************************************************************************************
   61 00:4C9E -  -  -  -  ;
   62 00:4C9E -  -  -  -  ;									Changes and Updates
   63 00:4C9E -  -  -  -  ;
   64 00:4C9E -  -  -  -  ; ***************************************************************************************
   65 00:4C9E -  -  -  -  ;
   66 00:4C9E -  -  -  -  ;		Date			Notes
   67 00:4C9E -  -  -  -  ;		==== 			=====
   68 00:4C9E -  -  -  -  ;
   69 00:4C9E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4C9E -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4C9E -  -  -  -  ; ***************************************************************************************
    2 00:4C9E -  -  -  -  ; ***************************************************************************************
    3 00:4C9E -  -  -  -  ;
    4 00:4C9E -  -  -  -  ;		Name : 		isimple.asm
    5 00:4C9E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C9E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C9E -  -  -  -  ;		Reviewed :	No
    8 00:4C9E -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4C9E -  -  -  -  ;
   10 00:4C9E -  -  -  -  ; ***************************************************************************************
   11 00:4C9E -  -  -  -  ; ***************************************************************************************
   12 00:4C9E -  -  -  -  
   13 00:4C9E -  -  -  -  ; ***************************************************************************************
   14 00:4C9E -  -  -  -  ;
   15 00:4C9E -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4C9E -  -  -  -  ;
   17 00:4C9E -  -  -  -  ; ***************************************************************************************
   18 00:4C9E -  -  -  -  
   19 00:4C9E -  -  -  -  Int32Add:
   20 00:4C9E 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4C9F D9 -  -  -  		exx
   22 00:4CA0 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4CA2 D9 -  -  -  		exx
   24 00:4CA3 C9 -  -  -  		ret
   25 00:4CA4 -  -  -  -  
   26 00:4CA4 -  -  -  -  ; ***************************************************************************************
   27 00:4CA4 -  -  -  -  ;
   28 00:4CA4 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4CA4 -  -  -  -  ;
   30 00:4CA4 -  -  -  -  ; ***************************************************************************************
   31 00:4CA4 -  -  -  -  
   32 00:4CA4 -  -  -  -  Int32Subtract:
   33 00:4CA4 AF -  -  -  		xor 	a 							; clear carry
   34 00:4CA5 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4CA7 D9 -  -  -  		exx
   36 00:4CA8 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4CAA D9 -  -  -  		exx
   38 00:4CAB C9 -  -  -  		ret
   39 00:4CAC -  -  -  -  
   40 00:4CAC -  -  -  -  ; ***************************************************************************************
   41 00:4CAC -  -  -  -  ;
   42 00:4CAC -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4CAC -  -  -  -  ;
   44 00:4CAC -  -  -  -  ; ***************************************************************************************
   45 00:4CAC -  -  -  -  
   46 00:4CAC -  -  -  -  Int32And:
   47 00:4CAC D9 -  -  -  		exx
   48 00:4CAD CD B1 4C -  		call 	_I32AndHLDE
   49 00:4CB0 D9 -  -  -  		exx
   50 00:4CB1 -  -  -  -  _I32AndHLDE:		
   51 00:4CB1 7C -  -  -  		ld 		a,h
   52 00:4CB2 A2 -  -  -  		and 	d
   53 00:4CB3 67 -  -  -  		ld 		h,a
   54 00:4CB4 7D -  -  -  		ld 		a,l
   55 00:4CB5 A3 -  -  -  		and 	e
   56 00:4CB6 6F -  -  -  		ld 		l,a
   57 00:4CB7 C9 -  -  -  		ret
   58 00:4CB8 -  -  -  -  
   59 00:4CB8 -  -  -  -  ; ***************************************************************************************
   60 00:4CB8 -  -  -  -  ;
   61 00:4CB8 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4CB8 -  -  -  -  ;
   63 00:4CB8 -  -  -  -  ; ***************************************************************************************
   64 00:4CB8 -  -  -  -  
   65 00:4CB8 -  -  -  -  Int32Or:
   66 00:4CB8 D9 -  -  -  		exx
   67 00:4CB9 CD BD 4C -  		call 	_I32OrHLDE
   68 00:4CBC D9 -  -  -  		exx
   69 00:4CBD -  -  -  -  _I32OrHLDE:		
   70 00:4CBD 7C -  -  -  		ld 		a,h
   71 00:4CBE B2 -  -  -  		or 		d
   72 00:4CBF 67 -  -  -  		ld 		h,a
   73 00:4CC0 7D -  -  -  		ld 		a,l
   74 00:4CC1 B3 -  -  -  		or 		e
   75 00:4CC2 6F -  -  -  		ld 		l,a
   76 00:4CC3 C9 -  -  -  		ret
   77 00:4CC4 -  -  -  -  
   78 00:4CC4 -  -  -  -  ; ***************************************************************************************
   79 00:4CC4 -  -  -  -  ;
   80 00:4CC4 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4CC4 -  -  -  -  ;
   82 00:4CC4 -  -  -  -  ; ***************************************************************************************
   83 00:4CC4 -  -  -  -  
   84 00:4CC4 -  -  -  -  Int32Xor:
   85 00:4CC4 D9 -  -  -  		exx
   86 00:4CC5 CD C9 4C -  		call 	_I32XorHLDE
   87 00:4CC8 D9 -  -  -  		exx
   88 00:4CC9 -  -  -  -  _I32XorHLDE:		
   89 00:4CC9 7C -  -  -  		ld 		a,h
   90 00:4CCA AA -  -  -  		xor 	d
   91 00:4CCB 67 -  -  -  		ld 		h,a
   92 00:4CCC 7D -  -  -  		ld 		a,l
   93 00:4CCD AB -  -  -  		xor 	e
   94 00:4CCE 6F -  -  -  		ld 		l,a
   95 00:4CCF C9 -  -  -  		ret
   96 00:4CD0 -  -  -  -  
   97 00:4CD0 -  -  -  -  ; ***************************************************************************************
   98 00:4CD0 -  -  -  -  ;
   99 00:4CD0 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4CD0 -  -  -  -  ;
  101 00:4CD0 -  -  -  -  ; ***************************************************************************************
  102 00:4CD0 -  -  -  -  
  103 00:4CD0 -  -  -  -  Int32Zero:
  104 00:4CD0 D9 -  -  -  		exx
  105 00:4CD1 7D -  -  -  		ld 		a,l
  106 00:4CD2 B4 -  -  -  		or 		h
  107 00:4CD3 D9 -  -  -  		exx
  108 00:4CD4 B5 -  -  -  		or 		l
  109 00:4CD5 B4 -  -  -  		or 		h
  110 00:4CD6 C9 -  -  -  		ret
  111 00:4CD7 -  -  -  -  
  112 00:4CD7 -  -  -  -  ; ***************************************************************************************
  113 00:4CD7 -  -  -  -  ;
  114 00:4CD7 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4CD7 -  -  -  -  ;
  116 00:4CD7 -  -  -  -  ; ***************************************************************************************
  117 00:4CD7 -  -  -  -  
  118 00:4CD7 -  -  -  -  Int32Compare:
  119 00:4CD7 E5 -  -  -  		push 	hl 							; save HL
  120 00:4CD8 AF -  -  -  		xor 	a 							; clear carry
  121 00:4CD9 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4CDB D9 -  -  -  		exx
  123 00:4CDC E5 -  -  -  		push 	hl 							; save HL'
  124 00:4CDD ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4CDF -  -  -  -  		;
  126 00:4CDF 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4CE0 E2 E7 4C -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4CE3 78 -  -  -  		ld 		a,b
  129 00:4CE4 EE 80 -  -  		xor 	$80
  130 00:4CE6 47 -  -  -  		ld 		b,a
  131 00:4CE7 -  -  -  -  _I32CNoOverflow:
  132 00:4CE7 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4CE8 B5 -  -  -  		or 		l
  134 00:4CE9 D9 -  -  -  		exx 
  135 00:4CEA B4 -  -  -  		or 		h
  136 00:4CEB B5 -  -  -  		or 		l
  137 00:4CEC 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4CEE -  -  -  -  		;
  139 00:4CEE D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4CEF CB 78 -  -  		bit 	7,b
  141 00:4CF1 D9 -  -  -  		exx
  142 00:4CF2 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4CF4 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4CF6 3E FF -  -  		ld 		a,$FF
  145 00:4CF8 -  -  -  -  _I32NotPos:
  146 00:4CF8 D9 -  -  -  		exx
  147 00:4CF9 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4CFA D9 -  -  -  		exx
  149 00:4CFB E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4CFC B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4CFD C9 -  -  -  		ret
  152 00:4CFE -  -  -  -  
  153 00:4CFE -  -  -  -  ; ***************************************************************************************
  154 00:4CFE -  -  -  -  ;
  155 00:4CFE -  -  -  -  ;										Negate HL'HL
  156 00:4CFE -  -  -  -  ;
  157 00:4CFE -  -  -  -  ; ***************************************************************************************
  158 00:4CFE -  -  -  -  
  159 00:4CFE -  -  -  -  Int32Negate:
  160 00:4CFE AF -  -  -  		xor 	a
  161 00:4CFF CD 08 4D -  		call 	_I32NSubtract
  162 00:4D02 D9 -  -  -  		exx
  163 00:4D03 CD 08 4D -  		call 	_I32NSubtract
  164 00:4D06 D9 -  -  -  		exx
  165 00:4D07 C9 -  -  -  		ret
  166 00:4D08 -  -  -  -  _I32NSubtract:
  167 00:4D08 D5 -  -  -  		push 	de
  168 00:4D09 EB -  -  -  		ex 		de,hl
  169 00:4D0A 21 00 00 -  		ld 		hl,$0000
  170 00:4D0D ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4D0F D1 -  -  -  		pop 	de
  172 00:4D10 C9 -  -  -  		ret
  173 00:4D11 -  -  -  -  		
  174 00:4D11 -  -  -  -  ; ***************************************************************************************
  175 00:4D11 -  -  -  -  ;
  176 00:4D11 -  -  -  -  ;									Changes and Updates
  177 00:4D11 -  -  -  -  ;
  178 00:4D11 -  -  -  -  ; ***************************************************************************************
  179 00:4D11 -  -  -  -  ;
  180 00:4D11 -  -  -  -  ;		Date			Notes
  181 00:4D11 -  -  -  -  ;		==== 			=====
  182 00:4D11 -  -  -  -  ;
  183 00:4D11 -  -  -  -  ; ***************************************************************************************
  184 00:4D11 -  -  -  -  		
Listing for file "_build.asm"
   66 00:4D11 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4D11 -  -  -  -  ; ***************************************************************************************
    2 00:4D11 -  -  -  -  ; ***************************************************************************************
    3 00:4D11 -  -  -  -  ;
    4 00:4D11 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4D11 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D11 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D11 -  -  -  -  ;		Reviewed :	No
    8 00:4D11 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4D11 -  -  -  -  ;
   10 00:4D11 -  -  -  -  ; ***************************************************************************************
   11 00:4D11 -  -  -  -  ;
   12 00:4D11 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4D11 -  -  -  -  ;
   14 00:4D11 -  -  -  -  ; ***************************************************************************************
   15 00:4D11 -  -  -  -  
   16 00:4D11 -  -  -  -  Int32ToString:
   17 00:4D11 C5 -  -  -  		push 	bc 							; save string start
   18 00:4D12 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4D13 E5 -  -  -  		push 	hl
   20 00:4D14 11 00 00 -  		ld	 	de,$0000
   21 00:4D17 D9 -  -  -  		exx
   22 00:4D18 D5 -  -  -  		push 	de
   23 00:4D19 E5 -  -  -  		push 	hl
   24 00:4D1A 11 00 00 -  		ld 		de,$000
   25 00:4D1D D9 -  -  -  		exx
   26 00:4D1E 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4D1F -  -  -  -  		;
   28 00:4D1F CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4D21 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4D23 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4D25 5F -  -  -  		ld 		e,a
   32 00:4D26 -  -  -  -  		;
   33 00:4D26 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4D27 CB 7C -  -  		bit 	7,h
   35 00:4D29 D9 -  -  -  		exx
   36 00:4D2A 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4D2C -  -  -  -  		;
   38 00:4D2C CD FE 4C -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4D2F -  -  -  -  		;
   40 00:4D2F 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4D31 02 -  -  -  		ld 		(bc),a
   42 00:4D32 03 -  -  -  		inc 	bc
   43 00:4D33 -  -  -  -  _I32TSNotNegative:	
   44 00:4D33 CD 41 4D -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4D36 -  -  -  -  _I32TSExit:
   46 00:4D36 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4D38 02 -  -  -  		ld 		(bc),a 
   48 00:4D39 -  -  -  -  
   49 00:4D39 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4D3A E1 -  -  -  		pop 	hl
   51 00:4D3B D1 -  -  -  		pop 	de
   52 00:4D3C D9 -  -  -  		exx
   53 00:4D3D E1 -  -  -  		pop 	hl
   54 00:4D3E D1 -  -  -  		pop 	de
   55 00:4D3F C1 -  -  -  		pop 	bc
   56 00:4D40 C9 -  -  -  		ret
   57 00:4D41 -  -  -  -  
   58 00:4D41 -  -  -  -  _I32RecursiveConvert:
   59 00:4D41 CD 75 4B -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4D44 F5 -  -  -  		push 	af 							; save remainder
   61 00:4D45 CD D0 4C -  		call 	Int32Zero		 			; check result is non zero
   62 00:4D48 C4 41 4D -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4D4B F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4D4C FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4D4E 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4D50 C6 07 -  -  		add 	a,7
   67 00:4D52 -  -  -  -  _I32NotHex:
   68 00:4D52 C6 30 -  -  		add 	a,48
   69 00:4D54 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4D55 03 -  -  -  		inc 	bc
   71 00:4D56 C9 -  -  -  		ret		
   72 00:4D57 -  -  -  -  
   73 00:4D57 -  -  -  -  ; ***************************************************************************************
   74 00:4D57 -  -  -  -  ;
   75 00:4D57 -  -  -  -  ;									Changes and Updates
   76 00:4D57 -  -  -  -  ;
   77 00:4D57 -  -  -  -  ; ***************************************************************************************
   78 00:4D57 -  -  -  -  ;
   79 00:4D57 -  -  -  -  ;		Date			Notes
   80 00:4D57 -  -  -  -  ;		==== 			=====
   81 00:4D57 -  -  -  -  ;
   82 00:4D57 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4D57 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4D57 -  -  -  -  ; ***************************************************************************************
    2 00:4D57 -  -  -  -  ; ***************************************************************************************
    3 00:4D57 -  -  -  -  ;
    4 00:4D57 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4D57 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D57 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D57 -  -  -  -  ;		Reviewed :	No
    8 00:4D57 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4D57 -  -  -  -  ;
   10 00:4D57 -  -  -  -  ; ***************************************************************************************
   11 00:4D57 -  -  -  -  ; ***************************************************************************************
   12 00:4D57 -  -  -  -  
   13 00:4D57 -  -  -  -  #ifdef AQUARIUS
   14 00:4D57 -  -  -  -  
   15 00:4D57 -  -  -  -  ; ***************************************************************************************
   16 00:4D57 -  -  -  -  ;
   17 00:4D57 -  -  -  -  ;								Initialise system stuff
   18 00:4D57 -  -  -  -  ;
   19 00:4D57 -  -  -  -  ; ***************************************************************************************
   20 00:4D57 -  -  -  -  
   21 00:4D57 -  -  -  -  SYSInitialise:
   22 00:4D57 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4D59 CD 5F 4D -  	call 	SYSPrintChar
   24 00:4D5C C9 -  -  -  	ret
   25 00:4D5D -  -  -  -  
   26 00:4D5D -  -  -  -  ; ***************************************************************************************
   27 00:4D5D -  -  -  -  ;
   28 00:4D5D -  -  -  -  ;								Terminate system stuff
   29 00:4D5D -  -  -  -  ;
   30 00:4D5D -  -  -  -  ; ***************************************************************************************
   31 00:4D5D -  -  -  -  
   32 00:4D5D -  -  -  -  SYSTerminate:
   33 00:4D5D 18 FE -  -  	jr 		SYSTerminate
   34 00:4D5F -  -  -  -  
   35 00:4D5F -  -  -  -  ; ***************************************************************************************
   36 00:4D5F -  -  -  -  ;
   37 00:4D5F -  -  -  -  ;								Print A character
   38 00:4D5F -  -  -  -  ;
   39 00:4D5F -  -  -  -  ; ***************************************************************************************
   40 00:4D5F -  -  -  -  
   41 00:4D5F -  -  -  -  SYSPrintChar:
   42 00:4D5F F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4D60 C5 -  -  -  	push 	bc
   44 00:4D61 D5 -  -  -  	push 	de
   45 00:4D62 E5 -  -  -  	push 	hl
   46 00:4D63 DD E5 -  -  	push 	ix
   47 00:4D65 FD E5 -  -  	push 	iy
   48 00:4D67 D9 -  -  -  	exx
   49 00:4D68 C5 -  -  -  	push 	bc
   50 00:4D69 D5 -  -  -  	push 	de
   51 00:4D6A E5 -  -  -  	push 	hl
   52 00:4D6B CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4D6E E1 -  -  -  	pop 	hl
   54 00:4D6F D1 -  -  -  	pop 	de
   55 00:4D70 C1 -  -  -  	pop 	bc
   56 00:4D71 D9 -  -  -  	exx
   57 00:4D72 FD E1 -  -  	pop 	iy
   58 00:4D74 DD E1 -  -  	pop 	ix
   59 00:4D76 E1 -  -  -  	pop 	hl
   60 00:4D77 D1 -  -  -  	pop 	de
   61 00:4D78 C1 -  -  -  	pop 	bc
   62 00:4D79 F1 -  -  -  	pop 	af
   63 00:4D7A C9 -  -  -  	ret		
   64 00:4D7B -  -  -  -  
   65 00:4D7B -  -  -  -  ; ***************************************************************************************
   66 00:4D7B -  -  -  -  ;
   67 00:4D7B -  -  -  -  ;									Print Newline
   68 00:4D7B -  -  -  -  ;
   69 00:4D7B -  -  -  -  ; ***************************************************************************************
   70 00:4D7B -  -  -  -  
   71 00:4D7B -  -  -  -  SYSPrintCRLF:
   72 00:4D7B F5 -  -  -  	push 	af
   73 00:4D7C 3E 0D -  -  	ld 		a,13
   74 00:4D7E CD 5F 4D -  	call 	SYSPrintChar
   75 00:4D81 3E 0A -  -  	ld 		a,10
   76 00:4D83 CD 5F 4D -  	call 	SYSPrintChar
   77 00:4D86 F1 -  -  -  	pop 	af
   78 00:4D87 C9 -  -  -  	ret
   79 00:4D88 -  -  -  -  
   80 00:4D88 -  -  -  -  ; ***************************************************************************************
   81 00:4D88 -  -  -  -  ;
   82 00:4D88 -  -  -  -  ;									Get time into HL'HL
   83 00:4D88 -  -  -  -  ;
   84 00:4D88 -  -  -  -  ; ***************************************************************************************
   85 00:4D88 -  -  -  -  
   86 00:4D88 -  -  -  -  SYSGetTimer:
   87 00:4D88 DB 00 -  -   	in 		a,($00)
   88 00:4D8A 6F -  -  -   	ld 		l,a
   89 00:4D8B DB 01 -  -   	in 		a,($01)
   90 00:4D8D 67 -  -  -   	ld 		h,a
   91 00:4D8E D9 -  -  -   	exx
   92 00:4D8F DB 02 -  -   	in 		a,($02)
   93 00:4D91 6F -  -  -   	ld 		l,a
   94 00:4D92 DB 03 -  -   	in 		a,($03)
   95 00:4D94 67 -  -  -   	ld 		h,a
   96 00:4D95 D9 -  -  -   	exx
   97 00:4D96 C9 -  -  -  	ret 	
   98 00:4D97 -  -  -  -  	
   99 00:4D97 -  -  -  -  #endif
  100 00:4D97 -  -  -  -  
  101 00:4D97 -  -  -  -  ; ***************************************************************************************
  102 00:4D97 -  -  -  -  ;
  103 00:4D97 -  -  -  -  ;									Changes and Updates
  104 00:4D97 -  -  -  -  ;
  105 00:4D97 -  -  -  -  ; ***************************************************************************************
  106 00:4D97 -  -  -  -  ;
  107 00:4D97 -  -  -  -  ;		Date			Notes
  108 00:4D97 -  -  -  -  ;		==== 			=====
  109 00:4D97 -  -  -  -  ;
  110 00:4D97 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4D97 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4D97 -  -  -  -  ; ***************************************************************************************
    2 00:4D97 -  -  -  -  ; ***************************************************************************************
    3 00:4D97 -  -  -  -  ;
    4 00:4D97 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4D97 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D97 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D97 -  -  -  -  ;		Reviewed :	No
    8 00:4D97 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4D97 -  -  -  -  ;
   10 00:4D97 -  -  -  -  ; ***************************************************************************************
   11 00:4D97 -  -  -  -  ; ***************************************************************************************
   12 00:4D97 -  -  -  -  
   13 00:4D97 -  -  -  -  #ifdef CLEANEZ80
   14 00:4D97             
   15 00:4D97             ; ***************************************************************************************
   16 00:4D97             ;
   17 00:4D97             ;								Initialise system stuff
   18 00:4D97             ;
   19 00:4D97             ; ***************************************************************************************
   20 00:4D97             
   21 00:4D97             SYSInitialise:
   22 00:4D97             	ret
   23 00:4D97             
   24 00:4D97             ; ***************************************************************************************
   25 00:4D97             ;
   26 00:4D97             ;								Terminate system stuff
   27 00:4D97             ;
   28 00:4D97             ; ***************************************************************************************
   29 00:4D97             
   30 00:4D97             SYSTerminate:
   31 00:4D97             	ret
   32 00:4D97             
   33 00:4D97             ; ***************************************************************************************
   34 00:4D97             ;
   35 00:4D97             ;								Print A character
   36 00:4D97             ;
   37 00:4D97             ; ***************************************************************************************
   38 00:4D97             
   39 00:4D97             SYSPrintChar:
   40 00:4D97             	ret		
   41 00:4D97             
   42 00:4D97             ; ***************************************************************************************
   43 00:4D97             ;
   44 00:4D97             ;									Print Newline
   45 00:4D97             ;
   46 00:4D97             ; ***************************************************************************************
   47 00:4D97             
   48 00:4D97             SYSPrintCRLF:
   49 00:4D97             	ret
   50 00:4D97             
   51 00:4D97             ; ***************************************************************************************
   52 00:4D97             ;
   53 00:4D97             ;									Get time into HL'HL
   54 00:4D97             ;
   55 00:4D97             ; ***************************************************************************************
   56 00:4D97             
   57 00:4D97             SYSGetTimer:
   58 00:4D97             	ret
   59 00:4D97             
   60 00:4D97             #endif
   61 00:4D97 -  -  -  -  
   62 00:4D97 -  -  -  -  ; ***************************************************************************************
   63 00:4D97 -  -  -  -  ;
   64 00:4D97 -  -  -  -  ;									Changes and Updates
   65 00:4D97 -  -  -  -  ;
   66 00:4D97 -  -  -  -  ; ***************************************************************************************
   67 00:4D97 -  -  -  -  ;
   68 00:4D97 -  -  -  -  ;		Date			Notes
   69 00:4D97 -  -  -  -  ;		==== 			=====
   70 00:4D97 -  -  -  -  ;
   71 00:4D97 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:4D97 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4D97 -  -  -  -  ; ***************************************************************************************
    2 00:4D97 -  -  -  -  ; ***************************************************************************************
    3 00:4D97 -  -  -  -  ;
    4 00:4D97 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4D97 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D97 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D97 -  -  -  -  ;		Reviewed :	No
    8 00:4D97 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4D97 -  -  -  -  ;
   10 00:4D97 -  -  -  -  ; ***************************************************************************************
   11 00:4D97 -  -  -  -  ; ***************************************************************************************
   12 00:4D97 -  -  -  -  
   13 00:4D97 -  -  -  -  #ifdef TI84
   14 00:4D97             
   15 00:4D97             ; ***************************************************************************************
   16 00:4D97             ;
   17 00:4D97             ;								Initialise system stuff
   18 00:4D97             ;
   19 00:4D97             ; ***************************************************************************************
   20 00:4D97             
   21 00:4D97             SYSInitialise:
   22 00:4D97             	di
   23 00:4D97             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4D97             	ld 		(_IYTemp84),iy
   25 00:4D97             	ret
   26 00:4D97             
   27 00:4D97             ; ***************************************************************************************
   28 00:4D97             ;
   29 00:4D97             ;								Terminate system stuff
   30 00:4D97             ;
   31 00:4D97             ; ***************************************************************************************
   32 00:4D97             
   33 00:4D97             SYSTerminate:
   34 00:4D97             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4D97             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4D97             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4D97             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4D97             	ei
   39 00:4D97             	ret 										; and exit.
   40 00:4D97             
   41 00:4D97             _StackTemp84:									; temp var for TI84 only.
   42 00:4D97             	.dw 	0,0
   43 00:4D97             _IYTemp84:
   44 00:4D97             	.dw 	0,0		
   45 00:4D97             
   46 00:4D97             ; ***************************************************************************************
   47 00:4D97             ;
   48 00:4D97             ;								Print A character
   49 00:4D97             ;
   50 00:4D97             ; ***************************************************************************************
   51 00:4D97             
   52 00:4D97             SYSPrintChar:
   53 00:4D97             	push 	af 									; we stack everything including alt registers
   54 00:4D97             	push 	bc
   55 00:4D97             	push 	de
   56 00:4D97             	push 	hl
   57 00:4D97             	push 	ix
   58 00:4D97             	push 	iy
   59 00:4D97             	exx
   60 00:4D97             	push 	bc
   61 00:4D97             	push 	de
   62 00:4D97             	push 	hl
   63 00:4D97             
   64 00:4D97             	ld 		iy,(_IYTemp84)
   65 00:4D97             	call 	_PutC 								; print A as character
   66 00:4D97             	di
   67 00:4D97             	ld 		(_IYTemp84),iy
   68 00:4D97             
   69 00:4D97             	pop 	hl
   70 00:4D97             	pop 	de
   71 00:4D97             	pop 	bc
   72 00:4D97             	exx
   73 00:4D97             	pop 	iy
   74 00:4D97             	pop 	ix
   75 00:4D97             	pop 	hl
   76 00:4D97             	pop 	de
   77 00:4D97             	pop 	bc
   78 00:4D97             	pop 	af
   79 00:4D97             	ret		
   80 00:4D97             
   81 00:4D97             ; ***************************************************************************************
   82 00:4D97             ;
   83 00:4D97             ;									Print Newline
   84 00:4D97             ;
   85 00:4D97             ; ***************************************************************************************
   86 00:4D97             
   87 00:4D97             SYSPrintCRLF:
   88 00:4D97             	push 	af 									; we stack everything including alt registers
   89 00:4D97             	push 	bc
   90 00:4D97             	push 	de
   91 00:4D97             	push 	hl
   92 00:4D97             	push 	ix
   93 00:4D97             	push 	iy
   94 00:4D97             	exx
   95 00:4D97             	push 	bc
   96 00:4D97             	push 	de
   97 00:4D97             	push 	hl
   98 00:4D97             
   99 00:4D97             	ld 		iy,(_IYTemp84)
  100 00:4D97             	call 	_newline
  101 00:4D97             	di
  102 00:4D97             	ld 		(_IYTemp84),iy
  103 00:4D97             
  104 00:4D97             	pop 	hl
  105 00:4D97             	pop 	de
  106 00:4D97             	pop 	bc
  107 00:4D97             	exx
  108 00:4D97             	pop 	iy
  109 00:4D97             	pop 	ix
  110 00:4D97             	pop 	hl
  111 00:4D97             	pop 	de
  112 00:4D97             	pop 	bc
  113 00:4D97             	pop 	af
  114 00:4D97             	ret
  115 00:4D97             
  116 00:4D97             ; ***************************************************************************************
  117 00:4D97             ;
  118 00:4D97             ;									Get time into HL'HL
  119 00:4D97             ;
  120 00:4D97             ; ***************************************************************************************
  121 00:4D97             
  122 00:4D97             SYSGetTimer:
  123 00:4D97             	ld 		hl,$1234
  124 00:4D97             	exx
  125 00:4D97             	ld 		hl,$5678
  126 00:4D97             	exx
  127 00:4D97             	ret
  128 00:4D97             
  129 00:4D97             #endif
  130 00:4D97 -  -  -  -  
  131 00:4D97 -  -  -  -  ; ***************************************************************************************
  132 00:4D97 -  -  -  -  ;
  133 00:4D97 -  -  -  -  ;									Changes and Updates
  134 00:4D97 -  -  -  -  ;
  135 00:4D97 -  -  -  -  ; ***************************************************************************************
  136 00:4D97 -  -  -  -  ;
  137 00:4D97 -  -  -  -  ;		Date			Notes
  138 00:4D97 -  -  -  -  ;		==== 			=====
  139 00:4D97 -  -  -  -  ;
  140 00:4D97 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   70 00:4D97 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4D97 -  -  -  -  ; ***************************************************************************************
    2 00:4D97 -  -  -  -  ; ***************************************************************************************
    3 00:4D97 -  -  -  -  ;
    4 00:4D97 -  -  -  -  ;		Name : 		basic.asm
    5 00:4D97 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D97 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D97 -  -  -  -  ;		Reviewed :	No
    8 00:4D97 -  -  -  -  ;		Purpose :	Main program.
    9 00:4D97 -  -  -  -  ;
   10 00:4D97 -  -  -  -  ; ***************************************************************************************
   11 00:4D97 -  -  -  -  ; ***************************************************************************************
   12 00:4D97 -  -  -  -  
   13 00:4D97 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 0B 0A 00 02 
              0E 14 0D 13 
              8F 40 80 11 
              14 00 02 0E 
              14 0D 13 8F 
              02 0E 14 0D 
              13 89 41 80 
              0A 1E 00 C1 
              02 0E 14 0D 
              13 80 06 28 
              00 BB 54 80 
              00 -  -  -  	.db	$0b,$0a,$00,$02,$0e,$14,$0d,$13,$8f,$40,$80,$11,$14,$00,$02,$0e,$14,$0d,$13,$8f,$02,$0e,$14,$0d,$13,$89,$41,$80,$0a,$1e,$00,$c1,$02,$0e,$14,$0d,$13,$80,$06,$28,$00,$bb,$54,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:502D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:602D -  -  -  -  EndTestInstance:
   18 00:602D -  -  -  -  		
   19 00:602D -  -  -  -  ; ***************************************************************************************
   20 00:602D -  -  -  -  ;
   21 00:602D -  -  -  -  ;									Changes and Updates
   22 00:602D -  -  -  -  ;
   23 00:602D -  -  -  -  ; ***************************************************************************************
   24 00:602D -  -  -  -  ;
   25 00:602D -  -  -  -  ;		Date			Notes
   26 00:602D -  -  -  -  ;		==== 			=====
   27 00:602D -  -  -  -  ;
   28 00:602D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   71 00:602D -  -  -  -  FinalAddress:
