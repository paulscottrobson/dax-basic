    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 4C 4B -  		call 	SYSInitialise
   44 00:4006 11 00 4C -  		ld 		de,TestInstance
   45 00:4009 21 85 6C -  		ld 		hl,EndTestInstance
   46 00:400C CD 53 46 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 51 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 54 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 54 4B -  		call 	SYSPrintChar
   56 00:401C CD 52 4B -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 F5 
              41 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 F5 
              41 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  		
   59 00:4045 -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:4045 00 00 00 00 		.dw 	0,0
   61 00:4049 -  -  -  -  
   62 00:4049 -  -  -  -  ; ***************************************************************************************
   63 00:4049 -  -  -  -  ;
   64 00:4049 -  -  -  -  ;										Run variables
   65 00:4049 -  -  -  -  ;
   66 00:4049 -  -  -  -  ; ***************************************************************************************
   67 00:4049 -  -  -  -  
   68 00:4049 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  		
   71 00:404D -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:404D 00 00 00 00 		.dw 	0,0
   73 00:4051 -  -  -  -  
   74 00:4051 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:4051 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4057 -  -  -  -  
   77 00:4057 -  -  -  -  AConvert: 									; used for address conversions.
   78 00:4057 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:405D -  -  -  -  		
   80 00:405D -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:405D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:406D -  -  -  -  
   83 00:406D -  -  -  -  s; ***************************************************************************************
   84 00:406D -  -  -  -  ;
   85 00:406D -  -  -  -  ;										  Buffers
   86 00:406D -  -  -  -  ;
   87 00:406D -  -  -  -  ; ***************************************************************************************
   88 00:406D -  -  -  -  
   89 00:406D -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 00:406D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 00:407D -  -  -  -  
   92 00:407D -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 00:407D 00 00 -  -  		.dw 	0
   94 00:407F -  -  -  -  
   95 00:407F -  -  -  -  ConvertBuffer: 								; general usage
   96 00:407F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 00:40BF -  -  -  -  
   98 00:40BF -  -  -  -  ; ***************************************************************************************
   99 00:40BF -  -  -  -  ;
  100 00:40BF -  -  -  -  ;									Changes and Updates
  101 00:40BF -  -  -  -  ;
  102 00:40BF -  -  -  -  ; ***************************************************************************************
  103 00:40BF -  -  -  -  ;
  104 00:40BF -  -  -  -  ;		Date			Notes
  105 00:40BF -  -  -  -  ;		==== 			=====
  106 00:40BF -  -  -  -  ;
  107 00:40BF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40BF -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40BF -  -  -  -  ; ***************************************************************************************
    2 00:40BF -  -  -  -  ; ***************************************************************************************
    3 00:40BF -  -  -  -  ;
    4 00:40BF -  -  -  -  ;		Name : 		assert.asm
    5 00:40BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40BF -  -  -  -  ;		Reviewed :	No
    8 00:40BF -  -  -  -  ;		Purpose :	Assert command
    9 00:40BF -  -  -  -  ;
   10 00:40BF -  -  -  -  ; ***************************************************************************************
   11 00:40BF -  -  -  -  ; ***************************************************************************************
   12 00:40BF -  -  -  -  
   13 00:40BF -  -  -  -  ; ***************************************************************************************
   14 00:40BF -  -  -  -  ;
   15 00:40BF -  -  -  -  ;									ASSERT command
   16 00:40BF -  -  -  -  ;
   17 00:40BF -  -  -  -  ; ***************************************************************************************
   18 00:40BF -  -  -  -  
   19 00:40BF -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40BF CD DA 43 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40C2 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40C8 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40C9 3E 01 C3 F5 
              41 -  -  -  		ERR_ASSERT
   24 00:40CE -  -  -  -  
   25 00:40CE -  -  -  -  ; ***************************************************************************************
   26 00:40CE -  -  -  -  ;
   27 00:40CE -  -  -  -  ;									Changes and Updates
   28 00:40CE -  -  -  -  ;
   29 00:40CE -  -  -  -  ; ***************************************************************************************
   30 00:40CE -  -  -  -  ;
   31 00:40CE -  -  -  -  ;		Date			Notes
   32 00:40CE -  -  -  -  ;		==== 			=====
   33 00:40CE -  -  -  -  ;
   34 00:40CE -  -  -  -  ; ***************************************************************************************
   35 00:40CE -  -  -  -  		
Listing for file "_build.asm"
   14 00:40CE -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40CE -  -  -  -  ; ***************************************************************************************
    2 00:40CE -  -  -  -  ; ***************************************************************************************
    3 00:40CE -  -  -  -  ;
    4 00:40CE -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40CE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40CE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40CE -  -  -  -  ;		Reviewed :	No
    8 00:40CE -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40CE -  -  -  -  ;
   10 00:40CE -  -  -  -  ; ***************************************************************************************
   11 00:40CE -  -  -  -  ; ***************************************************************************************
   12 00:40CE -  -  -  -  
   13 00:40CE -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40CE -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40CE -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40CE -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40CE -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40CE -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40CE C3 52 42 -  		jp 		SyntaxError
   20 00:40D1 -  -  -  -  
   21 00:40D1 -  -  -  -  ; ***************************************************************************************
   22 00:40D1 -  -  -  -  ;
   23 00:40D1 -  -  -  -  ;									Changes and Updates
   24 00:40D1 -  -  -  -  ;
   25 00:40D1 -  -  -  -  ; ***************************************************************************************
   26 00:40D1 -  -  -  -  ;
   27 00:40D1 -  -  -  -  ;		Date			Notes
   28 00:40D1 -  -  -  -  ;		==== 			=====
   29 00:40D1 -  -  -  -  ;
   30 00:40D1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40D1 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40D1 -  -  -  -  ; ***************************************************************************************
    2 00:40D1 -  -  -  -  ; ***************************************************************************************
    3 00:40D1 -  -  -  -  ;
    4 00:40D1 -  -  -  -  ;		Name : 		colon.asm
    5 00:40D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D1 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40D1 -  -  -  -  ;		Reviewed :	No
    8 00:40D1 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40D1 -  -  -  -  ;
   10 00:40D1 -  -  -  -  ; ***************************************************************************************
   11 00:40D1 -  -  -  -  ; ***************************************************************************************
   12 00:40D1 -  -  -  -  
   13 00:40D1 -  -  -  -  ; ***************************************************************************************
   14 00:40D1 -  -  -  -  ;
   15 00:40D1 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40D1 -  -  -  -  ;
   17 00:40D1 -  -  -  -  ; ***************************************************************************************
   18 00:40D1 -  -  -  -  
   19 00:40D1 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40D1 C9 -  -  -  		ret
   21 00:40D2 -  -  -  -  
   22 00:40D2 -  -  -  -  ; ***************************************************************************************
   23 00:40D2 -  -  -  -  ;
   24 00:40D2 -  -  -  -  ;									Changes and Updates
   25 00:40D2 -  -  -  -  ;
   26 00:40D2 -  -  -  -  ; ***************************************************************************************
   27 00:40D2 -  -  -  -  ;
   28 00:40D2 -  -  -  -  ;		Date			Notes
   29 00:40D2 -  -  -  -  ;		==== 			=====
   30 00:40D2 -  -  -  -  ;
   31 00:40D2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40D2 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40D2 -  -  -  -  ; ***************************************************************************************
    2 00:40D2 -  -  -  -  ; ***************************************************************************************
    3 00:40D2 -  -  -  -  ;
    4 00:40D2 -  -  -  -  ;		Name : 		end.asm
    5 00:40D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D2 -  -  -  -  ;		Reviewed :	No
    8 00:40D2 -  -  -  -  ;		Purpose :	End command
    9 00:40D2 -  -  -  -  ;
   10 00:40D2 -  -  -  -  ; ***************************************************************************************
   11 00:40D2 -  -  -  -  ; ***************************************************************************************
   12 00:40D2 -  -  -  -  
   13 00:40D2 -  -  -  -  ; ***************************************************************************************
   14 00:40D2 -  -  -  -  ;
   15 00:40D2 -  -  -  -  ;										END command
   16 00:40D2 -  -  -  -  ;
   17 00:40D2 -  -  -  -  ; ***************************************************************************************
   18 00:40D2 -  -  -  -  
   19 00:40D2 -  -  -  -  Command_END: 	;; [end]
   20 00:40D2 3E 00 C3 F5 
              41 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40D7 -  -  -  -  
   22 00:40D7 -  -  -  -  ; ***************************************************************************************
   23 00:40D7 -  -  -  -  ;
   24 00:40D7 -  -  -  -  ;									Changes and Updates
   25 00:40D7 -  -  -  -  ;
   26 00:40D7 -  -  -  -  ; ***************************************************************************************
   27 00:40D7 -  -  -  -  ;
   28 00:40D7 -  -  -  -  ;		Date			Notes
   29 00:40D7 -  -  -  -  ;		==== 			=====
   30 00:40D7 -  -  -  -  ;
   31 00:40D7 -  -  -  -  ; ***************************************************************************************
   32 00:40D7 -  -  -  -  		
Listing for file "_build.asm"
   17 00:40D7 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40D7 -  -  -  -  ; ***************************************************************************************
    2 00:40D7 -  -  -  -  ; ***************************************************************************************
    3 00:40D7 -  -  -  -  ;
    4 00:40D7 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D7 -  -  -  -  ;		Reviewed :	None
    8 00:40D7 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40D7 -  -  -  -  ;
   10 00:40D7 -  -  -  -  ; ***************************************************************************************
   11 00:40D7 -  -  -  -  ; ***************************************************************************************
   12 00:40D7 -  -  -  -  
   13 00:40D7 -  -  -  -  ; ***************************************************************************************
   14 00:40D7 -  -  -  -  ;
   15 00:40D7 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40D7 -  -  -  -  ;
   17 00:40D7 -  -  -  -  ; ***************************************************************************************
   18 00:40D7 -  -  -  -  
   19 00:40D7 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40D7 DD 2A 49 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40DB 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40DE DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40E1 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40E3 -  -  -  -  		;
   25 00:40E3 ED 7B 4D 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40E7 C3 5F 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40EA -  -  -  -  
   28 00:40EA -  -  -  -  ; ***************************************************************************************
   29 00:40EA -  -  -  -  ;
   30 00:40EA -  -  -  -  ;									Changes and Updates
   31 00:40EA -  -  -  -  ;
   32 00:40EA -  -  -  -  ; ***************************************************************************************
   33 00:40EA -  -  -  -  ;
   34 00:40EA -  -  -  -  ;		Date			Notes
   35 00:40EA -  -  -  -  ;		==== 			=====
   36 00:40EA -  -  -  -  ;
   37 00:40EA -  -  -  -  ; ***************************************************************************************
   38 00:40EA -  -  -  -  		
Listing for file "_build.asm"
   18 00:40EA -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:40EA -  -  -  -  ; ***************************************************************************************
    2 00:40EA -  -  -  -  ; ***************************************************************************************
    3 00:40EA -  -  -  -  ;
    4 00:40EA -  -  -  -  ;		Name : 		print.asm
    5 00:40EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EA -  -  -  -  ;		Reviewed :	No
    8 00:40EA -  -  -  -  ;		Purpose :	Print command
    9 00:40EA -  -  -  -  ;
   10 00:40EA -  -  -  -  ; ***************************************************************************************
   11 00:40EA -  -  -  -  ; ***************************************************************************************
   12 00:40EA -  -  -  -  
   13 00:40EA -  -  -  -  ; ***************************************************************************************
   14 00:40EA -  -  -  -  ;
   15 00:40EA -  -  -  -  ;										PRINT command
   16 00:40EA -  -  -  -  ;
   17 00:40EA -  -  -  -  ; ***************************************************************************************
   18 00:40EA -  -  -  -  
   19 00:40EA -  -  -  -  Command_PRINT: 	;; [print]
   20 00:40EA -  -  -  -  		;
   21 00:40EA -  -  -  -  		;		Main loop
   22 00:40EA -  -  -  -  		;
   23 00:40EA -  -  -  -  _CPRLoop:
   24 00:40EA DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:40ED FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:40EF 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:40F1 FE A5 -  -  		cp 		KWD_COLON 	
   28 00:40F3 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:40F5 FE A6 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:40F7 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:40F9 FE A4 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:40FB 28 26 -  -  		jr 		z,_CPRTab
   33 00:40FD FE A7 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:40FF 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:4101 -  -  -  -  		;
   36 00:4101 CD D4 43 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:4104 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:4106 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:4108 -  -  -  -  		;
   40 00:4108 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:410A -  -  -  -  _CPRPrintNumber:
   42 00:410A F5 -  -  -  		push 	af 							; print leading space
   43 00:410B 3E 20 -  -  		ld 		a,' '
   44 00:410D CD 54 4B -  		call 	SYSPrintChar
   45 00:4110 F1 -  -  -  		pop 	af
   46 00:4111 01 7F 40 -  		ld  	bc,ConvertBuffer
   47 00:4114 C5 -  -  -  		push 	bc
   48 00:4115 CD 06 4B -  		call 	Int32ToString 				; convert to string
   49 00:4118 E1 -  -  -  		pop 	hl
   50 00:4119 -  -  -  -  		;
   51 00:4119 -  -  -  -  		; 		Print text at HL.
   52 00:4119 -  -  -  -  		;
   53 00:4119 -  -  -  -  _CPRPrintHL:
   54 00:4119 CD 6C 46 -  		call 	PrintStringAtHL 			; print string out
   55 00:411C 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:411E -  -  -  -  		;
   57 00:411E -  -  -  -  		; 		New line (')
   58 00:411E -  -  -  -  		;
   59 00:411E -  -  -  -  _CPRNewLine:
   60 00:411E CD 70 4B -  		call 	SYSPrintCRLF
   61 00:4121 18 05 -  -  		jr 		_CPRCheckNext
   62 00:4123 -  -  -  -  		;
   63 00:4123 -  -  -  -  		; 		Tab command (,)
   64 00:4123 -  -  -  -  		;
   65 00:4123 -  -  -  -  _CPRTab:
   66 00:4123 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:4125 CD 54 4B -  		call 	SYSPrintChar
   68 00:4128 -  -  -  -  		;
   69 00:4128 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:4128 -  -  -  -  		;
   71 00:4128 -  -  -  -  _CPRCheckNext:
   72 00:4128 DD 23 -  -  		inc 	ix 							; consume current
   73 00:412A DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:412D FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:412F C8 -  -  -  		ret 	z
   76 00:4130 FE A5 -  -  		cp 		KWD_COLON
   77 00:4132 C8 -  -  -  		ret 	z
   78 00:4133 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:4135 -  -  -  -  		;
   80 00:4135 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:4135 -  -  -  -  		;
   82 00:4135 -  -  -  -  _CPRExitNL:
   83 00:4135 CD 70 4B -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:4138 C9 -  -  -  		ret
Listing for file "_build.asm"
   19 00:4139 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4139 -  -  -  -  ; ***************************************************************************************
    2 00:4139 -  -  -  -  ; ***************************************************************************************
    3 00:4139 -  -  -  -  ;
    4 00:4139 -  -  -  -  ;		Name : 		rem.asm
    5 00:4139 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4139 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4139 -  -  -  -  ;		Reviewed :	No
    8 00:4139 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4139 -  -  -  -  ;
   10 00:4139 -  -  -  -  ; ***************************************************************************************
   11 00:4139 -  -  -  -  ; ***************************************************************************************
   12 00:4139 -  -  -  -  
   13 00:4139 -  -  -  -  ; ***************************************************************************************
   14 00:4139 -  -  -  -  ;
   15 00:4139 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4139 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4139 -  -  -  -  ;
   18 00:4139 -  -  -  -  ; ***************************************************************************************
   19 00:4139 -  -  -  -  
   20 00:4139 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4139 -  -  -  -  Command_REM2: 	;; [']
   22 00:4139 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:413C DD 23 -  -  		inc 	ix
   24 00:413E FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:4140 C8 -  -  -  		ret 	z
   26 00:4141 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:4143 C8 -  -  -  		ret 	z
   28 00:4144 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4146 C2 52 42 -  		jp 		nz,SyntaxError
   30 00:4149 -  -  -  -  		;		
   31 00:4149 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:414C DD 5E 00 -  		ld 		e,(ix+0)
   33 00:414F 13 -  -  -  		inc 	de 
   34 00:4150 13 -  -  -  		inc 	de
   35 00:4151 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4153 C9 -  -  -  		ret
   37 00:4154 -  -  -  -  
   38 00:4154 -  -  -  -  ; ***************************************************************************************
   39 00:4154 -  -  -  -  ;
   40 00:4154 -  -  -  -  ;									Changes and Updates
   41 00:4154 -  -  -  -  ;
   42 00:4154 -  -  -  -  ; ***************************************************************************************
   43 00:4154 -  -  -  -  ;
   44 00:4154 -  -  -  -  ;		Date			Notes
   45 00:4154 -  -  -  -  ;		==== 			=====
   46 00:4154 -  -  -  -  ;
   47 00:4154 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:4154 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4154 -  -  -  -  ; ***************************************************************************************
    2 00:4154 -  -  -  -  ; ***************************************************************************************
    3 00:4154 -  -  -  -  ;
    4 00:4154 -  -  -  -  ;		Name : 		run.asm
    5 00:4154 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4154 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4154 -  -  -  -  ;		Reviewed :	No
    8 00:4154 -  -  -  -  ;		Purpose :	Run command
    9 00:4154 -  -  -  -  ;
   10 00:4154 -  -  -  -  ; ***************************************************************************************
   11 00:4154 -  -  -  -  ; ***************************************************************************************
   12 00:4154 -  -  -  -  
   13 00:4154 -  -  -  -  ; ***************************************************************************************
   14 00:4154 -  -  -  -  ;
   15 00:4154 -  -  -  -  ;										RUN command
   16 00:4154 -  -  -  -  ;
   17 00:4154 -  -  -  -  ; ***************************************************************************************
   18 00:4154 -  -  -  -  
   19 00:4154 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4154 CD 23 46 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4157 -  -  -  -  
   22 00:4157 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:415B ED 73 4D 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:415F -  -  -  -  		;
   25 00:415F -  -  -  -  		; 		New line at IX.
   26 00:415F -  -  -  -  		;
   27 00:415F -  -  -  -  CRNewLine:
   28 00:415F DD 22 49 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:4163 -  -  -  -  		;
   30 00:4163 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:4166 B7 -  -  -  		or 		a
   32 00:4167 CA D2 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:416A -  -  -  -  		;
   34 00:416A DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:416C DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:416E DD 23 -  -  		inc 	ix
   37 00:4170 -  -  -  -  		;
   38 00:4170 -  -  -  -  		; 		New command at IX
   39 00:4170 -  -  -  -  		;
   40 00:4170 -  -  -  -  _CRNewCommand:	
   41 00:4170 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:4173 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:4174 F2 A4 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:4177 -  -  -  -  		;
   45 00:4177 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:4179 30 05 -  -  		jr  	nc,_CRDoCommand
   47 00:417B FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:417D D2 99 41 -  		jp 		nc,_CRAlternateLets
   49 00:4180 -  -  -  -  		;
   50 00:4180 -  -  -  -  _CRDoCommand:		
   51 00:4180 E6 7F 21 00 
              00 6F 29 11 
              DE 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:4192 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:4194 CD 51 40 -  		call 	JumpCode 					; call the routine.
   54 00:4197 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:4199 -  -  -  -  		;
   56 00:4199 -  -  -  -  		; 		Do CALL (HL)
   57 00:4199 -  -  -  -  		;
   58 00:4199 -  -  -  -  		;
   59 00:4199 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:4199 -  -  -  -  		;		
   61 00:4199 -  -  -  -  _CRAlternateLets:		
   62 00:4199 FE 83 -  -  		cp 		KWD_PLING
   63 00:419B 28 0C -  -  		jr 		z,_CRAssignmentLet
   64 00:419D FE 84 -  -  		cp 		KWD_QMARK
   65 00:419F 28 08 -  -  		jr 		z,_CRAssignmentLet
   66 00:41A1 C3 52 42 -  		jp 		SyntaxError
   67 00:41A4 -  -  -  -  		;
   68 00:41A4 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:41A4 -  -  -  -  		;
   70 00:41A4 -  -  -  -  _CRAssignmentHandler:		
   71 00:41A4 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:41A6 D2 52 42 -  		jp 		nc,SyntaxError
   73 00:41A9 -  -  -  -  _CRAssignmentLet:		
   74 00:41A9 3E 0E C3 F5 
              41 -  -  -  		ERR_TODO
   75 00:41AE -  -  -  -  		;call	Command_LET
   76 00:41AE C3 70 41 -  		jp 		_CRNewCommand
   77 00:41B1 -  -  -  -  
   78 00:41B1 -  -  -  -  ; ***************************************************************************************
   79 00:41B1 -  -  -  -  ;
   80 00:41B1 -  -  -  -  ;									Changes and Updates
   81 00:41B1 -  -  -  -  ;
   82 00:41B1 -  -  -  -  ; ***************************************************************************************
   83 00:41B1 -  -  -  -  ;
   84 00:41B1 -  -  -  -  ;		Date			Notes
   85 00:41B1 -  -  -  -  ;		==== 			=====
   86 00:41B1 -  -  -  -  ;
   87 00:41B1 -  -  -  -  ; ***************************************************************************************
   88 00:41B1 -  -  -  -  		
Listing for file "_build.asm"
   21 00:41B1 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:41B1 -  -  -  -  ; ***************************************************************************************
    2 00:41B1 -  -  -  -  ; ***************************************************************************************
    3 00:41B1 -  -  -  -  ;
    4 00:41B1 -  -  -  -  ;		Name : 		stop.asm
    5 00:41B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41B1 -  -  -  -  ;		Reviewed :	No
    8 00:41B1 -  -  -  -  ;		Purpose :	Stop command
    9 00:41B1 -  -  -  -  ;
   10 00:41B1 -  -  -  -  ; ***************************************************************************************
   11 00:41B1 -  -  -  -  ; ***************************************************************************************
   12 00:41B1 -  -  -  -  
   13 00:41B1 -  -  -  -  ; ***************************************************************************************
   14 00:41B1 -  -  -  -  ;
   15 00:41B1 -  -  -  -  ;										STOP command
   16 00:41B1 -  -  -  -  ;
   17 00:41B1 -  -  -  -  ; ***************************************************************************************
   18 00:41B1 -  -  -  -  
   19 00:41B1 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:41B1 3E 0C C3 F5 
              41 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:41B6 -  -  -  -  
   22 00:41B6 -  -  -  -  ; ***************************************************************************************
   23 00:41B6 -  -  -  -  ;
   24 00:41B6 -  -  -  -  ;									Changes and Updates
   25 00:41B6 -  -  -  -  ;
   26 00:41B6 -  -  -  -  ; ***************************************************************************************
   27 00:41B6 -  -  -  -  ;
   28 00:41B6 -  -  -  -  ;		Date			Notes
   29 00:41B6 -  -  -  -  ;		==== 			=====
   30 00:41B6 -  -  -  -  ;
   31 00:41B6 -  -  -  -  ; ***************************************************************************************
   32 00:41B6 -  -  -  -  		
Listing for file "_build.asm"
   22 00:41B6 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:41B6 -  -  -  -  ; ***************************************************************************************
    2 00:41B6 -  -  -  -  ; ***************************************************************************************
    3 00:41B6 -  -  -  -  ;
    4 00:41B6 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:41B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41B6 -  -  -  -  ;		Reviewed :	No
    8 00:41B6 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:41B6 -  -  -  -  ;
   10 00:41B6 -  -  -  -  ; ***************************************************************************************
   11 00:41B6 -  -  -  -  ; ***************************************************************************************
   12 00:41B6 -  -  -  -  
   13 00:41B6 -  -  -  -  ; ***************************************************************************************
   14 00:41B6 -  -  -  -  ;
   15 00:41B6 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:41B6 -  -  -  -  ;
   17 00:41B6 -  -  -  -  ; ***************************************************************************************
   18 00:41B6 -  -  -  -  
   19 00:41B6 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:41B6             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:41B6             		inc 	ix
   22 00:41B6             		cp 		ch 							; exit if matches
   23 00:41B6             		ret 	z
   24 00:41B6             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:41B6             		jp 		ErrorHandler
   26 00:41B6             #endmacro
   27 00:41B6 -  -  -  -  
   28 00:41B6 -  -  -  -  CheckLeftBracket:
   29 00:41B6 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 F5 
              41 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:41C3 -  -  -  -  
   31 00:41C3 -  -  -  -  CheckRightBracket:
   32 00:41C3 DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 F5 
              41 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:41D0 -  -  -  -  
   34 00:41D0 -  -  -  -  CheckDollar:
   35 00:41D0 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 F5 
              41 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:41DD -  -  -  -  		
   37 00:41DD -  -  -  -  CheckComma:
   38 00:41DD DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 F5 
              41 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:41EA -  -  -  -  
   40 00:41EA -  -  -  -  ; ***************************************************************************************
   41 00:41EA -  -  -  -  ;
   42 00:41EA -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:41EA -  -  -  -  ;
   44 00:41EA -  -  -  -  ; ***************************************************************************************
   45 00:41EA -  -  -  -  
   46 00:41EA -  -  -  -  CheckNextA:
   47 00:41EA DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:41ED DD 23 -  -  		inc 	ix 							; skip character
   49 00:41EF C8 -  -  -  		ret 	z 							; yes, okay
   50 00:41F0 3E 0D C3 F5 
              41 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:41F5 -  -  -  -  		
   52 00:41F5 -  -  -  -  ; ***************************************************************************************
   53 00:41F5 -  -  -  -  ;
   54 00:41F5 -  -  -  -  ;									Changes and Updates
   55 00:41F5 -  -  -  -  ;
   56 00:41F5 -  -  -  -  ; ***************************************************************************************
   57 00:41F5 -  -  -  -  ;
   58 00:41F5 -  -  -  -  ;		Date			Notes
   59 00:41F5 -  -  -  -  ;		==== 			=====
   60 00:41F5 -  -  -  -  ;
   61 00:41F5 -  -  -  -  ; ***************************************************************************************
   62 00:41F5 -  -  -  -  		
Listing for file "_build.asm"
   23 00:41F5 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:41F5 -  -  -  -  ; ***************************************************************************************
    2 00:41F5 -  -  -  -  ; ***************************************************************************************
    3 00:41F5 -  -  -  -  ;
    4 00:41F5 -  -  -  -  ;		Name : 		errors.asm
    5 00:41F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41F5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41F5 -  -  -  -  ;		Reviewed :	No
    8 00:41F5 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:41F5 -  -  -  -  ;
   10 00:41F5 -  -  -  -  ; ***************************************************************************************
   11 00:41F5 -  -  -  -  ; ***************************************************************************************
   12 00:41F5 -  -  -  -  
   13 00:41F5 -  -  -  -  ; ***************************************************************************************
   14 00:41F5 -  -  -  -  ;
   15 00:41F5 -  -  -  -  ;								Error handler, message A 
   16 00:41F5 -  -  -  -  ;
   17 00:41F5 -  -  -  -  ; ***************************************************************************************
   18 00:41F5 -  -  -  -  
   19 00:41F5 -  -  -  -  ErrorHandler:
   20 00:41F5 F5 -  -  -  		push 	af 						; save error ID
   21 00:41F6 -  -  -  -  
   22 00:41F6 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:41F9 6F -  -  -  		ld 		l,a
   24 00:41FA 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:41FB 29 -  -  -  		add 	hl,hl 		
   26 00:41FC 11 B1 47 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:41FF 19 -  -  -  		add 	hl,de
   28 00:4200 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4204 CD 6C 46 -  		call 	PrintStringAtHL
   30 00:4207 -  -  -  -  		;
   31 00:4207 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4208 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4209 28 28 -  -  		jr 		z,_EHExit
   34 00:420B -  -  -  -  		;
   35 00:420B DD 2A 49 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:420F DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4212 B7 -  -  -  		or 		a
   38 00:4213 28 1E -  -  		jr 		z,_EHExit
   39 00:4215 -  -  -  -  
   40 00:4215 21 39 42 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4218 CD 6C 46 -  		call 	PrintStringAtHL 
   42 00:421B -  -  -  -  		
   43 00:421B D9 -  -  -  		exx								; HL'HL = line number
   44 00:421C 21 00 00 -  		ld 		hl,$0000 		
   45 00:421F D9 -  -  -  		exx 
   46 00:4220 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4223 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4226 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4228 01 7F 40 -  		ld 		bc,ConvertBuffer
   50 00:422B CD 06 4B -  		call 	Int32ToString
   51 00:422E C5 -  -  -  		push 	bc
   52 00:422F E1 -  -  -  		pop 	hl
   53 00:4230 CD 6C 46 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4233 -  -  -  -  _EHExit:		
   55 00:4233 CD 70 4B -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4236 C3 17 40 -  		jp 		WarmStart
   57 00:4239 -  -  -  -  
   58 00:4239 -  -  -  -  _EHAtText:
   59 00:4239 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4243 -  -  -  -  
   61 00:4243 -  -  -  -  NotImplemented:
   62 00:4243 3E 04 C3 F5 
              41 -  -  -  		ERR_DISABLED
   63 00:4248 -  -  -  -  TypeMismatch:
   64 00:4248 3E 02 C3 F5 
              41 -  -  -  		ERR_BADTYPE
   65 00:424D -  -  -  -  BadValue:
   66 00:424D 3E 03 C3 F5 
              41 -  -  -  		ERR_BADVALUE
   67 00:4252 -  -  -  -  SyntaxError:
   68 00:4252 3E 0D C3 F5 
              41 -  -  -  		ERR_SYNTAX
   69 00:4257 -  -  -  -  						
   70 00:4257 -  -  -  -  ; ***************************************************************************************
   71 00:4257 -  -  -  -  ;
   72 00:4257 -  -  -  -  ;									Changes and Updates
   73 00:4257 -  -  -  -  ;
   74 00:4257 -  -  -  -  ; ***************************************************************************************
   75 00:4257 -  -  -  -  ;
   76 00:4257 -  -  -  -  ;		Date			Notes
   77 00:4257 -  -  -  -  ;		==== 			=====
   78 00:4257 -  -  -  -  ;
   79 00:4257 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:4257 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4257 -  -  -  -  ; ***************************************************************************************
    2 00:4257 -  -  -  -  ; ***************************************************************************************
    3 00:4257 -  -  -  -  ;
    4 00:4257 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4257 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4257 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4257 -  -  -  -  ;		Reviewed :	No
    8 00:4257 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4257 -  -  -  -  ;
   10 00:4257 -  -  -  -  ; ***************************************************************************************
   11 00:4257 -  -  -  -  ; ***************************************************************************************
   12 00:4257 -  -  -  -  
   13 00:4257 -  -  -  -  ; ***************************************************************************************
   14 00:4257 -  -  -  -  ;
   15 00:4257 -  -  -  -  ; 									Addition
   16 00:4257 -  -  -  -  ;
   17 00:4257 -  -  -  -  ; ***************************************************************************************
   18 00:4257 -  -  -  -  
   19 00:4257 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4257 CD 4A 43 78 
              B1 C2 48 42 
              C3 93 4A -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4262 -  -  -  -  
   22 00:4262 -  -  -  -  ; ***************************************************************************************
   23 00:4262 -  -  -  -  ;
   24 00:4262 -  -  -  -  ; 									Subtraction
   25 00:4262 -  -  -  -  ;
   26 00:4262 -  -  -  -  ; ***************************************************************************************
   27 00:4262 -  -  -  -  
   28 00:4262 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4262 CD 4A 43 78 
              B1 C2 48 42 
              C3 99 4A -  		IntegerDispatch(Int32Subtract)
   30 00:426D -  -  -  -  
   31 00:426D -  -  -  -  ; ***************************************************************************************
   32 00:426D -  -  -  -  ;
   33 00:426D -  -  -  -  ; 									  Multiply
   34 00:426D -  -  -  -  ;
   35 00:426D -  -  -  -  ; ***************************************************************************************
   36 00:426D -  -  -  -  
   37 00:426D -  -  -  -  ALUMultiply: 	;; [*]
   38 00:426D CD 4A 43 78 
              B1 C2 48 42 
              C3 5D 4A -  		IntegerDispatch(Int32Multiply)
   39 00:4278 -  -  -  -  
   40 00:4278 -  -  -  -  ; ***************************************************************************************
   41 00:4278 -  -  -  -  ;
   42 00:4278 -  -  -  -  ; 									  Divide
   43 00:4278 -  -  -  -  ;
   44 00:4278 -  -  -  -  ; ***************************************************************************************
   45 00:4278 -  -  -  -  
   46 00:4278 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4278 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4278 CD 4A 43 78 
              B1 C2 48 42 
              C3 6E 49 -  		IntegerDispatch(Int32SDivide)
   49 00:4283 -  -  -  -  
   50 00:4283 -  -  -  -  ; ***************************************************************************************
   51 00:4283 -  -  -  -  ;
   52 00:4283 -  -  -  -  ; 									  Modulus
   53 00:4283 -  -  -  -  ;
   54 00:4283 -  -  -  -  ; ***************************************************************************************
   55 00:4283 -  -  -  -  
   56 00:4283 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4283 CD 4A 43 78 
              B1 C2 48 42 
              C3 71 49 -  		IntegerDispatch(Int32Modulus)
   58 00:428E -  -  -  -  
   59 00:428E -  -  -  -  ; ***************************************************************************************
   60 00:428E -  -  -  -  ;
   61 00:428E -  -  -  -  ; 									  Logical
   62 00:428E -  -  -  -  ;
   63 00:428E -  -  -  -  ; ***************************************************************************************
   64 00:428E -  -  -  -  
   65 00:428E -  -  -  -  ALUAnd: 		;; [and]
   66 00:428E CD 4A 43 78 
              B1 C2 48 42 
              C3 A1 4A -  		IntegerDispatch(Int32And)
   67 00:4299 -  -  -  -  
   68 00:4299 -  -  -  -  ALUOr: 			;; [or]
   69 00:4299 CD 4A 43 78 
              B1 C2 48 42 
              C3 AD 4A -  		IntegerDispatch(Int32Or)
   70 00:42A4 -  -  -  -  
   71 00:42A4 -  -  -  -  ALUXor: 		;; [eor]
   72 00:42A4 CD 4A 43 78 
              B1 C2 48 42 
              C3 B9 4A -  		IntegerDispatch(Int32Xor)
   73 00:42AF -  -  -  -  
   74 00:42AF -  -  -  -  ; ***************************************************************************************
   75 00:42AF -  -  -  -  ;
   76 00:42AF -  -  -  -  ;									Changes and Updates
   77 00:42AF -  -  -  -  ;
   78 00:42AF -  -  -  -  ; ***************************************************************************************
   79 00:42AF -  -  -  -  ;
   80 00:42AF -  -  -  -  ;		Date			Notes
   81 00:42AF -  -  -  -  ;		==== 			=====
   82 00:42AF -  -  -  -  ;
   83 00:42AF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:42AF -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:42AF -  -  -  -  ; ***************************************************************************************
    2 00:42AF -  -  -  -  ; ***************************************************************************************
    3 00:42AF -  -  -  -  ;
    4 00:42AF -  -  -  -  ;		Name : 		binrefs.asm
    5 00:42AF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42AF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42AF -  -  -  -  ;		Reviewed :	No
    8 00:42AF -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:42AF -  -  -  -  ;
   10 00:42AF -  -  -  -  ; ***************************************************************************************
   11 00:42AF -  -  -  -  ; ***************************************************************************************
   12 00:42AF -  -  -  -  
   13 00:42AF -  -  -  -  ; ***************************************************************************************
   14 00:42AF -  -  -  -  ;
   15 00:42AF -  -  -  -  ; 									<l> <op> <r>
   16 00:42AF -  -  -  -  ;
   17 00:42AF -  -  -  -  ; ***************************************************************************************
   18 00:42AF -  -  -  -  
   19 00:42AF -  -  -  -  ALULongReference:			;; [!]
   20 00:42AF CD BD 42 -  		call 	BRGetAddress 				; calculate address
   21 00:42B2 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:42B4 CB F9 -  -  		set 	CIsReference,c
   23 00:42B6 C9 -  -  -  		ret
   24 00:42B7 -  -  -  -  
   25 00:42B7 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:42B7 CD AF 42 -  		call 	ALULongReference
   27 00:42BA CB F1 -  -  		set 	CIsByteReference,c
   28 00:42BC C9 -  -  -  		ret
   29 00:42BD -  -  -  -  
   30 00:42BD -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:42BD CD 4A 43 78 
              B1 C2 48 42 
              C3 C8 42 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:42C8 -  -  -  -  _BRGAMain:		
   33 00:42C8 CD 93 4A -  		call 	Int32Add 					; address in HL'HL
   34 00:42CB CD 33 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:42CE C9 -  -  -  		ret
   36 00:42CF -  -  -  -  
   37 00:42CF -  -  -  -  ; ***************************************************************************************
   38 00:42CF -  -  -  -  ;
   39 00:42CF -  -  -  -  ;									Changes and Updates
   40 00:42CF -  -  -  -  ;
   41 00:42CF -  -  -  -  ; ***************************************************************************************
   42 00:42CF -  -  -  -  ;
   43 00:42CF -  -  -  -  ;		Date			Notes
   44 00:42CF -  -  -  -  ;		==== 			=====
   45 00:42CF -  -  -  -  ;
   46 00:42CF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42CF -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:42CF -  -  -  -  ; ***************************************************************************************
    2 00:42CF -  -  -  -  ; ***************************************************************************************
    3 00:42CF -  -  -  -  ;
    4 00:42CF -  -  -  -  ;		Name : 		compare.asm
    5 00:42CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CF -  -  -  -  ;		Reviewed :	No
    8 00:42CF -  -  -  -  ;		Purpose :	Comparison code
    9 00:42CF -  -  -  -  ;
   10 00:42CF -  -  -  -  ; ***************************************************************************************
   11 00:42CF -  -  -  -  ; ***************************************************************************************
   12 00:42CF -  -  -  -  
   13 00:42CF -  -  -  -  #macro compare_equals(n)
   14 00:42CF             		call 	CompareBaseCode
   15 00:42CF             		cp 		n
   16 00:42CF             		jr 		z,UnaryInt32True
   17 00:42CF             		jr 		UnaryInt32False
   18 00:42CF             #endmacro
   19 00:42CF -  -  -  -  
   20 00:42CF -  -  -  -  #macro compare_not_equals(n)
   21 00:42CF             		call 	CompareBaseCode
   22 00:42CF             		cp 		n
   23 00:42CF             		jr 		nz,UnaryInt32True
   24 00:42CF             		jr 		UnaryInt32False
   25 00:42CF             #endmacro
   26 00:42CF -  -  -  -  
   27 00:42CF -  -  -  -  ; ***************************************************************************************
   28 00:42CF -  -  -  -  ;
   29 00:42CF -  -  -  -  ; 								Return True/False
   30 00:42CF -  -  -  -  ;
   31 00:42CF -  -  -  -  ; ***************************************************************************************
   32 00:42CF -  -  -  -  
   33 00:42CF -  -  -  -  UnaryInt32True:	
   34 00:42CF 3E FF -  -  		ld 		a,255
   35 00:42D1 18 01 -  -  		jr 		_Int32Logical
   36 00:42D3 -  -  -  -  UnaryInt32False: 
   37 00:42D3 AF -  -  -  		xor 	a
   38 00:42D4 -  -  -  -  _Int32Logical:
   39 00:42D4 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:42D5 67 -  -  -  		ld 		h,a
   41 00:42D6 D9 -  -  -  		exx
   42 00:42D7 6F -  -  -  		ld 		l,a
   43 00:42D8 67 -  -  -  		ld 		h,a
   44 00:42D9 D9 -  -  -  		exx
   45 00:42DA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:42DC C9 -  -  -  		ret
   47 00:42DD -  -  -  -  
   48 00:42DD -  -  -  -  ; ***************************************************************************************
   49 00:42DD -  -  -  -  ;
   50 00:42DD -  -  -  -  ; 										> = < (compare == value)
   51 00:42DD -  -  -  -  ;
   52 00:42DD -  -  -  -  ; ***************************************************************************************
   53 00:42DD -  -  -  -  
   54 00:42DD -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:42DD CD 13 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:42E6 -  -  -  -  
   57 00:42E6 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:42E6 CD 13 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:42EF -  -  -  -  
   60 00:42EF -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:42EF CD 13 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:42F8 -  -  -  -  
   63 00:42F8 -  -  -  -  ; ***************************************************************************************
   64 00:42F8 -  -  -  -  ;
   65 00:42F8 -  -  -  -  ; 										> = < (compare <> value)
   66 00:42F8 -  -  -  -  ;
   67 00:42F8 -  -  -  -  ; ***************************************************************************************
   68 00:42F8 -  -  -  -  
   69 00:42F8 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:42F8 CD 13 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4301 -  -  -  -  
   72 00:4301 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4301 CD 13 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:430A -  -  -  -  
   75 00:430A -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:430A CD 13 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4313 -  -  -  -  
   78 00:4313 -  -  -  -  ; ***************************************************************************************
   79 00:4313 -  -  -  -  ;
   80 00:4313 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4313 -  -  -  -  ;
   82 00:4313 -  -  -  -  ; ***************************************************************************************
   83 00:4313 -  -  -  -  
   84 00:4313 -  -  -  -  CompareBaseCode:
   85 00:4313 CD 4A 43 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4316 -  -  -  -  
   87 00:4316 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4317 A1 -  -  -  		and 	c
   89 00:4318 CB 47 -  -  		bit 	CIsString,a 
   90 00:431A C2 29 43 -  		jp 		nz,StringCompare
   91 00:431D -  -  -  -  
   92 00:431D 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:431E B1 -  -  -  		or 		c
   94 00:431F CB 47 -  -  		bit 	CIsString,a 
   95 00:4321 CA CC 4A -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4324 -  -  -  -  
   97 00:4324 3E 02 C3 F5 
              41 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4329 -  -  -  -  ;
   99 00:4329 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4329 -  -  -  -  ;
  101 00:4329 -  -  -  -  StringCompare:
  102 00:4329 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:432A BE -  -  -  		cp 		(hl)
  104 00:432B 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:432D 20 08 -  -  		jr 		nz,_SCLess
  106 00:432F 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4330 23 -  -  -  		inc 	hl
  108 00:4331 FE 20 -  -  		cp 		' '
  109 00:4333 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4335 AF -  -  -  		xor 	a 							; return 0.
  111 00:4336 C9 -  -  -  		ret
  112 00:4337 -  -  -  -  
  113 00:4337 -  -  -  -  _SCLess:
  114 00:4337 3E FF -  -  		ld 		a,$FF
  115 00:4339 C9 -  -  -  		ret
  116 00:433A -  -  -  -  _SCGreater:
  117 00:433A 3E 01 -  -  		ld 		a,1
  118 00:433C C9 -  -  -  		ret
  119 00:433D -  -  -  -  
  120 00:433D 3E 0E C3 F5 
              41 -  -  -  		ERR_TODO()
  121 00:4342 -  -  -  -  
  122 00:4342 -  -  -  -  ; ***************************************************************************************
  123 00:4342 -  -  -  -  ;
  124 00:4342 -  -  -  -  ;									Changes and Updates
  125 00:4342 -  -  -  -  ;
  126 00:4342 -  -  -  -  ; ***************************************************************************************
  127 00:4342 -  -  -  -  ;
  128 00:4342 -  -  -  -  ;		Date			Notes
  129 00:4342 -  -  -  -  ;		==== 			=====
  130 00:4342 -  -  -  -  ;
  131 00:4342 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:4342 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:4342 -  -  -  -  ; ***************************************************************************************
    2 00:4342 -  -  -  -  ; ***************************************************************************************
    3 00:4342 -  -  -  -  ;
    4 00:4342 -  -  -  -  ;		Name : 		utility.asm
    5 00:4342 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4342 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4342 -  -  -  -  ;		Reviewed :	No
    8 00:4342 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:4342 -  -  -  -  ;
   10 00:4342 -  -  -  -  ; ***************************************************************************************
   11 00:4342 -  -  -  -  ; ***************************************************************************************
   12 00:4342 -  -  -  -  
   13 00:4342 -  -  -  -  ; ***************************************************************************************
   14 00:4342 -  -  -  -  ;
   15 00:4342 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:4342 -  -  -  -  ;
   17 00:4342 -  -  -  -  ; ***************************************************************************************
   18 00:4342 -  -  -  -  
   19 00:4342 -  -  -  -  SwapHLDE:
   20 00:4342 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4343 D9 -  -  -  			exx
   22 00:4344 EB -  -  -  			ex 		de,hl
   23 00:4345 D9 -  -  -  			exx
   24 00:4346 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4347 41 -  -  -  			ld 		b,c
   26 00:4348 4F -  -  -  			ld 		c,a
   27 00:4349 C9 -  -  -  			ret
   28 00:434A -  -  -  -  
   29 00:434A -  -  -  -  ; ***************************************************************************************
   30 00:434A -  -  -  -  ;
   31 00:434A -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:434A -  -  -  -  ;
   33 00:434A -  -  -  -  ; ***************************************************************************************
   34 00:434A -  -  -  -  
   35 00:434A -  -  -  -  DereferenceBoth:
   36 00:434A CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:434C C4 05 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:434F CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:4351 C8 -  -  -  			ret 	z
   40 00:4352 CD 42 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:4355 CD 05 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4358 CD 42 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:435B C9 -  -  -  			ret
   44 00:435C -  -  -  -  
   45 00:435C -  -  -  -  ; ***************************************************************************************
   46 00:435C -  -  -  -  ;
   47 00:435C -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:435C -  -  -  -  ;
   49 00:435C -  -  -  -  ; ***************************************************************************************
   50 00:435C -  -  -  -  
   51 00:435C -  -  -  -  NegateHLHL:	
   52 00:435C CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:435E C2 48 42 -  			jp 		nz,TypeMismatch
   54 00:4361 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4363 C4 05 44 -  			call 	nz,Dereference 			; if required.
   56 00:4366 CD F3 4A -  			call 	Int32Negate
   57 00:4369 C9 -  -  -  			ret
Listing for file "_build.asm"
   28 00:436A -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:436A -  -  -  -  ; ***************************************************************************************
    2 00:436A -  -  -  -  ; ***************************************************************************************
    3 00:436A -  -  -  -  ;
    4 00:436A -  -  -  -  ;		Name : 		expression.asm
    5 00:436A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:436A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:436A -  -  -  -  ;		Reviewed :	None
    8 00:436A -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:436A -  -  -  -  ;
   10 00:436A -  -  -  -  ; ***************************************************************************************
   11 00:436A -  -  -  -  ; ***************************************************************************************
   12 00:436A -  -  -  -  
   13 00:436A -  -  -  -  ; ***************************************************************************************
   14 00:436A -  -  -  -  ;
   15 00:436A -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:436A -  -  -  -  ;
   17 00:436A -  -  -  -  ; ***************************************************************************************
   18 00:436A -  -  -  -  
   19 00:436A -  -  -  -  EvaluateAtPrecedence0:
   20 00:436A AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:436B -  -  -  -  EvaluateAtPrecedence:
   22 00:436B F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:436C -  -  -  -  		;
   24 00:436C -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:436C -  -  -  -  		;
   26 00:436C CD 35 44 -  		call 	EvaluateTerm 				; get term
   27 00:436F -  -  -  -  		;
   28 00:436F -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:436F -  -  -  -  		;
   30 00:436F D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4370 -  -  -  -  _EAPLoop:
   32 00:4370 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4373 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:4375 D8 -  -  -  		ret 	c
   35 00:4376 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4378 D0 -  -  -  		ret 	nc
   37 00:4379 -  -  -  -  		;
   38 00:4379 -  -  -  -  		; 		Get the precedence.
   39 00:4379 -  -  -  -  		;
   40 00:4379 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:437A D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:437C 21 A0 47 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:437F B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4380 6F -  -  -  		ld 		l,a
   45 00:4381 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4382 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4383 -  -  -  -  		;
   48 00:4383 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4383 -  -  -  -  		;
   50 00:4383 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4384 BB -  -  -  		cp 		e
   52 00:4385 D0 -  -  -  		ret 	nc
   53 00:4386 -  -  -  -  
   54 00:4386 -  -  -  -  		;
   55 00:4386 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4386 -  -  -  -  		;
   57 00:4386 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4387 -  -  -  -  		;
   59 00:4387 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:438A F5 -  -  -  		push 	af
   61 00:438B -  -  -  -  		;
   62 00:438B C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:438C D9 -  -  -  		exx 								; save HL'
   64 00:438D E5 -  -  -  		push 	hl
   65 00:438E D9 -  -  -  		exx 								
   66 00:438F E5 -  -  -  		push 	hl 							; save HL
   67 00:4390 -  -  -  -  		;
   68 00:4390 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4392 -  -  -  -  		;
   70 00:4392 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4392 -  -  -  -  		;
   72 00:4392 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4393 CD 6B 43 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4396 -  -  -  -  		;
   75 00:4396 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4396 -  -  -  -  		;
   77 00:4396 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4397 -  -  -  -  
   79 00:4397 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4398 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4399 D9 -  -  -  		exx
   82 00:439A EB -  -  -  		ex 		de,hl
   83 00:439B E1 -  -  -  		pop 	hl
   84 00:439C D9 -  -  -  		exx
   85 00:439D C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:439E 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:439F -  -  -  -  		;
   88 00:439F -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:439F -  -  -  -  		; 		is in B (type) DE'DE
   90 00:439F -  -  -  -  		;
   91 00:439F F1 -  -  -  		pop 	af 							; get operator in A
   92 00:43A0 -  -  -  -  		;
   93 00:43A0 -  -  -  -  		; 		Call the binary operator in A.
   94 00:43A0 -  -  -  -  		;
   95 00:43A0 D5 -  -  -  		push 	de
   96 00:43A1 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:43A2 E6 7F 21 00 
              00 6F 29 11 
              DE 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:43B4 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:43B5 D1 -  -  -  		pop 	de 							; restore DE
  100 00:43B6 CD 51 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:43B9 -  -  -  -  		;
  102 00:43B9 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:43BA -  -  -  -  		;
  104 00:43BA 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:43BC -  -  -  -  
  106 00:43BC -  -  -  -  ; ***************************************************************************************
  107 00:43BC -  -  -  -  ;
  108 00:43BC -  -  -  -  ;									Changes and Updates
  109 00:43BC -  -  -  -  ;
  110 00:43BC -  -  -  -  ; ***************************************************************************************
  111 00:43BC -  -  -  -  ;
  112 00:43BC -  -  -  -  ;		Date			Notes
  113 00:43BC -  -  -  -  ;		==== 			=====
  114 00:43BC -  -  -  -  ;
  115 00:43BC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:43BC -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:43BC -  -  -  -  ; ***************************************************************************************
    2 00:43BC -  -  -  -  ; ***************************************************************************************
    3 00:43BC -  -  -  -  ;
    4 00:43BC -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:43BC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43BC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43BC -  -  -  -  ;		Reviewed :	No
    8 00:43BC -  -  -  -  ;		Purpose :	Expression support functions
    9 00:43BC -  -  -  -  ;
   10 00:43BC -  -  -  -  ; ***************************************************************************************
   11 00:43BC -  -  -  -  ; ***************************************************************************************
   12 00:43BC -  -  -  -  
   13 00:43BC -  -  -  -  ; ***************************************************************************************
   14 00:43BC -  -  -  -  ;
   15 00:43BC -  -  -  -  ; 								Evaluate an integer term
   16 00:43BC -  -  -  -  ;
   17 00:43BC -  -  -  -  ; ***************************************************************************************
   18 00:43BC -  -  -  -  
   19 00:43BC -  -  -  -  EvaluateIntegerTerm:
   20 00:43BC CD 35 44 -  		call 	EvaluateTerm
   21 00:43BF CD 05 44 -  		call 	DeReference
   22 00:43C2 CB 41 -  -  		bit 	CIsString,c
   23 00:43C4 C8 -  -  -  		ret 	z
   24 00:43C5 C3 48 42 -  		jp 		TypeMismatch
   25 00:43C8 -  -  -  -  
   26 00:43C8 -  -  -  -  ; ***************************************************************************************
   27 00:43C8 -  -  -  -  ;
   28 00:43C8 -  -  -  -  ; 								Evaluate a string term
   29 00:43C8 -  -  -  -  ;
   30 00:43C8 -  -  -  -  ; ***************************************************************************************
   31 00:43C8 -  -  -  -  
   32 00:43C8 -  -  -  -  EvaluateStringTerm:
   33 00:43C8 CD 35 44 -  		call 	EvaluateTerm
   34 00:43CB CD 05 44 -  		call 	DeReference
   35 00:43CE CB 41 -  -  		bit 	CIsString,c
   36 00:43D0 C0 -  -  -  		ret 	nz
   37 00:43D1 C3 48 42 -  		jp 		TypeMismatch
   38 00:43D4 -  -  -  -  
   39 00:43D4 -  -  -  -  ; ***************************************************************************************
   40 00:43D4 -  -  -  -  ;
   41 00:43D4 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:43D4 -  -  -  -  ;
   43 00:43D4 -  -  -  -  ; ***************************************************************************************
   44 00:43D4 -  -  -  -  
   45 00:43D4 -  -  -  -  EvaluateValue:
   46 00:43D4 CD 6A 43 -  		call 	EvaluateAtPrecedence0
   47 00:43D7 C3 05 44 -  		jp 		Dereference
   48 00:43DA -  -  -  -  
   49 00:43DA -  -  -  -  ; ***************************************************************************************
   50 00:43DA -  -  -  -  ;
   51 00:43DA -  -  -  -  ; 									Evaluate a number
   52 00:43DA -  -  -  -  ;
   53 00:43DA -  -  -  -  ; ***************************************************************************************
   54 00:43DA -  -  -  -  
   55 00:43DA -  -  -  -  EvaluateInteger:
   56 00:43DA CD D4 43 -  		call 	EvaluateValue
   57 00:43DD CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:43DF C8 -  -  -  		ret 	z
   59 00:43E0 C3 48 42 -  		jp 		TypeMismatch
   60 00:43E3 -  -  -  -  
   61 00:43E3 -  -  -  -  ; ***************************************************************************************
   62 00:43E3 -  -  -  -  ;
   63 00:43E3 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:43E3 -  -  -  -  ;
   65 00:43E3 -  -  -  -  ; ***************************************************************************************
   66 00:43E3 -  -  -  -  
   67 00:43E3 -  -  -  -  Evaluate8BitInteger:
   68 00:43E3 CD DA 43 -  		call 	EvaluateInteger
   69 00:43E6 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:43E7 7C -  -  -  		ld 		a,h
   71 00:43E8 B5 -  -  -  		or 		l
   72 00:43E9 D9 -  -  -  		exx 	
   73 00:43EA B4 -  -  -  		or 		h
   74 00:43EB C2 4D 42 -  		jp 		nz,BadValue
   75 00:43EE 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:43EF C9 -  -  -  		ret
   77 00:43F0 -  -  -  -  		
   78 00:43F0 -  -  -  -  ; ***************************************************************************************
   79 00:43F0 -  -  -  -  ;
   80 00:43F0 -  -  -  -  ; 									Evaluate a string
   81 00:43F0 -  -  -  -  ;
   82 00:43F0 -  -  -  -  ; ***************************************************************************************
   83 00:43F0 -  -  -  -  
   84 00:43F0 -  -  -  -  EvaluateStringOnly:
   85 00:43F0 CD D4 43 -  		call 	EvaluateValue
   86 00:43F3 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:43F5 CA 48 42 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:43F8 C9 -  -  -  		ret
   89 00:43F9 -  -  -  -  
   90 00:43F9 -  -  -  -  ; ***************************************************************************************
   91 00:43F9 -  -  -  -  ;
   92 00:43F9 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:43F9 -  -  -  -  ;
   94 00:43F9 -  -  -  -  ; ***************************************************************************************
   95 00:43F9 -  -  -  -  
   96 00:43F9 -  -  -  -  Return8BitConstant:
   97 00:43F9 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:43FC 6F -  -  -  		ld 		l,a
   99 00:43FD -  -  -  -  Return16BitConstant:
  100 00:43FD D9 -  -  -  		exx 								; clear HL'
  101 00:43FE 21 00 00 -  		ld 		hl,0
  102 00:4401 D9 -  -  -  		exx
  103 00:4402 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4404 C9 -  -  -  		ret
  105 00:4405 -  -  -  -  
  106 00:4405 -  -  -  -  ; ***************************************************************************************
  107 00:4405 -  -  -  -  ;
  108 00:4405 -  -  -  -  ;									Changes and Updates
  109 00:4405 -  -  -  -  ;
  110 00:4405 -  -  -  -  ; ***************************************************************************************
  111 00:4405 -  -  -  -  ;
  112 00:4405 -  -  -  -  ;		Date			Notes
  113 00:4405 -  -  -  -  ;		==== 			=====
  114 00:4405 -  -  -  -  ;
  115 00:4405 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:4405 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4405 -  -  -  -  ; ***************************************************************************************
    2 00:4405 -  -  -  -  ; ***************************************************************************************
    3 00:4405 -  -  -  -  ;
    4 00:4405 -  -  -  -  ;		Name : 		reference.asm
    5 00:4405 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4405 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4405 -  -  -  -  ;		Reviewed :	No
    8 00:4405 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4405 -  -  -  -  ;
   10 00:4405 -  -  -  -  ; ***************************************************************************************
   11 00:4405 -  -  -  -  ; ***************************************************************************************
   12 00:4405 -  -  -  -  
   13 00:4405 -  -  -  -  ; ***************************************************************************************
   14 00:4405 -  -  -  -  ;
   15 00:4405 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4405 -  -  -  -  ;
   17 00:4405 -  -  -  -  ; ***************************************************************************************
   18 00:4405 -  -  -  -  
   19 00:4405 -  -  -  -  Dereference:
   20 00:4405 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4407 C8 -  -  -  		ret 	z
   22 00:4408 -  -  -  -  
   23 00:4408 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:440A -  -  -  -  		
   25 00:440A CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:440C 20 20 -  -  		jr 		nz,_DRInternal
   27 00:440E -  -  -  -  
   28 00:440E CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4410 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4412 -  -  -  -  
   31 00:4412 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4413 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4417 D9 -  -  -  		exx
   34 00:4418 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4419 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:441A 23 -  -  -  		inc  	hl
   37 00:441B 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:441F D9 -  -  -  		exx 								; fix back
   39 00:4420 C9 -  -  -  		ret
   40 00:4421 -  -  -  -  
   41 00:4421 -  -  -  -  _DeRefByte:		
   42 00:4421 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4422 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4425 6F -  -  -  		ld	 	l,a
   45 00:4426 D9 -  -  -  		exx
   46 00:4427 21 00 00 -  		ld 		hl,$0000
   47 00:442A D9 -  -  -  		exx
   48 00:442B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:442D C9 -  -  -  		ret
   50 00:442E -  -  -  -  
   51 00:442E -  -  -  -  _DRInternal:
   52 00:442E 3E 04 C3 F5 
              41 -  -  -  		ERR_DISABLED
   53 00:4433 -  -  -  -  
   54 00:4433 -  -  -  -  ; ***************************************************************************************
   55 00:4433 -  -  -  -  ;
   56 00:4433 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4433 -  -  -  -  ;
   58 00:4433 -  -  -  -  ; ***************************************************************************************
   59 00:4433 -  -  -  -  
   60 00:4433 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4433 -  -  -  -  		#ifdef EZ80
   62 00:4433             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4433             		exx
   64 00:4433             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4433             		ld 		hl,$0000 					; zero HL'
   66 00:4433             		exx
   67 00:4433             		ld 		hl,(AConvert) 				; load UHL
   68 00:4433             		#endif
   69 00:4433 C9 -  -  -  		ret
   70 00:4434 -  -  -  -  
   71 00:4434 -  -  -  -  ; ***************************************************************************************
   72 00:4434 -  -  -  -  ;
   73 00:4434 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4434 -  -  -  -  ;
   75 00:4434 -  -  -  -  ; ***************************************************************************************
   76 00:4434 -  -  -  -  
   77 00:4434 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4434 -  -  -  -  		#ifdef EZ80
   79 00:4434             		ld 		(AConvert),hl
   80 00:4434             		ld 		hl,$0000
   81 00:4434             		ld 		(AConvert+3),hl
   82 00:4434             		exx
   83 00:4434             		ld 		hl,(AConvert+2)
   84 00:4434             		exx
   85 00:4434             		xor 	a
   86 00:4434             		ld 		(AConvert+2),a
   87 00:4434             		ld 		hl,(AConvert)
   88 00:4434             		#endif
   89 00:4434 C9 -  -  -  		ret
   90 00:4435 -  -  -  -  
   91 00:4435 -  -  -  -  ; ***************************************************************************************
   92 00:4435 -  -  -  -  ;
   93 00:4435 -  -  -  -  ;									Changes and Updates
   94 00:4435 -  -  -  -  ;
   95 00:4435 -  -  -  -  ; ***************************************************************************************
   96 00:4435 -  -  -  -  ;
   97 00:4435 -  -  -  -  ;		Date			Notes
   98 00:4435 -  -  -  -  ;		==== 			=====
   99 00:4435 -  -  -  -  ;
  100 00:4435 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4435 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4435 -  -  -  -  ; ***************************************************************************************
    2 00:4435 -  -  -  -  ; ***************************************************************************************
    3 00:4435 -  -  -  -  ;
    4 00:4435 -  -  -  -  ;		Name : 		term.asm
    5 00:4435 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4435 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4435 -  -  -  -  ;		Reviewed :	No
    8 00:4435 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4435 -  -  -  -  ;
   10 00:4435 -  -  -  -  ; ***************************************************************************************
   11 00:4435 -  -  -  -  ; ***************************************************************************************
   12 00:4435 -  -  -  -  
   13 00:4435 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4435             		add_hlhl_16
   15 00:4435             		exx
   16 00:4435             		adc_hlhl_16
   17 00:4435             		exx
   18 00:4435             #endmacro
   19 00:4435 -  -  -  -  
   20 00:4435 -  -  -  -  ; ***************************************************************************************
   21 00:4435 -  -  -  -  ;
   22 00:4435 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4435 -  -  -  -  ;
   24 00:4435 -  -  -  -  ; ***************************************************************************************
   25 00:4435 -  -  -  -  ;
   26 00:4435 -  -  -  -  ; 		Terms can be:
   27 00:4435 -  -  -  -  ;
   28 00:4435 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4435 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4435 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4435 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4435 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4435 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4435 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4435 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4435 -  -  -  -  ; 														reference of some sort.
   37 00:4435 -  -  -  -  ;
   38 00:4435 -  -  -  -  ; ***************************************************************************************
   39 00:4435 -  -  -  -  
   40 00:4435 -  -  -  -  EvaluateTerm:		
   41 00:4435 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4437 D9 -  -  -  		exx
   43 00:4438 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:443B D9 -  -  -  		exx
   45 00:443C 21 00 00 -  		ld 		hl,$0000		
   46 00:443F -  -  -  -  		;
   47 00:443F DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:4442 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4444 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:4446 DA E4 44 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4449 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:444B C2 93 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:444E -  -  -  -  		;
   54 00:444E -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:444E -  -  -  -  		;
   56 00:444E -  -  -  -  _ETIntegerConstant:
   57 00:444E -  -  -  -  		;
   58 00:444E -  -  -  -  _ETIntegerLoop:		
   59 00:444E DD 7E 00 -  		ld 		a,(ix+0)
   60 00:4451 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4453 B5 -  -  -  		or 		l 							; or into L
   62 00:4454 6F -  -  -  		ld 		l,a
   63 00:4455 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4457 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:445A C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:445C FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:445E D8 -  -  -  		ret 	c
   68 00:445F -  -  -  -  
   69 00:445F 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4464 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4469 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:446E 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4473 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4478 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:447D -  -  -  -  
   76 00:447D 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:447F -  -  -  -  		;
   78 00:447F -  -  -  -  		; 		Found the $3F string marker.
   79 00:447F -  -  -  -  		;
   80 00:447F -  -  -  -  _ETStringMarker:		
   81 00:447F DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4481 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4483 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:4485 E1 -  -  -  		pop 	hl
   85 00:4486 11 00 00 -  		ld 		de,$0000
   86 00:4489 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:448C DD 19 -  -  		add 	ix,de
   88 00:448E DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:4490 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4492 C9 -  -  -  		ret
   91 00:4493 -  -  -  -  		;
   92 00:4493 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4493 -  -  -  -  		;
   94 00:4493 -  -  -  -  _ETFoundKeyword:
   95 00:4493 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:4495 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4497 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4499 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:449B 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:449D -  -  -  -  		;
  101 00:449D -  -  -  -  		;		Unary group 0
  102 00:449D -  -  -  -  		;
  103 00:449D E6 7F 21 00 
              00 6F 29 11 
              DE 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:44AF C3 51 40 -  		jp 		JumpCode 					; and go there.
  105 00:44B2 -  -  -  -  
  106 00:44B2 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:44B2 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:44B4 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:44B6 -  -  -  -  		;
  110 00:44B6 -  -  -  -  		; 		- term
  111 00:44B6 -  -  -  -  		;
  112 00:44B6 CD BC 43 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:44B9 CD 5C 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:44BC C9 -  -  -  		ret
  115 00:44BD -  -  -  -  		;
  116 00:44BD -  -  -  -  		;		! ? indirection check
  117 00:44BD -  -  -  -  		;
  118 00:44BD -  -  -  -  _ETCheckIndirection:	
  119 00:44BD FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:44BF 28 05 -  -  		jr 		z,_ETIndirection
  121 00:44C1 FE 83 -  -  		cp 		KWD_PLING
  122 00:44C3 C2 52 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:44C6 -  -  -  -  		;
  124 00:44C6 -  -  -  -  		; 		! ? indirection
  125 00:44C6 -  -  -  -  		;
  126 00:44C6 -  -  -  -  _ETIndirection:
  127 00:44C6 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:44C7 CD 35 44 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:44CA CD 05 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:44CD CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:44CF 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:44D1 CD 33 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:44D4 F1 -  -  -  		pop 	af 							; get type back
  134 00:44D5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:44D7 CB F9 -  -  		set 	CIsReference,c
  136 00:44D9 FE 83 -  -  		cp 		KWD_PLING
  137 00:44DB C8 -  -  -  		ret 	z
  138 00:44DC CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:44DE C9 -  -  -  		ret
  140 00:44DF -  -  -  -  _ETStringIndirect:
  141 00:44DF 3E 02 C3 F5 
              41 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:44E4 -  -  -  -  		;
  143 00:44E4 -  -  -  -  		; 		Found an identifier.
  144 00:44E4 -  -  -  -  		;
  145 00:44E4 -  -  -  -  _ETVariable:
  146 00:44E4 3E 0E C3 F5 
              41 -  -  -  		ERR_TODO
  147 00:44E9 3E 0F C3 F5 
              41 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:44EE -  -  -  -  		
  149 00:44EE -  -  -  -  ; ***************************************************************************************
  150 00:44EE -  -  -  -  ;
  151 00:44EE -  -  -  -  ;									Changes and Updates
  152 00:44EE -  -  -  -  ;
  153 00:44EE -  -  -  -  ; ***************************************************************************************
  154 00:44EE -  -  -  -  ;
  155 00:44EE -  -  -  -  ;		Date			Notes
  156 00:44EE -  -  -  -  ;		==== 			=====
  157 00:44EE -  -  -  -  ;
  158 00:44EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:44EE -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:44EE -  -  -  -  ; ***************************************************************************************
    2 00:44EE -  -  -  -  ; ***************************************************************************************
    3 00:44EE -  -  -  -  ;
    4 00:44EE -  -  -  -  ;		Name : 		abs.asm
    5 00:44EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44EE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44EE -  -  -  -  ;		Reviewed :	No
    8 00:44EE -  -  -  -  ;		Purpose :	Absolute value 
    9 00:44EE -  -  -  -  ;
   10 00:44EE -  -  -  -  ; ***************************************************************************************
   11 00:44EE -  -  -  -  ; ***************************************************************************************
   12 00:44EE -  -  -  -  
   13 00:44EE -  -  -  -  ; ***************************************************************************************
   14 00:44EE -  -  -  -  ;
   15 00:44EE -  -  -  -  ;								abs( unary function
   16 00:44EE -  -  -  -  ;
   17 00:44EE -  -  -  -  ; ***************************************************************************************
   18 00:44EE -  -  -  -  
   19 00:44EE -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:44EE CD BC 43 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:44F1 D9 -  -  -  		exx 								; test MSB
   22 00:44F2 CB 7C -  -  		bit 	7,h
   23 00:44F4 D9 -  -  -  		exx
   24 00:44F5 C4 5C 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:44F8 C9 -  -  -  		ret
   26 00:44F9 -  -  -  -  
   27 00:44F9 -  -  -  -  ; ***************************************************************************************
   28 00:44F9 -  -  -  -  ;
   29 00:44F9 -  -  -  -  ;									Changes and Updates
   30 00:44F9 -  -  -  -  ;
   31 00:44F9 -  -  -  -  ; ***************************************************************************************
   32 00:44F9 -  -  -  -  ;
   33 00:44F9 -  -  -  -  ;		Date			Notes
   34 00:44F9 -  -  -  -  ;		==== 			=====
   35 00:44F9 -  -  -  -  ;
   36 00:44F9 -  -  -  -  ; ***************************************************************************************
   37 00:44F9 -  -  -  -  		
Listing for file "_build.asm"
   33 00:44F9 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:44F9 -  -  -  -  ; ***************************************************************************************
    2 00:44F9 -  -  -  -  ; ***************************************************************************************
    3 00:44F9 -  -  -  -  ;
    4 00:44F9 -  -  -  -  ;		Name : 		asc.asm
    5 00:44F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44F9 -  -  -  -  ;		Reviewed :	No
    8 00:44F9 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:44F9 -  -  -  -  ;
   10 00:44F9 -  -  -  -  ; ***************************************************************************************
   11 00:44F9 -  -  -  -  ; ***************************************************************************************
   12 00:44F9 -  -  -  -  
   13 00:44F9 -  -  -  -  ; ***************************************************************************************
   14 00:44F9 -  -  -  -  ;
   15 00:44F9 -  -  -  -  ;								Asc unary function
   16 00:44F9 -  -  -  -  ;
   17 00:44F9 -  -  -  -  ; ***************************************************************************************
   18 00:44F9 -  -  -  -  
   19 00:44F9 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:44F9 CD C8 43 -  		call	EvaluateStringTerm			; Get string
   21 00:44FC 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:44FD C3 F9 43 -  		jp 		Return8BitConstant
   23 00:4500 -  -  -  -  
   24 00:4500 -  -  -  -  ; ***************************************************************************************
   25 00:4500 -  -  -  -  ;
   26 00:4500 -  -  -  -  ;									Changes and Updates
   27 00:4500 -  -  -  -  ;
   28 00:4500 -  -  -  -  ; ***************************************************************************************
   29 00:4500 -  -  -  -  ;
   30 00:4500 -  -  -  -  ;		Date			Notes
   31 00:4500 -  -  -  -  ;		==== 			=====
   32 00:4500 -  -  -  -  ;
   33 00:4500 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4500 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:4500 -  -  -  -  ; ***************************************************************************************
    2 00:4500 -  -  -  -  ; ***************************************************************************************
    3 00:4500 -  -  -  -  ;
    4 00:4500 -  -  -  -  ;		Name : 		chr.asm
    5 00:4500 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4500 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4500 -  -  -  -  ;		Reviewed :	No
    8 00:4500 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:4500 -  -  -  -  ;
   10 00:4500 -  -  -  -  ; ***************************************************************************************
   11 00:4500 -  -  -  -  ; ***************************************************************************************
   12 00:4500 -  -  -  -  
   13 00:4500 -  -  -  -  ; ***************************************************************************************
   14 00:4500 -  -  -  -  ;
   15 00:4500 -  -  -  -  ;								Chr$() unary function
   16 00:4500 -  -  -  -  ;
   17 00:4500 -  -  -  -  ; ***************************************************************************************
   18 00:4500 -  -  -  -  
   19 00:4500 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:4500 CD D0 41 -  		call 	CheckDollar
   21 00:4503 CD BC 43 -  		call 	EvaluateIntegerTerm
   22 00:4506 7D -  -  -  		ld 		a,l 						; get character
   23 00:4507 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4509 21 7E 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:450C 36 0D -  -  		ld 		(hl),13
   26 00:450E 2B -  -  -  		dec 	hl
   27 00:450F 77 -  -  -  		ld 		(hl),a
   28 00:4510 C9 -  -  -  		ret
   29 00:4511 -  -  -  -  
   30 00:4511 -  -  -  -  ; ***************************************************************************************
   31 00:4511 -  -  -  -  ;
   32 00:4511 -  -  -  -  ;									Changes and Updates
   33 00:4511 -  -  -  -  ;
   34 00:4511 -  -  -  -  ; ***************************************************************************************
   35 00:4511 -  -  -  -  ;
   36 00:4511 -  -  -  -  ;		Date			Notes
   37 00:4511 -  -  -  -  ;		==== 			=====
   38 00:4511 -  -  -  -  ;
   39 00:4511 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:4511 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4511 -  -  -  -  ; ***************************************************************************************
    2 00:4511 -  -  -  -  ; ***************************************************************************************
    3 00:4511 -  -  -  -  ;
    4 00:4511 -  -  -  -  ;		Name : 		len.asm
    5 00:4511 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4511 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4511 -  -  -  -  ;		Reviewed :	None
    8 00:4511 -  -  -  -  ;		Purpose :	String Length
    9 00:4511 -  -  -  -  ;
   10 00:4511 -  -  -  -  ; ***************************************************************************************
   11 00:4511 -  -  -  -  ; ***************************************************************************************
   12 00:4511 -  -  -  -  
   13 00:4511 -  -  -  -  ; ***************************************************************************************
   14 00:4511 -  -  -  -  ;
   15 00:4511 -  -  -  -  ;								Len unary function
   16 00:4511 -  -  -  -  ;
   17 00:4511 -  -  -  -  ; ***************************************************************************************
   18 00:4511 -  -  -  -  
   19 00:4511 -  -  -  -  Unary_Len:	;; [len]
   20 00:4511 CD C8 43 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4514 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4515 CD D3 42 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4518 -  -  -  -  _ULCount:
   24 00:4518 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4519 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:451B D8 -  -  -  		ret 	c
   27 00:451C 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:451D 13 -  -  -  		inc 	de
   29 00:451E 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:4520 -  -  -  -  
   31 00:4520 -  -  -  -  ; ***************************************************************************************
   32 00:4520 -  -  -  -  ;
   33 00:4520 -  -  -  -  ;									Changes and Updates
   34 00:4520 -  -  -  -  ;
   35 00:4520 -  -  -  -  ; ***************************************************************************************
   36 00:4520 -  -  -  -  ;
   37 00:4520 -  -  -  -  ;		Date			Notes
   38 00:4520 -  -  -  -  ;		==== 			=====
   39 00:4520 -  -  -  -  ;
   40 00:4520 -  -  -  -  ; ***************************************************************************************
   41 00:4520 -  -  -  -  		
Listing for file "_build.asm"
   36 00:4520 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:4520 -  -  -  -  ; ***************************************************************************************
    2 00:4520 -  -  -  -  ; ***************************************************************************************
    3 00:4520 -  -  -  -  ;
    4 00:4520 -  -  -  -  ;		Name : 		makestring.asm
    5 00:4520 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4520 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4520 -  -  -  -  ;		Reviewed :	No
    8 00:4520 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:4520 -  -  -  -  ;
   10 00:4520 -  -  -  -  ; ***************************************************************************************
   11 00:4520 -  -  -  -  ; ***************************************************************************************
   12 00:4520 -  -  -  -  
   13 00:4520 -  -  -  -  ; ***************************************************************************************
   14 00:4520 -  -  -  -  ;
   15 00:4520 -  -  -  -  ;								Str$() unary function
   16 00:4520 -  -  -  -  ;
   17 00:4520 -  -  -  -  ; ***************************************************************************************
   18 00:4520 -  -  -  -  
   19 00:4520 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:4520 CD BC 43 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4523 CD 33 44 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4526 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4528 C9 -  -  -  		ret
   24 00:4529 -  -  -  -  
   25 00:4529 -  -  -  -  ; ***************************************************************************************
   26 00:4529 -  -  -  -  ;
   27 00:4529 -  -  -  -  ;									Changes and Updates
   28 00:4529 -  -  -  -  ;
   29 00:4529 -  -  -  -  ; ***************************************************************************************
   30 00:4529 -  -  -  -  ;
   31 00:4529 -  -  -  -  ;		Date			Notes
   32 00:4529 -  -  -  -  ;		==== 			=====
   33 00:4529 -  -  -  -  ;
   34 00:4529 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:4529 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4529 -  -  -  -  ; ***************************************************************************************
    2 00:4529 -  -  -  -  ; ***************************************************************************************
    3 00:4529 -  -  -  -  ;
    4 00:4529 -  -  -  -  ;		Name : 		not.asm
    5 00:4529 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4529 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4529 -  -  -  -  ;		Reviewed :	No
    8 00:4529 -  -  -  -  ;		Purpose :	Logical not
    9 00:4529 -  -  -  -  ;
   10 00:4529 -  -  -  -  ; ***************************************************************************************
   11 00:4529 -  -  -  -  ; ***************************************************************************************
   12 00:4529 -  -  -  -  
   13 00:4529 -  -  -  -  ; ***************************************************************************************
   14 00:4529 -  -  -  -  ;
   15 00:4529 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4529 -  -  -  -  ;
   17 00:4529 -  -  -  -  ; ***************************************************************************************
   18 00:4529 -  -  -  -  
   19 00:4529 -  -  -  -  Unary_Not:		;; [not]
   20 00:4529 CD BC 43 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:452C CD 33 45 -  		call 	__UNSwap 					; not and swap twice.
   22 00:452F CD 33 45 -  		call 	__UNSwap		
   23 00:4532 C9 -  -  -  		ret
   24 00:4533 -  -  -  -  
   25 00:4533 -  -  -  -  __UNSwap:
   26 00:4533 7C -  -  -  		ld 		a,h
   27 00:4534 2F -  -  -  		cpl
   28 00:4535 67 -  -  -  		ld 		h,a
   29 00:4536 7D -  -  -  		ld 		a,l
   30 00:4537 2F -  -  -  		cpl 	
   31 00:4538 6F -  -  -  		ld 		l,a
   32 00:4539 D9 -  -  -  		exx
   33 00:453A C9 -  -  -  		ret
   34 00:453B -  -  -  -  
   35 00:453B -  -  -  -  ; ***************************************************************************************
   36 00:453B -  -  -  -  ;
   37 00:453B -  -  -  -  ;									Changes and Updates
   38 00:453B -  -  -  -  ;
   39 00:453B -  -  -  -  ; ***************************************************************************************
   40 00:453B -  -  -  -  ;
   41 00:453B -  -  -  -  ;		Date			Notes
   42 00:453B -  -  -  -  ;		==== 			=====
   43 00:453B -  -  -  -  ;
   44 00:453B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:453B -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:453B -  -  -  -  ; ***************************************************************************************
    2 00:453B -  -  -  -  ; ***************************************************************************************
    3 00:453B -  -  -  -  ;
    4 00:453B -  -  -  -  ;		Name : 		page.asm
    5 00:453B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:453B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:453B -  -  -  -  ;		Reviewed :	No
    8 00:453B -  -  -  -  ;		Purpose :	Various constants.
    9 00:453B -  -  -  -  ;
   10 00:453B -  -  -  -  ; ***************************************************************************************
   11 00:453B -  -  -  -  ; ***************************************************************************************
   12 00:453B -  -  -  -  
   13 00:453B -  -  -  -  ; ***************************************************************************************
   14 00:453B -  -  -  -  ;
   15 00:453B -  -  -  -  ;							page unary function (no bracket)
   16 00:453B -  -  -  -  ;
   17 00:453B -  -  -  -  ; ***************************************************************************************
   18 00:453B -  -  -  -  
   19 00:453B -  -  -  -  Unary_Page:	;; [page]
   20 00:453B 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:453E D9 -  -  -  			exx
   22 00:453F 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:4542 D9 -  -  -  			exx
   24 00:4543 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4545 C9 -  -  -  			ret
   26 00:4546 -  -  -  -  
   27 00:4546 -  -  -  -  ; ***************************************************************************************
   28 00:4546 -  -  -  -  ;
   29 00:4546 -  -  -  -  ;									Changes and Updates
   30 00:4546 -  -  -  -  ;
   31 00:4546 -  -  -  -  ; ***************************************************************************************
   32 00:4546 -  -  -  -  ;
   33 00:4546 -  -  -  -  ;		Date			Notes
   34 00:4546 -  -  -  -  ;		==== 			=====
   35 00:4546 -  -  -  -  ;
   36 00:4546 -  -  -  -  ; ***************************************************************************************
   37 00:4546 -  -  -  -  			
Listing for file "_build.asm"
   39 00:4546 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:4546 -  -  -  -  ; ***************************************************************************************
    2 00:4546 -  -  -  -  ; ***************************************************************************************
    3 00:4546 -  -  -  -  ;
    4 00:4546 -  -  -  -  ;		Name : 		random.asm
    5 00:4546 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4546 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4546 -  -  -  -  ;		Reviewed :	No
    8 00:4546 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:4546 -  -  -  -  ;
   10 00:4546 -  -  -  -  ; ***************************************************************************************
   11 00:4546 -  -  -  -  ; ***************************************************************************************
   12 00:4546 -  -  -  -  
   13 00:4546 -  -  -  -  ; ***************************************************************************************
   14 00:4546 -  -  -  -  ;
   15 00:4546 -  -  -  -  ;								Random unary function
   16 00:4546 -  -  -  -  ;
   17 00:4546 -  -  -  -  ; ***************************************************************************************
   18 00:4546 -  -  -  -  
   19 00:4546 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:4546 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:4547 CD BC 43 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:454A D9 -  -  -  		exx 								; is it -ve
   23 00:454B CB 7C -  -  		bit 	7,h
   24 00:454D D9 -  -  -  		exx
   25 00:454E 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4550 22 5D 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4553 D9 -  -  -  		exx
   28 00:4554 22 61 40 -  		ld 		(RandomSeed+4),hl
   29 00:4557 D9 -  -  -  		exx
   30 00:4558 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:455A C9 -  -  -  		ret
   32 00:455B -  -  -  -  _URDontSeed:		
   33 00:455B -  -  -  -  
   34 00:455B CD C5 4A -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:455E 28 19 -  -  		jr 		z,_URFail
   36 00:4560 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4561 D9 -  -  -  		exx
   38 00:4562 E5 -  -  -  		push 	hl
   39 00:4563 D9 -  -  -  		exx
   40 00:4564 -  -  -  -  		;
   41 00:4564 CD 88 45 -  		call 	URandomHL 					; get random HL'HL
   42 00:4567 D9 -  -  -  		exx
   43 00:4568 CD 88 45 -  		call 	URandomHL
   44 00:456B CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:456D D9 -  -  -  		exx
   46 00:456E -  -  -  -  		;
   47 00:456E D9 -  -  -  		exx 								; restore range.
   48 00:456F D1 -  -  -  		pop 	de
   49 00:4570 D9 -  -  -  		exx
   50 00:4571 D1 -  -  -  		pop 	de
   51 00:4572 -  -  -  -  		;
   52 00:4572 CD 71 49 -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4575 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:4576 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4578 C9 -  -  -  		ret
   56 00:4579 -  -  -  -  _URFail:
   57 00:4579 3E 03 C3 F5 
              41 -  -  -  		ERR_BADVALUE
   58 00:457E -  -  -  -  ; ***************************************************************************************
   59 00:457E -  -  -  -  ;
   60 00:457E -  -  -  -  ; 									Push RNG off zero
   61 00:457E -  -  -  -  ;
   62 00:457E -  -  -  -  ; ***************************************************************************************
   63 00:457E -  -  -  -  
   64 00:457E -  -  -  -  UnaryRandomInitialise:
   65 00:457E 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4580 -  -  -  -  _URILoop:
   67 00:4580 C5 -  -  -  		push 	bc
   68 00:4581 CD 88 45 -  		call 	URandomHL
   69 00:4584 C1 -  -  -  		pop 	bc
   70 00:4585 10 F9 -  -  		djnz 	_URILoop
   71 00:4587 C9 -  -  -  		ret
   72 00:4588 -  -  -  -  
   73 00:4588 -  -  -  -  ; ***************************************************************************************
   74 00:4588 -  -  -  -  ;
   75 00:4588 -  -  -  -  ;							16 bit random number generator
   76 00:4588 -  -  -  -  ;
   77 00:4588 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4588 -  -  -  -  ;		Actual author unspecified.
   79 00:4588 -  -  -  -  ;
   80 00:4588 -  -  -  -  ; ***************************************************************************************
   81 00:4588 -  -  -  -  
   82 00:4588 -  -  -  -  URandomHL:
   83 00:4588 2A 5D 40 -  	    ld 		hl,(RandomSeed)
   84 00:458B ED 5B 61 40 	    ld 		de,(RandomSeed+4)
   85 00:458F 44 -  -  -  	    ld 		b,h
   86 00:4590 4D -  -  -  	    ld 		c,l
   87 00:4591 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:4596 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:459B 2C -  -  -  	    inc 	l
   90 00:459C 09 -  -  -  	    add 	hl,bc
   91 00:459D 22 5D 40 -  	    ld 		(RandomSeed),hl
   92 00:45A0 2A 61 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:45A3 ED 5A -  -  	    adc 	hl,de
   94 00:45A5 22 61 40 -  	    ld 		(RandomSeed+4),hl
   95 00:45A8 EB -  -  -  	    ex 		de,hl
   96 00:45A9 2A 65 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:45AC ED 4B 69 40 	    ld 		bc,(RandomSeed+12)
   98 00:45B0 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:45B5 ED 43 69 40 	    ld 		(RandomSeed+12),bc
  100 00:45B9 9F -  -  -  	    sbc 	a,a
  101 00:45BA E6 C5 -  -  	    and 	%11000101
  102 00:45BC AD -  -  -  	    xor 	l
  103 00:45BD 6F -  -  -  	    ld 		l,a
  104 00:45BE 22 65 40 -  	    ld 		(RandomSeed+8),hl
  105 00:45C1 EB -  -  -  	    ex 		de,hl
  106 00:45C2 09 -  -  -  	    add 	hl,bc
  107 00:45C3 C9 -  -  -  	    ret		
  108 00:45C4 -  -  -  -  
  109 00:45C4 -  -  -  -  ; ***************************************************************************************
  110 00:45C4 -  -  -  -  ;
  111 00:45C4 -  -  -  -  ;									Changes and Updates
  112 00:45C4 -  -  -  -  ;
  113 00:45C4 -  -  -  -  ; ***************************************************************************************
  114 00:45C4 -  -  -  -  ;
  115 00:45C4 -  -  -  -  ;		Date			Notes
  116 00:45C4 -  -  -  -  ;		==== 			=====
  117 00:45C4 -  -  -  -  ;
  118 00:45C4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:45C4 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:45C4 -  -  -  -  ; ***************************************************************************************
    2 00:45C4 -  -  -  -  ; ***************************************************************************************
    3 00:45C4 -  -  -  -  ;
    4 00:45C4 -  -  -  -  ;		Name : 		sgn.asm
    5 00:45C4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45C4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45C4 -  -  -  -  ;		Reviewed :	No
    8 00:45C4 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:45C4 -  -  -  -  ;
   10 00:45C4 -  -  -  -  ; ***************************************************************************************
   11 00:45C4 -  -  -  -  ; ***************************************************************************************
   12 00:45C4 -  -  -  -  
   13 00:45C4 -  -  -  -  ; ***************************************************************************************
   14 00:45C4 -  -  -  -  ;
   15 00:45C4 -  -  -  -  ;								sgn unary function
   16 00:45C4 -  -  -  -  ;
   17 00:45C4 -  -  -  -  ; ***************************************************************************************
   18 00:45C4 -  -  -  -  
   19 00:45C4 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:45C4 CD BC 43 -  		call	EvaluateIntegerTerm 		; get value
   21 00:45C7 CD C5 4A -  		call 	Int32Zero 					; integer sgn() code
   22 00:45CA CA D3 42 -  		jp 		z,UnaryInt32False
   23 00:45CD D9 -  -  -  		exx
   24 00:45CE CB 7C -  -  		bit 	7,h
   25 00:45D0 D9 -  -  -  		exx
   26 00:45D1 C2 CF 42 -  		jp 		nz,UnaryInt32True
   27 00:45D4 3E 01 -  -  		ld 		a,1
   28 00:45D6 C3 F9 43 -  		jp 		Return8BitConstant
   29 00:45D9 -  -  -  -  
   30 00:45D9 -  -  -  -  ; ***************************************************************************************
   31 00:45D9 -  -  -  -  ;
   32 00:45D9 -  -  -  -  ;									Changes and Updates
   33 00:45D9 -  -  -  -  ;
   34 00:45D9 -  -  -  -  ; ***************************************************************************************
   35 00:45D9 -  -  -  -  ;
   36 00:45D9 -  -  -  -  ;		Date			Notes
   37 00:45D9 -  -  -  -  ;		==== 			=====
   38 00:45D9 -  -  -  -  ;
   39 00:45D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:45D9 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:45D9 -  -  -  -  ; ***************************************************************************************
    2 00:45D9 -  -  -  -  ; ***************************************************************************************
    3 00:45D9 -  -  -  -  ;
    4 00:45D9 -  -  -  -  ;		Name : 		simple.asm
    5 00:45D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45D9 -  -  -  -  ;		Reviewed :	No
    8 00:45D9 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:45D9 -  -  -  -  ;
   10 00:45D9 -  -  -  -  ; ***************************************************************************************
   11 00:45D9 -  -  -  -  ; ***************************************************************************************
   12 00:45D9 -  -  -  -  
   13 00:45D9 -  -  -  -  ; ***************************************************************************************
   14 00:45D9 -  -  -  -  ;
   15 00:45D9 -  -  -  -  ;								( unary function (think about it)
   16 00:45D9 -  -  -  -  ;
   17 00:45D9 -  -  -  -  ; ***************************************************************************************
   18 00:45D9 -  -  -  -  
   19 00:45D9 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:45D9 CD 6A 43 -  		call 	EvaluateAtPrecedence0
   21 00:45DC C3 C3 41 -  		jp  	CheckRightBracket
   22 00:45DF -  -  -  -  
   23 00:45DF -  -  -  -  ; ***************************************************************************************
   24 00:45DF -  -  -  -  ;
   25 00:45DF -  -  -  -  ;									Handle &x
   26 00:45DF -  -  -  -  ;
   27 00:45DF -  -  -  -  ; ***************************************************************************************
   28 00:45DF -  -  -  -  
   29 00:45DF -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:45DF DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:45E2 E6 C0 -  -  		and 		$C0
   32 00:45E4 FE 40 -  -  		cp 			$40
   33 00:45E6 C2 52 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:45E9 C3 35 44 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:45EC -  -  -  -  
   36 00:45EC -  -  -  -  ; ***************************************************************************************
   37 00:45EC -  -  -  -  ;
   38 00:45EC -  -  -  -  ;									Changes and Updates
   39 00:45EC -  -  -  -  ;
   40 00:45EC -  -  -  -  ; ***************************************************************************************
   41 00:45EC -  -  -  -  ;
   42 00:45EC -  -  -  -  ;		Date			Notes
   43 00:45EC -  -  -  -  ;		==== 			=====
   44 00:45EC -  -  -  -  ;
   45 00:45EC -  -  -  -  ; ***************************************************************************************
   46 00:45EC -  -  -  -  		
Listing for file "_build.asm"
   42 00:45EC -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:45EC -  -  -  -  ; ***************************************************************************************
    2 00:45EC -  -  -  -  ; ***************************************************************************************
    3 00:45EC -  -  -  -  ;
    4 00:45EC -  -  -  -  ;		Name : 		str.asm
    5 00:45EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45EC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45EC -  -  -  -  ;		Reviewed :	No
    8 00:45EC -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:45EC -  -  -  -  ;
   10 00:45EC -  -  -  -  ; ***************************************************************************************
   11 00:45EC -  -  -  -  ; ***************************************************************************************
   12 00:45EC -  -  -  -  
   13 00:45EC -  -  -  -  ; ***************************************************************************************
   14 00:45EC -  -  -  -  ;
   15 00:45EC -  -  -  -  ;								Str$() unary function
   16 00:45EC -  -  -  -  ;
   17 00:45EC -  -  -  -  ; ***************************************************************************************
   18 00:45EC -  -  -  -  
   19 00:45EC -  -  -  -  Unary_Str:	;; [str]
   20 00:45EC CD D0 41 -  		call 	CheckDollar
   21 00:45EF CD BC 43 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:45F2 01 6D 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:45F5 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:45F7 CD 06 4B -  		call 	Int32ToString 				
   25 00:45FA 21 6D 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:45FD 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:45FF C9 -  -  -  		ret
   28 00:4600 -  -  -  -  
   29 00:4600 -  -  -  -  ; ***************************************************************************************
   30 00:4600 -  -  -  -  ;
   31 00:4600 -  -  -  -  ;									Changes and Updates
   32 00:4600 -  -  -  -  ;
   33 00:4600 -  -  -  -  ; ***************************************************************************************
   34 00:4600 -  -  -  -  ;
   35 00:4600 -  -  -  -  ;		Date			Notes
   36 00:4600 -  -  -  -  ;		==== 			=====
   37 00:4600 -  -  -  -  ;
   38 00:4600 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:4600 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:4600 -  -  -  -  ; ***************************************************************************************
    2 00:4600 -  -  -  -  ; ***************************************************************************************
    3 00:4600 -  -  -  -  ;
    4 00:4600 -  -  -  -  ;		Name : 		time.asm
    5 00:4600 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4600 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4600 -  -  -  -  ;		Reviewed :	No
    8 00:4600 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:4600 -  -  -  -  ;
   10 00:4600 -  -  -  -  ; ***************************************************************************************
   11 00:4600 -  -  -  -  ; ***************************************************************************************
   12 00:4600 -  -  -  -  
   13 00:4600 -  -  -  -  ; ***************************************************************************************
   14 00:4600 -  -  -  -  ;
   15 00:4600 -  -  -  -  ;							Get system time in ms
   16 00:4600 -  -  -  -  ;
   17 00:4600 -  -  -  -  ; ***************************************************************************************
   18 00:4600 -  -  -  -  
   19 00:4600 -  -  -  -  Unary_Time:	;; [time]
   20 00:4600 CD 7D 4B -  			call 	SYSGetTimer
   21 00:4603 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4605 C9 -  -  -  			ret
   23 00:4606 -  -  -  -  
   24 00:4606 -  -  -  -  ; ***************************************************************************************
   25 00:4606 -  -  -  -  ;
   26 00:4606 -  -  -  -  ;									Changes and Updates
   27 00:4606 -  -  -  -  ;
   28 00:4606 -  -  -  -  ; ***************************************************************************************
   29 00:4606 -  -  -  -  ;
   30 00:4606 -  -  -  -  ;		Date			Notes
   31 00:4606 -  -  -  -  ;		==== 			=====
   32 00:4606 -  -  -  -  ;
   33 00:4606 -  -  -  -  ; ***************************************************************************************
   34 00:4606 -  -  -  -  			
Listing for file "_build.asm"
   44 00:4606 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4606 -  -  -  -  ; ***************************************************************************************
    2 00:4606 -  -  -  -  ; ***************************************************************************************
    3 00:4606 -  -  -  -  ;
    4 00:4606 -  -  -  -  ;		Name : 		top.asm
    5 00:4606 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4606 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4606 -  -  -  -  ;		Reviewed :	No
    8 00:4606 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4606 -  -  -  -  ;
   10 00:4606 -  -  -  -  ; ***************************************************************************************
   11 00:4606 -  -  -  -  ; ***************************************************************************************
   12 00:4606 -  -  -  -  
   13 00:4606 -  -  -  -  ; ***************************************************************************************
   14 00:4606 -  -  -  -  ;
   15 00:4606 -  -  -  -  ;							page unary function (no bracket)
   16 00:4606 -  -  -  -  ;
   17 00:4606 -  -  -  -  ; ***************************************************************************************
   18 00:4606 -  -  -  -  
   19 00:4606 -  -  -  -  Unary_Top:	;; [top]
   20 00:4606 2A 45 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4609 D9 -  -  -  			exx
   22 00:460A 2A 47 40 -  			ld 		hl,(TopMemory+2)
   23 00:460D D9 -  -  -  			exx
   24 00:460E 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4610 C9 -  -  -  			ret
   26 00:4611 -  -  -  -  
   27 00:4611 -  -  -  -  ; ***************************************************************************************
   28 00:4611 -  -  -  -  ;
   29 00:4611 -  -  -  -  ;									Changes and Updates
   30 00:4611 -  -  -  -  ;
   31 00:4611 -  -  -  -  ; ***************************************************************************************
   32 00:4611 -  -  -  -  ;
   33 00:4611 -  -  -  -  ;		Date			Notes
   34 00:4611 -  -  -  -  ;		==== 			=====
   35 00:4611 -  -  -  -  ;
   36 00:4611 -  -  -  -  ; ***************************************************************************************
   37 00:4611 -  -  -  -  			
Listing for file "_build.asm"
   45 00:4611 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:4611 -  -  -  -  ; ***************************************************************************************
    2 00:4611 -  -  -  -  ; ***************************************************************************************
    3 00:4611 -  -  -  -  ;
    4 00:4611 -  -  -  -  ;		Name : 		val.asm
    5 00:4611 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4611 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4611 -  -  -  -  ;		Reviewed :	No
    8 00:4611 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:4611 -  -  -  -  ;
   10 00:4611 -  -  -  -  ; ***************************************************************************************
   11 00:4611 -  -  -  -  ; ***************************************************************************************
   12 00:4611 -  -  -  -  
   13 00:4611 -  -  -  -  ; ***************************************************************************************
   14 00:4611 -  -  -  -  ;
   15 00:4611 -  -  -  -  ;								val( unary function
   16 00:4611 -  -  -  -  ;
   17 00:4611 -  -  -  -  ; ***************************************************************************************
   18 00:4611 -  -  -  -  
   19 00:4611 -  -  -  -  Unary_Val:	;; [val]
   20 00:4611 CD C8 43 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4614 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4615 C1 -  -  -  		pop 	bc
   23 00:4616 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4618 CD FC 49 -  		call 	Int32FromString 			; get the integer part.
   25 00:461B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:461D C8 -  -  -  		ret		z 							; okay
   27 00:461E 3E 03 C3 F5 
              41 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4623 -  -  -  -  
   29 00:4623 -  -  -  -  ; ***************************************************************************************
   30 00:4623 -  -  -  -  ;
   31 00:4623 -  -  -  -  ;									Changes and Updates
   32 00:4623 -  -  -  -  ;
   33 00:4623 -  -  -  -  ; ***************************************************************************************
   34 00:4623 -  -  -  -  ;
   35 00:4623 -  -  -  -  ;		Date			Notes
   36 00:4623 -  -  -  -  ;		==== 			=====
   37 00:4623 -  -  -  -  ;
   38 00:4623 -  -  -  -  ; ***************************************************************************************
   39 00:4623 -  -  -  -  		
Listing for file "_build.asm"
   46 00:4623 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4623 -  -  -  -  ; ***************************************************************************************
    2 00:4623 -  -  -  -  ; ***************************************************************************************
    3 00:4623 -  -  -  -  ;
    4 00:4623 -  -  -  -  ;		Name : 		clear.asm
    5 00:4623 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4623 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4623 -  -  -  -  ;		Reviewed :	No
    8 00:4623 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4623 -  -  -  -  ;
   10 00:4623 -  -  -  -  ; ***************************************************************************************
   11 00:4623 -  -  -  -  ; ***************************************************************************************
   12 00:4623 -  -  -  -  
   13 00:4623 -  -  -  -  ; ***************************************************************************************
   14 00:4623 -  -  -  -  ;
   15 00:4623 -  -  -  -  ;										CLEAR command
   16 00:4623 -  -  -  -  ;
   17 00:4623 -  -  -  -  ; ***************************************************************************************
   18 00:4623 -  -  -  -  
   19 00:4623 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4623 -  -  -  -  		;
   21 00:4623 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4623 -  -  -  -  		;
   23 00:4623 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4626 -  -  -  -  _CCFindLow:
   25 00:4626 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4629 5E -  -  -  		ld 		e,(hl)		
   27 00:462A 19 -  -  -  		add 	hl,de
   28 00:462B 7B -  -  -  		ld 		a,e
   29 00:462C B7 -  -  -  		or 		a
   30 00:462D 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:462F 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4630 22 45 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4633 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4634 22 41 40 -  		ld 		(LowAllocMemory),hl
   35 00:4637 -  -  -  -  		;
   36 00:4637 -  -  -  -  		; 	 		Reset the language stack
   37 00:4637 -  -  -  -  		;
   38 00:4637 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:463A -  -  -  -  		;
   40 00:463A 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:463C 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:463F 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:4642 19 -  -  -  		add 	hl,de
   44 00:4643 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4645 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4648 -  -  -  -  		;
   47 00:4648 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:464B 19 -  -  -  		add 	hl,de
   49 00:464C 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:464F -  -  -  -  		;
   51 00:464F -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:464F -  -  -  -  		;
   53 00:464F -  -  -  -  
   54 00:464F -  -  -  -  		;
   55 00:464F -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:464F -  -  -  -  		;
   57 00:464F CD 7E 45 -  		call 	UnaryRandomInitialise
   58 00:4652 -  -  -  -  		;
   59 00:4652 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:4652 -  -  -  -  		;
   61 00:4652 C9 -  -  -  		ret
   62 00:4653 -  -  -  -  
   63 00:4653 -  -  -  -  ; ***************************************************************************************
   64 00:4653 -  -  -  -  ;
   65 00:4653 -  -  -  -  ;									Changes and Updates
   66 00:4653 -  -  -  -  ;
   67 00:4653 -  -  -  -  ; ***************************************************************************************
   68 00:4653 -  -  -  -  ;
   69 00:4653 -  -  -  -  ;		Date			Notes
   70 00:4653 -  -  -  -  ;		==== 			=====
   71 00:4653 -  -  -  -  ;
   72 00:4653 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:4653 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4653 -  -  -  -  ; ***************************************************************************************
    2 00:4653 -  -  -  -  ; ***************************************************************************************
    3 00:4653 -  -  -  -  ;
    4 00:4653 -  -  -  -  ;		Name : 		instance.asm
    5 00:4653 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4653 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4653 -  -  -  -  ;		Reviewed :	No
    8 00:4653 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4653 -  -  -  -  ;
   10 00:4653 -  -  -  -  ; ***************************************************************************************
   11 00:4653 -  -  -  -  ; ***************************************************************************************
   12 00:4653 -  -  -  -  
   13 00:4653 -  -  -  -  ; ***************************************************************************************
   14 00:4653 -  -  -  -  ;
   15 00:4653 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4653 -  -  -  -  ;
   17 00:4653 -  -  -  -  ; ***************************************************************************************
   18 00:4653 -  -  -  -  
   19 00:4653 -  -  -  -  SetCurrentInstance:
   20 00:4653 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4657 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:465A ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:465E -  -  -  -  
   24 00:465E C9 -  -  -  		ret
   25 00:465F -  -  -  -  
   26 00:465F -  -  -  -  
   27 00:465F -  -  -  -  ; ***************************************************************************************
   28 00:465F -  -  -  -  ;
   29 00:465F -  -  -  -  ;									Changes and Updates
   30 00:465F -  -  -  -  ;
   31 00:465F -  -  -  -  ; ***************************************************************************************
   32 00:465F -  -  -  -  ;
   33 00:465F -  -  -  -  ;		Date			Notes
   34 00:465F -  -  -  -  ;		==== 			=====
   35 00:465F -  -  -  -  ;
   36 00:465F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:465F -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:465F -  -  -  -  ; ***************************************************************************************
    2 00:465F -  -  -  -  ; ***************************************************************************************
    3 00:465F -  -  -  -  ;
    4 00:465F -  -  -  -  ;		Name : 		new.asm
    5 00:465F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465F -  -  -  -  ;		Reviewed :	No
    8 00:465F -  -  -  -  ;		Purpose :	New command.
    9 00:465F -  -  -  -  ;
   10 00:465F -  -  -  -  ; ***************************************************************************************
   11 00:465F -  -  -  -  ; ***************************************************************************************
   12 00:465F -  -  -  -  
   13 00:465F -  -  -  -  ; ***************************************************************************************
   14 00:465F -  -  -  -  ;
   15 00:465F -  -  -  -  ;										NEW command
   16 00:465F -  -  -  -  ;
   17 00:465F -  -  -  -  ; ***************************************************************************************
   18 00:465F -  -  -  -  
   19 00:465F -  -  -  -  Command_NEW: 	;; [new]
   20 00:465F 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4662 36 00 -  -  		ld 		(hl),0
   22 00:4664 CD 23 46 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4667 3E 00 C3 F5 
              41 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:466C -  -  -  -  
   25 00:466C -  -  -  -  ; ***************************************************************************************
   26 00:466C -  -  -  -  ;
   27 00:466C -  -  -  -  ;									Changes and Updates
   28 00:466C -  -  -  -  ;
   29 00:466C -  -  -  -  ; ***************************************************************************************
   30 00:466C -  -  -  -  ;
   31 00:466C -  -  -  -  ;		Date			Notes
   32 00:466C -  -  -  -  ;		==== 			=====
   33 00:466C -  -  -  -  ;
   34 00:466C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:466C -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:466C -  -  -  -  ; ***************************************************************************************
    2 00:466C -  -  -  -  ; ***************************************************************************************
    3 00:466C -  -  -  -  ;
    4 00:466C -  -  -  -  ;		Name : 		utility.asm
    5 00:466C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:466C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:466C -  -  -  -  ;		Reviewed :	No
    8 00:466C -  -  -  -  ;		Purpose :	Utility routines
    9 00:466C -  -  -  -  ;
   10 00:466C -  -  -  -  ; ***************************************************************************************
   11 00:466C -  -  -  -  ; ***************************************************************************************
   12 00:466C -  -  -  -  
   13 00:466C -  -  -  -  ; ***************************************************************************************
   14 00:466C -  -  -  -  ;
   15 00:466C -  -  -  -  ;							Print ASCII string at HL
   16 00:466C -  -  -  -  ;
   17 00:466C -  -  -  -  ; ***************************************************************************************
   18 00:466C -  -  -  -  
   19 00:466C -  -  -  -  PrintStringAtHL:
   20 00:466C 7E -  -  -  		ld 		a,(hl)
   21 00:466D FE 20 -  -  		cp 		$20		
   22 00:466F D8 -  -  -  		ret 	c
   23 00:4670 CD 54 4B -  		call 	SYSPrintChar
   24 00:4673 23 -  -  -  		inc 	hl
   25 00:4674 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4676 -  -  -  -  
   27 00:4676 -  -  -  -  ; ***************************************************************************************
   28 00:4676 -  -  -  -  ;
   29 00:4676 -  -  -  -  ;									Changes and Updates
   30 00:4676 -  -  -  -  ;
   31 00:4676 -  -  -  -  ; ***************************************************************************************
   32 00:4676 -  -  -  -  ;
   33 00:4676 -  -  -  -  ;		Date			Notes
   34 00:4676 -  -  -  -  ;		==== 			=====
   35 00:4676 -  -  -  -  ;
   36 00:4676 -  -  -  -  ; ***************************************************************************************
   37 00:4676 -  -  -  -  		
Listing for file "_build.asm"
   50 00:4676 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:4676 -  -  -  -  ;
    2 00:4676 -  -  -  -  ;	This file is automatically generated.
    3 00:4676 -  -  -  -  ;
    4 00:4676 -  -  -  -  ;
    5 00:4676 -  -  -  -  ;	Keywords for set 0
    6 00:4676 -  -  -  -  ;
    7 00:4676 -  -  -  -  KeywordsSet0:
    8 00:4676 01 20 -  -  	.db	1," "              ; $0080
    9 00:4678 01 20 -  -  	.db	1," "              ; $0081
   10 00:467A 01 20 -  -  	.db	1," "              ; $0082
   11 00:467C 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:467E 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:4680 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:4682 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:4684 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:4688 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:468C 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:468E 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:4690 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:4693 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:4696 01 3E -  -  	.db	1,">"              ; $008d
   22 00:4698 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:469A 01 3D -  -  	.db	1,"="              ; $008f
   24 00:469C 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:469F 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:46A3 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:46A6 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:46AA 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:46AC 01 28 -  -  	.db	1,"("              ; $0095
   30 00:46AE 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:46B0 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:46B4 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:46B8 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:46BC 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:46C0 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:46C4 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:46C8 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:46CC 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:46D0 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:46D5 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:46DA 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:46DE 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:46E2 01 29 -  -  	.db	1,")"              ; $00a3
   44 00:46E4 01 2C -  -  	.db	1,","              ; $00a4
   45 00:46E6 01 3A -  -  	.db	1,":"              ; $00a5
   46 00:46E8 01 3B -  -  	.db	1,";"              ; $00a6
   47 00:46EA 01 27 -  -  	.db	1,"'"              ; $00a7
   48 00:46EC 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 00:46F3 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 00:46F9 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 00:46FC 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 00:4701 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 00:4706 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 00:470A 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 00:470D 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 00:4712 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 00:4717 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 00:471B 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 00:4720 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 00:4728 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 00:472E 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 00:4732 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 00:4736 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 00:473A 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 00:473E 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 00:4744 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 00:4749 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 00:474E 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 00:4753 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 00:4757 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 00:475B 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 00:4760 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 00:4765 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 00:476D 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 00:4774 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 00:477A 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 00:477E 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 00:4783 00 -  -  -  	.db	0
   79 00:4784 -  -  -  -  ;
   80 00:4784 -  -  -  -  ;	Keywords for set 1
   81 00:4784 -  -  -  -  ;
   82 00:4784 -  -  -  -  KeywordsSet1:
   83 00:4784 00 -  -  -  	.db	0
   84 00:4785 -  -  -  -  ;
   85 00:4785 -  -  -  -  ;	Keywords for set 2
   86 00:4785 -  -  -  -  ;
   87 00:4785 -  -  -  -  KeywordsSet2:
   88 00:4785 00 -  -  -  	.db	0
Listing for file "_build.asm"
   51 00:4786 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4786 -  -  -  -  ;
    2 00:4786 -  -  -  -  ;	This file is automatically generated.
    3 00:4786 -  -  -  -  ;
    4 00:4786 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 00:47A0 -  -  -  -  PrecedenceTable:
    6 00:47A0 06 -  -  -  	.db	6	; $0083 !
    7 00:47A1 06 -  -  -  	.db	6	; $0084 ?
    8 00:47A2 05 -  -  -  	.db	5	; $0085 *
    9 00:47A3 05 -  -  -  	.db	5	; $0086 /
   10 00:47A4 05 -  -  -  	.db	5	; $0087 mod
   11 00:47A5 05 -  -  -  	.db	5	; $0088 div
   12 00:47A6 04 -  -  -  	.db	4	; $0089 +
   13 00:47A7 04 -  -  -  	.db	4	; $008a -
   14 00:47A8 03 -  -  -  	.db	3	; $008b >=
   15 00:47A9 03 -  -  -  	.db	3	; $008c <=
   16 00:47AA 03 -  -  -  	.db	3	; $008d >
   17 00:47AB 03 -  -  -  	.db	3	; $008e <
   18 00:47AC 03 -  -  -  	.db	3	; $008f =
   19 00:47AD 03 -  -  -  	.db	3	; $0090 <>
   20 00:47AE 02 -  -  -  	.db	2	; $0091 and
   21 00:47AF 01 -  -  -  	.db	1	; $0092 or
   22 00:47B0 01 -  -  -  	.db	1	; $0093 eor
   23 00:47B1 -  -  -  -  
Listing for file "_build.asm"
   52 00:47B1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:47B1 -  -  -  -  ;
    2 00:47B1 -  -  -  -  ;	This is automatically generated.
    3 00:47B1 -  -  -  -  ;
    4 00:47B1 -  -  -  -  ErrorIDTable:
    5 00:47B1 F1 47 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:47B5 F7 47 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:47B9 08 48 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:47BD 16 48 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:47C1 20 48 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:47C5 3A 48 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:47C9 4B 48 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:47CD 59 48 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:47D1 67 48 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:47D5 71 48 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:47D9 86 48 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:47DD 9C 48 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:47E1 AA 48 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:47E5 AF 48 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:47E9 BC 48 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:47ED CD 48 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:47F1 -  -  -  -  
   22 00:47F1 -  -  -  -  ErrText_warmstart:
   23 00:47F1 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:47F7 -  -  -  -  ErrText_assert:
   25 00:47F7 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:4808 -  -  -  -  ErrText_badtype:
   27 00:4808 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:4816 -  -  -  -  ErrText_badvalue:
   29 00:4816 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:4820 -  -  -  -  ErrText_disabled:
   31 00:4820 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:483A -  -  -  -  ErrText_divzero:
   33 00:483A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:484B -  -  -  -  ErrText_memory:
   35 00:484B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:4859 -  -  -  -  ErrText_nocomma:
   37 00:4859 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:4867 -  -  -  -  ErrText_nodollar:
   39 00:4867 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:4871 -  -  -  -  ErrText_nolbracket:
   41 00:4871 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:4886 -  -  -  -  ErrText_norbracket:
   43 00:4886 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:489C -  -  -  -  ErrText_notref:
   45 00:489C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:48AA -  -  -  -  ErrText_stop:
   47 00:48AA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:48AF -  -  -  -  ErrText_syntax:
   49 00:48AF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:48BC -  -  -  -  ErrText_todo:
   51 00:48BC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:48CD -  -  -  -  ErrText_unknownvar:
   53 00:48CD 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   53 00:48DE -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:48DE -  -  -  -  ;
    2 00:48DE -  -  -  -  ;	Vectors for set 0
    3 00:48DE -  -  -  -  ;
    4 00:48DE -  -  -  -  VectorsSet0:
    5 00:48DE D7 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:48E0 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:48E2 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:48E4 AF 42 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:48E6 B7 42 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:48E8 6D 42 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:48EA 78 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:48EC 83 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:48EE 78 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:48F0 57 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:48F2 62 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:48F4 0A 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:48F6 01 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:48F8 EF 42 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:48FA E6 42 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:48FC DD 42 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:48FE F8 42 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4900 8E 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4902 99 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4904 A4 42 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4906 DF 45 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4908 D9 45 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:490A 20 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:490C 46 45 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:490E 11 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4910 EE 44 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4912 C4 45 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4914 EC 45 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4916 00 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4918 F9 44 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:491A 29 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:491C 3B 45 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:491E 00 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4920 06 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4922 11 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4924 CE 40 -  -  	addr(BadCmd_RBracket)            ; $00a3 )
   41 00:4926 CE 40 -  -  	addr(BadCmd_Comma)               ; $00a4 ,
   42 00:4928 D1 40 -  -  	addr(Command_Colon)              ; $00a5 :
   43 00:492A CE 40 -  -  	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 00:492C 39 41 -  -  	addr(Command_REM2)               ; $00a7 '
   45 00:492E 1F 40 -  -  	addr(Unimplemented)              ; $00a8 repeat
   46 00:4930 1F 40 -  -  	addr(Unimplemented)              ; $00a9 until
   47 00:4932 1F 40 -  -  	addr(Unimplemented)              ; $00aa if
   48 00:4934 CE 40 -  -  	addr(BadCmd_Then)                ; $00ab then
   49 00:4936 1F 40 -  -  	addr(Unimplemented)              ; $00ac else
   50 00:4938 1F 40 -  -  	addr(Unimplemented)              ; $00ad for
   51 00:493A CE 40 -  -  	addr(BadCmd_To)                  ; $00ae to
   52 00:493C 1F 40 -  -  	addr(Unimplemented)              ; $00af step
   53 00:493E 1F 40 -  -  	addr(Unimplemented)              ; $00b0 next
   54 00:4940 CE 40 -  -  	addr(BadCmd_Defproc)             ; $00b1 def
   55 00:4942 1F 40 -  -  	addr(Unimplemented)              ; $00b2 proc
   56 00:4944 1F 40 -  -  	addr(Unimplemented)              ; $00b3 endproc
   57 00:4946 1F 40 -  -  	addr(Unimplemented)              ; $00b4 local
   58 00:4948 1F 40 -  -  	addr(Unimplemented)              ; $00b5 dim
   59 00:494A 39 41 -  -  	addr(Command_REM)                ; $00b6 rem
   60 00:494C 1F 40 -  -  	addr(Unimplemented)              ; $00b7 let
   61 00:494E 1F 40 -  -  	addr(Unimplemented)              ; $00b8 vdu
   62 00:4950 EA 40 -  -  	addr(Command_PRINT)              ; $00b9 print
   63 00:4952 1F 40 -  -  	addr(Unimplemented)              ; $00ba load
   64 00:4954 1F 40 -  -  	addr(Unimplemented)              ; $00bb save
   65 00:4956 1F 40 -  -  	addr(Unimplemented)              ; $00bc list
   66 00:4958 5F 46 -  -  	addr(Command_NEW)                ; $00bd new
   67 00:495A 54 41 -  -  	addr(Command_RUN)                ; $00be run
   68 00:495C 1F 40 -  -  	addr(Unimplemented)              ; $00bf read
   69 00:495E 1F 40 -  -  	addr(Unimplemented)              ; $00c0 data
   70 00:4960 1F 40 -  -  	addr(Unimplemented)              ; $00c1 restore
   71 00:4962 BF 40 -  -  	addr(Command_ASSERT)             ; $00c2 assert
   72 00:4964 23 46 -  -  	addr(Command_CLEAR)              ; $00c3 clear
   73 00:4966 D2 40 -  -  	addr(Command_END)                ; $00c4 end
   74 00:4968 B1 41 -  -  	addr(Command_STOP)               ; $00c5 stop
   75 00:496A -  -  -  -  ;
   76 00:496A -  -  -  -  ;	Vectors for set 1
   77 00:496A -  -  -  -  ;
   78 00:496A -  -  -  -  VectorsSet1:
   79 00:496A -  -  -  -  ;
   80 00:496A -  -  -  -  ;	Vectors for set 2
   81 00:496A -  -  -  -  ;
   82 00:496A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   54 00:496A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:496A -  -  -  -  ; ***************************************************************************************
    2 00:496A -  -  -  -  ; ***************************************************************************************
    3 00:496A -  -  -  -  ;
    4 00:496A -  -  -  -  ;		Name : 		idivide.asm
    5 00:496A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:496A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:496A -  -  -  -  ;		Reviewed :	No
    8 00:496A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:496A -  -  -  -  ;
   10 00:496A -  -  -  -  ; ***************************************************************************************
   11 00:496A -  -  -  -  ; ***************************************************************************************
   12 00:496A -  -  -  -  
   13 00:496A -  -  -  -  ; ***************************************************************************************
   14 00:496A -  -  -  -  ;
   15 00:496A -  -  -  -  ;								Unsigned integer divide
   16 00:496A -  -  -  -  ;
   17 00:496A -  -  -  -  ; ***************************************************************************************
   18 00:496A -  -  -  -  
   19 00:496A -  -  -  -  Int32UDivide:
   20 00:496A 37 -  -  -  		scf
   21 00:496B C3 A9 49 -  		jp 		_I32UnsignedDivide		
   22 00:496E -  -  -  -  
   23 00:496E -  -  -  -  ; ***************************************************************************************
   24 00:496E -  -  -  -  ;
   25 00:496E -  -  -  -  ;							Signed integer divide/Modulus
   26 00:496E -  -  -  -  ;
   27 00:496E -  -  -  -  ; ***************************************************************************************
   28 00:496E -  -  -  -  
   29 00:496E -  -  -  -  Int32SDivide:
   30 00:496E 37 -  -  -  		scf
   31 00:496F 18 01 -  -  		jr 		_I32SDivide
   32 00:4971 -  -  -  -  Int32Modulus:
   33 00:4971 AF -  -  -  		xor 	a
   34 00:4972 -  -  -  -  _I32SDivide:
   35 00:4972 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4973 F5 -  -  -  		push 	af
   37 00:4974 08 -  -  -  		ex 		af,af'
   38 00:4975 -  -  -  -  
   39 00:4975 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4976 D9 -  -  -  		exx
   41 00:4977 D5 -  -  -  		push 	de
   42 00:4978 D9 -  -  -  		exx
   43 00:4979 -  -  -  -  
   44 00:4979 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:497A AF -  -  -  		xor 	a 							; clear sign count.
   46 00:497B CD 97 49 -  		call 	_I32CheckHLSignSwap
   47 00:497E CD 97 49 -  		call 	_I32CheckHLSignSwap
   48 00:4981 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4982 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4983 F5 -  -  -  		push 	af
   51 00:4984 CD A9 49 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4987 F1 -  -  -  		pop 	af 							; get function back
   53 00:4988 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:498A 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:498B CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:498D C4 F3 4A -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4990 -  -  -  -  _I32SDExit:
   58 00:4990 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4991 D1 -  -  -  		pop 	de
   60 00:4992 D9 -  -  -  		exx
   61 00:4993 D1 -  -  -  		pop 	de
   62 00:4994 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4995 08 -  -  -  		ex 		af,af'
   64 00:4996 C9 -  -  -  		ret
   65 00:4997 -  -  -  -  
   66 00:4997 -  -  -  -  
   67 00:4997 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4997 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4998 CB 7C -  -  		bit 	7,h
   70 00:499A D9 -  -  -  		exx
   71 00:499B 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:499D -  -  -  -  		;
   73 00:499D C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:499F F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:49A0 CD F3 4A -  		call 	Int32Negate 				
   76 00:49A3 F1 -  -  -  		pop 	af
   77 00:49A4 -  -  -  -  _I32CHSPositive:
   78 00:49A4 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:49A5 EB -  -  -  		ex 		de,hl
   80 00:49A6 D9 -  -  -  		exx		
   81 00:49A7 EB -  -  -  		ex 		de,hl
   82 00:49A8 C9 -  -  -  		ret
   83 00:49A9 -  -  -  -  
   84 00:49A9 -  -  -  -  ; ***************************************************************************************
   85 00:49A9 -  -  -  -  ;
   86 00:49A9 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:49A9 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:49A9 -  -  -  -  ;
   89 00:49A9 -  -  -  -  ; ***************************************************************************************
   90 00:49A9 -  -  -  -  
   91 00:49A9 -  -  -  -  _I32UnsignedDivide:
   92 00:49A9 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:49AA D5 -  -  -  		push 	de
   94 00:49AB D9 -  -  -  		exx
   95 00:49AC C5 -  -  -  		push 	bc
   96 00:49AD D5 -  -  -  		push 	de 							
   97 00:49AE D9 -  -  -  		exx
   98 00:49AF -  -  -  -  
   99 00:49AF F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:49B0 -  -  -  -  
  101 00:49B0 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:49B1 B3 -  -  -  		or 		e
  103 00:49B2 D9 -  -  -  		exx
  104 00:49B3 B2 -  -  -  		or 		d
  105 00:49B4 B3 -  -  -  		or 		e
  106 00:49B5 D9 -  -  -  		exx
  107 00:49B6 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:49B9 -  -  -  -  
  109 00:49B9 -  -  -  -  
  110 00:49B9 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:49BA 4D -  -  -  		ld		c,l
  112 00:49BB 21 00 00 -  		ld 		hl,$0000
  113 00:49BE D9 -  -  -  		exx
  114 00:49BF 44 -  -  -  		ld 		b,h
  115 00:49C0 4D -  -  -  		ld		c,l
  116 00:49C1 21 00 00 -  		ld 		hl,$0000
  117 00:49C4 D9 -  -  -  		exx
  118 00:49C5 -  -  -  -  
  119 00:49C5 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:49C7 -  -  -  -  _I32DivideLoop:
  121 00:49C7 F5 -  -  -  		push 	af
  122 00:49C8 -  -  -  -  
  123 00:49C8 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:49CA CB 10 -  -  		rl 		b
  125 00:49CC D9 -  -  -  		exx
  126 00:49CD CB 11 -  -  		rl 		c
  127 00:49CF CB 10 -  -  		rl 		b
  128 00:49D1 D9 -  -  -  		exx
  129 00:49D2 CB 15 -  -  		rl 		l
  130 00:49D4 CB 14 -  -  		rl 		h
  131 00:49D6 D9 -  -  -  		exx
  132 00:49D7 CB 15 -  -  		rl 		l
  133 00:49D9 CB 14 -  -  		rl 		h
  134 00:49DB D9 -  -  -  		exx
  135 00:49DC -  -  -  -  
  136 00:49DC CD 99 4A -  		call 	Int32Subtract 				; A = A - M
  137 00:49DF 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:49E1 -  -  -  -  
  139 00:49E1 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:49E2 18 03 -  -  		jr 		_I32Next
  141 00:49E4 -  -  -  -  
  142 00:49E4 -  -  -  -  _I32Borrow:
  143 00:49E4 CD 93 4A -  		call 	Int32Add 					; A = A + M
  144 00:49E7 -  -  -  -  _I32Next:
  145 00:49E7 F1 -  -  -  		pop 	af
  146 00:49E8 3D -  -  -  		dec 	a
  147 00:49E9 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:49EB -  -  -  -  
  149 00:49EB F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:49EC -  -  -  -  
  151 00:49EC 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:49ED 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:49EF -  -  -  -  
  154 00:49EF 60 -  -  -  		ld  	h,b
  155 00:49F0 69 -  -  -  		ld 		l,c
  156 00:49F1 D9 -  -  -  		exx
  157 00:49F2 60 -  -  -  		ld  	h,b
  158 00:49F3 69 -  -  -  		ld 		l,c
  159 00:49F4 D9 -  -  -  		exx
  160 00:49F5 -  -  -  -  _I32Modulus1:		
  161 00:49F5 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:49F6 D1 -  -  -  		pop 	de
  163 00:49F7 C1 -  -  -  		pop 	bc
  164 00:49F8 D9 -  -  -  		exx
  165 00:49F9 D1 -  -  -  		pop 	de
  166 00:49FA C1 -  -  -  		pop 	bc
  167 00:49FB C9 -  -  -  		ret
  168 00:49FC -  -  -  -  
  169 00:49FC -  -  -  -  ; ***************************************************************************************
  170 00:49FC -  -  -  -  ;
  171 00:49FC -  -  -  -  ;									Changes and Updates
  172 00:49FC -  -  -  -  ;
  173 00:49FC -  -  -  -  ; ***************************************************************************************
  174 00:49FC -  -  -  -  ;
  175 00:49FC -  -  -  -  ;		Date			Notes
  176 00:49FC -  -  -  -  ;		==== 			=====
  177 00:49FC -  -  -  -  ;
  178 00:49FC -  -  -  -  ; ***************************************************************************************
  179 00:49FC -  -  -  -  		
Listing for file "_build.asm"
   55 00:49FC -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:49FC -  -  -  -  ; ***************************************************************************************
    2 00:49FC -  -  -  -  ; ***************************************************************************************
    3 00:49FC -  -  -  -  ;
    4 00:49FC -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:49FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49FC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49FC -  -  -  -  ;		Reviewed :	No
    8 00:49FC -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:49FC -  -  -  -  ;
   10 00:49FC -  -  -  -  ; ***************************************************************************************
   11 00:49FC -  -  -  -  ; ***************************************************************************************
   12 00:49FC -  -  -  -  
   13 00:49FC -  -  -  -  ; ***************************************************************************************
   14 00:49FC -  -  -  -  ;
   15 00:49FC -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:49FC -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:49FC -  -  -  -  ;
   18 00:49FC -  -  -  -  ; ***************************************************************************************
   19 00:49FC -  -  -  -  
   20 00:49FC -  -  -  -  Int32FromString:
   21 00:49FC C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:49FD D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:49FE D5 -  -  -  		push 	de
   24 00:49FF D9 -  -  -  		exx
   25 00:4A00 D5 -  -  -  		push 	de
   26 00:4A01 -  -  -  -  
   27 00:4A01 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4A04 11 00 00 -  		ld 		de,$0000
   29 00:4A07 D9 -  -  -  		exx
   30 00:4A08 21 00 00 -  		ld 		hl,$0000
   31 00:4A0B 11 00 00 -  		ld 		de,$0000
   32 00:4A0E D9 -  -  -  		exx
   33 00:4A0F -  -  -  -  
   34 00:4A0F 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4A10 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4A12 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4A14 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4A16 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4A17 -  -  -  -  		;
   40 00:4A17 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4A18 F5 -  -  -  		push 	af
   42 00:4A19 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4A1B 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4A1C 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4A1E 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4A1F 18 01 -  -  		jr 		_I32FSMain
   47 00:4A21 -  -  -  -  _I32FSNotSigned:		
   48 00:4A21 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4A22 -  -  -  -  		;
   50 00:4A22 -  -  -  -  		; 		Main conversion loop.
   51 00:4A22 -  -  -  -  		; 		
   52 00:4A22 -  -  -  -  _I32FSMain:		
   53 00:4A22 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4A23 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4A25 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4A27 D6 20 -  -  		sub 	32
   57 00:4A29 -  -  -  -  _I32FSNotLower:
   58 00:4A29 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4A2B 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4A2D FE 3A -  -  		cp 		'9'+1
   61 00:4A2F 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4A31 FE 41 -  -  		cp 		'A'
   63 00:4A33 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4A35 FE 47 -  -  		cp 		'F'+1
   65 00:4A37 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4A39 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4A3B -  -  -  -  _I32FSOkay:
   68 00:4A3B D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4A3D BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4A3E 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4A40 03 -  -  -  		inc 	bc 							; consume character
   72 00:4A41 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4A42 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4A43 CD 5D 4A -  		call 	Int32Multiply 				; result *= base
   75 00:4A46 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4A47 5F -  -  -  		ld 		e,a
   77 00:4A48 CD 93 4A -  		call 	Int32Add 					; and add it.
   78 00:4A4B D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4A4C 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4A4E -  -  -  -  
   81 00:4A4E -  -  -  -  _I32FSExit:
   82 00:4A4E F1 -  -  -  		pop 	af 							; get sign back
   83 00:4A4F FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4A51 CC F3 4A -  		call 	z,Int32Negate
   85 00:4A54 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4A55 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4A56 D9 -  -  -  		exx
   88 00:4A57 D1 -  -  -  		pop 	de
   89 00:4A58 D9 -  -  -  		exx
   90 00:4A59 C1 -  -  -  		pop 	bc
   91 00:4A5A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4A5C C9 -  -  -  		ret				
   93 00:4A5D -  -  -  -  
   94 00:4A5D -  -  -  -  ; ***************************************************************************************
   95 00:4A5D -  -  -  -  ;
   96 00:4A5D -  -  -  -  ;									Changes and Updates
   97 00:4A5D -  -  -  -  ;
   98 00:4A5D -  -  -  -  ; ***************************************************************************************
   99 00:4A5D -  -  -  -  ;
  100 00:4A5D -  -  -  -  ;		Date			Notes
  101 00:4A5D -  -  -  -  ;		==== 			=====
  102 00:4A5D -  -  -  -  ;
  103 00:4A5D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4A5D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4A5D -  -  -  -  ; ***************************************************************************************
    2 00:4A5D -  -  -  -  ; ***************************************************************************************
    3 00:4A5D -  -  -  -  ;
    4 00:4A5D -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4A5D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A5D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A5D -  -  -  -  ;		Reviewed :	No
    8 00:4A5D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4A5D -  -  -  -  ;
   10 00:4A5D -  -  -  -  ; ***************************************************************************************
   11 00:4A5D -  -  -  -  ; ***************************************************************************************
   12 00:4A5D -  -  -  -  
   13 00:4A5D -  -  -  -  Int32Multiply:
   14 00:4A5D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4A5E D5 -  -  -  		push 	de
   16 00:4A5F 44 -  -  -  		ld 		b,h
   17 00:4A60 4D -  -  -  		ld 		c,l
   18 00:4A61 21 00 00 -  		ld 		hl,$0000
   19 00:4A64 -  -  -  -  
   20 00:4A64 D9 -  -  -  		exx
   21 00:4A65 C5 -  -  -  		push 	bc
   22 00:4A66 D5 -  -  -  		push 	de
   23 00:4A67 44 -  -  -  		ld 		b,h
   24 00:4A68 4D -  -  -  		ld 		c,l
   25 00:4A69 21 00 00 -  		ld 		hl,$0000		
   26 00:4A6C D9 -  -  -  		exx
   27 00:4A6D -  -  -  -  
   28 00:4A6D -  -  -  -  _I32MultiplyLoop:
   29 00:4A6D CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4A6F C4 93 4A -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4A72 -  -  -  -  		;
   32 00:4A72 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4A73 CB 38 -  -  		srl 	b
   34 00:4A75 CB 19 -  -  		rr 		c
   35 00:4A77 D9 -  -  -  		exx
   36 00:4A78 CB 18 -  -  		rr 		b
   37 00:4A7A CB 19 -  -  		rr 		c
   38 00:4A7C -  -  -  -  		;
   39 00:4A7C CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4A7E CB 12 -  -  		rl 		d
   41 00:4A80 D9 -  -  -  		exx
   42 00:4A81 CB 13 -  -  		rl 		e
   43 00:4A83 CB 12 -  -  		rl 		d
   44 00:4A85 -  -  -  -  
   45 00:4A85 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4A86 B1 -  -  -  		or 		c
   47 00:4A87 D9 -  -  -  		exx
   48 00:4A88 B0 -  -  -  		or 		b
   49 00:4A89 B1 -  -  -  		or 		c
   50 00:4A8A 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4A8C -  -  -  -  
   52 00:4A8C D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4A8D D1 -  -  -  		pop 	de
   54 00:4A8E C1 -  -  -  		pop 	bc
   55 00:4A8F D9 -  -  -  		exx
   56 00:4A90 D1 -  -  -  		pop 	de
   57 00:4A91 C1 -  -  -  		pop 	bc
   58 00:4A92 C9 -  -  -  		ret
   59 00:4A93 -  -  -  -  
   60 00:4A93 -  -  -  -  ; ***************************************************************************************
   61 00:4A93 -  -  -  -  ;
   62 00:4A93 -  -  -  -  ;									Changes and Updates
   63 00:4A93 -  -  -  -  ;
   64 00:4A93 -  -  -  -  ; ***************************************************************************************
   65 00:4A93 -  -  -  -  ;
   66 00:4A93 -  -  -  -  ;		Date			Notes
   67 00:4A93 -  -  -  -  ;		==== 			=====
   68 00:4A93 -  -  -  -  ;
   69 00:4A93 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:4A93 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4A93 -  -  -  -  ; ***************************************************************************************
    2 00:4A93 -  -  -  -  ; ***************************************************************************************
    3 00:4A93 -  -  -  -  ;
    4 00:4A93 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4A93 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A93 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A93 -  -  -  -  ;		Reviewed :	No
    8 00:4A93 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4A93 -  -  -  -  ;
   10 00:4A93 -  -  -  -  ; ***************************************************************************************
   11 00:4A93 -  -  -  -  ; ***************************************************************************************
   12 00:4A93 -  -  -  -  
   13 00:4A93 -  -  -  -  ; ***************************************************************************************
   14 00:4A93 -  -  -  -  ;
   15 00:4A93 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4A93 -  -  -  -  ;
   17 00:4A93 -  -  -  -  ; ***************************************************************************************
   18 00:4A93 -  -  -  -  
   19 00:4A93 -  -  -  -  Int32Add:
   20 00:4A93 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4A94 D9 -  -  -  		exx
   22 00:4A95 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4A97 D9 -  -  -  		exx
   24 00:4A98 C9 -  -  -  		ret
   25 00:4A99 -  -  -  -  
   26 00:4A99 -  -  -  -  ; ***************************************************************************************
   27 00:4A99 -  -  -  -  ;
   28 00:4A99 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4A99 -  -  -  -  ;
   30 00:4A99 -  -  -  -  ; ***************************************************************************************
   31 00:4A99 -  -  -  -  
   32 00:4A99 -  -  -  -  Int32Subtract:
   33 00:4A99 AF -  -  -  		xor 	a 							; clear carry
   34 00:4A9A ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4A9C D9 -  -  -  		exx
   36 00:4A9D ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4A9F D9 -  -  -  		exx
   38 00:4AA0 C9 -  -  -  		ret
   39 00:4AA1 -  -  -  -  
   40 00:4AA1 -  -  -  -  ; ***************************************************************************************
   41 00:4AA1 -  -  -  -  ;
   42 00:4AA1 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4AA1 -  -  -  -  ;
   44 00:4AA1 -  -  -  -  ; ***************************************************************************************
   45 00:4AA1 -  -  -  -  
   46 00:4AA1 -  -  -  -  Int32And:
   47 00:4AA1 D9 -  -  -  		exx
   48 00:4AA2 CD A6 4A -  		call 	_I32AndHLDE
   49 00:4AA5 D9 -  -  -  		exx
   50 00:4AA6 -  -  -  -  _I32AndHLDE:		
   51 00:4AA6 7C -  -  -  		ld 		a,h
   52 00:4AA7 A2 -  -  -  		and 	d
   53 00:4AA8 67 -  -  -  		ld 		h,a
   54 00:4AA9 7D -  -  -  		ld 		a,l
   55 00:4AAA A3 -  -  -  		and 	e
   56 00:4AAB 6F -  -  -  		ld 		l,a
   57 00:4AAC C9 -  -  -  		ret
   58 00:4AAD -  -  -  -  
   59 00:4AAD -  -  -  -  ; ***************************************************************************************
   60 00:4AAD -  -  -  -  ;
   61 00:4AAD -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4AAD -  -  -  -  ;
   63 00:4AAD -  -  -  -  ; ***************************************************************************************
   64 00:4AAD -  -  -  -  
   65 00:4AAD -  -  -  -  Int32Or:
   66 00:4AAD D9 -  -  -  		exx
   67 00:4AAE CD B2 4A -  		call 	_I32OrHLDE
   68 00:4AB1 D9 -  -  -  		exx
   69 00:4AB2 -  -  -  -  _I32OrHLDE:		
   70 00:4AB2 7C -  -  -  		ld 		a,h
   71 00:4AB3 B2 -  -  -  		or 		d
   72 00:4AB4 67 -  -  -  		ld 		h,a
   73 00:4AB5 7D -  -  -  		ld 		a,l
   74 00:4AB6 B3 -  -  -  		or 		e
   75 00:4AB7 6F -  -  -  		ld 		l,a
   76 00:4AB8 C9 -  -  -  		ret
   77 00:4AB9 -  -  -  -  
   78 00:4AB9 -  -  -  -  ; ***************************************************************************************
   79 00:4AB9 -  -  -  -  ;
   80 00:4AB9 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4AB9 -  -  -  -  ;
   82 00:4AB9 -  -  -  -  ; ***************************************************************************************
   83 00:4AB9 -  -  -  -  
   84 00:4AB9 -  -  -  -  Int32Xor:
   85 00:4AB9 D9 -  -  -  		exx
   86 00:4ABA CD BE 4A -  		call 	_I32XorHLDE
   87 00:4ABD D9 -  -  -  		exx
   88 00:4ABE -  -  -  -  _I32XorHLDE:		
   89 00:4ABE 7C -  -  -  		ld 		a,h
   90 00:4ABF AA -  -  -  		xor 	d
   91 00:4AC0 67 -  -  -  		ld 		h,a
   92 00:4AC1 7D -  -  -  		ld 		a,l
   93 00:4AC2 AB -  -  -  		xor 	e
   94 00:4AC3 6F -  -  -  		ld 		l,a
   95 00:4AC4 C9 -  -  -  		ret
   96 00:4AC5 -  -  -  -  
   97 00:4AC5 -  -  -  -  ; ***************************************************************************************
   98 00:4AC5 -  -  -  -  ;
   99 00:4AC5 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4AC5 -  -  -  -  ;
  101 00:4AC5 -  -  -  -  ; ***************************************************************************************
  102 00:4AC5 -  -  -  -  
  103 00:4AC5 -  -  -  -  Int32Zero:
  104 00:4AC5 D9 -  -  -  		exx
  105 00:4AC6 7D -  -  -  		ld 		a,l
  106 00:4AC7 B4 -  -  -  		or 		h
  107 00:4AC8 D9 -  -  -  		exx
  108 00:4AC9 B5 -  -  -  		or 		l
  109 00:4ACA B4 -  -  -  		or 		h
  110 00:4ACB C9 -  -  -  		ret
  111 00:4ACC -  -  -  -  
  112 00:4ACC -  -  -  -  ; ***************************************************************************************
  113 00:4ACC -  -  -  -  ;
  114 00:4ACC -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4ACC -  -  -  -  ;
  116 00:4ACC -  -  -  -  ; ***************************************************************************************
  117 00:4ACC -  -  -  -  
  118 00:4ACC -  -  -  -  Int32Compare:
  119 00:4ACC E5 -  -  -  		push 	hl 							; save HL
  120 00:4ACD AF -  -  -  		xor 	a 							; clear carry
  121 00:4ACE ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4AD0 D9 -  -  -  		exx
  123 00:4AD1 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4AD2 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4AD4 -  -  -  -  		;
  126 00:4AD4 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4AD5 E2 DC 4A -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4AD8 78 -  -  -  		ld 		a,b
  129 00:4AD9 EE 80 -  -  		xor 	$80
  130 00:4ADB 47 -  -  -  		ld 		b,a
  131 00:4ADC -  -  -  -  _I32CNoOverflow:
  132 00:4ADC 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4ADD B5 -  -  -  		or 		l
  134 00:4ADE D9 -  -  -  		exx 
  135 00:4ADF B4 -  -  -  		or 		h
  136 00:4AE0 B5 -  -  -  		or 		l
  137 00:4AE1 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4AE3 -  -  -  -  		;
  139 00:4AE3 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4AE4 CB 78 -  -  		bit 	7,b
  141 00:4AE6 D9 -  -  -  		exx
  142 00:4AE7 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4AE9 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4AEB 3E FF -  -  		ld 		a,$FF
  145 00:4AED -  -  -  -  _I32NotPos:
  146 00:4AED D9 -  -  -  		exx
  147 00:4AEE E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4AEF D9 -  -  -  		exx
  149 00:4AF0 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4AF1 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4AF2 C9 -  -  -  		ret
  152 00:4AF3 -  -  -  -  
  153 00:4AF3 -  -  -  -  ; ***************************************************************************************
  154 00:4AF3 -  -  -  -  ;
  155 00:4AF3 -  -  -  -  ;										Negate HL'HL
  156 00:4AF3 -  -  -  -  ;
  157 00:4AF3 -  -  -  -  ; ***************************************************************************************
  158 00:4AF3 -  -  -  -  
  159 00:4AF3 -  -  -  -  Int32Negate:
  160 00:4AF3 AF -  -  -  		xor 	a
  161 00:4AF4 CD FD 4A -  		call 	_I32NSubtract
  162 00:4AF7 D9 -  -  -  		exx
  163 00:4AF8 CD FD 4A -  		call 	_I32NSubtract
  164 00:4AFB D9 -  -  -  		exx
  165 00:4AFC C9 -  -  -  		ret
  166 00:4AFD -  -  -  -  _I32NSubtract:
  167 00:4AFD D5 -  -  -  		push 	de
  168 00:4AFE EB -  -  -  		ex 		de,hl
  169 00:4AFF 21 00 00 -  		ld 		hl,$0000
  170 00:4B02 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4B04 D1 -  -  -  		pop 	de
  172 00:4B05 C9 -  -  -  		ret
  173 00:4B06 -  -  -  -  		
  174 00:4B06 -  -  -  -  ; ***************************************************************************************
  175 00:4B06 -  -  -  -  ;
  176 00:4B06 -  -  -  -  ;									Changes and Updates
  177 00:4B06 -  -  -  -  ;
  178 00:4B06 -  -  -  -  ; ***************************************************************************************
  179 00:4B06 -  -  -  -  ;
  180 00:4B06 -  -  -  -  ;		Date			Notes
  181 00:4B06 -  -  -  -  ;		==== 			=====
  182 00:4B06 -  -  -  -  ;
  183 00:4B06 -  -  -  -  ; ***************************************************************************************
  184 00:4B06 -  -  -  -  		
Listing for file "_build.asm"
   58 00:4B06 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4B06 -  -  -  -  ; ***************************************************************************************
    2 00:4B06 -  -  -  -  ; ***************************************************************************************
    3 00:4B06 -  -  -  -  ;
    4 00:4B06 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4B06 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B06 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B06 -  -  -  -  ;		Reviewed :	No
    8 00:4B06 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4B06 -  -  -  -  ;
   10 00:4B06 -  -  -  -  ; ***************************************************************************************
   11 00:4B06 -  -  -  -  ;
   12 00:4B06 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4B06 -  -  -  -  ;
   14 00:4B06 -  -  -  -  ; ***************************************************************************************
   15 00:4B06 -  -  -  -  
   16 00:4B06 -  -  -  -  Int32ToString:
   17 00:4B06 C5 -  -  -  		push 	bc 							; save string start
   18 00:4B07 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4B08 E5 -  -  -  		push 	hl
   20 00:4B09 11 00 00 -  		ld	 	de,$0000
   21 00:4B0C D9 -  -  -  		exx
   22 00:4B0D D5 -  -  -  		push 	de
   23 00:4B0E E5 -  -  -  		push 	hl
   24 00:4B0F 11 00 00 -  		ld 		de,$000
   25 00:4B12 D9 -  -  -  		exx
   26 00:4B13 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4B14 -  -  -  -  		;
   28 00:4B14 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4B16 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4B18 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4B1A 5F -  -  -  		ld 		e,a
   32 00:4B1B -  -  -  -  		;
   33 00:4B1B D9 -  -  -  		exx 								; is it -ve ?
   34 00:4B1C CB 7C -  -  		bit 	7,h
   35 00:4B1E D9 -  -  -  		exx
   36 00:4B1F 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4B21 -  -  -  -  		;
   38 00:4B21 CD F3 4A -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4B24 -  -  -  -  		;
   40 00:4B24 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4B26 02 -  -  -  		ld 		(bc),a
   42 00:4B27 03 -  -  -  		inc 	bc
   43 00:4B28 -  -  -  -  _I32TSNotNegative:	
   44 00:4B28 CD 36 4B -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4B2B -  -  -  -  _I32TSExit:
   46 00:4B2B 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4B2D 02 -  -  -  		ld 		(bc),a 
   48 00:4B2E -  -  -  -  
   49 00:4B2E D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4B2F E1 -  -  -  		pop 	hl
   51 00:4B30 D1 -  -  -  		pop 	de
   52 00:4B31 D9 -  -  -  		exx
   53 00:4B32 E1 -  -  -  		pop 	hl
   54 00:4B33 D1 -  -  -  		pop 	de
   55 00:4B34 C1 -  -  -  		pop 	bc
   56 00:4B35 C9 -  -  -  		ret
   57 00:4B36 -  -  -  -  
   58 00:4B36 -  -  -  -  _I32RecursiveConvert:
   59 00:4B36 CD 6A 49 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4B39 F5 -  -  -  		push 	af 							; save remainder
   61 00:4B3A CD C5 4A -  		call 	Int32Zero		 			; check result is non zero
   62 00:4B3D C4 36 4B -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4B40 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4B41 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4B43 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4B45 C6 07 -  -  		add 	a,7
   67 00:4B47 -  -  -  -  _I32NotHex:
   68 00:4B47 C6 30 -  -  		add 	a,48
   69 00:4B49 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4B4A 03 -  -  -  		inc 	bc
   71 00:4B4B C9 -  -  -  		ret		
   72 00:4B4C -  -  -  -  
   73 00:4B4C -  -  -  -  ; ***************************************************************************************
   74 00:4B4C -  -  -  -  ;
   75 00:4B4C -  -  -  -  ;									Changes and Updates
   76 00:4B4C -  -  -  -  ;
   77 00:4B4C -  -  -  -  ; ***************************************************************************************
   78 00:4B4C -  -  -  -  ;
   79 00:4B4C -  -  -  -  ;		Date			Notes
   80 00:4B4C -  -  -  -  ;		==== 			=====
   81 00:4B4C -  -  -  -  ;
   82 00:4B4C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:4B4C -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4B4C -  -  -  -  ; ***************************************************************************************
    2 00:4B4C -  -  -  -  ; ***************************************************************************************
    3 00:4B4C -  -  -  -  ;
    4 00:4B4C -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4B4C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B4C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B4C -  -  -  -  ;		Reviewed :	No
    8 00:4B4C -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4B4C -  -  -  -  ;
   10 00:4B4C -  -  -  -  ; ***************************************************************************************
   11 00:4B4C -  -  -  -  ; ***************************************************************************************
   12 00:4B4C -  -  -  -  
   13 00:4B4C -  -  -  -  #ifdef AQUARIUS
   14 00:4B4C -  -  -  -  
   15 00:4B4C -  -  -  -  ; ***************************************************************************************
   16 00:4B4C -  -  -  -  ;
   17 00:4B4C -  -  -  -  ;								Initialise system stuff
   18 00:4B4C -  -  -  -  ;
   19 00:4B4C -  -  -  -  ; ***************************************************************************************
   20 00:4B4C -  -  -  -  
   21 00:4B4C -  -  -  -  SYSInitialise:
   22 00:4B4C 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4B4E CD 54 4B -  	call 	SYSPrintChar
   24 00:4B51 C9 -  -  -  	ret
   25 00:4B52 -  -  -  -  
   26 00:4B52 -  -  -  -  ; ***************************************************************************************
   27 00:4B52 -  -  -  -  ;
   28 00:4B52 -  -  -  -  ;								Terminate system stuff
   29 00:4B52 -  -  -  -  ;
   30 00:4B52 -  -  -  -  ; ***************************************************************************************
   31 00:4B52 -  -  -  -  
   32 00:4B52 -  -  -  -  SYSTerminate:
   33 00:4B52 18 FE -  -  	jr 		SYSTerminate
   34 00:4B54 -  -  -  -  
   35 00:4B54 -  -  -  -  ; ***************************************************************************************
   36 00:4B54 -  -  -  -  ;
   37 00:4B54 -  -  -  -  ;								Print A character
   38 00:4B54 -  -  -  -  ;
   39 00:4B54 -  -  -  -  ; ***************************************************************************************
   40 00:4B54 -  -  -  -  
   41 00:4B54 -  -  -  -  SYSPrintChar:
   42 00:4B54 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4B55 C5 -  -  -  	push 	bc
   44 00:4B56 D5 -  -  -  	push 	de
   45 00:4B57 E5 -  -  -  	push 	hl
   46 00:4B58 DD E5 -  -  	push 	ix
   47 00:4B5A FD E5 -  -  	push 	iy
   48 00:4B5C D9 -  -  -  	exx
   49 00:4B5D C5 -  -  -  	push 	bc
   50 00:4B5E D5 -  -  -  	push 	de
   51 00:4B5F E5 -  -  -  	push 	hl
   52 00:4B60 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4B63 E1 -  -  -  	pop 	hl
   54 00:4B64 D1 -  -  -  	pop 	de
   55 00:4B65 C1 -  -  -  	pop 	bc
   56 00:4B66 D9 -  -  -  	exx
   57 00:4B67 FD E1 -  -  	pop 	iy
   58 00:4B69 DD E1 -  -  	pop 	ix
   59 00:4B6B E1 -  -  -  	pop 	hl
   60 00:4B6C D1 -  -  -  	pop 	de
   61 00:4B6D C1 -  -  -  	pop 	bc
   62 00:4B6E F1 -  -  -  	pop 	af
   63 00:4B6F C9 -  -  -  	ret		
   64 00:4B70 -  -  -  -  
   65 00:4B70 -  -  -  -  ; ***************************************************************************************
   66 00:4B70 -  -  -  -  ;
   67 00:4B70 -  -  -  -  ;									Print Newline
   68 00:4B70 -  -  -  -  ;
   69 00:4B70 -  -  -  -  ; ***************************************************************************************
   70 00:4B70 -  -  -  -  
   71 00:4B70 -  -  -  -  SYSPrintCRLF:
   72 00:4B70 F5 -  -  -  	push 	af
   73 00:4B71 3E 0D -  -  	ld 		a,13
   74 00:4B73 CD 54 4B -  	call 	SYSPrintChar
   75 00:4B76 3E 0A -  -  	ld 		a,10
   76 00:4B78 CD 54 4B -  	call 	SYSPrintChar
   77 00:4B7B F1 -  -  -  	pop 	af
   78 00:4B7C C9 -  -  -  	ret
   79 00:4B7D -  -  -  -  
   80 00:4B7D -  -  -  -  ; ***************************************************************************************
   81 00:4B7D -  -  -  -  ;
   82 00:4B7D -  -  -  -  ;									Get time into HL'HL
   83 00:4B7D -  -  -  -  ;
   84 00:4B7D -  -  -  -  ; ***************************************************************************************
   85 00:4B7D -  -  -  -  
   86 00:4B7D -  -  -  -  SYSGetTimer:
   87 00:4B7D DB 00 -  -   	in 		a,($00)
   88 00:4B7F 6F -  -  -   	ld 		l,a
   89 00:4B80 DB 01 -  -   	in 		a,($01)
   90 00:4B82 67 -  -  -   	ld 		h,a
   91 00:4B83 D9 -  -  -   	exx
   92 00:4B84 DB 02 -  -   	in 		a,($02)
   93 00:4B86 6F -  -  -   	ld 		l,a
   94 00:4B87 DB 03 -  -   	in 		a,($03)
   95 00:4B89 67 -  -  -   	ld 		h,a
   96 00:4B8A D9 -  -  -   	exx
   97 00:4B8B C9 -  -  -  	ret 	
   98 00:4B8C -  -  -  -  	
   99 00:4B8C -  -  -  -  #endif
  100 00:4B8C -  -  -  -  
  101 00:4B8C -  -  -  -  ; ***************************************************************************************
  102 00:4B8C -  -  -  -  ;
  103 00:4B8C -  -  -  -  ;									Changes and Updates
  104 00:4B8C -  -  -  -  ;
  105 00:4B8C -  -  -  -  ; ***************************************************************************************
  106 00:4B8C -  -  -  -  ;
  107 00:4B8C -  -  -  -  ;		Date			Notes
  108 00:4B8C -  -  -  -  ;		==== 			=====
  109 00:4B8C -  -  -  -  ;
  110 00:4B8C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:4B8C -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4B8C -  -  -  -  ; ***************************************************************************************
    2 00:4B8C -  -  -  -  ; ***************************************************************************************
    3 00:4B8C -  -  -  -  ;
    4 00:4B8C -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4B8C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B8C -  -  -  -  ;		Reviewed :	No
    8 00:4B8C -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4B8C -  -  -  -  ;
   10 00:4B8C -  -  -  -  ; ***************************************************************************************
   11 00:4B8C -  -  -  -  ; ***************************************************************************************
   12 00:4B8C -  -  -  -  
   13 00:4B8C -  -  -  -  #ifdef CLEANEZ80
   14 00:4B8C             
   15 00:4B8C             ; ***************************************************************************************
   16 00:4B8C             ;
   17 00:4B8C             ;								Initialise system stuff
   18 00:4B8C             ;
   19 00:4B8C             ; ***************************************************************************************
   20 00:4B8C             
   21 00:4B8C             SYSInitialise:
   22 00:4B8C             	ret
   23 00:4B8C             
   24 00:4B8C             ; ***************************************************************************************
   25 00:4B8C             ;
   26 00:4B8C             ;								Terminate system stuff
   27 00:4B8C             ;
   28 00:4B8C             ; ***************************************************************************************
   29 00:4B8C             
   30 00:4B8C             SYSTerminate:
   31 00:4B8C             	ret
   32 00:4B8C             
   33 00:4B8C             ; ***************************************************************************************
   34 00:4B8C             ;
   35 00:4B8C             ;								Print A character
   36 00:4B8C             ;
   37 00:4B8C             ; ***************************************************************************************
   38 00:4B8C             
   39 00:4B8C             SYSPrintChar:
   40 00:4B8C             	ret		
   41 00:4B8C             
   42 00:4B8C             ; ***************************************************************************************
   43 00:4B8C             ;
   44 00:4B8C             ;									Print Newline
   45 00:4B8C             ;
   46 00:4B8C             ; ***************************************************************************************
   47 00:4B8C             
   48 00:4B8C             SYSPrintCRLF:
   49 00:4B8C             	ret
   50 00:4B8C             
   51 00:4B8C             ; ***************************************************************************************
   52 00:4B8C             ;
   53 00:4B8C             ;									Get time into HL'HL
   54 00:4B8C             ;
   55 00:4B8C             ; ***************************************************************************************
   56 00:4B8C             
   57 00:4B8C             SYSGetTimer:
   58 00:4B8C             	ret
   59 00:4B8C             
   60 00:4B8C             #endif
   61 00:4B8C -  -  -  -  
   62 00:4B8C -  -  -  -  ; ***************************************************************************************
   63 00:4B8C -  -  -  -  ;
   64 00:4B8C -  -  -  -  ;									Changes and Updates
   65 00:4B8C -  -  -  -  ;
   66 00:4B8C -  -  -  -  ; ***************************************************************************************
   67 00:4B8C -  -  -  -  ;
   68 00:4B8C -  -  -  -  ;		Date			Notes
   69 00:4B8C -  -  -  -  ;		==== 			=====
   70 00:4B8C -  -  -  -  ;
   71 00:4B8C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4B8C -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4B8C -  -  -  -  ; ***************************************************************************************
    2 00:4B8C -  -  -  -  ; ***************************************************************************************
    3 00:4B8C -  -  -  -  ;
    4 00:4B8C -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4B8C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B8C -  -  -  -  ;		Reviewed :	No
    8 00:4B8C -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4B8C -  -  -  -  ;
   10 00:4B8C -  -  -  -  ; ***************************************************************************************
   11 00:4B8C -  -  -  -  ; ***************************************************************************************
   12 00:4B8C -  -  -  -  
   13 00:4B8C -  -  -  -  #ifdef TI84
   14 00:4B8C             
   15 00:4B8C             ; ***************************************************************************************
   16 00:4B8C             ;
   17 00:4B8C             ;								Initialise system stuff
   18 00:4B8C             ;
   19 00:4B8C             ; ***************************************************************************************
   20 00:4B8C             
   21 00:4B8C             SYSInitialise:
   22 00:4B8C             	di
   23 00:4B8C             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4B8C             	ld 		(_IYTemp84),iy
   25 00:4B8C             	ret
   26 00:4B8C             
   27 00:4B8C             ; ***************************************************************************************
   28 00:4B8C             ;
   29 00:4B8C             ;								Terminate system stuff
   30 00:4B8C             ;
   31 00:4B8C             ; ***************************************************************************************
   32 00:4B8C             
   33 00:4B8C             SYSTerminate:
   34 00:4B8C             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4B8C             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4B8C             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4B8C             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4B8C             	ei
   39 00:4B8C             	ret 										; and exit.
   40 00:4B8C             
   41 00:4B8C             _StackTemp84:									; temp var for TI84 only.
   42 00:4B8C             	.dw 	0,0
   43 00:4B8C             _IYTemp84:
   44 00:4B8C             	.dw 	0,0		
   45 00:4B8C             
   46 00:4B8C             ; ***************************************************************************************
   47 00:4B8C             ;
   48 00:4B8C             ;								Print A character
   49 00:4B8C             ;
   50 00:4B8C             ; ***************************************************************************************
   51 00:4B8C             
   52 00:4B8C             SYSPrintChar:
   53 00:4B8C             	push 	af 									; we stack everything including alt registers
   54 00:4B8C             	push 	bc
   55 00:4B8C             	push 	de
   56 00:4B8C             	push 	hl
   57 00:4B8C             	push 	ix
   58 00:4B8C             	push 	iy
   59 00:4B8C             	exx
   60 00:4B8C             	push 	bc
   61 00:4B8C             	push 	de
   62 00:4B8C             	push 	hl
   63 00:4B8C             
   64 00:4B8C             	ld 		iy,(_IYTemp84)
   65 00:4B8C             	call 	_PutC 								; print A as character
   66 00:4B8C             	di
   67 00:4B8C             	ld 		(_IYTemp84),iy
   68 00:4B8C             
   69 00:4B8C             	pop 	hl
   70 00:4B8C             	pop 	de
   71 00:4B8C             	pop 	bc
   72 00:4B8C             	exx
   73 00:4B8C             	pop 	iy
   74 00:4B8C             	pop 	ix
   75 00:4B8C             	pop 	hl
   76 00:4B8C             	pop 	de
   77 00:4B8C             	pop 	bc
   78 00:4B8C             	pop 	af
   79 00:4B8C             	ret		
   80 00:4B8C             
   81 00:4B8C             ; ***************************************************************************************
   82 00:4B8C             ;
   83 00:4B8C             ;									Print Newline
   84 00:4B8C             ;
   85 00:4B8C             ; ***************************************************************************************
   86 00:4B8C             
   87 00:4B8C             SYSPrintCRLF:
   88 00:4B8C             	push 	af 									; we stack everything including alt registers
   89 00:4B8C             	push 	bc
   90 00:4B8C             	push 	de
   91 00:4B8C             	push 	hl
   92 00:4B8C             	push 	ix
   93 00:4B8C             	push 	iy
   94 00:4B8C             	exx
   95 00:4B8C             	push 	bc
   96 00:4B8C             	push 	de
   97 00:4B8C             	push 	hl
   98 00:4B8C             
   99 00:4B8C             	ld 		iy,(_IYTemp84)
  100 00:4B8C             	call 	_newline
  101 00:4B8C             	di
  102 00:4B8C             	ld 		(_IYTemp84),iy
  103 00:4B8C             
  104 00:4B8C             	pop 	hl
  105 00:4B8C             	pop 	de
  106 00:4B8C             	pop 	bc
  107 00:4B8C             	exx
  108 00:4B8C             	pop 	iy
  109 00:4B8C             	pop 	ix
  110 00:4B8C             	pop 	hl
  111 00:4B8C             	pop 	de
  112 00:4B8C             	pop 	bc
  113 00:4B8C             	pop 	af
  114 00:4B8C             	ret
  115 00:4B8C             
  116 00:4B8C             ; ***************************************************************************************
  117 00:4B8C             ;
  118 00:4B8C             ;									Get time into HL'HL
  119 00:4B8C             ;
  120 00:4B8C             ; ***************************************************************************************
  121 00:4B8C             
  122 00:4B8C             SYSGetTimer:
  123 00:4B8C             	ld 		hl,$1234
  124 00:4B8C             	exx
  125 00:4B8C             	ld 		hl,$5678
  126 00:4B8C             	exx
  127 00:4B8C             	ret
  128 00:4B8C             
  129 00:4B8C             #endif
  130 00:4B8C -  -  -  -  
  131 00:4B8C -  -  -  -  ; ***************************************************************************************
  132 00:4B8C -  -  -  -  ;
  133 00:4B8C -  -  -  -  ;									Changes and Updates
  134 00:4B8C -  -  -  -  ;
  135 00:4B8C -  -  -  -  ; ***************************************************************************************
  136 00:4B8C -  -  -  -  ;
  137 00:4B8C -  -  -  -  ;		Date			Notes
  138 00:4B8C -  -  -  -  ;		==== 			=====
  139 00:4B8C -  -  -  -  ;
  140 00:4B8C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4B8C -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4B8C -  -  -  -  ; ***************************************************************************************
    2 00:4B8C -  -  -  -  ; ***************************************************************************************
    3 00:4B8C -  -  -  -  ;
    4 00:4B8C -  -  -  -  ;		Name : 		basic.asm
    5 00:4B8C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B8C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B8C -  -  -  -  ;		Reviewed :	No
    8 00:4B8C -  -  -  -  ;		Purpose :	Main program.
    9 00:4B8C -  -  -  -  ;
   10 00:4B8C -  -  -  -  ; ***************************************************************************************
   11 00:4B8C -  -  -  -  ; ***************************************************************************************
   12 00:4B8C -  -  -  -  
   13 00:4B8C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:4C00 -  -  -  -  TestInstance:
   15 00:4C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4C00 -  -  -  -  ;
    2 00:4C00 -  -  -  -  ;	This code automatically generated.
    3 00:4C00 -  -  -  -  ;
    4 00:4C00 -  -  -  -  TestProgram:
    5 00:4C00 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 35 
              31 39 30 33 
              0D 80 0E 03 
              00 C2 98 95 
              3F 01 46 0D 
              A3 8F 41 80 
              12 04 00 C2 
              8A 8A 5D 6F 
              5D 53 71 8F 
              5D 6F 5D 53 
              71 80 12 05 
              00 C2 9D 95 
              3F 04 4F 66 
              73 6A 0D A3 
              8F 41 4F 80 
              1E 06 00 C2 
              A2 95 3F 0B 
              2D 31 39 31 
              38 31 35 33 
              38 38 30 0D 
              A3 8F 8A 41 
              72 55 4B 52 
              58 80 10 07 
              00 C2 9C 96 
              95 41 44 A3 
              8F 3F 01 44 
              0D 80 1D 08 
              00 C2 9B 96 
              95 8A 5F 75 
              4E 62 6D A3 
              8F 3F 0A 2D 
              35 33 34 30 
              34 36 38 39 
              33 0D 80 15 
              09 00 C2 99 
              95 41 6B 7A 
              70 6D 51 A3 
              8F 41 6B 7A 
              70 6D 51 80 
              14 0A 00 C2 
              8A 41 6C 48 
              72 77 4E 8F 
              8A 41 6C 48 
              72 77 4E 80 
              15 0B 00 C2 
              9E 95 42 75 
              63 48 6C 7A 
              A3 8F 41 4A 
              5C 77 53 45 
              80 0E 0C 00 
              C2 84 95 9F 
              89 50 A3 8F 
              41 4B 80 12 
              0D 00 C2 8A 
              8A 52 52 59 
              75 75 8F 52 
              52 59 75 75 
              80 14 0E 00 
              C2 9E 95 43 
              65 6F 4E 74 
              69 A3 8F 5A 
              50 71 4B 56 
              80 16 0F 00 
              C2 99 95 8A 
              41 45 48 7D 
              7F 5D A3 8F 
              41 45 48 7D 
              7F 5D 80 0E 
              10 00 C2 84 
              95 9F 89 49 
              A3 8F 41 44 
              80 15 11 00 
              C2 9E 95 41 
              64 53 5C 7A 
              6D A3 8F 42 
              5B 6C 63 45 
              52 80 1C 12 
              00 C2 A2 95 
              3F 0A 31 38 
              35 38 38 38 
              39 31 36 32 
              0D A3 8F 41 
              6E 73 46 57 
              4A 80 10 13 
              00 C2 9C 96 
              95 41 5A A3 
              8F 3F 01 5A 
              0D 80 1B 14 
              00 C2 9B 96 
              95 5D 7E 48 
              71 7A A3 8F 
              3F 09 35 30 
              32 38 32 38 
              31 35 34 0D 
              80 13 15 00 
              C2 83 95 9F 
              89 4B A3 8F 
              94 41 49 52 
              44 5D 46 80 
              0E 16 00 C2 
              84 95 9F 89 
              4D A3 8F 41 
              48 80 12 17 
              00 C2 8A 65 
              73 42 72 60 
              8F 8A 65 73 
              42 72 60 80 
              20 18 00 C2 
              96 95 9F 89 
              4F A3 8F 3F 
              11 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              1B 19 00 C2 
              96 95 9F 89 
              54 A3 8F 3F 
              0C 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 1A 
              1A 00 C2 A2 
              95 3F 09 35 
              35 35 39 33 
              30 32 33 33 
              0D A3 8F 61 
              48 6D 49 79 
              80 15 1B 00 
              C2 9E 95 41 
              66 5F 61 65 
              60 A3 8F 42 
              59 60 5E 5A 
              5F 80 13 1C 
              00 C2 9D 95 
              3F 05 47 70 
              6E 47 51 0D 
              A3 8F 41 47 
              80 11 1D 00 
              C2 9A 95 8A 
              61 57 5A 60 
              5D A3 8F 8A 
              41 80 13 1E 
              00 C2 83 95 
              9F 89 52 A3 
              8F 94 41 50 
              53 74 79 4D 
              80 13 1F 00 
              C2 83 95 9F 
              89 53 A3 8F 
              94 41 51 54 
              44 7D 4E 80 
              12 20 00 C2 
              8A 8A 4E 40 
              77 4A 59 8F 
              4E 40 77 4A 
              59 80 0D 21 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 15 
              22 00 C2 9D 
              95 3F 07 4C 
              4D 54 4A 57 
              47 42 0D A3 
              8F 41 4C 80 
              13 23 00 C2 
              94 41 58 52 
              4F 7A 77 8F 
              41 58 52 4F 
              7A 77 80 13 
              24 00 C2 83 
              95 9F 89 54 
              A3 8F 94 41 
              52 54 55 41 
              4F 80 1D 25 
              00 C2 9B 96 
              95 8A 56 76 
              66 71 4B A3 
              8F 3F 0A 2D 
              33 38 33 34 
              31 33 33 32 
              33 0D 80 0F 
              26 00 C2 9D 
              95 3F 01 63 
              0D A3 8F 41 
              63 80 26 27 
              00 C2 96 95 
              9F 89 49 A3 
              8F 3F 17 44 
              45 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              10 28 00 C2 
              9C 96 95 41 
              55 A3 8F 3F 
              01 55 0D 80 
              11 29 00 C2 
              9A 95 8A 48 
              48 5F 63 42 
              A3 8F 8A 41 
              80 14 2A 00 
              C2 8A 8A 41 
              67 7A 72 64 
              5E 8F 41 67 
              7A 72 64 5E 
              80 12 2B 00 
              C2 9A 95 8A 
              41 7C 40 66 
              5F 53 A3 8F 
              8A 41 80 16 
              2C 00 C2 99 
              95 8A 41 6D 
              40 6E 47 47 
              A3 8F 41 6D 
              40 6E 47 47 
              80 1E 2D 00 
              C2 A2 95 3F 
              0B 2D 31 33 
              37 39 38 34 
              30 34 34 30 
              0D A3 8F 8A 
              41 52 4F 6B 
              46 78 80 21 
              2E 00 C2 96 
              95 9F 89 4E 
              A3 8F 3F 12 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              13 2F 00 C2 
              94 41 4C 60 
              53 7C 75 8F 
              41 4C 60 53 
              7C 75 80 23 
              30 00 C2 96 
              95 9F 89 4C 
              A3 8F 3F 14 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 13 31 
              00 C2 94 43 
              4F 52 4F 64 
              44 8F 43 4F 
              52 4F 64 44 
              80 0E 32 00 
              C2 98 95 3F 
              01 47 0D A3 
              8F 41 80 13 
              33 00 C2 83 
              95 9F 89 52 
              A3 8F 94 41 
              50 53 74 79 
              4D 80 12 34 
              00 C2 8A 56 
              71 61 7C 43 
              8F 8A 56 71 
              61 7C 43 80 
              10 35 00 C2 
              9A 95 41 6E 
              6B 5A 51 75 
              A3 8F 41 80 
              13 36 00 C2 
              83 95 9F 89 
              52 A3 8F 94 
              41 50 53 74 
              79 4D 80 15 
              37 00 C2 9E 
              95 42 5E 5B 
              45 40 40 A3 
              8F 41 61 64 
              7A 7F 7F 80 
              15 38 00 C2 
              98 95 3F 08 
              4D 73 64 4C 
              51 6B 46 64 
              0D A3 8F 48 
              80 1D 39 00 
              C2 9B 96 95 
              41 4B 7A 52 
              72 62 A3 8F 
              3F 0A 31 32 
              37 33 35 37 
              32 35 31 34 
              0D 80 25 3A 
              00 C2 96 95 
              9F 89 4A A3 
              8F 3F 16 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 10 
              3B 00 C2 9C 
              96 95 41 4D 
              A3 8F 3F 01 
              4D 0D 80 16 
              3C 00 C2 9D 
              95 3F 08 65 
              78 59 48 72 
              72 50 48 0D 
              A3 8F 41 65 
              80 14 3D 00 
              C2 99 95 8A 
              67 7F 6E 6C 
              65 A3 8F 67 
              7F 6E 6C 65 
              80 1A 3E 00 
              C2 A2 95 3F 
              09 36 35 39 
              32 30 39 39 
              32 38 0D A3 
              8F 67 52 6B 
              7B 48 80 13 
              3F 00 C2 99 
              95 50 47 57 
              5B 65 A3 8F 
              50 47 57 5B 
              65 80 1D 40 
              00 C2 9B 96 
              95 41 52 71 
              79 78 72 A3 
              8F 3F 0A 31 
              33 38 38 38 
              31 33 38 37 
              34 0D 80 12 
              41 00 C2 98 
              95 3F 05 53 
              52 51 65 42 
              0D A3 8F 45 
              80 10 42 00 
              C2 9C 96 95 
              41 5A A3 8F 
              3F 01 5A 0D 
              80 10 43 00 
              C2 9C 96 95 
              41 50 A3 8F 
              3F 01 50 0D 
              80 14 44 00 
              C2 9E 95 43 
              5A 77 52 6E 
              43 A3 8F 65 
              48 6D 51 7C 
              80 11 45 00 
              C2 9D 95 3F 
              03 79 5A 4D 
              0D A3 8F 41 
              79 80 15 46 
              00 C2 9E 95 
              42 45 4F 73 
              70 79 A3 8F 
              41 7A 70 4C 
              4F 46 80 13 
              47 00 C2 98 
              95 3F 06 78 
              69 47 55 72 
              44 0D A3 8F 
              46 80 1A 48 
              00 C2 A2 95 
              3F 09 37 34 
              33 35 35 30 
              34 34 33 0D 
              A3 8F 6C 54 
              5A 77 6B 80 
              1C 49 00 C2 
              A2 95 3F 0A 
              2D 36 34 39 
              32 32 39 31 
              37 33 0D A3 
              8F 8A 66 6C 
              67 4D 75 80 
              13 4A 00 C2 
              94 43 55 65 
              6E 73 59 8F 
              43 55 65 6E 
              73 59 80 1C 
              4B 00 C2 96 
              95 9F 89 53 
              A3 8F 3F 0D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 13 
              4C 00 C2 94 
              41 6D 47 75 
              50 43 8F 41 
              6D 47 75 50 
              43 80 10 4D 
              00 C2 9D 95 
              3F 02 42 66 
              0D A3 8F 41 
              42 80 14 4E 
              00 C2 99 95 
              8A 72 42 52 
              43 42 A3 8F 
              72 42 52 43 
              42 80 1F 4F 
              00 C2 9B 96 
              95 8A 41 42 
              50 66 7C 64 
              A3 8F 3F 0B 
              2D 31 31 31 
              31 36 35 30 
              30 38 34 0D 
              80 0E 50 00 
              C2 84 95 9F 
              89 54 A3 8F 
              41 4F 80 15 
              51 00 C2 9D 
              95 3F 07 69 
              67 4E 62 6D 
              4A 4E 0D A3 
              8F 41 69 80 
              1F 52 00 C2 
              9B 96 95 8A 
              41 4D 72 48 
              76 6B A3 8F 
              3F 0B 2D 31 
              33 30 34 39 
              38 39 30 39 
              39 0D 80 10 
              53 00 C2 9D 
              95 3F 02 6D 
              77 0D A3 8F 
              41 6D 80 15 
              54 00 C2 9E 
              95 41 71 66 
              51 79 56 A3 
              8F 42 4E 59 
              6E 46 69 80 
              10 55 00 C2 
              9C 96 95 41 
              50 A3 8F 3F 
              01 50 0D 80 
              15 56 00 C2 
              9E 95 41 42 
              73 52 4C 4E 
              A3 8F 42 7D 
              4C 6D 73 71 
              80 0F 57 00 
              C2 98 95 3F 
              02 79 6E 0D 
              A3 8F 42 80 
              12 58 00 C2 
              9A 95 8A 41 
              41 6C 4F 77 
              7B A3 8F 8A 
              41 80 10 59 
              00 C2 9C 96 
              95 41 4F A3 
              8F 3F 01 4F 
              0D 80 10 5A 
              00 C2 9C 96 
              95 41 41 A3 
              8F 3F 01 41 
              0D 80 14 5B 
              00 C2 9E 95 
              43 7C 4C 4B 
              5E 5E A3 8F 
              43 73 74 61 
              61 80 0E 5C 
              00 C2 84 95 
              9F 89 4A A3 
              8F 41 45 80 
              1A 5D 00 C2 
              A2 95 3F 09 
              32 37 34 34 
              39 37 36 34 
              34 0D A3 8F 
              50 57 48 41 
              6C 80 14 5E 
              00 C2 9E 95 
              43 6E 70 75 
              43 74 A3 8F 
              51 4F 4A 7C 
              4B 80 1B 5F 
              00 C2 9B 96 
              95 55 6F 43 
              48 4B A3 8F 
              3F 09 33 36 
              34 36 35 35 
              31 31 35 0D 
              80 13 60 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              1C 61 00 C2 
              9B 96 95 8A 
              45 5A 77 43 
              50 A3 8F 3F 
              09 2D 39 30 
              39 32 37 33 
              31 32 0D 80 
              13 62 00 C2 
              98 95 3F 06 
              72 71 43 4C 
              54 59 0D A3 
              8F 46 80 13 
              63 00 C2 94 
              42 52 50 41 
              6B 7C 8F 42 
              52 50 41 6B 
              7C 80 1C 64 
              00 C2 96 95 
              9F 89 53 A3 
              8F 3F 0D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 15 65 
              00 C2 9E 95 
              42 5C 58 55 
              61 48 A3 8F 
              41 63 67 6A 
              5E 77 80 10 
              66 00 C2 9C 
              96 95 41 4D 
              A3 8F 3F 01 
              4D 0D 80 10 
              67 00 C2 9C 
              96 95 41 48 
              A3 8F 3F 01 
              48 0D 80 10 
              68 00 C2 9C 
              96 95 41 43 
              A3 8F 3F 01 
              43 0D 80 0E 
              69 00 C2 84 
              95 9F 89 4E 
              A3 8F 41 49 
              80 11 6A 00 
              C2 9D 95 3F 
              03 48 57 41 
              0D A3 8F 41 
              48 80 12 6B 
              00 C2 9A 95 
              8A 41 7D 56 
              6A 6F 71 A3 
              8F 8A 41 80 
              0E 6C 00 C2 
              84 95 9F 89 
              53 A3 8F 41 
              4E 80 0E 6D 
              00 C2 84 95 
              9F 89 4E A3 
              8F 41 49 80 
              16 6E 00 C2 
              9D 95 3F 08 
              6A 53 54 56 
              4D 47 41 4D 
              0D A3 8F 41 
              6A 80 14 6F 
              00 C2 8A 41 
              63 5C 58 71 
              5B 8F 8A 41 
              63 5C 58 71 
              5B 80 13 70 
              00 C2 99 95 
              48 52 42 62 
              7E A3 8F 48 
              52 42 62 7E 
              80 13 71 00 
              C2 83 95 9F 
              89 4D A3 8F 
              94 41 4B 52 
              64 65 48 80 
              13 72 00 C2 
              83 95 9F 89 
              47 A3 8F 94 
              41 45 51 44 
              4D 42 80 24 
              73 00 C2 96 
              95 9F 89 4B 
              A3 8F 3F 15 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 13 
              74 00 C2 94 
              41 57 7F 6D 
              48 66 8F 41 
              57 7F 6D 48 
              66 80 0E 75 
              00 C2 84 95 
              9F 89 4C A3 
              8F 41 47 80 
              12 76 00 C2 
              98 95 3F 05 
              72 61 53 4B 
              76 0D A3 8F 
              45 80 1B 77 
              00 C2 9B 96 
              95 62 4A 6A 
              79 46 A3 8F 
              3F 09 35 37 
              33 32 32 32 
              34 37 30 0D 
              80 1C 78 00 
              C2 A2 95 3F 
              0A 31 31 30 
              36 31 30 30 
              32 38 38 0D 
              A3 8F 41 41 
              7B 5C 41 40 
              80 12 79 00 
              C2 8A 6C 73 
              62 4F 7F 8F 
              8A 6C 73 62 
              4F 7F 80 13 
              7A 00 C2 83 
              95 9F 89 4A 
              A3 8F 94 41 
              48 51 74 59 
              45 80 14 7B 
              00 C2 9E 95 
              43 6C 40 79 
              72 4E A3 8F 
              53 7F 46 4D 
              71 80 0E 7C 
              00 C2 84 95 
              9F 89 4C A3 
              8F 41 47 80 
              11 7D 00 C2 
              9D 95 3F 03 
              6D 56 54 0D 
              A3 8F 41 6D 
              80 11 7E 00 
              C2 9D 95 3F 
              03 79 78 4C 
              0D A3 8F 41 
              79 80 12 7F 
              00 C2 8A 8A 
              77 60 4C 5E 
              5D 8F 77 60 
              4C 5E 5D 80 
              15 80 00 C2 
              9E 95 41 58 
              53 7F 73 70 
              A3 8F 42 67 
              6C 40 4C 4F 
              80 1F 81 00 
              C2 9B 96 95 
              8A 41 4A 48 
              66 7D 54 A3 
              8F 3F 0B 2D 
              31 32 34 33 
              37 37 30 37 
              30 38 0D 80 
              1E 82 00 C2 
              A2 95 3F 0B 
              2D 31 35 36 
              38 31 30 32 
              33 36 38 0D 
              A3 8F 8A 41 
              5D 5D 75 5F 
              60 80 1A 83 
              00 C2 A2 95 
              3F 09 37 36 
              35 36 39 33 
              36 38 31 0D 
              A3 8F 6D 68 
              78 7B 71 80 
              11 84 00 C2 
              94 76 50 54 
              64 78 8F 76 
              50 54 64 78 
              80 13 85 00 
              C2 83 95 9F 
              89 4A A3 8F 
              94 41 48 51 
              74 59 45 80 
              14 86 00 C2 
              9E 95 43 78 
              74 56 7F 50 
              A3 8F 47 4B 
              69 40 6F 80 
              0E 87 00 C2 
              84 95 9F 89 
              4C A3 8F 41 
              47 80 16 88 
              00 C2 99 95 
              8A 41 4B 65 
              59 6E 4D A3 
              8F 41 4B 65 
              59 6E 4D 80 
              14 89 00 C2 
              8A 8A 41 63 
              4C 55 43 4F 
              8F 41 63 4C 
              55 43 4F 80 
              1D 8A 00 C2 
              9B 96 95 8A 
              6F 60 41 5F 
              5C A3 8F 3F 
              0A 2D 37 39 
              36 39 32 33 
              38 36 38 0D 
              80 13 8B 00 
              C2 98 95 3F 
              06 7A 73 6B 
              79 52 4F 0D 
              A3 8F 46 80 
              20 8C 00 C2 
              96 95 9F 89 
              4F A3 8F 3F 
              11 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              10 8D 00 C2 
              9C 96 95 41 
              53 A3 8F 3F 
              01 53 0D 80 
              10 8E 00 C2 
              9C 96 95 41 
              4A A3 8F 3F 
              01 4A 0D 80 
              14 8F 00 C2 
              98 95 3F 07 
              5A 54 66 49 
              76 6A 7A 0D 
              A3 8F 47 80 
              10 90 00 C2 
              9C 96 95 41 
              5A A3 8F 3F 
              01 5A 0D 80 
              1D 91 00 C2 
              9B 96 95 8A 
              67 7A 70 7F 
              4C A3 8F 3F 
              0A 2D 36 36 
              39 37 31 36 
              34 32 38 0D 
              80 1F 92 00 
              C2 96 95 9F 
              89 50 A3 8F 
              3F 10 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              12 93 00 C2 
              9A 95 8A 41 
              59 40 69 50 
              54 A3 8F 8A 
              41 80 16 94 
              00 C2 9D 95 
              3F 08 4C 74 
              49 6B 59 6B 
              4A 70 0D A3 
              8F 41 4C 80 
              10 95 00 C2 
              9C 96 95 41 
              4E A3 8F 3F 
              01 4E 0D 80 
              10 96 00 C2 
              9C 96 95 41 
              4B A3 8F 3F 
              01 4B 0D 80 
              15 97 00 C2 
              9E 95 41 7B 
              66 58 6E 54 
              A3 8F 42 44 
              59 67 51 6B 
              80 10 98 00 
              C2 98 95 3F 
              03 53 65 4B 
              0D A3 8F 43 
              80 1F 99 00 
              C2 9B 96 95 
              8A 41 63 70 
              57 6B 7E A3 
              8F 3F 0B 2D 
              31 36 37 33 
              36 32 34 33 
              31 38 0D 80 
              14 9A 00 C2 
              8A 8A 41 69 
              60 69 5E 60 
              8F 41 69 60 
              69 5E 60 80 
              1E 9B 00 C2 
              A2 95 3F 0B 
              2D 31 38 32 
              32 38 35 32 
              31 32 30 0D 
              A3 8F 8A 41 
              6C 69 68 50 
              58 80 1C 9C 
              00 C2 A2 95 
              3F 0A 31 33 
              31 38 38 39 
              39 32 31 35 
              0D A3 8F 41 
              4E 67 4C 78 
              4F 80 11 9D 
              00 C2 9A 95 
              8A 7F 74 57 
              7F 56 A3 8F 
              8A 41 80 14 
              9E 00 C2 99 
              95 8A 4E 57 
              65 40 59 A3 
              8F 4E 57 65 
              40 59 80 14 
              9F 00 C2 8A 
              8A 41 4F 44 
              7C 72 49 8F 
              41 4F 44 7C 
              72 49 80 23 
              A0 00 C2 96 
              95 9F 89 4C 
              A3 8F 3F 14 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 A1 
              00 C2 9E 95 
              49 72 43 49 
              7D A3 8F 43 
              76 4D 7C 76 
              42 80 14 A2 
              00 C2 99 95 
              8A 5D 7D 48 
              54 5B A3 8F 
              5D 7D 48 54 
              5B 80 13 A3 
              00 C2 83 95 
              9F 89 4F A3 
              8F 94 41 4D 
              53 44 6D 4A 
              80 12 A4 00 
              C2 8A 4E 71 
              40 72 69 8F 
              8A 4E 71 40 
              72 69 80 13 
              A5 00 C2 83 
              95 9F 89 47 
              A3 8F 94 41 
              45 51 44 4D 
              42 80 0D A6 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 11 
              A7 00 C2 98 
              95 3F 04 63 
              68 6F 47 0D 
              A3 8F 44 80 
              1E A8 00 C2 
              A2 95 3F 0B 
              2D 31 39 32 
              35 31 37 39 
              39 35 33 0D 
              A3 8F 8A 41 
              72 6F 7E 68 
              71 80 1E A9 
              00 C2 96 95 
              9F 89 51 A3 
              8F 3F 0F 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              0E AA 00 C2 
              84 95 9F 89 
              53 A3 8F 41 
              4E 80 1A AB 
              00 C2 A2 95 
              3F 09 39 37 
              39 38 31 36 
              31 38 33 0D 
              A3 8F 7A 59 
              6C 7B 77 80 
              13 AC 00 C2 
              83 95 9F 89 
              53 A3 8F 94 
              41 51 54 44 
              7D 4E 80 1C 
              AD 00 C2 A2 
              95 3F 0A 31 
              37 35 34 36 
              36 33 39 32 
              34 0D A3 8F 
              41 68 65 60 
              6F 74 80 0F 
              AE 00 C2 9A 
              95 6B 46 79 
              4F 49 A3 8F 
              41 80 14 AF 
              00 C2 8A 41 
              53 62 5A 67 
              6C 8F 8A 41 
              53 62 5A 67 
              6C 80 15 B0 
              00 C2 9E 95 
              42 72 7C 6F 
              57 6B A3 8F 
              41 4D 43 50 
              68 54 80 13 
              B1 00 C2 99 
              95 7E 47 49 
              50 6D A3 8F 
              7E 47 49 50 
              6D 80 13 B2 
              00 C2 99 95 
              4B 5E 45 58 
              7F A3 8F 4B 
              5E 45 58 7F 
              80 0E B3 00 
              C2 84 95 9F 
              89 53 A3 8F 
              41 4E 80 15 
              B4 00 C2 9E 
              95 42 53 6A 
              6B 51 57 A3 
              8F 41 6C 55 
              54 6E 68 80 
              10 B5 00 C2 
              9C 96 95 41 
              49 A3 8F 3F 
              01 49 0D 80 
              16 B6 00 C2 
              99 95 8A 41 
              77 44 57 7C 
              43 A3 8F 41 
              77 44 57 7C 
              43 80 0F B7 
              00 C2 9D 95 
              3F 01 4C 0D 
              A3 8F 41 4C 
              80 13 B8 00 
              C2 98 95 3F 
              06 57 43 4A 
              51 70 57 0D 
              A3 8F 46 80 
              14 B9 00 C2 
              9E 95 43 71 
              53 7C 48 6E 
              A3 8F 4E 6C 
              43 77 51 80 
              1D BA 00 C2 
              9B 96 95 41 
              5C 42 70 60 
              43 A3 8F 3F 
              0A 31 35 34 
              34 32 32 36 
              38 31 39 0D 
              80 11 BB 00 
              C2 94 5C 51 
              4B 72 4D 8F 
              5C 51 4B 72 
              4D 80 1C BC 
              00 C2 A2 95 
              3F 0A 32 30 
              34 39 38 32 
              39 32 39 32 
              0D A3 8F 41 
              7A 4B 5E 66 
              6C 80 14 BD 
              00 C2 8A 41 
              7F 58 53 6E 
              5D 8F 8A 41 
              7F 58 53 6E 
              5D 80 0D BE 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 26 
              BF 00 C2 96 
              95 9F 89 49 
              A3 8F 3F 17 
              44 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 0D C0 00 
              C2 98 95 3F 
              00 0D A3 8F 
              40 80 12 C1 
              00 C2 8A 8A 
              42 45 54 40 
              44 8F 42 45 
              54 40 44 80 
              13 C2 00 C2 
              94 41 41 50 
              45 68 7E 8F 
              41 41 50 45 
              68 7E 80 12 
              C3 00 C2 9A 
              95 8A 41 57 
              6B 6B 6D 76 
              A3 8F 8A 41 
              80 14 C4 00 
              C2 9E 95 43 
              48 68 67 51 
              41 A3 8F 77 
              57 58 6E 7E 
              80 14 C5 00 
              C2 99 95 8A 
              63 48 4E 7A 
              56 A3 8F 63 
              48 4E 7A 56 
              80 10 C6 00 
              C2 98 95 3F 
              03 6A 63 55 
              0D A3 8F 43 
              80 0F C7 00 
              C2 9A 95 6D 
              5F 7F 61 6B 
              A3 8F 41 80 
              1D C8 00 C2 
              96 95 9F 89 
              52 A3 8F 3F 
              0E 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 12 C9 00 
              C2 8A 8A 7E 
              47 7F 69 75 
              8F 7E 47 7F 
              69 75 80 10 
              CA 00 C2 9C 
              96 95 41 47 
              A3 8F 3F 01 
              47 0D 80 15 
              CB 00 B9 3F 
              0D 4F 6B 20 
              53 65 65 64 
              20 35 31 39 
              30 33 0D 80 
              00 -  -  -  	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$35,$31,$39,$30,$33,$0d,$80,$0e,$03,$00,$c2,$98,$95,$3f,$01,$46,$0d,$a3,$8f,$41,$80,$12,$04,$00,$c2,$8a,$8a,$5d,$6f,$5d,$53,$71,$8f,$5d,$6f,$5d,$53,$71,$80,$12,$05,$00,$c2,$9d,$95,$3f,$04,$4f,$66,$73,$6a,$0d,$a3,$8f,$41,$4f,$80,$1e,$06,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$39,$31,$38,$31,$35,$33,$38,$38,$30,$0d,$a3,$8f,$8a,$41,$72,$55,$4b,$52,$58,$80,$10,$07,$00,$c2,$9c,$96,$95,$41,$44,$a3,$8f,$3f,$01,$44,$0d,$80,$1d,$08,$00,$c2,$9b,$96,$95,$8a,$5f,$75,$4e,$62,$6d,$a3,$8f,$3f,$0a,$2d,$35,$33,$34,$30,$34,$36,$38,$39,$33,$0d,$80,$15,$09,$00,$c2,$99,$95,$41,$6b,$7a,$70,$6d,$51,$a3,$8f,$41,$6b,$7a,$70,$6d,$51,$80,$14,$0a,$00,$c2,$8a,$41,$6c,$48,$72,$77,$4e,$8f,$8a,$41,$6c,$48,$72,$77,$4e,$80,$15,$0b,$00,$c2,$9e,$95,$42,$75,$63,$48,$6c,$7a,$a3,$8f,$41,$4a,$5c,$77,$53,$45,$80,$0e,$0c,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$12,$0d,$00,$c2,$8a,$8a,$52,$52,$59,$75,$75,$8f,$52,$52,$59,$75,$75,$80,$14,$0e,$00,$c2,$9e,$95,$43,$65,$6f,$4e,$74,$69,$a3,$8f,$5a,$50,$71,$4b,$56,$80,$16,$0f,$00,$c2,$99,$95,$8a,$41,$45,$48,$7d,$7f,$5d,$a3,$8f,$41,$45,$48,$7d,$7f,$5d,$80,$0e,$10,$00,$c2,$84,$95,$9f,$89,$49,$a3,$8f,$41,$44,$80,$15,$11,$00,$c2,$9e,$95,$41,$64,$53,$5c,$7a,$6d,$a3,$8f,$42,$5b,$6c,$63,$45,$52,$80,$1c,$12,$00,$c2,$a2,$95,$3f,$0a,$31,$38,$35,$38,$38,$38,$39,$31,$36,$32,$0d,$a3,$8f,$41,$6e,$73,$46,$57,$4a,$80,$10,$13,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$1b,$14,$00,$c2,$9b,$96,$95,$5d,$7e,$48,$71,$7a,$a3,$8f,$3f,$09,$35,$30,$32,$38,$32,$38,$31,$35,$34,$0d,$80,$13,$15,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$0e,$16,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$12,$17,$00,$c2,$8a,$65,$73,$42,$72,$60,$8f,$8a,$65,$73,$42,$72,$60,$80,$20,$18,$00,$c2,$96,$95,$9f,$89,$4f,$a3,$8f,$3f,$11,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1b,$19,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1a,$1a,$00,$c2,$a2,$95,$3f,$09,$35,$35,$35,$39,$33,$30,$32,$33,$33,$0d,$a3,$8f,$61,$48,$6d,$49,$79,$80,$15,$1b,$00,$c2,$9e,$95,$41,$66,$5f,$61,$65,$60,$a3,$8f,$42,$59,$60,$5e,$5a,$5f,$80,$13,$1c,$00,$c2,$9d,$95,$3f,$05,$47,$70,$6e,$47,$51,$0d,$a3,$8f,$41,$47,$80,$11,$1d,$00,$c2,$9a,$95,$8a,$61,$57,$5a,$60,$5d,$a3,$8f,$8a,$41,$80,$13,$1e,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$13,$1f,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$12,$20,$00,$c2,$8a,$8a,$4e,$40,$77,$4a,$59,$8f,$4e,$40,$77,$4a,$59,$80,$0d,$21,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$15,$22,$00,$c2,$9d,$95,$3f,$07,$4c,$4d,$54,$4a,$57,$47,$42,$0d,$a3,$8f,$41,$4c,$80,$13,$23,$00,$c2,$94,$41,$58,$52,$4f,$7a,$77,$8f,$41,$58,$52,$4f,$7a,$77,$80,$13,$24,$00,$c2,$83,$95,$9f,$89,$54,$a3,$8f,$94,$41,$52,$54,$55,$41,$4f,$80,$1d,$25,$00,$c2,$9b,$96,$95,$8a,$56,$76,$66,$71,$4b,$a3,$8f,$3f,$0a,$2d,$33,$38,$33,$34,$31,$33,$33,$32,$33,$0d,$80,$0f,$26,$00,$c2,$9d,$95,$3f,$01,$63,$0d,$a3,$8f,$41,$63,$80,$26,$27,$00,$c2,$96,$95,$9f,$89,$49,$a3,$8f,$3f,$17,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$28,$00,$c2,$9c,$96,$95,$41,$55,$a3,$8f,$3f,$01,$55,$0d,$80,$11,$29,$00,$c2,$9a,$95,$8a,$48,$48,$5f,$63,$42,$a3,$8f,$8a,$41,$80,$14,$2a,$00,$c2,$8a,$8a,$41,$67,$7a,$72,$64,$5e,$8f,$41,$67,$7a,$72,$64,$5e,$80,$12,$2b,$00,$c2,$9a,$95,$8a,$41,$7c,$40,$66,$5f,$53,$a3,$8f,$8a,$41,$80,$16,$2c,$00,$c2,$99,$95,$8a,$41,$6d,$40,$6e,$47,$47,$a3,$8f,$41,$6d,$40,$6e,$47,$47,$80,$1e,$2d,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$33,$37,$39,$38,$34,$30,$34,$34,$30,$0d,$a3,$8f,$8a,$41,$52,$4f,$6b,$46,$78,$80,$21,$2e,$00,$c2,$96,$95,$9f,$89,$4e,$a3,$8f,$3f,$12,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$2f,$00,$c2,$94,$41,$4c,$60,$53,$7c,$75,$8f,$41,$4c,$60,$53,$7c,$75,$80,$23,$30,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$31,$00,$c2,$94,$43,$4f,$52,$4f,$64,$44,$8f,$43,$4f,$52,$4f,$64,$44,$80,$0e,$32,$00,$c2,$98,$95,$3f,$01,$47,$0d,$a3,$8f,$41,$80,$13,$33,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$12,$34,$00,$c2,$8a,$56,$71,$61,$7c,$43,$8f,$8a,$56,$71,$61,$7c,$43,$80,$10,$35,$00,$c2,$9a,$95,$41,$6e,$6b,$5a,$51,$75,$a3,$8f,$41,$80,$13,$36,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$15,$37,$00,$c2,$9e,$95,$42,$5e,$5b,$45,$40,$40,$a3,$8f,$41,$61,$64,$7a,$7f,$7f,$80,$15,$38,$00,$c2,$98,$95,$3f,$08,$4d,$73,$64,$4c,$51,$6b,$46,$64,$0d,$a3,$8f,$48,$80,$1d,$39,$00,$c2,$9b,$96,$95,$41,$4b,$7a,$52,$72,$62,$a3,$8f,$3f,$0a,$31,$32,$37,$33,$35,$37,$32,$35,$31,$34,$0d,$80,$25,$3a,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$3b,$00,$c2,$9c,$96,$95,$41,$4d,$a3,$8f,$3f,$01,$4d,$0d,$80,$16,$3c,$00,$c2,$9d,$95,$3f,$08,$65,$78,$59,$48,$72,$72,$50,$48,$0d,$a3,$8f,$41,$65,$80,$14,$3d,$00,$c2,$99,$95,$8a,$67,$7f,$6e,$6c,$65,$a3,$8f,$67,$7f,$6e,$6c,$65,$80,$1a,$3e,$00,$c2,$a2,$95,$3f,$09,$36,$35,$39,$32,$30,$39,$39,$32,$38,$0d,$a3,$8f,$67,$52,$6b,$7b,$48,$80,$13,$3f,$00,$c2,$99,$95,$50,$47,$57,$5b,$65,$a3,$8f,$50,$47,$57,$5b,$65,$80,$1d,$40,$00,$c2,$9b,$96,$95,$41,$52,$71,$79,$78,$72,$a3,$8f,$3f,$0a,$31,$33,$38,$38,$38,$31,$33,$38,$37,$34,$0d,$80,$12,$41,$00,$c2,$98,$95,$3f,$05,$53,$52,$51,$65,$42,$0d,$a3,$8f,$45,$80,$10,$42,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$10,$43,$00,$c2,$9c,$96,$95,$41,$50,$a3,$8f,$3f,$01,$50,$0d,$80,$14,$44,$00,$c2,$9e,$95,$43,$5a,$77,$52,$6e,$43,$a3,$8f,$65,$48,$6d,$51,$7c,$80,$11,$45,$00,$c2,$9d,$95,$3f,$03,$79,$5a,$4d,$0d,$a3,$8f,$41,$79,$80,$15,$46,$00,$c2,$9e,$95,$42,$45,$4f,$73,$70,$79,$a3,$8f,$41,$7a,$70,$4c,$4f,$46,$80,$13,$47,$00,$c2,$98,$95,$3f,$06,$78,$69,$47,$55,$72,$44,$0d,$a3,$8f,$46,$80,$1a,$48,$00,$c2,$a2,$95,$3f,$09,$37,$34,$33,$35,$35,$30,$34,$34,$33,$0d,$a3,$8f,$6c,$54,$5a,$77,$6b,$80,$1c,$49,$00,$c2,$a2,$95,$3f,$0a,$2d,$36,$34,$39,$32,$32,$39,$31,$37,$33,$0d,$a3,$8f,$8a,$66,$6c,$67,$4d,$75,$80,$13,$4a,$00,$c2,$94,$43,$55,$65,$6e,$73,$59,$8f,$43,$55,$65,$6e,$73,$59,$80,$1c,$4b,$00,$c2,$96,$95,$9f,$89,$53,$a3,$8f,$3f,$0d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$4c,$00,$c2,$94,$41,$6d,$47,$75,$50,$43,$8f,$41,$6d,$47,$75,$50,$43,$80,$10,$4d,$00,$c2,$9d,$95,$3f,$02,$42,$66,$0d,$a3,$8f,$41,$42,$80,$14,$4e,$00,$c2,$99,$95,$8a,$72,$42,$52,$43,$42,$a3,$8f,$72,$42,$52,$43,$42,$80,$1f,$4f,$00,$c2,$9b,$96,$95,$8a,$41,$42,$50,$66,$7c,$64,$a3,$8f,$3f,$0b,$2d,$31,$31,$31,$31,$36,$35,$30,$30,$38,$34,$0d,$80,$0e,$50,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$15,$51,$00,$c2,$9d,$95,$3f,$07,$69,$67,$4e,$62,$6d,$4a,$4e,$0d,$a3,$8f,$41,$69,$80,$1f,$52,$00,$c2,$9b,$96,$95,$8a,$41,$4d,$72,$48,$76,$6b,$a3,$8f,$3f,$0b,$2d,$31,$33,$30,$34,$39,$38,$39,$30,$39,$39,$0d,$80,$10,$53,$00,$c2,$9d,$95,$3f,$02,$6d,$77,$0d,$a3,$8f,$41,$6d,$80,$15,$54,$00,$c2,$9e,$95,$41,$71,$66,$51,$79,$56,$a3,$8f,$42,$4e,$59,$6e,$46,$69,$80,$10,$55,$00,$c2,$9c,$96,$95,$41,$50,$a3,$8f,$3f,$01,$50,$0d,$80,$15,$56,$00,$c2,$9e,$95,$41,$42,$73,$52,$4c,$4e,$a3,$8f,$42,$7d,$4c,$6d,$73,$71,$80,$0f,$57,$00,$c2,$98,$95,$3f,$02,$79,$6e,$0d,$a3,$8f,$42,$80,$12,$58,$00,$c2,$9a,$95,$8a,$41,$41,$6c,$4f,$77,$7b,$a3,$8f,$8a,$41,$80,$10,$59,$00,$c2,$9c,$96,$95,$41,$4f,$a3,$8f,$3f,$01,$4f,$0d,$80,$10,$5a,$00,$c2,$9c,$96,$95,$41,$41,$a3,$8f,$3f,$01,$41,$0d,$80,$14,$5b,$00,$c2,$9e,$95,$43,$7c,$4c,$4b,$5e,$5e,$a3,$8f,$43,$73,$74,$61,$61,$80,$0e,$5c,$00,$c2,$84,$95,$9f,$89,$4a,$a3,$8f,$41,$45,$80,$1a,$5d,$00,$c2,$a2,$95,$3f,$09,$32,$37,$34,$34,$39,$37,$36,$34,$34,$0d,$a3,$8f,$50,$57,$48,$41,$6c,$80,$14,$5e,$00,$c2,$9e,$95,$43,$6e,$70,$75,$43,$74,$a3,$8f,$51,$4f,$4a,$7c,$4b,$80,$1b,$5f,$00,$c2,$9b,$96,$95,$55,$6f,$43,$48,$4b,$a3,$8f,$3f,$09,$33,$36,$34,$36,$35,$35,$31,$31,$35,$0d,$80,$13,$60,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$1c,$61,$00,$c2,$9b,$96,$95,$8a,$45,$5a,$77,$43,$50,$a3,$8f,$3f,$09,$2d,$39,$30,$39,$32,$37,$33,$31,$32,$0d,$80,$13,$62,$00,$c2,$98,$95,$3f,$06,$72,$71,$43,$4c,$54,$59,$0d,$a3,$8f,$46,$80,$13,$63,$00,$c2,$94,$42,$52,$50,$41,$6b,$7c,$8f,$42,$52,$50,$41,$6b,$7c,$80,$1c,$64,$00,$c2,$96,$95,$9f,$89,$53,$a3,$8f,$3f,$0d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$15,$65,$00,$c2,$9e,$95,$42,$5c,$58,$55,$61,$48,$a3,$8f,$41,$63,$67,$6a,$5e,$77,$80,$10,$66,$00,$c2,$9c,$96,$95,$41,$4d,$a3,$8f,$3f,$01,$4d,$0d,$80,$10,$67,$00,$c2,$9c,$96,$95,$41,$48,$a3,$8f,$3f,$01,$48,$0d,$80,$10,$68,$00,$c2,$9c,$96,$95,$41,$43,$a3,$8f,$3f,$01,$43,$0d,$80,$0e,$69,$00,$c2,$84,$95,$9f,$89,$4e,$a3,$8f,$41,$49,$80,$11,$6a,$00,$c2,$9d,$95,$3f,$03,$48,$57,$41,$0d,$a3,$8f,$41,$48,$80,$12,$6b,$00,$c2,$9a,$95,$8a,$41,$7d,$56,$6a,$6f,$71,$a3,$8f,$8a,$41,$80,$0e,$6c,$00,$c2,$84,$95,$9f,$89,$53,$a3,$8f,$41,$4e,$80,$0e,$6d,$00,$c2,$84,$95,$9f,$89,$4e,$a3,$8f,$41,$49,$80,$16,$6e,$00,$c2,$9d,$95,$3f,$08,$6a,$53,$54,$56,$4d,$47,$41,$4d,$0d,$a3,$8f,$41,$6a,$80,$14,$6f,$00,$c2,$8a,$41,$63,$5c,$58,$71,$5b,$8f,$8a,$41,$63,$5c,$58,$71,$5b,$80,$13,$70,$00,$c2,$99,$95,$48,$52,$42,$62,$7e,$a3,$8f,$48,$52,$42,$62,$7e,$80,$13,$71,$00,$c2,$83,$95,$9f,$89,$4d,$a3,$8f,$94,$41,$4b,$52,$64,$65,$48,$80,$13,$72,$00,$c2,$83,$95,$9f,$89,$47,$a3,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$24,$73,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$74,$00,$c2,$94,$41,$57,$7f,$6d,$48,$66,$8f,$41,$57,$7f,$6d,$48,$66,$80,$0e,$75,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$12,$76,$00,$c2,$98,$95,$3f,$05,$72,$61,$53,$4b,$76,$0d,$a3,$8f,$45,$80,$1b,$77,$00,$c2,$9b,$96,$95,$62,$4a,$6a,$79,$46,$a3,$8f,$3f,$09,$35,$37,$33,$32,$32,$32,$34,$37,$30,$0d,$80,$1c,$78,$00,$c2,$a2,$95,$3f,$0a,$31,$31,$30,$36,$31,$30,$30,$32,$38,$38,$0d,$a3,$8f,$41,$41,$7b,$5c,$41,$40,$80,$12,$79,$00,$c2,$8a,$6c,$73,$62,$4f,$7f,$8f,$8a,$6c,$73,$62,$4f,$7f,$80,$13,$7a,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$14,$7b,$00,$c2,$9e,$95,$43,$6c,$40,$79,$72,$4e,$a3,$8f,$53,$7f,$46,$4d,$71,$80,$0e,$7c,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$11,$7d,$00,$c2,$9d,$95,$3f,$03,$6d,$56,$54,$0d,$a3,$8f,$41,$6d,$80,$11,$7e,$00,$c2,$9d,$95,$3f,$03,$79,$78,$4c,$0d,$a3,$8f,$41,$79,$80,$12,$7f,$00,$c2,$8a,$8a,$77,$60,$4c,$5e,$5d,$8f,$77,$60,$4c,$5e,$5d,$80,$15,$80,$00,$c2,$9e,$95,$41,$58,$53,$7f,$73,$70,$a3,$8f,$42,$67,$6c,$40,$4c,$4f,$80,$1f,$81,$00,$c2,$9b,$96,$95,$8a,$41,$4a,$48,$66,$7d,$54,$a3,$8f,$3f,$0b,$2d,$31,$32,$34,$33,$37,$37,$30,$37,$30,$38,$0d,$80,$1e,$82,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$35,$36,$38,$31,$30,$32,$33,$36,$38,$0d,$a3,$8f,$8a,$41,$5d,$5d,$75,$5f,$60,$80,$1a,$83,$00,$c2,$a2,$95,$3f,$09,$37,$36,$35,$36,$39,$33,$36,$38,$31,$0d,$a3,$8f,$6d,$68,$78,$7b,$71,$80,$11,$84,$00,$c2,$94,$76,$50,$54,$64,$78,$8f,$76,$50,$54,$64,$78,$80,$13,$85,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$14,$86,$00,$c2,$9e,$95,$43,$78,$74,$56,$7f,$50,$a3,$8f,$47,$4b,$69,$40,$6f,$80,$0e,$87,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$16,$88,$00,$c2,$99,$95,$8a,$41,$4b,$65,$59,$6e,$4d,$a3,$8f,$41,$4b,$65,$59,$6e,$4d,$80,$14,$89,$00,$c2,$8a,$8a,$41,$63,$4c,$55,$43,$4f,$8f,$41,$63,$4c,$55,$43,$4f,$80,$1d,$8a,$00,$c2,$9b,$96,$95,$8a,$6f,$60,$41,$5f,$5c,$a3,$8f,$3f,$0a,$2d,$37,$39,$36,$39,$32,$33,$38,$36,$38,$0d,$80,$13,$8b,$00,$c2,$98,$95,$3f,$06,$7a,$73,$6b,$79,$52,$4f,$0d,$a3,$8f,$46,$80,$20,$8c,$00,$c2,$96,$95,$9f,$89,$4f,$a3,$8f,$3f,$11,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$8d,$00,$c2,$9c,$96,$95,$41,$53,$a3,$8f,$3f,$01,$53,$0d,$80,$10,$8e,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$14,$8f,$00,$c2,$98,$95,$3f,$07,$5a,$54,$66,$49,$76,$6a,$7a,$0d,$a3,$8f,$47,$80,$10,$90,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$1d,$91,$00,$c2,$9b,$96,$95,$8a,$67,$7a,$70,$7f,$4c,$a3,$8f,$3f,$0a,$2d,$36,$36,$39,$37,$31,$36,$34,$32,$38,$0d,$80,$1f,$92,$00,$c2,$96,$95,$9f,$89,$50,$a3,$8f,$3f,$10,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$93,$00,$c2,$9a,$95,$8a,$41,$59,$40,$69,$50,$54,$a3,$8f,$8a,$41,$80,$16,$94,$00,$c2,$9d,$95,$3f,$08,$4c,$74,$49,$6b,$59,$6b,$4a,$70,$0d,$a3,$8f,$41,$4c,$80,$10,$95,$00,$c2,$9c,$96,$95,$41,$4e,$a3,$8f,$3f,$01,$4e,$0d,$80,$10,$96,$00,$c2,$9c,$96,$95,$41,$4b,$a3,$8f,$3f,$01,$4b,$0d,$80,$15,$97,$00,$c2,$9e,$95,$41,$7b,$66,$58,$6e,$54,$a3,$8f,$42,$44,$59,$67,$51,$6b,$80,$10,$98,$00,$c2,$98,$95,$3f,$03,$53,$65,$4b,$0d,$a3,$8f,$43,$80,$1f,$99,$00,$c2,$9b,$96,$95,$8a,$41,$63,$70,$57,$6b,$7e,$a3,$8f,$3f,$0b,$2d,$31,$36,$37,$33,$36,$32,$34,$33,$31,$38,$0d,$80,$14,$9a,$00,$c2,$8a,$8a,$41,$69,$60,$69,$5e,$60,$8f,$41,$69,$60,$69,$5e,$60,$80,$1e,$9b,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$38,$32,$32,$38,$35,$32,$31,$32,$30,$0d,$a3,$8f,$8a,$41,$6c,$69,$68,$50,$58,$80,$1c,$9c,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$31,$38,$38,$39,$39,$32,$31,$35,$0d,$a3,$8f,$41,$4e,$67,$4c,$78,$4f,$80,$11,$9d,$00,$c2,$9a,$95,$8a,$7f,$74,$57,$7f,$56,$a3,$8f,$8a,$41,$80,$14,$9e,$00,$c2,$99,$95,$8a,$4e,$57,$65,$40,$59,$a3,$8f,$4e,$57,$65,$40,$59,$80,$14,$9f,$00,$c2,$8a,$8a,$41,$4f,$44,$7c,$72,$49,$8f,$41,$4f,$44,$7c,$72,$49,$80,$23,$a0,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$a1,$00,$c2,$9e,$95,$49,$72,$43,$49,$7d,$a3,$8f,$43,$76,$4d,$7c,$76,$42,$80,$14,$a2,$00,$c2,$99,$95,$8a,$5d,$7d,$48,$54,$5b,$a3,$8f,$5d,$7d,$48,$54,$5b,$80,$13,$a3,$00,$c2,$83,$95,$9f,$89,$4f,$a3,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$12,$a4,$00,$c2,$8a,$4e,$71,$40,$72,$69,$8f,$8a,$4e,$71,$40,$72,$69,$80,$13,$a5,$00,$c2,$83,$95,$9f,$89,$47,$a3,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$0d,$a6,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$11,$a7,$00,$c2,$98,$95,$3f,$04,$63,$68,$6f,$47,$0d,$a3,$8f,$44,$80,$1e,$a8,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$39,$32,$35,$31,$37,$39,$39,$35,$33,$0d,$a3,$8f,$8a,$41,$72,$6f,$7e,$68,$71,$80,$1e,$a9,$00,$c2,$96,$95,$9f,$89,$51,$a3,$8f,$3f,$0f,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$aa,$00,$c2,$84,$95,$9f,$89,$53,$a3,$8f,$41,$4e,$80,$1a,$ab,$00,$c2,$a2,$95,$3f,$09,$39,$37,$39,$38,$31,$36,$31,$38,$33,$0d,$a3,$8f,$7a,$59,$6c,$7b,$77,$80,$13,$ac,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$1c,$ad,$00,$c2,$a2,$95,$3f,$0a,$31,$37,$35,$34,$36,$36,$33,$39,$32,$34,$0d,$a3,$8f,$41,$68,$65,$60,$6f,$74,$80,$0f,$ae,$00,$c2,$9a,$95,$6b,$46,$79,$4f,$49,$a3,$8f,$41,$80,$14,$af,$00,$c2,$8a,$41,$53,$62,$5a,$67,$6c,$8f,$8a,$41,$53,$62,$5a,$67,$6c,$80,$15,$b0,$00,$c2,$9e,$95,$42,$72,$7c,$6f,$57,$6b,$a3,$8f,$41,$4d,$43,$50,$68,$54,$80,$13,$b1,$00,$c2,$99,$95,$7e,$47,$49,$50,$6d,$a3,$8f,$7e,$47,$49,$50,$6d,$80,$13,$b2,$00,$c2,$99,$95,$4b,$5e,$45,$58,$7f,$a3,$8f,$4b,$5e,$45,$58,$7f,$80,$0e,$b3,$00,$c2,$84,$95,$9f,$89,$53,$a3,$8f,$41,$4e,$80,$15,$b4,$00,$c2,$9e,$95,$42,$53,$6a,$6b,$51,$57,$a3,$8f,$41,$6c,$55,$54,$6e,$68,$80,$10,$b5,$00,$c2,$9c,$96,$95,$41,$49,$a3,$8f,$3f,$01,$49,$0d,$80,$16,$b6,$00,$c2,$99,$95,$8a,$41,$77,$44,$57,$7c,$43,$a3,$8f,$41,$77,$44,$57,$7c,$43,$80,$0f,$b7,$00,$c2,$9d,$95,$3f,$01,$4c,$0d,$a3,$8f,$41,$4c,$80,$13,$b8,$00,$c2,$98,$95,$3f,$06,$57,$43,$4a,$51,$70,$57,$0d,$a3,$8f,$46,$80,$14,$b9,$00,$c2,$9e,$95,$43,$71,$53,$7c,$48,$6e,$a3,$8f,$4e,$6c,$43,$77,$51,$80,$1d,$ba,$00,$c2,$9b,$96,$95,$41,$5c,$42,$70,$60,$43,$a3,$8f,$3f,$0a,$31,$35,$34,$34,$32,$32,$36,$38,$31,$39,$0d,$80,$11,$bb,$00,$c2,$94,$5c,$51,$4b,$72,$4d,$8f,$5c,$51,$4b,$72,$4d,$80,$1c,$bc,$00,$c2,$a2,$95,$3f,$0a,$32,$30,$34,$39,$38,$32,$39,$32,$39,$32,$0d,$a3,$8f,$41,$7a,$4b,$5e,$66,$6c,$80,$14,$bd,$00,$c2,$8a,$41,$7f,$58,$53,$6e,$5d,$8f,$8a,$41,$7f,$58,$53,$6e,$5d,$80,$0d,$be,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$26,$bf,$00,$c2,$96,$95,$9f,$89,$49,$a3,$8f,$3f,$17,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0d,$c0,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$12,$c1,$00,$c2,$8a,$8a,$42,$45,$54,$40,$44,$8f,$42,$45,$54,$40,$44,$80,$13,$c2,$00,$c2,$94,$41,$41,$50,$45,$68,$7e,$8f,$41,$41,$50,$45,$68,$7e,$80,$12,$c3,$00,$c2,$9a,$95,$8a,$41,$57,$6b,$6b,$6d,$76,$a3,$8f,$8a,$41,$80,$14,$c4,$00,$c2,$9e,$95,$43,$48,$68,$67,$51,$41,$a3,$8f,$77,$57,$58,$6e,$7e,$80,$14,$c5,$00,$c2,$99,$95,$8a,$63,$48,$4e,$7a,$56,$a3,$8f,$63,$48,$4e,$7a,$56,$80,$10,$c6,$00,$c2,$98,$95,$3f,$03,$6a,$63,$55,$0d,$a3,$8f,$43,$80,$0f,$c7,$00,$c2,$9a,$95,$6d,$5f,$7f,$61,$6b,$a3,$8f,$41,$80,$1d,$c8,$00,$c2,$96,$95,$9f,$89,$52,$a3,$8f,$3f,$0e,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$c9,$00,$c2,$8a,$8a,$7e,$47,$7f,$69,$75,$8f,$7e,$47,$7f,$69,$75,$80,$10,$ca,$00,$c2,$9c,$96,$95,$41,$47,$a3,$8f,$3f,$01,$47,$0d,$80,$15,$cb,$00,$b9,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$35,$31,$39,$30,$33,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5C85 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6C85 -  -  -  -  EndTestInstance:
   18 00:6C85 -  -  -  -  		
   19 00:6C85 -  -  -  -  ; ***************************************************************************************
   20 00:6C85 -  -  -  -  ;
   21 00:6C85 -  -  -  -  ;									Changes and Updates
   22 00:6C85 -  -  -  -  ;
   23 00:6C85 -  -  -  -  ; ***************************************************************************************
   24 00:6C85 -  -  -  -  ;
   25 00:6C85 -  -  -  -  ;		Date			Notes
   26 00:6C85 -  -  -  -  ;		==== 			=====
   27 00:6C85 -  -  -  -  ;
   28 00:6C85 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:6C85 -  -  -  -  FinalAddress:
