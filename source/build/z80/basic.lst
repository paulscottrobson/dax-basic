    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b6 ; gosub
   64 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b7 ; return
   65 00:0000 -  -  -  -  #define KWD_GOTO                            	$00b8 ; goto
   66 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b9 ; local
   67 00:0000 -  -  -  -  #define KWD_DIM                             	$00ba ; dim
   68 00:0000 -  -  -  -  #define KWD_REM                             	$00bb ; rem
   69 00:0000 -  -  -  -  #define KWD_LET                             	$00bc ; let
   70 00:0000 -  -  -  -  #define KWD_VDU                             	$00bd ; vdu
   71 00:0000 -  -  -  -  #define KWD_PRINT                           	$00be ; print
   72 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bf ; load
   73 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c0 ; save
   74 00:0000 -  -  -  -  #define KWD_LIST                            	$00c1 ; list
   75 00:0000 -  -  -  -  #define KWD_NEW                             	$00c2 ; new
   76 00:0000 -  -  -  -  #define KWD_RUN                             	$00c3 ; run
   77 00:0000 -  -  -  -  #define KWD_READ                            	$00c4 ; read
   78 00:0000 -  -  -  -  #define KWD_DATA                            	$00c5 ; data
   79 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c6 ; restore
   80 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c7 ; assert
   81 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c8 ; clear
   82 00:0000 -  -  -  -  #define KWD_END                             	$00c9 ; end
   83 00:0000 -  -  -  -  #define KWD_STOP                            	$00ca ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD B6 4B -  		call 	SYSInitialise
   44 00:4006 11 00 4C -  		ld 		de,TestInstance
   45 00:4009 21 98 69 -  		ld 		hl,EndTestInstance
   46 00:400C CD DA 46 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 59 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 AE 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD BE 4B -  		call 	SYSPrintChar
   56 00:401C CD BC 4B -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 55 
              42 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 55 
              42 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  											; must be power of 2. 
   24 00:4029 -  -  -  -  
   25 00:4029 -  -  -  -  ; ***************************************************************************************
   26 00:4029 -  -  -  -  ;
   27 00:4029 -  -  -  -  ;								Defines the current instance
   28 00:4029 -  -  -  -  ;
   29 00:4029 -  -  -  -  ; ***************************************************************************************
   30 00:4029 -  -  -  -  
   31 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:4029 00 00 00 00 		.dw 	0,0
   33 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:402D 00 00 00 00 		.dw 	0,0		
   35 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4031 00 00 00 00 		.dw 	0,0 							
   37 00:4035 -  -  -  -  
   38 00:4035 -  -  -  -  ; ***************************************************************************************
   39 00:4035 -  -  -  -  ;
   40 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4035 -  -  -  -  ;
   42 00:4035 -  -  -  -  ; ***************************************************************************************
   43 00:4035 -  -  -  -  
   44 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4035 00 00 00 00 		.dw 	0,0
   46 00:4039 -  -  -  -  
   47 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:4039 00 00 00 00 		.dw 	0,0		
   49 00:403D -  -  -  -  
   50 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:403D 00 00 00 00 		.dw 	0,0
   52 00:4041 -  -  -  -  
   53 00:4041 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4041 00 00 00 00 		.dw 	0,0
   55 00:4045 -  -  -  -  
   56 00:4045 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4045 00 00 00 00 		.dw 	0,0		
   58 00:4049 -  -  -  -  
   59 00:4049 -  -  -  -  ;
   60 00:4049 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:4049 -  -  -  -  ;
   62 00:4049 -  -  -  -  
   63 00:4049 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:4049 00 00 00 00 		.dw 	0,0
   65 00:404D -  -  -  -  		
   66 00:404D -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:404D 00 00 00 00 		.dw 	0,0
   68 00:4051 -  -  -  -  
   69 00:4051 -  -  -  -  ; ***************************************************************************************
   70 00:4051 -  -  -  -  ;
   71 00:4051 -  -  -  -  ;										Run variables
   72 00:4051 -  -  -  -  ;
   73 00:4051 -  -  -  -  ; ***************************************************************************************
   74 00:4051 -  -  -  -  
   75 00:4051 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4051 00 00 00 00 		.dw 	0,0
   77 00:4055 -  -  -  -  		
   78 00:4055 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4055 00 00 00 00 		.dw 	0,0
   80 00:4059 -  -  -  -  
   81 00:4059 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:4059 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:405F -  -  -  -  
   84 00:405F -  -  -  -  AConvert: 									; used for address conversions.
   85 00:405F 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4065 -  -  -  -  		
   87 00:4065 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4065 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4075 -  -  -  -  
   90 00:4075 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4075 00 00 -  -  		.dw 	0
   92 00:4077 -  -  -  -  
   93 00:4077 -  -  -  -  ; ***************************************************************************************
   94 00:4077 -  -  -  -  ;
   95 00:4077 -  -  -  -  ;									Variable Information
   96 00:4077 -  -  -  -  ;
   97 00:4077 -  -  -  -  ; ***************************************************************************************
   98 00:4077 -  -  -  -  
   99 00:4077 -  -  -  -  VarNameStart: 								; first byte of name
  100 00:4077 00 00 00 00 		.dw 	0,0
  101 00:407B -  -  -  -  VarHash: 									; name hash value
  102 00:407B 00 00 -  -  		.dw 	0		
  103 00:407D -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:407D 00 00 00 00 		.dw 	0,0
  105 00:4081 -  -  -  -  		
  106 00:4081 -  -  -  -  ; ***************************************************************************************
  107 00:4081 -  -  -  -  ;
  108 00:4081 -  -  -  -  ;										  Buffers
  109 00:4081 -  -  -  -  ;
  110 00:4081 -  -  -  -  ; ***************************************************************************************
  111 00:4081 -  -  -  -  
  112 00:4081 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:4081 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:4091 -  -  -  -  
  115 00:4091 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:4091 00 00 -  -  		.dw 	0
  117 00:4093 -  -  -  -  
  118 00:4093 -  -  -  -  ConvertBuffer: 								; general usage
  119 00:4093 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:40D3 -  -  -  -  
  121 00:40D3 -  -  -  -  ; ***************************************************************************************
  122 00:40D3 -  -  -  -  ;
  123 00:40D3 -  -  -  -  ;									Changes and Updates
  124 00:40D3 -  -  -  -  ;
  125 00:40D3 -  -  -  -  ; ***************************************************************************************
  126 00:40D3 -  -  -  -  ;
  127 00:40D3 -  -  -  -  ;		Date			Notes
  128 00:40D3 -  -  -  -  ;		==== 			=====
  129 00:40D3 -  -  -  -  ;
  130 00:40D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D3 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D3 -  -  -  -  ; ***************************************************************************************
    2 00:40D3 -  -  -  -  ; ***************************************************************************************
    3 00:40D3 -  -  -  -  ;
    4 00:40D3 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D3 -  -  -  -  ;		Reviewed :	No
    8 00:40D3 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D3 -  -  -  -  ;
   10 00:40D3 -  -  -  -  ; ***************************************************************************************
   11 00:40D3 -  -  -  -  ; ***************************************************************************************
   12 00:40D3 -  -  -  -  
   13 00:40D3 -  -  -  -  ; ***************************************************************************************
   14 00:40D3 -  -  -  -  ;
   15 00:40D3 -  -  -  -  ;									ASSERT command
   16 00:40D3 -  -  -  -  ;
   17 00:40D3 -  -  -  -  ; ***************************************************************************************
   18 00:40D3 -  -  -  -  
   19 00:40D3 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D3 CD 3A 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40D6 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40DC C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40DD 3E 01 C3 55 
              42 -  -  -  		ERR_ASSERT
   24 00:40E2 -  -  -  -  
   25 00:40E2 -  -  -  -  ; ***************************************************************************************
   26 00:40E2 -  -  -  -  ;
   27 00:40E2 -  -  -  -  ;									Changes and Updates
   28 00:40E2 -  -  -  -  ;
   29 00:40E2 -  -  -  -  ; ***************************************************************************************
   30 00:40E2 -  -  -  -  ;
   31 00:40E2 -  -  -  -  ;		Date			Notes
   32 00:40E2 -  -  -  -  ;		==== 			=====
   33 00:40E2 -  -  -  -  ;
   34 00:40E2 -  -  -  -  ; ***************************************************************************************
   35 00:40E2 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E2 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E2 -  -  -  -  ; ***************************************************************************************
    2 00:40E2 -  -  -  -  ; ***************************************************************************************
    3 00:40E2 -  -  -  -  ;
    4 00:40E2 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E2 -  -  -  -  ;		Reviewed :	No
    8 00:40E2 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E2 -  -  -  -  ;
   10 00:40E2 -  -  -  -  ; ***************************************************************************************
   11 00:40E2 -  -  -  -  ; ***************************************************************************************
   12 00:40E2 -  -  -  -  
   13 00:40E2 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E2 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E2 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E2 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40E2 -  -  -  -  BadCmd_To: 			;; [to]
   18 00:40E2 C3 B2 42 -  		jp 		SyntaxError
   19 00:40E5 -  -  -  -  
   20 00:40E5 -  -  -  -  ; ***************************************************************************************
   21 00:40E5 -  -  -  -  ;
   22 00:40E5 -  -  -  -  ;									Changes and Updates
   23 00:40E5 -  -  -  -  ;
   24 00:40E5 -  -  -  -  ; ***************************************************************************************
   25 00:40E5 -  -  -  -  ;
   26 00:40E5 -  -  -  -  ;		Date			Notes
   27 00:40E5 -  -  -  -  ;		==== 			=====
   28 00:40E5 -  -  -  -  ;
   29 00:40E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40E5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40E5 -  -  -  -  ; ***************************************************************************************
    2 00:40E5 -  -  -  -  ; ***************************************************************************************
    3 00:40E5 -  -  -  -  ;
    4 00:40E5 -  -  -  -  ;		Name : 		colon.asm
    5 00:40E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40E5 -  -  -  -  ;		Reviewed :	No
    8 00:40E5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40E5 -  -  -  -  ;
   10 00:40E5 -  -  -  -  ; ***************************************************************************************
   11 00:40E5 -  -  -  -  ; ***************************************************************************************
   12 00:40E5 -  -  -  -  
   13 00:40E5 -  -  -  -  ; ***************************************************************************************
   14 00:40E5 -  -  -  -  ;
   15 00:40E5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40E5 -  -  -  -  ;
   17 00:40E5 -  -  -  -  ; ***************************************************************************************
   18 00:40E5 -  -  -  -  
   19 00:40E5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40E5 C9 -  -  -  		ret
   21 00:40E6 -  -  -  -  
   22 00:40E6 -  -  -  -  ; ***************************************************************************************
   23 00:40E6 -  -  -  -  ;
   24 00:40E6 -  -  -  -  ;									Changes and Updates
   25 00:40E6 -  -  -  -  ;
   26 00:40E6 -  -  -  -  ; ***************************************************************************************
   27 00:40E6 -  -  -  -  ;
   28 00:40E6 -  -  -  -  ;		Date			Notes
   29 00:40E6 -  -  -  -  ;		==== 			=====
   30 00:40E6 -  -  -  -  ;
   31 00:40E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40E6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40E6 -  -  -  -  ; ***************************************************************************************
    2 00:40E6 -  -  -  -  ; ***************************************************************************************
    3 00:40E6 -  -  -  -  ;
    4 00:40E6 -  -  -  -  ;		Name : 		dim.asm
    5 00:40E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:40E6 -  -  -  -  ;		Reviewed :	No
    8 00:40E6 -  -  -  -  ;		Purpose :	Dim command
    9 00:40E6 -  -  -  -  ;
   10 00:40E6 -  -  -  -  ; ***************************************************************************************
   11 00:40E6 -  -  -  -  ; ***************************************************************************************
   12 00:40E6 -  -  -  -  
   13 00:40E6 -  -  -  -  ; ***************************************************************************************
   14 00:40E6 -  -  -  -  ;
   15 00:40E6 -  -  -  -  ;		DIM command
   16 00:40E6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 00:40E6 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 00:40E6 -  -  -  -  ;								(can be comma chained)
   19 00:40E6 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 00:40E6 -  -  -  -  ;
   21 00:40E6 -  -  -  -  ; ***************************************************************************************
   22 00:40E6 -  -  -  -  
   23 00:40E6 -  -  -  -  Command_DIM: 	;; [dim]
   24 00:40E6 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   25 00:40E7 -  -  -  -  
   26 00:40E7 -  -  -  -  ; ***************************************************************************************
   27 00:40E7 -  -  -  -  ;
   28 00:40E7 -  -  -  -  ;									Changes and Updates
   29 00:40E7 -  -  -  -  ;
   30 00:40E7 -  -  -  -  ; ***************************************************************************************
   31 00:40E7 -  -  -  -  ;
   32 00:40E7 -  -  -  -  ;		Date			Notes
   33 00:40E7 -  -  -  -  ;		==== 			=====
   34 00:40E7 -  -  -  -  ;
   35 00:40E7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:40E7 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40E7 -  -  -  -  ; ***************************************************************************************
    2 00:40E7 -  -  -  -  ; ***************************************************************************************
    3 00:40E7 -  -  -  -  ;
    4 00:40E7 -  -  -  -  ;		Name : 		end.asm
    5 00:40E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E7 -  -  -  -  ;		Reviewed :	No
    8 00:40E7 -  -  -  -  ;		Purpose :	End command
    9 00:40E7 -  -  -  -  ;
   10 00:40E7 -  -  -  -  ; ***************************************************************************************
   11 00:40E7 -  -  -  -  ; ***************************************************************************************
   12 00:40E7 -  -  -  -  
   13 00:40E7 -  -  -  -  ; ***************************************************************************************
   14 00:40E7 -  -  -  -  ;
   15 00:40E7 -  -  -  -  ;										END command
   16 00:40E7 -  -  -  -  ;
   17 00:40E7 -  -  -  -  ; ***************************************************************************************
   18 00:40E7 -  -  -  -  
   19 00:40E7 -  -  -  -  Command_END: 	;; [end]
   20 00:40E7 3E 00 C3 55 
              42 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40EC -  -  -  -  
   22 00:40EC -  -  -  -  ; ***************************************************************************************
   23 00:40EC -  -  -  -  ;
   24 00:40EC -  -  -  -  ;									Changes and Updates
   25 00:40EC -  -  -  -  ;
   26 00:40EC -  -  -  -  ; ***************************************************************************************
   27 00:40EC -  -  -  -  ;
   28 00:40EC -  -  -  -  ;		Date			Notes
   29 00:40EC -  -  -  -  ;		==== 			=====
   30 00:40EC -  -  -  -  ;
   31 00:40EC -  -  -  -  ; ***************************************************************************************
   32 00:40EC -  -  -  -  		
Listing for file "_build.asm"
   18 00:40EC -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40EC -  -  -  -  ; ***************************************************************************************
    2 00:40EC -  -  -  -  ; ***************************************************************************************
    3 00:40EC -  -  -  -  ;
    4 00:40EC -  -  -  -  ;		Name : 		endofline.asm
    5 00:40EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EC -  -  -  -  ;		Reviewed :	None
    8 00:40EC -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40EC -  -  -  -  ;
   10 00:40EC -  -  -  -  ; ***************************************************************************************
   11 00:40EC -  -  -  -  ; ***************************************************************************************
   12 00:40EC -  -  -  -  
   13 00:40EC -  -  -  -  ; ***************************************************************************************
   14 00:40EC -  -  -  -  ;
   15 00:40EC -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40EC -  -  -  -  ;
   17 00:40EC -  -  -  -  ; ***************************************************************************************
   18 00:40EC -  -  -  -  
   19 00:40EC -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40EC DD 2A 51 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40F0 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40F3 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40F6 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40F8 -  -  -  -  		;
   25 00:40F8 ED 7B 55 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40FC C3 BD 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40FF -  -  -  -  
   28 00:40FF -  -  -  -  ; ***************************************************************************************
   29 00:40FF -  -  -  -  ;
   30 00:40FF -  -  -  -  ;									Changes and Updates
   31 00:40FF -  -  -  -  ;
   32 00:40FF -  -  -  -  ; ***************************************************************************************
   33 00:40FF -  -  -  -  ;
   34 00:40FF -  -  -  -  ;		Date			Notes
   35 00:40FF -  -  -  -  ;		==== 			=====
   36 00:40FF -  -  -  -  ;
   37 00:40FF -  -  -  -  ; ***************************************************************************************
   38 00:40FF -  -  -  -  		
Listing for file "_build.asm"
   19 00:40FF -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:40FF -  -  -  -  ; ***************************************************************************************
    2 00:40FF -  -  -  -  ; ***************************************************************************************
    3 00:40FF -  -  -  -  ;
    4 00:40FF -  -  -  -  ;		Name : 		let.asm
    5 00:40FF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40FF -  -  -  -  ;		Date : 		4th June 2022
    7 00:40FF -  -  -  -  ;		Reviewed :	No
    8 00:40FF -  -  -  -  ;		Purpose :	Assignment statement
    9 00:40FF -  -  -  -  ;
   10 00:40FF -  -  -  -  ; ***************************************************************************************
   11 00:40FF -  -  -  -  ; ***************************************************************************************
   12 00:40FF -  -  -  -  
   13 00:40FF -  -  -  -  ; ***************************************************************************************
   14 00:40FF -  -  -  -  ;
   15 00:40FF -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:40FF -  -  -  -  ;
   17 00:40FF -  -  -  -  ; ***************************************************************************************
   18 00:40FF -  -  -  -  
   19 00:40FF -  -  -  -  Command_LET: 	;; [let]
   20 00:40FF DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:4102 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:4104 28 28 -  -  		jr 		z,_CLString
   23 00:4106 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:4108 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:410A 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:410C 32 75 40 -  		ld 		(AllowAutoCreate),a
   27 00:410F -  -  -  -  _CLNoAuto:
   28 00:410F 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:4111 CD CB 43 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:4114 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:4116 CA B2 42 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:4119 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:411A C5 -  -  -  		push 	bc 							; save type on stack
   34 00:411B AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:411C 32 75 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:411F 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:4121 CD 4A 42 -  		call 	CheckNextA
   38 00:4124 -  -  -  -  
   39 00:4124 CD 34 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:4127 -  -  -  -  
   41 00:4127 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:4128 43 -  -  -  		ld 		b,e 						
   43 00:4129 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:412A -  -  -  -  		;
   45 00:412A -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:412A -  -  -  -  		;
   47 00:412A CD 2F 41 -  		call 	WriteHLToDE
   48 00:412D C9 -  -  -  		ret
   49 00:412E -  -  -  -  		;
   50 00:412E -  -  -  -  		; 		String assignment code.
   51 00:412E -  -  -  -  		;
   52 00:412E -  -  -  -  _CLString:
   53 00:412E 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:412F -  -  -  -  
   55 00:412F -  -  -  -  ; ***************************************************************************************
   56 00:412F -  -  -  -  ;
   57 00:412F -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:412F -  -  -  -  ;
   59 00:412F -  -  -  -  ; ***************************************************************************************
   60 00:412F -  -  -  -  
   61 00:412F -  -  -  -  WriteHLToDE:
   62 00:412F CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:4131 C2 A8 42 -  		jp 		nz,TypeMismatch
   64 00:4134 -  -  -  -  		;
   65 00:4134 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:4134 -  -  -  -  		;		
   67 00:4134 -  -  -  -  _WHDWriteNumber:
   68 00:4134 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:4135 D9 -  -  -  		exx
   70 00:4136 EB -  -  -  		ex 		de,hl
   71 00:4137 D9 -  -  -  		exx
   72 00:4138 -  -  -  -  
   73 00:4138 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:4139 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:413A 72 -  -  -  		ld 		(hl),d
   76 00:413B 23 -  -  -  		inc 	hl
   77 00:413C E5 -  -  -  		push 	hl
   78 00:413D D9 -  -  -  		exx
   79 00:413E E1 -  -  -  		pop 	hl
   80 00:413F 73 -  -  -  		ld 		(hl),e
   81 00:4140 23 -  -  -  		inc 	hl
   82 00:4141 72 -  -  -  		ld 		(hl),d
   83 00:4142 D9 -  -  -  		exx
   84 00:4143 -  -  -  -  
   85 00:4143 C9 -  -  -  		ret
   86 00:4144 -  -  -  -  
   87 00:4144 -  -  -  -  ; ***************************************************************************************
   88 00:4144 -  -  -  -  ;
   89 00:4144 -  -  -  -  ;									Changes and Updates
   90 00:4144 -  -  -  -  ;
   91 00:4144 -  -  -  -  ; ***************************************************************************************
   92 00:4144 -  -  -  -  ;
   93 00:4144 -  -  -  -  ;		Date			Notes
   94 00:4144 -  -  -  -  ;		==== 			=====
   95 00:4144 -  -  -  -  ;
   96 00:4144 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:4144 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:4144 -  -  -  -  ; ***************************************************************************************
    2 00:4144 -  -  -  -  ; ***************************************************************************************
    3 00:4144 -  -  -  -  ;
    4 00:4144 -  -  -  -  ;		Name : 		print.asm
    5 00:4144 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4144 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4144 -  -  -  -  ;		Reviewed :	No
    8 00:4144 -  -  -  -  ;		Purpose :	Print command
    9 00:4144 -  -  -  -  ;
   10 00:4144 -  -  -  -  ; ***************************************************************************************
   11 00:4144 -  -  -  -  ; ***************************************************************************************
   12 00:4144 -  -  -  -  
   13 00:4144 -  -  -  -  ; ***************************************************************************************
   14 00:4144 -  -  -  -  ;
   15 00:4144 -  -  -  -  ;										PRINT command
   16 00:4144 -  -  -  -  ;
   17 00:4144 -  -  -  -  ; ***************************************************************************************
   18 00:4144 -  -  -  -  
   19 00:4144 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:4144 -  -  -  -  		;
   21 00:4144 -  -  -  -  		;		Main loop
   22 00:4144 -  -  -  -  		;
   23 00:4144 -  -  -  -  _CPRLoop:
   24 00:4144 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:4147 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:4149 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:414B FE A7 -  -  		cp 		KWD_COLON 	
   28 00:414D 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:414F FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:4151 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:4153 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:4155 28 26 -  -  		jr 		z,_CPRTab
   33 00:4157 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:4159 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:415B -  -  -  -  		;
   36 00:415B CD 34 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:415E CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:4160 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:4162 -  -  -  -  		;
   40 00:4162 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:4164 -  -  -  -  _CPRPrintNumber:
   42 00:4164 F5 -  -  -  		push 	af 							; print leading space
   43 00:4165 3E 20 -  -  		ld 		a,' '
   44 00:4167 CD BE 4B -  		call 	SYSPrintChar
   45 00:416A F1 -  -  -  		pop 	af
   46 00:416B 01 93 40 -  		ld  	bc,ConvertBuffer
   47 00:416E C5 -  -  -  		push 	bc
   48 00:416F CD 70 4B -  		call 	Int32ToString 				; convert to string
   49 00:4172 E1 -  -  -  		pop 	hl
   50 00:4173 -  -  -  -  		;
   51 00:4173 -  -  -  -  		; 		Print text at HL.
   52 00:4173 -  -  -  -  		;
   53 00:4173 -  -  -  -  _CPRPrintHL:
   54 00:4173 CD F3 46 -  		call 	PrintStringAtHL 			; print string out
   55 00:4176 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4178 -  -  -  -  		;
   57 00:4178 -  -  -  -  		; 		New line (')
   58 00:4178 -  -  -  -  		;
   59 00:4178 -  -  -  -  _CPRNewLine:
   60 00:4178 CD DA 4B -  		call 	SYSPrintCRLF
   61 00:417B 18 05 -  -  		jr 		_CPRCheckNext
   62 00:417D -  -  -  -  		;
   63 00:417D -  -  -  -  		; 		Tab command (,)
   64 00:417D -  -  -  -  		;
   65 00:417D -  -  -  -  _CPRTab:
   66 00:417D 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:417F CD BE 4B -  		call 	SYSPrintChar
   68 00:4182 -  -  -  -  		;
   69 00:4182 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:4182 -  -  -  -  		;
   71 00:4182 -  -  -  -  _CPRCheckNext:
   72 00:4182 DD 23 -  -  		inc 	ix 							; consume current
   73 00:4184 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:4187 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:4189 C8 -  -  -  		ret 	z
   76 00:418A FE A7 -  -  		cp 		KWD_COLON
   77 00:418C C8 -  -  -  		ret 	z
   78 00:418D 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:418F -  -  -  -  		;
   80 00:418F -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:418F -  -  -  -  		;
   82 00:418F -  -  -  -  _CPRExitNL:
   83 00:418F CD DA 4B -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:4192 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:4193 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4193 -  -  -  -  ; ***************************************************************************************
    2 00:4193 -  -  -  -  ; ***************************************************************************************
    3 00:4193 -  -  -  -  ;
    4 00:4193 -  -  -  -  ;		Name : 		rem.asm
    5 00:4193 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4193 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4193 -  -  -  -  ;		Reviewed :	No
    8 00:4193 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4193 -  -  -  -  ;
   10 00:4193 -  -  -  -  ; ***************************************************************************************
   11 00:4193 -  -  -  -  ; ***************************************************************************************
   12 00:4193 -  -  -  -  
   13 00:4193 -  -  -  -  ; ***************************************************************************************
   14 00:4193 -  -  -  -  ;
   15 00:4193 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4193 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4193 -  -  -  -  ;
   18 00:4193 -  -  -  -  ; ***************************************************************************************
   19 00:4193 -  -  -  -  
   20 00:4193 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4193 -  -  -  -  Command_REM2: 	;; [']
   22 00:4193 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:4196 DD 23 -  -  		inc 	ix
   24 00:4198 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:419A C8 -  -  -  		ret 	z
   26 00:419B FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:419D C8 -  -  -  		ret 	z
   28 00:419E FE 3F -  -  		cp 		STRING_MARKER
   29 00:41A0 C2 B2 42 -  		jp 		nz,SyntaxError
   30 00:41A3 -  -  -  -  		;		
   31 00:41A3 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:41A6 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:41A9 13 -  -  -  		inc 	de 
   34 00:41AA 13 -  -  -  		inc 	de
   35 00:41AB DD 19 -  -  		add 	ix,de 						; skip string
   36 00:41AD C9 -  -  -  		ret
   37 00:41AE -  -  -  -  
   38 00:41AE -  -  -  -  ; ***************************************************************************************
   39 00:41AE -  -  -  -  ;
   40 00:41AE -  -  -  -  ;									Changes and Updates
   41 00:41AE -  -  -  -  ;
   42 00:41AE -  -  -  -  ; ***************************************************************************************
   43 00:41AE -  -  -  -  ;
   44 00:41AE -  -  -  -  ;		Date			Notes
   45 00:41AE -  -  -  -  ;		==== 			=====
   46 00:41AE -  -  -  -  ;
   47 00:41AE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:41AE -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:41AE -  -  -  -  ; ***************************************************************************************
    2 00:41AE -  -  -  -  ; ***************************************************************************************
    3 00:41AE -  -  -  -  ;
    4 00:41AE -  -  -  -  ;		Name : 		run.asm
    5 00:41AE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41AE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41AE -  -  -  -  ;		Reviewed :	No
    8 00:41AE -  -  -  -  ;		Purpose :	Run command
    9 00:41AE -  -  -  -  ;
   10 00:41AE -  -  -  -  ; ***************************************************************************************
   11 00:41AE -  -  -  -  ; ***************************************************************************************
   12 00:41AE -  -  -  -  
   13 00:41AE -  -  -  -  ; ***************************************************************************************
   14 00:41AE -  -  -  -  ;
   15 00:41AE -  -  -  -  ;										RUN command
   16 00:41AE -  -  -  -  ;
   17 00:41AE -  -  -  -  ; ***************************************************************************************
   18 00:41AE -  -  -  -  
   19 00:41AE -  -  -  -  Command_RUN: 	;; [run]
   20 00:41AE CD 99 46 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:41B1 -  -  -  -  
   22 00:41B1 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:41B5 ED 73 55 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:41B9 AF -  -  -  		xor 	a
   25 00:41BA 32 75 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:41BD -  -  -  -  		;
   27 00:41BD -  -  -  -  		; 		New line at IX.
   28 00:41BD -  -  -  -  		;
   29 00:41BD -  -  -  -  CRNewLine:
   30 00:41BD DD 22 51 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:41C1 -  -  -  -  		;
   32 00:41C1 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:41C4 B7 -  -  -  		or 		a
   34 00:41C5 CA E7 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:41C8 -  -  -  -  		;
   36 00:41C8 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:41CA DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:41CC DD 23 -  -  		inc 	ix
   39 00:41CE -  -  -  -  		;
   40 00:41CE -  -  -  -  		; 		New command at IX
   41 00:41CE -  -  -  -  		;
   42 00:41CE -  -  -  -  _CRNewCommand:	
   43 00:41CE DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:41D1 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:41D2 F2 06 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:41D5 -  -  -  -  		;
   47 00:41D5 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:41D7 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:41D9 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:41DB D2 F7 41 -  		jp 		nc,_CRAlternateLets
   51 00:41DE -  -  -  -  		;
   52 00:41DE -  -  -  -  _CRDoCommand:		
   53 00:41DE E6 7F 21 00 
              00 6F 29 11 
              3E 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:41F0 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:41F2 CD 59 40 -  		call 	JumpCode 					; call the routine.
   56 00:41F5 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:41F7 -  -  -  -  		;
   58 00:41F7 -  -  -  -  		; 		Do CALL (HL)
   59 00:41F7 -  -  -  -  		;
   60 00:41F7 -  -  -  -  		;
   61 00:41F7 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:41F7 -  -  -  -  		;		
   63 00:41F7 -  -  -  -  _CRAlternateLets:		
   64 00:41F7 FE 83 -  -  		cp 		KWD_PLING
   65 00:41F9 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:41FB FE 84 -  -  		cp 		KWD_QMARK
   67 00:41FD 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:41FF FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:4201 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:4203 C3 B2 42 -  		jp 		SyntaxError
   71 00:4206 -  -  -  -  		;
   72 00:4206 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:4206 -  -  -  -  		;
   74 00:4206 -  -  -  -  _CRAssignmentHandler:		
   75 00:4206 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:4208 D2 B2 42 -  		jp 		nc,SyntaxError
   77 00:420B -  -  -  -  _CRAssignmentLet:		
   78 00:420B CD FF 40 -  		call	Command_LET 				; do LET.
   79 00:420E C3 CE 41 -  		jp 		_CRNewCommand
   80 00:4211 -  -  -  -  
   81 00:4211 -  -  -  -  ; ***************************************************************************************
   82 00:4211 -  -  -  -  ;
   83 00:4211 -  -  -  -  ;									Changes and Updates
   84 00:4211 -  -  -  -  ;
   85 00:4211 -  -  -  -  ; ***************************************************************************************
   86 00:4211 -  -  -  -  ;
   87 00:4211 -  -  -  -  ;		Date			Notes
   88 00:4211 -  -  -  -  ;		==== 			=====
   89 00:4211 -  -  -  -  ;
   90 00:4211 -  -  -  -  ; ***************************************************************************************
   91 00:4211 -  -  -  -  		
Listing for file "_build.asm"
   23 00:4211 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:4211 -  -  -  -  ; ***************************************************************************************
    2 00:4211 -  -  -  -  ; ***************************************************************************************
    3 00:4211 -  -  -  -  ;
    4 00:4211 -  -  -  -  ;		Name : 		stop.asm
    5 00:4211 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4211 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4211 -  -  -  -  ;		Reviewed :	No
    8 00:4211 -  -  -  -  ;		Purpose :	Stop command
    9 00:4211 -  -  -  -  ;
   10 00:4211 -  -  -  -  ; ***************************************************************************************
   11 00:4211 -  -  -  -  ; ***************************************************************************************
   12 00:4211 -  -  -  -  
   13 00:4211 -  -  -  -  ; ***************************************************************************************
   14 00:4211 -  -  -  -  ;
   15 00:4211 -  -  -  -  ;										STOP command
   16 00:4211 -  -  -  -  ;
   17 00:4211 -  -  -  -  ; ***************************************************************************************
   18 00:4211 -  -  -  -  
   19 00:4211 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:4211 3E 0C C3 55 
              42 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4216 -  -  -  -  
   22 00:4216 -  -  -  -  ; ***************************************************************************************
   23 00:4216 -  -  -  -  ;
   24 00:4216 -  -  -  -  ;									Changes and Updates
   25 00:4216 -  -  -  -  ;
   26 00:4216 -  -  -  -  ; ***************************************************************************************
   27 00:4216 -  -  -  -  ;
   28 00:4216 -  -  -  -  ;		Date			Notes
   29 00:4216 -  -  -  -  ;		==== 			=====
   30 00:4216 -  -  -  -  ;
   31 00:4216 -  -  -  -  ; ***************************************************************************************
   32 00:4216 -  -  -  -  		
Listing for file "_build.asm"
   24 00:4216 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4216 -  -  -  -  ; ***************************************************************************************
    2 00:4216 -  -  -  -  ; ***************************************************************************************
    3 00:4216 -  -  -  -  ;
    4 00:4216 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4216 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4216 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4216 -  -  -  -  ;		Reviewed :	No
    8 00:4216 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4216 -  -  -  -  ;
   10 00:4216 -  -  -  -  ; ***************************************************************************************
   11 00:4216 -  -  -  -  ; ***************************************************************************************
   12 00:4216 -  -  -  -  
   13 00:4216 -  -  -  -  ; ***************************************************************************************
   14 00:4216 -  -  -  -  ;
   15 00:4216 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4216 -  -  -  -  ;
   17 00:4216 -  -  -  -  ; ***************************************************************************************
   18 00:4216 -  -  -  -  
   19 00:4216 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4216             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4216             		inc 	ix
   22 00:4216             		cp 		ch 							; exit if matches
   23 00:4216             		ret 	z
   24 00:4216             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4216             		jp 		ErrorHandler
   26 00:4216             #endmacro
   27 00:4216 -  -  -  -  
   28 00:4216 -  -  -  -  CheckLeftBracket:
   29 00:4216 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 55 
              42 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4223 -  -  -  -  
   31 00:4223 -  -  -  -  CheckRightBracket:
   32 00:4223 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 55 
              42 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:4230 -  -  -  -  
   34 00:4230 -  -  -  -  CheckDollar:
   35 00:4230 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 55 
              42 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:423D -  -  -  -  		
   37 00:423D -  -  -  -  CheckComma:
   38 00:423D DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 55 
              42 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:424A -  -  -  -  
   40 00:424A -  -  -  -  ; ***************************************************************************************
   41 00:424A -  -  -  -  ;
   42 00:424A -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:424A -  -  -  -  ;
   44 00:424A -  -  -  -  ; ***************************************************************************************
   45 00:424A -  -  -  -  
   46 00:424A -  -  -  -  CheckNextA:
   47 00:424A DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:424D DD 23 -  -  		inc 	ix 							; skip character
   49 00:424F C8 -  -  -  		ret 	z 							; yes, okay
   50 00:4250 3E 0D C3 55 
              42 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:4255 -  -  -  -  		
   52 00:4255 -  -  -  -  ; ***************************************************************************************
   53 00:4255 -  -  -  -  ;
   54 00:4255 -  -  -  -  ;									Changes and Updates
   55 00:4255 -  -  -  -  ;
   56 00:4255 -  -  -  -  ; ***************************************************************************************
   57 00:4255 -  -  -  -  ;
   58 00:4255 -  -  -  -  ;		Date			Notes
   59 00:4255 -  -  -  -  ;		==== 			=====
   60 00:4255 -  -  -  -  ;
   61 00:4255 -  -  -  -  ; ***************************************************************************************
   62 00:4255 -  -  -  -  		
Listing for file "_build.asm"
   25 00:4255 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4255 -  -  -  -  ; ***************************************************************************************
    2 00:4255 -  -  -  -  ; ***************************************************************************************
    3 00:4255 -  -  -  -  ;
    4 00:4255 -  -  -  -  ;		Name : 		errors.asm
    5 00:4255 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4255 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4255 -  -  -  -  ;		Reviewed :	No
    8 00:4255 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4255 -  -  -  -  ;
   10 00:4255 -  -  -  -  ; ***************************************************************************************
   11 00:4255 -  -  -  -  ; ***************************************************************************************
   12 00:4255 -  -  -  -  
   13 00:4255 -  -  -  -  ; ***************************************************************************************
   14 00:4255 -  -  -  -  ;
   15 00:4255 -  -  -  -  ;								Error handler, message A 
   16 00:4255 -  -  -  -  ;
   17 00:4255 -  -  -  -  ; ***************************************************************************************
   18 00:4255 -  -  -  -  
   19 00:4255 -  -  -  -  ErrorHandler:
   20 00:4255 F5 -  -  -  		push 	af 						; save error ID
   21 00:4256 -  -  -  -  
   22 00:4256 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4259 6F -  -  -  		ld 		l,a
   24 00:425A 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:425B 29 -  -  -  		add 	hl,hl 		
   26 00:425C 11 11 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:425F 19 -  -  -  		add 	hl,de
   28 00:4260 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4264 CD F3 46 -  		call 	PrintStringAtHL
   30 00:4267 -  -  -  -  		;
   31 00:4267 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4268 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4269 28 28 -  -  		jr 		z,_EHExit
   34 00:426B -  -  -  -  		;
   35 00:426B DD 2A 51 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:426F DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4272 B7 -  -  -  		or 		a
   38 00:4273 28 1E -  -  		jr 		z,_EHExit
   39 00:4275 -  -  -  -  
   40 00:4275 21 99 42 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4278 CD F3 46 -  		call 	PrintStringAtHL 
   42 00:427B -  -  -  -  		
   43 00:427B D9 -  -  -  		exx								; HL'HL = line number
   44 00:427C 21 00 00 -  		ld 		hl,$0000 		
   45 00:427F D9 -  -  -  		exx 
   46 00:4280 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4283 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4286 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4288 01 93 40 -  		ld 		bc,ConvertBuffer
   50 00:428B CD 70 4B -  		call 	Int32ToString
   51 00:428E C5 -  -  -  		push 	bc
   52 00:428F E1 -  -  -  		pop 	hl
   53 00:4290 CD F3 46 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4293 -  -  -  -  _EHExit:		
   55 00:4293 CD DA 4B -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4296 C3 17 40 -  		jp 		WarmStart
   57 00:4299 -  -  -  -  
   58 00:4299 -  -  -  -  _EHAtText:
   59 00:4299 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:42A3 -  -  -  -  
   61 00:42A3 -  -  -  -  NotImplemented:
   62 00:42A3 3E 04 C3 55 
              42 -  -  -  		ERR_DISABLED
   63 00:42A8 -  -  -  -  TypeMismatch:
   64 00:42A8 3E 02 C3 55 
              42 -  -  -  		ERR_BADTYPE
   65 00:42AD -  -  -  -  BadValue:
   66 00:42AD 3E 03 C3 55 
              42 -  -  -  		ERR_BADVALUE
   67 00:42B2 -  -  -  -  SyntaxError:
   68 00:42B2 3E 0D C3 55 
              42 -  -  -  		ERR_SYNTAX
   69 00:42B7 -  -  -  -  						
   70 00:42B7 -  -  -  -  ; ***************************************************************************************
   71 00:42B7 -  -  -  -  ;
   72 00:42B7 -  -  -  -  ;									Changes and Updates
   73 00:42B7 -  -  -  -  ;
   74 00:42B7 -  -  -  -  ; ***************************************************************************************
   75 00:42B7 -  -  -  -  ;
   76 00:42B7 -  -  -  -  ;		Date			Notes
   77 00:42B7 -  -  -  -  ;		==== 			=====
   78 00:42B7 -  -  -  -  ;
   79 00:42B7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42B7 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:42B7 -  -  -  -  ; ***************************************************************************************
    2 00:42B7 -  -  -  -  ; ***************************************************************************************
    3 00:42B7 -  -  -  -  ;
    4 00:42B7 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:42B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42B7 -  -  -  -  ;		Reviewed :	No
    8 00:42B7 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:42B7 -  -  -  -  ;
   10 00:42B7 -  -  -  -  ; ***************************************************************************************
   11 00:42B7 -  -  -  -  ; ***************************************************************************************
   12 00:42B7 -  -  -  -  
   13 00:42B7 -  -  -  -  ; ***************************************************************************************
   14 00:42B7 -  -  -  -  ;
   15 00:42B7 -  -  -  -  ; 									Addition
   16 00:42B7 -  -  -  -  ;
   17 00:42B7 -  -  -  -  ; ***************************************************************************************
   18 00:42B7 -  -  -  -  
   19 00:42B7 -  -  -  -  ALUAdd: 		;; [+]
   20 00:42B7 CD AA 43 78 
              B1 C2 A8 42 
              C3 FD 4A -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:42C2 -  -  -  -  
   22 00:42C2 -  -  -  -  ; ***************************************************************************************
   23 00:42C2 -  -  -  -  ;
   24 00:42C2 -  -  -  -  ; 									Subtraction
   25 00:42C2 -  -  -  -  ;
   26 00:42C2 -  -  -  -  ; ***************************************************************************************
   27 00:42C2 -  -  -  -  
   28 00:42C2 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:42C2 CD AA 43 78 
              B1 C2 A8 42 
              C3 03 4B -  		IntegerDispatch(Int32Subtract)
   30 00:42CD -  -  -  -  
   31 00:42CD -  -  -  -  ; ***************************************************************************************
   32 00:42CD -  -  -  -  ;
   33 00:42CD -  -  -  -  ; 									  Multiply
   34 00:42CD -  -  -  -  ;
   35 00:42CD -  -  -  -  ; ***************************************************************************************
   36 00:42CD -  -  -  -  
   37 00:42CD -  -  -  -  ALUMultiply: 	;; [*]
   38 00:42CD CD AA 43 78 
              B1 C2 A8 42 
              C3 C7 4A -  		IntegerDispatch(Int32Multiply)
   39 00:42D8 -  -  -  -  
   40 00:42D8 -  -  -  -  ; ***************************************************************************************
   41 00:42D8 -  -  -  -  ;
   42 00:42D8 -  -  -  -  ; 									  Divide
   43 00:42D8 -  -  -  -  ;
   44 00:42D8 -  -  -  -  ; ***************************************************************************************
   45 00:42D8 -  -  -  -  
   46 00:42D8 -  -  -  -  ALUDivide: 	;; [/]
   47 00:42D8 -  -  -  -  ALUDivide2:	;; [div]
   48 00:42D8 CD AA 43 78 
              B1 C2 A8 42 
              C3 D8 49 -  		IntegerDispatch(Int32SDivide)
   49 00:42E3 -  -  -  -  
   50 00:42E3 -  -  -  -  ; ***************************************************************************************
   51 00:42E3 -  -  -  -  ;
   52 00:42E3 -  -  -  -  ; 									  Modulus
   53 00:42E3 -  -  -  -  ;
   54 00:42E3 -  -  -  -  ; ***************************************************************************************
   55 00:42E3 -  -  -  -  
   56 00:42E3 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:42E3 CD AA 43 78 
              B1 C2 A8 42 
              C3 DB 49 -  		IntegerDispatch(Int32Modulus)
   58 00:42EE -  -  -  -  
   59 00:42EE -  -  -  -  ; ***************************************************************************************
   60 00:42EE -  -  -  -  ;
   61 00:42EE -  -  -  -  ; 									  Logical
   62 00:42EE -  -  -  -  ;
   63 00:42EE -  -  -  -  ; ***************************************************************************************
   64 00:42EE -  -  -  -  
   65 00:42EE -  -  -  -  ALUAnd: 		;; [and]
   66 00:42EE CD AA 43 78 
              B1 C2 A8 42 
              C3 0B 4B -  		IntegerDispatch(Int32And)
   67 00:42F9 -  -  -  -  
   68 00:42F9 -  -  -  -  ALUOr: 			;; [or]
   69 00:42F9 CD AA 43 78 
              B1 C2 A8 42 
              C3 17 4B -  		IntegerDispatch(Int32Or)
   70 00:4304 -  -  -  -  
   71 00:4304 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4304 CD AA 43 78 
              B1 C2 A8 42 
              C3 23 4B -  		IntegerDispatch(Int32Xor)
   73 00:430F -  -  -  -  
   74 00:430F -  -  -  -  ; ***************************************************************************************
   75 00:430F -  -  -  -  ;
   76 00:430F -  -  -  -  ;									Changes and Updates
   77 00:430F -  -  -  -  ;
   78 00:430F -  -  -  -  ; ***************************************************************************************
   79 00:430F -  -  -  -  ;
   80 00:430F -  -  -  -  ;		Date			Notes
   81 00:430F -  -  -  -  ;		==== 			=====
   82 00:430F -  -  -  -  ;
   83 00:430F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:430F -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:430F -  -  -  -  ; ***************************************************************************************
    2 00:430F -  -  -  -  ; ***************************************************************************************
    3 00:430F -  -  -  -  ;
    4 00:430F -  -  -  -  ;		Name : 		binrefs.asm
    5 00:430F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:430F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:430F -  -  -  -  ;		Reviewed :	No
    8 00:430F -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:430F -  -  -  -  ;
   10 00:430F -  -  -  -  ; ***************************************************************************************
   11 00:430F -  -  -  -  ; ***************************************************************************************
   12 00:430F -  -  -  -  
   13 00:430F -  -  -  -  ; ***************************************************************************************
   14 00:430F -  -  -  -  ;
   15 00:430F -  -  -  -  ; 									<l> <op> <r>
   16 00:430F -  -  -  -  ;
   17 00:430F -  -  -  -  ; ***************************************************************************************
   18 00:430F -  -  -  -  
   19 00:430F -  -  -  -  ALULongReference:			;; [!]
   20 00:430F CD 1D 43 -  		call 	BRGetAddress 				; calculate address
   21 00:4312 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4314 CB F9 -  -  		set 	CIsReference,c
   23 00:4316 C9 -  -  -  		ret
   24 00:4317 -  -  -  -  
   25 00:4317 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4317 CD 0F 43 -  		call 	ALULongReference
   27 00:431A CB F1 -  -  		set 	CIsByteReference,c
   28 00:431C C9 -  -  -  		ret
   29 00:431D -  -  -  -  
   30 00:431D -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:431D CD AA 43 78 
              B1 C2 A8 42 
              C3 28 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4328 -  -  -  -  _BRGAMain:		
   33 00:4328 CD FD 4A -  		call 	Int32Add 					; address in HL'HL
   34 00:432B CD 93 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:432E C9 -  -  -  		ret
   36 00:432F -  -  -  -  
   37 00:432F -  -  -  -  ; ***************************************************************************************
   38 00:432F -  -  -  -  ;
   39 00:432F -  -  -  -  ;									Changes and Updates
   40 00:432F -  -  -  -  ;
   41 00:432F -  -  -  -  ; ***************************************************************************************
   42 00:432F -  -  -  -  ;
   43 00:432F -  -  -  -  ;		Date			Notes
   44 00:432F -  -  -  -  ;		==== 			=====
   45 00:432F -  -  -  -  ;
   46 00:432F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:432F -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:432F -  -  -  -  ; ***************************************************************************************
    2 00:432F -  -  -  -  ; ***************************************************************************************
    3 00:432F -  -  -  -  ;
    4 00:432F -  -  -  -  ;		Name : 		compare.asm
    5 00:432F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:432F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:432F -  -  -  -  ;		Reviewed :	No
    8 00:432F -  -  -  -  ;		Purpose :	Comparison code
    9 00:432F -  -  -  -  ;
   10 00:432F -  -  -  -  ; ***************************************************************************************
   11 00:432F -  -  -  -  ; ***************************************************************************************
   12 00:432F -  -  -  -  
   13 00:432F -  -  -  -  #macro compare_equals(n)
   14 00:432F             		call 	CompareBaseCode
   15 00:432F             		cp 		n
   16 00:432F             		jr 		z,UnaryInt32True
   17 00:432F             		jr 		UnaryInt32False
   18 00:432F             #endmacro
   19 00:432F -  -  -  -  
   20 00:432F -  -  -  -  #macro compare_not_equals(n)
   21 00:432F             		call 	CompareBaseCode
   22 00:432F             		cp 		n
   23 00:432F             		jr 		nz,UnaryInt32True
   24 00:432F             		jr 		UnaryInt32False
   25 00:432F             #endmacro
   26 00:432F -  -  -  -  
   27 00:432F -  -  -  -  ; ***************************************************************************************
   28 00:432F -  -  -  -  ;
   29 00:432F -  -  -  -  ; 								Return True/False
   30 00:432F -  -  -  -  ;
   31 00:432F -  -  -  -  ; ***************************************************************************************
   32 00:432F -  -  -  -  
   33 00:432F -  -  -  -  UnaryInt32True:	;; [true]
   34 00:432F 3E FF -  -  		ld 		a,255
   35 00:4331 18 01 -  -  		jr 		_Int32Logical
   36 00:4333 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:4333 AF -  -  -  		xor 	a
   38 00:4334 -  -  -  -  _Int32Logical:
   39 00:4334 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4335 67 -  -  -  		ld 		h,a
   41 00:4336 D9 -  -  -  		exx
   42 00:4337 6F -  -  -  		ld 		l,a
   43 00:4338 67 -  -  -  		ld 		h,a
   44 00:4339 D9 -  -  -  		exx
   45 00:433A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:433C C9 -  -  -  		ret
   47 00:433D -  -  -  -  
   48 00:433D -  -  -  -  ; ***************************************************************************************
   49 00:433D -  -  -  -  ;
   50 00:433D -  -  -  -  ; 										> = < (compare == value)
   51 00:433D -  -  -  -  ;
   52 00:433D -  -  -  -  ; ***************************************************************************************
   53 00:433D -  -  -  -  
   54 00:433D -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:433D CD 73 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4346 -  -  -  -  
   57 00:4346 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4346 CD 73 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:434F -  -  -  -  
   60 00:434F -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:434F CD 73 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4358 -  -  -  -  
   63 00:4358 -  -  -  -  ; ***************************************************************************************
   64 00:4358 -  -  -  -  ;
   65 00:4358 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4358 -  -  -  -  ;
   67 00:4358 -  -  -  -  ; ***************************************************************************************
   68 00:4358 -  -  -  -  
   69 00:4358 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4358 CD 73 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4361 -  -  -  -  
   72 00:4361 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4361 CD 73 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:436A -  -  -  -  
   75 00:436A -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:436A CD 73 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4373 -  -  -  -  
   78 00:4373 -  -  -  -  ; ***************************************************************************************
   79 00:4373 -  -  -  -  ;
   80 00:4373 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4373 -  -  -  -  ;
   82 00:4373 -  -  -  -  ; ***************************************************************************************
   83 00:4373 -  -  -  -  
   84 00:4373 -  -  -  -  CompareBaseCode:
   85 00:4373 CD AA 43 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4376 -  -  -  -  
   87 00:4376 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4377 A1 -  -  -  		and 	c
   89 00:4378 CB 47 -  -  		bit 	CIsString,a 
   90 00:437A C2 89 43 -  		jp 		nz,StringCompare
   91 00:437D -  -  -  -  
   92 00:437D 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:437E B1 -  -  -  		or 		c
   94 00:437F CB 47 -  -  		bit 	CIsString,a 
   95 00:4381 CA 36 4B -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4384 -  -  -  -  
   97 00:4384 3E 02 C3 55 
              42 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4389 -  -  -  -  ;
   99 00:4389 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4389 -  -  -  -  ;
  101 00:4389 -  -  -  -  StringCompare:
  102 00:4389 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:438A BE -  -  -  		cp 		(hl)
  104 00:438B 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:438D 20 08 -  -  		jr 		nz,_SCLess
  106 00:438F 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4390 23 -  -  -  		inc 	hl
  108 00:4391 FE 20 -  -  		cp 		' '
  109 00:4393 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4395 AF -  -  -  		xor 	a 							; return 0.
  111 00:4396 C9 -  -  -  		ret
  112 00:4397 -  -  -  -  
  113 00:4397 -  -  -  -  _SCLess:
  114 00:4397 3E FF -  -  		ld 		a,$FF
  115 00:4399 C9 -  -  -  		ret
  116 00:439A -  -  -  -  _SCGreater:
  117 00:439A 3E 01 -  -  		ld 		a,1
  118 00:439C C9 -  -  -  		ret
  119 00:439D -  -  -  -  
  120 00:439D 3E 0E C3 55 
              42 -  -  -  		ERR_TODO()
  121 00:43A2 -  -  -  -  
  122 00:43A2 -  -  -  -  ; ***************************************************************************************
  123 00:43A2 -  -  -  -  ;
  124 00:43A2 -  -  -  -  ;									Changes and Updates
  125 00:43A2 -  -  -  -  ;
  126 00:43A2 -  -  -  -  ; ***************************************************************************************
  127 00:43A2 -  -  -  -  ;
  128 00:43A2 -  -  -  -  ;		Date			Notes
  129 00:43A2 -  -  -  -  ;		==== 			=====
  130 00:43A2 -  -  -  -  ;
  131 00:43A2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:43A2 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:43A2 -  -  -  -  ; ***************************************************************************************
    2 00:43A2 -  -  -  -  ; ***************************************************************************************
    3 00:43A2 -  -  -  -  ;
    4 00:43A2 -  -  -  -  ;		Name : 		utility.asm
    5 00:43A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43A2 -  -  -  -  ;		Reviewed :	No
    8 00:43A2 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:43A2 -  -  -  -  ;
   10 00:43A2 -  -  -  -  ; ***************************************************************************************
   11 00:43A2 -  -  -  -  ; ***************************************************************************************
   12 00:43A2 -  -  -  -  
   13 00:43A2 -  -  -  -  ; ***************************************************************************************
   14 00:43A2 -  -  -  -  ;
   15 00:43A2 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:43A2 -  -  -  -  ;
   17 00:43A2 -  -  -  -  ; ***************************************************************************************
   18 00:43A2 -  -  -  -  
   19 00:43A2 -  -  -  -  SwapHLDE:
   20 00:43A2 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:43A3 D9 -  -  -  			exx
   22 00:43A4 EB -  -  -  			ex 		de,hl
   23 00:43A5 D9 -  -  -  			exx
   24 00:43A6 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:43A7 41 -  -  -  			ld 		b,c
   26 00:43A8 4F -  -  -  			ld 		c,a
   27 00:43A9 C9 -  -  -  			ret
   28 00:43AA -  -  -  -  
   29 00:43AA -  -  -  -  ; ***************************************************************************************
   30 00:43AA -  -  -  -  ;
   31 00:43AA -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:43AA -  -  -  -  ;
   33 00:43AA -  -  -  -  ; ***************************************************************************************
   34 00:43AA -  -  -  -  
   35 00:43AA -  -  -  -  DereferenceBoth:
   36 00:43AA CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:43AC C4 65 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:43AF CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:43B1 C8 -  -  -  			ret 	z
   40 00:43B2 CD A2 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:43B5 CD 65 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:43B8 CD A2 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:43BB C9 -  -  -  			ret
   44 00:43BC -  -  -  -  
   45 00:43BC -  -  -  -  ; ***************************************************************************************
   46 00:43BC -  -  -  -  ;
   47 00:43BC -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:43BC -  -  -  -  ;
   49 00:43BC -  -  -  -  ; ***************************************************************************************
   50 00:43BC -  -  -  -  
   51 00:43BC -  -  -  -  NegateHLHL:	
   52 00:43BC CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:43BE C2 A8 42 -  			jp 		nz,TypeMismatch
   54 00:43C1 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:43C3 C4 65 44 -  			call 	nz,Dereference 			; if required.
   56 00:43C6 CD 5D 4B -  			call 	Int32Negate
   57 00:43C9 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:43CA -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:43CA -  -  -  -  ; ***************************************************************************************
    2 00:43CA -  -  -  -  ; ***************************************************************************************
    3 00:43CA -  -  -  -  ;
    4 00:43CA -  -  -  -  ;		Name : 		expression.asm
    5 00:43CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43CA -  -  -  -  ;		Reviewed :	None
    8 00:43CA -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:43CA -  -  -  -  ;
   10 00:43CA -  -  -  -  ; ***************************************************************************************
   11 00:43CA -  -  -  -  ; ***************************************************************************************
   12 00:43CA -  -  -  -  
   13 00:43CA -  -  -  -  ; ***************************************************************************************
   14 00:43CA -  -  -  -  ;
   15 00:43CA -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:43CA -  -  -  -  ;
   17 00:43CA -  -  -  -  ; ***************************************************************************************
   18 00:43CA -  -  -  -  
   19 00:43CA -  -  -  -  EvaluateAtPrecedence0:
   20 00:43CA AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:43CB -  -  -  -  EvaluateAtPrecedence:
   22 00:43CB F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:43CC -  -  -  -  		;
   24 00:43CC -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:43CC -  -  -  -  		;
   26 00:43CC CD 95 44 -  		call 	EvaluateTerm 				; get term
   27 00:43CF -  -  -  -  		;
   28 00:43CF -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:43CF -  -  -  -  		;
   30 00:43CF D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:43D0 -  -  -  -  _EAPLoop:
   32 00:43D0 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:43D3 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:43D5 D8 -  -  -  		ret 	c
   35 00:43D6 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:43D8 D0 -  -  -  		ret 	nc
   37 00:43D9 -  -  -  -  		;
   38 00:43D9 -  -  -  -  		; 		Get the precedence.
   39 00:43D9 -  -  -  -  		;
   40 00:43D9 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:43DA D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:43DC 21 00 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:43DF B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:43E0 6F -  -  -  		ld 		l,a
   45 00:43E1 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:43E2 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:43E3 -  -  -  -  		;
   48 00:43E3 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:43E3 -  -  -  -  		;
   50 00:43E3 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:43E4 BB -  -  -  		cp 		e
   52 00:43E5 D0 -  -  -  		ret 	nc
   53 00:43E6 -  -  -  -  
   54 00:43E6 -  -  -  -  		;
   55 00:43E6 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:43E6 -  -  -  -  		;
   57 00:43E6 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:43E7 -  -  -  -  		;
   59 00:43E7 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:43EA F5 -  -  -  		push 	af
   61 00:43EB -  -  -  -  		;
   62 00:43EB C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:43EC D9 -  -  -  		exx 								; save HL'
   64 00:43ED E5 -  -  -  		push 	hl
   65 00:43EE D9 -  -  -  		exx 								
   66 00:43EF E5 -  -  -  		push 	hl 							; save HL
   67 00:43F0 -  -  -  -  		;
   68 00:43F0 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:43F2 -  -  -  -  		;
   70 00:43F2 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:43F2 -  -  -  -  		;
   72 00:43F2 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:43F3 CD CB 43 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:43F6 -  -  -  -  		;
   75 00:43F6 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:43F6 -  -  -  -  		;
   77 00:43F6 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:43F7 -  -  -  -  
   79 00:43F7 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:43F8 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:43F9 D9 -  -  -  		exx
   82 00:43FA EB -  -  -  		ex 		de,hl
   83 00:43FB E1 -  -  -  		pop 	hl
   84 00:43FC D9 -  -  -  		exx
   85 00:43FD C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:43FE 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:43FF -  -  -  -  		;
   88 00:43FF -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:43FF -  -  -  -  		; 		is in B (type) DE'DE
   90 00:43FF -  -  -  -  		;
   91 00:43FF F1 -  -  -  		pop 	af 							; get operator in A
   92 00:4400 -  -  -  -  		;
   93 00:4400 -  -  -  -  		; 		Call the binary operator in A.
   94 00:4400 -  -  -  -  		;
   95 00:4400 D5 -  -  -  		push 	de
   96 00:4401 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4402 E6 7F 21 00 
              00 6F 29 11 
              3E 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4414 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4415 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4416 CD 59 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4419 -  -  -  -  		;
  102 00:4419 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:441A -  -  -  -  		;
  104 00:441A 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:441C -  -  -  -  
  106 00:441C -  -  -  -  ; ***************************************************************************************
  107 00:441C -  -  -  -  ;
  108 00:441C -  -  -  -  ;									Changes and Updates
  109 00:441C -  -  -  -  ;
  110 00:441C -  -  -  -  ; ***************************************************************************************
  111 00:441C -  -  -  -  ;
  112 00:441C -  -  -  -  ;		Date			Notes
  113 00:441C -  -  -  -  ;		==== 			=====
  114 00:441C -  -  -  -  ;
  115 00:441C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:441C -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:441C -  -  -  -  ; ***************************************************************************************
    2 00:441C -  -  -  -  ; ***************************************************************************************
    3 00:441C -  -  -  -  ;
    4 00:441C -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:441C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:441C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:441C -  -  -  -  ;		Reviewed :	No
    8 00:441C -  -  -  -  ;		Purpose :	Expression support functions
    9 00:441C -  -  -  -  ;
   10 00:441C -  -  -  -  ; ***************************************************************************************
   11 00:441C -  -  -  -  ; ***************************************************************************************
   12 00:441C -  -  -  -  
   13 00:441C -  -  -  -  ; ***************************************************************************************
   14 00:441C -  -  -  -  ;
   15 00:441C -  -  -  -  ; 								Evaluate an integer term
   16 00:441C -  -  -  -  ;
   17 00:441C -  -  -  -  ; ***************************************************************************************
   18 00:441C -  -  -  -  
   19 00:441C -  -  -  -  EvaluateIntegerTerm:
   20 00:441C CD 95 44 -  		call 	EvaluateTerm
   21 00:441F CD 65 44 -  		call 	DeReference
   22 00:4422 CB 41 -  -  		bit 	CIsString,c
   23 00:4424 C8 -  -  -  		ret 	z
   24 00:4425 C3 A8 42 -  		jp 		TypeMismatch
   25 00:4428 -  -  -  -  
   26 00:4428 -  -  -  -  ; ***************************************************************************************
   27 00:4428 -  -  -  -  ;
   28 00:4428 -  -  -  -  ; 								Evaluate a string term
   29 00:4428 -  -  -  -  ;
   30 00:4428 -  -  -  -  ; ***************************************************************************************
   31 00:4428 -  -  -  -  
   32 00:4428 -  -  -  -  EvaluateStringTerm:
   33 00:4428 CD 95 44 -  		call 	EvaluateTerm
   34 00:442B CD 65 44 -  		call 	DeReference
   35 00:442E CB 41 -  -  		bit 	CIsString,c
   36 00:4430 C0 -  -  -  		ret 	nz
   37 00:4431 C3 A8 42 -  		jp 		TypeMismatch
   38 00:4434 -  -  -  -  
   39 00:4434 -  -  -  -  ; ***************************************************************************************
   40 00:4434 -  -  -  -  ;
   41 00:4434 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4434 -  -  -  -  ;
   43 00:4434 -  -  -  -  ; ***************************************************************************************
   44 00:4434 -  -  -  -  
   45 00:4434 -  -  -  -  EvaluateValue:
   46 00:4434 CD CA 43 -  		call 	EvaluateAtPrecedence0
   47 00:4437 C3 65 44 -  		jp 		Dereference
   48 00:443A -  -  -  -  
   49 00:443A -  -  -  -  ; ***************************************************************************************
   50 00:443A -  -  -  -  ;
   51 00:443A -  -  -  -  ; 									Evaluate a number
   52 00:443A -  -  -  -  ;
   53 00:443A -  -  -  -  ; ***************************************************************************************
   54 00:443A -  -  -  -  
   55 00:443A -  -  -  -  EvaluateInteger:
   56 00:443A CD 34 44 -  		call 	EvaluateValue
   57 00:443D CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:443F C8 -  -  -  		ret 	z
   59 00:4440 C3 A8 42 -  		jp 		TypeMismatch
   60 00:4443 -  -  -  -  
   61 00:4443 -  -  -  -  ; ***************************************************************************************
   62 00:4443 -  -  -  -  ;
   63 00:4443 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4443 -  -  -  -  ;
   65 00:4443 -  -  -  -  ; ***************************************************************************************
   66 00:4443 -  -  -  -  
   67 00:4443 -  -  -  -  Evaluate8BitInteger:
   68 00:4443 CD 3A 44 -  		call 	EvaluateInteger
   69 00:4446 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4447 7C -  -  -  		ld 		a,h
   71 00:4448 B5 -  -  -  		or 		l
   72 00:4449 D9 -  -  -  		exx 	
   73 00:444A B4 -  -  -  		or 		h
   74 00:444B C2 AD 42 -  		jp 		nz,BadValue
   75 00:444E 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:444F C9 -  -  -  		ret
   77 00:4450 -  -  -  -  		
   78 00:4450 -  -  -  -  ; ***************************************************************************************
   79 00:4450 -  -  -  -  ;
   80 00:4450 -  -  -  -  ; 									Evaluate a string
   81 00:4450 -  -  -  -  ;
   82 00:4450 -  -  -  -  ; ***************************************************************************************
   83 00:4450 -  -  -  -  
   84 00:4450 -  -  -  -  EvaluateStringOnly:
   85 00:4450 CD 34 44 -  		call 	EvaluateValue
   86 00:4453 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:4455 CA A8 42 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4458 C9 -  -  -  		ret
   89 00:4459 -  -  -  -  
   90 00:4459 -  -  -  -  ; ***************************************************************************************
   91 00:4459 -  -  -  -  ;
   92 00:4459 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4459 -  -  -  -  ;
   94 00:4459 -  -  -  -  ; ***************************************************************************************
   95 00:4459 -  -  -  -  
   96 00:4459 -  -  -  -  Return8BitConstant:
   97 00:4459 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:445C 6F -  -  -  		ld 		l,a
   99 00:445D -  -  -  -  Return16BitConstant:
  100 00:445D D9 -  -  -  		exx 								; clear HL'
  101 00:445E 21 00 00 -  		ld 		hl,0
  102 00:4461 D9 -  -  -  		exx
  103 00:4462 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4464 C9 -  -  -  		ret
  105 00:4465 -  -  -  -  
  106 00:4465 -  -  -  -  ; ***************************************************************************************
  107 00:4465 -  -  -  -  ;
  108 00:4465 -  -  -  -  ;									Changes and Updates
  109 00:4465 -  -  -  -  ;
  110 00:4465 -  -  -  -  ; ***************************************************************************************
  111 00:4465 -  -  -  -  ;
  112 00:4465 -  -  -  -  ;		Date			Notes
  113 00:4465 -  -  -  -  ;		==== 			=====
  114 00:4465 -  -  -  -  ;
  115 00:4465 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:4465 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4465 -  -  -  -  ; ***************************************************************************************
    2 00:4465 -  -  -  -  ; ***************************************************************************************
    3 00:4465 -  -  -  -  ;
    4 00:4465 -  -  -  -  ;		Name : 		reference.asm
    5 00:4465 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4465 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4465 -  -  -  -  ;		Reviewed :	No
    8 00:4465 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4465 -  -  -  -  ;
   10 00:4465 -  -  -  -  ; ***************************************************************************************
   11 00:4465 -  -  -  -  ; ***************************************************************************************
   12 00:4465 -  -  -  -  
   13 00:4465 -  -  -  -  ; ***************************************************************************************
   14 00:4465 -  -  -  -  ;
   15 00:4465 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4465 -  -  -  -  ;
   17 00:4465 -  -  -  -  ; ***************************************************************************************
   18 00:4465 -  -  -  -  
   19 00:4465 -  -  -  -  Dereference:
   20 00:4465 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4467 C8 -  -  -  		ret 	z
   22 00:4468 -  -  -  -  
   23 00:4468 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:446A -  -  -  -  		
   25 00:446A CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:446C 20 20 -  -  		jr 		nz,_DRInternal
   27 00:446E -  -  -  -  
   28 00:446E CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4470 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4472 -  -  -  -  
   31 00:4472 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4473 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4477 D9 -  -  -  		exx
   34 00:4478 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4479 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:447A 23 -  -  -  		inc  	hl
   37 00:447B 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:447F D9 -  -  -  		exx 								; fix back
   39 00:4480 C9 -  -  -  		ret
   40 00:4481 -  -  -  -  
   41 00:4481 -  -  -  -  _DeRefByte:		
   42 00:4481 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4482 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4485 6F -  -  -  		ld	 	l,a
   45 00:4486 D9 -  -  -  		exx
   46 00:4487 21 00 00 -  		ld 		hl,$0000
   47 00:448A D9 -  -  -  		exx
   48 00:448B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:448D C9 -  -  -  		ret
   50 00:448E -  -  -  -  
   51 00:448E -  -  -  -  _DRInternal:
   52 00:448E 3E 04 C3 55 
              42 -  -  -  		ERR_DISABLED
   53 00:4493 -  -  -  -  
   54 00:4493 -  -  -  -  ; ***************************************************************************************
   55 00:4493 -  -  -  -  ;
   56 00:4493 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4493 -  -  -  -  ;
   58 00:4493 -  -  -  -  ; ***************************************************************************************
   59 00:4493 -  -  -  -  
   60 00:4493 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4493 -  -  -  -  		#ifdef EZ80
   62 00:4493             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4493             		exx
   64 00:4493             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4493             		ld 		hl,$0000 					; zero HL'
   66 00:4493             		exx
   67 00:4493             		ld 		hl,(AConvert) 				; load UHL
   68 00:4493             		#endif
   69 00:4493 C9 -  -  -  		ret
   70 00:4494 -  -  -  -  
   71 00:4494 -  -  -  -  ; ***************************************************************************************
   72 00:4494 -  -  -  -  ;
   73 00:4494 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4494 -  -  -  -  ;
   75 00:4494 -  -  -  -  ; ***************************************************************************************
   76 00:4494 -  -  -  -  
   77 00:4494 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4494 -  -  -  -  		#ifdef EZ80
   79 00:4494             		ld 		(AConvert),hl
   80 00:4494             		ld 		hl,$0000
   81 00:4494             		ld 		(AConvert+3),hl
   82 00:4494             		exx
   83 00:4494             		ld 		hl,(AConvert+2)
   84 00:4494             		exx
   85 00:4494             		xor 	a
   86 00:4494             		ld 		(AConvert+2),a
   87 00:4494             		ld 		hl,(AConvert)
   88 00:4494             		#endif
   89 00:4494 C9 -  -  -  		ret
   90 00:4495 -  -  -  -  
   91 00:4495 -  -  -  -  ; ***************************************************************************************
   92 00:4495 -  -  -  -  ;
   93 00:4495 -  -  -  -  ;									Changes and Updates
   94 00:4495 -  -  -  -  ;
   95 00:4495 -  -  -  -  ; ***************************************************************************************
   96 00:4495 -  -  -  -  ;
   97 00:4495 -  -  -  -  ;		Date			Notes
   98 00:4495 -  -  -  -  ;		==== 			=====
   99 00:4495 -  -  -  -  ;
  100 00:4495 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:4495 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4495 -  -  -  -  ; ***************************************************************************************
    2 00:4495 -  -  -  -  ; ***************************************************************************************
    3 00:4495 -  -  -  -  ;
    4 00:4495 -  -  -  -  ;		Name : 		term.asm
    5 00:4495 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4495 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4495 -  -  -  -  ;		Reviewed :	No
    8 00:4495 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4495 -  -  -  -  ;
   10 00:4495 -  -  -  -  ; ***************************************************************************************
   11 00:4495 -  -  -  -  ; ***************************************************************************************
   12 00:4495 -  -  -  -  
   13 00:4495 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4495             		add_hlhl_16
   15 00:4495             		exx
   16 00:4495             		adc_hlhl_16
   17 00:4495             		exx
   18 00:4495             #endmacro
   19 00:4495 -  -  -  -  
   20 00:4495 -  -  -  -  ; ***************************************************************************************
   21 00:4495 -  -  -  -  ;
   22 00:4495 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4495 -  -  -  -  ;
   24 00:4495 -  -  -  -  ; ***************************************************************************************
   25 00:4495 -  -  -  -  ;
   26 00:4495 -  -  -  -  ; 		Terms can be:
   27 00:4495 -  -  -  -  ;
   28 00:4495 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4495 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4495 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4495 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4495 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4495 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4495 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4495 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4495 -  -  -  -  ; 														reference of some sort.
   37 00:4495 -  -  -  -  ;
   38 00:4495 -  -  -  -  ; ***************************************************************************************
   39 00:4495 -  -  -  -  
   40 00:4495 -  -  -  -  EvaluateTerm:		
   41 00:4495 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4497 D9 -  -  -  		exx
   43 00:4498 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:449B D9 -  -  -  		exx
   45 00:449C 21 00 00 -  		ld 		hl,$0000		
   46 00:449F -  -  -  -  		;
   47 00:449F DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:44A2 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:44A4 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:44A6 DA 44 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:44A9 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:44AB C2 F3 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:44AE -  -  -  -  		;
   54 00:44AE -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:44AE -  -  -  -  		;
   56 00:44AE -  -  -  -  _ETIntegerConstant:
   57 00:44AE -  -  -  -  		;
   58 00:44AE -  -  -  -  _ETIntegerLoop:		
   59 00:44AE DD 7E 00 -  		ld 		a,(ix+0)
   60 00:44B1 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:44B3 B5 -  -  -  		or 		l 							; or into L
   62 00:44B4 6F -  -  -  		ld 		l,a
   63 00:44B5 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:44B7 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:44BA C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:44BC FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:44BE D8 -  -  -  		ret 	c
   68 00:44BF -  -  -  -  
   69 00:44BF 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:44C4 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:44C9 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:44CE 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:44D3 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:44D8 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:44DD -  -  -  -  
   76 00:44DD 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:44DF -  -  -  -  		;
   78 00:44DF -  -  -  -  		; 		Found the $3F string marker.
   79 00:44DF -  -  -  -  		;
   80 00:44DF -  -  -  -  _ETStringMarker:		
   81 00:44DF DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:44E1 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:44E3 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:44E5 E1 -  -  -  		pop 	hl
   85 00:44E6 11 00 00 -  		ld 		de,$0000
   86 00:44E9 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:44EC DD 19 -  -  		add 	ix,de
   88 00:44EE DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:44F0 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:44F2 C9 -  -  -  		ret
   91 00:44F3 -  -  -  -  		;
   92 00:44F3 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:44F3 -  -  -  -  		;
   94 00:44F3 -  -  -  -  _ETFoundKeyword:
   95 00:44F3 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:44F5 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:44F7 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:44F9 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:44FB 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:44FD -  -  -  -  		;
  101 00:44FD -  -  -  -  		;		Unary group 0
  102 00:44FD -  -  -  -  		;
  103 00:44FD E6 7F 21 00 
              00 6F 29 11 
              3E 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:450F C3 59 40 -  		jp 		JumpCode 					; and go there.
  105 00:4512 -  -  -  -  
  106 00:4512 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4512 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4514 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4516 -  -  -  -  		;
  110 00:4516 -  -  -  -  		; 		- term
  111 00:4516 -  -  -  -  		;
  112 00:4516 CD 1C 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4519 CD BC 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:451C C9 -  -  -  		ret
  115 00:451D -  -  -  -  		;
  116 00:451D -  -  -  -  		;		! ? indirection check
  117 00:451D -  -  -  -  		;
  118 00:451D -  -  -  -  _ETCheckIndirection:	
  119 00:451D FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:451F 28 05 -  -  		jr 		z,_ETIndirection
  121 00:4521 FE 83 -  -  		cp 		KWD_PLING
  122 00:4523 C2 B2 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4526 -  -  -  -  		;
  124 00:4526 -  -  -  -  		; 		! ? indirection
  125 00:4526 -  -  -  -  		;
  126 00:4526 -  -  -  -  _ETIndirection:
  127 00:4526 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4527 CD 95 44 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:452A CD 65 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:452D CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:452F 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:4531 CD 93 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4534 F1 -  -  -  		pop 	af 							; get type back
  134 00:4535 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4537 CB F9 -  -  		set 	CIsReference,c
  136 00:4539 FE 83 -  -  		cp 		KWD_PLING
  137 00:453B C8 -  -  -  		ret 	z
  138 00:453C CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:453E C9 -  -  -  		ret
  140 00:453F -  -  -  -  _ETStringIndirect:
  141 00:453F 3E 02 C3 55 
              42 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4544 -  -  -  -  		;
  143 00:4544 -  -  -  -  		; 		Found an identifier.
  144 00:4544 -  -  -  -  		;
  145 00:4544 -  -  -  -  _ETVariable:
  146 00:4544 CD 3C 47 -  		call 	FindVariable 				; find the variable.
  147 00:4547 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4548 3E 0F C3 55 
              42 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:454D -  -  -  -  		
  150 00:454D -  -  -  -  ; ***************************************************************************************
  151 00:454D -  -  -  -  ;
  152 00:454D -  -  -  -  ;									Changes and Updates
  153 00:454D -  -  -  -  ;
  154 00:454D -  -  -  -  ; ***************************************************************************************
  155 00:454D -  -  -  -  ;
  156 00:454D -  -  -  -  ;		Date			Notes
  157 00:454D -  -  -  -  ;		==== 			=====
  158 00:454D -  -  -  -  ;
  159 00:454D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:454D -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:454D -  -  -  -  ; ***************************************************************************************
    2 00:454D -  -  -  -  ; ***************************************************************************************
    3 00:454D -  -  -  -  ;
    4 00:454D -  -  -  -  ;		Name : 		abs.asm
    5 00:454D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454D -  -  -  -  ;		Reviewed :	No
    8 00:454D -  -  -  -  ;		Purpose :	Absolute value 
    9 00:454D -  -  -  -  ;
   10 00:454D -  -  -  -  ; ***************************************************************************************
   11 00:454D -  -  -  -  ; ***************************************************************************************
   12 00:454D -  -  -  -  
   13 00:454D -  -  -  -  ; ***************************************************************************************
   14 00:454D -  -  -  -  ;
   15 00:454D -  -  -  -  ;								abs( unary function
   16 00:454D -  -  -  -  ;
   17 00:454D -  -  -  -  ; ***************************************************************************************
   18 00:454D -  -  -  -  
   19 00:454D -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:454D CD 1C 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:4550 D9 -  -  -  		exx 								; test MSB
   22 00:4551 CB 7C -  -  		bit 	7,h
   23 00:4553 D9 -  -  -  		exx
   24 00:4554 C4 BC 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4557 C9 -  -  -  		ret
   26 00:4558 -  -  -  -  
   27 00:4558 -  -  -  -  ; ***************************************************************************************
   28 00:4558 -  -  -  -  ;
   29 00:4558 -  -  -  -  ;									Changes and Updates
   30 00:4558 -  -  -  -  ;
   31 00:4558 -  -  -  -  ; ***************************************************************************************
   32 00:4558 -  -  -  -  ;
   33 00:4558 -  -  -  -  ;		Date			Notes
   34 00:4558 -  -  -  -  ;		==== 			=====
   35 00:4558 -  -  -  -  ;
   36 00:4558 -  -  -  -  ; ***************************************************************************************
   37 00:4558 -  -  -  -  		
Listing for file "_build.asm"
   35 00:4558 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4558 -  -  -  -  ; ***************************************************************************************
    2 00:4558 -  -  -  -  ; ***************************************************************************************
    3 00:4558 -  -  -  -  ;
    4 00:4558 -  -  -  -  ;		Name : 		asc.asm
    5 00:4558 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4558 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4558 -  -  -  -  ;		Reviewed :	No
    8 00:4558 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4558 -  -  -  -  ;
   10 00:4558 -  -  -  -  ; ***************************************************************************************
   11 00:4558 -  -  -  -  ; ***************************************************************************************
   12 00:4558 -  -  -  -  
   13 00:4558 -  -  -  -  ; ***************************************************************************************
   14 00:4558 -  -  -  -  ;
   15 00:4558 -  -  -  -  ;								Asc unary function
   16 00:4558 -  -  -  -  ;
   17 00:4558 -  -  -  -  ; ***************************************************************************************
   18 00:4558 -  -  -  -  
   19 00:4558 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4558 CD 28 44 -  		call	EvaluateStringTerm			; Get string
   21 00:455B 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:455C C3 59 44 -  		jp 		Return8BitConstant
   23 00:455F -  -  -  -  
   24 00:455F -  -  -  -  ; ***************************************************************************************
   25 00:455F -  -  -  -  ;
   26 00:455F -  -  -  -  ;									Changes and Updates
   27 00:455F -  -  -  -  ;
   28 00:455F -  -  -  -  ; ***************************************************************************************
   29 00:455F -  -  -  -  ;
   30 00:455F -  -  -  -  ;		Date			Notes
   31 00:455F -  -  -  -  ;		==== 			=====
   32 00:455F -  -  -  -  ;
   33 00:455F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:455F -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:455F -  -  -  -  ; ***************************************************************************************
    2 00:455F -  -  -  -  ; ***************************************************************************************
    3 00:455F -  -  -  -  ;
    4 00:455F -  -  -  -  ;		Name : 		chr.asm
    5 00:455F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:455F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:455F -  -  -  -  ;		Reviewed :	No
    8 00:455F -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:455F -  -  -  -  ;
   10 00:455F -  -  -  -  ; ***************************************************************************************
   11 00:455F -  -  -  -  ; ***************************************************************************************
   12 00:455F -  -  -  -  
   13 00:455F -  -  -  -  ; ***************************************************************************************
   14 00:455F -  -  -  -  ;
   15 00:455F -  -  -  -  ;								Chr$() unary function
   16 00:455F -  -  -  -  ;
   17 00:455F -  -  -  -  ; ***************************************************************************************
   18 00:455F -  -  -  -  
   19 00:455F -  -  -  -  Unary_Chr:	;; [chr]
   20 00:455F CD 30 42 -  		call 	CheckDollar
   21 00:4562 CD 1C 44 -  		call 	EvaluateIntegerTerm
   22 00:4565 7D -  -  -  		ld 		a,l 						; get character
   23 00:4566 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4568 21 92 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:456B 36 0D -  -  		ld 		(hl),13
   26 00:456D 2B -  -  -  		dec 	hl
   27 00:456E 77 -  -  -  		ld 		(hl),a
   28 00:456F C9 -  -  -  		ret
   29 00:4570 -  -  -  -  
   30 00:4570 -  -  -  -  ; ***************************************************************************************
   31 00:4570 -  -  -  -  ;
   32 00:4570 -  -  -  -  ;									Changes and Updates
   33 00:4570 -  -  -  -  ;
   34 00:4570 -  -  -  -  ; ***************************************************************************************
   35 00:4570 -  -  -  -  ;
   36 00:4570 -  -  -  -  ;		Date			Notes
   37 00:4570 -  -  -  -  ;		==== 			=====
   38 00:4570 -  -  -  -  ;
   39 00:4570 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:4570 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4570 -  -  -  -  ; ***************************************************************************************
    2 00:4570 -  -  -  -  ; ***************************************************************************************
    3 00:4570 -  -  -  -  ;
    4 00:4570 -  -  -  -  ;		Name : 		len.asm
    5 00:4570 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4570 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4570 -  -  -  -  ;		Reviewed :	None
    8 00:4570 -  -  -  -  ;		Purpose :	String Length
    9 00:4570 -  -  -  -  ;
   10 00:4570 -  -  -  -  ; ***************************************************************************************
   11 00:4570 -  -  -  -  ; ***************************************************************************************
   12 00:4570 -  -  -  -  
   13 00:4570 -  -  -  -  ; ***************************************************************************************
   14 00:4570 -  -  -  -  ;
   15 00:4570 -  -  -  -  ;								Len unary function
   16 00:4570 -  -  -  -  ;
   17 00:4570 -  -  -  -  ; ***************************************************************************************
   18 00:4570 -  -  -  -  
   19 00:4570 -  -  -  -  Unary_Len:	;; [len]
   20 00:4570 CD 28 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4573 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4574 CD 33 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4577 -  -  -  -  _ULCount:
   24 00:4577 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4578 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:457A D8 -  -  -  		ret 	c
   27 00:457B 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:457C 13 -  -  -  		inc 	de
   29 00:457D 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:457F -  -  -  -  
   31 00:457F -  -  -  -  ; ***************************************************************************************
   32 00:457F -  -  -  -  ;
   33 00:457F -  -  -  -  ;									Changes and Updates
   34 00:457F -  -  -  -  ;
   35 00:457F -  -  -  -  ; ***************************************************************************************
   36 00:457F -  -  -  -  ;
   37 00:457F -  -  -  -  ;		Date			Notes
   38 00:457F -  -  -  -  ;		==== 			=====
   39 00:457F -  -  -  -  ;
   40 00:457F -  -  -  -  ; ***************************************************************************************
   41 00:457F -  -  -  -  		
Listing for file "_build.asm"
   38 00:457F -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:457F -  -  -  -  ; ***************************************************************************************
    2 00:457F -  -  -  -  ; ***************************************************************************************
    3 00:457F -  -  -  -  ;
    4 00:457F -  -  -  -  ;		Name : 		makestring.asm
    5 00:457F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:457F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:457F -  -  -  -  ;		Reviewed :	No
    8 00:457F -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:457F -  -  -  -  ;
   10 00:457F -  -  -  -  ; ***************************************************************************************
   11 00:457F -  -  -  -  ; ***************************************************************************************
   12 00:457F -  -  -  -  
   13 00:457F -  -  -  -  ; ***************************************************************************************
   14 00:457F -  -  -  -  ;
   15 00:457F -  -  -  -  ;								Str$() unary function
   16 00:457F -  -  -  -  ;
   17 00:457F -  -  -  -  ; ***************************************************************************************
   18 00:457F -  -  -  -  
   19 00:457F -  -  -  -  Unary_MkStr:	;; [$]
   20 00:457F CD 1C 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4582 CD 93 44 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4585 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4587 C9 -  -  -  		ret
   24 00:4588 -  -  -  -  
   25 00:4588 -  -  -  -  ; ***************************************************************************************
   26 00:4588 -  -  -  -  ;
   27 00:4588 -  -  -  -  ;									Changes and Updates
   28 00:4588 -  -  -  -  ;
   29 00:4588 -  -  -  -  ; ***************************************************************************************
   30 00:4588 -  -  -  -  ;
   31 00:4588 -  -  -  -  ;		Date			Notes
   32 00:4588 -  -  -  -  ;		==== 			=====
   33 00:4588 -  -  -  -  ;
   34 00:4588 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4588 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4588 -  -  -  -  ; ***************************************************************************************
    2 00:4588 -  -  -  -  ; ***************************************************************************************
    3 00:4588 -  -  -  -  ;
    4 00:4588 -  -  -  -  ;		Name : 		not.asm
    5 00:4588 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4588 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4588 -  -  -  -  ;		Reviewed :	No
    8 00:4588 -  -  -  -  ;		Purpose :	Logical not
    9 00:4588 -  -  -  -  ;
   10 00:4588 -  -  -  -  ; ***************************************************************************************
   11 00:4588 -  -  -  -  ; ***************************************************************************************
   12 00:4588 -  -  -  -  
   13 00:4588 -  -  -  -  ; ***************************************************************************************
   14 00:4588 -  -  -  -  ;
   15 00:4588 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4588 -  -  -  -  ;
   17 00:4588 -  -  -  -  ; ***************************************************************************************
   18 00:4588 -  -  -  -  
   19 00:4588 -  -  -  -  Unary_Not:		;; [not]
   20 00:4588 CD 1C 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:458B CD 92 45 -  		call 	__UNSwap 					; not and swap twice.
   22 00:458E CD 92 45 -  		call 	__UNSwap		
   23 00:4591 C9 -  -  -  		ret
   24 00:4592 -  -  -  -  
   25 00:4592 -  -  -  -  __UNSwap:
   26 00:4592 7C -  -  -  		ld 		a,h
   27 00:4593 2F -  -  -  		cpl
   28 00:4594 67 -  -  -  		ld 		h,a
   29 00:4595 7D -  -  -  		ld 		a,l
   30 00:4596 2F -  -  -  		cpl 	
   31 00:4597 6F -  -  -  		ld 		l,a
   32 00:4598 D9 -  -  -  		exx
   33 00:4599 C9 -  -  -  		ret
   34 00:459A -  -  -  -  
   35 00:459A -  -  -  -  ; ***************************************************************************************
   36 00:459A -  -  -  -  ;
   37 00:459A -  -  -  -  ;									Changes and Updates
   38 00:459A -  -  -  -  ;
   39 00:459A -  -  -  -  ; ***************************************************************************************
   40 00:459A -  -  -  -  ;
   41 00:459A -  -  -  -  ;		Date			Notes
   42 00:459A -  -  -  -  ;		==== 			=====
   43 00:459A -  -  -  -  ;
   44 00:459A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:459A -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:459A -  -  -  -  ; ***************************************************************************************
    2 00:459A -  -  -  -  ; ***************************************************************************************
    3 00:459A -  -  -  -  ;
    4 00:459A -  -  -  -  ;		Name : 		page.asm
    5 00:459A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:459A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:459A -  -  -  -  ;		Reviewed :	No
    8 00:459A -  -  -  -  ;		Purpose :	Various constants.
    9 00:459A -  -  -  -  ;
   10 00:459A -  -  -  -  ; ***************************************************************************************
   11 00:459A -  -  -  -  ; ***************************************************************************************
   12 00:459A -  -  -  -  
   13 00:459A -  -  -  -  ; ***************************************************************************************
   14 00:459A -  -  -  -  ;
   15 00:459A -  -  -  -  ;							page unary function (no bracket)
   16 00:459A -  -  -  -  ;
   17 00:459A -  -  -  -  ; ***************************************************************************************
   18 00:459A -  -  -  -  
   19 00:459A -  -  -  -  Unary_Page:	;; [page]
   20 00:459A 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:459D D9 -  -  -  			exx
   22 00:459E 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:45A1 D9 -  -  -  			exx
   24 00:45A2 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:45A4 C9 -  -  -  			ret
   26 00:45A5 -  -  -  -  
   27 00:45A5 -  -  -  -  ; ***************************************************************************************
   28 00:45A5 -  -  -  -  ;
   29 00:45A5 -  -  -  -  ;									Changes and Updates
   30 00:45A5 -  -  -  -  ;
   31 00:45A5 -  -  -  -  ; ***************************************************************************************
   32 00:45A5 -  -  -  -  ;
   33 00:45A5 -  -  -  -  ;		Date			Notes
   34 00:45A5 -  -  -  -  ;		==== 			=====
   35 00:45A5 -  -  -  -  ;
   36 00:45A5 -  -  -  -  ; ***************************************************************************************
   37 00:45A5 -  -  -  -  			
Listing for file "_build.asm"
   41 00:45A5 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:45A5 -  -  -  -  ; ***************************************************************************************
    2 00:45A5 -  -  -  -  ; ***************************************************************************************
    3 00:45A5 -  -  -  -  ;
    4 00:45A5 -  -  -  -  ;		Name : 		random.asm
    5 00:45A5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45A5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45A5 -  -  -  -  ;		Reviewed :	No
    8 00:45A5 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:45A5 -  -  -  -  ;
   10 00:45A5 -  -  -  -  ; ***************************************************************************************
   11 00:45A5 -  -  -  -  ; ***************************************************************************************
   12 00:45A5 -  -  -  -  
   13 00:45A5 -  -  -  -  ; ***************************************************************************************
   14 00:45A5 -  -  -  -  ;
   15 00:45A5 -  -  -  -  ;								Random unary function
   16 00:45A5 -  -  -  -  ;
   17 00:45A5 -  -  -  -  ; ***************************************************************************************
   18 00:45A5 -  -  -  -  
   19 00:45A5 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:45A5 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:45A6 CD 1C 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:45A9 D9 -  -  -  		exx 								; is it -ve
   23 00:45AA CB 7C -  -  		bit 	7,h
   24 00:45AC D9 -  -  -  		exx
   25 00:45AD 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:45AF 22 65 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:45B2 D9 -  -  -  		exx
   28 00:45B3 22 69 40 -  		ld 		(RandomSeed+4),hl
   29 00:45B6 D9 -  -  -  		exx
   30 00:45B7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:45B9 C9 -  -  -  		ret
   32 00:45BA -  -  -  -  _URDontSeed:		
   33 00:45BA -  -  -  -  
   34 00:45BA CD 2F 4B -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:45BD 28 19 -  -  		jr 		z,_URFail
   36 00:45BF E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:45C0 D9 -  -  -  		exx
   38 00:45C1 E5 -  -  -  		push 	hl
   39 00:45C2 D9 -  -  -  		exx
   40 00:45C3 -  -  -  -  		;
   41 00:45C3 CD E7 45 -  		call 	URandomHL 					; get random HL'HL
   42 00:45C6 D9 -  -  -  		exx
   43 00:45C7 CD E7 45 -  		call 	URandomHL
   44 00:45CA CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:45CC D9 -  -  -  		exx
   46 00:45CD -  -  -  -  		;
   47 00:45CD D9 -  -  -  		exx 								; restore range.
   48 00:45CE D1 -  -  -  		pop 	de
   49 00:45CF D9 -  -  -  		exx
   50 00:45D0 D1 -  -  -  		pop 	de
   51 00:45D1 -  -  -  -  		;
   52 00:45D1 CD DB 49 -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:45D4 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:45D5 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:45D7 C9 -  -  -  		ret
   56 00:45D8 -  -  -  -  _URFail:
   57 00:45D8 3E 03 C3 55 
              42 -  -  -  		ERR_BADVALUE
   58 00:45DD -  -  -  -  ; ***************************************************************************************
   59 00:45DD -  -  -  -  ;
   60 00:45DD -  -  -  -  ; 									Push RNG off zero
   61 00:45DD -  -  -  -  ;
   62 00:45DD -  -  -  -  ; ***************************************************************************************
   63 00:45DD -  -  -  -  
   64 00:45DD -  -  -  -  UnaryRandomInitialise:
   65 00:45DD 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:45DF -  -  -  -  _URILoop:
   67 00:45DF C5 -  -  -  		push 	bc
   68 00:45E0 CD E7 45 -  		call 	URandomHL
   69 00:45E3 C1 -  -  -  		pop 	bc
   70 00:45E4 10 F9 -  -  		djnz 	_URILoop
   71 00:45E6 C9 -  -  -  		ret
   72 00:45E7 -  -  -  -  
   73 00:45E7 -  -  -  -  ; ***************************************************************************************
   74 00:45E7 -  -  -  -  ;
   75 00:45E7 -  -  -  -  ;							16 bit random number generator
   76 00:45E7 -  -  -  -  ;
   77 00:45E7 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:45E7 -  -  -  -  ;		Actual author unspecified.
   79 00:45E7 -  -  -  -  ;
   80 00:45E7 -  -  -  -  ; ***************************************************************************************
   81 00:45E7 -  -  -  -  
   82 00:45E7 -  -  -  -  URandomHL:
   83 00:45E7 2A 65 40 -  	    ld 		hl,(RandomSeed)
   84 00:45EA ED 5B 69 40 	    ld 		de,(RandomSeed+4)
   85 00:45EE 44 -  -  -  	    ld 		b,h
   86 00:45EF 4D -  -  -  	    ld 		c,l
   87 00:45F0 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:45F5 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:45FA 2C -  -  -  	    inc 	l
   90 00:45FB 09 -  -  -  	    add 	hl,bc
   91 00:45FC 22 65 40 -  	    ld 		(RandomSeed),hl
   92 00:45FF 2A 69 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:4602 ED 5A -  -  	    adc 	hl,de
   94 00:4604 22 69 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4607 EB -  -  -  	    ex 		de,hl
   96 00:4608 2A 6D 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:460B ED 4B 71 40 	    ld 		bc,(RandomSeed+12)
   98 00:460F 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4614 ED 43 71 40 	    ld 		(RandomSeed+12),bc
  100 00:4618 9F -  -  -  	    sbc 	a,a
  101 00:4619 E6 C5 -  -  	    and 	%11000101
  102 00:461B AD -  -  -  	    xor 	l
  103 00:461C 6F -  -  -  	    ld 		l,a
  104 00:461D 22 6D 40 -  	    ld 		(RandomSeed+8),hl
  105 00:4620 EB -  -  -  	    ex 		de,hl
  106 00:4621 09 -  -  -  	    add 	hl,bc
  107 00:4622 C9 -  -  -  	    ret		
  108 00:4623 -  -  -  -  
  109 00:4623 -  -  -  -  ; ***************************************************************************************
  110 00:4623 -  -  -  -  ;
  111 00:4623 -  -  -  -  ;									Changes and Updates
  112 00:4623 -  -  -  -  ;
  113 00:4623 -  -  -  -  ; ***************************************************************************************
  114 00:4623 -  -  -  -  ;
  115 00:4623 -  -  -  -  ;		Date			Notes
  116 00:4623 -  -  -  -  ;		==== 			=====
  117 00:4623 -  -  -  -  ;
  118 00:4623 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:4623 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4623 -  -  -  -  ; ***************************************************************************************
    2 00:4623 -  -  -  -  ; ***************************************************************************************
    3 00:4623 -  -  -  -  ;
    4 00:4623 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4623 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4623 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4623 -  -  -  -  ;		Reviewed :	No
    8 00:4623 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4623 -  -  -  -  ;
   10 00:4623 -  -  -  -  ; ***************************************************************************************
   11 00:4623 -  -  -  -  ; ***************************************************************************************
   12 00:4623 -  -  -  -  
   13 00:4623 -  -  -  -  ; ***************************************************************************************
   14 00:4623 -  -  -  -  ;
   15 00:4623 -  -  -  -  ;								sgn unary function
   16 00:4623 -  -  -  -  ;
   17 00:4623 -  -  -  -  ; ***************************************************************************************
   18 00:4623 -  -  -  -  
   19 00:4623 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4623 CD 1C 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4626 CD 2F 4B -  		call 	Int32Zero 					; integer sgn() code
   22 00:4629 CA 33 43 -  		jp 		z,UnaryInt32False
   23 00:462C D9 -  -  -  		exx
   24 00:462D CB 7C -  -  		bit 	7,h
   25 00:462F D9 -  -  -  		exx
   26 00:4630 C2 2F 43 -  		jp 		nz,UnaryInt32True
   27 00:4633 3E 01 -  -  		ld 		a,1
   28 00:4635 C3 59 44 -  		jp 		Return8BitConstant
   29 00:4638 -  -  -  -  
   30 00:4638 -  -  -  -  ; ***************************************************************************************
   31 00:4638 -  -  -  -  ;
   32 00:4638 -  -  -  -  ;									Changes and Updates
   33 00:4638 -  -  -  -  ;
   34 00:4638 -  -  -  -  ; ***************************************************************************************
   35 00:4638 -  -  -  -  ;
   36 00:4638 -  -  -  -  ;		Date			Notes
   37 00:4638 -  -  -  -  ;		==== 			=====
   38 00:4638 -  -  -  -  ;
   39 00:4638 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:4638 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4638 -  -  -  -  ; ***************************************************************************************
    2 00:4638 -  -  -  -  ; ***************************************************************************************
    3 00:4638 -  -  -  -  ;
    4 00:4638 -  -  -  -  ;		Name : 		simple.asm
    5 00:4638 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4638 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4638 -  -  -  -  ;		Reviewed :	No
    8 00:4638 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4638 -  -  -  -  ;
   10 00:4638 -  -  -  -  ; ***************************************************************************************
   11 00:4638 -  -  -  -  ; ***************************************************************************************
   12 00:4638 -  -  -  -  
   13 00:4638 -  -  -  -  ; ***************************************************************************************
   14 00:4638 -  -  -  -  ;
   15 00:4638 -  -  -  -  ;								( unary function (think about it)
   16 00:4638 -  -  -  -  ;
   17 00:4638 -  -  -  -  ; ***************************************************************************************
   18 00:4638 -  -  -  -  
   19 00:4638 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4638 CD CA 43 -  		call 	EvaluateAtPrecedence0
   21 00:463B C3 23 42 -  		jp  	CheckRightBracket
   22 00:463E -  -  -  -  
   23 00:463E -  -  -  -  ; ***************************************************************************************
   24 00:463E -  -  -  -  ;
   25 00:463E -  -  -  -  ;									Handle &x
   26 00:463E -  -  -  -  ;
   27 00:463E -  -  -  -  ; ***************************************************************************************
   28 00:463E -  -  -  -  
   29 00:463E -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:463E DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:4641 E6 C0 -  -  		and 		$C0
   32 00:4643 FE 40 -  -  		cp 			$40
   33 00:4645 C2 B2 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4648 C3 95 44 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:464B -  -  -  -  
   36 00:464B -  -  -  -  ; ***************************************************************************************
   37 00:464B -  -  -  -  ;
   38 00:464B -  -  -  -  ;									Changes and Updates
   39 00:464B -  -  -  -  ;
   40 00:464B -  -  -  -  ; ***************************************************************************************
   41 00:464B -  -  -  -  ;
   42 00:464B -  -  -  -  ;		Date			Notes
   43 00:464B -  -  -  -  ;		==== 			=====
   44 00:464B -  -  -  -  ;
   45 00:464B -  -  -  -  ; ***************************************************************************************
   46 00:464B -  -  -  -  		
Listing for file "_build.asm"
   44 00:464B -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:464B -  -  -  -  ; ***************************************************************************************
    2 00:464B -  -  -  -  ; ***************************************************************************************
    3 00:464B -  -  -  -  ;
    4 00:464B -  -  -  -  ;		Name : 		str.asm
    5 00:464B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:464B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:464B -  -  -  -  ;		Reviewed :	No
    8 00:464B -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:464B -  -  -  -  ;
   10 00:464B -  -  -  -  ; ***************************************************************************************
   11 00:464B -  -  -  -  ; ***************************************************************************************
   12 00:464B -  -  -  -  
   13 00:464B -  -  -  -  ; ***************************************************************************************
   14 00:464B -  -  -  -  ;
   15 00:464B -  -  -  -  ;								Str$() unary function
   16 00:464B -  -  -  -  ;
   17 00:464B -  -  -  -  ; ***************************************************************************************
   18 00:464B -  -  -  -  
   19 00:464B -  -  -  -  Unary_Str:	;; [str]
   20 00:464B CD 30 42 -  		call 	CheckDollar
   21 00:464E CD 1C 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:4651 01 81 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:4654 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:4656 CD 70 4B -  		call 	Int32ToString 				
   25 00:4659 21 81 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:465C 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:465E C9 -  -  -  		ret
   28 00:465F -  -  -  -  
   29 00:465F -  -  -  -  ; ***************************************************************************************
   30 00:465F -  -  -  -  ;
   31 00:465F -  -  -  -  ;									Changes and Updates
   32 00:465F -  -  -  -  ;
   33 00:465F -  -  -  -  ; ***************************************************************************************
   34 00:465F -  -  -  -  ;
   35 00:465F -  -  -  -  ;		Date			Notes
   36 00:465F -  -  -  -  ;		==== 			=====
   37 00:465F -  -  -  -  ;
   38 00:465F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:465F -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:465F -  -  -  -  ; ***************************************************************************************
    2 00:465F -  -  -  -  ; ***************************************************************************************
    3 00:465F -  -  -  -  ;
    4 00:465F -  -  -  -  ;		Name : 		time.asm
    5 00:465F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465F -  -  -  -  ;		Reviewed :	No
    8 00:465F -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:465F -  -  -  -  ;
   10 00:465F -  -  -  -  ; ***************************************************************************************
   11 00:465F -  -  -  -  ; ***************************************************************************************
   12 00:465F -  -  -  -  
   13 00:465F -  -  -  -  ; ***************************************************************************************
   14 00:465F -  -  -  -  ;
   15 00:465F -  -  -  -  ;							Get system time in ms
   16 00:465F -  -  -  -  ;
   17 00:465F -  -  -  -  ; ***************************************************************************************
   18 00:465F -  -  -  -  
   19 00:465F -  -  -  -  Unary_Time:	;; [time]
   20 00:465F CD E7 4B -  			call 	SYSGetTimer
   21 00:4662 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4664 C9 -  -  -  			ret
   23 00:4665 -  -  -  -  
   24 00:4665 -  -  -  -  ; ***************************************************************************************
   25 00:4665 -  -  -  -  ;
   26 00:4665 -  -  -  -  ;									Changes and Updates
   27 00:4665 -  -  -  -  ;
   28 00:4665 -  -  -  -  ; ***************************************************************************************
   29 00:4665 -  -  -  -  ;
   30 00:4665 -  -  -  -  ;		Date			Notes
   31 00:4665 -  -  -  -  ;		==== 			=====
   32 00:4665 -  -  -  -  ;
   33 00:4665 -  -  -  -  ; ***************************************************************************************
   34 00:4665 -  -  -  -  			
Listing for file "_build.asm"
   46 00:4665 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4665 -  -  -  -  ; ***************************************************************************************
    2 00:4665 -  -  -  -  ; ***************************************************************************************
    3 00:4665 -  -  -  -  ;
    4 00:4665 -  -  -  -  ;		Name : 		top.asm
    5 00:4665 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4665 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4665 -  -  -  -  ;		Reviewed :	No
    8 00:4665 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4665 -  -  -  -  ;
   10 00:4665 -  -  -  -  ; ***************************************************************************************
   11 00:4665 -  -  -  -  ; ***************************************************************************************
   12 00:4665 -  -  -  -  
   13 00:4665 -  -  -  -  ; ***************************************************************************************
   14 00:4665 -  -  -  -  ;
   15 00:4665 -  -  -  -  ;							page unary function (no bracket)
   16 00:4665 -  -  -  -  ;
   17 00:4665 -  -  -  -  ; ***************************************************************************************
   18 00:4665 -  -  -  -  
   19 00:4665 -  -  -  -  Unary_Top:	;; [top]
   20 00:4665 2A 4D 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4668 D9 -  -  -  			exx
   22 00:4669 2A 4F 40 -  			ld 		hl,(TopMemory+2)
   23 00:466C D9 -  -  -  			exx
   24 00:466D 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:466F C9 -  -  -  			ret
   26 00:4670 -  -  -  -  
   27 00:4670 -  -  -  -  ; ***************************************************************************************
   28 00:4670 -  -  -  -  ;
   29 00:4670 -  -  -  -  ;									Changes and Updates
   30 00:4670 -  -  -  -  ;
   31 00:4670 -  -  -  -  ; ***************************************************************************************
   32 00:4670 -  -  -  -  ;
   33 00:4670 -  -  -  -  ;		Date			Notes
   34 00:4670 -  -  -  -  ;		==== 			=====
   35 00:4670 -  -  -  -  ;
   36 00:4670 -  -  -  -  ; ***************************************************************************************
   37 00:4670 -  -  -  -  			
Listing for file "_build.asm"
   47 00:4670 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:4670 -  -  -  -  ; ***************************************************************************************
    2 00:4670 -  -  -  -  ; ***************************************************************************************
    3 00:4670 -  -  -  -  ;
    4 00:4670 -  -  -  -  ;		Name : 		val.asm
    5 00:4670 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4670 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4670 -  -  -  -  ;		Reviewed :	No
    8 00:4670 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:4670 -  -  -  -  ;
   10 00:4670 -  -  -  -  ; ***************************************************************************************
   11 00:4670 -  -  -  -  ; ***************************************************************************************
   12 00:4670 -  -  -  -  
   13 00:4670 -  -  -  -  ; ***************************************************************************************
   14 00:4670 -  -  -  -  ;
   15 00:4670 -  -  -  -  ;								val( unary function
   16 00:4670 -  -  -  -  ;
   17 00:4670 -  -  -  -  ; ***************************************************************************************
   18 00:4670 -  -  -  -  
   19 00:4670 -  -  -  -  Unary_Val:	;; [val]
   20 00:4670 CD 28 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4673 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4674 C1 -  -  -  		pop 	bc
   23 00:4675 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4677 CD 66 4A -  		call 	Int32FromString 			; get the integer part.
   25 00:467A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:467C C8 -  -  -  		ret		z 							; okay
   27 00:467D 3E 03 C3 55 
              42 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4682 -  -  -  -  
   29 00:4682 -  -  -  -  ; ***************************************************************************************
   30 00:4682 -  -  -  -  ;
   31 00:4682 -  -  -  -  ;									Changes and Updates
   32 00:4682 -  -  -  -  ;
   33 00:4682 -  -  -  -  ; ***************************************************************************************
   34 00:4682 -  -  -  -  ;
   35 00:4682 -  -  -  -  ;		Date			Notes
   36 00:4682 -  -  -  -  ;		==== 			=====
   37 00:4682 -  -  -  -  ;
   38 00:4682 -  -  -  -  ; ***************************************************************************************
   39 00:4682 -  -  -  -  		
Listing for file "_build.asm"
   48 00:4682 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4682 -  -  -  -  ; ***************************************************************************************
    2 00:4682 -  -  -  -  ; ***************************************************************************************
    3 00:4682 -  -  -  -  ;
    4 00:4682 -  -  -  -  ;		Name : 		allocate.asm
    5 00:4682 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4682 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4682 -  -  -  -  ;		Reviewed :	No
    8 00:4682 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4682 -  -  -  -  ;
   10 00:4682 -  -  -  -  ; ***************************************************************************************
   11 00:4682 -  -  -  -  ; ***************************************************************************************
   12 00:4682 -  -  -  -  
   13 00:4682 -  -  -  -  ; ***************************************************************************************
   14 00:4682 -  -  -  -  ;
   15 00:4682 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4682 -  -  -  -  ;
   17 00:4682 -  -  -  -  ; ***************************************************************************************
   18 00:4682 -  -  -  -  
   19 00:4682 -  -  -  -  AllocateBytes:
   20 00:4682 ED 5B 49 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:4686 D5 -  -  -  		push 	de 							; save on stack
   22 00:4687 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:4688 22 49 40 -  		ld 		(LowAllocMemory),hl 		; update it
   24 00:468B EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:468C 2A 45 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:468F AF -  -  -  		xor 	a
   27 00:4690 ED 52 -  -  		sbc 	hl,de
   28 00:4692 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:4693 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:4694 3E 06 C3 55 
              42 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:4699 -  -  -  -  
   32 00:4699 -  -  -  -  ; ***************************************************************************************
   33 00:4699 -  -  -  -  ;
   34 00:4699 -  -  -  -  ;									Changes and Updates
   35 00:4699 -  -  -  -  ;
   36 00:4699 -  -  -  -  ; ***************************************************************************************
   37 00:4699 -  -  -  -  ;
   38 00:4699 -  -  -  -  ;		Date			Notes
   39 00:4699 -  -  -  -  ;		==== 			=====
   40 00:4699 -  -  -  -  ;
   41 00:4699 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:4699 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4699 -  -  -  -  ; ***************************************************************************************
    2 00:4699 -  -  -  -  ; ***************************************************************************************
    3 00:4699 -  -  -  -  ;
    4 00:4699 -  -  -  -  ;		Name : 		clear.asm
    5 00:4699 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4699 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4699 -  -  -  -  ;		Reviewed :	No
    8 00:4699 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4699 -  -  -  -  ;
   10 00:4699 -  -  -  -  ; ***************************************************************************************
   11 00:4699 -  -  -  -  ; ***************************************************************************************
   12 00:4699 -  -  -  -  
   13 00:4699 -  -  -  -  ; ***************************************************************************************
   14 00:4699 -  -  -  -  ;
   15 00:4699 -  -  -  -  ;										CLEAR command
   16 00:4699 -  -  -  -  ;
   17 00:4699 -  -  -  -  ; ***************************************************************************************
   18 00:4699 -  -  -  -  
   19 00:4699 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4699 -  -  -  -  		;
   21 00:4699 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4699 -  -  -  -  		;
   23 00:4699 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:469C -  -  -  -  _CCFindLow:
   25 00:469C 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:469F 5E -  -  -  		ld 		e,(hl)		
   27 00:46A0 19 -  -  -  		add 	hl,de
   28 00:46A1 7B -  -  -  		ld 		a,e
   29 00:46A2 B7 -  -  -  		or 		a
   30 00:46A3 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:46A5 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:46A6 22 4D 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:46A9 23 -  -  -  		inc 	hl 							; one for luck
   34 00:46AA 22 49 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:46AD -  -  -  -  		;
   36 00:46AD -  -  -  -  		; 	 		Reset the language stack
   37 00:46AD -  -  -  -  		;
   38 00:46AD 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:46B0 -  -  -  -  		;
   40 00:46B0 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:46B2 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:46B5 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:46B8 19 -  -  -  		add 	hl,de
   44 00:46B9 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:46BB 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:46BE -  -  -  -  		;
   47 00:46BE 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:46C1 19 -  -  -  		add 	hl,de
   49 00:46C2 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:46C5 -  -  -  -  		;
   51 00:46C5 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:46C5 -  -  -  -  		;
   53 00:46C5 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:46C8 -  -  -  -  _CCFClearHT:
   55 00:46C8 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:46C9 36 00 -  -  		ld 		(hl),0
   57 00:46CB 1B -  -  -  		dec 	de
   58 00:46CC 7A -  -  -  		ld 		a,d
   59 00:46CD B3 -  -  -  		or 		e
   60 00:46CE 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:46D0 22 41 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:46D3 -  -  -  -  		;
   63 00:46D3 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:46D3 -  -  -  -  		;
   65 00:46D3 22 45 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:46D6 -  -  -  -  		;
   67 00:46D6 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:46D6 -  -  -  -  		;
   69 00:46D6 CD DD 45 -  		call 	UnaryRandomInitialise
   70 00:46D9 C9 -  -  -  		ret
   71 00:46DA -  -  -  -  
   72 00:46DA -  -  -  -  ; ***************************************************************************************
   73 00:46DA -  -  -  -  ;
   74 00:46DA -  -  -  -  ;									Changes and Updates
   75 00:46DA -  -  -  -  ;
   76 00:46DA -  -  -  -  ; ***************************************************************************************
   77 00:46DA -  -  -  -  ;
   78 00:46DA -  -  -  -  ;		Date			Notes
   79 00:46DA -  -  -  -  ;		==== 			=====
   80 00:46DA -  -  -  -  ;
   81 00:46DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:46DA -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:46DA -  -  -  -  ; ***************************************************************************************
    2 00:46DA -  -  -  -  ; ***************************************************************************************
    3 00:46DA -  -  -  -  ;
    4 00:46DA -  -  -  -  ;		Name : 		instance.asm
    5 00:46DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46DA -  -  -  -  ;		Reviewed :	No
    8 00:46DA -  -  -  -  ;		Purpose :	Instance handling
    9 00:46DA -  -  -  -  ;
   10 00:46DA -  -  -  -  ; ***************************************************************************************
   11 00:46DA -  -  -  -  ; ***************************************************************************************
   12 00:46DA -  -  -  -  
   13 00:46DA -  -  -  -  ; ***************************************************************************************
   14 00:46DA -  -  -  -  ;
   15 00:46DA -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:46DA -  -  -  -  ;
   17 00:46DA -  -  -  -  ; ***************************************************************************************
   18 00:46DA -  -  -  -  
   19 00:46DA -  -  -  -  SetCurrentInstance:
   20 00:46DA ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:46DE 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:46E1 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:46E5 -  -  -  -  
   24 00:46E5 C9 -  -  -  		ret
   25 00:46E6 -  -  -  -  
   26 00:46E6 -  -  -  -  
   27 00:46E6 -  -  -  -  ; ***************************************************************************************
   28 00:46E6 -  -  -  -  ;
   29 00:46E6 -  -  -  -  ;									Changes and Updates
   30 00:46E6 -  -  -  -  ;
   31 00:46E6 -  -  -  -  ; ***************************************************************************************
   32 00:46E6 -  -  -  -  ;
   33 00:46E6 -  -  -  -  ;		Date			Notes
   34 00:46E6 -  -  -  -  ;		==== 			=====
   35 00:46E6 -  -  -  -  ;
   36 00:46E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:46E6 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:46E6 -  -  -  -  ; ***************************************************************************************
    2 00:46E6 -  -  -  -  ; ***************************************************************************************
    3 00:46E6 -  -  -  -  ;
    4 00:46E6 -  -  -  -  ;		Name : 		new.asm
    5 00:46E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46E6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46E6 -  -  -  -  ;		Reviewed :	No
    8 00:46E6 -  -  -  -  ;		Purpose :	New command.
    9 00:46E6 -  -  -  -  ;
   10 00:46E6 -  -  -  -  ; ***************************************************************************************
   11 00:46E6 -  -  -  -  ; ***************************************************************************************
   12 00:46E6 -  -  -  -  
   13 00:46E6 -  -  -  -  ; ***************************************************************************************
   14 00:46E6 -  -  -  -  ;
   15 00:46E6 -  -  -  -  ;										NEW command
   16 00:46E6 -  -  -  -  ;
   17 00:46E6 -  -  -  -  ; ***************************************************************************************
   18 00:46E6 -  -  -  -  
   19 00:46E6 -  -  -  -  Command_NEW: 	;; [new]
   20 00:46E6 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:46E9 36 00 -  -  		ld 		(hl),0
   22 00:46EB CD 99 46 -  		call 	Command_CLEAR 				; clear all variables
   23 00:46EE 3E 00 C3 55 
              42 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:46F3 -  -  -  -  
   25 00:46F3 -  -  -  -  ; ***************************************************************************************
   26 00:46F3 -  -  -  -  ;
   27 00:46F3 -  -  -  -  ;									Changes and Updates
   28 00:46F3 -  -  -  -  ;
   29 00:46F3 -  -  -  -  ; ***************************************************************************************
   30 00:46F3 -  -  -  -  ;
   31 00:46F3 -  -  -  -  ;		Date			Notes
   32 00:46F3 -  -  -  -  ;		==== 			=====
   33 00:46F3 -  -  -  -  ;
   34 00:46F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:46F3 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:46F3 -  -  -  -  ; ***************************************************************************************
    2 00:46F3 -  -  -  -  ; ***************************************************************************************
    3 00:46F3 -  -  -  -  ;
    4 00:46F3 -  -  -  -  ;		Name : 		utility.asm
    5 00:46F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46F3 -  -  -  -  ;		Reviewed :	No
    8 00:46F3 -  -  -  -  ;		Purpose :	Utility routines
    9 00:46F3 -  -  -  -  ;
   10 00:46F3 -  -  -  -  ; ***************************************************************************************
   11 00:46F3 -  -  -  -  ; ***************************************************************************************
   12 00:46F3 -  -  -  -  
   13 00:46F3 -  -  -  -  ; ***************************************************************************************
   14 00:46F3 -  -  -  -  ;
   15 00:46F3 -  -  -  -  ;							Print ASCII string at HL
   16 00:46F3 -  -  -  -  ;
   17 00:46F3 -  -  -  -  ; ***************************************************************************************
   18 00:46F3 -  -  -  -  
   19 00:46F3 -  -  -  -  PrintStringAtHL:
   20 00:46F3 7E -  -  -  		ld 		a,(hl)
   21 00:46F4 FE 20 -  -  		cp 		$20		
   22 00:46F6 D8 -  -  -  		ret 	c
   23 00:46F7 CD BE 4B -  		call 	SYSPrintChar
   24 00:46FA 23 -  -  -  		inc 	hl
   25 00:46FB 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:46FD -  -  -  -  
   27 00:46FD -  -  -  -  ; ***************************************************************************************
   28 00:46FD -  -  -  -  ;
   29 00:46FD -  -  -  -  ;									Changes and Updates
   30 00:46FD -  -  -  -  ;
   31 00:46FD -  -  -  -  ; ***************************************************************************************
   32 00:46FD -  -  -  -  ;
   33 00:46FD -  -  -  -  ;		Date			Notes
   34 00:46FD -  -  -  -  ;		==== 			=====
   35 00:46FD -  -  -  -  ;
   36 00:46FD -  -  -  -  ; ***************************************************************************************
   37 00:46FD -  -  -  -  		
Listing for file "_build.asm"
   53 00:46FD -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:46FD -  -  -  -  ; ***************************************************************************************
    2 00:46FD -  -  -  -  ; ***************************************************************************************
    3 00:46FD -  -  -  -  ;
    4 00:46FD -  -  -  -  ;		Name : 		create.asm
    5 00:46FD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46FD -  -  -  -  ;		Date : 		4th June 2022
    7 00:46FD -  -  -  -  ;		Reviewed :	No
    8 00:46FD -  -  -  -  ;		Purpose :	Create a variable.
    9 00:46FD -  -  -  -  ;
   10 00:46FD -  -  -  -  ; ***************************************************************************************
   11 00:46FD -  -  -  -  ; ***************************************************************************************
   12 00:46FD -  -  -  -  
   13 00:46FD -  -  -  -  ; ***************************************************************************************
   14 00:46FD -  -  -  -  ;
   15 00:46FD -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:46FD -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:46FD -  -  -  -  ;
   18 00:46FD -  -  -  -  ; ***************************************************************************************
   19 00:46FD -  -  -  -  
   20 00:46FD -  -  -  -  VariableCreate:		
   21 00:46FD -  -  -  -  		;
   22 00:46FD -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:46FD -  -  -  -  		;
   24 00:46FD 11 09 00 -  		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:4700 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:4701 E5 -  -  -  		push 	hl 							; save count.
   27 00:4702 CD 82 46 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4705 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4706 -  -  -  -  		;
   30 00:4706 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4706 -  -  -  -  		;
   32 00:4706 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4707 -  -  -  -  _VCClear:
   34 00:4707 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4709 23 -  -  -  		inc 	hl
   36 00:470A 0B -  -  -  		dec 	bc
   37 00:470B 78 -  -  -  		ld		a,b
   38 00:470C B1 -  -  -  		or 		c
   39 00:470D 20 F8 -  -  		jr 		nz,_VCClear
   40 00:470F E1 -  -  -  		pop 	hl							; restore start address
   41 00:4710 -  -  -  -  		;
   42 00:4710 -  -  -  -  		;		Now start to create the data.
   43 00:4710 -  -  -  -  		;
   44 00:4710 E5 -  -  -  		push 	hl 							; save start
   45 00:4711 -  -  -  -  		;
   46 00:4711 -  -  -  -  		;		Write hash to +0
   47 00:4711 -  -  -  -  		;
   48 00:4711 3A 7B 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:4714 77 -  -  -  		ld 		(hl),a
   50 00:4715 23 -  -  -  		inc 	hl
   51 00:4716 -  -  -  -  		;
   52 00:4716 -  -  -  -  		;		Write list head to +1
   53 00:4716 -  -  -  -  		;
   54 00:4716 E5 -  -  -  		push 	hl 							; save write position
   55 00:4717 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:471A 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:471E EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:471F E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:4720 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4726 -  -  -  -  		;
   61 00:4726 -  -  -  -  		;		Write variable name to +5
   62 00:4726 -  -  -  -  		;
   63 00:4726 ED 5B 77 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:472A 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:4730 -  -  -  -  		;
   66 00:4730 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:4731 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4734 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:473A -  -  -  -  		;
   70 00:473A EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:473B C9 -  -  -  		ret
   72 00:473C -  -  -  -  
   73 00:473C -  -  -  -  ; ***************************************************************************************
   74 00:473C -  -  -  -  ;
   75 00:473C -  -  -  -  ;									Changes and Updates
   76 00:473C -  -  -  -  ;
   77 00:473C -  -  -  -  ; ***************************************************************************************
   78 00:473C -  -  -  -  ;
   79 00:473C -  -  -  -  ;		Date			Notes
   80 00:473C -  -  -  -  ;		==== 			=====
   81 00:473C -  -  -  -  ;
   82 00:473C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:473C -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:473C -  -  -  -  ; ***************************************************************************************
    2 00:473C -  -  -  -  ; ***************************************************************************************
    3 00:473C -  -  -  -  ;
    4 00:473C -  -  -  -  ;		Name : 		find.asm
    5 00:473C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:473C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:473C -  -  -  -  ;		Reviewed :	No
    8 00:473C -  -  -  -  ;		Purpose :	Find a variable.
    9 00:473C -  -  -  -  ;
   10 00:473C -  -  -  -  ; ***************************************************************************************
   11 00:473C -  -  -  -  ; ***************************************************************************************
   12 00:473C -  -  -  -  
   13 00:473C -  -  -  -  ; ***************************************************************************************
   14 00:473C -  -  -  -  ;
   15 00:473C -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:473C -  -  -  -  ; 		variable information at (IX)
   17 00:473C -  -  -  -  ;
   18 00:473C -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:473C -  -  -  -  ;		Don't autocreate arrays.
   20 00:473C -  -  -  -  ;
   21 00:473C -  -  -  -  ; ***************************************************************************************
   22 00:473C -  -  -  -  
   23 00:473C -  -  -  -  FindVariable:
   24 00:473C DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:473F FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:4741 D2 B2 42 -  		jp 		nc,SyntaxError 		
   27 00:4744 -  -  -  -  
   28 00:4744 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4747 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4749 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:474B FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:474D 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:474F -  -  -  -  		;
   34 00:474F -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:474F -  -  -  -  		;
   36 00:474F 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:4752 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4755 87 -  -  -  		add 	a,a 						; x4
   39 00:4756 87 -  -  -  		add 	a,a
   40 00:4757 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4758 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4759 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:475B CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:475D DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:475F AF -  -  -  		xor 	a 							; clear carry and return
   46 00:4760 C9 -  -  -  		ret
   47 00:4761 -  -  -  -  		;
   48 00:4761 -  -  -  -  		;		Not a standard simple variable.
   49 00:4761 -  -  -  -  		;
   50 00:4761 -  -  -  -  _FVNotSimple:
   51 00:4761 CD 8E 47 -  		call 	VariableInformation 		; get information about the variable.
   52 00:4764 CD C4 47 -  		call 	VariableSearchList 			; search the linked list
   53 00:4767 38 0A -  -  		jr 		c,_FVNotFound  				
   54 00:4769 -  -  -  -  		;
   55 00:4769 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4769 -  -  -  -  		;
   57 00:4769 -  -  -  -  _FVExitReference:		
   58 00:4769 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:476C 19 -  -  -  		add 	hl,de 
   60 00:476D -  -  -  -  		;
   61 00:476D -  -  -  -  		; 		TODO: Array check code.
   62 00:476D -  -  -  -  		;
   63 00:476D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:476F CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:4771 AF -  -  -  		xor 	a 							; clear carry and return
   66 00:4772 C9 -  -  -  		ret
   67 00:4773 -  -  -  -  		;
   68 00:4773 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:4773 -  -  -  -  		;
   70 00:4773 -  -  -  -  _FVNotFound:		
   71 00:4773 3A 75 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:4776 B7 -  -  -  		or 		a
   73 00:4777 28 0F -  -  		jr 		z,_FVFail
   74 00:4779 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:477C FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:477E 28 08 -  -  		jr 		z,_FVFail
   77 00:4780 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   78 00:4783 CD FD 46 -  		call 	VariableCreate 				; create a new variable.
   79 00:4786 18 E1 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:4788 -  -  -  -  
   81 00:4788 -  -  -  -  _FVFail:
   82 00:4788 DD 2A 77 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:478C 37 -  -  -  		scf
   84 00:478D C9 -  -  -  		ret
   85 00:478E -  -  -  -  
   86 00:478E -  -  -  -  ; ***************************************************************************************
   87 00:478E -  -  -  -  ;
   88 00:478E -  -  -  -  ;									Changes and Updates
   89 00:478E -  -  -  -  ;
   90 00:478E -  -  -  -  ; ***************************************************************************************
   91 00:478E -  -  -  -  ;
   92 00:478E -  -  -  -  ;		Date			Notes
   93 00:478E -  -  -  -  ;		==== 			=====
   94 00:478E -  -  -  -  ;
   95 00:478E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:478E -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:478E -  -  -  -  ; ***************************************************************************************
    2 00:478E -  -  -  -  ; ***************************************************************************************
    3 00:478E -  -  -  -  ;
    4 00:478E -  -  -  -  ;		Name : 		info.asm
    5 00:478E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:478E -  -  -  -  ;		Date : 		4th June 2022
    7 00:478E -  -  -  -  ;		Reviewed :	No
    8 00:478E -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:478E -  -  -  -  ;
   10 00:478E -  -  -  -  ; ***************************************************************************************
   11 00:478E -  -  -  -  ; ***************************************************************************************
   12 00:478E -  -  -  -  
   13 00:478E -  -  -  -  ; ***************************************************************************************
   14 00:478E -  -  -  -  ;
   15 00:478E -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:478E -  -  -  -  ; 		after the identifier.
   17 00:478E -  -  -  -  ;
   18 00:478E -  -  -  -  ; ***************************************************************************************
   19 00:478E -  -  -  -  
   20 00:478E -  -  -  -  VariableInformation:
   21 00:478E DD 22 77 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4792 -  -  -  -  		;
   23 00:4792 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4792 -  -  -  -  		;
   25 00:4792 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4794 -  -  -  -  _VICalculateHash:
   27 00:4794 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4797 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4799 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:479B 80 -  -  -  		add 	a,b 						; add to hash
   31 00:479C 07 -  -  -  		rlca
   32 00:479D 07 -  -  -  		rlca
   33 00:479E 80 -  -  -  		add 	a,b
   34 00:479F 47 -  -  -  		ld 		b,a 						; update hash
   35 00:47A0 DD 23 -  -  		inc 	ix 							; next character
   36 00:47A2 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:47A4 -  -  -  -  		;
   38 00:47A4 -  -  -  -  _VIHashDone:
   39 00:47A4 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:47A5 -  -  -  -  		;
   41 00:47A5 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:47A5 -  -  -  -  		;
   43 00:47A5 32 7B 40 -  		ld 		(VarHash),a
   44 00:47A8 -  -  -  -  		;
   45 00:47A8 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:47A8 -  -  -  -  		;		
   47 00:47A8 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:47AA 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:47AD 6F -  -  -  		ld 		l,a
   50 00:47AE 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:47AF 29 -  -  -  		add 	hl,hl
   52 00:47B0 -  -  -  -  		;
   53 00:47B0 ED 5B 41 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:47B4 19 -  -  -  		add 	hl,de
   55 00:47B5 -  -  -  -  		;
   56 00:47B5 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:47B8 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:47BA 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:47BC 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:47BF 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:47C0 -  -  -  -  _VINotArray:
   62 00:47C0 22 7D 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:47C3 C9 -  -  -  		ret
   64 00:47C4 -  -  -  -  
   65 00:47C4 -  -  -  -  ; ***************************************************************************************
   66 00:47C4 -  -  -  -  ;
   67 00:47C4 -  -  -  -  ;									Changes and Updates
   68 00:47C4 -  -  -  -  ;
   69 00:47C4 -  -  -  -  ; ***************************************************************************************
   70 00:47C4 -  -  -  -  ;
   71 00:47C4 -  -  -  -  ;		Date			Notes
   72 00:47C4 -  -  -  -  ;		==== 			=====
   73 00:47C4 -  -  -  -  ;
   74 00:47C4 -  -  -  -  ; ***************************************************************************************
   75 00:47C4 -  -  -  -  
Listing for file "_build.asm"
   56 00:47C4 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:47C4 -  -  -  -  ; ***************************************************************************************
    2 00:47C4 -  -  -  -  ; ***************************************************************************************
    3 00:47C4 -  -  -  -  ;
    4 00:47C4 -  -  -  -  ;		Name : 		search.asm
    5 00:47C4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C4 -  -  -  -  ;		Date : 		4th June 2022
    7 00:47C4 -  -  -  -  ;		Reviewed :	No
    8 00:47C4 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:47C4 -  -  -  -  ;
   10 00:47C4 -  -  -  -  ; ***************************************************************************************
   11 00:47C4 -  -  -  -  ; ***************************************************************************************
   12 00:47C4 -  -  -  -  
   13 00:47C4 -  -  -  -  ; ***************************************************************************************
   14 00:47C4 -  -  -  -  ;
   15 00:47C4 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:47C4 -  -  -  -  ;		CS if failed.
   17 00:47C4 -  -  -  -  ;
   18 00:47C4 -  -  -  -  ; ***************************************************************************************
   19 00:47C4 -  -  -  -  
   20 00:47C4 -  -  -  -  VariableSearchList:
   21 00:47C4 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:47C7 -  -  -  -  		;
   23 00:47C7 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:47C7 -  -  -  -  		;		the address of the hash record
   25 00:47C7 -  -  -  -  		;
   26 00:47C7 -  -  -  -  _VSLLoop:
   27 00:47C7 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:47CB -  -  -  -  		;
   29 00:47CB E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:47CC AF -  -  -  		xor 	a
   31 00:47CD ED 6A -  -  		adc 	hl,hl
   32 00:47CF E1 -  -  -  		pop 	hl
   33 00:47D0 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:47D2 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:47D3 C8 -  -  -  		ret 	z
   36 00:47D4 -  -  -  -  _VSLRecord:
   37 00:47D4 -  -  -  -  		;
   38 00:47D4 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:47D4 -  -  -  -  		;
   40 00:47D4 3A 7B 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:47D7 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:47D8 23 -  -  -  		inc 	hl 							; points to link back
   43 00:47D9 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:47DB -  -  -  -  		;
   45 00:47DB -  -  -  -  		;		Now check the name
   46 00:47DB -  -  -  -  		;
   47 00:47DB E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:47DC 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:47DD 23 -  -  -  		inc 	hl
   50 00:47DE 23 -  -  -  		inc 	hl
   51 00:47DF 23 -  -  -  		inc 	hl
   52 00:47E0 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:47E4 ED 5B 77 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:47E8 -  -  -  -  		;
   55 00:47E8 -  -  -  -  		;		Check individual characters
   56 00:47E8 -  -  -  -  		;
   57 00:47E8 -  -  -  -  _VSLCharacter:
   58 00:47E8 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:47E9 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:47EB 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:47ED BE -  -  -  		cp 		(hl) 						; compare them
   62 00:47EE 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:47EF 13 -  -  -  		inc 	de
   64 00:47F0 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:47F2 -  -  -  -  		;
   66 00:47F2 -  -  -  -  _VSLFailed:
   67 00:47F2 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:47F3 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:47F5 -  -  -  -  		;
   70 00:47F5 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:47F5 -  -  -  -  		;		
   72 00:47F5 -  -  -  -  _VSLEndIdentifier:
   73 00:47F5 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:47F6 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:47F8 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:47FA -  -  -  -  		;
   77 00:47FA E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:47FB 2B -  -  -  		dec 	hl 							; now start of record
   79 00:47FC AF -  -  -  		xor 	a 							; clear carry
   80 00:47FD C9 -  -  -  		ret
   81 00:47FE -  -  -  -  
   82 00:47FE -  -  -  -  ; ***************************************************************************************
   83 00:47FE -  -  -  -  ;
   84 00:47FE -  -  -  -  ;									Changes and Updates
   85 00:47FE -  -  -  -  ;
   86 00:47FE -  -  -  -  ; ***************************************************************************************
   87 00:47FE -  -  -  -  ;
   88 00:47FE -  -  -  -  ;		Date			Notes
   89 00:47FE -  -  -  -  ;		==== 			=====
   90 00:47FE -  -  -  -  ;
   91 00:47FE -  -  -  -  ; ***************************************************************************************
   92 00:47FE -  -  -  -  		
Listing for file "_build.asm"
   57 00:47FE -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:47FE -  -  -  -  ;
    2 00:47FE -  -  -  -  ;	This file is automatically generated.
    3 00:47FE -  -  -  -  ;
    4 00:47FE 00 00 -  -  	.block	$20-($ & $1F)
    5 00:4800 -  -  -  -  PrecedenceTable:
    6 00:4800 06 -  -  -  	.db	6	; $0083 !
    7 00:4801 06 -  -  -  	.db	6	; $0084 ?
    8 00:4802 05 -  -  -  	.db	5	; $0085 *
    9 00:4803 05 -  -  -  	.db	5	; $0086 /
   10 00:4804 05 -  -  -  	.db	5	; $0087 mod
   11 00:4805 05 -  -  -  	.db	5	; $0088 div
   12 00:4806 04 -  -  -  	.db	4	; $0089 +
   13 00:4807 04 -  -  -  	.db	4	; $008a -
   14 00:4808 03 -  -  -  	.db	3	; $008b >=
   15 00:4809 03 -  -  -  	.db	3	; $008c <=
   16 00:480A 03 -  -  -  	.db	3	; $008d >
   17 00:480B 03 -  -  -  	.db	3	; $008e <
   18 00:480C 03 -  -  -  	.db	3	; $008f =
   19 00:480D 03 -  -  -  	.db	3	; $0090 <>
   20 00:480E 02 -  -  -  	.db	2	; $0091 and
   21 00:480F 01 -  -  -  	.db	1	; $0092 or
   22 00:4810 01 -  -  -  	.db	1	; $0093 eor
   23 00:4811 -  -  -  -  
Listing for file "_build.asm"
   58 00:4811 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4811 -  -  -  -  ;
    2 00:4811 -  -  -  -  ;	This is automatically generated.
    3 00:4811 -  -  -  -  ;
    4 00:4811 -  -  -  -  ErrorIDTable:
    5 00:4811 51 48 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4815 57 48 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4819 68 48 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:481D 76 48 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4821 80 48 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:4825 9A 48 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:4829 AB 48 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:482D B9 48 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:4831 C7 48 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:4835 D1 48 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:4839 E6 48 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:483D FC 48 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:4841 0A 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:4845 0F 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:4849 1C 49 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:484D 2D 49 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:4851 -  -  -  -  
   22 00:4851 -  -  -  -  ErrText_warmstart:
   23 00:4851 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:4857 -  -  -  -  ErrText_assert:
   25 00:4857 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:4868 -  -  -  -  ErrText_badtype:
   27 00:4868 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:4876 -  -  -  -  ErrText_badvalue:
   29 00:4876 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:4880 -  -  -  -  ErrText_disabled:
   31 00:4880 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:489A -  -  -  -  ErrText_divzero:
   33 00:489A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:48AB -  -  -  -  ErrText_memory:
   35 00:48AB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:48B9 -  -  -  -  ErrText_nocomma:
   37 00:48B9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:48C7 -  -  -  -  ErrText_nodollar:
   39 00:48C7 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:48D1 -  -  -  -  ErrText_nolbracket:
   41 00:48D1 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:48E6 -  -  -  -  ErrText_norbracket:
   43 00:48E6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:48FC -  -  -  -  ErrText_notref:
   45 00:48FC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:490A -  -  -  -  ErrText_stop:
   47 00:490A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:490F -  -  -  -  ErrText_syntax:
   49 00:490F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:491C -  -  -  -  ErrText_todo:
   51 00:491C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:492D -  -  -  -  ErrText_unknownvar:
   53 00:492D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:493E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:493E -  -  -  -  ;
    2 00:493E -  -  -  -  ;	Vectors for set 0
    3 00:493E -  -  -  -  ;
    4 00:493E -  -  -  -  VectorsSet0:
    5 00:493E EC 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4940 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4942 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4944 0F 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4946 17 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4948 CD 42 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:494A D8 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:494C E3 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:494E D8 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4950 B7 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4952 C2 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4954 6A 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4956 61 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4958 4F 43 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:495A 46 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:495C 3D 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:495E 58 43 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4960 EE 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4962 F9 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4964 04 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4966 3E 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4968 38 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:496A 7F 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:496C A5 45 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:496E 70 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4970 4D 45 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4972 23 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4974 4B 46 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4976 5F 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4978 58 45 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:497A 88 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:497C 9A 45 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:497E 5F 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4980 65 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4982 70 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4984 2F 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4986 33 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4988 E2 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:498A E2 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:498C E5 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:498E E2 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4990 93 41 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4992 1F 40 -  -  	addr(Unimplemented)              ; $00aa repeat
   48 00:4994 1F 40 -  -  	addr(Unimplemented)              ; $00ab until
   49 00:4996 1F 40 -  -  	addr(Unimplemented)              ; $00ac if
   50 00:4998 E2 40 -  -  	addr(BadCmd_Then)                ; $00ad then
   51 00:499A 1F 40 -  -  	addr(Unimplemented)              ; $00ae else
   52 00:499C 1F 40 -  -  	addr(Unimplemented)              ; $00af for
   53 00:499E E2 40 -  -  	addr(BadCmd_To)                  ; $00b0 to
   54 00:49A0 1F 40 -  -  	addr(Unimplemented)              ; $00b1 step
   55 00:49A2 1F 40 -  -  	addr(Unimplemented)              ; $00b2 next
   56 00:49A4 1F 40 -  -  	addr(Unimplemented)              ; $00b3 def
   57 00:49A6 1F 40 -  -  	addr(Unimplemented)              ; $00b4 proc
   58 00:49A8 1F 40 -  -  	addr(Unimplemented)              ; $00b5 endproc
   59 00:49AA 1F 40 -  -  	addr(Unimplemented)              ; $00b6 gosub
   60 00:49AC 1F 40 -  -  	addr(Unimplemented)              ; $00b7 return
   61 00:49AE 1F 40 -  -  	addr(Unimplemented)              ; $00b8 goto
   62 00:49B0 1F 40 -  -  	addr(Unimplemented)              ; $00b9 local
   63 00:49B2 E6 40 -  -  	addr(Command_DIM)                ; $00ba dim
   64 00:49B4 93 41 -  -  	addr(Command_REM)                ; $00bb rem
   65 00:49B6 FF 40 -  -  	addr(Command_LET)                ; $00bc let
   66 00:49B8 1F 40 -  -  	addr(Unimplemented)              ; $00bd vdu
   67 00:49BA 44 41 -  -  	addr(Command_PRINT)              ; $00be print
   68 00:49BC 1F 40 -  -  	addr(Unimplemented)              ; $00bf load
   69 00:49BE 1F 40 -  -  	addr(Unimplemented)              ; $00c0 save
   70 00:49C0 1F 40 -  -  	addr(Unimplemented)              ; $00c1 list
   71 00:49C2 E6 46 -  -  	addr(Command_NEW)                ; $00c2 new
   72 00:49C4 AE 41 -  -  	addr(Command_RUN)                ; $00c3 run
   73 00:49C6 1F 40 -  -  	addr(Unimplemented)              ; $00c4 read
   74 00:49C8 1F 40 -  -  	addr(Unimplemented)              ; $00c5 data
   75 00:49CA 1F 40 -  -  	addr(Unimplemented)              ; $00c6 restore
   76 00:49CC D3 40 -  -  	addr(Command_ASSERT)             ; $00c7 assert
   77 00:49CE 99 46 -  -  	addr(Command_CLEAR)              ; $00c8 clear
   78 00:49D0 E7 40 -  -  	addr(Command_END)                ; $00c9 end
   79 00:49D2 11 42 -  -  	addr(Command_STOP)               ; $00ca stop
   80 00:49D4 -  -  -  -  ;
   81 00:49D4 -  -  -  -  ;	Vectors for set 1
   82 00:49D4 -  -  -  -  ;
   83 00:49D4 -  -  -  -  VectorsSet1:
   84 00:49D4 -  -  -  -  ;
   85 00:49D4 -  -  -  -  ;	Vectors for set 2
   86 00:49D4 -  -  -  -  ;
   87 00:49D4 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:49D4 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:49D4 -  -  -  -  ; ***************************************************************************************
    2 00:49D4 -  -  -  -  ; ***************************************************************************************
    3 00:49D4 -  -  -  -  ;
    4 00:49D4 -  -  -  -  ;		Name : 		idivide.asm
    5 00:49D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49D4 -  -  -  -  ;		Reviewed :	No
    8 00:49D4 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:49D4 -  -  -  -  ;
   10 00:49D4 -  -  -  -  ; ***************************************************************************************
   11 00:49D4 -  -  -  -  ; ***************************************************************************************
   12 00:49D4 -  -  -  -  
   13 00:49D4 -  -  -  -  ; ***************************************************************************************
   14 00:49D4 -  -  -  -  ;
   15 00:49D4 -  -  -  -  ;								Unsigned integer divide
   16 00:49D4 -  -  -  -  ;
   17 00:49D4 -  -  -  -  ; ***************************************************************************************
   18 00:49D4 -  -  -  -  
   19 00:49D4 -  -  -  -  Int32UDivide:
   20 00:49D4 37 -  -  -  		scf
   21 00:49D5 C3 13 4A -  		jp 		_I32UnsignedDivide		
   22 00:49D8 -  -  -  -  
   23 00:49D8 -  -  -  -  ; ***************************************************************************************
   24 00:49D8 -  -  -  -  ;
   25 00:49D8 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:49D8 -  -  -  -  ;
   27 00:49D8 -  -  -  -  ; ***************************************************************************************
   28 00:49D8 -  -  -  -  
   29 00:49D8 -  -  -  -  Int32SDivide:
   30 00:49D8 37 -  -  -  		scf
   31 00:49D9 18 01 -  -  		jr 		_I32SDivide
   32 00:49DB -  -  -  -  Int32Modulus:
   33 00:49DB AF -  -  -  		xor 	a
   34 00:49DC -  -  -  -  _I32SDivide:
   35 00:49DC 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:49DD F5 -  -  -  		push 	af
   37 00:49DE 08 -  -  -  		ex 		af,af'
   38 00:49DF -  -  -  -  
   39 00:49DF D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:49E0 D9 -  -  -  		exx
   41 00:49E1 D5 -  -  -  		push 	de
   42 00:49E2 D9 -  -  -  		exx
   43 00:49E3 -  -  -  -  
   44 00:49E3 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:49E4 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:49E5 CD 01 4A -  		call 	_I32CheckHLSignSwap
   47 00:49E8 CD 01 4A -  		call 	_I32CheckHLSignSwap
   48 00:49EB 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:49EC F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:49ED F5 -  -  -  		push 	af
   51 00:49EE CD 13 4A -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:49F1 F1 -  -  -  		pop 	af 							; get function back
   53 00:49F2 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:49F4 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:49F5 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:49F7 C4 5D 4B -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:49FA -  -  -  -  _I32SDExit:
   58 00:49FA D9 -  -  -  		exx 								; restore DE'DE
   59 00:49FB D1 -  -  -  		pop 	de
   60 00:49FC D9 -  -  -  		exx
   61 00:49FD D1 -  -  -  		pop 	de
   62 00:49FE F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:49FF 08 -  -  -  		ex 		af,af'
   64 00:4A00 C9 -  -  -  		ret
   65 00:4A01 -  -  -  -  
   66 00:4A01 -  -  -  -  
   67 00:4A01 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4A01 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4A02 CB 7C -  -  		bit 	7,h
   70 00:4A04 D9 -  -  -  		exx
   71 00:4A05 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4A07 -  -  -  -  		;
   73 00:4A07 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4A09 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4A0A CD 5D 4B -  		call 	Int32Negate 				
   76 00:4A0D F1 -  -  -  		pop 	af
   77 00:4A0E -  -  -  -  _I32CHSPositive:
   78 00:4A0E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4A0F EB -  -  -  		ex 		de,hl
   80 00:4A10 D9 -  -  -  		exx		
   81 00:4A11 EB -  -  -  		ex 		de,hl
   82 00:4A12 C9 -  -  -  		ret
   83 00:4A13 -  -  -  -  
   84 00:4A13 -  -  -  -  ; ***************************************************************************************
   85 00:4A13 -  -  -  -  ;
   86 00:4A13 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4A13 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4A13 -  -  -  -  ;
   89 00:4A13 -  -  -  -  ; ***************************************************************************************
   90 00:4A13 -  -  -  -  
   91 00:4A13 -  -  -  -  _I32UnsignedDivide:
   92 00:4A13 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4A14 D5 -  -  -  		push 	de
   94 00:4A15 D9 -  -  -  		exx
   95 00:4A16 C5 -  -  -  		push 	bc
   96 00:4A17 D5 -  -  -  		push 	de 							
   97 00:4A18 D9 -  -  -  		exx
   98 00:4A19 -  -  -  -  
   99 00:4A19 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4A1A -  -  -  -  
  101 00:4A1A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4A1B B3 -  -  -  		or 		e
  103 00:4A1C D9 -  -  -  		exx
  104 00:4A1D B2 -  -  -  		or 		d
  105 00:4A1E B3 -  -  -  		or 		e
  106 00:4A1F D9 -  -  -  		exx
  107 00:4A20 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4A23 -  -  -  -  
  109 00:4A23 -  -  -  -  
  110 00:4A23 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4A24 4D -  -  -  		ld		c,l
  112 00:4A25 21 00 00 -  		ld 		hl,$0000
  113 00:4A28 D9 -  -  -  		exx
  114 00:4A29 44 -  -  -  		ld 		b,h
  115 00:4A2A 4D -  -  -  		ld		c,l
  116 00:4A2B 21 00 00 -  		ld 		hl,$0000
  117 00:4A2E D9 -  -  -  		exx
  118 00:4A2F -  -  -  -  
  119 00:4A2F 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4A31 -  -  -  -  _I32DivideLoop:
  121 00:4A31 F5 -  -  -  		push 	af
  122 00:4A32 -  -  -  -  
  123 00:4A32 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4A34 CB 10 -  -  		rl 		b
  125 00:4A36 D9 -  -  -  		exx
  126 00:4A37 CB 11 -  -  		rl 		c
  127 00:4A39 CB 10 -  -  		rl 		b
  128 00:4A3B D9 -  -  -  		exx
  129 00:4A3C CB 15 -  -  		rl 		l
  130 00:4A3E CB 14 -  -  		rl 		h
  131 00:4A40 D9 -  -  -  		exx
  132 00:4A41 CB 15 -  -  		rl 		l
  133 00:4A43 CB 14 -  -  		rl 		h
  134 00:4A45 D9 -  -  -  		exx
  135 00:4A46 -  -  -  -  
  136 00:4A46 CD 03 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4A49 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4A4B -  -  -  -  
  139 00:4A4B 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4A4C 18 03 -  -  		jr 		_I32Next
  141 00:4A4E -  -  -  -  
  142 00:4A4E -  -  -  -  _I32Borrow:
  143 00:4A4E CD FD 4A -  		call 	Int32Add 					; A = A + M
  144 00:4A51 -  -  -  -  _I32Next:
  145 00:4A51 F1 -  -  -  		pop 	af
  146 00:4A52 3D -  -  -  		dec 	a
  147 00:4A53 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4A55 -  -  -  -  
  149 00:4A55 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4A56 -  -  -  -  
  151 00:4A56 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4A57 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4A59 -  -  -  -  
  154 00:4A59 60 -  -  -  		ld  	h,b
  155 00:4A5A 69 -  -  -  		ld 		l,c
  156 00:4A5B D9 -  -  -  		exx
  157 00:4A5C 60 -  -  -  		ld  	h,b
  158 00:4A5D 69 -  -  -  		ld 		l,c
  159 00:4A5E D9 -  -  -  		exx
  160 00:4A5F -  -  -  -  _I32Modulus1:		
  161 00:4A5F D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4A60 D1 -  -  -  		pop 	de
  163 00:4A61 C1 -  -  -  		pop 	bc
  164 00:4A62 D9 -  -  -  		exx
  165 00:4A63 D1 -  -  -  		pop 	de
  166 00:4A64 C1 -  -  -  		pop 	bc
  167 00:4A65 C9 -  -  -  		ret
  168 00:4A66 -  -  -  -  
  169 00:4A66 -  -  -  -  ; ***************************************************************************************
  170 00:4A66 -  -  -  -  ;
  171 00:4A66 -  -  -  -  ;									Changes and Updates
  172 00:4A66 -  -  -  -  ;
  173 00:4A66 -  -  -  -  ; ***************************************************************************************
  174 00:4A66 -  -  -  -  ;
  175 00:4A66 -  -  -  -  ;		Date			Notes
  176 00:4A66 -  -  -  -  ;		==== 			=====
  177 00:4A66 -  -  -  -  ;
  178 00:4A66 -  -  -  -  ; ***************************************************************************************
  179 00:4A66 -  -  -  -  		
Listing for file "_build.asm"
   61 00:4A66 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4A66 -  -  -  -  ; ***************************************************************************************
    2 00:4A66 -  -  -  -  ; ***************************************************************************************
    3 00:4A66 -  -  -  -  ;
    4 00:4A66 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4A66 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A66 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A66 -  -  -  -  ;		Reviewed :	No
    8 00:4A66 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4A66 -  -  -  -  ;
   10 00:4A66 -  -  -  -  ; ***************************************************************************************
   11 00:4A66 -  -  -  -  ; ***************************************************************************************
   12 00:4A66 -  -  -  -  
   13 00:4A66 -  -  -  -  ; ***************************************************************************************
   14 00:4A66 -  -  -  -  ;
   15 00:4A66 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4A66 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4A66 -  -  -  -  ;
   18 00:4A66 -  -  -  -  ; ***************************************************************************************
   19 00:4A66 -  -  -  -  
   20 00:4A66 -  -  -  -  Int32FromString:
   21 00:4A66 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4A67 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4A68 D5 -  -  -  		push 	de
   24 00:4A69 D9 -  -  -  		exx
   25 00:4A6A D5 -  -  -  		push 	de
   26 00:4A6B -  -  -  -  
   27 00:4A6B 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4A6E 11 00 00 -  		ld 		de,$0000
   29 00:4A71 D9 -  -  -  		exx
   30 00:4A72 21 00 00 -  		ld 		hl,$0000
   31 00:4A75 11 00 00 -  		ld 		de,$0000
   32 00:4A78 D9 -  -  -  		exx
   33 00:4A79 -  -  -  -  
   34 00:4A79 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4A7A CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4A7C 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4A7E ED 44 -  -  		neg 		 						; fix up the base
   38 00:4A80 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4A81 -  -  -  -  		;
   40 00:4A81 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4A82 F5 -  -  -  		push 	af
   42 00:4A83 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4A85 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4A86 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4A88 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4A89 18 01 -  -  		jr 		_I32FSMain
   47 00:4A8B -  -  -  -  _I32FSNotSigned:		
   48 00:4A8B E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4A8C -  -  -  -  		;
   50 00:4A8C -  -  -  -  		; 		Main conversion loop.
   51 00:4A8C -  -  -  -  		; 		
   52 00:4A8C -  -  -  -  _I32FSMain:		
   53 00:4A8C 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4A8D FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4A8F 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4A91 D6 20 -  -  		sub 	32
   57 00:4A93 -  -  -  -  _I32FSNotLower:
   58 00:4A93 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4A95 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4A97 FE 3A -  -  		cp 		'9'+1
   61 00:4A99 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4A9B FE 41 -  -  		cp 		'A'
   63 00:4A9D 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4A9F FE 47 -  -  		cp 		'F'+1
   65 00:4AA1 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4AA3 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4AA5 -  -  -  -  _I32FSOkay:
   68 00:4AA5 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4AA7 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4AA8 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4AAA 03 -  -  -  		inc 	bc 							; consume character
   72 00:4AAB D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4AAC F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4AAD CD C7 4A -  		call 	Int32Multiply 				; result *= base
   75 00:4AB0 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4AB1 5F -  -  -  		ld 		e,a
   77 00:4AB2 CD FD 4A -  		call 	Int32Add 					; and add it.
   78 00:4AB5 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4AB6 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4AB8 -  -  -  -  
   81 00:4AB8 -  -  -  -  _I32FSExit:
   82 00:4AB8 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4AB9 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4ABB CC 5D 4B -  		call 	z,Int32Negate
   85 00:4ABE 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4ABF D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4AC0 D9 -  -  -  		exx
   88 00:4AC1 D1 -  -  -  		pop 	de
   89 00:4AC2 D9 -  -  -  		exx
   90 00:4AC3 C1 -  -  -  		pop 	bc
   91 00:4AC4 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4AC6 C9 -  -  -  		ret				
   93 00:4AC7 -  -  -  -  
   94 00:4AC7 -  -  -  -  ; ***************************************************************************************
   95 00:4AC7 -  -  -  -  ;
   96 00:4AC7 -  -  -  -  ;									Changes and Updates
   97 00:4AC7 -  -  -  -  ;
   98 00:4AC7 -  -  -  -  ; ***************************************************************************************
   99 00:4AC7 -  -  -  -  ;
  100 00:4AC7 -  -  -  -  ;		Date			Notes
  101 00:4AC7 -  -  -  -  ;		==== 			=====
  102 00:4AC7 -  -  -  -  ;
  103 00:4AC7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4AC7 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4AC7 -  -  -  -  ; ***************************************************************************************
    2 00:4AC7 -  -  -  -  ; ***************************************************************************************
    3 00:4AC7 -  -  -  -  ;
    4 00:4AC7 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4AC7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AC7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AC7 -  -  -  -  ;		Reviewed :	No
    8 00:4AC7 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4AC7 -  -  -  -  ;
   10 00:4AC7 -  -  -  -  ; ***************************************************************************************
   11 00:4AC7 -  -  -  -  ; ***************************************************************************************
   12 00:4AC7 -  -  -  -  
   13 00:4AC7 -  -  -  -  Int32Multiply:
   14 00:4AC7 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4AC8 D5 -  -  -  		push 	de
   16 00:4AC9 44 -  -  -  		ld 		b,h
   17 00:4ACA 4D -  -  -  		ld 		c,l
   18 00:4ACB 21 00 00 -  		ld 		hl,$0000
   19 00:4ACE -  -  -  -  
   20 00:4ACE D9 -  -  -  		exx
   21 00:4ACF C5 -  -  -  		push 	bc
   22 00:4AD0 D5 -  -  -  		push 	de
   23 00:4AD1 44 -  -  -  		ld 		b,h
   24 00:4AD2 4D -  -  -  		ld 		c,l
   25 00:4AD3 21 00 00 -  		ld 		hl,$0000		
   26 00:4AD6 D9 -  -  -  		exx
   27 00:4AD7 -  -  -  -  
   28 00:4AD7 -  -  -  -  _I32MultiplyLoop:
   29 00:4AD7 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4AD9 C4 FD 4A -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4ADC -  -  -  -  		;
   32 00:4ADC D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4ADD CB 38 -  -  		srl 	b
   34 00:4ADF CB 19 -  -  		rr 		c
   35 00:4AE1 D9 -  -  -  		exx
   36 00:4AE2 CB 18 -  -  		rr 		b
   37 00:4AE4 CB 19 -  -  		rr 		c
   38 00:4AE6 -  -  -  -  		;
   39 00:4AE6 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4AE8 CB 12 -  -  		rl 		d
   41 00:4AEA D9 -  -  -  		exx
   42 00:4AEB CB 13 -  -  		rl 		e
   43 00:4AED CB 12 -  -  		rl 		d
   44 00:4AEF -  -  -  -  
   45 00:4AEF 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4AF0 B1 -  -  -  		or 		c
   47 00:4AF1 D9 -  -  -  		exx
   48 00:4AF2 B0 -  -  -  		or 		b
   49 00:4AF3 B1 -  -  -  		or 		c
   50 00:4AF4 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4AF6 -  -  -  -  
   52 00:4AF6 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4AF7 D1 -  -  -  		pop 	de
   54 00:4AF8 C1 -  -  -  		pop 	bc
   55 00:4AF9 D9 -  -  -  		exx
   56 00:4AFA D1 -  -  -  		pop 	de
   57 00:4AFB C1 -  -  -  		pop 	bc
   58 00:4AFC C9 -  -  -  		ret
   59 00:4AFD -  -  -  -  
   60 00:4AFD -  -  -  -  ; ***************************************************************************************
   61 00:4AFD -  -  -  -  ;
   62 00:4AFD -  -  -  -  ;									Changes and Updates
   63 00:4AFD -  -  -  -  ;
   64 00:4AFD -  -  -  -  ; ***************************************************************************************
   65 00:4AFD -  -  -  -  ;
   66 00:4AFD -  -  -  -  ;		Date			Notes
   67 00:4AFD -  -  -  -  ;		==== 			=====
   68 00:4AFD -  -  -  -  ;
   69 00:4AFD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4AFD -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4AFD -  -  -  -  ; ***************************************************************************************
    2 00:4AFD -  -  -  -  ; ***************************************************************************************
    3 00:4AFD -  -  -  -  ;
    4 00:4AFD -  -  -  -  ;		Name : 		isimple.asm
    5 00:4AFD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AFD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AFD -  -  -  -  ;		Reviewed :	No
    8 00:4AFD -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4AFD -  -  -  -  ;
   10 00:4AFD -  -  -  -  ; ***************************************************************************************
   11 00:4AFD -  -  -  -  ; ***************************************************************************************
   12 00:4AFD -  -  -  -  
   13 00:4AFD -  -  -  -  ; ***************************************************************************************
   14 00:4AFD -  -  -  -  ;
   15 00:4AFD -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4AFD -  -  -  -  ;
   17 00:4AFD -  -  -  -  ; ***************************************************************************************
   18 00:4AFD -  -  -  -  
   19 00:4AFD -  -  -  -  Int32Add:
   20 00:4AFD 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4AFE D9 -  -  -  		exx
   22 00:4AFF ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4B01 D9 -  -  -  		exx
   24 00:4B02 C9 -  -  -  		ret
   25 00:4B03 -  -  -  -  
   26 00:4B03 -  -  -  -  ; ***************************************************************************************
   27 00:4B03 -  -  -  -  ;
   28 00:4B03 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4B03 -  -  -  -  ;
   30 00:4B03 -  -  -  -  ; ***************************************************************************************
   31 00:4B03 -  -  -  -  
   32 00:4B03 -  -  -  -  Int32Subtract:
   33 00:4B03 AF -  -  -  		xor 	a 							; clear carry
   34 00:4B04 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4B06 D9 -  -  -  		exx
   36 00:4B07 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4B09 D9 -  -  -  		exx
   38 00:4B0A C9 -  -  -  		ret
   39 00:4B0B -  -  -  -  
   40 00:4B0B -  -  -  -  ; ***************************************************************************************
   41 00:4B0B -  -  -  -  ;
   42 00:4B0B -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4B0B -  -  -  -  ;
   44 00:4B0B -  -  -  -  ; ***************************************************************************************
   45 00:4B0B -  -  -  -  
   46 00:4B0B -  -  -  -  Int32And:
   47 00:4B0B D9 -  -  -  		exx
   48 00:4B0C CD 10 4B -  		call 	_I32AndHLDE
   49 00:4B0F D9 -  -  -  		exx
   50 00:4B10 -  -  -  -  _I32AndHLDE:		
   51 00:4B10 7C -  -  -  		ld 		a,h
   52 00:4B11 A2 -  -  -  		and 	d
   53 00:4B12 67 -  -  -  		ld 		h,a
   54 00:4B13 7D -  -  -  		ld 		a,l
   55 00:4B14 A3 -  -  -  		and 	e
   56 00:4B15 6F -  -  -  		ld 		l,a
   57 00:4B16 C9 -  -  -  		ret
   58 00:4B17 -  -  -  -  
   59 00:4B17 -  -  -  -  ; ***************************************************************************************
   60 00:4B17 -  -  -  -  ;
   61 00:4B17 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4B17 -  -  -  -  ;
   63 00:4B17 -  -  -  -  ; ***************************************************************************************
   64 00:4B17 -  -  -  -  
   65 00:4B17 -  -  -  -  Int32Or:
   66 00:4B17 D9 -  -  -  		exx
   67 00:4B18 CD 1C 4B -  		call 	_I32OrHLDE
   68 00:4B1B D9 -  -  -  		exx
   69 00:4B1C -  -  -  -  _I32OrHLDE:		
   70 00:4B1C 7C -  -  -  		ld 		a,h
   71 00:4B1D B2 -  -  -  		or 		d
   72 00:4B1E 67 -  -  -  		ld 		h,a
   73 00:4B1F 7D -  -  -  		ld 		a,l
   74 00:4B20 B3 -  -  -  		or 		e
   75 00:4B21 6F -  -  -  		ld 		l,a
   76 00:4B22 C9 -  -  -  		ret
   77 00:4B23 -  -  -  -  
   78 00:4B23 -  -  -  -  ; ***************************************************************************************
   79 00:4B23 -  -  -  -  ;
   80 00:4B23 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4B23 -  -  -  -  ;
   82 00:4B23 -  -  -  -  ; ***************************************************************************************
   83 00:4B23 -  -  -  -  
   84 00:4B23 -  -  -  -  Int32Xor:
   85 00:4B23 D9 -  -  -  		exx
   86 00:4B24 CD 28 4B -  		call 	_I32XorHLDE
   87 00:4B27 D9 -  -  -  		exx
   88 00:4B28 -  -  -  -  _I32XorHLDE:		
   89 00:4B28 7C -  -  -  		ld 		a,h
   90 00:4B29 AA -  -  -  		xor 	d
   91 00:4B2A 67 -  -  -  		ld 		h,a
   92 00:4B2B 7D -  -  -  		ld 		a,l
   93 00:4B2C AB -  -  -  		xor 	e
   94 00:4B2D 6F -  -  -  		ld 		l,a
   95 00:4B2E C9 -  -  -  		ret
   96 00:4B2F -  -  -  -  
   97 00:4B2F -  -  -  -  ; ***************************************************************************************
   98 00:4B2F -  -  -  -  ;
   99 00:4B2F -  -  -  -  ;								 Check if HL'HL zero
  100 00:4B2F -  -  -  -  ;
  101 00:4B2F -  -  -  -  ; ***************************************************************************************
  102 00:4B2F -  -  -  -  
  103 00:4B2F -  -  -  -  Int32Zero:
  104 00:4B2F D9 -  -  -  		exx
  105 00:4B30 7D -  -  -  		ld 		a,l
  106 00:4B31 B4 -  -  -  		or 		h
  107 00:4B32 D9 -  -  -  		exx
  108 00:4B33 B5 -  -  -  		or 		l
  109 00:4B34 B4 -  -  -  		or 		h
  110 00:4B35 C9 -  -  -  		ret
  111 00:4B36 -  -  -  -  
  112 00:4B36 -  -  -  -  ; ***************************************************************************************
  113 00:4B36 -  -  -  -  ;
  114 00:4B36 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4B36 -  -  -  -  ;
  116 00:4B36 -  -  -  -  ; ***************************************************************************************
  117 00:4B36 -  -  -  -  
  118 00:4B36 -  -  -  -  Int32Compare:
  119 00:4B36 E5 -  -  -  		push 	hl 							; save HL
  120 00:4B37 AF -  -  -  		xor 	a 							; clear carry
  121 00:4B38 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4B3A D9 -  -  -  		exx
  123 00:4B3B E5 -  -  -  		push 	hl 							; save HL'
  124 00:4B3C ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4B3E -  -  -  -  		;
  126 00:4B3E 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4B3F E2 46 4B -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4B42 78 -  -  -  		ld 		a,b
  129 00:4B43 EE 80 -  -  		xor 	$80
  130 00:4B45 47 -  -  -  		ld 		b,a
  131 00:4B46 -  -  -  -  _I32CNoOverflow:
  132 00:4B46 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4B47 B5 -  -  -  		or 		l
  134 00:4B48 D9 -  -  -  		exx 
  135 00:4B49 B4 -  -  -  		or 		h
  136 00:4B4A B5 -  -  -  		or 		l
  137 00:4B4B 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4B4D -  -  -  -  		;
  139 00:4B4D D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4B4E CB 78 -  -  		bit 	7,b
  141 00:4B50 D9 -  -  -  		exx
  142 00:4B51 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4B53 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4B55 3E FF -  -  		ld 		a,$FF
  145 00:4B57 -  -  -  -  _I32NotPos:
  146 00:4B57 D9 -  -  -  		exx
  147 00:4B58 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4B59 D9 -  -  -  		exx
  149 00:4B5A E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4B5B B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4B5C C9 -  -  -  		ret
  152 00:4B5D -  -  -  -  
  153 00:4B5D -  -  -  -  ; ***************************************************************************************
  154 00:4B5D -  -  -  -  ;
  155 00:4B5D -  -  -  -  ;										Negate HL'HL
  156 00:4B5D -  -  -  -  ;
  157 00:4B5D -  -  -  -  ; ***************************************************************************************
  158 00:4B5D -  -  -  -  
  159 00:4B5D -  -  -  -  Int32Negate:
  160 00:4B5D AF -  -  -  		xor 	a
  161 00:4B5E CD 67 4B -  		call 	_I32NSubtract
  162 00:4B61 D9 -  -  -  		exx
  163 00:4B62 CD 67 4B -  		call 	_I32NSubtract
  164 00:4B65 D9 -  -  -  		exx
  165 00:4B66 C9 -  -  -  		ret
  166 00:4B67 -  -  -  -  _I32NSubtract:
  167 00:4B67 D5 -  -  -  		push 	de
  168 00:4B68 EB -  -  -  		ex 		de,hl
  169 00:4B69 21 00 00 -  		ld 		hl,$0000
  170 00:4B6C ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4B6E D1 -  -  -  		pop 	de
  172 00:4B6F C9 -  -  -  		ret
  173 00:4B70 -  -  -  -  		
  174 00:4B70 -  -  -  -  ; ***************************************************************************************
  175 00:4B70 -  -  -  -  ;
  176 00:4B70 -  -  -  -  ;									Changes and Updates
  177 00:4B70 -  -  -  -  ;
  178 00:4B70 -  -  -  -  ; ***************************************************************************************
  179 00:4B70 -  -  -  -  ;
  180 00:4B70 -  -  -  -  ;		Date			Notes
  181 00:4B70 -  -  -  -  ;		==== 			=====
  182 00:4B70 -  -  -  -  ;
  183 00:4B70 -  -  -  -  ; ***************************************************************************************
  184 00:4B70 -  -  -  -  		
Listing for file "_build.asm"
   64 00:4B70 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4B70 -  -  -  -  ; ***************************************************************************************
    2 00:4B70 -  -  -  -  ; ***************************************************************************************
    3 00:4B70 -  -  -  -  ;
    4 00:4B70 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4B70 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B70 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B70 -  -  -  -  ;		Reviewed :	No
    8 00:4B70 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4B70 -  -  -  -  ;
   10 00:4B70 -  -  -  -  ; ***************************************************************************************
   11 00:4B70 -  -  -  -  ;
   12 00:4B70 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4B70 -  -  -  -  ;
   14 00:4B70 -  -  -  -  ; ***************************************************************************************
   15 00:4B70 -  -  -  -  
   16 00:4B70 -  -  -  -  Int32ToString:
   17 00:4B70 C5 -  -  -  		push 	bc 							; save string start
   18 00:4B71 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4B72 E5 -  -  -  		push 	hl
   20 00:4B73 11 00 00 -  		ld	 	de,$0000
   21 00:4B76 D9 -  -  -  		exx
   22 00:4B77 D5 -  -  -  		push 	de
   23 00:4B78 E5 -  -  -  		push 	hl
   24 00:4B79 11 00 00 -  		ld 		de,$000
   25 00:4B7C D9 -  -  -  		exx
   26 00:4B7D 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4B7E -  -  -  -  		;
   28 00:4B7E CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4B80 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4B82 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4B84 5F -  -  -  		ld 		e,a
   32 00:4B85 -  -  -  -  		;
   33 00:4B85 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4B86 CB 7C -  -  		bit 	7,h
   35 00:4B88 D9 -  -  -  		exx
   36 00:4B89 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4B8B -  -  -  -  		;
   38 00:4B8B CD 5D 4B -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4B8E -  -  -  -  		;
   40 00:4B8E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4B90 02 -  -  -  		ld 		(bc),a
   42 00:4B91 03 -  -  -  		inc 	bc
   43 00:4B92 -  -  -  -  _I32TSNotNegative:	
   44 00:4B92 CD A0 4B -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4B95 -  -  -  -  _I32TSExit:
   46 00:4B95 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4B97 02 -  -  -  		ld 		(bc),a 
   48 00:4B98 -  -  -  -  
   49 00:4B98 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4B99 E1 -  -  -  		pop 	hl
   51 00:4B9A D1 -  -  -  		pop 	de
   52 00:4B9B D9 -  -  -  		exx
   53 00:4B9C E1 -  -  -  		pop 	hl
   54 00:4B9D D1 -  -  -  		pop 	de
   55 00:4B9E C1 -  -  -  		pop 	bc
   56 00:4B9F C9 -  -  -  		ret
   57 00:4BA0 -  -  -  -  
   58 00:4BA0 -  -  -  -  _I32RecursiveConvert:
   59 00:4BA0 CD D4 49 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4BA3 F5 -  -  -  		push 	af 							; save remainder
   61 00:4BA4 CD 2F 4B -  		call 	Int32Zero		 			; check result is non zero
   62 00:4BA7 C4 A0 4B -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4BAA F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4BAB FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4BAD 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4BAF C6 07 -  -  		add 	a,7
   67 00:4BB1 -  -  -  -  _I32NotHex:
   68 00:4BB1 C6 30 -  -  		add 	a,48
   69 00:4BB3 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4BB4 03 -  -  -  		inc 	bc
   71 00:4BB5 C9 -  -  -  		ret		
   72 00:4BB6 -  -  -  -  
   73 00:4BB6 -  -  -  -  ; ***************************************************************************************
   74 00:4BB6 -  -  -  -  ;
   75 00:4BB6 -  -  -  -  ;									Changes and Updates
   76 00:4BB6 -  -  -  -  ;
   77 00:4BB6 -  -  -  -  ; ***************************************************************************************
   78 00:4BB6 -  -  -  -  ;
   79 00:4BB6 -  -  -  -  ;		Date			Notes
   80 00:4BB6 -  -  -  -  ;		==== 			=====
   81 00:4BB6 -  -  -  -  ;
   82 00:4BB6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4BB6 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4BB6 -  -  -  -  ; ***************************************************************************************
    2 00:4BB6 -  -  -  -  ; ***************************************************************************************
    3 00:4BB6 -  -  -  -  ;
    4 00:4BB6 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4BB6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BB6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BB6 -  -  -  -  ;		Reviewed :	No
    8 00:4BB6 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4BB6 -  -  -  -  ;
   10 00:4BB6 -  -  -  -  ; ***************************************************************************************
   11 00:4BB6 -  -  -  -  ; ***************************************************************************************
   12 00:4BB6 -  -  -  -  
   13 00:4BB6 -  -  -  -  #ifdef AQUARIUS
   14 00:4BB6 -  -  -  -  
   15 00:4BB6 -  -  -  -  ; ***************************************************************************************
   16 00:4BB6 -  -  -  -  ;
   17 00:4BB6 -  -  -  -  ;								Initialise system stuff
   18 00:4BB6 -  -  -  -  ;
   19 00:4BB6 -  -  -  -  ; ***************************************************************************************
   20 00:4BB6 -  -  -  -  
   21 00:4BB6 -  -  -  -  SYSInitialise:
   22 00:4BB6 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4BB8 CD BE 4B -  	call 	SYSPrintChar
   24 00:4BBB C9 -  -  -  	ret
   25 00:4BBC -  -  -  -  
   26 00:4BBC -  -  -  -  ; ***************************************************************************************
   27 00:4BBC -  -  -  -  ;
   28 00:4BBC -  -  -  -  ;								Terminate system stuff
   29 00:4BBC -  -  -  -  ;
   30 00:4BBC -  -  -  -  ; ***************************************************************************************
   31 00:4BBC -  -  -  -  
   32 00:4BBC -  -  -  -  SYSTerminate:
   33 00:4BBC 18 FE -  -  	jr 		SYSTerminate
   34 00:4BBE -  -  -  -  
   35 00:4BBE -  -  -  -  ; ***************************************************************************************
   36 00:4BBE -  -  -  -  ;
   37 00:4BBE -  -  -  -  ;								Print A character
   38 00:4BBE -  -  -  -  ;
   39 00:4BBE -  -  -  -  ; ***************************************************************************************
   40 00:4BBE -  -  -  -  
   41 00:4BBE -  -  -  -  SYSPrintChar:
   42 00:4BBE F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4BBF C5 -  -  -  	push 	bc
   44 00:4BC0 D5 -  -  -  	push 	de
   45 00:4BC1 E5 -  -  -  	push 	hl
   46 00:4BC2 DD E5 -  -  	push 	ix
   47 00:4BC4 FD E5 -  -  	push 	iy
   48 00:4BC6 D9 -  -  -  	exx
   49 00:4BC7 C5 -  -  -  	push 	bc
   50 00:4BC8 D5 -  -  -  	push 	de
   51 00:4BC9 E5 -  -  -  	push 	hl
   52 00:4BCA CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4BCD E1 -  -  -  	pop 	hl
   54 00:4BCE D1 -  -  -  	pop 	de
   55 00:4BCF C1 -  -  -  	pop 	bc
   56 00:4BD0 D9 -  -  -  	exx
   57 00:4BD1 FD E1 -  -  	pop 	iy
   58 00:4BD3 DD E1 -  -  	pop 	ix
   59 00:4BD5 E1 -  -  -  	pop 	hl
   60 00:4BD6 D1 -  -  -  	pop 	de
   61 00:4BD7 C1 -  -  -  	pop 	bc
   62 00:4BD8 F1 -  -  -  	pop 	af
   63 00:4BD9 C9 -  -  -  	ret		
   64 00:4BDA -  -  -  -  
   65 00:4BDA -  -  -  -  ; ***************************************************************************************
   66 00:4BDA -  -  -  -  ;
   67 00:4BDA -  -  -  -  ;									Print Newline
   68 00:4BDA -  -  -  -  ;
   69 00:4BDA -  -  -  -  ; ***************************************************************************************
   70 00:4BDA -  -  -  -  
   71 00:4BDA -  -  -  -  SYSPrintCRLF:
   72 00:4BDA F5 -  -  -  	push 	af
   73 00:4BDB 3E 0D -  -  	ld 		a,13
   74 00:4BDD CD BE 4B -  	call 	SYSPrintChar
   75 00:4BE0 3E 0A -  -  	ld 		a,10
   76 00:4BE2 CD BE 4B -  	call 	SYSPrintChar
   77 00:4BE5 F1 -  -  -  	pop 	af
   78 00:4BE6 C9 -  -  -  	ret
   79 00:4BE7 -  -  -  -  
   80 00:4BE7 -  -  -  -  ; ***************************************************************************************
   81 00:4BE7 -  -  -  -  ;
   82 00:4BE7 -  -  -  -  ;									Get time into HL'HL
   83 00:4BE7 -  -  -  -  ;
   84 00:4BE7 -  -  -  -  ; ***************************************************************************************
   85 00:4BE7 -  -  -  -  
   86 00:4BE7 -  -  -  -  SYSGetTimer:
   87 00:4BE7 DB 00 -  -   	in 		a,($00)
   88 00:4BE9 6F -  -  -   	ld 		l,a
   89 00:4BEA DB 01 -  -   	in 		a,($01)
   90 00:4BEC 67 -  -  -   	ld 		h,a
   91 00:4BED D9 -  -  -   	exx
   92 00:4BEE DB 02 -  -   	in 		a,($02)
   93 00:4BF0 6F -  -  -   	ld 		l,a
   94 00:4BF1 DB 03 -  -   	in 		a,($03)
   95 00:4BF3 67 -  -  -   	ld 		h,a
   96 00:4BF4 D9 -  -  -   	exx
   97 00:4BF5 C9 -  -  -  	ret 	
   98 00:4BF6 -  -  -  -  	
   99 00:4BF6 -  -  -  -  #endif
  100 00:4BF6 -  -  -  -  
  101 00:4BF6 -  -  -  -  ; ***************************************************************************************
  102 00:4BF6 -  -  -  -  ;
  103 00:4BF6 -  -  -  -  ;									Changes and Updates
  104 00:4BF6 -  -  -  -  ;
  105 00:4BF6 -  -  -  -  ; ***************************************************************************************
  106 00:4BF6 -  -  -  -  ;
  107 00:4BF6 -  -  -  -  ;		Date			Notes
  108 00:4BF6 -  -  -  -  ;		==== 			=====
  109 00:4BF6 -  -  -  -  ;
  110 00:4BF6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4BF6 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4BF6 -  -  -  -  ; ***************************************************************************************
    2 00:4BF6 -  -  -  -  ; ***************************************************************************************
    3 00:4BF6 -  -  -  -  ;
    4 00:4BF6 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4BF6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BF6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BF6 -  -  -  -  ;		Reviewed :	No
    8 00:4BF6 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4BF6 -  -  -  -  ;
   10 00:4BF6 -  -  -  -  ; ***************************************************************************************
   11 00:4BF6 -  -  -  -  ; ***************************************************************************************
   12 00:4BF6 -  -  -  -  
   13 00:4BF6 -  -  -  -  #ifdef CLEANEZ80
   14 00:4BF6             
   15 00:4BF6             ; ***************************************************************************************
   16 00:4BF6             ;
   17 00:4BF6             ;								Initialise system stuff
   18 00:4BF6             ;
   19 00:4BF6             ; ***************************************************************************************
   20 00:4BF6             
   21 00:4BF6             SYSInitialise:
   22 00:4BF6             	ret
   23 00:4BF6             
   24 00:4BF6             ; ***************************************************************************************
   25 00:4BF6             ;
   26 00:4BF6             ;								Terminate system stuff
   27 00:4BF6             ;
   28 00:4BF6             ; ***************************************************************************************
   29 00:4BF6             
   30 00:4BF6             SYSTerminate:
   31 00:4BF6             	ret
   32 00:4BF6             
   33 00:4BF6             ; ***************************************************************************************
   34 00:4BF6             ;
   35 00:4BF6             ;								Print A character
   36 00:4BF6             ;
   37 00:4BF6             ; ***************************************************************************************
   38 00:4BF6             
   39 00:4BF6             SYSPrintChar:
   40 00:4BF6             	ret		
   41 00:4BF6             
   42 00:4BF6             ; ***************************************************************************************
   43 00:4BF6             ;
   44 00:4BF6             ;									Print Newline
   45 00:4BF6             ;
   46 00:4BF6             ; ***************************************************************************************
   47 00:4BF6             
   48 00:4BF6             SYSPrintCRLF:
   49 00:4BF6             	ret
   50 00:4BF6             
   51 00:4BF6             ; ***************************************************************************************
   52 00:4BF6             ;
   53 00:4BF6             ;									Get time into HL'HL
   54 00:4BF6             ;
   55 00:4BF6             ; ***************************************************************************************
   56 00:4BF6             
   57 00:4BF6             SYSGetTimer:
   58 00:4BF6             	ret
   59 00:4BF6             
   60 00:4BF6             #endif
   61 00:4BF6 -  -  -  -  
   62 00:4BF6 -  -  -  -  ; ***************************************************************************************
   63 00:4BF6 -  -  -  -  ;
   64 00:4BF6 -  -  -  -  ;									Changes and Updates
   65 00:4BF6 -  -  -  -  ;
   66 00:4BF6 -  -  -  -  ; ***************************************************************************************
   67 00:4BF6 -  -  -  -  ;
   68 00:4BF6 -  -  -  -  ;		Date			Notes
   69 00:4BF6 -  -  -  -  ;		==== 			=====
   70 00:4BF6 -  -  -  -  ;
   71 00:4BF6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4BF6 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4BF6 -  -  -  -  ; ***************************************************************************************
    2 00:4BF6 -  -  -  -  ; ***************************************************************************************
    3 00:4BF6 -  -  -  -  ;
    4 00:4BF6 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4BF6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BF6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BF6 -  -  -  -  ;		Reviewed :	No
    8 00:4BF6 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4BF6 -  -  -  -  ;
   10 00:4BF6 -  -  -  -  ; ***************************************************************************************
   11 00:4BF6 -  -  -  -  ; ***************************************************************************************
   12 00:4BF6 -  -  -  -  
   13 00:4BF6 -  -  -  -  #ifdef TI84
   14 00:4BF6             
   15 00:4BF6             ; ***************************************************************************************
   16 00:4BF6             ;
   17 00:4BF6             ;								Initialise system stuff
   18 00:4BF6             ;
   19 00:4BF6             ; ***************************************************************************************
   20 00:4BF6             
   21 00:4BF6             SYSInitialise:
   22 00:4BF6             	di
   23 00:4BF6             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4BF6             	ld 		(_IYTemp84),iy
   25 00:4BF6             	ret
   26 00:4BF6             
   27 00:4BF6             ; ***************************************************************************************
   28 00:4BF6             ;
   29 00:4BF6             ;								Terminate system stuff
   30 00:4BF6             ;
   31 00:4BF6             ; ***************************************************************************************
   32 00:4BF6             
   33 00:4BF6             SYSTerminate:
   34 00:4BF6             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4BF6             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4BF6             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4BF6             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4BF6             	ei
   39 00:4BF6             	ret 										; and exit.
   40 00:4BF6             
   41 00:4BF6             _StackTemp84:									; temp var for TI84 only.
   42 00:4BF6             	.dw 	0,0
   43 00:4BF6             _IYTemp84:
   44 00:4BF6             	.dw 	0,0		
   45 00:4BF6             
   46 00:4BF6             ; ***************************************************************************************
   47 00:4BF6             ;
   48 00:4BF6             ;								Print A character
   49 00:4BF6             ;
   50 00:4BF6             ; ***************************************************************************************
   51 00:4BF6             
   52 00:4BF6             SYSPrintChar:
   53 00:4BF6             	push 	af 									; we stack everything including alt registers
   54 00:4BF6             	push 	bc
   55 00:4BF6             	push 	de
   56 00:4BF6             	push 	hl
   57 00:4BF6             	push 	ix
   58 00:4BF6             	push 	iy
   59 00:4BF6             	exx
   60 00:4BF6             	push 	bc
   61 00:4BF6             	push 	de
   62 00:4BF6             	push 	hl
   63 00:4BF6             
   64 00:4BF6             	ld 		iy,(_IYTemp84)
   65 00:4BF6             	call 	_PutC 								; print A as character
   66 00:4BF6             	di
   67 00:4BF6             	ld 		(_IYTemp84),iy
   68 00:4BF6             
   69 00:4BF6             	pop 	hl
   70 00:4BF6             	pop 	de
   71 00:4BF6             	pop 	bc
   72 00:4BF6             	exx
   73 00:4BF6             	pop 	iy
   74 00:4BF6             	pop 	ix
   75 00:4BF6             	pop 	hl
   76 00:4BF6             	pop 	de
   77 00:4BF6             	pop 	bc
   78 00:4BF6             	pop 	af
   79 00:4BF6             	ret		
   80 00:4BF6             
   81 00:4BF6             ; ***************************************************************************************
   82 00:4BF6             ;
   83 00:4BF6             ;									Print Newline
   84 00:4BF6             ;
   85 00:4BF6             ; ***************************************************************************************
   86 00:4BF6             
   87 00:4BF6             SYSPrintCRLF:
   88 00:4BF6             	push 	af 									; we stack everything including alt registers
   89 00:4BF6             	push 	bc
   90 00:4BF6             	push 	de
   91 00:4BF6             	push 	hl
   92 00:4BF6             	push 	ix
   93 00:4BF6             	push 	iy
   94 00:4BF6             	exx
   95 00:4BF6             	push 	bc
   96 00:4BF6             	push 	de
   97 00:4BF6             	push 	hl
   98 00:4BF6             
   99 00:4BF6             	ld 		iy,(_IYTemp84)
  100 00:4BF6             	call 	_newline
  101 00:4BF6             	di
  102 00:4BF6             	ld 		(_IYTemp84),iy
  103 00:4BF6             
  104 00:4BF6             	pop 	hl
  105 00:4BF6             	pop 	de
  106 00:4BF6             	pop 	bc
  107 00:4BF6             	exx
  108 00:4BF6             	pop 	iy
  109 00:4BF6             	pop 	ix
  110 00:4BF6             	pop 	hl
  111 00:4BF6             	pop 	de
  112 00:4BF6             	pop 	bc
  113 00:4BF6             	pop 	af
  114 00:4BF6             	ret
  115 00:4BF6             
  116 00:4BF6             ; ***************************************************************************************
  117 00:4BF6             ;
  118 00:4BF6             ;									Get time into HL'HL
  119 00:4BF6             ;
  120 00:4BF6             ; ***************************************************************************************
  121 00:4BF6             
  122 00:4BF6             SYSGetTimer:
  123 00:4BF6             	ld 		hl,$1234
  124 00:4BF6             	exx
  125 00:4BF6             	ld 		hl,$5678
  126 00:4BF6             	exx
  127 00:4BF6             	ret
  128 00:4BF6             
  129 00:4BF6             #endif
  130 00:4BF6 -  -  -  -  
  131 00:4BF6 -  -  -  -  ; ***************************************************************************************
  132 00:4BF6 -  -  -  -  ;
  133 00:4BF6 -  -  -  -  ;									Changes and Updates
  134 00:4BF6 -  -  -  -  ;
  135 00:4BF6 -  -  -  -  ; ***************************************************************************************
  136 00:4BF6 -  -  -  -  ;
  137 00:4BF6 -  -  -  -  ;		Date			Notes
  138 00:4BF6 -  -  -  -  ;		==== 			=====
  139 00:4BF6 -  -  -  -  ;
  140 00:4BF6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4BF6 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4BF6 -  -  -  -  ; ***************************************************************************************
    2 00:4BF6 -  -  -  -  ; ***************************************************************************************
    3 00:4BF6 -  -  -  -  ;
    4 00:4BF6 -  -  -  -  ;		Name : 		basic.asm
    5 00:4BF6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BF6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BF6 -  -  -  -  ;		Reviewed :	No
    8 00:4BF6 -  -  -  -  ;		Purpose :	Main program.
    9 00:4BF6 -  -  -  -  ;
   10 00:4BF6 -  -  -  -  ; ***************************************************************************************
   11 00:4BF6 -  -  -  -  ; ***************************************************************************************
   12 00:4BF6 -  -  -  -  
   13 00:4BF6 00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 00:4C00 -  -  -  -  TestInstance:
   15 00:4C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4C00 -  -  -  -  ;
    2 00:4C00 -  -  -  -  ;	This code automatically generated.
    3 00:4C00 -  -  -  -  ;
    4 00:4C00 -  -  -  -  TestProgram:
    5 00:4C00 22 01 00 BB 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 BB 3F 0C 
              53 65 65 64 
              20 3D 20 32 
              34 30 36 33 
              0D 80 0C 03 
              00 01 1D 1D 
              16 8F 50 79 
              60 80 0F 04 
              00 13 1C 14 
              18 07 14 8F 
              8A 42 60 55 
              80 0B 05 00 
              08 19 8F 8A 
              58 4A 72 80 
              0D 06 00 13 
              1D 08 20 0C 
              8F 4B 54 77 
              80 0B 07 00 
              13 05 04 8F 
              50 57 7D 80 
              09 08 00 0F 
              8F 52 40 4D 
              80 09 09 00 
              17 8F 57 42 
              4A 80 0A 0A 
              00 00 8F 8A 
              47 4A 5D 80 
              0B 0B 00 03 
              04 0B 8F 50 
              72 7B 80 0A 
              0C 00 19 25 
              8F 45 7E 47 
              80 0B 0D 00 
              01 12 20 8F 
              50 6E 64 80 
              0E 0E 00 0E 
              07 10 06 00 
              14 8F 8A 4E 
              74 80 09 0F 
              00 0A 8F 54 
              7D 5B 80 09 
              10 00 0B 8F 
              4D 7D 6A 80 
              0C 11 00 0F 
              0E 05 8F 8A 
              49 51 46 80 
              0B 12 00 18 
              06 25 1D 8F 
              7C 4F 80 0B 
              13 00 0F 06 
              8F 8A 55 7A 
              62 80 0A 14 
              00 11 8F 8A 
              55 45 6F 80 
              0E 15 00 0B 
              1C 10 04 08 
              09 8F 4A 58 
              40 80 0C 16 
              00 18 15 0A 
              1E 8F 44 7C 
              60 80 0F 17 
              00 19 0A 21 
              15 1A 10 8F 
              8A 57 73 6B 
              80 0D 18 00 
              0E 0F 1F 13 
              8F 8A 4D 79 
              6F 80 0B 19 
              00 11 08 0C 
              8F 44 75 57 
              80 0B 1A 00 
              03 06 1A 8F 
              41 55 5F 80 
              0D 1B 00 15 
              15 09 1F 16 
              8F 4D 76 76 
              80 0B 1C 00 
              03 0B 8F 8A 
              53 75 74 80 
              0A 1D 00 02 
              8F 8A 49 49 
              52 80 0C 1E 
              00 04 1E 17 
              8F 8A 41 67 
              5E 80 0A 1F 
              00 07 1B 8F 
              50 5E 71 80 
              09 20 00 05 
              8F 4F 6E 7A 
              80 0E 21 00 
              15 05 03 09 
              11 8F 8A 50 
              4B 67 80 0F 
              22 00 03 1B 
              02 09 13 06 
              8F 8A 41 47 
              49 80 09 23 
              00 0D 8F 43 
              69 6C 80 0D 
              24 00 18 25 
              1E 16 8F 8A 
              48 49 46 80 
              0C 25 00 09 
              0D 06 18 8F 
              52 77 5C 80 
              0C 26 00 0E 
              17 16 18 8F 
              4C 4E 7B 80 
              0D 27 00 0F 
              06 13 05 20 
              8F 4B 7C 47 
              80 0C 28 00 
              12 03 0F 1E 
              8F 42 7B 65 
              80 0E 29 00 
              04 1C 0B 0F 
              09 12 8F 4D 
              76 4D 80 0F 
              2A 00 0F 22 
              15 0D 23 0D 
              8F 8A 54 53 
              72 80 0C 2B 
              00 03 06 1A 
              8F 8A 4E 57 
              59 80 0D 2C 
              00 12 03 0F 
              1E 8F 8A 4C 
              71 55 80 0D 
              2D 00 09 0D 
              06 18 8F 8A 
              49 52 60 80 
              0F 2E 00 13 
              1C 14 18 07 
              14 8F 8A 4E 
              57 7F 80 0C 
              2F 00 13 1D 
              08 20 0C 8F 
              6B 4B 80 0F 
              30 00 0B 1C 
              10 04 08 09 
              8F 8A 4F 5C 
              56 80 0F 31 
              00 0E 07 10 
              06 00 14 8F 
              8A 51 4C 66 
              80 0C 32 00 
              04 1E 17 8F 
              8A 53 76 4B 
              80 0D 33 00 
              18 15 0A 1E 
              8F 8A 51 7E 
              58 80 0D 34 
              00 18 15 0A 
              1E 8F 8A 57 
              77 54 80 0F 
              35 00 19 0A 
              21 15 1A 10 
              8F 8A 4E 43 
              7B 80 0D 36 
              00 0F 06 13 
              05 20 8F 58 
              55 5D 80 0D 
              37 00 15 05 
              03 09 11 8F 
              53 5B 62 80 
              0E 38 00 0E 
              07 10 06 00 
              14 8F 47 4C 
              55 80 0C 39 
              00 11 08 0C 
              8F 8A 4E 74 
              57 80 0D 3A 
              00 09 0D 06 
              18 8F 8A 4F 
              44 6F 80 0D 
              3B 00 18 06 
              25 1D 8F 8A 
              56 77 6A 80 
              0D 3C 00 15 
              15 09 1F 16 
              8F 51 62 6E 
              80 0A 3D 00 
              0B 8F 8A 42 
              67 58 80 0C 
              3E 00 0E 17 
              16 18 8F 56 
              79 4E 80 0E 
              3F 00 0F 06 
              13 05 20 8F 
              8A 55 5B 6D 
              80 0B 40 00 
              08 19 8F 8A 
              56 46 49 80 
              0D 41 00 15 
              05 03 09 11 
              8F 56 43 50 
              80 0B 42 00 
              03 04 0B 8F 
              55 7C 59 80 
              0E 43 00 13 
              1C 14 18 07 
              14 8F 41 6F 
              61 80 0A 44 
              00 0F 8F 8A 
              4F 4D 4A 80 
              0C 45 00 11 
              08 0C 8F 8A 
              4C 65 6A 80 
              0E 46 00 0F 
              06 13 05 20 
              8F 8A 47 67 
              6B 80 0B 47 
              00 19 25 8F 
              8A 4C 5C 41 
              80 0F 48 00 
              03 1B 02 09 
              13 06 8F 8A 
              4F 52 69 80 
              0E 49 00 0E 
              07 10 06 00 
              14 8F 50 53 
              59 80 0D 4A 
              00 12 03 0F 
              1E 8F 8A 41 
              4C 47 80 0D 
              4B 00 15 05 
              03 09 11 8F 
              52 41 4F 80 
              0A 4C 00 11 
              8F 8A 55 79 
              7F 80 0E 4D 
              00 13 1C 14 
              18 07 14 8F 
              4D 43 69 80 
              09 4E 00 17 
              8F 55 65 4B 
              80 0F 4F 00 
              03 1B 02 09 
              13 06 8F 8A 
              43 42 61 80 
              0D 50 00 09 
              0D 06 18 8F 
              8A 57 46 70 
              80 0B 51 00 
              19 25 8F 8A 
              4E 44 5E 80 
              0E 52 00 13 
              1D 08 20 0C 
              8F 8A 4E 46 
              78 80 0D 53 
              00 0E 0F 1F 
              13 8F 8A 4E 
              58 5F 80 09 
              54 00 17 8F 
              4E 5F 78 80 
              0B 55 00 08 
              19 8F 8A 42 
              67 49 80 09 
              56 00 02 8F 
              58 59 5A 80 
              0C 57 00 0E 
              17 16 18 8F 
              43 6F 4D 80 
              0C 58 00 11 
              08 0C 8F 8A 
              4C 5B 7B 80 
              0B 59 00 04 
              1E 17 8F 4B 
              45 7D 80 0A 
              5A 00 07 1B 
              8F 4D 56 63 
              80 0A 5B 00 
              17 8F 8A 55 
              66 71 80 0E 
              5C 00 15 15 
              09 1F 16 8F 
              8A 42 5A 6C 
              80 0B 5D 00 
              08 19 8F 8A 
              4F 68 7F 80 
              0D 5E 00 15 
              05 03 09 11 
              8F 8A 45 5F 
              80 0C 5F 00 
              03 04 0B 8F 
              8A 45 71 76 
              80 0A 60 00 
              0D 8F 8A 43 
              7E 76 80 0F 
              61 00 0F 22 
              15 0D 23 0D 
              8F 8A 4E 53 
              7A 80 0C 62 
              00 12 03 0F 
              1E 8F 54 62 
              66 80 09 63 
              00 11 8F 54 
              69 7B 80 0F 
              64 00 04 1C 
              0B 0F 09 12 
              8F 8A 51 72 
              50 80 0B 65 
              00 0F 0E 05 
              8F 51 61 59 
              80 0B 66 00 
              0F 0E 05 8F 
              4D 5F 48 80 
              0C 67 00 01 
              1D 1D 16 8F 
              54 6A 7F 80 
              0D 68 00 0E 
              17 16 18 8F 
              8A 49 7E 4B 
              80 0F 69 00 
              0E 07 10 06 
              00 14 8F 8A 
              47 64 6D 80 
              09 6A 00 0D 
              8F 41 70 58 
              80 0B 6B 00 
              01 12 20 8F 
              41 48 40 80 
              0C 6C 00 18 
              15 0A 1E 8F 
              44 61 5B 80 
              0D 6D 00 18 
              15 0A 1E 8F 
              8A 4F 4A 58 
              80 09 6E 00 
              0D 8F 4E 41 
              41 80 0D 6F 
              00 15 15 09 
              1F 16 8F 44 
              66 69 80 0F 
              70 00 04 1C 
              0B 0F 09 12 
              8F 8A 55 5D 
              71 80 0C 71 
              00 18 15 0A 
              1E 8F 4A 6B 
              4C 80 0C 72 
              00 13 05 04 
              8F 8A 41 6D 
              44 80 0C 73 
              00 0F 0E 05 
              8F 8A 52 6A 
              60 80 0C 74 
              00 0E 17 16 
              18 8F 43 4D 
              62 80 0E 75 
              00 0F 06 13 
              05 20 8F 8A 
              50 53 74 80 
              0C 76 00 01 
              12 20 8F 8A 
              42 6A 59 80 
              0D 77 00 15 
              05 03 09 11 
              8F 4D 79 4F 
              80 0E 78 00 
              15 15 09 1F 
              16 8F 8A 41 
              77 46 80 0B 
              79 00 07 1B 
              8F 8A 42 50 
              5B 80 0A 7A 
              00 0D 8F 8A 
              44 58 7C 80 
              09 7B 00 05 
              8F 43 5A 5F 
              80 0C 7C 00 
              0E 17 16 18 
              8F 4C 43 4E 
              80 0E 7D 00 
              0F 22 15 0D 
              23 0D 8F 46 
              5C 52 80 0B 
              7E 00 01 12 
              20 8F 4B 68 
              5F 80 09 7F 
              00 02 8F 4D 
              76 59 80 0E 
              80 00 03 1B 
              02 09 13 06 
              8F 45 5D 4F 
              80 0E 81 00 
              03 1B 02 09 
              13 06 8F 44 
              6B 69 80 0C 
              82 00 03 04 
              0B 8F 8A 44 
              4E 7A 80 0A 
              83 00 0D 8F 
              8A 55 42 43 
              80 0C 84 00 
              09 0D 06 18 
              8F 54 49 69 
              80 0A 85 00 
              07 1B 8F 48 
              6E 4E 80 09 
              86 00 0A 8F 
              4F 65 4D 80 
              0D 87 00 0E 
              0F 1F 13 8F 
              8A 45 40 70 
              80 0B 88 00 
              03 06 1A 8F 
              57 42 4C 80 
              09 89 00 00 
              8F 50 4F 5D 
              80 0A 8A 00 
              17 8F 8A 4C 
              41 7E 80 0F 
              8B 00 19 0A 
              21 15 1A 10 
              8F 8A 43 6C 
              6D 80 0C 8C 
              00 01 1D 1D 
              16 8F 47 53 
              4A 80 0A 8D 
              00 0F 8F 8A 
              45 4A 50 80 
              0C 8E 00 03 
              06 1A 8F 8A 
              54 43 7B 80 
              0D 8F 00 0E 
              0F 1F 13 8F 
              8A 43 4E 63 
              80 0E 90 00 
              15 05 03 09 
              11 8F 8A 47 
              49 78 80 0F 
              91 00 0E 07 
              10 06 00 14 
              8F 8A 57 68 
              62 80 0D 92 
              00 15 15 09 
              1F 16 8F 51 
              77 46 80 09 
              93 00 17 8F 
              54 68 46 80 
              0C 94 00 03 
              06 1A 8F 8A 
              57 6E 4A 80 
              0A 95 00 08 
              19 8F 46 5F 
              62 80 0D 96 
              00 13 1D 08 
              20 0C 8F 57 
              5B 40 80 09 
              97 00 0B 8F 
              50 6F 66 80 
              0D 98 00 18 
              15 0A 1E 8F 
              8A 49 44 60 
              80 0C 99 00 
              11 08 0C 8F 
              8A 57 73 68 
              80 0B 9A 00 
              07 1B 8F 8A 
              41 62 50 80 
              0C 9B 00 0F 
              0E 05 8F 8A 
              45 56 5C 80 
              0A 9C 00 02 
              8F 8A 53 50 
              6B 80 0D 9D 
              00 01 1D 1D 
              16 8F 8A 54 
              59 65 80 0D 
              9E 00 12 03 
              0F 1E 8F 8A 
              51 6A 4B 80 
              0F 9F 00 0F 
              22 15 0D 23 
              0D 8F 8A 4F 
              43 62 80 0C 
              A0 00 03 04 
              0B 8F 8A 42 
              4E 67 80 0D 
              A1 00 0F 06 
              13 05 20 8F 
              4F 5B 77 80 
              0F A2 00 0B 
              1C 10 04 08 
              09 8F 8A 48 
              54 64 80 0C 
              A3 00 0E 0F 
              1F 13 8F 54 
              7F 7C 80 0A 
              A4 00 03 0B 
              8F 47 54 4B 
              80 0C A5 00 
              12 03 0F 1E 
              8F 4E 6D 7B 
              80 0A A6 00 
              0D 8F 8A 44 
              6C 48 80 0B 
              A7 00 03 04 
              0B 8F 41 5E 
              65 80 0B A8 
              00 12 03 0F 
              1E 8F 68 72 
              80 0E A9 00 
              0E 07 10 06 
              00 14 8F 54 
              7B 67 80 0D 
              AA 00 18 15 
              0A 1E 8F 8A 
              4F 75 43 80 
              0E AB 00 15 
              05 03 09 11 
              8F 8A 45 50 
              59 80 0F AC 
              00 04 1C 0B 
              0F 09 12 8F 
              8A 44 4F 6E 
              80 0A AD 00 
              03 0B 8F 56 
              6D 4B 80 0A 
              AE 00 05 8F 
              8A 46 56 6B 
              80 0B AF 00 
              03 0B 8F 8A 
              49 78 7B 80 
              0C B0 00 0F 
              0E 05 8F 8A 
              4A 72 6C 80 
              0D B1 00 18 
              15 0A 1E 8F 
              8A 48 4F 67 
              80 0E B2 00 
              0F 22 15 0D 
              23 0D 8F 42 
              6C 4B 80 0B 
              B3 00 07 1B 
              8F 8A 53 46 
              43 80 0F B4 
              00 0B 1C 10 
              04 08 09 8F 
              8A 4D 7F 53 
              80 0E B5 00 
              04 1C 0B 0F 
              09 12 8F 45 
              66 64 80 0D 
              B6 00 01 1D 
              1D 16 8F 8A 
              45 47 5B 80 
              0A B7 00 0F 
              06 8F 51 7A 
              57 80 0C B8 
              00 18 15 0A 
              1E 8F 48 56 
              43 80 0E B9 
              00 03 1B 02 
              09 13 06 8F 
              4D 4A 72 80 
              0B BA 00 11 
              08 0C 8F 41 
              4B 46 80 0B 
              BB 00 07 1B 
              8F 8A 4B 77 
              76 80 0A BC 
              00 0D 8F 8A 
              44 65 6F 80 
              0D BD 00 18 
              25 1E 16 8F 
              8A 4F 63 74 
              80 0F BE 00 
              13 1C 14 18 
              07 14 8F 8A 
              57 6E 75 80 
              0C BF 00 13 
              05 04 8F 8A 
              48 69 7E 80 
              0A C0 00 0F 
              06 8F 54 4D 
              58 80 0D C1 
              00 18 06 25 
              1D 8F 8A 58 
              50 5B 80 0A 
              C2 00 02 8F 
              8A 4B 69 4C 
              80 0F C3 00 
              04 1C 0B 0F 
              09 12 8F 8A 
              45 46 6D 80 
              0A C4 00 02 
              8F 8A 43 64 
              42 80 0C C5 
              00 03 06 1A 
              8F 8A 4C 6D 
              67 80 0B C6 
              00 04 1E 17 
              8F 4F 51 77 
              80 0E C7 00 
              15 05 03 09 
              11 8F 8A 43 
              52 66 80 0F 
              C8 00 04 1C 
              0B 0F 09 12 
              8F 8A 51 7A 
              45 80 09 C9 
              00 05 8F 55 
              50 64 80 0D 
              CA 00 0F 06 
              13 05 20 8F 
              43 7F 7A 80 
              0A CB 00 05 
              8F 8A 54 5B 
              4A 80 0B CC 
              00 19 25 8F 
              8A 46 7A 65 
              80 0B CD 00 
              08 19 8F 8A 
              43 5E 56 80 
              0B CE 00 0F 
              0E 05 8F 4C 
              5A 54 80 0C 
              CF 00 01 12 
              20 8F 8A 4B 
              65 47 80 0C 
              D0 00 09 0D 
              06 18 8F 43 
              78 6A 80 0A 
              D1 00 0B 8F 
              8A 51 74 52 
              80 0D D2 00 
              0F 06 13 05 
              20 8F 44 54 
              52 80 0B D3 
              00 04 1E 17 
              8F 8A 45 4E 
              80 0A D4 00 
              0A 8F 8A 46 
              4A 7F 80 0A 
              D5 00 05 8F 
              8A 56 47 74 
              80 0B D6 00 
              19 25 8F 8A 
              45 78 6B 80 
              0E D7 00 04 
              1C 0B 0F 09 
              12 8F 43 79 
              56 80 0A D8 
              00 0B 8F 8A 
              56 51 6C 80 
              0D D9 00 18 
              06 25 1D 8F 
              8A 54 6D 7A 
              80 0A DA 00 
              07 1B 8F 48 
              66 48 80 0C 
              DB 00 11 08 
              0C 8F 8A 43 
              5C 49 80 0C 
              DC 00 01 12 
              20 8F 8A 42 
              68 45 80 0E 
              DD 00 04 1C 
              0B 0F 09 12 
              8F 8A 5C 77 
              80 0B DE 00 
              07 1B 8F 8A 
              44 7C 45 80 
              0A DF 00 07 
              1B 8F 48 41 
              50 80 0F E0 
              00 0F 22 15 
              0D 23 0D 8F 
              8A 53 4B 57 
              80 0B E1 00 
              13 05 04 8F 
              55 65 7E 80 
              09 E2 00 0A 
              8F 4A 58 7D 
              80 0F E3 00 
              0E 07 10 06 
              00 14 8F 8A 
              48 4B 63 80 
              0F E4 00 19 
              0A 21 15 1A 
              10 8F 8A 43 
              76 56 80 0F 
              E5 00 04 1C 
              0B 0F 09 12 
              8F 8A 48 62 
              77 80 0A E6 
              00 07 1B 8F 
              41 60 7E 80 
              09 E7 00 00 
              8F 4C 62 5C 
              80 0F E8 00 
              0F 22 15 0D 
              23 0D 8F 8A 
              42 71 75 80 
              0A E9 00 11 
              8F 8A 4E 50 
              65 80 0F EA 
              00 13 1C 14 
              18 07 14 8F 
              8A 48 6B 5B 
              80 0A EB 00 
              0F 8F 8A 52 
              72 5B 80 0F 
              EC 00 0F 22 
              15 0D 23 0D 
              8F 8A 4B 79 
              43 80 0B ED 
              00 01 12 20 
              8F 48 6F 5B 
              80 0C EE 00 
              01 12 20 8F 
              8A 47 59 5F 
              80 0A EF 00 
              19 25 8F 51 
              61 4D 80 0E 
              F0 00 15 15 
              09 1F 16 8F 
              8A 4A 56 77 
              80 0D F1 00 
              18 25 1E 16 
              8F 8A 57 68 
              44 80 0D F2 
              00 13 1D 08 
              20 0C 8F 42 
              78 74 80 0E 
              F3 00 C7 01 
              1D 1D 16 8F 
              8A 45 47 5B 
              80 10 F4 00 
              C7 13 1C 14 
              18 07 14 8F 
              8A 48 6B 5B 
              80 0C F5 00 
              C7 08 19 8F 
              8A 43 5E 56 
              80 0E F6 00 
              C7 13 1D 08 
              20 0C 8F 42 
              78 74 80 0C 
              F7 00 C7 13 
              05 04 8F 55 
              65 7E 80 0B 
              F8 00 C7 0F 
              8F 8A 52 72 
              5B 80 0A F9 
              00 C7 17 8F 
              54 68 46 80 
              0A FA 00 C7 
              00 8F 4C 62 
              5C 80 0C FB 
              00 C7 03 04 
              0B 8F 41 5E 
              65 80 0B FC 
              00 C7 19 25 
              8F 51 61 4D 
              80 0D FD 00 
              C7 01 12 20 
              8F 8A 47 59 
              5F 80 10 FE 
              00 C7 0E 07 
              10 06 00 14 
              8F 8A 48 4B 
              63 80 0A FF 
              00 C7 0A 8F 
              4A 58 7D 80 
              0B 00 01 C7 
              0B 8F 8A 56 
              51 6C 80 0C 
              01 01 C7 0F 
              0E 05 8F 4C 
              5A 54 80 0E 
              02 01 C7 18 
              06 25 1D 8F 
              8A 54 6D 7A 
              80 0B 03 01 
              C7 0F 06 8F 
              54 4D 58 80 
              0B 04 01 C7 
              11 8F 8A 4E 
              50 65 80 10 
              05 01 C7 0B 
              1C 10 04 08 
              09 8F 8A 4D 
              7F 53 80 0D 
              06 01 C7 18 
              15 0A 1E 8F 
              48 56 43 80 
              10 07 01 C7 
              19 0A 21 15 
              1A 10 8F 8A 
              43 76 56 80 
              0D 08 01 C7 
              0E 0F 1F 13 
              8F 54 7F 7C 
              80 0D 09 01 
              C7 11 08 0C 
              8F 8A 43 5C 
              49 80 0D 0A 
              01 C7 03 06 
              1A 8F 8A 4C 
              6D 67 80 0F 
              0B 01 C7 15 
              15 09 1F 16 
              8F 8A 4A 56 
              77 80 0C 0C 
              01 C7 03 0B 
              8F 8A 49 78 
              7B 80 0B 0D 
              01 C7 02 8F 
              8A 43 64 42 
              80 0C 0E 01 
              C7 04 1E 17 
              8F 8A 45 4E 
              80 0B 0F 01 
              C7 07 1B 8F 
              41 60 7E 80 
              0B 10 01 C7 
              05 8F 8A 56 
              47 74 80 0F 
              11 01 C7 15 
              05 03 09 11 
              8F 8A 43 52 
              66 80 0F 12 
              01 C7 03 1B 
              02 09 13 06 
              8F 4D 4A 72 
              80 0B 13 01 
              C7 0D 8F 8A 
              44 65 6F 80 
              0E 14 01 C7 
              18 25 1E 16 
              8F 8A 57 68 
              44 80 0D 15 
              01 C7 09 0D 
              06 18 8F 43 
              78 6A 80 0D 
              16 01 C7 0E 
              17 16 18 8F 
              4C 43 4E 80 
              0E 17 01 C7 
              0F 06 13 05 
              20 8F 44 54 
              52 80 0C 18 
              01 C7 12 03 
              0F 1E 8F 68 
              72 80 10 19 
              01 C7 04 1C 
              0B 0F 09 12 
              8F 8A 48 62 
              77 80 10 1A 
              01 C7 0F 22 
              15 0D 23 0D 
              8F 8A 4B 79 
              43 80 15 1B 
              01 BE 3F 0D 
              4F 6B 20 53 
              65 65 64 20 
              32 34 30 36 
              33 0D 80 00 	.db	$22,$01,$00,$bb,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$bb,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$32,$34,$30,$36,$33,$0d,$80,$0c,$03,$00,$01,$1d,$1d,$16,$8f,$50,$79,$60,$80,$0f,$04,$00,$13,$1c,$14,$18,$07,$14,$8f,$8a,$42,$60,$55,$80,$0b,$05,$00,$08,$19,$8f,$8a,$58,$4a,$72,$80,$0d,$06,$00,$13,$1d,$08,$20,$0c,$8f,$4b,$54,$77,$80,$0b,$07,$00,$13,$05,$04,$8f,$50,$57,$7d,$80,$09,$08,$00,$0f,$8f,$52,$40,$4d,$80,$09,$09,$00,$17,$8f,$57,$42,$4a,$80,$0a,$0a,$00,$00,$8f,$8a,$47,$4a,$5d,$80,$0b,$0b,$00,$03,$04,$0b,$8f,$50,$72,$7b,$80,$0a,$0c,$00,$19,$25,$8f,$45,$7e,$47,$80,$0b,$0d,$00,$01,$12,$20,$8f,$50,$6e,$64,$80,$0e,$0e,$00,$0e,$07,$10,$06,$00,$14,$8f,$8a,$4e,$74,$80,$09,$0f,$00,$0a,$8f,$54,$7d,$5b,$80,$09,$10,$00,$0b,$8f,$4d,$7d,$6a,$80,$0c,$11,$00,$0f,$0e,$05,$8f,$8a,$49,$51,$46,$80,$0b,$12,$00,$18,$06,$25,$1d,$8f,$7c,$4f,$80,$0b,$13,$00,$0f,$06,$8f,$8a,$55,$7a,$62,$80,$0a,$14,$00,$11,$8f,$8a,$55,$45,$6f,$80,$0e,$15,$00,$0b,$1c,$10,$04,$08,$09,$8f,$4a,$58,$40,$80,$0c,$16,$00,$18,$15,$0a,$1e,$8f,$44,$7c,$60,$80,$0f,$17,$00,$19,$0a,$21,$15,$1a,$10,$8f,$8a,$57,$73,$6b,$80,$0d,$18,$00,$0e,$0f,$1f,$13,$8f,$8a,$4d,$79,$6f,$80,$0b,$19,$00,$11,$08,$0c,$8f,$44,$75,$57,$80,$0b,$1a,$00,$03,$06,$1a,$8f,$41,$55,$5f,$80,$0d,$1b,$00,$15,$15,$09,$1f,$16,$8f,$4d,$76,$76,$80,$0b,$1c,$00,$03,$0b,$8f,$8a,$53,$75,$74,$80,$0a,$1d,$00,$02,$8f,$8a,$49,$49,$52,$80,$0c,$1e,$00,$04,$1e,$17,$8f,$8a,$41,$67,$5e,$80,$0a,$1f,$00,$07,$1b,$8f,$50,$5e,$71,$80,$09,$20,$00,$05,$8f,$4f,$6e,$7a,$80,$0e,$21,$00,$15,$05,$03,$09,$11,$8f,$8a,$50,$4b,$67,$80,$0f,$22,$00,$03,$1b,$02,$09,$13,$06,$8f,$8a,$41,$47,$49,$80,$09,$23,$00,$0d,$8f,$43,$69,$6c,$80,$0d,$24,$00,$18,$25,$1e,$16,$8f,$8a,$48,$49,$46,$80,$0c,$25,$00,$09,$0d,$06,$18,$8f,$52,$77,$5c,$80,$0c,$26,$00,$0e,$17,$16,$18,$8f,$4c,$4e,$7b,$80,$0d,$27,$00,$0f,$06,$13,$05,$20,$8f,$4b,$7c,$47,$80,$0c,$28,$00,$12,$03,$0f,$1e,$8f,$42,$7b,$65,$80,$0e,$29,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$4d,$76,$4d,$80,$0f,$2a,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$54,$53,$72,$80,$0c,$2b,$00,$03,$06,$1a,$8f,$8a,$4e,$57,$59,$80,$0d,$2c,$00,$12,$03,$0f,$1e,$8f,$8a,$4c,$71,$55,$80,$0d,$2d,$00,$09,$0d,$06,$18,$8f,$8a,$49,$52,$60,$80,$0f,$2e,$00,$13,$1c,$14,$18,$07,$14,$8f,$8a,$4e,$57,$7f,$80,$0c,$2f,$00,$13,$1d,$08,$20,$0c,$8f,$6b,$4b,$80,$0f,$30,$00,$0b,$1c,$10,$04,$08,$09,$8f,$8a,$4f,$5c,$56,$80,$0f,$31,$00,$0e,$07,$10,$06,$00,$14,$8f,$8a,$51,$4c,$66,$80,$0c,$32,$00,$04,$1e,$17,$8f,$8a,$53,$76,$4b,$80,$0d,$33,$00,$18,$15,$0a,$1e,$8f,$8a,$51,$7e,$58,$80,$0d,$34,$00,$18,$15,$0a,$1e,$8f,$8a,$57,$77,$54,$80,$0f,$35,$00,$19,$0a,$21,$15,$1a,$10,$8f,$8a,$4e,$43,$7b,$80,$0d,$36,$00,$0f,$06,$13,$05,$20,$8f,$58,$55,$5d,$80,$0d,$37,$00,$15,$05,$03,$09,$11,$8f,$53,$5b,$62,$80,$0e,$38,$00,$0e,$07,$10,$06,$00,$14,$8f,$47,$4c,$55,$80,$0c,$39,$00,$11,$08,$0c,$8f,$8a,$4e,$74,$57,$80,$0d,$3a,$00,$09,$0d,$06,$18,$8f,$8a,$4f,$44,$6f,$80,$0d,$3b,$00,$18,$06,$25,$1d,$8f,$8a,$56,$77,$6a,$80,$0d,$3c,$00,$15,$15,$09,$1f,$16,$8f,$51,$62,$6e,$80,$0a,$3d,$00,$0b,$8f,$8a,$42,$67,$58,$80,$0c,$3e,$00,$0e,$17,$16,$18,$8f,$56,$79,$4e,$80,$0e,$3f,$00,$0f,$06,$13,$05,$20,$8f,$8a,$55,$5b,$6d,$80,$0b,$40,$00,$08,$19,$8f,$8a,$56,$46,$49,$80,$0d,$41,$00,$15,$05,$03,$09,$11,$8f,$56,$43,$50,$80,$0b,$42,$00,$03,$04,$0b,$8f,$55,$7c,$59,$80,$0e,$43,$00,$13,$1c,$14,$18,$07,$14,$8f,$41,$6f,$61,$80,$0a,$44,$00,$0f,$8f,$8a,$4f,$4d,$4a,$80,$0c,$45,$00,$11,$08,$0c,$8f,$8a,$4c,$65,$6a,$80,$0e,$46,$00,$0f,$06,$13,$05,$20,$8f,$8a,$47,$67,$6b,$80,$0b,$47,$00,$19,$25,$8f,$8a,$4c,$5c,$41,$80,$0f,$48,$00,$03,$1b,$02,$09,$13,$06,$8f,$8a,$4f,$52,$69,$80,$0e,$49,$00,$0e,$07,$10,$06,$00,$14,$8f,$50,$53,$59,$80,$0d,$4a,$00,$12,$03,$0f,$1e,$8f,$8a,$41,$4c,$47,$80,$0d,$4b,$00,$15,$05,$03,$09,$11,$8f,$52,$41,$4f,$80,$0a,$4c,$00,$11,$8f,$8a,$55,$79,$7f,$80,$0e,$4d,$00,$13,$1c,$14,$18,$07,$14,$8f,$4d,$43,$69,$80,$09,$4e,$00,$17,$8f,$55,$65,$4b,$80,$0f,$4f,$00,$03,$1b,$02,$09,$13,$06,$8f,$8a,$43,$42,$61,$80,$0d,$50,$00,$09,$0d,$06,$18,$8f,$8a,$57,$46,$70,$80,$0b,$51,$00,$19,$25,$8f,$8a,$4e,$44,$5e,$80,$0e,$52,$00,$13,$1d,$08,$20,$0c,$8f,$8a,$4e,$46,$78,$80,$0d,$53,$00,$0e,$0f,$1f,$13,$8f,$8a,$4e,$58,$5f,$80,$09,$54,$00,$17,$8f,$4e,$5f,$78,$80,$0b,$55,$00,$08,$19,$8f,$8a,$42,$67,$49,$80,$09,$56,$00,$02,$8f,$58,$59,$5a,$80,$0c,$57,$00,$0e,$17,$16,$18,$8f,$43,$6f,$4d,$80,$0c,$58,$00,$11,$08,$0c,$8f,$8a,$4c,$5b,$7b,$80,$0b,$59,$00,$04,$1e,$17,$8f,$4b,$45,$7d,$80,$0a,$5a,$00,$07,$1b,$8f,$4d,$56,$63,$80,$0a,$5b,$00,$17,$8f,$8a,$55,$66,$71,$80,$0e,$5c,$00,$15,$15,$09,$1f,$16,$8f,$8a,$42,$5a,$6c,$80,$0b,$5d,$00,$08,$19,$8f,$8a,$4f,$68,$7f,$80,$0d,$5e,$00,$15,$05,$03,$09,$11,$8f,$8a,$45,$5f,$80,$0c,$5f,$00,$03,$04,$0b,$8f,$8a,$45,$71,$76,$80,$0a,$60,$00,$0d,$8f,$8a,$43,$7e,$76,$80,$0f,$61,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$4e,$53,$7a,$80,$0c,$62,$00,$12,$03,$0f,$1e,$8f,$54,$62,$66,$80,$09,$63,$00,$11,$8f,$54,$69,$7b,$80,$0f,$64,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$51,$72,$50,$80,$0b,$65,$00,$0f,$0e,$05,$8f,$51,$61,$59,$80,$0b,$66,$00,$0f,$0e,$05,$8f,$4d,$5f,$48,$80,$0c,$67,$00,$01,$1d,$1d,$16,$8f,$54,$6a,$7f,$80,$0d,$68,$00,$0e,$17,$16,$18,$8f,$8a,$49,$7e,$4b,$80,$0f,$69,$00,$0e,$07,$10,$06,$00,$14,$8f,$8a,$47,$64,$6d,$80,$09,$6a,$00,$0d,$8f,$41,$70,$58,$80,$0b,$6b,$00,$01,$12,$20,$8f,$41,$48,$40,$80,$0c,$6c,$00,$18,$15,$0a,$1e,$8f,$44,$61,$5b,$80,$0d,$6d,$00,$18,$15,$0a,$1e,$8f,$8a,$4f,$4a,$58,$80,$09,$6e,$00,$0d,$8f,$4e,$41,$41,$80,$0d,$6f,$00,$15,$15,$09,$1f,$16,$8f,$44,$66,$69,$80,$0f,$70,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$55,$5d,$71,$80,$0c,$71,$00,$18,$15,$0a,$1e,$8f,$4a,$6b,$4c,$80,$0c,$72,$00,$13,$05,$04,$8f,$8a,$41,$6d,$44,$80,$0c,$73,$00,$0f,$0e,$05,$8f,$8a,$52,$6a,$60,$80,$0c,$74,$00,$0e,$17,$16,$18,$8f,$43,$4d,$62,$80,$0e,$75,$00,$0f,$06,$13,$05,$20,$8f,$8a,$50,$53,$74,$80,$0c,$76,$00,$01,$12,$20,$8f,$8a,$42,$6a,$59,$80,$0d,$77,$00,$15,$05,$03,$09,$11,$8f,$4d,$79,$4f,$80,$0e,$78,$00,$15,$15,$09,$1f,$16,$8f,$8a,$41,$77,$46,$80,$0b,$79,$00,$07,$1b,$8f,$8a,$42,$50,$5b,$80,$0a,$7a,$00,$0d,$8f,$8a,$44,$58,$7c,$80,$09,$7b,$00,$05,$8f,$43,$5a,$5f,$80,$0c,$7c,$00,$0e,$17,$16,$18,$8f,$4c,$43,$4e,$80,$0e,$7d,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$46,$5c,$52,$80,$0b,$7e,$00,$01,$12,$20,$8f,$4b,$68,$5f,$80,$09,$7f,$00,$02,$8f,$4d,$76,$59,$80,$0e,$80,$00,$03,$1b,$02,$09,$13,$06,$8f,$45,$5d,$4f,$80,$0e,$81,$00,$03,$1b,$02,$09,$13,$06,$8f,$44,$6b,$69,$80,$0c,$82,$00,$03,$04,$0b,$8f,$8a,$44,$4e,$7a,$80,$0a,$83,$00,$0d,$8f,$8a,$55,$42,$43,$80,$0c,$84,$00,$09,$0d,$06,$18,$8f,$54,$49,$69,$80,$0a,$85,$00,$07,$1b,$8f,$48,$6e,$4e,$80,$09,$86,$00,$0a,$8f,$4f,$65,$4d,$80,$0d,$87,$00,$0e,$0f,$1f,$13,$8f,$8a,$45,$40,$70,$80,$0b,$88,$00,$03,$06,$1a,$8f,$57,$42,$4c,$80,$09,$89,$00,$00,$8f,$50,$4f,$5d,$80,$0a,$8a,$00,$17,$8f,$8a,$4c,$41,$7e,$80,$0f,$8b,$00,$19,$0a,$21,$15,$1a,$10,$8f,$8a,$43,$6c,$6d,$80,$0c,$8c,$00,$01,$1d,$1d,$16,$8f,$47,$53,$4a,$80,$0a,$8d,$00,$0f,$8f,$8a,$45,$4a,$50,$80,$0c,$8e,$00,$03,$06,$1a,$8f,$8a,$54,$43,$7b,$80,$0d,$8f,$00,$0e,$0f,$1f,$13,$8f,$8a,$43,$4e,$63,$80,$0e,$90,$00,$15,$05,$03,$09,$11,$8f,$8a,$47,$49,$78,$80,$0f,$91,$00,$0e,$07,$10,$06,$00,$14,$8f,$8a,$57,$68,$62,$80,$0d,$92,$00,$15,$15,$09,$1f,$16,$8f,$51,$77,$46,$80,$09,$93,$00,$17,$8f,$54,$68,$46,$80,$0c,$94,$00,$03,$06,$1a,$8f,$8a,$57,$6e,$4a,$80,$0a,$95,$00,$08,$19,$8f,$46,$5f,$62,$80,$0d,$96,$00,$13,$1d,$08,$20,$0c,$8f,$57,$5b,$40,$80,$09,$97,$00,$0b,$8f,$50,$6f,$66,$80,$0d,$98,$00,$18,$15,$0a,$1e,$8f,$8a,$49,$44,$60,$80,$0c,$99,$00,$11,$08,$0c,$8f,$8a,$57,$73,$68,$80,$0b,$9a,$00,$07,$1b,$8f,$8a,$41,$62,$50,$80,$0c,$9b,$00,$0f,$0e,$05,$8f,$8a,$45,$56,$5c,$80,$0a,$9c,$00,$02,$8f,$8a,$53,$50,$6b,$80,$0d,$9d,$00,$01,$1d,$1d,$16,$8f,$8a,$54,$59,$65,$80,$0d,$9e,$00,$12,$03,$0f,$1e,$8f,$8a,$51,$6a,$4b,$80,$0f,$9f,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$4f,$43,$62,$80,$0c,$a0,$00,$03,$04,$0b,$8f,$8a,$42,$4e,$67,$80,$0d,$a1,$00,$0f,$06,$13,$05,$20,$8f,$4f,$5b,$77,$80,$0f,$a2,$00,$0b,$1c,$10,$04,$08,$09,$8f,$8a,$48,$54,$64,$80,$0c,$a3,$00,$0e,$0f,$1f,$13,$8f,$54,$7f,$7c,$80,$0a,$a4,$00,$03,$0b,$8f,$47,$54,$4b,$80,$0c,$a5,$00,$12,$03,$0f,$1e,$8f,$4e,$6d,$7b,$80,$0a,$a6,$00,$0d,$8f,$8a,$44,$6c,$48,$80,$0b,$a7,$00,$03,$04,$0b,$8f,$41,$5e,$65,$80,$0b,$a8,$00,$12,$03,$0f,$1e,$8f,$68,$72,$80,$0e,$a9,$00,$0e,$07,$10,$06,$00,$14,$8f,$54,$7b,$67,$80,$0d,$aa,$00,$18,$15,$0a,$1e,$8f,$8a,$4f,$75,$43,$80,$0e,$ab,$00,$15,$05,$03,$09,$11,$8f,$8a,$45,$50,$59,$80,$0f,$ac,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$44,$4f,$6e,$80,$0a,$ad,$00,$03,$0b,$8f,$56,$6d,$4b,$80,$0a,$ae,$00,$05,$8f,$8a,$46,$56,$6b,$80,$0b,$af,$00,$03,$0b,$8f,$8a,$49,$78,$7b,$80,$0c,$b0,$00,$0f,$0e,$05,$8f,$8a,$4a,$72,$6c,$80,$0d,$b1,$00,$18,$15,$0a,$1e,$8f,$8a,$48,$4f,$67,$80,$0e,$b2,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$42,$6c,$4b,$80,$0b,$b3,$00,$07,$1b,$8f,$8a,$53,$46,$43,$80,$0f,$b4,$00,$0b,$1c,$10,$04,$08,$09,$8f,$8a,$4d,$7f,$53,$80,$0e,$b5,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$45,$66,$64,$80,$0d,$b6,$00,$01,$1d,$1d,$16,$8f,$8a,$45,$47,$5b,$80,$0a,$b7,$00,$0f,$06,$8f,$51,$7a,$57,$80,$0c,$b8,$00,$18,$15,$0a,$1e,$8f,$48,$56,$43,$80,$0e,$b9,$00,$03,$1b,$02,$09,$13,$06,$8f,$4d,$4a,$72,$80,$0b,$ba,$00,$11,$08,$0c,$8f,$41,$4b,$46,$80,$0b,$bb,$00,$07,$1b,$8f,$8a,$4b,$77,$76,$80,$0a,$bc,$00,$0d,$8f,$8a,$44,$65,$6f,$80,$0d,$bd,$00,$18,$25,$1e,$16,$8f,$8a,$4f,$63,$74,$80,$0f,$be,$00,$13,$1c,$14,$18,$07,$14,$8f,$8a,$57,$6e,$75,$80,$0c,$bf,$00,$13,$05,$04,$8f,$8a,$48,$69,$7e,$80,$0a,$c0,$00,$0f,$06,$8f,$54,$4d,$58,$80,$0d,$c1,$00,$18,$06,$25,$1d,$8f,$8a,$58,$50,$5b,$80,$0a,$c2,$00,$02,$8f,$8a,$4b,$69,$4c,$80,$0f,$c3,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$45,$46,$6d,$80,$0a,$c4,$00,$02,$8f,$8a,$43,$64,$42,$80,$0c,$c5,$00,$03,$06,$1a,$8f,$8a,$4c,$6d,$67,$80,$0b,$c6,$00,$04,$1e,$17,$8f,$4f,$51,$77,$80,$0e,$c7,$00,$15,$05,$03,$09,$11,$8f,$8a,$43,$52,$66,$80,$0f,$c8,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$51,$7a,$45,$80,$09,$c9,$00,$05,$8f,$55,$50,$64,$80,$0d,$ca,$00,$0f,$06,$13,$05,$20,$8f,$43,$7f,$7a,$80,$0a,$cb,$00,$05,$8f,$8a,$54,$5b,$4a,$80,$0b,$cc,$00,$19,$25,$8f,$8a,$46,$7a,$65,$80,$0b,$cd,$00,$08,$19,$8f,$8a,$43,$5e,$56,$80,$0b,$ce,$00,$0f,$0e,$05,$8f,$4c,$5a,$54,$80,$0c,$cf,$00,$01,$12,$20,$8f,$8a,$4b,$65,$47,$80,$0c,$d0,$00,$09,$0d,$06,$18,$8f,$43,$78,$6a,$80,$0a,$d1,$00,$0b,$8f,$8a,$51,$74,$52,$80,$0d,$d2,$00,$0f,$06,$13,$05,$20,$8f,$44,$54,$52,$80,$0b,$d3,$00,$04,$1e,$17,$8f,$8a,$45,$4e,$80,$0a,$d4,$00,$0a,$8f,$8a,$46,$4a,$7f,$80,$0a,$d5,$00,$05,$8f,$8a,$56,$47,$74,$80,$0b,$d6,$00,$19,$25,$8f,$8a,$45,$78,$6b,$80,$0e,$d7,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$43,$79,$56,$80,$0a,$d8,$00,$0b,$8f,$8a,$56,$51,$6c,$80,$0d,$d9,$00,$18,$06,$25,$1d,$8f,$8a,$54,$6d,$7a,$80,$0a,$da,$00,$07,$1b,$8f,$48,$66,$48,$80,$0c,$db,$00,$11,$08,$0c,$8f,$8a,$43,$5c,$49,$80,$0c,$dc,$00,$01,$12,$20,$8f,$8a,$42,$68,$45,$80,$0e,$dd,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$5c,$77,$80,$0b,$de,$00,$07,$1b,$8f,$8a,$44,$7c,$45,$80,$0a,$df,$00,$07,$1b,$8f,$48,$41,$50,$80,$0f,$e0,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$53,$4b,$57,$80,$0b,$e1,$00,$13,$05,$04,$8f,$55,$65,$7e,$80,$09,$e2,$00,$0a,$8f,$4a,$58,$7d,$80,$0f,$e3,$00,$0e,$07,$10,$06,$00,$14,$8f,$8a,$48,$4b,$63,$80,$0f,$e4,$00,$19,$0a,$21,$15,$1a,$10,$8f,$8a,$43,$76,$56,$80,$0f,$e5,$00,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$48,$62,$77,$80,$0a,$e6,$00,$07,$1b,$8f,$41,$60,$7e,$80,$09,$e7,$00,$00,$8f,$4c,$62,$5c,$80,$0f,$e8,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$42,$71,$75,$80,$0a,$e9,$00,$11,$8f,$8a,$4e,$50,$65,$80,$0f,$ea,$00,$13,$1c,$14,$18,$07,$14,$8f,$8a,$48,$6b,$5b,$80,$0a,$eb,$00,$0f,$8f,$8a,$52,$72,$5b,$80,$0f,$ec,$00,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$4b,$79,$43,$80,$0b,$ed,$00,$01,$12,$20,$8f,$48,$6f,$5b,$80,$0c,$ee,$00,$01,$12,$20,$8f,$8a,$47,$59,$5f,$80,$0a,$ef,$00,$19,$25,$8f,$51,$61,$4d,$80,$0e,$f0,$00,$15,$15,$09,$1f,$16,$8f,$8a,$4a,$56,$77,$80,$0d,$f1,$00,$18,$25,$1e,$16,$8f,$8a,$57,$68,$44,$80,$0d,$f2,$00,$13,$1d,$08,$20,$0c,$8f,$42,$78,$74,$80,$0e,$f3,$00,$c7,$01,$1d,$1d,$16,$8f,$8a,$45,$47,$5b,$80,$10,$f4,$00,$c7,$13,$1c,$14,$18,$07,$14,$8f,$8a,$48,$6b,$5b,$80,$0c,$f5,$00,$c7,$08,$19,$8f,$8a,$43,$5e,$56,$80,$0e,$f6,$00,$c7,$13,$1d,$08,$20,$0c,$8f,$42,$78,$74,$80,$0c,$f7,$00,$c7,$13,$05,$04,$8f,$55,$65,$7e,$80,$0b,$f8,$00,$c7,$0f,$8f,$8a,$52,$72,$5b,$80,$0a,$f9,$00,$c7,$17,$8f,$54,$68,$46,$80,$0a,$fa,$00,$c7,$00,$8f,$4c,$62,$5c,$80,$0c,$fb,$00,$c7,$03,$04,$0b,$8f,$41,$5e,$65,$80,$0b,$fc,$00,$c7,$19,$25,$8f,$51,$61,$4d,$80,$0d,$fd,$00,$c7,$01,$12,$20,$8f,$8a,$47,$59,$5f,$80,$10,$fe,$00,$c7,$0e,$07,$10,$06,$00,$14,$8f,$8a,$48,$4b,$63,$80,$0a,$ff,$00,$c7,$0a,$8f,$4a,$58,$7d,$80,$0b,$00,$01,$c7,$0b,$8f,$8a,$56,$51,$6c,$80,$0c,$01,$01,$c7,$0f,$0e,$05,$8f,$4c,$5a,$54,$80,$0e,$02,$01,$c7,$18,$06,$25,$1d,$8f,$8a,$54,$6d,$7a,$80,$0b,$03,$01,$c7,$0f,$06,$8f,$54,$4d,$58,$80,$0b,$04,$01,$c7,$11,$8f,$8a,$4e,$50,$65,$80,$10,$05,$01,$c7,$0b,$1c,$10,$04,$08,$09,$8f,$8a,$4d,$7f,$53,$80,$0d,$06,$01,$c7,$18,$15,$0a,$1e,$8f,$48,$56,$43,$80,$10,$07,$01,$c7,$19,$0a,$21,$15,$1a,$10,$8f,$8a,$43,$76,$56,$80,$0d,$08,$01,$c7,$0e,$0f,$1f,$13,$8f,$54,$7f,$7c,$80,$0d,$09,$01,$c7,$11,$08,$0c,$8f,$8a,$43,$5c,$49,$80,$0d,$0a,$01,$c7,$03,$06,$1a,$8f,$8a,$4c,$6d,$67,$80,$0f,$0b,$01,$c7,$15,$15,$09,$1f,$16,$8f,$8a,$4a,$56,$77,$80,$0c,$0c,$01,$c7,$03,$0b,$8f,$8a,$49,$78,$7b,$80,$0b,$0d,$01,$c7,$02,$8f,$8a,$43,$64,$42,$80,$0c,$0e,$01,$c7,$04,$1e,$17,$8f,$8a,$45,$4e,$80,$0b,$0f,$01,$c7,$07,$1b,$8f,$41,$60,$7e,$80,$0b,$10,$01,$c7,$05,$8f,$8a,$56,$47,$74,$80,$0f,$11,$01,$c7,$15,$05,$03,$09,$11,$8f,$8a,$43,$52,$66,$80,$0f,$12,$01,$c7,$03,$1b,$02,$09,$13,$06,$8f,$4d,$4a,$72,$80,$0b,$13,$01,$c7,$0d,$8f,$8a,$44,$65,$6f,$80,$0e,$14,$01,$c7,$18,$25,$1e,$16,$8f,$8a,$57,$68,$44,$80,$0d,$15,$01,$c7,$09,$0d,$06,$18,$8f,$43,$78,$6a,$80,$0d,$16,$01,$c7,$0e,$17,$16,$18,$8f,$4c,$43,$4e,$80,$0e,$17,$01,$c7,$0f,$06,$13,$05,$20,$8f,$44,$54,$52,$80,$0c,$18,$01,$c7,$12,$03,$0f,$1e,$8f,$68,$72,$80,$10,$19,$01,$c7,$04,$1c,$0b,$0f,$09,$12,$8f,$8a,$48,$62,$77,$80,$10,$1a,$01,$c7,$0f,$22,$15,$0d,$23,$0d,$8f,$8a,$4b,$79,$43,$80,$15,$1b,$01,$be,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$32,$34,$30,$36,$33,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5998 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6998 -  -  -  -  EndTestInstance:
   18 00:6998 -  -  -  -  		
   19 00:6998 -  -  -  -  ; ***************************************************************************************
   20 00:6998 -  -  -  -  ;
   21 00:6998 -  -  -  -  ;									Changes and Updates
   22 00:6998 -  -  -  -  ;
   23 00:6998 -  -  -  -  ; ***************************************************************************************
   24 00:6998 -  -  -  -  ;
   25 00:6998 -  -  -  -  ;		Date			Notes
   26 00:6998 -  -  -  -  ;		==== 			=====
   27 00:6998 -  -  -  -  ;
   28 00:6998 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:6998 -  -  -  -  FinalAddress:
