    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD AA 4C -  		call 	SYSInitialise
   44 00:4006 11 00 50 -  		ld 		de,TestInstance
   45 00:4009 21 62 60 -  		ld 		hl,EndTestInstance
   46 00:400C CD A8 47 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 59 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 67 42 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD B2 4C -  		call 	SYSPrintChar
   56 00:401C CD B0 4C -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 05 C3 0E 
              43 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 06 C3 0E 
              43 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  											; must be power of 2. 
   24 00:4029 -  -  -  -  
   25 00:4029 -  -  -  -  ; ***************************************************************************************
   26 00:4029 -  -  -  -  ;
   27 00:4029 -  -  -  -  ;								Defines the current instance
   28 00:4029 -  -  -  -  ;
   29 00:4029 -  -  -  -  ; ***************************************************************************************
   30 00:4029 -  -  -  -  
   31 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:4029 00 00 00 00 		.dw 	0,0
   33 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:402D 00 00 00 00 		.dw 	0,0		
   35 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4031 00 00 00 00 		.dw 	0,0 							
   37 00:4035 -  -  -  -  
   38 00:4035 -  -  -  -  ; ***************************************************************************************
   39 00:4035 -  -  -  -  ;
   40 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4035 -  -  -  -  ;
   42 00:4035 -  -  -  -  ; ***************************************************************************************
   43 00:4035 -  -  -  -  
   44 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4035 00 00 00 00 		.dw 	0,0
   46 00:4039 -  -  -  -  
   47 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:4039 00 00 00 00 		.dw 	0,0		
   49 00:403D -  -  -  -  
   50 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:403D 00 00 00 00 		.dw 	0,0
   52 00:4041 -  -  -  -  
   53 00:4041 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4041 00 00 00 00 		.dw 	0,0
   55 00:4045 -  -  -  -  
   56 00:4045 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4045 00 00 00 00 		.dw 	0,0		
   58 00:4049 -  -  -  -  
   59 00:4049 -  -  -  -  ;
   60 00:4049 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:4049 -  -  -  -  ;
   62 00:4049 -  -  -  -  
   63 00:4049 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:4049 00 00 00 00 		.dw 	0,0
   65 00:404D -  -  -  -  		
   66 00:404D -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:404D 00 00 00 00 		.dw 	0,0
   68 00:4051 -  -  -  -  
   69 00:4051 -  -  -  -  ; ***************************************************************************************
   70 00:4051 -  -  -  -  ;
   71 00:4051 -  -  -  -  ;										Run variables
   72 00:4051 -  -  -  -  ;
   73 00:4051 -  -  -  -  ; ***************************************************************************************
   74 00:4051 -  -  -  -  
   75 00:4051 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4051 00 00 00 00 		.dw 	0,0
   77 00:4055 -  -  -  -  		
   78 00:4055 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4055 00 00 00 00 		.dw 	0,0
   80 00:4059 -  -  -  -  
   81 00:4059 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:4059 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:405F -  -  -  -  
   84 00:405F -  -  -  -  AConvert: 									; used for address conversions.
   85 00:405F 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4065 -  -  -  -  		
   87 00:4065 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4065 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4075 -  -  -  -  
   90 00:4075 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4075 00 00 -  -  		.dw 	0
   92 00:4077 -  -  -  -  
   93 00:4077 -  -  -  -  PrintBase: 									; current base for PRINT
   94 00:4077 00 00 -  -  		.dw 	0 
   95 00:4079 -  -  -  -  		
   96 00:4079 -  -  -  -  ; ***************************************************************************************
   97 00:4079 -  -  -  -  ;
   98 00:4079 -  -  -  -  ;									Variable Information
   99 00:4079 -  -  -  -  ;
  100 00:4079 -  -  -  -  ; ***************************************************************************************
  101 00:4079 -  -  -  -  
  102 00:4079 -  -  -  -  VarNameStart: 								; first byte of name
  103 00:4079 00 00 00 00 		.dw 	0,0
  104 00:407D -  -  -  -  VarHash: 									; name hash value
  105 00:407D 00 00 -  -  		.dw 	0		
  106 00:407F -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  107 00:407F 00 00 00 00 		.dw 	0,0
  108 00:4083 -  -  -  -  		
  109 00:4083 -  -  -  -  ; ***************************************************************************************
  110 00:4083 -  -  -  -  ;
  111 00:4083 -  -  -  -  ;										  Buffers
  112 00:4083 -  -  -  -  ;
  113 00:4083 -  -  -  -  ; ***************************************************************************************
  114 00:4083 -  -  -  -  
  115 00:4083 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  116 00:4083 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  117 00:4093 -  -  -  -  
  118 00:4093 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  119 00:4093 00 00 -  -  		.dw 	0
  120 00:4095 -  -  -  -  
  121 00:4095 -  -  -  -  ConvertBuffer: 								; general usage
  122 00:4095 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  123 00:40D5 -  -  -  -  
  124 00:40D5 -  -  -  -  ; ***************************************************************************************
  125 00:40D5 -  -  -  -  ;
  126 00:40D5 -  -  -  -  ;									Changes and Updates
  127 00:40D5 -  -  -  -  ;
  128 00:40D5 -  -  -  -  ; ***************************************************************************************
  129 00:40D5 -  -  -  -  ;
  130 00:40D5 -  -  -  -  ;		Date			Notes
  131 00:40D5 -  -  -  -  ;		==== 			=====
  132 00:40D5 -  -  -  -  ;
  133 00:40D5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D5 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D5 -  -  -  -  ; ***************************************************************************************
    2 00:40D5 -  -  -  -  ; ***************************************************************************************
    3 00:40D5 -  -  -  -  ;
    4 00:40D5 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D5 -  -  -  -  ;		Reviewed :	No
    8 00:40D5 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D5 -  -  -  -  ;
   10 00:40D5 -  -  -  -  ; ***************************************************************************************
   11 00:40D5 -  -  -  -  ; ***************************************************************************************
   12 00:40D5 -  -  -  -  
   13 00:40D5 -  -  -  -  ; ***************************************************************************************
   14 00:40D5 -  -  -  -  ;
   15 00:40D5 -  -  -  -  ;									ASSERT command
   16 00:40D5 -  -  -  -  ;
   17 00:40D5 -  -  -  -  ; ***************************************************************************************
   18 00:40D5 -  -  -  -  
   19 00:40D5 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D5 CD F3 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40D8 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40DE C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40DF 3E 01 C3 0E 
              43 -  -  -  		ERR_ASSERT
   24 00:40E4 -  -  -  -  
   25 00:40E4 -  -  -  -  ; ***************************************************************************************
   26 00:40E4 -  -  -  -  ;
   27 00:40E4 -  -  -  -  ;									Changes and Updates
   28 00:40E4 -  -  -  -  ;
   29 00:40E4 -  -  -  -  ; ***************************************************************************************
   30 00:40E4 -  -  -  -  ;
   31 00:40E4 -  -  -  -  ;		Date			Notes
   32 00:40E4 -  -  -  -  ;		==== 			=====
   33 00:40E4 -  -  -  -  ;
   34 00:40E4 -  -  -  -  ; ***************************************************************************************
   35 00:40E4 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E4 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E4 -  -  -  -  ; ***************************************************************************************
    2 00:40E4 -  -  -  -  ; ***************************************************************************************
    3 00:40E4 -  -  -  -  ;
    4 00:40E4 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E4 -  -  -  -  ;		Reviewed :	No
    8 00:40E4 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E4 -  -  -  -  ;
   10 00:40E4 -  -  -  -  ; ***************************************************************************************
   11 00:40E4 -  -  -  -  ; ***************************************************************************************
   12 00:40E4 -  -  -  -  
   13 00:40E4 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E4 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E4 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E4 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40E4 -  -  -  -  BadCmd_To: 			;; [to]
   18 00:40E4 C3 6B 43 -  		jp 		SyntaxError
   19 00:40E7 -  -  -  -  
   20 00:40E7 -  -  -  -  ; ***************************************************************************************
   21 00:40E7 -  -  -  -  ;
   22 00:40E7 -  -  -  -  ;									Changes and Updates
   23 00:40E7 -  -  -  -  ;
   24 00:40E7 -  -  -  -  ; ***************************************************************************************
   25 00:40E7 -  -  -  -  ;
   26 00:40E7 -  -  -  -  ;		Date			Notes
   27 00:40E7 -  -  -  -  ;		==== 			=====
   28 00:40E7 -  -  -  -  ;
   29 00:40E7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40E7 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40E7 -  -  -  -  ; ***************************************************************************************
    2 00:40E7 -  -  -  -  ; ***************************************************************************************
    3 00:40E7 -  -  -  -  ;
    4 00:40E7 -  -  -  -  ;		Name : 		colon.asm
    5 00:40E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E7 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40E7 -  -  -  -  ;		Reviewed :	No
    8 00:40E7 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40E7 -  -  -  -  ;
   10 00:40E7 -  -  -  -  ; ***************************************************************************************
   11 00:40E7 -  -  -  -  ; ***************************************************************************************
   12 00:40E7 -  -  -  -  
   13 00:40E7 -  -  -  -  ; ***************************************************************************************
   14 00:40E7 -  -  -  -  ;
   15 00:40E7 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40E7 -  -  -  -  ;
   17 00:40E7 -  -  -  -  ; ***************************************************************************************
   18 00:40E7 -  -  -  -  
   19 00:40E7 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40E7 C9 -  -  -  		ret
   21 00:40E8 -  -  -  -  
   22 00:40E8 -  -  -  -  ; ***************************************************************************************
   23 00:40E8 -  -  -  -  ;
   24 00:40E8 -  -  -  -  ;									Changes and Updates
   25 00:40E8 -  -  -  -  ;
   26 00:40E8 -  -  -  -  ; ***************************************************************************************
   27 00:40E8 -  -  -  -  ;
   28 00:40E8 -  -  -  -  ;		Date			Notes
   29 00:40E8 -  -  -  -  ;		==== 			=====
   30 00:40E8 -  -  -  -  ;
   31 00:40E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40E8 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40E8 -  -  -  -  ; ***************************************************************************************
    2 00:40E8 -  -  -  -  ; ***************************************************************************************
    3 00:40E8 -  -  -  -  ;
    4 00:40E8 -  -  -  -  ;		Name : 		dim.asm
    5 00:40E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E8 -  -  -  -  ;		Date : 		4th June 2022
    7 00:40E8 -  -  -  -  ;		Reviewed :	No
    8 00:40E8 -  -  -  -  ;		Purpose :	Dim command
    9 00:40E8 -  -  -  -  ;
   10 00:40E8 -  -  -  -  ; ***************************************************************************************
   11 00:40E8 -  -  -  -  ; ***************************************************************************************
   12 00:40E8 -  -  -  -  
   13 00:40E8 -  -  -  -  ; ***************************************************************************************
   14 00:40E8 -  -  -  -  ;
   15 00:40E8 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40E8 -  -  -  -  ;	
   17 00:40E8 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40E8 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40E8 -  -  -  -  ;								(can be comma chained)
   20 00:40E8 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40E8 -  -  -  -  ;
   22 00:40E8 -  -  -  -  ; ***************************************************************************************
   23 00:40E8 -  -  -  -  
   24 00:40E8 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40E8 -  -  -  -  		;
   26 00:40E8 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40E8 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40E8 -  -  -  -  		;
   29 00:40E8 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40EA D1 -  -  -  		pop 	de
   31 00:40EB -  -  -  -  		;
   32 00:40EB DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40EE FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40F0 D2 6B 43 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40F3 -  -  -  -  _DISkip:
   36 00:40F3 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40F5 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40F8 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:40FA 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:40FC -  -  -  -  		;
   41 00:40FC DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:40FF FE 95 -  -  		cp 		KWD_LPAREN
   43 00:4101 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4102 CC 59 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:4105 F1 -  -  -  		pop 	af
   46 00:4106 C4 18 41 -  		call 	nz,DimensionAllocate
   47 00:4109 -  -  -  -  		;
   48 00:4109 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:410C FE A6 -  -  		cp 		KWD_COMMA
   50 00:410E C0 -  -  -  		ret 	nz
   51 00:410F DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:4111 18 D5 -  -  		jr 		Command_DIM
   53 00:4113 -  -  -  -  
   54 00:4113 -  -  -  -  _CDError:
   55 00:4113 3E 04 C3 0E 
              43 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:4118 -  -  -  -  
   57 00:4118 -  -  -  -  ; ***************************************************************************************
   58 00:4118 -  -  -  -  ;
   59 00:4118 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:4118 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:4118 -  -  -  -  ;
   62 00:4118 -  -  -  -  ; ***************************************************************************************
   63 00:4118 -  -  -  -  
   64 00:4118 -  -  -  -  DimensionAllocate:
   65 00:4118 D5 -  -  -  		push 	de 							; save start on stack
   66 00:4119 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:411B 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:411D 32 75 40 -  		ld 		(AllowAutoCreate),a
   69 00:4120 CD 0A 48 -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:4123 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:4125 28 EC -  -  		jr 		z,_CDError
   72 00:4127 CB 41 -  -  		bit 	CIsString,c
   73 00:4129 20 E8 -  -  		jr 		nz,_CDError
   74 00:412B DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:412D E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:412E 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:4130 CD 03 43 -  		call 	CheckNextA 					; check for [
   78 00:4133 CD F3 44 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:4136 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:4138 CD 03 43 -  		call 	CheckNextA 					; check for ]
   81 00:413B 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:413C 7C -  -  -  		ld 		a,h
   83 00:413D B5 -  -  -  		or 		l
   84 00:413E 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:4140 D9 -  -  -  		exx
   86 00:4141 23 -  -  -  		inc 	hl
   87 00:4142 D9 -  -  -  		exx
   88 00:4143 -  -  -  -  _DANoCarry:
   89 00:4143 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:4144 7C -  -  -  		ld 		a,h
   91 00:4145 B5 -  -  -  		or 		l
   92 00:4146 D9 -  -  -  		exx
   93 00:4147 20 CA -  -  		jr 		nz,_CDError
   94 00:4149 CD 4A 47 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:414C EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:414D E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:414E 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:4154 AF -  -  -  		xor 	a 							; autocreate off
   99 00:4155 32 75 40 -  		ld 		(AllowAutoCreate),a
  100 00:4158 C9 -  -  -  		ret
  101 00:4159 -  -  -  -  
  102 00:4159 -  -  -  -  ; ***************************************************************************************
  103 00:4159 -  -  -  -  ;
  104 00:4159 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:4159 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:4159 -  -  -  -  ;
  107 00:4159 -  -  -  -  ; ***************************************************************************************
  108 00:4159 -  -  -  -  
  109 00:4159 -  -  -  -  DimensionArray:
  110 00:4159 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:415A -  -  -  -  		;
  112 00:415A CD F3 44 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:415D 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:415E E6 FC -  -  		and 	$FC
  115 00:4160 D9 -  -  -  		exx
  116 00:4161 B4 -  -  -  		or 		h
  117 00:4162 B5 -  -  -  		or 		l
  118 00:4163 D9 -  -  -  		exx
  119 00:4164 20 AD -  -  		jr 		nz,_CDError
  120 00:4166 -  -  -  -  		;
  121 00:4166 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:4168 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:4169 -  -  -  -  		;
  124 00:4169 CD 5C 48 -  		call 	VariableInformation 		; get information about this array
  125 00:416C CD 92 48 -  		call 	VariableSearchList 			; look to see if already present.
  126 00:416F 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:4171 -  -  -  -  		;
  128 00:4171 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4172 E5 -  -  -  		push 	hl
  130 00:4173 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:4174 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:4175 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:4176 29 -  -  -  		add 	hl,hl
  134 00:4177 CD CB 47 -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:417A -  -  -  -  		;
  136 00:417A D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:417B 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:417E 09 -  -  -  		add 	hl,bc
  139 00:417F 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:4185 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:4187 C9 -  -  -  		ret		
  142 00:4188 -  -  -  -  
  143 00:4188 -  -  -  -  
  144 00:4188 -  -  -  -  ; ***************************************************************************************
  145 00:4188 -  -  -  -  ;
  146 00:4188 -  -  -  -  ;									Changes and Updates
  147 00:4188 -  -  -  -  ;
  148 00:4188 -  -  -  -  ; ***************************************************************************************
  149 00:4188 -  -  -  -  ;
  150 00:4188 -  -  -  -  ;		Date			Notes
  151 00:4188 -  -  -  -  ;		==== 			=====
  152 00:4188 -  -  -  -  ;
  153 00:4188 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:4188 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:4188 -  -  -  -  ; ***************************************************************************************
    2 00:4188 -  -  -  -  ; ***************************************************************************************
    3 00:4188 -  -  -  -  ;
    4 00:4188 -  -  -  -  ;		Name : 		end.asm
    5 00:4188 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4188 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4188 -  -  -  -  ;		Reviewed :	No
    8 00:4188 -  -  -  -  ;		Purpose :	End command
    9 00:4188 -  -  -  -  ;
   10 00:4188 -  -  -  -  ; ***************************************************************************************
   11 00:4188 -  -  -  -  ; ***************************************************************************************
   12 00:4188 -  -  -  -  
   13 00:4188 -  -  -  -  ; ***************************************************************************************
   14 00:4188 -  -  -  -  ;
   15 00:4188 -  -  -  -  ;										END command
   16 00:4188 -  -  -  -  ;
   17 00:4188 -  -  -  -  ; ***************************************************************************************
   18 00:4188 -  -  -  -  
   19 00:4188 -  -  -  -  Command_END: 	;; [end]
   20 00:4188 3E 00 C3 0E 
              43 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:418D -  -  -  -  
   22 00:418D -  -  -  -  ; ***************************************************************************************
   23 00:418D -  -  -  -  ;
   24 00:418D -  -  -  -  ;									Changes and Updates
   25 00:418D -  -  -  -  ;
   26 00:418D -  -  -  -  ; ***************************************************************************************
   27 00:418D -  -  -  -  ;
   28 00:418D -  -  -  -  ;		Date			Notes
   29 00:418D -  -  -  -  ;		==== 			=====
   30 00:418D -  -  -  -  ;
   31 00:418D -  -  -  -  ; ***************************************************************************************
   32 00:418D -  -  -  -  		
Listing for file "_build.asm"
   18 00:418D -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:418D -  -  -  -  ; ***************************************************************************************
    2 00:418D -  -  -  -  ; ***************************************************************************************
    3 00:418D -  -  -  -  ;
    4 00:418D -  -  -  -  ;		Name : 		endofline.asm
    5 00:418D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:418D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:418D -  -  -  -  ;		Reviewed :	None
    8 00:418D -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:418D -  -  -  -  ;
   10 00:418D -  -  -  -  ; ***************************************************************************************
   11 00:418D -  -  -  -  ; ***************************************************************************************
   12 00:418D -  -  -  -  
   13 00:418D -  -  -  -  ; ***************************************************************************************
   14 00:418D -  -  -  -  ;
   15 00:418D -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:418D -  -  -  -  ;
   17 00:418D -  -  -  -  ; ***************************************************************************************
   18 00:418D -  -  -  -  
   19 00:418D -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:418D DD 2A 51 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4191 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:4194 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:4197 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:4199 -  -  -  -  		;
   25 00:4199 ED 7B 55 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:419D C3 76 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:41A0 -  -  -  -  
   28 00:41A0 -  -  -  -  ; ***************************************************************************************
   29 00:41A0 -  -  -  -  ;
   30 00:41A0 -  -  -  -  ;									Changes and Updates
   31 00:41A0 -  -  -  -  ;
   32 00:41A0 -  -  -  -  ; ***************************************************************************************
   33 00:41A0 -  -  -  -  ;
   34 00:41A0 -  -  -  -  ;		Date			Notes
   35 00:41A0 -  -  -  -  ;		==== 			=====
   36 00:41A0 -  -  -  -  ;
   37 00:41A0 -  -  -  -  ; ***************************************************************************************
   38 00:41A0 -  -  -  -  		
Listing for file "_build.asm"
   19 00:41A0 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:41A0 -  -  -  -  ; ***************************************************************************************
    2 00:41A0 -  -  -  -  ; ***************************************************************************************
    3 00:41A0 -  -  -  -  ;
    4 00:41A0 -  -  -  -  ;		Name : 		let.asm
    5 00:41A0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41A0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:41A0 -  -  -  -  ;		Reviewed :	No
    8 00:41A0 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:41A0 -  -  -  -  ;
   10 00:41A0 -  -  -  -  ; ***************************************************************************************
   11 00:41A0 -  -  -  -  ; ***************************************************************************************
   12 00:41A0 -  -  -  -  
   13 00:41A0 -  -  -  -  ; ***************************************************************************************
   14 00:41A0 -  -  -  -  ;
   15 00:41A0 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:41A0 -  -  -  -  ;
   17 00:41A0 -  -  -  -  ; ***************************************************************************************
   18 00:41A0 -  -  -  -  
   19 00:41A0 -  -  -  -  Command_LET: 	;; [let]
   20 00:41A0 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41A3 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41A5 28 28 -  -  		jr 		z,_CLString
   23 00:41A7 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41A9 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41AB 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41AD 32 75 40 -  		ld 		(AllowAutoCreate),a
   27 00:41B0 -  -  -  -  _CLNoAuto:
   28 00:41B0 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41B2 CD 84 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41B5 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41B7 CA 6B 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41BA E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41BB C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41BC AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41BD 32 75 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41C0 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41C2 CD 03 43 -  		call 	CheckNextA
   38 00:41C5 -  -  -  -  
   39 00:41C5 CD ED 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41C8 -  -  -  -  
   41 00:41C8 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41C9 43 -  -  -  		ld 		b,e 						
   43 00:41CA D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41CB -  -  -  -  		;
   45 00:41CB -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41CB -  -  -  -  		;
   47 00:41CB CD D0 41 -  		call 	WriteHLToDE
   48 00:41CE C9 -  -  -  		ret
   49 00:41CF -  -  -  -  		;
   50 00:41CF -  -  -  -  		; 		String assignment code.
   51 00:41CF -  -  -  -  		;
   52 00:41CF -  -  -  -  _CLString:
   53 00:41CF 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:41D0 -  -  -  -  
   55 00:41D0 -  -  -  -  ; ***************************************************************************************
   56 00:41D0 -  -  -  -  ;
   57 00:41D0 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:41D0 -  -  -  -  ;
   59 00:41D0 -  -  -  -  ; ***************************************************************************************
   60 00:41D0 -  -  -  -  
   61 00:41D0 -  -  -  -  WriteHLToDE:
   62 00:41D0 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:41D2 C2 61 43 -  		jp 		nz,TypeMismatch
   64 00:41D5 -  -  -  -  		;
   65 00:41D5 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:41D5 -  -  -  -  		;		
   67 00:41D5 -  -  -  -  _WHDWriteNumber:
   68 00:41D5 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:41D6 D9 -  -  -  		exx
   70 00:41D7 EB -  -  -  		ex 		de,hl
   71 00:41D8 D9 -  -  -  		exx
   72 00:41D9 -  -  -  -  
   73 00:41D9 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:41DA 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:41DB 72 -  -  -  		ld 		(hl),d
   76 00:41DC 23 -  -  -  		inc 	hl
   77 00:41DD E5 -  -  -  		push 	hl
   78 00:41DE D9 -  -  -  		exx
   79 00:41DF E1 -  -  -  		pop 	hl
   80 00:41E0 73 -  -  -  		ld 		(hl),e
   81 00:41E1 23 -  -  -  		inc 	hl
   82 00:41E2 72 -  -  -  		ld 		(hl),d
   83 00:41E3 D9 -  -  -  		exx
   84 00:41E4 -  -  -  -  
   85 00:41E4 C9 -  -  -  		ret
   86 00:41E5 -  -  -  -  
   87 00:41E5 -  -  -  -  ; ***************************************************************************************
   88 00:41E5 -  -  -  -  ;
   89 00:41E5 -  -  -  -  ;									Changes and Updates
   90 00:41E5 -  -  -  -  ;
   91 00:41E5 -  -  -  -  ; ***************************************************************************************
   92 00:41E5 -  -  -  -  ;
   93 00:41E5 -  -  -  -  ;		Date			Notes
   94 00:41E5 -  -  -  -  ;		==== 			=====
   95 00:41E5 -  -  -  -  ;
   96 00:41E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:41E5 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:41E5 -  -  -  -  ; ***************************************************************************************
    2 00:41E5 -  -  -  -  ; ***************************************************************************************
    3 00:41E5 -  -  -  -  ;
    4 00:41E5 -  -  -  -  ;		Name : 		print.asm
    5 00:41E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41E5 -  -  -  -  ;		Reviewed :	No
    8 00:41E5 -  -  -  -  ;		Purpose :	Print command
    9 00:41E5 -  -  -  -  ;
   10 00:41E5 -  -  -  -  ; ***************************************************************************************
   11 00:41E5 -  -  -  -  ; ***************************************************************************************
   12 00:41E5 -  -  -  -  
   13 00:41E5 -  -  -  -  ; ***************************************************************************************
   14 00:41E5 -  -  -  -  ;
   15 00:41E5 -  -  -  -  ;										PRINT command
   16 00:41E5 -  -  -  -  ;
   17 00:41E5 -  -  -  -  ; ***************************************************************************************
   18 00:41E5 -  -  -  -  
   19 00:41E5 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:41E5 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:41E7 32 77 40 -  		ld 		(PrintBase),a
   22 00:41EA -  -  -  -  		;
   23 00:41EA -  -  -  -  		;		Main loop
   24 00:41EA -  -  -  -  		;
   25 00:41EA -  -  -  -  _CPRLoop:
   26 00:41EA DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:41ED FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:41EF 28 57 -  -  		jr 		z,_CPRExitNL
   29 00:41F1 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:41F3 28 53 -  -  		jr 		z,_CPRExitNL
   31 00:41F5 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:41F7 28 3D -  -  		jr 		z,_CPRCheckNext10
   33 00:41F9 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:41FB 28 34 -  -  		jr 		z,_CPRTab
   35 00:41FD FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:41FF 28 2B -  -  		jr 		z,_CPRNewLine
   37 00:4201 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:4203 28 1E -  -  		jr 		z,_CPRHexMode
   39 00:4205 -  -  -  -  		;
   40 00:4205 CD ED 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:4208 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:420A 20 12 -  -  		jr 		nz,_CPRPrintHL
   43 00:420C -  -  -  -  		;
   44 00:420C 3A 77 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:420F -  -  -  -  _CPRPrintNumber:
   46 00:420F F5 -  -  -  		push 	af 							; print leading space
   47 00:4210 3E 20 -  -  		ld 		a,' '
   48 00:4212 CD B2 4C -  		call 	SYSPrintChar
   49 00:4215 F1 -  -  -  		pop 	af
   50 00:4216 01 95 40 -  		ld  	bc,ConvertBuffer
   51 00:4219 C5 -  -  -  		push 	bc
   52 00:421A CD 64 4C -  		call 	Int32ToString 				; convert to string
   53 00:421D E1 -  -  -  		pop 	hl
   54 00:421E -  -  -  -  		;
   55 00:421E -  -  -  -  		; 		Print text at HL.
   56 00:421E -  -  -  -  		;
   57 00:421E -  -  -  -  _CPRPrintHL:
   58 00:421E CD C1 47 -  		call 	PrintStringAtHL 			; print string out
   59 00:4221 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   60 00:4223 -  -  -  -  		;
   61 00:4223 -  -  -  -  		;		Hex mode (~)
   62 00:4223 -  -  -  -  		;
   63 00:4223 -  -  -  -  _CPRHexMode:		
   64 00:4223 3E 10 -  -  		ld 		a,16
   65 00:4225 32 77 40 -  		ld 		(PrintBase),a
   66 00:4228 DD 23 -  -  		inc 	ix
   67 00:422A 18 BE -  -  		jr 		_CPRLoop
   68 00:422C -  -  -  -  		;
   69 00:422C -  -  -  -  		; 		New line (')
   70 00:422C -  -  -  -  		;
   71 00:422C -  -  -  -  _CPRNewLine:
   72 00:422C CD CE 4C -  		call 	SYSPrintCRLF
   73 00:422F 18 0A -  -  		jr 		_CPRCheckNext
   74 00:4231 -  -  -  -  		;
   75 00:4231 -  -  -  -  		; 		Tab command (,)
   76 00:4231 -  -  -  -  		;
   77 00:4231 -  -  -  -  _CPRTab:
   78 00:4231 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   79 00:4233 CD B2 4C -  		call 	SYSPrintChar
   80 00:4236 -  -  -  -  		;
   81 00:4236 -  -  -  -  		;		Set to base 10 then check next character
   82 00:4236 -  -  -  -  		;
   83 00:4236 -  -  -  -  _CPRCheckNext10:		
   84 00:4236 3E F6 -  -  		ld 		a,-10
   85 00:4238 32 77 40 -  		ld 		(PrintBase),a
   86 00:423B -  -  -  -  		;
   87 00:423B -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   88 00:423B -  -  -  -  		;		
   89 00:423B -  -  -  -  _CPRCheckNext:
   90 00:423B DD 23 -  -  		inc 	ix 							; consume current
   91 00:423D DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   92 00:4240 FE 80 -  -  		cp 		KWC_EOL_MARKER
   93 00:4242 C8 -  -  -  		ret 	z
   94 00:4243 FE A7 -  -  		cp 		KWD_COLON
   95 00:4245 C8 -  -  -  		ret 	z
   96 00:4246 18 A2 -  -  		jr 		_CPRLoop 					; otherwise loop round
   97 00:4248 -  -  -  -  		;
   98 00:4248 -  -  -  -  		;		Found EOL or : not after ; ,
   99 00:4248 -  -  -  -  		;
  100 00:4248 -  -  -  -  _CPRExitNL:
  101 00:4248 CD CE 4C -  		call 	SYSPrintCRLF 				; do CR/LF
  102 00:424B C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:424C -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:424C -  -  -  -  ; ***************************************************************************************
    2 00:424C -  -  -  -  ; ***************************************************************************************
    3 00:424C -  -  -  -  ;
    4 00:424C -  -  -  -  ;		Name : 		rem.asm
    5 00:424C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:424C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:424C -  -  -  -  ;		Reviewed :	No
    8 00:424C -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:424C -  -  -  -  ;
   10 00:424C -  -  -  -  ; ***************************************************************************************
   11 00:424C -  -  -  -  ; ***************************************************************************************
   12 00:424C -  -  -  -  
   13 00:424C -  -  -  -  ; ***************************************************************************************
   14 00:424C -  -  -  -  ;
   15 00:424C -  -  -  -  ;							Comment command, can be ' or REM
   16 00:424C -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:424C -  -  -  -  ;
   18 00:424C -  -  -  -  ; ***************************************************************************************
   19 00:424C -  -  -  -  
   20 00:424C -  -  -  -  Command_REM: 	;; [rem]
   21 00:424C -  -  -  -  Command_REM2: 	;; [']
   22 00:424C DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:424F DD 23 -  -  		inc 	ix
   24 00:4251 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:4253 C8 -  -  -  		ret 	z
   26 00:4254 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:4256 C8 -  -  -  		ret 	z
   28 00:4257 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4259 C2 6B 43 -  		jp 		nz,SyntaxError
   30 00:425C -  -  -  -  		;		
   31 00:425C 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:425F DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4262 13 -  -  -  		inc 	de 
   34 00:4263 13 -  -  -  		inc 	de
   35 00:4264 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4266 C9 -  -  -  		ret
   37 00:4267 -  -  -  -  
   38 00:4267 -  -  -  -  ; ***************************************************************************************
   39 00:4267 -  -  -  -  ;
   40 00:4267 -  -  -  -  ;									Changes and Updates
   41 00:4267 -  -  -  -  ;
   42 00:4267 -  -  -  -  ; ***************************************************************************************
   43 00:4267 -  -  -  -  ;
   44 00:4267 -  -  -  -  ;		Date			Notes
   45 00:4267 -  -  -  -  ;		==== 			=====
   46 00:4267 -  -  -  -  ;
   47 00:4267 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:4267 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4267 -  -  -  -  ; ***************************************************************************************
    2 00:4267 -  -  -  -  ; ***************************************************************************************
    3 00:4267 -  -  -  -  ;
    4 00:4267 -  -  -  -  ;		Name : 		run.asm
    5 00:4267 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4267 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4267 -  -  -  -  ;		Reviewed :	No
    8 00:4267 -  -  -  -  ;		Purpose :	Run command
    9 00:4267 -  -  -  -  ;
   10 00:4267 -  -  -  -  ; ***************************************************************************************
   11 00:4267 -  -  -  -  ; ***************************************************************************************
   12 00:4267 -  -  -  -  
   13 00:4267 -  -  -  -  ; ***************************************************************************************
   14 00:4267 -  -  -  -  ;
   15 00:4267 -  -  -  -  ;										RUN command
   16 00:4267 -  -  -  -  ;
   17 00:4267 -  -  -  -  ; ***************************************************************************************
   18 00:4267 -  -  -  -  
   19 00:4267 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4267 CD 67 47 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:426A -  -  -  -  
   22 00:426A DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:426E ED 73 55 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4272 AF -  -  -  		xor 	a
   25 00:4273 32 75 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:4276 -  -  -  -  		;
   27 00:4276 -  -  -  -  		; 		New line at IX.
   28 00:4276 -  -  -  -  		;
   29 00:4276 -  -  -  -  CRNewLine:
   30 00:4276 DD 22 51 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:427A -  -  -  -  		;
   32 00:427A DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:427D B7 -  -  -  		or 		a
   34 00:427E CA 88 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4281 -  -  -  -  		;
   36 00:4281 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4283 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:4285 DD 23 -  -  		inc 	ix
   39 00:4287 -  -  -  -  		;
   40 00:4287 -  -  -  -  		; 		New command at IX
   41 00:4287 -  -  -  -  		;
   42 00:4287 -  -  -  -  _CRNewCommand:	
   43 00:4287 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:428A B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:428B F2 BF 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:428E -  -  -  -  		;
   47 00:428E FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:4290 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:4292 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:4294 D2 B0 42 -  		jp 		nc,_CRAlternateLets
   51 00:4297 -  -  -  -  		;
   52 00:4297 -  -  -  -  _CRDoCommand:		
   53 00:4297 E6 7F 21 00 
              00 6F 29 11 
              2C 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:42A9 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:42AB CD 59 40 -  		call 	JumpCode 					; call the routine.
   56 00:42AE 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:42B0 -  -  -  -  		;
   58 00:42B0 -  -  -  -  		; 		Do CALL (HL)
   59 00:42B0 -  -  -  -  		;
   60 00:42B0 -  -  -  -  		;
   61 00:42B0 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:42B0 -  -  -  -  		;		
   63 00:42B0 -  -  -  -  _CRAlternateLets:		
   64 00:42B0 FE 83 -  -  		cp 		KWD_PLING
   65 00:42B2 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:42B4 FE 84 -  -  		cp 		KWD_QMARK
   67 00:42B6 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:42B8 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42BA 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42BC C3 6B 43 -  		jp 		SyntaxError
   71 00:42BF -  -  -  -  		;
   72 00:42BF -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42BF -  -  -  -  		;
   74 00:42BF -  -  -  -  _CRAssignmentHandler:		
   75 00:42BF FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42C1 D2 6B 43 -  		jp 		nc,SyntaxError
   77 00:42C4 -  -  -  -  _CRAssignmentLet:		
   78 00:42C4 CD A0 41 -  		call	Command_LET 				; do LET.
   79 00:42C7 C3 87 42 -  		jp 		_CRNewCommand
   80 00:42CA -  -  -  -  
   81 00:42CA -  -  -  -  ; ***************************************************************************************
   82 00:42CA -  -  -  -  ;
   83 00:42CA -  -  -  -  ;									Changes and Updates
   84 00:42CA -  -  -  -  ;
   85 00:42CA -  -  -  -  ; ***************************************************************************************
   86 00:42CA -  -  -  -  ;
   87 00:42CA -  -  -  -  ;		Date			Notes
   88 00:42CA -  -  -  -  ;		==== 			=====
   89 00:42CA -  -  -  -  ;
   90 00:42CA -  -  -  -  ; ***************************************************************************************
   91 00:42CA -  -  -  -  		
Listing for file "_build.asm"
   23 00:42CA -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42CA -  -  -  -  ; ***************************************************************************************
    2 00:42CA -  -  -  -  ; ***************************************************************************************
    3 00:42CA -  -  -  -  ;
    4 00:42CA -  -  -  -  ;		Name : 		stop.asm
    5 00:42CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CA -  -  -  -  ;		Reviewed :	No
    8 00:42CA -  -  -  -  ;		Purpose :	Stop command
    9 00:42CA -  -  -  -  ;
   10 00:42CA -  -  -  -  ; ***************************************************************************************
   11 00:42CA -  -  -  -  ; ***************************************************************************************
   12 00:42CA -  -  -  -  
   13 00:42CA -  -  -  -  ; ***************************************************************************************
   14 00:42CA -  -  -  -  ;
   15 00:42CA -  -  -  -  ;										STOP command
   16 00:42CA -  -  -  -  ;
   17 00:42CA -  -  -  -  ; ***************************************************************************************
   18 00:42CA -  -  -  -  
   19 00:42CA -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42CA 3E 0D C3 0E 
              43 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42CF -  -  -  -  
   22 00:42CF -  -  -  -  ; ***************************************************************************************
   23 00:42CF -  -  -  -  ;
   24 00:42CF -  -  -  -  ;									Changes and Updates
   25 00:42CF -  -  -  -  ;
   26 00:42CF -  -  -  -  ; ***************************************************************************************
   27 00:42CF -  -  -  -  ;
   28 00:42CF -  -  -  -  ;		Date			Notes
   29 00:42CF -  -  -  -  ;		==== 			=====
   30 00:42CF -  -  -  -  ;
   31 00:42CF -  -  -  -  ; ***************************************************************************************
   32 00:42CF -  -  -  -  		
Listing for file "_build.asm"
   24 00:42CF -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:42CF -  -  -  -  ; ***************************************************************************************
    2 00:42CF -  -  -  -  ; ***************************************************************************************
    3 00:42CF -  -  -  -  ;
    4 00:42CF -  -  -  -  ;		Name : 		charcheck.asm
    5 00:42CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CF -  -  -  -  ;		Reviewed :	No
    8 00:42CF -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:42CF -  -  -  -  ;
   10 00:42CF -  -  -  -  ; ***************************************************************************************
   11 00:42CF -  -  -  -  ; ***************************************************************************************
   12 00:42CF -  -  -  -  
   13 00:42CF -  -  -  -  ; ***************************************************************************************
   14 00:42CF -  -  -  -  ;
   15 00:42CF -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:42CF -  -  -  -  ;
   17 00:42CF -  -  -  -  ; ***************************************************************************************
   18 00:42CF -  -  -  -  
   19 00:42CF -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:42CF             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:42CF             		inc 	ix
   22 00:42CF             		cp 		ch 							; exit if matches
   23 00:42CF             		ret 	z
   24 00:42CF             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:42CF             		jp 		ErrorHandler
   26 00:42CF             #endmacro
   27 00:42CF -  -  -  -  
   28 00:42CF -  -  -  -  CheckLeftBracket:
   29 00:42CF DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 0E 
              43 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:42DC -  -  -  -  
   31 00:42DC -  -  -  -  CheckRightBracket:
   32 00:42DC DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 0E 
              43 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:42E9 -  -  -  -  
   34 00:42E9 -  -  -  -  CheckDollar:
   35 00:42E9 DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 0E 
              43 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:42F6 -  -  -  -  		
   37 00:42F6 -  -  -  -  CheckComma:
   38 00:42F6 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 0E 
              43 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4303 -  -  -  -  
   40 00:4303 -  -  -  -  ; ***************************************************************************************
   41 00:4303 -  -  -  -  ;
   42 00:4303 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4303 -  -  -  -  ;
   44 00:4303 -  -  -  -  ; ***************************************************************************************
   45 00:4303 -  -  -  -  
   46 00:4303 -  -  -  -  CheckNextA:
   47 00:4303 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:4306 DD 23 -  -  		inc 	ix 							; skip character
   49 00:4308 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:4309 3E 0E C3 0E 
              43 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:430E -  -  -  -  		
   52 00:430E -  -  -  -  ; ***************************************************************************************
   53 00:430E -  -  -  -  ;
   54 00:430E -  -  -  -  ;									Changes and Updates
   55 00:430E -  -  -  -  ;
   56 00:430E -  -  -  -  ; ***************************************************************************************
   57 00:430E -  -  -  -  ;
   58 00:430E -  -  -  -  ;		Date			Notes
   59 00:430E -  -  -  -  ;		==== 			=====
   60 00:430E -  -  -  -  ;
   61 00:430E -  -  -  -  ; ***************************************************************************************
   62 00:430E -  -  -  -  		
Listing for file "_build.asm"
   25 00:430E -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:430E -  -  -  -  ; ***************************************************************************************
    2 00:430E -  -  -  -  ; ***************************************************************************************
    3 00:430E -  -  -  -  ;
    4 00:430E -  -  -  -  ;		Name : 		errors.asm
    5 00:430E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:430E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:430E -  -  -  -  ;		Reviewed :	No
    8 00:430E -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:430E -  -  -  -  ;
   10 00:430E -  -  -  -  ; ***************************************************************************************
   11 00:430E -  -  -  -  ; ***************************************************************************************
   12 00:430E -  -  -  -  
   13 00:430E -  -  -  -  ; ***************************************************************************************
   14 00:430E -  -  -  -  ;
   15 00:430E -  -  -  -  ;								Error handler, message A 
   16 00:430E -  -  -  -  ;
   17 00:430E -  -  -  -  ; ***************************************************************************************
   18 00:430E -  -  -  -  
   19 00:430E -  -  -  -  ErrorHandler:
   20 00:430E F5 -  -  -  		push 	af 						; save error ID
   21 00:430F -  -  -  -  
   22 00:430F 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4312 6F -  -  -  		ld 		l,a
   24 00:4313 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4314 29 -  -  -  		add 	hl,hl 		
   26 00:4315 11 F1 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4318 19 -  -  -  		add 	hl,de
   28 00:4319 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:431D CD C1 47 -  		call 	PrintStringAtHL
   30 00:4320 -  -  -  -  		;
   31 00:4320 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4321 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4322 28 28 -  -  		jr 		z,_EHExit
   34 00:4324 -  -  -  -  		;
   35 00:4324 DD 2A 51 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:4328 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:432B B7 -  -  -  		or 		a
   38 00:432C 28 1E -  -  		jr 		z,_EHExit
   39 00:432E -  -  -  -  
   40 00:432E 21 52 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4331 CD C1 47 -  		call 	PrintStringAtHL 
   42 00:4334 -  -  -  -  		
   43 00:4334 D9 -  -  -  		exx								; HL'HL = line number
   44 00:4335 21 00 00 -  		ld 		hl,$0000 		
   45 00:4338 D9 -  -  -  		exx 
   46 00:4339 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:433C DD 66 02 -  		ld 		h,(ix+2)
   48 00:433F 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4341 01 95 40 -  		ld 		bc,ConvertBuffer
   50 00:4344 CD 64 4C -  		call 	Int32ToString
   51 00:4347 C5 -  -  -  		push 	bc
   52 00:4348 E1 -  -  -  		pop 	hl
   53 00:4349 CD C1 47 -  		call 	PrintStringAtHL			; print error line number.
   54 00:434C -  -  -  -  _EHExit:		
   55 00:434C CD CE 4C -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:434F C3 17 40 -  		jp 		WarmStart
   57 00:4352 -  -  -  -  
   58 00:4352 -  -  -  -  _EHAtText:
   59 00:4352 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:435C -  -  -  -  
   61 00:435C -  -  -  -  NotImplemented:
   62 00:435C 3E 05 C3 0E 
              43 -  -  -  		ERR_DISABLED
   63 00:4361 -  -  -  -  TypeMismatch:
   64 00:4361 3E 02 C3 0E 
              43 -  -  -  		ERR_BADTYPE
   65 00:4366 -  -  -  -  BadValue:
   66 00:4366 3E 03 C3 0E 
              43 -  -  -  		ERR_BADVALUE
   67 00:436B -  -  -  -  SyntaxError:
   68 00:436B 3E 0E C3 0E 
              43 -  -  -  		ERR_SYNTAX
   69 00:4370 -  -  -  -  						
   70 00:4370 -  -  -  -  ; ***************************************************************************************
   71 00:4370 -  -  -  -  ;
   72 00:4370 -  -  -  -  ;									Changes and Updates
   73 00:4370 -  -  -  -  ;
   74 00:4370 -  -  -  -  ; ***************************************************************************************
   75 00:4370 -  -  -  -  ;
   76 00:4370 -  -  -  -  ;		Date			Notes
   77 00:4370 -  -  -  -  ;		==== 			=====
   78 00:4370 -  -  -  -  ;
   79 00:4370 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:4370 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4370 -  -  -  -  ; ***************************************************************************************
    2 00:4370 -  -  -  -  ; ***************************************************************************************
    3 00:4370 -  -  -  -  ;
    4 00:4370 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4370 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4370 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4370 -  -  -  -  ;		Reviewed :	No
    8 00:4370 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4370 -  -  -  -  ;
   10 00:4370 -  -  -  -  ; ***************************************************************************************
   11 00:4370 -  -  -  -  ; ***************************************************************************************
   12 00:4370 -  -  -  -  
   13 00:4370 -  -  -  -  ; ***************************************************************************************
   14 00:4370 -  -  -  -  ;
   15 00:4370 -  -  -  -  ; 									Addition
   16 00:4370 -  -  -  -  ;
   17 00:4370 -  -  -  -  ; ***************************************************************************************
   18 00:4370 -  -  -  -  
   19 00:4370 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4370 CD 63 44 78 
              B1 C2 61 43 
              C3 F1 4B -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:437B -  -  -  -  
   22 00:437B -  -  -  -  ; ***************************************************************************************
   23 00:437B -  -  -  -  ;
   24 00:437B -  -  -  -  ; 									Subtraction
   25 00:437B -  -  -  -  ;
   26 00:437B -  -  -  -  ; ***************************************************************************************
   27 00:437B -  -  -  -  
   28 00:437B -  -  -  -  ALUSubtract: 	;; [-]
   29 00:437B CD 63 44 78 
              B1 C2 61 43 
              C3 F7 4B -  		IntegerDispatch(Int32Subtract)
   30 00:4386 -  -  -  -  
   31 00:4386 -  -  -  -  ; ***************************************************************************************
   32 00:4386 -  -  -  -  ;
   33 00:4386 -  -  -  -  ; 									  Multiply
   34 00:4386 -  -  -  -  ;
   35 00:4386 -  -  -  -  ; ***************************************************************************************
   36 00:4386 -  -  -  -  
   37 00:4386 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:4386 CD 63 44 78 
              B1 C2 61 43 
              C3 BB 4B -  		IntegerDispatch(Int32Multiply)
   39 00:4391 -  -  -  -  
   40 00:4391 -  -  -  -  ; ***************************************************************************************
   41 00:4391 -  -  -  -  ;
   42 00:4391 -  -  -  -  ; 									  Divide
   43 00:4391 -  -  -  -  ;
   44 00:4391 -  -  -  -  ; ***************************************************************************************
   45 00:4391 -  -  -  -  
   46 00:4391 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4391 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4391 CD 63 44 78 
              B1 C2 61 43 
              C3 CC 4A -  		IntegerDispatch(Int32SDivide)
   49 00:439C -  -  -  -  
   50 00:439C -  -  -  -  ; ***************************************************************************************
   51 00:439C -  -  -  -  ;
   52 00:439C -  -  -  -  ; 									  Modulus
   53 00:439C -  -  -  -  ;
   54 00:439C -  -  -  -  ; ***************************************************************************************
   55 00:439C -  -  -  -  
   56 00:439C -  -  -  -  ALUModulus: 	;; [mod]
   57 00:439C CD 63 44 78 
              B1 C2 61 43 
              C3 CF 4A -  		IntegerDispatch(Int32Modulus)
   58 00:43A7 -  -  -  -  
   59 00:43A7 -  -  -  -  ; ***************************************************************************************
   60 00:43A7 -  -  -  -  ;
   61 00:43A7 -  -  -  -  ; 									  Logical
   62 00:43A7 -  -  -  -  ;
   63 00:43A7 -  -  -  -  ; ***************************************************************************************
   64 00:43A7 -  -  -  -  
   65 00:43A7 -  -  -  -  ALUAnd: 		;; [and]
   66 00:43A7 CD 63 44 78 
              B1 C2 61 43 
              C3 FF 4B -  		IntegerDispatch(Int32And)
   67 00:43B2 -  -  -  -  
   68 00:43B2 -  -  -  -  ALUOr: 			;; [or]
   69 00:43B2 CD 63 44 78 
              B1 C2 61 43 
              C3 0B 4C -  		IntegerDispatch(Int32Or)
   70 00:43BD -  -  -  -  
   71 00:43BD -  -  -  -  ALUXor: 		;; [eor]
   72 00:43BD CD 63 44 78 
              B1 C2 61 43 
              C3 17 4C -  		IntegerDispatch(Int32Xor)
   73 00:43C8 -  -  -  -  
   74 00:43C8 -  -  -  -  ; ***************************************************************************************
   75 00:43C8 -  -  -  -  ;
   76 00:43C8 -  -  -  -  ;									Changes and Updates
   77 00:43C8 -  -  -  -  ;
   78 00:43C8 -  -  -  -  ; ***************************************************************************************
   79 00:43C8 -  -  -  -  ;
   80 00:43C8 -  -  -  -  ;		Date			Notes
   81 00:43C8 -  -  -  -  ;		==== 			=====
   82 00:43C8 -  -  -  -  ;
   83 00:43C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:43C8 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:43C8 -  -  -  -  ; ***************************************************************************************
    2 00:43C8 -  -  -  -  ; ***************************************************************************************
    3 00:43C8 -  -  -  -  ;
    4 00:43C8 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:43C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43C8 -  -  -  -  ;		Reviewed :	No
    8 00:43C8 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:43C8 -  -  -  -  ;
   10 00:43C8 -  -  -  -  ; ***************************************************************************************
   11 00:43C8 -  -  -  -  ; ***************************************************************************************
   12 00:43C8 -  -  -  -  
   13 00:43C8 -  -  -  -  ; ***************************************************************************************
   14 00:43C8 -  -  -  -  ;
   15 00:43C8 -  -  -  -  ; 									<l> <op> <r>
   16 00:43C8 -  -  -  -  ;
   17 00:43C8 -  -  -  -  ; ***************************************************************************************
   18 00:43C8 -  -  -  -  
   19 00:43C8 -  -  -  -  ALULongReference:			;; [!]
   20 00:43C8 CD D6 43 -  		call 	BRGetAddress 				; calculate address
   21 00:43CB 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:43CD CB F9 -  -  		set 	CIsReference,c
   23 00:43CF C9 -  -  -  		ret
   24 00:43D0 -  -  -  -  
   25 00:43D0 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:43D0 CD C8 43 -  		call 	ALULongReference
   27 00:43D3 CB F1 -  -  		set 	CIsByteReference,c
   28 00:43D5 C9 -  -  -  		ret
   29 00:43D6 -  -  -  -  
   30 00:43D6 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:43D6 CD 63 44 78 
              B1 C2 61 43 
              C3 E1 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:43E1 -  -  -  -  _BRGAMain:		
   33 00:43E1 CD F1 4B -  		call 	Int32Add 					; address in HL'HL
   34 00:43E4 CD 4C 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:43E7 C9 -  -  -  		ret
   36 00:43E8 -  -  -  -  
   37 00:43E8 -  -  -  -  ; ***************************************************************************************
   38 00:43E8 -  -  -  -  ;
   39 00:43E8 -  -  -  -  ;									Changes and Updates
   40 00:43E8 -  -  -  -  ;
   41 00:43E8 -  -  -  -  ; ***************************************************************************************
   42 00:43E8 -  -  -  -  ;
   43 00:43E8 -  -  -  -  ;		Date			Notes
   44 00:43E8 -  -  -  -  ;		==== 			=====
   45 00:43E8 -  -  -  -  ;
   46 00:43E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43E8 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:43E8 -  -  -  -  ; ***************************************************************************************
    2 00:43E8 -  -  -  -  ; ***************************************************************************************
    3 00:43E8 -  -  -  -  ;
    4 00:43E8 -  -  -  -  ;		Name : 		compare.asm
    5 00:43E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43E8 -  -  -  -  ;		Reviewed :	No
    8 00:43E8 -  -  -  -  ;		Purpose :	Comparison code
    9 00:43E8 -  -  -  -  ;
   10 00:43E8 -  -  -  -  ; ***************************************************************************************
   11 00:43E8 -  -  -  -  ; ***************************************************************************************
   12 00:43E8 -  -  -  -  
   13 00:43E8 -  -  -  -  #macro compare_equals(n)
   14 00:43E8             		call 	CompareBaseCode
   15 00:43E8             		cp 		n
   16 00:43E8             		jr 		z,UnaryInt32True
   17 00:43E8             		jr 		UnaryInt32False
   18 00:43E8             #endmacro
   19 00:43E8 -  -  -  -  
   20 00:43E8 -  -  -  -  #macro compare_not_equals(n)
   21 00:43E8             		call 	CompareBaseCode
   22 00:43E8             		cp 		n
   23 00:43E8             		jr 		nz,UnaryInt32True
   24 00:43E8             		jr 		UnaryInt32False
   25 00:43E8             #endmacro
   26 00:43E8 -  -  -  -  
   27 00:43E8 -  -  -  -  ; ***************************************************************************************
   28 00:43E8 -  -  -  -  ;
   29 00:43E8 -  -  -  -  ; 								Return True/False
   30 00:43E8 -  -  -  -  ;
   31 00:43E8 -  -  -  -  ; ***************************************************************************************
   32 00:43E8 -  -  -  -  
   33 00:43E8 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:43E8 3E FF -  -  		ld 		a,255
   35 00:43EA 18 01 -  -  		jr 		_Int32Logical
   36 00:43EC -  -  -  -  UnaryInt32False: ;; [false]
   37 00:43EC AF -  -  -  		xor 	a
   38 00:43ED -  -  -  -  _Int32Logical:
   39 00:43ED 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:43EE 67 -  -  -  		ld 		h,a
   41 00:43EF D9 -  -  -  		exx
   42 00:43F0 6F -  -  -  		ld 		l,a
   43 00:43F1 67 -  -  -  		ld 		h,a
   44 00:43F2 D9 -  -  -  		exx
   45 00:43F3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:43F5 C9 -  -  -  		ret
   47 00:43F6 -  -  -  -  
   48 00:43F6 -  -  -  -  ; ***************************************************************************************
   49 00:43F6 -  -  -  -  ;
   50 00:43F6 -  -  -  -  ; 										> = < (compare == value)
   51 00:43F6 -  -  -  -  ;
   52 00:43F6 -  -  -  -  ; ***************************************************************************************
   53 00:43F6 -  -  -  -  
   54 00:43F6 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:43F6 CD 2C 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:43FF -  -  -  -  
   57 00:43FF -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:43FF CD 2C 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:4408 -  -  -  -  
   60 00:4408 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:4408 CD 2C 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4411 -  -  -  -  
   63 00:4411 -  -  -  -  ; ***************************************************************************************
   64 00:4411 -  -  -  -  ;
   65 00:4411 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4411 -  -  -  -  ;
   67 00:4411 -  -  -  -  ; ***************************************************************************************
   68 00:4411 -  -  -  -  
   69 00:4411 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4411 CD 2C 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:441A -  -  -  -  
   72 00:441A -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:441A CD 2C 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4423 -  -  -  -  
   75 00:4423 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4423 CD 2C 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:442C -  -  -  -  
   78 00:442C -  -  -  -  ; ***************************************************************************************
   79 00:442C -  -  -  -  ;
   80 00:442C -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:442C -  -  -  -  ;
   82 00:442C -  -  -  -  ; ***************************************************************************************
   83 00:442C -  -  -  -  
   84 00:442C -  -  -  -  CompareBaseCode:
   85 00:442C CD 63 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:442F -  -  -  -  
   87 00:442F 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4430 A1 -  -  -  		and 	c
   89 00:4431 CB 47 -  -  		bit 	CIsString,a 
   90 00:4433 C2 42 44 -  		jp 		nz,StringCompare
   91 00:4436 -  -  -  -  
   92 00:4436 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:4437 B1 -  -  -  		or 		c
   94 00:4438 CB 47 -  -  		bit 	CIsString,a 
   95 00:443A CA 2A 4C -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:443D -  -  -  -  
   97 00:443D 3E 02 C3 0E 
              43 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4442 -  -  -  -  ;
   99 00:4442 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4442 -  -  -  -  ;
  101 00:4442 -  -  -  -  StringCompare:
  102 00:4442 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4443 BE -  -  -  		cp 		(hl)
  104 00:4444 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:4446 20 08 -  -  		jr 		nz,_SCLess
  106 00:4448 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4449 23 -  -  -  		inc 	hl
  108 00:444A FE 20 -  -  		cp 		' '
  109 00:444C 30 F4 -  -  		jr 		nc,StringCompare
  110 00:444E AF -  -  -  		xor 	a 							; return 0.
  111 00:444F C9 -  -  -  		ret
  112 00:4450 -  -  -  -  
  113 00:4450 -  -  -  -  _SCLess:
  114 00:4450 3E FF -  -  		ld 		a,$FF
  115 00:4452 C9 -  -  -  		ret
  116 00:4453 -  -  -  -  _SCGreater:
  117 00:4453 3E 01 -  -  		ld 		a,1
  118 00:4455 C9 -  -  -  		ret
  119 00:4456 -  -  -  -  
  120 00:4456 3E 0F C3 0E 
              43 -  -  -  		ERR_TODO()
  121 00:445B -  -  -  -  
  122 00:445B -  -  -  -  ; ***************************************************************************************
  123 00:445B -  -  -  -  ;
  124 00:445B -  -  -  -  ;									Changes and Updates
  125 00:445B -  -  -  -  ;
  126 00:445B -  -  -  -  ; ***************************************************************************************
  127 00:445B -  -  -  -  ;
  128 00:445B -  -  -  -  ;		Date			Notes
  129 00:445B -  -  -  -  ;		==== 			=====
  130 00:445B -  -  -  -  ;
  131 00:445B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:445B -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:445B -  -  -  -  ; ***************************************************************************************
    2 00:445B -  -  -  -  ; ***************************************************************************************
    3 00:445B -  -  -  -  ;
    4 00:445B -  -  -  -  ;		Name : 		utility.asm
    5 00:445B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:445B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:445B -  -  -  -  ;		Reviewed :	No
    8 00:445B -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:445B -  -  -  -  ;
   10 00:445B -  -  -  -  ; ***************************************************************************************
   11 00:445B -  -  -  -  ; ***************************************************************************************
   12 00:445B -  -  -  -  
   13 00:445B -  -  -  -  ; ***************************************************************************************
   14 00:445B -  -  -  -  ;
   15 00:445B -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:445B -  -  -  -  ;
   17 00:445B -  -  -  -  ; ***************************************************************************************
   18 00:445B -  -  -  -  
   19 00:445B -  -  -  -  SwapHLDE:
   20 00:445B EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:445C D9 -  -  -  			exx
   22 00:445D EB -  -  -  			ex 		de,hl
   23 00:445E D9 -  -  -  			exx
   24 00:445F 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4460 41 -  -  -  			ld 		b,c
   26 00:4461 4F -  -  -  			ld 		c,a
   27 00:4462 C9 -  -  -  			ret
   28 00:4463 -  -  -  -  
   29 00:4463 -  -  -  -  ; ***************************************************************************************
   30 00:4463 -  -  -  -  ;
   31 00:4463 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:4463 -  -  -  -  ;
   33 00:4463 -  -  -  -  ; ***************************************************************************************
   34 00:4463 -  -  -  -  
   35 00:4463 -  -  -  -  DereferenceBoth:
   36 00:4463 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:4465 C4 1E 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:4468 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:446A C8 -  -  -  			ret 	z
   40 00:446B CD 5B 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:446E CD 1E 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4471 CD 5B 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4474 C9 -  -  -  			ret
   44 00:4475 -  -  -  -  
   45 00:4475 -  -  -  -  ; ***************************************************************************************
   46 00:4475 -  -  -  -  ;
   47 00:4475 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:4475 -  -  -  -  ;
   49 00:4475 -  -  -  -  ; ***************************************************************************************
   50 00:4475 -  -  -  -  
   51 00:4475 -  -  -  -  NegateHLHL:	
   52 00:4475 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:4477 C2 61 43 -  			jp 		nz,TypeMismatch
   54 00:447A CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:447C C4 1E 45 -  			call 	nz,Dereference 			; if required.
   56 00:447F CD 51 4C -  			call 	Int32Negate
   57 00:4482 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:4483 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4483 -  -  -  -  ; ***************************************************************************************
    2 00:4483 -  -  -  -  ; ***************************************************************************************
    3 00:4483 -  -  -  -  ;
    4 00:4483 -  -  -  -  ;		Name : 		expression.asm
    5 00:4483 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4483 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4483 -  -  -  -  ;		Reviewed :	None
    8 00:4483 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4483 -  -  -  -  ;
   10 00:4483 -  -  -  -  ; ***************************************************************************************
   11 00:4483 -  -  -  -  ; ***************************************************************************************
   12 00:4483 -  -  -  -  
   13 00:4483 -  -  -  -  ; ***************************************************************************************
   14 00:4483 -  -  -  -  ;
   15 00:4483 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4483 -  -  -  -  ;
   17 00:4483 -  -  -  -  ; ***************************************************************************************
   18 00:4483 -  -  -  -  
   19 00:4483 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4483 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4484 -  -  -  -  EvaluateAtPrecedence:
   22 00:4484 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:4485 -  -  -  -  		;
   24 00:4485 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:4485 -  -  -  -  		;
   26 00:4485 CD 4E 45 -  		call 	EvaluateTerm 				; get term
   27 00:4488 -  -  -  -  		;
   28 00:4488 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4488 -  -  -  -  		;
   30 00:4488 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4489 -  -  -  -  _EAPLoop:
   32 00:4489 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:448C FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:448E D8 -  -  -  		ret 	c
   35 00:448F FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4491 D0 -  -  -  		ret 	nc
   37 00:4492 -  -  -  -  		;
   38 00:4492 -  -  -  -  		; 		Get the precedence.
   39 00:4492 -  -  -  -  		;
   40 00:4492 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:4493 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:4495 21 E0 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4498 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4499 6F -  -  -  		ld 		l,a
   45 00:449A 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:449B E1 -  -  -  		pop 	hl 							; restore HL
   47 00:449C -  -  -  -  		;
   48 00:449C -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:449C -  -  -  -  		;
   50 00:449C 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:449D BB -  -  -  		cp 		e
   52 00:449E D0 -  -  -  		ret 	nc
   53 00:449F -  -  -  -  
   54 00:449F -  -  -  -  		;
   55 00:449F -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:449F -  -  -  -  		;
   57 00:449F D5 -  -  -  		push 	de 							; save precedence information.
   58 00:44A0 -  -  -  -  		;
   59 00:44A0 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:44A3 F5 -  -  -  		push 	af
   61 00:44A4 -  -  -  -  		;
   62 00:44A4 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:44A5 D9 -  -  -  		exx 								; save HL'
   64 00:44A6 E5 -  -  -  		push 	hl
   65 00:44A7 D9 -  -  -  		exx 								
   66 00:44A8 E5 -  -  -  		push 	hl 							; save HL
   67 00:44A9 -  -  -  -  		;
   68 00:44A9 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:44AB -  -  -  -  		;
   70 00:44AB -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:44AB -  -  -  -  		;
   72 00:44AB 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:44AC CD 84 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:44AF -  -  -  -  		;
   75 00:44AF -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:44AF -  -  -  -  		;
   77 00:44AF 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:44B0 -  -  -  -  
   79 00:44B0 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:44B1 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:44B2 D9 -  -  -  		exx
   82 00:44B3 EB -  -  -  		ex 		de,hl
   83 00:44B4 E1 -  -  -  		pop 	hl
   84 00:44B5 D9 -  -  -  		exx
   85 00:44B6 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:44B7 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:44B8 -  -  -  -  		;
   88 00:44B8 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:44B8 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:44B8 -  -  -  -  		;
   91 00:44B8 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:44B9 -  -  -  -  		;
   93 00:44B9 -  -  -  -  		; 		Call the binary operator in A.
   94 00:44B9 -  -  -  -  		;
   95 00:44B9 D5 -  -  -  		push 	de
   96 00:44BA E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:44BB E6 7F 21 00 
              00 6F 29 11 
              2C 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:44CD E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:44CE D1 -  -  -  		pop 	de 							; restore DE
  100 00:44CF CD 59 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:44D2 -  -  -  -  		;
  102 00:44D2 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:44D3 -  -  -  -  		;
  104 00:44D3 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:44D5 -  -  -  -  
  106 00:44D5 -  -  -  -  ; ***************************************************************************************
  107 00:44D5 -  -  -  -  ;
  108 00:44D5 -  -  -  -  ;									Changes and Updates
  109 00:44D5 -  -  -  -  ;
  110 00:44D5 -  -  -  -  ; ***************************************************************************************
  111 00:44D5 -  -  -  -  ;
  112 00:44D5 -  -  -  -  ;		Date			Notes
  113 00:44D5 -  -  -  -  ;		==== 			=====
  114 00:44D5 -  -  -  -  ;
  115 00:44D5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:44D5 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:44D5 -  -  -  -  ; ***************************************************************************************
    2 00:44D5 -  -  -  -  ; ***************************************************************************************
    3 00:44D5 -  -  -  -  ;
    4 00:44D5 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:44D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44D5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44D5 -  -  -  -  ;		Reviewed :	No
    8 00:44D5 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:44D5 -  -  -  -  ;
   10 00:44D5 -  -  -  -  ; ***************************************************************************************
   11 00:44D5 -  -  -  -  ; ***************************************************************************************
   12 00:44D5 -  -  -  -  
   13 00:44D5 -  -  -  -  ; ***************************************************************************************
   14 00:44D5 -  -  -  -  ;
   15 00:44D5 -  -  -  -  ; 								Evaluate an integer term
   16 00:44D5 -  -  -  -  ;
   17 00:44D5 -  -  -  -  ; ***************************************************************************************
   18 00:44D5 -  -  -  -  
   19 00:44D5 -  -  -  -  EvaluateIntegerTerm:
   20 00:44D5 CD 4E 45 -  		call 	EvaluateTerm
   21 00:44D8 CD 1E 45 -  		call 	DeReference
   22 00:44DB CB 41 -  -  		bit 	CIsString,c
   23 00:44DD C8 -  -  -  		ret 	z
   24 00:44DE C3 61 43 -  		jp 		TypeMismatch
   25 00:44E1 -  -  -  -  
   26 00:44E1 -  -  -  -  ; ***************************************************************************************
   27 00:44E1 -  -  -  -  ;
   28 00:44E1 -  -  -  -  ; 								Evaluate a string term
   29 00:44E1 -  -  -  -  ;
   30 00:44E1 -  -  -  -  ; ***************************************************************************************
   31 00:44E1 -  -  -  -  
   32 00:44E1 -  -  -  -  EvaluateStringTerm:
   33 00:44E1 CD 4E 45 -  		call 	EvaluateTerm
   34 00:44E4 CD 1E 45 -  		call 	DeReference
   35 00:44E7 CB 41 -  -  		bit 	CIsString,c
   36 00:44E9 C0 -  -  -  		ret 	nz
   37 00:44EA C3 61 43 -  		jp 		TypeMismatch
   38 00:44ED -  -  -  -  
   39 00:44ED -  -  -  -  ; ***************************************************************************************
   40 00:44ED -  -  -  -  ;
   41 00:44ED -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:44ED -  -  -  -  ;
   43 00:44ED -  -  -  -  ; ***************************************************************************************
   44 00:44ED -  -  -  -  
   45 00:44ED -  -  -  -  EvaluateValue:
   46 00:44ED CD 83 44 -  		call 	EvaluateAtPrecedence0
   47 00:44F0 C3 1E 45 -  		jp 		Dereference
   48 00:44F3 -  -  -  -  
   49 00:44F3 -  -  -  -  ; ***************************************************************************************
   50 00:44F3 -  -  -  -  ;
   51 00:44F3 -  -  -  -  ; 									Evaluate a number
   52 00:44F3 -  -  -  -  ;
   53 00:44F3 -  -  -  -  ; ***************************************************************************************
   54 00:44F3 -  -  -  -  
   55 00:44F3 -  -  -  -  EvaluateInteger:
   56 00:44F3 CD ED 44 -  		call 	EvaluateValue
   57 00:44F6 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:44F8 C8 -  -  -  		ret 	z
   59 00:44F9 C3 61 43 -  		jp 		TypeMismatch
   60 00:44FC -  -  -  -  
   61 00:44FC -  -  -  -  ; ***************************************************************************************
   62 00:44FC -  -  -  -  ;
   63 00:44FC -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:44FC -  -  -  -  ;
   65 00:44FC -  -  -  -  ; ***************************************************************************************
   66 00:44FC -  -  -  -  
   67 00:44FC -  -  -  -  Evaluate8BitInteger:
   68 00:44FC CD F3 44 -  		call 	EvaluateInteger
   69 00:44FF D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4500 7C -  -  -  		ld 		a,h
   71 00:4501 B5 -  -  -  		or 		l
   72 00:4502 D9 -  -  -  		exx 	
   73 00:4503 B4 -  -  -  		or 		h
   74 00:4504 C2 66 43 -  		jp 		nz,BadValue
   75 00:4507 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:4508 C9 -  -  -  		ret
   77 00:4509 -  -  -  -  		
   78 00:4509 -  -  -  -  ; ***************************************************************************************
   79 00:4509 -  -  -  -  ;
   80 00:4509 -  -  -  -  ; 									Evaluate a string
   81 00:4509 -  -  -  -  ;
   82 00:4509 -  -  -  -  ; ***************************************************************************************
   83 00:4509 -  -  -  -  
   84 00:4509 -  -  -  -  EvaluateStringOnly:
   85 00:4509 CD ED 44 -  		call 	EvaluateValue
   86 00:450C CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:450E CA 61 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4511 C9 -  -  -  		ret
   89 00:4512 -  -  -  -  
   90 00:4512 -  -  -  -  ; ***************************************************************************************
   91 00:4512 -  -  -  -  ;
   92 00:4512 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4512 -  -  -  -  ;
   94 00:4512 -  -  -  -  ; ***************************************************************************************
   95 00:4512 -  -  -  -  
   96 00:4512 -  -  -  -  Return8BitConstant:
   97 00:4512 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:4515 6F -  -  -  		ld 		l,a
   99 00:4516 -  -  -  -  Return16BitConstant:
  100 00:4516 D9 -  -  -  		exx 								; clear HL'
  101 00:4517 21 00 00 -  		ld 		hl,0
  102 00:451A D9 -  -  -  		exx
  103 00:451B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:451D C9 -  -  -  		ret
  105 00:451E -  -  -  -  
  106 00:451E -  -  -  -  ; ***************************************************************************************
  107 00:451E -  -  -  -  ;
  108 00:451E -  -  -  -  ;									Changes and Updates
  109 00:451E -  -  -  -  ;
  110 00:451E -  -  -  -  ; ***************************************************************************************
  111 00:451E -  -  -  -  ;
  112 00:451E -  -  -  -  ;		Date			Notes
  113 00:451E -  -  -  -  ;		==== 			=====
  114 00:451E -  -  -  -  ;
  115 00:451E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:451E -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:451E -  -  -  -  ; ***************************************************************************************
    2 00:451E -  -  -  -  ; ***************************************************************************************
    3 00:451E -  -  -  -  ;
    4 00:451E -  -  -  -  ;		Name : 		reference.asm
    5 00:451E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:451E -  -  -  -  ;		Date : 		1st May 2022
    7 00:451E -  -  -  -  ;		Reviewed :	No
    8 00:451E -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:451E -  -  -  -  ;
   10 00:451E -  -  -  -  ; ***************************************************************************************
   11 00:451E -  -  -  -  ; ***************************************************************************************
   12 00:451E -  -  -  -  
   13 00:451E -  -  -  -  ; ***************************************************************************************
   14 00:451E -  -  -  -  ;
   15 00:451E -  -  -  -  ; 									Dereference HL'HL C
   16 00:451E -  -  -  -  ;
   17 00:451E -  -  -  -  ; ***************************************************************************************
   18 00:451E -  -  -  -  
   19 00:451E -  -  -  -  Dereference:
   20 00:451E CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4520 C8 -  -  -  		ret 	z
   22 00:4521 -  -  -  -  
   23 00:4521 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4523 -  -  -  -  		
   25 00:4523 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:4525 20 20 -  -  		jr 		nz,_DRInternal
   27 00:4527 -  -  -  -  
   28 00:4527 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4529 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:452B -  -  -  -  
   31 00:452B E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:452C 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4530 D9 -  -  -  		exx
   34 00:4531 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4532 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4533 23 -  -  -  		inc  	hl
   37 00:4534 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:4538 D9 -  -  -  		exx 								; fix back
   39 00:4539 C9 -  -  -  		ret
   40 00:453A -  -  -  -  
   41 00:453A -  -  -  -  _DeRefByte:		
   42 00:453A 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:453B 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:453E 6F -  -  -  		ld	 	l,a
   45 00:453F D9 -  -  -  		exx
   46 00:4540 21 00 00 -  		ld 		hl,$0000
   47 00:4543 D9 -  -  -  		exx
   48 00:4544 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:4546 C9 -  -  -  		ret
   50 00:4547 -  -  -  -  
   51 00:4547 -  -  -  -  _DRInternal:
   52 00:4547 3E 05 C3 0E 
              43 -  -  -  		ERR_DISABLED
   53 00:454C -  -  -  -  
   54 00:454C -  -  -  -  ; ***************************************************************************************
   55 00:454C -  -  -  -  ;
   56 00:454C -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:454C -  -  -  -  ;
   58 00:454C -  -  -  -  ; ***************************************************************************************
   59 00:454C -  -  -  -  
   60 00:454C -  -  -  -  DRConvertHLHLToAddress:
   61 00:454C -  -  -  -  		#ifdef EZ80
   62 00:454C             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:454C             		exx
   64 00:454C             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:454C             		ld 		hl,$0000 					; zero HL'
   66 00:454C             		exx
   67 00:454C             		ld 		hl,(AConvert) 				; load UHL
   68 00:454C             		#endif
   69 00:454C C9 -  -  -  		ret
   70 00:454D -  -  -  -  
   71 00:454D -  -  -  -  ; ***************************************************************************************
   72 00:454D -  -  -  -  ;
   73 00:454D -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:454D -  -  -  -  ;
   75 00:454D -  -  -  -  ; ***************************************************************************************
   76 00:454D -  -  -  -  
   77 00:454D -  -  -  -  DRConvertAddressToHLHL:
   78 00:454D -  -  -  -  		#ifdef EZ80
   79 00:454D             		ld 		(AConvert),hl
   80 00:454D             		ld 		hl,$0000
   81 00:454D             		ld 		(AConvert+3),hl
   82 00:454D             		exx
   83 00:454D             		ld 		hl,(AConvert+2)
   84 00:454D             		exx
   85 00:454D             		xor 	a
   86 00:454D             		ld 		(AConvert+2),a
   87 00:454D             		ld 		hl,(AConvert)
   88 00:454D             		#endif
   89 00:454D C9 -  -  -  		ret
   90 00:454E -  -  -  -  
   91 00:454E -  -  -  -  ; ***************************************************************************************
   92 00:454E -  -  -  -  ;
   93 00:454E -  -  -  -  ;									Changes and Updates
   94 00:454E -  -  -  -  ;
   95 00:454E -  -  -  -  ; ***************************************************************************************
   96 00:454E -  -  -  -  ;
   97 00:454E -  -  -  -  ;		Date			Notes
   98 00:454E -  -  -  -  ;		==== 			=====
   99 00:454E -  -  -  -  ;
  100 00:454E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:454E -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:454E -  -  -  -  ; ***************************************************************************************
    2 00:454E -  -  -  -  ; ***************************************************************************************
    3 00:454E -  -  -  -  ;
    4 00:454E -  -  -  -  ;		Name : 		term.asm
    5 00:454E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454E -  -  -  -  ;		Reviewed :	No
    8 00:454E -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:454E -  -  -  -  ;
   10 00:454E -  -  -  -  ; ***************************************************************************************
   11 00:454E -  -  -  -  ; ***************************************************************************************
   12 00:454E -  -  -  -  
   13 00:454E -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:454E             		add_hlhl_16
   15 00:454E             		exx
   16 00:454E             		adc_hlhl_16
   17 00:454E             		exx
   18 00:454E             #endmacro
   19 00:454E -  -  -  -  
   20 00:454E -  -  -  -  ; ***************************************************************************************
   21 00:454E -  -  -  -  ;
   22 00:454E -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:454E -  -  -  -  ;
   24 00:454E -  -  -  -  ; ***************************************************************************************
   25 00:454E -  -  -  -  ;
   26 00:454E -  -  -  -  ; 		Terms can be:
   27 00:454E -  -  -  -  ;
   28 00:454E -  -  -  -  ;			<integer> 			42 						not negative
   29 00:454E -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:454E -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:454E -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:454E -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:454E -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:454E -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:454E -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:454E -  -  -  -  ; 														reference of some sort.
   37 00:454E -  -  -  -  ;
   38 00:454E -  -  -  -  ; ***************************************************************************************
   39 00:454E -  -  -  -  
   40 00:454E -  -  -  -  EvaluateTerm:		
   41 00:454E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4550 D9 -  -  -  		exx
   43 00:4551 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4554 D9 -  -  -  		exx
   45 00:4555 21 00 00 -  		ld 		hl,$0000		
   46 00:4558 -  -  -  -  		;
   47 00:4558 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:455B FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:455D 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:455F DA FD 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4562 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4564 C2 AC 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:4567 -  -  -  -  		;
   54 00:4567 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:4567 -  -  -  -  		;
   56 00:4567 -  -  -  -  _ETIntegerConstant:
   57 00:4567 -  -  -  -  		;
   58 00:4567 -  -  -  -  _ETIntegerLoop:		
   59 00:4567 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:456A E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:456C B5 -  -  -  		or 		l 							; or into L
   62 00:456D 6F -  -  -  		ld 		l,a
   63 00:456E DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4570 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:4573 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:4575 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:4577 D8 -  -  -  		ret 	c
   68 00:4578 -  -  -  -  
   69 00:4578 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:457D 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4582 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4587 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:458C 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4591 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:4596 -  -  -  -  
   76 00:4596 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4598 -  -  -  -  		;
   78 00:4598 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4598 -  -  -  -  		;
   80 00:4598 -  -  -  -  _ETStringMarker:		
   81 00:4598 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:459A DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:459C DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:459E E1 -  -  -  		pop 	hl
   85 00:459F 11 00 00 -  		ld 		de,$0000
   86 00:45A2 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:45A5 DD 19 -  -  		add 	ix,de
   88 00:45A7 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:45A9 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:45AB C9 -  -  -  		ret
   91 00:45AC -  -  -  -  		;
   92 00:45AC -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:45AC -  -  -  -  		;
   94 00:45AC -  -  -  -  _ETFoundKeyword:
   95 00:45AC DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:45AE FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:45B0 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:45B2 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:45B4 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:45B6 -  -  -  -  		;
  101 00:45B6 -  -  -  -  		;		Unary group 0
  102 00:45B6 -  -  -  -  		;
  103 00:45B6 E6 7F 21 00 
              00 6F 29 11 
              2C 4A 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:45C8 C3 59 40 -  		jp 		JumpCode 					; and go there.
  105 00:45CB -  -  -  -  
  106 00:45CB -  -  -  -  _ETNotUnaryFunction0:	
  107 00:45CB FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:45CD 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:45CF -  -  -  -  		;
  110 00:45CF -  -  -  -  		; 		- term
  111 00:45CF -  -  -  -  		;
  112 00:45CF CD D5 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:45D2 CD 75 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:45D5 C9 -  -  -  		ret
  115 00:45D6 -  -  -  -  		;
  116 00:45D6 -  -  -  -  		;		! ? indirection check
  117 00:45D6 -  -  -  -  		;
  118 00:45D6 -  -  -  -  _ETCheckIndirection:	
  119 00:45D6 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:45D8 28 05 -  -  		jr 		z,_ETIndirection
  121 00:45DA FE 83 -  -  		cp 		KWD_PLING
  122 00:45DC C2 6B 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:45DF -  -  -  -  		;
  124 00:45DF -  -  -  -  		; 		! ? indirection
  125 00:45DF -  -  -  -  		;
  126 00:45DF -  -  -  -  _ETIndirection:
  127 00:45DF F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:45E0 CD 4E 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:45E3 CD 1E 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:45E6 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:45E8 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:45EA CD 4C 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:45ED F1 -  -  -  		pop 	af 							; get type back
  134 00:45EE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:45F0 CB F9 -  -  		set 	CIsReference,c
  136 00:45F2 FE 83 -  -  		cp 		KWD_PLING
  137 00:45F4 C8 -  -  -  		ret 	z
  138 00:45F5 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:45F7 C9 -  -  -  		ret
  140 00:45F8 -  -  -  -  _ETStringIndirect:
  141 00:45F8 3E 02 C3 0E 
              43 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:45FD -  -  -  -  		;
  143 00:45FD -  -  -  -  		; 		Found an identifier.
  144 00:45FD -  -  -  -  		;
  145 00:45FD -  -  -  -  _ETVariable:
  146 00:45FD CD 0A 48 -  		call 	FindVariable 				; find the variable.
  147 00:4600 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4601 3E 10 C3 0E 
              43 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:4606 -  -  -  -  		
  150 00:4606 -  -  -  -  ; ***************************************************************************************
  151 00:4606 -  -  -  -  ;
  152 00:4606 -  -  -  -  ;									Changes and Updates
  153 00:4606 -  -  -  -  ;
  154 00:4606 -  -  -  -  ; ***************************************************************************************
  155 00:4606 -  -  -  -  ;
  156 00:4606 -  -  -  -  ;		Date			Notes
  157 00:4606 -  -  -  -  ;		==== 			=====
  158 00:4606 -  -  -  -  ;
  159 00:4606 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4606 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:4606 -  -  -  -  ; ***************************************************************************************
    2 00:4606 -  -  -  -  ; ***************************************************************************************
    3 00:4606 -  -  -  -  ;
    4 00:4606 -  -  -  -  ;		Name : 		abs.asm
    5 00:4606 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4606 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4606 -  -  -  -  ;		Reviewed :	No
    8 00:4606 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:4606 -  -  -  -  ;
   10 00:4606 -  -  -  -  ; ***************************************************************************************
   11 00:4606 -  -  -  -  ; ***************************************************************************************
   12 00:4606 -  -  -  -  
   13 00:4606 -  -  -  -  ; ***************************************************************************************
   14 00:4606 -  -  -  -  ;
   15 00:4606 -  -  -  -  ;								abs( unary function
   16 00:4606 -  -  -  -  ;
   17 00:4606 -  -  -  -  ; ***************************************************************************************
   18 00:4606 -  -  -  -  
   19 00:4606 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:4606 CD D5 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:4609 D9 -  -  -  		exx 								; test MSB
   22 00:460A CB 7C -  -  		bit 	7,h
   23 00:460C D9 -  -  -  		exx
   24 00:460D C4 75 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4610 C9 -  -  -  		ret
   26 00:4611 -  -  -  -  
   27 00:4611 -  -  -  -  ; ***************************************************************************************
   28 00:4611 -  -  -  -  ;
   29 00:4611 -  -  -  -  ;									Changes and Updates
   30 00:4611 -  -  -  -  ;
   31 00:4611 -  -  -  -  ; ***************************************************************************************
   32 00:4611 -  -  -  -  ;
   33 00:4611 -  -  -  -  ;		Date			Notes
   34 00:4611 -  -  -  -  ;		==== 			=====
   35 00:4611 -  -  -  -  ;
   36 00:4611 -  -  -  -  ; ***************************************************************************************
   37 00:4611 -  -  -  -  		
Listing for file "_build.asm"
   35 00:4611 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4611 -  -  -  -  ; ***************************************************************************************
    2 00:4611 -  -  -  -  ; ***************************************************************************************
    3 00:4611 -  -  -  -  ;
    4 00:4611 -  -  -  -  ;		Name : 		asc.asm
    5 00:4611 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4611 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4611 -  -  -  -  ;		Reviewed :	No
    8 00:4611 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4611 -  -  -  -  ;
   10 00:4611 -  -  -  -  ; ***************************************************************************************
   11 00:4611 -  -  -  -  ; ***************************************************************************************
   12 00:4611 -  -  -  -  
   13 00:4611 -  -  -  -  ; ***************************************************************************************
   14 00:4611 -  -  -  -  ;
   15 00:4611 -  -  -  -  ;								Asc unary function
   16 00:4611 -  -  -  -  ;
   17 00:4611 -  -  -  -  ; ***************************************************************************************
   18 00:4611 -  -  -  -  
   19 00:4611 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4611 CD E1 44 -  		call	EvaluateStringTerm			; Get string
   21 00:4614 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:4615 C3 12 45 -  		jp 		Return8BitConstant
   23 00:4618 -  -  -  -  
   24 00:4618 -  -  -  -  ; ***************************************************************************************
   25 00:4618 -  -  -  -  ;
   26 00:4618 -  -  -  -  ;									Changes and Updates
   27 00:4618 -  -  -  -  ;
   28 00:4618 -  -  -  -  ; ***************************************************************************************
   29 00:4618 -  -  -  -  ;
   30 00:4618 -  -  -  -  ;		Date			Notes
   31 00:4618 -  -  -  -  ;		==== 			=====
   32 00:4618 -  -  -  -  ;
   33 00:4618 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:4618 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:4618 -  -  -  -  ; ***************************************************************************************
    2 00:4618 -  -  -  -  ; ***************************************************************************************
    3 00:4618 -  -  -  -  ;
    4 00:4618 -  -  -  -  ;		Name : 		chr.asm
    5 00:4618 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4618 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4618 -  -  -  -  ;		Reviewed :	No
    8 00:4618 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:4618 -  -  -  -  ;
   10 00:4618 -  -  -  -  ; ***************************************************************************************
   11 00:4618 -  -  -  -  ; ***************************************************************************************
   12 00:4618 -  -  -  -  
   13 00:4618 -  -  -  -  ; ***************************************************************************************
   14 00:4618 -  -  -  -  ;
   15 00:4618 -  -  -  -  ;								Chr$() unary function
   16 00:4618 -  -  -  -  ;
   17 00:4618 -  -  -  -  ; ***************************************************************************************
   18 00:4618 -  -  -  -  
   19 00:4618 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:4618 CD E9 42 -  		call 	CheckDollar
   21 00:461B CD D5 44 -  		call 	EvaluateIntegerTerm
   22 00:461E 7D -  -  -  		ld 		a,l 						; get character
   23 00:461F 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4621 21 94 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:4624 36 0D -  -  		ld 		(hl),13
   26 00:4626 2B -  -  -  		dec 	hl
   27 00:4627 77 -  -  -  		ld 		(hl),a
   28 00:4628 C9 -  -  -  		ret
   29 00:4629 -  -  -  -  
   30 00:4629 -  -  -  -  ; ***************************************************************************************
   31 00:4629 -  -  -  -  ;
   32 00:4629 -  -  -  -  ;									Changes and Updates
   33 00:4629 -  -  -  -  ;
   34 00:4629 -  -  -  -  ; ***************************************************************************************
   35 00:4629 -  -  -  -  ;
   36 00:4629 -  -  -  -  ;		Date			Notes
   37 00:4629 -  -  -  -  ;		==== 			=====
   38 00:4629 -  -  -  -  ;
   39 00:4629 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:4629 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4629 -  -  -  -  ; ***************************************************************************************
    2 00:4629 -  -  -  -  ; ***************************************************************************************
    3 00:4629 -  -  -  -  ;
    4 00:4629 -  -  -  -  ;		Name : 		len.asm
    5 00:4629 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4629 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4629 -  -  -  -  ;		Reviewed :	None
    8 00:4629 -  -  -  -  ;		Purpose :	String Length
    9 00:4629 -  -  -  -  ;
   10 00:4629 -  -  -  -  ; ***************************************************************************************
   11 00:4629 -  -  -  -  ; ***************************************************************************************
   12 00:4629 -  -  -  -  
   13 00:4629 -  -  -  -  ; ***************************************************************************************
   14 00:4629 -  -  -  -  ;
   15 00:4629 -  -  -  -  ;								Len unary function
   16 00:4629 -  -  -  -  ;
   17 00:4629 -  -  -  -  ; ***************************************************************************************
   18 00:4629 -  -  -  -  
   19 00:4629 -  -  -  -  Unary_Len:	;; [len]
   20 00:4629 CD E1 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:462C EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:462D CD EC 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4630 -  -  -  -  _ULCount:
   24 00:4630 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4631 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4633 D8 -  -  -  		ret 	c
   27 00:4634 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:4635 13 -  -  -  		inc 	de
   29 00:4636 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:4638 -  -  -  -  
   31 00:4638 -  -  -  -  ; ***************************************************************************************
   32 00:4638 -  -  -  -  ;
   33 00:4638 -  -  -  -  ;									Changes and Updates
   34 00:4638 -  -  -  -  ;
   35 00:4638 -  -  -  -  ; ***************************************************************************************
   36 00:4638 -  -  -  -  ;
   37 00:4638 -  -  -  -  ;		Date			Notes
   38 00:4638 -  -  -  -  ;		==== 			=====
   39 00:4638 -  -  -  -  ;
   40 00:4638 -  -  -  -  ; ***************************************************************************************
   41 00:4638 -  -  -  -  		
Listing for file "_build.asm"
   38 00:4638 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:4638 -  -  -  -  ; ***************************************************************************************
    2 00:4638 -  -  -  -  ; ***************************************************************************************
    3 00:4638 -  -  -  -  ;
    4 00:4638 -  -  -  -  ;		Name : 		makestring.asm
    5 00:4638 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4638 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4638 -  -  -  -  ;		Reviewed :	No
    8 00:4638 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:4638 -  -  -  -  ;
   10 00:4638 -  -  -  -  ; ***************************************************************************************
   11 00:4638 -  -  -  -  ; ***************************************************************************************
   12 00:4638 -  -  -  -  
   13 00:4638 -  -  -  -  ; ***************************************************************************************
   14 00:4638 -  -  -  -  ;
   15 00:4638 -  -  -  -  ;								Str$() unary function
   16 00:4638 -  -  -  -  ;
   17 00:4638 -  -  -  -  ; ***************************************************************************************
   18 00:4638 -  -  -  -  
   19 00:4638 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:4638 CD D5 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:463B CD 4C 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:463E 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4640 C9 -  -  -  		ret
   24 00:4641 -  -  -  -  
   25 00:4641 -  -  -  -  ; ***************************************************************************************
   26 00:4641 -  -  -  -  ;
   27 00:4641 -  -  -  -  ;									Changes and Updates
   28 00:4641 -  -  -  -  ;
   29 00:4641 -  -  -  -  ; ***************************************************************************************
   30 00:4641 -  -  -  -  ;
   31 00:4641 -  -  -  -  ;		Date			Notes
   32 00:4641 -  -  -  -  ;		==== 			=====
   33 00:4641 -  -  -  -  ;
   34 00:4641 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4641 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4641 -  -  -  -  ; ***************************************************************************************
    2 00:4641 -  -  -  -  ; ***************************************************************************************
    3 00:4641 -  -  -  -  ;
    4 00:4641 -  -  -  -  ;		Name : 		not.asm
    5 00:4641 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4641 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4641 -  -  -  -  ;		Reviewed :	No
    8 00:4641 -  -  -  -  ;		Purpose :	Logical not
    9 00:4641 -  -  -  -  ;
   10 00:4641 -  -  -  -  ; ***************************************************************************************
   11 00:4641 -  -  -  -  ; ***************************************************************************************
   12 00:4641 -  -  -  -  
   13 00:4641 -  -  -  -  ; ***************************************************************************************
   14 00:4641 -  -  -  -  ;
   15 00:4641 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4641 -  -  -  -  ;
   17 00:4641 -  -  -  -  ; ***************************************************************************************
   18 00:4641 -  -  -  -  
   19 00:4641 -  -  -  -  Unary_Not:		;; [not]
   20 00:4641 CD D5 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4644 CD 4B 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:4647 CD 4B 46 -  		call 	__UNSwap		
   23 00:464A C9 -  -  -  		ret
   24 00:464B -  -  -  -  
   25 00:464B -  -  -  -  __UNSwap:
   26 00:464B 7C -  -  -  		ld 		a,h
   27 00:464C 2F -  -  -  		cpl
   28 00:464D 67 -  -  -  		ld 		h,a
   29 00:464E 7D -  -  -  		ld 		a,l
   30 00:464F 2F -  -  -  		cpl 	
   31 00:4650 6F -  -  -  		ld 		l,a
   32 00:4651 D9 -  -  -  		exx
   33 00:4652 C9 -  -  -  		ret
   34 00:4653 -  -  -  -  
   35 00:4653 -  -  -  -  ; ***************************************************************************************
   36 00:4653 -  -  -  -  ;
   37 00:4653 -  -  -  -  ;									Changes and Updates
   38 00:4653 -  -  -  -  ;
   39 00:4653 -  -  -  -  ; ***************************************************************************************
   40 00:4653 -  -  -  -  ;
   41 00:4653 -  -  -  -  ;		Date			Notes
   42 00:4653 -  -  -  -  ;		==== 			=====
   43 00:4653 -  -  -  -  ;
   44 00:4653 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:4653 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4653 -  -  -  -  ; ***************************************************************************************
    2 00:4653 -  -  -  -  ; ***************************************************************************************
    3 00:4653 -  -  -  -  ;
    4 00:4653 -  -  -  -  ;		Name : 		page.asm
    5 00:4653 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4653 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4653 -  -  -  -  ;		Reviewed :	No
    8 00:4653 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4653 -  -  -  -  ;
   10 00:4653 -  -  -  -  ; ***************************************************************************************
   11 00:4653 -  -  -  -  ; ***************************************************************************************
   12 00:4653 -  -  -  -  
   13 00:4653 -  -  -  -  ; ***************************************************************************************
   14 00:4653 -  -  -  -  ;
   15 00:4653 -  -  -  -  ;							page unary function (no bracket)
   16 00:4653 -  -  -  -  ;
   17 00:4653 -  -  -  -  ; ***************************************************************************************
   18 00:4653 -  -  -  -  
   19 00:4653 -  -  -  -  Unary_Page:	;; [page]
   20 00:4653 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:4656 D9 -  -  -  			exx
   22 00:4657 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:465A D9 -  -  -  			exx
   24 00:465B 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:465D C9 -  -  -  			ret
   26 00:465E -  -  -  -  
   27 00:465E -  -  -  -  ; ***************************************************************************************
   28 00:465E -  -  -  -  ;
   29 00:465E -  -  -  -  ;									Changes and Updates
   30 00:465E -  -  -  -  ;
   31 00:465E -  -  -  -  ; ***************************************************************************************
   32 00:465E -  -  -  -  ;
   33 00:465E -  -  -  -  ;		Date			Notes
   34 00:465E -  -  -  -  ;		==== 			=====
   35 00:465E -  -  -  -  ;
   36 00:465E -  -  -  -  ; ***************************************************************************************
   37 00:465E -  -  -  -  			
Listing for file "_build.asm"
   41 00:465E -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:465E -  -  -  -  ; ***************************************************************************************
    2 00:465E -  -  -  -  ; ***************************************************************************************
    3 00:465E -  -  -  -  ;
    4 00:465E -  -  -  -  ;		Name : 		random.asm
    5 00:465E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465E -  -  -  -  ;		Reviewed :	No
    8 00:465E -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:465E -  -  -  -  ;
   10 00:465E -  -  -  -  ; ***************************************************************************************
   11 00:465E -  -  -  -  ; ***************************************************************************************
   12 00:465E -  -  -  -  
   13 00:465E -  -  -  -  ; ***************************************************************************************
   14 00:465E -  -  -  -  ;
   15 00:465E -  -  -  -  ;								Random unary function
   16 00:465E -  -  -  -  ;
   17 00:465E -  -  -  -  ; ***************************************************************************************
   18 00:465E -  -  -  -  
   19 00:465E -  -  -  -  Unary_Random:	;; [rnd]
   20 00:465E 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:465F CD D5 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4662 D9 -  -  -  		exx 								; is it -ve
   23 00:4663 CB 7C -  -  		bit 	7,h
   24 00:4665 D9 -  -  -  		exx
   25 00:4666 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4668 22 65 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:466B D9 -  -  -  		exx
   28 00:466C 22 69 40 -  		ld 		(RandomSeed+4),hl
   29 00:466F D9 -  -  -  		exx
   30 00:4670 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4672 C9 -  -  -  		ret
   32 00:4673 -  -  -  -  _URDontSeed:		
   33 00:4673 -  -  -  -  
   34 00:4673 CD 23 4C -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:4676 28 19 -  -  		jr 		z,_URFail
   36 00:4678 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4679 D9 -  -  -  		exx
   38 00:467A E5 -  -  -  		push 	hl
   39 00:467B D9 -  -  -  		exx
   40 00:467C -  -  -  -  		;
   41 00:467C CD A0 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:467F D9 -  -  -  		exx
   43 00:4680 CD A0 46 -  		call 	URandomHL
   44 00:4683 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:4685 D9 -  -  -  		exx
   46 00:4686 -  -  -  -  		;
   47 00:4686 D9 -  -  -  		exx 								; restore range.
   48 00:4687 D1 -  -  -  		pop 	de
   49 00:4688 D9 -  -  -  		exx
   50 00:4689 D1 -  -  -  		pop 	de
   51 00:468A -  -  -  -  		;
   52 00:468A CD CF 4A -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:468D 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:468E 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4690 C9 -  -  -  		ret
   56 00:4691 -  -  -  -  _URFail:
   57 00:4691 3E 03 C3 0E 
              43 -  -  -  		ERR_BADVALUE
   58 00:4696 -  -  -  -  ; ***************************************************************************************
   59 00:4696 -  -  -  -  ;
   60 00:4696 -  -  -  -  ; 									Push RNG off zero
   61 00:4696 -  -  -  -  ;
   62 00:4696 -  -  -  -  ; ***************************************************************************************
   63 00:4696 -  -  -  -  
   64 00:4696 -  -  -  -  UnaryRandomInitialise:
   65 00:4696 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4698 -  -  -  -  _URILoop:
   67 00:4698 C5 -  -  -  		push 	bc
   68 00:4699 CD A0 46 -  		call 	URandomHL
   69 00:469C C1 -  -  -  		pop 	bc
   70 00:469D 10 F9 -  -  		djnz 	_URILoop
   71 00:469F C9 -  -  -  		ret
   72 00:46A0 -  -  -  -  
   73 00:46A0 -  -  -  -  ; ***************************************************************************************
   74 00:46A0 -  -  -  -  ;
   75 00:46A0 -  -  -  -  ;							16 bit random number generator
   76 00:46A0 -  -  -  -  ;
   77 00:46A0 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:46A0 -  -  -  -  ;		Actual author unspecified.
   79 00:46A0 -  -  -  -  ;
   80 00:46A0 -  -  -  -  ; ***************************************************************************************
   81 00:46A0 -  -  -  -  
   82 00:46A0 -  -  -  -  URandomHL:
   83 00:46A0 2A 65 40 -  	    ld 		hl,(RandomSeed)
   84 00:46A3 ED 5B 69 40 	    ld 		de,(RandomSeed+4)
   85 00:46A7 44 -  -  -  	    ld 		b,h
   86 00:46A8 4D -  -  -  	    ld 		c,l
   87 00:46A9 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:46AE 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:46B3 2C -  -  -  	    inc 	l
   90 00:46B4 09 -  -  -  	    add 	hl,bc
   91 00:46B5 22 65 40 -  	    ld 		(RandomSeed),hl
   92 00:46B8 2A 69 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:46BB ED 5A -  -  	    adc 	hl,de
   94 00:46BD 22 69 40 -  	    ld 		(RandomSeed+4),hl
   95 00:46C0 EB -  -  -  	    ex 		de,hl
   96 00:46C1 2A 6D 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:46C4 ED 4B 71 40 	    ld 		bc,(RandomSeed+12)
   98 00:46C8 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:46CD ED 43 71 40 	    ld 		(RandomSeed+12),bc
  100 00:46D1 9F -  -  -  	    sbc 	a,a
  101 00:46D2 E6 C5 -  -  	    and 	%11000101
  102 00:46D4 AD -  -  -  	    xor 	l
  103 00:46D5 6F -  -  -  	    ld 		l,a
  104 00:46D6 22 6D 40 -  	    ld 		(RandomSeed+8),hl
  105 00:46D9 EB -  -  -  	    ex 		de,hl
  106 00:46DA 09 -  -  -  	    add 	hl,bc
  107 00:46DB C9 -  -  -  	    ret		
  108 00:46DC -  -  -  -  
  109 00:46DC -  -  -  -  ; ***************************************************************************************
  110 00:46DC -  -  -  -  ;
  111 00:46DC -  -  -  -  ;									Changes and Updates
  112 00:46DC -  -  -  -  ;
  113 00:46DC -  -  -  -  ; ***************************************************************************************
  114 00:46DC -  -  -  -  ;
  115 00:46DC -  -  -  -  ;		Date			Notes
  116 00:46DC -  -  -  -  ;		==== 			=====
  117 00:46DC -  -  -  -  ;
  118 00:46DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:46DC -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:46DC -  -  -  -  ; ***************************************************************************************
    2 00:46DC -  -  -  -  ; ***************************************************************************************
    3 00:46DC -  -  -  -  ;
    4 00:46DC -  -  -  -  ;		Name : 		sgn.asm
    5 00:46DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46DC -  -  -  -  ;		Reviewed :	No
    8 00:46DC -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:46DC -  -  -  -  ;
   10 00:46DC -  -  -  -  ; ***************************************************************************************
   11 00:46DC -  -  -  -  ; ***************************************************************************************
   12 00:46DC -  -  -  -  
   13 00:46DC -  -  -  -  ; ***************************************************************************************
   14 00:46DC -  -  -  -  ;
   15 00:46DC -  -  -  -  ;								sgn unary function
   16 00:46DC -  -  -  -  ;
   17 00:46DC -  -  -  -  ; ***************************************************************************************
   18 00:46DC -  -  -  -  
   19 00:46DC -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:46DC CD D5 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:46DF CD 23 4C -  		call 	Int32Zero 					; integer sgn() code
   22 00:46E2 CA EC 43 -  		jp 		z,UnaryInt32False
   23 00:46E5 D9 -  -  -  		exx
   24 00:46E6 CB 7C -  -  		bit 	7,h
   25 00:46E8 D9 -  -  -  		exx
   26 00:46E9 C2 E8 43 -  		jp 		nz,UnaryInt32True
   27 00:46EC 3E 01 -  -  		ld 		a,1
   28 00:46EE C3 12 45 -  		jp 		Return8BitConstant
   29 00:46F1 -  -  -  -  
   30 00:46F1 -  -  -  -  ; ***************************************************************************************
   31 00:46F1 -  -  -  -  ;
   32 00:46F1 -  -  -  -  ;									Changes and Updates
   33 00:46F1 -  -  -  -  ;
   34 00:46F1 -  -  -  -  ; ***************************************************************************************
   35 00:46F1 -  -  -  -  ;
   36 00:46F1 -  -  -  -  ;		Date			Notes
   37 00:46F1 -  -  -  -  ;		==== 			=====
   38 00:46F1 -  -  -  -  ;
   39 00:46F1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:46F1 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:46F1 -  -  -  -  ; ***************************************************************************************
    2 00:46F1 -  -  -  -  ; ***************************************************************************************
    3 00:46F1 -  -  -  -  ;
    4 00:46F1 -  -  -  -  ;		Name : 		simple.asm
    5 00:46F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46F1 -  -  -  -  ;		Reviewed :	No
    8 00:46F1 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:46F1 -  -  -  -  ;
   10 00:46F1 -  -  -  -  ; ***************************************************************************************
   11 00:46F1 -  -  -  -  ; ***************************************************************************************
   12 00:46F1 -  -  -  -  
   13 00:46F1 -  -  -  -  ; ***************************************************************************************
   14 00:46F1 -  -  -  -  ;
   15 00:46F1 -  -  -  -  ;								( unary function (think about it)
   16 00:46F1 -  -  -  -  ;
   17 00:46F1 -  -  -  -  ; ***************************************************************************************
   18 00:46F1 -  -  -  -  
   19 00:46F1 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:46F1 CD 83 44 -  		call 	EvaluateAtPrecedence0
   21 00:46F4 C3 DC 42 -  		jp  	CheckRightBracket
   22 00:46F7 -  -  -  -  
   23 00:46F7 -  -  -  -  ; ***************************************************************************************
   24 00:46F7 -  -  -  -  ;
   25 00:46F7 -  -  -  -  ;									Handle &x
   26 00:46F7 -  -  -  -  ;
   27 00:46F7 -  -  -  -  ; ***************************************************************************************
   28 00:46F7 -  -  -  -  
   29 00:46F7 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:46F7 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:46FA E6 C0 -  -  		and 		$C0
   32 00:46FC FE 40 -  -  		cp 			$40
   33 00:46FE C2 6B 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4701 C3 4E 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4704 -  -  -  -  
   36 00:4704 -  -  -  -  ; ***************************************************************************************
   37 00:4704 -  -  -  -  ;
   38 00:4704 -  -  -  -  ;									Changes and Updates
   39 00:4704 -  -  -  -  ;
   40 00:4704 -  -  -  -  ; ***************************************************************************************
   41 00:4704 -  -  -  -  ;
   42 00:4704 -  -  -  -  ;		Date			Notes
   43 00:4704 -  -  -  -  ;		==== 			=====
   44 00:4704 -  -  -  -  ;
   45 00:4704 -  -  -  -  ; ***************************************************************************************
   46 00:4704 -  -  -  -  		
Listing for file "_build.asm"
   44 00:4704 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4704 -  -  -  -  ; ***************************************************************************************
    2 00:4704 -  -  -  -  ; ***************************************************************************************
    3 00:4704 -  -  -  -  ;
    4 00:4704 -  -  -  -  ;		Name : 		str.asm
    5 00:4704 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4704 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4704 -  -  -  -  ;		Reviewed :	No
    8 00:4704 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4704 -  -  -  -  ;
   10 00:4704 -  -  -  -  ; ***************************************************************************************
   11 00:4704 -  -  -  -  ; ***************************************************************************************
   12 00:4704 -  -  -  -  
   13 00:4704 -  -  -  -  ; ***************************************************************************************
   14 00:4704 -  -  -  -  ;
   15 00:4704 -  -  -  -  ;								Str$() unary function
   16 00:4704 -  -  -  -  ;
   17 00:4704 -  -  -  -  ; ***************************************************************************************
   18 00:4704 -  -  -  -  
   19 00:4704 -  -  -  -  Unary_Str:	;; [str]
   20 00:4704 CD E9 42 -  		call 	CheckDollar
   21 00:4707 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:470A EE AC -  -  		xor		KWD_TILDE
   23 00:470C F5 -  -  -  		push 	af
   24 00:470D 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:470F DD 23 -  -  		inc 	ix
   26 00:4711 -  -  -  -  _USNotHex:		
   27 00:4711 CD D5 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:4714 01 83 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:4717 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:4718 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:471A 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:471C 3E 10 -  -  		ld 		a,16
   33 00:471E -  -  -  -  _USNotHex2:		
   34 00:471E CD 64 4C -  		call 	Int32ToString 				
   35 00:4721 21 83 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:4724 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:4726 C9 -  -  -  		ret
   38 00:4727 -  -  -  -  
   39 00:4727 -  -  -  -  ; ***************************************************************************************
   40 00:4727 -  -  -  -  ;
   41 00:4727 -  -  -  -  ;									Changes and Updates
   42 00:4727 -  -  -  -  ;
   43 00:4727 -  -  -  -  ; ***************************************************************************************
   44 00:4727 -  -  -  -  ;
   45 00:4727 -  -  -  -  ;		Date			Notes
   46 00:4727 -  -  -  -  ;		==== 			=====
   47 00:4727 -  -  -  -  ;
   48 00:4727 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:4727 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:4727 -  -  -  -  ; ***************************************************************************************
    2 00:4727 -  -  -  -  ; ***************************************************************************************
    3 00:4727 -  -  -  -  ;
    4 00:4727 -  -  -  -  ;		Name : 		time.asm
    5 00:4727 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4727 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4727 -  -  -  -  ;		Reviewed :	No
    8 00:4727 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:4727 -  -  -  -  ;
   10 00:4727 -  -  -  -  ; ***************************************************************************************
   11 00:4727 -  -  -  -  ; ***************************************************************************************
   12 00:4727 -  -  -  -  
   13 00:4727 -  -  -  -  ; ***************************************************************************************
   14 00:4727 -  -  -  -  ;
   15 00:4727 -  -  -  -  ;							Get system time in ms
   16 00:4727 -  -  -  -  ;
   17 00:4727 -  -  -  -  ; ***************************************************************************************
   18 00:4727 -  -  -  -  
   19 00:4727 -  -  -  -  Unary_Time:	;; [time]
   20 00:4727 CD DB 4C -  			call 	SYSGetTimer
   21 00:472A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:472C C9 -  -  -  			ret
   23 00:472D -  -  -  -  
   24 00:472D -  -  -  -  ; ***************************************************************************************
   25 00:472D -  -  -  -  ;
   26 00:472D -  -  -  -  ;									Changes and Updates
   27 00:472D -  -  -  -  ;
   28 00:472D -  -  -  -  ; ***************************************************************************************
   29 00:472D -  -  -  -  ;
   30 00:472D -  -  -  -  ;		Date			Notes
   31 00:472D -  -  -  -  ;		==== 			=====
   32 00:472D -  -  -  -  ;
   33 00:472D -  -  -  -  ; ***************************************************************************************
   34 00:472D -  -  -  -  			
Listing for file "_build.asm"
   46 00:472D -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:472D -  -  -  -  ; ***************************************************************************************
    2 00:472D -  -  -  -  ; ***************************************************************************************
    3 00:472D -  -  -  -  ;
    4 00:472D -  -  -  -  ;		Name : 		top.asm
    5 00:472D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:472D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:472D -  -  -  -  ;		Reviewed :	No
    8 00:472D -  -  -  -  ;		Purpose :	Various constants.
    9 00:472D -  -  -  -  ;
   10 00:472D -  -  -  -  ; ***************************************************************************************
   11 00:472D -  -  -  -  ; ***************************************************************************************
   12 00:472D -  -  -  -  
   13 00:472D -  -  -  -  ; ***************************************************************************************
   14 00:472D -  -  -  -  ;
   15 00:472D -  -  -  -  ;							page unary function (no bracket)
   16 00:472D -  -  -  -  ;
   17 00:472D -  -  -  -  ; ***************************************************************************************
   18 00:472D -  -  -  -  
   19 00:472D -  -  -  -  Unary_Top:	;; [top]
   20 00:472D 2A 4D 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4730 D9 -  -  -  			exx
   22 00:4731 2A 4F 40 -  			ld 		hl,(TopMemory+2)
   23 00:4734 D9 -  -  -  			exx
   24 00:4735 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4737 C9 -  -  -  			ret
   26 00:4738 -  -  -  -  
   27 00:4738 -  -  -  -  ; ***************************************************************************************
   28 00:4738 -  -  -  -  ;
   29 00:4738 -  -  -  -  ;									Changes and Updates
   30 00:4738 -  -  -  -  ;
   31 00:4738 -  -  -  -  ; ***************************************************************************************
   32 00:4738 -  -  -  -  ;
   33 00:4738 -  -  -  -  ;		Date			Notes
   34 00:4738 -  -  -  -  ;		==== 			=====
   35 00:4738 -  -  -  -  ;
   36 00:4738 -  -  -  -  ; ***************************************************************************************
   37 00:4738 -  -  -  -  			
Listing for file "_build.asm"
   47 00:4738 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:4738 -  -  -  -  ; ***************************************************************************************
    2 00:4738 -  -  -  -  ; ***************************************************************************************
    3 00:4738 -  -  -  -  ;
    4 00:4738 -  -  -  -  ;		Name : 		val.asm
    5 00:4738 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4738 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4738 -  -  -  -  ;		Reviewed :	No
    8 00:4738 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:4738 -  -  -  -  ;
   10 00:4738 -  -  -  -  ; ***************************************************************************************
   11 00:4738 -  -  -  -  ; ***************************************************************************************
   12 00:4738 -  -  -  -  
   13 00:4738 -  -  -  -  ; ***************************************************************************************
   14 00:4738 -  -  -  -  ;
   15 00:4738 -  -  -  -  ;								val( unary function
   16 00:4738 -  -  -  -  ;
   17 00:4738 -  -  -  -  ; ***************************************************************************************
   18 00:4738 -  -  -  -  
   19 00:4738 -  -  -  -  Unary_Val:	;; [val]
   20 00:4738 CD E1 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:473B E5 -  -  -  		push 	hl 							; copy to BC
   22 00:473C C1 -  -  -  		pop 	bc
   23 00:473D 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:473F CD 5A 4B -  		call 	Int32FromString 			; get the integer part.
   25 00:4742 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4744 C8 -  -  -  		ret		z 							; okay
   27 00:4745 3E 03 C3 0E 
              43 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:474A -  -  -  -  
   29 00:474A -  -  -  -  ; ***************************************************************************************
   30 00:474A -  -  -  -  ;
   31 00:474A -  -  -  -  ;									Changes and Updates
   32 00:474A -  -  -  -  ;
   33 00:474A -  -  -  -  ; ***************************************************************************************
   34 00:474A -  -  -  -  ;
   35 00:474A -  -  -  -  ;		Date			Notes
   36 00:474A -  -  -  -  ;		==== 			=====
   37 00:474A -  -  -  -  ;
   38 00:474A -  -  -  -  ; ***************************************************************************************
   39 00:474A -  -  -  -  		
Listing for file "_build.asm"
   48 00:474A -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:474A -  -  -  -  ; ***************************************************************************************
    2 00:474A -  -  -  -  ; ***************************************************************************************
    3 00:474A -  -  -  -  ;
    4 00:474A -  -  -  -  ;		Name : 		allocate.asm
    5 00:474A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:474A -  -  -  -  ;		Date : 		4th June 2022
    7 00:474A -  -  -  -  ;		Reviewed :	No
    8 00:474A -  -  -  -  ;		Purpose :	Allocate memory
    9 00:474A -  -  -  -  ;
   10 00:474A -  -  -  -  ; ***************************************************************************************
   11 00:474A -  -  -  -  ; ***************************************************************************************
   12 00:474A -  -  -  -  
   13 00:474A -  -  -  -  ; ***************************************************************************************
   14 00:474A -  -  -  -  ;
   15 00:474A -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:474A -  -  -  -  ;
   17 00:474A -  -  -  -  ; ***************************************************************************************
   18 00:474A -  -  -  -  
   19 00:474A -  -  -  -  AllocateBytes:
   20 00:474A EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:474B 21 00 00 -  		ld 		hl,$000000
   22 00:474E 62 -  -  -  		ld 		h,d
   23 00:474F 6B -  -  -  		ld 		l,e
   24 00:4750 ED 5B 49 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   25 00:4754 D5 -  -  -  		push 	de 							; save on stack
   26 00:4755 19 -  -  -  		add 	hl,de 						; HL is the new highest
   27 00:4756 22 49 40 -  		ld 		(LowAllocMemory),hl 		; update it
   28 00:4759 EB -  -  -  		ex 		de,hl 						; put in DE
   29 00:475A 2A 45 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   30 00:475D AF -  -  -  		xor 	a
   31 00:475E ED 52 -  -  		sbc 	hl,de
   32 00:4760 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   33 00:4761 D0 -  -  -  		ret 	nc 							; return if high >= low
   34 00:4762 3E 07 C3 0E 
              43 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   35 00:4767 -  -  -  -  
   36 00:4767 -  -  -  -  ; ***************************************************************************************
   37 00:4767 -  -  -  -  ;
   38 00:4767 -  -  -  -  ;									Changes and Updates
   39 00:4767 -  -  -  -  ;
   40 00:4767 -  -  -  -  ; ***************************************************************************************
   41 00:4767 -  -  -  -  ;
   42 00:4767 -  -  -  -  ;		Date			Notes
   43 00:4767 -  -  -  -  ;		==== 			=====
   44 00:4767 -  -  -  -  ;
   45 00:4767 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:4767 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4767 -  -  -  -  ; ***************************************************************************************
    2 00:4767 -  -  -  -  ; ***************************************************************************************
    3 00:4767 -  -  -  -  ;
    4 00:4767 -  -  -  -  ;		Name : 		clear.asm
    5 00:4767 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4767 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4767 -  -  -  -  ;		Reviewed :	No
    8 00:4767 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4767 -  -  -  -  ;
   10 00:4767 -  -  -  -  ; ***************************************************************************************
   11 00:4767 -  -  -  -  ; ***************************************************************************************
   12 00:4767 -  -  -  -  
   13 00:4767 -  -  -  -  ; ***************************************************************************************
   14 00:4767 -  -  -  -  ;
   15 00:4767 -  -  -  -  ;										CLEAR command
   16 00:4767 -  -  -  -  ;
   17 00:4767 -  -  -  -  ; ***************************************************************************************
   18 00:4767 -  -  -  -  
   19 00:4767 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4767 -  -  -  -  		;
   21 00:4767 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4767 -  -  -  -  		;
   23 00:4767 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:476A -  -  -  -  _CCFindLow:
   25 00:476A 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:476D 5E -  -  -  		ld 		e,(hl)		
   27 00:476E 19 -  -  -  		add 	hl,de
   28 00:476F 7B -  -  -  		ld 		a,e
   29 00:4770 B7 -  -  -  		or 		a
   30 00:4771 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4773 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4774 22 4D 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4777 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4778 22 49 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:477B -  -  -  -  		;
   36 00:477B -  -  -  -  		; 	 		Reset the language stack
   37 00:477B -  -  -  -  		;
   38 00:477B 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:477E -  -  -  -  		;
   40 00:477E 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:4780 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:4783 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:4786 19 -  -  -  		add 	hl,de
   44 00:4787 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4789 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:478C -  -  -  -  		;
   47 00:478C 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:478F 19 -  -  -  		add 	hl,de
   49 00:4790 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:4793 -  -  -  -  		;
   51 00:4793 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:4793 -  -  -  -  		;
   53 00:4793 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:4796 -  -  -  -  _CCFClearHT:
   55 00:4796 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:4797 36 00 -  -  		ld 		(hl),0
   57 00:4799 1B -  -  -  		dec 	de
   58 00:479A 7A -  -  -  		ld 		a,d
   59 00:479B B3 -  -  -  		or 		e
   60 00:479C 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:479E 22 41 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:47A1 -  -  -  -  		;
   63 00:47A1 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:47A1 -  -  -  -  		;
   65 00:47A1 22 45 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:47A4 -  -  -  -  		;
   67 00:47A4 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:47A4 -  -  -  -  		;
   69 00:47A4 CD 96 46 -  		call 	UnaryRandomInitialise
   70 00:47A7 C9 -  -  -  		ret
   71 00:47A8 -  -  -  -  
   72 00:47A8 -  -  -  -  ; ***************************************************************************************
   73 00:47A8 -  -  -  -  ;
   74 00:47A8 -  -  -  -  ;									Changes and Updates
   75 00:47A8 -  -  -  -  ;
   76 00:47A8 -  -  -  -  ; ***************************************************************************************
   77 00:47A8 -  -  -  -  ;
   78 00:47A8 -  -  -  -  ;		Date			Notes
   79 00:47A8 -  -  -  -  ;		==== 			=====
   80 00:47A8 -  -  -  -  ;
   81 00:47A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:47A8 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:47A8 -  -  -  -  ; ***************************************************************************************
    2 00:47A8 -  -  -  -  ; ***************************************************************************************
    3 00:47A8 -  -  -  -  ;
    4 00:47A8 -  -  -  -  ;		Name : 		instance.asm
    5 00:47A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47A8 -  -  -  -  ;		Reviewed :	No
    8 00:47A8 -  -  -  -  ;		Purpose :	Instance handling
    9 00:47A8 -  -  -  -  ;
   10 00:47A8 -  -  -  -  ; ***************************************************************************************
   11 00:47A8 -  -  -  -  ; ***************************************************************************************
   12 00:47A8 -  -  -  -  
   13 00:47A8 -  -  -  -  ; ***************************************************************************************
   14 00:47A8 -  -  -  -  ;
   15 00:47A8 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:47A8 -  -  -  -  ;
   17 00:47A8 -  -  -  -  ; ***************************************************************************************
   18 00:47A8 -  -  -  -  
   19 00:47A8 -  -  -  -  SetCurrentInstance:
   20 00:47A8 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:47AC 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:47AF ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:47B3 -  -  -  -  
   24 00:47B3 C9 -  -  -  		ret
   25 00:47B4 -  -  -  -  
   26 00:47B4 -  -  -  -  
   27 00:47B4 -  -  -  -  ; ***************************************************************************************
   28 00:47B4 -  -  -  -  ;
   29 00:47B4 -  -  -  -  ;									Changes and Updates
   30 00:47B4 -  -  -  -  ;
   31 00:47B4 -  -  -  -  ; ***************************************************************************************
   32 00:47B4 -  -  -  -  ;
   33 00:47B4 -  -  -  -  ;		Date			Notes
   34 00:47B4 -  -  -  -  ;		==== 			=====
   35 00:47B4 -  -  -  -  ;
   36 00:47B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:47B4 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:47B4 -  -  -  -  ; ***************************************************************************************
    2 00:47B4 -  -  -  -  ; ***************************************************************************************
    3 00:47B4 -  -  -  -  ;
    4 00:47B4 -  -  -  -  ;		Name : 		new.asm
    5 00:47B4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47B4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47B4 -  -  -  -  ;		Reviewed :	No
    8 00:47B4 -  -  -  -  ;		Purpose :	New command.
    9 00:47B4 -  -  -  -  ;
   10 00:47B4 -  -  -  -  ; ***************************************************************************************
   11 00:47B4 -  -  -  -  ; ***************************************************************************************
   12 00:47B4 -  -  -  -  
   13 00:47B4 -  -  -  -  ; ***************************************************************************************
   14 00:47B4 -  -  -  -  ;
   15 00:47B4 -  -  -  -  ;										NEW command
   16 00:47B4 -  -  -  -  ;
   17 00:47B4 -  -  -  -  ; ***************************************************************************************
   18 00:47B4 -  -  -  -  
   19 00:47B4 -  -  -  -  Command_NEW: 	;; [new]
   20 00:47B4 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:47B7 36 00 -  -  		ld 		(hl),0
   22 00:47B9 CD 67 47 -  		call 	Command_CLEAR 				; clear all variables
   23 00:47BC 3E 00 C3 0E 
              43 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:47C1 -  -  -  -  
   25 00:47C1 -  -  -  -  ; ***************************************************************************************
   26 00:47C1 -  -  -  -  ;
   27 00:47C1 -  -  -  -  ;									Changes and Updates
   28 00:47C1 -  -  -  -  ;
   29 00:47C1 -  -  -  -  ; ***************************************************************************************
   30 00:47C1 -  -  -  -  ;
   31 00:47C1 -  -  -  -  ;		Date			Notes
   32 00:47C1 -  -  -  -  ;		==== 			=====
   33 00:47C1 -  -  -  -  ;
   34 00:47C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:47C1 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:47C1 -  -  -  -  ; ***************************************************************************************
    2 00:47C1 -  -  -  -  ; ***************************************************************************************
    3 00:47C1 -  -  -  -  ;
    4 00:47C1 -  -  -  -  ;		Name : 		utility.asm
    5 00:47C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47C1 -  -  -  -  ;		Reviewed :	No
    8 00:47C1 -  -  -  -  ;		Purpose :	Utility routines
    9 00:47C1 -  -  -  -  ;
   10 00:47C1 -  -  -  -  ; ***************************************************************************************
   11 00:47C1 -  -  -  -  ; ***************************************************************************************
   12 00:47C1 -  -  -  -  
   13 00:47C1 -  -  -  -  ; ***************************************************************************************
   14 00:47C1 -  -  -  -  ;
   15 00:47C1 -  -  -  -  ;							Print ASCII string at HL
   16 00:47C1 -  -  -  -  ;
   17 00:47C1 -  -  -  -  ; ***************************************************************************************
   18 00:47C1 -  -  -  -  
   19 00:47C1 -  -  -  -  PrintStringAtHL:
   20 00:47C1 7E -  -  -  		ld 		a,(hl)
   21 00:47C2 FE 20 -  -  		cp 		$20		
   22 00:47C4 D8 -  -  -  		ret 	c
   23 00:47C5 CD B2 4C -  		call 	SYSPrintChar
   24 00:47C8 23 -  -  -  		inc 	hl
   25 00:47C9 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:47CB -  -  -  -  
   27 00:47CB -  -  -  -  ; ***************************************************************************************
   28 00:47CB -  -  -  -  ;
   29 00:47CB -  -  -  -  ;									Changes and Updates
   30 00:47CB -  -  -  -  ;
   31 00:47CB -  -  -  -  ; ***************************************************************************************
   32 00:47CB -  -  -  -  ;
   33 00:47CB -  -  -  -  ;		Date			Notes
   34 00:47CB -  -  -  -  ;		==== 			=====
   35 00:47CB -  -  -  -  ;
   36 00:47CB -  -  -  -  ; ***************************************************************************************
   37 00:47CB -  -  -  -  		
Listing for file "_build.asm"
   53 00:47CB -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:47CB -  -  -  -  ; ***************************************************************************************
    2 00:47CB -  -  -  -  ; ***************************************************************************************
    3 00:47CB -  -  -  -  ;
    4 00:47CB -  -  -  -  ;		Name : 		create.asm
    5 00:47CB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47CB -  -  -  -  ;		Date : 		4th June 2022
    7 00:47CB -  -  -  -  ;		Reviewed :	No
    8 00:47CB -  -  -  -  ;		Purpose :	Create a variable.
    9 00:47CB -  -  -  -  ;
   10 00:47CB -  -  -  -  ; ***************************************************************************************
   11 00:47CB -  -  -  -  ; ***************************************************************************************
   12 00:47CB -  -  -  -  
   13 00:47CB -  -  -  -  ; ***************************************************************************************
   14 00:47CB -  -  -  -  ;
   15 00:47CB -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:47CB -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:47CB -  -  -  -  ;
   18 00:47CB -  -  -  -  ; ***************************************************************************************
   19 00:47CB -  -  -  -  
   20 00:47CB -  -  -  -  VariableCreate:		
   21 00:47CB -  -  -  -  		;
   22 00:47CB -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:47CB -  -  -  -  		;
   24 00:47CB 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:47CE 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:47CF E5 -  -  -  		push 	hl 							; save count.
   27 00:47D0 CD 4A 47 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:47D3 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:47D4 -  -  -  -  		;
   30 00:47D4 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:47D4 -  -  -  -  		;
   32 00:47D4 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:47D5 -  -  -  -  _VCClear:
   34 00:47D5 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:47D7 23 -  -  -  		inc 	hl
   36 00:47D8 0B -  -  -  		dec 	bc
   37 00:47D9 78 -  -  -  		ld		a,b
   38 00:47DA B1 -  -  -  		or 		c
   39 00:47DB 20 F8 -  -  		jr 		nz,_VCClear
   40 00:47DD E1 -  -  -  		pop 	hl							; restore start address
   41 00:47DE -  -  -  -  		;
   42 00:47DE -  -  -  -  		;		Now start to create the data.
   43 00:47DE -  -  -  -  		;
   44 00:47DE E5 -  -  -  		push 	hl 							; save start
   45 00:47DF -  -  -  -  		;
   46 00:47DF -  -  -  -  		;		Write hash to +0
   47 00:47DF -  -  -  -  		;
   48 00:47DF 3A 7D 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:47E2 77 -  -  -  		ld 		(hl),a
   50 00:47E3 23 -  -  -  		inc 	hl
   51 00:47E4 -  -  -  -  		;
   52 00:47E4 -  -  -  -  		;		Write list head to +1
   53 00:47E4 -  -  -  -  		;
   54 00:47E4 E5 -  -  -  		push 	hl 							; save write position
   55 00:47E5 2A 7F 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:47E8 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:47EC EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:47ED E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:47EE 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:47F4 -  -  -  -  		;
   61 00:47F4 -  -  -  -  		;		Write variable name to +5
   62 00:47F4 -  -  -  -  		;
   63 00:47F4 ED 5B 79 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:47F8 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:47FE -  -  -  -  		;
   66 00:47FE D1 -  -  -  		pop 	de 							; get the start address back
   67 00:47FF 2A 7F 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4802 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4808 -  -  -  -  		;
   70 00:4808 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4809 C9 -  -  -  		ret
   72 00:480A -  -  -  -  
   73 00:480A -  -  -  -  ; ***************************************************************************************
   74 00:480A -  -  -  -  ;
   75 00:480A -  -  -  -  ;									Changes and Updates
   76 00:480A -  -  -  -  ;
   77 00:480A -  -  -  -  ; ***************************************************************************************
   78 00:480A -  -  -  -  ;
   79 00:480A -  -  -  -  ;		Date			Notes
   80 00:480A -  -  -  -  ;		==== 			=====
   81 00:480A -  -  -  -  ;
   82 00:480A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:480A -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:480A -  -  -  -  ; ***************************************************************************************
    2 00:480A -  -  -  -  ; ***************************************************************************************
    3 00:480A -  -  -  -  ;
    4 00:480A -  -  -  -  ;		Name : 		find.asm
    5 00:480A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:480A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:480A -  -  -  -  ;		Reviewed :	No
    8 00:480A -  -  -  -  ;		Purpose :	Find a variable.
    9 00:480A -  -  -  -  ;
   10 00:480A -  -  -  -  ; ***************************************************************************************
   11 00:480A -  -  -  -  ; ***************************************************************************************
   12 00:480A -  -  -  -  
   13 00:480A -  -  -  -  ; ***************************************************************************************
   14 00:480A -  -  -  -  ;
   15 00:480A -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:480A -  -  -  -  ; 		variable information at (IX)
   17 00:480A -  -  -  -  ;
   18 00:480A -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:480A -  -  -  -  ;		Don't autocreate arrays.
   20 00:480A -  -  -  -  ;
   21 00:480A -  -  -  -  ; ***************************************************************************************
   22 00:480A -  -  -  -  
   23 00:480A -  -  -  -  FindVariable:
   24 00:480A DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:480D FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:480F D2 6B 43 -  		jp 		nc,SyntaxError 		
   27 00:4812 -  -  -  -  
   28 00:4812 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4815 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4817 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4819 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:481B 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:481D -  -  -  -  		;
   34 00:481D -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:481D -  -  -  -  		;
   36 00:481D 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:4820 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4823 87 -  -  -  		add 	a,a 						; x4
   39 00:4824 87 -  -  -  		add 	a,a
   40 00:4825 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4826 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4827 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4829 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:482B DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:482D AF -  -  -  		xor 	a 							; clear carry and return
   46 00:482E C9 -  -  -  		ret
   47 00:482F -  -  -  -  		;
   48 00:482F -  -  -  -  		;		Not a standard simple variable.
   49 00:482F -  -  -  -  		;
   50 00:482F -  -  -  -  _FVNotSimple:
   51 00:482F CD 5C 48 -  		call 	VariableInformation 		; get information about the variable.
   52 00:4832 CD 92 48 -  		call 	VariableSearchList 			; search the linked list
   53 00:4835 38 0A -  -  		jr 		c,_FVNotFound  				
   54 00:4837 -  -  -  -  		;
   55 00:4837 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4837 -  -  -  -  		;
   57 00:4837 -  -  -  -  _FVExitReference:		
   58 00:4837 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:483A 19 -  -  -  		add 	hl,de 
   60 00:483B -  -  -  -  		;
   61 00:483B -  -  -  -  		; 		TODO: Array check code.
   62 00:483B -  -  -  -  		;
   63 00:483B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:483D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:483F AF -  -  -  		xor 	a 							; clear carry and return
   66 00:4840 C9 -  -  -  		ret
   67 00:4841 -  -  -  -  		;
   68 00:4841 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:4841 -  -  -  -  		;
   70 00:4841 -  -  -  -  _FVNotFound:		
   71 00:4841 3A 75 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:4844 B7 -  -  -  		or 		a
   73 00:4845 28 0F -  -  		jr 		z,_FVFail
   74 00:4847 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:484A FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:484C 28 08 -  -  		jr 		z,_FVFail
   77 00:484E 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   78 00:4851 CD CB 47 -  		call 	VariableCreate 				; create a new variable.
   79 00:4854 18 E1 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:4856 -  -  -  -  
   81 00:4856 -  -  -  -  _FVFail:
   82 00:4856 DD 2A 79 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:485A 37 -  -  -  		scf
   84 00:485B C9 -  -  -  		ret
   85 00:485C -  -  -  -  
   86 00:485C -  -  -  -  ; ***************************************************************************************
   87 00:485C -  -  -  -  ;
   88 00:485C -  -  -  -  ;									Changes and Updates
   89 00:485C -  -  -  -  ;
   90 00:485C -  -  -  -  ; ***************************************************************************************
   91 00:485C -  -  -  -  ;
   92 00:485C -  -  -  -  ;		Date			Notes
   93 00:485C -  -  -  -  ;		==== 			=====
   94 00:485C -  -  -  -  ;
   95 00:485C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:485C -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:485C -  -  -  -  ; ***************************************************************************************
    2 00:485C -  -  -  -  ; ***************************************************************************************
    3 00:485C -  -  -  -  ;
    4 00:485C -  -  -  -  ;		Name : 		info.asm
    5 00:485C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:485C -  -  -  -  ;		Date : 		4th June 2022
    7 00:485C -  -  -  -  ;		Reviewed :	No
    8 00:485C -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:485C -  -  -  -  ;
   10 00:485C -  -  -  -  ; ***************************************************************************************
   11 00:485C -  -  -  -  ; ***************************************************************************************
   12 00:485C -  -  -  -  
   13 00:485C -  -  -  -  ; ***************************************************************************************
   14 00:485C -  -  -  -  ;
   15 00:485C -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:485C -  -  -  -  ; 		after the identifier.
   17 00:485C -  -  -  -  ;
   18 00:485C -  -  -  -  ; ***************************************************************************************
   19 00:485C -  -  -  -  
   20 00:485C -  -  -  -  VariableInformation:
   21 00:485C DD 22 79 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4860 -  -  -  -  		;
   23 00:4860 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4860 -  -  -  -  		;
   25 00:4860 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4862 -  -  -  -  _VICalculateHash:
   27 00:4862 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4865 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4867 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4869 80 -  -  -  		add 	a,b 						; add to hash
   31 00:486A 07 -  -  -  		rlca
   32 00:486B 07 -  -  -  		rlca
   33 00:486C 80 -  -  -  		add 	a,b
   34 00:486D 47 -  -  -  		ld 		b,a 						; update hash
   35 00:486E DD 23 -  -  		inc 	ix 							; next character
   36 00:4870 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:4872 -  -  -  -  		;
   38 00:4872 -  -  -  -  _VIHashDone:
   39 00:4872 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:4873 -  -  -  -  		;
   41 00:4873 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:4873 -  -  -  -  		;
   43 00:4873 32 7D 40 -  		ld 		(VarHash),a
   44 00:4876 -  -  -  -  		;
   45 00:4876 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:4876 -  -  -  -  		;		
   47 00:4876 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:4878 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:487B 6F -  -  -  		ld 		l,a
   50 00:487C 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:487D 29 -  -  -  		add 	hl,hl
   52 00:487E -  -  -  -  		;
   53 00:487E ED 5B 41 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:4882 19 -  -  -  		add 	hl,de
   55 00:4883 -  -  -  -  		;
   56 00:4883 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:4886 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:4888 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:488A 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:488D 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:488E -  -  -  -  _VINotArray:
   62 00:488E 22 7F 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:4891 C9 -  -  -  		ret
   64 00:4892 -  -  -  -  
   65 00:4892 -  -  -  -  ; ***************************************************************************************
   66 00:4892 -  -  -  -  ;
   67 00:4892 -  -  -  -  ;									Changes and Updates
   68 00:4892 -  -  -  -  ;
   69 00:4892 -  -  -  -  ; ***************************************************************************************
   70 00:4892 -  -  -  -  ;
   71 00:4892 -  -  -  -  ;		Date			Notes
   72 00:4892 -  -  -  -  ;		==== 			=====
   73 00:4892 -  -  -  -  ;
   74 00:4892 -  -  -  -  ; ***************************************************************************************
   75 00:4892 -  -  -  -  
Listing for file "_build.asm"
   56 00:4892 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:4892 -  -  -  -  ; ***************************************************************************************
    2 00:4892 -  -  -  -  ; ***************************************************************************************
    3 00:4892 -  -  -  -  ;
    4 00:4892 -  -  -  -  ;		Name : 		search.asm
    5 00:4892 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4892 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4892 -  -  -  -  ;		Reviewed :	No
    8 00:4892 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:4892 -  -  -  -  ;
   10 00:4892 -  -  -  -  ; ***************************************************************************************
   11 00:4892 -  -  -  -  ; ***************************************************************************************
   12 00:4892 -  -  -  -  
   13 00:4892 -  -  -  -  ; ***************************************************************************************
   14 00:4892 -  -  -  -  ;
   15 00:4892 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:4892 -  -  -  -  ;		CS if failed.
   17 00:4892 -  -  -  -  ;
   18 00:4892 -  -  -  -  ; ***************************************************************************************
   19 00:4892 -  -  -  -  
   20 00:4892 -  -  -  -  VariableSearchList:
   21 00:4892 2A 7F 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4895 -  -  -  -  		;
   23 00:4895 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4895 -  -  -  -  		;		the address of the hash record
   25 00:4895 -  -  -  -  		;
   26 00:4895 -  -  -  -  _VSLLoop:
   27 00:4895 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4899 -  -  -  -  		;
   29 00:4899 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:489A AF -  -  -  		xor 	a
   31 00:489B ED 6A -  -  		adc 	hl,hl
   32 00:489D E1 -  -  -  		pop 	hl
   33 00:489E 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:48A0 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:48A1 C8 -  -  -  		ret 	z
   36 00:48A2 -  -  -  -  _VSLRecord:
   37 00:48A2 -  -  -  -  		;
   38 00:48A2 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:48A2 -  -  -  -  		;
   40 00:48A2 3A 7D 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:48A5 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:48A6 23 -  -  -  		inc 	hl 							; points to link back
   43 00:48A7 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:48A9 -  -  -  -  		;
   45 00:48A9 -  -  -  -  		;		Now check the name
   46 00:48A9 -  -  -  -  		;
   47 00:48A9 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:48AA 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:48AB 23 -  -  -  		inc 	hl
   50 00:48AC 23 -  -  -  		inc 	hl
   51 00:48AD 23 -  -  -  		inc 	hl
   52 00:48AE 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:48B2 ED 5B 79 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:48B6 -  -  -  -  		;
   55 00:48B6 -  -  -  -  		;		Check individual characters
   56 00:48B6 -  -  -  -  		;
   57 00:48B6 -  -  -  -  _VSLCharacter:
   58 00:48B6 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:48B7 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:48B9 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:48BB BE -  -  -  		cp 		(hl) 						; compare them
   62 00:48BC 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:48BD 13 -  -  -  		inc 	de
   64 00:48BE 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:48C0 -  -  -  -  		;
   66 00:48C0 -  -  -  -  _VSLFailed:
   67 00:48C0 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:48C1 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:48C3 -  -  -  -  		;
   70 00:48C3 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:48C3 -  -  -  -  		;		
   72 00:48C3 -  -  -  -  _VSLEndIdentifier:
   73 00:48C3 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:48C4 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:48C6 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:48C8 -  -  -  -  		;
   77 00:48C8 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:48C9 2B -  -  -  		dec 	hl 							; now start of record
   79 00:48CA AF -  -  -  		xor 	a 							; clear carry
   80 00:48CB C9 -  -  -  		ret
   81 00:48CC -  -  -  -  
   82 00:48CC -  -  -  -  ; ***************************************************************************************
   83 00:48CC -  -  -  -  ;
   84 00:48CC -  -  -  -  ;									Changes and Updates
   85 00:48CC -  -  -  -  ;
   86 00:48CC -  -  -  -  ; ***************************************************************************************
   87 00:48CC -  -  -  -  ;
   88 00:48CC -  -  -  -  ;		Date			Notes
   89 00:48CC -  -  -  -  ;		==== 			=====
   90 00:48CC -  -  -  -  ;
   91 00:48CC -  -  -  -  ; ***************************************************************************************
   92 00:48CC -  -  -  -  		
Listing for file "_build.asm"
   57 00:48CC -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:48CC -  -  -  -  ;
    2 00:48CC -  -  -  -  ;	This file is automatically generated.
    3 00:48CC -  -  -  -  ;
    4 00:48CC 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 00:48E0 -  -  -  -  PrecedenceTable:
    6 00:48E0 06 -  -  -  	.db	6	; $0083 !
    7 00:48E1 06 -  -  -  	.db	6	; $0084 ?
    8 00:48E2 05 -  -  -  	.db	5	; $0085 *
    9 00:48E3 05 -  -  -  	.db	5	; $0086 /
   10 00:48E4 05 -  -  -  	.db	5	; $0087 mod
   11 00:48E5 05 -  -  -  	.db	5	; $0088 div
   12 00:48E6 04 -  -  -  	.db	4	; $0089 +
   13 00:48E7 04 -  -  -  	.db	4	; $008a -
   14 00:48E8 03 -  -  -  	.db	3	; $008b >=
   15 00:48E9 03 -  -  -  	.db	3	; $008c <=
   16 00:48EA 03 -  -  -  	.db	3	; $008d >
   17 00:48EB 03 -  -  -  	.db	3	; $008e <
   18 00:48EC 03 -  -  -  	.db	3	; $008f =
   19 00:48ED 03 -  -  -  	.db	3	; $0090 <>
   20 00:48EE 02 -  -  -  	.db	2	; $0091 and
   21 00:48EF 01 -  -  -  	.db	1	; $0092 or
   22 00:48F0 01 -  -  -  	.db	1	; $0093 eor
   23 00:48F1 -  -  -  -  
Listing for file "_build.asm"
   58 00:48F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:48F1 -  -  -  -  ;
    2 00:48F1 -  -  -  -  ;	This is automatically generated.
    3 00:48F1 -  -  -  -  ;
    4 00:48F1 -  -  -  -  ErrorIDTable:
    5 00:48F1 35 49 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:48F5 3B 49 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:48F9 4C 49 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:48FD 5A 49 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4901 64 49 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:4905 6E 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:4909 88 49 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:490D 99 49 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:4911 A7 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:4915 B5 49 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:4919 BF 49 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:491D D4 49 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:4921 EA 49 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:4925 F8 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:4929 FD 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:492D 0A 4A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:4931 1B 4A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:4935 -  -  -  -  
   23 00:4935 -  -  -  -  ErrText_warmstart:
   24 00:4935 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:493B -  -  -  -  ErrText_assert:
   26 00:493B 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:494C -  -  -  -  ErrText_badtype:
   28 00:494C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:495A -  -  -  -  ErrText_badvalue:
   30 00:495A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:4964 -  -  -  -  ErrText_dim:
   32 00:4964 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:496E -  -  -  -  ErrText_disabled:
   34 00:496E 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:4988 -  -  -  -  ErrText_divzero:
   36 00:4988 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:4999 -  -  -  -  ErrText_memory:
   38 00:4999 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:49A7 -  -  -  -  ErrText_nocomma:
   40 00:49A7 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:49B5 -  -  -  -  ErrText_nodollar:
   42 00:49B5 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:49BF -  -  -  -  ErrText_nolbracket:
   44 00:49BF 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:49D4 -  -  -  -  ErrText_norbracket:
   46 00:49D4 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:49EA -  -  -  -  ErrText_notref:
   48 00:49EA 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:49F8 -  -  -  -  ErrText_stop:
   50 00:49F8 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:49FD -  -  -  -  ErrText_syntax:
   52 00:49FD 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:4A0A -  -  -  -  ErrText_todo:
   54 00:4A0A 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:4A1B -  -  -  -  ErrText_unknownvar:
   56 00:4A1B 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:4A2C -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4A2C -  -  -  -  ;
    2 00:4A2C -  -  -  -  ;	Vectors for set 0
    3 00:4A2C -  -  -  -  ;
    4 00:4A2C -  -  -  -  VectorsSet0:
    5 00:4A2C 8D 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4A2E 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4A30 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4A32 C8 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4A34 D0 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4A36 86 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4A38 91 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4A3A 9C 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4A3C 91 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4A3E 70 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4A40 7B 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4A42 23 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4A44 1A 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4A46 08 44 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4A48 FF 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4A4A F6 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4A4C 11 44 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4A4E A7 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4A50 B2 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4A52 BD 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4A54 F7 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4A56 F1 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4A58 38 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4A5A 5E 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4A5C 29 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4A5E 06 46 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4A60 DC 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4A62 04 47 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4A64 18 46 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4A66 11 46 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4A68 41 46 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4A6A 53 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4A6C 27 47 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4A6E 2D 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4A70 38 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4A72 E8 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4A74 EC 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4A76 E4 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4A78 E4 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4A7A E7 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4A7C E4 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4A7E 4C 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4A80 1F 40 -  -  	addr(Unimplemented)              ; $00aa [
   48 00:4A82 1F 40 -  -  	addr(Unimplemented)              ; $00ab ]
   49 00:4A84 1F 40 -  -  	addr(Unimplemented)              ; $00ac ~
   50 00:4A86 1F 40 -  -  	addr(Unimplemented)              ; $00ad repeat
   51 00:4A88 1F 40 -  -  	addr(Unimplemented)              ; $00ae until
   52 00:4A8A 1F 40 -  -  	addr(Unimplemented)              ; $00af if
   53 00:4A8C E4 40 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:4A8E 1F 40 -  -  	addr(Unimplemented)              ; $00b1 else
   55 00:4A90 1F 40 -  -  	addr(Unimplemented)              ; $00b2 for
   56 00:4A92 E4 40 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:4A94 1F 40 -  -  	addr(Unimplemented)              ; $00b4 step
   58 00:4A96 1F 40 -  -  	addr(Unimplemented)              ; $00b5 next
   59 00:4A98 1F 40 -  -  	addr(Unimplemented)              ; $00b6 def
   60 00:4A9A 1F 40 -  -  	addr(Unimplemented)              ; $00b7 proc
   61 00:4A9C 1F 40 -  -  	addr(Unimplemented)              ; $00b8 endproc
   62 00:4A9E 1F 40 -  -  	addr(Unimplemented)              ; $00b9 gosub
   63 00:4AA0 1F 40 -  -  	addr(Unimplemented)              ; $00ba return
   64 00:4AA2 1F 40 -  -  	addr(Unimplemented)              ; $00bb goto
   65 00:4AA4 1F 40 -  -  	addr(Unimplemented)              ; $00bc local
   66 00:4AA6 E8 40 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:4AA8 4C 42 -  -  	addr(Command_REM)                ; $00be rem
   68 00:4AAA A0 41 -  -  	addr(Command_LET)                ; $00bf let
   69 00:4AAC 1F 40 -  -  	addr(Unimplemented)              ; $00c0 vdu
   70 00:4AAE E5 41 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:4AB0 1F 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:4AB2 1F 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:4AB4 1F 40 -  -  	addr(Unimplemented)              ; $00c4 list
   74 00:4AB6 B4 47 -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:4AB8 67 42 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:4ABA 1F 40 -  -  	addr(Unimplemented)              ; $00c7 read
   77 00:4ABC 1F 40 -  -  	addr(Unimplemented)              ; $00c8 data
   78 00:4ABE 1F 40 -  -  	addr(Unimplemented)              ; $00c9 restore
   79 00:4AC0 D5 40 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:4AC2 67 47 -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:4AC4 88 41 -  -  	addr(Command_END)                ; $00cc end
   82 00:4AC6 CA 42 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:4AC8 -  -  -  -  ;
   84 00:4AC8 -  -  -  -  ;	Vectors for set 1
   85 00:4AC8 -  -  -  -  ;
   86 00:4AC8 -  -  -  -  VectorsSet1:
   87 00:4AC8 -  -  -  -  ;
   88 00:4AC8 -  -  -  -  ;	Vectors for set 2
   89 00:4AC8 -  -  -  -  ;
   90 00:4AC8 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:4AC8 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4AC8 -  -  -  -  ; ***************************************************************************************
    2 00:4AC8 -  -  -  -  ; ***************************************************************************************
    3 00:4AC8 -  -  -  -  ;
    4 00:4AC8 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4AC8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AC8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AC8 -  -  -  -  ;		Reviewed :	No
    8 00:4AC8 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4AC8 -  -  -  -  ;
   10 00:4AC8 -  -  -  -  ; ***************************************************************************************
   11 00:4AC8 -  -  -  -  ; ***************************************************************************************
   12 00:4AC8 -  -  -  -  
   13 00:4AC8 -  -  -  -  ; ***************************************************************************************
   14 00:4AC8 -  -  -  -  ;
   15 00:4AC8 -  -  -  -  ;								Unsigned integer divide
   16 00:4AC8 -  -  -  -  ;
   17 00:4AC8 -  -  -  -  ; ***************************************************************************************
   18 00:4AC8 -  -  -  -  
   19 00:4AC8 -  -  -  -  Int32UDivide:
   20 00:4AC8 37 -  -  -  		scf
   21 00:4AC9 C3 07 4B -  		jp 		_I32UnsignedDivide		
   22 00:4ACC -  -  -  -  
   23 00:4ACC -  -  -  -  ; ***************************************************************************************
   24 00:4ACC -  -  -  -  ;
   25 00:4ACC -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4ACC -  -  -  -  ;
   27 00:4ACC -  -  -  -  ; ***************************************************************************************
   28 00:4ACC -  -  -  -  
   29 00:4ACC -  -  -  -  Int32SDivide:
   30 00:4ACC 37 -  -  -  		scf
   31 00:4ACD 18 01 -  -  		jr 		_I32SDivide
   32 00:4ACF -  -  -  -  Int32Modulus:
   33 00:4ACF AF -  -  -  		xor 	a
   34 00:4AD0 -  -  -  -  _I32SDivide:
   35 00:4AD0 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4AD1 F5 -  -  -  		push 	af
   37 00:4AD2 08 -  -  -  		ex 		af,af'
   38 00:4AD3 -  -  -  -  
   39 00:4AD3 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4AD4 D9 -  -  -  		exx
   41 00:4AD5 D5 -  -  -  		push 	de
   42 00:4AD6 D9 -  -  -  		exx
   43 00:4AD7 -  -  -  -  
   44 00:4AD7 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4AD8 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4AD9 CD F5 4A -  		call 	_I32CheckHLSignSwap
   47 00:4ADC CD F5 4A -  		call 	_I32CheckHLSignSwap
   48 00:4ADF 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4AE0 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4AE1 F5 -  -  -  		push 	af
   51 00:4AE2 CD 07 4B -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4AE5 F1 -  -  -  		pop 	af 							; get function back
   53 00:4AE6 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4AE8 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4AE9 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4AEB C4 51 4C -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4AEE -  -  -  -  _I32SDExit:
   58 00:4AEE D9 -  -  -  		exx 								; restore DE'DE
   59 00:4AEF D1 -  -  -  		pop 	de
   60 00:4AF0 D9 -  -  -  		exx
   61 00:4AF1 D1 -  -  -  		pop 	de
   62 00:4AF2 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4AF3 08 -  -  -  		ex 		af,af'
   64 00:4AF4 C9 -  -  -  		ret
   65 00:4AF5 -  -  -  -  
   66 00:4AF5 -  -  -  -  
   67 00:4AF5 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4AF5 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4AF6 CB 7C -  -  		bit 	7,h
   70 00:4AF8 D9 -  -  -  		exx
   71 00:4AF9 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4AFB -  -  -  -  		;
   73 00:4AFB C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4AFD F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4AFE CD 51 4C -  		call 	Int32Negate 				
   76 00:4B01 F1 -  -  -  		pop 	af
   77 00:4B02 -  -  -  -  _I32CHSPositive:
   78 00:4B02 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4B03 EB -  -  -  		ex 		de,hl
   80 00:4B04 D9 -  -  -  		exx		
   81 00:4B05 EB -  -  -  		ex 		de,hl
   82 00:4B06 C9 -  -  -  		ret
   83 00:4B07 -  -  -  -  
   84 00:4B07 -  -  -  -  ; ***************************************************************************************
   85 00:4B07 -  -  -  -  ;
   86 00:4B07 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4B07 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4B07 -  -  -  -  ;
   89 00:4B07 -  -  -  -  ; ***************************************************************************************
   90 00:4B07 -  -  -  -  
   91 00:4B07 -  -  -  -  _I32UnsignedDivide:
   92 00:4B07 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4B08 D5 -  -  -  		push 	de
   94 00:4B09 D9 -  -  -  		exx
   95 00:4B0A C5 -  -  -  		push 	bc
   96 00:4B0B D5 -  -  -  		push 	de 							
   97 00:4B0C D9 -  -  -  		exx
   98 00:4B0D -  -  -  -  
   99 00:4B0D F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4B0E -  -  -  -  
  101 00:4B0E 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4B0F B3 -  -  -  		or 		e
  103 00:4B10 D9 -  -  -  		exx
  104 00:4B11 B2 -  -  -  		or 		d
  105 00:4B12 B3 -  -  -  		or 		e
  106 00:4B13 D9 -  -  -  		exx
  107 00:4B14 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4B17 -  -  -  -  
  109 00:4B17 -  -  -  -  
  110 00:4B17 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4B18 4D -  -  -  		ld		c,l
  112 00:4B19 21 00 00 -  		ld 		hl,$0000
  113 00:4B1C D9 -  -  -  		exx
  114 00:4B1D 44 -  -  -  		ld 		b,h
  115 00:4B1E 4D -  -  -  		ld		c,l
  116 00:4B1F 21 00 00 -  		ld 		hl,$0000
  117 00:4B22 D9 -  -  -  		exx
  118 00:4B23 -  -  -  -  
  119 00:4B23 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4B25 -  -  -  -  _I32DivideLoop:
  121 00:4B25 F5 -  -  -  		push 	af
  122 00:4B26 -  -  -  -  
  123 00:4B26 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4B28 CB 10 -  -  		rl 		b
  125 00:4B2A D9 -  -  -  		exx
  126 00:4B2B CB 11 -  -  		rl 		c
  127 00:4B2D CB 10 -  -  		rl 		b
  128 00:4B2F D9 -  -  -  		exx
  129 00:4B30 CB 15 -  -  		rl 		l
  130 00:4B32 CB 14 -  -  		rl 		h
  131 00:4B34 D9 -  -  -  		exx
  132 00:4B35 CB 15 -  -  		rl 		l
  133 00:4B37 CB 14 -  -  		rl 		h
  134 00:4B39 D9 -  -  -  		exx
  135 00:4B3A -  -  -  -  
  136 00:4B3A CD F7 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4B3D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4B3F -  -  -  -  
  139 00:4B3F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4B40 18 03 -  -  		jr 		_I32Next
  141 00:4B42 -  -  -  -  
  142 00:4B42 -  -  -  -  _I32Borrow:
  143 00:4B42 CD F1 4B -  		call 	Int32Add 					; A = A + M
  144 00:4B45 -  -  -  -  _I32Next:
  145 00:4B45 F1 -  -  -  		pop 	af
  146 00:4B46 3D -  -  -  		dec 	a
  147 00:4B47 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4B49 -  -  -  -  
  149 00:4B49 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4B4A -  -  -  -  
  151 00:4B4A 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4B4B 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4B4D -  -  -  -  
  154 00:4B4D 60 -  -  -  		ld  	h,b
  155 00:4B4E 69 -  -  -  		ld 		l,c
  156 00:4B4F D9 -  -  -  		exx
  157 00:4B50 60 -  -  -  		ld  	h,b
  158 00:4B51 69 -  -  -  		ld 		l,c
  159 00:4B52 D9 -  -  -  		exx
  160 00:4B53 -  -  -  -  _I32Modulus1:		
  161 00:4B53 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4B54 D1 -  -  -  		pop 	de
  163 00:4B55 C1 -  -  -  		pop 	bc
  164 00:4B56 D9 -  -  -  		exx
  165 00:4B57 D1 -  -  -  		pop 	de
  166 00:4B58 C1 -  -  -  		pop 	bc
  167 00:4B59 C9 -  -  -  		ret
  168 00:4B5A -  -  -  -  
  169 00:4B5A -  -  -  -  ; ***************************************************************************************
  170 00:4B5A -  -  -  -  ;
  171 00:4B5A -  -  -  -  ;									Changes and Updates
  172 00:4B5A -  -  -  -  ;
  173 00:4B5A -  -  -  -  ; ***************************************************************************************
  174 00:4B5A -  -  -  -  ;
  175 00:4B5A -  -  -  -  ;		Date			Notes
  176 00:4B5A -  -  -  -  ;		==== 			=====
  177 00:4B5A -  -  -  -  ;
  178 00:4B5A -  -  -  -  ; ***************************************************************************************
  179 00:4B5A -  -  -  -  		
Listing for file "_build.asm"
   61 00:4B5A -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4B5A -  -  -  -  ; ***************************************************************************************
    2 00:4B5A -  -  -  -  ; ***************************************************************************************
    3 00:4B5A -  -  -  -  ;
    4 00:4B5A -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4B5A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B5A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B5A -  -  -  -  ;		Reviewed :	No
    8 00:4B5A -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4B5A -  -  -  -  ;
   10 00:4B5A -  -  -  -  ; ***************************************************************************************
   11 00:4B5A -  -  -  -  ; ***************************************************************************************
   12 00:4B5A -  -  -  -  
   13 00:4B5A -  -  -  -  ; ***************************************************************************************
   14 00:4B5A -  -  -  -  ;
   15 00:4B5A -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4B5A -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4B5A -  -  -  -  ;
   18 00:4B5A -  -  -  -  ; ***************************************************************************************
   19 00:4B5A -  -  -  -  
   20 00:4B5A -  -  -  -  Int32FromString:
   21 00:4B5A C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4B5B D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4B5C D5 -  -  -  		push 	de
   24 00:4B5D D9 -  -  -  		exx
   25 00:4B5E D5 -  -  -  		push 	de
   26 00:4B5F -  -  -  -  
   27 00:4B5F 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4B62 11 00 00 -  		ld 		de,$0000
   29 00:4B65 D9 -  -  -  		exx
   30 00:4B66 21 00 00 -  		ld 		hl,$0000
   31 00:4B69 11 00 00 -  		ld 		de,$0000
   32 00:4B6C D9 -  -  -  		exx
   33 00:4B6D -  -  -  -  
   34 00:4B6D 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4B6E CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4B70 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4B72 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4B74 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4B75 -  -  -  -  		;
   40 00:4B75 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4B76 F5 -  -  -  		push 	af
   42 00:4B77 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4B79 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4B7A 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4B7C 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4B7D 18 01 -  -  		jr 		_I32FSMain
   47 00:4B7F -  -  -  -  _I32FSNotSigned:		
   48 00:4B7F E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4B80 -  -  -  -  		;
   50 00:4B80 -  -  -  -  		; 		Main conversion loop.
   51 00:4B80 -  -  -  -  		; 		
   52 00:4B80 -  -  -  -  _I32FSMain:		
   53 00:4B80 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4B81 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4B83 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4B85 D6 20 -  -  		sub 	32
   57 00:4B87 -  -  -  -  _I32FSNotLower:
   58 00:4B87 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4B89 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4B8B FE 3A -  -  		cp 		'9'+1
   61 00:4B8D 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4B8F FE 41 -  -  		cp 		'A'
   63 00:4B91 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4B93 FE 47 -  -  		cp 		'F'+1
   65 00:4B95 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4B97 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4B99 -  -  -  -  _I32FSOkay:
   68 00:4B99 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4B9B BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4B9C 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4B9E 03 -  -  -  		inc 	bc 							; consume character
   72 00:4B9F D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4BA0 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4BA1 CD BB 4B -  		call 	Int32Multiply 				; result *= base
   75 00:4BA4 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4BA5 5F -  -  -  		ld 		e,a
   77 00:4BA6 CD F1 4B -  		call 	Int32Add 					; and add it.
   78 00:4BA9 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4BAA 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4BAC -  -  -  -  
   81 00:4BAC -  -  -  -  _I32FSExit:
   82 00:4BAC F1 -  -  -  		pop 	af 							; get sign back
   83 00:4BAD FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4BAF CC 51 4C -  		call 	z,Int32Negate
   85 00:4BB2 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4BB3 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4BB4 D9 -  -  -  		exx
   88 00:4BB5 D1 -  -  -  		pop 	de
   89 00:4BB6 D9 -  -  -  		exx
   90 00:4BB7 C1 -  -  -  		pop 	bc
   91 00:4BB8 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4BBA C9 -  -  -  		ret				
   93 00:4BBB -  -  -  -  
   94 00:4BBB -  -  -  -  ; ***************************************************************************************
   95 00:4BBB -  -  -  -  ;
   96 00:4BBB -  -  -  -  ;									Changes and Updates
   97 00:4BBB -  -  -  -  ;
   98 00:4BBB -  -  -  -  ; ***************************************************************************************
   99 00:4BBB -  -  -  -  ;
  100 00:4BBB -  -  -  -  ;		Date			Notes
  101 00:4BBB -  -  -  -  ;		==== 			=====
  102 00:4BBB -  -  -  -  ;
  103 00:4BBB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4BBB -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4BBB -  -  -  -  ; ***************************************************************************************
    2 00:4BBB -  -  -  -  ; ***************************************************************************************
    3 00:4BBB -  -  -  -  ;
    4 00:4BBB -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4BBB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BBB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BBB -  -  -  -  ;		Reviewed :	No
    8 00:4BBB -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4BBB -  -  -  -  ;
   10 00:4BBB -  -  -  -  ; ***************************************************************************************
   11 00:4BBB -  -  -  -  ; ***************************************************************************************
   12 00:4BBB -  -  -  -  
   13 00:4BBB -  -  -  -  Int32Multiply:
   14 00:4BBB C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4BBC D5 -  -  -  		push 	de
   16 00:4BBD 44 -  -  -  		ld 		b,h
   17 00:4BBE 4D -  -  -  		ld 		c,l
   18 00:4BBF 21 00 00 -  		ld 		hl,$0000
   19 00:4BC2 -  -  -  -  
   20 00:4BC2 D9 -  -  -  		exx
   21 00:4BC3 C5 -  -  -  		push 	bc
   22 00:4BC4 D5 -  -  -  		push 	de
   23 00:4BC5 44 -  -  -  		ld 		b,h
   24 00:4BC6 4D -  -  -  		ld 		c,l
   25 00:4BC7 21 00 00 -  		ld 		hl,$0000		
   26 00:4BCA D9 -  -  -  		exx
   27 00:4BCB -  -  -  -  
   28 00:4BCB -  -  -  -  _I32MultiplyLoop:
   29 00:4BCB CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4BCD C4 F1 4B -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4BD0 -  -  -  -  		;
   32 00:4BD0 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4BD1 CB 38 -  -  		srl 	b
   34 00:4BD3 CB 19 -  -  		rr 		c
   35 00:4BD5 D9 -  -  -  		exx
   36 00:4BD6 CB 18 -  -  		rr 		b
   37 00:4BD8 CB 19 -  -  		rr 		c
   38 00:4BDA -  -  -  -  		;
   39 00:4BDA CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4BDC CB 12 -  -  		rl 		d
   41 00:4BDE D9 -  -  -  		exx
   42 00:4BDF CB 13 -  -  		rl 		e
   43 00:4BE1 CB 12 -  -  		rl 		d
   44 00:4BE3 -  -  -  -  
   45 00:4BE3 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4BE4 B1 -  -  -  		or 		c
   47 00:4BE5 D9 -  -  -  		exx
   48 00:4BE6 B0 -  -  -  		or 		b
   49 00:4BE7 B1 -  -  -  		or 		c
   50 00:4BE8 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4BEA -  -  -  -  
   52 00:4BEA D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4BEB D1 -  -  -  		pop 	de
   54 00:4BEC C1 -  -  -  		pop 	bc
   55 00:4BED D9 -  -  -  		exx
   56 00:4BEE D1 -  -  -  		pop 	de
   57 00:4BEF C1 -  -  -  		pop 	bc
   58 00:4BF0 C9 -  -  -  		ret
   59 00:4BF1 -  -  -  -  
   60 00:4BF1 -  -  -  -  ; ***************************************************************************************
   61 00:4BF1 -  -  -  -  ;
   62 00:4BF1 -  -  -  -  ;									Changes and Updates
   63 00:4BF1 -  -  -  -  ;
   64 00:4BF1 -  -  -  -  ; ***************************************************************************************
   65 00:4BF1 -  -  -  -  ;
   66 00:4BF1 -  -  -  -  ;		Date			Notes
   67 00:4BF1 -  -  -  -  ;		==== 			=====
   68 00:4BF1 -  -  -  -  ;
   69 00:4BF1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4BF1 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4BF1 -  -  -  -  ; ***************************************************************************************
    2 00:4BF1 -  -  -  -  ; ***************************************************************************************
    3 00:4BF1 -  -  -  -  ;
    4 00:4BF1 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4BF1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BF1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BF1 -  -  -  -  ;		Reviewed :	No
    8 00:4BF1 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4BF1 -  -  -  -  ;
   10 00:4BF1 -  -  -  -  ; ***************************************************************************************
   11 00:4BF1 -  -  -  -  ; ***************************************************************************************
   12 00:4BF1 -  -  -  -  
   13 00:4BF1 -  -  -  -  ; ***************************************************************************************
   14 00:4BF1 -  -  -  -  ;
   15 00:4BF1 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4BF1 -  -  -  -  ;
   17 00:4BF1 -  -  -  -  ; ***************************************************************************************
   18 00:4BF1 -  -  -  -  
   19 00:4BF1 -  -  -  -  Int32Add:
   20 00:4BF1 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4BF2 D9 -  -  -  		exx
   22 00:4BF3 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4BF5 D9 -  -  -  		exx
   24 00:4BF6 C9 -  -  -  		ret
   25 00:4BF7 -  -  -  -  
   26 00:4BF7 -  -  -  -  ; ***************************************************************************************
   27 00:4BF7 -  -  -  -  ;
   28 00:4BF7 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4BF7 -  -  -  -  ;
   30 00:4BF7 -  -  -  -  ; ***************************************************************************************
   31 00:4BF7 -  -  -  -  
   32 00:4BF7 -  -  -  -  Int32Subtract:
   33 00:4BF7 AF -  -  -  		xor 	a 							; clear carry
   34 00:4BF8 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4BFA D9 -  -  -  		exx
   36 00:4BFB ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4BFD D9 -  -  -  		exx
   38 00:4BFE C9 -  -  -  		ret
   39 00:4BFF -  -  -  -  
   40 00:4BFF -  -  -  -  ; ***************************************************************************************
   41 00:4BFF -  -  -  -  ;
   42 00:4BFF -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4BFF -  -  -  -  ;
   44 00:4BFF -  -  -  -  ; ***************************************************************************************
   45 00:4BFF -  -  -  -  
   46 00:4BFF -  -  -  -  Int32And:
   47 00:4BFF D9 -  -  -  		exx
   48 00:4C00 CD 04 4C -  		call 	_I32AndHLDE
   49 00:4C03 D9 -  -  -  		exx
   50 00:4C04 -  -  -  -  _I32AndHLDE:		
   51 00:4C04 7C -  -  -  		ld 		a,h
   52 00:4C05 A2 -  -  -  		and 	d
   53 00:4C06 67 -  -  -  		ld 		h,a
   54 00:4C07 7D -  -  -  		ld 		a,l
   55 00:4C08 A3 -  -  -  		and 	e
   56 00:4C09 6F -  -  -  		ld 		l,a
   57 00:4C0A C9 -  -  -  		ret
   58 00:4C0B -  -  -  -  
   59 00:4C0B -  -  -  -  ; ***************************************************************************************
   60 00:4C0B -  -  -  -  ;
   61 00:4C0B -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4C0B -  -  -  -  ;
   63 00:4C0B -  -  -  -  ; ***************************************************************************************
   64 00:4C0B -  -  -  -  
   65 00:4C0B -  -  -  -  Int32Or:
   66 00:4C0B D9 -  -  -  		exx
   67 00:4C0C CD 10 4C -  		call 	_I32OrHLDE
   68 00:4C0F D9 -  -  -  		exx
   69 00:4C10 -  -  -  -  _I32OrHLDE:		
   70 00:4C10 7C -  -  -  		ld 		a,h
   71 00:4C11 B2 -  -  -  		or 		d
   72 00:4C12 67 -  -  -  		ld 		h,a
   73 00:4C13 7D -  -  -  		ld 		a,l
   74 00:4C14 B3 -  -  -  		or 		e
   75 00:4C15 6F -  -  -  		ld 		l,a
   76 00:4C16 C9 -  -  -  		ret
   77 00:4C17 -  -  -  -  
   78 00:4C17 -  -  -  -  ; ***************************************************************************************
   79 00:4C17 -  -  -  -  ;
   80 00:4C17 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4C17 -  -  -  -  ;
   82 00:4C17 -  -  -  -  ; ***************************************************************************************
   83 00:4C17 -  -  -  -  
   84 00:4C17 -  -  -  -  Int32Xor:
   85 00:4C17 D9 -  -  -  		exx
   86 00:4C18 CD 1C 4C -  		call 	_I32XorHLDE
   87 00:4C1B D9 -  -  -  		exx
   88 00:4C1C -  -  -  -  _I32XorHLDE:		
   89 00:4C1C 7C -  -  -  		ld 		a,h
   90 00:4C1D AA -  -  -  		xor 	d
   91 00:4C1E 67 -  -  -  		ld 		h,a
   92 00:4C1F 7D -  -  -  		ld 		a,l
   93 00:4C20 AB -  -  -  		xor 	e
   94 00:4C21 6F -  -  -  		ld 		l,a
   95 00:4C22 C9 -  -  -  		ret
   96 00:4C23 -  -  -  -  
   97 00:4C23 -  -  -  -  ; ***************************************************************************************
   98 00:4C23 -  -  -  -  ;
   99 00:4C23 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4C23 -  -  -  -  ;
  101 00:4C23 -  -  -  -  ; ***************************************************************************************
  102 00:4C23 -  -  -  -  
  103 00:4C23 -  -  -  -  Int32Zero:
  104 00:4C23 D9 -  -  -  		exx
  105 00:4C24 7D -  -  -  		ld 		a,l
  106 00:4C25 B4 -  -  -  		or 		h
  107 00:4C26 D9 -  -  -  		exx
  108 00:4C27 B5 -  -  -  		or 		l
  109 00:4C28 B4 -  -  -  		or 		h
  110 00:4C29 C9 -  -  -  		ret
  111 00:4C2A -  -  -  -  
  112 00:4C2A -  -  -  -  ; ***************************************************************************************
  113 00:4C2A -  -  -  -  ;
  114 00:4C2A -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4C2A -  -  -  -  ;
  116 00:4C2A -  -  -  -  ; ***************************************************************************************
  117 00:4C2A -  -  -  -  
  118 00:4C2A -  -  -  -  Int32Compare:
  119 00:4C2A E5 -  -  -  		push 	hl 							; save HL
  120 00:4C2B AF -  -  -  		xor 	a 							; clear carry
  121 00:4C2C ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4C2E D9 -  -  -  		exx
  123 00:4C2F E5 -  -  -  		push 	hl 							; save HL'
  124 00:4C30 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4C32 -  -  -  -  		;
  126 00:4C32 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4C33 E2 3A 4C -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4C36 78 -  -  -  		ld 		a,b
  129 00:4C37 EE 80 -  -  		xor 	$80
  130 00:4C39 47 -  -  -  		ld 		b,a
  131 00:4C3A -  -  -  -  _I32CNoOverflow:
  132 00:4C3A 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4C3B B5 -  -  -  		or 		l
  134 00:4C3C D9 -  -  -  		exx 
  135 00:4C3D B4 -  -  -  		or 		h
  136 00:4C3E B5 -  -  -  		or 		l
  137 00:4C3F 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4C41 -  -  -  -  		;
  139 00:4C41 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4C42 CB 78 -  -  		bit 	7,b
  141 00:4C44 D9 -  -  -  		exx
  142 00:4C45 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4C47 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4C49 3E FF -  -  		ld 		a,$FF
  145 00:4C4B -  -  -  -  _I32NotPos:
  146 00:4C4B D9 -  -  -  		exx
  147 00:4C4C E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4C4D D9 -  -  -  		exx
  149 00:4C4E E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4C4F B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4C50 C9 -  -  -  		ret
  152 00:4C51 -  -  -  -  
  153 00:4C51 -  -  -  -  ; ***************************************************************************************
  154 00:4C51 -  -  -  -  ;
  155 00:4C51 -  -  -  -  ;										Negate HL'HL
  156 00:4C51 -  -  -  -  ;
  157 00:4C51 -  -  -  -  ; ***************************************************************************************
  158 00:4C51 -  -  -  -  
  159 00:4C51 -  -  -  -  Int32Negate:
  160 00:4C51 AF -  -  -  		xor 	a
  161 00:4C52 CD 5B 4C -  		call 	_I32NSubtract
  162 00:4C55 D9 -  -  -  		exx
  163 00:4C56 CD 5B 4C -  		call 	_I32NSubtract
  164 00:4C59 D9 -  -  -  		exx
  165 00:4C5A C9 -  -  -  		ret
  166 00:4C5B -  -  -  -  _I32NSubtract:
  167 00:4C5B D5 -  -  -  		push 	de
  168 00:4C5C EB -  -  -  		ex 		de,hl
  169 00:4C5D 21 00 00 -  		ld 		hl,$0000
  170 00:4C60 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4C62 D1 -  -  -  		pop 	de
  172 00:4C63 C9 -  -  -  		ret
  173 00:4C64 -  -  -  -  		
  174 00:4C64 -  -  -  -  ; ***************************************************************************************
  175 00:4C64 -  -  -  -  ;
  176 00:4C64 -  -  -  -  ;									Changes and Updates
  177 00:4C64 -  -  -  -  ;
  178 00:4C64 -  -  -  -  ; ***************************************************************************************
  179 00:4C64 -  -  -  -  ;
  180 00:4C64 -  -  -  -  ;		Date			Notes
  181 00:4C64 -  -  -  -  ;		==== 			=====
  182 00:4C64 -  -  -  -  ;
  183 00:4C64 -  -  -  -  ; ***************************************************************************************
  184 00:4C64 -  -  -  -  		
Listing for file "_build.asm"
   64 00:4C64 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4C64 -  -  -  -  ; ***************************************************************************************
    2 00:4C64 -  -  -  -  ; ***************************************************************************************
    3 00:4C64 -  -  -  -  ;
    4 00:4C64 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4C64 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C64 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C64 -  -  -  -  ;		Reviewed :	No
    8 00:4C64 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4C64 -  -  -  -  ;
   10 00:4C64 -  -  -  -  ; ***************************************************************************************
   11 00:4C64 -  -  -  -  ;
   12 00:4C64 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4C64 -  -  -  -  ;
   14 00:4C64 -  -  -  -  ; ***************************************************************************************
   15 00:4C64 -  -  -  -  
   16 00:4C64 -  -  -  -  Int32ToString:
   17 00:4C64 C5 -  -  -  		push 	bc 							; save string start
   18 00:4C65 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4C66 E5 -  -  -  		push 	hl
   20 00:4C67 11 00 00 -  		ld	 	de,$0000
   21 00:4C6A D9 -  -  -  		exx
   22 00:4C6B D5 -  -  -  		push 	de
   23 00:4C6C E5 -  -  -  		push 	hl
   24 00:4C6D 11 00 00 -  		ld 		de,$000
   25 00:4C70 D9 -  -  -  		exx
   26 00:4C71 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4C72 -  -  -  -  		;
   28 00:4C72 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4C74 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4C76 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4C78 5F -  -  -  		ld 		e,a
   32 00:4C79 -  -  -  -  		;
   33 00:4C79 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4C7A CB 7C -  -  		bit 	7,h
   35 00:4C7C D9 -  -  -  		exx
   36 00:4C7D 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4C7F -  -  -  -  		;
   38 00:4C7F CD 51 4C -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4C82 -  -  -  -  		;
   40 00:4C82 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4C84 02 -  -  -  		ld 		(bc),a
   42 00:4C85 03 -  -  -  		inc 	bc
   43 00:4C86 -  -  -  -  _I32TSNotNegative:	
   44 00:4C86 CD 94 4C -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4C89 -  -  -  -  _I32TSExit:
   46 00:4C89 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4C8B 02 -  -  -  		ld 		(bc),a 
   48 00:4C8C -  -  -  -  
   49 00:4C8C D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4C8D E1 -  -  -  		pop 	hl
   51 00:4C8E D1 -  -  -  		pop 	de
   52 00:4C8F D9 -  -  -  		exx
   53 00:4C90 E1 -  -  -  		pop 	hl
   54 00:4C91 D1 -  -  -  		pop 	de
   55 00:4C92 C1 -  -  -  		pop 	bc
   56 00:4C93 C9 -  -  -  		ret
   57 00:4C94 -  -  -  -  
   58 00:4C94 -  -  -  -  _I32RecursiveConvert:
   59 00:4C94 CD C8 4A -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4C97 F5 -  -  -  		push 	af 							; save remainder
   61 00:4C98 CD 23 4C -  		call 	Int32Zero		 			; check result is non zero
   62 00:4C9B C4 94 4C -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4C9E F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4C9F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4CA1 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4CA3 C6 07 -  -  		add 	a,7
   67 00:4CA5 -  -  -  -  _I32NotHex:
   68 00:4CA5 C6 30 -  -  		add 	a,48
   69 00:4CA7 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4CA8 03 -  -  -  		inc 	bc
   71 00:4CA9 C9 -  -  -  		ret		
   72 00:4CAA -  -  -  -  
   73 00:4CAA -  -  -  -  ; ***************************************************************************************
   74 00:4CAA -  -  -  -  ;
   75 00:4CAA -  -  -  -  ;									Changes and Updates
   76 00:4CAA -  -  -  -  ;
   77 00:4CAA -  -  -  -  ; ***************************************************************************************
   78 00:4CAA -  -  -  -  ;
   79 00:4CAA -  -  -  -  ;		Date			Notes
   80 00:4CAA -  -  -  -  ;		==== 			=====
   81 00:4CAA -  -  -  -  ;
   82 00:4CAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4CAA -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4CAA -  -  -  -  ; ***************************************************************************************
    2 00:4CAA -  -  -  -  ; ***************************************************************************************
    3 00:4CAA -  -  -  -  ;
    4 00:4CAA -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4CAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CAA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CAA -  -  -  -  ;		Reviewed :	No
    8 00:4CAA -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4CAA -  -  -  -  ;
   10 00:4CAA -  -  -  -  ; ***************************************************************************************
   11 00:4CAA -  -  -  -  ; ***************************************************************************************
   12 00:4CAA -  -  -  -  
   13 00:4CAA -  -  -  -  #ifdef AQUARIUS
   14 00:4CAA -  -  -  -  
   15 00:4CAA -  -  -  -  ; ***************************************************************************************
   16 00:4CAA -  -  -  -  ;
   17 00:4CAA -  -  -  -  ;								Initialise system stuff
   18 00:4CAA -  -  -  -  ;
   19 00:4CAA -  -  -  -  ; ***************************************************************************************
   20 00:4CAA -  -  -  -  
   21 00:4CAA -  -  -  -  SYSInitialise:
   22 00:4CAA 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4CAC CD B2 4C -  	call 	SYSPrintChar
   24 00:4CAF C9 -  -  -  	ret
   25 00:4CB0 -  -  -  -  
   26 00:4CB0 -  -  -  -  ; ***************************************************************************************
   27 00:4CB0 -  -  -  -  ;
   28 00:4CB0 -  -  -  -  ;								Terminate system stuff
   29 00:4CB0 -  -  -  -  ;
   30 00:4CB0 -  -  -  -  ; ***************************************************************************************
   31 00:4CB0 -  -  -  -  
   32 00:4CB0 -  -  -  -  SYSTerminate:
   33 00:4CB0 18 FE -  -  	jr 		SYSTerminate
   34 00:4CB2 -  -  -  -  
   35 00:4CB2 -  -  -  -  ; ***************************************************************************************
   36 00:4CB2 -  -  -  -  ;
   37 00:4CB2 -  -  -  -  ;								Print A character
   38 00:4CB2 -  -  -  -  ;
   39 00:4CB2 -  -  -  -  ; ***************************************************************************************
   40 00:4CB2 -  -  -  -  
   41 00:4CB2 -  -  -  -  SYSPrintChar:
   42 00:4CB2 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4CB3 C5 -  -  -  	push 	bc
   44 00:4CB4 D5 -  -  -  	push 	de
   45 00:4CB5 E5 -  -  -  	push 	hl
   46 00:4CB6 DD E5 -  -  	push 	ix
   47 00:4CB8 FD E5 -  -  	push 	iy
   48 00:4CBA D9 -  -  -  	exx
   49 00:4CBB C5 -  -  -  	push 	bc
   50 00:4CBC D5 -  -  -  	push 	de
   51 00:4CBD E5 -  -  -  	push 	hl
   52 00:4CBE CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4CC1 E1 -  -  -  	pop 	hl
   54 00:4CC2 D1 -  -  -  	pop 	de
   55 00:4CC3 C1 -  -  -  	pop 	bc
   56 00:4CC4 D9 -  -  -  	exx
   57 00:4CC5 FD E1 -  -  	pop 	iy
   58 00:4CC7 DD E1 -  -  	pop 	ix
   59 00:4CC9 E1 -  -  -  	pop 	hl
   60 00:4CCA D1 -  -  -  	pop 	de
   61 00:4CCB C1 -  -  -  	pop 	bc
   62 00:4CCC F1 -  -  -  	pop 	af
   63 00:4CCD C9 -  -  -  	ret		
   64 00:4CCE -  -  -  -  
   65 00:4CCE -  -  -  -  ; ***************************************************************************************
   66 00:4CCE -  -  -  -  ;
   67 00:4CCE -  -  -  -  ;									Print Newline
   68 00:4CCE -  -  -  -  ;
   69 00:4CCE -  -  -  -  ; ***************************************************************************************
   70 00:4CCE -  -  -  -  
   71 00:4CCE -  -  -  -  SYSPrintCRLF:
   72 00:4CCE F5 -  -  -  	push 	af
   73 00:4CCF 3E 0D -  -  	ld 		a,13
   74 00:4CD1 CD B2 4C -  	call 	SYSPrintChar
   75 00:4CD4 3E 0A -  -  	ld 		a,10
   76 00:4CD6 CD B2 4C -  	call 	SYSPrintChar
   77 00:4CD9 F1 -  -  -  	pop 	af
   78 00:4CDA C9 -  -  -  	ret
   79 00:4CDB -  -  -  -  
   80 00:4CDB -  -  -  -  ; ***************************************************************************************
   81 00:4CDB -  -  -  -  ;
   82 00:4CDB -  -  -  -  ;									Get time into HL'HL
   83 00:4CDB -  -  -  -  ;
   84 00:4CDB -  -  -  -  ; ***************************************************************************************
   85 00:4CDB -  -  -  -  
   86 00:4CDB -  -  -  -  SYSGetTimer:
   87 00:4CDB DB 00 -  -   	in 		a,($00)
   88 00:4CDD 6F -  -  -   	ld 		l,a
   89 00:4CDE DB 01 -  -   	in 		a,($01)
   90 00:4CE0 67 -  -  -   	ld 		h,a
   91 00:4CE1 D9 -  -  -   	exx
   92 00:4CE2 DB 02 -  -   	in 		a,($02)
   93 00:4CE4 6F -  -  -   	ld 		l,a
   94 00:4CE5 DB 03 -  -   	in 		a,($03)
   95 00:4CE7 67 -  -  -   	ld 		h,a
   96 00:4CE8 D9 -  -  -   	exx
   97 00:4CE9 C9 -  -  -  	ret 	
   98 00:4CEA -  -  -  -  	
   99 00:4CEA -  -  -  -  #endif
  100 00:4CEA -  -  -  -  
  101 00:4CEA -  -  -  -  ; ***************************************************************************************
  102 00:4CEA -  -  -  -  ;
  103 00:4CEA -  -  -  -  ;									Changes and Updates
  104 00:4CEA -  -  -  -  ;
  105 00:4CEA -  -  -  -  ; ***************************************************************************************
  106 00:4CEA -  -  -  -  ;
  107 00:4CEA -  -  -  -  ;		Date			Notes
  108 00:4CEA -  -  -  -  ;		==== 			=====
  109 00:4CEA -  -  -  -  ;
  110 00:4CEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4CEA -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4CEA -  -  -  -  ; ***************************************************************************************
    2 00:4CEA -  -  -  -  ; ***************************************************************************************
    3 00:4CEA -  -  -  -  ;
    4 00:4CEA -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4CEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CEA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CEA -  -  -  -  ;		Reviewed :	No
    8 00:4CEA -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4CEA -  -  -  -  ;
   10 00:4CEA -  -  -  -  ; ***************************************************************************************
   11 00:4CEA -  -  -  -  ; ***************************************************************************************
   12 00:4CEA -  -  -  -  
   13 00:4CEA -  -  -  -  #ifdef CLEANEZ80
   14 00:4CEA             
   15 00:4CEA             ; ***************************************************************************************
   16 00:4CEA             ;
   17 00:4CEA             ;								Initialise system stuff
   18 00:4CEA             ;
   19 00:4CEA             ; ***************************************************************************************
   20 00:4CEA             
   21 00:4CEA             SYSInitialise:
   22 00:4CEA             	ret
   23 00:4CEA             
   24 00:4CEA             ; ***************************************************************************************
   25 00:4CEA             ;
   26 00:4CEA             ;								Terminate system stuff
   27 00:4CEA             ;
   28 00:4CEA             ; ***************************************************************************************
   29 00:4CEA             
   30 00:4CEA             SYSTerminate:
   31 00:4CEA             	ret
   32 00:4CEA             
   33 00:4CEA             ; ***************************************************************************************
   34 00:4CEA             ;
   35 00:4CEA             ;								Print A character
   36 00:4CEA             ;
   37 00:4CEA             ; ***************************************************************************************
   38 00:4CEA             
   39 00:4CEA             SYSPrintChar:
   40 00:4CEA             	ret		
   41 00:4CEA             
   42 00:4CEA             ; ***************************************************************************************
   43 00:4CEA             ;
   44 00:4CEA             ;									Print Newline
   45 00:4CEA             ;
   46 00:4CEA             ; ***************************************************************************************
   47 00:4CEA             
   48 00:4CEA             SYSPrintCRLF:
   49 00:4CEA             	ret
   50 00:4CEA             
   51 00:4CEA             ; ***************************************************************************************
   52 00:4CEA             ;
   53 00:4CEA             ;									Get time into HL'HL
   54 00:4CEA             ;
   55 00:4CEA             ; ***************************************************************************************
   56 00:4CEA             
   57 00:4CEA             SYSGetTimer:
   58 00:4CEA             	ret
   59 00:4CEA             
   60 00:4CEA             #endif
   61 00:4CEA -  -  -  -  
   62 00:4CEA -  -  -  -  ; ***************************************************************************************
   63 00:4CEA -  -  -  -  ;
   64 00:4CEA -  -  -  -  ;									Changes and Updates
   65 00:4CEA -  -  -  -  ;
   66 00:4CEA -  -  -  -  ; ***************************************************************************************
   67 00:4CEA -  -  -  -  ;
   68 00:4CEA -  -  -  -  ;		Date			Notes
   69 00:4CEA -  -  -  -  ;		==== 			=====
   70 00:4CEA -  -  -  -  ;
   71 00:4CEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4CEA -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4CEA -  -  -  -  ; ***************************************************************************************
    2 00:4CEA -  -  -  -  ; ***************************************************************************************
    3 00:4CEA -  -  -  -  ;
    4 00:4CEA -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4CEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CEA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CEA -  -  -  -  ;		Reviewed :	No
    8 00:4CEA -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4CEA -  -  -  -  ;
   10 00:4CEA -  -  -  -  ; ***************************************************************************************
   11 00:4CEA -  -  -  -  ; ***************************************************************************************
   12 00:4CEA -  -  -  -  
   13 00:4CEA -  -  -  -  #ifdef TI84
   14 00:4CEA             
   15 00:4CEA             ; ***************************************************************************************
   16 00:4CEA             ;
   17 00:4CEA             ;								Initialise system stuff
   18 00:4CEA             ;
   19 00:4CEA             ; ***************************************************************************************
   20 00:4CEA             
   21 00:4CEA             SYSInitialise:
   22 00:4CEA             	di
   23 00:4CEA             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4CEA             	ld 		(_IYTemp84),iy
   25 00:4CEA             	ret
   26 00:4CEA             
   27 00:4CEA             ; ***************************************************************************************
   28 00:4CEA             ;
   29 00:4CEA             ;								Terminate system stuff
   30 00:4CEA             ;
   31 00:4CEA             ; ***************************************************************************************
   32 00:4CEA             
   33 00:4CEA             SYSTerminate:
   34 00:4CEA             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4CEA             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4CEA             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4CEA             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4CEA             	ei
   39 00:4CEA             	ret 										; and exit.
   40 00:4CEA             
   41 00:4CEA             _StackTemp84:									; temp var for TI84 only.
   42 00:4CEA             	.dw 	0,0
   43 00:4CEA             _IYTemp84:
   44 00:4CEA             	.dw 	0,0		
   45 00:4CEA             
   46 00:4CEA             ; ***************************************************************************************
   47 00:4CEA             ;
   48 00:4CEA             ;								Print A character
   49 00:4CEA             ;
   50 00:4CEA             ; ***************************************************************************************
   51 00:4CEA             
   52 00:4CEA             SYSPrintChar:
   53 00:4CEA             	push 	af 									; we stack everything including alt registers
   54 00:4CEA             	push 	bc
   55 00:4CEA             	push 	de
   56 00:4CEA             	push 	hl
   57 00:4CEA             	push 	ix
   58 00:4CEA             	push 	iy
   59 00:4CEA             	exx
   60 00:4CEA             	push 	bc
   61 00:4CEA             	push 	de
   62 00:4CEA             	push 	hl
   63 00:4CEA             
   64 00:4CEA             	ld 		iy,(_IYTemp84)
   65 00:4CEA             	call 	_PutC 								; print A as character
   66 00:4CEA             	di
   67 00:4CEA             	ld 		(_IYTemp84),iy
   68 00:4CEA             
   69 00:4CEA             	pop 	hl
   70 00:4CEA             	pop 	de
   71 00:4CEA             	pop 	bc
   72 00:4CEA             	exx
   73 00:4CEA             	pop 	iy
   74 00:4CEA             	pop 	ix
   75 00:4CEA             	pop 	hl
   76 00:4CEA             	pop 	de
   77 00:4CEA             	pop 	bc
   78 00:4CEA             	pop 	af
   79 00:4CEA             	ret		
   80 00:4CEA             
   81 00:4CEA             ; ***************************************************************************************
   82 00:4CEA             ;
   83 00:4CEA             ;									Print Newline
   84 00:4CEA             ;
   85 00:4CEA             ; ***************************************************************************************
   86 00:4CEA             
   87 00:4CEA             SYSPrintCRLF:
   88 00:4CEA             	push 	af 									; we stack everything including alt registers
   89 00:4CEA             	push 	bc
   90 00:4CEA             	push 	de
   91 00:4CEA             	push 	hl
   92 00:4CEA             	push 	ix
   93 00:4CEA             	push 	iy
   94 00:4CEA             	exx
   95 00:4CEA             	push 	bc
   96 00:4CEA             	push 	de
   97 00:4CEA             	push 	hl
   98 00:4CEA             
   99 00:4CEA             	ld 		iy,(_IYTemp84)
  100 00:4CEA             	call 	_newline
  101 00:4CEA             	di
  102 00:4CEA             	ld 		(_IYTemp84),iy
  103 00:4CEA             
  104 00:4CEA             	pop 	hl
  105 00:4CEA             	pop 	de
  106 00:4CEA             	pop 	bc
  107 00:4CEA             	exx
  108 00:4CEA             	pop 	iy
  109 00:4CEA             	pop 	ix
  110 00:4CEA             	pop 	hl
  111 00:4CEA             	pop 	de
  112 00:4CEA             	pop 	bc
  113 00:4CEA             	pop 	af
  114 00:4CEA             	ret
  115 00:4CEA             
  116 00:4CEA             ; ***************************************************************************************
  117 00:4CEA             ;
  118 00:4CEA             ;									Get time into HL'HL
  119 00:4CEA             ;
  120 00:4CEA             ; ***************************************************************************************
  121 00:4CEA             
  122 00:4CEA             SYSGetTimer:
  123 00:4CEA             	ld 		hl,$1234
  124 00:4CEA             	exx
  125 00:4CEA             	ld 		hl,$5678
  126 00:4CEA             	exx
  127 00:4CEA             	ret
  128 00:4CEA             
  129 00:4CEA             #endif
  130 00:4CEA -  -  -  -  
  131 00:4CEA -  -  -  -  ; ***************************************************************************************
  132 00:4CEA -  -  -  -  ;
  133 00:4CEA -  -  -  -  ;									Changes and Updates
  134 00:4CEA -  -  -  -  ;
  135 00:4CEA -  -  -  -  ; ***************************************************************************************
  136 00:4CEA -  -  -  -  ;
  137 00:4CEA -  -  -  -  ;		Date			Notes
  138 00:4CEA -  -  -  -  ;		==== 			=====
  139 00:4CEA -  -  -  -  ;
  140 00:4CEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4CEA -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4CEA -  -  -  -  ; ***************************************************************************************
    2 00:4CEA -  -  -  -  ; ***************************************************************************************
    3 00:4CEA -  -  -  -  ;
    4 00:4CEA -  -  -  -  ;		Name : 		basic.asm
    5 00:4CEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CEA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CEA -  -  -  -  ;		Reviewed :	No
    8 00:4CEA -  -  -  -  ;		Purpose :	Main program.
    9 00:4CEA -  -  -  -  ;
   10 00:4CEA -  -  -  -  ; ***************************************************************************************
   11 00:4CEA -  -  -  -  ; ***************************************************************************************
   12 00:4CEA -  -  -  -  
   13 00:4CEA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0F 02 00 
              C1 AC 6A 3F 
              03 2D 2D 2D 
              0D A8 6A 80 
              06 03 00 C1 
              19 80 0D 04 
              00 BD 19 AA 
              8A 41 AB A7 
              C1 19 80 11 
              05 00 BD 02 
              95 44 A5 A6 
              13 04 12 13 
              95 48 A5 80 
              0D 06 00 BD 
              00 AA 8A 41 
              AB A7 C1 00 
              80 00 -  -  	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0f,$02,$00,$c1,$ac,$6a,$3f,$03,$2d,$2d,$2d,$0d,$a8,$6a,$80,$06,$03,$00,$c1,$19,$80,$0d,$04,$00,$bd,$19,$aa,$8a,$41,$ab,$a7,$c1,$19,$80,$11,$05,$00,$bd,$02,$95,$44,$a5,$a6,$13,$04,$12,$13,$95,$48,$a5,$80,$0d,$06,$00,$bd,$00,$aa,$8a,$41,$ab,$a7,$c1,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5062 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6062 -  -  -  -  EndTestInstance:
   18 00:6062 -  -  -  -  		
   19 00:6062 -  -  -  -  ; ***************************************************************************************
   20 00:6062 -  -  -  -  ;
   21 00:6062 -  -  -  -  ;									Changes and Updates
   22 00:6062 -  -  -  -  ;
   23 00:6062 -  -  -  -  ; ***************************************************************************************
   24 00:6062 -  -  -  -  ;
   25 00:6062 -  -  -  -  ;		Date			Notes
   26 00:6062 -  -  -  -  ;		==== 			=====
   27 00:6062 -  -  -  -  ;
   28 00:6062 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:6062 -  -  -  -  FinalAddress:
