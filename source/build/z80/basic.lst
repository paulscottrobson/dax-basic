    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD EC 4A -  		call 	SYSInitialise
   44 00:4006 11 00 4C -  		ld 		de,TestInstance
   45 00:4009 21 A4 6C -  		ld 		hl,EndTestInstance
   46 00:400C CD 04 46 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 51 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 05 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD F4 4A -  		call 	SYSPrintChar
   56 00:401C CD F2 4A -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 A6 
              41 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 A6 
              41 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  		
   59 00:4045 -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:4045 00 00 00 00 		.dw 	0,0
   61 00:4049 -  -  -  -  
   62 00:4049 -  -  -  -  ; ***************************************************************************************
   63 00:4049 -  -  -  -  ;
   64 00:4049 -  -  -  -  ;										Run variables
   65 00:4049 -  -  -  -  ;
   66 00:4049 -  -  -  -  ; ***************************************************************************************
   67 00:4049 -  -  -  -  
   68 00:4049 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  		
   71 00:404D -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:404D 00 00 00 00 		.dw 	0,0
   73 00:4051 -  -  -  -  
   74 00:4051 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:4051 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4057 -  -  -  -  
   77 00:4057 -  -  -  -  AConvert: 									; used for address conversions.
   78 00:4057 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:405D -  -  -  -  		
   80 00:405D -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:405D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:406D -  -  -  -  
   83 00:406D -  -  -  -  s; ***************************************************************************************
   84 00:406D -  -  -  -  ;
   85 00:406D -  -  -  -  ;										  Buffers
   86 00:406D -  -  -  -  ;
   87 00:406D -  -  -  -  ; ***************************************************************************************
   88 00:406D -  -  -  -  
   89 00:406D -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 00:406D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 00:407D -  -  -  -  
   92 00:407D -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 00:407D 00 00 -  -  		.dw 	0
   94 00:407F -  -  -  -  
   95 00:407F -  -  -  -  ConvertBuffer: 								; general usage
   96 00:407F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 00:40BF -  -  -  -  
   98 00:40BF -  -  -  -  ; ***************************************************************************************
   99 00:40BF -  -  -  -  ;
  100 00:40BF -  -  -  -  ;									Changes and Updates
  101 00:40BF -  -  -  -  ;
  102 00:40BF -  -  -  -  ; ***************************************************************************************
  103 00:40BF -  -  -  -  ;
  104 00:40BF -  -  -  -  ;		Date			Notes
  105 00:40BF -  -  -  -  ;		==== 			=====
  106 00:40BF -  -  -  -  ;
  107 00:40BF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40BF -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40BF -  -  -  -  ; ***************************************************************************************
    2 00:40BF -  -  -  -  ; ***************************************************************************************
    3 00:40BF -  -  -  -  ;
    4 00:40BF -  -  -  -  ;		Name : 		assert.asm
    5 00:40BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40BF -  -  -  -  ;		Reviewed :	No
    8 00:40BF -  -  -  -  ;		Purpose :	Assert command
    9 00:40BF -  -  -  -  ;
   10 00:40BF -  -  -  -  ; ***************************************************************************************
   11 00:40BF -  -  -  -  ; ***************************************************************************************
   12 00:40BF -  -  -  -  
   13 00:40BF -  -  -  -  ; ***************************************************************************************
   14 00:40BF -  -  -  -  ;
   15 00:40BF -  -  -  -  ;									ASSERT command
   16 00:40BF -  -  -  -  ;
   17 00:40BF -  -  -  -  ; ***************************************************************************************
   18 00:40BF -  -  -  -  
   19 00:40BF -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40BF CD 8B 43 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40C2 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40C8 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40C9 3E 01 C3 A6 
              41 -  -  -  		ERR_ASSERT
   24 00:40CE -  -  -  -  
   25 00:40CE -  -  -  -  ; ***************************************************************************************
   26 00:40CE -  -  -  -  ;
   27 00:40CE -  -  -  -  ;									Changes and Updates
   28 00:40CE -  -  -  -  ;
   29 00:40CE -  -  -  -  ; ***************************************************************************************
   30 00:40CE -  -  -  -  ;
   31 00:40CE -  -  -  -  ;		Date			Notes
   32 00:40CE -  -  -  -  ;		==== 			=====
   33 00:40CE -  -  -  -  ;
   34 00:40CE -  -  -  -  ; ***************************************************************************************
   35 00:40CE -  -  -  -  		
Listing for file "_build.asm"
   14 00:40CE -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40CE -  -  -  -  ; ***************************************************************************************
    2 00:40CE -  -  -  -  ; ***************************************************************************************
    3 00:40CE -  -  -  -  ;
    4 00:40CE -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40CE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40CE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40CE -  -  -  -  ;		Reviewed :	No
    8 00:40CE -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40CE -  -  -  -  ;
   10 00:40CE -  -  -  -  ; ***************************************************************************************
   11 00:40CE -  -  -  -  ; ***************************************************************************************
   12 00:40CE -  -  -  -  
   13 00:40CE -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40CE -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40CE -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40CE -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40CE -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40CE -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40CE C3 03 42 -  		jp 		SyntaxError
   20 00:40D1 -  -  -  -  
   21 00:40D1 -  -  -  -  ; ***************************************************************************************
   22 00:40D1 -  -  -  -  ;
   23 00:40D1 -  -  -  -  ;									Changes and Updates
   24 00:40D1 -  -  -  -  ;
   25 00:40D1 -  -  -  -  ; ***************************************************************************************
   26 00:40D1 -  -  -  -  ;
   27 00:40D1 -  -  -  -  ;		Date			Notes
   28 00:40D1 -  -  -  -  ;		==== 			=====
   29 00:40D1 -  -  -  -  ;
   30 00:40D1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40D1 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40D1 -  -  -  -  ; ***************************************************************************************
    2 00:40D1 -  -  -  -  ; ***************************************************************************************
    3 00:40D1 -  -  -  -  ;
    4 00:40D1 -  -  -  -  ;		Name : 		colon.asm
    5 00:40D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D1 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40D1 -  -  -  -  ;		Reviewed :	No
    8 00:40D1 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40D1 -  -  -  -  ;
   10 00:40D1 -  -  -  -  ; ***************************************************************************************
   11 00:40D1 -  -  -  -  ; ***************************************************************************************
   12 00:40D1 -  -  -  -  
   13 00:40D1 -  -  -  -  ; ***************************************************************************************
   14 00:40D1 -  -  -  -  ;
   15 00:40D1 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40D1 -  -  -  -  ;
   17 00:40D1 -  -  -  -  ; ***************************************************************************************
   18 00:40D1 -  -  -  -  
   19 00:40D1 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40D1 C9 -  -  -  		ret
   21 00:40D2 -  -  -  -  
   22 00:40D2 -  -  -  -  ; ***************************************************************************************
   23 00:40D2 -  -  -  -  ;
   24 00:40D2 -  -  -  -  ;									Changes and Updates
   25 00:40D2 -  -  -  -  ;
   26 00:40D2 -  -  -  -  ; ***************************************************************************************
   27 00:40D2 -  -  -  -  ;
   28 00:40D2 -  -  -  -  ;		Date			Notes
   29 00:40D2 -  -  -  -  ;		==== 			=====
   30 00:40D2 -  -  -  -  ;
   31 00:40D2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40D2 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40D2 -  -  -  -  ; ***************************************************************************************
    2 00:40D2 -  -  -  -  ; ***************************************************************************************
    3 00:40D2 -  -  -  -  ;
    4 00:40D2 -  -  -  -  ;		Name : 		end.asm
    5 00:40D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D2 -  -  -  -  ;		Reviewed :	No
    8 00:40D2 -  -  -  -  ;		Purpose :	End command
    9 00:40D2 -  -  -  -  ;
   10 00:40D2 -  -  -  -  ; ***************************************************************************************
   11 00:40D2 -  -  -  -  ; ***************************************************************************************
   12 00:40D2 -  -  -  -  
   13 00:40D2 -  -  -  -  ; ***************************************************************************************
   14 00:40D2 -  -  -  -  ;
   15 00:40D2 -  -  -  -  ;										END command
   16 00:40D2 -  -  -  -  ;
   17 00:40D2 -  -  -  -  ; ***************************************************************************************
   18 00:40D2 -  -  -  -  
   19 00:40D2 -  -  -  -  Command_END: 	;; [end]
   20 00:40D2 3E 00 C3 A6 
              41 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40D7 -  -  -  -  
   22 00:40D7 -  -  -  -  ; ***************************************************************************************
   23 00:40D7 -  -  -  -  ;
   24 00:40D7 -  -  -  -  ;									Changes and Updates
   25 00:40D7 -  -  -  -  ;
   26 00:40D7 -  -  -  -  ; ***************************************************************************************
   27 00:40D7 -  -  -  -  ;
   28 00:40D7 -  -  -  -  ;		Date			Notes
   29 00:40D7 -  -  -  -  ;		==== 			=====
   30 00:40D7 -  -  -  -  ;
   31 00:40D7 -  -  -  -  ; ***************************************************************************************
   32 00:40D7 -  -  -  -  		
Listing for file "_build.asm"
   17 00:40D7 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40D7 -  -  -  -  ; ***************************************************************************************
    2 00:40D7 -  -  -  -  ; ***************************************************************************************
    3 00:40D7 -  -  -  -  ;
    4 00:40D7 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D7 -  -  -  -  ;		Reviewed :	None
    8 00:40D7 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40D7 -  -  -  -  ;
   10 00:40D7 -  -  -  -  ; ***************************************************************************************
   11 00:40D7 -  -  -  -  ; ***************************************************************************************
   12 00:40D7 -  -  -  -  
   13 00:40D7 -  -  -  -  ; ***************************************************************************************
   14 00:40D7 -  -  -  -  ;
   15 00:40D7 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40D7 -  -  -  -  ;
   17 00:40D7 -  -  -  -  ; ***************************************************************************************
   18 00:40D7 -  -  -  -  
   19 00:40D7 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40D7 DD 2A 49 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40DB 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40DE DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40E1 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40E3 -  -  -  -  		;
   25 00:40E3 ED 7B 4D 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40E7 C3 10 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40EA -  -  -  -  
   28 00:40EA -  -  -  -  ; ***************************************************************************************
   29 00:40EA -  -  -  -  ;
   30 00:40EA -  -  -  -  ;									Changes and Updates
   31 00:40EA -  -  -  -  ;
   32 00:40EA -  -  -  -  ; ***************************************************************************************
   33 00:40EA -  -  -  -  ;
   34 00:40EA -  -  -  -  ;		Date			Notes
   35 00:40EA -  -  -  -  ;		==== 			=====
   36 00:40EA -  -  -  -  ;
   37 00:40EA -  -  -  -  ; ***************************************************************************************
   38 00:40EA -  -  -  -  		
Listing for file "_build.asm"
   18 00:40EA -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:40EA -  -  -  -  ; ***************************************************************************************
    2 00:40EA -  -  -  -  ; ***************************************************************************************
    3 00:40EA -  -  -  -  ;
    4 00:40EA -  -  -  -  ;		Name : 		rem.asm
    5 00:40EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EA -  -  -  -  ;		Reviewed :	No
    8 00:40EA -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:40EA -  -  -  -  ;
   10 00:40EA -  -  -  -  ; ***************************************************************************************
   11 00:40EA -  -  -  -  ; ***************************************************************************************
   12 00:40EA -  -  -  -  
   13 00:40EA -  -  -  -  ; ***************************************************************************************
   14 00:40EA -  -  -  -  ;
   15 00:40EA -  -  -  -  ;							Comment command, can be ' or REM
   16 00:40EA -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:40EA -  -  -  -  ;
   18 00:40EA -  -  -  -  ; ***************************************************************************************
   19 00:40EA -  -  -  -  
   20 00:40EA -  -  -  -  Command_REM: 	;; [rem]
   21 00:40EA -  -  -  -  Command_REM2: 	;; [']
   22 00:40EA DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:40ED DD 23 -  -  		inc 	ix
   24 00:40EF FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:40F1 C8 -  -  -  		ret 	z
   26 00:40F2 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:40F4 C8 -  -  -  		ret 	z
   28 00:40F5 FE 3F -  -  		cp 		STRING_MARKER
   29 00:40F7 C2 03 42 -  		jp 		nz,SyntaxError
   30 00:40FA -  -  -  -  		;		
   31 00:40FA 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:40FD DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4100 13 -  -  -  		inc 	de 
   34 00:4101 13 -  -  -  		inc 	de
   35 00:4102 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4104 C9 -  -  -  		ret
   37 00:4105 -  -  -  -  
   38 00:4105 -  -  -  -  ; ***************************************************************************************
   39 00:4105 -  -  -  -  ;
   40 00:4105 -  -  -  -  ;									Changes and Updates
   41 00:4105 -  -  -  -  ;
   42 00:4105 -  -  -  -  ; ***************************************************************************************
   43 00:4105 -  -  -  -  ;
   44 00:4105 -  -  -  -  ;		Date			Notes
   45 00:4105 -  -  -  -  ;		==== 			=====
   46 00:4105 -  -  -  -  ;
   47 00:4105 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:4105 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4105 -  -  -  -  ; ***************************************************************************************
    2 00:4105 -  -  -  -  ; ***************************************************************************************
    3 00:4105 -  -  -  -  ;
    4 00:4105 -  -  -  -  ;		Name : 		run.asm
    5 00:4105 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4105 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4105 -  -  -  -  ;		Reviewed :	No
    8 00:4105 -  -  -  -  ;		Purpose :	Run command
    9 00:4105 -  -  -  -  ;
   10 00:4105 -  -  -  -  ; ***************************************************************************************
   11 00:4105 -  -  -  -  ; ***************************************************************************************
   12 00:4105 -  -  -  -  
   13 00:4105 -  -  -  -  ; ***************************************************************************************
   14 00:4105 -  -  -  -  ;
   15 00:4105 -  -  -  -  ;										RUN command
   16 00:4105 -  -  -  -  ;
   17 00:4105 -  -  -  -  ; ***************************************************************************************
   18 00:4105 -  -  -  -  
   19 00:4105 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4105 CD D4 45 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4108 -  -  -  -  
   22 00:4108 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:410C ED 73 4D 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4110 -  -  -  -  		;
   25 00:4110 -  -  -  -  		; 		New line at IX.
   26 00:4110 -  -  -  -  		;
   27 00:4110 -  -  -  -  CRNewLine:
   28 00:4110 DD 22 49 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:4114 -  -  -  -  		;
   30 00:4114 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:4117 B7 -  -  -  		or 		a
   32 00:4118 CA D2 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:411B -  -  -  -  		;
   34 00:411B DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:411D DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:411F DD 23 -  -  		inc 	ix
   37 00:4121 -  -  -  -  		;
   38 00:4121 -  -  -  -  		; 		New command at IX
   39 00:4121 -  -  -  -  		;
   40 00:4121 -  -  -  -  _CRNewCommand:	
   41 00:4121 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:4124 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:4125 F2 55 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:4128 -  -  -  -  		;
   45 00:4128 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:412A 30 05 -  -  		jr  	nc,_CRDoCommand
   47 00:412C FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:412E D2 4A 41 -  		jp 		nc,_CRAlternateLets
   49 00:4131 -  -  -  -  		;
   50 00:4131 -  -  -  -  _CRDoCommand:		
   51 00:4131 E6 7F 21 00 
              00 6F 29 11 
              7E 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:4143 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:4145 CD 51 40 -  		call 	JumpCode 					; call the routine.
   54 00:4148 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:414A -  -  -  -  		;
   56 00:414A -  -  -  -  		; 		Do CALL (HL)
   57 00:414A -  -  -  -  		;
   58 00:414A -  -  -  -  		;
   59 00:414A -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:414A -  -  -  -  		;		
   61 00:414A -  -  -  -  _CRAlternateLets:		
   62 00:414A FE 83 -  -  		cp 		KWD_PLING
   63 00:414C 28 0C -  -  		jr 		z,_CRAssignmentLet
   64 00:414E FE 84 -  -  		cp 		KWD_QMARK
   65 00:4150 28 08 -  -  		jr 		z,_CRAssignmentLet
   66 00:4152 C3 03 42 -  		jp 		SyntaxError
   67 00:4155 -  -  -  -  		;
   68 00:4155 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:4155 -  -  -  -  		;
   70 00:4155 -  -  -  -  _CRAssignmentHandler:		
   71 00:4155 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:4157 D2 03 42 -  		jp 		nc,SyntaxError
   73 00:415A -  -  -  -  _CRAssignmentLet:		
   74 00:415A 3E 0E C3 A6 
              41 -  -  -  		ERR_TODO
   75 00:415F -  -  -  -  		;call	Command_LET
   76 00:415F C3 21 41 -  		jp 		_CRNewCommand
   77 00:4162 -  -  -  -  
   78 00:4162 -  -  -  -  ; ***************************************************************************************
   79 00:4162 -  -  -  -  ;
   80 00:4162 -  -  -  -  ;									Changes and Updates
   81 00:4162 -  -  -  -  ;
   82 00:4162 -  -  -  -  ; ***************************************************************************************
   83 00:4162 -  -  -  -  ;
   84 00:4162 -  -  -  -  ;		Date			Notes
   85 00:4162 -  -  -  -  ;		==== 			=====
   86 00:4162 -  -  -  -  ;
   87 00:4162 -  -  -  -  ; ***************************************************************************************
   88 00:4162 -  -  -  -  		
Listing for file "_build.asm"
   20 00:4162 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:4162 -  -  -  -  ; ***************************************************************************************
    2 00:4162 -  -  -  -  ; ***************************************************************************************
    3 00:4162 -  -  -  -  ;
    4 00:4162 -  -  -  -  ;		Name : 		stop.asm
    5 00:4162 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4162 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4162 -  -  -  -  ;		Reviewed :	No
    8 00:4162 -  -  -  -  ;		Purpose :	Stop command
    9 00:4162 -  -  -  -  ;
   10 00:4162 -  -  -  -  ; ***************************************************************************************
   11 00:4162 -  -  -  -  ; ***************************************************************************************
   12 00:4162 -  -  -  -  
   13 00:4162 -  -  -  -  ; ***************************************************************************************
   14 00:4162 -  -  -  -  ;
   15 00:4162 -  -  -  -  ;										STOP command
   16 00:4162 -  -  -  -  ;
   17 00:4162 -  -  -  -  ; ***************************************************************************************
   18 00:4162 -  -  -  -  
   19 00:4162 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:4162 3E 0C C3 A6 
              41 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4167 -  -  -  -  
   22 00:4167 -  -  -  -  ; ***************************************************************************************
   23 00:4167 -  -  -  -  ;
   24 00:4167 -  -  -  -  ;									Changes and Updates
   25 00:4167 -  -  -  -  ;
   26 00:4167 -  -  -  -  ; ***************************************************************************************
   27 00:4167 -  -  -  -  ;
   28 00:4167 -  -  -  -  ;		Date			Notes
   29 00:4167 -  -  -  -  ;		==== 			=====
   30 00:4167 -  -  -  -  ;
   31 00:4167 -  -  -  -  ; ***************************************************************************************
   32 00:4167 -  -  -  -  		
Listing for file "_build.asm"
   21 00:4167 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4167 -  -  -  -  ; ***************************************************************************************
    2 00:4167 -  -  -  -  ; ***************************************************************************************
    3 00:4167 -  -  -  -  ;
    4 00:4167 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4167 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4167 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4167 -  -  -  -  ;		Reviewed :	No
    8 00:4167 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4167 -  -  -  -  ;
   10 00:4167 -  -  -  -  ; ***************************************************************************************
   11 00:4167 -  -  -  -  ; ***************************************************************************************
   12 00:4167 -  -  -  -  
   13 00:4167 -  -  -  -  ; ***************************************************************************************
   14 00:4167 -  -  -  -  ;
   15 00:4167 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4167 -  -  -  -  ;
   17 00:4167 -  -  -  -  ; ***************************************************************************************
   18 00:4167 -  -  -  -  
   19 00:4167 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4167             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4167             		inc 	ix
   22 00:4167             		cp 		ch 							; exit if matches
   23 00:4167             		ret 	z
   24 00:4167             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4167             		jp 		ErrorHandler
   26 00:4167             #endmacro
   27 00:4167 -  -  -  -  
   28 00:4167 -  -  -  -  CheckLeftBracket:
   29 00:4167 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 A6 
              41 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4174 -  -  -  -  
   31 00:4174 -  -  -  -  CheckRightBracket:
   32 00:4174 DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 A6 
              41 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:4181 -  -  -  -  
   34 00:4181 -  -  -  -  CheckDollar:
   35 00:4181 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 A6 
              41 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:418E -  -  -  -  		
   37 00:418E -  -  -  -  CheckComma:
   38 00:418E DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 A6 
              41 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:419B -  -  -  -  
   40 00:419B -  -  -  -  ; ***************************************************************************************
   41 00:419B -  -  -  -  ;
   42 00:419B -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:419B -  -  -  -  ;
   44 00:419B -  -  -  -  ; ***************************************************************************************
   45 00:419B -  -  -  -  
   46 00:419B -  -  -  -  CheckNextA:
   47 00:419B DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:419E DD 23 -  -  		inc 	ix 							; skip character
   49 00:41A0 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:41A1 3E 0D C3 A6 
              41 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:41A6 -  -  -  -  		
   52 00:41A6 -  -  -  -  ; ***************************************************************************************
   53 00:41A6 -  -  -  -  ;
   54 00:41A6 -  -  -  -  ;									Changes and Updates
   55 00:41A6 -  -  -  -  ;
   56 00:41A6 -  -  -  -  ; ***************************************************************************************
   57 00:41A6 -  -  -  -  ;
   58 00:41A6 -  -  -  -  ;		Date			Notes
   59 00:41A6 -  -  -  -  ;		==== 			=====
   60 00:41A6 -  -  -  -  ;
   61 00:41A6 -  -  -  -  ; ***************************************************************************************
   62 00:41A6 -  -  -  -  		
Listing for file "_build.asm"
   22 00:41A6 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:41A6 -  -  -  -  ; ***************************************************************************************
    2 00:41A6 -  -  -  -  ; ***************************************************************************************
    3 00:41A6 -  -  -  -  ;
    4 00:41A6 -  -  -  -  ;		Name : 		errors.asm
    5 00:41A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41A6 -  -  -  -  ;		Reviewed :	No
    8 00:41A6 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:41A6 -  -  -  -  ;
   10 00:41A6 -  -  -  -  ; ***************************************************************************************
   11 00:41A6 -  -  -  -  ; ***************************************************************************************
   12 00:41A6 -  -  -  -  
   13 00:41A6 -  -  -  -  ; ***************************************************************************************
   14 00:41A6 -  -  -  -  ;
   15 00:41A6 -  -  -  -  ;								Error handler, message A 
   16 00:41A6 -  -  -  -  ;
   17 00:41A6 -  -  -  -  ; ***************************************************************************************
   18 00:41A6 -  -  -  -  
   19 00:41A6 -  -  -  -  ErrorHandler:
   20 00:41A6 F5 -  -  -  		push 	af 						; save error ID
   21 00:41A7 -  -  -  -  
   22 00:41A7 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:41AA 6F -  -  -  		ld 		l,a
   24 00:41AB 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:41AC 29 -  -  -  		add 	hl,hl 		
   26 00:41AD 11 51 47 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:41B0 19 -  -  -  		add 	hl,de
   28 00:41B1 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:41B5 CD 1D 46 -  		call 	PrintStringAtHL
   30 00:41B8 -  -  -  -  		;
   31 00:41B8 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:41B9 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:41BA 28 28 -  -  		jr 		z,_EHExit
   34 00:41BC -  -  -  -  		;
   35 00:41BC DD 2A 49 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:41C0 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:41C3 B7 -  -  -  		or 		a
   38 00:41C4 28 1E -  -  		jr 		z,_EHExit
   39 00:41C6 -  -  -  -  
   40 00:41C6 21 EA 41 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:41C9 CD 1D 46 -  		call 	PrintStringAtHL 
   42 00:41CC -  -  -  -  		
   43 00:41CC D9 -  -  -  		exx								; HL'HL = line number
   44 00:41CD 21 00 00 -  		ld 		hl,$0000 		
   45 00:41D0 D9 -  -  -  		exx 
   46 00:41D1 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:41D4 DD 66 02 -  		ld 		h,(ix+2)
   48 00:41D7 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:41D9 01 7F 40 -  		ld 		bc,ConvertBuffer
   50 00:41DC CD A6 4A -  		call 	Int32ToString
   51 00:41DF C5 -  -  -  		push 	bc
   52 00:41E0 E1 -  -  -  		pop 	hl
   53 00:41E1 CD 1D 46 -  		call 	PrintStringAtHL			; print error line number.
   54 00:41E4 -  -  -  -  _EHExit:		
   55 00:41E4 CD 10 4B -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:41E7 C3 17 40 -  		jp 		WarmStart
   57 00:41EA -  -  -  -  
   58 00:41EA -  -  -  -  _EHAtText:
   59 00:41EA 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:41F4 -  -  -  -  
   61 00:41F4 -  -  -  -  NotImplemented:
   62 00:41F4 3E 04 C3 A6 
              41 -  -  -  		ERR_DISABLED
   63 00:41F9 -  -  -  -  TypeMismatch:
   64 00:41F9 3E 02 C3 A6 
              41 -  -  -  		ERR_BADTYPE
   65 00:41FE -  -  -  -  BadValue:
   66 00:41FE 3E 03 C3 A6 
              41 -  -  -  		ERR_BADVALUE
   67 00:4203 -  -  -  -  SyntaxError:
   68 00:4203 3E 0D C3 A6 
              41 -  -  -  		ERR_SYNTAX
   69 00:4208 -  -  -  -  						
   70 00:4208 -  -  -  -  ; ***************************************************************************************
   71 00:4208 -  -  -  -  ;
   72 00:4208 -  -  -  -  ;									Changes and Updates
   73 00:4208 -  -  -  -  ;
   74 00:4208 -  -  -  -  ; ***************************************************************************************
   75 00:4208 -  -  -  -  ;
   76 00:4208 -  -  -  -  ;		Date			Notes
   77 00:4208 -  -  -  -  ;		==== 			=====
   78 00:4208 -  -  -  -  ;
   79 00:4208 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:4208 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4208 -  -  -  -  ; ***************************************************************************************
    2 00:4208 -  -  -  -  ; ***************************************************************************************
    3 00:4208 -  -  -  -  ;
    4 00:4208 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4208 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4208 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4208 -  -  -  -  ;		Reviewed :	No
    8 00:4208 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4208 -  -  -  -  ;
   10 00:4208 -  -  -  -  ; ***************************************************************************************
   11 00:4208 -  -  -  -  ; ***************************************************************************************
   12 00:4208 -  -  -  -  
   13 00:4208 -  -  -  -  ; ***************************************************************************************
   14 00:4208 -  -  -  -  ;
   15 00:4208 -  -  -  -  ; 									Addition
   16 00:4208 -  -  -  -  ;
   17 00:4208 -  -  -  -  ; ***************************************************************************************
   18 00:4208 -  -  -  -  
   19 00:4208 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4208 CD FB 42 78 
              B1 C2 F9 41 
              C3 33 4A -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4213 -  -  -  -  
   22 00:4213 -  -  -  -  ; ***************************************************************************************
   23 00:4213 -  -  -  -  ;
   24 00:4213 -  -  -  -  ; 									Subtraction
   25 00:4213 -  -  -  -  ;
   26 00:4213 -  -  -  -  ; ***************************************************************************************
   27 00:4213 -  -  -  -  
   28 00:4213 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4213 CD FB 42 78 
              B1 C2 F9 41 
              C3 39 4A -  		IntegerDispatch(Int32Subtract)
   30 00:421E -  -  -  -  
   31 00:421E -  -  -  -  ; ***************************************************************************************
   32 00:421E -  -  -  -  ;
   33 00:421E -  -  -  -  ; 									  Multiply
   34 00:421E -  -  -  -  ;
   35 00:421E -  -  -  -  ; ***************************************************************************************
   36 00:421E -  -  -  -  
   37 00:421E -  -  -  -  ALUMultiply: 	;; [*]
   38 00:421E CD FB 42 78 
              B1 C2 F9 41 
              C3 FD 49 -  		IntegerDispatch(Int32Multiply)
   39 00:4229 -  -  -  -  
   40 00:4229 -  -  -  -  ; ***************************************************************************************
   41 00:4229 -  -  -  -  ;
   42 00:4229 -  -  -  -  ; 									  Divide
   43 00:4229 -  -  -  -  ;
   44 00:4229 -  -  -  -  ; ***************************************************************************************
   45 00:4229 -  -  -  -  
   46 00:4229 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4229 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4229 CD FB 42 78 
              B1 C2 F9 41 
              C3 0E 49 -  		IntegerDispatch(Int32SDivide)
   49 00:4234 -  -  -  -  
   50 00:4234 -  -  -  -  ; ***************************************************************************************
   51 00:4234 -  -  -  -  ;
   52 00:4234 -  -  -  -  ; 									  Modulus
   53 00:4234 -  -  -  -  ;
   54 00:4234 -  -  -  -  ; ***************************************************************************************
   55 00:4234 -  -  -  -  
   56 00:4234 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4234 CD FB 42 78 
              B1 C2 F9 41 
              C3 11 49 -  		IntegerDispatch(Int32Modulus)
   58 00:423F -  -  -  -  
   59 00:423F -  -  -  -  ; ***************************************************************************************
   60 00:423F -  -  -  -  ;
   61 00:423F -  -  -  -  ; 									  Logical
   62 00:423F -  -  -  -  ;
   63 00:423F -  -  -  -  ; ***************************************************************************************
   64 00:423F -  -  -  -  
   65 00:423F -  -  -  -  ALUAnd: 		;; [and]
   66 00:423F CD FB 42 78 
              B1 C2 F9 41 
              C3 41 4A -  		IntegerDispatch(Int32And)
   67 00:424A -  -  -  -  
   68 00:424A -  -  -  -  ALUOr: 			;; [or]
   69 00:424A CD FB 42 78 
              B1 C2 F9 41 
              C3 4D 4A -  		IntegerDispatch(Int32Or)
   70 00:4255 -  -  -  -  
   71 00:4255 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4255 CD FB 42 78 
              B1 C2 F9 41 
              C3 59 4A -  		IntegerDispatch(Int32Xor)
   73 00:4260 -  -  -  -  
   74 00:4260 -  -  -  -  ; ***************************************************************************************
   75 00:4260 -  -  -  -  ;
   76 00:4260 -  -  -  -  ;									Changes and Updates
   77 00:4260 -  -  -  -  ;
   78 00:4260 -  -  -  -  ; ***************************************************************************************
   79 00:4260 -  -  -  -  ;
   80 00:4260 -  -  -  -  ;		Date			Notes
   81 00:4260 -  -  -  -  ;		==== 			=====
   82 00:4260 -  -  -  -  ;
   83 00:4260 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:4260 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:4260 -  -  -  -  ; ***************************************************************************************
    2 00:4260 -  -  -  -  ; ***************************************************************************************
    3 00:4260 -  -  -  -  ;
    4 00:4260 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:4260 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4260 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4260 -  -  -  -  ;		Reviewed :	No
    8 00:4260 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:4260 -  -  -  -  ;
   10 00:4260 -  -  -  -  ; ***************************************************************************************
   11 00:4260 -  -  -  -  ; ***************************************************************************************
   12 00:4260 -  -  -  -  
   13 00:4260 -  -  -  -  ; ***************************************************************************************
   14 00:4260 -  -  -  -  ;
   15 00:4260 -  -  -  -  ; 									<l> <op> <r>
   16 00:4260 -  -  -  -  ;
   17 00:4260 -  -  -  -  ; ***************************************************************************************
   18 00:4260 -  -  -  -  
   19 00:4260 -  -  -  -  ALULongReference:			;; [!]
   20 00:4260 CD 6E 42 -  		call 	BRGetAddress 				; calculate address
   21 00:4263 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4265 CB F9 -  -  		set 	CIsReference,c
   23 00:4267 C9 -  -  -  		ret
   24 00:4268 -  -  -  -  
   25 00:4268 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4268 CD 60 42 -  		call 	ALULongReference
   27 00:426B CB F1 -  -  		set 	CIsByteReference,c
   28 00:426D C9 -  -  -  		ret
   29 00:426E -  -  -  -  
   30 00:426E -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:426E CD FB 42 78 
              B1 C2 F9 41 
              C3 79 42 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4279 -  -  -  -  _BRGAMain:		
   33 00:4279 CD 33 4A -  		call 	Int32Add 					; address in HL'HL
   34 00:427C CD E4 43 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:427F C9 -  -  -  		ret
   36 00:4280 -  -  -  -  
   37 00:4280 -  -  -  -  ; ***************************************************************************************
   38 00:4280 -  -  -  -  ;
   39 00:4280 -  -  -  -  ;									Changes and Updates
   40 00:4280 -  -  -  -  ;
   41 00:4280 -  -  -  -  ; ***************************************************************************************
   42 00:4280 -  -  -  -  ;
   43 00:4280 -  -  -  -  ;		Date			Notes
   44 00:4280 -  -  -  -  ;		==== 			=====
   45 00:4280 -  -  -  -  ;
   46 00:4280 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:4280 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:4280 -  -  -  -  ; ***************************************************************************************
    2 00:4280 -  -  -  -  ; ***************************************************************************************
    3 00:4280 -  -  -  -  ;
    4 00:4280 -  -  -  -  ;		Name : 		compare.asm
    5 00:4280 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4280 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4280 -  -  -  -  ;		Reviewed :	No
    8 00:4280 -  -  -  -  ;		Purpose :	Comparison code
    9 00:4280 -  -  -  -  ;
   10 00:4280 -  -  -  -  ; ***************************************************************************************
   11 00:4280 -  -  -  -  ; ***************************************************************************************
   12 00:4280 -  -  -  -  
   13 00:4280 -  -  -  -  #macro compare_equals(n)
   14 00:4280             		call 	CompareBaseCode
   15 00:4280             		cp 		n
   16 00:4280             		jr 		z,UnaryInt32True
   17 00:4280             		jr 		UnaryInt32False
   18 00:4280             #endmacro
   19 00:4280 -  -  -  -  
   20 00:4280 -  -  -  -  #macro compare_not_equals(n)
   21 00:4280             		call 	CompareBaseCode
   22 00:4280             		cp 		n
   23 00:4280             		jr 		nz,UnaryInt32True
   24 00:4280             		jr 		UnaryInt32False
   25 00:4280             #endmacro
   26 00:4280 -  -  -  -  
   27 00:4280 -  -  -  -  ; ***************************************************************************************
   28 00:4280 -  -  -  -  ;
   29 00:4280 -  -  -  -  ; 								Return True/False
   30 00:4280 -  -  -  -  ;
   31 00:4280 -  -  -  -  ; ***************************************************************************************
   32 00:4280 -  -  -  -  
   33 00:4280 -  -  -  -  UnaryInt32True:	
   34 00:4280 3E FF -  -  		ld 		a,255
   35 00:4282 18 01 -  -  		jr 		_Int32Logical
   36 00:4284 -  -  -  -  UnaryInt32False: 
   37 00:4284 AF -  -  -  		xor 	a
   38 00:4285 -  -  -  -  _Int32Logical:
   39 00:4285 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4286 67 -  -  -  		ld 		h,a
   41 00:4287 D9 -  -  -  		exx
   42 00:4288 6F -  -  -  		ld 		l,a
   43 00:4289 67 -  -  -  		ld 		h,a
   44 00:428A D9 -  -  -  		exx
   45 00:428B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:428D C9 -  -  -  		ret
   47 00:428E -  -  -  -  
   48 00:428E -  -  -  -  ; ***************************************************************************************
   49 00:428E -  -  -  -  ;
   50 00:428E -  -  -  -  ; 										> = < (compare == value)
   51 00:428E -  -  -  -  ;
   52 00:428E -  -  -  -  ; ***************************************************************************************
   53 00:428E -  -  -  -  
   54 00:428E -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:428E CD C4 42 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4297 -  -  -  -  
   57 00:4297 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4297 CD C4 42 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:42A0 -  -  -  -  
   60 00:42A0 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:42A0 CD C4 42 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:42A9 -  -  -  -  
   63 00:42A9 -  -  -  -  ; ***************************************************************************************
   64 00:42A9 -  -  -  -  ;
   65 00:42A9 -  -  -  -  ; 										> = < (compare <> value)
   66 00:42A9 -  -  -  -  ;
   67 00:42A9 -  -  -  -  ; ***************************************************************************************
   68 00:42A9 -  -  -  -  
   69 00:42A9 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:42A9 CD C4 42 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:42B2 -  -  -  -  
   72 00:42B2 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:42B2 CD C4 42 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:42BB -  -  -  -  
   75 00:42BB -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:42BB CD C4 42 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:42C4 -  -  -  -  
   78 00:42C4 -  -  -  -  ; ***************************************************************************************
   79 00:42C4 -  -  -  -  ;
   80 00:42C4 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:42C4 -  -  -  -  ;
   82 00:42C4 -  -  -  -  ; ***************************************************************************************
   83 00:42C4 -  -  -  -  
   84 00:42C4 -  -  -  -  CompareBaseCode:
   85 00:42C4 CD FB 42 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:42C7 -  -  -  -  
   87 00:42C7 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:42C8 A1 -  -  -  		and 	c
   89 00:42C9 CB 47 -  -  		bit 	CIsString,a 
   90 00:42CB C2 DA 42 -  		jp 		nz,StringCompare
   91 00:42CE -  -  -  -  
   92 00:42CE 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:42CF B1 -  -  -  		or 		c
   94 00:42D0 CB 47 -  -  		bit 	CIsString,a 
   95 00:42D2 CA 6C 4A -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:42D5 -  -  -  -  
   97 00:42D5 3E 02 C3 A6 
              41 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:42DA -  -  -  -  ;
   99 00:42DA -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:42DA -  -  -  -  ;
  101 00:42DA -  -  -  -  StringCompare:
  102 00:42DA 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:42DB BE -  -  -  		cp 		(hl)
  104 00:42DC 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:42DE 20 08 -  -  		jr 		nz,_SCLess
  106 00:42E0 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:42E1 23 -  -  -  		inc 	hl
  108 00:42E2 FE 20 -  -  		cp 		' '
  109 00:42E4 30 F4 -  -  		jr 		nc,StringCompare
  110 00:42E6 AF -  -  -  		xor 	a 							; return 0.
  111 00:42E7 C9 -  -  -  		ret
  112 00:42E8 -  -  -  -  
  113 00:42E8 -  -  -  -  _SCLess:
  114 00:42E8 3E FF -  -  		ld 		a,$FF
  115 00:42EA C9 -  -  -  		ret
  116 00:42EB -  -  -  -  _SCGreater:
  117 00:42EB 3E 01 -  -  		ld 		a,1
  118 00:42ED C9 -  -  -  		ret
  119 00:42EE -  -  -  -  
  120 00:42EE 3E 0E C3 A6 
              41 -  -  -  		ERR_TODO()
  121 00:42F3 -  -  -  -  
  122 00:42F3 -  -  -  -  ; ***************************************************************************************
  123 00:42F3 -  -  -  -  ;
  124 00:42F3 -  -  -  -  ;									Changes and Updates
  125 00:42F3 -  -  -  -  ;
  126 00:42F3 -  -  -  -  ; ***************************************************************************************
  127 00:42F3 -  -  -  -  ;
  128 00:42F3 -  -  -  -  ;		Date			Notes
  129 00:42F3 -  -  -  -  ;		==== 			=====
  130 00:42F3 -  -  -  -  ;
  131 00:42F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42F3 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:42F3 -  -  -  -  ; ***************************************************************************************
    2 00:42F3 -  -  -  -  ; ***************************************************************************************
    3 00:42F3 -  -  -  -  ;
    4 00:42F3 -  -  -  -  ;		Name : 		utility.asm
    5 00:42F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42F3 -  -  -  -  ;		Reviewed :	No
    8 00:42F3 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:42F3 -  -  -  -  ;
   10 00:42F3 -  -  -  -  ; ***************************************************************************************
   11 00:42F3 -  -  -  -  ; ***************************************************************************************
   12 00:42F3 -  -  -  -  
   13 00:42F3 -  -  -  -  ; ***************************************************************************************
   14 00:42F3 -  -  -  -  ;
   15 00:42F3 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:42F3 -  -  -  -  ;
   17 00:42F3 -  -  -  -  ; ***************************************************************************************
   18 00:42F3 -  -  -  -  
   19 00:42F3 -  -  -  -  SwapHLDE:
   20 00:42F3 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:42F4 D9 -  -  -  			exx
   22 00:42F5 EB -  -  -  			ex 		de,hl
   23 00:42F6 D9 -  -  -  			exx
   24 00:42F7 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:42F8 41 -  -  -  			ld 		b,c
   26 00:42F9 4F -  -  -  			ld 		c,a
   27 00:42FA C9 -  -  -  			ret
   28 00:42FB -  -  -  -  
   29 00:42FB -  -  -  -  ; ***************************************************************************************
   30 00:42FB -  -  -  -  ;
   31 00:42FB -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:42FB -  -  -  -  ;
   33 00:42FB -  -  -  -  ; ***************************************************************************************
   34 00:42FB -  -  -  -  
   35 00:42FB -  -  -  -  DereferenceBoth:
   36 00:42FB CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:42FD C4 B6 43 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:4300 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:4302 C8 -  -  -  			ret 	z
   40 00:4303 CD F3 42 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:4306 CD B6 43 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4309 CD F3 42 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:430C C9 -  -  -  			ret
   44 00:430D -  -  -  -  
   45 00:430D -  -  -  -  ; ***************************************************************************************
   46 00:430D -  -  -  -  ;
   47 00:430D -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:430D -  -  -  -  ;
   49 00:430D -  -  -  -  ; ***************************************************************************************
   50 00:430D -  -  -  -  
   51 00:430D -  -  -  -  NegateHLHL:	
   52 00:430D CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:430F C2 F9 41 -  			jp 		nz,TypeMismatch
   54 00:4312 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4314 C4 B6 43 -  			call 	nz,Dereference 			; if required.
   56 00:4317 CD 93 4A -  			call 	Int32Negate
   57 00:431A C9 -  -  -  			ret
Listing for file "_build.asm"
   27 00:431B -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:431B -  -  -  -  ; ***************************************************************************************
    2 00:431B -  -  -  -  ; ***************************************************************************************
    3 00:431B -  -  -  -  ;
    4 00:431B -  -  -  -  ;		Name : 		expression.asm
    5 00:431B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:431B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:431B -  -  -  -  ;		Reviewed :	None
    8 00:431B -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:431B -  -  -  -  ;
   10 00:431B -  -  -  -  ; ***************************************************************************************
   11 00:431B -  -  -  -  ; ***************************************************************************************
   12 00:431B -  -  -  -  
   13 00:431B -  -  -  -  ; ***************************************************************************************
   14 00:431B -  -  -  -  ;
   15 00:431B -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:431B -  -  -  -  ;
   17 00:431B -  -  -  -  ; ***************************************************************************************
   18 00:431B -  -  -  -  
   19 00:431B -  -  -  -  EvaluateAtPrecedence0:
   20 00:431B AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:431C -  -  -  -  EvaluateAtPrecedence:
   22 00:431C F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:431D -  -  -  -  		;
   24 00:431D -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:431D -  -  -  -  		;
   26 00:431D CD E6 43 -  		call 	EvaluateTerm 				; get term
   27 00:4320 -  -  -  -  		;
   28 00:4320 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4320 -  -  -  -  		;
   30 00:4320 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4321 -  -  -  -  _EAPLoop:
   32 00:4321 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4324 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:4326 D8 -  -  -  		ret 	c
   35 00:4327 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4329 D0 -  -  -  		ret 	nc
   37 00:432A -  -  -  -  		;
   38 00:432A -  -  -  -  		; 		Get the precedence.
   39 00:432A -  -  -  -  		;
   40 00:432A E5 -  -  -  		push 	hl 							; want to use HL
   41 00:432B D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:432D 21 40 47 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4330 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4331 6F -  -  -  		ld 		l,a
   45 00:4332 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4333 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4334 -  -  -  -  		;
   48 00:4334 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4334 -  -  -  -  		;
   50 00:4334 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4335 BB -  -  -  		cp 		e
   52 00:4336 D0 -  -  -  		ret 	nc
   53 00:4337 -  -  -  -  
   54 00:4337 -  -  -  -  		;
   55 00:4337 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4337 -  -  -  -  		;
   57 00:4337 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4338 -  -  -  -  		;
   59 00:4338 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:433B F5 -  -  -  		push 	af
   61 00:433C -  -  -  -  		;
   62 00:433C C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:433D D9 -  -  -  		exx 								; save HL'
   64 00:433E E5 -  -  -  		push 	hl
   65 00:433F D9 -  -  -  		exx 								
   66 00:4340 E5 -  -  -  		push 	hl 							; save HL
   67 00:4341 -  -  -  -  		;
   68 00:4341 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4343 -  -  -  -  		;
   70 00:4343 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4343 -  -  -  -  		;
   72 00:4343 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4344 CD 1C 43 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4347 -  -  -  -  		;
   75 00:4347 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4347 -  -  -  -  		;
   77 00:4347 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4348 -  -  -  -  
   79 00:4348 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4349 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:434A D9 -  -  -  		exx
   82 00:434B EB -  -  -  		ex 		de,hl
   83 00:434C E1 -  -  -  		pop 	hl
   84 00:434D D9 -  -  -  		exx
   85 00:434E C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:434F 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:4350 -  -  -  -  		;
   88 00:4350 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:4350 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:4350 -  -  -  -  		;
   91 00:4350 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:4351 -  -  -  -  		;
   93 00:4351 -  -  -  -  		; 		Call the binary operator in A.
   94 00:4351 -  -  -  -  		;
   95 00:4351 D5 -  -  -  		push 	de
   96 00:4352 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4353 E6 7F 21 00 
              00 6F 29 11 
              7E 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4365 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4366 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4367 CD 51 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:436A -  -  -  -  		;
  102 00:436A D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:436B -  -  -  -  		;
  104 00:436B 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:436D -  -  -  -  
  106 00:436D -  -  -  -  ; ***************************************************************************************
  107 00:436D -  -  -  -  ;
  108 00:436D -  -  -  -  ;									Changes and Updates
  109 00:436D -  -  -  -  ;
  110 00:436D -  -  -  -  ; ***************************************************************************************
  111 00:436D -  -  -  -  ;
  112 00:436D -  -  -  -  ;		Date			Notes
  113 00:436D -  -  -  -  ;		==== 			=====
  114 00:436D -  -  -  -  ;
  115 00:436D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:436D -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:436D -  -  -  -  ; ***************************************************************************************
    2 00:436D -  -  -  -  ; ***************************************************************************************
    3 00:436D -  -  -  -  ;
    4 00:436D -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:436D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:436D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:436D -  -  -  -  ;		Reviewed :	No
    8 00:436D -  -  -  -  ;		Purpose :	Expression support functions
    9 00:436D -  -  -  -  ;
   10 00:436D -  -  -  -  ; ***************************************************************************************
   11 00:436D -  -  -  -  ; ***************************************************************************************
   12 00:436D -  -  -  -  
   13 00:436D -  -  -  -  ; ***************************************************************************************
   14 00:436D -  -  -  -  ;
   15 00:436D -  -  -  -  ; 								Evaluate an integer term
   16 00:436D -  -  -  -  ;
   17 00:436D -  -  -  -  ; ***************************************************************************************
   18 00:436D -  -  -  -  
   19 00:436D -  -  -  -  EvaluateIntegerTerm:
   20 00:436D CD E6 43 -  		call 	EvaluateTerm
   21 00:4370 CD B6 43 -  		call 	DeReference
   22 00:4373 CB 41 -  -  		bit 	CIsString,c
   23 00:4375 C8 -  -  -  		ret 	z
   24 00:4376 C3 F9 41 -  		jp 		TypeMismatch
   25 00:4379 -  -  -  -  
   26 00:4379 -  -  -  -  ; ***************************************************************************************
   27 00:4379 -  -  -  -  ;
   28 00:4379 -  -  -  -  ; 								Evaluate a string term
   29 00:4379 -  -  -  -  ;
   30 00:4379 -  -  -  -  ; ***************************************************************************************
   31 00:4379 -  -  -  -  
   32 00:4379 -  -  -  -  EvaluateStringTerm:
   33 00:4379 CD E6 43 -  		call 	EvaluateTerm
   34 00:437C CD B6 43 -  		call 	DeReference
   35 00:437F CB 41 -  -  		bit 	CIsString,c
   36 00:4381 C0 -  -  -  		ret 	nz
   37 00:4382 C3 F9 41 -  		jp 		TypeMismatch
   38 00:4385 -  -  -  -  
   39 00:4385 -  -  -  -  ; ***************************************************************************************
   40 00:4385 -  -  -  -  ;
   41 00:4385 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4385 -  -  -  -  ;
   43 00:4385 -  -  -  -  ; ***************************************************************************************
   44 00:4385 -  -  -  -  
   45 00:4385 -  -  -  -  EvaluateValue:
   46 00:4385 CD 1B 43 -  		call 	EvaluateAtPrecedence0
   47 00:4388 C3 B6 43 -  		jp 		Dereference
   48 00:438B -  -  -  -  
   49 00:438B -  -  -  -  ; ***************************************************************************************
   50 00:438B -  -  -  -  ;
   51 00:438B -  -  -  -  ; 									Evaluate a number
   52 00:438B -  -  -  -  ;
   53 00:438B -  -  -  -  ; ***************************************************************************************
   54 00:438B -  -  -  -  
   55 00:438B -  -  -  -  EvaluateInteger:
   56 00:438B CD 85 43 -  		call 	EvaluateValue
   57 00:438E CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:4390 C8 -  -  -  		ret 	z
   59 00:4391 C3 F9 41 -  		jp 		TypeMismatch
   60 00:4394 -  -  -  -  
   61 00:4394 -  -  -  -  ; ***************************************************************************************
   62 00:4394 -  -  -  -  ;
   63 00:4394 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4394 -  -  -  -  ;
   65 00:4394 -  -  -  -  ; ***************************************************************************************
   66 00:4394 -  -  -  -  
   67 00:4394 -  -  -  -  Evaluate8BitInteger:
   68 00:4394 CD 8B 43 -  		call 	EvaluateInteger
   69 00:4397 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4398 7C -  -  -  		ld 		a,h
   71 00:4399 B5 -  -  -  		or 		l
   72 00:439A D9 -  -  -  		exx 	
   73 00:439B B4 -  -  -  		or 		h
   74 00:439C C2 FE 41 -  		jp 		nz,BadValue
   75 00:439F 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:43A0 C9 -  -  -  		ret
   77 00:43A1 -  -  -  -  		
   78 00:43A1 -  -  -  -  ; ***************************************************************************************
   79 00:43A1 -  -  -  -  ;
   80 00:43A1 -  -  -  -  ; 									Evaluate a string
   81 00:43A1 -  -  -  -  ;
   82 00:43A1 -  -  -  -  ; ***************************************************************************************
   83 00:43A1 -  -  -  -  
   84 00:43A1 -  -  -  -  EvaluateStringOnly:
   85 00:43A1 CD 85 43 -  		call 	EvaluateValue
   86 00:43A4 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:43A6 CA F9 41 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:43A9 C9 -  -  -  		ret
   89 00:43AA -  -  -  -  
   90 00:43AA -  -  -  -  ; ***************************************************************************************
   91 00:43AA -  -  -  -  ;
   92 00:43AA -  -  -  -  ; 								Return 8/16 bit constant
   93 00:43AA -  -  -  -  ;
   94 00:43AA -  -  -  -  ; ***************************************************************************************
   95 00:43AA -  -  -  -  
   96 00:43AA -  -  -  -  Return8BitConstant:
   97 00:43AA 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:43AD 6F -  -  -  		ld 		l,a
   99 00:43AE -  -  -  -  Return16BitConstant:
  100 00:43AE D9 -  -  -  		exx 								; clear HL'
  101 00:43AF 21 00 00 -  		ld 		hl,0
  102 00:43B2 D9 -  -  -  		exx
  103 00:43B3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:43B5 C9 -  -  -  		ret
  105 00:43B6 -  -  -  -  
  106 00:43B6 -  -  -  -  ; ***************************************************************************************
  107 00:43B6 -  -  -  -  ;
  108 00:43B6 -  -  -  -  ;									Changes and Updates
  109 00:43B6 -  -  -  -  ;
  110 00:43B6 -  -  -  -  ; ***************************************************************************************
  111 00:43B6 -  -  -  -  ;
  112 00:43B6 -  -  -  -  ;		Date			Notes
  113 00:43B6 -  -  -  -  ;		==== 			=====
  114 00:43B6 -  -  -  -  ;
  115 00:43B6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:43B6 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:43B6 -  -  -  -  ; ***************************************************************************************
    2 00:43B6 -  -  -  -  ; ***************************************************************************************
    3 00:43B6 -  -  -  -  ;
    4 00:43B6 -  -  -  -  ;		Name : 		reference.asm
    5 00:43B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43B6 -  -  -  -  ;		Date : 		1st May 2022
    7 00:43B6 -  -  -  -  ;		Reviewed :	No
    8 00:43B6 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:43B6 -  -  -  -  ;
   10 00:43B6 -  -  -  -  ; ***************************************************************************************
   11 00:43B6 -  -  -  -  ; ***************************************************************************************
   12 00:43B6 -  -  -  -  
   13 00:43B6 -  -  -  -  ; ***************************************************************************************
   14 00:43B6 -  -  -  -  ;
   15 00:43B6 -  -  -  -  ; 									Dereference HL'HL C
   16 00:43B6 -  -  -  -  ;
   17 00:43B6 -  -  -  -  ; ***************************************************************************************
   18 00:43B6 -  -  -  -  
   19 00:43B6 -  -  -  -  Dereference:
   20 00:43B6 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:43B8 C8 -  -  -  		ret 	z
   22 00:43B9 -  -  -  -  
   23 00:43B9 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:43BB -  -  -  -  		
   25 00:43BB CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:43BD 20 20 -  -  		jr 		nz,_DRInternal
   27 00:43BF -  -  -  -  
   28 00:43BF CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:43C1 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:43C3 -  -  -  -  
   31 00:43C3 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:43C4 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:43C8 D9 -  -  -  		exx
   34 00:43C9 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:43CA 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:43CB 23 -  -  -  		inc  	hl
   37 00:43CC 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:43D0 D9 -  -  -  		exx 								; fix back
   39 00:43D1 C9 -  -  -  		ret
   40 00:43D2 -  -  -  -  
   41 00:43D2 -  -  -  -  _DeRefByte:		
   42 00:43D2 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:43D3 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:43D6 6F -  -  -  		ld	 	l,a
   45 00:43D7 D9 -  -  -  		exx
   46 00:43D8 21 00 00 -  		ld 		hl,$0000
   47 00:43DB D9 -  -  -  		exx
   48 00:43DC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:43DE C9 -  -  -  		ret
   50 00:43DF -  -  -  -  
   51 00:43DF -  -  -  -  _DRInternal:
   52 00:43DF 3E 04 C3 A6 
              41 -  -  -  		ERR_DISABLED
   53 00:43E4 -  -  -  -  
   54 00:43E4 -  -  -  -  ; ***************************************************************************************
   55 00:43E4 -  -  -  -  ;
   56 00:43E4 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:43E4 -  -  -  -  ;
   58 00:43E4 -  -  -  -  ; ***************************************************************************************
   59 00:43E4 -  -  -  -  
   60 00:43E4 -  -  -  -  DRConvertHLHLToAddress:
   61 00:43E4 -  -  -  -  		#ifdef EZ80
   62 00:43E4             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:43E4             		exx
   64 00:43E4             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:43E4             		ld 		hl,$0000 					; zero HL'
   66 00:43E4             		exx
   67 00:43E4             		ld 		hl,(AConvert) 				; load UHL
   68 00:43E4             		#endif
   69 00:43E4 C9 -  -  -  		ret
   70 00:43E5 -  -  -  -  
   71 00:43E5 -  -  -  -  ; ***************************************************************************************
   72 00:43E5 -  -  -  -  ;
   73 00:43E5 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:43E5 -  -  -  -  ;
   75 00:43E5 -  -  -  -  ; ***************************************************************************************
   76 00:43E5 -  -  -  -  
   77 00:43E5 -  -  -  -  DRConvertAddressToHLHL:
   78 00:43E5 -  -  -  -  		#ifdef EZ80
   79 00:43E5             		ld 		(AConvert),hl
   80 00:43E5             		ld 		hl,$0000
   81 00:43E5             		ld 		(AConvert+3),hl
   82 00:43E5             		exx
   83 00:43E5             		ld 		hl,(AConvert+2)
   84 00:43E5             		exx
   85 00:43E5             		xor 	a
   86 00:43E5             		ld 		(AConvert+2),a
   87 00:43E5             		ld 		hl,(AConvert)
   88 00:43E5             		#endif
   89 00:43E5 C9 -  -  -  		ret
   90 00:43E6 -  -  -  -  
   91 00:43E6 -  -  -  -  ; ***************************************************************************************
   92 00:43E6 -  -  -  -  ;
   93 00:43E6 -  -  -  -  ;									Changes and Updates
   94 00:43E6 -  -  -  -  ;
   95 00:43E6 -  -  -  -  ; ***************************************************************************************
   96 00:43E6 -  -  -  -  ;
   97 00:43E6 -  -  -  -  ;		Date			Notes
   98 00:43E6 -  -  -  -  ;		==== 			=====
   99 00:43E6 -  -  -  -  ;
  100 00:43E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:43E6 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:43E6 -  -  -  -  ; ***************************************************************************************
    2 00:43E6 -  -  -  -  ; ***************************************************************************************
    3 00:43E6 -  -  -  -  ;
    4 00:43E6 -  -  -  -  ;		Name : 		term.asm
    5 00:43E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43E6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43E6 -  -  -  -  ;		Reviewed :	No
    8 00:43E6 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:43E6 -  -  -  -  ;
   10 00:43E6 -  -  -  -  ; ***************************************************************************************
   11 00:43E6 -  -  -  -  ; ***************************************************************************************
   12 00:43E6 -  -  -  -  
   13 00:43E6 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:43E6             		add_hlhl_16
   15 00:43E6             		exx
   16 00:43E6             		adc_hlhl_16
   17 00:43E6             		exx
   18 00:43E6             #endmacro
   19 00:43E6 -  -  -  -  
   20 00:43E6 -  -  -  -  ; ***************************************************************************************
   21 00:43E6 -  -  -  -  ;
   22 00:43E6 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:43E6 -  -  -  -  ;
   24 00:43E6 -  -  -  -  ; ***************************************************************************************
   25 00:43E6 -  -  -  -  ;
   26 00:43E6 -  -  -  -  ; 		Terms can be:
   27 00:43E6 -  -  -  -  ;
   28 00:43E6 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:43E6 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:43E6 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:43E6 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:43E6 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:43E6 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:43E6 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:43E6 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:43E6 -  -  -  -  ; 														reference of some sort.
   37 00:43E6 -  -  -  -  ;
   38 00:43E6 -  -  -  -  ; ***************************************************************************************
   39 00:43E6 -  -  -  -  
   40 00:43E6 -  -  -  -  EvaluateTerm:		
   41 00:43E6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:43E8 D9 -  -  -  		exx
   43 00:43E9 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:43EC D9 -  -  -  		exx
   45 00:43ED 21 00 00 -  		ld 		hl,$0000		
   46 00:43F0 -  -  -  -  		;
   47 00:43F0 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:43F3 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:43F5 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:43F7 DA 95 44 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:43FA CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:43FC C2 44 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:43FF -  -  -  -  		;
   54 00:43FF -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:43FF -  -  -  -  		;
   56 00:43FF -  -  -  -  _ETIntegerConstant:
   57 00:43FF -  -  -  -  		;
   58 00:43FF -  -  -  -  _ETIntegerLoop:		
   59 00:43FF DD 7E 00 -  		ld 		a,(ix+0)
   60 00:4402 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4404 B5 -  -  -  		or 		l 							; or into L
   62 00:4405 6F -  -  -  		ld 		l,a
   63 00:4406 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4408 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:440B C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:440D FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:440F D8 -  -  -  		ret 	c
   68 00:4410 -  -  -  -  
   69 00:4410 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4415 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:441A 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:441F 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4424 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4429 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:442E -  -  -  -  
   76 00:442E 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4430 -  -  -  -  		;
   78 00:4430 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4430 -  -  -  -  		;
   80 00:4430 -  -  -  -  _ETStringMarker:		
   81 00:4430 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4432 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4434 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:4436 E1 -  -  -  		pop 	hl
   85 00:4437 11 00 00 -  		ld 		de,$0000
   86 00:443A DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:443D DD 19 -  -  		add 	ix,de
   88 00:443F DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:4441 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4443 C9 -  -  -  		ret
   91 00:4444 -  -  -  -  		;
   92 00:4444 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4444 -  -  -  -  		;
   94 00:4444 -  -  -  -  _ETFoundKeyword:
   95 00:4444 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:4446 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4448 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:444A FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:444C 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:444E -  -  -  -  		;
  101 00:444E -  -  -  -  		;		Unary group 0
  102 00:444E -  -  -  -  		;
  103 00:444E E6 7F 21 00 
              00 6F 29 11 
              7E 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:4460 C3 51 40 -  		jp 		JumpCode 					; and go there.
  105 00:4463 -  -  -  -  
  106 00:4463 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4463 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4465 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4467 -  -  -  -  		;
  110 00:4467 -  -  -  -  		; 		- term
  111 00:4467 -  -  -  -  		;
  112 00:4467 CD 6D 43 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:446A CD 0D 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:446D C9 -  -  -  		ret
  115 00:446E -  -  -  -  		;
  116 00:446E -  -  -  -  		;		! ? indirection check
  117 00:446E -  -  -  -  		;
  118 00:446E -  -  -  -  _ETCheckIndirection:	
  119 00:446E FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:4470 28 05 -  -  		jr 		z,_ETIndirection
  121 00:4472 FE 83 -  -  		cp 		KWD_PLING
  122 00:4474 C2 03 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4477 -  -  -  -  		;
  124 00:4477 -  -  -  -  		; 		! ? indirection
  125 00:4477 -  -  -  -  		;
  126 00:4477 -  -  -  -  _ETIndirection:
  127 00:4477 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4478 CD E6 43 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:447B CD B6 43 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:447E CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:4480 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:4482 CD E4 43 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4485 F1 -  -  -  		pop 	af 							; get type back
  134 00:4486 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4488 CB F9 -  -  		set 	CIsReference,c
  136 00:448A FE 83 -  -  		cp 		KWD_PLING
  137 00:448C C8 -  -  -  		ret 	z
  138 00:448D CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:448F C9 -  -  -  		ret
  140 00:4490 -  -  -  -  _ETStringIndirect:
  141 00:4490 3E 02 C3 A6 
              41 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4495 -  -  -  -  		;
  143 00:4495 -  -  -  -  		; 		Found an identifier.
  144 00:4495 -  -  -  -  		;
  145 00:4495 -  -  -  -  _ETVariable:
  146 00:4495 3E 0E C3 A6 
              41 -  -  -  		ERR_TODO
  147 00:449A 3E 0F C3 A6 
              41 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:449F -  -  -  -  		
  149 00:449F -  -  -  -  ; ***************************************************************************************
  150 00:449F -  -  -  -  ;
  151 00:449F -  -  -  -  ;									Changes and Updates
  152 00:449F -  -  -  -  ;
  153 00:449F -  -  -  -  ; ***************************************************************************************
  154 00:449F -  -  -  -  ;
  155 00:449F -  -  -  -  ;		Date			Notes
  156 00:449F -  -  -  -  ;		==== 			=====
  157 00:449F -  -  -  -  ;
  158 00:449F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:449F -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:449F -  -  -  -  ; ***************************************************************************************
    2 00:449F -  -  -  -  ; ***************************************************************************************
    3 00:449F -  -  -  -  ;
    4 00:449F -  -  -  -  ;		Name : 		abs.asm
    5 00:449F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:449F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:449F -  -  -  -  ;		Reviewed :	No
    8 00:449F -  -  -  -  ;		Purpose :	Absolute value 
    9 00:449F -  -  -  -  ;
   10 00:449F -  -  -  -  ; ***************************************************************************************
   11 00:449F -  -  -  -  ; ***************************************************************************************
   12 00:449F -  -  -  -  
   13 00:449F -  -  -  -  ; ***************************************************************************************
   14 00:449F -  -  -  -  ;
   15 00:449F -  -  -  -  ;								abs( unary function
   16 00:449F -  -  -  -  ;
   17 00:449F -  -  -  -  ; ***************************************************************************************
   18 00:449F -  -  -  -  
   19 00:449F -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:449F CD 6D 43 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:44A2 D9 -  -  -  		exx 								; test MSB
   22 00:44A3 CB 7C -  -  		bit 	7,h
   23 00:44A5 D9 -  -  -  		exx
   24 00:44A6 C4 0D 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:44A9 C9 -  -  -  		ret
   26 00:44AA -  -  -  -  
   27 00:44AA -  -  -  -  ; ***************************************************************************************
   28 00:44AA -  -  -  -  ;
   29 00:44AA -  -  -  -  ;									Changes and Updates
   30 00:44AA -  -  -  -  ;
   31 00:44AA -  -  -  -  ; ***************************************************************************************
   32 00:44AA -  -  -  -  ;
   33 00:44AA -  -  -  -  ;		Date			Notes
   34 00:44AA -  -  -  -  ;		==== 			=====
   35 00:44AA -  -  -  -  ;
   36 00:44AA -  -  -  -  ; ***************************************************************************************
   37 00:44AA -  -  -  -  		
Listing for file "_build.asm"
   32 00:44AA -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:44AA -  -  -  -  ; ***************************************************************************************
    2 00:44AA -  -  -  -  ; ***************************************************************************************
    3 00:44AA -  -  -  -  ;
    4 00:44AA -  -  -  -  ;		Name : 		asc.asm
    5 00:44AA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44AA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44AA -  -  -  -  ;		Reviewed :	No
    8 00:44AA -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:44AA -  -  -  -  ;
   10 00:44AA -  -  -  -  ; ***************************************************************************************
   11 00:44AA -  -  -  -  ; ***************************************************************************************
   12 00:44AA -  -  -  -  
   13 00:44AA -  -  -  -  ; ***************************************************************************************
   14 00:44AA -  -  -  -  ;
   15 00:44AA -  -  -  -  ;								Asc unary function
   16 00:44AA -  -  -  -  ;
   17 00:44AA -  -  -  -  ; ***************************************************************************************
   18 00:44AA -  -  -  -  
   19 00:44AA -  -  -  -  Unary_Asc:	;; [asc]
   20 00:44AA CD 79 43 -  		call	EvaluateStringTerm			; Get string
   21 00:44AD 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:44AE C3 AA 43 -  		jp 		Return8BitConstant
   23 00:44B1 -  -  -  -  
   24 00:44B1 -  -  -  -  ; ***************************************************************************************
   25 00:44B1 -  -  -  -  ;
   26 00:44B1 -  -  -  -  ;									Changes and Updates
   27 00:44B1 -  -  -  -  ;
   28 00:44B1 -  -  -  -  ; ***************************************************************************************
   29 00:44B1 -  -  -  -  ;
   30 00:44B1 -  -  -  -  ;		Date			Notes
   31 00:44B1 -  -  -  -  ;		==== 			=====
   32 00:44B1 -  -  -  -  ;
   33 00:44B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:44B1 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:44B1 -  -  -  -  ; ***************************************************************************************
    2 00:44B1 -  -  -  -  ; ***************************************************************************************
    3 00:44B1 -  -  -  -  ;
    4 00:44B1 -  -  -  -  ;		Name : 		chr.asm
    5 00:44B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44B1 -  -  -  -  ;		Reviewed :	No
    8 00:44B1 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:44B1 -  -  -  -  ;
   10 00:44B1 -  -  -  -  ; ***************************************************************************************
   11 00:44B1 -  -  -  -  ; ***************************************************************************************
   12 00:44B1 -  -  -  -  
   13 00:44B1 -  -  -  -  ; ***************************************************************************************
   14 00:44B1 -  -  -  -  ;
   15 00:44B1 -  -  -  -  ;								Chr$() unary function
   16 00:44B1 -  -  -  -  ;
   17 00:44B1 -  -  -  -  ; ***************************************************************************************
   18 00:44B1 -  -  -  -  
   19 00:44B1 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:44B1 CD 81 41 -  		call 	CheckDollar
   21 00:44B4 CD 6D 43 -  		call 	EvaluateIntegerTerm
   22 00:44B7 7D -  -  -  		ld 		a,l 						; get character
   23 00:44B8 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:44BA 21 7E 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:44BD 36 0D -  -  		ld 		(hl),13
   26 00:44BF 2B -  -  -  		dec 	hl
   27 00:44C0 77 -  -  -  		ld 		(hl),a
   28 00:44C1 C9 -  -  -  		ret
   29 00:44C2 -  -  -  -  
   30 00:44C2 -  -  -  -  ; ***************************************************************************************
   31 00:44C2 -  -  -  -  ;
   32 00:44C2 -  -  -  -  ;									Changes and Updates
   33 00:44C2 -  -  -  -  ;
   34 00:44C2 -  -  -  -  ; ***************************************************************************************
   35 00:44C2 -  -  -  -  ;
   36 00:44C2 -  -  -  -  ;		Date			Notes
   37 00:44C2 -  -  -  -  ;		==== 			=====
   38 00:44C2 -  -  -  -  ;
   39 00:44C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:44C2 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:44C2 -  -  -  -  ; ***************************************************************************************
    2 00:44C2 -  -  -  -  ; ***************************************************************************************
    3 00:44C2 -  -  -  -  ;
    4 00:44C2 -  -  -  -  ;		Name : 		len.asm
    5 00:44C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44C2 -  -  -  -  ;		Reviewed :	None
    8 00:44C2 -  -  -  -  ;		Purpose :	String Length
    9 00:44C2 -  -  -  -  ;
   10 00:44C2 -  -  -  -  ; ***************************************************************************************
   11 00:44C2 -  -  -  -  ; ***************************************************************************************
   12 00:44C2 -  -  -  -  
   13 00:44C2 -  -  -  -  ; ***************************************************************************************
   14 00:44C2 -  -  -  -  ;
   15 00:44C2 -  -  -  -  ;								Len unary function
   16 00:44C2 -  -  -  -  ;
   17 00:44C2 -  -  -  -  ; ***************************************************************************************
   18 00:44C2 -  -  -  -  
   19 00:44C2 -  -  -  -  Unary_Len:	;; [len]
   20 00:44C2 CD 79 43 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:44C5 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:44C6 CD 84 42 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:44C9 -  -  -  -  _ULCount:
   24 00:44C9 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:44CA FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:44CC D8 -  -  -  		ret 	c
   27 00:44CD 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:44CE 13 -  -  -  		inc 	de
   29 00:44CF 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:44D1 -  -  -  -  
   31 00:44D1 -  -  -  -  ; ***************************************************************************************
   32 00:44D1 -  -  -  -  ;
   33 00:44D1 -  -  -  -  ;									Changes and Updates
   34 00:44D1 -  -  -  -  ;
   35 00:44D1 -  -  -  -  ; ***************************************************************************************
   36 00:44D1 -  -  -  -  ;
   37 00:44D1 -  -  -  -  ;		Date			Notes
   38 00:44D1 -  -  -  -  ;		==== 			=====
   39 00:44D1 -  -  -  -  ;
   40 00:44D1 -  -  -  -  ; ***************************************************************************************
   41 00:44D1 -  -  -  -  		
Listing for file "_build.asm"
   35 00:44D1 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:44D1 -  -  -  -  ; ***************************************************************************************
    2 00:44D1 -  -  -  -  ; ***************************************************************************************
    3 00:44D1 -  -  -  -  ;
    4 00:44D1 -  -  -  -  ;		Name : 		makestring.asm
    5 00:44D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44D1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44D1 -  -  -  -  ;		Reviewed :	No
    8 00:44D1 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:44D1 -  -  -  -  ;
   10 00:44D1 -  -  -  -  ; ***************************************************************************************
   11 00:44D1 -  -  -  -  ; ***************************************************************************************
   12 00:44D1 -  -  -  -  
   13 00:44D1 -  -  -  -  ; ***************************************************************************************
   14 00:44D1 -  -  -  -  ;
   15 00:44D1 -  -  -  -  ;								Str$() unary function
   16 00:44D1 -  -  -  -  ;
   17 00:44D1 -  -  -  -  ; ***************************************************************************************
   18 00:44D1 -  -  -  -  
   19 00:44D1 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:44D1 CD 6D 43 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:44D4 CD E4 43 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:44D7 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:44D9 C9 -  -  -  		ret
   24 00:44DA -  -  -  -  
   25 00:44DA -  -  -  -  ; ***************************************************************************************
   26 00:44DA -  -  -  -  ;
   27 00:44DA -  -  -  -  ;									Changes and Updates
   28 00:44DA -  -  -  -  ;
   29 00:44DA -  -  -  -  ; ***************************************************************************************
   30 00:44DA -  -  -  -  ;
   31 00:44DA -  -  -  -  ;		Date			Notes
   32 00:44DA -  -  -  -  ;		==== 			=====
   33 00:44DA -  -  -  -  ;
   34 00:44DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:44DA -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:44DA -  -  -  -  ; ***************************************************************************************
    2 00:44DA -  -  -  -  ; ***************************************************************************************
    3 00:44DA -  -  -  -  ;
    4 00:44DA -  -  -  -  ;		Name : 		not.asm
    5 00:44DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44DA -  -  -  -  ;		Date : 		5th June 2023
    7 00:44DA -  -  -  -  ;		Reviewed :	No
    8 00:44DA -  -  -  -  ;		Purpose :	Logical not
    9 00:44DA -  -  -  -  ;
   10 00:44DA -  -  -  -  ; ***************************************************************************************
   11 00:44DA -  -  -  -  ; ***************************************************************************************
   12 00:44DA -  -  -  -  
   13 00:44DA -  -  -  -  ; ***************************************************************************************
   14 00:44DA -  -  -  -  ;
   15 00:44DA -  -  -  -  ;							not(x) e.g. one's complement
   16 00:44DA -  -  -  -  ;
   17 00:44DA -  -  -  -  ; ***************************************************************************************
   18 00:44DA -  -  -  -  
   19 00:44DA -  -  -  -  Unary_Not:		;; [not]
   20 00:44DA CD 6D 43 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:44DD CD E4 44 -  		call 	__UNSwap 					; not and swap twice.
   22 00:44E0 CD E4 44 -  		call 	__UNSwap		
   23 00:44E3 C9 -  -  -  		ret
   24 00:44E4 -  -  -  -  
   25 00:44E4 -  -  -  -  __UNSwap:
   26 00:44E4 7C -  -  -  		ld 		a,h
   27 00:44E5 2F -  -  -  		cpl
   28 00:44E6 67 -  -  -  		ld 		h,a
   29 00:44E7 7D -  -  -  		ld 		a,l
   30 00:44E8 2F -  -  -  		cpl 	
   31 00:44E9 6F -  -  -  		ld 		l,a
   32 00:44EA D9 -  -  -  		exx
   33 00:44EB C9 -  -  -  		ret
   34 00:44EC -  -  -  -  
   35 00:44EC -  -  -  -  ; ***************************************************************************************
   36 00:44EC -  -  -  -  ;
   37 00:44EC -  -  -  -  ;									Changes and Updates
   38 00:44EC -  -  -  -  ;
   39 00:44EC -  -  -  -  ; ***************************************************************************************
   40 00:44EC -  -  -  -  ;
   41 00:44EC -  -  -  -  ;		Date			Notes
   42 00:44EC -  -  -  -  ;		==== 			=====
   43 00:44EC -  -  -  -  ;
   44 00:44EC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:44EC -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:44EC -  -  -  -  ; ***************************************************************************************
    2 00:44EC -  -  -  -  ; ***************************************************************************************
    3 00:44EC -  -  -  -  ;
    4 00:44EC -  -  -  -  ;		Name : 		page.asm
    5 00:44EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44EC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44EC -  -  -  -  ;		Reviewed :	No
    8 00:44EC -  -  -  -  ;		Purpose :	Various constants.
    9 00:44EC -  -  -  -  ;
   10 00:44EC -  -  -  -  ; ***************************************************************************************
   11 00:44EC -  -  -  -  ; ***************************************************************************************
   12 00:44EC -  -  -  -  
   13 00:44EC -  -  -  -  ; ***************************************************************************************
   14 00:44EC -  -  -  -  ;
   15 00:44EC -  -  -  -  ;							page unary function (no bracket)
   16 00:44EC -  -  -  -  ;
   17 00:44EC -  -  -  -  ; ***************************************************************************************
   18 00:44EC -  -  -  -  
   19 00:44EC -  -  -  -  Unary_Page:	;; [page]
   20 00:44EC 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:44EF D9 -  -  -  			exx
   22 00:44F0 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:44F3 D9 -  -  -  			exx
   24 00:44F4 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:44F6 C9 -  -  -  			ret
   26 00:44F7 -  -  -  -  
   27 00:44F7 -  -  -  -  ; ***************************************************************************************
   28 00:44F7 -  -  -  -  ;
   29 00:44F7 -  -  -  -  ;									Changes and Updates
   30 00:44F7 -  -  -  -  ;
   31 00:44F7 -  -  -  -  ; ***************************************************************************************
   32 00:44F7 -  -  -  -  ;
   33 00:44F7 -  -  -  -  ;		Date			Notes
   34 00:44F7 -  -  -  -  ;		==== 			=====
   35 00:44F7 -  -  -  -  ;
   36 00:44F7 -  -  -  -  ; ***************************************************************************************
   37 00:44F7 -  -  -  -  			
Listing for file "_build.asm"
   38 00:44F7 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:44F7 -  -  -  -  ; ***************************************************************************************
    2 00:44F7 -  -  -  -  ; ***************************************************************************************
    3 00:44F7 -  -  -  -  ;
    4 00:44F7 -  -  -  -  ;		Name : 		random.asm
    5 00:44F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44F7 -  -  -  -  ;		Reviewed :	No
    8 00:44F7 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:44F7 -  -  -  -  ;
   10 00:44F7 -  -  -  -  ; ***************************************************************************************
   11 00:44F7 -  -  -  -  ; ***************************************************************************************
   12 00:44F7 -  -  -  -  
   13 00:44F7 -  -  -  -  ; ***************************************************************************************
   14 00:44F7 -  -  -  -  ;
   15 00:44F7 -  -  -  -  ;								Random unary function
   16 00:44F7 -  -  -  -  ;
   17 00:44F7 -  -  -  -  ; ***************************************************************************************
   18 00:44F7 -  -  -  -  
   19 00:44F7 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:44F7 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:44F8 CD 6D 43 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:44FB D9 -  -  -  		exx 								; is it -ve
   23 00:44FC CB 7C -  -  		bit 	7,h
   24 00:44FE D9 -  -  -  		exx
   25 00:44FF 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4501 22 5D 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4504 D9 -  -  -  		exx
   28 00:4505 22 61 40 -  		ld 		(RandomSeed+4),hl
   29 00:4508 D9 -  -  -  		exx
   30 00:4509 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:450B C9 -  -  -  		ret
   32 00:450C -  -  -  -  _URDontSeed:		
   33 00:450C -  -  -  -  
   34 00:450C CD 65 4A -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:450F 28 19 -  -  		jr 		z,_URFail
   36 00:4511 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4512 D9 -  -  -  		exx
   38 00:4513 E5 -  -  -  		push 	hl
   39 00:4514 D9 -  -  -  		exx
   40 00:4515 -  -  -  -  		;
   41 00:4515 CD 39 45 -  		call 	URandomHL 					; get random HL'HL
   42 00:4518 D9 -  -  -  		exx
   43 00:4519 CD 39 45 -  		call 	URandomHL
   44 00:451C CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:451E D9 -  -  -  		exx
   46 00:451F -  -  -  -  		;
   47 00:451F D9 -  -  -  		exx 								; restore range.
   48 00:4520 D1 -  -  -  		pop 	de
   49 00:4521 D9 -  -  -  		exx
   50 00:4522 D1 -  -  -  		pop 	de
   51 00:4523 -  -  -  -  		;
   52 00:4523 CD 11 49 -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4526 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:4527 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4529 C9 -  -  -  		ret
   56 00:452A -  -  -  -  _URFail:
   57 00:452A 3E 03 C3 A6 
              41 -  -  -  		ERR_BADVALUE
   58 00:452F -  -  -  -  ; ***************************************************************************************
   59 00:452F -  -  -  -  ;
   60 00:452F -  -  -  -  ; 									Push RNG off zero
   61 00:452F -  -  -  -  ;
   62 00:452F -  -  -  -  ; ***************************************************************************************
   63 00:452F -  -  -  -  
   64 00:452F -  -  -  -  UnaryRandomInitialise:
   65 00:452F 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4531 -  -  -  -  _URILoop:
   67 00:4531 C5 -  -  -  		push 	bc
   68 00:4532 CD 39 45 -  		call 	URandomHL
   69 00:4535 C1 -  -  -  		pop 	bc
   70 00:4536 10 F9 -  -  		djnz 	_URILoop
   71 00:4538 C9 -  -  -  		ret
   72 00:4539 -  -  -  -  
   73 00:4539 -  -  -  -  ; ***************************************************************************************
   74 00:4539 -  -  -  -  ;
   75 00:4539 -  -  -  -  ;							16 bit random number generator
   76 00:4539 -  -  -  -  ;
   77 00:4539 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4539 -  -  -  -  ;		Actual author unspecified.
   79 00:4539 -  -  -  -  ;
   80 00:4539 -  -  -  -  ; ***************************************************************************************
   81 00:4539 -  -  -  -  
   82 00:4539 -  -  -  -  URandomHL:
   83 00:4539 2A 5D 40 -  	    ld 		hl,(RandomSeed)
   84 00:453C ED 5B 61 40 	    ld 		de,(RandomSeed+4)
   85 00:4540 44 -  -  -  	    ld 		b,h
   86 00:4541 4D -  -  -  	    ld 		c,l
   87 00:4542 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:4547 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:454C 2C -  -  -  	    inc 	l
   90 00:454D 09 -  -  -  	    add 	hl,bc
   91 00:454E 22 5D 40 -  	    ld 		(RandomSeed),hl
   92 00:4551 2A 61 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:4554 ED 5A -  -  	    adc 	hl,de
   94 00:4556 22 61 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4559 EB -  -  -  	    ex 		de,hl
   96 00:455A 2A 65 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:455D ED 4B 69 40 	    ld 		bc,(RandomSeed+12)
   98 00:4561 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4566 ED 43 69 40 	    ld 		(RandomSeed+12),bc
  100 00:456A 9F -  -  -  	    sbc 	a,a
  101 00:456B E6 C5 -  -  	    and 	%11000101
  102 00:456D AD -  -  -  	    xor 	l
  103 00:456E 6F -  -  -  	    ld 		l,a
  104 00:456F 22 65 40 -  	    ld 		(RandomSeed+8),hl
  105 00:4572 EB -  -  -  	    ex 		de,hl
  106 00:4573 09 -  -  -  	    add 	hl,bc
  107 00:4574 C9 -  -  -  	    ret		
  108 00:4575 -  -  -  -  
  109 00:4575 -  -  -  -  ; ***************************************************************************************
  110 00:4575 -  -  -  -  ;
  111 00:4575 -  -  -  -  ;									Changes and Updates
  112 00:4575 -  -  -  -  ;
  113 00:4575 -  -  -  -  ; ***************************************************************************************
  114 00:4575 -  -  -  -  ;
  115 00:4575 -  -  -  -  ;		Date			Notes
  116 00:4575 -  -  -  -  ;		==== 			=====
  117 00:4575 -  -  -  -  ;
  118 00:4575 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4575 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4575 -  -  -  -  ; ***************************************************************************************
    2 00:4575 -  -  -  -  ; ***************************************************************************************
    3 00:4575 -  -  -  -  ;
    4 00:4575 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4575 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4575 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4575 -  -  -  -  ;		Reviewed :	No
    8 00:4575 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4575 -  -  -  -  ;
   10 00:4575 -  -  -  -  ; ***************************************************************************************
   11 00:4575 -  -  -  -  ; ***************************************************************************************
   12 00:4575 -  -  -  -  
   13 00:4575 -  -  -  -  ; ***************************************************************************************
   14 00:4575 -  -  -  -  ;
   15 00:4575 -  -  -  -  ;								sgn unary function
   16 00:4575 -  -  -  -  ;
   17 00:4575 -  -  -  -  ; ***************************************************************************************
   18 00:4575 -  -  -  -  
   19 00:4575 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4575 CD 6D 43 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4578 CD 65 4A -  		call 	Int32Zero 					; integer sgn() code
   22 00:457B CA 84 42 -  		jp 		z,UnaryInt32False
   23 00:457E D9 -  -  -  		exx
   24 00:457F CB 7C -  -  		bit 	7,h
   25 00:4581 D9 -  -  -  		exx
   26 00:4582 C2 80 42 -  		jp 		nz,UnaryInt32True
   27 00:4585 3E 01 -  -  		ld 		a,1
   28 00:4587 C3 AA 43 -  		jp 		Return8BitConstant
   29 00:458A -  -  -  -  
   30 00:458A -  -  -  -  ; ***************************************************************************************
   31 00:458A -  -  -  -  ;
   32 00:458A -  -  -  -  ;									Changes and Updates
   33 00:458A -  -  -  -  ;
   34 00:458A -  -  -  -  ; ***************************************************************************************
   35 00:458A -  -  -  -  ;
   36 00:458A -  -  -  -  ;		Date			Notes
   37 00:458A -  -  -  -  ;		==== 			=====
   38 00:458A -  -  -  -  ;
   39 00:458A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:458A -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:458A -  -  -  -  ; ***************************************************************************************
    2 00:458A -  -  -  -  ; ***************************************************************************************
    3 00:458A -  -  -  -  ;
    4 00:458A -  -  -  -  ;		Name : 		simple.asm
    5 00:458A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:458A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:458A -  -  -  -  ;		Reviewed :	No
    8 00:458A -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:458A -  -  -  -  ;
   10 00:458A -  -  -  -  ; ***************************************************************************************
   11 00:458A -  -  -  -  ; ***************************************************************************************
   12 00:458A -  -  -  -  
   13 00:458A -  -  -  -  ; ***************************************************************************************
   14 00:458A -  -  -  -  ;
   15 00:458A -  -  -  -  ;								( unary function (think about it)
   16 00:458A -  -  -  -  ;
   17 00:458A -  -  -  -  ; ***************************************************************************************
   18 00:458A -  -  -  -  
   19 00:458A -  -  -  -  Unary_Brackets:	;; [(]
   20 00:458A CD 1B 43 -  		call 	EvaluateAtPrecedence0
   21 00:458D C3 74 41 -  		jp  	CheckRightBracket
   22 00:4590 -  -  -  -  
   23 00:4590 -  -  -  -  ; ***************************************************************************************
   24 00:4590 -  -  -  -  ;
   25 00:4590 -  -  -  -  ;									Handle &x
   26 00:4590 -  -  -  -  ;
   27 00:4590 -  -  -  -  ; ***************************************************************************************
   28 00:4590 -  -  -  -  
   29 00:4590 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:4590 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:4593 E6 C0 -  -  		and 		$C0
   32 00:4595 FE 40 -  -  		cp 			$40
   33 00:4597 C2 03 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:459A C3 E6 43 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:459D -  -  -  -  
   36 00:459D -  -  -  -  ; ***************************************************************************************
   37 00:459D -  -  -  -  ;
   38 00:459D -  -  -  -  ;									Changes and Updates
   39 00:459D -  -  -  -  ;
   40 00:459D -  -  -  -  ; ***************************************************************************************
   41 00:459D -  -  -  -  ;
   42 00:459D -  -  -  -  ;		Date			Notes
   43 00:459D -  -  -  -  ;		==== 			=====
   44 00:459D -  -  -  -  ;
   45 00:459D -  -  -  -  ; ***************************************************************************************
   46 00:459D -  -  -  -  		
Listing for file "_build.asm"
   41 00:459D -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:459D -  -  -  -  ; ***************************************************************************************
    2 00:459D -  -  -  -  ; ***************************************************************************************
    3 00:459D -  -  -  -  ;
    4 00:459D -  -  -  -  ;		Name : 		str.asm
    5 00:459D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:459D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:459D -  -  -  -  ;		Reviewed :	No
    8 00:459D -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:459D -  -  -  -  ;
   10 00:459D -  -  -  -  ; ***************************************************************************************
   11 00:459D -  -  -  -  ; ***************************************************************************************
   12 00:459D -  -  -  -  
   13 00:459D -  -  -  -  ; ***************************************************************************************
   14 00:459D -  -  -  -  ;
   15 00:459D -  -  -  -  ;								Str$() unary function
   16 00:459D -  -  -  -  ;
   17 00:459D -  -  -  -  ; ***************************************************************************************
   18 00:459D -  -  -  -  
   19 00:459D -  -  -  -  Unary_Str:	;; [str]
   20 00:459D CD 81 41 -  		call 	CheckDollar
   21 00:45A0 CD 6D 43 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:45A3 01 6D 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:45A6 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:45A8 CD A6 4A -  		call 	Int32ToString 				
   25 00:45AB 21 6D 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:45AE 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:45B0 C9 -  -  -  		ret
   28 00:45B1 -  -  -  -  
   29 00:45B1 -  -  -  -  ; ***************************************************************************************
   30 00:45B1 -  -  -  -  ;
   31 00:45B1 -  -  -  -  ;									Changes and Updates
   32 00:45B1 -  -  -  -  ;
   33 00:45B1 -  -  -  -  ; ***************************************************************************************
   34 00:45B1 -  -  -  -  ;
   35 00:45B1 -  -  -  -  ;		Date			Notes
   36 00:45B1 -  -  -  -  ;		==== 			=====
   37 00:45B1 -  -  -  -  ;
   38 00:45B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:45B1 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:45B1 -  -  -  -  ; ***************************************************************************************
    2 00:45B1 -  -  -  -  ; ***************************************************************************************
    3 00:45B1 -  -  -  -  ;
    4 00:45B1 -  -  -  -  ;		Name : 		time.asm
    5 00:45B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45B1 -  -  -  -  ;		Reviewed :	No
    8 00:45B1 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:45B1 -  -  -  -  ;
   10 00:45B1 -  -  -  -  ; ***************************************************************************************
   11 00:45B1 -  -  -  -  ; ***************************************************************************************
   12 00:45B1 -  -  -  -  
   13 00:45B1 -  -  -  -  ; ***************************************************************************************
   14 00:45B1 -  -  -  -  ;
   15 00:45B1 -  -  -  -  ;							Get system time in ms
   16 00:45B1 -  -  -  -  ;
   17 00:45B1 -  -  -  -  ; ***************************************************************************************
   18 00:45B1 -  -  -  -  
   19 00:45B1 -  -  -  -  Unary_Time:	;; [time]
   20 00:45B1 CD 1D 4B -  			call 	SYSGetTimer
   21 00:45B4 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:45B6 C9 -  -  -  			ret
   23 00:45B7 -  -  -  -  
   24 00:45B7 -  -  -  -  ; ***************************************************************************************
   25 00:45B7 -  -  -  -  ;
   26 00:45B7 -  -  -  -  ;									Changes and Updates
   27 00:45B7 -  -  -  -  ;
   28 00:45B7 -  -  -  -  ; ***************************************************************************************
   29 00:45B7 -  -  -  -  ;
   30 00:45B7 -  -  -  -  ;		Date			Notes
   31 00:45B7 -  -  -  -  ;		==== 			=====
   32 00:45B7 -  -  -  -  ;
   33 00:45B7 -  -  -  -  ; ***************************************************************************************
   34 00:45B7 -  -  -  -  			
Listing for file "_build.asm"
   43 00:45B7 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:45B7 -  -  -  -  ; ***************************************************************************************
    2 00:45B7 -  -  -  -  ; ***************************************************************************************
    3 00:45B7 -  -  -  -  ;
    4 00:45B7 -  -  -  -  ;		Name : 		top.asm
    5 00:45B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45B7 -  -  -  -  ;		Reviewed :	No
    8 00:45B7 -  -  -  -  ;		Purpose :	Various constants.
    9 00:45B7 -  -  -  -  ;
   10 00:45B7 -  -  -  -  ; ***************************************************************************************
   11 00:45B7 -  -  -  -  ; ***************************************************************************************
   12 00:45B7 -  -  -  -  
   13 00:45B7 -  -  -  -  ; ***************************************************************************************
   14 00:45B7 -  -  -  -  ;
   15 00:45B7 -  -  -  -  ;							page unary function (no bracket)
   16 00:45B7 -  -  -  -  ;
   17 00:45B7 -  -  -  -  ; ***************************************************************************************
   18 00:45B7 -  -  -  -  
   19 00:45B7 -  -  -  -  Unary_Top:	;; [top]
   20 00:45B7 2A 45 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:45BA D9 -  -  -  			exx
   22 00:45BB 2A 47 40 -  			ld 		hl,(TopMemory+2)
   23 00:45BE D9 -  -  -  			exx
   24 00:45BF 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:45C1 C9 -  -  -  			ret
   26 00:45C2 -  -  -  -  
   27 00:45C2 -  -  -  -  ; ***************************************************************************************
   28 00:45C2 -  -  -  -  ;
   29 00:45C2 -  -  -  -  ;									Changes and Updates
   30 00:45C2 -  -  -  -  ;
   31 00:45C2 -  -  -  -  ; ***************************************************************************************
   32 00:45C2 -  -  -  -  ;
   33 00:45C2 -  -  -  -  ;		Date			Notes
   34 00:45C2 -  -  -  -  ;		==== 			=====
   35 00:45C2 -  -  -  -  ;
   36 00:45C2 -  -  -  -  ; ***************************************************************************************
   37 00:45C2 -  -  -  -  			
Listing for file "_build.asm"
   44 00:45C2 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:45C2 -  -  -  -  ; ***************************************************************************************
    2 00:45C2 -  -  -  -  ; ***************************************************************************************
    3 00:45C2 -  -  -  -  ;
    4 00:45C2 -  -  -  -  ;		Name : 		val.asm
    5 00:45C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45C2 -  -  -  -  ;		Reviewed :	No
    8 00:45C2 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:45C2 -  -  -  -  ;
   10 00:45C2 -  -  -  -  ; ***************************************************************************************
   11 00:45C2 -  -  -  -  ; ***************************************************************************************
   12 00:45C2 -  -  -  -  
   13 00:45C2 -  -  -  -  ; ***************************************************************************************
   14 00:45C2 -  -  -  -  ;
   15 00:45C2 -  -  -  -  ;								val( unary function
   16 00:45C2 -  -  -  -  ;
   17 00:45C2 -  -  -  -  ; ***************************************************************************************
   18 00:45C2 -  -  -  -  
   19 00:45C2 -  -  -  -  Unary_Val:	;; [val]
   20 00:45C2 CD 79 43 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:45C5 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:45C6 C1 -  -  -  		pop 	bc
   23 00:45C7 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:45C9 CD 9C 49 -  		call 	Int32FromString 			; get the integer part.
   25 00:45CC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:45CE C8 -  -  -  		ret		z 							; okay
   27 00:45CF 3E 03 C3 A6 
              41 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:45D4 -  -  -  -  
   29 00:45D4 -  -  -  -  ; ***************************************************************************************
   30 00:45D4 -  -  -  -  ;
   31 00:45D4 -  -  -  -  ;									Changes and Updates
   32 00:45D4 -  -  -  -  ;
   33 00:45D4 -  -  -  -  ; ***************************************************************************************
   34 00:45D4 -  -  -  -  ;
   35 00:45D4 -  -  -  -  ;		Date			Notes
   36 00:45D4 -  -  -  -  ;		==== 			=====
   37 00:45D4 -  -  -  -  ;
   38 00:45D4 -  -  -  -  ; ***************************************************************************************
   39 00:45D4 -  -  -  -  		
Listing for file "_build.asm"
   45 00:45D4 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:45D4 -  -  -  -  ; ***************************************************************************************
    2 00:45D4 -  -  -  -  ; ***************************************************************************************
    3 00:45D4 -  -  -  -  ;
    4 00:45D4 -  -  -  -  ;		Name : 		clear.asm
    5 00:45D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45D4 -  -  -  -  ;		Reviewed :	No
    8 00:45D4 -  -  -  -  ;		Purpose :	Clear command.
    9 00:45D4 -  -  -  -  ;
   10 00:45D4 -  -  -  -  ; ***************************************************************************************
   11 00:45D4 -  -  -  -  ; ***************************************************************************************
   12 00:45D4 -  -  -  -  
   13 00:45D4 -  -  -  -  ; ***************************************************************************************
   14 00:45D4 -  -  -  -  ;
   15 00:45D4 -  -  -  -  ;										CLEAR command
   16 00:45D4 -  -  -  -  ;
   17 00:45D4 -  -  -  -  ; ***************************************************************************************
   18 00:45D4 -  -  -  -  
   19 00:45D4 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:45D4 -  -  -  -  		;
   21 00:45D4 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:45D4 -  -  -  -  		;
   23 00:45D4 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:45D7 -  -  -  -  _CCFindLow:
   25 00:45D7 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:45DA 5E -  -  -  		ld 		e,(hl)		
   27 00:45DB 19 -  -  -  		add 	hl,de
   28 00:45DC 7B -  -  -  		ld 		a,e
   29 00:45DD B7 -  -  -  		or 		a
   30 00:45DE 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:45E0 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:45E1 22 45 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:45E4 23 -  -  -  		inc 	hl 							; one for luck
   34 00:45E5 22 41 40 -  		ld 		(LowAllocMemory),hl
   35 00:45E8 -  -  -  -  		;
   36 00:45E8 -  -  -  -  		; 	 		Reset the language stack
   37 00:45E8 -  -  -  -  		;
   38 00:45E8 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:45EB -  -  -  -  		;
   40 00:45EB 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:45ED 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:45F0 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:45F3 19 -  -  -  		add 	hl,de
   44 00:45F4 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:45F6 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:45F9 -  -  -  -  		;
   47 00:45F9 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:45FC 19 -  -  -  		add 	hl,de
   49 00:45FD 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:4600 -  -  -  -  		;
   51 00:4600 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:4600 -  -  -  -  		;
   53 00:4600 -  -  -  -  
   54 00:4600 -  -  -  -  		;
   55 00:4600 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:4600 -  -  -  -  		;
   57 00:4600 CD 2F 45 -  		call 	UnaryRandomInitialise
   58 00:4603 -  -  -  -  		;
   59 00:4603 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:4603 -  -  -  -  		;
   61 00:4603 C9 -  -  -  		ret
   62 00:4604 -  -  -  -  
   63 00:4604 -  -  -  -  ; ***************************************************************************************
   64 00:4604 -  -  -  -  ;
   65 00:4604 -  -  -  -  ;									Changes and Updates
   66 00:4604 -  -  -  -  ;
   67 00:4604 -  -  -  -  ; ***************************************************************************************
   68 00:4604 -  -  -  -  ;
   69 00:4604 -  -  -  -  ;		Date			Notes
   70 00:4604 -  -  -  -  ;		==== 			=====
   71 00:4604 -  -  -  -  ;
   72 00:4604 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:4604 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4604 -  -  -  -  ; ***************************************************************************************
    2 00:4604 -  -  -  -  ; ***************************************************************************************
    3 00:4604 -  -  -  -  ;
    4 00:4604 -  -  -  -  ;		Name : 		instance.asm
    5 00:4604 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4604 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4604 -  -  -  -  ;		Reviewed :	No
    8 00:4604 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4604 -  -  -  -  ;
   10 00:4604 -  -  -  -  ; ***************************************************************************************
   11 00:4604 -  -  -  -  ; ***************************************************************************************
   12 00:4604 -  -  -  -  
   13 00:4604 -  -  -  -  ; ***************************************************************************************
   14 00:4604 -  -  -  -  ;
   15 00:4604 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4604 -  -  -  -  ;
   17 00:4604 -  -  -  -  ; ***************************************************************************************
   18 00:4604 -  -  -  -  
   19 00:4604 -  -  -  -  SetCurrentInstance:
   20 00:4604 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4608 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:460B ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:460F -  -  -  -  
   24 00:460F C9 -  -  -  		ret
   25 00:4610 -  -  -  -  
   26 00:4610 -  -  -  -  
   27 00:4610 -  -  -  -  ; ***************************************************************************************
   28 00:4610 -  -  -  -  ;
   29 00:4610 -  -  -  -  ;									Changes and Updates
   30 00:4610 -  -  -  -  ;
   31 00:4610 -  -  -  -  ; ***************************************************************************************
   32 00:4610 -  -  -  -  ;
   33 00:4610 -  -  -  -  ;		Date			Notes
   34 00:4610 -  -  -  -  ;		==== 			=====
   35 00:4610 -  -  -  -  ;
   36 00:4610 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:4610 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:4610 -  -  -  -  ; ***************************************************************************************
    2 00:4610 -  -  -  -  ; ***************************************************************************************
    3 00:4610 -  -  -  -  ;
    4 00:4610 -  -  -  -  ;		Name : 		new.asm
    5 00:4610 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4610 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4610 -  -  -  -  ;		Reviewed :	No
    8 00:4610 -  -  -  -  ;		Purpose :	New command.
    9 00:4610 -  -  -  -  ;
   10 00:4610 -  -  -  -  ; ***************************************************************************************
   11 00:4610 -  -  -  -  ; ***************************************************************************************
   12 00:4610 -  -  -  -  
   13 00:4610 -  -  -  -  ; ***************************************************************************************
   14 00:4610 -  -  -  -  ;
   15 00:4610 -  -  -  -  ;										NEW command
   16 00:4610 -  -  -  -  ;
   17 00:4610 -  -  -  -  ; ***************************************************************************************
   18 00:4610 -  -  -  -  
   19 00:4610 -  -  -  -  Command_NEW: 	;; [new]
   20 00:4610 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4613 36 00 -  -  		ld 		(hl),0
   22 00:4615 CD D4 45 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4618 3E 00 C3 A6 
              41 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:461D -  -  -  -  
   25 00:461D -  -  -  -  ; ***************************************************************************************
   26 00:461D -  -  -  -  ;
   27 00:461D -  -  -  -  ;									Changes and Updates
   28 00:461D -  -  -  -  ;
   29 00:461D -  -  -  -  ; ***************************************************************************************
   30 00:461D -  -  -  -  ;
   31 00:461D -  -  -  -  ;		Date			Notes
   32 00:461D -  -  -  -  ;		==== 			=====
   33 00:461D -  -  -  -  ;
   34 00:461D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:461D -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:461D -  -  -  -  ; ***************************************************************************************
    2 00:461D -  -  -  -  ; ***************************************************************************************
    3 00:461D -  -  -  -  ;
    4 00:461D -  -  -  -  ;		Name : 		utility.asm
    5 00:461D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:461D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:461D -  -  -  -  ;		Reviewed :	No
    8 00:461D -  -  -  -  ;		Purpose :	Utility routines
    9 00:461D -  -  -  -  ;
   10 00:461D -  -  -  -  ; ***************************************************************************************
   11 00:461D -  -  -  -  ; ***************************************************************************************
   12 00:461D -  -  -  -  
   13 00:461D -  -  -  -  ; ***************************************************************************************
   14 00:461D -  -  -  -  ;
   15 00:461D -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:461D -  -  -  -  ;
   17 00:461D -  -  -  -  ; ***************************************************************************************
   18 00:461D -  -  -  -  
   19 00:461D -  -  -  -  PrintStringAtHL:
   20 00:461D 7E -  -  -  		ld 		a,(hl)
   21 00:461E B7 -  -  -  		or 		a
   22 00:461F C8 -  -  -  		ret 	z
   23 00:4620 CD F4 4A -  		call 	SYSPrintChar
   24 00:4623 23 -  -  -  		inc 	hl
   25 00:4624 18 F7 -  -  		jr 		PrintStringAtHL
   26 00:4626 -  -  -  -  
   27 00:4626 -  -  -  -  ; ***************************************************************************************
   28 00:4626 -  -  -  -  ;
   29 00:4626 -  -  -  -  ;									Changes and Updates
   30 00:4626 -  -  -  -  ;
   31 00:4626 -  -  -  -  ; ***************************************************************************************
   32 00:4626 -  -  -  -  ;
   33 00:4626 -  -  -  -  ;		Date			Notes
   34 00:4626 -  -  -  -  ;		==== 			=====
   35 00:4626 -  -  -  -  ;
   36 00:4626 -  -  -  -  ; ***************************************************************************************
   37 00:4626 -  -  -  -  		
Listing for file "_build.asm"
   49 00:4626 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:4626 -  -  -  -  ;
    2 00:4626 -  -  -  -  ;	This file is automatically generated.
    3 00:4626 -  -  -  -  ;
    4 00:4626 -  -  -  -  ;
    5 00:4626 -  -  -  -  ;	Keywords for set 0
    6 00:4626 -  -  -  -  ;
    7 00:4626 -  -  -  -  KeywordsSet0:
    8 00:4626 01 20 -  -  	.db	1," "              ; $0080
    9 00:4628 01 20 -  -  	.db	1," "              ; $0081
   10 00:462A 01 20 -  -  	.db	1," "              ; $0082
   11 00:462C 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:462E 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:4630 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:4632 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:4634 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:4638 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:463C 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:463E 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:4640 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:4643 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:4646 01 3E -  -  	.db	1,">"              ; $008d
   22 00:4648 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:464A 01 3D -  -  	.db	1,"="              ; $008f
   24 00:464C 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:464F 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:4653 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:4656 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:465A 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:465C 01 28 -  -  	.db	1,"("              ; $0095
   30 00:465E 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:4660 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:4664 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:4668 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:466C 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:4670 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:4674 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:4678 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:467C 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:4680 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:4685 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:468A 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:468E 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:4692 01 29 -  -  	.db	1,")"              ; $00a3
   44 00:4694 01 2C -  -  	.db	1,","              ; $00a4
   45 00:4696 01 3A -  -  	.db	1,":"              ; $00a5
   46 00:4698 01 3B -  -  	.db	1,";"              ; $00a6
   47 00:469A 01 27 -  -  	.db	1,"'"              ; $00a7
   48 00:469C 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 00:46A3 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 00:46A9 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 00:46AC 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 00:46B1 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 00:46B6 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 00:46BA 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 00:46BD 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 00:46C2 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 00:46C7 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 00:46CB 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 00:46D0 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 00:46D8 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 00:46DE 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 00:46E2 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 00:46E6 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 00:46EA 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 00:46EE 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 00:46F4 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 00:46F9 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 00:46FE 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 00:4703 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 00:4707 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 00:470B 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 00:4710 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 00:4715 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 00:471D 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 00:4724 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 00:472A 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 00:472E 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 00:4733 00 -  -  -  	.db	0
   79 00:4734 -  -  -  -  ;
   80 00:4734 -  -  -  -  ;	Keywords for set 1
   81 00:4734 -  -  -  -  ;
   82 00:4734 -  -  -  -  KeywordsSet1:
   83 00:4734 00 -  -  -  	.db	0
   84 00:4735 -  -  -  -  ;
   85 00:4735 -  -  -  -  ;	Keywords for set 2
   86 00:4735 -  -  -  -  ;
   87 00:4735 -  -  -  -  KeywordsSet2:
   88 00:4735 00 -  -  -  	.db	0
Listing for file "_build.asm"
   50 00:4736 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4736 -  -  -  -  ;
    2 00:4736 -  -  -  -  ;	This file is automatically generated.
    3 00:4736 -  -  -  -  ;
    4 00:4736 00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 00:4740 -  -  -  -  PrecedenceTable:
    6 00:4740 06 -  -  -  	.db	6	; $0083 !
    7 00:4741 06 -  -  -  	.db	6	; $0084 ?
    8 00:4742 05 -  -  -  	.db	5	; $0085 *
    9 00:4743 05 -  -  -  	.db	5	; $0086 /
   10 00:4744 05 -  -  -  	.db	5	; $0087 mod
   11 00:4745 05 -  -  -  	.db	5	; $0088 div
   12 00:4746 04 -  -  -  	.db	4	; $0089 +
   13 00:4747 04 -  -  -  	.db	4	; $008a -
   14 00:4748 03 -  -  -  	.db	3	; $008b >=
   15 00:4749 03 -  -  -  	.db	3	; $008c <=
   16 00:474A 03 -  -  -  	.db	3	; $008d >
   17 00:474B 03 -  -  -  	.db	3	; $008e <
   18 00:474C 03 -  -  -  	.db	3	; $008f =
   19 00:474D 03 -  -  -  	.db	3	; $0090 <>
   20 00:474E 02 -  -  -  	.db	2	; $0091 and
   21 00:474F 01 -  -  -  	.db	1	; $0092 or
   22 00:4750 01 -  -  -  	.db	1	; $0093 eor
   23 00:4751 -  -  -  -  
Listing for file "_build.asm"
   51 00:4751 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4751 -  -  -  -  ;
    2 00:4751 -  -  -  -  ;	This is automatically generated.
    3 00:4751 -  -  -  -  ;
    4 00:4751 -  -  -  -  ErrorIDTable:
    5 00:4751 91 47 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4755 97 47 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4759 A8 47 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:475D B6 47 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4761 C0 47 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:4765 DA 47 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:4769 EB 47 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:476D F9 47 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:4771 07 48 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:4775 11 48 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:4779 26 48 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:477D 3C 48 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:4781 4A 48 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:4785 4F 48 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:4789 5C 48 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:478D 6D 48 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:4791 -  -  -  -  
   22 00:4791 -  -  -  -  ErrText_warmstart:
   23 00:4791 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:4797 -  -  -  -  ErrText_assert:
   25 00:4797 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:47A8 -  -  -  -  ErrText_badtype:
   27 00:47A8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:47B6 -  -  -  -  ErrText_badvalue:
   29 00:47B6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:47C0 -  -  -  -  ErrText_disabled:
   31 00:47C0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:47DA -  -  -  -  ErrText_divzero:
   33 00:47DA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:47EB -  -  -  -  ErrText_memory:
   35 00:47EB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:47F9 -  -  -  -  ErrText_nocomma:
   37 00:47F9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:4807 -  -  -  -  ErrText_nodollar:
   39 00:4807 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:4811 -  -  -  -  ErrText_nolbracket:
   41 00:4811 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:4826 -  -  -  -  ErrText_norbracket:
   43 00:4826 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:483C -  -  -  -  ErrText_notref:
   45 00:483C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:484A -  -  -  -  ErrText_stop:
   47 00:484A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:484F -  -  -  -  ErrText_syntax:
   49 00:484F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:485C -  -  -  -  ErrText_todo:
   51 00:485C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:486D -  -  -  -  ErrText_unknownvar:
   53 00:486D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   52 00:487E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:487E -  -  -  -  ;
    2 00:487E -  -  -  -  ;	Vectors for set 0
    3 00:487E -  -  -  -  ;
    4 00:487E -  -  -  -  VectorsSet0:
    5 00:487E D7 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4880 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4882 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4884 60 42 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4886 68 42 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4888 1E 42 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:488A 29 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:488C 34 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:488E 29 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4890 08 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4892 13 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4894 BB 42 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4896 B2 42 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4898 A0 42 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:489A 97 42 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:489C 8E 42 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:489E A9 42 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:48A0 3F 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:48A2 4A 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:48A4 55 42 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:48A6 90 45 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:48A8 8A 45 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:48AA D1 44 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:48AC F7 44 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:48AE C2 44 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:48B0 9F 44 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:48B2 75 45 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:48B4 9D 45 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:48B6 B1 44 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:48B8 AA 44 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:48BA DA 44 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:48BC EC 44 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:48BE B1 45 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:48C0 B7 45 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:48C2 C2 45 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:48C4 CE 40 -  -  	addr(BadCmd_RBracket)            ; $00a3 )
   41 00:48C6 CE 40 -  -  	addr(BadCmd_Comma)               ; $00a4 ,
   42 00:48C8 D1 40 -  -  	addr(Command_Colon)              ; $00a5 :
   43 00:48CA CE 40 -  -  	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 00:48CC EA 40 -  -  	addr(Command_REM2)               ; $00a7 '
   45 00:48CE 1F 40 -  -  	addr(Unimplemented)              ; $00a8 repeat
   46 00:48D0 1F 40 -  -  	addr(Unimplemented)              ; $00a9 until
   47 00:48D2 1F 40 -  -  	addr(Unimplemented)              ; $00aa if
   48 00:48D4 CE 40 -  -  	addr(BadCmd_Then)                ; $00ab then
   49 00:48D6 1F 40 -  -  	addr(Unimplemented)              ; $00ac else
   50 00:48D8 1F 40 -  -  	addr(Unimplemented)              ; $00ad for
   51 00:48DA CE 40 -  -  	addr(BadCmd_To)                  ; $00ae to
   52 00:48DC 1F 40 -  -  	addr(Unimplemented)              ; $00af step
   53 00:48DE 1F 40 -  -  	addr(Unimplemented)              ; $00b0 next
   54 00:48E0 CE 40 -  -  	addr(BadCmd_Defproc)             ; $00b1 def
   55 00:48E2 1F 40 -  -  	addr(Unimplemented)              ; $00b2 proc
   56 00:48E4 1F 40 -  -  	addr(Unimplemented)              ; $00b3 endproc
   57 00:48E6 1F 40 -  -  	addr(Unimplemented)              ; $00b4 local
   58 00:48E8 1F 40 -  -  	addr(Unimplemented)              ; $00b5 dim
   59 00:48EA EA 40 -  -  	addr(Command_REM)                ; $00b6 rem
   60 00:48EC 1F 40 -  -  	addr(Unimplemented)              ; $00b7 let
   61 00:48EE 1F 40 -  -  	addr(Unimplemented)              ; $00b8 vdu
   62 00:48F0 1F 40 -  -  	addr(Unimplemented)              ; $00b9 print
   63 00:48F2 1F 40 -  -  	addr(Unimplemented)              ; $00ba load
   64 00:48F4 1F 40 -  -  	addr(Unimplemented)              ; $00bb save
   65 00:48F6 1F 40 -  -  	addr(Unimplemented)              ; $00bc list
   66 00:48F8 10 46 -  -  	addr(Command_NEW)                ; $00bd new
   67 00:48FA 05 41 -  -  	addr(Command_RUN)                ; $00be run
   68 00:48FC 1F 40 -  -  	addr(Unimplemented)              ; $00bf read
   69 00:48FE 1F 40 -  -  	addr(Unimplemented)              ; $00c0 data
   70 00:4900 1F 40 -  -  	addr(Unimplemented)              ; $00c1 restore
   71 00:4902 BF 40 -  -  	addr(Command_ASSERT)             ; $00c2 assert
   72 00:4904 D4 45 -  -  	addr(Command_CLEAR)              ; $00c3 clear
   73 00:4906 D2 40 -  -  	addr(Command_END)                ; $00c4 end
   74 00:4908 62 41 -  -  	addr(Command_STOP)               ; $00c5 stop
   75 00:490A -  -  -  -  ;
   76 00:490A -  -  -  -  ;	Vectors for set 1
   77 00:490A -  -  -  -  ;
   78 00:490A -  -  -  -  VectorsSet1:
   79 00:490A -  -  -  -  ;
   80 00:490A -  -  -  -  ;	Vectors for set 2
   81 00:490A -  -  -  -  ;
   82 00:490A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   53 00:490A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:490A -  -  -  -  ; ***************************************************************************************
    2 00:490A -  -  -  -  ; ***************************************************************************************
    3 00:490A -  -  -  -  ;
    4 00:490A -  -  -  -  ;		Name : 		idivide.asm
    5 00:490A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:490A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:490A -  -  -  -  ;		Reviewed :	No
    8 00:490A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:490A -  -  -  -  ;
   10 00:490A -  -  -  -  ; ***************************************************************************************
   11 00:490A -  -  -  -  ; ***************************************************************************************
   12 00:490A -  -  -  -  
   13 00:490A -  -  -  -  ; ***************************************************************************************
   14 00:490A -  -  -  -  ;
   15 00:490A -  -  -  -  ;								Unsigned integer divide
   16 00:490A -  -  -  -  ;
   17 00:490A -  -  -  -  ; ***************************************************************************************
   18 00:490A -  -  -  -  
   19 00:490A -  -  -  -  Int32UDivide:
   20 00:490A 37 -  -  -  		scf
   21 00:490B C3 49 49 -  		jp 		_I32UnsignedDivide		
   22 00:490E -  -  -  -  
   23 00:490E -  -  -  -  ; ***************************************************************************************
   24 00:490E -  -  -  -  ;
   25 00:490E -  -  -  -  ;							Signed integer divide/Modulus
   26 00:490E -  -  -  -  ;
   27 00:490E -  -  -  -  ; ***************************************************************************************
   28 00:490E -  -  -  -  
   29 00:490E -  -  -  -  Int32SDivide:
   30 00:490E 37 -  -  -  		scf
   31 00:490F 18 01 -  -  		jr 		_I32SDivide
   32 00:4911 -  -  -  -  Int32Modulus:
   33 00:4911 AF -  -  -  		xor 	a
   34 00:4912 -  -  -  -  _I32SDivide:
   35 00:4912 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4913 F5 -  -  -  		push 	af
   37 00:4914 08 -  -  -  		ex 		af,af'
   38 00:4915 -  -  -  -  
   39 00:4915 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4916 D9 -  -  -  		exx
   41 00:4917 D5 -  -  -  		push 	de
   42 00:4918 D9 -  -  -  		exx
   43 00:4919 -  -  -  -  
   44 00:4919 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:491A AF -  -  -  		xor 	a 							; clear sign count.
   46 00:491B CD 37 49 -  		call 	_I32CheckHLSignSwap
   47 00:491E CD 37 49 -  		call 	_I32CheckHLSignSwap
   48 00:4921 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4922 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4923 F5 -  -  -  		push 	af
   51 00:4924 CD 49 49 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4927 F1 -  -  -  		pop 	af 							; get function back
   53 00:4928 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:492A 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:492B CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:492D C4 93 4A -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4930 -  -  -  -  _I32SDExit:
   58 00:4930 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4931 D1 -  -  -  		pop 	de
   60 00:4932 D9 -  -  -  		exx
   61 00:4933 D1 -  -  -  		pop 	de
   62 00:4934 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4935 08 -  -  -  		ex 		af,af'
   64 00:4936 C9 -  -  -  		ret
   65 00:4937 -  -  -  -  
   66 00:4937 -  -  -  -  
   67 00:4937 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4937 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4938 CB 7C -  -  		bit 	7,h
   70 00:493A D9 -  -  -  		exx
   71 00:493B 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:493D -  -  -  -  		;
   73 00:493D C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:493F F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4940 CD 93 4A -  		call 	Int32Negate 				
   76 00:4943 F1 -  -  -  		pop 	af
   77 00:4944 -  -  -  -  _I32CHSPositive:
   78 00:4944 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4945 EB -  -  -  		ex 		de,hl
   80 00:4946 D9 -  -  -  		exx		
   81 00:4947 EB -  -  -  		ex 		de,hl
   82 00:4948 C9 -  -  -  		ret
   83 00:4949 -  -  -  -  
   84 00:4949 -  -  -  -  ; ***************************************************************************************
   85 00:4949 -  -  -  -  ;
   86 00:4949 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4949 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4949 -  -  -  -  ;
   89 00:4949 -  -  -  -  ; ***************************************************************************************
   90 00:4949 -  -  -  -  
   91 00:4949 -  -  -  -  _I32UnsignedDivide:
   92 00:4949 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:494A D5 -  -  -  		push 	de
   94 00:494B D9 -  -  -  		exx
   95 00:494C C5 -  -  -  		push 	bc
   96 00:494D D5 -  -  -  		push 	de 							
   97 00:494E D9 -  -  -  		exx
   98 00:494F -  -  -  -  
   99 00:494F F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4950 -  -  -  -  
  101 00:4950 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4951 B3 -  -  -  		or 		e
  103 00:4952 D9 -  -  -  		exx
  104 00:4953 B2 -  -  -  		or 		d
  105 00:4954 B3 -  -  -  		or 		e
  106 00:4955 D9 -  -  -  		exx
  107 00:4956 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4959 -  -  -  -  
  109 00:4959 -  -  -  -  
  110 00:4959 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:495A 4D -  -  -  		ld		c,l
  112 00:495B 21 00 00 -  		ld 		hl,$0000
  113 00:495E D9 -  -  -  		exx
  114 00:495F 44 -  -  -  		ld 		b,h
  115 00:4960 4D -  -  -  		ld		c,l
  116 00:4961 21 00 00 -  		ld 		hl,$0000
  117 00:4964 D9 -  -  -  		exx
  118 00:4965 -  -  -  -  
  119 00:4965 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4967 -  -  -  -  _I32DivideLoop:
  121 00:4967 F5 -  -  -  		push 	af
  122 00:4968 -  -  -  -  
  123 00:4968 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:496A CB 10 -  -  		rl 		b
  125 00:496C D9 -  -  -  		exx
  126 00:496D CB 11 -  -  		rl 		c
  127 00:496F CB 10 -  -  		rl 		b
  128 00:4971 D9 -  -  -  		exx
  129 00:4972 CB 15 -  -  		rl 		l
  130 00:4974 CB 14 -  -  		rl 		h
  131 00:4976 D9 -  -  -  		exx
  132 00:4977 CB 15 -  -  		rl 		l
  133 00:4979 CB 14 -  -  		rl 		h
  134 00:497B D9 -  -  -  		exx
  135 00:497C -  -  -  -  
  136 00:497C CD 39 4A -  		call 	Int32Subtract 				; A = A - M
  137 00:497F 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4981 -  -  -  -  
  139 00:4981 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4982 18 03 -  -  		jr 		_I32Next
  141 00:4984 -  -  -  -  
  142 00:4984 -  -  -  -  _I32Borrow:
  143 00:4984 CD 33 4A -  		call 	Int32Add 					; A = A + M
  144 00:4987 -  -  -  -  _I32Next:
  145 00:4987 F1 -  -  -  		pop 	af
  146 00:4988 3D -  -  -  		dec 	a
  147 00:4989 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:498B -  -  -  -  
  149 00:498B F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:498C -  -  -  -  
  151 00:498C 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:498D 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:498F -  -  -  -  
  154 00:498F 60 -  -  -  		ld  	h,b
  155 00:4990 69 -  -  -  		ld 		l,c
  156 00:4991 D9 -  -  -  		exx
  157 00:4992 60 -  -  -  		ld  	h,b
  158 00:4993 69 -  -  -  		ld 		l,c
  159 00:4994 D9 -  -  -  		exx
  160 00:4995 -  -  -  -  _I32Modulus1:		
  161 00:4995 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4996 D1 -  -  -  		pop 	de
  163 00:4997 C1 -  -  -  		pop 	bc
  164 00:4998 D9 -  -  -  		exx
  165 00:4999 D1 -  -  -  		pop 	de
  166 00:499A C1 -  -  -  		pop 	bc
  167 00:499B C9 -  -  -  		ret
  168 00:499C -  -  -  -  
  169 00:499C -  -  -  -  ; ***************************************************************************************
  170 00:499C -  -  -  -  ;
  171 00:499C -  -  -  -  ;									Changes and Updates
  172 00:499C -  -  -  -  ;
  173 00:499C -  -  -  -  ; ***************************************************************************************
  174 00:499C -  -  -  -  ;
  175 00:499C -  -  -  -  ;		Date			Notes
  176 00:499C -  -  -  -  ;		==== 			=====
  177 00:499C -  -  -  -  ;
  178 00:499C -  -  -  -  ; ***************************************************************************************
  179 00:499C -  -  -  -  		
Listing for file "_build.asm"
   54 00:499C -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:499C -  -  -  -  ; ***************************************************************************************
    2 00:499C -  -  -  -  ; ***************************************************************************************
    3 00:499C -  -  -  -  ;
    4 00:499C -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:499C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:499C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:499C -  -  -  -  ;		Reviewed :	No
    8 00:499C -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:499C -  -  -  -  ;
   10 00:499C -  -  -  -  ; ***************************************************************************************
   11 00:499C -  -  -  -  ; ***************************************************************************************
   12 00:499C -  -  -  -  
   13 00:499C -  -  -  -  ; ***************************************************************************************
   14 00:499C -  -  -  -  ;
   15 00:499C -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:499C -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:499C -  -  -  -  ;
   18 00:499C -  -  -  -  ; ***************************************************************************************
   19 00:499C -  -  -  -  
   20 00:499C -  -  -  -  Int32FromString:
   21 00:499C C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:499D D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:499E D5 -  -  -  		push 	de
   24 00:499F D9 -  -  -  		exx
   25 00:49A0 D5 -  -  -  		push 	de
   26 00:49A1 -  -  -  -  
   27 00:49A1 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:49A4 11 00 00 -  		ld 		de,$0000
   29 00:49A7 D9 -  -  -  		exx
   30 00:49A8 21 00 00 -  		ld 		hl,$0000
   31 00:49AB 11 00 00 -  		ld 		de,$0000
   32 00:49AE D9 -  -  -  		exx
   33 00:49AF -  -  -  -  
   34 00:49AF 5F -  -  -  		ld 		e,a 						; base in E
   35 00:49B0 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:49B2 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:49B4 ED 44 -  -  		neg 		 						; fix up the base
   38 00:49B6 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:49B7 -  -  -  -  		;
   40 00:49B7 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:49B8 F5 -  -  -  		push 	af
   42 00:49B9 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:49BB 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:49BC 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:49BE 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:49BF 18 01 -  -  		jr 		_I32FSMain
   47 00:49C1 -  -  -  -  _I32FSNotSigned:		
   48 00:49C1 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:49C2 -  -  -  -  		;
   50 00:49C2 -  -  -  -  		; 		Main conversion loop.
   51 00:49C2 -  -  -  -  		; 		
   52 00:49C2 -  -  -  -  _I32FSMain:		
   53 00:49C2 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:49C3 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:49C5 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:49C7 D6 20 -  -  		sub 	32
   57 00:49C9 -  -  -  -  _I32FSNotLower:
   58 00:49C9 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:49CB 38 21 -  -  		jr 		c,_I32FSExit
   60 00:49CD FE 3A -  -  		cp 		'9'+1
   61 00:49CF 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:49D1 FE 41 -  -  		cp 		'A'
   63 00:49D3 38 19 -  -  		jr 		c,_I32FSExit
   64 00:49D5 FE 47 -  -  		cp 		'F'+1
   65 00:49D7 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:49D9 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:49DB -  -  -  -  _I32FSOkay:
   68 00:49DB D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:49DD BB -  -  -  		cp 		e 							; fail if >= base
   70 00:49DE 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:49E0 03 -  -  -  		inc 	bc 							; consume character
   72 00:49E1 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:49E2 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:49E3 CD FD 49 -  		call 	Int32Multiply 				; result *= base
   75 00:49E6 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:49E7 5F -  -  -  		ld 		e,a
   77 00:49E8 CD 33 4A -  		call 	Int32Add 					; and add it.
   78 00:49EB D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:49EC 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:49EE -  -  -  -  
   81 00:49EE -  -  -  -  _I32FSExit:
   82 00:49EE F1 -  -  -  		pop 	af 							; get sign back
   83 00:49EF FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:49F1 CC 93 4A -  		call 	z,Int32Negate
   85 00:49F4 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:49F5 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:49F6 D9 -  -  -  		exx
   88 00:49F7 D1 -  -  -  		pop 	de
   89 00:49F8 D9 -  -  -  		exx
   90 00:49F9 C1 -  -  -  		pop 	bc
   91 00:49FA FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:49FC C9 -  -  -  		ret				
   93 00:49FD -  -  -  -  
   94 00:49FD -  -  -  -  ; ***************************************************************************************
   95 00:49FD -  -  -  -  ;
   96 00:49FD -  -  -  -  ;									Changes and Updates
   97 00:49FD -  -  -  -  ;
   98 00:49FD -  -  -  -  ; ***************************************************************************************
   99 00:49FD -  -  -  -  ;
  100 00:49FD -  -  -  -  ;		Date			Notes
  101 00:49FD -  -  -  -  ;		==== 			=====
  102 00:49FD -  -  -  -  ;
  103 00:49FD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:49FD -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:49FD -  -  -  -  ; ***************************************************************************************
    2 00:49FD -  -  -  -  ; ***************************************************************************************
    3 00:49FD -  -  -  -  ;
    4 00:49FD -  -  -  -  ;		Name : 		imultiply.asm
    5 00:49FD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49FD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49FD -  -  -  -  ;		Reviewed :	No
    8 00:49FD -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:49FD -  -  -  -  ;
   10 00:49FD -  -  -  -  ; ***************************************************************************************
   11 00:49FD -  -  -  -  ; ***************************************************************************************
   12 00:49FD -  -  -  -  
   13 00:49FD -  -  -  -  Int32Multiply:
   14 00:49FD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:49FE D5 -  -  -  		push 	de
   16 00:49FF 44 -  -  -  		ld 		b,h
   17 00:4A00 4D -  -  -  		ld 		c,l
   18 00:4A01 21 00 00 -  		ld 		hl,$0000
   19 00:4A04 -  -  -  -  
   20 00:4A04 D9 -  -  -  		exx
   21 00:4A05 C5 -  -  -  		push 	bc
   22 00:4A06 D5 -  -  -  		push 	de
   23 00:4A07 44 -  -  -  		ld 		b,h
   24 00:4A08 4D -  -  -  		ld 		c,l
   25 00:4A09 21 00 00 -  		ld 		hl,$0000		
   26 00:4A0C D9 -  -  -  		exx
   27 00:4A0D -  -  -  -  
   28 00:4A0D -  -  -  -  _I32MultiplyLoop:
   29 00:4A0D CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4A0F C4 33 4A -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4A12 -  -  -  -  		;
   32 00:4A12 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4A13 CB 38 -  -  		srl 	b
   34 00:4A15 CB 19 -  -  		rr 		c
   35 00:4A17 D9 -  -  -  		exx
   36 00:4A18 CB 18 -  -  		rr 		b
   37 00:4A1A CB 19 -  -  		rr 		c
   38 00:4A1C -  -  -  -  		;
   39 00:4A1C CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4A1E CB 12 -  -  		rl 		d
   41 00:4A20 D9 -  -  -  		exx
   42 00:4A21 CB 13 -  -  		rl 		e
   43 00:4A23 CB 12 -  -  		rl 		d
   44 00:4A25 -  -  -  -  
   45 00:4A25 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4A26 B1 -  -  -  		or 		c
   47 00:4A27 D9 -  -  -  		exx
   48 00:4A28 B0 -  -  -  		or 		b
   49 00:4A29 B1 -  -  -  		or 		c
   50 00:4A2A 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4A2C -  -  -  -  
   52 00:4A2C D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4A2D D1 -  -  -  		pop 	de
   54 00:4A2E C1 -  -  -  		pop 	bc
   55 00:4A2F D9 -  -  -  		exx
   56 00:4A30 D1 -  -  -  		pop 	de
   57 00:4A31 C1 -  -  -  		pop 	bc
   58 00:4A32 C9 -  -  -  		ret
   59 00:4A33 -  -  -  -  
   60 00:4A33 -  -  -  -  ; ***************************************************************************************
   61 00:4A33 -  -  -  -  ;
   62 00:4A33 -  -  -  -  ;									Changes and Updates
   63 00:4A33 -  -  -  -  ;
   64 00:4A33 -  -  -  -  ; ***************************************************************************************
   65 00:4A33 -  -  -  -  ;
   66 00:4A33 -  -  -  -  ;		Date			Notes
   67 00:4A33 -  -  -  -  ;		==== 			=====
   68 00:4A33 -  -  -  -  ;
   69 00:4A33 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4A33 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4A33 -  -  -  -  ; ***************************************************************************************
    2 00:4A33 -  -  -  -  ; ***************************************************************************************
    3 00:4A33 -  -  -  -  ;
    4 00:4A33 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4A33 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A33 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A33 -  -  -  -  ;		Reviewed :	No
    8 00:4A33 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4A33 -  -  -  -  ;
   10 00:4A33 -  -  -  -  ; ***************************************************************************************
   11 00:4A33 -  -  -  -  ; ***************************************************************************************
   12 00:4A33 -  -  -  -  
   13 00:4A33 -  -  -  -  ; ***************************************************************************************
   14 00:4A33 -  -  -  -  ;
   15 00:4A33 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4A33 -  -  -  -  ;
   17 00:4A33 -  -  -  -  ; ***************************************************************************************
   18 00:4A33 -  -  -  -  
   19 00:4A33 -  -  -  -  Int32Add:
   20 00:4A33 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4A34 D9 -  -  -  		exx
   22 00:4A35 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4A37 D9 -  -  -  		exx
   24 00:4A38 C9 -  -  -  		ret
   25 00:4A39 -  -  -  -  
   26 00:4A39 -  -  -  -  ; ***************************************************************************************
   27 00:4A39 -  -  -  -  ;
   28 00:4A39 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4A39 -  -  -  -  ;
   30 00:4A39 -  -  -  -  ; ***************************************************************************************
   31 00:4A39 -  -  -  -  
   32 00:4A39 -  -  -  -  Int32Subtract:
   33 00:4A39 AF -  -  -  		xor 	a 							; clear carry
   34 00:4A3A ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4A3C D9 -  -  -  		exx
   36 00:4A3D ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4A3F D9 -  -  -  		exx
   38 00:4A40 C9 -  -  -  		ret
   39 00:4A41 -  -  -  -  
   40 00:4A41 -  -  -  -  ; ***************************************************************************************
   41 00:4A41 -  -  -  -  ;
   42 00:4A41 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4A41 -  -  -  -  ;
   44 00:4A41 -  -  -  -  ; ***************************************************************************************
   45 00:4A41 -  -  -  -  
   46 00:4A41 -  -  -  -  Int32And:
   47 00:4A41 D9 -  -  -  		exx
   48 00:4A42 CD 46 4A -  		call 	_I32AndHLDE
   49 00:4A45 D9 -  -  -  		exx
   50 00:4A46 -  -  -  -  _I32AndHLDE:		
   51 00:4A46 7C -  -  -  		ld 		a,h
   52 00:4A47 A2 -  -  -  		and 	d
   53 00:4A48 67 -  -  -  		ld 		h,a
   54 00:4A49 7D -  -  -  		ld 		a,l
   55 00:4A4A A3 -  -  -  		and 	e
   56 00:4A4B 6F -  -  -  		ld 		l,a
   57 00:4A4C C9 -  -  -  		ret
   58 00:4A4D -  -  -  -  
   59 00:4A4D -  -  -  -  ; ***************************************************************************************
   60 00:4A4D -  -  -  -  ;
   61 00:4A4D -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4A4D -  -  -  -  ;
   63 00:4A4D -  -  -  -  ; ***************************************************************************************
   64 00:4A4D -  -  -  -  
   65 00:4A4D -  -  -  -  Int32Or:
   66 00:4A4D D9 -  -  -  		exx
   67 00:4A4E CD 52 4A -  		call 	_I32OrHLDE
   68 00:4A51 D9 -  -  -  		exx
   69 00:4A52 -  -  -  -  _I32OrHLDE:		
   70 00:4A52 7C -  -  -  		ld 		a,h
   71 00:4A53 B2 -  -  -  		or 		d
   72 00:4A54 67 -  -  -  		ld 		h,a
   73 00:4A55 7D -  -  -  		ld 		a,l
   74 00:4A56 B3 -  -  -  		or 		e
   75 00:4A57 6F -  -  -  		ld 		l,a
   76 00:4A58 C9 -  -  -  		ret
   77 00:4A59 -  -  -  -  
   78 00:4A59 -  -  -  -  ; ***************************************************************************************
   79 00:4A59 -  -  -  -  ;
   80 00:4A59 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4A59 -  -  -  -  ;
   82 00:4A59 -  -  -  -  ; ***************************************************************************************
   83 00:4A59 -  -  -  -  
   84 00:4A59 -  -  -  -  Int32Xor:
   85 00:4A59 D9 -  -  -  		exx
   86 00:4A5A CD 5E 4A -  		call 	_I32XorHLDE
   87 00:4A5D D9 -  -  -  		exx
   88 00:4A5E -  -  -  -  _I32XorHLDE:		
   89 00:4A5E 7C -  -  -  		ld 		a,h
   90 00:4A5F AA -  -  -  		xor 	d
   91 00:4A60 67 -  -  -  		ld 		h,a
   92 00:4A61 7D -  -  -  		ld 		a,l
   93 00:4A62 AB -  -  -  		xor 	e
   94 00:4A63 6F -  -  -  		ld 		l,a
   95 00:4A64 C9 -  -  -  		ret
   96 00:4A65 -  -  -  -  
   97 00:4A65 -  -  -  -  ; ***************************************************************************************
   98 00:4A65 -  -  -  -  ;
   99 00:4A65 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4A65 -  -  -  -  ;
  101 00:4A65 -  -  -  -  ; ***************************************************************************************
  102 00:4A65 -  -  -  -  
  103 00:4A65 -  -  -  -  Int32Zero:
  104 00:4A65 D9 -  -  -  		exx
  105 00:4A66 7D -  -  -  		ld 		a,l
  106 00:4A67 B4 -  -  -  		or 		h
  107 00:4A68 D9 -  -  -  		exx
  108 00:4A69 B5 -  -  -  		or 		l
  109 00:4A6A B4 -  -  -  		or 		h
  110 00:4A6B C9 -  -  -  		ret
  111 00:4A6C -  -  -  -  
  112 00:4A6C -  -  -  -  ; ***************************************************************************************
  113 00:4A6C -  -  -  -  ;
  114 00:4A6C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4A6C -  -  -  -  ;
  116 00:4A6C -  -  -  -  ; ***************************************************************************************
  117 00:4A6C -  -  -  -  
  118 00:4A6C -  -  -  -  Int32Compare:
  119 00:4A6C E5 -  -  -  		push 	hl 							; save HL
  120 00:4A6D AF -  -  -  		xor 	a 							; clear carry
  121 00:4A6E ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4A70 D9 -  -  -  		exx
  123 00:4A71 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4A72 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4A74 -  -  -  -  		;
  126 00:4A74 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4A75 E2 7C 4A -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4A78 78 -  -  -  		ld 		a,b
  129 00:4A79 EE 80 -  -  		xor 	$80
  130 00:4A7B 47 -  -  -  		ld 		b,a
  131 00:4A7C -  -  -  -  _I32CNoOverflow:
  132 00:4A7C 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4A7D B5 -  -  -  		or 		l
  134 00:4A7E D9 -  -  -  		exx 
  135 00:4A7F B4 -  -  -  		or 		h
  136 00:4A80 B5 -  -  -  		or 		l
  137 00:4A81 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4A83 -  -  -  -  		;
  139 00:4A83 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4A84 CB 78 -  -  		bit 	7,b
  141 00:4A86 D9 -  -  -  		exx
  142 00:4A87 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4A89 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4A8B 3E FF -  -  		ld 		a,$FF
  145 00:4A8D -  -  -  -  _I32NotPos:
  146 00:4A8D D9 -  -  -  		exx
  147 00:4A8E E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4A8F D9 -  -  -  		exx
  149 00:4A90 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4A91 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4A92 C9 -  -  -  		ret
  152 00:4A93 -  -  -  -  
  153 00:4A93 -  -  -  -  ; ***************************************************************************************
  154 00:4A93 -  -  -  -  ;
  155 00:4A93 -  -  -  -  ;										Negate HL'HL
  156 00:4A93 -  -  -  -  ;
  157 00:4A93 -  -  -  -  ; ***************************************************************************************
  158 00:4A93 -  -  -  -  
  159 00:4A93 -  -  -  -  Int32Negate:
  160 00:4A93 AF -  -  -  		xor 	a
  161 00:4A94 CD 9D 4A -  		call 	_I32NSubtract
  162 00:4A97 D9 -  -  -  		exx
  163 00:4A98 CD 9D 4A -  		call 	_I32NSubtract
  164 00:4A9B D9 -  -  -  		exx
  165 00:4A9C C9 -  -  -  		ret
  166 00:4A9D -  -  -  -  _I32NSubtract:
  167 00:4A9D D5 -  -  -  		push 	de
  168 00:4A9E EB -  -  -  		ex 		de,hl
  169 00:4A9F 21 00 00 -  		ld 		hl,$0000
  170 00:4AA2 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4AA4 D1 -  -  -  		pop 	de
  172 00:4AA5 C9 -  -  -  		ret
  173 00:4AA6 -  -  -  -  		
  174 00:4AA6 -  -  -  -  ; ***************************************************************************************
  175 00:4AA6 -  -  -  -  ;
  176 00:4AA6 -  -  -  -  ;									Changes and Updates
  177 00:4AA6 -  -  -  -  ;
  178 00:4AA6 -  -  -  -  ; ***************************************************************************************
  179 00:4AA6 -  -  -  -  ;
  180 00:4AA6 -  -  -  -  ;		Date			Notes
  181 00:4AA6 -  -  -  -  ;		==== 			=====
  182 00:4AA6 -  -  -  -  ;
  183 00:4AA6 -  -  -  -  ; ***************************************************************************************
  184 00:4AA6 -  -  -  -  		
Listing for file "_build.asm"
   57 00:4AA6 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4AA6 -  -  -  -  ; ***************************************************************************************
    2 00:4AA6 -  -  -  -  ; ***************************************************************************************
    3 00:4AA6 -  -  -  -  ;
    4 00:4AA6 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4AA6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AA6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AA6 -  -  -  -  ;		Reviewed :	No
    8 00:4AA6 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4AA6 -  -  -  -  ;
   10 00:4AA6 -  -  -  -  ; ***************************************************************************************
   11 00:4AA6 -  -  -  -  ;
   12 00:4AA6 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4AA6 -  -  -  -  ;
   14 00:4AA6 -  -  -  -  ; ***************************************************************************************
   15 00:4AA6 -  -  -  -  
   16 00:4AA6 -  -  -  -  Int32ToString:
   17 00:4AA6 C5 -  -  -  		push 	bc 							; save string start
   18 00:4AA7 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4AA8 E5 -  -  -  		push 	hl
   20 00:4AA9 11 00 00 -  		ld	 	de,$0000
   21 00:4AAC D9 -  -  -  		exx
   22 00:4AAD D5 -  -  -  		push 	de
   23 00:4AAE E5 -  -  -  		push 	hl
   24 00:4AAF 11 00 00 -  		ld 		de,$000
   25 00:4AB2 D9 -  -  -  		exx
   26 00:4AB3 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4AB4 -  -  -  -  		;
   28 00:4AB4 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4AB6 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4AB8 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4ABA 5F -  -  -  		ld 		e,a
   32 00:4ABB -  -  -  -  		;
   33 00:4ABB D9 -  -  -  		exx 								; is it -ve ?
   34 00:4ABC CB 7C -  -  		bit 	7,h
   35 00:4ABE D9 -  -  -  		exx
   36 00:4ABF 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4AC1 -  -  -  -  		;
   38 00:4AC1 CD 93 4A -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4AC4 -  -  -  -  		;
   40 00:4AC4 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4AC6 02 -  -  -  		ld 		(bc),a
   42 00:4AC7 03 -  -  -  		inc 	bc
   43 00:4AC8 -  -  -  -  _I32TSNotNegative:	
   44 00:4AC8 CD D6 4A -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4ACB -  -  -  -  _I32TSExit:
   46 00:4ACB 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4ACD 02 -  -  -  		ld 		(bc),a 
   48 00:4ACE -  -  -  -  
   49 00:4ACE D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4ACF E1 -  -  -  		pop 	hl
   51 00:4AD0 D1 -  -  -  		pop 	de
   52 00:4AD1 D9 -  -  -  		exx
   53 00:4AD2 E1 -  -  -  		pop 	hl
   54 00:4AD3 D1 -  -  -  		pop 	de
   55 00:4AD4 C1 -  -  -  		pop 	bc
   56 00:4AD5 C9 -  -  -  		ret
   57 00:4AD6 -  -  -  -  
   58 00:4AD6 -  -  -  -  _I32RecursiveConvert:
   59 00:4AD6 CD 0A 49 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4AD9 F5 -  -  -  		push 	af 							; save remainder
   61 00:4ADA CD 65 4A -  		call 	Int32Zero		 			; check result is non zero
   62 00:4ADD C4 D6 4A -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4AE0 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4AE1 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4AE3 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4AE5 C6 07 -  -  		add 	a,7
   67 00:4AE7 -  -  -  -  _I32NotHex:
   68 00:4AE7 C6 30 -  -  		add 	a,48
   69 00:4AE9 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4AEA 03 -  -  -  		inc 	bc
   71 00:4AEB C9 -  -  -  		ret		
   72 00:4AEC -  -  -  -  
   73 00:4AEC -  -  -  -  ; ***************************************************************************************
   74 00:4AEC -  -  -  -  ;
   75 00:4AEC -  -  -  -  ;									Changes and Updates
   76 00:4AEC -  -  -  -  ;
   77 00:4AEC -  -  -  -  ; ***************************************************************************************
   78 00:4AEC -  -  -  -  ;
   79 00:4AEC -  -  -  -  ;		Date			Notes
   80 00:4AEC -  -  -  -  ;		==== 			=====
   81 00:4AEC -  -  -  -  ;
   82 00:4AEC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:4AEC -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4AEC -  -  -  -  ; ***************************************************************************************
    2 00:4AEC -  -  -  -  ; ***************************************************************************************
    3 00:4AEC -  -  -  -  ;
    4 00:4AEC -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4AEC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AEC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AEC -  -  -  -  ;		Reviewed :	No
    8 00:4AEC -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4AEC -  -  -  -  ;
   10 00:4AEC -  -  -  -  ; ***************************************************************************************
   11 00:4AEC -  -  -  -  ; ***************************************************************************************
   12 00:4AEC -  -  -  -  
   13 00:4AEC -  -  -  -  #ifdef AQUARIUS
   14 00:4AEC -  -  -  -  
   15 00:4AEC -  -  -  -  ; ***************************************************************************************
   16 00:4AEC -  -  -  -  ;
   17 00:4AEC -  -  -  -  ;								Initialise system stuff
   18 00:4AEC -  -  -  -  ;
   19 00:4AEC -  -  -  -  ; ***************************************************************************************
   20 00:4AEC -  -  -  -  
   21 00:4AEC -  -  -  -  SYSInitialise:
   22 00:4AEC 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4AEE CD F4 4A -  	call 	SYSPrintChar
   24 00:4AF1 C9 -  -  -  	ret
   25 00:4AF2 -  -  -  -  
   26 00:4AF2 -  -  -  -  ; ***************************************************************************************
   27 00:4AF2 -  -  -  -  ;
   28 00:4AF2 -  -  -  -  ;								Terminate system stuff
   29 00:4AF2 -  -  -  -  ;
   30 00:4AF2 -  -  -  -  ; ***************************************************************************************
   31 00:4AF2 -  -  -  -  
   32 00:4AF2 -  -  -  -  SYSTerminate:
   33 00:4AF2 18 FE -  -  	jr 		SYSTerminate
   34 00:4AF4 -  -  -  -  
   35 00:4AF4 -  -  -  -  ; ***************************************************************************************
   36 00:4AF4 -  -  -  -  ;
   37 00:4AF4 -  -  -  -  ;								Print A character
   38 00:4AF4 -  -  -  -  ;
   39 00:4AF4 -  -  -  -  ; ***************************************************************************************
   40 00:4AF4 -  -  -  -  
   41 00:4AF4 -  -  -  -  SYSPrintChar:
   42 00:4AF4 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4AF5 C5 -  -  -  	push 	bc
   44 00:4AF6 D5 -  -  -  	push 	de
   45 00:4AF7 E5 -  -  -  	push 	hl
   46 00:4AF8 DD E5 -  -  	push 	ix
   47 00:4AFA FD E5 -  -  	push 	iy
   48 00:4AFC D9 -  -  -  	exx
   49 00:4AFD C5 -  -  -  	push 	bc
   50 00:4AFE D5 -  -  -  	push 	de
   51 00:4AFF E5 -  -  -  	push 	hl
   52 00:4B00 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4B03 E1 -  -  -  	pop 	hl
   54 00:4B04 D1 -  -  -  	pop 	de
   55 00:4B05 C1 -  -  -  	pop 	bc
   56 00:4B06 D9 -  -  -  	exx
   57 00:4B07 FD E1 -  -  	pop 	iy
   58 00:4B09 DD E1 -  -  	pop 	ix
   59 00:4B0B E1 -  -  -  	pop 	hl
   60 00:4B0C D1 -  -  -  	pop 	de
   61 00:4B0D C1 -  -  -  	pop 	bc
   62 00:4B0E F1 -  -  -  	pop 	af
   63 00:4B0F C9 -  -  -  	ret		
   64 00:4B10 -  -  -  -  
   65 00:4B10 -  -  -  -  ; ***************************************************************************************
   66 00:4B10 -  -  -  -  ;
   67 00:4B10 -  -  -  -  ;									Print Newline
   68 00:4B10 -  -  -  -  ;
   69 00:4B10 -  -  -  -  ; ***************************************************************************************
   70 00:4B10 -  -  -  -  
   71 00:4B10 -  -  -  -  SYSPrintCRLF:
   72 00:4B10 F5 -  -  -  	push 	af
   73 00:4B11 3E 0D -  -  	ld 		a,13
   74 00:4B13 CD F4 4A -  	call 	SYSPrintChar
   75 00:4B16 3E 0A -  -  	ld 		a,10
   76 00:4B18 CD F4 4A -  	call 	SYSPrintChar
   77 00:4B1B F1 -  -  -  	pop 	af
   78 00:4B1C C9 -  -  -  	ret
   79 00:4B1D -  -  -  -  
   80 00:4B1D -  -  -  -  ; ***************************************************************************************
   81 00:4B1D -  -  -  -  ;
   82 00:4B1D -  -  -  -  ;									Get time into HL'HL
   83 00:4B1D -  -  -  -  ;
   84 00:4B1D -  -  -  -  ; ***************************************************************************************
   85 00:4B1D -  -  -  -  
   86 00:4B1D -  -  -  -  SYSGetTimer:
   87 00:4B1D DB 00 -  -   	in 		a,($00)
   88 00:4B1F 6F -  -  -   	ld 		l,a
   89 00:4B20 DB 01 -  -   	in 		a,($01)
   90 00:4B22 67 -  -  -   	ld 		h,a
   91 00:4B23 D9 -  -  -   	exx
   92 00:4B24 DB 02 -  -   	in 		a,($02)
   93 00:4B26 6F -  -  -   	ld 		l,a
   94 00:4B27 DB 03 -  -   	in 		a,($03)
   95 00:4B29 67 -  -  -   	ld 		h,a
   96 00:4B2A D9 -  -  -   	exx
   97 00:4B2B C9 -  -  -  	ret 	
   98 00:4B2C -  -  -  -  	
   99 00:4B2C -  -  -  -  #endif
  100 00:4B2C -  -  -  -  
  101 00:4B2C -  -  -  -  ; ***************************************************************************************
  102 00:4B2C -  -  -  -  ;
  103 00:4B2C -  -  -  -  ;									Changes and Updates
  104 00:4B2C -  -  -  -  ;
  105 00:4B2C -  -  -  -  ; ***************************************************************************************
  106 00:4B2C -  -  -  -  ;
  107 00:4B2C -  -  -  -  ;		Date			Notes
  108 00:4B2C -  -  -  -  ;		==== 			=====
  109 00:4B2C -  -  -  -  ;
  110 00:4B2C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:4B2C -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4B2C -  -  -  -  ; ***************************************************************************************
    2 00:4B2C -  -  -  -  ; ***************************************************************************************
    3 00:4B2C -  -  -  -  ;
    4 00:4B2C -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4B2C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B2C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B2C -  -  -  -  ;		Reviewed :	No
    8 00:4B2C -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4B2C -  -  -  -  ;
   10 00:4B2C -  -  -  -  ; ***************************************************************************************
   11 00:4B2C -  -  -  -  ; ***************************************************************************************
   12 00:4B2C -  -  -  -  
   13 00:4B2C -  -  -  -  #ifdef CLEANEZ80
   14 00:4B2C             
   15 00:4B2C             ; ***************************************************************************************
   16 00:4B2C             ;
   17 00:4B2C             ;								Initialise system stuff
   18 00:4B2C             ;
   19 00:4B2C             ; ***************************************************************************************
   20 00:4B2C             
   21 00:4B2C             SYSInitialise:
   22 00:4B2C             	ret
   23 00:4B2C             
   24 00:4B2C             ; ***************************************************************************************
   25 00:4B2C             ;
   26 00:4B2C             ;								Terminate system stuff
   27 00:4B2C             ;
   28 00:4B2C             ; ***************************************************************************************
   29 00:4B2C             
   30 00:4B2C             SYSTerminate:
   31 00:4B2C             	ret
   32 00:4B2C             
   33 00:4B2C             ; ***************************************************************************************
   34 00:4B2C             ;
   35 00:4B2C             ;								Print A character
   36 00:4B2C             ;
   37 00:4B2C             ; ***************************************************************************************
   38 00:4B2C             
   39 00:4B2C             SYSPrintChar:
   40 00:4B2C             	ret		
   41 00:4B2C             
   42 00:4B2C             ; ***************************************************************************************
   43 00:4B2C             ;
   44 00:4B2C             ;									Print Newline
   45 00:4B2C             ;
   46 00:4B2C             ; ***************************************************************************************
   47 00:4B2C             
   48 00:4B2C             SYSPrintCRLF:
   49 00:4B2C             	ret
   50 00:4B2C             
   51 00:4B2C             ; ***************************************************************************************
   52 00:4B2C             ;
   53 00:4B2C             ;									Get time into HL'HL
   54 00:4B2C             ;
   55 00:4B2C             ; ***************************************************************************************
   56 00:4B2C             
   57 00:4B2C             SYSGetTimer:
   58 00:4B2C             	ret
   59 00:4B2C             
   60 00:4B2C             #endif
   61 00:4B2C -  -  -  -  
   62 00:4B2C -  -  -  -  ; ***************************************************************************************
   63 00:4B2C -  -  -  -  ;
   64 00:4B2C -  -  -  -  ;									Changes and Updates
   65 00:4B2C -  -  -  -  ;
   66 00:4B2C -  -  -  -  ; ***************************************************************************************
   67 00:4B2C -  -  -  -  ;
   68 00:4B2C -  -  -  -  ;		Date			Notes
   69 00:4B2C -  -  -  -  ;		==== 			=====
   70 00:4B2C -  -  -  -  ;
   71 00:4B2C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:4B2C -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4B2C -  -  -  -  ; ***************************************************************************************
    2 00:4B2C -  -  -  -  ; ***************************************************************************************
    3 00:4B2C -  -  -  -  ;
    4 00:4B2C -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4B2C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B2C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B2C -  -  -  -  ;		Reviewed :	No
    8 00:4B2C -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4B2C -  -  -  -  ;
   10 00:4B2C -  -  -  -  ; ***************************************************************************************
   11 00:4B2C -  -  -  -  ; ***************************************************************************************
   12 00:4B2C -  -  -  -  
   13 00:4B2C -  -  -  -  #ifdef TI84
   14 00:4B2C             
   15 00:4B2C             ; ***************************************************************************************
   16 00:4B2C             ;
   17 00:4B2C             ;								Initialise system stuff
   18 00:4B2C             ;
   19 00:4B2C             ; ***************************************************************************************
   20 00:4B2C             
   21 00:4B2C             SYSInitialise:
   22 00:4B2C             	di
   23 00:4B2C             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4B2C             	ld 		(_IYTemp84),iy
   25 00:4B2C             	ret
   26 00:4B2C             
   27 00:4B2C             ; ***************************************************************************************
   28 00:4B2C             ;
   29 00:4B2C             ;								Terminate system stuff
   30 00:4B2C             ;
   31 00:4B2C             ; ***************************************************************************************
   32 00:4B2C             
   33 00:4B2C             SYSTerminate:
   34 00:4B2C             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4B2C             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4B2C             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4B2C             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4B2C             	ei
   39 00:4B2C             	ret 										; and exit.
   40 00:4B2C             
   41 00:4B2C             _StackTemp84:									; temp var for TI84 only.
   42 00:4B2C             	.dw 	0,0
   43 00:4B2C             _IYTemp84:
   44 00:4B2C             	.dw 	0,0		
   45 00:4B2C             
   46 00:4B2C             ; ***************************************************************************************
   47 00:4B2C             ;
   48 00:4B2C             ;								Print A character
   49 00:4B2C             ;
   50 00:4B2C             ; ***************************************************************************************
   51 00:4B2C             
   52 00:4B2C             SYSPrintChar:
   53 00:4B2C             	push 	af 									; we stack everything including alt registers
   54 00:4B2C             	push 	bc
   55 00:4B2C             	push 	de
   56 00:4B2C             	push 	hl
   57 00:4B2C             	push 	ix
   58 00:4B2C             	push 	iy
   59 00:4B2C             	exx
   60 00:4B2C             	push 	bc
   61 00:4B2C             	push 	de
   62 00:4B2C             	push 	hl
   63 00:4B2C             
   64 00:4B2C             	ld 		iy,(_IYTemp84)
   65 00:4B2C             	call 	_PutC 								; print A as character
   66 00:4B2C             	di
   67 00:4B2C             	ld 		(_IYTemp84),iy
   68 00:4B2C             
   69 00:4B2C             	pop 	hl
   70 00:4B2C             	pop 	de
   71 00:4B2C             	pop 	bc
   72 00:4B2C             	exx
   73 00:4B2C             	pop 	iy
   74 00:4B2C             	pop 	ix
   75 00:4B2C             	pop 	hl
   76 00:4B2C             	pop 	de
   77 00:4B2C             	pop 	bc
   78 00:4B2C             	pop 	af
   79 00:4B2C             	ret		
   80 00:4B2C             
   81 00:4B2C             ; ***************************************************************************************
   82 00:4B2C             ;
   83 00:4B2C             ;									Print Newline
   84 00:4B2C             ;
   85 00:4B2C             ; ***************************************************************************************
   86 00:4B2C             
   87 00:4B2C             SYSPrintCRLF:
   88 00:4B2C             	push 	af 									; we stack everything including alt registers
   89 00:4B2C             	push 	bc
   90 00:4B2C             	push 	de
   91 00:4B2C             	push 	hl
   92 00:4B2C             	push 	ix
   93 00:4B2C             	push 	iy
   94 00:4B2C             	exx
   95 00:4B2C             	push 	bc
   96 00:4B2C             	push 	de
   97 00:4B2C             	push 	hl
   98 00:4B2C             
   99 00:4B2C             	ld 		iy,(_IYTemp84)
  100 00:4B2C             	call 	_newline
  101 00:4B2C             	di
  102 00:4B2C             	ld 		(_IYTemp84),iy
  103 00:4B2C             
  104 00:4B2C             	pop 	hl
  105 00:4B2C             	pop 	de
  106 00:4B2C             	pop 	bc
  107 00:4B2C             	exx
  108 00:4B2C             	pop 	iy
  109 00:4B2C             	pop 	ix
  110 00:4B2C             	pop 	hl
  111 00:4B2C             	pop 	de
  112 00:4B2C             	pop 	bc
  113 00:4B2C             	pop 	af
  114 00:4B2C             	ret
  115 00:4B2C             
  116 00:4B2C             ; ***************************************************************************************
  117 00:4B2C             ;
  118 00:4B2C             ;									Get time into HL'HL
  119 00:4B2C             ;
  120 00:4B2C             ; ***************************************************************************************
  121 00:4B2C             
  122 00:4B2C             SYSGetTimer:
  123 00:4B2C             	ld 		hl,$1234
  124 00:4B2C             	exx
  125 00:4B2C             	ld 		hl,$5678
  126 00:4B2C             	exx
  127 00:4B2C             	ret
  128 00:4B2C             
  129 00:4B2C             #endif
  130 00:4B2C -  -  -  -  
  131 00:4B2C -  -  -  -  ; ***************************************************************************************
  132 00:4B2C -  -  -  -  ;
  133 00:4B2C -  -  -  -  ;									Changes and Updates
  134 00:4B2C -  -  -  -  ;
  135 00:4B2C -  -  -  -  ; ***************************************************************************************
  136 00:4B2C -  -  -  -  ;
  137 00:4B2C -  -  -  -  ;		Date			Notes
  138 00:4B2C -  -  -  -  ;		==== 			=====
  139 00:4B2C -  -  -  -  ;
  140 00:4B2C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4B2C -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4B2C -  -  -  -  ; ***************************************************************************************
    2 00:4B2C -  -  -  -  ; ***************************************************************************************
    3 00:4B2C -  -  -  -  ;
    4 00:4B2C -  -  -  -  ;		Name : 		basic.asm
    5 00:4B2C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B2C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B2C -  -  -  -  ;		Reviewed :	No
    8 00:4B2C -  -  -  -  ;		Purpose :	Main program.
    9 00:4B2C -  -  -  -  ;
   10 00:4B2C -  -  -  -  ; ***************************************************************************************
   11 00:4B2C -  -  -  -  ; ***************************************************************************************
   12 00:4B2C -  -  -  -  
   13 00:4B2C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:4C00 -  -  -  -  TestInstance:
   15 00:4C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4C00 -  -  -  -  ;
    2 00:4C00 -  -  -  -  ;	This code automatically generated.
    3 00:4C00 -  -  -  -  ;
    4 00:4C00 -  -  -  -  TestProgram:
    5 00:4C00 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 39 
              30 37 32 32 
              0D 80 10 03 
              00 C2 9C 96 
              95 41 51 A3 
              8F 3F 01 51 
              0D 80 13 04 
              00 C2 83 95 
              9F 89 48 A3 
              8F 94 41 46 
              51 54 51 43 
              80 22 05 00 
              C2 96 95 9F 
              89 4D A3 8F 
              3F 13 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 13 
              06 00 C2 83 
              95 9F 89 52 
              A3 8F 94 41 
              50 53 74 79 
              4D 80 10 07 
              00 C2 9D 95 
              3F 02 50 6C 
              0D A3 8F 41 
              50 80 22 08 
              00 C2 96 95 
              9F 89 4D A3 
              8F 3F 13 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              10 09 00 C2 
              9C 96 95 41 
              5A A3 8F 3F 
              01 5A 0D 80 
              12 0A 00 C2 
              8A 47 42 42 
              7B 70 8F 8A 
              47 42 42 7B 
              70 80 12 0B 
              00 C2 8A 6D 
              6A 69 6D 45 
              8F 8A 6D 6A 
              69 6D 45 80 
              1C 0C 00 C2 
              A2 95 3F 0A 
              2D 31 30 35 
              37 34 32 39 
              33 37 0D A3 
              8F 8A 46 53 
              58 49 59 80 
              1E 0D 00 C2 
              A2 95 3F 0B 
              2D 31 34 31 
              33 32 38 36 
              38 37 35 0D 
              A3 8F 8A 41 
              54 4F 50 6F 
              5B 80 14 0E 
              00 C2 8A 8A 
              41 57 55 71 
              62 5E 8F 41 
              57 55 71 62 
              5E 80 10 0F 
              00 C2 98 95 
              3F 03 4F 73 
              6E 0D A3 8F 
              43 80 0F 10 
              00 C2 9D 95 
              3F 01 50 0D 
              A3 8F 41 50 
              80 10 11 00 
              C2 98 95 3F 
              03 66 5A 56 
              0D A3 8F 43 
              80 13 12 00 
              C2 83 95 9F 
              89 49 A3 8F 
              94 41 47 51 
              64 55 44 80 
              12 13 00 C2 
              8A 5F 7E 71 
              64 43 8F 8A 
              5F 7E 71 64 
              43 80 12 14 
              00 C2 8A 8A 
              79 76 62 53 
              7C 8F 79 76 
              62 53 7C 80 
              11 15 00 C2 
              99 95 5F 4D 
              4F 72 A3 8F 
              5F 4D 4F 72 
              80 1E 16 00 
              C2 A2 95 3F 
              0B 2D 31 32 
              30 35 36 32 
              32 34 37 38 
              0D A3 8F 8A 
              41 47 77 45 
              5B 4E 80 13 
              17 00 C2 94 
              41 5C 77 72 
              62 47 8F 41 
              5C 77 72 62 
              47 80 15 18 
              00 C2 99 95 
              41 6E 6D 52 
              55 66 A3 8F 
              41 6E 6D 52 
              55 66 80 1B 
              19 00 C2 A2 
              95 3F 09 2D 
              37 37 33 30 
              31 32 32 35 
              0D A3 8F 8A 
              44 66 78 57 
              69 80 13 1A 
              00 C2 83 95 
              9F 89 4D A3 
              8F 94 41 4B 
              52 64 65 48 
              80 1D 1B 00 
              C2 9B 96 95 
              8A 46 7C 66 
              6D 62 A3 8F 
              3F 0A 2D 31 
              31 36 35 35 
              30 34 39 38 
              0D 80 15 1C 
              00 C2 98 95 
              3F 08 4E 52 
              70 53 6A 64 
              55 46 0D A3 
              8F 48 80 1C 
              1D 00 C2 A2 
              95 3F 0A 31 
              31 37 33 32 
              38 36 35 36 
              36 0D A3 8F 
              41 45 7B 6E 
              7A 66 80 14 
              1E 00 C2 9D 
              95 3F 06 44 
              71 51 6B 4E 
              4B 0D A3 8F 
              41 44 80 10 
              1F 00 C2 8A 
              8A 73 4A 47 
              75 8F 73 4A 
              47 75 80 10 
              20 00 C2 9C 
              96 95 41 57 
              A3 8F 3F 01 
              57 0D 80 11 
              21 00 C2 9A 
              95 8A 75 76 
              4C 64 62 A3 
              8F 8A 41 80 
              0D 22 00 C2 
              98 95 3F 00 
              0D A3 8F 40 
              80 12 23 00 
              C2 8A 67 48 
              54 73 4D 8F 
              8A 67 48 54 
              73 4D 80 1D 
              24 00 C2 9B 
              96 95 8A 57 
              44 5B 53 65 
              A3 8F 3F 0A 
              2D 33 38 37 
              30 33 36 33 
              38 39 0D 80 
              0E 25 00 C2 
              98 95 3F 01 
              6C 0D A3 8F 
              41 80 13 26 
              00 C2 94 43 
              66 6E 79 65 
              6D 8F 43 66 
              6E 79 65 6D 
              80 13 27 00 
              C2 94 41 4F 
              44 54 4C 6A 
              8F 41 4F 44 
              54 4C 6A 80 
              14 28 00 C2 
              8A 41 58 4D 
              68 54 7A 8F 
              8A 41 58 4D 
              68 54 7A 80 
              13 29 00 C2 
              94 43 4A 7B 
              6F 4F 44 8F 
              43 4A 7B 6F 
              4F 44 80 10 
              2A 00 C2 9C 
              96 95 41 55 
              A3 8F 3F 01 
              55 0D 80 10 
              2B 00 C2 9C 
              96 95 41 45 
              A3 8F 3F 01 
              45 0D 80 14 
              2C 00 C2 8A 
              8A 41 72 4C 
              57 40 77 8F 
              41 72 4C 57 
              40 77 80 0D 
              2D 00 C2 9D 
              95 3F 00 0D 
              A3 8F 4D 80 
              14 2E 00 C2 
              8A 41 66 45 
              5B 62 79 8F 
              8A 41 66 45 
              5B 62 79 80 
              10 2F 00 C2 
              9A 95 41 7D 
              55 79 41 7B 
              A3 8F 41 80 
              24 30 00 C2 
              96 95 9F 89 
              4B A3 8F 3F 
              15 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              14 31 00 C2 
              99 95 8A 46 
              49 72 73 76 
              A3 8F 46 49 
              72 73 76 80 
              1A 32 00 C2 
              A2 95 3F 09 
              34 36 32 31 
              30 34 39 37 
              33 0D A3 8F 
              5B 62 72 66 
              4D 80 13 33 
              00 C2 94 42 
              51 53 78 6B 
              5C 8F 42 51 
              53 78 6B 5C 
              80 14 34 00 
              C2 99 95 8A 
              5B 56 6B 54 
              5A A3 8F 5B 
              56 6B 54 5A 
              80 1A 35 00 
              C2 A2 95 3F 
              09 37 31 38 
              39 31 30 34 
              36 30 0D A3 
              8F 6A 76 5B 
              4F 7C 80 11 
              36 00 C2 98 
              95 3F 04 4E 
              6B 4D 67 0D 
              A3 8F 44 80 
              12 37 00 C2 
              9D 95 3F 04 
              6E 45 4A 77 
              0D A3 8F 41 
              6E 80 0F 38 
              00 C2 9A 95 
              62 54 75 47 
              6A A3 8F 41 
              80 12 39 00 
              C2 8A 59 47 
              44 68 7D 8F 
              8A 59 47 44 
              68 7D 80 14 
              3A 00 C2 98 
              95 3F 07 57 
              43 65 7A 70 
              51 75 0D A3 
              8F 47 80 10 
              3B 00 C2 9C 
              96 95 41 51 
              A3 8F 3F 01 
              51 0D 80 1B 
              3C 00 C2 9B 
              96 95 4A 44 
              4B 54 4A A3 
              8F 3F 09 31 
              36 38 38 36 
              37 30 38 32 
              0D 80 14 3D 
              00 C2 99 95 
              8A 6B 48 5C 
              41 4A A3 8F 
              6B 48 5C 41 
              4A 80 14 3E 
              00 C2 9E 95 
              41 5D 4B 4A 
              4B A3 8F 43 
              7E 62 74 75 
              74 80 1E 3F 
              00 C2 A2 95 
              3F 0B 2D 31 
              34 37 32 33 
              36 30 30 39 
              37 0D A3 8F 
              8A 41 57 70 
              66 7A 61 80 
              15 40 00 C2 
              9E 95 42 6E 
              67 73 73 6E 
              A3 8F 41 51 
              58 4C 4C 51 
              80 12 41 00 
              C2 8A 8A 6A 
              45 7A 58 64 
              8F 6A 45 7A 
              58 64 80 0F 
              42 00 C2 9A 
              95 69 53 4C 
              7E 54 A3 8F 
              41 80 0E 43 
              00 C2 84 95 
              9F 89 52 A3 
              8F 41 4D 80 
              13 44 00 C2 
              9D 95 3F 05 
              66 56 53 68 
              65 0D A3 8F 
              41 66 80 11 
              45 00 C2 94 
              6B 4C 4A 62 
              58 8F 6B 4C 
              4A 62 58 80 
              1F 46 00 C2 
              9B 96 95 8A 
              41 5B 55 55 
              46 45 A3 8F 
              3F 0B 2D 31 
              35 33 32 33 
              31 38 30 38 
              35 0D 80 1E 
              47 00 C2 A2 
              95 3F 0B 2D 
              31 33 34 34 
              31 34 34 32 
              38 30 0D A3 
              8F 8A 41 50 
              47 60 4E 58 
              80 12 48 00 
              C2 9A 95 8A 
              41 7D 6B 76 
              68 4B A3 8F 
              8A 41 80 13 
              49 00 C2 99 
              95 6A 7A 4F 
              68 51 A3 8F 
              6A 7A 4F 68 
              51 80 10 4A 
              00 C2 9A 95 
              41 5C 79 44 
              5A 7C A3 8F 
              41 80 14 4B 
              00 C2 9E 95 
              43 45 42 57 
              73 66 A3 8F 
              7A 7D 68 4C 
              59 80 13 4C 
              00 C2 94 43 
              47 40 69 6B 
              5A 8F 43 47 
              40 69 6B 5A 
              80 13 4D 00 
              C2 83 95 9F 
              89 49 A3 8F 
              94 41 47 51 
              64 55 44 80 
              15 4E 00 C2 
              9E 95 42 56 
              6F 7D 4D 78 
              A3 8F 41 69 
              50 42 72 47 
              80 25 4F 00 
              C2 96 95 9F 
              89 4A A3 8F 
              3F 16 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 13 50 
              00 C2 83 95 
              9F 89 4C A3 
              8F 94 41 4A 
              52 54 61 47 
              80 1A 51 00 
              C2 A2 95 3F 
              09 39 30 39 
              32 33 38 36 
              31 32 0D A3 
              8F 76 4C 5E 
              45 54 80 1C 
              52 00 C2 A2 
              95 3F 0A 31 
              32 39 39 39 
              32 31 34 35 
              33 0D A3 8F 
              41 4D 5E 73 
              68 6D 80 12 
              53 00 C2 8A 
              8A 43 4A 57 
              5A 65 8F 43 
              4A 57 5A 65 
              80 0E 54 00 
              C2 84 95 9F 
              89 52 A3 8F 
              41 4D 80 12 
              55 00 C2 8A 
              6B 75 40 4B 
              7B 8F 8A 6B 
              75 40 4B 7B 
              80 1E 56 00 
              C2 96 95 9F 
              89 51 A3 8F 
              3F 0F 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 13 
              57 00 C2 94 
              42 54 75 43 
              7D 62 8F 42 
              54 75 43 7D 
              62 80 0D 58 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 13 
              59 00 C2 9D 
              95 3F 05 62 
              53 43 45 45 
              0D A3 8F 41 
              62 80 12 5A 
              00 C2 8A 58 
              45 67 51 7F 
              8F 8A 58 45 
              67 51 7F 80 
              13 5B 00 C2 
              9D 95 3F 05 
              4A 77 54 5A 
              78 0D A3 8F 
              41 4A 80 1C 
              5C 00 C2 A2 
              95 3F 0A 2D 
              32 33 34 38 
              30 32 38 39 
              30 0D A3 8F 
              8A 4D 7F 6C 
              7B 4A 80 1D 
              5D 00 C2 9B 
              96 95 8A 5F 
              75 76 4E 5B 
              A3 8F 3F 0A 
              2D 35 33 34 
              32 30 39 34 
              33 35 0D 80 
              11 5E 00 C2 
              9A 95 8A 71 
              78 73 43 7F 
              A3 8F 8A 41 
              80 1A 5F 00 
              C2 A2 95 3F 
              09 35 35 30 
              30 32 36 32 
              35 39 0D A3 
              8F 60 72 4B 
              70 53 80 0E 
              60 00 C2 84 
              95 9F 89 52 
              A3 8F 41 4D 
              80 0F 61 00 
              C2 98 95 3F 
              02 57 72 0D 
              A3 8F 42 80 
              15 62 00 C2 
              9E 95 42 67 
              74 4B 77 5C 
              A3 8F 41 58 
              4B 74 48 63 
              80 10 63 00 
              C2 9A 95 41 
              47 5B 56 5D 
              50 A3 8F 41 
              80 13 64 00 
              C2 94 42 52 
              67 5F 4F 5A 
              8F 42 52 67 
              5F 4F 5A 80 
              0E 65 00 C2 
              84 95 9F 89 
              4E A3 8F 41 
              49 80 1B 66 
              00 C2 96 95 
              9F 89 54 A3 
              8F 3F 0C 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 13 67 00 
              C2 83 95 9F 
              89 4C A3 8F 
              94 41 4A 52 
              54 61 47 80 
              14 68 00 C2 
              9E 95 78 6D 
              42 51 75 A3 
              8F 43 47 52 
              7D 6E 4A 80 
              14 69 00 C2 
              9E 95 63 68 
              41 61 4B A3 
              8F 43 5C 57 
              7E 5E 74 80 
              12 6A 00 C2 
              98 95 3F 05 
              49 75 62 61 
              41 0D A3 8F 
              45 80 11 6B 
              00 C2 9A 95 
              8A 46 4B 4D 
              54 5E A3 8F 
              8A 41 80 15 
              6C 00 C2 9E 
              95 41 51 50 
              62 6B 67 A3 
              8F 42 6E 6F 
              5D 54 58 80 
              1F 6D 00 C2 
              9B 96 95 8A 
              41 4E 6F 4E 
              68 40 A3 8F 
              3F 0B 2D 31 
              33 32 31 30 
              30 33 35 32 
              30 0D 80 10 
              6E 00 C2 9C 
              96 95 41 56 
              A3 8F 3F 01 
              56 0D 80 15 
              6F 00 C2 9E 
              95 41 57 5C 
              5A 64 7A A3 
              8F 42 68 63 
              65 5B 45 80 
              13 70 00 C2 
              94 42 54 6C 
              41 7C 66 8F 
              42 54 6C 41 
              7C 66 80 16 
              71 00 C2 9D 
              95 3F 08 55 
              48 42 56 77 
              56 48 4D 0D 
              A3 8F 41 55 
              80 10 72 00 
              C2 9C 96 95 
              41 4D A3 8F 
              3F 01 4D 0D 
              80 13 73 00 
              C2 94 42 6F 
              42 41 4F 68 
              8F 42 6F 42 
              41 4F 68 80 
              15 74 00 C2 
              9E 95 42 5D 
              4D 59 74 40 
              A3 8F 41 62 
              72 66 4B 7F 
              80 15 75 00 
              C2 99 95 41 
              46 72 40 4A 
              70 A3 8F 41 
              46 72 40 4A 
              70 80 12 76 
              00 C2 8A 8A 
              43 5F 5B 46 
              4E 8F 43 5F 
              5B 46 4E 80 
              13 77 00 C2 
              83 95 9F 89 
              4B A3 8F 94 
              41 49 52 44 
              5D 46 80 11 
              78 00 C2 98 
              95 3F 04 6F 
              78 4E 7A 0D 
              A3 8F 44 80 
              13 79 00 C2 
              94 42 71 7B 
              76 6B 4E 8F 
              42 71 7B 76 
              6B 4E 80 0E 
              7A 00 C2 84 
              95 9F 89 4F 
              A3 8F 41 4A 
              80 14 7B 00 
              C2 9E 95 43 
              53 75 44 40 
              77 A3 8F 6C 
              4A 7B 7F 48 
              80 14 7C 00 
              C2 9E 95 43 
              7B 72 77 6C 
              7A A3 8F 44 
              4D 48 53 45 
              80 1C 7D 00 
              C2 A2 95 3F 
              0A 2D 35 38 
              31 38 30 36 
              30 36 37 0D 
              A3 8F 8A 62 
              6B 5A 5F 73 
              80 13 7E 00 
              C2 94 42 52 
              49 67 53 73 
              8F 42 52 49 
              67 53 73 80 
              25 7F 00 C2 
              96 95 9F 89 
              4A A3 8F 3F 
              16 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 15 80 00 
              C2 98 95 3F 
              08 4C 53 4B 
              57 6D 78 43 
              56 0D A3 8F 
              48 80 0F 81 
              00 C2 98 95 
              3F 02 65 45 
              0D A3 8F 42 
              80 1B 82 00 
              C2 9B 96 95 
              54 54 50 69 
              54 A3 8F 3F 
              09 33 34 30 
              38 35 35 33 
              38 30 0D 80 
              0F 83 00 C2 
              9D 95 3F 01 
              54 0D A3 8F 
              41 54 80 1E 
              84 00 C2 A2 
              95 3F 0B 2D 
              31 37 30 31 
              38 37 34 37 
              32 33 0D A3 
              8F 8A 41 65 
              5C 48 70 63 
              80 13 85 00 
              C2 83 95 9F 
              89 53 A3 8F 
              94 41 51 54 
              44 7D 4E 80 
              13 86 00 C2 
              83 95 9F 89 
              4E A3 8F 94 
              41 4C 52 74 
              69 49 80 1C 
              87 00 C2 A2 
              95 3F 0A 2D 
              31 32 37 36 
              31 35 38 36 
              30 0D A3 8F 
              8A 47 66 74 
              4D 74 80 15 
              88 00 C2 9D 
              95 3F 07 68 
              58 6C 70 77 
              53 77 0D A3 
              8F 41 68 80 
              16 89 00 C2 
              99 95 8A 41 
              76 64 79 5A 
              5B A3 8F 41 
              76 64 79 5A 
              5B 80 1D 8A 
              00 C2 9B 96 
              95 41 48 52 
              44 76 4B A3 
              8F 3F 0A 31 
              32 31 32 36 
              39 37 39 39 
              35 0D 80 10 
              8B 00 C2 9C 
              96 95 41 57 
              A3 8F 3F 01 
              57 0D 80 1E 
              8C 00 C2 A2 
              95 3F 0B 2D 
              31 36 32 35 
              32 30 33 37 
              34 30 0D A3 
              8F 8A 41 60 
              77 6A 50 5C 
              80 0E 8D 00 
              C2 84 95 9F 
              89 4E A3 8F 
              41 49 80 1E 
              8E 00 C2 A2 
              95 3F 0B 2D 
              31 32 39 30 
              32 32 35 35 
              38 38 0D A3 
              8F 8A 41 4C 
              79 74 5E 74 
              80 1A 8F 00 
              C2 A2 95 3F 
              09 37 38 33 
              38 37 31 38 
              36 35 0D A3 
              8F 6E 6E 4E 
              7D 79 80 1D 
              90 00 C2 9B 
              96 95 41 4C 
              6B 4E 6F 55 
              A3 8F 3F 0A 
              31 32 38 36 
              34 30 30 39 
              38 31 0D 80 
              12 91 00 C2 
              8A 8A 4D 53 
              61 5C 43 8F 
              4D 53 61 5C 
              43 80 15 92 
              00 C2 99 95 
              41 4D 4F 7B 
              7A 4A A3 8F 
              41 4D 4F 7B 
              7A 4A 80 13 
              93 00 C2 83 
              95 9F 89 4E 
              A3 8F 94 41 
              4C 52 74 69 
              49 80 0D 94 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 16 
              95 00 C2 99 
              95 8A 41 45 
              48 69 75 7F 
              A3 8F 41 45 
              48 69 75 7F 
              80 10 96 00 
              C2 9C 96 95 
              41 4E A3 8F 
              3F 01 4E 0D 
              80 24 97 00 
              C2 96 95 9F 
              89 4B A3 8F 
              3F 15 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 13 98 00 
              C2 83 95 9F 
              89 48 A3 8F 
              94 41 46 51 
              54 51 43 80 
              1B 99 00 C2 
              9B 96 95 77 
              77 51 6A 79 
              A3 8F 3F 09 
              39 33 37 32 
              33 37 31 37 
              37 0D 80 13 
              9A 00 C2 98 
              95 3F 06 63 
              62 66 63 54 
              66 0D A3 8F 
              46 80 15 9B 
              00 C2 9D 95 
              3F 07 49 58 
              62 42 71 6B 
              69 0D A3 8F 
              41 49 80 0E 
              9C 00 C2 84 
              95 9F 89 54 
              A3 8F 41 4F 
              80 0E 9D 00 
              C2 84 95 9F 
              89 53 A3 8F 
              41 4E 80 1D 
              9E 00 C2 9B 
              96 95 41 7A 
              57 5E 67 49 
              A3 8F 3F 0A 
              32 30 35 32 
              39 37 35 30 
              34 39 0D 80 
              1F 9F 00 C2 
              9B 96 95 8A 
              41 7E 66 58 
              63 44 A3 8F 
              3F 0B 2D 32 
              31 32 33 39 
              39 31 32 33 
              36 0D 80 13 
              A0 00 C2 94 
              42 42 57 71 
              6D 79 8F 42 
              42 57 71 6D 
              79 80 13 A1 
              00 C2 9D 95 
              3F 05 72 66 
              65 65 62 0D 
              A3 8F 41 72 
              80 15 A2 00 
              C2 9D 95 3F 
              07 4A 56 4A 
              57 78 55 59 
              0D A3 8F 41 
              4A 80 11 A3 
              00 C2 9A 95 
              8A 4D 6A 57 
              6A 7C A3 8F 
              8A 41 80 10 
              A4 00 C2 9A 
              95 41 58 79 
              7F 72 68 A3 
              8F 41 80 23 
              A5 00 C2 96 
              95 9F 89 4C 
              A3 8F 3F 14 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 11 A6 
              00 C2 94 58 
              48 64 68 7F 
              8F 58 48 64 
              68 7F 80 1F 
              A7 00 C2 9B 
              96 95 8A 41 
              41 67 63 4B 
              60 A3 8F 3F 
              0B 2D 31 31 
              30 30 38 38 
              36 37 35 32 
              0D 80 16 A8 
              00 C2 99 95 
              8A 41 7C 49 
              79 74 5C A3 
              8F 41 7C 49 
              79 74 5C 80 
              1A A9 00 C2 
              9B 96 95 43 
              75 7F 5A 4F 
              A3 8F 3F 08 
              36 34 34 38 
              35 30 30 37 
              0D 80 16 AA 
              00 C2 99 95 
              8A 41 7B 5F 
              74 5E 64 A3 
              8F 41 7B 5F 
              74 5E 64 80 
              15 AB 00 C2 
              9E 95 41 47 
              5D 66 51 5C 
              A3 8F 42 78 
              62 59 6E 63 
              80 14 AC 00 
              C2 8A 41 5C 
              4F 61 6B 75 
              8F 8A 41 5C 
              4F 61 6B 75 
              80 10 AD 00 
              C2 9C 96 95 
              41 50 A3 8F 
              3F 01 50 0D 
              80 14 AE 00 
              C2 9E 95 43 
              44 50 4C 56 
              60 A3 8F 7B 
              6F 73 69 5F 
              80 0E AF 00 
              C2 84 95 9F 
              89 52 A3 8F 
              41 4D 80 1E 
              B0 00 C2 A2 
              95 3F 0B 2D 
              31 37 35 31 
              32 36 39 37 
              32 37 0D A3 
              8F 8A 41 68 
              58 64 45 5F 
              80 1E B1 00 
              C2 A2 95 3F 
              0B 2D 31 39 
              36 36 38 37 
              33 31 38 31 
              0D A3 8F 8A 
              41 75 4F 41 
              69 5D 80 14 
              B2 00 C2 9E 
              95 43 62 54 
              50 45 51 A3 
              8F 5D 6B 6F 
              7A 6E 80 12 
              B3 00 C2 8A 
              8A 6E 78 67 
              6F 47 8F 6E 
              78 67 6F 47 
              80 1B B4 00 
              C2 A2 95 3F 
              09 2D 32 38 
              30 35 36 34 
              33 39 0D A3 
              8F 8A 41 6B 
              41 6D 77 80 
              12 B5 00 C2 
              9A 95 8A 41 
              6A 68 57 78 
              46 A3 8F 8A 
              41 80 13 B6 
              00 C2 83 95 
              9F 89 48 A3 
              8F 94 41 46 
              51 54 51 43 
              80 1D B7 00 
              C2 9B 96 95 
              41 6B 67 50 
              79 63 A3 8F 
              3F 0A 31 38 
              30 35 34 35 
              34 39 34 37 
              0D 80 10 B8 
              00 C2 9C 96 
              95 41 5A A3 
              8F 3F 01 5A 
              0D 80 1D B9 
              00 C2 96 95 
              9F 89 52 A3 
              8F 3F 0E 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 13 
              BA 00 C2 83 
              95 9F 89 50 
              A3 8F 94 41 
              4E 53 54 71 
              4B 80 10 BB 
              00 C2 9C 96 
              95 41 58 A3 
              8F 3F 01 58 
              0D 80 15 BC 
              00 C2 98 95 
              3F 08 45 70 
              50 43 45 44 
              75 59 0D A3 
              8F 48 80 0E 
              BD 00 C2 84 
              95 9F 89 47 
              A3 8F 41 42 
              80 1A BE 00 
              C2 9B 96 95 
              45 55 4C 64 
              6B A3 8F 3F 
              08 38 39 34 
              34 32 36 30 
              33 0D 80 1A 
              BF 00 C2 A2 
              95 3F 09 35 
              37 35 38 36 
              30 37 36 33 
              0D A3 8F 62 
              54 6F 40 5B 
              80 14 C0 00 
              C2 9E 95 51 
              52 58 68 54 
              A3 8F 43 6E 
              6D 67 57 6B 
              80 13 C1 00 
              C2 99 95 7A 
              56 7C 53 5D 
              A3 8F 7A 56 
              7C 53 5D 80 
              1C C2 00 C2 
              A2 95 3F 0A 
              2D 37 39 34 
              30 39 35 32 
              39 38 0D A3 
              8F 8A 6F 55 
              4E 7B 42 80 
              14 C3 00 C2 
              9E 95 57 40 
              44 63 60 A3 
              8F 43 68 7F 
              7B 5C 5F 80 
              13 C4 00 C2 
              94 43 40 55 
              5D 4E 7F 8F 
              43 40 55 5D 
              4E 7F 80 11 
              C5 00 C2 94 
              47 51 7C 6D 
              7C 8F 47 51 
              7C 6D 7C 80 
              10 C6 00 C2 
              9C 96 95 41 
              59 A3 8F 3F 
              01 59 0D 80 
              10 C7 00 C2 
              9A 95 41 55 
              58 5C 53 6D 
              A3 8F 41 80 
              23 C8 00 C2 
              96 95 9F 89 
              4C A3 8F 3F 
              14 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 1F 
              C9 00 C2 9B 
              96 95 8A 41 
              4E 50 6A 5F 
              41 A3 8F 3F 
              0B 2D 31 33 
              31 32 39 39 
              31 31 36 39 
              0D 80 11 CA 
              00 C2 9A 95 
              8A 76 65 52 
              79 7C A3 8F 
              8A 41 80 00 	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$39,$30,$37,$32,$32,$0d,$80,$10,$03,$00,$c2,$9c,$96,$95,$41,$51,$a3,$8f,$3f,$01,$51,$0d,$80,$13,$04,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$22,$05,$00,$c2,$96,$95,$9f,$89,$4d,$a3,$8f,$3f,$13,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$06,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$10,$07,$00,$c2,$9d,$95,$3f,$02,$50,$6c,$0d,$a3,$8f,$41,$50,$80,$22,$08,$00,$c2,$96,$95,$9f,$89,$4d,$a3,$8f,$3f,$13,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$09,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$12,$0a,$00,$c2,$8a,$47,$42,$42,$7b,$70,$8f,$8a,$47,$42,$42,$7b,$70,$80,$12,$0b,$00,$c2,$8a,$6d,$6a,$69,$6d,$45,$8f,$8a,$6d,$6a,$69,$6d,$45,$80,$1c,$0c,$00,$c2,$a2,$95,$3f,$0a,$2d,$31,$30,$35,$37,$34,$32,$39,$33,$37,$0d,$a3,$8f,$8a,$46,$53,$58,$49,$59,$80,$1e,$0d,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$34,$31,$33,$32,$38,$36,$38,$37,$35,$0d,$a3,$8f,$8a,$41,$54,$4f,$50,$6f,$5b,$80,$14,$0e,$00,$c2,$8a,$8a,$41,$57,$55,$71,$62,$5e,$8f,$41,$57,$55,$71,$62,$5e,$80,$10,$0f,$00,$c2,$98,$95,$3f,$03,$4f,$73,$6e,$0d,$a3,$8f,$43,$80,$0f,$10,$00,$c2,$9d,$95,$3f,$01,$50,$0d,$a3,$8f,$41,$50,$80,$10,$11,$00,$c2,$98,$95,$3f,$03,$66,$5a,$56,$0d,$a3,$8f,$43,$80,$13,$12,$00,$c2,$83,$95,$9f,$89,$49,$a3,$8f,$94,$41,$47,$51,$64,$55,$44,$80,$12,$13,$00,$c2,$8a,$5f,$7e,$71,$64,$43,$8f,$8a,$5f,$7e,$71,$64,$43,$80,$12,$14,$00,$c2,$8a,$8a,$79,$76,$62,$53,$7c,$8f,$79,$76,$62,$53,$7c,$80,$11,$15,$00,$c2,$99,$95,$5f,$4d,$4f,$72,$a3,$8f,$5f,$4d,$4f,$72,$80,$1e,$16,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$32,$30,$35,$36,$32,$32,$34,$37,$38,$0d,$a3,$8f,$8a,$41,$47,$77,$45,$5b,$4e,$80,$13,$17,$00,$c2,$94,$41,$5c,$77,$72,$62,$47,$8f,$41,$5c,$77,$72,$62,$47,$80,$15,$18,$00,$c2,$99,$95,$41,$6e,$6d,$52,$55,$66,$a3,$8f,$41,$6e,$6d,$52,$55,$66,$80,$1b,$19,$00,$c2,$a2,$95,$3f,$09,$2d,$37,$37,$33,$30,$31,$32,$32,$35,$0d,$a3,$8f,$8a,$44,$66,$78,$57,$69,$80,$13,$1a,$00,$c2,$83,$95,$9f,$89,$4d,$a3,$8f,$94,$41,$4b,$52,$64,$65,$48,$80,$1d,$1b,$00,$c2,$9b,$96,$95,$8a,$46,$7c,$66,$6d,$62,$a3,$8f,$3f,$0a,$2d,$31,$31,$36,$35,$35,$30,$34,$39,$38,$0d,$80,$15,$1c,$00,$c2,$98,$95,$3f,$08,$4e,$52,$70,$53,$6a,$64,$55,$46,$0d,$a3,$8f,$48,$80,$1c,$1d,$00,$c2,$a2,$95,$3f,$0a,$31,$31,$37,$33,$32,$38,$36,$35,$36,$36,$0d,$a3,$8f,$41,$45,$7b,$6e,$7a,$66,$80,$14,$1e,$00,$c2,$9d,$95,$3f,$06,$44,$71,$51,$6b,$4e,$4b,$0d,$a3,$8f,$41,$44,$80,$10,$1f,$00,$c2,$8a,$8a,$73,$4a,$47,$75,$8f,$73,$4a,$47,$75,$80,$10,$20,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$11,$21,$00,$c2,$9a,$95,$8a,$75,$76,$4c,$64,$62,$a3,$8f,$8a,$41,$80,$0d,$22,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$12,$23,$00,$c2,$8a,$67,$48,$54,$73,$4d,$8f,$8a,$67,$48,$54,$73,$4d,$80,$1d,$24,$00,$c2,$9b,$96,$95,$8a,$57,$44,$5b,$53,$65,$a3,$8f,$3f,$0a,$2d,$33,$38,$37,$30,$33,$36,$33,$38,$39,$0d,$80,$0e,$25,$00,$c2,$98,$95,$3f,$01,$6c,$0d,$a3,$8f,$41,$80,$13,$26,$00,$c2,$94,$43,$66,$6e,$79,$65,$6d,$8f,$43,$66,$6e,$79,$65,$6d,$80,$13,$27,$00,$c2,$94,$41,$4f,$44,$54,$4c,$6a,$8f,$41,$4f,$44,$54,$4c,$6a,$80,$14,$28,$00,$c2,$8a,$41,$58,$4d,$68,$54,$7a,$8f,$8a,$41,$58,$4d,$68,$54,$7a,$80,$13,$29,$00,$c2,$94,$43,$4a,$7b,$6f,$4f,$44,$8f,$43,$4a,$7b,$6f,$4f,$44,$80,$10,$2a,$00,$c2,$9c,$96,$95,$41,$55,$a3,$8f,$3f,$01,$55,$0d,$80,$10,$2b,$00,$c2,$9c,$96,$95,$41,$45,$a3,$8f,$3f,$01,$45,$0d,$80,$14,$2c,$00,$c2,$8a,$8a,$41,$72,$4c,$57,$40,$77,$8f,$41,$72,$4c,$57,$40,$77,$80,$0d,$2d,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$14,$2e,$00,$c2,$8a,$41,$66,$45,$5b,$62,$79,$8f,$8a,$41,$66,$45,$5b,$62,$79,$80,$10,$2f,$00,$c2,$9a,$95,$41,$7d,$55,$79,$41,$7b,$a3,$8f,$41,$80,$24,$30,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$31,$00,$c2,$99,$95,$8a,$46,$49,$72,$73,$76,$a3,$8f,$46,$49,$72,$73,$76,$80,$1a,$32,$00,$c2,$a2,$95,$3f,$09,$34,$36,$32,$31,$30,$34,$39,$37,$33,$0d,$a3,$8f,$5b,$62,$72,$66,$4d,$80,$13,$33,$00,$c2,$94,$42,$51,$53,$78,$6b,$5c,$8f,$42,$51,$53,$78,$6b,$5c,$80,$14,$34,$00,$c2,$99,$95,$8a,$5b,$56,$6b,$54,$5a,$a3,$8f,$5b,$56,$6b,$54,$5a,$80,$1a,$35,$00,$c2,$a2,$95,$3f,$09,$37,$31,$38,$39,$31,$30,$34,$36,$30,$0d,$a3,$8f,$6a,$76,$5b,$4f,$7c,$80,$11,$36,$00,$c2,$98,$95,$3f,$04,$4e,$6b,$4d,$67,$0d,$a3,$8f,$44,$80,$12,$37,$00,$c2,$9d,$95,$3f,$04,$6e,$45,$4a,$77,$0d,$a3,$8f,$41,$6e,$80,$0f,$38,$00,$c2,$9a,$95,$62,$54,$75,$47,$6a,$a3,$8f,$41,$80,$12,$39,$00,$c2,$8a,$59,$47,$44,$68,$7d,$8f,$8a,$59,$47,$44,$68,$7d,$80,$14,$3a,$00,$c2,$98,$95,$3f,$07,$57,$43,$65,$7a,$70,$51,$75,$0d,$a3,$8f,$47,$80,$10,$3b,$00,$c2,$9c,$96,$95,$41,$51,$a3,$8f,$3f,$01,$51,$0d,$80,$1b,$3c,$00,$c2,$9b,$96,$95,$4a,$44,$4b,$54,$4a,$a3,$8f,$3f,$09,$31,$36,$38,$38,$36,$37,$30,$38,$32,$0d,$80,$14,$3d,$00,$c2,$99,$95,$8a,$6b,$48,$5c,$41,$4a,$a3,$8f,$6b,$48,$5c,$41,$4a,$80,$14,$3e,$00,$c2,$9e,$95,$41,$5d,$4b,$4a,$4b,$a3,$8f,$43,$7e,$62,$74,$75,$74,$80,$1e,$3f,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$34,$37,$32,$33,$36,$30,$30,$39,$37,$0d,$a3,$8f,$8a,$41,$57,$70,$66,$7a,$61,$80,$15,$40,$00,$c2,$9e,$95,$42,$6e,$67,$73,$73,$6e,$a3,$8f,$41,$51,$58,$4c,$4c,$51,$80,$12,$41,$00,$c2,$8a,$8a,$6a,$45,$7a,$58,$64,$8f,$6a,$45,$7a,$58,$64,$80,$0f,$42,$00,$c2,$9a,$95,$69,$53,$4c,$7e,$54,$a3,$8f,$41,$80,$0e,$43,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$13,$44,$00,$c2,$9d,$95,$3f,$05,$66,$56,$53,$68,$65,$0d,$a3,$8f,$41,$66,$80,$11,$45,$00,$c2,$94,$6b,$4c,$4a,$62,$58,$8f,$6b,$4c,$4a,$62,$58,$80,$1f,$46,$00,$c2,$9b,$96,$95,$8a,$41,$5b,$55,$55,$46,$45,$a3,$8f,$3f,$0b,$2d,$31,$35,$33,$32,$33,$31,$38,$30,$38,$35,$0d,$80,$1e,$47,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$33,$34,$34,$31,$34,$34,$32,$38,$30,$0d,$a3,$8f,$8a,$41,$50,$47,$60,$4e,$58,$80,$12,$48,$00,$c2,$9a,$95,$8a,$41,$7d,$6b,$76,$68,$4b,$a3,$8f,$8a,$41,$80,$13,$49,$00,$c2,$99,$95,$6a,$7a,$4f,$68,$51,$a3,$8f,$6a,$7a,$4f,$68,$51,$80,$10,$4a,$00,$c2,$9a,$95,$41,$5c,$79,$44,$5a,$7c,$a3,$8f,$41,$80,$14,$4b,$00,$c2,$9e,$95,$43,$45,$42,$57,$73,$66,$a3,$8f,$7a,$7d,$68,$4c,$59,$80,$13,$4c,$00,$c2,$94,$43,$47,$40,$69,$6b,$5a,$8f,$43,$47,$40,$69,$6b,$5a,$80,$13,$4d,$00,$c2,$83,$95,$9f,$89,$49,$a3,$8f,$94,$41,$47,$51,$64,$55,$44,$80,$15,$4e,$00,$c2,$9e,$95,$42,$56,$6f,$7d,$4d,$78,$a3,$8f,$41,$69,$50,$42,$72,$47,$80,$25,$4f,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$50,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$1a,$51,$00,$c2,$a2,$95,$3f,$09,$39,$30,$39,$32,$33,$38,$36,$31,$32,$0d,$a3,$8f,$76,$4c,$5e,$45,$54,$80,$1c,$52,$00,$c2,$a2,$95,$3f,$0a,$31,$32,$39,$39,$39,$32,$31,$34,$35,$33,$0d,$a3,$8f,$41,$4d,$5e,$73,$68,$6d,$80,$12,$53,$00,$c2,$8a,$8a,$43,$4a,$57,$5a,$65,$8f,$43,$4a,$57,$5a,$65,$80,$0e,$54,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$12,$55,$00,$c2,$8a,$6b,$75,$40,$4b,$7b,$8f,$8a,$6b,$75,$40,$4b,$7b,$80,$1e,$56,$00,$c2,$96,$95,$9f,$89,$51,$a3,$8f,$3f,$0f,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$57,$00,$c2,$94,$42,$54,$75,$43,$7d,$62,$8f,$42,$54,$75,$43,$7d,$62,$80,$0d,$58,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$13,$59,$00,$c2,$9d,$95,$3f,$05,$62,$53,$43,$45,$45,$0d,$a3,$8f,$41,$62,$80,$12,$5a,$00,$c2,$8a,$58,$45,$67,$51,$7f,$8f,$8a,$58,$45,$67,$51,$7f,$80,$13,$5b,$00,$c2,$9d,$95,$3f,$05,$4a,$77,$54,$5a,$78,$0d,$a3,$8f,$41,$4a,$80,$1c,$5c,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$33,$34,$38,$30,$32,$38,$39,$30,$0d,$a3,$8f,$8a,$4d,$7f,$6c,$7b,$4a,$80,$1d,$5d,$00,$c2,$9b,$96,$95,$8a,$5f,$75,$76,$4e,$5b,$a3,$8f,$3f,$0a,$2d,$35,$33,$34,$32,$30,$39,$34,$33,$35,$0d,$80,$11,$5e,$00,$c2,$9a,$95,$8a,$71,$78,$73,$43,$7f,$a3,$8f,$8a,$41,$80,$1a,$5f,$00,$c2,$a2,$95,$3f,$09,$35,$35,$30,$30,$32,$36,$32,$35,$39,$0d,$a3,$8f,$60,$72,$4b,$70,$53,$80,$0e,$60,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$0f,$61,$00,$c2,$98,$95,$3f,$02,$57,$72,$0d,$a3,$8f,$42,$80,$15,$62,$00,$c2,$9e,$95,$42,$67,$74,$4b,$77,$5c,$a3,$8f,$41,$58,$4b,$74,$48,$63,$80,$10,$63,$00,$c2,$9a,$95,$41,$47,$5b,$56,$5d,$50,$a3,$8f,$41,$80,$13,$64,$00,$c2,$94,$42,$52,$67,$5f,$4f,$5a,$8f,$42,$52,$67,$5f,$4f,$5a,$80,$0e,$65,$00,$c2,$84,$95,$9f,$89,$4e,$a3,$8f,$41,$49,$80,$1b,$66,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$67,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$14,$68,$00,$c2,$9e,$95,$78,$6d,$42,$51,$75,$a3,$8f,$43,$47,$52,$7d,$6e,$4a,$80,$14,$69,$00,$c2,$9e,$95,$63,$68,$41,$61,$4b,$a3,$8f,$43,$5c,$57,$7e,$5e,$74,$80,$12,$6a,$00,$c2,$98,$95,$3f,$05,$49,$75,$62,$61,$41,$0d,$a3,$8f,$45,$80,$11,$6b,$00,$c2,$9a,$95,$8a,$46,$4b,$4d,$54,$5e,$a3,$8f,$8a,$41,$80,$15,$6c,$00,$c2,$9e,$95,$41,$51,$50,$62,$6b,$67,$a3,$8f,$42,$6e,$6f,$5d,$54,$58,$80,$1f,$6d,$00,$c2,$9b,$96,$95,$8a,$41,$4e,$6f,$4e,$68,$40,$a3,$8f,$3f,$0b,$2d,$31,$33,$32,$31,$30,$30,$33,$35,$32,$30,$0d,$80,$10,$6e,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$15,$6f,$00,$c2,$9e,$95,$41,$57,$5c,$5a,$64,$7a,$a3,$8f,$42,$68,$63,$65,$5b,$45,$80,$13,$70,$00,$c2,$94,$42,$54,$6c,$41,$7c,$66,$8f,$42,$54,$6c,$41,$7c,$66,$80,$16,$71,$00,$c2,$9d,$95,$3f,$08,$55,$48,$42,$56,$77,$56,$48,$4d,$0d,$a3,$8f,$41,$55,$80,$10,$72,$00,$c2,$9c,$96,$95,$41,$4d,$a3,$8f,$3f,$01,$4d,$0d,$80,$13,$73,$00,$c2,$94,$42,$6f,$42,$41,$4f,$68,$8f,$42,$6f,$42,$41,$4f,$68,$80,$15,$74,$00,$c2,$9e,$95,$42,$5d,$4d,$59,$74,$40,$a3,$8f,$41,$62,$72,$66,$4b,$7f,$80,$15,$75,$00,$c2,$99,$95,$41,$46,$72,$40,$4a,$70,$a3,$8f,$41,$46,$72,$40,$4a,$70,$80,$12,$76,$00,$c2,$8a,$8a,$43,$5f,$5b,$46,$4e,$8f,$43,$5f,$5b,$46,$4e,$80,$13,$77,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$11,$78,$00,$c2,$98,$95,$3f,$04,$6f,$78,$4e,$7a,$0d,$a3,$8f,$44,$80,$13,$79,$00,$c2,$94,$42,$71,$7b,$76,$6b,$4e,$8f,$42,$71,$7b,$76,$6b,$4e,$80,$0e,$7a,$00,$c2,$84,$95,$9f,$89,$4f,$a3,$8f,$41,$4a,$80,$14,$7b,$00,$c2,$9e,$95,$43,$53,$75,$44,$40,$77,$a3,$8f,$6c,$4a,$7b,$7f,$48,$80,$14,$7c,$00,$c2,$9e,$95,$43,$7b,$72,$77,$6c,$7a,$a3,$8f,$44,$4d,$48,$53,$45,$80,$1c,$7d,$00,$c2,$a2,$95,$3f,$0a,$2d,$35,$38,$31,$38,$30,$36,$30,$36,$37,$0d,$a3,$8f,$8a,$62,$6b,$5a,$5f,$73,$80,$13,$7e,$00,$c2,$94,$42,$52,$49,$67,$53,$73,$8f,$42,$52,$49,$67,$53,$73,$80,$25,$7f,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$15,$80,$00,$c2,$98,$95,$3f,$08,$4c,$53,$4b,$57,$6d,$78,$43,$56,$0d,$a3,$8f,$48,$80,$0f,$81,$00,$c2,$98,$95,$3f,$02,$65,$45,$0d,$a3,$8f,$42,$80,$1b,$82,$00,$c2,$9b,$96,$95,$54,$54,$50,$69,$54,$a3,$8f,$3f,$09,$33,$34,$30,$38,$35,$35,$33,$38,$30,$0d,$80,$0f,$83,$00,$c2,$9d,$95,$3f,$01,$54,$0d,$a3,$8f,$41,$54,$80,$1e,$84,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$37,$30,$31,$38,$37,$34,$37,$32,$33,$0d,$a3,$8f,$8a,$41,$65,$5c,$48,$70,$63,$80,$13,$85,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$86,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$1c,$87,$00,$c2,$a2,$95,$3f,$0a,$2d,$31,$32,$37,$36,$31,$35,$38,$36,$30,$0d,$a3,$8f,$8a,$47,$66,$74,$4d,$74,$80,$15,$88,$00,$c2,$9d,$95,$3f,$07,$68,$58,$6c,$70,$77,$53,$77,$0d,$a3,$8f,$41,$68,$80,$16,$89,$00,$c2,$99,$95,$8a,$41,$76,$64,$79,$5a,$5b,$a3,$8f,$41,$76,$64,$79,$5a,$5b,$80,$1d,$8a,$00,$c2,$9b,$96,$95,$41,$48,$52,$44,$76,$4b,$a3,$8f,$3f,$0a,$31,$32,$31,$32,$36,$39,$37,$39,$39,$35,$0d,$80,$10,$8b,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$1e,$8c,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$36,$32,$35,$32,$30,$33,$37,$34,$30,$0d,$a3,$8f,$8a,$41,$60,$77,$6a,$50,$5c,$80,$0e,$8d,$00,$c2,$84,$95,$9f,$89,$4e,$a3,$8f,$41,$49,$80,$1e,$8e,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$32,$39,$30,$32,$32,$35,$35,$38,$38,$0d,$a3,$8f,$8a,$41,$4c,$79,$74,$5e,$74,$80,$1a,$8f,$00,$c2,$a2,$95,$3f,$09,$37,$38,$33,$38,$37,$31,$38,$36,$35,$0d,$a3,$8f,$6e,$6e,$4e,$7d,$79,$80,$1d,$90,$00,$c2,$9b,$96,$95,$41,$4c,$6b,$4e,$6f,$55,$a3,$8f,$3f,$0a,$31,$32,$38,$36,$34,$30,$30,$39,$38,$31,$0d,$80,$12,$91,$00,$c2,$8a,$8a,$4d,$53,$61,$5c,$43,$8f,$4d,$53,$61,$5c,$43,$80,$15,$92,$00,$c2,$99,$95,$41,$4d,$4f,$7b,$7a,$4a,$a3,$8f,$41,$4d,$4f,$7b,$7a,$4a,$80,$13,$93,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$0d,$94,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$16,$95,$00,$c2,$99,$95,$8a,$41,$45,$48,$69,$75,$7f,$a3,$8f,$41,$45,$48,$69,$75,$7f,$80,$10,$96,$00,$c2,$9c,$96,$95,$41,$4e,$a3,$8f,$3f,$01,$4e,$0d,$80,$24,$97,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$98,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$1b,$99,$00,$c2,$9b,$96,$95,$77,$77,$51,$6a,$79,$a3,$8f,$3f,$09,$39,$33,$37,$32,$33,$37,$31,$37,$37,$0d,$80,$13,$9a,$00,$c2,$98,$95,$3f,$06,$63,$62,$66,$63,$54,$66,$0d,$a3,$8f,$46,$80,$15,$9b,$00,$c2,$9d,$95,$3f,$07,$49,$58,$62,$42,$71,$6b,$69,$0d,$a3,$8f,$41,$49,$80,$0e,$9c,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$0e,$9d,$00,$c2,$84,$95,$9f,$89,$53,$a3,$8f,$41,$4e,$80,$1d,$9e,$00,$c2,$9b,$96,$95,$41,$7a,$57,$5e,$67,$49,$a3,$8f,$3f,$0a,$32,$30,$35,$32,$39,$37,$35,$30,$34,$39,$0d,$80,$1f,$9f,$00,$c2,$9b,$96,$95,$8a,$41,$7e,$66,$58,$63,$44,$a3,$8f,$3f,$0b,$2d,$32,$31,$32,$33,$39,$39,$31,$32,$33,$36,$0d,$80,$13,$a0,$00,$c2,$94,$42,$42,$57,$71,$6d,$79,$8f,$42,$42,$57,$71,$6d,$79,$80,$13,$a1,$00,$c2,$9d,$95,$3f,$05,$72,$66,$65,$65,$62,$0d,$a3,$8f,$41,$72,$80,$15,$a2,$00,$c2,$9d,$95,$3f,$07,$4a,$56,$4a,$57,$78,$55,$59,$0d,$a3,$8f,$41,$4a,$80,$11,$a3,$00,$c2,$9a,$95,$8a,$4d,$6a,$57,$6a,$7c,$a3,$8f,$8a,$41,$80,$10,$a4,$00,$c2,$9a,$95,$41,$58,$79,$7f,$72,$68,$a3,$8f,$41,$80,$23,$a5,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$11,$a6,$00,$c2,$94,$58,$48,$64,$68,$7f,$8f,$58,$48,$64,$68,$7f,$80,$1f,$a7,$00,$c2,$9b,$96,$95,$8a,$41,$41,$67,$63,$4b,$60,$a3,$8f,$3f,$0b,$2d,$31,$31,$30,$30,$38,$38,$36,$37,$35,$32,$0d,$80,$16,$a8,$00,$c2,$99,$95,$8a,$41,$7c,$49,$79,$74,$5c,$a3,$8f,$41,$7c,$49,$79,$74,$5c,$80,$1a,$a9,$00,$c2,$9b,$96,$95,$43,$75,$7f,$5a,$4f,$a3,$8f,$3f,$08,$36,$34,$34,$38,$35,$30,$30,$37,$0d,$80,$16,$aa,$00,$c2,$99,$95,$8a,$41,$7b,$5f,$74,$5e,$64,$a3,$8f,$41,$7b,$5f,$74,$5e,$64,$80,$15,$ab,$00,$c2,$9e,$95,$41,$47,$5d,$66,$51,$5c,$a3,$8f,$42,$78,$62,$59,$6e,$63,$80,$14,$ac,$00,$c2,$8a,$41,$5c,$4f,$61,$6b,$75,$8f,$8a,$41,$5c,$4f,$61,$6b,$75,$80,$10,$ad,$00,$c2,$9c,$96,$95,$41,$50,$a3,$8f,$3f,$01,$50,$0d,$80,$14,$ae,$00,$c2,$9e,$95,$43,$44,$50,$4c,$56,$60,$a3,$8f,$7b,$6f,$73,$69,$5f,$80,$0e,$af,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$1e,$b0,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$37,$35,$31,$32,$36,$39,$37,$32,$37,$0d,$a3,$8f,$8a,$41,$68,$58,$64,$45,$5f,$80,$1e,$b1,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$39,$36,$36,$38,$37,$33,$31,$38,$31,$0d,$a3,$8f,$8a,$41,$75,$4f,$41,$69,$5d,$80,$14,$b2,$00,$c2,$9e,$95,$43,$62,$54,$50,$45,$51,$a3,$8f,$5d,$6b,$6f,$7a,$6e,$80,$12,$b3,$00,$c2,$8a,$8a,$6e,$78,$67,$6f,$47,$8f,$6e,$78,$67,$6f,$47,$80,$1b,$b4,$00,$c2,$a2,$95,$3f,$09,$2d,$32,$38,$30,$35,$36,$34,$33,$39,$0d,$a3,$8f,$8a,$41,$6b,$41,$6d,$77,$80,$12,$b5,$00,$c2,$9a,$95,$8a,$41,$6a,$68,$57,$78,$46,$a3,$8f,$8a,$41,$80,$13,$b6,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$1d,$b7,$00,$c2,$9b,$96,$95,$41,$6b,$67,$50,$79,$63,$a3,$8f,$3f,$0a,$31,$38,$30,$35,$34,$35,$34,$39,$34,$37,$0d,$80,$10,$b8,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$1d,$b9,$00,$c2,$96,$95,$9f,$89,$52,$a3,$8f,$3f,$0e,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$ba,$00,$c2,$83,$95,$9f,$89,$50,$a3,$8f,$94,$41,$4e,$53,$54,$71,$4b,$80,$10,$bb,$00,$c2,$9c,$96,$95,$41,$58,$a3,$8f,$3f,$01,$58,$0d,$80,$15,$bc,$00,$c2,$98,$95,$3f,$08,$45,$70,$50,$43,$45,$44,$75,$59,$0d,$a3,$8f,$48,$80,$0e,$bd,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$1a,$be,$00,$c2,$9b,$96,$95,$45,$55,$4c,$64,$6b,$a3,$8f,$3f,$08,$38,$39,$34,$34,$32,$36,$30,$33,$0d,$80,$1a,$bf,$00,$c2,$a2,$95,$3f,$09,$35,$37,$35,$38,$36,$30,$37,$36,$33,$0d,$a3,$8f,$62,$54,$6f,$40,$5b,$80,$14,$c0,$00,$c2,$9e,$95,$51,$52,$58,$68,$54,$a3,$8f,$43,$6e,$6d,$67,$57,$6b,$80,$13,$c1,$00,$c2,$99,$95,$7a,$56,$7c,$53,$5d,$a3,$8f,$7a,$56,$7c,$53,$5d,$80,$1c,$c2,$00,$c2,$a2,$95,$3f,$0a,$2d,$37,$39,$34,$30,$39,$35,$32,$39,$38,$0d,$a3,$8f,$8a,$6f,$55,$4e,$7b,$42,$80,$14,$c3,$00,$c2,$9e,$95,$57,$40,$44,$63,$60,$a3,$8f,$43,$68,$7f,$7b,$5c,$5f,$80,$13,$c4,$00,$c2,$94,$43,$40,$55,$5d,$4e,$7f,$8f,$43,$40,$55,$5d,$4e,$7f,$80,$11,$c5,$00,$c2,$94,$47,$51,$7c,$6d,$7c,$8f,$47,$51,$7c,$6d,$7c,$80,$10,$c6,$00,$c2,$9c,$96,$95,$41,$59,$a3,$8f,$3f,$01,$59,$0d,$80,$10,$c7,$00,$c2,$9a,$95,$41,$55,$58,$5c,$53,$6d,$a3,$8f,$41,$80,$23,$c8,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1f,$c9,$00,$c2,$9b,$96,$95,$8a,$41,$4e,$50,$6a,$5f,$41,$a3,$8f,$3f,$0b,$2d,$31,$33,$31,$32,$39,$39,$31,$31,$36,$39,$0d,$80,$11,$ca,$00,$c2,$9a,$95,$8a,$76,$65,$52,$79,$7c,$a3,$8f,$8a,$41,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5CA4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6CA4 -  -  -  -  EndTestInstance:
   18 00:6CA4 -  -  -  -  		
   19 00:6CA4 -  -  -  -  ; ***************************************************************************************
   20 00:6CA4 -  -  -  -  ;
   21 00:6CA4 -  -  -  -  ;									Changes and Updates
   22 00:6CA4 -  -  -  -  ;
   23 00:6CA4 -  -  -  -  ; ***************************************************************************************
   24 00:6CA4 -  -  -  -  ;
   25 00:6CA4 -  -  -  -  ;		Date			Notes
   26 00:6CA4 -  -  -  -  ;		==== 			=====
   27 00:6CA4 -  -  -  -  ;
   28 00:6CA4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:6CA4 -  -  -  -  FinalAddress:
