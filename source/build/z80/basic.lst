    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 6C 4B -  		call 	SYSInitialise
   44 00:4006 11 00 4C -  		ld 		de,TestInstance
   45 00:4009 21 28 5C -  		ld 		hl,EndTestInstance
   46 00:400C CD 52 46 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 51 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 54 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 74 4B -  		call 	SYSPrintChar
   56 00:401C CD 72 4B -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 F5 
              41 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 F5 
              41 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  		
   59 00:4045 -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:4045 00 00 00 00 		.dw 	0,0
   61 00:4049 -  -  -  -  
   62 00:4049 -  -  -  -  ; ***************************************************************************************
   63 00:4049 -  -  -  -  ;
   64 00:4049 -  -  -  -  ;										Run variables
   65 00:4049 -  -  -  -  ;
   66 00:4049 -  -  -  -  ; ***************************************************************************************
   67 00:4049 -  -  -  -  
   68 00:4049 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  		
   71 00:404D -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:404D 00 00 00 00 		.dw 	0,0
   73 00:4051 -  -  -  -  
   74 00:4051 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:4051 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4057 -  -  -  -  
   77 00:4057 -  -  -  -  AConvert: 									; used for address conversions.
   78 00:4057 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:405D -  -  -  -  		
   80 00:405D -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:405D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:406D -  -  -  -  
   83 00:406D -  -  -  -  s; ***************************************************************************************
   84 00:406D -  -  -  -  ;
   85 00:406D -  -  -  -  ;										  Buffers
   86 00:406D -  -  -  -  ;
   87 00:406D -  -  -  -  ; ***************************************************************************************
   88 00:406D -  -  -  -  
   89 00:406D -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 00:406D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 00:407D -  -  -  -  
   92 00:407D -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 00:407D 00 00 -  -  		.dw 	0
   94 00:407F -  -  -  -  
   95 00:407F -  -  -  -  ConvertBuffer: 								; general usage
   96 00:407F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 00:40BF -  -  -  -  
   98 00:40BF -  -  -  -  ; ***************************************************************************************
   99 00:40BF -  -  -  -  ;
  100 00:40BF -  -  -  -  ;									Changes and Updates
  101 00:40BF -  -  -  -  ;
  102 00:40BF -  -  -  -  ; ***************************************************************************************
  103 00:40BF -  -  -  -  ;
  104 00:40BF -  -  -  -  ;		Date			Notes
  105 00:40BF -  -  -  -  ;		==== 			=====
  106 00:40BF -  -  -  -  ;
  107 00:40BF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40BF -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40BF -  -  -  -  ; ***************************************************************************************
    2 00:40BF -  -  -  -  ; ***************************************************************************************
    3 00:40BF -  -  -  -  ;
    4 00:40BF -  -  -  -  ;		Name : 		assert.asm
    5 00:40BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40BF -  -  -  -  ;		Reviewed :	No
    8 00:40BF -  -  -  -  ;		Purpose :	Assert command
    9 00:40BF -  -  -  -  ;
   10 00:40BF -  -  -  -  ; ***************************************************************************************
   11 00:40BF -  -  -  -  ; ***************************************************************************************
   12 00:40BF -  -  -  -  
   13 00:40BF -  -  -  -  ; ***************************************************************************************
   14 00:40BF -  -  -  -  ;
   15 00:40BF -  -  -  -  ;									ASSERT command
   16 00:40BF -  -  -  -  ;
   17 00:40BF -  -  -  -  ; ***************************************************************************************
   18 00:40BF -  -  -  -  
   19 00:40BF -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40BF CD DA 43 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40C2 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40C8 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40C9 3E 01 C3 F5 
              41 -  -  -  		ERR_ASSERT
   24 00:40CE -  -  -  -  
   25 00:40CE -  -  -  -  ; ***************************************************************************************
   26 00:40CE -  -  -  -  ;
   27 00:40CE -  -  -  -  ;									Changes and Updates
   28 00:40CE -  -  -  -  ;
   29 00:40CE -  -  -  -  ; ***************************************************************************************
   30 00:40CE -  -  -  -  ;
   31 00:40CE -  -  -  -  ;		Date			Notes
   32 00:40CE -  -  -  -  ;		==== 			=====
   33 00:40CE -  -  -  -  ;
   34 00:40CE -  -  -  -  ; ***************************************************************************************
   35 00:40CE -  -  -  -  		
Listing for file "_build.asm"
   14 00:40CE -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40CE -  -  -  -  ; ***************************************************************************************
    2 00:40CE -  -  -  -  ; ***************************************************************************************
    3 00:40CE -  -  -  -  ;
    4 00:40CE -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40CE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40CE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40CE -  -  -  -  ;		Reviewed :	No
    8 00:40CE -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40CE -  -  -  -  ;
   10 00:40CE -  -  -  -  ; ***************************************************************************************
   11 00:40CE -  -  -  -  ; ***************************************************************************************
   12 00:40CE -  -  -  -  
   13 00:40CE -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40CE -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40CE -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40CE -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40CE -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40CE -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40CE C3 52 42 -  		jp 		SyntaxError
   20 00:40D1 -  -  -  -  
   21 00:40D1 -  -  -  -  ; ***************************************************************************************
   22 00:40D1 -  -  -  -  ;
   23 00:40D1 -  -  -  -  ;									Changes and Updates
   24 00:40D1 -  -  -  -  ;
   25 00:40D1 -  -  -  -  ; ***************************************************************************************
   26 00:40D1 -  -  -  -  ;
   27 00:40D1 -  -  -  -  ;		Date			Notes
   28 00:40D1 -  -  -  -  ;		==== 			=====
   29 00:40D1 -  -  -  -  ;
   30 00:40D1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40D1 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40D1 -  -  -  -  ; ***************************************************************************************
    2 00:40D1 -  -  -  -  ; ***************************************************************************************
    3 00:40D1 -  -  -  -  ;
    4 00:40D1 -  -  -  -  ;		Name : 		colon.asm
    5 00:40D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D1 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40D1 -  -  -  -  ;		Reviewed :	No
    8 00:40D1 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40D1 -  -  -  -  ;
   10 00:40D1 -  -  -  -  ; ***************************************************************************************
   11 00:40D1 -  -  -  -  ; ***************************************************************************************
   12 00:40D1 -  -  -  -  
   13 00:40D1 -  -  -  -  ; ***************************************************************************************
   14 00:40D1 -  -  -  -  ;
   15 00:40D1 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40D1 -  -  -  -  ;
   17 00:40D1 -  -  -  -  ; ***************************************************************************************
   18 00:40D1 -  -  -  -  
   19 00:40D1 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40D1 C9 -  -  -  		ret
   21 00:40D2 -  -  -  -  
   22 00:40D2 -  -  -  -  ; ***************************************************************************************
   23 00:40D2 -  -  -  -  ;
   24 00:40D2 -  -  -  -  ;									Changes and Updates
   25 00:40D2 -  -  -  -  ;
   26 00:40D2 -  -  -  -  ; ***************************************************************************************
   27 00:40D2 -  -  -  -  ;
   28 00:40D2 -  -  -  -  ;		Date			Notes
   29 00:40D2 -  -  -  -  ;		==== 			=====
   30 00:40D2 -  -  -  -  ;
   31 00:40D2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40D2 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40D2 -  -  -  -  ; ***************************************************************************************
    2 00:40D2 -  -  -  -  ; ***************************************************************************************
    3 00:40D2 -  -  -  -  ;
    4 00:40D2 -  -  -  -  ;		Name : 		end.asm
    5 00:40D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D2 -  -  -  -  ;		Reviewed :	No
    8 00:40D2 -  -  -  -  ;		Purpose :	End command
    9 00:40D2 -  -  -  -  ;
   10 00:40D2 -  -  -  -  ; ***************************************************************************************
   11 00:40D2 -  -  -  -  ; ***************************************************************************************
   12 00:40D2 -  -  -  -  
   13 00:40D2 -  -  -  -  ; ***************************************************************************************
   14 00:40D2 -  -  -  -  ;
   15 00:40D2 -  -  -  -  ;										END command
   16 00:40D2 -  -  -  -  ;
   17 00:40D2 -  -  -  -  ; ***************************************************************************************
   18 00:40D2 -  -  -  -  
   19 00:40D2 -  -  -  -  Command_END: 	;; [end]
   20 00:40D2 3E 00 C3 F5 
              41 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40D7 -  -  -  -  
   22 00:40D7 -  -  -  -  ; ***************************************************************************************
   23 00:40D7 -  -  -  -  ;
   24 00:40D7 -  -  -  -  ;									Changes and Updates
   25 00:40D7 -  -  -  -  ;
   26 00:40D7 -  -  -  -  ; ***************************************************************************************
   27 00:40D7 -  -  -  -  ;
   28 00:40D7 -  -  -  -  ;		Date			Notes
   29 00:40D7 -  -  -  -  ;		==== 			=====
   30 00:40D7 -  -  -  -  ;
   31 00:40D7 -  -  -  -  ; ***************************************************************************************
   32 00:40D7 -  -  -  -  		
Listing for file "_build.asm"
   17 00:40D7 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40D7 -  -  -  -  ; ***************************************************************************************
    2 00:40D7 -  -  -  -  ; ***************************************************************************************
    3 00:40D7 -  -  -  -  ;
    4 00:40D7 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D7 -  -  -  -  ;		Reviewed :	None
    8 00:40D7 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40D7 -  -  -  -  ;
   10 00:40D7 -  -  -  -  ; ***************************************************************************************
   11 00:40D7 -  -  -  -  ; ***************************************************************************************
   12 00:40D7 -  -  -  -  
   13 00:40D7 -  -  -  -  ; ***************************************************************************************
   14 00:40D7 -  -  -  -  ;
   15 00:40D7 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40D7 -  -  -  -  ;
   17 00:40D7 -  -  -  -  ; ***************************************************************************************
   18 00:40D7 -  -  -  -  
   19 00:40D7 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40D7 DD 2A 49 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40DB 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40DE DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40E1 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40E3 -  -  -  -  		;
   25 00:40E3 ED 7B 4D 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40E7 C3 5F 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40EA -  -  -  -  
   28 00:40EA -  -  -  -  ; ***************************************************************************************
   29 00:40EA -  -  -  -  ;
   30 00:40EA -  -  -  -  ;									Changes and Updates
   31 00:40EA -  -  -  -  ;
   32 00:40EA -  -  -  -  ; ***************************************************************************************
   33 00:40EA -  -  -  -  ;
   34 00:40EA -  -  -  -  ;		Date			Notes
   35 00:40EA -  -  -  -  ;		==== 			=====
   36 00:40EA -  -  -  -  ;
   37 00:40EA -  -  -  -  ; ***************************************************************************************
   38 00:40EA -  -  -  -  		
Listing for file "_build.asm"
   18 00:40EA -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:40EA -  -  -  -  ; ***************************************************************************************
    2 00:40EA -  -  -  -  ; ***************************************************************************************
    3 00:40EA -  -  -  -  ;
    4 00:40EA -  -  -  -  ;		Name : 		print.asm
    5 00:40EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EA -  -  -  -  ;		Reviewed :	No
    8 00:40EA -  -  -  -  ;		Purpose :	Print command
    9 00:40EA -  -  -  -  ;
   10 00:40EA -  -  -  -  ; ***************************************************************************************
   11 00:40EA -  -  -  -  ; ***************************************************************************************
   12 00:40EA -  -  -  -  
   13 00:40EA -  -  -  -  ; ***************************************************************************************
   14 00:40EA -  -  -  -  ;
   15 00:40EA -  -  -  -  ;										PRINT command
   16 00:40EA -  -  -  -  ;
   17 00:40EA -  -  -  -  ; ***************************************************************************************
   18 00:40EA -  -  -  -  
   19 00:40EA -  -  -  -  Command_PRINT: 	;; [print]
   20 00:40EA -  -  -  -  		;
   21 00:40EA -  -  -  -  		;		Main loop
   22 00:40EA -  -  -  -  		;
   23 00:40EA -  -  -  -  _CPRLoop:
   24 00:40EA DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:40ED FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:40EF 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:40F1 FE A5 -  -  		cp 		KWD_COLON 	
   28 00:40F3 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:40F5 FE A6 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:40F7 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:40F9 FE A4 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:40FB 28 26 -  -  		jr 		z,_CPRTab
   33 00:40FD FE A7 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:40FF 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:4101 -  -  -  -  		;
   36 00:4101 CD D4 43 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:4104 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:4106 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:4108 -  -  -  -  		;
   40 00:4108 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:410A -  -  -  -  _CPRPrintNumber:
   42 00:410A F5 -  -  -  		push 	af 							; print leading space
   43 00:410B 3E 20 -  -  		ld 		a,' '
   44 00:410D CD 74 4B -  		call 	SYSPrintChar
   45 00:4110 F1 -  -  -  		pop 	af
   46 00:4111 01 7F 40 -  		ld  	bc,ConvertBuffer
   47 00:4114 C5 -  -  -  		push 	bc
   48 00:4115 CD 26 4B -  		call 	Int32ToString 				; convert to string
   49 00:4118 E1 -  -  -  		pop 	hl
   50 00:4119 -  -  -  -  		;
   51 00:4119 -  -  -  -  		; 		Print text at HL.
   52 00:4119 -  -  -  -  		;
   53 00:4119 -  -  -  -  _CPRPrintHL:
   54 00:4119 CD 6B 46 -  		call 	PrintStringAtHL 			; print string out
   55 00:411C 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:411E -  -  -  -  		;
   57 00:411E -  -  -  -  		; 		New line (')
   58 00:411E -  -  -  -  		;
   59 00:411E -  -  -  -  _CPRNewLine:
   60 00:411E CD 90 4B -  		call 	SYSPrintCRLF
   61 00:4121 18 05 -  -  		jr 		_CPRCheckNext
   62 00:4123 -  -  -  -  		;
   63 00:4123 -  -  -  -  		; 		Tab command (,)
   64 00:4123 -  -  -  -  		;
   65 00:4123 -  -  -  -  _CPRTab:
   66 00:4123 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:4125 CD 74 4B -  		call 	SYSPrintChar
   68 00:4128 -  -  -  -  		;
   69 00:4128 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:4128 -  -  -  -  		;
   71 00:4128 -  -  -  -  _CPRCheckNext:
   72 00:4128 DD 23 -  -  		inc 	ix 							; consume current
   73 00:412A DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:412D FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:412F C8 -  -  -  		ret 	z
   76 00:4130 FE A5 -  -  		cp 		KWD_COLON
   77 00:4132 C8 -  -  -  		ret 	z
   78 00:4133 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:4135 -  -  -  -  		;
   80 00:4135 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:4135 -  -  -  -  		;
   82 00:4135 -  -  -  -  _CPRExitNL:
   83 00:4135 CD 90 4B -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:4138 C9 -  -  -  		ret
Listing for file "_build.asm"
   19 00:4139 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4139 -  -  -  -  ; ***************************************************************************************
    2 00:4139 -  -  -  -  ; ***************************************************************************************
    3 00:4139 -  -  -  -  ;
    4 00:4139 -  -  -  -  ;		Name : 		rem.asm
    5 00:4139 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4139 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4139 -  -  -  -  ;		Reviewed :	No
    8 00:4139 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4139 -  -  -  -  ;
   10 00:4139 -  -  -  -  ; ***************************************************************************************
   11 00:4139 -  -  -  -  ; ***************************************************************************************
   12 00:4139 -  -  -  -  
   13 00:4139 -  -  -  -  ; ***************************************************************************************
   14 00:4139 -  -  -  -  ;
   15 00:4139 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4139 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4139 -  -  -  -  ;
   18 00:4139 -  -  -  -  ; ***************************************************************************************
   19 00:4139 -  -  -  -  
   20 00:4139 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4139 -  -  -  -  Command_REM2: 	;; [']
   22 00:4139 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:413C DD 23 -  -  		inc 	ix
   24 00:413E FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:4140 C8 -  -  -  		ret 	z
   26 00:4141 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:4143 C8 -  -  -  		ret 	z
   28 00:4144 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4146 C2 52 42 -  		jp 		nz,SyntaxError
   30 00:4149 -  -  -  -  		;		
   31 00:4149 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:414C DD 5E 00 -  		ld 		e,(ix+0)
   33 00:414F 13 -  -  -  		inc 	de 
   34 00:4150 13 -  -  -  		inc 	de
   35 00:4151 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4153 C9 -  -  -  		ret
   37 00:4154 -  -  -  -  
   38 00:4154 -  -  -  -  ; ***************************************************************************************
   39 00:4154 -  -  -  -  ;
   40 00:4154 -  -  -  -  ;									Changes and Updates
   41 00:4154 -  -  -  -  ;
   42 00:4154 -  -  -  -  ; ***************************************************************************************
   43 00:4154 -  -  -  -  ;
   44 00:4154 -  -  -  -  ;		Date			Notes
   45 00:4154 -  -  -  -  ;		==== 			=====
   46 00:4154 -  -  -  -  ;
   47 00:4154 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:4154 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4154 -  -  -  -  ; ***************************************************************************************
    2 00:4154 -  -  -  -  ; ***************************************************************************************
    3 00:4154 -  -  -  -  ;
    4 00:4154 -  -  -  -  ;		Name : 		run.asm
    5 00:4154 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4154 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4154 -  -  -  -  ;		Reviewed :	No
    8 00:4154 -  -  -  -  ;		Purpose :	Run command
    9 00:4154 -  -  -  -  ;
   10 00:4154 -  -  -  -  ; ***************************************************************************************
   11 00:4154 -  -  -  -  ; ***************************************************************************************
   12 00:4154 -  -  -  -  
   13 00:4154 -  -  -  -  ; ***************************************************************************************
   14 00:4154 -  -  -  -  ;
   15 00:4154 -  -  -  -  ;										RUN command
   16 00:4154 -  -  -  -  ;
   17 00:4154 -  -  -  -  ; ***************************************************************************************
   18 00:4154 -  -  -  -  
   19 00:4154 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4154 CD 22 46 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:4157 -  -  -  -  
   22 00:4157 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:415B ED 73 4D 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:415F -  -  -  -  		;
   25 00:415F -  -  -  -  		; 		New line at IX.
   26 00:415F -  -  -  -  		;
   27 00:415F -  -  -  -  CRNewLine:
   28 00:415F DD 22 49 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:4163 -  -  -  -  		;
   30 00:4163 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:4166 B7 -  -  -  		or 		a
   32 00:4167 CA D2 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:416A -  -  -  -  		;
   34 00:416A DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:416C DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:416E DD 23 -  -  		inc 	ix
   37 00:4170 -  -  -  -  		;
   38 00:4170 -  -  -  -  		; 		New command at IX
   39 00:4170 -  -  -  -  		;
   40 00:4170 -  -  -  -  _CRNewCommand:	
   41 00:4170 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:4173 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:4174 F2 A4 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:4177 -  -  -  -  		;
   45 00:4177 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:4179 30 05 -  -  		jr  	nc,_CRDoCommand
   47 00:417B FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:417D D2 99 41 -  		jp 		nc,_CRAlternateLets
   49 00:4180 -  -  -  -  		;
   50 00:4180 -  -  -  -  _CRDoCommand:		
   51 00:4180 E6 7F 21 00 
              00 6F 29 11 
              FE 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:4192 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:4194 CD 51 40 -  		call 	JumpCode 					; call the routine.
   54 00:4197 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:4199 -  -  -  -  		;
   56 00:4199 -  -  -  -  		; 		Do CALL (HL)
   57 00:4199 -  -  -  -  		;
   58 00:4199 -  -  -  -  		;
   59 00:4199 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:4199 -  -  -  -  		;		
   61 00:4199 -  -  -  -  _CRAlternateLets:		
   62 00:4199 FE 83 -  -  		cp 		KWD_PLING
   63 00:419B 28 0C -  -  		jr 		z,_CRAssignmentLet
   64 00:419D FE 84 -  -  		cp 		KWD_QMARK
   65 00:419F 28 08 -  -  		jr 		z,_CRAssignmentLet
   66 00:41A1 C3 52 42 -  		jp 		SyntaxError
   67 00:41A4 -  -  -  -  		;
   68 00:41A4 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:41A4 -  -  -  -  		;
   70 00:41A4 -  -  -  -  _CRAssignmentHandler:		
   71 00:41A4 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:41A6 D2 52 42 -  		jp 		nc,SyntaxError
   73 00:41A9 -  -  -  -  _CRAssignmentLet:		
   74 00:41A9 3E 0E C3 F5 
              41 -  -  -  		ERR_TODO
   75 00:41AE -  -  -  -  		;call	Command_LET
   76 00:41AE C3 70 41 -  		jp 		_CRNewCommand
   77 00:41B1 -  -  -  -  
   78 00:41B1 -  -  -  -  ; ***************************************************************************************
   79 00:41B1 -  -  -  -  ;
   80 00:41B1 -  -  -  -  ;									Changes and Updates
   81 00:41B1 -  -  -  -  ;
   82 00:41B1 -  -  -  -  ; ***************************************************************************************
   83 00:41B1 -  -  -  -  ;
   84 00:41B1 -  -  -  -  ;		Date			Notes
   85 00:41B1 -  -  -  -  ;		==== 			=====
   86 00:41B1 -  -  -  -  ;
   87 00:41B1 -  -  -  -  ; ***************************************************************************************
   88 00:41B1 -  -  -  -  		
Listing for file "_build.asm"
   21 00:41B1 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:41B1 -  -  -  -  ; ***************************************************************************************
    2 00:41B1 -  -  -  -  ; ***************************************************************************************
    3 00:41B1 -  -  -  -  ;
    4 00:41B1 -  -  -  -  ;		Name : 		stop.asm
    5 00:41B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41B1 -  -  -  -  ;		Reviewed :	No
    8 00:41B1 -  -  -  -  ;		Purpose :	Stop command
    9 00:41B1 -  -  -  -  ;
   10 00:41B1 -  -  -  -  ; ***************************************************************************************
   11 00:41B1 -  -  -  -  ; ***************************************************************************************
   12 00:41B1 -  -  -  -  
   13 00:41B1 -  -  -  -  ; ***************************************************************************************
   14 00:41B1 -  -  -  -  ;
   15 00:41B1 -  -  -  -  ;										STOP command
   16 00:41B1 -  -  -  -  ;
   17 00:41B1 -  -  -  -  ; ***************************************************************************************
   18 00:41B1 -  -  -  -  
   19 00:41B1 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:41B1 3E 0C C3 F5 
              41 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:41B6 -  -  -  -  
   22 00:41B6 -  -  -  -  ; ***************************************************************************************
   23 00:41B6 -  -  -  -  ;
   24 00:41B6 -  -  -  -  ;									Changes and Updates
   25 00:41B6 -  -  -  -  ;
   26 00:41B6 -  -  -  -  ; ***************************************************************************************
   27 00:41B6 -  -  -  -  ;
   28 00:41B6 -  -  -  -  ;		Date			Notes
   29 00:41B6 -  -  -  -  ;		==== 			=====
   30 00:41B6 -  -  -  -  ;
   31 00:41B6 -  -  -  -  ; ***************************************************************************************
   32 00:41B6 -  -  -  -  		
Listing for file "_build.asm"
   22 00:41B6 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:41B6 -  -  -  -  ; ***************************************************************************************
    2 00:41B6 -  -  -  -  ; ***************************************************************************************
    3 00:41B6 -  -  -  -  ;
    4 00:41B6 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:41B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41B6 -  -  -  -  ;		Reviewed :	No
    8 00:41B6 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:41B6 -  -  -  -  ;
   10 00:41B6 -  -  -  -  ; ***************************************************************************************
   11 00:41B6 -  -  -  -  ; ***************************************************************************************
   12 00:41B6 -  -  -  -  
   13 00:41B6 -  -  -  -  ; ***************************************************************************************
   14 00:41B6 -  -  -  -  ;
   15 00:41B6 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:41B6 -  -  -  -  ;
   17 00:41B6 -  -  -  -  ; ***************************************************************************************
   18 00:41B6 -  -  -  -  
   19 00:41B6 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:41B6             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:41B6             		inc 	ix
   22 00:41B6             		cp 		ch 							; exit if matches
   23 00:41B6             		ret 	z
   24 00:41B6             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:41B6             		jp 		ErrorHandler
   26 00:41B6             #endmacro
   27 00:41B6 -  -  -  -  
   28 00:41B6 -  -  -  -  CheckLeftBracket:
   29 00:41B6 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 F5 
              41 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:41C3 -  -  -  -  
   31 00:41C3 -  -  -  -  CheckRightBracket:
   32 00:41C3 DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 F5 
              41 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:41D0 -  -  -  -  
   34 00:41D0 -  -  -  -  CheckDollar:
   35 00:41D0 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 F5 
              41 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:41DD -  -  -  -  		
   37 00:41DD -  -  -  -  CheckComma:
   38 00:41DD DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 F5 
              41 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:41EA -  -  -  -  
   40 00:41EA -  -  -  -  ; ***************************************************************************************
   41 00:41EA -  -  -  -  ;
   42 00:41EA -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:41EA -  -  -  -  ;
   44 00:41EA -  -  -  -  ; ***************************************************************************************
   45 00:41EA -  -  -  -  
   46 00:41EA -  -  -  -  CheckNextA:
   47 00:41EA DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:41ED DD 23 -  -  		inc 	ix 							; skip character
   49 00:41EF C8 -  -  -  		ret 	z 							; yes, okay
   50 00:41F0 3E 0D C3 F5 
              41 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:41F5 -  -  -  -  		
   52 00:41F5 -  -  -  -  ; ***************************************************************************************
   53 00:41F5 -  -  -  -  ;
   54 00:41F5 -  -  -  -  ;									Changes and Updates
   55 00:41F5 -  -  -  -  ;
   56 00:41F5 -  -  -  -  ; ***************************************************************************************
   57 00:41F5 -  -  -  -  ;
   58 00:41F5 -  -  -  -  ;		Date			Notes
   59 00:41F5 -  -  -  -  ;		==== 			=====
   60 00:41F5 -  -  -  -  ;
   61 00:41F5 -  -  -  -  ; ***************************************************************************************
   62 00:41F5 -  -  -  -  		
Listing for file "_build.asm"
   23 00:41F5 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:41F5 -  -  -  -  ; ***************************************************************************************
    2 00:41F5 -  -  -  -  ; ***************************************************************************************
    3 00:41F5 -  -  -  -  ;
    4 00:41F5 -  -  -  -  ;		Name : 		errors.asm
    5 00:41F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41F5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41F5 -  -  -  -  ;		Reviewed :	No
    8 00:41F5 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:41F5 -  -  -  -  ;
   10 00:41F5 -  -  -  -  ; ***************************************************************************************
   11 00:41F5 -  -  -  -  ; ***************************************************************************************
   12 00:41F5 -  -  -  -  
   13 00:41F5 -  -  -  -  ; ***************************************************************************************
   14 00:41F5 -  -  -  -  ;
   15 00:41F5 -  -  -  -  ;								Error handler, message A 
   16 00:41F5 -  -  -  -  ;
   17 00:41F5 -  -  -  -  ; ***************************************************************************************
   18 00:41F5 -  -  -  -  
   19 00:41F5 -  -  -  -  ErrorHandler:
   20 00:41F5 F5 -  -  -  		push 	af 						; save error ID
   21 00:41F6 -  -  -  -  
   22 00:41F6 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:41F9 6F -  -  -  		ld 		l,a
   24 00:41FA 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:41FB 29 -  -  -  		add 	hl,hl 		
   26 00:41FC 11 D1 47 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:41FF 19 -  -  -  		add 	hl,de
   28 00:4200 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4204 CD 6B 46 -  		call 	PrintStringAtHL
   30 00:4207 -  -  -  -  		;
   31 00:4207 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4208 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4209 28 28 -  -  		jr 		z,_EHExit
   34 00:420B -  -  -  -  		;
   35 00:420B DD 2A 49 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:420F DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4212 B7 -  -  -  		or 		a
   38 00:4213 28 1E -  -  		jr 		z,_EHExit
   39 00:4215 -  -  -  -  
   40 00:4215 21 39 42 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4218 CD 6B 46 -  		call 	PrintStringAtHL 
   42 00:421B -  -  -  -  		
   43 00:421B D9 -  -  -  		exx								; HL'HL = line number
   44 00:421C 21 00 00 -  		ld 		hl,$0000 		
   45 00:421F D9 -  -  -  		exx 
   46 00:4220 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4223 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4226 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4228 01 7F 40 -  		ld 		bc,ConvertBuffer
   50 00:422B CD 26 4B -  		call 	Int32ToString
   51 00:422E C5 -  -  -  		push 	bc
   52 00:422F E1 -  -  -  		pop 	hl
   53 00:4230 CD 6B 46 -  		call 	PrintStringAtHL			; print error line number.
   54 00:4233 -  -  -  -  _EHExit:		
   55 00:4233 CD 90 4B -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4236 C3 17 40 -  		jp 		WarmStart
   57 00:4239 -  -  -  -  
   58 00:4239 -  -  -  -  _EHAtText:
   59 00:4239 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:4243 -  -  -  -  
   61 00:4243 -  -  -  -  NotImplemented:
   62 00:4243 3E 04 C3 F5 
              41 -  -  -  		ERR_DISABLED
   63 00:4248 -  -  -  -  TypeMismatch:
   64 00:4248 3E 02 C3 F5 
              41 -  -  -  		ERR_BADTYPE
   65 00:424D -  -  -  -  BadValue:
   66 00:424D 3E 03 C3 F5 
              41 -  -  -  		ERR_BADVALUE
   67 00:4252 -  -  -  -  SyntaxError:
   68 00:4252 3E 0D C3 F5 
              41 -  -  -  		ERR_SYNTAX
   69 00:4257 -  -  -  -  						
   70 00:4257 -  -  -  -  ; ***************************************************************************************
   71 00:4257 -  -  -  -  ;
   72 00:4257 -  -  -  -  ;									Changes and Updates
   73 00:4257 -  -  -  -  ;
   74 00:4257 -  -  -  -  ; ***************************************************************************************
   75 00:4257 -  -  -  -  ;
   76 00:4257 -  -  -  -  ;		Date			Notes
   77 00:4257 -  -  -  -  ;		==== 			=====
   78 00:4257 -  -  -  -  ;
   79 00:4257 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:4257 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4257 -  -  -  -  ; ***************************************************************************************
    2 00:4257 -  -  -  -  ; ***************************************************************************************
    3 00:4257 -  -  -  -  ;
    4 00:4257 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4257 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4257 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4257 -  -  -  -  ;		Reviewed :	No
    8 00:4257 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4257 -  -  -  -  ;
   10 00:4257 -  -  -  -  ; ***************************************************************************************
   11 00:4257 -  -  -  -  ; ***************************************************************************************
   12 00:4257 -  -  -  -  
   13 00:4257 -  -  -  -  ; ***************************************************************************************
   14 00:4257 -  -  -  -  ;
   15 00:4257 -  -  -  -  ; 									Addition
   16 00:4257 -  -  -  -  ;
   17 00:4257 -  -  -  -  ; ***************************************************************************************
   18 00:4257 -  -  -  -  
   19 00:4257 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4257 CD 4A 43 78 
              B1 C2 48 42 
              C3 B3 4A -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:4262 -  -  -  -  
   22 00:4262 -  -  -  -  ; ***************************************************************************************
   23 00:4262 -  -  -  -  ;
   24 00:4262 -  -  -  -  ; 									Subtraction
   25 00:4262 -  -  -  -  ;
   26 00:4262 -  -  -  -  ; ***************************************************************************************
   27 00:4262 -  -  -  -  
   28 00:4262 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:4262 CD 4A 43 78 
              B1 C2 48 42 
              C3 B9 4A -  		IntegerDispatch(Int32Subtract)
   30 00:426D -  -  -  -  
   31 00:426D -  -  -  -  ; ***************************************************************************************
   32 00:426D -  -  -  -  ;
   33 00:426D -  -  -  -  ; 									  Multiply
   34 00:426D -  -  -  -  ;
   35 00:426D -  -  -  -  ; ***************************************************************************************
   36 00:426D -  -  -  -  
   37 00:426D -  -  -  -  ALUMultiply: 	;; [*]
   38 00:426D CD 4A 43 78 
              B1 C2 48 42 
              C3 7D 4A -  		IntegerDispatch(Int32Multiply)
   39 00:4278 -  -  -  -  
   40 00:4278 -  -  -  -  ; ***************************************************************************************
   41 00:4278 -  -  -  -  ;
   42 00:4278 -  -  -  -  ; 									  Divide
   43 00:4278 -  -  -  -  ;
   44 00:4278 -  -  -  -  ; ***************************************************************************************
   45 00:4278 -  -  -  -  
   46 00:4278 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4278 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4278 CD 4A 43 78 
              B1 C2 48 42 
              C3 8E 49 -  		IntegerDispatch(Int32SDivide)
   49 00:4283 -  -  -  -  
   50 00:4283 -  -  -  -  ; ***************************************************************************************
   51 00:4283 -  -  -  -  ;
   52 00:4283 -  -  -  -  ; 									  Modulus
   53 00:4283 -  -  -  -  ;
   54 00:4283 -  -  -  -  ; ***************************************************************************************
   55 00:4283 -  -  -  -  
   56 00:4283 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4283 CD 4A 43 78 
              B1 C2 48 42 
              C3 91 49 -  		IntegerDispatch(Int32Modulus)
   58 00:428E -  -  -  -  
   59 00:428E -  -  -  -  ; ***************************************************************************************
   60 00:428E -  -  -  -  ;
   61 00:428E -  -  -  -  ; 									  Logical
   62 00:428E -  -  -  -  ;
   63 00:428E -  -  -  -  ; ***************************************************************************************
   64 00:428E -  -  -  -  
   65 00:428E -  -  -  -  ALUAnd: 		;; [and]
   66 00:428E CD 4A 43 78 
              B1 C2 48 42 
              C3 C1 4A -  		IntegerDispatch(Int32And)
   67 00:4299 -  -  -  -  
   68 00:4299 -  -  -  -  ALUOr: 			;; [or]
   69 00:4299 CD 4A 43 78 
              B1 C2 48 42 
              C3 CD 4A -  		IntegerDispatch(Int32Or)
   70 00:42A4 -  -  -  -  
   71 00:42A4 -  -  -  -  ALUXor: 		;; [eor]
   72 00:42A4 CD 4A 43 78 
              B1 C2 48 42 
              C3 D9 4A -  		IntegerDispatch(Int32Xor)
   73 00:42AF -  -  -  -  
   74 00:42AF -  -  -  -  ; ***************************************************************************************
   75 00:42AF -  -  -  -  ;
   76 00:42AF -  -  -  -  ;									Changes and Updates
   77 00:42AF -  -  -  -  ;
   78 00:42AF -  -  -  -  ; ***************************************************************************************
   79 00:42AF -  -  -  -  ;
   80 00:42AF -  -  -  -  ;		Date			Notes
   81 00:42AF -  -  -  -  ;		==== 			=====
   82 00:42AF -  -  -  -  ;
   83 00:42AF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:42AF -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:42AF -  -  -  -  ; ***************************************************************************************
    2 00:42AF -  -  -  -  ; ***************************************************************************************
    3 00:42AF -  -  -  -  ;
    4 00:42AF -  -  -  -  ;		Name : 		binrefs.asm
    5 00:42AF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42AF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42AF -  -  -  -  ;		Reviewed :	No
    8 00:42AF -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:42AF -  -  -  -  ;
   10 00:42AF -  -  -  -  ; ***************************************************************************************
   11 00:42AF -  -  -  -  ; ***************************************************************************************
   12 00:42AF -  -  -  -  
   13 00:42AF -  -  -  -  ; ***************************************************************************************
   14 00:42AF -  -  -  -  ;
   15 00:42AF -  -  -  -  ; 									<l> <op> <r>
   16 00:42AF -  -  -  -  ;
   17 00:42AF -  -  -  -  ; ***************************************************************************************
   18 00:42AF -  -  -  -  
   19 00:42AF -  -  -  -  ALULongReference:			;; [!]
   20 00:42AF CD BD 42 -  		call 	BRGetAddress 				; calculate address
   21 00:42B2 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:42B4 CB F9 -  -  		set 	CIsReference,c
   23 00:42B6 C9 -  -  -  		ret
   24 00:42B7 -  -  -  -  
   25 00:42B7 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:42B7 CD AF 42 -  		call 	ALULongReference
   27 00:42BA CB F1 -  -  		set 	CIsByteReference,c
   28 00:42BC C9 -  -  -  		ret
   29 00:42BD -  -  -  -  
   30 00:42BD -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:42BD CD 4A 43 78 
              B1 C2 48 42 
              C3 C8 42 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:42C8 -  -  -  -  _BRGAMain:		
   33 00:42C8 CD B3 4A -  		call 	Int32Add 					; address in HL'HL
   34 00:42CB CD 33 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:42CE C9 -  -  -  		ret
   36 00:42CF -  -  -  -  
   37 00:42CF -  -  -  -  ; ***************************************************************************************
   38 00:42CF -  -  -  -  ;
   39 00:42CF -  -  -  -  ;									Changes and Updates
   40 00:42CF -  -  -  -  ;
   41 00:42CF -  -  -  -  ; ***************************************************************************************
   42 00:42CF -  -  -  -  ;
   43 00:42CF -  -  -  -  ;		Date			Notes
   44 00:42CF -  -  -  -  ;		==== 			=====
   45 00:42CF -  -  -  -  ;
   46 00:42CF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42CF -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:42CF -  -  -  -  ; ***************************************************************************************
    2 00:42CF -  -  -  -  ; ***************************************************************************************
    3 00:42CF -  -  -  -  ;
    4 00:42CF -  -  -  -  ;		Name : 		compare.asm
    5 00:42CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CF -  -  -  -  ;		Reviewed :	No
    8 00:42CF -  -  -  -  ;		Purpose :	Comparison code
    9 00:42CF -  -  -  -  ;
   10 00:42CF -  -  -  -  ; ***************************************************************************************
   11 00:42CF -  -  -  -  ; ***************************************************************************************
   12 00:42CF -  -  -  -  
   13 00:42CF -  -  -  -  #macro compare_equals(n)
   14 00:42CF             		call 	CompareBaseCode
   15 00:42CF             		cp 		n
   16 00:42CF             		jr 		z,UnaryInt32True
   17 00:42CF             		jr 		UnaryInt32False
   18 00:42CF             #endmacro
   19 00:42CF -  -  -  -  
   20 00:42CF -  -  -  -  #macro compare_not_equals(n)
   21 00:42CF             		call 	CompareBaseCode
   22 00:42CF             		cp 		n
   23 00:42CF             		jr 		nz,UnaryInt32True
   24 00:42CF             		jr 		UnaryInt32False
   25 00:42CF             #endmacro
   26 00:42CF -  -  -  -  
   27 00:42CF -  -  -  -  ; ***************************************************************************************
   28 00:42CF -  -  -  -  ;
   29 00:42CF -  -  -  -  ; 								Return True/False
   30 00:42CF -  -  -  -  ;
   31 00:42CF -  -  -  -  ; ***************************************************************************************
   32 00:42CF -  -  -  -  
   33 00:42CF -  -  -  -  UnaryInt32True:	
   34 00:42CF 3E FF -  -  		ld 		a,255
   35 00:42D1 18 01 -  -  		jr 		_Int32Logical
   36 00:42D3 -  -  -  -  UnaryInt32False: 
   37 00:42D3 AF -  -  -  		xor 	a
   38 00:42D4 -  -  -  -  _Int32Logical:
   39 00:42D4 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:42D5 67 -  -  -  		ld 		h,a
   41 00:42D6 D9 -  -  -  		exx
   42 00:42D7 6F -  -  -  		ld 		l,a
   43 00:42D8 67 -  -  -  		ld 		h,a
   44 00:42D9 D9 -  -  -  		exx
   45 00:42DA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:42DC C9 -  -  -  		ret
   47 00:42DD -  -  -  -  
   48 00:42DD -  -  -  -  ; ***************************************************************************************
   49 00:42DD -  -  -  -  ;
   50 00:42DD -  -  -  -  ; 										> = < (compare == value)
   51 00:42DD -  -  -  -  ;
   52 00:42DD -  -  -  -  ; ***************************************************************************************
   53 00:42DD -  -  -  -  
   54 00:42DD -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:42DD CD 13 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:42E6 -  -  -  -  
   57 00:42E6 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:42E6 CD 13 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:42EF -  -  -  -  
   60 00:42EF -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:42EF CD 13 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:42F8 -  -  -  -  
   63 00:42F8 -  -  -  -  ; ***************************************************************************************
   64 00:42F8 -  -  -  -  ;
   65 00:42F8 -  -  -  -  ; 										> = < (compare <> value)
   66 00:42F8 -  -  -  -  ;
   67 00:42F8 -  -  -  -  ; ***************************************************************************************
   68 00:42F8 -  -  -  -  
   69 00:42F8 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:42F8 CD 13 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4301 -  -  -  -  
   72 00:4301 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4301 CD 13 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:430A -  -  -  -  
   75 00:430A -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:430A CD 13 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4313 -  -  -  -  
   78 00:4313 -  -  -  -  ; ***************************************************************************************
   79 00:4313 -  -  -  -  ;
   80 00:4313 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4313 -  -  -  -  ;
   82 00:4313 -  -  -  -  ; ***************************************************************************************
   83 00:4313 -  -  -  -  
   84 00:4313 -  -  -  -  CompareBaseCode:
   85 00:4313 CD 4A 43 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4316 -  -  -  -  
   87 00:4316 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4317 A1 -  -  -  		and 	c
   89 00:4318 CB 47 -  -  		bit 	CIsString,a 
   90 00:431A C2 29 43 -  		jp 		nz,StringCompare
   91 00:431D -  -  -  -  
   92 00:431D 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:431E B1 -  -  -  		or 		c
   94 00:431F CB 47 -  -  		bit 	CIsString,a 
   95 00:4321 CA EC 4A -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4324 -  -  -  -  
   97 00:4324 3E 02 C3 F5 
              41 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4329 -  -  -  -  ;
   99 00:4329 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4329 -  -  -  -  ;
  101 00:4329 -  -  -  -  StringCompare:
  102 00:4329 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:432A BE -  -  -  		cp 		(hl)
  104 00:432B 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:432D 20 08 -  -  		jr 		nz,_SCLess
  106 00:432F 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4330 23 -  -  -  		inc 	hl
  108 00:4331 FE 20 -  -  		cp 		' '
  109 00:4333 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4335 AF -  -  -  		xor 	a 							; return 0.
  111 00:4336 C9 -  -  -  		ret
  112 00:4337 -  -  -  -  
  113 00:4337 -  -  -  -  _SCLess:
  114 00:4337 3E FF -  -  		ld 		a,$FF
  115 00:4339 C9 -  -  -  		ret
  116 00:433A -  -  -  -  _SCGreater:
  117 00:433A 3E 01 -  -  		ld 		a,1
  118 00:433C C9 -  -  -  		ret
  119 00:433D -  -  -  -  
  120 00:433D 3E 0E C3 F5 
              41 -  -  -  		ERR_TODO()
  121 00:4342 -  -  -  -  
  122 00:4342 -  -  -  -  ; ***************************************************************************************
  123 00:4342 -  -  -  -  ;
  124 00:4342 -  -  -  -  ;									Changes and Updates
  125 00:4342 -  -  -  -  ;
  126 00:4342 -  -  -  -  ; ***************************************************************************************
  127 00:4342 -  -  -  -  ;
  128 00:4342 -  -  -  -  ;		Date			Notes
  129 00:4342 -  -  -  -  ;		==== 			=====
  130 00:4342 -  -  -  -  ;
  131 00:4342 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:4342 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:4342 -  -  -  -  ; ***************************************************************************************
    2 00:4342 -  -  -  -  ; ***************************************************************************************
    3 00:4342 -  -  -  -  ;
    4 00:4342 -  -  -  -  ;		Name : 		utility.asm
    5 00:4342 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4342 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4342 -  -  -  -  ;		Reviewed :	No
    8 00:4342 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:4342 -  -  -  -  ;
   10 00:4342 -  -  -  -  ; ***************************************************************************************
   11 00:4342 -  -  -  -  ; ***************************************************************************************
   12 00:4342 -  -  -  -  
   13 00:4342 -  -  -  -  ; ***************************************************************************************
   14 00:4342 -  -  -  -  ;
   15 00:4342 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:4342 -  -  -  -  ;
   17 00:4342 -  -  -  -  ; ***************************************************************************************
   18 00:4342 -  -  -  -  
   19 00:4342 -  -  -  -  SwapHLDE:
   20 00:4342 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:4343 D9 -  -  -  			exx
   22 00:4344 EB -  -  -  			ex 		de,hl
   23 00:4345 D9 -  -  -  			exx
   24 00:4346 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4347 41 -  -  -  			ld 		b,c
   26 00:4348 4F -  -  -  			ld 		c,a
   27 00:4349 C9 -  -  -  			ret
   28 00:434A -  -  -  -  
   29 00:434A -  -  -  -  ; ***************************************************************************************
   30 00:434A -  -  -  -  ;
   31 00:434A -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:434A -  -  -  -  ;
   33 00:434A -  -  -  -  ; ***************************************************************************************
   34 00:434A -  -  -  -  
   35 00:434A -  -  -  -  DereferenceBoth:
   36 00:434A CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:434C C4 05 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:434F CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:4351 C8 -  -  -  			ret 	z
   40 00:4352 CD 42 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:4355 CD 05 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4358 CD 42 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:435B C9 -  -  -  			ret
   44 00:435C -  -  -  -  
   45 00:435C -  -  -  -  ; ***************************************************************************************
   46 00:435C -  -  -  -  ;
   47 00:435C -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:435C -  -  -  -  ;
   49 00:435C -  -  -  -  ; ***************************************************************************************
   50 00:435C -  -  -  -  
   51 00:435C -  -  -  -  NegateHLHL:	
   52 00:435C CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:435E C2 48 42 -  			jp 		nz,TypeMismatch
   54 00:4361 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:4363 C4 05 44 -  			call 	nz,Dereference 			; if required.
   56 00:4366 CD 13 4B -  			call 	Int32Negate
   57 00:4369 C9 -  -  -  			ret
Listing for file "_build.asm"
   28 00:436A -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:436A -  -  -  -  ; ***************************************************************************************
    2 00:436A -  -  -  -  ; ***************************************************************************************
    3 00:436A -  -  -  -  ;
    4 00:436A -  -  -  -  ;		Name : 		expression.asm
    5 00:436A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:436A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:436A -  -  -  -  ;		Reviewed :	None
    8 00:436A -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:436A -  -  -  -  ;
   10 00:436A -  -  -  -  ; ***************************************************************************************
   11 00:436A -  -  -  -  ; ***************************************************************************************
   12 00:436A -  -  -  -  
   13 00:436A -  -  -  -  ; ***************************************************************************************
   14 00:436A -  -  -  -  ;
   15 00:436A -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:436A -  -  -  -  ;
   17 00:436A -  -  -  -  ; ***************************************************************************************
   18 00:436A -  -  -  -  
   19 00:436A -  -  -  -  EvaluateAtPrecedence0:
   20 00:436A AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:436B -  -  -  -  EvaluateAtPrecedence:
   22 00:436B F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:436C -  -  -  -  		;
   24 00:436C -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:436C -  -  -  -  		;
   26 00:436C CD 35 44 -  		call 	EvaluateTerm 				; get term
   27 00:436F -  -  -  -  		;
   28 00:436F -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:436F -  -  -  -  		;
   30 00:436F D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4370 -  -  -  -  _EAPLoop:
   32 00:4370 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4373 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:4375 D8 -  -  -  		ret 	c
   35 00:4376 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4378 D0 -  -  -  		ret 	nc
   37 00:4379 -  -  -  -  		;
   38 00:4379 -  -  -  -  		; 		Get the precedence.
   39 00:4379 -  -  -  -  		;
   40 00:4379 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:437A D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:437C 21 C0 47 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:437F B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4380 6F -  -  -  		ld 		l,a
   45 00:4381 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4382 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4383 -  -  -  -  		;
   48 00:4383 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4383 -  -  -  -  		;
   50 00:4383 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4384 BB -  -  -  		cp 		e
   52 00:4385 D0 -  -  -  		ret 	nc
   53 00:4386 -  -  -  -  
   54 00:4386 -  -  -  -  		;
   55 00:4386 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4386 -  -  -  -  		;
   57 00:4386 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4387 -  -  -  -  		;
   59 00:4387 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:438A F5 -  -  -  		push 	af
   61 00:438B -  -  -  -  		;
   62 00:438B C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:438C D9 -  -  -  		exx 								; save HL'
   64 00:438D E5 -  -  -  		push 	hl
   65 00:438E D9 -  -  -  		exx 								
   66 00:438F E5 -  -  -  		push 	hl 							; save HL
   67 00:4390 -  -  -  -  		;
   68 00:4390 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4392 -  -  -  -  		;
   70 00:4392 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4392 -  -  -  -  		;
   72 00:4392 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4393 CD 6B 43 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4396 -  -  -  -  		;
   75 00:4396 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4396 -  -  -  -  		;
   77 00:4396 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4397 -  -  -  -  
   79 00:4397 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4398 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4399 D9 -  -  -  		exx
   82 00:439A EB -  -  -  		ex 		de,hl
   83 00:439B E1 -  -  -  		pop 	hl
   84 00:439C D9 -  -  -  		exx
   85 00:439D C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:439E 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:439F -  -  -  -  		;
   88 00:439F -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:439F -  -  -  -  		; 		is in B (type) DE'DE
   90 00:439F -  -  -  -  		;
   91 00:439F F1 -  -  -  		pop 	af 							; get operator in A
   92 00:43A0 -  -  -  -  		;
   93 00:43A0 -  -  -  -  		; 		Call the binary operator in A.
   94 00:43A0 -  -  -  -  		;
   95 00:43A0 D5 -  -  -  		push 	de
   96 00:43A1 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:43A2 E6 7F 21 00 
              00 6F 29 11 
              FE 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:43B4 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:43B5 D1 -  -  -  		pop 	de 							; restore DE
  100 00:43B6 CD 51 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:43B9 -  -  -  -  		;
  102 00:43B9 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:43BA -  -  -  -  		;
  104 00:43BA 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:43BC -  -  -  -  
  106 00:43BC -  -  -  -  ; ***************************************************************************************
  107 00:43BC -  -  -  -  ;
  108 00:43BC -  -  -  -  ;									Changes and Updates
  109 00:43BC -  -  -  -  ;
  110 00:43BC -  -  -  -  ; ***************************************************************************************
  111 00:43BC -  -  -  -  ;
  112 00:43BC -  -  -  -  ;		Date			Notes
  113 00:43BC -  -  -  -  ;		==== 			=====
  114 00:43BC -  -  -  -  ;
  115 00:43BC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:43BC -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:43BC -  -  -  -  ; ***************************************************************************************
    2 00:43BC -  -  -  -  ; ***************************************************************************************
    3 00:43BC -  -  -  -  ;
    4 00:43BC -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:43BC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43BC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43BC -  -  -  -  ;		Reviewed :	No
    8 00:43BC -  -  -  -  ;		Purpose :	Expression support functions
    9 00:43BC -  -  -  -  ;
   10 00:43BC -  -  -  -  ; ***************************************************************************************
   11 00:43BC -  -  -  -  ; ***************************************************************************************
   12 00:43BC -  -  -  -  
   13 00:43BC -  -  -  -  ; ***************************************************************************************
   14 00:43BC -  -  -  -  ;
   15 00:43BC -  -  -  -  ; 								Evaluate an integer term
   16 00:43BC -  -  -  -  ;
   17 00:43BC -  -  -  -  ; ***************************************************************************************
   18 00:43BC -  -  -  -  
   19 00:43BC -  -  -  -  EvaluateIntegerTerm:
   20 00:43BC CD 35 44 -  		call 	EvaluateTerm
   21 00:43BF CD 05 44 -  		call 	DeReference
   22 00:43C2 CB 41 -  -  		bit 	CIsString,c
   23 00:43C4 C8 -  -  -  		ret 	z
   24 00:43C5 C3 48 42 -  		jp 		TypeMismatch
   25 00:43C8 -  -  -  -  
   26 00:43C8 -  -  -  -  ; ***************************************************************************************
   27 00:43C8 -  -  -  -  ;
   28 00:43C8 -  -  -  -  ; 								Evaluate a string term
   29 00:43C8 -  -  -  -  ;
   30 00:43C8 -  -  -  -  ; ***************************************************************************************
   31 00:43C8 -  -  -  -  
   32 00:43C8 -  -  -  -  EvaluateStringTerm:
   33 00:43C8 CD 35 44 -  		call 	EvaluateTerm
   34 00:43CB CD 05 44 -  		call 	DeReference
   35 00:43CE CB 41 -  -  		bit 	CIsString,c
   36 00:43D0 C0 -  -  -  		ret 	nz
   37 00:43D1 C3 48 42 -  		jp 		TypeMismatch
   38 00:43D4 -  -  -  -  
   39 00:43D4 -  -  -  -  ; ***************************************************************************************
   40 00:43D4 -  -  -  -  ;
   41 00:43D4 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:43D4 -  -  -  -  ;
   43 00:43D4 -  -  -  -  ; ***************************************************************************************
   44 00:43D4 -  -  -  -  
   45 00:43D4 -  -  -  -  EvaluateValue:
   46 00:43D4 CD 6A 43 -  		call 	EvaluateAtPrecedence0
   47 00:43D7 C3 05 44 -  		jp 		Dereference
   48 00:43DA -  -  -  -  
   49 00:43DA -  -  -  -  ; ***************************************************************************************
   50 00:43DA -  -  -  -  ;
   51 00:43DA -  -  -  -  ; 									Evaluate a number
   52 00:43DA -  -  -  -  ;
   53 00:43DA -  -  -  -  ; ***************************************************************************************
   54 00:43DA -  -  -  -  
   55 00:43DA -  -  -  -  EvaluateInteger:
   56 00:43DA CD D4 43 -  		call 	EvaluateValue
   57 00:43DD CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:43DF C8 -  -  -  		ret 	z
   59 00:43E0 C3 48 42 -  		jp 		TypeMismatch
   60 00:43E3 -  -  -  -  
   61 00:43E3 -  -  -  -  ; ***************************************************************************************
   62 00:43E3 -  -  -  -  ;
   63 00:43E3 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:43E3 -  -  -  -  ;
   65 00:43E3 -  -  -  -  ; ***************************************************************************************
   66 00:43E3 -  -  -  -  
   67 00:43E3 -  -  -  -  Evaluate8BitInteger:
   68 00:43E3 CD DA 43 -  		call 	EvaluateInteger
   69 00:43E6 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:43E7 7C -  -  -  		ld 		a,h
   71 00:43E8 B5 -  -  -  		or 		l
   72 00:43E9 D9 -  -  -  		exx 	
   73 00:43EA B4 -  -  -  		or 		h
   74 00:43EB C2 4D 42 -  		jp 		nz,BadValue
   75 00:43EE 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:43EF C9 -  -  -  		ret
   77 00:43F0 -  -  -  -  		
   78 00:43F0 -  -  -  -  ; ***************************************************************************************
   79 00:43F0 -  -  -  -  ;
   80 00:43F0 -  -  -  -  ; 									Evaluate a string
   81 00:43F0 -  -  -  -  ;
   82 00:43F0 -  -  -  -  ; ***************************************************************************************
   83 00:43F0 -  -  -  -  
   84 00:43F0 -  -  -  -  EvaluateStringOnly:
   85 00:43F0 CD D4 43 -  		call 	EvaluateValue
   86 00:43F3 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:43F5 CA 48 42 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:43F8 C9 -  -  -  		ret
   89 00:43F9 -  -  -  -  
   90 00:43F9 -  -  -  -  ; ***************************************************************************************
   91 00:43F9 -  -  -  -  ;
   92 00:43F9 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:43F9 -  -  -  -  ;
   94 00:43F9 -  -  -  -  ; ***************************************************************************************
   95 00:43F9 -  -  -  -  
   96 00:43F9 -  -  -  -  Return8BitConstant:
   97 00:43F9 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:43FC 6F -  -  -  		ld 		l,a
   99 00:43FD -  -  -  -  Return16BitConstant:
  100 00:43FD D9 -  -  -  		exx 								; clear HL'
  101 00:43FE 21 00 00 -  		ld 		hl,0
  102 00:4401 D9 -  -  -  		exx
  103 00:4402 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4404 C9 -  -  -  		ret
  105 00:4405 -  -  -  -  
  106 00:4405 -  -  -  -  ; ***************************************************************************************
  107 00:4405 -  -  -  -  ;
  108 00:4405 -  -  -  -  ;									Changes and Updates
  109 00:4405 -  -  -  -  ;
  110 00:4405 -  -  -  -  ; ***************************************************************************************
  111 00:4405 -  -  -  -  ;
  112 00:4405 -  -  -  -  ;		Date			Notes
  113 00:4405 -  -  -  -  ;		==== 			=====
  114 00:4405 -  -  -  -  ;
  115 00:4405 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:4405 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4405 -  -  -  -  ; ***************************************************************************************
    2 00:4405 -  -  -  -  ; ***************************************************************************************
    3 00:4405 -  -  -  -  ;
    4 00:4405 -  -  -  -  ;		Name : 		reference.asm
    5 00:4405 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4405 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4405 -  -  -  -  ;		Reviewed :	No
    8 00:4405 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4405 -  -  -  -  ;
   10 00:4405 -  -  -  -  ; ***************************************************************************************
   11 00:4405 -  -  -  -  ; ***************************************************************************************
   12 00:4405 -  -  -  -  
   13 00:4405 -  -  -  -  ; ***************************************************************************************
   14 00:4405 -  -  -  -  ;
   15 00:4405 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4405 -  -  -  -  ;
   17 00:4405 -  -  -  -  ; ***************************************************************************************
   18 00:4405 -  -  -  -  
   19 00:4405 -  -  -  -  Dereference:
   20 00:4405 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4407 C8 -  -  -  		ret 	z
   22 00:4408 -  -  -  -  
   23 00:4408 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:440A -  -  -  -  		
   25 00:440A CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:440C 20 20 -  -  		jr 		nz,_DRInternal
   27 00:440E -  -  -  -  
   28 00:440E CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4410 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4412 -  -  -  -  
   31 00:4412 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4413 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4417 D9 -  -  -  		exx
   34 00:4418 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4419 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:441A 23 -  -  -  		inc  	hl
   37 00:441B 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:441F D9 -  -  -  		exx 								; fix back
   39 00:4420 C9 -  -  -  		ret
   40 00:4421 -  -  -  -  
   41 00:4421 -  -  -  -  _DeRefByte:		
   42 00:4421 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4422 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4425 6F -  -  -  		ld	 	l,a
   45 00:4426 D9 -  -  -  		exx
   46 00:4427 21 00 00 -  		ld 		hl,$0000
   47 00:442A D9 -  -  -  		exx
   48 00:442B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:442D C9 -  -  -  		ret
   50 00:442E -  -  -  -  
   51 00:442E -  -  -  -  _DRInternal:
   52 00:442E 3E 04 C3 F5 
              41 -  -  -  		ERR_DISABLED
   53 00:4433 -  -  -  -  
   54 00:4433 -  -  -  -  ; ***************************************************************************************
   55 00:4433 -  -  -  -  ;
   56 00:4433 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4433 -  -  -  -  ;
   58 00:4433 -  -  -  -  ; ***************************************************************************************
   59 00:4433 -  -  -  -  
   60 00:4433 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4433 -  -  -  -  		#ifdef EZ80
   62 00:4433             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4433             		exx
   64 00:4433             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4433             		ld 		hl,$0000 					; zero HL'
   66 00:4433             		exx
   67 00:4433             		ld 		hl,(AConvert) 				; load UHL
   68 00:4433             		#endif
   69 00:4433 C9 -  -  -  		ret
   70 00:4434 -  -  -  -  
   71 00:4434 -  -  -  -  ; ***************************************************************************************
   72 00:4434 -  -  -  -  ;
   73 00:4434 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4434 -  -  -  -  ;
   75 00:4434 -  -  -  -  ; ***************************************************************************************
   76 00:4434 -  -  -  -  
   77 00:4434 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4434 -  -  -  -  		#ifdef EZ80
   79 00:4434             		ld 		(AConvert),hl
   80 00:4434             		ld 		hl,$0000
   81 00:4434             		ld 		(AConvert+3),hl
   82 00:4434             		exx
   83 00:4434             		ld 		hl,(AConvert+2)
   84 00:4434             		exx
   85 00:4434             		xor 	a
   86 00:4434             		ld 		(AConvert+2),a
   87 00:4434             		ld 		hl,(AConvert)
   88 00:4434             		#endif
   89 00:4434 C9 -  -  -  		ret
   90 00:4435 -  -  -  -  
   91 00:4435 -  -  -  -  ; ***************************************************************************************
   92 00:4435 -  -  -  -  ;
   93 00:4435 -  -  -  -  ;									Changes and Updates
   94 00:4435 -  -  -  -  ;
   95 00:4435 -  -  -  -  ; ***************************************************************************************
   96 00:4435 -  -  -  -  ;
   97 00:4435 -  -  -  -  ;		Date			Notes
   98 00:4435 -  -  -  -  ;		==== 			=====
   99 00:4435 -  -  -  -  ;
  100 00:4435 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4435 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4435 -  -  -  -  ; ***************************************************************************************
    2 00:4435 -  -  -  -  ; ***************************************************************************************
    3 00:4435 -  -  -  -  ;
    4 00:4435 -  -  -  -  ;		Name : 		term.asm
    5 00:4435 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4435 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4435 -  -  -  -  ;		Reviewed :	No
    8 00:4435 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4435 -  -  -  -  ;
   10 00:4435 -  -  -  -  ; ***************************************************************************************
   11 00:4435 -  -  -  -  ; ***************************************************************************************
   12 00:4435 -  -  -  -  
   13 00:4435 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4435             		add_hlhl_16
   15 00:4435             		exx
   16 00:4435             		adc_hlhl_16
   17 00:4435             		exx
   18 00:4435             #endmacro
   19 00:4435 -  -  -  -  
   20 00:4435 -  -  -  -  ; ***************************************************************************************
   21 00:4435 -  -  -  -  ;
   22 00:4435 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4435 -  -  -  -  ;
   24 00:4435 -  -  -  -  ; ***************************************************************************************
   25 00:4435 -  -  -  -  ;
   26 00:4435 -  -  -  -  ; 		Terms can be:
   27 00:4435 -  -  -  -  ;
   28 00:4435 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4435 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4435 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4435 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4435 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4435 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4435 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4435 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4435 -  -  -  -  ; 														reference of some sort.
   37 00:4435 -  -  -  -  ;
   38 00:4435 -  -  -  -  ; ***************************************************************************************
   39 00:4435 -  -  -  -  
   40 00:4435 -  -  -  -  EvaluateTerm:		
   41 00:4435 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4437 D9 -  -  -  		exx
   43 00:4438 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:443B D9 -  -  -  		exx
   45 00:443C 21 00 00 -  		ld 		hl,$0000		
   46 00:443F -  -  -  -  		;
   47 00:443F DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:4442 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:4444 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:4446 DA E4 44 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4449 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:444B C2 93 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:444E -  -  -  -  		;
   54 00:444E -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:444E -  -  -  -  		;
   56 00:444E -  -  -  -  _ETIntegerConstant:
   57 00:444E -  -  -  -  		;
   58 00:444E -  -  -  -  _ETIntegerLoop:		
   59 00:444E DD 7E 00 -  		ld 		a,(ix+0)
   60 00:4451 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:4453 B5 -  -  -  		or 		l 							; or into L
   62 00:4454 6F -  -  -  		ld 		l,a
   63 00:4455 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4457 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:445A C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:445C FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:445E D8 -  -  -  		ret 	c
   68 00:445F -  -  -  -  
   69 00:445F 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:4464 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4469 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:446E 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4473 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4478 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:447D -  -  -  -  
   76 00:447D 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:447F -  -  -  -  		;
   78 00:447F -  -  -  -  		; 		Found the $3F string marker.
   79 00:447F -  -  -  -  		;
   80 00:447F -  -  -  -  _ETStringMarker:		
   81 00:447F DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4481 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4483 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:4485 E1 -  -  -  		pop 	hl
   85 00:4486 11 00 00 -  		ld 		de,$0000
   86 00:4489 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:448C DD 19 -  -  		add 	ix,de
   88 00:448E DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:4490 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4492 C9 -  -  -  		ret
   91 00:4493 -  -  -  -  		;
   92 00:4493 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4493 -  -  -  -  		;
   94 00:4493 -  -  -  -  _ETFoundKeyword:
   95 00:4493 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:4495 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4497 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4499 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:449B 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:449D -  -  -  -  		;
  101 00:449D -  -  -  -  		;		Unary group 0
  102 00:449D -  -  -  -  		;
  103 00:449D E6 7F 21 00 
              00 6F 29 11 
              FE 48 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:44AF C3 51 40 -  		jp 		JumpCode 					; and go there.
  105 00:44B2 -  -  -  -  
  106 00:44B2 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:44B2 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:44B4 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:44B6 -  -  -  -  		;
  110 00:44B6 -  -  -  -  		; 		- term
  111 00:44B6 -  -  -  -  		;
  112 00:44B6 CD BC 43 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:44B9 CD 5C 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:44BC C9 -  -  -  		ret
  115 00:44BD -  -  -  -  		;
  116 00:44BD -  -  -  -  		;		! ? indirection check
  117 00:44BD -  -  -  -  		;
  118 00:44BD -  -  -  -  _ETCheckIndirection:	
  119 00:44BD FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:44BF 28 05 -  -  		jr 		z,_ETIndirection
  121 00:44C1 FE 83 -  -  		cp 		KWD_PLING
  122 00:44C3 C2 52 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:44C6 -  -  -  -  		;
  124 00:44C6 -  -  -  -  		; 		! ? indirection
  125 00:44C6 -  -  -  -  		;
  126 00:44C6 -  -  -  -  _ETIndirection:
  127 00:44C6 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:44C7 CD 35 44 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:44CA CD 05 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:44CD CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:44CF 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:44D1 CD 33 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:44D4 F1 -  -  -  		pop 	af 							; get type back
  134 00:44D5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:44D7 CB F9 -  -  		set 	CIsReference,c
  136 00:44D9 FE 83 -  -  		cp 		KWD_PLING
  137 00:44DB C8 -  -  -  		ret 	z
  138 00:44DC CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:44DE C9 -  -  -  		ret
  140 00:44DF -  -  -  -  _ETStringIndirect:
  141 00:44DF 3E 02 C3 F5 
              41 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:44E4 -  -  -  -  		;
  143 00:44E4 -  -  -  -  		; 		Found an identifier.
  144 00:44E4 -  -  -  -  		;
  145 00:44E4 -  -  -  -  _ETVariable:
  146 00:44E4 CD 75 46 -  		call 	FindVariable 				; find the variable.
  147 00:44E7 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:44E8 3E 0F C3 F5 
              41 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:44ED -  -  -  -  		
  150 00:44ED -  -  -  -  ; ***************************************************************************************
  151 00:44ED -  -  -  -  ;
  152 00:44ED -  -  -  -  ;									Changes and Updates
  153 00:44ED -  -  -  -  ;
  154 00:44ED -  -  -  -  ; ***************************************************************************************
  155 00:44ED -  -  -  -  ;
  156 00:44ED -  -  -  -  ;		Date			Notes
  157 00:44ED -  -  -  -  ;		==== 			=====
  158 00:44ED -  -  -  -  ;
  159 00:44ED -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:44ED -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:44ED -  -  -  -  ; ***************************************************************************************
    2 00:44ED -  -  -  -  ; ***************************************************************************************
    3 00:44ED -  -  -  -  ;
    4 00:44ED -  -  -  -  ;		Name : 		abs.asm
    5 00:44ED -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44ED -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44ED -  -  -  -  ;		Reviewed :	No
    8 00:44ED -  -  -  -  ;		Purpose :	Absolute value 
    9 00:44ED -  -  -  -  ;
   10 00:44ED -  -  -  -  ; ***************************************************************************************
   11 00:44ED -  -  -  -  ; ***************************************************************************************
   12 00:44ED -  -  -  -  
   13 00:44ED -  -  -  -  ; ***************************************************************************************
   14 00:44ED -  -  -  -  ;
   15 00:44ED -  -  -  -  ;								abs( unary function
   16 00:44ED -  -  -  -  ;
   17 00:44ED -  -  -  -  ; ***************************************************************************************
   18 00:44ED -  -  -  -  
   19 00:44ED -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:44ED CD BC 43 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:44F0 D9 -  -  -  		exx 								; test MSB
   22 00:44F1 CB 7C -  -  		bit 	7,h
   23 00:44F3 D9 -  -  -  		exx
   24 00:44F4 C4 5C 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:44F7 C9 -  -  -  		ret
   26 00:44F8 -  -  -  -  
   27 00:44F8 -  -  -  -  ; ***************************************************************************************
   28 00:44F8 -  -  -  -  ;
   29 00:44F8 -  -  -  -  ;									Changes and Updates
   30 00:44F8 -  -  -  -  ;
   31 00:44F8 -  -  -  -  ; ***************************************************************************************
   32 00:44F8 -  -  -  -  ;
   33 00:44F8 -  -  -  -  ;		Date			Notes
   34 00:44F8 -  -  -  -  ;		==== 			=====
   35 00:44F8 -  -  -  -  ;
   36 00:44F8 -  -  -  -  ; ***************************************************************************************
   37 00:44F8 -  -  -  -  		
Listing for file "_build.asm"
   33 00:44F8 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:44F8 -  -  -  -  ; ***************************************************************************************
    2 00:44F8 -  -  -  -  ; ***************************************************************************************
    3 00:44F8 -  -  -  -  ;
    4 00:44F8 -  -  -  -  ;		Name : 		asc.asm
    5 00:44F8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44F8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44F8 -  -  -  -  ;		Reviewed :	No
    8 00:44F8 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:44F8 -  -  -  -  ;
   10 00:44F8 -  -  -  -  ; ***************************************************************************************
   11 00:44F8 -  -  -  -  ; ***************************************************************************************
   12 00:44F8 -  -  -  -  
   13 00:44F8 -  -  -  -  ; ***************************************************************************************
   14 00:44F8 -  -  -  -  ;
   15 00:44F8 -  -  -  -  ;								Asc unary function
   16 00:44F8 -  -  -  -  ;
   17 00:44F8 -  -  -  -  ; ***************************************************************************************
   18 00:44F8 -  -  -  -  
   19 00:44F8 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:44F8 CD C8 43 -  		call	EvaluateStringTerm			; Get string
   21 00:44FB 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:44FC C3 F9 43 -  		jp 		Return8BitConstant
   23 00:44FF -  -  -  -  
   24 00:44FF -  -  -  -  ; ***************************************************************************************
   25 00:44FF -  -  -  -  ;
   26 00:44FF -  -  -  -  ;									Changes and Updates
   27 00:44FF -  -  -  -  ;
   28 00:44FF -  -  -  -  ; ***************************************************************************************
   29 00:44FF -  -  -  -  ;
   30 00:44FF -  -  -  -  ;		Date			Notes
   31 00:44FF -  -  -  -  ;		==== 			=====
   32 00:44FF -  -  -  -  ;
   33 00:44FF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:44FF -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:44FF -  -  -  -  ; ***************************************************************************************
    2 00:44FF -  -  -  -  ; ***************************************************************************************
    3 00:44FF -  -  -  -  ;
    4 00:44FF -  -  -  -  ;		Name : 		chr.asm
    5 00:44FF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44FF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44FF -  -  -  -  ;		Reviewed :	No
    8 00:44FF -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:44FF -  -  -  -  ;
   10 00:44FF -  -  -  -  ; ***************************************************************************************
   11 00:44FF -  -  -  -  ; ***************************************************************************************
   12 00:44FF -  -  -  -  
   13 00:44FF -  -  -  -  ; ***************************************************************************************
   14 00:44FF -  -  -  -  ;
   15 00:44FF -  -  -  -  ;								Chr$() unary function
   16 00:44FF -  -  -  -  ;
   17 00:44FF -  -  -  -  ; ***************************************************************************************
   18 00:44FF -  -  -  -  
   19 00:44FF -  -  -  -  Unary_Chr:	;; [chr]
   20 00:44FF CD D0 41 -  		call 	CheckDollar
   21 00:4502 CD BC 43 -  		call 	EvaluateIntegerTerm
   22 00:4505 7D -  -  -  		ld 		a,l 						; get character
   23 00:4506 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4508 21 7E 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:450B 36 0D -  -  		ld 		(hl),13
   26 00:450D 2B -  -  -  		dec 	hl
   27 00:450E 77 -  -  -  		ld 		(hl),a
   28 00:450F C9 -  -  -  		ret
   29 00:4510 -  -  -  -  
   30 00:4510 -  -  -  -  ; ***************************************************************************************
   31 00:4510 -  -  -  -  ;
   32 00:4510 -  -  -  -  ;									Changes and Updates
   33 00:4510 -  -  -  -  ;
   34 00:4510 -  -  -  -  ; ***************************************************************************************
   35 00:4510 -  -  -  -  ;
   36 00:4510 -  -  -  -  ;		Date			Notes
   37 00:4510 -  -  -  -  ;		==== 			=====
   38 00:4510 -  -  -  -  ;
   39 00:4510 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:4510 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4510 -  -  -  -  ; ***************************************************************************************
    2 00:4510 -  -  -  -  ; ***************************************************************************************
    3 00:4510 -  -  -  -  ;
    4 00:4510 -  -  -  -  ;		Name : 		len.asm
    5 00:4510 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4510 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4510 -  -  -  -  ;		Reviewed :	None
    8 00:4510 -  -  -  -  ;		Purpose :	String Length
    9 00:4510 -  -  -  -  ;
   10 00:4510 -  -  -  -  ; ***************************************************************************************
   11 00:4510 -  -  -  -  ; ***************************************************************************************
   12 00:4510 -  -  -  -  
   13 00:4510 -  -  -  -  ; ***************************************************************************************
   14 00:4510 -  -  -  -  ;
   15 00:4510 -  -  -  -  ;								Len unary function
   16 00:4510 -  -  -  -  ;
   17 00:4510 -  -  -  -  ; ***************************************************************************************
   18 00:4510 -  -  -  -  
   19 00:4510 -  -  -  -  Unary_Len:	;; [len]
   20 00:4510 CD C8 43 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4513 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4514 CD D3 42 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4517 -  -  -  -  _ULCount:
   24 00:4517 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4518 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:451A D8 -  -  -  		ret 	c
   27 00:451B 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:451C 13 -  -  -  		inc 	de
   29 00:451D 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:451F -  -  -  -  
   31 00:451F -  -  -  -  ; ***************************************************************************************
   32 00:451F -  -  -  -  ;
   33 00:451F -  -  -  -  ;									Changes and Updates
   34 00:451F -  -  -  -  ;
   35 00:451F -  -  -  -  ; ***************************************************************************************
   36 00:451F -  -  -  -  ;
   37 00:451F -  -  -  -  ;		Date			Notes
   38 00:451F -  -  -  -  ;		==== 			=====
   39 00:451F -  -  -  -  ;
   40 00:451F -  -  -  -  ; ***************************************************************************************
   41 00:451F -  -  -  -  		
Listing for file "_build.asm"
   36 00:451F -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:451F -  -  -  -  ; ***************************************************************************************
    2 00:451F -  -  -  -  ; ***************************************************************************************
    3 00:451F -  -  -  -  ;
    4 00:451F -  -  -  -  ;		Name : 		makestring.asm
    5 00:451F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:451F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:451F -  -  -  -  ;		Reviewed :	No
    8 00:451F -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:451F -  -  -  -  ;
   10 00:451F -  -  -  -  ; ***************************************************************************************
   11 00:451F -  -  -  -  ; ***************************************************************************************
   12 00:451F -  -  -  -  
   13 00:451F -  -  -  -  ; ***************************************************************************************
   14 00:451F -  -  -  -  ;
   15 00:451F -  -  -  -  ;								Str$() unary function
   16 00:451F -  -  -  -  ;
   17 00:451F -  -  -  -  ; ***************************************************************************************
   18 00:451F -  -  -  -  
   19 00:451F -  -  -  -  Unary_MkStr:	;; [$]
   20 00:451F CD BC 43 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4522 CD 33 44 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4525 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4527 C9 -  -  -  		ret
   24 00:4528 -  -  -  -  
   25 00:4528 -  -  -  -  ; ***************************************************************************************
   26 00:4528 -  -  -  -  ;
   27 00:4528 -  -  -  -  ;									Changes and Updates
   28 00:4528 -  -  -  -  ;
   29 00:4528 -  -  -  -  ; ***************************************************************************************
   30 00:4528 -  -  -  -  ;
   31 00:4528 -  -  -  -  ;		Date			Notes
   32 00:4528 -  -  -  -  ;		==== 			=====
   33 00:4528 -  -  -  -  ;
   34 00:4528 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:4528 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4528 -  -  -  -  ; ***************************************************************************************
    2 00:4528 -  -  -  -  ; ***************************************************************************************
    3 00:4528 -  -  -  -  ;
    4 00:4528 -  -  -  -  ;		Name : 		not.asm
    5 00:4528 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4528 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4528 -  -  -  -  ;		Reviewed :	No
    8 00:4528 -  -  -  -  ;		Purpose :	Logical not
    9 00:4528 -  -  -  -  ;
   10 00:4528 -  -  -  -  ; ***************************************************************************************
   11 00:4528 -  -  -  -  ; ***************************************************************************************
   12 00:4528 -  -  -  -  
   13 00:4528 -  -  -  -  ; ***************************************************************************************
   14 00:4528 -  -  -  -  ;
   15 00:4528 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4528 -  -  -  -  ;
   17 00:4528 -  -  -  -  ; ***************************************************************************************
   18 00:4528 -  -  -  -  
   19 00:4528 -  -  -  -  Unary_Not:		;; [not]
   20 00:4528 CD BC 43 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:452B CD 32 45 -  		call 	__UNSwap 					; not and swap twice.
   22 00:452E CD 32 45 -  		call 	__UNSwap		
   23 00:4531 C9 -  -  -  		ret
   24 00:4532 -  -  -  -  
   25 00:4532 -  -  -  -  __UNSwap:
   26 00:4532 7C -  -  -  		ld 		a,h
   27 00:4533 2F -  -  -  		cpl
   28 00:4534 67 -  -  -  		ld 		h,a
   29 00:4535 7D -  -  -  		ld 		a,l
   30 00:4536 2F -  -  -  		cpl 	
   31 00:4537 6F -  -  -  		ld 		l,a
   32 00:4538 D9 -  -  -  		exx
   33 00:4539 C9 -  -  -  		ret
   34 00:453A -  -  -  -  
   35 00:453A -  -  -  -  ; ***************************************************************************************
   36 00:453A -  -  -  -  ;
   37 00:453A -  -  -  -  ;									Changes and Updates
   38 00:453A -  -  -  -  ;
   39 00:453A -  -  -  -  ; ***************************************************************************************
   40 00:453A -  -  -  -  ;
   41 00:453A -  -  -  -  ;		Date			Notes
   42 00:453A -  -  -  -  ;		==== 			=====
   43 00:453A -  -  -  -  ;
   44 00:453A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:453A -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:453A -  -  -  -  ; ***************************************************************************************
    2 00:453A -  -  -  -  ; ***************************************************************************************
    3 00:453A -  -  -  -  ;
    4 00:453A -  -  -  -  ;		Name : 		page.asm
    5 00:453A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:453A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:453A -  -  -  -  ;		Reviewed :	No
    8 00:453A -  -  -  -  ;		Purpose :	Various constants.
    9 00:453A -  -  -  -  ;
   10 00:453A -  -  -  -  ; ***************************************************************************************
   11 00:453A -  -  -  -  ; ***************************************************************************************
   12 00:453A -  -  -  -  
   13 00:453A -  -  -  -  ; ***************************************************************************************
   14 00:453A -  -  -  -  ;
   15 00:453A -  -  -  -  ;							page unary function (no bracket)
   16 00:453A -  -  -  -  ;
   17 00:453A -  -  -  -  ; ***************************************************************************************
   18 00:453A -  -  -  -  
   19 00:453A -  -  -  -  Unary_Page:	;; [page]
   20 00:453A 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:453D D9 -  -  -  			exx
   22 00:453E 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:4541 D9 -  -  -  			exx
   24 00:4542 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4544 C9 -  -  -  			ret
   26 00:4545 -  -  -  -  
   27 00:4545 -  -  -  -  ; ***************************************************************************************
   28 00:4545 -  -  -  -  ;
   29 00:4545 -  -  -  -  ;									Changes and Updates
   30 00:4545 -  -  -  -  ;
   31 00:4545 -  -  -  -  ; ***************************************************************************************
   32 00:4545 -  -  -  -  ;
   33 00:4545 -  -  -  -  ;		Date			Notes
   34 00:4545 -  -  -  -  ;		==== 			=====
   35 00:4545 -  -  -  -  ;
   36 00:4545 -  -  -  -  ; ***************************************************************************************
   37 00:4545 -  -  -  -  			
Listing for file "_build.asm"
   39 00:4545 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:4545 -  -  -  -  ; ***************************************************************************************
    2 00:4545 -  -  -  -  ; ***************************************************************************************
    3 00:4545 -  -  -  -  ;
    4 00:4545 -  -  -  -  ;		Name : 		random.asm
    5 00:4545 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4545 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4545 -  -  -  -  ;		Reviewed :	No
    8 00:4545 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:4545 -  -  -  -  ;
   10 00:4545 -  -  -  -  ; ***************************************************************************************
   11 00:4545 -  -  -  -  ; ***************************************************************************************
   12 00:4545 -  -  -  -  
   13 00:4545 -  -  -  -  ; ***************************************************************************************
   14 00:4545 -  -  -  -  ;
   15 00:4545 -  -  -  -  ;								Random unary function
   16 00:4545 -  -  -  -  ;
   17 00:4545 -  -  -  -  ; ***************************************************************************************
   18 00:4545 -  -  -  -  
   19 00:4545 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:4545 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:4546 CD BC 43 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4549 D9 -  -  -  		exx 								; is it -ve
   23 00:454A CB 7C -  -  		bit 	7,h
   24 00:454C D9 -  -  -  		exx
   25 00:454D 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:454F 22 5D 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:4552 D9 -  -  -  		exx
   28 00:4553 22 61 40 -  		ld 		(RandomSeed+4),hl
   29 00:4556 D9 -  -  -  		exx
   30 00:4557 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4559 C9 -  -  -  		ret
   32 00:455A -  -  -  -  _URDontSeed:		
   33 00:455A -  -  -  -  
   34 00:455A CD E5 4A -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:455D 28 19 -  -  		jr 		z,_URFail
   36 00:455F E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4560 D9 -  -  -  		exx
   38 00:4561 E5 -  -  -  		push 	hl
   39 00:4562 D9 -  -  -  		exx
   40 00:4563 -  -  -  -  		;
   41 00:4563 CD 87 45 -  		call 	URandomHL 					; get random HL'HL
   42 00:4566 D9 -  -  -  		exx
   43 00:4567 CD 87 45 -  		call 	URandomHL
   44 00:456A CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:456C D9 -  -  -  		exx
   46 00:456D -  -  -  -  		;
   47 00:456D D9 -  -  -  		exx 								; restore range.
   48 00:456E D1 -  -  -  		pop 	de
   49 00:456F D9 -  -  -  		exx
   50 00:4570 D1 -  -  -  		pop 	de
   51 00:4571 -  -  -  -  		;
   52 00:4571 CD 91 49 -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:4574 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:4575 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4577 C9 -  -  -  		ret
   56 00:4578 -  -  -  -  _URFail:
   57 00:4578 3E 03 C3 F5 
              41 -  -  -  		ERR_BADVALUE
   58 00:457D -  -  -  -  ; ***************************************************************************************
   59 00:457D -  -  -  -  ;
   60 00:457D -  -  -  -  ; 									Push RNG off zero
   61 00:457D -  -  -  -  ;
   62 00:457D -  -  -  -  ; ***************************************************************************************
   63 00:457D -  -  -  -  
   64 00:457D -  -  -  -  UnaryRandomInitialise:
   65 00:457D 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:457F -  -  -  -  _URILoop:
   67 00:457F C5 -  -  -  		push 	bc
   68 00:4580 CD 87 45 -  		call 	URandomHL
   69 00:4583 C1 -  -  -  		pop 	bc
   70 00:4584 10 F9 -  -  		djnz 	_URILoop
   71 00:4586 C9 -  -  -  		ret
   72 00:4587 -  -  -  -  
   73 00:4587 -  -  -  -  ; ***************************************************************************************
   74 00:4587 -  -  -  -  ;
   75 00:4587 -  -  -  -  ;							16 bit random number generator
   76 00:4587 -  -  -  -  ;
   77 00:4587 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4587 -  -  -  -  ;		Actual author unspecified.
   79 00:4587 -  -  -  -  ;
   80 00:4587 -  -  -  -  ; ***************************************************************************************
   81 00:4587 -  -  -  -  
   82 00:4587 -  -  -  -  URandomHL:
   83 00:4587 2A 5D 40 -  	    ld 		hl,(RandomSeed)
   84 00:458A ED 5B 61 40 	    ld 		de,(RandomSeed+4)
   85 00:458E 44 -  -  -  	    ld 		b,h
   86 00:458F 4D -  -  -  	    ld 		c,l
   87 00:4590 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:4595 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:459A 2C -  -  -  	    inc 	l
   90 00:459B 09 -  -  -  	    add 	hl,bc
   91 00:459C 22 5D 40 -  	    ld 		(RandomSeed),hl
   92 00:459F 2A 61 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:45A2 ED 5A -  -  	    adc 	hl,de
   94 00:45A4 22 61 40 -  	    ld 		(RandomSeed+4),hl
   95 00:45A7 EB -  -  -  	    ex 		de,hl
   96 00:45A8 2A 65 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:45AB ED 4B 69 40 	    ld 		bc,(RandomSeed+12)
   98 00:45AF 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:45B4 ED 43 69 40 	    ld 		(RandomSeed+12),bc
  100 00:45B8 9F -  -  -  	    sbc 	a,a
  101 00:45B9 E6 C5 -  -  	    and 	%11000101
  102 00:45BB AD -  -  -  	    xor 	l
  103 00:45BC 6F -  -  -  	    ld 		l,a
  104 00:45BD 22 65 40 -  	    ld 		(RandomSeed+8),hl
  105 00:45C0 EB -  -  -  	    ex 		de,hl
  106 00:45C1 09 -  -  -  	    add 	hl,bc
  107 00:45C2 C9 -  -  -  	    ret		
  108 00:45C3 -  -  -  -  
  109 00:45C3 -  -  -  -  ; ***************************************************************************************
  110 00:45C3 -  -  -  -  ;
  111 00:45C3 -  -  -  -  ;									Changes and Updates
  112 00:45C3 -  -  -  -  ;
  113 00:45C3 -  -  -  -  ; ***************************************************************************************
  114 00:45C3 -  -  -  -  ;
  115 00:45C3 -  -  -  -  ;		Date			Notes
  116 00:45C3 -  -  -  -  ;		==== 			=====
  117 00:45C3 -  -  -  -  ;
  118 00:45C3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:45C3 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:45C3 -  -  -  -  ; ***************************************************************************************
    2 00:45C3 -  -  -  -  ; ***************************************************************************************
    3 00:45C3 -  -  -  -  ;
    4 00:45C3 -  -  -  -  ;		Name : 		sgn.asm
    5 00:45C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45C3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45C3 -  -  -  -  ;		Reviewed :	No
    8 00:45C3 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:45C3 -  -  -  -  ;
   10 00:45C3 -  -  -  -  ; ***************************************************************************************
   11 00:45C3 -  -  -  -  ; ***************************************************************************************
   12 00:45C3 -  -  -  -  
   13 00:45C3 -  -  -  -  ; ***************************************************************************************
   14 00:45C3 -  -  -  -  ;
   15 00:45C3 -  -  -  -  ;								sgn unary function
   16 00:45C3 -  -  -  -  ;
   17 00:45C3 -  -  -  -  ; ***************************************************************************************
   18 00:45C3 -  -  -  -  
   19 00:45C3 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:45C3 CD BC 43 -  		call	EvaluateIntegerTerm 		; get value
   21 00:45C6 CD E5 4A -  		call 	Int32Zero 					; integer sgn() code
   22 00:45C9 CA D3 42 -  		jp 		z,UnaryInt32False
   23 00:45CC D9 -  -  -  		exx
   24 00:45CD CB 7C -  -  		bit 	7,h
   25 00:45CF D9 -  -  -  		exx
   26 00:45D0 C2 CF 42 -  		jp 		nz,UnaryInt32True
   27 00:45D3 3E 01 -  -  		ld 		a,1
   28 00:45D5 C3 F9 43 -  		jp 		Return8BitConstant
   29 00:45D8 -  -  -  -  
   30 00:45D8 -  -  -  -  ; ***************************************************************************************
   31 00:45D8 -  -  -  -  ;
   32 00:45D8 -  -  -  -  ;									Changes and Updates
   33 00:45D8 -  -  -  -  ;
   34 00:45D8 -  -  -  -  ; ***************************************************************************************
   35 00:45D8 -  -  -  -  ;
   36 00:45D8 -  -  -  -  ;		Date			Notes
   37 00:45D8 -  -  -  -  ;		==== 			=====
   38 00:45D8 -  -  -  -  ;
   39 00:45D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:45D8 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:45D8 -  -  -  -  ; ***************************************************************************************
    2 00:45D8 -  -  -  -  ; ***************************************************************************************
    3 00:45D8 -  -  -  -  ;
    4 00:45D8 -  -  -  -  ;		Name : 		simple.asm
    5 00:45D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45D8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45D8 -  -  -  -  ;		Reviewed :	No
    8 00:45D8 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:45D8 -  -  -  -  ;
   10 00:45D8 -  -  -  -  ; ***************************************************************************************
   11 00:45D8 -  -  -  -  ; ***************************************************************************************
   12 00:45D8 -  -  -  -  
   13 00:45D8 -  -  -  -  ; ***************************************************************************************
   14 00:45D8 -  -  -  -  ;
   15 00:45D8 -  -  -  -  ;								( unary function (think about it)
   16 00:45D8 -  -  -  -  ;
   17 00:45D8 -  -  -  -  ; ***************************************************************************************
   18 00:45D8 -  -  -  -  
   19 00:45D8 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:45D8 CD 6A 43 -  		call 	EvaluateAtPrecedence0
   21 00:45DB C3 C3 41 -  		jp  	CheckRightBracket
   22 00:45DE -  -  -  -  
   23 00:45DE -  -  -  -  ; ***************************************************************************************
   24 00:45DE -  -  -  -  ;
   25 00:45DE -  -  -  -  ;									Handle &x
   26 00:45DE -  -  -  -  ;
   27 00:45DE -  -  -  -  ; ***************************************************************************************
   28 00:45DE -  -  -  -  
   29 00:45DE -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:45DE DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:45E1 E6 C0 -  -  		and 		$C0
   32 00:45E3 FE 40 -  -  		cp 			$40
   33 00:45E5 C2 52 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:45E8 C3 35 44 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:45EB -  -  -  -  
   36 00:45EB -  -  -  -  ; ***************************************************************************************
   37 00:45EB -  -  -  -  ;
   38 00:45EB -  -  -  -  ;									Changes and Updates
   39 00:45EB -  -  -  -  ;
   40 00:45EB -  -  -  -  ; ***************************************************************************************
   41 00:45EB -  -  -  -  ;
   42 00:45EB -  -  -  -  ;		Date			Notes
   43 00:45EB -  -  -  -  ;		==== 			=====
   44 00:45EB -  -  -  -  ;
   45 00:45EB -  -  -  -  ; ***************************************************************************************
   46 00:45EB -  -  -  -  		
Listing for file "_build.asm"
   42 00:45EB -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:45EB -  -  -  -  ; ***************************************************************************************
    2 00:45EB -  -  -  -  ; ***************************************************************************************
    3 00:45EB -  -  -  -  ;
    4 00:45EB -  -  -  -  ;		Name : 		str.asm
    5 00:45EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45EB -  -  -  -  ;		Reviewed :	No
    8 00:45EB -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:45EB -  -  -  -  ;
   10 00:45EB -  -  -  -  ; ***************************************************************************************
   11 00:45EB -  -  -  -  ; ***************************************************************************************
   12 00:45EB -  -  -  -  
   13 00:45EB -  -  -  -  ; ***************************************************************************************
   14 00:45EB -  -  -  -  ;
   15 00:45EB -  -  -  -  ;								Str$() unary function
   16 00:45EB -  -  -  -  ;
   17 00:45EB -  -  -  -  ; ***************************************************************************************
   18 00:45EB -  -  -  -  
   19 00:45EB -  -  -  -  Unary_Str:	;; [str]
   20 00:45EB CD D0 41 -  		call 	CheckDollar
   21 00:45EE CD BC 43 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:45F1 01 6D 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:45F4 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:45F6 CD 26 4B -  		call 	Int32ToString 				
   25 00:45F9 21 6D 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:45FC 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:45FE C9 -  -  -  		ret
   28 00:45FF -  -  -  -  
   29 00:45FF -  -  -  -  ; ***************************************************************************************
   30 00:45FF -  -  -  -  ;
   31 00:45FF -  -  -  -  ;									Changes and Updates
   32 00:45FF -  -  -  -  ;
   33 00:45FF -  -  -  -  ; ***************************************************************************************
   34 00:45FF -  -  -  -  ;
   35 00:45FF -  -  -  -  ;		Date			Notes
   36 00:45FF -  -  -  -  ;		==== 			=====
   37 00:45FF -  -  -  -  ;
   38 00:45FF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:45FF -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:45FF -  -  -  -  ; ***************************************************************************************
    2 00:45FF -  -  -  -  ; ***************************************************************************************
    3 00:45FF -  -  -  -  ;
    4 00:45FF -  -  -  -  ;		Name : 		time.asm
    5 00:45FF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45FF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45FF -  -  -  -  ;		Reviewed :	No
    8 00:45FF -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:45FF -  -  -  -  ;
   10 00:45FF -  -  -  -  ; ***************************************************************************************
   11 00:45FF -  -  -  -  ; ***************************************************************************************
   12 00:45FF -  -  -  -  
   13 00:45FF -  -  -  -  ; ***************************************************************************************
   14 00:45FF -  -  -  -  ;
   15 00:45FF -  -  -  -  ;							Get system time in ms
   16 00:45FF -  -  -  -  ;
   17 00:45FF -  -  -  -  ; ***************************************************************************************
   18 00:45FF -  -  -  -  
   19 00:45FF -  -  -  -  Unary_Time:	;; [time]
   20 00:45FF CD 9D 4B -  			call 	SYSGetTimer
   21 00:4602 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4604 C9 -  -  -  			ret
   23 00:4605 -  -  -  -  
   24 00:4605 -  -  -  -  ; ***************************************************************************************
   25 00:4605 -  -  -  -  ;
   26 00:4605 -  -  -  -  ;									Changes and Updates
   27 00:4605 -  -  -  -  ;
   28 00:4605 -  -  -  -  ; ***************************************************************************************
   29 00:4605 -  -  -  -  ;
   30 00:4605 -  -  -  -  ;		Date			Notes
   31 00:4605 -  -  -  -  ;		==== 			=====
   32 00:4605 -  -  -  -  ;
   33 00:4605 -  -  -  -  ; ***************************************************************************************
   34 00:4605 -  -  -  -  			
Listing for file "_build.asm"
   44 00:4605 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4605 -  -  -  -  ; ***************************************************************************************
    2 00:4605 -  -  -  -  ; ***************************************************************************************
    3 00:4605 -  -  -  -  ;
    4 00:4605 -  -  -  -  ;		Name : 		top.asm
    5 00:4605 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4605 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4605 -  -  -  -  ;		Reviewed :	No
    8 00:4605 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4605 -  -  -  -  ;
   10 00:4605 -  -  -  -  ; ***************************************************************************************
   11 00:4605 -  -  -  -  ; ***************************************************************************************
   12 00:4605 -  -  -  -  
   13 00:4605 -  -  -  -  ; ***************************************************************************************
   14 00:4605 -  -  -  -  ;
   15 00:4605 -  -  -  -  ;							page unary function (no bracket)
   16 00:4605 -  -  -  -  ;
   17 00:4605 -  -  -  -  ; ***************************************************************************************
   18 00:4605 -  -  -  -  
   19 00:4605 -  -  -  -  Unary_Top:	;; [top]
   20 00:4605 2A 45 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4608 D9 -  -  -  			exx
   22 00:4609 2A 47 40 -  			ld 		hl,(TopMemory+2)
   23 00:460C D9 -  -  -  			exx
   24 00:460D 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:460F C9 -  -  -  			ret
   26 00:4610 -  -  -  -  
   27 00:4610 -  -  -  -  ; ***************************************************************************************
   28 00:4610 -  -  -  -  ;
   29 00:4610 -  -  -  -  ;									Changes and Updates
   30 00:4610 -  -  -  -  ;
   31 00:4610 -  -  -  -  ; ***************************************************************************************
   32 00:4610 -  -  -  -  ;
   33 00:4610 -  -  -  -  ;		Date			Notes
   34 00:4610 -  -  -  -  ;		==== 			=====
   35 00:4610 -  -  -  -  ;
   36 00:4610 -  -  -  -  ; ***************************************************************************************
   37 00:4610 -  -  -  -  			
Listing for file "_build.asm"
   45 00:4610 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:4610 -  -  -  -  ; ***************************************************************************************
    2 00:4610 -  -  -  -  ; ***************************************************************************************
    3 00:4610 -  -  -  -  ;
    4 00:4610 -  -  -  -  ;		Name : 		val.asm
    5 00:4610 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4610 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4610 -  -  -  -  ;		Reviewed :	No
    8 00:4610 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:4610 -  -  -  -  ;
   10 00:4610 -  -  -  -  ; ***************************************************************************************
   11 00:4610 -  -  -  -  ; ***************************************************************************************
   12 00:4610 -  -  -  -  
   13 00:4610 -  -  -  -  ; ***************************************************************************************
   14 00:4610 -  -  -  -  ;
   15 00:4610 -  -  -  -  ;								val( unary function
   16 00:4610 -  -  -  -  ;
   17 00:4610 -  -  -  -  ; ***************************************************************************************
   18 00:4610 -  -  -  -  
   19 00:4610 -  -  -  -  Unary_Val:	;; [val]
   20 00:4610 CD C8 43 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4613 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4614 C1 -  -  -  		pop 	bc
   23 00:4615 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4617 CD 1C 4A -  		call 	Int32FromString 			; get the integer part.
   25 00:461A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:461C C8 -  -  -  		ret		z 							; okay
   27 00:461D 3E 03 C3 F5 
              41 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4622 -  -  -  -  
   29 00:4622 -  -  -  -  ; ***************************************************************************************
   30 00:4622 -  -  -  -  ;
   31 00:4622 -  -  -  -  ;									Changes and Updates
   32 00:4622 -  -  -  -  ;
   33 00:4622 -  -  -  -  ; ***************************************************************************************
   34 00:4622 -  -  -  -  ;
   35 00:4622 -  -  -  -  ;		Date			Notes
   36 00:4622 -  -  -  -  ;		==== 			=====
   37 00:4622 -  -  -  -  ;
   38 00:4622 -  -  -  -  ; ***************************************************************************************
   39 00:4622 -  -  -  -  		
Listing for file "_build.asm"
   46 00:4622 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4622 -  -  -  -  ; ***************************************************************************************
    2 00:4622 -  -  -  -  ; ***************************************************************************************
    3 00:4622 -  -  -  -  ;
    4 00:4622 -  -  -  -  ;		Name : 		clear.asm
    5 00:4622 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4622 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4622 -  -  -  -  ;		Reviewed :	No
    8 00:4622 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4622 -  -  -  -  ;
   10 00:4622 -  -  -  -  ; ***************************************************************************************
   11 00:4622 -  -  -  -  ; ***************************************************************************************
   12 00:4622 -  -  -  -  
   13 00:4622 -  -  -  -  ; ***************************************************************************************
   14 00:4622 -  -  -  -  ;
   15 00:4622 -  -  -  -  ;										CLEAR command
   16 00:4622 -  -  -  -  ;
   17 00:4622 -  -  -  -  ; ***************************************************************************************
   18 00:4622 -  -  -  -  
   19 00:4622 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4622 -  -  -  -  		;
   21 00:4622 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4622 -  -  -  -  		;
   23 00:4622 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4625 -  -  -  -  _CCFindLow:
   25 00:4625 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4628 5E -  -  -  		ld 		e,(hl)		
   27 00:4629 19 -  -  -  		add 	hl,de
   28 00:462A 7B -  -  -  		ld 		a,e
   29 00:462B B7 -  -  -  		or 		a
   30 00:462C 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:462E 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:462F 22 45 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4632 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4633 22 41 40 -  		ld 		(LowAllocMemory),hl
   35 00:4636 -  -  -  -  		;
   36 00:4636 -  -  -  -  		; 	 		Reset the language stack
   37 00:4636 -  -  -  -  		;
   38 00:4636 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:4639 -  -  -  -  		;
   40 00:4639 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:463B 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:463E 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:4641 19 -  -  -  		add 	hl,de
   44 00:4642 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4644 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4647 -  -  -  -  		;
   47 00:4647 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:464A 19 -  -  -  		add 	hl,de
   49 00:464B 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:464E -  -  -  -  		;
   51 00:464E -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:464E -  -  -  -  		;
   53 00:464E -  -  -  -  
   54 00:464E -  -  -  -  		;
   55 00:464E -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:464E -  -  -  -  		;
   57 00:464E CD 7D 45 -  		call 	UnaryRandomInitialise
   58 00:4651 -  -  -  -  		;
   59 00:4651 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:4651 -  -  -  -  		;
   61 00:4651 C9 -  -  -  		ret
   62 00:4652 -  -  -  -  
   63 00:4652 -  -  -  -  ; ***************************************************************************************
   64 00:4652 -  -  -  -  ;
   65 00:4652 -  -  -  -  ;									Changes and Updates
   66 00:4652 -  -  -  -  ;
   67 00:4652 -  -  -  -  ; ***************************************************************************************
   68 00:4652 -  -  -  -  ;
   69 00:4652 -  -  -  -  ;		Date			Notes
   70 00:4652 -  -  -  -  ;		==== 			=====
   71 00:4652 -  -  -  -  ;
   72 00:4652 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:4652 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4652 -  -  -  -  ; ***************************************************************************************
    2 00:4652 -  -  -  -  ; ***************************************************************************************
    3 00:4652 -  -  -  -  ;
    4 00:4652 -  -  -  -  ;		Name : 		instance.asm
    5 00:4652 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4652 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4652 -  -  -  -  ;		Reviewed :	No
    8 00:4652 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4652 -  -  -  -  ;
   10 00:4652 -  -  -  -  ; ***************************************************************************************
   11 00:4652 -  -  -  -  ; ***************************************************************************************
   12 00:4652 -  -  -  -  
   13 00:4652 -  -  -  -  ; ***************************************************************************************
   14 00:4652 -  -  -  -  ;
   15 00:4652 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4652 -  -  -  -  ;
   17 00:4652 -  -  -  -  ; ***************************************************************************************
   18 00:4652 -  -  -  -  
   19 00:4652 -  -  -  -  SetCurrentInstance:
   20 00:4652 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4656 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:4659 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:465D -  -  -  -  
   24 00:465D C9 -  -  -  		ret
   25 00:465E -  -  -  -  
   26 00:465E -  -  -  -  
   27 00:465E -  -  -  -  ; ***************************************************************************************
   28 00:465E -  -  -  -  ;
   29 00:465E -  -  -  -  ;									Changes and Updates
   30 00:465E -  -  -  -  ;
   31 00:465E -  -  -  -  ; ***************************************************************************************
   32 00:465E -  -  -  -  ;
   33 00:465E -  -  -  -  ;		Date			Notes
   34 00:465E -  -  -  -  ;		==== 			=====
   35 00:465E -  -  -  -  ;
   36 00:465E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:465E -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:465E -  -  -  -  ; ***************************************************************************************
    2 00:465E -  -  -  -  ; ***************************************************************************************
    3 00:465E -  -  -  -  ;
    4 00:465E -  -  -  -  ;		Name : 		new.asm
    5 00:465E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465E -  -  -  -  ;		Reviewed :	No
    8 00:465E -  -  -  -  ;		Purpose :	New command.
    9 00:465E -  -  -  -  ;
   10 00:465E -  -  -  -  ; ***************************************************************************************
   11 00:465E -  -  -  -  ; ***************************************************************************************
   12 00:465E -  -  -  -  
   13 00:465E -  -  -  -  ; ***************************************************************************************
   14 00:465E -  -  -  -  ;
   15 00:465E -  -  -  -  ;										NEW command
   16 00:465E -  -  -  -  ;
   17 00:465E -  -  -  -  ; ***************************************************************************************
   18 00:465E -  -  -  -  
   19 00:465E -  -  -  -  Command_NEW: 	;; [new]
   20 00:465E 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4661 36 00 -  -  		ld 		(hl),0
   22 00:4663 CD 22 46 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4666 3E 00 C3 F5 
              41 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:466B -  -  -  -  
   25 00:466B -  -  -  -  ; ***************************************************************************************
   26 00:466B -  -  -  -  ;
   27 00:466B -  -  -  -  ;									Changes and Updates
   28 00:466B -  -  -  -  ;
   29 00:466B -  -  -  -  ; ***************************************************************************************
   30 00:466B -  -  -  -  ;
   31 00:466B -  -  -  -  ;		Date			Notes
   32 00:466B -  -  -  -  ;		==== 			=====
   33 00:466B -  -  -  -  ;
   34 00:466B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:466B -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:466B -  -  -  -  ; ***************************************************************************************
    2 00:466B -  -  -  -  ; ***************************************************************************************
    3 00:466B -  -  -  -  ;
    4 00:466B -  -  -  -  ;		Name : 		utility.asm
    5 00:466B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:466B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:466B -  -  -  -  ;		Reviewed :	No
    8 00:466B -  -  -  -  ;		Purpose :	Utility routines
    9 00:466B -  -  -  -  ;
   10 00:466B -  -  -  -  ; ***************************************************************************************
   11 00:466B -  -  -  -  ; ***************************************************************************************
   12 00:466B -  -  -  -  
   13 00:466B -  -  -  -  ; ***************************************************************************************
   14 00:466B -  -  -  -  ;
   15 00:466B -  -  -  -  ;							Print ASCII string at HL
   16 00:466B -  -  -  -  ;
   17 00:466B -  -  -  -  ; ***************************************************************************************
   18 00:466B -  -  -  -  
   19 00:466B -  -  -  -  PrintStringAtHL:
   20 00:466B 7E -  -  -  		ld 		a,(hl)
   21 00:466C FE 20 -  -  		cp 		$20		
   22 00:466E D8 -  -  -  		ret 	c
   23 00:466F CD 74 4B -  		call 	SYSPrintChar
   24 00:4672 23 -  -  -  		inc 	hl
   25 00:4673 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4675 -  -  -  -  
   27 00:4675 -  -  -  -  ; ***************************************************************************************
   28 00:4675 -  -  -  -  ;
   29 00:4675 -  -  -  -  ;									Changes and Updates
   30 00:4675 -  -  -  -  ;
   31 00:4675 -  -  -  -  ; ***************************************************************************************
   32 00:4675 -  -  -  -  ;
   33 00:4675 -  -  -  -  ;		Date			Notes
   34 00:4675 -  -  -  -  ;		==== 			=====
   35 00:4675 -  -  -  -  ;
   36 00:4675 -  -  -  -  ; ***************************************************************************************
   37 00:4675 -  -  -  -  		
Listing for file "_build.asm"
   50 00:4675 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4675 -  -  -  -  ; ***************************************************************************************
    2 00:4675 -  -  -  -  ; ***************************************************************************************
    3 00:4675 -  -  -  -  ;
    4 00:4675 -  -  -  -  ;		Name : 		find.asm
    5 00:4675 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4675 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4675 -  -  -  -  ;		Reviewed :	No
    8 00:4675 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4675 -  -  -  -  ;
   10 00:4675 -  -  -  -  ; ***************************************************************************************
   11 00:4675 -  -  -  -  ; ***************************************************************************************
   12 00:4675 -  -  -  -  
   13 00:4675 -  -  -  -  ; ***************************************************************************************
   14 00:4675 -  -  -  -  ;
   15 00:4675 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4675 -  -  -  -  ; 		variable information at (IX)
   17 00:4675 -  -  -  -  ;
   18 00:4675 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4675 -  -  -  -  ;		Don't autocreate arrays.
   20 00:4675 -  -  -  -  ;
   21 00:4675 -  -  -  -  ; ***************************************************************************************
   22 00:4675 -  -  -  -  
   23 00:4675 -  -  -  -  FindVariable:
   24 00:4675 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
   25 00:4676 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   26 00:4679 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   27 00:467B D2 52 42 -  		jp 		nc,SyntaxError 		
   28 00:467E -  -  -  -  
   29 00:467E DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   30 00:4681 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   31 00:4683 38 14 -  -  		jr 		c,_FVNotSimple 				; integer.
   32 00:4685 -  -  -  -  
   33 00:4685 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   34 00:4688 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   35 00:468B 87 -  -  -  		add 	a,a 						; x4
   36 00:468C 87 -  -  -  		add 	a,a
   37 00:468D B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   38 00:468E 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   39 00:468F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   40 00:4691 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   41 00:4693 DD 23 -  -  		inc 	ix 							; skip over identifier marker
   42 00:4695 DD 23 -  -  		inc 	ix
   43 00:4697 AF -  -  -  		xor 	a 							; clear carry and return
   44 00:4698 C9 -  -  -  		ret
   45 00:4699 -  -  -  -  		;
   46 00:4699 -  -  -  -  		;		Not a standard simple variable.
   47 00:4699 -  -  -  -  		;
   48 00:4699 -  -  -  -  _FVNotSimple:
   49 00:4699 37 -  -  -  		scf
   50 00:469A C9 -  -  -  		ret
   51 00:469B -  -  -  -  
   52 00:469B -  -  -  -  ; ***************************************************************************************
   53 00:469B -  -  -  -  ;
   54 00:469B -  -  -  -  ;									Changes and Updates
   55 00:469B -  -  -  -  ;
   56 00:469B -  -  -  -  ; ***************************************************************************************
   57 00:469B -  -  -  -  ;
   58 00:469B -  -  -  -  ;		Date			Notes
   59 00:469B -  -  -  -  ;		==== 			=====
   60 00:469B -  -  -  -  ;
   61 00:469B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:469B -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:469B -  -  -  -  ;
    2 00:469B -  -  -  -  ;	This file is automatically generated.
    3 00:469B -  -  -  -  ;
    4 00:469B -  -  -  -  ;
    5 00:469B -  -  -  -  ;	Keywords for set 0
    6 00:469B -  -  -  -  ;
    7 00:469B -  -  -  -  KeywordsSet0:
    8 00:469B 01 20 -  -  	.db	1," "              ; $0080
    9 00:469D 01 20 -  -  	.db	1," "              ; $0081
   10 00:469F 01 20 -  -  	.db	1," "              ; $0082
   11 00:46A1 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:46A3 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:46A5 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:46A7 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:46A9 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:46AD 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:46B1 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:46B3 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:46B5 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:46B8 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:46BB 01 3E -  -  	.db	1,">"              ; $008d
   22 00:46BD 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:46BF 01 3D -  -  	.db	1,"="              ; $008f
   24 00:46C1 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:46C4 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:46C8 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:46CB 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:46CF 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:46D1 01 28 -  -  	.db	1,"("              ; $0095
   30 00:46D3 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:46D5 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:46D9 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:46DD 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:46E1 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:46E5 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:46E9 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:46ED 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:46F1 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:46F5 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:46FA 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:46FF 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:4703 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:4707 01 29 -  -  	.db	1,")"              ; $00a3
   44 00:4709 01 2C -  -  	.db	1,","              ; $00a4
   45 00:470B 01 3A -  -  	.db	1,":"              ; $00a5
   46 00:470D 01 3B -  -  	.db	1,";"              ; $00a6
   47 00:470F 01 27 -  -  	.db	1,"'"              ; $00a7
   48 00:4711 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 00:4718 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 00:471E 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 00:4721 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 00:4726 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 00:472B 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 00:472F 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 00:4732 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 00:4737 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 00:473C 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 00:4740 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 00:4745 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 00:474D 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 00:4753 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 00:4757 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 00:475B 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 00:475F 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 00:4763 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 00:4769 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 00:476E 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 00:4773 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 00:4778 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 00:477C 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 00:4780 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 00:4785 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 00:478A 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 00:4792 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 00:4799 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 00:479F 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 00:47A3 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 00:47A8 00 -  -  -  	.db	0
   79 00:47A9 -  -  -  -  ;
   80 00:47A9 -  -  -  -  ;	Keywords for set 1
   81 00:47A9 -  -  -  -  ;
   82 00:47A9 -  -  -  -  KeywordsSet1:
   83 00:47A9 00 -  -  -  	.db	0
   84 00:47AA -  -  -  -  ;
   85 00:47AA -  -  -  -  ;	Keywords for set 2
   86 00:47AA -  -  -  -  ;
   87 00:47AA -  -  -  -  KeywordsSet2:
   88 00:47AA 00 -  -  -  	.db	0
Listing for file "_build.asm"
   52 00:47AB -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:47AB -  -  -  -  ;
    2 00:47AB -  -  -  -  ;	This file is automatically generated.
    3 00:47AB -  -  -  -  ;
    4 00:47AB 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:47C0 -  -  -  -  PrecedenceTable:
    6 00:47C0 06 -  -  -  	.db	6	; $0083 !
    7 00:47C1 06 -  -  -  	.db	6	; $0084 ?
    8 00:47C2 05 -  -  -  	.db	5	; $0085 *
    9 00:47C3 05 -  -  -  	.db	5	; $0086 /
   10 00:47C4 05 -  -  -  	.db	5	; $0087 mod
   11 00:47C5 05 -  -  -  	.db	5	; $0088 div
   12 00:47C6 04 -  -  -  	.db	4	; $0089 +
   13 00:47C7 04 -  -  -  	.db	4	; $008a -
   14 00:47C8 03 -  -  -  	.db	3	; $008b >=
   15 00:47C9 03 -  -  -  	.db	3	; $008c <=
   16 00:47CA 03 -  -  -  	.db	3	; $008d >
   17 00:47CB 03 -  -  -  	.db	3	; $008e <
   18 00:47CC 03 -  -  -  	.db	3	; $008f =
   19 00:47CD 03 -  -  -  	.db	3	; $0090 <>
   20 00:47CE 02 -  -  -  	.db	2	; $0091 and
   21 00:47CF 01 -  -  -  	.db	1	; $0092 or
   22 00:47D0 01 -  -  -  	.db	1	; $0093 eor
   23 00:47D1 -  -  -  -  
Listing for file "_build.asm"
   53 00:47D1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:47D1 -  -  -  -  ;
    2 00:47D1 -  -  -  -  ;	This is automatically generated.
    3 00:47D1 -  -  -  -  ;
    4 00:47D1 -  -  -  -  ErrorIDTable:
    5 00:47D1 11 48 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:47D5 17 48 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:47D9 28 48 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:47DD 36 48 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:47E1 40 48 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:47E5 5A 48 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:47E9 6B 48 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:47ED 79 48 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:47F1 87 48 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:47F5 91 48 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:47F9 A6 48 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:47FD BC 48 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:4801 CA 48 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:4805 CF 48 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:4809 DC 48 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:480D ED 48 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:4811 -  -  -  -  
   22 00:4811 -  -  -  -  ErrText_warmstart:
   23 00:4811 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:4817 -  -  -  -  ErrText_assert:
   25 00:4817 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:4828 -  -  -  -  ErrText_badtype:
   27 00:4828 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:4836 -  -  -  -  ErrText_badvalue:
   29 00:4836 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:4840 -  -  -  -  ErrText_disabled:
   31 00:4840 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:485A -  -  -  -  ErrText_divzero:
   33 00:485A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:486B -  -  -  -  ErrText_memory:
   35 00:486B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:4879 -  -  -  -  ErrText_nocomma:
   37 00:4879 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:4887 -  -  -  -  ErrText_nodollar:
   39 00:4887 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:4891 -  -  -  -  ErrText_nolbracket:
   41 00:4891 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:48A6 -  -  -  -  ErrText_norbracket:
   43 00:48A6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:48BC -  -  -  -  ErrText_notref:
   45 00:48BC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:48CA -  -  -  -  ErrText_stop:
   47 00:48CA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:48CF -  -  -  -  ErrText_syntax:
   49 00:48CF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:48DC -  -  -  -  ErrText_todo:
   51 00:48DC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:48ED -  -  -  -  ErrText_unknownvar:
   53 00:48ED 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   54 00:48FE -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:48FE -  -  -  -  ;
    2 00:48FE -  -  -  -  ;	Vectors for set 0
    3 00:48FE -  -  -  -  ;
    4 00:48FE -  -  -  -  VectorsSet0:
    5 00:48FE D7 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4900 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4902 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4904 AF 42 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4906 B7 42 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4908 6D 42 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:490A 78 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:490C 83 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:490E 78 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4910 57 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4912 62 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4914 0A 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4916 01 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4918 EF 42 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:491A E6 42 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:491C DD 42 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:491E F8 42 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4920 8E 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4922 99 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4924 A4 42 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4926 DE 45 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4928 D8 45 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:492A 1F 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:492C 45 45 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:492E 10 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4930 ED 44 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4932 C3 45 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4934 EB 45 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4936 FF 44 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4938 F8 44 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:493A 28 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:493C 3A 45 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:493E FF 45 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4940 05 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4942 10 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4944 CE 40 -  -  	addr(BadCmd_RBracket)            ; $00a3 )
   41 00:4946 CE 40 -  -  	addr(BadCmd_Comma)               ; $00a4 ,
   42 00:4948 D1 40 -  -  	addr(Command_Colon)              ; $00a5 :
   43 00:494A CE 40 -  -  	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 00:494C 39 41 -  -  	addr(Command_REM2)               ; $00a7 '
   45 00:494E 1F 40 -  -  	addr(Unimplemented)              ; $00a8 repeat
   46 00:4950 1F 40 -  -  	addr(Unimplemented)              ; $00a9 until
   47 00:4952 1F 40 -  -  	addr(Unimplemented)              ; $00aa if
   48 00:4954 CE 40 -  -  	addr(BadCmd_Then)                ; $00ab then
   49 00:4956 1F 40 -  -  	addr(Unimplemented)              ; $00ac else
   50 00:4958 1F 40 -  -  	addr(Unimplemented)              ; $00ad for
   51 00:495A CE 40 -  -  	addr(BadCmd_To)                  ; $00ae to
   52 00:495C 1F 40 -  -  	addr(Unimplemented)              ; $00af step
   53 00:495E 1F 40 -  -  	addr(Unimplemented)              ; $00b0 next
   54 00:4960 CE 40 -  -  	addr(BadCmd_Defproc)             ; $00b1 def
   55 00:4962 1F 40 -  -  	addr(Unimplemented)              ; $00b2 proc
   56 00:4964 1F 40 -  -  	addr(Unimplemented)              ; $00b3 endproc
   57 00:4966 1F 40 -  -  	addr(Unimplemented)              ; $00b4 local
   58 00:4968 1F 40 -  -  	addr(Unimplemented)              ; $00b5 dim
   59 00:496A 39 41 -  -  	addr(Command_REM)                ; $00b6 rem
   60 00:496C 1F 40 -  -  	addr(Unimplemented)              ; $00b7 let
   61 00:496E 1F 40 -  -  	addr(Unimplemented)              ; $00b8 vdu
   62 00:4970 EA 40 -  -  	addr(Command_PRINT)              ; $00b9 print
   63 00:4972 1F 40 -  -  	addr(Unimplemented)              ; $00ba load
   64 00:4974 1F 40 -  -  	addr(Unimplemented)              ; $00bb save
   65 00:4976 1F 40 -  -  	addr(Unimplemented)              ; $00bc list
   66 00:4978 5E 46 -  -  	addr(Command_NEW)                ; $00bd new
   67 00:497A 54 41 -  -  	addr(Command_RUN)                ; $00be run
   68 00:497C 1F 40 -  -  	addr(Unimplemented)              ; $00bf read
   69 00:497E 1F 40 -  -  	addr(Unimplemented)              ; $00c0 data
   70 00:4980 1F 40 -  -  	addr(Unimplemented)              ; $00c1 restore
   71 00:4982 BF 40 -  -  	addr(Command_ASSERT)             ; $00c2 assert
   72 00:4984 22 46 -  -  	addr(Command_CLEAR)              ; $00c3 clear
   73 00:4986 D2 40 -  -  	addr(Command_END)                ; $00c4 end
   74 00:4988 B1 41 -  -  	addr(Command_STOP)               ; $00c5 stop
   75 00:498A -  -  -  -  ;
   76 00:498A -  -  -  -  ;	Vectors for set 1
   77 00:498A -  -  -  -  ;
   78 00:498A -  -  -  -  VectorsSet1:
   79 00:498A -  -  -  -  ;
   80 00:498A -  -  -  -  ;	Vectors for set 2
   81 00:498A -  -  -  -  ;
   82 00:498A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   55 00:498A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:498A -  -  -  -  ; ***************************************************************************************
    2 00:498A -  -  -  -  ; ***************************************************************************************
    3 00:498A -  -  -  -  ;
    4 00:498A -  -  -  -  ;		Name : 		idivide.asm
    5 00:498A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:498A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:498A -  -  -  -  ;		Reviewed :	No
    8 00:498A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:498A -  -  -  -  ;
   10 00:498A -  -  -  -  ; ***************************************************************************************
   11 00:498A -  -  -  -  ; ***************************************************************************************
   12 00:498A -  -  -  -  
   13 00:498A -  -  -  -  ; ***************************************************************************************
   14 00:498A -  -  -  -  ;
   15 00:498A -  -  -  -  ;								Unsigned integer divide
   16 00:498A -  -  -  -  ;
   17 00:498A -  -  -  -  ; ***************************************************************************************
   18 00:498A -  -  -  -  
   19 00:498A -  -  -  -  Int32UDivide:
   20 00:498A 37 -  -  -  		scf
   21 00:498B C3 C9 49 -  		jp 		_I32UnsignedDivide		
   22 00:498E -  -  -  -  
   23 00:498E -  -  -  -  ; ***************************************************************************************
   24 00:498E -  -  -  -  ;
   25 00:498E -  -  -  -  ;							Signed integer divide/Modulus
   26 00:498E -  -  -  -  ;
   27 00:498E -  -  -  -  ; ***************************************************************************************
   28 00:498E -  -  -  -  
   29 00:498E -  -  -  -  Int32SDivide:
   30 00:498E 37 -  -  -  		scf
   31 00:498F 18 01 -  -  		jr 		_I32SDivide
   32 00:4991 -  -  -  -  Int32Modulus:
   33 00:4991 AF -  -  -  		xor 	a
   34 00:4992 -  -  -  -  _I32SDivide:
   35 00:4992 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4993 F5 -  -  -  		push 	af
   37 00:4994 08 -  -  -  		ex 		af,af'
   38 00:4995 -  -  -  -  
   39 00:4995 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4996 D9 -  -  -  		exx
   41 00:4997 D5 -  -  -  		push 	de
   42 00:4998 D9 -  -  -  		exx
   43 00:4999 -  -  -  -  
   44 00:4999 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:499A AF -  -  -  		xor 	a 							; clear sign count.
   46 00:499B CD B7 49 -  		call 	_I32CheckHLSignSwap
   47 00:499E CD B7 49 -  		call 	_I32CheckHLSignSwap
   48 00:49A1 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:49A2 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:49A3 F5 -  -  -  		push 	af
   51 00:49A4 CD C9 49 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:49A7 F1 -  -  -  		pop 	af 							; get function back
   53 00:49A8 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:49AA 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:49AB CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:49AD C4 13 4B -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:49B0 -  -  -  -  _I32SDExit:
   58 00:49B0 D9 -  -  -  		exx 								; restore DE'DE
   59 00:49B1 D1 -  -  -  		pop 	de
   60 00:49B2 D9 -  -  -  		exx
   61 00:49B3 D1 -  -  -  		pop 	de
   62 00:49B4 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:49B5 08 -  -  -  		ex 		af,af'
   64 00:49B6 C9 -  -  -  		ret
   65 00:49B7 -  -  -  -  
   66 00:49B7 -  -  -  -  
   67 00:49B7 -  -  -  -  _I32CheckHLSignSwap:
   68 00:49B7 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:49B8 CB 7C -  -  		bit 	7,h
   70 00:49BA D9 -  -  -  		exx
   71 00:49BB 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:49BD -  -  -  -  		;
   73 00:49BD C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:49BF F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:49C0 CD 13 4B -  		call 	Int32Negate 				
   76 00:49C3 F1 -  -  -  		pop 	af
   77 00:49C4 -  -  -  -  _I32CHSPositive:
   78 00:49C4 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:49C5 EB -  -  -  		ex 		de,hl
   80 00:49C6 D9 -  -  -  		exx		
   81 00:49C7 EB -  -  -  		ex 		de,hl
   82 00:49C8 C9 -  -  -  		ret
   83 00:49C9 -  -  -  -  
   84 00:49C9 -  -  -  -  ; ***************************************************************************************
   85 00:49C9 -  -  -  -  ;
   86 00:49C9 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:49C9 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:49C9 -  -  -  -  ;
   89 00:49C9 -  -  -  -  ; ***************************************************************************************
   90 00:49C9 -  -  -  -  
   91 00:49C9 -  -  -  -  _I32UnsignedDivide:
   92 00:49C9 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:49CA D5 -  -  -  		push 	de
   94 00:49CB D9 -  -  -  		exx
   95 00:49CC C5 -  -  -  		push 	bc
   96 00:49CD D5 -  -  -  		push 	de 							
   97 00:49CE D9 -  -  -  		exx
   98 00:49CF -  -  -  -  
   99 00:49CF F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:49D0 -  -  -  -  
  101 00:49D0 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:49D1 B3 -  -  -  		or 		e
  103 00:49D2 D9 -  -  -  		exx
  104 00:49D3 B2 -  -  -  		or 		d
  105 00:49D4 B3 -  -  -  		or 		e
  106 00:49D5 D9 -  -  -  		exx
  107 00:49D6 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:49D9 -  -  -  -  
  109 00:49D9 -  -  -  -  
  110 00:49D9 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:49DA 4D -  -  -  		ld		c,l
  112 00:49DB 21 00 00 -  		ld 		hl,$0000
  113 00:49DE D9 -  -  -  		exx
  114 00:49DF 44 -  -  -  		ld 		b,h
  115 00:49E0 4D -  -  -  		ld		c,l
  116 00:49E1 21 00 00 -  		ld 		hl,$0000
  117 00:49E4 D9 -  -  -  		exx
  118 00:49E5 -  -  -  -  
  119 00:49E5 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:49E7 -  -  -  -  _I32DivideLoop:
  121 00:49E7 F5 -  -  -  		push 	af
  122 00:49E8 -  -  -  -  
  123 00:49E8 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:49EA CB 10 -  -  		rl 		b
  125 00:49EC D9 -  -  -  		exx
  126 00:49ED CB 11 -  -  		rl 		c
  127 00:49EF CB 10 -  -  		rl 		b
  128 00:49F1 D9 -  -  -  		exx
  129 00:49F2 CB 15 -  -  		rl 		l
  130 00:49F4 CB 14 -  -  		rl 		h
  131 00:49F6 D9 -  -  -  		exx
  132 00:49F7 CB 15 -  -  		rl 		l
  133 00:49F9 CB 14 -  -  		rl 		h
  134 00:49FB D9 -  -  -  		exx
  135 00:49FC -  -  -  -  
  136 00:49FC CD B9 4A -  		call 	Int32Subtract 				; A = A - M
  137 00:49FF 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4A01 -  -  -  -  
  139 00:4A01 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4A02 18 03 -  -  		jr 		_I32Next
  141 00:4A04 -  -  -  -  
  142 00:4A04 -  -  -  -  _I32Borrow:
  143 00:4A04 CD B3 4A -  		call 	Int32Add 					; A = A + M
  144 00:4A07 -  -  -  -  _I32Next:
  145 00:4A07 F1 -  -  -  		pop 	af
  146 00:4A08 3D -  -  -  		dec 	a
  147 00:4A09 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4A0B -  -  -  -  
  149 00:4A0B F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4A0C -  -  -  -  
  151 00:4A0C 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4A0D 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4A0F -  -  -  -  
  154 00:4A0F 60 -  -  -  		ld  	h,b
  155 00:4A10 69 -  -  -  		ld 		l,c
  156 00:4A11 D9 -  -  -  		exx
  157 00:4A12 60 -  -  -  		ld  	h,b
  158 00:4A13 69 -  -  -  		ld 		l,c
  159 00:4A14 D9 -  -  -  		exx
  160 00:4A15 -  -  -  -  _I32Modulus1:		
  161 00:4A15 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4A16 D1 -  -  -  		pop 	de
  163 00:4A17 C1 -  -  -  		pop 	bc
  164 00:4A18 D9 -  -  -  		exx
  165 00:4A19 D1 -  -  -  		pop 	de
  166 00:4A1A C1 -  -  -  		pop 	bc
  167 00:4A1B C9 -  -  -  		ret
  168 00:4A1C -  -  -  -  
  169 00:4A1C -  -  -  -  ; ***************************************************************************************
  170 00:4A1C -  -  -  -  ;
  171 00:4A1C -  -  -  -  ;									Changes and Updates
  172 00:4A1C -  -  -  -  ;
  173 00:4A1C -  -  -  -  ; ***************************************************************************************
  174 00:4A1C -  -  -  -  ;
  175 00:4A1C -  -  -  -  ;		Date			Notes
  176 00:4A1C -  -  -  -  ;		==== 			=====
  177 00:4A1C -  -  -  -  ;
  178 00:4A1C -  -  -  -  ; ***************************************************************************************
  179 00:4A1C -  -  -  -  		
Listing for file "_build.asm"
   56 00:4A1C -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4A1C -  -  -  -  ; ***************************************************************************************
    2 00:4A1C -  -  -  -  ; ***************************************************************************************
    3 00:4A1C -  -  -  -  ;
    4 00:4A1C -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4A1C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A1C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A1C -  -  -  -  ;		Reviewed :	No
    8 00:4A1C -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4A1C -  -  -  -  ;
   10 00:4A1C -  -  -  -  ; ***************************************************************************************
   11 00:4A1C -  -  -  -  ; ***************************************************************************************
   12 00:4A1C -  -  -  -  
   13 00:4A1C -  -  -  -  ; ***************************************************************************************
   14 00:4A1C -  -  -  -  ;
   15 00:4A1C -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4A1C -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4A1C -  -  -  -  ;
   18 00:4A1C -  -  -  -  ; ***************************************************************************************
   19 00:4A1C -  -  -  -  
   20 00:4A1C -  -  -  -  Int32FromString:
   21 00:4A1C C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4A1D D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4A1E D5 -  -  -  		push 	de
   24 00:4A1F D9 -  -  -  		exx
   25 00:4A20 D5 -  -  -  		push 	de
   26 00:4A21 -  -  -  -  
   27 00:4A21 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4A24 11 00 00 -  		ld 		de,$0000
   29 00:4A27 D9 -  -  -  		exx
   30 00:4A28 21 00 00 -  		ld 		hl,$0000
   31 00:4A2B 11 00 00 -  		ld 		de,$0000
   32 00:4A2E D9 -  -  -  		exx
   33 00:4A2F -  -  -  -  
   34 00:4A2F 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4A30 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4A32 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4A34 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4A36 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4A37 -  -  -  -  		;
   40 00:4A37 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4A38 F5 -  -  -  		push 	af
   42 00:4A39 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4A3B 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4A3C 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4A3E 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4A3F 18 01 -  -  		jr 		_I32FSMain
   47 00:4A41 -  -  -  -  _I32FSNotSigned:		
   48 00:4A41 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4A42 -  -  -  -  		;
   50 00:4A42 -  -  -  -  		; 		Main conversion loop.
   51 00:4A42 -  -  -  -  		; 		
   52 00:4A42 -  -  -  -  _I32FSMain:		
   53 00:4A42 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4A43 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4A45 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4A47 D6 20 -  -  		sub 	32
   57 00:4A49 -  -  -  -  _I32FSNotLower:
   58 00:4A49 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4A4B 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4A4D FE 3A -  -  		cp 		'9'+1
   61 00:4A4F 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4A51 FE 41 -  -  		cp 		'A'
   63 00:4A53 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4A55 FE 47 -  -  		cp 		'F'+1
   65 00:4A57 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4A59 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4A5B -  -  -  -  _I32FSOkay:
   68 00:4A5B D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4A5D BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4A5E 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4A60 03 -  -  -  		inc 	bc 							; consume character
   72 00:4A61 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4A62 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4A63 CD 7D 4A -  		call 	Int32Multiply 				; result *= base
   75 00:4A66 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4A67 5F -  -  -  		ld 		e,a
   77 00:4A68 CD B3 4A -  		call 	Int32Add 					; and add it.
   78 00:4A6B D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4A6C 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4A6E -  -  -  -  
   81 00:4A6E -  -  -  -  _I32FSExit:
   82 00:4A6E F1 -  -  -  		pop 	af 							; get sign back
   83 00:4A6F FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4A71 CC 13 4B -  		call 	z,Int32Negate
   85 00:4A74 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4A75 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4A76 D9 -  -  -  		exx
   88 00:4A77 D1 -  -  -  		pop 	de
   89 00:4A78 D9 -  -  -  		exx
   90 00:4A79 C1 -  -  -  		pop 	bc
   91 00:4A7A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4A7C C9 -  -  -  		ret				
   93 00:4A7D -  -  -  -  
   94 00:4A7D -  -  -  -  ; ***************************************************************************************
   95 00:4A7D -  -  -  -  ;
   96 00:4A7D -  -  -  -  ;									Changes and Updates
   97 00:4A7D -  -  -  -  ;
   98 00:4A7D -  -  -  -  ; ***************************************************************************************
   99 00:4A7D -  -  -  -  ;
  100 00:4A7D -  -  -  -  ;		Date			Notes
  101 00:4A7D -  -  -  -  ;		==== 			=====
  102 00:4A7D -  -  -  -  ;
  103 00:4A7D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:4A7D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4A7D -  -  -  -  ; ***************************************************************************************
    2 00:4A7D -  -  -  -  ; ***************************************************************************************
    3 00:4A7D -  -  -  -  ;
    4 00:4A7D -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4A7D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A7D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A7D -  -  -  -  ;		Reviewed :	No
    8 00:4A7D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4A7D -  -  -  -  ;
   10 00:4A7D -  -  -  -  ; ***************************************************************************************
   11 00:4A7D -  -  -  -  ; ***************************************************************************************
   12 00:4A7D -  -  -  -  
   13 00:4A7D -  -  -  -  Int32Multiply:
   14 00:4A7D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4A7E D5 -  -  -  		push 	de
   16 00:4A7F 44 -  -  -  		ld 		b,h
   17 00:4A80 4D -  -  -  		ld 		c,l
   18 00:4A81 21 00 00 -  		ld 		hl,$0000
   19 00:4A84 -  -  -  -  
   20 00:4A84 D9 -  -  -  		exx
   21 00:4A85 C5 -  -  -  		push 	bc
   22 00:4A86 D5 -  -  -  		push 	de
   23 00:4A87 44 -  -  -  		ld 		b,h
   24 00:4A88 4D -  -  -  		ld 		c,l
   25 00:4A89 21 00 00 -  		ld 		hl,$0000		
   26 00:4A8C D9 -  -  -  		exx
   27 00:4A8D -  -  -  -  
   28 00:4A8D -  -  -  -  _I32MultiplyLoop:
   29 00:4A8D CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4A8F C4 B3 4A -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4A92 -  -  -  -  		;
   32 00:4A92 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4A93 CB 38 -  -  		srl 	b
   34 00:4A95 CB 19 -  -  		rr 		c
   35 00:4A97 D9 -  -  -  		exx
   36 00:4A98 CB 18 -  -  		rr 		b
   37 00:4A9A CB 19 -  -  		rr 		c
   38 00:4A9C -  -  -  -  		;
   39 00:4A9C CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4A9E CB 12 -  -  		rl 		d
   41 00:4AA0 D9 -  -  -  		exx
   42 00:4AA1 CB 13 -  -  		rl 		e
   43 00:4AA3 CB 12 -  -  		rl 		d
   44 00:4AA5 -  -  -  -  
   45 00:4AA5 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4AA6 B1 -  -  -  		or 		c
   47 00:4AA7 D9 -  -  -  		exx
   48 00:4AA8 B0 -  -  -  		or 		b
   49 00:4AA9 B1 -  -  -  		or 		c
   50 00:4AAA 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4AAC -  -  -  -  
   52 00:4AAC D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4AAD D1 -  -  -  		pop 	de
   54 00:4AAE C1 -  -  -  		pop 	bc
   55 00:4AAF D9 -  -  -  		exx
   56 00:4AB0 D1 -  -  -  		pop 	de
   57 00:4AB1 C1 -  -  -  		pop 	bc
   58 00:4AB2 C9 -  -  -  		ret
   59 00:4AB3 -  -  -  -  
   60 00:4AB3 -  -  -  -  ; ***************************************************************************************
   61 00:4AB3 -  -  -  -  ;
   62 00:4AB3 -  -  -  -  ;									Changes and Updates
   63 00:4AB3 -  -  -  -  ;
   64 00:4AB3 -  -  -  -  ; ***************************************************************************************
   65 00:4AB3 -  -  -  -  ;
   66 00:4AB3 -  -  -  -  ;		Date			Notes
   67 00:4AB3 -  -  -  -  ;		==== 			=====
   68 00:4AB3 -  -  -  -  ;
   69 00:4AB3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:4AB3 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4AB3 -  -  -  -  ; ***************************************************************************************
    2 00:4AB3 -  -  -  -  ; ***************************************************************************************
    3 00:4AB3 -  -  -  -  ;
    4 00:4AB3 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4AB3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AB3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AB3 -  -  -  -  ;		Reviewed :	No
    8 00:4AB3 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4AB3 -  -  -  -  ;
   10 00:4AB3 -  -  -  -  ; ***************************************************************************************
   11 00:4AB3 -  -  -  -  ; ***************************************************************************************
   12 00:4AB3 -  -  -  -  
   13 00:4AB3 -  -  -  -  ; ***************************************************************************************
   14 00:4AB3 -  -  -  -  ;
   15 00:4AB3 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4AB3 -  -  -  -  ;
   17 00:4AB3 -  -  -  -  ; ***************************************************************************************
   18 00:4AB3 -  -  -  -  
   19 00:4AB3 -  -  -  -  Int32Add:
   20 00:4AB3 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4AB4 D9 -  -  -  		exx
   22 00:4AB5 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4AB7 D9 -  -  -  		exx
   24 00:4AB8 C9 -  -  -  		ret
   25 00:4AB9 -  -  -  -  
   26 00:4AB9 -  -  -  -  ; ***************************************************************************************
   27 00:4AB9 -  -  -  -  ;
   28 00:4AB9 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4AB9 -  -  -  -  ;
   30 00:4AB9 -  -  -  -  ; ***************************************************************************************
   31 00:4AB9 -  -  -  -  
   32 00:4AB9 -  -  -  -  Int32Subtract:
   33 00:4AB9 AF -  -  -  		xor 	a 							; clear carry
   34 00:4ABA ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4ABC D9 -  -  -  		exx
   36 00:4ABD ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4ABF D9 -  -  -  		exx
   38 00:4AC0 C9 -  -  -  		ret
   39 00:4AC1 -  -  -  -  
   40 00:4AC1 -  -  -  -  ; ***************************************************************************************
   41 00:4AC1 -  -  -  -  ;
   42 00:4AC1 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4AC1 -  -  -  -  ;
   44 00:4AC1 -  -  -  -  ; ***************************************************************************************
   45 00:4AC1 -  -  -  -  
   46 00:4AC1 -  -  -  -  Int32And:
   47 00:4AC1 D9 -  -  -  		exx
   48 00:4AC2 CD C6 4A -  		call 	_I32AndHLDE
   49 00:4AC5 D9 -  -  -  		exx
   50 00:4AC6 -  -  -  -  _I32AndHLDE:		
   51 00:4AC6 7C -  -  -  		ld 		a,h
   52 00:4AC7 A2 -  -  -  		and 	d
   53 00:4AC8 67 -  -  -  		ld 		h,a
   54 00:4AC9 7D -  -  -  		ld 		a,l
   55 00:4ACA A3 -  -  -  		and 	e
   56 00:4ACB 6F -  -  -  		ld 		l,a
   57 00:4ACC C9 -  -  -  		ret
   58 00:4ACD -  -  -  -  
   59 00:4ACD -  -  -  -  ; ***************************************************************************************
   60 00:4ACD -  -  -  -  ;
   61 00:4ACD -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4ACD -  -  -  -  ;
   63 00:4ACD -  -  -  -  ; ***************************************************************************************
   64 00:4ACD -  -  -  -  
   65 00:4ACD -  -  -  -  Int32Or:
   66 00:4ACD D9 -  -  -  		exx
   67 00:4ACE CD D2 4A -  		call 	_I32OrHLDE
   68 00:4AD1 D9 -  -  -  		exx
   69 00:4AD2 -  -  -  -  _I32OrHLDE:		
   70 00:4AD2 7C -  -  -  		ld 		a,h
   71 00:4AD3 B2 -  -  -  		or 		d
   72 00:4AD4 67 -  -  -  		ld 		h,a
   73 00:4AD5 7D -  -  -  		ld 		a,l
   74 00:4AD6 B3 -  -  -  		or 		e
   75 00:4AD7 6F -  -  -  		ld 		l,a
   76 00:4AD8 C9 -  -  -  		ret
   77 00:4AD9 -  -  -  -  
   78 00:4AD9 -  -  -  -  ; ***************************************************************************************
   79 00:4AD9 -  -  -  -  ;
   80 00:4AD9 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4AD9 -  -  -  -  ;
   82 00:4AD9 -  -  -  -  ; ***************************************************************************************
   83 00:4AD9 -  -  -  -  
   84 00:4AD9 -  -  -  -  Int32Xor:
   85 00:4AD9 D9 -  -  -  		exx
   86 00:4ADA CD DE 4A -  		call 	_I32XorHLDE
   87 00:4ADD D9 -  -  -  		exx
   88 00:4ADE -  -  -  -  _I32XorHLDE:		
   89 00:4ADE 7C -  -  -  		ld 		a,h
   90 00:4ADF AA -  -  -  		xor 	d
   91 00:4AE0 67 -  -  -  		ld 		h,a
   92 00:4AE1 7D -  -  -  		ld 		a,l
   93 00:4AE2 AB -  -  -  		xor 	e
   94 00:4AE3 6F -  -  -  		ld 		l,a
   95 00:4AE4 C9 -  -  -  		ret
   96 00:4AE5 -  -  -  -  
   97 00:4AE5 -  -  -  -  ; ***************************************************************************************
   98 00:4AE5 -  -  -  -  ;
   99 00:4AE5 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4AE5 -  -  -  -  ;
  101 00:4AE5 -  -  -  -  ; ***************************************************************************************
  102 00:4AE5 -  -  -  -  
  103 00:4AE5 -  -  -  -  Int32Zero:
  104 00:4AE5 D9 -  -  -  		exx
  105 00:4AE6 7D -  -  -  		ld 		a,l
  106 00:4AE7 B4 -  -  -  		or 		h
  107 00:4AE8 D9 -  -  -  		exx
  108 00:4AE9 B5 -  -  -  		or 		l
  109 00:4AEA B4 -  -  -  		or 		h
  110 00:4AEB C9 -  -  -  		ret
  111 00:4AEC -  -  -  -  
  112 00:4AEC -  -  -  -  ; ***************************************************************************************
  113 00:4AEC -  -  -  -  ;
  114 00:4AEC -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4AEC -  -  -  -  ;
  116 00:4AEC -  -  -  -  ; ***************************************************************************************
  117 00:4AEC -  -  -  -  
  118 00:4AEC -  -  -  -  Int32Compare:
  119 00:4AEC E5 -  -  -  		push 	hl 							; save HL
  120 00:4AED AF -  -  -  		xor 	a 							; clear carry
  121 00:4AEE ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4AF0 D9 -  -  -  		exx
  123 00:4AF1 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4AF2 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4AF4 -  -  -  -  		;
  126 00:4AF4 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4AF5 E2 FC 4A -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4AF8 78 -  -  -  		ld 		a,b
  129 00:4AF9 EE 80 -  -  		xor 	$80
  130 00:4AFB 47 -  -  -  		ld 		b,a
  131 00:4AFC -  -  -  -  _I32CNoOverflow:
  132 00:4AFC 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4AFD B5 -  -  -  		or 		l
  134 00:4AFE D9 -  -  -  		exx 
  135 00:4AFF B4 -  -  -  		or 		h
  136 00:4B00 B5 -  -  -  		or 		l
  137 00:4B01 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4B03 -  -  -  -  		;
  139 00:4B03 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4B04 CB 78 -  -  		bit 	7,b
  141 00:4B06 D9 -  -  -  		exx
  142 00:4B07 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4B09 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4B0B 3E FF -  -  		ld 		a,$FF
  145 00:4B0D -  -  -  -  _I32NotPos:
  146 00:4B0D D9 -  -  -  		exx
  147 00:4B0E E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4B0F D9 -  -  -  		exx
  149 00:4B10 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4B11 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4B12 C9 -  -  -  		ret
  152 00:4B13 -  -  -  -  
  153 00:4B13 -  -  -  -  ; ***************************************************************************************
  154 00:4B13 -  -  -  -  ;
  155 00:4B13 -  -  -  -  ;										Negate HL'HL
  156 00:4B13 -  -  -  -  ;
  157 00:4B13 -  -  -  -  ; ***************************************************************************************
  158 00:4B13 -  -  -  -  
  159 00:4B13 -  -  -  -  Int32Negate:
  160 00:4B13 AF -  -  -  		xor 	a
  161 00:4B14 CD 1D 4B -  		call 	_I32NSubtract
  162 00:4B17 D9 -  -  -  		exx
  163 00:4B18 CD 1D 4B -  		call 	_I32NSubtract
  164 00:4B1B D9 -  -  -  		exx
  165 00:4B1C C9 -  -  -  		ret
  166 00:4B1D -  -  -  -  _I32NSubtract:
  167 00:4B1D D5 -  -  -  		push 	de
  168 00:4B1E EB -  -  -  		ex 		de,hl
  169 00:4B1F 21 00 00 -  		ld 		hl,$0000
  170 00:4B22 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4B24 D1 -  -  -  		pop 	de
  172 00:4B25 C9 -  -  -  		ret
  173 00:4B26 -  -  -  -  		
  174 00:4B26 -  -  -  -  ; ***************************************************************************************
  175 00:4B26 -  -  -  -  ;
  176 00:4B26 -  -  -  -  ;									Changes and Updates
  177 00:4B26 -  -  -  -  ;
  178 00:4B26 -  -  -  -  ; ***************************************************************************************
  179 00:4B26 -  -  -  -  ;
  180 00:4B26 -  -  -  -  ;		Date			Notes
  181 00:4B26 -  -  -  -  ;		==== 			=====
  182 00:4B26 -  -  -  -  ;
  183 00:4B26 -  -  -  -  ; ***************************************************************************************
  184 00:4B26 -  -  -  -  		
Listing for file "_build.asm"
   59 00:4B26 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4B26 -  -  -  -  ; ***************************************************************************************
    2 00:4B26 -  -  -  -  ; ***************************************************************************************
    3 00:4B26 -  -  -  -  ;
    4 00:4B26 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4B26 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B26 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B26 -  -  -  -  ;		Reviewed :	No
    8 00:4B26 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4B26 -  -  -  -  ;
   10 00:4B26 -  -  -  -  ; ***************************************************************************************
   11 00:4B26 -  -  -  -  ;
   12 00:4B26 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4B26 -  -  -  -  ;
   14 00:4B26 -  -  -  -  ; ***************************************************************************************
   15 00:4B26 -  -  -  -  
   16 00:4B26 -  -  -  -  Int32ToString:
   17 00:4B26 C5 -  -  -  		push 	bc 							; save string start
   18 00:4B27 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4B28 E5 -  -  -  		push 	hl
   20 00:4B29 11 00 00 -  		ld	 	de,$0000
   21 00:4B2C D9 -  -  -  		exx
   22 00:4B2D D5 -  -  -  		push 	de
   23 00:4B2E E5 -  -  -  		push 	hl
   24 00:4B2F 11 00 00 -  		ld 		de,$000
   25 00:4B32 D9 -  -  -  		exx
   26 00:4B33 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4B34 -  -  -  -  		;
   28 00:4B34 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4B36 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4B38 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4B3A 5F -  -  -  		ld 		e,a
   32 00:4B3B -  -  -  -  		;
   33 00:4B3B D9 -  -  -  		exx 								; is it -ve ?
   34 00:4B3C CB 7C -  -  		bit 	7,h
   35 00:4B3E D9 -  -  -  		exx
   36 00:4B3F 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4B41 -  -  -  -  		;
   38 00:4B41 CD 13 4B -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4B44 -  -  -  -  		;
   40 00:4B44 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4B46 02 -  -  -  		ld 		(bc),a
   42 00:4B47 03 -  -  -  		inc 	bc
   43 00:4B48 -  -  -  -  _I32TSNotNegative:	
   44 00:4B48 CD 56 4B -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4B4B -  -  -  -  _I32TSExit:
   46 00:4B4B 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4B4D 02 -  -  -  		ld 		(bc),a 
   48 00:4B4E -  -  -  -  
   49 00:4B4E D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4B4F E1 -  -  -  		pop 	hl
   51 00:4B50 D1 -  -  -  		pop 	de
   52 00:4B51 D9 -  -  -  		exx
   53 00:4B52 E1 -  -  -  		pop 	hl
   54 00:4B53 D1 -  -  -  		pop 	de
   55 00:4B54 C1 -  -  -  		pop 	bc
   56 00:4B55 C9 -  -  -  		ret
   57 00:4B56 -  -  -  -  
   58 00:4B56 -  -  -  -  _I32RecursiveConvert:
   59 00:4B56 CD 8A 49 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4B59 F5 -  -  -  		push 	af 							; save remainder
   61 00:4B5A CD E5 4A -  		call 	Int32Zero		 			; check result is non zero
   62 00:4B5D C4 56 4B -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4B60 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4B61 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4B63 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4B65 C6 07 -  -  		add 	a,7
   67 00:4B67 -  -  -  -  _I32NotHex:
   68 00:4B67 C6 30 -  -  		add 	a,48
   69 00:4B69 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4B6A 03 -  -  -  		inc 	bc
   71 00:4B6B C9 -  -  -  		ret		
   72 00:4B6C -  -  -  -  
   73 00:4B6C -  -  -  -  ; ***************************************************************************************
   74 00:4B6C -  -  -  -  ;
   75 00:4B6C -  -  -  -  ;									Changes and Updates
   76 00:4B6C -  -  -  -  ;
   77 00:4B6C -  -  -  -  ; ***************************************************************************************
   78 00:4B6C -  -  -  -  ;
   79 00:4B6C -  -  -  -  ;		Date			Notes
   80 00:4B6C -  -  -  -  ;		==== 			=====
   81 00:4B6C -  -  -  -  ;
   82 00:4B6C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:4B6C -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4B6C -  -  -  -  ; ***************************************************************************************
    2 00:4B6C -  -  -  -  ; ***************************************************************************************
    3 00:4B6C -  -  -  -  ;
    4 00:4B6C -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4B6C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B6C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B6C -  -  -  -  ;		Reviewed :	No
    8 00:4B6C -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4B6C -  -  -  -  ;
   10 00:4B6C -  -  -  -  ; ***************************************************************************************
   11 00:4B6C -  -  -  -  ; ***************************************************************************************
   12 00:4B6C -  -  -  -  
   13 00:4B6C -  -  -  -  #ifdef AQUARIUS
   14 00:4B6C -  -  -  -  
   15 00:4B6C -  -  -  -  ; ***************************************************************************************
   16 00:4B6C -  -  -  -  ;
   17 00:4B6C -  -  -  -  ;								Initialise system stuff
   18 00:4B6C -  -  -  -  ;
   19 00:4B6C -  -  -  -  ; ***************************************************************************************
   20 00:4B6C -  -  -  -  
   21 00:4B6C -  -  -  -  SYSInitialise:
   22 00:4B6C 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4B6E CD 74 4B -  	call 	SYSPrintChar
   24 00:4B71 C9 -  -  -  	ret
   25 00:4B72 -  -  -  -  
   26 00:4B72 -  -  -  -  ; ***************************************************************************************
   27 00:4B72 -  -  -  -  ;
   28 00:4B72 -  -  -  -  ;								Terminate system stuff
   29 00:4B72 -  -  -  -  ;
   30 00:4B72 -  -  -  -  ; ***************************************************************************************
   31 00:4B72 -  -  -  -  
   32 00:4B72 -  -  -  -  SYSTerminate:
   33 00:4B72 18 FE -  -  	jr 		SYSTerminate
   34 00:4B74 -  -  -  -  
   35 00:4B74 -  -  -  -  ; ***************************************************************************************
   36 00:4B74 -  -  -  -  ;
   37 00:4B74 -  -  -  -  ;								Print A character
   38 00:4B74 -  -  -  -  ;
   39 00:4B74 -  -  -  -  ; ***************************************************************************************
   40 00:4B74 -  -  -  -  
   41 00:4B74 -  -  -  -  SYSPrintChar:
   42 00:4B74 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4B75 C5 -  -  -  	push 	bc
   44 00:4B76 D5 -  -  -  	push 	de
   45 00:4B77 E5 -  -  -  	push 	hl
   46 00:4B78 DD E5 -  -  	push 	ix
   47 00:4B7A FD E5 -  -  	push 	iy
   48 00:4B7C D9 -  -  -  	exx
   49 00:4B7D C5 -  -  -  	push 	bc
   50 00:4B7E D5 -  -  -  	push 	de
   51 00:4B7F E5 -  -  -  	push 	hl
   52 00:4B80 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4B83 E1 -  -  -  	pop 	hl
   54 00:4B84 D1 -  -  -  	pop 	de
   55 00:4B85 C1 -  -  -  	pop 	bc
   56 00:4B86 D9 -  -  -  	exx
   57 00:4B87 FD E1 -  -  	pop 	iy
   58 00:4B89 DD E1 -  -  	pop 	ix
   59 00:4B8B E1 -  -  -  	pop 	hl
   60 00:4B8C D1 -  -  -  	pop 	de
   61 00:4B8D C1 -  -  -  	pop 	bc
   62 00:4B8E F1 -  -  -  	pop 	af
   63 00:4B8F C9 -  -  -  	ret		
   64 00:4B90 -  -  -  -  
   65 00:4B90 -  -  -  -  ; ***************************************************************************************
   66 00:4B90 -  -  -  -  ;
   67 00:4B90 -  -  -  -  ;									Print Newline
   68 00:4B90 -  -  -  -  ;
   69 00:4B90 -  -  -  -  ; ***************************************************************************************
   70 00:4B90 -  -  -  -  
   71 00:4B90 -  -  -  -  SYSPrintCRLF:
   72 00:4B90 F5 -  -  -  	push 	af
   73 00:4B91 3E 0D -  -  	ld 		a,13
   74 00:4B93 CD 74 4B -  	call 	SYSPrintChar
   75 00:4B96 3E 0A -  -  	ld 		a,10
   76 00:4B98 CD 74 4B -  	call 	SYSPrintChar
   77 00:4B9B F1 -  -  -  	pop 	af
   78 00:4B9C C9 -  -  -  	ret
   79 00:4B9D -  -  -  -  
   80 00:4B9D -  -  -  -  ; ***************************************************************************************
   81 00:4B9D -  -  -  -  ;
   82 00:4B9D -  -  -  -  ;									Get time into HL'HL
   83 00:4B9D -  -  -  -  ;
   84 00:4B9D -  -  -  -  ; ***************************************************************************************
   85 00:4B9D -  -  -  -  
   86 00:4B9D -  -  -  -  SYSGetTimer:
   87 00:4B9D DB 00 -  -   	in 		a,($00)
   88 00:4B9F 6F -  -  -   	ld 		l,a
   89 00:4BA0 DB 01 -  -   	in 		a,($01)
   90 00:4BA2 67 -  -  -   	ld 		h,a
   91 00:4BA3 D9 -  -  -   	exx
   92 00:4BA4 DB 02 -  -   	in 		a,($02)
   93 00:4BA6 6F -  -  -   	ld 		l,a
   94 00:4BA7 DB 03 -  -   	in 		a,($03)
   95 00:4BA9 67 -  -  -   	ld 		h,a
   96 00:4BAA D9 -  -  -   	exx
   97 00:4BAB C9 -  -  -  	ret 	
   98 00:4BAC -  -  -  -  	
   99 00:4BAC -  -  -  -  #endif
  100 00:4BAC -  -  -  -  
  101 00:4BAC -  -  -  -  ; ***************************************************************************************
  102 00:4BAC -  -  -  -  ;
  103 00:4BAC -  -  -  -  ;									Changes and Updates
  104 00:4BAC -  -  -  -  ;
  105 00:4BAC -  -  -  -  ; ***************************************************************************************
  106 00:4BAC -  -  -  -  ;
  107 00:4BAC -  -  -  -  ;		Date			Notes
  108 00:4BAC -  -  -  -  ;		==== 			=====
  109 00:4BAC -  -  -  -  ;
  110 00:4BAC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4BAC -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4BAC -  -  -  -  ; ***************************************************************************************
    2 00:4BAC -  -  -  -  ; ***************************************************************************************
    3 00:4BAC -  -  -  -  ;
    4 00:4BAC -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4BAC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BAC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BAC -  -  -  -  ;		Reviewed :	No
    8 00:4BAC -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4BAC -  -  -  -  ;
   10 00:4BAC -  -  -  -  ; ***************************************************************************************
   11 00:4BAC -  -  -  -  ; ***************************************************************************************
   12 00:4BAC -  -  -  -  
   13 00:4BAC -  -  -  -  #ifdef CLEANEZ80
   14 00:4BAC             
   15 00:4BAC             ; ***************************************************************************************
   16 00:4BAC             ;
   17 00:4BAC             ;								Initialise system stuff
   18 00:4BAC             ;
   19 00:4BAC             ; ***************************************************************************************
   20 00:4BAC             
   21 00:4BAC             SYSInitialise:
   22 00:4BAC             	ret
   23 00:4BAC             
   24 00:4BAC             ; ***************************************************************************************
   25 00:4BAC             ;
   26 00:4BAC             ;								Terminate system stuff
   27 00:4BAC             ;
   28 00:4BAC             ; ***************************************************************************************
   29 00:4BAC             
   30 00:4BAC             SYSTerminate:
   31 00:4BAC             	ret
   32 00:4BAC             
   33 00:4BAC             ; ***************************************************************************************
   34 00:4BAC             ;
   35 00:4BAC             ;								Print A character
   36 00:4BAC             ;
   37 00:4BAC             ; ***************************************************************************************
   38 00:4BAC             
   39 00:4BAC             SYSPrintChar:
   40 00:4BAC             	ret		
   41 00:4BAC             
   42 00:4BAC             ; ***************************************************************************************
   43 00:4BAC             ;
   44 00:4BAC             ;									Print Newline
   45 00:4BAC             ;
   46 00:4BAC             ; ***************************************************************************************
   47 00:4BAC             
   48 00:4BAC             SYSPrintCRLF:
   49 00:4BAC             	ret
   50 00:4BAC             
   51 00:4BAC             ; ***************************************************************************************
   52 00:4BAC             ;
   53 00:4BAC             ;									Get time into HL'HL
   54 00:4BAC             ;
   55 00:4BAC             ; ***************************************************************************************
   56 00:4BAC             
   57 00:4BAC             SYSGetTimer:
   58 00:4BAC             	ret
   59 00:4BAC             
   60 00:4BAC             #endif
   61 00:4BAC -  -  -  -  
   62 00:4BAC -  -  -  -  ; ***************************************************************************************
   63 00:4BAC -  -  -  -  ;
   64 00:4BAC -  -  -  -  ;									Changes and Updates
   65 00:4BAC -  -  -  -  ;
   66 00:4BAC -  -  -  -  ; ***************************************************************************************
   67 00:4BAC -  -  -  -  ;
   68 00:4BAC -  -  -  -  ;		Date			Notes
   69 00:4BAC -  -  -  -  ;		==== 			=====
   70 00:4BAC -  -  -  -  ;
   71 00:4BAC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4BAC -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4BAC -  -  -  -  ; ***************************************************************************************
    2 00:4BAC -  -  -  -  ; ***************************************************************************************
    3 00:4BAC -  -  -  -  ;
    4 00:4BAC -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4BAC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BAC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BAC -  -  -  -  ;		Reviewed :	No
    8 00:4BAC -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4BAC -  -  -  -  ;
   10 00:4BAC -  -  -  -  ; ***************************************************************************************
   11 00:4BAC -  -  -  -  ; ***************************************************************************************
   12 00:4BAC -  -  -  -  
   13 00:4BAC -  -  -  -  #ifdef TI84
   14 00:4BAC             
   15 00:4BAC             ; ***************************************************************************************
   16 00:4BAC             ;
   17 00:4BAC             ;								Initialise system stuff
   18 00:4BAC             ;
   19 00:4BAC             ; ***************************************************************************************
   20 00:4BAC             
   21 00:4BAC             SYSInitialise:
   22 00:4BAC             	di
   23 00:4BAC             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4BAC             	ld 		(_IYTemp84),iy
   25 00:4BAC             	ret
   26 00:4BAC             
   27 00:4BAC             ; ***************************************************************************************
   28 00:4BAC             ;
   29 00:4BAC             ;								Terminate system stuff
   30 00:4BAC             ;
   31 00:4BAC             ; ***************************************************************************************
   32 00:4BAC             
   33 00:4BAC             SYSTerminate:
   34 00:4BAC             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4BAC             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4BAC             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4BAC             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4BAC             	ei
   39 00:4BAC             	ret 										; and exit.
   40 00:4BAC             
   41 00:4BAC             _StackTemp84:									; temp var for TI84 only.
   42 00:4BAC             	.dw 	0,0
   43 00:4BAC             _IYTemp84:
   44 00:4BAC             	.dw 	0,0		
   45 00:4BAC             
   46 00:4BAC             ; ***************************************************************************************
   47 00:4BAC             ;
   48 00:4BAC             ;								Print A character
   49 00:4BAC             ;
   50 00:4BAC             ; ***************************************************************************************
   51 00:4BAC             
   52 00:4BAC             SYSPrintChar:
   53 00:4BAC             	push 	af 									; we stack everything including alt registers
   54 00:4BAC             	push 	bc
   55 00:4BAC             	push 	de
   56 00:4BAC             	push 	hl
   57 00:4BAC             	push 	ix
   58 00:4BAC             	push 	iy
   59 00:4BAC             	exx
   60 00:4BAC             	push 	bc
   61 00:4BAC             	push 	de
   62 00:4BAC             	push 	hl
   63 00:4BAC             
   64 00:4BAC             	ld 		iy,(_IYTemp84)
   65 00:4BAC             	call 	_PutC 								; print A as character
   66 00:4BAC             	di
   67 00:4BAC             	ld 		(_IYTemp84),iy
   68 00:4BAC             
   69 00:4BAC             	pop 	hl
   70 00:4BAC             	pop 	de
   71 00:4BAC             	pop 	bc
   72 00:4BAC             	exx
   73 00:4BAC             	pop 	iy
   74 00:4BAC             	pop 	ix
   75 00:4BAC             	pop 	hl
   76 00:4BAC             	pop 	de
   77 00:4BAC             	pop 	bc
   78 00:4BAC             	pop 	af
   79 00:4BAC             	ret		
   80 00:4BAC             
   81 00:4BAC             ; ***************************************************************************************
   82 00:4BAC             ;
   83 00:4BAC             ;									Print Newline
   84 00:4BAC             ;
   85 00:4BAC             ; ***************************************************************************************
   86 00:4BAC             
   87 00:4BAC             SYSPrintCRLF:
   88 00:4BAC             	push 	af 									; we stack everything including alt registers
   89 00:4BAC             	push 	bc
   90 00:4BAC             	push 	de
   91 00:4BAC             	push 	hl
   92 00:4BAC             	push 	ix
   93 00:4BAC             	push 	iy
   94 00:4BAC             	exx
   95 00:4BAC             	push 	bc
   96 00:4BAC             	push 	de
   97 00:4BAC             	push 	hl
   98 00:4BAC             
   99 00:4BAC             	ld 		iy,(_IYTemp84)
  100 00:4BAC             	call 	_newline
  101 00:4BAC             	di
  102 00:4BAC             	ld 		(_IYTemp84),iy
  103 00:4BAC             
  104 00:4BAC             	pop 	hl
  105 00:4BAC             	pop 	de
  106 00:4BAC             	pop 	bc
  107 00:4BAC             	exx
  108 00:4BAC             	pop 	iy
  109 00:4BAC             	pop 	ix
  110 00:4BAC             	pop 	hl
  111 00:4BAC             	pop 	de
  112 00:4BAC             	pop 	bc
  113 00:4BAC             	pop 	af
  114 00:4BAC             	ret
  115 00:4BAC             
  116 00:4BAC             ; ***************************************************************************************
  117 00:4BAC             ;
  118 00:4BAC             ;									Get time into HL'HL
  119 00:4BAC             ;
  120 00:4BAC             ; ***************************************************************************************
  121 00:4BAC             
  122 00:4BAC             SYSGetTimer:
  123 00:4BAC             	ld 		hl,$1234
  124 00:4BAC             	exx
  125 00:4BAC             	ld 		hl,$5678
  126 00:4BAC             	exx
  127 00:4BAC             	ret
  128 00:4BAC             
  129 00:4BAC             #endif
  130 00:4BAC -  -  -  -  
  131 00:4BAC -  -  -  -  ; ***************************************************************************************
  132 00:4BAC -  -  -  -  ;
  133 00:4BAC -  -  -  -  ;									Changes and Updates
  134 00:4BAC -  -  -  -  ;
  135 00:4BAC -  -  -  -  ; ***************************************************************************************
  136 00:4BAC -  -  -  -  ;
  137 00:4BAC -  -  -  -  ;		Date			Notes
  138 00:4BAC -  -  -  -  ;		==== 			=====
  139 00:4BAC -  -  -  -  ;
  140 00:4BAC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4BAC -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4BAC -  -  -  -  ; ***************************************************************************************
    2 00:4BAC -  -  -  -  ; ***************************************************************************************
    3 00:4BAC -  -  -  -  ;
    4 00:4BAC -  -  -  -  ;		Name : 		basic.asm
    5 00:4BAC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BAC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BAC -  -  -  -  ;		Reviewed :	No
    8 00:4BAC -  -  -  -  ;		Purpose :	Main program.
    9 00:4BAC -  -  -  -  ;
   10 00:4BAC -  -  -  -  ; ***************************************************************************************
   11 00:4BAC -  -  -  -  ; ***************************************************************************************
   12 00:4BAC -  -  -  -  
   13 00:4BAC 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:4C00 -  -  -  -  TestInstance:
   15 00:4C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4C00 -  -  -  -  ;
    2 00:4C00 -  -  -  -  ;	This code automatically generated.
    3 00:4C00 -  -  -  -  ;
    4 00:4C00 -  -  -  -  TestProgram:
    5 00:4C00 21 01 00 B6 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 06 02 00 
              C2 02 80 00 	.db	$21,$01,$00,$b6,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$06,$02,$00,$c2,$02,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:4C28 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:5C28 -  -  -  -  EndTestInstance:
   18 00:5C28 -  -  -  -  		
   19 00:5C28 -  -  -  -  ; ***************************************************************************************
   20 00:5C28 -  -  -  -  ;
   21 00:5C28 -  -  -  -  ;									Changes and Updates
   22 00:5C28 -  -  -  -  ;
   23 00:5C28 -  -  -  -  ; ***************************************************************************************
   24 00:5C28 -  -  -  -  ;
   25 00:5C28 -  -  -  -  ;		Date			Notes
   26 00:5C28 -  -  -  -  ;		==== 			=====
   27 00:5C28 -  -  -  -  ;
   28 00:5C28 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:5C28 -  -  -  -  FinalAddress:
