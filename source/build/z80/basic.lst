    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b6 ; gosub
   64 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b7 ; return
   65 00:0000 -  -  -  -  #define KWD_GOTO                            	$00b8 ; goto
   66 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b9 ; local
   67 00:0000 -  -  -  -  #define KWD_DIM                             	$00ba ; dim
   68 00:0000 -  -  -  -  #define KWD_REM                             	$00bb ; rem
   69 00:0000 -  -  -  -  #define KWD_LET                             	$00bc ; let
   70 00:0000 -  -  -  -  #define KWD_VDU                             	$00bd ; vdu
   71 00:0000 -  -  -  -  #define KWD_PRINT                           	$00be ; print
   72 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bf ; load
   73 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c0 ; save
   74 00:0000 -  -  -  -  #define KWD_LIST                            	$00c1 ; list
   75 00:0000 -  -  -  -  #define KWD_NEW                             	$00c2 ; new
   76 00:0000 -  -  -  -  #define KWD_RUN                             	$00c3 ; run
   77 00:0000 -  -  -  -  #define KWD_READ                            	$00c4 ; read
   78 00:0000 -  -  -  -  #define KWD_DATA                            	$00c5 ; data
   79 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c6 ; restore
   80 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c7 ; assert
   81 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c8 ; clear
   82 00:0000 -  -  -  -  #define KWD_END                             	$00c9 ; end
   83 00:0000 -  -  -  -  #define KWD_STOP                            	$00ca ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 04 4C -  		call 	SYSInitialise
   44 00:4006 11 00 50 -  		ld 		de,TestInstance
   45 00:4009 21 42 6D -  		ld 		hl,EndTestInstance
   46 00:400C CD 14 47 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 59 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 E8 41 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 0C 4C -  		call 	SYSPrintChar
   56 00:401C CD 0A 4C -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 05 C3 8F 
              42 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 06 C3 8F 
              42 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  											; must be power of 2. 
   24 00:4029 -  -  -  -  
   25 00:4029 -  -  -  -  ; ***************************************************************************************
   26 00:4029 -  -  -  -  ;
   27 00:4029 -  -  -  -  ;								Defines the current instance
   28 00:4029 -  -  -  -  ;
   29 00:4029 -  -  -  -  ; ***************************************************************************************
   30 00:4029 -  -  -  -  
   31 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:4029 00 00 00 00 		.dw 	0,0
   33 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:402D 00 00 00 00 		.dw 	0,0		
   35 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4031 00 00 00 00 		.dw 	0,0 							
   37 00:4035 -  -  -  -  
   38 00:4035 -  -  -  -  ; ***************************************************************************************
   39 00:4035 -  -  -  -  ;
   40 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4035 -  -  -  -  ;
   42 00:4035 -  -  -  -  ; ***************************************************************************************
   43 00:4035 -  -  -  -  
   44 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4035 00 00 00 00 		.dw 	0,0
   46 00:4039 -  -  -  -  
   47 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:4039 00 00 00 00 		.dw 	0,0		
   49 00:403D -  -  -  -  
   50 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:403D 00 00 00 00 		.dw 	0,0
   52 00:4041 -  -  -  -  
   53 00:4041 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4041 00 00 00 00 		.dw 	0,0
   55 00:4045 -  -  -  -  
   56 00:4045 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4045 00 00 00 00 		.dw 	0,0		
   58 00:4049 -  -  -  -  
   59 00:4049 -  -  -  -  ;
   60 00:4049 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:4049 -  -  -  -  ;
   62 00:4049 -  -  -  -  
   63 00:4049 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:4049 00 00 00 00 		.dw 	0,0
   65 00:404D -  -  -  -  		
   66 00:404D -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:404D 00 00 00 00 		.dw 	0,0
   68 00:4051 -  -  -  -  
   69 00:4051 -  -  -  -  ; ***************************************************************************************
   70 00:4051 -  -  -  -  ;
   71 00:4051 -  -  -  -  ;										Run variables
   72 00:4051 -  -  -  -  ;
   73 00:4051 -  -  -  -  ; ***************************************************************************************
   74 00:4051 -  -  -  -  
   75 00:4051 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:4051 00 00 00 00 		.dw 	0,0
   77 00:4055 -  -  -  -  		
   78 00:4055 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:4055 00 00 00 00 		.dw 	0,0
   80 00:4059 -  -  -  -  
   81 00:4059 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:4059 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:405F -  -  -  -  
   84 00:405F -  -  -  -  AConvert: 									; used for address conversions.
   85 00:405F 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4065 -  -  -  -  		
   87 00:4065 -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:4065 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:4075 -  -  -  -  
   90 00:4075 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:4075 00 00 -  -  		.dw 	0
   92 00:4077 -  -  -  -  
   93 00:4077 -  -  -  -  ; ***************************************************************************************
   94 00:4077 -  -  -  -  ;
   95 00:4077 -  -  -  -  ;									Variable Information
   96 00:4077 -  -  -  -  ;
   97 00:4077 -  -  -  -  ; ***************************************************************************************
   98 00:4077 -  -  -  -  
   99 00:4077 -  -  -  -  VarNameStart: 								; first byte of name
  100 00:4077 00 00 00 00 		.dw 	0,0
  101 00:407B -  -  -  -  VarHash: 									; name hash value
  102 00:407B 00 00 -  -  		.dw 	0		
  103 00:407D -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:407D 00 00 00 00 		.dw 	0,0
  105 00:4081 -  -  -  -  		
  106 00:4081 -  -  -  -  ; ***************************************************************************************
  107 00:4081 -  -  -  -  ;
  108 00:4081 -  -  -  -  ;										  Buffers
  109 00:4081 -  -  -  -  ;
  110 00:4081 -  -  -  -  ; ***************************************************************************************
  111 00:4081 -  -  -  -  
  112 00:4081 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:4081 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:4091 -  -  -  -  
  115 00:4091 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:4091 00 00 -  -  		.dw 	0
  117 00:4093 -  -  -  -  
  118 00:4093 -  -  -  -  ConvertBuffer: 								; general usage
  119 00:4093 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:40D3 -  -  -  -  
  121 00:40D3 -  -  -  -  ; ***************************************************************************************
  122 00:40D3 -  -  -  -  ;
  123 00:40D3 -  -  -  -  ;									Changes and Updates
  124 00:40D3 -  -  -  -  ;
  125 00:40D3 -  -  -  -  ; ***************************************************************************************
  126 00:40D3 -  -  -  -  ;
  127 00:40D3 -  -  -  -  ;		Date			Notes
  128 00:40D3 -  -  -  -  ;		==== 			=====
  129 00:40D3 -  -  -  -  ;
  130 00:40D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40D3 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40D3 -  -  -  -  ; ***************************************************************************************
    2 00:40D3 -  -  -  -  ; ***************************************************************************************
    3 00:40D3 -  -  -  -  ;
    4 00:40D3 -  -  -  -  ;		Name : 		assert.asm
    5 00:40D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D3 -  -  -  -  ;		Reviewed :	No
    8 00:40D3 -  -  -  -  ;		Purpose :	Assert command
    9 00:40D3 -  -  -  -  ;
   10 00:40D3 -  -  -  -  ; ***************************************************************************************
   11 00:40D3 -  -  -  -  ; ***************************************************************************************
   12 00:40D3 -  -  -  -  
   13 00:40D3 -  -  -  -  ; ***************************************************************************************
   14 00:40D3 -  -  -  -  ;
   15 00:40D3 -  -  -  -  ;									ASSERT command
   16 00:40D3 -  -  -  -  ;
   17 00:40D3 -  -  -  -  ; ***************************************************************************************
   18 00:40D3 -  -  -  -  
   19 00:40D3 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40D3 CD 74 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40D6 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40DC C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40DD 3E 01 C3 8F 
              42 -  -  -  		ERR_ASSERT
   24 00:40E2 -  -  -  -  
   25 00:40E2 -  -  -  -  ; ***************************************************************************************
   26 00:40E2 -  -  -  -  ;
   27 00:40E2 -  -  -  -  ;									Changes and Updates
   28 00:40E2 -  -  -  -  ;
   29 00:40E2 -  -  -  -  ; ***************************************************************************************
   30 00:40E2 -  -  -  -  ;
   31 00:40E2 -  -  -  -  ;		Date			Notes
   32 00:40E2 -  -  -  -  ;		==== 			=====
   33 00:40E2 -  -  -  -  ;
   34 00:40E2 -  -  -  -  ; ***************************************************************************************
   35 00:40E2 -  -  -  -  		
Listing for file "_build.asm"
   14 00:40E2 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40E2 -  -  -  -  ; ***************************************************************************************
    2 00:40E2 -  -  -  -  ; ***************************************************************************************
    3 00:40E2 -  -  -  -  ;
    4 00:40E2 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E2 -  -  -  -  ;		Reviewed :	No
    8 00:40E2 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40E2 -  -  -  -  ;
   10 00:40E2 -  -  -  -  ; ***************************************************************************************
   11 00:40E2 -  -  -  -  ; ***************************************************************************************
   12 00:40E2 -  -  -  -  
   13 00:40E2 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40E2 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40E2 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40E2 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40E2 -  -  -  -  BadCmd_To: 			;; [to]
   18 00:40E2 C3 EC 42 -  		jp 		SyntaxError
   19 00:40E5 -  -  -  -  
   20 00:40E5 -  -  -  -  ; ***************************************************************************************
   21 00:40E5 -  -  -  -  ;
   22 00:40E5 -  -  -  -  ;									Changes and Updates
   23 00:40E5 -  -  -  -  ;
   24 00:40E5 -  -  -  -  ; ***************************************************************************************
   25 00:40E5 -  -  -  -  ;
   26 00:40E5 -  -  -  -  ;		Date			Notes
   27 00:40E5 -  -  -  -  ;		==== 			=====
   28 00:40E5 -  -  -  -  ;
   29 00:40E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40E5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40E5 -  -  -  -  ; ***************************************************************************************
    2 00:40E5 -  -  -  -  ; ***************************************************************************************
    3 00:40E5 -  -  -  -  ;
    4 00:40E5 -  -  -  -  ;		Name : 		colon.asm
    5 00:40E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40E5 -  -  -  -  ;		Reviewed :	No
    8 00:40E5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40E5 -  -  -  -  ;
   10 00:40E5 -  -  -  -  ; ***************************************************************************************
   11 00:40E5 -  -  -  -  ; ***************************************************************************************
   12 00:40E5 -  -  -  -  
   13 00:40E5 -  -  -  -  ; ***************************************************************************************
   14 00:40E5 -  -  -  -  ;
   15 00:40E5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:40E5 -  -  -  -  ;
   17 00:40E5 -  -  -  -  ; ***************************************************************************************
   18 00:40E5 -  -  -  -  
   19 00:40E5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:40E5 C9 -  -  -  		ret
   21 00:40E6 -  -  -  -  
   22 00:40E6 -  -  -  -  ; ***************************************************************************************
   23 00:40E6 -  -  -  -  ;
   24 00:40E6 -  -  -  -  ;									Changes and Updates
   25 00:40E6 -  -  -  -  ;
   26 00:40E6 -  -  -  -  ; ***************************************************************************************
   27 00:40E6 -  -  -  -  ;
   28 00:40E6 -  -  -  -  ;		Date			Notes
   29 00:40E6 -  -  -  -  ;		==== 			=====
   30 00:40E6 -  -  -  -  ;
   31 00:40E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40E6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40E6 -  -  -  -  ; ***************************************************************************************
    2 00:40E6 -  -  -  -  ; ***************************************************************************************
    3 00:40E6 -  -  -  -  ;
    4 00:40E6 -  -  -  -  ;		Name : 		dim.asm
    5 00:40E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:40E6 -  -  -  -  ;		Reviewed :	No
    8 00:40E6 -  -  -  -  ;		Purpose :	Dim command
    9 00:40E6 -  -  -  -  ;
   10 00:40E6 -  -  -  -  ; ***************************************************************************************
   11 00:40E6 -  -  -  -  ; ***************************************************************************************
   12 00:40E6 -  -  -  -  
   13 00:40E6 -  -  -  -  ; ***************************************************************************************
   14 00:40E6 -  -  -  -  ;
   15 00:40E6 -  -  -  -  ;		DIM command
   16 00:40E6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 00:40E6 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 00:40E6 -  -  -  -  ;								(can be comma chained)
   19 00:40E6 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 00:40E6 -  -  -  -  ;
   21 00:40E6 -  -  -  -  ; ***************************************************************************************
   22 00:40E6 -  -  -  -  
   23 00:40E6 -  -  -  -  Command_DIM: 	;; [dim]
   24 00:40E6 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   25 00:40E7 -  -  -  -  		;
   26 00:40E7 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40E7 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40E7 -  -  -  -  		;
   29 00:40E7 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40E9 D1 -  -  -  		pop 	de
   31 00:40EA -  -  -  -  		;
   32 00:40EA DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40ED FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40EF D2 EC 42 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40F2 -  -  -  -  _DISkip:
   36 00:40F2 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40F4 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40F7 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:40F9 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:40FB -  -  -  -  		;
   41 00:40FB DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:40FE FE 95 -  -  		cp 		KWD_LPAREN
   43 00:4100 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4101 CC 17 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:4104 F1 -  -  -  		pop 	af
   46 00:4105 C4 1C 41 -  		call 	nz,DimensionAllocate
   47 00:4108 -  -  -  -  		;
   48 00:4108 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:410B FE A6 -  -  		cp 		KWD_COMMA
   50 00:410D C0 -  -  -  		ret 	nz
   51 00:410E DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:4110 18 D4 -  -  		jr 		Command_DIM
   53 00:4112 -  -  -  -  
   54 00:4112 -  -  -  -  _CDError:
   55 00:4112 3E 04 C3 8F 
              42 -  -  -  		ERR_DIM		
   56 00:4117 -  -  -  -  
   57 00:4117 -  -  -  -  ; ***************************************************************************************
   58 00:4117 -  -  -  -  ;
   59 00:4117 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
   60 00:4117 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
   61 00:4117 -  -  -  -  ;
   62 00:4117 -  -  -  -  ; ***************************************************************************************
   63 00:4117 -  -  -  -  
   64 00:4117 -  -  -  -  DimensionArray:
   65 00:4117 3E 0F C3 8F 
              42 -  -  -  		ERR_TODO
   66 00:411C -  -  -  -  
   67 00:411C -  -  -  -  ; ***************************************************************************************
   68 00:411C -  -  -  -  ;
   69 00:411C -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   70 00:411C -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   71 00:411C -  -  -  -  ;
   72 00:411C -  -  -  -  ; ***************************************************************************************
   73 00:411C -  -  -  -  
   74 00:411C -  -  -  -  DimensionAllocate:
   75 00:411C 3E 0F C3 8F 
              42 -  -  -  		ERR_TODO
   76 00:4121 -  -  -  -  
   77 00:4121 -  -  -  -  ; ***************************************************************************************
   78 00:4121 -  -  -  -  ;
   79 00:4121 -  -  -  -  ;									Changes and Updates
   80 00:4121 -  -  -  -  ;
   81 00:4121 -  -  -  -  ; ***************************************************************************************
   82 00:4121 -  -  -  -  ;
   83 00:4121 -  -  -  -  ;		Date			Notes
   84 00:4121 -  -  -  -  ;		==== 			=====
   85 00:4121 -  -  -  -  ;
   86 00:4121 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:4121 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:4121 -  -  -  -  ; ***************************************************************************************
    2 00:4121 -  -  -  -  ; ***************************************************************************************
    3 00:4121 -  -  -  -  ;
    4 00:4121 -  -  -  -  ;		Name : 		end.asm
    5 00:4121 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4121 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4121 -  -  -  -  ;		Reviewed :	No
    8 00:4121 -  -  -  -  ;		Purpose :	End command
    9 00:4121 -  -  -  -  ;
   10 00:4121 -  -  -  -  ; ***************************************************************************************
   11 00:4121 -  -  -  -  ; ***************************************************************************************
   12 00:4121 -  -  -  -  
   13 00:4121 -  -  -  -  ; ***************************************************************************************
   14 00:4121 -  -  -  -  ;
   15 00:4121 -  -  -  -  ;										END command
   16 00:4121 -  -  -  -  ;
   17 00:4121 -  -  -  -  ; ***************************************************************************************
   18 00:4121 -  -  -  -  
   19 00:4121 -  -  -  -  Command_END: 	;; [end]
   20 00:4121 3E 00 C3 8F 
              42 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:4126 -  -  -  -  
   22 00:4126 -  -  -  -  ; ***************************************************************************************
   23 00:4126 -  -  -  -  ;
   24 00:4126 -  -  -  -  ;									Changes and Updates
   25 00:4126 -  -  -  -  ;
   26 00:4126 -  -  -  -  ; ***************************************************************************************
   27 00:4126 -  -  -  -  ;
   28 00:4126 -  -  -  -  ;		Date			Notes
   29 00:4126 -  -  -  -  ;		==== 			=====
   30 00:4126 -  -  -  -  ;
   31 00:4126 -  -  -  -  ; ***************************************************************************************
   32 00:4126 -  -  -  -  		
Listing for file "_build.asm"
   18 00:4126 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:4126 -  -  -  -  ; ***************************************************************************************
    2 00:4126 -  -  -  -  ; ***************************************************************************************
    3 00:4126 -  -  -  -  ;
    4 00:4126 -  -  -  -  ;		Name : 		endofline.asm
    5 00:4126 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4126 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4126 -  -  -  -  ;		Reviewed :	None
    8 00:4126 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:4126 -  -  -  -  ;
   10 00:4126 -  -  -  -  ; ***************************************************************************************
   11 00:4126 -  -  -  -  ; ***************************************************************************************
   12 00:4126 -  -  -  -  
   13 00:4126 -  -  -  -  ; ***************************************************************************************
   14 00:4126 -  -  -  -  ;
   15 00:4126 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:4126 -  -  -  -  ;
   17 00:4126 -  -  -  -  ; ***************************************************************************************
   18 00:4126 -  -  -  -  
   19 00:4126 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:4126 DD 2A 51 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:412A 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:412D DD 5E 00 -  		ld 		e,(ix+0)
   23 00:4130 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:4132 -  -  -  -  		;
   25 00:4132 ED 7B 55 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:4136 C3 F7 41 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:4139 -  -  -  -  
   28 00:4139 -  -  -  -  ; ***************************************************************************************
   29 00:4139 -  -  -  -  ;
   30 00:4139 -  -  -  -  ;									Changes and Updates
   31 00:4139 -  -  -  -  ;
   32 00:4139 -  -  -  -  ; ***************************************************************************************
   33 00:4139 -  -  -  -  ;
   34 00:4139 -  -  -  -  ;		Date			Notes
   35 00:4139 -  -  -  -  ;		==== 			=====
   36 00:4139 -  -  -  -  ;
   37 00:4139 -  -  -  -  ; ***************************************************************************************
   38 00:4139 -  -  -  -  		
Listing for file "_build.asm"
   19 00:4139 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:4139 -  -  -  -  ; ***************************************************************************************
    2 00:4139 -  -  -  -  ; ***************************************************************************************
    3 00:4139 -  -  -  -  ;
    4 00:4139 -  -  -  -  ;		Name : 		let.asm
    5 00:4139 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4139 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4139 -  -  -  -  ;		Reviewed :	No
    8 00:4139 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:4139 -  -  -  -  ;
   10 00:4139 -  -  -  -  ; ***************************************************************************************
   11 00:4139 -  -  -  -  ; ***************************************************************************************
   12 00:4139 -  -  -  -  
   13 00:4139 -  -  -  -  ; ***************************************************************************************
   14 00:4139 -  -  -  -  ;
   15 00:4139 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:4139 -  -  -  -  ;
   17 00:4139 -  -  -  -  ; ***************************************************************************************
   18 00:4139 -  -  -  -  
   19 00:4139 -  -  -  -  Command_LET: 	;; [let]
   20 00:4139 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:413C FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:413E 28 28 -  -  		jr 		z,_CLString
   23 00:4140 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:4142 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:4144 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:4146 32 75 40 -  		ld 		(AllowAutoCreate),a
   27 00:4149 -  -  -  -  _CLNoAuto:
   28 00:4149 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:414B CD 05 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:414E CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:4150 CA EC 42 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:4153 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:4154 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:4155 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:4156 32 75 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:4159 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:415B CD 84 42 -  		call 	CheckNextA
   38 00:415E -  -  -  -  
   39 00:415E CD 6E 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:4161 -  -  -  -  
   41 00:4161 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:4162 43 -  -  -  		ld 		b,e 						
   43 00:4163 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:4164 -  -  -  -  		;
   45 00:4164 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:4164 -  -  -  -  		;
   47 00:4164 CD 69 41 -  		call 	WriteHLToDE
   48 00:4167 C9 -  -  -  		ret
   49 00:4168 -  -  -  -  		;
   50 00:4168 -  -  -  -  		; 		String assignment code.
   51 00:4168 -  -  -  -  		;
   52 00:4168 -  -  -  -  _CLString:
   53 00:4168 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:4169 -  -  -  -  
   55 00:4169 -  -  -  -  ; ***************************************************************************************
   56 00:4169 -  -  -  -  ;
   57 00:4169 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:4169 -  -  -  -  ;
   59 00:4169 -  -  -  -  ; ***************************************************************************************
   60 00:4169 -  -  -  -  
   61 00:4169 -  -  -  -  WriteHLToDE:
   62 00:4169 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:416B C2 E2 42 -  		jp 		nz,TypeMismatch
   64 00:416E -  -  -  -  		;
   65 00:416E -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:416E -  -  -  -  		;		
   67 00:416E -  -  -  -  _WHDWriteNumber:
   68 00:416E EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:416F D9 -  -  -  		exx
   70 00:4170 EB -  -  -  		ex 		de,hl
   71 00:4171 D9 -  -  -  		exx
   72 00:4172 -  -  -  -  
   73 00:4172 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:4173 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:4174 72 -  -  -  		ld 		(hl),d
   76 00:4175 23 -  -  -  		inc 	hl
   77 00:4176 E5 -  -  -  		push 	hl
   78 00:4177 D9 -  -  -  		exx
   79 00:4178 E1 -  -  -  		pop 	hl
   80 00:4179 73 -  -  -  		ld 		(hl),e
   81 00:417A 23 -  -  -  		inc 	hl
   82 00:417B 72 -  -  -  		ld 		(hl),d
   83 00:417C D9 -  -  -  		exx
   84 00:417D -  -  -  -  
   85 00:417D C9 -  -  -  		ret
   86 00:417E -  -  -  -  
   87 00:417E -  -  -  -  ; ***************************************************************************************
   88 00:417E -  -  -  -  ;
   89 00:417E -  -  -  -  ;									Changes and Updates
   90 00:417E -  -  -  -  ;
   91 00:417E -  -  -  -  ; ***************************************************************************************
   92 00:417E -  -  -  -  ;
   93 00:417E -  -  -  -  ;		Date			Notes
   94 00:417E -  -  -  -  ;		==== 			=====
   95 00:417E -  -  -  -  ;
   96 00:417E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:417E -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:417E -  -  -  -  ; ***************************************************************************************
    2 00:417E -  -  -  -  ; ***************************************************************************************
    3 00:417E -  -  -  -  ;
    4 00:417E -  -  -  -  ;		Name : 		print.asm
    5 00:417E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:417E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:417E -  -  -  -  ;		Reviewed :	No
    8 00:417E -  -  -  -  ;		Purpose :	Print command
    9 00:417E -  -  -  -  ;
   10 00:417E -  -  -  -  ; ***************************************************************************************
   11 00:417E -  -  -  -  ; ***************************************************************************************
   12 00:417E -  -  -  -  
   13 00:417E -  -  -  -  ; ***************************************************************************************
   14 00:417E -  -  -  -  ;
   15 00:417E -  -  -  -  ;										PRINT command
   16 00:417E -  -  -  -  ;
   17 00:417E -  -  -  -  ; ***************************************************************************************
   18 00:417E -  -  -  -  
   19 00:417E -  -  -  -  Command_PRINT: 	;; [print]
   20 00:417E -  -  -  -  		;
   21 00:417E -  -  -  -  		;		Main loop
   22 00:417E -  -  -  -  		;
   23 00:417E -  -  -  -  _CPRLoop:
   24 00:417E DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:4181 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:4183 28 44 -  -  		jr 		z,_CPRExitNL
   27 00:4185 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:4187 28 40 -  -  		jr 		z,_CPRExitNL
   29 00:4189 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:418B 28 2F -  -  		jr 		z,_CPRCheckNext
   31 00:418D FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:418F 28 26 -  -  		jr 		z,_CPRTab
   33 00:4191 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:4193 28 1D -  -  		jr 		z,_CPRNewLine
   35 00:4195 -  -  -  -  		;
   36 00:4195 CD 6E 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   37 00:4198 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:419A 20 11 -  -  		jr 		nz,_CPRPrintHL
   39 00:419C -  -  -  -  		;
   40 00:419C 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:419E -  -  -  -  _CPRPrintNumber:
   42 00:419E F5 -  -  -  		push 	af 							; print leading space
   43 00:419F 3E 20 -  -  		ld 		a,' '
   44 00:41A1 CD 0C 4C -  		call 	SYSPrintChar
   45 00:41A4 F1 -  -  -  		pop 	af
   46 00:41A5 01 93 40 -  		ld  	bc,ConvertBuffer
   47 00:41A8 C5 -  -  -  		push 	bc
   48 00:41A9 CD BE 4B -  		call 	Int32ToString 				; convert to string
   49 00:41AC E1 -  -  -  		pop 	hl
   50 00:41AD -  -  -  -  		;
   51 00:41AD -  -  -  -  		; 		Print text at HL.
   52 00:41AD -  -  -  -  		;
   53 00:41AD -  -  -  -  _CPRPrintHL:
   54 00:41AD CD 2D 47 -  		call 	PrintStringAtHL 			; print string out
   55 00:41B0 18 CC -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:41B2 -  -  -  -  		;
   57 00:41B2 -  -  -  -  		; 		New line (')
   58 00:41B2 -  -  -  -  		;
   59 00:41B2 -  -  -  -  _CPRNewLine:
   60 00:41B2 CD 28 4C -  		call 	SYSPrintCRLF
   61 00:41B5 18 05 -  -  		jr 		_CPRCheckNext
   62 00:41B7 -  -  -  -  		;
   63 00:41B7 -  -  -  -  		; 		Tab command (,)
   64 00:41B7 -  -  -  -  		;
   65 00:41B7 -  -  -  -  _CPRTab:
   66 00:41B7 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:41B9 CD 0C 4C -  		call 	SYSPrintChar
   68 00:41BC -  -  -  -  		;
   69 00:41BC -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:41BC -  -  -  -  		;
   71 00:41BC -  -  -  -  _CPRCheckNext:
   72 00:41BC DD 23 -  -  		inc 	ix 							; consume current
   73 00:41BE DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:41C1 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:41C3 C8 -  -  -  		ret 	z
   76 00:41C4 FE A7 -  -  		cp 		KWD_COLON
   77 00:41C6 C8 -  -  -  		ret 	z
   78 00:41C7 18 B5 -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:41C9 -  -  -  -  		;
   80 00:41C9 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:41C9 -  -  -  -  		;
   82 00:41C9 -  -  -  -  _CPRExitNL:
   83 00:41C9 CD 28 4C -  		call 	SYSPrintCRLF 				; do CR/LF
   84 00:41CC C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:41CD -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:41CD -  -  -  -  ; ***************************************************************************************
    2 00:41CD -  -  -  -  ; ***************************************************************************************
    3 00:41CD -  -  -  -  ;
    4 00:41CD -  -  -  -  ;		Name : 		rem.asm
    5 00:41CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41CD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41CD -  -  -  -  ;		Reviewed :	No
    8 00:41CD -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:41CD -  -  -  -  ;
   10 00:41CD -  -  -  -  ; ***************************************************************************************
   11 00:41CD -  -  -  -  ; ***************************************************************************************
   12 00:41CD -  -  -  -  
   13 00:41CD -  -  -  -  ; ***************************************************************************************
   14 00:41CD -  -  -  -  ;
   15 00:41CD -  -  -  -  ;							Comment command, can be ' or REM
   16 00:41CD -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:41CD -  -  -  -  ;
   18 00:41CD -  -  -  -  ; ***************************************************************************************
   19 00:41CD -  -  -  -  
   20 00:41CD -  -  -  -  Command_REM: 	;; [rem]
   21 00:41CD -  -  -  -  Command_REM2: 	;; [']
   22 00:41CD DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:41D0 DD 23 -  -  		inc 	ix
   24 00:41D2 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:41D4 C8 -  -  -  		ret 	z
   26 00:41D5 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:41D7 C8 -  -  -  		ret 	z
   28 00:41D8 FE 3F -  -  		cp 		STRING_MARKER
   29 00:41DA C2 EC 42 -  		jp 		nz,SyntaxError
   30 00:41DD -  -  -  -  		;		
   31 00:41DD 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:41E0 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:41E3 13 -  -  -  		inc 	de 
   34 00:41E4 13 -  -  -  		inc 	de
   35 00:41E5 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:41E7 C9 -  -  -  		ret
   37 00:41E8 -  -  -  -  
   38 00:41E8 -  -  -  -  ; ***************************************************************************************
   39 00:41E8 -  -  -  -  ;
   40 00:41E8 -  -  -  -  ;									Changes and Updates
   41 00:41E8 -  -  -  -  ;
   42 00:41E8 -  -  -  -  ; ***************************************************************************************
   43 00:41E8 -  -  -  -  ;
   44 00:41E8 -  -  -  -  ;		Date			Notes
   45 00:41E8 -  -  -  -  ;		==== 			=====
   46 00:41E8 -  -  -  -  ;
   47 00:41E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:41E8 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:41E8 -  -  -  -  ; ***************************************************************************************
    2 00:41E8 -  -  -  -  ; ***************************************************************************************
    3 00:41E8 -  -  -  -  ;
    4 00:41E8 -  -  -  -  ;		Name : 		run.asm
    5 00:41E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41E8 -  -  -  -  ;		Reviewed :	No
    8 00:41E8 -  -  -  -  ;		Purpose :	Run command
    9 00:41E8 -  -  -  -  ;
   10 00:41E8 -  -  -  -  ; ***************************************************************************************
   11 00:41E8 -  -  -  -  ; ***************************************************************************************
   12 00:41E8 -  -  -  -  
   13 00:41E8 -  -  -  -  ; ***************************************************************************************
   14 00:41E8 -  -  -  -  ;
   15 00:41E8 -  -  -  -  ;										RUN command
   16 00:41E8 -  -  -  -  ;
   17 00:41E8 -  -  -  -  ; ***************************************************************************************
   18 00:41E8 -  -  -  -  
   19 00:41E8 -  -  -  -  Command_RUN: 	;; [run]
   20 00:41E8 CD D3 46 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:41EB -  -  -  -  
   22 00:41EB DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:41EF ED 73 55 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:41F3 AF -  -  -  		xor 	a
   25 00:41F4 32 75 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:41F7 -  -  -  -  		;
   27 00:41F7 -  -  -  -  		; 		New line at IX.
   28 00:41F7 -  -  -  -  		;
   29 00:41F7 -  -  -  -  CRNewLine:
   30 00:41F7 DD 22 51 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:41FB -  -  -  -  		;
   32 00:41FB DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:41FE B7 -  -  -  		or 		a
   34 00:41FF CA 21 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4202 -  -  -  -  		;
   36 00:4202 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4204 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:4206 DD 23 -  -  		inc 	ix
   39 00:4208 -  -  -  -  		;
   40 00:4208 -  -  -  -  		; 		New command at IX
   41 00:4208 -  -  -  -  		;
   42 00:4208 -  -  -  -  _CRNewCommand:	
   43 00:4208 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:420B B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:420C F2 40 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:420F -  -  -  -  		;
   47 00:420F FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:4211 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:4213 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:4215 D2 31 42 -  		jp 		nc,_CRAlternateLets
   51 00:4218 -  -  -  -  		;
   52 00:4218 -  -  -  -  _CRDoCommand:		
   53 00:4218 E6 7F 21 00 
              00 6F 29 11 
              8C 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:422A DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:422C CD 59 40 -  		call 	JumpCode 					; call the routine.
   56 00:422F 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:4231 -  -  -  -  		;
   58 00:4231 -  -  -  -  		; 		Do CALL (HL)
   59 00:4231 -  -  -  -  		;
   60 00:4231 -  -  -  -  		;
   61 00:4231 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:4231 -  -  -  -  		;		
   63 00:4231 -  -  -  -  _CRAlternateLets:		
   64 00:4231 FE 83 -  -  		cp 		KWD_PLING
   65 00:4233 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:4235 FE 84 -  -  		cp 		KWD_QMARK
   67 00:4237 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:4239 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:423B 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:423D C3 EC 42 -  		jp 		SyntaxError
   71 00:4240 -  -  -  -  		;
   72 00:4240 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:4240 -  -  -  -  		;
   74 00:4240 -  -  -  -  _CRAssignmentHandler:		
   75 00:4240 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:4242 D2 EC 42 -  		jp 		nc,SyntaxError
   77 00:4245 -  -  -  -  _CRAssignmentLet:		
   78 00:4245 CD 39 41 -  		call	Command_LET 				; do LET.
   79 00:4248 C3 08 42 -  		jp 		_CRNewCommand
   80 00:424B -  -  -  -  
   81 00:424B -  -  -  -  ; ***************************************************************************************
   82 00:424B -  -  -  -  ;
   83 00:424B -  -  -  -  ;									Changes and Updates
   84 00:424B -  -  -  -  ;
   85 00:424B -  -  -  -  ; ***************************************************************************************
   86 00:424B -  -  -  -  ;
   87 00:424B -  -  -  -  ;		Date			Notes
   88 00:424B -  -  -  -  ;		==== 			=====
   89 00:424B -  -  -  -  ;
   90 00:424B -  -  -  -  ; ***************************************************************************************
   91 00:424B -  -  -  -  		
Listing for file "_build.asm"
   23 00:424B -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:424B -  -  -  -  ; ***************************************************************************************
    2 00:424B -  -  -  -  ; ***************************************************************************************
    3 00:424B -  -  -  -  ;
    4 00:424B -  -  -  -  ;		Name : 		stop.asm
    5 00:424B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:424B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:424B -  -  -  -  ;		Reviewed :	No
    8 00:424B -  -  -  -  ;		Purpose :	Stop command
    9 00:424B -  -  -  -  ;
   10 00:424B -  -  -  -  ; ***************************************************************************************
   11 00:424B -  -  -  -  ; ***************************************************************************************
   12 00:424B -  -  -  -  
   13 00:424B -  -  -  -  ; ***************************************************************************************
   14 00:424B -  -  -  -  ;
   15 00:424B -  -  -  -  ;										STOP command
   16 00:424B -  -  -  -  ;
   17 00:424B -  -  -  -  ; ***************************************************************************************
   18 00:424B -  -  -  -  
   19 00:424B -  -  -  -  Command_STOP: 	;; [stop]
   20 00:424B 3E 0D C3 8F 
              42 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4250 -  -  -  -  
   22 00:4250 -  -  -  -  ; ***************************************************************************************
   23 00:4250 -  -  -  -  ;
   24 00:4250 -  -  -  -  ;									Changes and Updates
   25 00:4250 -  -  -  -  ;
   26 00:4250 -  -  -  -  ; ***************************************************************************************
   27 00:4250 -  -  -  -  ;
   28 00:4250 -  -  -  -  ;		Date			Notes
   29 00:4250 -  -  -  -  ;		==== 			=====
   30 00:4250 -  -  -  -  ;
   31 00:4250 -  -  -  -  ; ***************************************************************************************
   32 00:4250 -  -  -  -  		
Listing for file "_build.asm"
   24 00:4250 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4250 -  -  -  -  ; ***************************************************************************************
    2 00:4250 -  -  -  -  ; ***************************************************************************************
    3 00:4250 -  -  -  -  ;
    4 00:4250 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4250 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4250 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4250 -  -  -  -  ;		Reviewed :	No
    8 00:4250 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4250 -  -  -  -  ;
   10 00:4250 -  -  -  -  ; ***************************************************************************************
   11 00:4250 -  -  -  -  ; ***************************************************************************************
   12 00:4250 -  -  -  -  
   13 00:4250 -  -  -  -  ; ***************************************************************************************
   14 00:4250 -  -  -  -  ;
   15 00:4250 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4250 -  -  -  -  ;
   17 00:4250 -  -  -  -  ; ***************************************************************************************
   18 00:4250 -  -  -  -  
   19 00:4250 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4250             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4250             		inc 	ix
   22 00:4250             		cp 		ch 							; exit if matches
   23 00:4250             		ret 	z
   24 00:4250             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4250             		jp 		ErrorHandler
   26 00:4250             #endmacro
   27 00:4250 -  -  -  -  
   28 00:4250 -  -  -  -  CheckLeftBracket:
   29 00:4250 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 8F 
              42 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:425D -  -  -  -  
   31 00:425D -  -  -  -  CheckRightBracket:
   32 00:425D DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 8F 
              42 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:426A -  -  -  -  
   34 00:426A -  -  -  -  CheckDollar:
   35 00:426A DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 8F 
              42 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:4277 -  -  -  -  		
   37 00:4277 -  -  -  -  CheckComma:
   38 00:4277 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 8F 
              42 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4284 -  -  -  -  
   40 00:4284 -  -  -  -  ; ***************************************************************************************
   41 00:4284 -  -  -  -  ;
   42 00:4284 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4284 -  -  -  -  ;
   44 00:4284 -  -  -  -  ; ***************************************************************************************
   45 00:4284 -  -  -  -  
   46 00:4284 -  -  -  -  CheckNextA:
   47 00:4284 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:4287 DD 23 -  -  		inc 	ix 							; skip character
   49 00:4289 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:428A 3E 0E C3 8F 
              42 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:428F -  -  -  -  		
   52 00:428F -  -  -  -  ; ***************************************************************************************
   53 00:428F -  -  -  -  ;
   54 00:428F -  -  -  -  ;									Changes and Updates
   55 00:428F -  -  -  -  ;
   56 00:428F -  -  -  -  ; ***************************************************************************************
   57 00:428F -  -  -  -  ;
   58 00:428F -  -  -  -  ;		Date			Notes
   59 00:428F -  -  -  -  ;		==== 			=====
   60 00:428F -  -  -  -  ;
   61 00:428F -  -  -  -  ; ***************************************************************************************
   62 00:428F -  -  -  -  		
Listing for file "_build.asm"
   25 00:428F -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:428F -  -  -  -  ; ***************************************************************************************
    2 00:428F -  -  -  -  ; ***************************************************************************************
    3 00:428F -  -  -  -  ;
    4 00:428F -  -  -  -  ;		Name : 		errors.asm
    5 00:428F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:428F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:428F -  -  -  -  ;		Reviewed :	No
    8 00:428F -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:428F -  -  -  -  ;
   10 00:428F -  -  -  -  ; ***************************************************************************************
   11 00:428F -  -  -  -  ; ***************************************************************************************
   12 00:428F -  -  -  -  
   13 00:428F -  -  -  -  ; ***************************************************************************************
   14 00:428F -  -  -  -  ;
   15 00:428F -  -  -  -  ;								Error handler, message A 
   16 00:428F -  -  -  -  ;
   17 00:428F -  -  -  -  ; ***************************************************************************************
   18 00:428F -  -  -  -  
   19 00:428F -  -  -  -  ErrorHandler:
   20 00:428F F5 -  -  -  		push 	af 						; save error ID
   21 00:4290 -  -  -  -  
   22 00:4290 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4293 6F -  -  -  		ld 		l,a
   24 00:4294 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4295 29 -  -  -  		add 	hl,hl 		
   26 00:4296 11 51 48 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4299 19 -  -  -  		add 	hl,de
   28 00:429A 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:429E CD 2D 47 -  		call 	PrintStringAtHL
   30 00:42A1 -  -  -  -  		;
   31 00:42A1 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:42A2 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:42A3 28 28 -  -  		jr 		z,_EHExit
   34 00:42A5 -  -  -  -  		;
   35 00:42A5 DD 2A 51 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:42A9 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:42AC B7 -  -  -  		or 		a
   38 00:42AD 28 1E -  -  		jr 		z,_EHExit
   39 00:42AF -  -  -  -  
   40 00:42AF 21 D3 42 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:42B2 CD 2D 47 -  		call 	PrintStringAtHL 
   42 00:42B5 -  -  -  -  		
   43 00:42B5 D9 -  -  -  		exx								; HL'HL = line number
   44 00:42B6 21 00 00 -  		ld 		hl,$0000 		
   45 00:42B9 D9 -  -  -  		exx 
   46 00:42BA DD 6E 01 -  		ld 		l,(ix+1)
   47 00:42BD DD 66 02 -  		ld 		h,(ix+2)
   48 00:42C0 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:42C2 01 93 40 -  		ld 		bc,ConvertBuffer
   50 00:42C5 CD BE 4B -  		call 	Int32ToString
   51 00:42C8 C5 -  -  -  		push 	bc
   52 00:42C9 E1 -  -  -  		pop 	hl
   53 00:42CA CD 2D 47 -  		call 	PrintStringAtHL			; print error line number.
   54 00:42CD -  -  -  -  _EHExit:		
   55 00:42CD CD 28 4C -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:42D0 C3 17 40 -  		jp 		WarmStart
   57 00:42D3 -  -  -  -  
   58 00:42D3 -  -  -  -  _EHAtText:
   59 00:42D3 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:42DD -  -  -  -  
   61 00:42DD -  -  -  -  NotImplemented:
   62 00:42DD 3E 05 C3 8F 
              42 -  -  -  		ERR_DISABLED
   63 00:42E2 -  -  -  -  TypeMismatch:
   64 00:42E2 3E 02 C3 8F 
              42 -  -  -  		ERR_BADTYPE
   65 00:42E7 -  -  -  -  BadValue:
   66 00:42E7 3E 03 C3 8F 
              42 -  -  -  		ERR_BADVALUE
   67 00:42EC -  -  -  -  SyntaxError:
   68 00:42EC 3E 0E C3 8F 
              42 -  -  -  		ERR_SYNTAX
   69 00:42F1 -  -  -  -  						
   70 00:42F1 -  -  -  -  ; ***************************************************************************************
   71 00:42F1 -  -  -  -  ;
   72 00:42F1 -  -  -  -  ;									Changes and Updates
   73 00:42F1 -  -  -  -  ;
   74 00:42F1 -  -  -  -  ; ***************************************************************************************
   75 00:42F1 -  -  -  -  ;
   76 00:42F1 -  -  -  -  ;		Date			Notes
   77 00:42F1 -  -  -  -  ;		==== 			=====
   78 00:42F1 -  -  -  -  ;
   79 00:42F1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42F1 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:42F1 -  -  -  -  ; ***************************************************************************************
    2 00:42F1 -  -  -  -  ; ***************************************************************************************
    3 00:42F1 -  -  -  -  ;
    4 00:42F1 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:42F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42F1 -  -  -  -  ;		Reviewed :	No
    8 00:42F1 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:42F1 -  -  -  -  ;
   10 00:42F1 -  -  -  -  ; ***************************************************************************************
   11 00:42F1 -  -  -  -  ; ***************************************************************************************
   12 00:42F1 -  -  -  -  
   13 00:42F1 -  -  -  -  ; ***************************************************************************************
   14 00:42F1 -  -  -  -  ;
   15 00:42F1 -  -  -  -  ; 									Addition
   16 00:42F1 -  -  -  -  ;
   17 00:42F1 -  -  -  -  ; ***************************************************************************************
   18 00:42F1 -  -  -  -  
   19 00:42F1 -  -  -  -  ALUAdd: 		;; [+]
   20 00:42F1 CD E4 43 78 
              B1 C2 E2 42 
              C3 4B 4B -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:42FC -  -  -  -  
   22 00:42FC -  -  -  -  ; ***************************************************************************************
   23 00:42FC -  -  -  -  ;
   24 00:42FC -  -  -  -  ; 									Subtraction
   25 00:42FC -  -  -  -  ;
   26 00:42FC -  -  -  -  ; ***************************************************************************************
   27 00:42FC -  -  -  -  
   28 00:42FC -  -  -  -  ALUSubtract: 	;; [-]
   29 00:42FC CD E4 43 78 
              B1 C2 E2 42 
              C3 51 4B -  		IntegerDispatch(Int32Subtract)
   30 00:4307 -  -  -  -  
   31 00:4307 -  -  -  -  ; ***************************************************************************************
   32 00:4307 -  -  -  -  ;
   33 00:4307 -  -  -  -  ; 									  Multiply
   34 00:4307 -  -  -  -  ;
   35 00:4307 -  -  -  -  ; ***************************************************************************************
   36 00:4307 -  -  -  -  
   37 00:4307 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:4307 CD E4 43 78 
              B1 C2 E2 42 
              C3 15 4B -  		IntegerDispatch(Int32Multiply)
   39 00:4312 -  -  -  -  
   40 00:4312 -  -  -  -  ; ***************************************************************************************
   41 00:4312 -  -  -  -  ;
   42 00:4312 -  -  -  -  ; 									  Divide
   43 00:4312 -  -  -  -  ;
   44 00:4312 -  -  -  -  ; ***************************************************************************************
   45 00:4312 -  -  -  -  
   46 00:4312 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4312 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4312 CD E4 43 78 
              B1 C2 E2 42 
              C3 26 4A -  		IntegerDispatch(Int32SDivide)
   49 00:431D -  -  -  -  
   50 00:431D -  -  -  -  ; ***************************************************************************************
   51 00:431D -  -  -  -  ;
   52 00:431D -  -  -  -  ; 									  Modulus
   53 00:431D -  -  -  -  ;
   54 00:431D -  -  -  -  ; ***************************************************************************************
   55 00:431D -  -  -  -  
   56 00:431D -  -  -  -  ALUModulus: 	;; [mod]
   57 00:431D CD E4 43 78 
              B1 C2 E2 42 
              C3 29 4A -  		IntegerDispatch(Int32Modulus)
   58 00:4328 -  -  -  -  
   59 00:4328 -  -  -  -  ; ***************************************************************************************
   60 00:4328 -  -  -  -  ;
   61 00:4328 -  -  -  -  ; 									  Logical
   62 00:4328 -  -  -  -  ;
   63 00:4328 -  -  -  -  ; ***************************************************************************************
   64 00:4328 -  -  -  -  
   65 00:4328 -  -  -  -  ALUAnd: 		;; [and]
   66 00:4328 CD E4 43 78 
              B1 C2 E2 42 
              C3 59 4B -  		IntegerDispatch(Int32And)
   67 00:4333 -  -  -  -  
   68 00:4333 -  -  -  -  ALUOr: 			;; [or]
   69 00:4333 CD E4 43 78 
              B1 C2 E2 42 
              C3 65 4B -  		IntegerDispatch(Int32Or)
   70 00:433E -  -  -  -  
   71 00:433E -  -  -  -  ALUXor: 		;; [eor]
   72 00:433E CD E4 43 78 
              B1 C2 E2 42 
              C3 71 4B -  		IntegerDispatch(Int32Xor)
   73 00:4349 -  -  -  -  
   74 00:4349 -  -  -  -  ; ***************************************************************************************
   75 00:4349 -  -  -  -  ;
   76 00:4349 -  -  -  -  ;									Changes and Updates
   77 00:4349 -  -  -  -  ;
   78 00:4349 -  -  -  -  ; ***************************************************************************************
   79 00:4349 -  -  -  -  ;
   80 00:4349 -  -  -  -  ;		Date			Notes
   81 00:4349 -  -  -  -  ;		==== 			=====
   82 00:4349 -  -  -  -  ;
   83 00:4349 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:4349 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:4349 -  -  -  -  ; ***************************************************************************************
    2 00:4349 -  -  -  -  ; ***************************************************************************************
    3 00:4349 -  -  -  -  ;
    4 00:4349 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:4349 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4349 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4349 -  -  -  -  ;		Reviewed :	No
    8 00:4349 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:4349 -  -  -  -  ;
   10 00:4349 -  -  -  -  ; ***************************************************************************************
   11 00:4349 -  -  -  -  ; ***************************************************************************************
   12 00:4349 -  -  -  -  
   13 00:4349 -  -  -  -  ; ***************************************************************************************
   14 00:4349 -  -  -  -  ;
   15 00:4349 -  -  -  -  ; 									<l> <op> <r>
   16 00:4349 -  -  -  -  ;
   17 00:4349 -  -  -  -  ; ***************************************************************************************
   18 00:4349 -  -  -  -  
   19 00:4349 -  -  -  -  ALULongReference:			;; [!]
   20 00:4349 CD 57 43 -  		call 	BRGetAddress 				; calculate address
   21 00:434C 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:434E CB F9 -  -  		set 	CIsReference,c
   23 00:4350 C9 -  -  -  		ret
   24 00:4351 -  -  -  -  
   25 00:4351 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4351 CD 49 43 -  		call 	ALULongReference
   27 00:4354 CB F1 -  -  		set 	CIsByteReference,c
   28 00:4356 C9 -  -  -  		ret
   29 00:4357 -  -  -  -  
   30 00:4357 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:4357 CD E4 43 78 
              B1 C2 E2 42 
              C3 62 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4362 -  -  -  -  _BRGAMain:		
   33 00:4362 CD 4B 4B -  		call 	Int32Add 					; address in HL'HL
   34 00:4365 CD CD 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:4368 C9 -  -  -  		ret
   36 00:4369 -  -  -  -  
   37 00:4369 -  -  -  -  ; ***************************************************************************************
   38 00:4369 -  -  -  -  ;
   39 00:4369 -  -  -  -  ;									Changes and Updates
   40 00:4369 -  -  -  -  ;
   41 00:4369 -  -  -  -  ; ***************************************************************************************
   42 00:4369 -  -  -  -  ;
   43 00:4369 -  -  -  -  ;		Date			Notes
   44 00:4369 -  -  -  -  ;		==== 			=====
   45 00:4369 -  -  -  -  ;
   46 00:4369 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:4369 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:4369 -  -  -  -  ; ***************************************************************************************
    2 00:4369 -  -  -  -  ; ***************************************************************************************
    3 00:4369 -  -  -  -  ;
    4 00:4369 -  -  -  -  ;		Name : 		compare.asm
    5 00:4369 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4369 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4369 -  -  -  -  ;		Reviewed :	No
    8 00:4369 -  -  -  -  ;		Purpose :	Comparison code
    9 00:4369 -  -  -  -  ;
   10 00:4369 -  -  -  -  ; ***************************************************************************************
   11 00:4369 -  -  -  -  ; ***************************************************************************************
   12 00:4369 -  -  -  -  
   13 00:4369 -  -  -  -  #macro compare_equals(n)
   14 00:4369             		call 	CompareBaseCode
   15 00:4369             		cp 		n
   16 00:4369             		jr 		z,UnaryInt32True
   17 00:4369             		jr 		UnaryInt32False
   18 00:4369             #endmacro
   19 00:4369 -  -  -  -  
   20 00:4369 -  -  -  -  #macro compare_not_equals(n)
   21 00:4369             		call 	CompareBaseCode
   22 00:4369             		cp 		n
   23 00:4369             		jr 		nz,UnaryInt32True
   24 00:4369             		jr 		UnaryInt32False
   25 00:4369             #endmacro
   26 00:4369 -  -  -  -  
   27 00:4369 -  -  -  -  ; ***************************************************************************************
   28 00:4369 -  -  -  -  ;
   29 00:4369 -  -  -  -  ; 								Return True/False
   30 00:4369 -  -  -  -  ;
   31 00:4369 -  -  -  -  ; ***************************************************************************************
   32 00:4369 -  -  -  -  
   33 00:4369 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:4369 3E FF -  -  		ld 		a,255
   35 00:436B 18 01 -  -  		jr 		_Int32Logical
   36 00:436D -  -  -  -  UnaryInt32False: ;; [false]
   37 00:436D AF -  -  -  		xor 	a
   38 00:436E -  -  -  -  _Int32Logical:
   39 00:436E 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:436F 67 -  -  -  		ld 		h,a
   41 00:4370 D9 -  -  -  		exx
   42 00:4371 6F -  -  -  		ld 		l,a
   43 00:4372 67 -  -  -  		ld 		h,a
   44 00:4373 D9 -  -  -  		exx
   45 00:4374 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:4376 C9 -  -  -  		ret
   47 00:4377 -  -  -  -  
   48 00:4377 -  -  -  -  ; ***************************************************************************************
   49 00:4377 -  -  -  -  ;
   50 00:4377 -  -  -  -  ; 										> = < (compare == value)
   51 00:4377 -  -  -  -  ;
   52 00:4377 -  -  -  -  ; ***************************************************************************************
   53 00:4377 -  -  -  -  
   54 00:4377 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:4377 CD AD 43 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4380 -  -  -  -  
   57 00:4380 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4380 CD AD 43 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:4389 -  -  -  -  
   60 00:4389 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:4389 CD AD 43 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4392 -  -  -  -  
   63 00:4392 -  -  -  -  ; ***************************************************************************************
   64 00:4392 -  -  -  -  ;
   65 00:4392 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4392 -  -  -  -  ;
   67 00:4392 -  -  -  -  ; ***************************************************************************************
   68 00:4392 -  -  -  -  
   69 00:4392 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4392 CD AD 43 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:439B -  -  -  -  
   72 00:439B -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:439B CD AD 43 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:43A4 -  -  -  -  
   75 00:43A4 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:43A4 CD AD 43 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:43AD -  -  -  -  
   78 00:43AD -  -  -  -  ; ***************************************************************************************
   79 00:43AD -  -  -  -  ;
   80 00:43AD -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:43AD -  -  -  -  ;
   82 00:43AD -  -  -  -  ; ***************************************************************************************
   83 00:43AD -  -  -  -  
   84 00:43AD -  -  -  -  CompareBaseCode:
   85 00:43AD CD E4 43 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:43B0 -  -  -  -  
   87 00:43B0 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:43B1 A1 -  -  -  		and 	c
   89 00:43B2 CB 47 -  -  		bit 	CIsString,a 
   90 00:43B4 C2 C3 43 -  		jp 		nz,StringCompare
   91 00:43B7 -  -  -  -  
   92 00:43B7 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:43B8 B1 -  -  -  		or 		c
   94 00:43B9 CB 47 -  -  		bit 	CIsString,a 
   95 00:43BB CA 84 4B -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:43BE -  -  -  -  
   97 00:43BE 3E 02 C3 8F 
              42 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:43C3 -  -  -  -  ;
   99 00:43C3 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:43C3 -  -  -  -  ;
  101 00:43C3 -  -  -  -  StringCompare:
  102 00:43C3 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:43C4 BE -  -  -  		cp 		(hl)
  104 00:43C5 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:43C7 20 08 -  -  		jr 		nz,_SCLess
  106 00:43C9 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:43CA 23 -  -  -  		inc 	hl
  108 00:43CB FE 20 -  -  		cp 		' '
  109 00:43CD 30 F4 -  -  		jr 		nc,StringCompare
  110 00:43CF AF -  -  -  		xor 	a 							; return 0.
  111 00:43D0 C9 -  -  -  		ret
  112 00:43D1 -  -  -  -  
  113 00:43D1 -  -  -  -  _SCLess:
  114 00:43D1 3E FF -  -  		ld 		a,$FF
  115 00:43D3 C9 -  -  -  		ret
  116 00:43D4 -  -  -  -  _SCGreater:
  117 00:43D4 3E 01 -  -  		ld 		a,1
  118 00:43D6 C9 -  -  -  		ret
  119 00:43D7 -  -  -  -  
  120 00:43D7 3E 0F C3 8F 
              42 -  -  -  		ERR_TODO()
  121 00:43DC -  -  -  -  
  122 00:43DC -  -  -  -  ; ***************************************************************************************
  123 00:43DC -  -  -  -  ;
  124 00:43DC -  -  -  -  ;									Changes and Updates
  125 00:43DC -  -  -  -  ;
  126 00:43DC -  -  -  -  ; ***************************************************************************************
  127 00:43DC -  -  -  -  ;
  128 00:43DC -  -  -  -  ;		Date			Notes
  129 00:43DC -  -  -  -  ;		==== 			=====
  130 00:43DC -  -  -  -  ;
  131 00:43DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:43DC -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:43DC -  -  -  -  ; ***************************************************************************************
    2 00:43DC -  -  -  -  ; ***************************************************************************************
    3 00:43DC -  -  -  -  ;
    4 00:43DC -  -  -  -  ;		Name : 		utility.asm
    5 00:43DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43DC -  -  -  -  ;		Reviewed :	No
    8 00:43DC -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:43DC -  -  -  -  ;
   10 00:43DC -  -  -  -  ; ***************************************************************************************
   11 00:43DC -  -  -  -  ; ***************************************************************************************
   12 00:43DC -  -  -  -  
   13 00:43DC -  -  -  -  ; ***************************************************************************************
   14 00:43DC -  -  -  -  ;
   15 00:43DC -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:43DC -  -  -  -  ;
   17 00:43DC -  -  -  -  ; ***************************************************************************************
   18 00:43DC -  -  -  -  
   19 00:43DC -  -  -  -  SwapHLDE:
   20 00:43DC EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:43DD D9 -  -  -  			exx
   22 00:43DE EB -  -  -  			ex 		de,hl
   23 00:43DF D9 -  -  -  			exx
   24 00:43E0 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:43E1 41 -  -  -  			ld 		b,c
   26 00:43E2 4F -  -  -  			ld 		c,a
   27 00:43E3 C9 -  -  -  			ret
   28 00:43E4 -  -  -  -  
   29 00:43E4 -  -  -  -  ; ***************************************************************************************
   30 00:43E4 -  -  -  -  ;
   31 00:43E4 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:43E4 -  -  -  -  ;
   33 00:43E4 -  -  -  -  ; ***************************************************************************************
   34 00:43E4 -  -  -  -  
   35 00:43E4 -  -  -  -  DereferenceBoth:
   36 00:43E4 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:43E6 C4 9F 44 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:43E9 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:43EB C8 -  -  -  			ret 	z
   40 00:43EC CD DC 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:43EF CD 9F 44 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:43F2 CD DC 43 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:43F5 C9 -  -  -  			ret
   44 00:43F6 -  -  -  -  
   45 00:43F6 -  -  -  -  ; ***************************************************************************************
   46 00:43F6 -  -  -  -  ;
   47 00:43F6 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:43F6 -  -  -  -  ;
   49 00:43F6 -  -  -  -  ; ***************************************************************************************
   50 00:43F6 -  -  -  -  
   51 00:43F6 -  -  -  -  NegateHLHL:	
   52 00:43F6 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:43F8 C2 E2 42 -  			jp 		nz,TypeMismatch
   54 00:43FB CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:43FD C4 9F 44 -  			call 	nz,Dereference 			; if required.
   56 00:4400 CD AB 4B -  			call 	Int32Negate
   57 00:4403 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:4404 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4404 -  -  -  -  ; ***************************************************************************************
    2 00:4404 -  -  -  -  ; ***************************************************************************************
    3 00:4404 -  -  -  -  ;
    4 00:4404 -  -  -  -  ;		Name : 		expression.asm
    5 00:4404 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4404 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4404 -  -  -  -  ;		Reviewed :	None
    8 00:4404 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4404 -  -  -  -  ;
   10 00:4404 -  -  -  -  ; ***************************************************************************************
   11 00:4404 -  -  -  -  ; ***************************************************************************************
   12 00:4404 -  -  -  -  
   13 00:4404 -  -  -  -  ; ***************************************************************************************
   14 00:4404 -  -  -  -  ;
   15 00:4404 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4404 -  -  -  -  ;
   17 00:4404 -  -  -  -  ; ***************************************************************************************
   18 00:4404 -  -  -  -  
   19 00:4404 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4404 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4405 -  -  -  -  EvaluateAtPrecedence:
   22 00:4405 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:4406 -  -  -  -  		;
   24 00:4406 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:4406 -  -  -  -  		;
   26 00:4406 CD CF 44 -  		call 	EvaluateTerm 				; get term
   27 00:4409 -  -  -  -  		;
   28 00:4409 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4409 -  -  -  -  		;
   30 00:4409 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:440A -  -  -  -  _EAPLoop:
   32 00:440A DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:440D FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:440F D8 -  -  -  		ret 	c
   35 00:4410 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4412 D0 -  -  -  		ret 	nc
   37 00:4413 -  -  -  -  		;
   38 00:4413 -  -  -  -  		; 		Get the precedence.
   39 00:4413 -  -  -  -  		;
   40 00:4413 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:4414 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:4416 21 40 48 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4419 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:441A 6F -  -  -  		ld 		l,a
   45 00:441B 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:441C E1 -  -  -  		pop 	hl 							; restore HL
   47 00:441D -  -  -  -  		;
   48 00:441D -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:441D -  -  -  -  		;
   50 00:441D 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:441E BB -  -  -  		cp 		e
   52 00:441F D0 -  -  -  		ret 	nc
   53 00:4420 -  -  -  -  
   54 00:4420 -  -  -  -  		;
   55 00:4420 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4420 -  -  -  -  		;
   57 00:4420 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4421 -  -  -  -  		;
   59 00:4421 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:4424 F5 -  -  -  		push 	af
   61 00:4425 -  -  -  -  		;
   62 00:4425 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:4426 D9 -  -  -  		exx 								; save HL'
   64 00:4427 E5 -  -  -  		push 	hl
   65 00:4428 D9 -  -  -  		exx 								
   66 00:4429 E5 -  -  -  		push 	hl 							; save HL
   67 00:442A -  -  -  -  		;
   68 00:442A DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:442C -  -  -  -  		;
   70 00:442C -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:442C -  -  -  -  		;
   72 00:442C 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:442D CD 05 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4430 -  -  -  -  		;
   75 00:4430 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4430 -  -  -  -  		;
   77 00:4430 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4431 -  -  -  -  
   79 00:4431 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:4432 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:4433 D9 -  -  -  		exx
   82 00:4434 EB -  -  -  		ex 		de,hl
   83 00:4435 E1 -  -  -  		pop 	hl
   84 00:4436 D9 -  -  -  		exx
   85 00:4437 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:4438 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:4439 -  -  -  -  		;
   88 00:4439 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:4439 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:4439 -  -  -  -  		;
   91 00:4439 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:443A -  -  -  -  		;
   93 00:443A -  -  -  -  		; 		Call the binary operator in A.
   94 00:443A -  -  -  -  		;
   95 00:443A D5 -  -  -  		push 	de
   96 00:443B E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:443C E6 7F 21 00 
              00 6F 29 11 
              8C 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:444E E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:444F D1 -  -  -  		pop 	de 							; restore DE
  100 00:4450 CD 59 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4453 -  -  -  -  		;
  102 00:4453 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:4454 -  -  -  -  		;
  104 00:4454 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:4456 -  -  -  -  
  106 00:4456 -  -  -  -  ; ***************************************************************************************
  107 00:4456 -  -  -  -  ;
  108 00:4456 -  -  -  -  ;									Changes and Updates
  109 00:4456 -  -  -  -  ;
  110 00:4456 -  -  -  -  ; ***************************************************************************************
  111 00:4456 -  -  -  -  ;
  112 00:4456 -  -  -  -  ;		Date			Notes
  113 00:4456 -  -  -  -  ;		==== 			=====
  114 00:4456 -  -  -  -  ;
  115 00:4456 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4456 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:4456 -  -  -  -  ; ***************************************************************************************
    2 00:4456 -  -  -  -  ; ***************************************************************************************
    3 00:4456 -  -  -  -  ;
    4 00:4456 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:4456 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4456 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4456 -  -  -  -  ;		Reviewed :	No
    8 00:4456 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:4456 -  -  -  -  ;
   10 00:4456 -  -  -  -  ; ***************************************************************************************
   11 00:4456 -  -  -  -  ; ***************************************************************************************
   12 00:4456 -  -  -  -  
   13 00:4456 -  -  -  -  ; ***************************************************************************************
   14 00:4456 -  -  -  -  ;
   15 00:4456 -  -  -  -  ; 								Evaluate an integer term
   16 00:4456 -  -  -  -  ;
   17 00:4456 -  -  -  -  ; ***************************************************************************************
   18 00:4456 -  -  -  -  
   19 00:4456 -  -  -  -  EvaluateIntegerTerm:
   20 00:4456 CD CF 44 -  		call 	EvaluateTerm
   21 00:4459 CD 9F 44 -  		call 	DeReference
   22 00:445C CB 41 -  -  		bit 	CIsString,c
   23 00:445E C8 -  -  -  		ret 	z
   24 00:445F C3 E2 42 -  		jp 		TypeMismatch
   25 00:4462 -  -  -  -  
   26 00:4462 -  -  -  -  ; ***************************************************************************************
   27 00:4462 -  -  -  -  ;
   28 00:4462 -  -  -  -  ; 								Evaluate a string term
   29 00:4462 -  -  -  -  ;
   30 00:4462 -  -  -  -  ; ***************************************************************************************
   31 00:4462 -  -  -  -  
   32 00:4462 -  -  -  -  EvaluateStringTerm:
   33 00:4462 CD CF 44 -  		call 	EvaluateTerm
   34 00:4465 CD 9F 44 -  		call 	DeReference
   35 00:4468 CB 41 -  -  		bit 	CIsString,c
   36 00:446A C0 -  -  -  		ret 	nz
   37 00:446B C3 E2 42 -  		jp 		TypeMismatch
   38 00:446E -  -  -  -  
   39 00:446E -  -  -  -  ; ***************************************************************************************
   40 00:446E -  -  -  -  ;
   41 00:446E -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:446E -  -  -  -  ;
   43 00:446E -  -  -  -  ; ***************************************************************************************
   44 00:446E -  -  -  -  
   45 00:446E -  -  -  -  EvaluateValue:
   46 00:446E CD 04 44 -  		call 	EvaluateAtPrecedence0
   47 00:4471 C3 9F 44 -  		jp 		Dereference
   48 00:4474 -  -  -  -  
   49 00:4474 -  -  -  -  ; ***************************************************************************************
   50 00:4474 -  -  -  -  ;
   51 00:4474 -  -  -  -  ; 									Evaluate a number
   52 00:4474 -  -  -  -  ;
   53 00:4474 -  -  -  -  ; ***************************************************************************************
   54 00:4474 -  -  -  -  
   55 00:4474 -  -  -  -  EvaluateInteger:
   56 00:4474 CD 6E 44 -  		call 	EvaluateValue
   57 00:4477 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:4479 C8 -  -  -  		ret 	z
   59 00:447A C3 E2 42 -  		jp 		TypeMismatch
   60 00:447D -  -  -  -  
   61 00:447D -  -  -  -  ; ***************************************************************************************
   62 00:447D -  -  -  -  ;
   63 00:447D -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:447D -  -  -  -  ;
   65 00:447D -  -  -  -  ; ***************************************************************************************
   66 00:447D -  -  -  -  
   67 00:447D -  -  -  -  Evaluate8BitInteger:
   68 00:447D CD 74 44 -  		call 	EvaluateInteger
   69 00:4480 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4481 7C -  -  -  		ld 		a,h
   71 00:4482 B5 -  -  -  		or 		l
   72 00:4483 D9 -  -  -  		exx 	
   73 00:4484 B4 -  -  -  		or 		h
   74 00:4485 C2 E7 42 -  		jp 		nz,BadValue
   75 00:4488 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:4489 C9 -  -  -  		ret
   77 00:448A -  -  -  -  		
   78 00:448A -  -  -  -  ; ***************************************************************************************
   79 00:448A -  -  -  -  ;
   80 00:448A -  -  -  -  ; 									Evaluate a string
   81 00:448A -  -  -  -  ;
   82 00:448A -  -  -  -  ; ***************************************************************************************
   83 00:448A -  -  -  -  
   84 00:448A -  -  -  -  EvaluateStringOnly:
   85 00:448A CD 6E 44 -  		call 	EvaluateValue
   86 00:448D CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:448F CA E2 42 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4492 C9 -  -  -  		ret
   89 00:4493 -  -  -  -  
   90 00:4493 -  -  -  -  ; ***************************************************************************************
   91 00:4493 -  -  -  -  ;
   92 00:4493 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4493 -  -  -  -  ;
   94 00:4493 -  -  -  -  ; ***************************************************************************************
   95 00:4493 -  -  -  -  
   96 00:4493 -  -  -  -  Return8BitConstant:
   97 00:4493 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:4496 6F -  -  -  		ld 		l,a
   99 00:4497 -  -  -  -  Return16BitConstant:
  100 00:4497 D9 -  -  -  		exx 								; clear HL'
  101 00:4498 21 00 00 -  		ld 		hl,0
  102 00:449B D9 -  -  -  		exx
  103 00:449C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:449E C9 -  -  -  		ret
  105 00:449F -  -  -  -  
  106 00:449F -  -  -  -  ; ***************************************************************************************
  107 00:449F -  -  -  -  ;
  108 00:449F -  -  -  -  ;									Changes and Updates
  109 00:449F -  -  -  -  ;
  110 00:449F -  -  -  -  ; ***************************************************************************************
  111 00:449F -  -  -  -  ;
  112 00:449F -  -  -  -  ;		Date			Notes
  113 00:449F -  -  -  -  ;		==== 			=====
  114 00:449F -  -  -  -  ;
  115 00:449F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:449F -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:449F -  -  -  -  ; ***************************************************************************************
    2 00:449F -  -  -  -  ; ***************************************************************************************
    3 00:449F -  -  -  -  ;
    4 00:449F -  -  -  -  ;		Name : 		reference.asm
    5 00:449F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:449F -  -  -  -  ;		Date : 		1st May 2022
    7 00:449F -  -  -  -  ;		Reviewed :	No
    8 00:449F -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:449F -  -  -  -  ;
   10 00:449F -  -  -  -  ; ***************************************************************************************
   11 00:449F -  -  -  -  ; ***************************************************************************************
   12 00:449F -  -  -  -  
   13 00:449F -  -  -  -  ; ***************************************************************************************
   14 00:449F -  -  -  -  ;
   15 00:449F -  -  -  -  ; 									Dereference HL'HL C
   16 00:449F -  -  -  -  ;
   17 00:449F -  -  -  -  ; ***************************************************************************************
   18 00:449F -  -  -  -  
   19 00:449F -  -  -  -  Dereference:
   20 00:449F CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:44A1 C8 -  -  -  		ret 	z
   22 00:44A2 -  -  -  -  
   23 00:44A2 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:44A4 -  -  -  -  		
   25 00:44A4 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:44A6 20 20 -  -  		jr 		nz,_DRInternal
   27 00:44A8 -  -  -  -  
   28 00:44A8 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:44AA 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:44AC -  -  -  -  
   31 00:44AC E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:44AD 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:44B1 D9 -  -  -  		exx
   34 00:44B2 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:44B3 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:44B4 23 -  -  -  		inc  	hl
   37 00:44B5 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:44B9 D9 -  -  -  		exx 								; fix back
   39 00:44BA C9 -  -  -  		ret
   40 00:44BB -  -  -  -  
   41 00:44BB -  -  -  -  _DeRefByte:		
   42 00:44BB 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:44BC 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:44BF 6F -  -  -  		ld	 	l,a
   45 00:44C0 D9 -  -  -  		exx
   46 00:44C1 21 00 00 -  		ld 		hl,$0000
   47 00:44C4 D9 -  -  -  		exx
   48 00:44C5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:44C7 C9 -  -  -  		ret
   50 00:44C8 -  -  -  -  
   51 00:44C8 -  -  -  -  _DRInternal:
   52 00:44C8 3E 05 C3 8F 
              42 -  -  -  		ERR_DISABLED
   53 00:44CD -  -  -  -  
   54 00:44CD -  -  -  -  ; ***************************************************************************************
   55 00:44CD -  -  -  -  ;
   56 00:44CD -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:44CD -  -  -  -  ;
   58 00:44CD -  -  -  -  ; ***************************************************************************************
   59 00:44CD -  -  -  -  
   60 00:44CD -  -  -  -  DRConvertHLHLToAddress:
   61 00:44CD -  -  -  -  		#ifdef EZ80
   62 00:44CD             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:44CD             		exx
   64 00:44CD             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:44CD             		ld 		hl,$0000 					; zero HL'
   66 00:44CD             		exx
   67 00:44CD             		ld 		hl,(AConvert) 				; load UHL
   68 00:44CD             		#endif
   69 00:44CD C9 -  -  -  		ret
   70 00:44CE -  -  -  -  
   71 00:44CE -  -  -  -  ; ***************************************************************************************
   72 00:44CE -  -  -  -  ;
   73 00:44CE -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:44CE -  -  -  -  ;
   75 00:44CE -  -  -  -  ; ***************************************************************************************
   76 00:44CE -  -  -  -  
   77 00:44CE -  -  -  -  DRConvertAddressToHLHL:
   78 00:44CE -  -  -  -  		#ifdef EZ80
   79 00:44CE             		ld 		(AConvert),hl
   80 00:44CE             		ld 		hl,$0000
   81 00:44CE             		ld 		(AConvert+3),hl
   82 00:44CE             		exx
   83 00:44CE             		ld 		hl,(AConvert+2)
   84 00:44CE             		exx
   85 00:44CE             		xor 	a
   86 00:44CE             		ld 		(AConvert+2),a
   87 00:44CE             		ld 		hl,(AConvert)
   88 00:44CE             		#endif
   89 00:44CE C9 -  -  -  		ret
   90 00:44CF -  -  -  -  
   91 00:44CF -  -  -  -  ; ***************************************************************************************
   92 00:44CF -  -  -  -  ;
   93 00:44CF -  -  -  -  ;									Changes and Updates
   94 00:44CF -  -  -  -  ;
   95 00:44CF -  -  -  -  ; ***************************************************************************************
   96 00:44CF -  -  -  -  ;
   97 00:44CF -  -  -  -  ;		Date			Notes
   98 00:44CF -  -  -  -  ;		==== 			=====
   99 00:44CF -  -  -  -  ;
  100 00:44CF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:44CF -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:44CF -  -  -  -  ; ***************************************************************************************
    2 00:44CF -  -  -  -  ; ***************************************************************************************
    3 00:44CF -  -  -  -  ;
    4 00:44CF -  -  -  -  ;		Name : 		term.asm
    5 00:44CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44CF -  -  -  -  ;		Reviewed :	No
    8 00:44CF -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:44CF -  -  -  -  ;
   10 00:44CF -  -  -  -  ; ***************************************************************************************
   11 00:44CF -  -  -  -  ; ***************************************************************************************
   12 00:44CF -  -  -  -  
   13 00:44CF -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:44CF             		add_hlhl_16
   15 00:44CF             		exx
   16 00:44CF             		adc_hlhl_16
   17 00:44CF             		exx
   18 00:44CF             #endmacro
   19 00:44CF -  -  -  -  
   20 00:44CF -  -  -  -  ; ***************************************************************************************
   21 00:44CF -  -  -  -  ;
   22 00:44CF -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:44CF -  -  -  -  ;
   24 00:44CF -  -  -  -  ; ***************************************************************************************
   25 00:44CF -  -  -  -  ;
   26 00:44CF -  -  -  -  ; 		Terms can be:
   27 00:44CF -  -  -  -  ;
   28 00:44CF -  -  -  -  ;			<integer> 			42 						not negative
   29 00:44CF -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:44CF -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:44CF -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:44CF -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:44CF -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:44CF -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:44CF -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:44CF -  -  -  -  ; 														reference of some sort.
   37 00:44CF -  -  -  -  ;
   38 00:44CF -  -  -  -  ; ***************************************************************************************
   39 00:44CF -  -  -  -  
   40 00:44CF -  -  -  -  EvaluateTerm:		
   41 00:44CF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:44D1 D9 -  -  -  		exx
   43 00:44D2 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:44D5 D9 -  -  -  		exx
   45 00:44D6 21 00 00 -  		ld 		hl,$0000		
   46 00:44D9 -  -  -  -  		;
   47 00:44D9 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:44DC FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:44DE 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:44E0 DA 7E 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:44E3 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:44E5 C2 2D 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:44E8 -  -  -  -  		;
   54 00:44E8 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:44E8 -  -  -  -  		;
   56 00:44E8 -  -  -  -  _ETIntegerConstant:
   57 00:44E8 -  -  -  -  		;
   58 00:44E8 -  -  -  -  _ETIntegerLoop:		
   59 00:44E8 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:44EB E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:44ED B5 -  -  -  		or 		l 							; or into L
   62 00:44EE 6F -  -  -  		ld 		l,a
   63 00:44EF DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:44F1 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:44F4 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:44F6 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:44F8 D8 -  -  -  		ret 	c
   68 00:44F9 -  -  -  -  
   69 00:44F9 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:44FE 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4503 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4508 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:450D 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4512 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:4517 -  -  -  -  
   76 00:4517 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4519 -  -  -  -  		;
   78 00:4519 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4519 -  -  -  -  		;
   80 00:4519 -  -  -  -  _ETStringMarker:		
   81 00:4519 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:451B DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:451D DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:451F E1 -  -  -  		pop 	hl
   85 00:4520 11 00 00 -  		ld 		de,$0000
   86 00:4523 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:4526 DD 19 -  -  		add 	ix,de
   88 00:4528 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:452A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:452C C9 -  -  -  		ret
   91 00:452D -  -  -  -  		;
   92 00:452D -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:452D -  -  -  -  		;
   94 00:452D -  -  -  -  _ETFoundKeyword:
   95 00:452D DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:452F FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4531 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:4533 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:4535 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:4537 -  -  -  -  		;
  101 00:4537 -  -  -  -  		;		Unary group 0
  102 00:4537 -  -  -  -  		;
  103 00:4537 E6 7F 21 00 
              00 6F 29 11 
              8C 49 19 5E 
              23 56 ED 53 
              5A 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:4549 C3 59 40 -  		jp 		JumpCode 					; and go there.
  105 00:454C -  -  -  -  
  106 00:454C -  -  -  -  _ETNotUnaryFunction0:	
  107 00:454C FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:454E 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4550 -  -  -  -  		;
  110 00:4550 -  -  -  -  		; 		- term
  111 00:4550 -  -  -  -  		;
  112 00:4550 CD 56 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4553 CD F6 43 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:4556 C9 -  -  -  		ret
  115 00:4557 -  -  -  -  		;
  116 00:4557 -  -  -  -  		;		! ? indirection check
  117 00:4557 -  -  -  -  		;
  118 00:4557 -  -  -  -  _ETCheckIndirection:	
  119 00:4557 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:4559 28 05 -  -  		jr 		z,_ETIndirection
  121 00:455B FE 83 -  -  		cp 		KWD_PLING
  122 00:455D C2 EC 42 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4560 -  -  -  -  		;
  124 00:4560 -  -  -  -  		; 		! ? indirection
  125 00:4560 -  -  -  -  		;
  126 00:4560 -  -  -  -  _ETIndirection:
  127 00:4560 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4561 CD CF 44 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:4564 CD 9F 44 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:4567 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:4569 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:456B CD CD 44 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:456E F1 -  -  -  		pop 	af 							; get type back
  134 00:456F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4571 CB F9 -  -  		set 	CIsReference,c
  136 00:4573 FE 83 -  -  		cp 		KWD_PLING
  137 00:4575 C8 -  -  -  		ret 	z
  138 00:4576 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:4578 C9 -  -  -  		ret
  140 00:4579 -  -  -  -  _ETStringIndirect:
  141 00:4579 3E 02 C3 8F 
              42 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:457E -  -  -  -  		;
  143 00:457E -  -  -  -  		; 		Found an identifier.
  144 00:457E -  -  -  -  		;
  145 00:457E -  -  -  -  _ETVariable:
  146 00:457E CD 76 47 -  		call 	FindVariable 				; find the variable.
  147 00:4581 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4582 3E 10 C3 8F 
              42 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:4587 -  -  -  -  		
  150 00:4587 -  -  -  -  ; ***************************************************************************************
  151 00:4587 -  -  -  -  ;
  152 00:4587 -  -  -  -  ;									Changes and Updates
  153 00:4587 -  -  -  -  ;
  154 00:4587 -  -  -  -  ; ***************************************************************************************
  155 00:4587 -  -  -  -  ;
  156 00:4587 -  -  -  -  ;		Date			Notes
  157 00:4587 -  -  -  -  ;		==== 			=====
  158 00:4587 -  -  -  -  ;
  159 00:4587 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4587 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:4587 -  -  -  -  ; ***************************************************************************************
    2 00:4587 -  -  -  -  ; ***************************************************************************************
    3 00:4587 -  -  -  -  ;
    4 00:4587 -  -  -  -  ;		Name : 		abs.asm
    5 00:4587 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4587 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4587 -  -  -  -  ;		Reviewed :	No
    8 00:4587 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:4587 -  -  -  -  ;
   10 00:4587 -  -  -  -  ; ***************************************************************************************
   11 00:4587 -  -  -  -  ; ***************************************************************************************
   12 00:4587 -  -  -  -  
   13 00:4587 -  -  -  -  ; ***************************************************************************************
   14 00:4587 -  -  -  -  ;
   15 00:4587 -  -  -  -  ;								abs( unary function
   16 00:4587 -  -  -  -  ;
   17 00:4587 -  -  -  -  ; ***************************************************************************************
   18 00:4587 -  -  -  -  
   19 00:4587 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:4587 CD 56 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:458A D9 -  -  -  		exx 								; test MSB
   22 00:458B CB 7C -  -  		bit 	7,h
   23 00:458D D9 -  -  -  		exx
   24 00:458E C4 F6 43 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4591 C9 -  -  -  		ret
   26 00:4592 -  -  -  -  
   27 00:4592 -  -  -  -  ; ***************************************************************************************
   28 00:4592 -  -  -  -  ;
   29 00:4592 -  -  -  -  ;									Changes and Updates
   30 00:4592 -  -  -  -  ;
   31 00:4592 -  -  -  -  ; ***************************************************************************************
   32 00:4592 -  -  -  -  ;
   33 00:4592 -  -  -  -  ;		Date			Notes
   34 00:4592 -  -  -  -  ;		==== 			=====
   35 00:4592 -  -  -  -  ;
   36 00:4592 -  -  -  -  ; ***************************************************************************************
   37 00:4592 -  -  -  -  		
Listing for file "_build.asm"
   35 00:4592 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4592 -  -  -  -  ; ***************************************************************************************
    2 00:4592 -  -  -  -  ; ***************************************************************************************
    3 00:4592 -  -  -  -  ;
    4 00:4592 -  -  -  -  ;		Name : 		asc.asm
    5 00:4592 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4592 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4592 -  -  -  -  ;		Reviewed :	No
    8 00:4592 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4592 -  -  -  -  ;
   10 00:4592 -  -  -  -  ; ***************************************************************************************
   11 00:4592 -  -  -  -  ; ***************************************************************************************
   12 00:4592 -  -  -  -  
   13 00:4592 -  -  -  -  ; ***************************************************************************************
   14 00:4592 -  -  -  -  ;
   15 00:4592 -  -  -  -  ;								Asc unary function
   16 00:4592 -  -  -  -  ;
   17 00:4592 -  -  -  -  ; ***************************************************************************************
   18 00:4592 -  -  -  -  
   19 00:4592 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4592 CD 62 44 -  		call	EvaluateStringTerm			; Get string
   21 00:4595 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:4596 C3 93 44 -  		jp 		Return8BitConstant
   23 00:4599 -  -  -  -  
   24 00:4599 -  -  -  -  ; ***************************************************************************************
   25 00:4599 -  -  -  -  ;
   26 00:4599 -  -  -  -  ;									Changes and Updates
   27 00:4599 -  -  -  -  ;
   28 00:4599 -  -  -  -  ; ***************************************************************************************
   29 00:4599 -  -  -  -  ;
   30 00:4599 -  -  -  -  ;		Date			Notes
   31 00:4599 -  -  -  -  ;		==== 			=====
   32 00:4599 -  -  -  -  ;
   33 00:4599 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:4599 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:4599 -  -  -  -  ; ***************************************************************************************
    2 00:4599 -  -  -  -  ; ***************************************************************************************
    3 00:4599 -  -  -  -  ;
    4 00:4599 -  -  -  -  ;		Name : 		chr.asm
    5 00:4599 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4599 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4599 -  -  -  -  ;		Reviewed :	No
    8 00:4599 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:4599 -  -  -  -  ;
   10 00:4599 -  -  -  -  ; ***************************************************************************************
   11 00:4599 -  -  -  -  ; ***************************************************************************************
   12 00:4599 -  -  -  -  
   13 00:4599 -  -  -  -  ; ***************************************************************************************
   14 00:4599 -  -  -  -  ;
   15 00:4599 -  -  -  -  ;								Chr$() unary function
   16 00:4599 -  -  -  -  ;
   17 00:4599 -  -  -  -  ; ***************************************************************************************
   18 00:4599 -  -  -  -  
   19 00:4599 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:4599 CD 6A 42 -  		call 	CheckDollar
   21 00:459C CD 56 44 -  		call 	EvaluateIntegerTerm
   22 00:459F 7D -  -  -  		ld 		a,l 						; get character
   23 00:45A0 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:45A2 21 92 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:45A5 36 0D -  -  		ld 		(hl),13
   26 00:45A7 2B -  -  -  		dec 	hl
   27 00:45A8 77 -  -  -  		ld 		(hl),a
   28 00:45A9 C9 -  -  -  		ret
   29 00:45AA -  -  -  -  
   30 00:45AA -  -  -  -  ; ***************************************************************************************
   31 00:45AA -  -  -  -  ;
   32 00:45AA -  -  -  -  ;									Changes and Updates
   33 00:45AA -  -  -  -  ;
   34 00:45AA -  -  -  -  ; ***************************************************************************************
   35 00:45AA -  -  -  -  ;
   36 00:45AA -  -  -  -  ;		Date			Notes
   37 00:45AA -  -  -  -  ;		==== 			=====
   38 00:45AA -  -  -  -  ;
   39 00:45AA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:45AA -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:45AA -  -  -  -  ; ***************************************************************************************
    2 00:45AA -  -  -  -  ; ***************************************************************************************
    3 00:45AA -  -  -  -  ;
    4 00:45AA -  -  -  -  ;		Name : 		len.asm
    5 00:45AA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45AA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45AA -  -  -  -  ;		Reviewed :	None
    8 00:45AA -  -  -  -  ;		Purpose :	String Length
    9 00:45AA -  -  -  -  ;
   10 00:45AA -  -  -  -  ; ***************************************************************************************
   11 00:45AA -  -  -  -  ; ***************************************************************************************
   12 00:45AA -  -  -  -  
   13 00:45AA -  -  -  -  ; ***************************************************************************************
   14 00:45AA -  -  -  -  ;
   15 00:45AA -  -  -  -  ;								Len unary function
   16 00:45AA -  -  -  -  ;
   17 00:45AA -  -  -  -  ; ***************************************************************************************
   18 00:45AA -  -  -  -  
   19 00:45AA -  -  -  -  Unary_Len:	;; [len]
   20 00:45AA CD 62 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:45AD EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:45AE CD 6D 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:45B1 -  -  -  -  _ULCount:
   24 00:45B1 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:45B2 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:45B4 D8 -  -  -  		ret 	c
   27 00:45B5 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:45B6 13 -  -  -  		inc 	de
   29 00:45B7 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:45B9 -  -  -  -  
   31 00:45B9 -  -  -  -  ; ***************************************************************************************
   32 00:45B9 -  -  -  -  ;
   33 00:45B9 -  -  -  -  ;									Changes and Updates
   34 00:45B9 -  -  -  -  ;
   35 00:45B9 -  -  -  -  ; ***************************************************************************************
   36 00:45B9 -  -  -  -  ;
   37 00:45B9 -  -  -  -  ;		Date			Notes
   38 00:45B9 -  -  -  -  ;		==== 			=====
   39 00:45B9 -  -  -  -  ;
   40 00:45B9 -  -  -  -  ; ***************************************************************************************
   41 00:45B9 -  -  -  -  		
Listing for file "_build.asm"
   38 00:45B9 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:45B9 -  -  -  -  ; ***************************************************************************************
    2 00:45B9 -  -  -  -  ; ***************************************************************************************
    3 00:45B9 -  -  -  -  ;
    4 00:45B9 -  -  -  -  ;		Name : 		makestring.asm
    5 00:45B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45B9 -  -  -  -  ;		Reviewed :	No
    8 00:45B9 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:45B9 -  -  -  -  ;
   10 00:45B9 -  -  -  -  ; ***************************************************************************************
   11 00:45B9 -  -  -  -  ; ***************************************************************************************
   12 00:45B9 -  -  -  -  
   13 00:45B9 -  -  -  -  ; ***************************************************************************************
   14 00:45B9 -  -  -  -  ;
   15 00:45B9 -  -  -  -  ;								Str$() unary function
   16 00:45B9 -  -  -  -  ;
   17 00:45B9 -  -  -  -  ; ***************************************************************************************
   18 00:45B9 -  -  -  -  
   19 00:45B9 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:45B9 CD 56 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:45BC CD CD 44 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:45BF 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:45C1 C9 -  -  -  		ret
   24 00:45C2 -  -  -  -  
   25 00:45C2 -  -  -  -  ; ***************************************************************************************
   26 00:45C2 -  -  -  -  ;
   27 00:45C2 -  -  -  -  ;									Changes and Updates
   28 00:45C2 -  -  -  -  ;
   29 00:45C2 -  -  -  -  ; ***************************************************************************************
   30 00:45C2 -  -  -  -  ;
   31 00:45C2 -  -  -  -  ;		Date			Notes
   32 00:45C2 -  -  -  -  ;		==== 			=====
   33 00:45C2 -  -  -  -  ;
   34 00:45C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:45C2 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:45C2 -  -  -  -  ; ***************************************************************************************
    2 00:45C2 -  -  -  -  ; ***************************************************************************************
    3 00:45C2 -  -  -  -  ;
    4 00:45C2 -  -  -  -  ;		Name : 		not.asm
    5 00:45C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45C2 -  -  -  -  ;		Date : 		5th June 2023
    7 00:45C2 -  -  -  -  ;		Reviewed :	No
    8 00:45C2 -  -  -  -  ;		Purpose :	Logical not
    9 00:45C2 -  -  -  -  ;
   10 00:45C2 -  -  -  -  ; ***************************************************************************************
   11 00:45C2 -  -  -  -  ; ***************************************************************************************
   12 00:45C2 -  -  -  -  
   13 00:45C2 -  -  -  -  ; ***************************************************************************************
   14 00:45C2 -  -  -  -  ;
   15 00:45C2 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:45C2 -  -  -  -  ;
   17 00:45C2 -  -  -  -  ; ***************************************************************************************
   18 00:45C2 -  -  -  -  
   19 00:45C2 -  -  -  -  Unary_Not:		;; [not]
   20 00:45C2 CD 56 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:45C5 CD CC 45 -  		call 	__UNSwap 					; not and swap twice.
   22 00:45C8 CD CC 45 -  		call 	__UNSwap		
   23 00:45CB C9 -  -  -  		ret
   24 00:45CC -  -  -  -  
   25 00:45CC -  -  -  -  __UNSwap:
   26 00:45CC 7C -  -  -  		ld 		a,h
   27 00:45CD 2F -  -  -  		cpl
   28 00:45CE 67 -  -  -  		ld 		h,a
   29 00:45CF 7D -  -  -  		ld 		a,l
   30 00:45D0 2F -  -  -  		cpl 	
   31 00:45D1 6F -  -  -  		ld 		l,a
   32 00:45D2 D9 -  -  -  		exx
   33 00:45D3 C9 -  -  -  		ret
   34 00:45D4 -  -  -  -  
   35 00:45D4 -  -  -  -  ; ***************************************************************************************
   36 00:45D4 -  -  -  -  ;
   37 00:45D4 -  -  -  -  ;									Changes and Updates
   38 00:45D4 -  -  -  -  ;
   39 00:45D4 -  -  -  -  ; ***************************************************************************************
   40 00:45D4 -  -  -  -  ;
   41 00:45D4 -  -  -  -  ;		Date			Notes
   42 00:45D4 -  -  -  -  ;		==== 			=====
   43 00:45D4 -  -  -  -  ;
   44 00:45D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:45D4 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:45D4 -  -  -  -  ; ***************************************************************************************
    2 00:45D4 -  -  -  -  ; ***************************************************************************************
    3 00:45D4 -  -  -  -  ;
    4 00:45D4 -  -  -  -  ;		Name : 		page.asm
    5 00:45D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45D4 -  -  -  -  ;		Reviewed :	No
    8 00:45D4 -  -  -  -  ;		Purpose :	Various constants.
    9 00:45D4 -  -  -  -  ;
   10 00:45D4 -  -  -  -  ; ***************************************************************************************
   11 00:45D4 -  -  -  -  ; ***************************************************************************************
   12 00:45D4 -  -  -  -  
   13 00:45D4 -  -  -  -  ; ***************************************************************************************
   14 00:45D4 -  -  -  -  ;
   15 00:45D4 -  -  -  -  ;							page unary function (no bracket)
   16 00:45D4 -  -  -  -  ;
   17 00:45D4 -  -  -  -  ; ***************************************************************************************
   18 00:45D4 -  -  -  -  
   19 00:45D4 -  -  -  -  Unary_Page:	;; [page]
   20 00:45D4 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:45D7 D9 -  -  -  			exx
   22 00:45D8 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:45DB D9 -  -  -  			exx
   24 00:45DC 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:45DE C9 -  -  -  			ret
   26 00:45DF -  -  -  -  
   27 00:45DF -  -  -  -  ; ***************************************************************************************
   28 00:45DF -  -  -  -  ;
   29 00:45DF -  -  -  -  ;									Changes and Updates
   30 00:45DF -  -  -  -  ;
   31 00:45DF -  -  -  -  ; ***************************************************************************************
   32 00:45DF -  -  -  -  ;
   33 00:45DF -  -  -  -  ;		Date			Notes
   34 00:45DF -  -  -  -  ;		==== 			=====
   35 00:45DF -  -  -  -  ;
   36 00:45DF -  -  -  -  ; ***************************************************************************************
   37 00:45DF -  -  -  -  			
Listing for file "_build.asm"
   41 00:45DF -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:45DF -  -  -  -  ; ***************************************************************************************
    2 00:45DF -  -  -  -  ; ***************************************************************************************
    3 00:45DF -  -  -  -  ;
    4 00:45DF -  -  -  -  ;		Name : 		random.asm
    5 00:45DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45DF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45DF -  -  -  -  ;		Reviewed :	No
    8 00:45DF -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:45DF -  -  -  -  ;
   10 00:45DF -  -  -  -  ; ***************************************************************************************
   11 00:45DF -  -  -  -  ; ***************************************************************************************
   12 00:45DF -  -  -  -  
   13 00:45DF -  -  -  -  ; ***************************************************************************************
   14 00:45DF -  -  -  -  ;
   15 00:45DF -  -  -  -  ;								Random unary function
   16 00:45DF -  -  -  -  ;
   17 00:45DF -  -  -  -  ; ***************************************************************************************
   18 00:45DF -  -  -  -  
   19 00:45DF -  -  -  -  Unary_Random:	;; [rnd]
   20 00:45DF 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:45E0 CD 56 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:45E3 D9 -  -  -  		exx 								; is it -ve
   23 00:45E4 CB 7C -  -  		bit 	7,h
   24 00:45E6 D9 -  -  -  		exx
   25 00:45E7 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:45E9 22 65 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:45EC D9 -  -  -  		exx
   28 00:45ED 22 69 40 -  		ld 		(RandomSeed+4),hl
   29 00:45F0 D9 -  -  -  		exx
   30 00:45F1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:45F3 C9 -  -  -  		ret
   32 00:45F4 -  -  -  -  _URDontSeed:		
   33 00:45F4 -  -  -  -  
   34 00:45F4 CD 7D 4B -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:45F7 28 19 -  -  		jr 		z,_URFail
   36 00:45F9 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:45FA D9 -  -  -  		exx
   38 00:45FB E5 -  -  -  		push 	hl
   39 00:45FC D9 -  -  -  		exx
   40 00:45FD -  -  -  -  		;
   41 00:45FD CD 21 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:4600 D9 -  -  -  		exx
   43 00:4601 CD 21 46 -  		call 	URandomHL
   44 00:4604 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:4606 D9 -  -  -  		exx
   46 00:4607 -  -  -  -  		;
   47 00:4607 D9 -  -  -  		exx 								; restore range.
   48 00:4608 D1 -  -  -  		pop 	de
   49 00:4609 D9 -  -  -  		exx
   50 00:460A D1 -  -  -  		pop 	de
   51 00:460B -  -  -  -  		;
   52 00:460B CD 29 4A -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:460E 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:460F 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4611 C9 -  -  -  		ret
   56 00:4612 -  -  -  -  _URFail:
   57 00:4612 3E 03 C3 8F 
              42 -  -  -  		ERR_BADVALUE
   58 00:4617 -  -  -  -  ; ***************************************************************************************
   59 00:4617 -  -  -  -  ;
   60 00:4617 -  -  -  -  ; 									Push RNG off zero
   61 00:4617 -  -  -  -  ;
   62 00:4617 -  -  -  -  ; ***************************************************************************************
   63 00:4617 -  -  -  -  
   64 00:4617 -  -  -  -  UnaryRandomInitialise:
   65 00:4617 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4619 -  -  -  -  _URILoop:
   67 00:4619 C5 -  -  -  		push 	bc
   68 00:461A CD 21 46 -  		call 	URandomHL
   69 00:461D C1 -  -  -  		pop 	bc
   70 00:461E 10 F9 -  -  		djnz 	_URILoop
   71 00:4620 C9 -  -  -  		ret
   72 00:4621 -  -  -  -  
   73 00:4621 -  -  -  -  ; ***************************************************************************************
   74 00:4621 -  -  -  -  ;
   75 00:4621 -  -  -  -  ;							16 bit random number generator
   76 00:4621 -  -  -  -  ;
   77 00:4621 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:4621 -  -  -  -  ;		Actual author unspecified.
   79 00:4621 -  -  -  -  ;
   80 00:4621 -  -  -  -  ; ***************************************************************************************
   81 00:4621 -  -  -  -  
   82 00:4621 -  -  -  -  URandomHL:
   83 00:4621 2A 65 40 -  	    ld 		hl,(RandomSeed)
   84 00:4624 ED 5B 69 40 	    ld 		de,(RandomSeed+4)
   85 00:4628 44 -  -  -  	    ld 		b,h
   86 00:4629 4D -  -  -  	    ld 		c,l
   87 00:462A 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:462F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:4634 2C -  -  -  	    inc 	l
   90 00:4635 09 -  -  -  	    add 	hl,bc
   91 00:4636 22 65 40 -  	    ld 		(RandomSeed),hl
   92 00:4639 2A 69 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:463C ED 5A -  -  	    adc 	hl,de
   94 00:463E 22 69 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4641 EB -  -  -  	    ex 		de,hl
   96 00:4642 2A 6D 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:4645 ED 4B 71 40 	    ld 		bc,(RandomSeed+12)
   98 00:4649 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:464E ED 43 71 40 	    ld 		(RandomSeed+12),bc
  100 00:4652 9F -  -  -  	    sbc 	a,a
  101 00:4653 E6 C5 -  -  	    and 	%11000101
  102 00:4655 AD -  -  -  	    xor 	l
  103 00:4656 6F -  -  -  	    ld 		l,a
  104 00:4657 22 6D 40 -  	    ld 		(RandomSeed+8),hl
  105 00:465A EB -  -  -  	    ex 		de,hl
  106 00:465B 09 -  -  -  	    add 	hl,bc
  107 00:465C C9 -  -  -  	    ret		
  108 00:465D -  -  -  -  
  109 00:465D -  -  -  -  ; ***************************************************************************************
  110 00:465D -  -  -  -  ;
  111 00:465D -  -  -  -  ;									Changes and Updates
  112 00:465D -  -  -  -  ;
  113 00:465D -  -  -  -  ; ***************************************************************************************
  114 00:465D -  -  -  -  ;
  115 00:465D -  -  -  -  ;		Date			Notes
  116 00:465D -  -  -  -  ;		==== 			=====
  117 00:465D -  -  -  -  ;
  118 00:465D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:465D -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:465D -  -  -  -  ; ***************************************************************************************
    2 00:465D -  -  -  -  ; ***************************************************************************************
    3 00:465D -  -  -  -  ;
    4 00:465D -  -  -  -  ;		Name : 		sgn.asm
    5 00:465D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465D -  -  -  -  ;		Reviewed :	No
    8 00:465D -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:465D -  -  -  -  ;
   10 00:465D -  -  -  -  ; ***************************************************************************************
   11 00:465D -  -  -  -  ; ***************************************************************************************
   12 00:465D -  -  -  -  
   13 00:465D -  -  -  -  ; ***************************************************************************************
   14 00:465D -  -  -  -  ;
   15 00:465D -  -  -  -  ;								sgn unary function
   16 00:465D -  -  -  -  ;
   17 00:465D -  -  -  -  ; ***************************************************************************************
   18 00:465D -  -  -  -  
   19 00:465D -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:465D CD 56 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4660 CD 7D 4B -  		call 	Int32Zero 					; integer sgn() code
   22 00:4663 CA 6D 43 -  		jp 		z,UnaryInt32False
   23 00:4666 D9 -  -  -  		exx
   24 00:4667 CB 7C -  -  		bit 	7,h
   25 00:4669 D9 -  -  -  		exx
   26 00:466A C2 69 43 -  		jp 		nz,UnaryInt32True
   27 00:466D 3E 01 -  -  		ld 		a,1
   28 00:466F C3 93 44 -  		jp 		Return8BitConstant
   29 00:4672 -  -  -  -  
   30 00:4672 -  -  -  -  ; ***************************************************************************************
   31 00:4672 -  -  -  -  ;
   32 00:4672 -  -  -  -  ;									Changes and Updates
   33 00:4672 -  -  -  -  ;
   34 00:4672 -  -  -  -  ; ***************************************************************************************
   35 00:4672 -  -  -  -  ;
   36 00:4672 -  -  -  -  ;		Date			Notes
   37 00:4672 -  -  -  -  ;		==== 			=====
   38 00:4672 -  -  -  -  ;
   39 00:4672 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:4672 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4672 -  -  -  -  ; ***************************************************************************************
    2 00:4672 -  -  -  -  ; ***************************************************************************************
    3 00:4672 -  -  -  -  ;
    4 00:4672 -  -  -  -  ;		Name : 		simple.asm
    5 00:4672 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4672 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4672 -  -  -  -  ;		Reviewed :	No
    8 00:4672 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4672 -  -  -  -  ;
   10 00:4672 -  -  -  -  ; ***************************************************************************************
   11 00:4672 -  -  -  -  ; ***************************************************************************************
   12 00:4672 -  -  -  -  
   13 00:4672 -  -  -  -  ; ***************************************************************************************
   14 00:4672 -  -  -  -  ;
   15 00:4672 -  -  -  -  ;								( unary function (think about it)
   16 00:4672 -  -  -  -  ;
   17 00:4672 -  -  -  -  ; ***************************************************************************************
   18 00:4672 -  -  -  -  
   19 00:4672 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4672 CD 04 44 -  		call 	EvaluateAtPrecedence0
   21 00:4675 C3 5D 42 -  		jp  	CheckRightBracket
   22 00:4678 -  -  -  -  
   23 00:4678 -  -  -  -  ; ***************************************************************************************
   24 00:4678 -  -  -  -  ;
   25 00:4678 -  -  -  -  ;									Handle &x
   26 00:4678 -  -  -  -  ;
   27 00:4678 -  -  -  -  ; ***************************************************************************************
   28 00:4678 -  -  -  -  
   29 00:4678 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:4678 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:467B E6 C0 -  -  		and 		$C0
   32 00:467D FE 40 -  -  		cp 			$40
   33 00:467F C2 EC 42 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4682 C3 CF 44 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4685 -  -  -  -  
   36 00:4685 -  -  -  -  ; ***************************************************************************************
   37 00:4685 -  -  -  -  ;
   38 00:4685 -  -  -  -  ;									Changes and Updates
   39 00:4685 -  -  -  -  ;
   40 00:4685 -  -  -  -  ; ***************************************************************************************
   41 00:4685 -  -  -  -  ;
   42 00:4685 -  -  -  -  ;		Date			Notes
   43 00:4685 -  -  -  -  ;		==== 			=====
   44 00:4685 -  -  -  -  ;
   45 00:4685 -  -  -  -  ; ***************************************************************************************
   46 00:4685 -  -  -  -  		
Listing for file "_build.asm"
   44 00:4685 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4685 -  -  -  -  ; ***************************************************************************************
    2 00:4685 -  -  -  -  ; ***************************************************************************************
    3 00:4685 -  -  -  -  ;
    4 00:4685 -  -  -  -  ;		Name : 		str.asm
    5 00:4685 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4685 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4685 -  -  -  -  ;		Reviewed :	No
    8 00:4685 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4685 -  -  -  -  ;
   10 00:4685 -  -  -  -  ; ***************************************************************************************
   11 00:4685 -  -  -  -  ; ***************************************************************************************
   12 00:4685 -  -  -  -  
   13 00:4685 -  -  -  -  ; ***************************************************************************************
   14 00:4685 -  -  -  -  ;
   15 00:4685 -  -  -  -  ;								Str$() unary function
   16 00:4685 -  -  -  -  ;
   17 00:4685 -  -  -  -  ; ***************************************************************************************
   18 00:4685 -  -  -  -  
   19 00:4685 -  -  -  -  Unary_Str:	;; [str]
   20 00:4685 CD 6A 42 -  		call 	CheckDollar
   21 00:4688 CD 56 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   22 00:468B 01 81 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   23 00:468E 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:4690 CD BE 4B -  		call 	Int32ToString 				
   25 00:4693 21 81 40 -  		ld 		hl,_USBuffer 				; string address.
   26 00:4696 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:4698 C9 -  -  -  		ret
   28 00:4699 -  -  -  -  
   29 00:4699 -  -  -  -  ; ***************************************************************************************
   30 00:4699 -  -  -  -  ;
   31 00:4699 -  -  -  -  ;									Changes and Updates
   32 00:4699 -  -  -  -  ;
   33 00:4699 -  -  -  -  ; ***************************************************************************************
   34 00:4699 -  -  -  -  ;
   35 00:4699 -  -  -  -  ;		Date			Notes
   36 00:4699 -  -  -  -  ;		==== 			=====
   37 00:4699 -  -  -  -  ;
   38 00:4699 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:4699 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:4699 -  -  -  -  ; ***************************************************************************************
    2 00:4699 -  -  -  -  ; ***************************************************************************************
    3 00:4699 -  -  -  -  ;
    4 00:4699 -  -  -  -  ;		Name : 		time.asm
    5 00:4699 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4699 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4699 -  -  -  -  ;		Reviewed :	No
    8 00:4699 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:4699 -  -  -  -  ;
   10 00:4699 -  -  -  -  ; ***************************************************************************************
   11 00:4699 -  -  -  -  ; ***************************************************************************************
   12 00:4699 -  -  -  -  
   13 00:4699 -  -  -  -  ; ***************************************************************************************
   14 00:4699 -  -  -  -  ;
   15 00:4699 -  -  -  -  ;							Get system time in ms
   16 00:4699 -  -  -  -  ;
   17 00:4699 -  -  -  -  ; ***************************************************************************************
   18 00:4699 -  -  -  -  
   19 00:4699 -  -  -  -  Unary_Time:	;; [time]
   20 00:4699 CD 35 4C -  			call 	SYSGetTimer
   21 00:469C 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:469E C9 -  -  -  			ret
   23 00:469F -  -  -  -  
   24 00:469F -  -  -  -  ; ***************************************************************************************
   25 00:469F -  -  -  -  ;
   26 00:469F -  -  -  -  ;									Changes and Updates
   27 00:469F -  -  -  -  ;
   28 00:469F -  -  -  -  ; ***************************************************************************************
   29 00:469F -  -  -  -  ;
   30 00:469F -  -  -  -  ;		Date			Notes
   31 00:469F -  -  -  -  ;		==== 			=====
   32 00:469F -  -  -  -  ;
   33 00:469F -  -  -  -  ; ***************************************************************************************
   34 00:469F -  -  -  -  			
Listing for file "_build.asm"
   46 00:469F -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:469F -  -  -  -  ; ***************************************************************************************
    2 00:469F -  -  -  -  ; ***************************************************************************************
    3 00:469F -  -  -  -  ;
    4 00:469F -  -  -  -  ;		Name : 		top.asm
    5 00:469F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:469F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:469F -  -  -  -  ;		Reviewed :	No
    8 00:469F -  -  -  -  ;		Purpose :	Various constants.
    9 00:469F -  -  -  -  ;
   10 00:469F -  -  -  -  ; ***************************************************************************************
   11 00:469F -  -  -  -  ; ***************************************************************************************
   12 00:469F -  -  -  -  
   13 00:469F -  -  -  -  ; ***************************************************************************************
   14 00:469F -  -  -  -  ;
   15 00:469F -  -  -  -  ;							page unary function (no bracket)
   16 00:469F -  -  -  -  ;
   17 00:469F -  -  -  -  ; ***************************************************************************************
   18 00:469F -  -  -  -  
   19 00:469F -  -  -  -  Unary_Top:	;; [top]
   20 00:469F 2A 4D 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:46A2 D9 -  -  -  			exx
   22 00:46A3 2A 4F 40 -  			ld 		hl,(TopMemory+2)
   23 00:46A6 D9 -  -  -  			exx
   24 00:46A7 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:46A9 C9 -  -  -  			ret
   26 00:46AA -  -  -  -  
   27 00:46AA -  -  -  -  ; ***************************************************************************************
   28 00:46AA -  -  -  -  ;
   29 00:46AA -  -  -  -  ;									Changes and Updates
   30 00:46AA -  -  -  -  ;
   31 00:46AA -  -  -  -  ; ***************************************************************************************
   32 00:46AA -  -  -  -  ;
   33 00:46AA -  -  -  -  ;		Date			Notes
   34 00:46AA -  -  -  -  ;		==== 			=====
   35 00:46AA -  -  -  -  ;
   36 00:46AA -  -  -  -  ; ***************************************************************************************
   37 00:46AA -  -  -  -  			
Listing for file "_build.asm"
   47 00:46AA -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:46AA -  -  -  -  ; ***************************************************************************************
    2 00:46AA -  -  -  -  ; ***************************************************************************************
    3 00:46AA -  -  -  -  ;
    4 00:46AA -  -  -  -  ;		Name : 		val.asm
    5 00:46AA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46AA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46AA -  -  -  -  ;		Reviewed :	No
    8 00:46AA -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:46AA -  -  -  -  ;
   10 00:46AA -  -  -  -  ; ***************************************************************************************
   11 00:46AA -  -  -  -  ; ***************************************************************************************
   12 00:46AA -  -  -  -  
   13 00:46AA -  -  -  -  ; ***************************************************************************************
   14 00:46AA -  -  -  -  ;
   15 00:46AA -  -  -  -  ;								val( unary function
   16 00:46AA -  -  -  -  ;
   17 00:46AA -  -  -  -  ; ***************************************************************************************
   18 00:46AA -  -  -  -  
   19 00:46AA -  -  -  -  Unary_Val:	;; [val]
   20 00:46AA CD 62 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:46AD E5 -  -  -  		push 	hl 							; copy to BC
   22 00:46AE C1 -  -  -  		pop 	bc
   23 00:46AF 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:46B1 CD B4 4A -  		call 	Int32FromString 			; get the integer part.
   25 00:46B4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:46B6 C8 -  -  -  		ret		z 							; okay
   27 00:46B7 3E 03 C3 8F 
              42 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:46BC -  -  -  -  
   29 00:46BC -  -  -  -  ; ***************************************************************************************
   30 00:46BC -  -  -  -  ;
   31 00:46BC -  -  -  -  ;									Changes and Updates
   32 00:46BC -  -  -  -  ;
   33 00:46BC -  -  -  -  ; ***************************************************************************************
   34 00:46BC -  -  -  -  ;
   35 00:46BC -  -  -  -  ;		Date			Notes
   36 00:46BC -  -  -  -  ;		==== 			=====
   37 00:46BC -  -  -  -  ;
   38 00:46BC -  -  -  -  ; ***************************************************************************************
   39 00:46BC -  -  -  -  		
Listing for file "_build.asm"
   48 00:46BC -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:46BC -  -  -  -  ; ***************************************************************************************
    2 00:46BC -  -  -  -  ; ***************************************************************************************
    3 00:46BC -  -  -  -  ;
    4 00:46BC -  -  -  -  ;		Name : 		allocate.asm
    5 00:46BC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46BC -  -  -  -  ;		Date : 		4th June 2022
    7 00:46BC -  -  -  -  ;		Reviewed :	No
    8 00:46BC -  -  -  -  ;		Purpose :	Allocate memory
    9 00:46BC -  -  -  -  ;
   10 00:46BC -  -  -  -  ; ***************************************************************************************
   11 00:46BC -  -  -  -  ; ***************************************************************************************
   12 00:46BC -  -  -  -  
   13 00:46BC -  -  -  -  ; ***************************************************************************************
   14 00:46BC -  -  -  -  ;
   15 00:46BC -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:46BC -  -  -  -  ;
   17 00:46BC -  -  -  -  ; ***************************************************************************************
   18 00:46BC -  -  -  -  
   19 00:46BC -  -  -  -  AllocateBytes:
   20 00:46BC ED 5B 49 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:46C0 D5 -  -  -  		push 	de 							; save on stack
   22 00:46C1 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:46C2 22 49 40 -  		ld 		(LowAllocMemory),hl 		; update it
   24 00:46C5 EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:46C6 2A 45 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:46C9 AF -  -  -  		xor 	a
   27 00:46CA ED 52 -  -  		sbc 	hl,de
   28 00:46CC E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:46CD D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:46CE 3E 07 C3 8F 
              42 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:46D3 -  -  -  -  
   32 00:46D3 -  -  -  -  ; ***************************************************************************************
   33 00:46D3 -  -  -  -  ;
   34 00:46D3 -  -  -  -  ;									Changes and Updates
   35 00:46D3 -  -  -  -  ;
   36 00:46D3 -  -  -  -  ; ***************************************************************************************
   37 00:46D3 -  -  -  -  ;
   38 00:46D3 -  -  -  -  ;		Date			Notes
   39 00:46D3 -  -  -  -  ;		==== 			=====
   40 00:46D3 -  -  -  -  ;
   41 00:46D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:46D3 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:46D3 -  -  -  -  ; ***************************************************************************************
    2 00:46D3 -  -  -  -  ; ***************************************************************************************
    3 00:46D3 -  -  -  -  ;
    4 00:46D3 -  -  -  -  ;		Name : 		clear.asm
    5 00:46D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46D3 -  -  -  -  ;		Reviewed :	No
    8 00:46D3 -  -  -  -  ;		Purpose :	Clear command.
    9 00:46D3 -  -  -  -  ;
   10 00:46D3 -  -  -  -  ; ***************************************************************************************
   11 00:46D3 -  -  -  -  ; ***************************************************************************************
   12 00:46D3 -  -  -  -  
   13 00:46D3 -  -  -  -  ; ***************************************************************************************
   14 00:46D3 -  -  -  -  ;
   15 00:46D3 -  -  -  -  ;										CLEAR command
   16 00:46D3 -  -  -  -  ;
   17 00:46D3 -  -  -  -  ; ***************************************************************************************
   18 00:46D3 -  -  -  -  
   19 00:46D3 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:46D3 -  -  -  -  		;
   21 00:46D3 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:46D3 -  -  -  -  		;
   23 00:46D3 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:46D6 -  -  -  -  _CCFindLow:
   25 00:46D6 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:46D9 5E -  -  -  		ld 		e,(hl)		
   27 00:46DA 19 -  -  -  		add 	hl,de
   28 00:46DB 7B -  -  -  		ld 		a,e
   29 00:46DC B7 -  -  -  		or 		a
   30 00:46DD 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:46DF 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:46E0 22 4D 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:46E3 23 -  -  -  		inc 	hl 							; one for luck
   34 00:46E4 22 49 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:46E7 -  -  -  -  		;
   36 00:46E7 -  -  -  -  		; 	 		Reset the language stack
   37 00:46E7 -  -  -  -  		;
   38 00:46E7 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:46EA -  -  -  -  		;
   40 00:46EA 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:46EC 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:46EF 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:46F2 19 -  -  -  		add 	hl,de
   44 00:46F3 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:46F5 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:46F8 -  -  -  -  		;
   47 00:46F8 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:46FB 19 -  -  -  		add 	hl,de
   49 00:46FC 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:46FF -  -  -  -  		;
   51 00:46FF -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:46FF -  -  -  -  		;
   53 00:46FF 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:4702 -  -  -  -  _CCFClearHT:
   55 00:4702 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:4703 36 00 -  -  		ld 		(hl),0
   57 00:4705 1B -  -  -  		dec 	de
   58 00:4706 7A -  -  -  		ld 		a,d
   59 00:4707 B3 -  -  -  		or 		e
   60 00:4708 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:470A 22 41 40 -  		ld 		(HashTableBase),hl 			; save table base
   62 00:470D -  -  -  -  		;
   63 00:470D -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:470D -  -  -  -  		;
   65 00:470D 22 45 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:4710 -  -  -  -  		;
   67 00:4710 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:4710 -  -  -  -  		;
   69 00:4710 CD 17 46 -  		call 	UnaryRandomInitialise
   70 00:4713 C9 -  -  -  		ret
   71 00:4714 -  -  -  -  
   72 00:4714 -  -  -  -  ; ***************************************************************************************
   73 00:4714 -  -  -  -  ;
   74 00:4714 -  -  -  -  ;									Changes and Updates
   75 00:4714 -  -  -  -  ;
   76 00:4714 -  -  -  -  ; ***************************************************************************************
   77 00:4714 -  -  -  -  ;
   78 00:4714 -  -  -  -  ;		Date			Notes
   79 00:4714 -  -  -  -  ;		==== 			=====
   80 00:4714 -  -  -  -  ;
   81 00:4714 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:4714 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4714 -  -  -  -  ; ***************************************************************************************
    2 00:4714 -  -  -  -  ; ***************************************************************************************
    3 00:4714 -  -  -  -  ;
    4 00:4714 -  -  -  -  ;		Name : 		instance.asm
    5 00:4714 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4714 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4714 -  -  -  -  ;		Reviewed :	No
    8 00:4714 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4714 -  -  -  -  ;
   10 00:4714 -  -  -  -  ; ***************************************************************************************
   11 00:4714 -  -  -  -  ; ***************************************************************************************
   12 00:4714 -  -  -  -  
   13 00:4714 -  -  -  -  ; ***************************************************************************************
   14 00:4714 -  -  -  -  ;
   15 00:4714 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4714 -  -  -  -  ;
   17 00:4714 -  -  -  -  ; ***************************************************************************************
   18 00:4714 -  -  -  -  
   19 00:4714 -  -  -  -  SetCurrentInstance:
   20 00:4714 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4718 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:471B ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:471F -  -  -  -  
   24 00:471F C9 -  -  -  		ret
   25 00:4720 -  -  -  -  
   26 00:4720 -  -  -  -  
   27 00:4720 -  -  -  -  ; ***************************************************************************************
   28 00:4720 -  -  -  -  ;
   29 00:4720 -  -  -  -  ;									Changes and Updates
   30 00:4720 -  -  -  -  ;
   31 00:4720 -  -  -  -  ; ***************************************************************************************
   32 00:4720 -  -  -  -  ;
   33 00:4720 -  -  -  -  ;		Date			Notes
   34 00:4720 -  -  -  -  ;		==== 			=====
   35 00:4720 -  -  -  -  ;
   36 00:4720 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:4720 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:4720 -  -  -  -  ; ***************************************************************************************
    2 00:4720 -  -  -  -  ; ***************************************************************************************
    3 00:4720 -  -  -  -  ;
    4 00:4720 -  -  -  -  ;		Name : 		new.asm
    5 00:4720 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4720 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4720 -  -  -  -  ;		Reviewed :	No
    8 00:4720 -  -  -  -  ;		Purpose :	New command.
    9 00:4720 -  -  -  -  ;
   10 00:4720 -  -  -  -  ; ***************************************************************************************
   11 00:4720 -  -  -  -  ; ***************************************************************************************
   12 00:4720 -  -  -  -  
   13 00:4720 -  -  -  -  ; ***************************************************************************************
   14 00:4720 -  -  -  -  ;
   15 00:4720 -  -  -  -  ;										NEW command
   16 00:4720 -  -  -  -  ;
   17 00:4720 -  -  -  -  ; ***************************************************************************************
   18 00:4720 -  -  -  -  
   19 00:4720 -  -  -  -  Command_NEW: 	;; [new]
   20 00:4720 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4723 36 00 -  -  		ld 		(hl),0
   22 00:4725 CD D3 46 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4728 3E 00 C3 8F 
              42 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:472D -  -  -  -  
   25 00:472D -  -  -  -  ; ***************************************************************************************
   26 00:472D -  -  -  -  ;
   27 00:472D -  -  -  -  ;									Changes and Updates
   28 00:472D -  -  -  -  ;
   29 00:472D -  -  -  -  ; ***************************************************************************************
   30 00:472D -  -  -  -  ;
   31 00:472D -  -  -  -  ;		Date			Notes
   32 00:472D -  -  -  -  ;		==== 			=====
   33 00:472D -  -  -  -  ;
   34 00:472D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:472D -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:472D -  -  -  -  ; ***************************************************************************************
    2 00:472D -  -  -  -  ; ***************************************************************************************
    3 00:472D -  -  -  -  ;
    4 00:472D -  -  -  -  ;		Name : 		utility.asm
    5 00:472D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:472D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:472D -  -  -  -  ;		Reviewed :	No
    8 00:472D -  -  -  -  ;		Purpose :	Utility routines
    9 00:472D -  -  -  -  ;
   10 00:472D -  -  -  -  ; ***************************************************************************************
   11 00:472D -  -  -  -  ; ***************************************************************************************
   12 00:472D -  -  -  -  
   13 00:472D -  -  -  -  ; ***************************************************************************************
   14 00:472D -  -  -  -  ;
   15 00:472D -  -  -  -  ;							Print ASCII string at HL
   16 00:472D -  -  -  -  ;
   17 00:472D -  -  -  -  ; ***************************************************************************************
   18 00:472D -  -  -  -  
   19 00:472D -  -  -  -  PrintStringAtHL:
   20 00:472D 7E -  -  -  		ld 		a,(hl)
   21 00:472E FE 20 -  -  		cp 		$20		
   22 00:4730 D8 -  -  -  		ret 	c
   23 00:4731 CD 0C 4C -  		call 	SYSPrintChar
   24 00:4734 23 -  -  -  		inc 	hl
   25 00:4735 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4737 -  -  -  -  
   27 00:4737 -  -  -  -  ; ***************************************************************************************
   28 00:4737 -  -  -  -  ;
   29 00:4737 -  -  -  -  ;									Changes and Updates
   30 00:4737 -  -  -  -  ;
   31 00:4737 -  -  -  -  ; ***************************************************************************************
   32 00:4737 -  -  -  -  ;
   33 00:4737 -  -  -  -  ;		Date			Notes
   34 00:4737 -  -  -  -  ;		==== 			=====
   35 00:4737 -  -  -  -  ;
   36 00:4737 -  -  -  -  ; ***************************************************************************************
   37 00:4737 -  -  -  -  		
Listing for file "_build.asm"
   53 00:4737 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:4737 -  -  -  -  ; ***************************************************************************************
    2 00:4737 -  -  -  -  ; ***************************************************************************************
    3 00:4737 -  -  -  -  ;
    4 00:4737 -  -  -  -  ;		Name : 		create.asm
    5 00:4737 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4737 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4737 -  -  -  -  ;		Reviewed :	No
    8 00:4737 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:4737 -  -  -  -  ;
   10 00:4737 -  -  -  -  ; ***************************************************************************************
   11 00:4737 -  -  -  -  ; ***************************************************************************************
   12 00:4737 -  -  -  -  
   13 00:4737 -  -  -  -  ; ***************************************************************************************
   14 00:4737 -  -  -  -  ;
   15 00:4737 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:4737 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:4737 -  -  -  -  ;
   18 00:4737 -  -  -  -  ; ***************************************************************************************
   19 00:4737 -  -  -  -  
   20 00:4737 -  -  -  -  VariableCreate:		
   21 00:4737 -  -  -  -  		;
   22 00:4737 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:4737 -  -  -  -  		;
   24 00:4737 11 09 00 -  		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:473A 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:473B E5 -  -  -  		push 	hl 							; save count.
   27 00:473C CD BC 46 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:473F C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4740 -  -  -  -  		;
   30 00:4740 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4740 -  -  -  -  		;
   32 00:4740 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4741 -  -  -  -  _VCClear:
   34 00:4741 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4743 23 -  -  -  		inc 	hl
   36 00:4744 0B -  -  -  		dec 	bc
   37 00:4745 78 -  -  -  		ld		a,b
   38 00:4746 B1 -  -  -  		or 		c
   39 00:4747 20 F8 -  -  		jr 		nz,_VCClear
   40 00:4749 E1 -  -  -  		pop 	hl							; restore start address
   41 00:474A -  -  -  -  		;
   42 00:474A -  -  -  -  		;		Now start to create the data.
   43 00:474A -  -  -  -  		;
   44 00:474A E5 -  -  -  		push 	hl 							; save start
   45 00:474B -  -  -  -  		;
   46 00:474B -  -  -  -  		;		Write hash to +0
   47 00:474B -  -  -  -  		;
   48 00:474B 3A 7B 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:474E 77 -  -  -  		ld 		(hl),a
   50 00:474F 23 -  -  -  		inc 	hl
   51 00:4750 -  -  -  -  		;
   52 00:4750 -  -  -  -  		;		Write list head to +1
   53 00:4750 -  -  -  -  		;
   54 00:4750 E5 -  -  -  		push 	hl 							; save write position
   55 00:4751 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4754 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:4758 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:4759 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:475A 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4760 -  -  -  -  		;
   61 00:4760 -  -  -  -  		;		Write variable name to +5
   62 00:4760 -  -  -  -  		;
   63 00:4760 ED 5B 77 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4764 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:476A -  -  -  -  		;
   66 00:476A D1 -  -  -  		pop 	de 							; get the start address back
   67 00:476B 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:476E 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4774 -  -  -  -  		;
   70 00:4774 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4775 C9 -  -  -  		ret
   72 00:4776 -  -  -  -  
   73 00:4776 -  -  -  -  ; ***************************************************************************************
   74 00:4776 -  -  -  -  ;
   75 00:4776 -  -  -  -  ;									Changes and Updates
   76 00:4776 -  -  -  -  ;
   77 00:4776 -  -  -  -  ; ***************************************************************************************
   78 00:4776 -  -  -  -  ;
   79 00:4776 -  -  -  -  ;		Date			Notes
   80 00:4776 -  -  -  -  ;		==== 			=====
   81 00:4776 -  -  -  -  ;
   82 00:4776 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:4776 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4776 -  -  -  -  ; ***************************************************************************************
    2 00:4776 -  -  -  -  ; ***************************************************************************************
    3 00:4776 -  -  -  -  ;
    4 00:4776 -  -  -  -  ;		Name : 		find.asm
    5 00:4776 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4776 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4776 -  -  -  -  ;		Reviewed :	No
    8 00:4776 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4776 -  -  -  -  ;
   10 00:4776 -  -  -  -  ; ***************************************************************************************
   11 00:4776 -  -  -  -  ; ***************************************************************************************
   12 00:4776 -  -  -  -  
   13 00:4776 -  -  -  -  ; ***************************************************************************************
   14 00:4776 -  -  -  -  ;
   15 00:4776 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4776 -  -  -  -  ; 		variable information at (IX)
   17 00:4776 -  -  -  -  ;
   18 00:4776 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4776 -  -  -  -  ;		Don't autocreate arrays.
   20 00:4776 -  -  -  -  ;
   21 00:4776 -  -  -  -  ; ***************************************************************************************
   22 00:4776 -  -  -  -  
   23 00:4776 -  -  -  -  FindVariable:
   24 00:4776 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:4779 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:477B D2 EC 42 -  		jp 		nc,SyntaxError 		
   27 00:477E -  -  -  -  
   28 00:477E DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4781 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4783 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4785 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:4787 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:4789 -  -  -  -  		;
   34 00:4789 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:4789 -  -  -  -  		;
   36 00:4789 2A 3D 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:478C DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:478F 87 -  -  -  		add 	a,a 						; x4
   39 00:4790 87 -  -  -  		add 	a,a
   40 00:4791 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4792 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4793 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4795 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4797 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4799 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:479A C9 -  -  -  		ret
   47 00:479B -  -  -  -  		;
   48 00:479B -  -  -  -  		;		Not a standard simple variable.
   49 00:479B -  -  -  -  		;
   50 00:479B -  -  -  -  _FVNotSimple:
   51 00:479B CD C8 47 -  		call 	VariableInformation 		; get information about the variable.
   52 00:479E CD FE 47 -  		call 	VariableSearchList 			; search the linked list
   53 00:47A1 38 0A -  -  		jr 		c,_FVNotFound  				
   54 00:47A3 -  -  -  -  		;
   55 00:47A3 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:47A3 -  -  -  -  		;
   57 00:47A3 -  -  -  -  _FVExitReference:		
   58 00:47A3 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:47A6 19 -  -  -  		add 	hl,de 
   60 00:47A7 -  -  -  -  		;
   61 00:47A7 -  -  -  -  		; 		TODO: Array check code.
   62 00:47A7 -  -  -  -  		;
   63 00:47A7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:47A9 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:47AB AF -  -  -  		xor 	a 							; clear carry and return
   66 00:47AC C9 -  -  -  		ret
   67 00:47AD -  -  -  -  		;
   68 00:47AD -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:47AD -  -  -  -  		;
   70 00:47AD -  -  -  -  _FVNotFound:		
   71 00:47AD 3A 75 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:47B0 B7 -  -  -  		or 		a
   73 00:47B1 28 0F -  -  		jr 		z,_FVFail
   74 00:47B3 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:47B6 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:47B8 28 08 -  -  		jr 		z,_FVFail
   77 00:47BA 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   78 00:47BD CD 37 47 -  		call 	VariableCreate 				; create a new variable.
   79 00:47C0 18 E1 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:47C2 -  -  -  -  
   81 00:47C2 -  -  -  -  _FVFail:
   82 00:47C2 DD 2A 77 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:47C6 37 -  -  -  		scf
   84 00:47C7 C9 -  -  -  		ret
   85 00:47C8 -  -  -  -  
   86 00:47C8 -  -  -  -  ; ***************************************************************************************
   87 00:47C8 -  -  -  -  ;
   88 00:47C8 -  -  -  -  ;									Changes and Updates
   89 00:47C8 -  -  -  -  ;
   90 00:47C8 -  -  -  -  ; ***************************************************************************************
   91 00:47C8 -  -  -  -  ;
   92 00:47C8 -  -  -  -  ;		Date			Notes
   93 00:47C8 -  -  -  -  ;		==== 			=====
   94 00:47C8 -  -  -  -  ;
   95 00:47C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:47C8 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:47C8 -  -  -  -  ; ***************************************************************************************
    2 00:47C8 -  -  -  -  ; ***************************************************************************************
    3 00:47C8 -  -  -  -  ;
    4 00:47C8 -  -  -  -  ;		Name : 		info.asm
    5 00:47C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C8 -  -  -  -  ;		Date : 		4th June 2022
    7 00:47C8 -  -  -  -  ;		Reviewed :	No
    8 00:47C8 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:47C8 -  -  -  -  ;
   10 00:47C8 -  -  -  -  ; ***************************************************************************************
   11 00:47C8 -  -  -  -  ; ***************************************************************************************
   12 00:47C8 -  -  -  -  
   13 00:47C8 -  -  -  -  ; ***************************************************************************************
   14 00:47C8 -  -  -  -  ;
   15 00:47C8 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:47C8 -  -  -  -  ; 		after the identifier.
   17 00:47C8 -  -  -  -  ;
   18 00:47C8 -  -  -  -  ; ***************************************************************************************
   19 00:47C8 -  -  -  -  
   20 00:47C8 -  -  -  -  VariableInformation:
   21 00:47C8 DD 22 77 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:47CC -  -  -  -  		;
   23 00:47CC -  -  -  -  		; 		Calculate hash, find end.
   24 00:47CC -  -  -  -  		;
   25 00:47CC 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:47CE -  -  -  -  _VICalculateHash:
   27 00:47CE DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:47D1 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:47D3 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:47D5 80 -  -  -  		add 	a,b 						; add to hash
   31 00:47D6 07 -  -  -  		rlca
   32 00:47D7 07 -  -  -  		rlca
   33 00:47D8 80 -  -  -  		add 	a,b
   34 00:47D9 47 -  -  -  		ld 		b,a 						; update hash
   35 00:47DA DD 23 -  -  		inc 	ix 							; next character
   36 00:47DC 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:47DE -  -  -  -  		;
   38 00:47DE -  -  -  -  _VIHashDone:
   39 00:47DE 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:47DF -  -  -  -  		;
   41 00:47DF -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:47DF -  -  -  -  		;
   43 00:47DF 32 7B 40 -  		ld 		(VarHash),a
   44 00:47E2 -  -  -  -  		;
   45 00:47E2 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:47E2 -  -  -  -  		;		
   47 00:47E2 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:47E4 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:47E7 6F -  -  -  		ld 		l,a
   50 00:47E8 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:47E9 29 -  -  -  		add 	hl,hl
   52 00:47EA -  -  -  -  		;
   53 00:47EA ED 5B 41 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:47EE 19 -  -  -  		add 	hl,de
   55 00:47EF -  -  -  -  		;
   56 00:47EF DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:47F2 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:47F4 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:47F6 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:47F9 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:47FA -  -  -  -  _VINotArray:
   62 00:47FA 22 7D 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:47FD C9 -  -  -  		ret
   64 00:47FE -  -  -  -  
   65 00:47FE -  -  -  -  ; ***************************************************************************************
   66 00:47FE -  -  -  -  ;
   67 00:47FE -  -  -  -  ;									Changes and Updates
   68 00:47FE -  -  -  -  ;
   69 00:47FE -  -  -  -  ; ***************************************************************************************
   70 00:47FE -  -  -  -  ;
   71 00:47FE -  -  -  -  ;		Date			Notes
   72 00:47FE -  -  -  -  ;		==== 			=====
   73 00:47FE -  -  -  -  ;
   74 00:47FE -  -  -  -  ; ***************************************************************************************
   75 00:47FE -  -  -  -  
Listing for file "_build.asm"
   56 00:47FE -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:47FE -  -  -  -  ; ***************************************************************************************
    2 00:47FE -  -  -  -  ; ***************************************************************************************
    3 00:47FE -  -  -  -  ;
    4 00:47FE -  -  -  -  ;		Name : 		search.asm
    5 00:47FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47FE -  -  -  -  ;		Date : 		4th June 2022
    7 00:47FE -  -  -  -  ;		Reviewed :	No
    8 00:47FE -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:47FE -  -  -  -  ;
   10 00:47FE -  -  -  -  ; ***************************************************************************************
   11 00:47FE -  -  -  -  ; ***************************************************************************************
   12 00:47FE -  -  -  -  
   13 00:47FE -  -  -  -  ; ***************************************************************************************
   14 00:47FE -  -  -  -  ;
   15 00:47FE -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:47FE -  -  -  -  ;		CS if failed.
   17 00:47FE -  -  -  -  ;
   18 00:47FE -  -  -  -  ; ***************************************************************************************
   19 00:47FE -  -  -  -  
   20 00:47FE -  -  -  -  VariableSearchList:
   21 00:47FE 2A 7D 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4801 -  -  -  -  		;
   23 00:4801 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4801 -  -  -  -  		;		the address of the hash record
   25 00:4801 -  -  -  -  		;
   26 00:4801 -  -  -  -  _VSLLoop:
   27 00:4801 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4805 -  -  -  -  		;
   29 00:4805 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4806 AF -  -  -  		xor 	a
   31 00:4807 ED 6A -  -  		adc 	hl,hl
   32 00:4809 E1 -  -  -  		pop 	hl
   33 00:480A 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:480C 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:480D C8 -  -  -  		ret 	z
   36 00:480E -  -  -  -  _VSLRecord:
   37 00:480E -  -  -  -  		;
   38 00:480E -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:480E -  -  -  -  		;
   40 00:480E 3A 7B 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:4811 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:4812 23 -  -  -  		inc 	hl 							; points to link back
   43 00:4813 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4815 -  -  -  -  		;
   45 00:4815 -  -  -  -  		;		Now check the name
   46 00:4815 -  -  -  -  		;
   47 00:4815 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4816 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4817 23 -  -  -  		inc 	hl
   50 00:4818 23 -  -  -  		inc 	hl
   51 00:4819 23 -  -  -  		inc 	hl
   52 00:481A 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:481E ED 5B 77 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:4822 -  -  -  -  		;
   55 00:4822 -  -  -  -  		;		Check individual characters
   56 00:4822 -  -  -  -  		;
   57 00:4822 -  -  -  -  _VSLCharacter:
   58 00:4822 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:4823 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4825 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4827 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:4828 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:4829 13 -  -  -  		inc 	de
   64 00:482A 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:482C -  -  -  -  		;
   66 00:482C -  -  -  -  _VSLFailed:
   67 00:482C E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:482D 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:482F -  -  -  -  		;
   70 00:482F -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:482F -  -  -  -  		;		
   72 00:482F -  -  -  -  _VSLEndIdentifier:
   73 00:482F 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:4830 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4832 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4834 -  -  -  -  		;
   77 00:4834 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4835 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4836 AF -  -  -  		xor 	a 							; clear carry
   80 00:4837 C9 -  -  -  		ret
   81 00:4838 -  -  -  -  
   82 00:4838 -  -  -  -  ; ***************************************************************************************
   83 00:4838 -  -  -  -  ;
   84 00:4838 -  -  -  -  ;									Changes and Updates
   85 00:4838 -  -  -  -  ;
   86 00:4838 -  -  -  -  ; ***************************************************************************************
   87 00:4838 -  -  -  -  ;
   88 00:4838 -  -  -  -  ;		Date			Notes
   89 00:4838 -  -  -  -  ;		==== 			=====
   90 00:4838 -  -  -  -  ;
   91 00:4838 -  -  -  -  ; ***************************************************************************************
   92 00:4838 -  -  -  -  		
Listing for file "_build.asm"
   57 00:4838 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4838 -  -  -  -  ;
    2 00:4838 -  -  -  -  ;	This file is automatically generated.
    3 00:4838 -  -  -  -  ;
    4 00:4838 00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 00:4840 -  -  -  -  PrecedenceTable:
    6 00:4840 06 -  -  -  	.db	6	; $0083 !
    7 00:4841 06 -  -  -  	.db	6	; $0084 ?
    8 00:4842 05 -  -  -  	.db	5	; $0085 *
    9 00:4843 05 -  -  -  	.db	5	; $0086 /
   10 00:4844 05 -  -  -  	.db	5	; $0087 mod
   11 00:4845 05 -  -  -  	.db	5	; $0088 div
   12 00:4846 04 -  -  -  	.db	4	; $0089 +
   13 00:4847 04 -  -  -  	.db	4	; $008a -
   14 00:4848 03 -  -  -  	.db	3	; $008b >=
   15 00:4849 03 -  -  -  	.db	3	; $008c <=
   16 00:484A 03 -  -  -  	.db	3	; $008d >
   17 00:484B 03 -  -  -  	.db	3	; $008e <
   18 00:484C 03 -  -  -  	.db	3	; $008f =
   19 00:484D 03 -  -  -  	.db	3	; $0090 <>
   20 00:484E 02 -  -  -  	.db	2	; $0091 and
   21 00:484F 01 -  -  -  	.db	1	; $0092 or
   22 00:4850 01 -  -  -  	.db	1	; $0093 eor
   23 00:4851 -  -  -  -  
Listing for file "_build.asm"
   58 00:4851 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4851 -  -  -  -  ;
    2 00:4851 -  -  -  -  ;	This is automatically generated.
    3 00:4851 -  -  -  -  ;
    4 00:4851 -  -  -  -  ErrorIDTable:
    5 00:4851 95 48 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4855 9B 48 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4859 AC 48 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:485D BA 48 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4861 C4 48 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:4865 CE 48 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:4869 E8 48 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:486D F9 48 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:4871 07 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:4875 15 49 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:4879 1F 49 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:487D 34 49 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:4881 4A 49 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:4885 58 49 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:4889 5D 49 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:488D 6A 49 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:4891 7B 49 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:4895 -  -  -  -  
   23 00:4895 -  -  -  -  ErrText_warmstart:
   24 00:4895 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:489B -  -  -  -  ErrText_assert:
   26 00:489B 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:48AC -  -  -  -  ErrText_badtype:
   28 00:48AC 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:48BA -  -  -  -  ErrText_badvalue:
   30 00:48BA 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:48C4 -  -  -  -  ErrText_dim:
   32 00:48C4 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:48CE -  -  -  -  ErrText_disabled:
   34 00:48CE 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:48E8 -  -  -  -  ErrText_divzero:
   36 00:48E8 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:48F9 -  -  -  -  ErrText_memory:
   38 00:48F9 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:4907 -  -  -  -  ErrText_nocomma:
   40 00:4907 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:4915 -  -  -  -  ErrText_nodollar:
   42 00:4915 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:491F -  -  -  -  ErrText_nolbracket:
   44 00:491F 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:4934 -  -  -  -  ErrText_norbracket:
   46 00:4934 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:494A -  -  -  -  ErrText_notref:
   48 00:494A 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:4958 -  -  -  -  ErrText_stop:
   50 00:4958 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:495D -  -  -  -  ErrText_syntax:
   52 00:495D 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:496A -  -  -  -  ErrText_todo:
   54 00:496A 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:497B -  -  -  -  ErrText_unknownvar:
   56 00:497B 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:498C -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:498C -  -  -  -  ;
    2 00:498C -  -  -  -  ;	Vectors for set 0
    3 00:498C -  -  -  -  ;
    4 00:498C -  -  -  -  VectorsSet0:
    5 00:498C 26 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:498E 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4990 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4992 49 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4994 51 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4996 07 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4998 12 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:499A 1D 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:499C 12 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:499E F1 42 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:49A0 FC 42 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:49A2 A4 43 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:49A4 9B 43 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:49A6 89 43 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:49A8 80 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:49AA 77 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:49AC 92 43 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:49AE 28 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:49B0 33 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:49B2 3E 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:49B4 78 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:49B6 72 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:49B8 B9 45 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:49BA DF 45 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:49BC AA 45 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:49BE 87 45 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:49C0 5D 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:49C2 85 46 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:49C4 99 45 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:49C6 92 45 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:49C8 C2 45 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:49CA D4 45 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:49CC 99 46 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:49CE 9F 46 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:49D0 AA 46 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:49D2 69 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:49D4 6D 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:49D6 E2 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:49D8 E2 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:49DA E5 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:49DC E2 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:49DE CD 41 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:49E0 1F 40 -  -  	addr(Unimplemented)              ; $00aa repeat
   48 00:49E2 1F 40 -  -  	addr(Unimplemented)              ; $00ab until
   49 00:49E4 1F 40 -  -  	addr(Unimplemented)              ; $00ac if
   50 00:49E6 E2 40 -  -  	addr(BadCmd_Then)                ; $00ad then
   51 00:49E8 1F 40 -  -  	addr(Unimplemented)              ; $00ae else
   52 00:49EA 1F 40 -  -  	addr(Unimplemented)              ; $00af for
   53 00:49EC E2 40 -  -  	addr(BadCmd_To)                  ; $00b0 to
   54 00:49EE 1F 40 -  -  	addr(Unimplemented)              ; $00b1 step
   55 00:49F0 1F 40 -  -  	addr(Unimplemented)              ; $00b2 next
   56 00:49F2 1F 40 -  -  	addr(Unimplemented)              ; $00b3 def
   57 00:49F4 1F 40 -  -  	addr(Unimplemented)              ; $00b4 proc
   58 00:49F6 1F 40 -  -  	addr(Unimplemented)              ; $00b5 endproc
   59 00:49F8 1F 40 -  -  	addr(Unimplemented)              ; $00b6 gosub
   60 00:49FA 1F 40 -  -  	addr(Unimplemented)              ; $00b7 return
   61 00:49FC 1F 40 -  -  	addr(Unimplemented)              ; $00b8 goto
   62 00:49FE 1F 40 -  -  	addr(Unimplemented)              ; $00b9 local
   63 00:4A00 E6 40 -  -  	addr(Command_DIM)                ; $00ba dim
   64 00:4A02 CD 41 -  -  	addr(Command_REM)                ; $00bb rem
   65 00:4A04 39 41 -  -  	addr(Command_LET)                ; $00bc let
   66 00:4A06 1F 40 -  -  	addr(Unimplemented)              ; $00bd vdu
   67 00:4A08 7E 41 -  -  	addr(Command_PRINT)              ; $00be print
   68 00:4A0A 1F 40 -  -  	addr(Unimplemented)              ; $00bf load
   69 00:4A0C 1F 40 -  -  	addr(Unimplemented)              ; $00c0 save
   70 00:4A0E 1F 40 -  -  	addr(Unimplemented)              ; $00c1 list
   71 00:4A10 20 47 -  -  	addr(Command_NEW)                ; $00c2 new
   72 00:4A12 E8 41 -  -  	addr(Command_RUN)                ; $00c3 run
   73 00:4A14 1F 40 -  -  	addr(Unimplemented)              ; $00c4 read
   74 00:4A16 1F 40 -  -  	addr(Unimplemented)              ; $00c5 data
   75 00:4A18 1F 40 -  -  	addr(Unimplemented)              ; $00c6 restore
   76 00:4A1A D3 40 -  -  	addr(Command_ASSERT)             ; $00c7 assert
   77 00:4A1C D3 46 -  -  	addr(Command_CLEAR)              ; $00c8 clear
   78 00:4A1E 21 41 -  -  	addr(Command_END)                ; $00c9 end
   79 00:4A20 4B 42 -  -  	addr(Command_STOP)               ; $00ca stop
   80 00:4A22 -  -  -  -  ;
   81 00:4A22 -  -  -  -  ;	Vectors for set 1
   82 00:4A22 -  -  -  -  ;
   83 00:4A22 -  -  -  -  VectorsSet1:
   84 00:4A22 -  -  -  -  ;
   85 00:4A22 -  -  -  -  ;	Vectors for set 2
   86 00:4A22 -  -  -  -  ;
   87 00:4A22 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:4A22 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4A22 -  -  -  -  ; ***************************************************************************************
    2 00:4A22 -  -  -  -  ; ***************************************************************************************
    3 00:4A22 -  -  -  -  ;
    4 00:4A22 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4A22 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A22 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A22 -  -  -  -  ;		Reviewed :	No
    8 00:4A22 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4A22 -  -  -  -  ;
   10 00:4A22 -  -  -  -  ; ***************************************************************************************
   11 00:4A22 -  -  -  -  ; ***************************************************************************************
   12 00:4A22 -  -  -  -  
   13 00:4A22 -  -  -  -  ; ***************************************************************************************
   14 00:4A22 -  -  -  -  ;
   15 00:4A22 -  -  -  -  ;								Unsigned integer divide
   16 00:4A22 -  -  -  -  ;
   17 00:4A22 -  -  -  -  ; ***************************************************************************************
   18 00:4A22 -  -  -  -  
   19 00:4A22 -  -  -  -  Int32UDivide:
   20 00:4A22 37 -  -  -  		scf
   21 00:4A23 C3 61 4A -  		jp 		_I32UnsignedDivide		
   22 00:4A26 -  -  -  -  
   23 00:4A26 -  -  -  -  ; ***************************************************************************************
   24 00:4A26 -  -  -  -  ;
   25 00:4A26 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4A26 -  -  -  -  ;
   27 00:4A26 -  -  -  -  ; ***************************************************************************************
   28 00:4A26 -  -  -  -  
   29 00:4A26 -  -  -  -  Int32SDivide:
   30 00:4A26 37 -  -  -  		scf
   31 00:4A27 18 01 -  -  		jr 		_I32SDivide
   32 00:4A29 -  -  -  -  Int32Modulus:
   33 00:4A29 AF -  -  -  		xor 	a
   34 00:4A2A -  -  -  -  _I32SDivide:
   35 00:4A2A 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4A2B F5 -  -  -  		push 	af
   37 00:4A2C 08 -  -  -  		ex 		af,af'
   38 00:4A2D -  -  -  -  
   39 00:4A2D D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4A2E D9 -  -  -  		exx
   41 00:4A2F D5 -  -  -  		push 	de
   42 00:4A30 D9 -  -  -  		exx
   43 00:4A31 -  -  -  -  
   44 00:4A31 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4A32 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4A33 CD 4F 4A -  		call 	_I32CheckHLSignSwap
   47 00:4A36 CD 4F 4A -  		call 	_I32CheckHLSignSwap
   48 00:4A39 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4A3A F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4A3B F5 -  -  -  		push 	af
   51 00:4A3C CD 61 4A -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4A3F F1 -  -  -  		pop 	af 							; get function back
   53 00:4A40 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4A42 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4A43 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4A45 C4 AB 4B -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4A48 -  -  -  -  _I32SDExit:
   58 00:4A48 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4A49 D1 -  -  -  		pop 	de
   60 00:4A4A D9 -  -  -  		exx
   61 00:4A4B D1 -  -  -  		pop 	de
   62 00:4A4C F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4A4D 08 -  -  -  		ex 		af,af'
   64 00:4A4E C9 -  -  -  		ret
   65 00:4A4F -  -  -  -  
   66 00:4A4F -  -  -  -  
   67 00:4A4F -  -  -  -  _I32CheckHLSignSwap:
   68 00:4A4F D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4A50 CB 7C -  -  		bit 	7,h
   70 00:4A52 D9 -  -  -  		exx
   71 00:4A53 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4A55 -  -  -  -  		;
   73 00:4A55 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4A57 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4A58 CD AB 4B -  		call 	Int32Negate 				
   76 00:4A5B F1 -  -  -  		pop 	af
   77 00:4A5C -  -  -  -  _I32CHSPositive:
   78 00:4A5C D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4A5D EB -  -  -  		ex 		de,hl
   80 00:4A5E D9 -  -  -  		exx		
   81 00:4A5F EB -  -  -  		ex 		de,hl
   82 00:4A60 C9 -  -  -  		ret
   83 00:4A61 -  -  -  -  
   84 00:4A61 -  -  -  -  ; ***************************************************************************************
   85 00:4A61 -  -  -  -  ;
   86 00:4A61 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4A61 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4A61 -  -  -  -  ;
   89 00:4A61 -  -  -  -  ; ***************************************************************************************
   90 00:4A61 -  -  -  -  
   91 00:4A61 -  -  -  -  _I32UnsignedDivide:
   92 00:4A61 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4A62 D5 -  -  -  		push 	de
   94 00:4A63 D9 -  -  -  		exx
   95 00:4A64 C5 -  -  -  		push 	bc
   96 00:4A65 D5 -  -  -  		push 	de 							
   97 00:4A66 D9 -  -  -  		exx
   98 00:4A67 -  -  -  -  
   99 00:4A67 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4A68 -  -  -  -  
  101 00:4A68 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4A69 B3 -  -  -  		or 		e
  103 00:4A6A D9 -  -  -  		exx
  104 00:4A6B B2 -  -  -  		or 		d
  105 00:4A6C B3 -  -  -  		or 		e
  106 00:4A6D D9 -  -  -  		exx
  107 00:4A6E CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4A71 -  -  -  -  
  109 00:4A71 -  -  -  -  
  110 00:4A71 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4A72 4D -  -  -  		ld		c,l
  112 00:4A73 21 00 00 -  		ld 		hl,$0000
  113 00:4A76 D9 -  -  -  		exx
  114 00:4A77 44 -  -  -  		ld 		b,h
  115 00:4A78 4D -  -  -  		ld		c,l
  116 00:4A79 21 00 00 -  		ld 		hl,$0000
  117 00:4A7C D9 -  -  -  		exx
  118 00:4A7D -  -  -  -  
  119 00:4A7D 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4A7F -  -  -  -  _I32DivideLoop:
  121 00:4A7F F5 -  -  -  		push 	af
  122 00:4A80 -  -  -  -  
  123 00:4A80 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4A82 CB 10 -  -  		rl 		b
  125 00:4A84 D9 -  -  -  		exx
  126 00:4A85 CB 11 -  -  		rl 		c
  127 00:4A87 CB 10 -  -  		rl 		b
  128 00:4A89 D9 -  -  -  		exx
  129 00:4A8A CB 15 -  -  		rl 		l
  130 00:4A8C CB 14 -  -  		rl 		h
  131 00:4A8E D9 -  -  -  		exx
  132 00:4A8F CB 15 -  -  		rl 		l
  133 00:4A91 CB 14 -  -  		rl 		h
  134 00:4A93 D9 -  -  -  		exx
  135 00:4A94 -  -  -  -  
  136 00:4A94 CD 51 4B -  		call 	Int32Subtract 				; A = A - M
  137 00:4A97 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4A99 -  -  -  -  
  139 00:4A99 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4A9A 18 03 -  -  		jr 		_I32Next
  141 00:4A9C -  -  -  -  
  142 00:4A9C -  -  -  -  _I32Borrow:
  143 00:4A9C CD 4B 4B -  		call 	Int32Add 					; A = A + M
  144 00:4A9F -  -  -  -  _I32Next:
  145 00:4A9F F1 -  -  -  		pop 	af
  146 00:4AA0 3D -  -  -  		dec 	a
  147 00:4AA1 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4AA3 -  -  -  -  
  149 00:4AA3 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4AA4 -  -  -  -  
  151 00:4AA4 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4AA5 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4AA7 -  -  -  -  
  154 00:4AA7 60 -  -  -  		ld  	h,b
  155 00:4AA8 69 -  -  -  		ld 		l,c
  156 00:4AA9 D9 -  -  -  		exx
  157 00:4AAA 60 -  -  -  		ld  	h,b
  158 00:4AAB 69 -  -  -  		ld 		l,c
  159 00:4AAC D9 -  -  -  		exx
  160 00:4AAD -  -  -  -  _I32Modulus1:		
  161 00:4AAD D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4AAE D1 -  -  -  		pop 	de
  163 00:4AAF C1 -  -  -  		pop 	bc
  164 00:4AB0 D9 -  -  -  		exx
  165 00:4AB1 D1 -  -  -  		pop 	de
  166 00:4AB2 C1 -  -  -  		pop 	bc
  167 00:4AB3 C9 -  -  -  		ret
  168 00:4AB4 -  -  -  -  
  169 00:4AB4 -  -  -  -  ; ***************************************************************************************
  170 00:4AB4 -  -  -  -  ;
  171 00:4AB4 -  -  -  -  ;									Changes and Updates
  172 00:4AB4 -  -  -  -  ;
  173 00:4AB4 -  -  -  -  ; ***************************************************************************************
  174 00:4AB4 -  -  -  -  ;
  175 00:4AB4 -  -  -  -  ;		Date			Notes
  176 00:4AB4 -  -  -  -  ;		==== 			=====
  177 00:4AB4 -  -  -  -  ;
  178 00:4AB4 -  -  -  -  ; ***************************************************************************************
  179 00:4AB4 -  -  -  -  		
Listing for file "_build.asm"
   61 00:4AB4 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4AB4 -  -  -  -  ; ***************************************************************************************
    2 00:4AB4 -  -  -  -  ; ***************************************************************************************
    3 00:4AB4 -  -  -  -  ;
    4 00:4AB4 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4AB4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AB4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AB4 -  -  -  -  ;		Reviewed :	No
    8 00:4AB4 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4AB4 -  -  -  -  ;
   10 00:4AB4 -  -  -  -  ; ***************************************************************************************
   11 00:4AB4 -  -  -  -  ; ***************************************************************************************
   12 00:4AB4 -  -  -  -  
   13 00:4AB4 -  -  -  -  ; ***************************************************************************************
   14 00:4AB4 -  -  -  -  ;
   15 00:4AB4 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4AB4 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4AB4 -  -  -  -  ;
   18 00:4AB4 -  -  -  -  ; ***************************************************************************************
   19 00:4AB4 -  -  -  -  
   20 00:4AB4 -  -  -  -  Int32FromString:
   21 00:4AB4 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4AB5 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4AB6 D5 -  -  -  		push 	de
   24 00:4AB7 D9 -  -  -  		exx
   25 00:4AB8 D5 -  -  -  		push 	de
   26 00:4AB9 -  -  -  -  
   27 00:4AB9 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4ABC 11 00 00 -  		ld 		de,$0000
   29 00:4ABF D9 -  -  -  		exx
   30 00:4AC0 21 00 00 -  		ld 		hl,$0000
   31 00:4AC3 11 00 00 -  		ld 		de,$0000
   32 00:4AC6 D9 -  -  -  		exx
   33 00:4AC7 -  -  -  -  
   34 00:4AC7 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4AC8 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4ACA 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4ACC ED 44 -  -  		neg 		 						; fix up the base
   38 00:4ACE 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4ACF -  -  -  -  		;
   40 00:4ACF 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4AD0 F5 -  -  -  		push 	af
   42 00:4AD1 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4AD3 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4AD4 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4AD6 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4AD7 18 01 -  -  		jr 		_I32FSMain
   47 00:4AD9 -  -  -  -  _I32FSNotSigned:		
   48 00:4AD9 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4ADA -  -  -  -  		;
   50 00:4ADA -  -  -  -  		; 		Main conversion loop.
   51 00:4ADA -  -  -  -  		; 		
   52 00:4ADA -  -  -  -  _I32FSMain:		
   53 00:4ADA 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4ADB FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4ADD 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4ADF D6 20 -  -  		sub 	32
   57 00:4AE1 -  -  -  -  _I32FSNotLower:
   58 00:4AE1 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4AE3 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4AE5 FE 3A -  -  		cp 		'9'+1
   61 00:4AE7 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4AE9 FE 41 -  -  		cp 		'A'
   63 00:4AEB 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4AED FE 47 -  -  		cp 		'F'+1
   65 00:4AEF 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4AF1 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4AF3 -  -  -  -  _I32FSOkay:
   68 00:4AF3 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4AF5 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4AF6 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4AF8 03 -  -  -  		inc 	bc 							; consume character
   72 00:4AF9 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4AFA F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4AFB CD 15 4B -  		call 	Int32Multiply 				; result *= base
   75 00:4AFE F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4AFF 5F -  -  -  		ld 		e,a
   77 00:4B00 CD 4B 4B -  		call 	Int32Add 					; and add it.
   78 00:4B03 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4B04 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4B06 -  -  -  -  
   81 00:4B06 -  -  -  -  _I32FSExit:
   82 00:4B06 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4B07 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4B09 CC AB 4B -  		call 	z,Int32Negate
   85 00:4B0C 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4B0D D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4B0E D9 -  -  -  		exx
   88 00:4B0F D1 -  -  -  		pop 	de
   89 00:4B10 D9 -  -  -  		exx
   90 00:4B11 C1 -  -  -  		pop 	bc
   91 00:4B12 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4B14 C9 -  -  -  		ret				
   93 00:4B15 -  -  -  -  
   94 00:4B15 -  -  -  -  ; ***************************************************************************************
   95 00:4B15 -  -  -  -  ;
   96 00:4B15 -  -  -  -  ;									Changes and Updates
   97 00:4B15 -  -  -  -  ;
   98 00:4B15 -  -  -  -  ; ***************************************************************************************
   99 00:4B15 -  -  -  -  ;
  100 00:4B15 -  -  -  -  ;		Date			Notes
  101 00:4B15 -  -  -  -  ;		==== 			=====
  102 00:4B15 -  -  -  -  ;
  103 00:4B15 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4B15 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4B15 -  -  -  -  ; ***************************************************************************************
    2 00:4B15 -  -  -  -  ; ***************************************************************************************
    3 00:4B15 -  -  -  -  ;
    4 00:4B15 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4B15 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B15 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B15 -  -  -  -  ;		Reviewed :	No
    8 00:4B15 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4B15 -  -  -  -  ;
   10 00:4B15 -  -  -  -  ; ***************************************************************************************
   11 00:4B15 -  -  -  -  ; ***************************************************************************************
   12 00:4B15 -  -  -  -  
   13 00:4B15 -  -  -  -  Int32Multiply:
   14 00:4B15 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4B16 D5 -  -  -  		push 	de
   16 00:4B17 44 -  -  -  		ld 		b,h
   17 00:4B18 4D -  -  -  		ld 		c,l
   18 00:4B19 21 00 00 -  		ld 		hl,$0000
   19 00:4B1C -  -  -  -  
   20 00:4B1C D9 -  -  -  		exx
   21 00:4B1D C5 -  -  -  		push 	bc
   22 00:4B1E D5 -  -  -  		push 	de
   23 00:4B1F 44 -  -  -  		ld 		b,h
   24 00:4B20 4D -  -  -  		ld 		c,l
   25 00:4B21 21 00 00 -  		ld 		hl,$0000		
   26 00:4B24 D9 -  -  -  		exx
   27 00:4B25 -  -  -  -  
   28 00:4B25 -  -  -  -  _I32MultiplyLoop:
   29 00:4B25 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4B27 C4 4B 4B -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4B2A -  -  -  -  		;
   32 00:4B2A D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4B2B CB 38 -  -  		srl 	b
   34 00:4B2D CB 19 -  -  		rr 		c
   35 00:4B2F D9 -  -  -  		exx
   36 00:4B30 CB 18 -  -  		rr 		b
   37 00:4B32 CB 19 -  -  		rr 		c
   38 00:4B34 -  -  -  -  		;
   39 00:4B34 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4B36 CB 12 -  -  		rl 		d
   41 00:4B38 D9 -  -  -  		exx
   42 00:4B39 CB 13 -  -  		rl 		e
   43 00:4B3B CB 12 -  -  		rl 		d
   44 00:4B3D -  -  -  -  
   45 00:4B3D 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4B3E B1 -  -  -  		or 		c
   47 00:4B3F D9 -  -  -  		exx
   48 00:4B40 B0 -  -  -  		or 		b
   49 00:4B41 B1 -  -  -  		or 		c
   50 00:4B42 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4B44 -  -  -  -  
   52 00:4B44 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4B45 D1 -  -  -  		pop 	de
   54 00:4B46 C1 -  -  -  		pop 	bc
   55 00:4B47 D9 -  -  -  		exx
   56 00:4B48 D1 -  -  -  		pop 	de
   57 00:4B49 C1 -  -  -  		pop 	bc
   58 00:4B4A C9 -  -  -  		ret
   59 00:4B4B -  -  -  -  
   60 00:4B4B -  -  -  -  ; ***************************************************************************************
   61 00:4B4B -  -  -  -  ;
   62 00:4B4B -  -  -  -  ;									Changes and Updates
   63 00:4B4B -  -  -  -  ;
   64 00:4B4B -  -  -  -  ; ***************************************************************************************
   65 00:4B4B -  -  -  -  ;
   66 00:4B4B -  -  -  -  ;		Date			Notes
   67 00:4B4B -  -  -  -  ;		==== 			=====
   68 00:4B4B -  -  -  -  ;
   69 00:4B4B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4B4B -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4B4B -  -  -  -  ; ***************************************************************************************
    2 00:4B4B -  -  -  -  ; ***************************************************************************************
    3 00:4B4B -  -  -  -  ;
    4 00:4B4B -  -  -  -  ;		Name : 		isimple.asm
    5 00:4B4B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B4B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B4B -  -  -  -  ;		Reviewed :	No
    8 00:4B4B -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4B4B -  -  -  -  ;
   10 00:4B4B -  -  -  -  ; ***************************************************************************************
   11 00:4B4B -  -  -  -  ; ***************************************************************************************
   12 00:4B4B -  -  -  -  
   13 00:4B4B -  -  -  -  ; ***************************************************************************************
   14 00:4B4B -  -  -  -  ;
   15 00:4B4B -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4B4B -  -  -  -  ;
   17 00:4B4B -  -  -  -  ; ***************************************************************************************
   18 00:4B4B -  -  -  -  
   19 00:4B4B -  -  -  -  Int32Add:
   20 00:4B4B 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4B4C D9 -  -  -  		exx
   22 00:4B4D ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4B4F D9 -  -  -  		exx
   24 00:4B50 C9 -  -  -  		ret
   25 00:4B51 -  -  -  -  
   26 00:4B51 -  -  -  -  ; ***************************************************************************************
   27 00:4B51 -  -  -  -  ;
   28 00:4B51 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4B51 -  -  -  -  ;
   30 00:4B51 -  -  -  -  ; ***************************************************************************************
   31 00:4B51 -  -  -  -  
   32 00:4B51 -  -  -  -  Int32Subtract:
   33 00:4B51 AF -  -  -  		xor 	a 							; clear carry
   34 00:4B52 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4B54 D9 -  -  -  		exx
   36 00:4B55 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4B57 D9 -  -  -  		exx
   38 00:4B58 C9 -  -  -  		ret
   39 00:4B59 -  -  -  -  
   40 00:4B59 -  -  -  -  ; ***************************************************************************************
   41 00:4B59 -  -  -  -  ;
   42 00:4B59 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4B59 -  -  -  -  ;
   44 00:4B59 -  -  -  -  ; ***************************************************************************************
   45 00:4B59 -  -  -  -  
   46 00:4B59 -  -  -  -  Int32And:
   47 00:4B59 D9 -  -  -  		exx
   48 00:4B5A CD 5E 4B -  		call 	_I32AndHLDE
   49 00:4B5D D9 -  -  -  		exx
   50 00:4B5E -  -  -  -  _I32AndHLDE:		
   51 00:4B5E 7C -  -  -  		ld 		a,h
   52 00:4B5F A2 -  -  -  		and 	d
   53 00:4B60 67 -  -  -  		ld 		h,a
   54 00:4B61 7D -  -  -  		ld 		a,l
   55 00:4B62 A3 -  -  -  		and 	e
   56 00:4B63 6F -  -  -  		ld 		l,a
   57 00:4B64 C9 -  -  -  		ret
   58 00:4B65 -  -  -  -  
   59 00:4B65 -  -  -  -  ; ***************************************************************************************
   60 00:4B65 -  -  -  -  ;
   61 00:4B65 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4B65 -  -  -  -  ;
   63 00:4B65 -  -  -  -  ; ***************************************************************************************
   64 00:4B65 -  -  -  -  
   65 00:4B65 -  -  -  -  Int32Or:
   66 00:4B65 D9 -  -  -  		exx
   67 00:4B66 CD 6A 4B -  		call 	_I32OrHLDE
   68 00:4B69 D9 -  -  -  		exx
   69 00:4B6A -  -  -  -  _I32OrHLDE:		
   70 00:4B6A 7C -  -  -  		ld 		a,h
   71 00:4B6B B2 -  -  -  		or 		d
   72 00:4B6C 67 -  -  -  		ld 		h,a
   73 00:4B6D 7D -  -  -  		ld 		a,l
   74 00:4B6E B3 -  -  -  		or 		e
   75 00:4B6F 6F -  -  -  		ld 		l,a
   76 00:4B70 C9 -  -  -  		ret
   77 00:4B71 -  -  -  -  
   78 00:4B71 -  -  -  -  ; ***************************************************************************************
   79 00:4B71 -  -  -  -  ;
   80 00:4B71 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4B71 -  -  -  -  ;
   82 00:4B71 -  -  -  -  ; ***************************************************************************************
   83 00:4B71 -  -  -  -  
   84 00:4B71 -  -  -  -  Int32Xor:
   85 00:4B71 D9 -  -  -  		exx
   86 00:4B72 CD 76 4B -  		call 	_I32XorHLDE
   87 00:4B75 D9 -  -  -  		exx
   88 00:4B76 -  -  -  -  _I32XorHLDE:		
   89 00:4B76 7C -  -  -  		ld 		a,h
   90 00:4B77 AA -  -  -  		xor 	d
   91 00:4B78 67 -  -  -  		ld 		h,a
   92 00:4B79 7D -  -  -  		ld 		a,l
   93 00:4B7A AB -  -  -  		xor 	e
   94 00:4B7B 6F -  -  -  		ld 		l,a
   95 00:4B7C C9 -  -  -  		ret
   96 00:4B7D -  -  -  -  
   97 00:4B7D -  -  -  -  ; ***************************************************************************************
   98 00:4B7D -  -  -  -  ;
   99 00:4B7D -  -  -  -  ;								 Check if HL'HL zero
  100 00:4B7D -  -  -  -  ;
  101 00:4B7D -  -  -  -  ; ***************************************************************************************
  102 00:4B7D -  -  -  -  
  103 00:4B7D -  -  -  -  Int32Zero:
  104 00:4B7D D9 -  -  -  		exx
  105 00:4B7E 7D -  -  -  		ld 		a,l
  106 00:4B7F B4 -  -  -  		or 		h
  107 00:4B80 D9 -  -  -  		exx
  108 00:4B81 B5 -  -  -  		or 		l
  109 00:4B82 B4 -  -  -  		or 		h
  110 00:4B83 C9 -  -  -  		ret
  111 00:4B84 -  -  -  -  
  112 00:4B84 -  -  -  -  ; ***************************************************************************************
  113 00:4B84 -  -  -  -  ;
  114 00:4B84 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4B84 -  -  -  -  ;
  116 00:4B84 -  -  -  -  ; ***************************************************************************************
  117 00:4B84 -  -  -  -  
  118 00:4B84 -  -  -  -  Int32Compare:
  119 00:4B84 E5 -  -  -  		push 	hl 							; save HL
  120 00:4B85 AF -  -  -  		xor 	a 							; clear carry
  121 00:4B86 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4B88 D9 -  -  -  		exx
  123 00:4B89 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4B8A ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4B8C -  -  -  -  		;
  126 00:4B8C 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4B8D E2 94 4B -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4B90 78 -  -  -  		ld 		a,b
  129 00:4B91 EE 80 -  -  		xor 	$80
  130 00:4B93 47 -  -  -  		ld 		b,a
  131 00:4B94 -  -  -  -  _I32CNoOverflow:
  132 00:4B94 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4B95 B5 -  -  -  		or 		l
  134 00:4B96 D9 -  -  -  		exx 
  135 00:4B97 B4 -  -  -  		or 		h
  136 00:4B98 B5 -  -  -  		or 		l
  137 00:4B99 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4B9B -  -  -  -  		;
  139 00:4B9B D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4B9C CB 78 -  -  		bit 	7,b
  141 00:4B9E D9 -  -  -  		exx
  142 00:4B9F 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4BA1 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4BA3 3E FF -  -  		ld 		a,$FF
  145 00:4BA5 -  -  -  -  _I32NotPos:
  146 00:4BA5 D9 -  -  -  		exx
  147 00:4BA6 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4BA7 D9 -  -  -  		exx
  149 00:4BA8 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4BA9 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4BAA C9 -  -  -  		ret
  152 00:4BAB -  -  -  -  
  153 00:4BAB -  -  -  -  ; ***************************************************************************************
  154 00:4BAB -  -  -  -  ;
  155 00:4BAB -  -  -  -  ;										Negate HL'HL
  156 00:4BAB -  -  -  -  ;
  157 00:4BAB -  -  -  -  ; ***************************************************************************************
  158 00:4BAB -  -  -  -  
  159 00:4BAB -  -  -  -  Int32Negate:
  160 00:4BAB AF -  -  -  		xor 	a
  161 00:4BAC CD B5 4B -  		call 	_I32NSubtract
  162 00:4BAF D9 -  -  -  		exx
  163 00:4BB0 CD B5 4B -  		call 	_I32NSubtract
  164 00:4BB3 D9 -  -  -  		exx
  165 00:4BB4 C9 -  -  -  		ret
  166 00:4BB5 -  -  -  -  _I32NSubtract:
  167 00:4BB5 D5 -  -  -  		push 	de
  168 00:4BB6 EB -  -  -  		ex 		de,hl
  169 00:4BB7 21 00 00 -  		ld 		hl,$0000
  170 00:4BBA ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4BBC D1 -  -  -  		pop 	de
  172 00:4BBD C9 -  -  -  		ret
  173 00:4BBE -  -  -  -  		
  174 00:4BBE -  -  -  -  ; ***************************************************************************************
  175 00:4BBE -  -  -  -  ;
  176 00:4BBE -  -  -  -  ;									Changes and Updates
  177 00:4BBE -  -  -  -  ;
  178 00:4BBE -  -  -  -  ; ***************************************************************************************
  179 00:4BBE -  -  -  -  ;
  180 00:4BBE -  -  -  -  ;		Date			Notes
  181 00:4BBE -  -  -  -  ;		==== 			=====
  182 00:4BBE -  -  -  -  ;
  183 00:4BBE -  -  -  -  ; ***************************************************************************************
  184 00:4BBE -  -  -  -  		
Listing for file "_build.asm"
   64 00:4BBE -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4BBE -  -  -  -  ; ***************************************************************************************
    2 00:4BBE -  -  -  -  ; ***************************************************************************************
    3 00:4BBE -  -  -  -  ;
    4 00:4BBE -  -  -  -  ;		Name : 		itostring.asm
    5 00:4BBE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BBE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BBE -  -  -  -  ;		Reviewed :	No
    8 00:4BBE -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4BBE -  -  -  -  ;
   10 00:4BBE -  -  -  -  ; ***************************************************************************************
   11 00:4BBE -  -  -  -  ;
   12 00:4BBE -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4BBE -  -  -  -  ;
   14 00:4BBE -  -  -  -  ; ***************************************************************************************
   15 00:4BBE -  -  -  -  
   16 00:4BBE -  -  -  -  Int32ToString:
   17 00:4BBE C5 -  -  -  		push 	bc 							; save string start
   18 00:4BBF D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4BC0 E5 -  -  -  		push 	hl
   20 00:4BC1 11 00 00 -  		ld	 	de,$0000
   21 00:4BC4 D9 -  -  -  		exx
   22 00:4BC5 D5 -  -  -  		push 	de
   23 00:4BC6 E5 -  -  -  		push 	hl
   24 00:4BC7 11 00 00 -  		ld 		de,$000
   25 00:4BCA D9 -  -  -  		exx
   26 00:4BCB 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4BCC -  -  -  -  		;
   28 00:4BCC CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4BCE 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4BD0 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4BD2 5F -  -  -  		ld 		e,a
   32 00:4BD3 -  -  -  -  		;
   33 00:4BD3 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4BD4 CB 7C -  -  		bit 	7,h
   35 00:4BD6 D9 -  -  -  		exx
   36 00:4BD7 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4BD9 -  -  -  -  		;
   38 00:4BD9 CD AB 4B -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4BDC -  -  -  -  		;
   40 00:4BDC 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4BDE 02 -  -  -  		ld 		(bc),a
   42 00:4BDF 03 -  -  -  		inc 	bc
   43 00:4BE0 -  -  -  -  _I32TSNotNegative:	
   44 00:4BE0 CD EE 4B -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4BE3 -  -  -  -  _I32TSExit:
   46 00:4BE3 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4BE5 02 -  -  -  		ld 		(bc),a 
   48 00:4BE6 -  -  -  -  
   49 00:4BE6 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4BE7 E1 -  -  -  		pop 	hl
   51 00:4BE8 D1 -  -  -  		pop 	de
   52 00:4BE9 D9 -  -  -  		exx
   53 00:4BEA E1 -  -  -  		pop 	hl
   54 00:4BEB D1 -  -  -  		pop 	de
   55 00:4BEC C1 -  -  -  		pop 	bc
   56 00:4BED C9 -  -  -  		ret
   57 00:4BEE -  -  -  -  
   58 00:4BEE -  -  -  -  _I32RecursiveConvert:
   59 00:4BEE CD 22 4A -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4BF1 F5 -  -  -  		push 	af 							; save remainder
   61 00:4BF2 CD 7D 4B -  		call 	Int32Zero		 			; check result is non zero
   62 00:4BF5 C4 EE 4B -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4BF8 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4BF9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4BFB 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4BFD C6 07 -  -  		add 	a,7
   67 00:4BFF -  -  -  -  _I32NotHex:
   68 00:4BFF C6 30 -  -  		add 	a,48
   69 00:4C01 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4C02 03 -  -  -  		inc 	bc
   71 00:4C03 C9 -  -  -  		ret		
   72 00:4C04 -  -  -  -  
   73 00:4C04 -  -  -  -  ; ***************************************************************************************
   74 00:4C04 -  -  -  -  ;
   75 00:4C04 -  -  -  -  ;									Changes and Updates
   76 00:4C04 -  -  -  -  ;
   77 00:4C04 -  -  -  -  ; ***************************************************************************************
   78 00:4C04 -  -  -  -  ;
   79 00:4C04 -  -  -  -  ;		Date			Notes
   80 00:4C04 -  -  -  -  ;		==== 			=====
   81 00:4C04 -  -  -  -  ;
   82 00:4C04 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:4C04 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4C04 -  -  -  -  ; ***************************************************************************************
    2 00:4C04 -  -  -  -  ; ***************************************************************************************
    3 00:4C04 -  -  -  -  ;
    4 00:4C04 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4C04 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C04 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C04 -  -  -  -  ;		Reviewed :	No
    8 00:4C04 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4C04 -  -  -  -  ;
   10 00:4C04 -  -  -  -  ; ***************************************************************************************
   11 00:4C04 -  -  -  -  ; ***************************************************************************************
   12 00:4C04 -  -  -  -  
   13 00:4C04 -  -  -  -  #ifdef AQUARIUS
   14 00:4C04 -  -  -  -  
   15 00:4C04 -  -  -  -  ; ***************************************************************************************
   16 00:4C04 -  -  -  -  ;
   17 00:4C04 -  -  -  -  ;								Initialise system stuff
   18 00:4C04 -  -  -  -  ;
   19 00:4C04 -  -  -  -  ; ***************************************************************************************
   20 00:4C04 -  -  -  -  
   21 00:4C04 -  -  -  -  SYSInitialise:
   22 00:4C04 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4C06 CD 0C 4C -  	call 	SYSPrintChar
   24 00:4C09 C9 -  -  -  	ret
   25 00:4C0A -  -  -  -  
   26 00:4C0A -  -  -  -  ; ***************************************************************************************
   27 00:4C0A -  -  -  -  ;
   28 00:4C0A -  -  -  -  ;								Terminate system stuff
   29 00:4C0A -  -  -  -  ;
   30 00:4C0A -  -  -  -  ; ***************************************************************************************
   31 00:4C0A -  -  -  -  
   32 00:4C0A -  -  -  -  SYSTerminate:
   33 00:4C0A 18 FE -  -  	jr 		SYSTerminate
   34 00:4C0C -  -  -  -  
   35 00:4C0C -  -  -  -  ; ***************************************************************************************
   36 00:4C0C -  -  -  -  ;
   37 00:4C0C -  -  -  -  ;								Print A character
   38 00:4C0C -  -  -  -  ;
   39 00:4C0C -  -  -  -  ; ***************************************************************************************
   40 00:4C0C -  -  -  -  
   41 00:4C0C -  -  -  -  SYSPrintChar:
   42 00:4C0C F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4C0D C5 -  -  -  	push 	bc
   44 00:4C0E D5 -  -  -  	push 	de
   45 00:4C0F E5 -  -  -  	push 	hl
   46 00:4C10 DD E5 -  -  	push 	ix
   47 00:4C12 FD E5 -  -  	push 	iy
   48 00:4C14 D9 -  -  -  	exx
   49 00:4C15 C5 -  -  -  	push 	bc
   50 00:4C16 D5 -  -  -  	push 	de
   51 00:4C17 E5 -  -  -  	push 	hl
   52 00:4C18 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4C1B E1 -  -  -  	pop 	hl
   54 00:4C1C D1 -  -  -  	pop 	de
   55 00:4C1D C1 -  -  -  	pop 	bc
   56 00:4C1E D9 -  -  -  	exx
   57 00:4C1F FD E1 -  -  	pop 	iy
   58 00:4C21 DD E1 -  -  	pop 	ix
   59 00:4C23 E1 -  -  -  	pop 	hl
   60 00:4C24 D1 -  -  -  	pop 	de
   61 00:4C25 C1 -  -  -  	pop 	bc
   62 00:4C26 F1 -  -  -  	pop 	af
   63 00:4C27 C9 -  -  -  	ret		
   64 00:4C28 -  -  -  -  
   65 00:4C28 -  -  -  -  ; ***************************************************************************************
   66 00:4C28 -  -  -  -  ;
   67 00:4C28 -  -  -  -  ;									Print Newline
   68 00:4C28 -  -  -  -  ;
   69 00:4C28 -  -  -  -  ; ***************************************************************************************
   70 00:4C28 -  -  -  -  
   71 00:4C28 -  -  -  -  SYSPrintCRLF:
   72 00:4C28 F5 -  -  -  	push 	af
   73 00:4C29 3E 0D -  -  	ld 		a,13
   74 00:4C2B CD 0C 4C -  	call 	SYSPrintChar
   75 00:4C2E 3E 0A -  -  	ld 		a,10
   76 00:4C30 CD 0C 4C -  	call 	SYSPrintChar
   77 00:4C33 F1 -  -  -  	pop 	af
   78 00:4C34 C9 -  -  -  	ret
   79 00:4C35 -  -  -  -  
   80 00:4C35 -  -  -  -  ; ***************************************************************************************
   81 00:4C35 -  -  -  -  ;
   82 00:4C35 -  -  -  -  ;									Get time into HL'HL
   83 00:4C35 -  -  -  -  ;
   84 00:4C35 -  -  -  -  ; ***************************************************************************************
   85 00:4C35 -  -  -  -  
   86 00:4C35 -  -  -  -  SYSGetTimer:
   87 00:4C35 DB 00 -  -   	in 		a,($00)
   88 00:4C37 6F -  -  -   	ld 		l,a
   89 00:4C38 DB 01 -  -   	in 		a,($01)
   90 00:4C3A 67 -  -  -   	ld 		h,a
   91 00:4C3B D9 -  -  -   	exx
   92 00:4C3C DB 02 -  -   	in 		a,($02)
   93 00:4C3E 6F -  -  -   	ld 		l,a
   94 00:4C3F DB 03 -  -   	in 		a,($03)
   95 00:4C41 67 -  -  -   	ld 		h,a
   96 00:4C42 D9 -  -  -   	exx
   97 00:4C43 C9 -  -  -  	ret 	
   98 00:4C44 -  -  -  -  	
   99 00:4C44 -  -  -  -  #endif
  100 00:4C44 -  -  -  -  
  101 00:4C44 -  -  -  -  ; ***************************************************************************************
  102 00:4C44 -  -  -  -  ;
  103 00:4C44 -  -  -  -  ;									Changes and Updates
  104 00:4C44 -  -  -  -  ;
  105 00:4C44 -  -  -  -  ; ***************************************************************************************
  106 00:4C44 -  -  -  -  ;
  107 00:4C44 -  -  -  -  ;		Date			Notes
  108 00:4C44 -  -  -  -  ;		==== 			=====
  109 00:4C44 -  -  -  -  ;
  110 00:4C44 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4C44 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4C44 -  -  -  -  ; ***************************************************************************************
    2 00:4C44 -  -  -  -  ; ***************************************************************************************
    3 00:4C44 -  -  -  -  ;
    4 00:4C44 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4C44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C44 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C44 -  -  -  -  ;		Reviewed :	No
    8 00:4C44 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4C44 -  -  -  -  ;
   10 00:4C44 -  -  -  -  ; ***************************************************************************************
   11 00:4C44 -  -  -  -  ; ***************************************************************************************
   12 00:4C44 -  -  -  -  
   13 00:4C44 -  -  -  -  #ifdef CLEANEZ80
   14 00:4C44             
   15 00:4C44             ; ***************************************************************************************
   16 00:4C44             ;
   17 00:4C44             ;								Initialise system stuff
   18 00:4C44             ;
   19 00:4C44             ; ***************************************************************************************
   20 00:4C44             
   21 00:4C44             SYSInitialise:
   22 00:4C44             	ret
   23 00:4C44             
   24 00:4C44             ; ***************************************************************************************
   25 00:4C44             ;
   26 00:4C44             ;								Terminate system stuff
   27 00:4C44             ;
   28 00:4C44             ; ***************************************************************************************
   29 00:4C44             
   30 00:4C44             SYSTerminate:
   31 00:4C44             	ret
   32 00:4C44             
   33 00:4C44             ; ***************************************************************************************
   34 00:4C44             ;
   35 00:4C44             ;								Print A character
   36 00:4C44             ;
   37 00:4C44             ; ***************************************************************************************
   38 00:4C44             
   39 00:4C44             SYSPrintChar:
   40 00:4C44             	ret		
   41 00:4C44             
   42 00:4C44             ; ***************************************************************************************
   43 00:4C44             ;
   44 00:4C44             ;									Print Newline
   45 00:4C44             ;
   46 00:4C44             ; ***************************************************************************************
   47 00:4C44             
   48 00:4C44             SYSPrintCRLF:
   49 00:4C44             	ret
   50 00:4C44             
   51 00:4C44             ; ***************************************************************************************
   52 00:4C44             ;
   53 00:4C44             ;									Get time into HL'HL
   54 00:4C44             ;
   55 00:4C44             ; ***************************************************************************************
   56 00:4C44             
   57 00:4C44             SYSGetTimer:
   58 00:4C44             	ret
   59 00:4C44             
   60 00:4C44             #endif
   61 00:4C44 -  -  -  -  
   62 00:4C44 -  -  -  -  ; ***************************************************************************************
   63 00:4C44 -  -  -  -  ;
   64 00:4C44 -  -  -  -  ;									Changes and Updates
   65 00:4C44 -  -  -  -  ;
   66 00:4C44 -  -  -  -  ; ***************************************************************************************
   67 00:4C44 -  -  -  -  ;
   68 00:4C44 -  -  -  -  ;		Date			Notes
   69 00:4C44 -  -  -  -  ;		==== 			=====
   70 00:4C44 -  -  -  -  ;
   71 00:4C44 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4C44 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4C44 -  -  -  -  ; ***************************************************************************************
    2 00:4C44 -  -  -  -  ; ***************************************************************************************
    3 00:4C44 -  -  -  -  ;
    4 00:4C44 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4C44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C44 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C44 -  -  -  -  ;		Reviewed :	No
    8 00:4C44 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4C44 -  -  -  -  ;
   10 00:4C44 -  -  -  -  ; ***************************************************************************************
   11 00:4C44 -  -  -  -  ; ***************************************************************************************
   12 00:4C44 -  -  -  -  
   13 00:4C44 -  -  -  -  #ifdef TI84
   14 00:4C44             
   15 00:4C44             ; ***************************************************************************************
   16 00:4C44             ;
   17 00:4C44             ;								Initialise system stuff
   18 00:4C44             ;
   19 00:4C44             ; ***************************************************************************************
   20 00:4C44             
   21 00:4C44             SYSInitialise:
   22 00:4C44             	di
   23 00:4C44             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4C44             	ld 		(_IYTemp84),iy
   25 00:4C44             	ret
   26 00:4C44             
   27 00:4C44             ; ***************************************************************************************
   28 00:4C44             ;
   29 00:4C44             ;								Terminate system stuff
   30 00:4C44             ;
   31 00:4C44             ; ***************************************************************************************
   32 00:4C44             
   33 00:4C44             SYSTerminate:
   34 00:4C44             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4C44             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4C44             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4C44             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4C44             	ei
   39 00:4C44             	ret 										; and exit.
   40 00:4C44             
   41 00:4C44             _StackTemp84:									; temp var for TI84 only.
   42 00:4C44             	.dw 	0,0
   43 00:4C44             _IYTemp84:
   44 00:4C44             	.dw 	0,0		
   45 00:4C44             
   46 00:4C44             ; ***************************************************************************************
   47 00:4C44             ;
   48 00:4C44             ;								Print A character
   49 00:4C44             ;
   50 00:4C44             ; ***************************************************************************************
   51 00:4C44             
   52 00:4C44             SYSPrintChar:
   53 00:4C44             	push 	af 									; we stack everything including alt registers
   54 00:4C44             	push 	bc
   55 00:4C44             	push 	de
   56 00:4C44             	push 	hl
   57 00:4C44             	push 	ix
   58 00:4C44             	push 	iy
   59 00:4C44             	exx
   60 00:4C44             	push 	bc
   61 00:4C44             	push 	de
   62 00:4C44             	push 	hl
   63 00:4C44             
   64 00:4C44             	ld 		iy,(_IYTemp84)
   65 00:4C44             	call 	_PutC 								; print A as character
   66 00:4C44             	di
   67 00:4C44             	ld 		(_IYTemp84),iy
   68 00:4C44             
   69 00:4C44             	pop 	hl
   70 00:4C44             	pop 	de
   71 00:4C44             	pop 	bc
   72 00:4C44             	exx
   73 00:4C44             	pop 	iy
   74 00:4C44             	pop 	ix
   75 00:4C44             	pop 	hl
   76 00:4C44             	pop 	de
   77 00:4C44             	pop 	bc
   78 00:4C44             	pop 	af
   79 00:4C44             	ret		
   80 00:4C44             
   81 00:4C44             ; ***************************************************************************************
   82 00:4C44             ;
   83 00:4C44             ;									Print Newline
   84 00:4C44             ;
   85 00:4C44             ; ***************************************************************************************
   86 00:4C44             
   87 00:4C44             SYSPrintCRLF:
   88 00:4C44             	push 	af 									; we stack everything including alt registers
   89 00:4C44             	push 	bc
   90 00:4C44             	push 	de
   91 00:4C44             	push 	hl
   92 00:4C44             	push 	ix
   93 00:4C44             	push 	iy
   94 00:4C44             	exx
   95 00:4C44             	push 	bc
   96 00:4C44             	push 	de
   97 00:4C44             	push 	hl
   98 00:4C44             
   99 00:4C44             	ld 		iy,(_IYTemp84)
  100 00:4C44             	call 	_newline
  101 00:4C44             	di
  102 00:4C44             	ld 		(_IYTemp84),iy
  103 00:4C44             
  104 00:4C44             	pop 	hl
  105 00:4C44             	pop 	de
  106 00:4C44             	pop 	bc
  107 00:4C44             	exx
  108 00:4C44             	pop 	iy
  109 00:4C44             	pop 	ix
  110 00:4C44             	pop 	hl
  111 00:4C44             	pop 	de
  112 00:4C44             	pop 	bc
  113 00:4C44             	pop 	af
  114 00:4C44             	ret
  115 00:4C44             
  116 00:4C44             ; ***************************************************************************************
  117 00:4C44             ;
  118 00:4C44             ;									Get time into HL'HL
  119 00:4C44             ;
  120 00:4C44             ; ***************************************************************************************
  121 00:4C44             
  122 00:4C44             SYSGetTimer:
  123 00:4C44             	ld 		hl,$1234
  124 00:4C44             	exx
  125 00:4C44             	ld 		hl,$5678
  126 00:4C44             	exx
  127 00:4C44             	ret
  128 00:4C44             
  129 00:4C44             #endif
  130 00:4C44 -  -  -  -  
  131 00:4C44 -  -  -  -  ; ***************************************************************************************
  132 00:4C44 -  -  -  -  ;
  133 00:4C44 -  -  -  -  ;									Changes and Updates
  134 00:4C44 -  -  -  -  ;
  135 00:4C44 -  -  -  -  ; ***************************************************************************************
  136 00:4C44 -  -  -  -  ;
  137 00:4C44 -  -  -  -  ;		Date			Notes
  138 00:4C44 -  -  -  -  ;		==== 			=====
  139 00:4C44 -  -  -  -  ;
  140 00:4C44 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4C44 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4C44 -  -  -  -  ; ***************************************************************************************
    2 00:4C44 -  -  -  -  ; ***************************************************************************************
    3 00:4C44 -  -  -  -  ;
    4 00:4C44 -  -  -  -  ;		Name : 		basic.asm
    5 00:4C44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C44 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C44 -  -  -  -  ;		Reviewed :	No
    8 00:4C44 -  -  -  -  ;		Purpose :	Main program.
    9 00:4C44 -  -  -  -  ;
   10 00:4C44 -  -  -  -  ; ***************************************************************************************
   11 00:4C44 -  -  -  -  ; ***************************************************************************************
   12 00:4C44 -  -  -  -  
   13 00:4C44 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 22 01 00 BB 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 BB 3F 0C 
              53 65 65 64 
              20 3D 20 36 
              33 37 30 33 
              0D 80 09 03 
              00 0C 8F 47 
              70 56 80 0C 
              04 00 18 16 
              1E 0D 8F 53 
              58 7F 80 0D 
              05 00 03 1A 
              24 0F 8F 8A 
              42 75 64 80 
              0A 06 00 0B 
              8F 8A 4D 66 
              51 80 0A 07 
              00 05 8F 8A 
              55 68 5A 80 
              09 08 00 02 
              8F 57 65 78 
              80 0A 09 00 
              10 24 8F 58 
              42 7E 80 09 
              0A 00 04 8F 
              4F 46 69 80 
              0C 0B 00 07 
              1A 09 8F 8A 
              56 55 47 80 
              0D 0C 00 03 
              11 09 14 8F 
              8A 50 69 54 
              80 0F 0D 00 
              0E 0B 0B 01 
              02 20 8F 8A 
              50 51 62 80 
              0D 0E 00 11 
              09 15 1D 8F 
              8A 46 57 5F 
              80 09 0F 00 
              13 8F 51 51 
              43 80 0E 10 
              00 18 15 24 
              16 22 8F 8A 
              57 42 49 80 
              0D 11 00 11 
              12 0F 25 13 
              8F 43 7E 51 
              80 08 12 00 
              19 8F 48 43 
              80 0D 13 00 
              12 01 1F 1E 
              09 8F 55 79 
              64 80 0D 14 
              00 10 12 1B 
              1A 14 8F 47 
              5B 6E 80 0C 
              15 00 12 12 
              25 01 8F 44 
              7E 56 80 0B 
              16 00 05 16 
              8F 8A 4A 76 
              67 80 0B 17 
              00 14 11 8F 
              8A 49 53 5F 
              80 0A 18 00 
              14 8F 8A 42 
              41 7A 80 09 
              19 00 16 8F 
              4C 5B 49 80 
              0A 1A 00 13 
              1D 8F 8A 63 
              66 80 0E 1B 
              00 12 03 1F 
              11 06 17 8F 
              43 49 46 80 
              0C 1C 00 0A 
              19 04 12 8F 
              56 44 7C 80 
              0E 1D 00 0F 
              0E 1D 23 20 
              8F 8A 42 4F 
              79 80 0B 1E 
              00 01 20 8F 
              8A 44 65 7F 
              80 0B 1F 00 
              16 09 8F 8A 
              43 4B 46 80 
              09 20 00 0E 
              8F 46 78 4B 
              80 0A 21 00 
              0F 8F 8A 44 
              7A 48 80 0C 
              22 00 07 05 
              21 13 8F 49 
              55 6B 80 0E 
              23 00 15 1C 
              00 19 00 09 
              8F 54 7B 49 
              80 0E 24 00 
              0D 13 09 0D 
              12 8F 8A 55 
              6F 6D 80 09 
              25 00 08 8F 
              54 73 58 80 
              0D 26 00 10 
              14 1B 11 8F 
              8A 44 76 53 
              80 0E 27 00 
              0A 15 1A 18 
              15 8F 8A 56 
              73 6A 80 0E 
              28 00 08 14 
              13 08 0C 8F 
              8A 50 57 7D 
              80 0E 29 00 
              11 03 21 00 
              1C 8F 8A 57 
              5F 4A 80 0E 
              2A 00 19 21 
              21 18 1C 15 
              8F 56 72 47 
              80 0B 2B 00 
              13 1D 8F 8A 
              52 5E 65 80 
              0E 2C 00 11 
              03 21 00 1C 
              8F 8A 4E 48 
              58 80 09 2D 
              00 0C 8F 49 
              69 4B 80 0D 
              2E 00 11 12 
              0F 25 13 8F 
              4C 7F 67 80 
              0A 2F 00 10 
              24 8F 4E 50 
              6E 80 09 30 
              00 0F 8F 53 
              61 7E 80 0A 
              31 00 16 8F 
              8A 43 62 50 
              80 0B 32 00 
              10 24 8F 8A 
              42 67 72 80 
              0E 33 00 12 
              03 1F 11 06 
              17 8F 46 64 
              71 80 0D 34 
              00 0D 13 09 
              0D 12 8F 49 
              56 46 80 0E 
              35 00 15 1C 
              00 19 00 09 
              8F 56 68 43 
              80 0E 36 00 
              11 03 21 00 
              1C 8F 8A 4E 
              5D 42 80 0D 
              37 00 10 12 
              1B 1A 14 8F 
              52 7A 58 80 
              09 38 00 0E 
              8F 42 5D 6F 
              80 0F 39 00 
              12 03 1F 11 
              06 17 8F 8A 
              4E 68 60 80 
              0D 3A 00 10 
              12 1B 1A 14 
              8F 55 49 48 
              80 09 3B 00 
              16 8F 52 65 
              4B 80 0D 3C 
              00 12 01 1F 
              1E 09 8F 56 
              52 4F 80 0C 
              3D 00 0A 19 
              04 12 8F 57 
              51 7B 80 0C 
              3E 00 03 11 
              09 14 8F 57 
              6F 4B 80 0E 
              3F 00 12 01 
              1F 1E 09 8F 
              8A 52 40 6C 
              80 09 40 00 
              16 8F 50 5A 
              6B 80 0D 41 
              00 11 09 15 
              1D 8F 8A 41 
              4A 77 80 09 
              42 00 05 8F 
              58 49 7D 80 
              0B 43 00 10 
              24 8F 8A 46 
              70 58 80 0A 
              44 00 16 09 
              8F 52 79 57 
              80 0D 45 00 
              07 05 21 13 
              8F 8A 4C 7B 
              48 80 0E 46 
              00 12 01 1F 
              1E 09 8F 8A 
              53 48 41 80 
              0A 47 00 14 
              8F 8A 4C 6E 
              6B 80 0E 48 
              00 19 21 21 
              18 1C 15 8F 
              41 5C 7F 80 
              0F 49 00 19 
              21 21 18 1C 
              15 8F 8A 4D 
              4A 65 80 0C 
              4A 00 0A 19 
              04 12 8F 53 
              63 6C 80 0B 
              4B 00 01 20 
              8F 8A 4D 40 
              54 80 0E 4C 
              00 19 21 21 
              18 1C 15 8F 
              53 5D 65 80 
              0E 4D 00 0D 
              13 09 0D 12 
              8F 8A 49 57 
              40 80 0E 4E 
              00 0D 13 09 
              0D 12 8F 8A 
              52 52 4D 80 
              0D 4F 00 07 
              05 21 13 8F 
              8A 46 42 77 
              80 0C 50 00 
              08 14 13 08 
              0C 8F 4B 6F 
              80 0D 51 00 
              10 12 1B 1A 
              14 8F 55 64 
              76 80 0A 52 
              00 0E 8F 8A 
              57 5D 52 80 
              0F 53 00 0E 
              0B 0B 01 02 
              20 8F 8A 41 
              6E 5A 80 0D 
              54 00 10 12 
              1B 1A 14 8F 
              46 60 56 80 
              0C 55 00 12 
              12 25 01 8F 
              4B 41 48 80 
              0E 56 00 11 
              03 21 00 1C 
              8F 8A 4A 66 
              61 80 09 57 
              00 08 8F 4E 
              63 4D 80 0C 
              58 00 03 11 
              09 14 8F 4B 
              5B 4C 80 09 
              59 00 08 8F 
              41 77 42 80 
              0E 5A 00 08 
              14 13 08 0C 
              8F 8A 47 44 
              5B 80 0D 5B 
              00 0A 15 1A 
              18 15 8F 49 
              7A 64 80 0F 
              5C 00 19 21 
              21 18 1C 15 
              8F 8A 42 7F 
              6F 80 09 5D 
              00 0B 8F 4B 
              5E 6F 80 09 
              5E 00 0F 8F 
              51 79 54 80 
              09 5F 00 14 
              8F 49 7D 6A 
              80 09 60 00 
              0E 8F 49 41 
              53 80 0B 61 
              00 05 16 8F 
              8A 4C 4B 50 
              80 0A 62 00 
              0F 8F 8A 55 
              6E 4A 80 0E 
              63 00 10 12 
              1B 1A 14 8F 
              8A 42 54 4D 
              80 0A 64 00 
              14 8F 8A 52 
              58 5A 80 0B 
              65 00 14 11 
              8F 8A 52 51 
              4D 80 0D 66 
              00 18 16 1E 
              0D 8F 8A 55 
              49 4C 80 0A 
              67 00 19 8F 
              8A 57 4C 63 
              80 0C 68 00 
              12 12 25 01 
              8F 47 7C 7B 
              80 0C 69 00 
              03 11 09 14 
              8F 4D 4A 78 
              80 0B 6A 00 
              07 1A 09 8F 
              4C 6F 56 80 
              0E 6B 00 12 
              03 1F 11 06 
              17 8F 49 61 
              59 80 0B 6C 
              00 05 16 8F 
              8A 54 41 6F 
              80 0C 6D 00 
              0A 19 04 12 
              8F 43 63 74 
              80 0A 6E 00 
              05 8F 8A 50 
              4A 72 80 09 
              6F 00 0B 8F 
              43 5A 75 80 
              0D 70 00 03 
              1A 24 0F 8F 
              8A 47 5D 7F 
              80 0E 71 00 
              08 14 13 08 
              0C 8F 8A 4B 
              55 67 80 09 
              72 00 0B 8F 
              52 53 42 80 
              0A 73 00 02 
              8F 8A 4B 77 
              6E 80 09 74 
              00 13 8F 4C 
              5C 55 80 09 
              75 00 13 8F 
              46 71 4E 80 
              0A 76 00 16 
              09 8F 4D 4C 
              52 80 0F 77 
              00 12 03 1F 
              11 06 17 8F 
              8A 4E 4E 44 
              80 0D 78 00 
              18 16 1E 0D 
              8F 8A 4C 76 
              7D 80 0D 79 
              00 03 1A 24 
              0F 8F 8A 48 
              56 65 80 0C 
              7A 00 12 01 
              1F 1E 09 8F 
              5F 60 80 0D 
              7B 00 11 03 
              21 00 1C 8F 
              4F 79 6C 80 
              09 7C 00 0F 
              8F 4D 5A 67 
              80 0D 7D 00 
              08 14 13 08 
              0C 8F 48 5D 
              5B 80 0A 7E 
              00 05 8F 8A 
              54 7D 79 80 
              0D 7F 00 0F 
              0E 1D 23 20 
              8F 4E 69 55 
              80 0D 80 00 
              0A 19 04 12 
              8F 8A 45 55 
              4A 80 0A 81 
              00 0B 8F 8A 
              4E 7A 42 80 
              0A 82 00 0E 
              8F 8A 41 47 
              60 80 0E 83 
              00 0A 15 1A 
              18 15 8F 8A 
              56 68 62 80 
              0E 84 00 11 
              12 0F 25 13 
              8F 8A 45 5B 
              67 80 0A 85 
              00 04 8F 8A 
              4C 57 7B 80 
              0E 86 00 08 
              14 13 08 0C 
              8F 8A 50 53 
              50 80 0D 87 
              00 0F 0E 1D 
              23 20 8F 49 
              5E 7E 80 0C 
              88 00 07 05 
              21 13 8F 46 
              4C 7F 80 0E 
              89 00 10 12 
              1B 1A 14 8F 
              8A 46 4B 43 
              80 09 8A 00 
              04 8F 44 48 
              57 80 08 8B 
              00 02 8F 61 
              58 80 09 8C 
              00 16 8F 45 
              64 54 80 0E 
              8D 00 18 15 
              24 16 22 8F 
              8A 46 48 69 
              80 09 8E 00 
              02 8F 45 69 
              55 80 0E 8F 
              00 10 12 1B 
              1A 14 8F 8A 
              4D 64 61 80 
              0D 90 00 12 
              12 25 01 8F 
              8A 4B 68 5C 
              80 0C 91 00 
              0A 19 04 12 
              8F 56 6A 68 
              80 0A 92 00 
              04 8F 8A 57 
              75 5F 80 0C 
              93 00 12 12 
              25 01 8F 42 
              43 75 80 0E 
              94 00 19 21 
              21 18 1C 15 
              8F 47 57 7D 
              80 0A 95 00 
              0C 8F 8A 4C 
              6A 5E 80 0E 
              96 00 10 12 
              1B 1A 14 8F 
              8A 41 70 4C 
              80 0F 97 00 
              12 03 1F 11 
              06 17 8F 8A 
              43 7D 66 80 
              09 98 00 14 
              8F 4F 69 49 
              80 0A 99 00 
              05 16 8F 4A 
              64 58 80 0C 
              9A 00 07 05 
              21 13 8F 54 
              4E 7A 80 09 
              9B 00 05 8F 
              49 4E 7B 80 
              0A 9C 00 01 
              20 8F 50 53 
              41 80 0F 9D 
              00 19 21 21 
              18 1C 15 8F 
              8A 41 48 6C 
              80 0C 9E 00 
              11 09 15 1D 
              8F 50 73 47 
              80 0D 9F 00 
              03 1A 24 0F 
              8F 8A 46 5F 
              61 80 0E A0 
              00 0E 0B 0B 
              01 02 20 8F 
              8A 5B 6C 80 
              0E A1 00 12 
              03 1F 11 06 
              17 8F 4E 49 
              5F 80 0A A2 
              00 16 8F 8A 
              51 4E 4F 80 
              0D A3 00 10 
              12 1B 1A 14 
              8F 4F 4F 68 
              80 0E A4 00 
              10 12 1B 1A 
              14 8F 8A 54 
              73 7A 80 0D 
              A5 00 0A 15 
              1A 18 15 8F 
              4D 6B 73 80 
              0C A6 00 18 
              16 1E 0D 8F 
              56 69 43 80 
              0B A7 00 16 
              09 8F 8A 54 
              7B 52 80 0C 
              A8 00 0D 13 
              09 0D 12 8F 
              50 53 80 0A 
              A9 00 02 8F 
              8A 45 50 5E 
              80 09 AA 00 
              19 8F 44 63 
              62 80 0D AB 
              00 0F 0E 1D 
              23 20 8F 53 
              7B 6F 80 0C 
              AC 00 18 16 
              1E 0D 8F 44 
              58 5E 80 0D 
              AD 00 10 14 
              1B 11 8F 8A 
              43 5A 66 80 
              0D AE 00 11 
              03 21 00 1C 
              8F 52 60 54 
              80 0E AF 00 
              19 21 21 18 
              1C 15 8F 4E 
              7F 70 80 0B 
              B0 00 10 24 
              8F 8A 56 4A 
              5A 80 0E B1 
              00 12 01 1F 
              1E 09 8F 8A 
              4B 4D 65 80 
              0A B2 00 0B 
              8F 8A 51 6A 
              76 80 09 B3 
              00 13 8F 45 
              78 66 80 0E 
              B4 00 08 14 
              13 08 0C 8F 
              8A 4F 54 45 
              80 0B B5 00 
              14 11 8F 8A 
              45 43 4B 80 
              0B B6 00 14 
              11 8F 8A 53 
              68 46 80 0D 
              B7 00 0A 19 
              04 12 8F 8A 
              45 70 56 80 
              0A B8 00 19 
              8F 8A 47 5E 
              62 80 0C B9 
              00 03 1A 24 
              0F 8F 41 73 
              7F 80 0D BA 
              00 08 14 13 
              08 0C 8F 50 
              5B 49 80 0A 
              BB 00 02 8F 
              8A 43 79 7C 
              80 0D BC 00 
              11 09 15 1D 
              8F 8A 56 4F 
              68 80 09 BD 
              00 08 8F 4B 
              42 63 80 0D 
              BE 00 0F 0E 
              1D 23 20 8F 
              43 5B 6C 80 
              09 BF 00 0B 
              8F 58 43 69 
              80 0C C0 00 
              11 09 15 1D 
              8F 58 4E 7A 
              80 09 C1 00 
              04 8F 50 42 
              40 80 0A C2 
              00 02 8F 8A 
              58 4B 4F 80 
              0B C3 00 16 
              09 8F 8A 42 
              52 49 80 0B 
              C4 00 01 20 
              8F 8A 45 79 
              7D 80 0F C5 
              00 15 1C 00 
              19 00 09 8F 
              8A 48 67 48 
              80 0B C6 00 
              07 1A 09 8F 
              46 43 5D 80 
              0A C7 00 04 
              8F 8A 44 67 
              4C 80 0D C8 
              00 12 01 1F 
              1E 09 8F 45 
              49 43 80 0D 
              C9 00 18 16 
              1E 0D 8F 8A 
              46 78 60 80 
              09 CA 00 02 
              8F 4D 55 53 
              80 0D CB 00 
              0F 0E 1D 23 
              20 8F 4F 5C 
              75 80 0A CC 
              00 0F 8F 8A 
              47 67 40 80 
              0D CD 00 10 
              12 1B 1A 14 
              8F 52 6A 69 
              80 0E CE 00 
              10 12 1B 1A 
              14 8F 8A 4C 
              7A 66 80 0A 
              CF 00 0E 8F 
              8A 43 4F 7C 
              80 0D D0 00 
              03 11 09 14 
              8F 8A 49 48 
              64 80 0C D1 
              00 03 1A 24 
              0F 8F 44 59 
              47 80 0E D2 
              00 12 01 1F 
              1E 09 8F 8A 
              56 5B 54 80 
              0A D3 00 0C 
              8F 8A 4D 61 
              4A 80 0D D4 
              00 03 11 09 
              14 8F 8A 45 
              6B 7E 80 0E 
              D5 00 10 12 
              1B 1A 14 8F 
              8A 42 76 56 
              80 0B D6 00 
              10 24 8F 8A 
              51 47 5C 80 
              0E D7 00 11 
              12 0F 25 13 
              8F 8A 48 4F 
              78 80 0E D8 
              00 10 12 1B 
              1A 14 8F 8A 
              56 5C 40 80 
              0A D9 00 16 
              8F 8A 44 6E 
              4A 80 0B DA 
              00 07 1A 09 
              8F 4D 4E 5F 
              80 0D DB 00 
              12 12 25 01 
              8F 8A 55 48 
              5B 80 0A DC 
              00 0F 8F 8A 
              49 5A 76 80 
              0D DD 00 07 
              05 21 13 8F 
              8A 43 7F 7D 
              80 0E DE 00 
              11 12 0F 25 
              13 8F 8A 4C 
              70 5E 80 0D 
              DF 00 18 15 
              24 16 22 8F 
              54 6B 6B 80 
              09 E0 00 02 
              8F 54 4E 6E 
              80 0B E1 00 
              05 16 8F 8A 
              57 68 63 80 
              0C E2 00 03 
              11 09 14 8F 
              49 4E 4F 80 
              0A E3 00 16 
              8F 8A 4E 54 
              48 80 0D E4 
              00 18 15 24 
              16 22 8F 51 
              6C 6F 80 0A 
              E5 00 05 16 
              8F 4C 5C 4C 
              80 0A E6 00 
              08 8F 8A 4F 
              44 74 80 0B 
              E7 00 13 1D 
              8F 8A 47 7E 
              57 80 0F E8 
              00 0E 0B 0B 
              01 02 20 8F 
              8A 41 74 7C 
              80 09 E9 00 
              05 8F 50 43 
              66 80 0B EA 
              00 01 20 8F 
              8A 55 63 6C 
              80 0C EB 00 
              12 12 25 01 
              8F 55 52 5D 
              80 0A EC 00 
              05 16 8F 47 
              40 45 80 0A 
              ED 00 05 16 
              8F 58 54 7C 
              80 09 EE 00 
              05 8F 4E 4F 
              7F 80 0C EF 
              00 10 14 1B 
              11 8F 4B 42 
              68 80 09 F0 
              00 14 8F 56 
              47 78 80 0D 
              F1 00 08 14 
              13 08 0C 8F 
              42 5D 4B 80 
              0A F2 00 14 
              11 8F 47 57 
              68 80 0B F3 
              00 C7 0C 8F 
              8A 4D 61 4A 
              80 0E F4 00 
              C7 18 16 1E 
              0D 8F 8A 46 
              78 60 80 0D 
              F5 00 C7 03 
              1A 24 0F 8F 
              44 59 47 80 
              0A F6 00 C7 
              0B 8F 58 43 
              69 80 0A F7 
              00 C7 05 8F 
              4E 4F 7F 80 
              0A F8 00 C7 
              02 8F 54 4E 
              6E 80 0C F9 
              00 C7 10 24 
              8F 8A 51 47 
              5C 80 0B FA 
              00 C7 04 8F 
              8A 44 67 4C 
              80 0C FB 00 
              C7 07 1A 09 
              8F 4D 4E 5F 
              80 0D FC 00 
              C7 03 11 09 
              14 8F 49 4E 
              4F 80 10 FD 
              00 C7 0E 0B 
              0B 01 02 20 
              8F 8A 41 74 
              7C 80 0D FE 
              00 C7 11 09 
              15 1D 8F 58 
              4E 7A 80 0A 
              FF 00 C7 13 
              8F 45 78 66 
              80 0E 00 01 
              C7 18 15 24 
              16 22 8F 51 
              6C 6F 80 0F 
              01 01 C7 11 
              12 0F 25 13 
              8F 8A 4C 70 
              5E 80 0B 02 
              01 C7 19 8F 
              8A 47 5E 62 
              80 0F 03 01 
              C7 12 01 1F 
              1E 09 8F 8A 
              56 5B 54 80 
              0F 04 01 C7 
              10 12 1B 1A 
              14 8F 8A 56 
              5C 40 80 0D 
              05 01 C7 12 
              12 25 01 8F 
              55 52 5D 80 
              0B 06 01 C7 
              05 16 8F 58 
              54 7C 80 0B 
              07 01 C7 14 
              11 8F 47 57 
              68 80 0A 08 
              01 C7 14 8F 
              56 47 78 80 
              0B 09 01 C7 
              16 8F 8A 4E 
              54 48 80 0C 
              0A 01 C7 13 
              1D 8F 8A 47 
              7E 57 80 0F 
              0B 01 C7 12 
              03 1F 11 06 
              17 8F 4E 49 
              5F 80 0E 0C 
              01 C7 0A 19 
              04 12 8F 8A 
              45 70 56 80 
              0E 0D 01 C7 
              0F 0E 1D 23 
              20 8F 4F 5C 
              75 80 0C 0E 
              01 C7 01 20 
              8F 8A 55 63 
              6C 80 0C 0F 
              01 C7 16 09 
              8F 8A 42 52 
              49 80 0B 10 
              01 C7 0E 8F 
              8A 43 4F 7C 
              80 0B 11 01 
              C7 0F 8F 8A 
              49 5A 76 80 
              0E 12 01 C7 
              07 05 21 13 
              8F 8A 43 7F 
              7D 80 10 13 
              01 C7 15 1C 
              00 19 00 09 
              8F 8A 48 67 
              48 80 0D 14 
              01 C7 0D 13 
              09 0D 12 8F 
              50 53 80 0B 
              15 01 C7 08 
              8F 8A 4F 44 
              74 80 0D 16 
              01 C7 10 14 
              1B 11 8F 4B 
              42 68 80 0E 
              17 01 C7 0A 
              15 1A 18 15 
              8F 4D 6B 73 
              80 0E 18 01 
              C7 08 14 13 
              08 0C 8F 42 
              5D 4B 80 0E 
              19 01 C7 11 
              03 21 00 1C 
              8F 52 60 54 
              80 0F 1A 01 
              C7 19 21 21 
              18 1C 15 8F 
              4E 7F 70 80 
              15 1B 01 BE 
              3F 0D 4F 6B 
              20 53 65 65 
              64 20 36 33 
              37 30 33 0D 
              80 00 -  -  	.db	$22,$01,$00,$bb,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$bb,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$36,$33,$37,$30,$33,$0d,$80,$09,$03,$00,$0c,$8f,$47,$70,$56,$80,$0c,$04,$00,$18,$16,$1e,$0d,$8f,$53,$58,$7f,$80,$0d,$05,$00,$03,$1a,$24,$0f,$8f,$8a,$42,$75,$64,$80,$0a,$06,$00,$0b,$8f,$8a,$4d,$66,$51,$80,$0a,$07,$00,$05,$8f,$8a,$55,$68,$5a,$80,$09,$08,$00,$02,$8f,$57,$65,$78,$80,$0a,$09,$00,$10,$24,$8f,$58,$42,$7e,$80,$09,$0a,$00,$04,$8f,$4f,$46,$69,$80,$0c,$0b,$00,$07,$1a,$09,$8f,$8a,$56,$55,$47,$80,$0d,$0c,$00,$03,$11,$09,$14,$8f,$8a,$50,$69,$54,$80,$0f,$0d,$00,$0e,$0b,$0b,$01,$02,$20,$8f,$8a,$50,$51,$62,$80,$0d,$0e,$00,$11,$09,$15,$1d,$8f,$8a,$46,$57,$5f,$80,$09,$0f,$00,$13,$8f,$51,$51,$43,$80,$0e,$10,$00,$18,$15,$24,$16,$22,$8f,$8a,$57,$42,$49,$80,$0d,$11,$00,$11,$12,$0f,$25,$13,$8f,$43,$7e,$51,$80,$08,$12,$00,$19,$8f,$48,$43,$80,$0d,$13,$00,$12,$01,$1f,$1e,$09,$8f,$55,$79,$64,$80,$0d,$14,$00,$10,$12,$1b,$1a,$14,$8f,$47,$5b,$6e,$80,$0c,$15,$00,$12,$12,$25,$01,$8f,$44,$7e,$56,$80,$0b,$16,$00,$05,$16,$8f,$8a,$4a,$76,$67,$80,$0b,$17,$00,$14,$11,$8f,$8a,$49,$53,$5f,$80,$0a,$18,$00,$14,$8f,$8a,$42,$41,$7a,$80,$09,$19,$00,$16,$8f,$4c,$5b,$49,$80,$0a,$1a,$00,$13,$1d,$8f,$8a,$63,$66,$80,$0e,$1b,$00,$12,$03,$1f,$11,$06,$17,$8f,$43,$49,$46,$80,$0c,$1c,$00,$0a,$19,$04,$12,$8f,$56,$44,$7c,$80,$0e,$1d,$00,$0f,$0e,$1d,$23,$20,$8f,$8a,$42,$4f,$79,$80,$0b,$1e,$00,$01,$20,$8f,$8a,$44,$65,$7f,$80,$0b,$1f,$00,$16,$09,$8f,$8a,$43,$4b,$46,$80,$09,$20,$00,$0e,$8f,$46,$78,$4b,$80,$0a,$21,$00,$0f,$8f,$8a,$44,$7a,$48,$80,$0c,$22,$00,$07,$05,$21,$13,$8f,$49,$55,$6b,$80,$0e,$23,$00,$15,$1c,$00,$19,$00,$09,$8f,$54,$7b,$49,$80,$0e,$24,$00,$0d,$13,$09,$0d,$12,$8f,$8a,$55,$6f,$6d,$80,$09,$25,$00,$08,$8f,$54,$73,$58,$80,$0d,$26,$00,$10,$14,$1b,$11,$8f,$8a,$44,$76,$53,$80,$0e,$27,$00,$0a,$15,$1a,$18,$15,$8f,$8a,$56,$73,$6a,$80,$0e,$28,$00,$08,$14,$13,$08,$0c,$8f,$8a,$50,$57,$7d,$80,$0e,$29,$00,$11,$03,$21,$00,$1c,$8f,$8a,$57,$5f,$4a,$80,$0e,$2a,$00,$19,$21,$21,$18,$1c,$15,$8f,$56,$72,$47,$80,$0b,$2b,$00,$13,$1d,$8f,$8a,$52,$5e,$65,$80,$0e,$2c,$00,$11,$03,$21,$00,$1c,$8f,$8a,$4e,$48,$58,$80,$09,$2d,$00,$0c,$8f,$49,$69,$4b,$80,$0d,$2e,$00,$11,$12,$0f,$25,$13,$8f,$4c,$7f,$67,$80,$0a,$2f,$00,$10,$24,$8f,$4e,$50,$6e,$80,$09,$30,$00,$0f,$8f,$53,$61,$7e,$80,$0a,$31,$00,$16,$8f,$8a,$43,$62,$50,$80,$0b,$32,$00,$10,$24,$8f,$8a,$42,$67,$72,$80,$0e,$33,$00,$12,$03,$1f,$11,$06,$17,$8f,$46,$64,$71,$80,$0d,$34,$00,$0d,$13,$09,$0d,$12,$8f,$49,$56,$46,$80,$0e,$35,$00,$15,$1c,$00,$19,$00,$09,$8f,$56,$68,$43,$80,$0e,$36,$00,$11,$03,$21,$00,$1c,$8f,$8a,$4e,$5d,$42,$80,$0d,$37,$00,$10,$12,$1b,$1a,$14,$8f,$52,$7a,$58,$80,$09,$38,$00,$0e,$8f,$42,$5d,$6f,$80,$0f,$39,$00,$12,$03,$1f,$11,$06,$17,$8f,$8a,$4e,$68,$60,$80,$0d,$3a,$00,$10,$12,$1b,$1a,$14,$8f,$55,$49,$48,$80,$09,$3b,$00,$16,$8f,$52,$65,$4b,$80,$0d,$3c,$00,$12,$01,$1f,$1e,$09,$8f,$56,$52,$4f,$80,$0c,$3d,$00,$0a,$19,$04,$12,$8f,$57,$51,$7b,$80,$0c,$3e,$00,$03,$11,$09,$14,$8f,$57,$6f,$4b,$80,$0e,$3f,$00,$12,$01,$1f,$1e,$09,$8f,$8a,$52,$40,$6c,$80,$09,$40,$00,$16,$8f,$50,$5a,$6b,$80,$0d,$41,$00,$11,$09,$15,$1d,$8f,$8a,$41,$4a,$77,$80,$09,$42,$00,$05,$8f,$58,$49,$7d,$80,$0b,$43,$00,$10,$24,$8f,$8a,$46,$70,$58,$80,$0a,$44,$00,$16,$09,$8f,$52,$79,$57,$80,$0d,$45,$00,$07,$05,$21,$13,$8f,$8a,$4c,$7b,$48,$80,$0e,$46,$00,$12,$01,$1f,$1e,$09,$8f,$8a,$53,$48,$41,$80,$0a,$47,$00,$14,$8f,$8a,$4c,$6e,$6b,$80,$0e,$48,$00,$19,$21,$21,$18,$1c,$15,$8f,$41,$5c,$7f,$80,$0f,$49,$00,$19,$21,$21,$18,$1c,$15,$8f,$8a,$4d,$4a,$65,$80,$0c,$4a,$00,$0a,$19,$04,$12,$8f,$53,$63,$6c,$80,$0b,$4b,$00,$01,$20,$8f,$8a,$4d,$40,$54,$80,$0e,$4c,$00,$19,$21,$21,$18,$1c,$15,$8f,$53,$5d,$65,$80,$0e,$4d,$00,$0d,$13,$09,$0d,$12,$8f,$8a,$49,$57,$40,$80,$0e,$4e,$00,$0d,$13,$09,$0d,$12,$8f,$8a,$52,$52,$4d,$80,$0d,$4f,$00,$07,$05,$21,$13,$8f,$8a,$46,$42,$77,$80,$0c,$50,$00,$08,$14,$13,$08,$0c,$8f,$4b,$6f,$80,$0d,$51,$00,$10,$12,$1b,$1a,$14,$8f,$55,$64,$76,$80,$0a,$52,$00,$0e,$8f,$8a,$57,$5d,$52,$80,$0f,$53,$00,$0e,$0b,$0b,$01,$02,$20,$8f,$8a,$41,$6e,$5a,$80,$0d,$54,$00,$10,$12,$1b,$1a,$14,$8f,$46,$60,$56,$80,$0c,$55,$00,$12,$12,$25,$01,$8f,$4b,$41,$48,$80,$0e,$56,$00,$11,$03,$21,$00,$1c,$8f,$8a,$4a,$66,$61,$80,$09,$57,$00,$08,$8f,$4e,$63,$4d,$80,$0c,$58,$00,$03,$11,$09,$14,$8f,$4b,$5b,$4c,$80,$09,$59,$00,$08,$8f,$41,$77,$42,$80,$0e,$5a,$00,$08,$14,$13,$08,$0c,$8f,$8a,$47,$44,$5b,$80,$0d,$5b,$00,$0a,$15,$1a,$18,$15,$8f,$49,$7a,$64,$80,$0f,$5c,$00,$19,$21,$21,$18,$1c,$15,$8f,$8a,$42,$7f,$6f,$80,$09,$5d,$00,$0b,$8f,$4b,$5e,$6f,$80,$09,$5e,$00,$0f,$8f,$51,$79,$54,$80,$09,$5f,$00,$14,$8f,$49,$7d,$6a,$80,$09,$60,$00,$0e,$8f,$49,$41,$53,$80,$0b,$61,$00,$05,$16,$8f,$8a,$4c,$4b,$50,$80,$0a,$62,$00,$0f,$8f,$8a,$55,$6e,$4a,$80,$0e,$63,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$42,$54,$4d,$80,$0a,$64,$00,$14,$8f,$8a,$52,$58,$5a,$80,$0b,$65,$00,$14,$11,$8f,$8a,$52,$51,$4d,$80,$0d,$66,$00,$18,$16,$1e,$0d,$8f,$8a,$55,$49,$4c,$80,$0a,$67,$00,$19,$8f,$8a,$57,$4c,$63,$80,$0c,$68,$00,$12,$12,$25,$01,$8f,$47,$7c,$7b,$80,$0c,$69,$00,$03,$11,$09,$14,$8f,$4d,$4a,$78,$80,$0b,$6a,$00,$07,$1a,$09,$8f,$4c,$6f,$56,$80,$0e,$6b,$00,$12,$03,$1f,$11,$06,$17,$8f,$49,$61,$59,$80,$0b,$6c,$00,$05,$16,$8f,$8a,$54,$41,$6f,$80,$0c,$6d,$00,$0a,$19,$04,$12,$8f,$43,$63,$74,$80,$0a,$6e,$00,$05,$8f,$8a,$50,$4a,$72,$80,$09,$6f,$00,$0b,$8f,$43,$5a,$75,$80,$0d,$70,$00,$03,$1a,$24,$0f,$8f,$8a,$47,$5d,$7f,$80,$0e,$71,$00,$08,$14,$13,$08,$0c,$8f,$8a,$4b,$55,$67,$80,$09,$72,$00,$0b,$8f,$52,$53,$42,$80,$0a,$73,$00,$02,$8f,$8a,$4b,$77,$6e,$80,$09,$74,$00,$13,$8f,$4c,$5c,$55,$80,$09,$75,$00,$13,$8f,$46,$71,$4e,$80,$0a,$76,$00,$16,$09,$8f,$4d,$4c,$52,$80,$0f,$77,$00,$12,$03,$1f,$11,$06,$17,$8f,$8a,$4e,$4e,$44,$80,$0d,$78,$00,$18,$16,$1e,$0d,$8f,$8a,$4c,$76,$7d,$80,$0d,$79,$00,$03,$1a,$24,$0f,$8f,$8a,$48,$56,$65,$80,$0c,$7a,$00,$12,$01,$1f,$1e,$09,$8f,$5f,$60,$80,$0d,$7b,$00,$11,$03,$21,$00,$1c,$8f,$4f,$79,$6c,$80,$09,$7c,$00,$0f,$8f,$4d,$5a,$67,$80,$0d,$7d,$00,$08,$14,$13,$08,$0c,$8f,$48,$5d,$5b,$80,$0a,$7e,$00,$05,$8f,$8a,$54,$7d,$79,$80,$0d,$7f,$00,$0f,$0e,$1d,$23,$20,$8f,$4e,$69,$55,$80,$0d,$80,$00,$0a,$19,$04,$12,$8f,$8a,$45,$55,$4a,$80,$0a,$81,$00,$0b,$8f,$8a,$4e,$7a,$42,$80,$0a,$82,$00,$0e,$8f,$8a,$41,$47,$60,$80,$0e,$83,$00,$0a,$15,$1a,$18,$15,$8f,$8a,$56,$68,$62,$80,$0e,$84,$00,$11,$12,$0f,$25,$13,$8f,$8a,$45,$5b,$67,$80,$0a,$85,$00,$04,$8f,$8a,$4c,$57,$7b,$80,$0e,$86,$00,$08,$14,$13,$08,$0c,$8f,$8a,$50,$53,$50,$80,$0d,$87,$00,$0f,$0e,$1d,$23,$20,$8f,$49,$5e,$7e,$80,$0c,$88,$00,$07,$05,$21,$13,$8f,$46,$4c,$7f,$80,$0e,$89,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$46,$4b,$43,$80,$09,$8a,$00,$04,$8f,$44,$48,$57,$80,$08,$8b,$00,$02,$8f,$61,$58,$80,$09,$8c,$00,$16,$8f,$45,$64,$54,$80,$0e,$8d,$00,$18,$15,$24,$16,$22,$8f,$8a,$46,$48,$69,$80,$09,$8e,$00,$02,$8f,$45,$69,$55,$80,$0e,$8f,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$4d,$64,$61,$80,$0d,$90,$00,$12,$12,$25,$01,$8f,$8a,$4b,$68,$5c,$80,$0c,$91,$00,$0a,$19,$04,$12,$8f,$56,$6a,$68,$80,$0a,$92,$00,$04,$8f,$8a,$57,$75,$5f,$80,$0c,$93,$00,$12,$12,$25,$01,$8f,$42,$43,$75,$80,$0e,$94,$00,$19,$21,$21,$18,$1c,$15,$8f,$47,$57,$7d,$80,$0a,$95,$00,$0c,$8f,$8a,$4c,$6a,$5e,$80,$0e,$96,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$41,$70,$4c,$80,$0f,$97,$00,$12,$03,$1f,$11,$06,$17,$8f,$8a,$43,$7d,$66,$80,$09,$98,$00,$14,$8f,$4f,$69,$49,$80,$0a,$99,$00,$05,$16,$8f,$4a,$64,$58,$80,$0c,$9a,$00,$07,$05,$21,$13,$8f,$54,$4e,$7a,$80,$09,$9b,$00,$05,$8f,$49,$4e,$7b,$80,$0a,$9c,$00,$01,$20,$8f,$50,$53,$41,$80,$0f,$9d,$00,$19,$21,$21,$18,$1c,$15,$8f,$8a,$41,$48,$6c,$80,$0c,$9e,$00,$11,$09,$15,$1d,$8f,$50,$73,$47,$80,$0d,$9f,$00,$03,$1a,$24,$0f,$8f,$8a,$46,$5f,$61,$80,$0e,$a0,$00,$0e,$0b,$0b,$01,$02,$20,$8f,$8a,$5b,$6c,$80,$0e,$a1,$00,$12,$03,$1f,$11,$06,$17,$8f,$4e,$49,$5f,$80,$0a,$a2,$00,$16,$8f,$8a,$51,$4e,$4f,$80,$0d,$a3,$00,$10,$12,$1b,$1a,$14,$8f,$4f,$4f,$68,$80,$0e,$a4,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$54,$73,$7a,$80,$0d,$a5,$00,$0a,$15,$1a,$18,$15,$8f,$4d,$6b,$73,$80,$0c,$a6,$00,$18,$16,$1e,$0d,$8f,$56,$69,$43,$80,$0b,$a7,$00,$16,$09,$8f,$8a,$54,$7b,$52,$80,$0c,$a8,$00,$0d,$13,$09,$0d,$12,$8f,$50,$53,$80,$0a,$a9,$00,$02,$8f,$8a,$45,$50,$5e,$80,$09,$aa,$00,$19,$8f,$44,$63,$62,$80,$0d,$ab,$00,$0f,$0e,$1d,$23,$20,$8f,$53,$7b,$6f,$80,$0c,$ac,$00,$18,$16,$1e,$0d,$8f,$44,$58,$5e,$80,$0d,$ad,$00,$10,$14,$1b,$11,$8f,$8a,$43,$5a,$66,$80,$0d,$ae,$00,$11,$03,$21,$00,$1c,$8f,$52,$60,$54,$80,$0e,$af,$00,$19,$21,$21,$18,$1c,$15,$8f,$4e,$7f,$70,$80,$0b,$b0,$00,$10,$24,$8f,$8a,$56,$4a,$5a,$80,$0e,$b1,$00,$12,$01,$1f,$1e,$09,$8f,$8a,$4b,$4d,$65,$80,$0a,$b2,$00,$0b,$8f,$8a,$51,$6a,$76,$80,$09,$b3,$00,$13,$8f,$45,$78,$66,$80,$0e,$b4,$00,$08,$14,$13,$08,$0c,$8f,$8a,$4f,$54,$45,$80,$0b,$b5,$00,$14,$11,$8f,$8a,$45,$43,$4b,$80,$0b,$b6,$00,$14,$11,$8f,$8a,$53,$68,$46,$80,$0d,$b7,$00,$0a,$19,$04,$12,$8f,$8a,$45,$70,$56,$80,$0a,$b8,$00,$19,$8f,$8a,$47,$5e,$62,$80,$0c,$b9,$00,$03,$1a,$24,$0f,$8f,$41,$73,$7f,$80,$0d,$ba,$00,$08,$14,$13,$08,$0c,$8f,$50,$5b,$49,$80,$0a,$bb,$00,$02,$8f,$8a,$43,$79,$7c,$80,$0d,$bc,$00,$11,$09,$15,$1d,$8f,$8a,$56,$4f,$68,$80,$09,$bd,$00,$08,$8f,$4b,$42,$63,$80,$0d,$be,$00,$0f,$0e,$1d,$23,$20,$8f,$43,$5b,$6c,$80,$09,$bf,$00,$0b,$8f,$58,$43,$69,$80,$0c,$c0,$00,$11,$09,$15,$1d,$8f,$58,$4e,$7a,$80,$09,$c1,$00,$04,$8f,$50,$42,$40,$80,$0a,$c2,$00,$02,$8f,$8a,$58,$4b,$4f,$80,$0b,$c3,$00,$16,$09,$8f,$8a,$42,$52,$49,$80,$0b,$c4,$00,$01,$20,$8f,$8a,$45,$79,$7d,$80,$0f,$c5,$00,$15,$1c,$00,$19,$00,$09,$8f,$8a,$48,$67,$48,$80,$0b,$c6,$00,$07,$1a,$09,$8f,$46,$43,$5d,$80,$0a,$c7,$00,$04,$8f,$8a,$44,$67,$4c,$80,$0d,$c8,$00,$12,$01,$1f,$1e,$09,$8f,$45,$49,$43,$80,$0d,$c9,$00,$18,$16,$1e,$0d,$8f,$8a,$46,$78,$60,$80,$09,$ca,$00,$02,$8f,$4d,$55,$53,$80,$0d,$cb,$00,$0f,$0e,$1d,$23,$20,$8f,$4f,$5c,$75,$80,$0a,$cc,$00,$0f,$8f,$8a,$47,$67,$40,$80,$0d,$cd,$00,$10,$12,$1b,$1a,$14,$8f,$52,$6a,$69,$80,$0e,$ce,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$4c,$7a,$66,$80,$0a,$cf,$00,$0e,$8f,$8a,$43,$4f,$7c,$80,$0d,$d0,$00,$03,$11,$09,$14,$8f,$8a,$49,$48,$64,$80,$0c,$d1,$00,$03,$1a,$24,$0f,$8f,$44,$59,$47,$80,$0e,$d2,$00,$12,$01,$1f,$1e,$09,$8f,$8a,$56,$5b,$54,$80,$0a,$d3,$00,$0c,$8f,$8a,$4d,$61,$4a,$80,$0d,$d4,$00,$03,$11,$09,$14,$8f,$8a,$45,$6b,$7e,$80,$0e,$d5,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$42,$76,$56,$80,$0b,$d6,$00,$10,$24,$8f,$8a,$51,$47,$5c,$80,$0e,$d7,$00,$11,$12,$0f,$25,$13,$8f,$8a,$48,$4f,$78,$80,$0e,$d8,$00,$10,$12,$1b,$1a,$14,$8f,$8a,$56,$5c,$40,$80,$0a,$d9,$00,$16,$8f,$8a,$44,$6e,$4a,$80,$0b,$da,$00,$07,$1a,$09,$8f,$4d,$4e,$5f,$80,$0d,$db,$00,$12,$12,$25,$01,$8f,$8a,$55,$48,$5b,$80,$0a,$dc,$00,$0f,$8f,$8a,$49,$5a,$76,$80,$0d,$dd,$00,$07,$05,$21,$13,$8f,$8a,$43,$7f,$7d,$80,$0e,$de,$00,$11,$12,$0f,$25,$13,$8f,$8a,$4c,$70,$5e,$80,$0d,$df,$00,$18,$15,$24,$16,$22,$8f,$54,$6b,$6b,$80,$09,$e0,$00,$02,$8f,$54,$4e,$6e,$80,$0b,$e1,$00,$05,$16,$8f,$8a,$57,$68,$63,$80,$0c,$e2,$00,$03,$11,$09,$14,$8f,$49,$4e,$4f,$80,$0a,$e3,$00,$16,$8f,$8a,$4e,$54,$48,$80,$0d,$e4,$00,$18,$15,$24,$16,$22,$8f,$51,$6c,$6f,$80,$0a,$e5,$00,$05,$16,$8f,$4c,$5c,$4c,$80,$0a,$e6,$00,$08,$8f,$8a,$4f,$44,$74,$80,$0b,$e7,$00,$13,$1d,$8f,$8a,$47,$7e,$57,$80,$0f,$e8,$00,$0e,$0b,$0b,$01,$02,$20,$8f,$8a,$41,$74,$7c,$80,$09,$e9,$00,$05,$8f,$50,$43,$66,$80,$0b,$ea,$00,$01,$20,$8f,$8a,$55,$63,$6c,$80,$0c,$eb,$00,$12,$12,$25,$01,$8f,$55,$52,$5d,$80,$0a,$ec,$00,$05,$16,$8f,$47,$40,$45,$80,$0a,$ed,$00,$05,$16,$8f,$58,$54,$7c,$80,$09,$ee,$00,$05,$8f,$4e,$4f,$7f,$80,$0c,$ef,$00,$10,$14,$1b,$11,$8f,$4b,$42,$68,$80,$09,$f0,$00,$14,$8f,$56,$47,$78,$80,$0d,$f1,$00,$08,$14,$13,$08,$0c,$8f,$42,$5d,$4b,$80,$0a,$f2,$00,$14,$11,$8f,$47,$57,$68,$80,$0b,$f3,$00,$c7,$0c,$8f,$8a,$4d,$61,$4a,$80,$0e,$f4,$00,$c7,$18,$16,$1e,$0d,$8f,$8a,$46,$78,$60,$80,$0d,$f5,$00,$c7,$03,$1a,$24,$0f,$8f,$44,$59,$47,$80,$0a,$f6,$00,$c7,$0b,$8f,$58,$43,$69,$80,$0a,$f7,$00,$c7,$05,$8f,$4e,$4f,$7f,$80,$0a,$f8,$00,$c7,$02,$8f,$54,$4e,$6e,$80,$0c,$f9,$00,$c7,$10,$24,$8f,$8a,$51,$47,$5c,$80,$0b,$fa,$00,$c7,$04,$8f,$8a,$44,$67,$4c,$80,$0c,$fb,$00,$c7,$07,$1a,$09,$8f,$4d,$4e,$5f,$80,$0d,$fc,$00,$c7,$03,$11,$09,$14,$8f,$49,$4e,$4f,$80,$10,$fd,$00,$c7,$0e,$0b,$0b,$01,$02,$20,$8f,$8a,$41,$74,$7c,$80,$0d,$fe,$00,$c7,$11,$09,$15,$1d,$8f,$58,$4e,$7a,$80,$0a,$ff,$00,$c7,$13,$8f,$45,$78,$66,$80,$0e,$00,$01,$c7,$18,$15,$24,$16,$22,$8f,$51,$6c,$6f,$80,$0f,$01,$01,$c7,$11,$12,$0f,$25,$13,$8f,$8a,$4c,$70,$5e,$80,$0b,$02,$01,$c7,$19,$8f,$8a,$47,$5e,$62,$80,$0f,$03,$01,$c7,$12,$01,$1f,$1e,$09,$8f,$8a,$56,$5b,$54,$80,$0f,$04,$01,$c7,$10,$12,$1b,$1a,$14,$8f,$8a,$56,$5c,$40,$80,$0d,$05,$01,$c7,$12,$12,$25,$01,$8f,$55,$52,$5d,$80,$0b,$06,$01,$c7,$05,$16,$8f,$58,$54,$7c,$80,$0b,$07,$01,$c7,$14,$11,$8f,$47,$57,$68,$80,$0a,$08,$01,$c7,$14,$8f,$56,$47,$78,$80,$0b,$09,$01,$c7,$16,$8f,$8a,$4e,$54,$48,$80,$0c,$0a,$01,$c7,$13,$1d,$8f,$8a,$47,$7e,$57,$80,$0f,$0b,$01,$c7,$12,$03,$1f,$11,$06,$17,$8f,$4e,$49,$5f,$80,$0e,$0c,$01,$c7,$0a,$19,$04,$12,$8f,$8a,$45,$70,$56,$80,$0e,$0d,$01,$c7,$0f,$0e,$1d,$23,$20,$8f,$4f,$5c,$75,$80,$0c,$0e,$01,$c7,$01,$20,$8f,$8a,$55,$63,$6c,$80,$0c,$0f,$01,$c7,$16,$09,$8f,$8a,$42,$52,$49,$80,$0b,$10,$01,$c7,$0e,$8f,$8a,$43,$4f,$7c,$80,$0b,$11,$01,$c7,$0f,$8f,$8a,$49,$5a,$76,$80,$0e,$12,$01,$c7,$07,$05,$21,$13,$8f,$8a,$43,$7f,$7d,$80,$10,$13,$01,$c7,$15,$1c,$00,$19,$00,$09,$8f,$8a,$48,$67,$48,$80,$0d,$14,$01,$c7,$0d,$13,$09,$0d,$12,$8f,$50,$53,$80,$0b,$15,$01,$c7,$08,$8f,$8a,$4f,$44,$74,$80,$0d,$16,$01,$c7,$10,$14,$1b,$11,$8f,$4b,$42,$68,$80,$0e,$17,$01,$c7,$0a,$15,$1a,$18,$15,$8f,$4d,$6b,$73,$80,$0e,$18,$01,$c7,$08,$14,$13,$08,$0c,$8f,$42,$5d,$4b,$80,$0e,$19,$01,$c7,$11,$03,$21,$00,$1c,$8f,$52,$60,$54,$80,$0f,$1a,$01,$c7,$19,$21,$21,$18,$1c,$15,$8f,$4e,$7f,$70,$80,$15,$1b,$01,$be,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$36,$33,$37,$30,$33,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5D42 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6D42 -  -  -  -  EndTestInstance:
   18 00:6D42 -  -  -  -  		
   19 00:6D42 -  -  -  -  ; ***************************************************************************************
   20 00:6D42 -  -  -  -  ;
   21 00:6D42 -  -  -  -  ;									Changes and Updates
   22 00:6D42 -  -  -  -  ;
   23 00:6D42 -  -  -  -  ; ***************************************************************************************
   24 00:6D42 -  -  -  -  ;
   25 00:6D42 -  -  -  -  ;		Date			Notes
   26 00:6D42 -  -  -  -  ;		==== 			=====
   27 00:6D42 -  -  -  -  ;
   28 00:6D42 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:6D42 -  -  -  -  FinalAddress:
