    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_GOSUB = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_GOSUB
   56 00:0000             	ld a,ERRID_GOSUB
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_INDEX = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_INDEX
   63 00:0000             	ld a,ERRID_INDEX
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_LINENO = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_LINENO
   70 00:0000             	ld a,ERRID_LINENO
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_MEMORY = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_MEMORY
   77 00:0000             	ld a,ERRID_MEMORY
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NEXT = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NEXT
   84 00:0000             	ld a,ERRID_NEXT
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOCOMMA = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   91 00:0000             	ld a,ERRID_NOCOMMA
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NODOLLAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   98 00:0000             	ld a,ERRID_NODOLLAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NOLBRACKET = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  105 00:0000             	ld a,ERRID_NOLBRACKET
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOPROC = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOPROC
  112 00:0000             	ld a,ERRID_NOPROC
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NORBRACKET = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  119 00:0000             	ld a,ERRID_NORBRACKET
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NOTREF = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NOTREF
  126 00:0000             	ld a,ERRID_NOTREF
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_PARAM = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_PARAM
  133 00:0000             	ld a,ERRID_PARAM
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PROC = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PROC
  140 00:0000             	ld a,ERRID_PROC
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_REPEAT = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_REPEAT
  147 00:0000             	ld a,ERRID_REPEAT
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_STACK = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_STACK
  154 00:0000             	ld a,ERRID_STACK
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STOP = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STOP
  161 00:0000             	ld a,ERRID_STOP
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_SYNTAX = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_SYNTAX
  168 00:0000             	ld a,ERRID_SYNTAX
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_TODO = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_TODO
  175 00:0000             	ld a,ERRID_TODO
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  182 00:0000             	ld a,ERRID_UNKNOWNVAR
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 21 40 40 -  		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:4003 31 FF BF -  		ld 		sp,$BFFF
   41 00:4006 -  -  -  -  #endif
   42 00:4006 -  -  -  -  
   43 00:4006 -  -  -  -  #endif
   44 00:4006 CD 94 50 -  		call 	SYSInitialise
   45 00:4009 11 00 54 -  		ld 		de,TestInstance
   46 00:400C 21 74 64 -  		ld 		hl,EndTestInstance
   47 00:400F CD 88 48 -  		call 	SetCurrentInstance
   48 00:4012 -  -  -  -  
   49 00:4012 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:4014 32 60 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:4017 -  -  -  -  		
   52 00:4017 C3 7C 42 -  		jp 		Command_RUN
   53 00:401A -  -  -  -  
   54 00:401A -  -  -  -  WarmStart:		
   55 00:401A 3E 2A -  -  		ld 		a,'*'
   56 00:401C CD 9C 50 -  		call 	SYSPrintChar
   57 00:401F CD 9A 50 -  		call 	SYSTerminate
   58 00:4022 -  -  -  -  
   59 00:4022 -  -  -  -  Unimplemented:
   60 00:4022 3E 05 C3 53 
              43 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:4027 -  -  -  -  Int32DivZeroHandler:
   62 00:4027 3E 06 C3 53 
              43 -  -  -  		ERR_DIVZERO
   63 00:402C -  -  -  -  
   64 00:402C -  -  -  -  ; ***************************************************************************************
   65 00:402C -  -  -  -  ;
   66 00:402C -  -  -  -  ;									Changes and Updates
   67 00:402C -  -  -  -  ;
   68 00:402C -  -  -  -  ; ***************************************************************************************
   69 00:402C -  -  -  -  ;
   70 00:402C -  -  -  -  ;		Date			Notes
   71 00:402C -  -  -  -  ;		==== 			=====
   72 00:402C -  -  -  -  ;
   73 00:402C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:402C -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:402C -  -  -  -  ; ***************************************************************************************
    2 00:402C -  -  -  -  ; ***************************************************************************************
    3 00:402C -  -  -  -  ;
    4 00:402C -  -  -  -  ;		Name : 		01data.asm
    5 00:402C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:402C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:402C -  -  -  -  ;		Reviewed :	No
    8 00:402C -  -  -  -  ;		Purpose :	Data space
    9 00:402C -  -  -  -  ;
   10 00:402C -  -  -  -  ; ***************************************************************************************
   11 00:402C -  -  -  -  ; ***************************************************************************************
   12 00:402C -  -  -  -  
   13 00:402C -  -  -  -  ; ***************************************************************************************
   14 00:402C -  -  -  -  ;
   15 00:402C -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:402C -  -  -  -  ;				LD (xxx),rr etc.
   17 00:402C -  -  -  -  ;
   18 00:402C -  -  -  -  ; ***************************************************************************************
   19 00:402C -  -  -  -  
   20 00:402C -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:402C -  -  -  -  
   22 00:402C -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:402C -  -  -  -  											; must be power of 2. 
   24 00:402C -  -  -  -  
   25 00:402C -  -  -  -  ; ***************************************************************************************
   26 00:402C -  -  -  -  ;
   27 00:402C -  -  -  -  ;								Defines the current instance
   28 00:402C -  -  -  -  ;
   29 00:402C -  -  -  -  ; ***************************************************************************************
   30 00:402C -  -  -  -  
   31 00:402C -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:402C 00 00 00 00 		.dw 	0,0
   33 00:4030 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:4030 00 00 00 00 		.dw 	0,0		
   35 00:4034 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4034 00 00 00 00 		.dw 	0,0 							
   37 00:4038 -  -  -  -  
   38 00:4038 -  -  -  -  ; ***************************************************************************************
   39 00:4038 -  -  -  -  ;
   40 00:4038 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4038 -  -  -  -  ;
   42 00:4038 -  -  -  -  ; ***************************************************************************************
   43 00:4038 -  -  -  -  
   44 00:4038 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4038 00 00 00 00 		.dw 	0,0
   46 00:403C -  -  -  -  
   47 00:403C -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:403C 00 00 00 00 		.dw 	0,0		
   49 00:4040 -  -  -  -  
   50 00:4040 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:4040 00 00 00 00 		.dw 	0,0
   52 00:4044 -  -  -  -  
   53 00:4044 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4044 00 00 00 00 		.dw 	0,0
   55 00:4048 -  -  -  -  
   56 00:4048 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4048 00 00 00 00 		.dw 	0,0		
   58 00:404C -  -  -  -  
   59 00:404C -  -  -  -  ;
   60 00:404C -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:404C -  -  -  -  ;
   62 00:404C -  -  -  -  
   63 00:404C -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:404C 00 00 00 00 		.dw 	0,0
   65 00:4050 -  -  -  -  		
   66 00:4050 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:4050 00 00 00 00 		.dw 	0,0
   68 00:4054 -  -  -  -  
   69 00:4054 -  -  -  -  ; ***************************************************************************************
   70 00:4054 -  -  -  -  ;
   71 00:4054 -  -  -  -  ;										Run variables
   72 00:4054 -  -  -  -  ;
   73 00:4054 -  -  -  -  ; ***************************************************************************************
   74 00:4054 -  -  -  -  
   75 00:4054 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:4054 00 00 00 00 		.dw 	0,0
   77 00:4058 -  -  -  -  
   78 00:4058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:4058 00 00 00 00 		.dw 	0,0
   80 00:405C -  -  -  -  		
   81 00:405C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:405C 00 00 00 00 		.dw 	0,0
   83 00:4060 -  -  -  -  
   84 00:4060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:4060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4066 -  -  -  -  
   87 00:4066 -  -  -  -  AConvert: 									; used for address conversions.
   88 00:4066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:406C -  -  -  -  		
   90 00:406C -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:406C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:407C -  -  -  -  
   93 00:407C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:407C 00 00 -  -  		.dw 	0
   95 00:407E -  -  -  -  
   96 00:407E -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:407E 00 00 -  -  		.dw 	0 
   98 00:4080 -  -  -  -  
   99 00:4080 -  -  -  -  ; ***************************************************************************************
  100 00:4080 -  -  -  -  ;
  101 00:4080 -  -  -  -  ;									Variable Information
  102 00:4080 -  -  -  -  ;
  103 00:4080 -  -  -  -  ; ***************************************************************************************
  104 00:4080 -  -  -  -  
  105 00:4080 -  -  -  -  VarNameStart: 								; first byte of name
  106 00:4080 00 00 00 00 		.dw 	0,0
  107 00:4084 -  -  -  -  VarHash: 									; name hash value
  108 00:4084 00 00 -  -  		.dw 	0		
  109 00:4086 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 00:4086 00 00 00 00 		.dw 	0,0
  111 00:408A -  -  -  -  		
  112 00:408A -  -  -  -  ; ***************************************************************************************
  113 00:408A -  -  -  -  ;
  114 00:408A -  -  -  -  ;										  Buffers
  115 00:408A -  -  -  -  ;
  116 00:408A -  -  -  -  ; ***************************************************************************************
  117 00:408A -  -  -  -  
  118 00:408A -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 00:408A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 00:409A -  -  -  -  
  121 00:409A -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 00:409A 00 00 -  -  		.dw 	0
  123 00:409C -  -  -  -  
  124 00:409C -  -  -  -  ConvertBuffer: 								; general usage
  125 00:409C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 00:40DC -  -  -  -  
  127 00:40DC -  -  -  -  ; ***************************************************************************************
  128 00:40DC -  -  -  -  ;
  129 00:40DC -  -  -  -  ;									Changes and Updates
  130 00:40DC -  -  -  -  ;
  131 00:40DC -  -  -  -  ; ***************************************************************************************
  132 00:40DC -  -  -  -  ;
  133 00:40DC -  -  -  -  ;		Date			Notes
  134 00:40DC -  -  -  -  ;		==== 			=====
  135 00:40DC -  -  -  -  ;
  136 00:40DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:40DC -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40DC -  -  -  -  ; ***************************************************************************************
    2 00:40DC -  -  -  -  ; ***************************************************************************************
    3 00:40DC -  -  -  -  ;
    4 00:40DC -  -  -  -  ;		Name : 		assert.asm
    5 00:40DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40DC -  -  -  -  ;		Reviewed :	No
    8 00:40DC -  -  -  -  ;		Purpose :	Assert command
    9 00:40DC -  -  -  -  ;
   10 00:40DC -  -  -  -  ; ***************************************************************************************
   11 00:40DC -  -  -  -  ; ***************************************************************************************
   12 00:40DC -  -  -  -  
   13 00:40DC -  -  -  -  ; ***************************************************************************************
   14 00:40DC -  -  -  -  ;
   15 00:40DC -  -  -  -  ;									ASSERT command
   16 00:40DC -  -  -  -  ;
   17 00:40DC -  -  -  -  ; ***************************************************************************************
   18 00:40DC -  -  -  -  
   19 00:40DC -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40DC CD 38 45 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40DF 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40E5 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40E6 3E 01 C3 53 
              43 -  -  -  		ERR_ASSERT
   24 00:40EB -  -  -  -  
   25 00:40EB -  -  -  -  ; ***************************************************************************************
   26 00:40EB -  -  -  -  ;
   27 00:40EB -  -  -  -  ;									Changes and Updates
   28 00:40EB -  -  -  -  ;
   29 00:40EB -  -  -  -  ; ***************************************************************************************
   30 00:40EB -  -  -  -  ;
   31 00:40EB -  -  -  -  ;		Date			Notes
   32 00:40EB -  -  -  -  ;		==== 			=====
   33 00:40EB -  -  -  -  ;
   34 00:40EB -  -  -  -  ; ***************************************************************************************
   35 00:40EB -  -  -  -  		
Listing for file "_build.asm"
   15 00:40EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40EB -  -  -  -  ; ***************************************************************************************
    2 00:40EB -  -  -  -  ; ***************************************************************************************
    3 00:40EB -  -  -  -  ;
    4 00:40EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EB -  -  -  -  ;		Reviewed :	No
    8 00:40EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40EB -  -  -  -  ;
   10 00:40EB -  -  -  -  ; ***************************************************************************************
   11 00:40EB -  -  -  -  ; ***************************************************************************************
   12 00:40EB -  -  -  -  
   13 00:40EB -  -  -  -  BadCmd_Def: 		;; [def]
   14 00:40EB -  -  -  -  BadCmd_Then: 		;; [then]
   15 00:40EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   16 00:40EB -  -  -  -  BadCmd_LSBracket: 	;; [[]
   17 00:40EB -  -  -  -  BadCmd_RSBracket: 	;; []]
   18 00:40EB -  -  -  -  BadCmd_Comma: 		;; [,]
   19 00:40EB -  -  -  -  BadCmd_Comma: 		;; [~]
   20 00:40EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   21 00:40EB -  -  -  -  BadCmd_To: 			;; [to]
   22 00:40EB -  -  -  -  BadCmd_Step: 		;; [step]
   23 00:40EB C3 B0 43 -  		jp 		SyntaxError
   24 00:40EE -  -  -  -  
   25 00:40EE -  -  -  -  ; ***************************************************************************************
   26 00:40EE -  -  -  -  ;
   27 00:40EE -  -  -  -  ;									Changes and Updates
   28 00:40EE -  -  -  -  ;
   29 00:40EE -  -  -  -  ; ***************************************************************************************
   30 00:40EE -  -  -  -  ;
   31 00:40EE -  -  -  -  ;		Date			Notes
   32 00:40EE -  -  -  -  ;		==== 			=====
   33 00:40EE -  -  -  -  ;
   34 00:40EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40EE -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40EE -  -  -  -  ; ***************************************************************************************
    2 00:40EE -  -  -  -  ; ***************************************************************************************
    3 00:40EE -  -  -  -  ;
    4 00:40EE -  -  -  -  ;		Name : 		colon.asm
    5 00:40EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EE -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40EE -  -  -  -  ;		Reviewed :	No
    8 00:40EE -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40EE -  -  -  -  ;
   10 00:40EE -  -  -  -  ; ***************************************************************************************
   11 00:40EE -  -  -  -  ; ***************************************************************************************
   12 00:40EE -  -  -  -  
   13 00:40EE -  -  -  -  ; ***************************************************************************************
   14 00:40EE -  -  -  -  ;
   15 00:40EE -  -  -  -  ;								Colon command, this is ignored.
   16 00:40EE -  -  -  -  ;
   17 00:40EE -  -  -  -  ; ***************************************************************************************
   18 00:40EE -  -  -  -  
   19 00:40EE -  -  -  -  Command_Colon: 	;; [:]
   20 00:40EE C9 -  -  -  		ret
   21 00:40EF -  -  -  -  
   22 00:40EF -  -  -  -  ; ***************************************************************************************
   23 00:40EF -  -  -  -  ;
   24 00:40EF -  -  -  -  ;									Changes and Updates
   25 00:40EF -  -  -  -  ;
   26 00:40EF -  -  -  -  ; ***************************************************************************************
   27 00:40EF -  -  -  -  ;
   28 00:40EF -  -  -  -  ;		Date			Notes
   29 00:40EF -  -  -  -  ;		==== 			=====
   30 00:40EF -  -  -  -  ;
   31 00:40EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:40EF -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40EF -  -  -  -  ; ***************************************************************************************
    2 00:40EF -  -  -  -  ; ***************************************************************************************
    3 00:40EF -  -  -  -  ;
    4 00:40EF -  -  -  -  ;		Name : 		dim.asm
    5 00:40EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EF -  -  -  -  ;		Date : 		4th June 2022
    7 00:40EF -  -  -  -  ;		Reviewed :	No
    8 00:40EF -  -  -  -  ;		Purpose :	Dim command
    9 00:40EF -  -  -  -  ;
   10 00:40EF -  -  -  -  ; ***************************************************************************************
   11 00:40EF -  -  -  -  ; ***************************************************************************************
   12 00:40EF -  -  -  -  
   13 00:40EF -  -  -  -  ; ***************************************************************************************
   14 00:40EF -  -  -  -  ;
   15 00:40EF -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40EF -  -  -  -  ;	
   17 00:40EF -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40EF -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40EF -  -  -  -  ;								(can be comma chained)
   20 00:40EF -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40EF -  -  -  -  ;
   22 00:40EF -  -  -  -  ; ***************************************************************************************
   23 00:40EF -  -  -  -  
   24 00:40EF -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40EF -  -  -  -  		;
   26 00:40EF -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40EF -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40EF -  -  -  -  		;
   29 00:40EF DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40F1 D1 -  -  -  		pop 	de
   31 00:40F2 -  -  -  -  		;
   32 00:40F2 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40F5 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40F7 D2 B0 43 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40FA -  -  -  -  _DISkip:
   36 00:40FA DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40FC DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40FF FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:4101 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:4103 -  -  -  -  		;
   41 00:4103 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:4106 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:4108 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4109 CC 60 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:410C F1 -  -  -  		pop 	af
   46 00:410D C4 1F 41 -  		call 	nz,DimensionAllocate
   47 00:4110 -  -  -  -  		;
   48 00:4110 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:4113 FE A6 -  -  		cp 		KWD_COMMA
   50 00:4115 C0 -  -  -  		ret 	nz
   51 00:4116 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:4118 18 D5 -  -  		jr 		Command_DIM
   53 00:411A -  -  -  -  
   54 00:411A -  -  -  -  _CDError:
   55 00:411A 3E 04 C3 53 
              43 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:411F -  -  -  -  
   57 00:411F -  -  -  -  ; ***************************************************************************************
   58 00:411F -  -  -  -  ;
   59 00:411F -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:411F -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:411F -  -  -  -  ;
   62 00:411F -  -  -  -  ; ***************************************************************************************
   63 00:411F -  -  -  -  
   64 00:411F -  -  -  -  DimensionAllocate:
   65 00:411F D5 -  -  -  		push 	de 							; save start on stack
   66 00:4120 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:4122 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:4124 32 7C 40 -  		ld 		(AllowAutoCreate),a
   69 00:4127 CD FE 4A -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:412A CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:412C 28 EC -  -  		jr 		z,_CDError
   72 00:412E CB 41 -  -  		bit 	CIsString,c
   73 00:4130 20 E8 -  -  		jr 		nz,_CDError
   74 00:4132 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:4134 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:4135 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:4137 CD 48 43 -  		call 	CheckNextA 					; check for [
   78 00:413A CD 38 45 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:413D 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:413F CD 48 43 -  		call 	CheckNextA 					; check for ]
   81 00:4142 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:4143 7C -  -  -  		ld 		a,h
   83 00:4144 B5 -  -  -  		or 		l
   84 00:4145 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:4147 D9 -  -  -  		exx
   86 00:4148 23 -  -  -  		inc 	hl
   87 00:4149 D9 -  -  -  		exx
   88 00:414A -  -  -  -  _DANoCarry:
   89 00:414A D9 -  -  -  		exx 								; check if HL' is zero
   90 00:414B 7C -  -  -  		ld 		a,h
   91 00:414C B5 -  -  -  		or 		l
   92 00:414D D9 -  -  -  		exx
   93 00:414E 20 CA -  -  		jr 		nz,_CDError
   94 00:4150 CD 29 48 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:4153 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:4154 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:4155 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:415B AF -  -  -  		xor 	a 							; autocreate off
   99 00:415C 32 7C 40 -  		ld 		(AllowAutoCreate),a
  100 00:415F C9 -  -  -  		ret
  101 00:4160 -  -  -  -  
  102 00:4160 -  -  -  -  ; ***************************************************************************************
  103 00:4160 -  -  -  -  ;
  104 00:4160 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:4160 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:4160 -  -  -  -  ;
  107 00:4160 -  -  -  -  ; ***************************************************************************************
  108 00:4160 -  -  -  -  
  109 00:4160 -  -  -  -  DimensionArray:
  110 00:4160 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:4161 -  -  -  -  		;
  112 00:4161 CD 38 45 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:4164 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:4165 E6 FC -  -  		and 	$FC
  115 00:4167 D9 -  -  -  		exx
  116 00:4168 B4 -  -  -  		or 		h
  117 00:4169 B5 -  -  -  		or 		l
  118 00:416A D9 -  -  -  		exx
  119 00:416B 20 AD -  -  		jr 		nz,_CDError
  120 00:416D -  -  -  -  		;
  121 00:416D DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:416F E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:4170 -  -  -  -  		;
  124 00:4170 CD 7F 4B -  		call 	VariableInformation 		; get information about this array
  125 00:4173 CD B5 4B -  		call 	VariableSearchList 			; look to see if already present.
  126 00:4176 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:4178 -  -  -  -  		;
  128 00:4178 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4179 E5 -  -  -  		push 	hl
  130 00:417A 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:417B 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:417C 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:417D 29 -  -  -  		add 	hl,hl
  134 00:417E CD BF 4A -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:4181 -  -  -  -  		;
  136 00:4181 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:4182 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:4185 09 -  -  -  		add 	hl,bc
  139 00:4186 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:418C DD E1 -  -  		pop 	ix 							; restore end position
  141 00:418E C9 -  -  -  		ret		
  142 00:418F -  -  -  -  
  143 00:418F -  -  -  -  
  144 00:418F -  -  -  -  ; ***************************************************************************************
  145 00:418F -  -  -  -  ;
  146 00:418F -  -  -  -  ;									Changes and Updates
  147 00:418F -  -  -  -  ;
  148 00:418F -  -  -  -  ; ***************************************************************************************
  149 00:418F -  -  -  -  ;
  150 00:418F -  -  -  -  ;		Date			Notes
  151 00:418F -  -  -  -  ;		==== 			=====
  152 00:418F -  -  -  -  ;
  153 00:418F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:418F -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:418F -  -  -  -  ; ***************************************************************************************
    2 00:418F -  -  -  -  ; ***************************************************************************************
    3 00:418F -  -  -  -  ;
    4 00:418F -  -  -  -  ;		Name : 		end.asm
    5 00:418F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:418F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:418F -  -  -  -  ;		Reviewed :	No
    8 00:418F -  -  -  -  ;		Purpose :	End command
    9 00:418F -  -  -  -  ;
   10 00:418F -  -  -  -  ; ***************************************************************************************
   11 00:418F -  -  -  -  ; ***************************************************************************************
   12 00:418F -  -  -  -  
   13 00:418F -  -  -  -  ; ***************************************************************************************
   14 00:418F -  -  -  -  ;
   15 00:418F -  -  -  -  ;										END command
   16 00:418F -  -  -  -  ;
   17 00:418F -  -  -  -  ; ***************************************************************************************
   18 00:418F -  -  -  -  
   19 00:418F -  -  -  -  Command_END: 	;; [end]
   20 00:418F 3E 00 C3 53 
              43 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:4194 -  -  -  -  
   22 00:4194 -  -  -  -  ; ***************************************************************************************
   23 00:4194 -  -  -  -  ;
   24 00:4194 -  -  -  -  ;									Changes and Updates
   25 00:4194 -  -  -  -  ;
   26 00:4194 -  -  -  -  ; ***************************************************************************************
   27 00:4194 -  -  -  -  ;
   28 00:4194 -  -  -  -  ;		Date			Notes
   29 00:4194 -  -  -  -  ;		==== 			=====
   30 00:4194 -  -  -  -  ;
   31 00:4194 -  -  -  -  ; ***************************************************************************************
   32 00:4194 -  -  -  -  		
Listing for file "_build.asm"
   19 00:4194 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:4194 -  -  -  -  ; ***************************************************************************************
    2 00:4194 -  -  -  -  ; ***************************************************************************************
    3 00:4194 -  -  -  -  ;
    4 00:4194 -  -  -  -  ;		Name : 		endofline.asm
    5 00:4194 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4194 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4194 -  -  -  -  ;		Reviewed :	None
    8 00:4194 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:4194 -  -  -  -  ;
   10 00:4194 -  -  -  -  ; ***************************************************************************************
   11 00:4194 -  -  -  -  ; ***************************************************************************************
   12 00:4194 -  -  -  -  
   13 00:4194 -  -  -  -  ; ***************************************************************************************
   14 00:4194 -  -  -  -  ;
   15 00:4194 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:4194 -  -  -  -  ;
   17 00:4194 -  -  -  -  ; ***************************************************************************************
   18 00:4194 -  -  -  -  
   19 00:4194 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:4194 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4198 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:419B DD 5E 00 -  		ld 		e,(ix+0)
   23 00:419E DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:41A0 -  -  -  -  		;
   25 00:41A0 ED 7B 5C 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:41A4 C3 8B 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:41A7 -  -  -  -  
   28 00:41A7 -  -  -  -  ; ***************************************************************************************
   29 00:41A7 -  -  -  -  ;
   30 00:41A7 -  -  -  -  ;									Changes and Updates
   31 00:41A7 -  -  -  -  ;
   32 00:41A7 -  -  -  -  ; ***************************************************************************************
   33 00:41A7 -  -  -  -  ;
   34 00:41A7 -  -  -  -  ;		Date			Notes
   35 00:41A7 -  -  -  -  ;		==== 			=====
   36 00:41A7 -  -  -  -  ;
   37 00:41A7 -  -  -  -  ; ***************************************************************************************
   38 00:41A7 -  -  -  -  		
Listing for file "_build.asm"
   20 00:41A7 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:41A7 -  -  -  -  ; ***************************************************************************************
    2 00:41A7 -  -  -  -  ; ***************************************************************************************
    3 00:41A7 -  -  -  -  ;
    4 00:41A7 -  -  -  -  ;		Name : 		let.asm
    5 00:41A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41A7 -  -  -  -  ;		Date : 		4th June 2022
    7 00:41A7 -  -  -  -  ;		Reviewed :	No
    8 00:41A7 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:41A7 -  -  -  -  ;
   10 00:41A7 -  -  -  -  ; ***************************************************************************************
   11 00:41A7 -  -  -  -  ; ***************************************************************************************
   12 00:41A7 -  -  -  -  
   13 00:41A7 -  -  -  -  ; ***************************************************************************************
   14 00:41A7 -  -  -  -  ;
   15 00:41A7 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:41A7 -  -  -  -  ;
   17 00:41A7 -  -  -  -  ; ***************************************************************************************
   18 00:41A7 -  -  -  -  
   19 00:41A7 -  -  -  -  Command_LET: 	;; [let]
   20 00:41A7 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41AA FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41AC 28 28 -  -  		jr 		z,_CLString
   23 00:41AE FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41B0 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41B2 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41B4 32 7C 40 -  		ld 		(AllowAutoCreate),a
   27 00:41B7 -  -  -  -  _CLNoAuto:
   28 00:41B7 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41B9 CD C9 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41BC CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41BE CA B0 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41C1 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41C2 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41C3 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41C4 32 7C 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41C7 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41C9 CD 48 43 -  		call 	CheckNextA
   38 00:41CC -  -  -  -  
   39 00:41CC CD 32 45 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41CF -  -  -  -  
   41 00:41CF D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41D0 43 -  -  -  		ld 		b,e 						
   43 00:41D1 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41D2 -  -  -  -  		;
   45 00:41D2 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41D2 -  -  -  -  		;
   47 00:41D2 CD EC 41 -  		call 	WriteHLToDE
   48 00:41D5 C9 -  -  -  		ret
   49 00:41D6 -  -  -  -  		;
   50 00:41D6 -  -  -  -  		; 		String assignment code.
   51 00:41D6 -  -  -  -  		;
   52 00:41D6 -  -  -  -  _CLString:
   53 00:41D6 CD 26 45 -  		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:41D9 E5 -  -  -  		push 	hl 							; save target expression
   55 00:41DA 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:41DC CD 48 43 -  		call 	CheckNextA
   57 00:41DF CD 4E 45 -  		call 	EvaluateString 				; get the thing to copy
   58 00:41E2 D1 -  -  -  		pop 	de 							; target in DE.
   59 00:41E3 -  -  -  -  _CLCopy:
   60 00:41E3 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:41E4 12 -  -  -  		ld 		(de),a
   62 00:41E5 23 -  -  -  		inc 	hl
   63 00:41E6 13 -  -  -  		inc 	de
   64 00:41E7 FE 20 -  -  		cp 		$20 						; until control character
   65 00:41E9 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:41EB C9 -  -  -  		ret
   67 00:41EC -  -  -  -  
   68 00:41EC -  -  -  -  ; ***************************************************************************************
   69 00:41EC -  -  -  -  ;
   70 00:41EC -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:41EC -  -  -  -  ;
   72 00:41EC -  -  -  -  ; ***************************************************************************************
   73 00:41EC -  -  -  -  
   74 00:41EC -  -  -  -  WriteHLToDE:
   75 00:41EC CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:41EE C2 A6 43 -  		jp 		nz,TypeMismatch
   77 00:41F1 -  -  -  -  		;
   78 00:41F1 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:41F1 -  -  -  -  		;		
   80 00:41F1 -  -  -  -  _WHDWriteNumber:
   81 00:41F1 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:41F2 D9 -  -  -  		exx
   83 00:41F3 EB -  -  -  		ex 		de,hl
   84 00:41F4 D9 -  -  -  		exx
   85 00:41F5 -  -  -  -  
   86 00:41F5 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:41F6 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:41F7 72 -  -  -  		ld 		(hl),d
   89 00:41F8 23 -  -  -  		inc 	hl
   90 00:41F9 E5 -  -  -  		push 	hl
   91 00:41FA D9 -  -  -  		exx
   92 00:41FB E1 -  -  -  		pop 	hl
   93 00:41FC 73 -  -  -  		ld 		(hl),e
   94 00:41FD 23 -  -  -  		inc 	hl
   95 00:41FE 72 -  -  -  		ld 		(hl),d
   96 00:41FF D9 -  -  -  		exx
   97 00:4200 -  -  -  -  
   98 00:4200 C9 -  -  -  		ret
   99 00:4201 -  -  -  -  
  100 00:4201 -  -  -  -  ; ***************************************************************************************
  101 00:4201 -  -  -  -  ;
  102 00:4201 -  -  -  -  ;									Changes and Updates
  103 00:4201 -  -  -  -  ;
  104 00:4201 -  -  -  -  ; ***************************************************************************************
  105 00:4201 -  -  -  -  ;
  106 00:4201 -  -  -  -  ;		Date			Notes
  107 00:4201 -  -  -  -  ;		==== 			=====
  108 00:4201 -  -  -  -  ;
  109 00:4201 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:4201 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:4201 -  -  -  -  ; ***************************************************************************************
    2 00:4201 -  -  -  -  ; ***************************************************************************************
    3 00:4201 -  -  -  -  ;
    4 00:4201 -  -  -  -  ;		Name : 		print.asm
    5 00:4201 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4201 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4201 -  -  -  -  ;		Reviewed :	No
    8 00:4201 -  -  -  -  ;		Purpose :	Print command
    9 00:4201 -  -  -  -  ;
   10 00:4201 -  -  -  -  ; ***************************************************************************************
   11 00:4201 -  -  -  -  ; ***************************************************************************************
   12 00:4201 -  -  -  -  
   13 00:4201 -  -  -  -  ; ***************************************************************************************
   14 00:4201 -  -  -  -  ;
   15 00:4201 -  -  -  -  ;										PRINT command
   16 00:4201 -  -  -  -  ;
   17 00:4201 -  -  -  -  ; ***************************************************************************************
   18 00:4201 -  -  -  -  
   19 00:4201 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:4201 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:4203 32 7E 40 -  		ld 		(PrintBase),a
   22 00:4206 -  -  -  -  		;
   23 00:4206 -  -  -  -  		;		Main loop
   24 00:4206 -  -  -  -  		;
   25 00:4206 -  -  -  -  _CPRLoop:
   26 00:4206 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:4209 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:420B 28 50 -  -  		jr 		z,_CPRExitNL
   29 00:420D FE A7 -  -  		cp 		KWD_COLON 	
   30 00:420F 28 4C -  -  		jr 		z,_CPRExitNL
   31 00:4211 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:4213 28 36 -  -  		jr 		z,_CPRCheckNext10
   33 00:4215 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:4217 28 2D -  -  		jr 		z,_CPRTab
   35 00:4219 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:421B 28 24 -  -  		jr 		z,_CPRNewLine
   37 00:421D FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:421F 28 17 -  -  		jr 		z,_CPRHexMode
   39 00:4221 -  -  -  -  		;
   40 00:4221 CD 32 45 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:4224 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:4226 20 0B -  -  		jr 		nz,_CPRPrintHL
   43 00:4228 -  -  -  -  		;
   44 00:4228 3A 7E 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:422B -  -  -  -  _CPRPrintNumber:
   46 00:422B 01 9C 40 -  		ld  	bc,ConvertBuffer
   47 00:422E C5 -  -  -  		push 	bc
   48 00:422F CD 4E 50 -  		call 	Int32ToString 				; convert to string
   49 00:4232 E1 -  -  -  		pop 	hl
   50 00:4233 -  -  -  -  		;
   51 00:4233 -  -  -  -  		; 		Print text at HL.
   52 00:4233 -  -  -  -  		;
   53 00:4233 -  -  -  -  _CPRPrintHL:
   54 00:4233 CD B5 4A -  		call 	PrintStringAtHL 			; print string out
   55 00:4236 18 CE -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4238 -  -  -  -  		;
   57 00:4238 -  -  -  -  		;		Hex mode (~)
   58 00:4238 -  -  -  -  		;
   59 00:4238 -  -  -  -  _CPRHexMode:		
   60 00:4238 3E 10 -  -  		ld 		a,16
   61 00:423A 32 7E 40 -  		ld 		(PrintBase),a
   62 00:423D DD 23 -  -  		inc 	ix
   63 00:423F 18 C5 -  -  		jr 		_CPRLoop
   64 00:4241 -  -  -  -  		;
   65 00:4241 -  -  -  -  		; 		New line (')
   66 00:4241 -  -  -  -  		;
   67 00:4241 -  -  -  -  _CPRNewLine:
   68 00:4241 CD B8 50 -  		call 	SYSPrintCRLF
   69 00:4244 18 0A -  -  		jr 		_CPRCheckNext
   70 00:4246 -  -  -  -  		;
   71 00:4246 -  -  -  -  		; 		Tab command (,)
   72 00:4246 -  -  -  -  		;
   73 00:4246 -  -  -  -  _CPRTab:
   74 00:4246 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:4248 CD 9C 50 -  		call 	SYSPrintChar
   76 00:424B -  -  -  -  		;
   77 00:424B -  -  -  -  		;		Set to base 10 then check next character
   78 00:424B -  -  -  -  		;
   79 00:424B -  -  -  -  _CPRCheckNext10:		
   80 00:424B 3E F6 -  -  		ld 		a,-10
   81 00:424D 32 7E 40 -  		ld 		(PrintBase),a
   82 00:4250 -  -  -  -  		;
   83 00:4250 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:4250 -  -  -  -  		;		
   85 00:4250 -  -  -  -  _CPRCheckNext:
   86 00:4250 DD 23 -  -  		inc 	ix 							; consume current
   87 00:4252 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:4255 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:4257 C8 -  -  -  		ret 	z
   90 00:4258 FE A7 -  -  		cp 		KWD_COLON
   91 00:425A C8 -  -  -  		ret 	z
   92 00:425B 18 A9 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:425D -  -  -  -  		;
   94 00:425D -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:425D -  -  -  -  		;
   96 00:425D -  -  -  -  _CPRExitNL:
   97 00:425D CD B8 50 -  		call 	SYSPrintCRLF 				; do CR/LF
   98 00:4260 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:4261 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:4261 -  -  -  -  ; ***************************************************************************************
    2 00:4261 -  -  -  -  ; ***************************************************************************************
    3 00:4261 -  -  -  -  ;
    4 00:4261 -  -  -  -  ;		Name : 		rem.asm
    5 00:4261 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4261 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4261 -  -  -  -  ;		Reviewed :	No
    8 00:4261 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4261 -  -  -  -  ;
   10 00:4261 -  -  -  -  ; ***************************************************************************************
   11 00:4261 -  -  -  -  ; ***************************************************************************************
   12 00:4261 -  -  -  -  
   13 00:4261 -  -  -  -  ; ***************************************************************************************
   14 00:4261 -  -  -  -  ;
   15 00:4261 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:4261 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:4261 -  -  -  -  ;
   18 00:4261 -  -  -  -  ; ***************************************************************************************
   19 00:4261 -  -  -  -  
   20 00:4261 -  -  -  -  Command_REM: 	;; [rem]
   21 00:4261 -  -  -  -  Command_REM2: 	;; [']
   22 00:4261 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:4264 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:4266 C8 -  -  -  		ret 	z
   25 00:4267 DD 23 -  -  		inc 	ix
   26 00:4269 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:426B C8 -  -  -  		ret 	z
   28 00:426C FE 3F -  -  		cp 		STRING_MARKER
   29 00:426E C2 B0 43 -  		jp 		nz,SyntaxError
   30 00:4271 -  -  -  -  		;		
   31 00:4271 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:4274 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4277 13 -  -  -  		inc 	de 
   34 00:4278 13 -  -  -  		inc 	de
   35 00:4279 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:427B C9 -  -  -  		ret
   37 00:427C -  -  -  -  
   38 00:427C -  -  -  -  ; ***************************************************************************************
   39 00:427C -  -  -  -  ;
   40 00:427C -  -  -  -  ;									Changes and Updates
   41 00:427C -  -  -  -  ;
   42 00:427C -  -  -  -  ; ***************************************************************************************
   43 00:427C -  -  -  -  ;
   44 00:427C -  -  -  -  ;		Date			Notes
   45 00:427C -  -  -  -  ;		==== 			=====
   46 00:427C -  -  -  -  ;
   47 00:427C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:427C -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:427C -  -  -  -  ; ***************************************************************************************
    2 00:427C -  -  -  -  ; ***************************************************************************************
    3 00:427C -  -  -  -  ;
    4 00:427C -  -  -  -  ;		Name : 		run.asm
    5 00:427C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:427C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:427C -  -  -  -  ;		Reviewed :	No
    8 00:427C -  -  -  -  ;		Purpose :	Run command
    9 00:427C -  -  -  -  ;
   10 00:427C -  -  -  -  ; ***************************************************************************************
   11 00:427C -  -  -  -  ; ***************************************************************************************
   12 00:427C -  -  -  -  
   13 00:427C -  -  -  -  ; ***************************************************************************************
   14 00:427C -  -  -  -  ;
   15 00:427C -  -  -  -  ;										RUN command
   16 00:427C -  -  -  -  ;
   17 00:427C -  -  -  -  ; ***************************************************************************************
   18 00:427C -  -  -  -  
   19 00:427C -  -  -  -  Command_RUN: 	;; [run]
   20 00:427C CD 46 48 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:427F -  -  -  -  
   22 00:427F DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:4283 ED 73 5C 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4287 AF -  -  -  		xor 	a
   25 00:4288 32 7C 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:428B -  -  -  -  		;
   27 00:428B -  -  -  -  		; 		New line at IX.
   28 00:428B -  -  -  -  		;
   29 00:428B -  -  -  -  CRNewLine:
   30 00:428B DD 22 58 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:428F -  -  -  -  		;
   32 00:428F DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:4292 B7 -  -  -  		or 		a
   34 00:4293 CA 8F 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4296 -  -  -  -  		;
   36 00:4296 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4298 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:429A DD 23 -  -  		inc 	ix
   39 00:429C -  -  -  -  		;
   40 00:429C -  -  -  -  		; 		New command at IX
   41 00:429C -  -  -  -  		;
   42 00:429C -  -  -  -  _CRNewCommand:	
   43 00:429C DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:429F B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:42A0 F2 D4 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:42A3 -  -  -  -  		;
   47 00:42A3 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:42A5 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:42A7 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:42A9 D2 C5 42 -  		jp 		nc,_CRAlternateLets
   51 00:42AC -  -  -  -  		;
   52 00:42AC -  -  -  -  _CRDoCommand:		
   53 00:42AC E6 7F 21 00 
              00 6F 29 11 
              16 4E 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:42BE DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:42C0 CD 60 40 -  		call 	JumpCode 					; call the routine.
   56 00:42C3 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:42C5 -  -  -  -  		;
   58 00:42C5 -  -  -  -  		; 		Do CALL (HL)
   59 00:42C5 -  -  -  -  		;
   60 00:42C5 -  -  -  -  		;
   61 00:42C5 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:42C5 -  -  -  -  		;		
   63 00:42C5 -  -  -  -  _CRAlternateLets:		
   64 00:42C5 FE 83 -  -  		cp 		KWD_PLING
   65 00:42C7 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:42C9 FE 84 -  -  		cp 		KWD_QMARK
   67 00:42CB 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:42CD FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42CF 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42D1 C3 B0 43 -  		jp 		SyntaxError
   71 00:42D4 -  -  -  -  		;
   72 00:42D4 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42D4 -  -  -  -  		;
   74 00:42D4 -  -  -  -  _CRAssignmentHandler:		
   75 00:42D4 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42D6 D2 B0 43 -  		jp 		nc,SyntaxError
   77 00:42D9 -  -  -  -  _CRAssignmentLet:		
   78 00:42D9 CD A7 41 -  		call	Command_LET 				; do LET.
   79 00:42DC C3 9C 42 -  		jp 		_CRNewCommand
   80 00:42DF -  -  -  -  
   81 00:42DF -  -  -  -  ; ***************************************************************************************
   82 00:42DF -  -  -  -  ;
   83 00:42DF -  -  -  -  ;									Changes and Updates
   84 00:42DF -  -  -  -  ;
   85 00:42DF -  -  -  -  ; ***************************************************************************************
   86 00:42DF -  -  -  -  ;
   87 00:42DF -  -  -  -  ;		Date			Notes
   88 00:42DF -  -  -  -  ;		==== 			=====
   89 00:42DF -  -  -  -  ;
   90 00:42DF -  -  -  -  ; ***************************************************************************************
   91 00:42DF -  -  -  -  		
Listing for file "_build.asm"
   24 00:42DF -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42DF -  -  -  -  ; ***************************************************************************************
    2 00:42DF -  -  -  -  ; ***************************************************************************************
    3 00:42DF -  -  -  -  ;
    4 00:42DF -  -  -  -  ;		Name : 		stop.asm
    5 00:42DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42DF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42DF -  -  -  -  ;		Reviewed :	No
    8 00:42DF -  -  -  -  ;		Purpose :	Stop command
    9 00:42DF -  -  -  -  ;
   10 00:42DF -  -  -  -  ; ***************************************************************************************
   11 00:42DF -  -  -  -  ; ***************************************************************************************
   12 00:42DF -  -  -  -  
   13 00:42DF -  -  -  -  ; ***************************************************************************************
   14 00:42DF -  -  -  -  ;
   15 00:42DF -  -  -  -  ;										STOP command
   16 00:42DF -  -  -  -  ;
   17 00:42DF -  -  -  -  ; ***************************************************************************************
   18 00:42DF -  -  -  -  
   19 00:42DF -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42DF 3E 16 C3 53 
              43 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42E4 -  -  -  -  
   22 00:42E4 -  -  -  -  ; ***************************************************************************************
   23 00:42E4 -  -  -  -  ;
   24 00:42E4 -  -  -  -  ;									Changes and Updates
   25 00:42E4 -  -  -  -  ;
   26 00:42E4 -  -  -  -  ; ***************************************************************************************
   27 00:42E4 -  -  -  -  ;
   28 00:42E4 -  -  -  -  ;		Date			Notes
   29 00:42E4 -  -  -  -  ;		==== 			=====
   30 00:42E4 -  -  -  -  ;
   31 00:42E4 -  -  -  -  ; ***************************************************************************************
   32 00:42E4 -  -  -  -  		
Listing for file "_build.asm"
   25 00:42E4 -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 00:42E4 -  -  -  -  ; ***************************************************************************************
    2 00:42E4 -  -  -  -  ; ***************************************************************************************
    3 00:42E4 -  -  -  -  ;
    4 00:42E4 -  -  -  -  ;		Name : 		vdu.asm
    5 00:42E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42E4 -  -  -  -  ;		Date : 		8th June 2022
    7 00:42E4 -  -  -  -  ;		Reviewed :	No
    8 00:42E4 -  -  -  -  ;		Purpose :	Vdu command
    9 00:42E4 -  -  -  -  ;
   10 00:42E4 -  -  -  -  ; ***************************************************************************************
   11 00:42E4 -  -  -  -  ; ***************************************************************************************
   12 00:42E4 -  -  -  -  
   13 00:42E4 -  -  -  -  ; ***************************************************************************************
   14 00:42E4 -  -  -  -  ;
   15 00:42E4 -  -  -  -  ;										END command
   16 00:42E4 -  -  -  -  ;
   17 00:42E4 -  -  -  -  ; ***************************************************************************************
   18 00:42E4 -  -  -  -  
   19 00:42E4 -  -  -  -  Command_VDU: 	;; [vdu]
   20 00:42E4 DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 00:42E7 FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 00:42E9 C8 -  -  -  		ret 	z
   23 00:42EA FE A7 -  -  		cp 		KWD_COLON
   24 00:42EC C8 -  -  -  		ret 	z
   25 00:42ED -  -  -  -  		;
   26 00:42ED CD 38 45 -  		call 	EvaluateInteger 			; evaluate integer value
   27 00:42F0 D9 -  -  -  		exx 								; check 0-FFFF
   28 00:42F1 7C -  -  -  		ld 		a,h
   29 00:42F2 B5 -  -  -  		or 		l
   30 00:42F3 D9 -  -  -  		exx
   31 00:42F4 C2 AB 43 -  		jp  	nz,BadValue
   32 00:42F7 E5 -  -  -  		push 	hl 							; save on stack
   33 00:42F8 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 00:42F9 CD 9C 50 -  		call 	SYSPrintChar
   35 00:42FC E1 -  -  -  		pop 	hl 							; get upper back
   36 00:42FD DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 00:4300 DD 23 -  -  		inc 	ix 
   38 00:4302 FE A6 -  -  		cp 		KWD_COMMA 					
   39 00:4304 28 DE -  -  		jr 		z,Command_VDU
   40 00:4306 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 00:4308 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 00:430A DD 2B -  -  		dec 	ix 							; go back and try again
   43 00:430C 18 D6 -  -  		jr 		Command_VDU
   44 00:430E -  -  -  -  
   45 00:430E -  -  -  -  _VDUUpper:
   46 00:430E 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 00:430F CD 9C 50 -  		call 	SYSPrintChar
   48 00:4312 18 D0 -  -  		jr 		Command_VDU		
   49 00:4314 -  -  -  -  
   50 00:4314 -  -  -  -  ; ***************************************************************************************
   51 00:4314 -  -  -  -  ;
   52 00:4314 -  -  -  -  ;									Changes and Updates
   53 00:4314 -  -  -  -  ;
   54 00:4314 -  -  -  -  ; ***************************************************************************************
   55 00:4314 -  -  -  -  ;
   56 00:4314 -  -  -  -  ;		Date			Notes
   57 00:4314 -  -  -  -  ;		==== 			=====
   58 00:4314 -  -  -  -  ;
   59 00:4314 -  -  -  -  ; ***************************************************************************************
   60 00:4314 -  -  -  -  		
Listing for file "_build.asm"
   26 00:4314 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4314 -  -  -  -  ; ***************************************************************************************
    2 00:4314 -  -  -  -  ; ***************************************************************************************
    3 00:4314 -  -  -  -  ;
    4 00:4314 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4314 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4314 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4314 -  -  -  -  ;		Reviewed :	No
    8 00:4314 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4314 -  -  -  -  ;
   10 00:4314 -  -  -  -  ; ***************************************************************************************
   11 00:4314 -  -  -  -  ; ***************************************************************************************
   12 00:4314 -  -  -  -  
   13 00:4314 -  -  -  -  ; ***************************************************************************************
   14 00:4314 -  -  -  -  ;
   15 00:4314 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4314 -  -  -  -  ;
   17 00:4314 -  -  -  -  ; ***************************************************************************************
   18 00:4314 -  -  -  -  
   19 00:4314 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4314             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4314             		inc 	ix
   22 00:4314             		cp 		ch 							; exit if matches
   23 00:4314             		ret 	z
   24 00:4314             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4314             		jp 		ErrorHandler
   26 00:4314             #endmacro
   27 00:4314 -  -  -  -  
   28 00:4314 -  -  -  -  CheckLeftBracket:
   29 00:4314 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0E C3 53 
              43 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4321 -  -  -  -  
   31 00:4321 -  -  -  -  CheckRightBracket:
   32 00:4321 DD 7E 00 DD 
              23 FE A5 C8 
              3E 10 C3 53 
              43 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:432E -  -  -  -  
   34 00:432E -  -  -  -  CheckDollar:
   35 00:432E DD 7E 00 DD 
              23 FE 96 C8 
              3E 0D C3 53 
              43 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:433B -  -  -  -  		
   37 00:433B -  -  -  -  CheckComma:
   38 00:433B DD 7E 00 DD 
              23 FE A6 C8 
              3E 0C C3 53 
              43 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4348 -  -  -  -  
   40 00:4348 -  -  -  -  ; ***************************************************************************************
   41 00:4348 -  -  -  -  ;
   42 00:4348 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4348 -  -  -  -  ;
   44 00:4348 -  -  -  -  ; ***************************************************************************************
   45 00:4348 -  -  -  -  
   46 00:4348 -  -  -  -  CheckNextA:
   47 00:4348 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:434B DD 23 -  -  		inc 	ix 							; skip character
   49 00:434D C8 -  -  -  		ret 	z 							; yes, okay
   50 00:434E 3E 17 C3 53 
              43 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:4353 -  -  -  -  		
   52 00:4353 -  -  -  -  ; ***************************************************************************************
   53 00:4353 -  -  -  -  ;
   54 00:4353 -  -  -  -  ;									Changes and Updates
   55 00:4353 -  -  -  -  ;
   56 00:4353 -  -  -  -  ; ***************************************************************************************
   57 00:4353 -  -  -  -  ;
   58 00:4353 -  -  -  -  ;		Date			Notes
   59 00:4353 -  -  -  -  ;		==== 			=====
   60 00:4353 -  -  -  -  ;
   61 00:4353 -  -  -  -  ; ***************************************************************************************
   62 00:4353 -  -  -  -  		
Listing for file "_build.asm"
   27 00:4353 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4353 -  -  -  -  ; ***************************************************************************************
    2 00:4353 -  -  -  -  ; ***************************************************************************************
    3 00:4353 -  -  -  -  ;
    4 00:4353 -  -  -  -  ;		Name : 		errors.asm
    5 00:4353 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4353 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4353 -  -  -  -  ;		Reviewed :	No
    8 00:4353 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4353 -  -  -  -  ;
   10 00:4353 -  -  -  -  ; ***************************************************************************************
   11 00:4353 -  -  -  -  ; ***************************************************************************************
   12 00:4353 -  -  -  -  
   13 00:4353 -  -  -  -  ; ***************************************************************************************
   14 00:4353 -  -  -  -  ;
   15 00:4353 -  -  -  -  ;								Error handler, message A 
   16 00:4353 -  -  -  -  ;
   17 00:4353 -  -  -  -  ; ***************************************************************************************
   18 00:4353 -  -  -  -  
   19 00:4353 -  -  -  -  ErrorHandler:
   20 00:4353 F5 -  -  -  		push 	af 						; save error ID
   21 00:4354 -  -  -  -  
   22 00:4354 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4357 6F -  -  -  		ld 		l,a
   24 00:4358 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4359 29 -  -  -  		add 	hl,hl 		
   26 00:435A 11 11 4C -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:435D 19 -  -  -  		add 	hl,de
   28 00:435E 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4362 CD B5 4A -  		call 	PrintStringAtHL
   30 00:4365 -  -  -  -  		;
   31 00:4365 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4366 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4367 28 28 -  -  		jr 		z,_EHExit
   34 00:4369 -  -  -  -  		;
   35 00:4369 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:436D DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4370 B7 -  -  -  		or 		a
   38 00:4371 28 1E -  -  		jr 		z,_EHExit
   39 00:4373 -  -  -  -  
   40 00:4373 21 97 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4376 CD B5 4A -  		call 	PrintStringAtHL 
   42 00:4379 -  -  -  -  		
   43 00:4379 D9 -  -  -  		exx								; HL'HL = line number
   44 00:437A 21 00 00 -  		ld 		hl,$0000 		
   45 00:437D D9 -  -  -  		exx 
   46 00:437E DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4381 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4384 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4386 01 9C 40 -  		ld 		bc,ConvertBuffer
   50 00:4389 CD 4E 50 -  		call 	Int32ToString
   51 00:438C C5 -  -  -  		push 	bc
   52 00:438D E1 -  -  -  		pop 	hl
   53 00:438E CD B5 4A -  		call 	PrintStringAtHL			; print error line number.
   54 00:4391 -  -  -  -  _EHExit:		
   55 00:4391 CD B8 50 -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:4394 C3 1A 40 -  		jp 		WarmStart
   57 00:4397 -  -  -  -  
   58 00:4397 -  -  -  -  _EHAtText:
   59 00:4397 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:43A1 -  -  -  -  
   61 00:43A1 -  -  -  -  NotImplemented:
   62 00:43A1 3E 05 C3 53 
              43 -  -  -  		ERR_DISABLED
   63 00:43A6 -  -  -  -  TypeMismatch:
   64 00:43A6 3E 02 C3 53 
              43 -  -  -  		ERR_BADTYPE
   65 00:43AB -  -  -  -  BadValue:
   66 00:43AB 3E 03 C3 53 
              43 -  -  -  		ERR_BADVALUE
   67 00:43B0 -  -  -  -  SyntaxError:
   68 00:43B0 3E 17 C3 53 
              43 -  -  -  		ERR_SYNTAX
   69 00:43B5 -  -  -  -  						
   70 00:43B5 -  -  -  -  ; ***************************************************************************************
   71 00:43B5 -  -  -  -  ;
   72 00:43B5 -  -  -  -  ;									Changes and Updates
   73 00:43B5 -  -  -  -  ;
   74 00:43B5 -  -  -  -  ; ***************************************************************************************
   75 00:43B5 -  -  -  -  ;
   76 00:43B5 -  -  -  -  ;		Date			Notes
   77 00:43B5 -  -  -  -  ;		==== 			=====
   78 00:43B5 -  -  -  -  ;
   79 00:43B5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43B5 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:43B5 -  -  -  -  ; ***************************************************************************************
    2 00:43B5 -  -  -  -  ; ***************************************************************************************
    3 00:43B5 -  -  -  -  ;
    4 00:43B5 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:43B5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43B5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43B5 -  -  -  -  ;		Reviewed :	No
    8 00:43B5 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:43B5 -  -  -  -  ;
   10 00:43B5 -  -  -  -  ; ***************************************************************************************
   11 00:43B5 -  -  -  -  ; ***************************************************************************************
   12 00:43B5 -  -  -  -  
   13 00:43B5 -  -  -  -  ; ***************************************************************************************
   14 00:43B5 -  -  -  -  ;
   15 00:43B5 -  -  -  -  ; 									Addition
   16 00:43B5 -  -  -  -  ;
   17 00:43B5 -  -  -  -  ; ***************************************************************************************
   18 00:43B5 -  -  -  -  
   19 00:43B5 -  -  -  -  ALUAdd: 		;; [+]
   20 00:43B5 CD A8 44 78 
              B1 C2 A6 43 
              C3 DB 4F -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:43C0 -  -  -  -  
   22 00:43C0 -  -  -  -  ; ***************************************************************************************
   23 00:43C0 -  -  -  -  ;
   24 00:43C0 -  -  -  -  ; 									Subtraction
   25 00:43C0 -  -  -  -  ;
   26 00:43C0 -  -  -  -  ; ***************************************************************************************
   27 00:43C0 -  -  -  -  
   28 00:43C0 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:43C0 CD A8 44 78 
              B1 C2 A6 43 
              C3 E1 4F -  		IntegerDispatch(Int32Subtract)
   30 00:43CB -  -  -  -  
   31 00:43CB -  -  -  -  ; ***************************************************************************************
   32 00:43CB -  -  -  -  ;
   33 00:43CB -  -  -  -  ; 									  Multiply
   34 00:43CB -  -  -  -  ;
   35 00:43CB -  -  -  -  ; ***************************************************************************************
   36 00:43CB -  -  -  -  
   37 00:43CB -  -  -  -  ALUMultiply: 	;; [*]
   38 00:43CB CD A8 44 78 
              B1 C2 A6 43 
              C3 A5 4F -  		IntegerDispatch(Int32Multiply)
   39 00:43D6 -  -  -  -  
   40 00:43D6 -  -  -  -  ; ***************************************************************************************
   41 00:43D6 -  -  -  -  ;
   42 00:43D6 -  -  -  -  ; 									  Divide
   43 00:43D6 -  -  -  -  ;
   44 00:43D6 -  -  -  -  ; ***************************************************************************************
   45 00:43D6 -  -  -  -  
   46 00:43D6 -  -  -  -  ALUDivide: 	;; [/]
   47 00:43D6 -  -  -  -  ALUDivide2:	;; [div]
   48 00:43D6 CD A8 44 78 
              B1 C2 A6 43 
              C3 B6 4E -  		IntegerDispatch(Int32SDivide)
   49 00:43E1 -  -  -  -  
   50 00:43E1 -  -  -  -  ; ***************************************************************************************
   51 00:43E1 -  -  -  -  ;
   52 00:43E1 -  -  -  -  ; 									  Modulus
   53 00:43E1 -  -  -  -  ;
   54 00:43E1 -  -  -  -  ; ***************************************************************************************
   55 00:43E1 -  -  -  -  
   56 00:43E1 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:43E1 CD A8 44 78 
              B1 C2 A6 43 
              C3 B9 4E -  		IntegerDispatch(Int32Modulus)
   58 00:43EC -  -  -  -  
   59 00:43EC -  -  -  -  ; ***************************************************************************************
   60 00:43EC -  -  -  -  ;
   61 00:43EC -  -  -  -  ; 									  Logical
   62 00:43EC -  -  -  -  ;
   63 00:43EC -  -  -  -  ; ***************************************************************************************
   64 00:43EC -  -  -  -  
   65 00:43EC -  -  -  -  ALUAnd: 		;; [and]
   66 00:43EC CD A8 44 78 
              B1 C2 A6 43 
              C3 E9 4F -  		IntegerDispatch(Int32And)
   67 00:43F7 -  -  -  -  
   68 00:43F7 -  -  -  -  ALUOr: 			;; [or]
   69 00:43F7 CD A8 44 78 
              B1 C2 A6 43 
              C3 F5 4F -  		IntegerDispatch(Int32Or)
   70 00:4402 -  -  -  -  
   71 00:4402 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4402 CD A8 44 78 
              B1 C2 A6 43 
              C3 01 50 -  		IntegerDispatch(Int32Xor)
   73 00:440D -  -  -  -  
   74 00:440D -  -  -  -  ; ***************************************************************************************
   75 00:440D -  -  -  -  ;
   76 00:440D -  -  -  -  ;									Changes and Updates
   77 00:440D -  -  -  -  ;
   78 00:440D -  -  -  -  ; ***************************************************************************************
   79 00:440D -  -  -  -  ;
   80 00:440D -  -  -  -  ;		Date			Notes
   81 00:440D -  -  -  -  ;		==== 			=====
   82 00:440D -  -  -  -  ;
   83 00:440D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:440D -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:440D -  -  -  -  ; ***************************************************************************************
    2 00:440D -  -  -  -  ; ***************************************************************************************
    3 00:440D -  -  -  -  ;
    4 00:440D -  -  -  -  ;		Name : 		binrefs.asm
    5 00:440D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:440D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:440D -  -  -  -  ;		Reviewed :	No
    8 00:440D -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:440D -  -  -  -  ;
   10 00:440D -  -  -  -  ; ***************************************************************************************
   11 00:440D -  -  -  -  ; ***************************************************************************************
   12 00:440D -  -  -  -  
   13 00:440D -  -  -  -  ; ***************************************************************************************
   14 00:440D -  -  -  -  ;
   15 00:440D -  -  -  -  ; 									<l> <op> <r>
   16 00:440D -  -  -  -  ;
   17 00:440D -  -  -  -  ; ***************************************************************************************
   18 00:440D -  -  -  -  
   19 00:440D -  -  -  -  ALULongReference:			;; [!]
   20 00:440D CD 1B 44 -  		call 	BRGetAddress 				; calculate address
   21 00:4410 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4412 CB F9 -  -  		set 	CIsReference,c
   23 00:4414 C9 -  -  -  		ret
   24 00:4415 -  -  -  -  
   25 00:4415 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4415 CD 0D 44 -  		call 	ALULongReference
   27 00:4418 CB F1 -  -  		set 	CIsByteReference,c
   28 00:441A C9 -  -  -  		ret
   29 00:441B -  -  -  -  
   30 00:441B -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:441B CD A8 44 78 
              B1 C2 A6 43 
              C3 26 44 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:4426 -  -  -  -  _BRGAMain:		
   33 00:4426 CD DB 4F -  		call 	Int32Add 					; address in HL'HL
   34 00:4429 CD 91 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:442C C9 -  -  -  		ret
   36 00:442D -  -  -  -  
   37 00:442D -  -  -  -  ; ***************************************************************************************
   38 00:442D -  -  -  -  ;
   39 00:442D -  -  -  -  ;									Changes and Updates
   40 00:442D -  -  -  -  ;
   41 00:442D -  -  -  -  ; ***************************************************************************************
   42 00:442D -  -  -  -  ;
   43 00:442D -  -  -  -  ;		Date			Notes
   44 00:442D -  -  -  -  ;		==== 			=====
   45 00:442D -  -  -  -  ;
   46 00:442D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:442D -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:442D -  -  -  -  ; ***************************************************************************************
    2 00:442D -  -  -  -  ; ***************************************************************************************
    3 00:442D -  -  -  -  ;
    4 00:442D -  -  -  -  ;		Name : 		compare.asm
    5 00:442D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:442D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:442D -  -  -  -  ;		Reviewed :	No
    8 00:442D -  -  -  -  ;		Purpose :	Comparison code
    9 00:442D -  -  -  -  ;
   10 00:442D -  -  -  -  ; ***************************************************************************************
   11 00:442D -  -  -  -  ; ***************************************************************************************
   12 00:442D -  -  -  -  
   13 00:442D -  -  -  -  #macro compare_equals(n)
   14 00:442D             		call 	CompareBaseCode
   15 00:442D             		cp 		n
   16 00:442D             		jr 		z,UnaryInt32True
   17 00:442D             		jr 		UnaryInt32False
   18 00:442D             #endmacro
   19 00:442D -  -  -  -  
   20 00:442D -  -  -  -  #macro compare_not_equals(n)
   21 00:442D             		call 	CompareBaseCode
   22 00:442D             		cp 		n
   23 00:442D             		jr 		nz,UnaryInt32True
   24 00:442D             		jr 		UnaryInt32False
   25 00:442D             #endmacro
   26 00:442D -  -  -  -  
   27 00:442D -  -  -  -  ; ***************************************************************************************
   28 00:442D -  -  -  -  ;
   29 00:442D -  -  -  -  ; 								Return True/False
   30 00:442D -  -  -  -  ;
   31 00:442D -  -  -  -  ; ***************************************************************************************
   32 00:442D -  -  -  -  
   33 00:442D -  -  -  -  UnaryInt32True:	;; [true]
   34 00:442D 3E FF -  -  		ld 		a,255
   35 00:442F 18 01 -  -  		jr 		_Int32Logical
   36 00:4431 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:4431 AF -  -  -  		xor 	a
   38 00:4432 -  -  -  -  _Int32Logical:
   39 00:4432 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4433 67 -  -  -  		ld 		h,a
   41 00:4434 D9 -  -  -  		exx
   42 00:4435 6F -  -  -  		ld 		l,a
   43 00:4436 67 -  -  -  		ld 		h,a
   44 00:4437 D9 -  -  -  		exx
   45 00:4438 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:443A C9 -  -  -  		ret
   47 00:443B -  -  -  -  
   48 00:443B -  -  -  -  ; ***************************************************************************************
   49 00:443B -  -  -  -  ;
   50 00:443B -  -  -  -  ; 										> = < (compare == value)
   51 00:443B -  -  -  -  ;
   52 00:443B -  -  -  -  ; ***************************************************************************************
   53 00:443B -  -  -  -  
   54 00:443B -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:443B CD 71 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4444 -  -  -  -  
   57 00:4444 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4444 CD 71 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:444D -  -  -  -  
   60 00:444D -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:444D CD 71 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4456 -  -  -  -  
   63 00:4456 -  -  -  -  ; ***************************************************************************************
   64 00:4456 -  -  -  -  ;
   65 00:4456 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4456 -  -  -  -  ;
   67 00:4456 -  -  -  -  ; ***************************************************************************************
   68 00:4456 -  -  -  -  
   69 00:4456 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4456 CD 71 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:445F -  -  -  -  
   72 00:445F -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:445F CD 71 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4468 -  -  -  -  
   75 00:4468 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4468 CD 71 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:4471 -  -  -  -  
   78 00:4471 -  -  -  -  ; ***************************************************************************************
   79 00:4471 -  -  -  -  ;
   80 00:4471 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:4471 -  -  -  -  ;
   82 00:4471 -  -  -  -  ; ***************************************************************************************
   83 00:4471 -  -  -  -  
   84 00:4471 -  -  -  -  CompareBaseCode:
   85 00:4471 CD A8 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:4474 -  -  -  -  
   87 00:4474 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4475 A1 -  -  -  		and 	c
   89 00:4476 CB 47 -  -  		bit 	CIsString,a 
   90 00:4478 C2 87 44 -  		jp 		nz,StringCompare
   91 00:447B -  -  -  -  
   92 00:447B 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:447C B1 -  -  -  		or 		c
   94 00:447D CB 47 -  -  		bit 	CIsString,a 
   95 00:447F CA 14 50 -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:4482 -  -  -  -  
   97 00:4482 3E 02 C3 53 
              43 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4487 -  -  -  -  ;
   99 00:4487 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4487 -  -  -  -  ;
  101 00:4487 -  -  -  -  StringCompare:
  102 00:4487 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4488 BE -  -  -  		cp 		(hl)
  104 00:4489 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:448B 20 08 -  -  		jr 		nz,_SCLess
  106 00:448D 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:448E 23 -  -  -  		inc 	hl
  108 00:448F FE 20 -  -  		cp 		' '
  109 00:4491 30 F4 -  -  		jr 		nc,StringCompare
  110 00:4493 AF -  -  -  		xor 	a 							; return 0.
  111 00:4494 C9 -  -  -  		ret
  112 00:4495 -  -  -  -  
  113 00:4495 -  -  -  -  _SCLess:
  114 00:4495 3E FF -  -  		ld 		a,$FF
  115 00:4497 C9 -  -  -  		ret
  116 00:4498 -  -  -  -  _SCGreater:
  117 00:4498 3E 01 -  -  		ld 		a,1
  118 00:449A C9 -  -  -  		ret
  119 00:449B -  -  -  -  
  120 00:449B 3E 18 C3 53 
              43 -  -  -  		ERR_TODO()
  121 00:44A0 -  -  -  -  
  122 00:44A0 -  -  -  -  ; ***************************************************************************************
  123 00:44A0 -  -  -  -  ;
  124 00:44A0 -  -  -  -  ;									Changes and Updates
  125 00:44A0 -  -  -  -  ;
  126 00:44A0 -  -  -  -  ; ***************************************************************************************
  127 00:44A0 -  -  -  -  ;
  128 00:44A0 -  -  -  -  ;		Date			Notes
  129 00:44A0 -  -  -  -  ;		==== 			=====
  130 00:44A0 -  -  -  -  ;
  131 00:44A0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:44A0 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:44A0 -  -  -  -  ; ***************************************************************************************
    2 00:44A0 -  -  -  -  ; ***************************************************************************************
    3 00:44A0 -  -  -  -  ;
    4 00:44A0 -  -  -  -  ;		Name : 		utility.asm
    5 00:44A0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44A0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44A0 -  -  -  -  ;		Reviewed :	No
    8 00:44A0 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:44A0 -  -  -  -  ;
   10 00:44A0 -  -  -  -  ; ***************************************************************************************
   11 00:44A0 -  -  -  -  ; ***************************************************************************************
   12 00:44A0 -  -  -  -  
   13 00:44A0 -  -  -  -  ; ***************************************************************************************
   14 00:44A0 -  -  -  -  ;
   15 00:44A0 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:44A0 -  -  -  -  ;
   17 00:44A0 -  -  -  -  ; ***************************************************************************************
   18 00:44A0 -  -  -  -  
   19 00:44A0 -  -  -  -  SwapHLDE:
   20 00:44A0 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:44A1 D9 -  -  -  			exx
   22 00:44A2 EB -  -  -  			ex 		de,hl
   23 00:44A3 D9 -  -  -  			exx
   24 00:44A4 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:44A5 41 -  -  -  			ld 		b,c
   26 00:44A6 4F -  -  -  			ld 		c,a
   27 00:44A7 C9 -  -  -  			ret
   28 00:44A8 -  -  -  -  
   29 00:44A8 -  -  -  -  ; ***************************************************************************************
   30 00:44A8 -  -  -  -  ;
   31 00:44A8 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:44A8 -  -  -  -  ;
   33 00:44A8 -  -  -  -  ; ***************************************************************************************
   34 00:44A8 -  -  -  -  
   35 00:44A8 -  -  -  -  DereferenceBoth:
   36 00:44A8 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:44AA C4 63 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:44AD CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:44AF C8 -  -  -  			ret 	z
   40 00:44B0 CD A0 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:44B3 CD 63 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:44B6 CD A0 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:44B9 C9 -  -  -  			ret
   44 00:44BA -  -  -  -  
   45 00:44BA -  -  -  -  ; ***************************************************************************************
   46 00:44BA -  -  -  -  ;
   47 00:44BA -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:44BA -  -  -  -  ;
   49 00:44BA -  -  -  -  ; ***************************************************************************************
   50 00:44BA -  -  -  -  
   51 00:44BA -  -  -  -  NegateHLHL:	
   52 00:44BA CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:44BC C2 A6 43 -  			jp 		nz,TypeMismatch
   54 00:44BF CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:44C1 C4 63 45 -  			call 	nz,Dereference 			; if required.
   56 00:44C4 CD 3B 50 -  			call 	Int32Negate
   57 00:44C7 C9 -  -  -  			ret
Listing for file "_build.asm"
   32 00:44C8 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:44C8 -  -  -  -  ; ***************************************************************************************
    2 00:44C8 -  -  -  -  ; ***************************************************************************************
    3 00:44C8 -  -  -  -  ;
    4 00:44C8 -  -  -  -  ;		Name : 		expression.asm
    5 00:44C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44C8 -  -  -  -  ;		Reviewed :	None
    8 00:44C8 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:44C8 -  -  -  -  ;
   10 00:44C8 -  -  -  -  ; ***************************************************************************************
   11 00:44C8 -  -  -  -  ; ***************************************************************************************
   12 00:44C8 -  -  -  -  
   13 00:44C8 -  -  -  -  ; ***************************************************************************************
   14 00:44C8 -  -  -  -  ;
   15 00:44C8 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:44C8 -  -  -  -  ;
   17 00:44C8 -  -  -  -  ; ***************************************************************************************
   18 00:44C8 -  -  -  -  
   19 00:44C8 -  -  -  -  EvaluateAtPrecedence0:
   20 00:44C8 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:44C9 -  -  -  -  EvaluateAtPrecedence:
   22 00:44C9 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:44CA -  -  -  -  		;
   24 00:44CA -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:44CA -  -  -  -  		;
   26 00:44CA CD 93 45 -  		call 	EvaluateTerm 				; get term
   27 00:44CD -  -  -  -  		;
   28 00:44CD -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:44CD -  -  -  -  		;
   30 00:44CD D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:44CE -  -  -  -  _EAPLoop:
   32 00:44CE DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:44D1 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:44D3 D8 -  -  -  		ret 	c
   35 00:44D4 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:44D6 D0 -  -  -  		ret 	nc
   37 00:44D7 -  -  -  -  		;
   38 00:44D7 -  -  -  -  		; 		Get the precedence.
   39 00:44D7 -  -  -  -  		;
   40 00:44D7 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:44D8 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:44DA 21 00 4C -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:44DD B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:44DE 6F -  -  -  		ld 		l,a
   45 00:44DF 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:44E0 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:44E1 -  -  -  -  		;
   48 00:44E1 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:44E1 -  -  -  -  		;
   50 00:44E1 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:44E2 BB -  -  -  		cp 		e
   52 00:44E3 D0 -  -  -  		ret 	nc
   53 00:44E4 -  -  -  -  
   54 00:44E4 -  -  -  -  		;
   55 00:44E4 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:44E4 -  -  -  -  		;
   57 00:44E4 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:44E5 -  -  -  -  		;
   59 00:44E5 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:44E8 F5 -  -  -  		push 	af
   61 00:44E9 -  -  -  -  		;
   62 00:44E9 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:44EA D9 -  -  -  		exx 								; save HL'
   64 00:44EB E5 -  -  -  		push 	hl
   65 00:44EC D9 -  -  -  		exx 								
   66 00:44ED E5 -  -  -  		push 	hl 							; save HL
   67 00:44EE -  -  -  -  		;
   68 00:44EE DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:44F0 -  -  -  -  		;
   70 00:44F0 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:44F0 -  -  -  -  		;
   72 00:44F0 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:44F1 CD C9 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:44F4 -  -  -  -  		;
   75 00:44F4 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:44F4 -  -  -  -  		;
   77 00:44F4 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:44F5 -  -  -  -  
   79 00:44F5 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:44F6 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:44F7 D9 -  -  -  		exx
   82 00:44F8 EB -  -  -  		ex 		de,hl
   83 00:44F9 E1 -  -  -  		pop 	hl
   84 00:44FA D9 -  -  -  		exx
   85 00:44FB C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:44FC 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:44FD -  -  -  -  		;
   88 00:44FD -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:44FD -  -  -  -  		; 		is in B (type) DE'DE
   90 00:44FD -  -  -  -  		;
   91 00:44FD F1 -  -  -  		pop 	af 							; get operator in A
   92 00:44FE -  -  -  -  		;
   93 00:44FE -  -  -  -  		; 		Call the binary operator in A.
   94 00:44FE -  -  -  -  		;
   95 00:44FE D5 -  -  -  		push 	de
   96 00:44FF E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4500 E6 7F 21 00 
              00 6F 29 11 
              16 4E 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4512 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4513 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4514 CD 60 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:4517 -  -  -  -  		;
  102 00:4517 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:4518 -  -  -  -  		;
  104 00:4518 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:451A -  -  -  -  
  106 00:451A -  -  -  -  ; ***************************************************************************************
  107 00:451A -  -  -  -  ;
  108 00:451A -  -  -  -  ;									Changes and Updates
  109 00:451A -  -  -  -  ;
  110 00:451A -  -  -  -  ; ***************************************************************************************
  111 00:451A -  -  -  -  ;
  112 00:451A -  -  -  -  ;		Date			Notes
  113 00:451A -  -  -  -  ;		==== 			=====
  114 00:451A -  -  -  -  ;
  115 00:451A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:451A -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:451A -  -  -  -  ; ***************************************************************************************
    2 00:451A -  -  -  -  ; ***************************************************************************************
    3 00:451A -  -  -  -  ;
    4 00:451A -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:451A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:451A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:451A -  -  -  -  ;		Reviewed :	No
    8 00:451A -  -  -  -  ;		Purpose :	Expression support functions
    9 00:451A -  -  -  -  ;
   10 00:451A -  -  -  -  ; ***************************************************************************************
   11 00:451A -  -  -  -  ; ***************************************************************************************
   12 00:451A -  -  -  -  
   13 00:451A -  -  -  -  ; ***************************************************************************************
   14 00:451A -  -  -  -  ;
   15 00:451A -  -  -  -  ; 								Evaluate an integer term
   16 00:451A -  -  -  -  ;
   17 00:451A -  -  -  -  ; ***************************************************************************************
   18 00:451A -  -  -  -  
   19 00:451A -  -  -  -  EvaluateIntegerTerm:
   20 00:451A CD 93 45 -  		call 	EvaluateTerm
   21 00:451D CD 63 45 -  		call 	DeReference
   22 00:4520 CB 41 -  -  		bit 	CIsString,c
   23 00:4522 C8 -  -  -  		ret 	z
   24 00:4523 C3 A6 43 -  		jp 		TypeMismatch
   25 00:4526 -  -  -  -  
   26 00:4526 -  -  -  -  ; ***************************************************************************************
   27 00:4526 -  -  -  -  ;
   28 00:4526 -  -  -  -  ; 								Evaluate a string term
   29 00:4526 -  -  -  -  ;
   30 00:4526 -  -  -  -  ; ***************************************************************************************
   31 00:4526 -  -  -  -  
   32 00:4526 -  -  -  -  EvaluateStringTerm:
   33 00:4526 CD 93 45 -  		call 	EvaluateTerm
   34 00:4529 CD 63 45 -  		call 	DeReference
   35 00:452C CB 41 -  -  		bit 	CIsString,c
   36 00:452E C0 -  -  -  		ret 	nz
   37 00:452F C3 A6 43 -  		jp 		TypeMismatch
   38 00:4532 -  -  -  -  
   39 00:4532 -  -  -  -  ; ***************************************************************************************
   40 00:4532 -  -  -  -  ;
   41 00:4532 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4532 -  -  -  -  ;
   43 00:4532 -  -  -  -  ; ***************************************************************************************
   44 00:4532 -  -  -  -  
   45 00:4532 -  -  -  -  EvaluateValue:
   46 00:4532 CD C8 44 -  		call 	EvaluateAtPrecedence0
   47 00:4535 C3 63 45 -  		jp 		Dereference
   48 00:4538 -  -  -  -  
   49 00:4538 -  -  -  -  ; ***************************************************************************************
   50 00:4538 -  -  -  -  ;
   51 00:4538 -  -  -  -  ; 									Evaluate a number
   52 00:4538 -  -  -  -  ;
   53 00:4538 -  -  -  -  ; ***************************************************************************************
   54 00:4538 -  -  -  -  
   55 00:4538 -  -  -  -  EvaluateInteger:
   56 00:4538 CD 32 45 -  		call 	EvaluateValue
   57 00:453B CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:453D C8 -  -  -  		ret 	z
   59 00:453E C3 A6 43 -  		jp 		TypeMismatch
   60 00:4541 -  -  -  -  
   61 00:4541 -  -  -  -  ; ***************************************************************************************
   62 00:4541 -  -  -  -  ;
   63 00:4541 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4541 -  -  -  -  ;
   65 00:4541 -  -  -  -  ; ***************************************************************************************
   66 00:4541 -  -  -  -  
   67 00:4541 -  -  -  -  Evaluate8BitInteger:
   68 00:4541 CD 38 45 -  		call 	EvaluateInteger
   69 00:4544 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4545 7C -  -  -  		ld 		a,h
   71 00:4546 B5 -  -  -  		or 		l
   72 00:4547 D9 -  -  -  		exx 	
   73 00:4548 B4 -  -  -  		or 		h
   74 00:4549 C2 AB 43 -  		jp 		nz,BadValue
   75 00:454C 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:454D C9 -  -  -  		ret
   77 00:454E -  -  -  -  		
   78 00:454E -  -  -  -  ; ***************************************************************************************
   79 00:454E -  -  -  -  ;
   80 00:454E -  -  -  -  ; 									Evaluate a string
   81 00:454E -  -  -  -  ;
   82 00:454E -  -  -  -  ; ***************************************************************************************
   83 00:454E -  -  -  -  
   84 00:454E -  -  -  -  EvaluateString:
   85 00:454E CD 32 45 -  		call 	EvaluateValue
   86 00:4551 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:4553 CA A6 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4556 C9 -  -  -  		ret
   89 00:4557 -  -  -  -  
   90 00:4557 -  -  -  -  ; ***************************************************************************************
   91 00:4557 -  -  -  -  ;
   92 00:4557 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4557 -  -  -  -  ;
   94 00:4557 -  -  -  -  ; ***************************************************************************************
   95 00:4557 -  -  -  -  
   96 00:4557 -  -  -  -  Return8BitConstant:
   97 00:4557 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:455A 6F -  -  -  		ld 		l,a
   99 00:455B -  -  -  -  Return16BitConstant:
  100 00:455B D9 -  -  -  		exx 								; clear HL'
  101 00:455C 21 00 00 -  		ld 		hl,0
  102 00:455F D9 -  -  -  		exx
  103 00:4560 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4562 C9 -  -  -  		ret
  105 00:4563 -  -  -  -  
  106 00:4563 -  -  -  -  ; ***************************************************************************************
  107 00:4563 -  -  -  -  ;
  108 00:4563 -  -  -  -  ;									Changes and Updates
  109 00:4563 -  -  -  -  ;
  110 00:4563 -  -  -  -  ; ***************************************************************************************
  111 00:4563 -  -  -  -  ;
  112 00:4563 -  -  -  -  ;		Date			Notes
  113 00:4563 -  -  -  -  ;		==== 			=====
  114 00:4563 -  -  -  -  ;
  115 00:4563 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4563 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4563 -  -  -  -  ; ***************************************************************************************
    2 00:4563 -  -  -  -  ; ***************************************************************************************
    3 00:4563 -  -  -  -  ;
    4 00:4563 -  -  -  -  ;		Name : 		reference.asm
    5 00:4563 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4563 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4563 -  -  -  -  ;		Reviewed :	No
    8 00:4563 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4563 -  -  -  -  ;
   10 00:4563 -  -  -  -  ; ***************************************************************************************
   11 00:4563 -  -  -  -  ; ***************************************************************************************
   12 00:4563 -  -  -  -  
   13 00:4563 -  -  -  -  ; ***************************************************************************************
   14 00:4563 -  -  -  -  ;
   15 00:4563 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4563 -  -  -  -  ;
   17 00:4563 -  -  -  -  ; ***************************************************************************************
   18 00:4563 -  -  -  -  
   19 00:4563 -  -  -  -  Dereference:
   20 00:4563 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4565 C8 -  -  -  		ret 	z
   22 00:4566 -  -  -  -  
   23 00:4566 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4568 -  -  -  -  		
   25 00:4568 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:456A 20 20 -  -  		jr 		nz,_DRInternal
   27 00:456C -  -  -  -  
   28 00:456C CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:456E 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:4570 -  -  -  -  
   31 00:4570 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:4571 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4575 D9 -  -  -  		exx
   34 00:4576 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4577 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4578 23 -  -  -  		inc  	hl
   37 00:4579 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:457D D9 -  -  -  		exx 								; fix back
   39 00:457E C9 -  -  -  		ret
   40 00:457F -  -  -  -  
   41 00:457F -  -  -  -  _DeRefByte:		
   42 00:457F 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:4580 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:4583 6F -  -  -  		ld	 	l,a
   45 00:4584 D9 -  -  -  		exx
   46 00:4585 21 00 00 -  		ld 		hl,$0000
   47 00:4588 D9 -  -  -  		exx
   48 00:4589 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:458B C9 -  -  -  		ret
   50 00:458C -  -  -  -  
   51 00:458C -  -  -  -  _DRInternal:
   52 00:458C 3E 05 C3 53 
              43 -  -  -  		ERR_DISABLED
   53 00:4591 -  -  -  -  
   54 00:4591 -  -  -  -  ; ***************************************************************************************
   55 00:4591 -  -  -  -  ;
   56 00:4591 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:4591 -  -  -  -  ;
   58 00:4591 -  -  -  -  ; ***************************************************************************************
   59 00:4591 -  -  -  -  
   60 00:4591 -  -  -  -  DRConvertHLHLToAddress:
   61 00:4591 -  -  -  -  		#ifdef EZ80
   62 00:4591             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:4591             		exx
   64 00:4591             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:4591             		ld 		hl,$0000 					; zero HL'
   66 00:4591             		exx
   67 00:4591             		ld 		hl,(AConvert) 				; load UHL
   68 00:4591             		#endif
   69 00:4591 C9 -  -  -  		ret
   70 00:4592 -  -  -  -  
   71 00:4592 -  -  -  -  ; ***************************************************************************************
   72 00:4592 -  -  -  -  ;
   73 00:4592 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:4592 -  -  -  -  ;
   75 00:4592 -  -  -  -  ; ***************************************************************************************
   76 00:4592 -  -  -  -  
   77 00:4592 -  -  -  -  DRConvertAddressToHLHL:
   78 00:4592 -  -  -  -  		#ifdef EZ80
   79 00:4592             		ld 		(AConvert),hl
   80 00:4592             		ld 		hl,$0000
   81 00:4592             		ld 		(AConvert+3),hl
   82 00:4592             		exx
   83 00:4592             		ld 		hl,(AConvert+2)
   84 00:4592             		exx
   85 00:4592             		xor 	a
   86 00:4592             		ld 		(AConvert+2),a
   87 00:4592             		ld 		hl,(AConvert)
   88 00:4592             		#endif
   89 00:4592 C9 -  -  -  		ret
   90 00:4593 -  -  -  -  
   91 00:4593 -  -  -  -  ; ***************************************************************************************
   92 00:4593 -  -  -  -  ;
   93 00:4593 -  -  -  -  ;									Changes and Updates
   94 00:4593 -  -  -  -  ;
   95 00:4593 -  -  -  -  ; ***************************************************************************************
   96 00:4593 -  -  -  -  ;
   97 00:4593 -  -  -  -  ;		Date			Notes
   98 00:4593 -  -  -  -  ;		==== 			=====
   99 00:4593 -  -  -  -  ;
  100 00:4593 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:4593 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:4593 -  -  -  -  ; ***************************************************************************************
    2 00:4593 -  -  -  -  ; ***************************************************************************************
    3 00:4593 -  -  -  -  ;
    4 00:4593 -  -  -  -  ;		Name : 		term.asm
    5 00:4593 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4593 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4593 -  -  -  -  ;		Reviewed :	No
    8 00:4593 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:4593 -  -  -  -  ;
   10 00:4593 -  -  -  -  ; ***************************************************************************************
   11 00:4593 -  -  -  -  ; ***************************************************************************************
   12 00:4593 -  -  -  -  
   13 00:4593 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:4593             		add_hlhl_16
   15 00:4593             		exx
   16 00:4593             		adc_hlhl_16
   17 00:4593             		exx
   18 00:4593             #endmacro
   19 00:4593 -  -  -  -  
   20 00:4593 -  -  -  -  ; ***************************************************************************************
   21 00:4593 -  -  -  -  ;
   22 00:4593 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:4593 -  -  -  -  ;
   24 00:4593 -  -  -  -  ; ***************************************************************************************
   25 00:4593 -  -  -  -  ;
   26 00:4593 -  -  -  -  ; 		Terms can be:
   27 00:4593 -  -  -  -  ;
   28 00:4593 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:4593 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:4593 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:4593 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:4593 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:4593 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:4593 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:4593 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:4593 -  -  -  -  ; 														reference of some sort.
   37 00:4593 -  -  -  -  ;
   38 00:4593 -  -  -  -  ; ***************************************************************************************
   39 00:4593 -  -  -  -  
   40 00:4593 -  -  -  -  EvaluateTerm:		
   41 00:4593 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4595 D9 -  -  -  		exx
   43 00:4596 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4599 D9 -  -  -  		exx
   45 00:459A 21 00 00 -  		ld 		hl,$0000		
   46 00:459D -  -  -  -  		;
   47 00:459D DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:45A0 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:45A2 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:45A4 DA 42 46 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:45A7 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:45A9 C2 F1 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:45AC -  -  -  -  		;
   54 00:45AC -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:45AC -  -  -  -  		;
   56 00:45AC -  -  -  -  _ETIntegerConstant:
   57 00:45AC -  -  -  -  		;
   58 00:45AC -  -  -  -  _ETIntegerLoop:		
   59 00:45AC DD 7E 00 -  		ld 		a,(ix+0)
   60 00:45AF E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:45B1 B5 -  -  -  		or 		l 							; or into L
   62 00:45B2 6F -  -  -  		ld 		l,a
   63 00:45B3 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:45B5 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:45B8 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:45BA FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:45BC D8 -  -  -  		ret 	c
   68 00:45BD -  -  -  -  
   69 00:45BD 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:45C2 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:45C7 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:45CC 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:45D1 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:45D6 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:45DB -  -  -  -  
   76 00:45DB 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:45DD -  -  -  -  		;
   78 00:45DD -  -  -  -  		; 		Found the $3F string marker.
   79 00:45DD -  -  -  -  		;
   80 00:45DD -  -  -  -  _ETStringMarker:		
   81 00:45DD DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:45DF DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:45E1 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:45E3 E1 -  -  -  		pop 	hl
   85 00:45E4 11 00 00 -  		ld 		de,$0000
   86 00:45E7 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:45EA DD 19 -  -  		add 	ix,de
   88 00:45EC DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:45EE 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:45F0 C9 -  -  -  		ret
   91 00:45F1 -  -  -  -  		;
   92 00:45F1 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:45F1 -  -  -  -  		;
   94 00:45F1 -  -  -  -  _ETFoundKeyword:
   95 00:45F1 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:45F3 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:45F5 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:45F7 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:45F9 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:45FB -  -  -  -  		;
  101 00:45FB -  -  -  -  		;		Unary group 0
  102 00:45FB -  -  -  -  		;
  103 00:45FB E6 7F 21 00 
              00 6F 29 11 
              16 4E 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:460D C3 60 40 -  		jp 		JumpCode 					; and go there.
  105 00:4610 -  -  -  -  
  106 00:4610 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4610 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4612 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4614 -  -  -  -  		;
  110 00:4614 -  -  -  -  		; 		- term
  111 00:4614 -  -  -  -  		;
  112 00:4614 CD 1A 45 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:4617 CD BA 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:461A C9 -  -  -  		ret
  115 00:461B -  -  -  -  		;
  116 00:461B -  -  -  -  		;		! ? indirection check
  117 00:461B -  -  -  -  		;
  118 00:461B -  -  -  -  _ETCheckIndirection:	
  119 00:461B FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:461D 28 05 -  -  		jr 		z,_ETIndirection
  121 00:461F FE 83 -  -  		cp 		KWD_PLING
  122 00:4621 C2 B0 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4624 -  -  -  -  		;
  124 00:4624 -  -  -  -  		; 		! ? indirection
  125 00:4624 -  -  -  -  		;
  126 00:4624 -  -  -  -  _ETIndirection:
  127 00:4624 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4625 CD 93 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:4628 CD 63 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:462B CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:462D 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:462F CD 91 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4632 F1 -  -  -  		pop 	af 							; get type back
  134 00:4633 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4635 CB F9 -  -  		set 	CIsReference,c
  136 00:4637 FE 83 -  -  		cp 		KWD_PLING
  137 00:4639 C8 -  -  -  		ret 	z
  138 00:463A CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:463C C9 -  -  -  		ret
  140 00:463D -  -  -  -  _ETStringIndirect:
  141 00:463D 3E 02 C3 53 
              43 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4642 -  -  -  -  		;
  143 00:4642 -  -  -  -  		; 		Found an identifier.
  144 00:4642 -  -  -  -  		;
  145 00:4642 -  -  -  -  _ETVariable:
  146 00:4642 CD FE 4A -  		call 	FindVariable 				; find the variable.
  147 00:4645 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4646 3E 19 C3 53 
              43 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:464B -  -  -  -  		
  150 00:464B -  -  -  -  ; ***************************************************************************************
  151 00:464B -  -  -  -  ;
  152 00:464B -  -  -  -  ;									Changes and Updates
  153 00:464B -  -  -  -  ;
  154 00:464B -  -  -  -  ; ***************************************************************************************
  155 00:464B -  -  -  -  ;
  156 00:464B -  -  -  -  ;		Date			Notes
  157 00:464B -  -  -  -  ;		==== 			=====
  158 00:464B -  -  -  -  ;
  159 00:464B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:464B -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:464B -  -  -  -  ; ***************************************************************************************
    2 00:464B -  -  -  -  ; ***************************************************************************************
    3 00:464B -  -  -  -  ;
    4 00:464B -  -  -  -  ;		Name : 		abs.asm
    5 00:464B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:464B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:464B -  -  -  -  ;		Reviewed :	No
    8 00:464B -  -  -  -  ;		Purpose :	Absolute value 
    9 00:464B -  -  -  -  ;
   10 00:464B -  -  -  -  ; ***************************************************************************************
   11 00:464B -  -  -  -  ; ***************************************************************************************
   12 00:464B -  -  -  -  
   13 00:464B -  -  -  -  ; ***************************************************************************************
   14 00:464B -  -  -  -  ;
   15 00:464B -  -  -  -  ;								abs( unary function
   16 00:464B -  -  -  -  ;
   17 00:464B -  -  -  -  ; ***************************************************************************************
   18 00:464B -  -  -  -  
   19 00:464B -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:464B CD 1A 45 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:464E D9 -  -  -  		exx 								; test MSB
   22 00:464F CB 7C -  -  		bit 	7,h
   23 00:4651 D9 -  -  -  		exx
   24 00:4652 C4 BA 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4655 C9 -  -  -  		ret
   26 00:4656 -  -  -  -  
   27 00:4656 -  -  -  -  ; ***************************************************************************************
   28 00:4656 -  -  -  -  ;
   29 00:4656 -  -  -  -  ;									Changes and Updates
   30 00:4656 -  -  -  -  ;
   31 00:4656 -  -  -  -  ; ***************************************************************************************
   32 00:4656 -  -  -  -  ;
   33 00:4656 -  -  -  -  ;		Date			Notes
   34 00:4656 -  -  -  -  ;		==== 			=====
   35 00:4656 -  -  -  -  ;
   36 00:4656 -  -  -  -  ; ***************************************************************************************
   37 00:4656 -  -  -  -  		
Listing for file "_build.asm"
   37 00:4656 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4656 -  -  -  -  ; ***************************************************************************************
    2 00:4656 -  -  -  -  ; ***************************************************************************************
    3 00:4656 -  -  -  -  ;
    4 00:4656 -  -  -  -  ;		Name : 		asc.asm
    5 00:4656 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4656 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4656 -  -  -  -  ;		Reviewed :	No
    8 00:4656 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4656 -  -  -  -  ;
   10 00:4656 -  -  -  -  ; ***************************************************************************************
   11 00:4656 -  -  -  -  ; ***************************************************************************************
   12 00:4656 -  -  -  -  
   13 00:4656 -  -  -  -  ; ***************************************************************************************
   14 00:4656 -  -  -  -  ;
   15 00:4656 -  -  -  -  ;								Asc unary function
   16 00:4656 -  -  -  -  ;
   17 00:4656 -  -  -  -  ; ***************************************************************************************
   18 00:4656 -  -  -  -  
   19 00:4656 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4656 CD 26 45 -  		call	EvaluateStringTerm			; Get string
   21 00:4659 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:465A C3 57 45 -  		jp 		Return8BitConstant
   23 00:465D -  -  -  -  
   24 00:465D -  -  -  -  ; ***************************************************************************************
   25 00:465D -  -  -  -  ;
   26 00:465D -  -  -  -  ;									Changes and Updates
   27 00:465D -  -  -  -  ;
   28 00:465D -  -  -  -  ; ***************************************************************************************
   29 00:465D -  -  -  -  ;
   30 00:465D -  -  -  -  ;		Date			Notes
   31 00:465D -  -  -  -  ;		==== 			=====
   32 00:465D -  -  -  -  ;
   33 00:465D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:465D -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:465D -  -  -  -  ; ***************************************************************************************
    2 00:465D -  -  -  -  ; ***************************************************************************************
    3 00:465D -  -  -  -  ;
    4 00:465D -  -  -  -  ;		Name : 		chr.asm
    5 00:465D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465D -  -  -  -  ;		Reviewed :	No
    8 00:465D -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:465D -  -  -  -  ;
   10 00:465D -  -  -  -  ; ***************************************************************************************
   11 00:465D -  -  -  -  ; ***************************************************************************************
   12 00:465D -  -  -  -  
   13 00:465D -  -  -  -  ; ***************************************************************************************
   14 00:465D -  -  -  -  ;
   15 00:465D -  -  -  -  ;								Chr$() unary function
   16 00:465D -  -  -  -  ;
   17 00:465D -  -  -  -  ; ***************************************************************************************
   18 00:465D -  -  -  -  
   19 00:465D -  -  -  -  Unary_Chr:	;; [chr]
   20 00:465D CD 2E 43 -  		call 	CheckDollar
   21 00:4660 CD 1A 45 -  		call 	EvaluateIntegerTerm
   22 00:4663 7D -  -  -  		ld 		a,l 						; get character
   23 00:4664 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4666 21 9B 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:4669 36 0D -  -  		ld 		(hl),13
   26 00:466B 2B -  -  -  		dec 	hl
   27 00:466C 77 -  -  -  		ld 		(hl),a
   28 00:466D C9 -  -  -  		ret
   29 00:466E -  -  -  -  
   30 00:466E -  -  -  -  ; ***************************************************************************************
   31 00:466E -  -  -  -  ;
   32 00:466E -  -  -  -  ;									Changes and Updates
   33 00:466E -  -  -  -  ;
   34 00:466E -  -  -  -  ; ***************************************************************************************
   35 00:466E -  -  -  -  ;
   36 00:466E -  -  -  -  ;		Date			Notes
   37 00:466E -  -  -  -  ;		==== 			=====
   38 00:466E -  -  -  -  ;
   39 00:466E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:466E -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:466E -  -  -  -  ; ***************************************************************************************
    2 00:466E -  -  -  -  ; ***************************************************************************************
    3 00:466E -  -  -  -  ;
    4 00:466E -  -  -  -  ;		Name : 		len.asm
    5 00:466E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:466E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:466E -  -  -  -  ;		Reviewed :	None
    8 00:466E -  -  -  -  ;		Purpose :	String Length
    9 00:466E -  -  -  -  ;
   10 00:466E -  -  -  -  ; ***************************************************************************************
   11 00:466E -  -  -  -  ; ***************************************************************************************
   12 00:466E -  -  -  -  
   13 00:466E -  -  -  -  ; ***************************************************************************************
   14 00:466E -  -  -  -  ;
   15 00:466E -  -  -  -  ;								Len unary function
   16 00:466E -  -  -  -  ;
   17 00:466E -  -  -  -  ; ***************************************************************************************
   18 00:466E -  -  -  -  
   19 00:466E -  -  -  -  Unary_Len:	;; [len]
   20 00:466E CD 26 45 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4671 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4672 CD 31 44 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4675 -  -  -  -  _ULCount:
   24 00:4675 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4676 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4678 D8 -  -  -  		ret 	c
   27 00:4679 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:467A 13 -  -  -  		inc 	de
   29 00:467B 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:467D -  -  -  -  
   31 00:467D -  -  -  -  ; ***************************************************************************************
   32 00:467D -  -  -  -  ;
   33 00:467D -  -  -  -  ;									Changes and Updates
   34 00:467D -  -  -  -  ;
   35 00:467D -  -  -  -  ; ***************************************************************************************
   36 00:467D -  -  -  -  ;
   37 00:467D -  -  -  -  ;		Date			Notes
   38 00:467D -  -  -  -  ;		==== 			=====
   39 00:467D -  -  -  -  ;
   40 00:467D -  -  -  -  ; ***************************************************************************************
   41 00:467D -  -  -  -  		
Listing for file "_build.asm"
   40 00:467D -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:467D -  -  -  -  ; ***************************************************************************************
    2 00:467D -  -  -  -  ; ***************************************************************************************
    3 00:467D -  -  -  -  ;
    4 00:467D -  -  -  -  ;		Name : 		makestring.asm
    5 00:467D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:467D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:467D -  -  -  -  ;		Reviewed :	No
    8 00:467D -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:467D -  -  -  -  ;
   10 00:467D -  -  -  -  ; ***************************************************************************************
   11 00:467D -  -  -  -  ; ***************************************************************************************
   12 00:467D -  -  -  -  
   13 00:467D -  -  -  -  ; ***************************************************************************************
   14 00:467D -  -  -  -  ;
   15 00:467D -  -  -  -  ;								Str$() unary function
   16 00:467D -  -  -  -  ;
   17 00:467D -  -  -  -  ; ***************************************************************************************
   18 00:467D -  -  -  -  
   19 00:467D -  -  -  -  Unary_MkStr:	;; [$]
   20 00:467D CD 1A 45 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:4680 CD 91 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:4683 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4685 C9 -  -  -  		ret
   24 00:4686 -  -  -  -  
   25 00:4686 -  -  -  -  ; ***************************************************************************************
   26 00:4686 -  -  -  -  ;
   27 00:4686 -  -  -  -  ;									Changes and Updates
   28 00:4686 -  -  -  -  ;
   29 00:4686 -  -  -  -  ; ***************************************************************************************
   30 00:4686 -  -  -  -  ;
   31 00:4686 -  -  -  -  ;		Date			Notes
   32 00:4686 -  -  -  -  ;		==== 			=====
   33 00:4686 -  -  -  -  ;
   34 00:4686 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:4686 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4686 -  -  -  -  ; ***************************************************************************************
    2 00:4686 -  -  -  -  ; ***************************************************************************************
    3 00:4686 -  -  -  -  ;
    4 00:4686 -  -  -  -  ;		Name : 		not.asm
    5 00:4686 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4686 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4686 -  -  -  -  ;		Reviewed :	No
    8 00:4686 -  -  -  -  ;		Purpose :	Logical not
    9 00:4686 -  -  -  -  ;
   10 00:4686 -  -  -  -  ; ***************************************************************************************
   11 00:4686 -  -  -  -  ; ***************************************************************************************
   12 00:4686 -  -  -  -  
   13 00:4686 -  -  -  -  ; ***************************************************************************************
   14 00:4686 -  -  -  -  ;
   15 00:4686 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4686 -  -  -  -  ;
   17 00:4686 -  -  -  -  ; ***************************************************************************************
   18 00:4686 -  -  -  -  
   19 00:4686 -  -  -  -  Unary_Not:		;; [not]
   20 00:4686 CD 1A 45 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4689 CD 90 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:468C CD 90 46 -  		call 	__UNSwap		
   23 00:468F C9 -  -  -  		ret
   24 00:4690 -  -  -  -  
   25 00:4690 -  -  -  -  __UNSwap:
   26 00:4690 7C -  -  -  		ld 		a,h
   27 00:4691 2F -  -  -  		cpl
   28 00:4692 67 -  -  -  		ld 		h,a
   29 00:4693 7D -  -  -  		ld 		a,l
   30 00:4694 2F -  -  -  		cpl 	
   31 00:4695 6F -  -  -  		ld 		l,a
   32 00:4696 D9 -  -  -  		exx
   33 00:4697 C9 -  -  -  		ret
   34 00:4698 -  -  -  -  
   35 00:4698 -  -  -  -  ; ***************************************************************************************
   36 00:4698 -  -  -  -  ;
   37 00:4698 -  -  -  -  ;									Changes and Updates
   38 00:4698 -  -  -  -  ;
   39 00:4698 -  -  -  -  ; ***************************************************************************************
   40 00:4698 -  -  -  -  ;
   41 00:4698 -  -  -  -  ;		Date			Notes
   42 00:4698 -  -  -  -  ;		==== 			=====
   43 00:4698 -  -  -  -  ;
   44 00:4698 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:4698 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4698 -  -  -  -  ; ***************************************************************************************
    2 00:4698 -  -  -  -  ; ***************************************************************************************
    3 00:4698 -  -  -  -  ;
    4 00:4698 -  -  -  -  ;		Name : 		page.asm
    5 00:4698 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4698 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4698 -  -  -  -  ;		Reviewed :	No
    8 00:4698 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4698 -  -  -  -  ;
   10 00:4698 -  -  -  -  ; ***************************************************************************************
   11 00:4698 -  -  -  -  ; ***************************************************************************************
   12 00:4698 -  -  -  -  
   13 00:4698 -  -  -  -  ; ***************************************************************************************
   14 00:4698 -  -  -  -  ;
   15 00:4698 -  -  -  -  ;							page unary function (no bracket)
   16 00:4698 -  -  -  -  ;
   17 00:4698 -  -  -  -  ; ***************************************************************************************
   18 00:4698 -  -  -  -  
   19 00:4698 -  -  -  -  Unary_Page:	;; [page]
   20 00:4698 2A 34 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:469B D9 -  -  -  			exx
   22 00:469C 2A 36 40 -  			ld 		hl,(CodeAddress+2)
   23 00:469F D9 -  -  -  			exx
   24 00:46A0 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:46A2 C9 -  -  -  			ret
   26 00:46A3 -  -  -  -  
   27 00:46A3 -  -  -  -  ; ***************************************************************************************
   28 00:46A3 -  -  -  -  ;
   29 00:46A3 -  -  -  -  ;									Changes and Updates
   30 00:46A3 -  -  -  -  ;
   31 00:46A3 -  -  -  -  ; ***************************************************************************************
   32 00:46A3 -  -  -  -  ;
   33 00:46A3 -  -  -  -  ;		Date			Notes
   34 00:46A3 -  -  -  -  ;		==== 			=====
   35 00:46A3 -  -  -  -  ;
   36 00:46A3 -  -  -  -  ; ***************************************************************************************
   37 00:46A3 -  -  -  -  			
Listing for file "_build.asm"
   43 00:46A3 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:46A3 -  -  -  -  ; ***************************************************************************************
    2 00:46A3 -  -  -  -  ; ***************************************************************************************
    3 00:46A3 -  -  -  -  ;
    4 00:46A3 -  -  -  -  ;		Name : 		random.asm
    5 00:46A3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46A3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46A3 -  -  -  -  ;		Reviewed :	No
    8 00:46A3 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:46A3 -  -  -  -  ;
   10 00:46A3 -  -  -  -  ; ***************************************************************************************
   11 00:46A3 -  -  -  -  ; ***************************************************************************************
   12 00:46A3 -  -  -  -  
   13 00:46A3 -  -  -  -  ; ***************************************************************************************
   14 00:46A3 -  -  -  -  ;
   15 00:46A3 -  -  -  -  ;								Random unary function
   16 00:46A3 -  -  -  -  ;
   17 00:46A3 -  -  -  -  ; ***************************************************************************************
   18 00:46A3 -  -  -  -  
   19 00:46A3 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:46A3 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:46A4 CD 1A 45 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:46A7 D9 -  -  -  		exx 								; is it -ve
   23 00:46A8 CB 7C -  -  		bit 	7,h
   24 00:46AA D9 -  -  -  		exx
   25 00:46AB 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:46AD 22 6C 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:46B0 D9 -  -  -  		exx
   28 00:46B1 22 70 40 -  		ld 		(RandomSeed+4),hl
   29 00:46B4 D9 -  -  -  		exx
   30 00:46B5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:46B7 C9 -  -  -  		ret
   32 00:46B8 -  -  -  -  _URDontSeed:		
   33 00:46B8 -  -  -  -  
   34 00:46B8 CD 0D 50 -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:46BB 28 19 -  -  		jr 		z,_URFail
   36 00:46BD E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:46BE D9 -  -  -  		exx
   38 00:46BF E5 -  -  -  		push 	hl
   39 00:46C0 D9 -  -  -  		exx
   40 00:46C1 -  -  -  -  		;
   41 00:46C1 CD E5 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:46C4 D9 -  -  -  		exx
   43 00:46C5 CD E5 46 -  		call 	URandomHL
   44 00:46C8 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:46CA D9 -  -  -  		exx
   46 00:46CB -  -  -  -  		;
   47 00:46CB D9 -  -  -  		exx 								; restore range.
   48 00:46CC D1 -  -  -  		pop 	de
   49 00:46CD D9 -  -  -  		exx
   50 00:46CE D1 -  -  -  		pop 	de
   51 00:46CF -  -  -  -  		;
   52 00:46CF CD B9 4E -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:46D2 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:46D3 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:46D5 C9 -  -  -  		ret
   56 00:46D6 -  -  -  -  _URFail:
   57 00:46D6 3E 03 C3 53 
              43 -  -  -  		ERR_BADVALUE
   58 00:46DB -  -  -  -  ; ***************************************************************************************
   59 00:46DB -  -  -  -  ;
   60 00:46DB -  -  -  -  ; 									Push RNG off zero
   61 00:46DB -  -  -  -  ;
   62 00:46DB -  -  -  -  ; ***************************************************************************************
   63 00:46DB -  -  -  -  
   64 00:46DB -  -  -  -  UnaryRandomInitialise:
   65 00:46DB 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:46DD -  -  -  -  _URILoop:
   67 00:46DD C5 -  -  -  		push 	bc
   68 00:46DE CD E5 46 -  		call 	URandomHL
   69 00:46E1 C1 -  -  -  		pop 	bc
   70 00:46E2 10 F9 -  -  		djnz 	_URILoop
   71 00:46E4 C9 -  -  -  		ret
   72 00:46E5 -  -  -  -  
   73 00:46E5 -  -  -  -  ; ***************************************************************************************
   74 00:46E5 -  -  -  -  ;
   75 00:46E5 -  -  -  -  ;							16 bit random number generator
   76 00:46E5 -  -  -  -  ;
   77 00:46E5 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:46E5 -  -  -  -  ;		Actual author unspecified.
   79 00:46E5 -  -  -  -  ;
   80 00:46E5 -  -  -  -  ; ***************************************************************************************
   81 00:46E5 -  -  -  -  
   82 00:46E5 -  -  -  -  URandomHL:
   83 00:46E5 2A 6C 40 -  	    ld 		hl,(RandomSeed)
   84 00:46E8 ED 5B 70 40 	    ld 		de,(RandomSeed+4)
   85 00:46EC 44 -  -  -  	    ld 		b,h
   86 00:46ED 4D -  -  -  	    ld 		c,l
   87 00:46EE 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:46F3 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:46F8 2C -  -  -  	    inc 	l
   90 00:46F9 09 -  -  -  	    add 	hl,bc
   91 00:46FA 22 6C 40 -  	    ld 		(RandomSeed),hl
   92 00:46FD 2A 70 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:4700 ED 5A -  -  	    adc 	hl,de
   94 00:4702 22 70 40 -  	    ld 		(RandomSeed+4),hl
   95 00:4705 EB -  -  -  	    ex 		de,hl
   96 00:4706 2A 74 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:4709 ED 4B 78 40 	    ld 		bc,(RandomSeed+12)
   98 00:470D 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:4712 ED 43 78 40 	    ld 		(RandomSeed+12),bc
  100 00:4716 9F -  -  -  	    sbc 	a,a
  101 00:4717 E6 C5 -  -  	    and 	%11000101
  102 00:4719 AD -  -  -  	    xor 	l
  103 00:471A 6F -  -  -  	    ld 		l,a
  104 00:471B 22 74 40 -  	    ld 		(RandomSeed+8),hl
  105 00:471E EB -  -  -  	    ex 		de,hl
  106 00:471F 09 -  -  -  	    add 	hl,bc
  107 00:4720 C9 -  -  -  	    ret		
  108 00:4721 -  -  -  -  
  109 00:4721 -  -  -  -  ; ***************************************************************************************
  110 00:4721 -  -  -  -  ;
  111 00:4721 -  -  -  -  ;									Changes and Updates
  112 00:4721 -  -  -  -  ;
  113 00:4721 -  -  -  -  ; ***************************************************************************************
  114 00:4721 -  -  -  -  ;
  115 00:4721 -  -  -  -  ;		Date			Notes
  116 00:4721 -  -  -  -  ;		==== 			=====
  117 00:4721 -  -  -  -  ;
  118 00:4721 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:4721 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:4721 -  -  -  -  ; ***************************************************************************************
    2 00:4721 -  -  -  -  ; ***************************************************************************************
    3 00:4721 -  -  -  -  ;
    4 00:4721 -  -  -  -  ;		Name : 		sgn.asm
    5 00:4721 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4721 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4721 -  -  -  -  ;		Reviewed :	No
    8 00:4721 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:4721 -  -  -  -  ;
   10 00:4721 -  -  -  -  ; ***************************************************************************************
   11 00:4721 -  -  -  -  ; ***************************************************************************************
   12 00:4721 -  -  -  -  
   13 00:4721 -  -  -  -  ; ***************************************************************************************
   14 00:4721 -  -  -  -  ;
   15 00:4721 -  -  -  -  ;								sgn unary function
   16 00:4721 -  -  -  -  ;
   17 00:4721 -  -  -  -  ; ***************************************************************************************
   18 00:4721 -  -  -  -  
   19 00:4721 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:4721 CD 1A 45 -  		call	EvaluateIntegerTerm 		; get value
   21 00:4724 CD 0D 50 -  		call 	Int32Zero 					; integer sgn() code
   22 00:4727 CA 31 44 -  		jp 		z,UnaryInt32False
   23 00:472A D9 -  -  -  		exx
   24 00:472B CB 7C -  -  		bit 	7,h
   25 00:472D D9 -  -  -  		exx
   26 00:472E C2 2D 44 -  		jp 		nz,UnaryInt32True
   27 00:4731 3E 01 -  -  		ld 		a,1
   28 00:4733 C3 57 45 -  		jp 		Return8BitConstant
   29 00:4736 -  -  -  -  
   30 00:4736 -  -  -  -  ; ***************************************************************************************
   31 00:4736 -  -  -  -  ;
   32 00:4736 -  -  -  -  ;									Changes and Updates
   33 00:4736 -  -  -  -  ;
   34 00:4736 -  -  -  -  ; ***************************************************************************************
   35 00:4736 -  -  -  -  ;
   36 00:4736 -  -  -  -  ;		Date			Notes
   37 00:4736 -  -  -  -  ;		==== 			=====
   38 00:4736 -  -  -  -  ;
   39 00:4736 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:4736 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:4736 -  -  -  -  ; ***************************************************************************************
    2 00:4736 -  -  -  -  ; ***************************************************************************************
    3 00:4736 -  -  -  -  ;
    4 00:4736 -  -  -  -  ;		Name : 		simple.asm
    5 00:4736 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4736 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4736 -  -  -  -  ;		Reviewed :	No
    8 00:4736 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:4736 -  -  -  -  ;
   10 00:4736 -  -  -  -  ; ***************************************************************************************
   11 00:4736 -  -  -  -  ; ***************************************************************************************
   12 00:4736 -  -  -  -  
   13 00:4736 -  -  -  -  ; ***************************************************************************************
   14 00:4736 -  -  -  -  ;
   15 00:4736 -  -  -  -  ;								( unary function (think about it)
   16 00:4736 -  -  -  -  ;
   17 00:4736 -  -  -  -  ; ***************************************************************************************
   18 00:4736 -  -  -  -  
   19 00:4736 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:4736 CD C8 44 -  		call 	EvaluateAtPrecedence0
   21 00:4739 C3 21 43 -  		jp  	CheckRightBracket
   22 00:473C -  -  -  -  
   23 00:473C -  -  -  -  ; ***************************************************************************************
   24 00:473C -  -  -  -  ;
   25 00:473C -  -  -  -  ;									Handle &x
   26 00:473C -  -  -  -  ;
   27 00:473C -  -  -  -  ; ***************************************************************************************
   28 00:473C -  -  -  -  
   29 00:473C -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:473C DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:473F E6 C0 -  -  		and 		$C0
   32 00:4741 FE 40 -  -  		cp 			$40
   33 00:4743 C2 B0 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4746 C3 93 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4749 -  -  -  -  
   36 00:4749 -  -  -  -  ; ***************************************************************************************
   37 00:4749 -  -  -  -  ;
   38 00:4749 -  -  -  -  ;									Changes and Updates
   39 00:4749 -  -  -  -  ;
   40 00:4749 -  -  -  -  ; ***************************************************************************************
   41 00:4749 -  -  -  -  ;
   42 00:4749 -  -  -  -  ;		Date			Notes
   43 00:4749 -  -  -  -  ;		==== 			=====
   44 00:4749 -  -  -  -  ;
   45 00:4749 -  -  -  -  ; ***************************************************************************************
   46 00:4749 -  -  -  -  		
Listing for file "_build.asm"
   46 00:4749 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4749 -  -  -  -  ; ***************************************************************************************
    2 00:4749 -  -  -  -  ; ***************************************************************************************
    3 00:4749 -  -  -  -  ;
    4 00:4749 -  -  -  -  ;		Name : 		str.asm
    5 00:4749 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4749 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4749 -  -  -  -  ;		Reviewed :	No
    8 00:4749 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4749 -  -  -  -  ;
   10 00:4749 -  -  -  -  ; ***************************************************************************************
   11 00:4749 -  -  -  -  ; ***************************************************************************************
   12 00:4749 -  -  -  -  
   13 00:4749 -  -  -  -  ; ***************************************************************************************
   14 00:4749 -  -  -  -  ;
   15 00:4749 -  -  -  -  ;								Str$() unary function
   16 00:4749 -  -  -  -  ;
   17 00:4749 -  -  -  -  ; ***************************************************************************************
   18 00:4749 -  -  -  -  
   19 00:4749 -  -  -  -  Unary_Str:	;; [str]
   20 00:4749 CD 2E 43 -  		call 	CheckDollar
   21 00:474C DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:474F EE AC -  -  		xor		KWD_TILDE
   23 00:4751 F5 -  -  -  		push 	af
   24 00:4752 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:4754 DD 23 -  -  		inc 	ix
   26 00:4756 -  -  -  -  _USNotHex:		
   27 00:4756 CD 1A 45 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:4759 01 8A 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:475C F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:475D 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:475F 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:4761 3E 10 -  -  		ld 		a,16
   33 00:4763 -  -  -  -  _USNotHex2:		
   34 00:4763 CD 4E 50 -  		call 	Int32ToString 				
   35 00:4766 21 8A 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:4769 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:476B C9 -  -  -  		ret
   38 00:476C -  -  -  -  
   39 00:476C -  -  -  -  ; ***************************************************************************************
   40 00:476C -  -  -  -  ;
   41 00:476C -  -  -  -  ;									Changes and Updates
   42 00:476C -  -  -  -  ;
   43 00:476C -  -  -  -  ; ***************************************************************************************
   44 00:476C -  -  -  -  ;
   45 00:476C -  -  -  -  ;		Date			Notes
   46 00:476C -  -  -  -  ;		==== 			=====
   47 00:476C -  -  -  -  ;
   48 00:476C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:476C -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:476C -  -  -  -  ; ***************************************************************************************
    2 00:476C -  -  -  -  ; ***************************************************************************************
    3 00:476C -  -  -  -  ;
    4 00:476C -  -  -  -  ;		Name : 		time.asm
    5 00:476C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:476C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:476C -  -  -  -  ;		Reviewed :	No
    8 00:476C -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:476C -  -  -  -  ;
   10 00:476C -  -  -  -  ; ***************************************************************************************
   11 00:476C -  -  -  -  ; ***************************************************************************************
   12 00:476C -  -  -  -  
   13 00:476C -  -  -  -  ; ***************************************************************************************
   14 00:476C -  -  -  -  ;
   15 00:476C -  -  -  -  ;							Get system time in ms
   16 00:476C -  -  -  -  ;
   17 00:476C -  -  -  -  ; ***************************************************************************************
   18 00:476C -  -  -  -  
   19 00:476C -  -  -  -  Unary_Time:	;; [time]
   20 00:476C CD C5 50 -  			call 	SYSGetTimer
   21 00:476F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:4771 C9 -  -  -  			ret
   23 00:4772 -  -  -  -  
   24 00:4772 -  -  -  -  ; ***************************************************************************************
   25 00:4772 -  -  -  -  ;
   26 00:4772 -  -  -  -  ;									Changes and Updates
   27 00:4772 -  -  -  -  ;
   28 00:4772 -  -  -  -  ; ***************************************************************************************
   29 00:4772 -  -  -  -  ;
   30 00:4772 -  -  -  -  ;		Date			Notes
   31 00:4772 -  -  -  -  ;		==== 			=====
   32 00:4772 -  -  -  -  ;
   33 00:4772 -  -  -  -  ; ***************************************************************************************
   34 00:4772 -  -  -  -  			
Listing for file "_build.asm"
   48 00:4772 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:4772 -  -  -  -  ; ***************************************************************************************
    2 00:4772 -  -  -  -  ; ***************************************************************************************
    3 00:4772 -  -  -  -  ;
    4 00:4772 -  -  -  -  ;		Name : 		top.asm
    5 00:4772 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4772 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4772 -  -  -  -  ;		Reviewed :	No
    8 00:4772 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4772 -  -  -  -  ;
   10 00:4772 -  -  -  -  ; ***************************************************************************************
   11 00:4772 -  -  -  -  ; ***************************************************************************************
   12 00:4772 -  -  -  -  
   13 00:4772 -  -  -  -  ; ***************************************************************************************
   14 00:4772 -  -  -  -  ;
   15 00:4772 -  -  -  -  ;							page unary function (no bracket)
   16 00:4772 -  -  -  -  ;
   17 00:4772 -  -  -  -  ; ***************************************************************************************
   18 00:4772 -  -  -  -  
   19 00:4772 -  -  -  -  Unary_Top:	;; [top]
   20 00:4772 2A 50 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4775 D9 -  -  -  			exx
   22 00:4776 2A 52 40 -  			ld 		hl,(TopMemory+2)
   23 00:4779 D9 -  -  -  			exx
   24 00:477A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:477C C9 -  -  -  			ret
   26 00:477D -  -  -  -  
   27 00:477D -  -  -  -  ; ***************************************************************************************
   28 00:477D -  -  -  -  ;
   29 00:477D -  -  -  -  ;									Changes and Updates
   30 00:477D -  -  -  -  ;
   31 00:477D -  -  -  -  ; ***************************************************************************************
   32 00:477D -  -  -  -  ;
   33 00:477D -  -  -  -  ;		Date			Notes
   34 00:477D -  -  -  -  ;		==== 			=====
   35 00:477D -  -  -  -  ;
   36 00:477D -  -  -  -  ; ***************************************************************************************
   37 00:477D -  -  -  -  			
Listing for file "_build.asm"
   49 00:477D -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:477D -  -  -  -  ; ***************************************************************************************
    2 00:477D -  -  -  -  ; ***************************************************************************************
    3 00:477D -  -  -  -  ;
    4 00:477D -  -  -  -  ;		Name : 		val.asm
    5 00:477D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:477D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:477D -  -  -  -  ;		Reviewed :	No
    8 00:477D -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:477D -  -  -  -  ;
   10 00:477D -  -  -  -  ; ***************************************************************************************
   11 00:477D -  -  -  -  ; ***************************************************************************************
   12 00:477D -  -  -  -  
   13 00:477D -  -  -  -  ; ***************************************************************************************
   14 00:477D -  -  -  -  ;
   15 00:477D -  -  -  -  ;								val( unary function
   16 00:477D -  -  -  -  ;
   17 00:477D -  -  -  -  ; ***************************************************************************************
   18 00:477D -  -  -  -  
   19 00:477D -  -  -  -  Unary_Val:	;; [val]
   20 00:477D CD 26 45 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:4780 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:4781 C1 -  -  -  		pop 	bc
   23 00:4782 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:4784 CD 44 4F -  		call 	Int32FromString 			; get the integer part.
   25 00:4787 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4789 C8 -  -  -  		ret		z 							; okay
   27 00:478A 3E 03 C3 53 
              43 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:478F -  -  -  -  
   29 00:478F -  -  -  -  ; ***************************************************************************************
   30 00:478F -  -  -  -  ;
   31 00:478F -  -  -  -  ;									Changes and Updates
   32 00:478F -  -  -  -  ;
   33 00:478F -  -  -  -  ; ***************************************************************************************
   34 00:478F -  -  -  -  ;
   35 00:478F -  -  -  -  ;		Date			Notes
   36 00:478F -  -  -  -  ;		==== 			=====
   37 00:478F -  -  -  -  ;
   38 00:478F -  -  -  -  ; ***************************************************************************************
   39 00:478F -  -  -  -  		
Listing for file "_build.asm"
   50 00:478F -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 00:478F -  -  -  -  ; ***************************************************************************************
    2 00:478F -  -  -  -  ; ***************************************************************************************
    3 00:478F -  -  -  -  ;
    4 00:478F -  -  -  -  ;		Name : 		locals.asm
    5 00:478F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:478F -  -  -  -  ;		Date : 		8th June 2022
    7 00:478F -  -  -  -  ;		Reviewed :	No
    8 00:478F -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 00:478F -  -  -  -  ;
   10 00:478F -  -  -  -  ; ***************************************************************************************
   11 00:478F -  -  -  -  ; ***************************************************************************************
   12 00:478F -  -  -  -  
   13 00:478F -  -  -  -  ; ***************************************************************************************
   14 00:478F -  -  -  -  ;
   15 00:478F -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
   16 00:478F -  -  -  -  ;			or parameter
   17 00:478F -  -  -  -  ;
   18 00:478F -  -  -  -  ; ***************************************************************************************
   19 00:478F -  -  -  -  
   20 00:478F -  -  -  -  PopLocals:
   21 00:478F 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
   22 00:4791 CD 7C 4A -  		call 	StackCheckFrame
   23 00:4794 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
   24 00:4795 -  -  -  -  
   25 00:4795 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   26 00:4796 -  -  -  -  
   27 00:4796 -  -  -  -  ; ***************************************************************************************
   28 00:4796 -  -  -  -  ;
   29 00:4796 -  -  -  -  ;									Changes and Updates
   30 00:4796 -  -  -  -  ;
   31 00:4796 -  -  -  -  ; ***************************************************************************************
   32 00:4796 -  -  -  -  ;
   33 00:4796 -  -  -  -  ;		Date			Notes
   34 00:4796 -  -  -  -  ;		==== 			=====
   35 00:4796 -  -  -  -  ;
   36 00:4796 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:4796 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 00:4796 -  -  -  -  ; ***************************************************************************************
    2 00:4796 -  -  -  -  ; ***************************************************************************************
    3 00:4796 -  -  -  -  ;
    4 00:4796 -  -  -  -  ;		Name : 		proc.asm
    5 00:4796 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4796 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4796 -  -  -  -  ;		Reviewed :	No
    8 00:4796 -  -  -  -  ;		Purpose :	Proc command
    9 00:4796 -  -  -  -  ;
   10 00:4796 -  -  -  -  ; ***************************************************************************************
   11 00:4796 -  -  -  -  ; ***************************************************************************************
   12 00:4796 -  -  -  -  
   13 00:4796 -  -  -  -  ; ***************************************************************************************
   14 00:4796 -  -  -  -  ;
   15 00:4796 -  -  -  -  ;										PROC Command
   16 00:4796 -  -  -  -  ;
   17 00:4796 -  -  -  -  ; ***************************************************************************************
   18 00:4796 -  -  -  -  
   19 00:4796 -  -  -  -  Command_PROC: 	;; [proc]
   20 00:4796 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 00:4798 CD 4C 4A -  			call 	StackOpenFrame 			; marker position.
   22 00:479B -  -  -  -  			;
   23 00:479B DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 00:479E FE 26 -  -  			cp 		IDENTIFIER_END
   25 00:47A0 D2 B0 43 -  			jp 		nc,SyntaxError 			; no , no call possible.
   26 00:47A3 CD E3 47 -  			call 	SearchProcedure 		; find procedure referenced at IX.
   27 00:47A6 -  -  -  -  			;
   28 00:47A6 -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 00:47A6 -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 00:47A6 -  -  -  -  			;
   31 00:47A6 D5 -  -  -  			push 	de 						; save start of line
   32 00:47A7 DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 00:47AA FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 00:47AC CC BF 47 -  			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 00:47AF -  -  -  -  			;
   36 00:47AF E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 00:47B0 -  -  -  -  			;
   38 00:47B0 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 00:47B2 CD 4C 4A -  			call 	StackOpenFrame 
   40 00:47B5 CD 81 4A -  			call 	StackSavePosition 		; and save the return address on the stack.
   41 00:47B8 -  -  -  -  
   42 00:47B8 DD E1 -  -  			pop 	ix 						; new position in code
   43 00:47BA E1 -  -  -  			pop 	hl 						; start of line
   44 00:47BB 22 58 40 -  			ld 		(CurrentLineStart),hl 	; save start of line
   45 00:47BE C9 -  -  -  			ret
   46 00:47BF -  -  -  -  
   47 00:47BF -  -  -  -  ; ***************************************************************************************
   48 00:47BF -  -  -  -  ;
   49 00:47BF -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 00:47BF -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 00:47BF -  -  -  -  ;
   52 00:47BF -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 00:47BF -  -  -  -  ;			final ) on the parameter lists.
   54 00:47BF -  -  -  -  ;
   55 00:47BF -  -  -  -  ; ***************************************************************************************
   56 00:47BF -  -  -  -  
   57 00:47BF -  -  -  -  ProcDoParameterList:
   58 00:47BF 76 -  -  -  			debug			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   59 00:47C0 -  -  -  -  
   60 00:47C0 -  -  -  -  ; ***************************************************************************************
   61 00:47C0 -  -  -  -  ;
   62 00:47C0 -  -  -  -  ;										ENDPROC Command
   63 00:47C0 -  -  -  -  ;
   64 00:47C0 -  -  -  -  ; ***************************************************************************************
   65 00:47C0 -  -  -  -  
   66 00:47C0 -  -  -  -  Command_ENDPROC: ;; [endproc]
   67 00:47C0 CD 8F 47 -  			call 	PopLocals 				; restore any locals (declared using LOCAL)
   68 00:47C3 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   69 00:47C5 CD 7C 4A -  			call 	StackCheckFrame
   70 00:47C8 20 14 -  -  			jr 		nz,_EndProcError
   71 00:47CA CD 9A 4A -  			call 	StackLoadPosition 		; restore position into IX/SOL
   72 00:47CD CD 6C 4A -  			call 	StackCloseFrame 		
   73 00:47D0 -  -  -  -  
   74 00:47D0 CD 8F 47 -  			call 	PopLocals 				; restore any locals (parameters)
   75 00:47D3 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
   76 00:47D5 CD 7C 4A -  			call 	StackCheckFrame
   77 00:47D8 20 04 -  -  			jr 		nz,_EndProcError
   78 00:47DA CD 6C 4A -  			call 	StackCloseFrame 		
   79 00:47DD C9 -  -  -  			ret
   80 00:47DE -  -  -  -  _EndProcError:
   81 00:47DE 3E 0F C3 53 
              43 -  -  -  			ERR_NOPROC
   82 00:47E3 -  -  -  -  
   83 00:47E3 -  -  -  -  ; ***************************************************************************************
   84 00:47E3 -  -  -  -  ;
   85 00:47E3 -  -  -  -  ;									Changes and Updates
   86 00:47E3 -  -  -  -  ;
   87 00:47E3 -  -  -  -  ; ***************************************************************************************
   88 00:47E3 -  -  -  -  ;
   89 00:47E3 -  -  -  -  ;		Date			Notes
   90 00:47E3 -  -  -  -  ;		==== 			=====
   91 00:47E3 -  -  -  -  ;
   92 00:47E3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:47E3 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 00:47E3 -  -  -  -  ; ***************************************************************************************
    2 00:47E3 -  -  -  -  ; ***************************************************************************************
    3 00:47E3 -  -  -  -  ;
    4 00:47E3 -  -  -  -  ;		Name : 		search.asm
    5 00:47E3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47E3 -  -  -  -  ;		Date : 		8th June 2022
    7 00:47E3 -  -  -  -  ;		Reviewed :	No
    8 00:47E3 -  -  -  -  ;		Purpose :	Search program for procedures
    9 00:47E3 -  -  -  -  ;
   10 00:47E3 -  -  -  -  ; ***************************************************************************************
   11 00:47E3 -  -  -  -  ; ***************************************************************************************
   12 00:47E3 -  -  -  -  
   13 00:47E3 -  -  -  -  ; ***************************************************************************************
   14 00:47E3 -  -  -  -  ;
   15 00:47E3 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 00:47E3 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 00:47E3 -  -  -  -  ;
   18 00:47E3 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 00:47E3 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 00:47E3 -  -  -  -  ;
   21 00:47E3 -  -  -  -  ; ***************************************************************************************
   22 00:47E3 -  -  -  -  
   23 00:47E3 -  -  -  -  SearchProcedure:
   24 00:47E3 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 00:47E6 -  -  -  -  
   26 00:47E6 2A 34 40 -  			ld 		hl,(CodeAddress) 		; start of program space
   27 00:47E9 -  -  -  -  			;
   28 00:47E9 -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 00:47E9 -  -  -  -  			;
   30 00:47E9 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 00:47EA B7 -  -  -  			or 		a
   32 00:47EB 28 37 -  -  			jr 		z,_SPFail
   33 00:47ED E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 00:47EE 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 00:47EF 23 -  -  -  			inc 	hl
   36 00:47F0 23 -  -  -  			inc 	hl
   37 00:47F1 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 00:47F2 FE B6 -  -  			cp 		KWD_DEF 				
   39 00:47F4 20 0B -  -  			jr 		nz,_SPNext
   40 00:47F6 23 -  -  -  			inc 	hl 				
   41 00:47F7 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 00:47F8 FE B7 -  -  			cp 		KWD_PROC
   43 00:47FA 20 05 -  -  			jr 		nz,_SPNext
   44 00:47FC 23 -  -  -  			inc 	hl
   45 00:47FD 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 00:47FE B9 -  -  -  			cp 		c
   47 00:47FF 28 08 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 00:4801 -  -  -  -  			;
   49 00:4801 -  -  -  -  			;		Advance to next entry.
   50 00:4801 -  -  -  -  			;			
   51 00:4801 E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 00:4802 11 00 00 -  			ld 		de,0 					; offset into UDE
   53 00:4805 5E -  -  -  			ld 		e,(hl)
   54 00:4806 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 00:4807 18 E0 -  -  			jr 		_SPLoop
   56 00:4809 -  -  -  -  			;
   57 00:4809 -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 00:4809 -  -  -  -  			; 		DEF PROC line.
   59 00:4809 -  -  -  -  			;		
   60 00:4809 -  -  -  -  			;		Already know the first characters match
   61 00:4809 -  -  -  -  			;
   62 00:4809 -  -  -  -  _SPFullCheck:
   63 00:4809 DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 00:480B -  -  -  -  _SPCheckLoop:
   65 00:480B DD 23 -  -  			inc 	ix 						; look at next character.
   66 00:480D 23 -  -  -  			inc 	hl
   67 00:480E DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 00:4811 FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 00:4813 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 00:4815 BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 00:4816 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 00:4818 -  -  -  -  			;
   73 00:4818 -  -  -  -  			;		Full check failed.
   74 00:4818 -  -  -  -  			;
   75 00:4818 -  -  -  -  _SPFullCheckFailed:			
   76 00:4818 DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 00:481A 18 E5 -  -  			jr 		_SPNext 				; do the next line.
   78 00:481C -  -  -  -  			;
   79 00:481C -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 00:481C -  -  -  -  			;
   81 00:481C -  -  -  -  _SPCheckBothEnd:
   82 00:481C 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 00:481D FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 00:481F 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 00:4821 -  -  -  -  			;
   86 00:4821 -  -  -  -  			;	 	We found it.
   87 00:4821 -  -  -  -  			;
   88 00:4821 C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 00:4822 D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 00:4823 C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 00:4824 -  -  -  -  
   92 00:4824 -  -  -  -  _SPFail: 									; come here when not found.
   93 00:4824 3E 13 C3 53 
              43 -  -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 00:4829 -  -  -  -  
   95 00:4829 -  -  -  -  ; ***************************************************************************************
   96 00:4829 -  -  -  -  ;
   97 00:4829 -  -  -  -  ;									Changes and Updates
   98 00:4829 -  -  -  -  ;
   99 00:4829 -  -  -  -  ; ***************************************************************************************
  100 00:4829 -  -  -  -  ;
  101 00:4829 -  -  -  -  ;		Date			Notes
  102 00:4829 -  -  -  -  ;		==== 			=====
  103 00:4829 -  -  -  -  ;
  104 00:4829 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:4829 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:4829 -  -  -  -  ; ***************************************************************************************
    2 00:4829 -  -  -  -  ; ***************************************************************************************
    3 00:4829 -  -  -  -  ;
    4 00:4829 -  -  -  -  ;		Name : 		allocate.asm
    5 00:4829 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4829 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4829 -  -  -  -  ;		Reviewed :	No
    8 00:4829 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:4829 -  -  -  -  ;
   10 00:4829 -  -  -  -  ; ***************************************************************************************
   11 00:4829 -  -  -  -  ; ***************************************************************************************
   12 00:4829 -  -  -  -  
   13 00:4829 -  -  -  -  ; ***************************************************************************************
   14 00:4829 -  -  -  -  ;
   15 00:4829 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:4829 -  -  -  -  ;
   17 00:4829 -  -  -  -  ; ***************************************************************************************
   18 00:4829 -  -  -  -  
   19 00:4829 -  -  -  -  AllocateBytes:
   20 00:4829 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:482A 21 00 00 -  		ld 		hl,$000000
   22 00:482D 62 -  -  -  		ld 		h,d
   23 00:482E 6B -  -  -  		ld 		l,e
   24 00:482F -  -  -  -  		;
   25 00:482F ED 5B 4C 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:4833 D5 -  -  -  		push 	de 							; save on stack
   27 00:4834 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:4835 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; update it
   29 00:4838 -  -  -  -  		;
   30 00:4838 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:4839 2A 48 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:483C AF -  -  -  		xor 	a
   33 00:483D ED 52 -  -  		sbc 	hl,de
   34 00:483F E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:4840 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:4841 3E 0A C3 53 
              43 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:4846 -  -  -  -  
   38 00:4846 -  -  -  -  ; ***************************************************************************************
   39 00:4846 -  -  -  -  ;
   40 00:4846 -  -  -  -  ;									Changes and Updates
   41 00:4846 -  -  -  -  ;
   42 00:4846 -  -  -  -  ; ***************************************************************************************
   43 00:4846 -  -  -  -  ;
   44 00:4846 -  -  -  -  ;		Date			Notes
   45 00:4846 -  -  -  -  ;		==== 			=====
   46 00:4846 -  -  -  -  ;
   47 00:4846 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:4846 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4846 -  -  -  -  ; ***************************************************************************************
    2 00:4846 -  -  -  -  ; ***************************************************************************************
    3 00:4846 -  -  -  -  ;
    4 00:4846 -  -  -  -  ;		Name : 		clear.asm
    5 00:4846 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4846 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4846 -  -  -  -  ;		Reviewed :	No
    8 00:4846 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4846 -  -  -  -  ;
   10 00:4846 -  -  -  -  ; ***************************************************************************************
   11 00:4846 -  -  -  -  ; ***************************************************************************************
   12 00:4846 -  -  -  -  
   13 00:4846 -  -  -  -  ; ***************************************************************************************
   14 00:4846 -  -  -  -  ;
   15 00:4846 -  -  -  -  ;										CLEAR command
   16 00:4846 -  -  -  -  ;
   17 00:4846 -  -  -  -  ; ***************************************************************************************
   18 00:4846 -  -  -  -  
   19 00:4846 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4846 -  -  -  -  		;
   21 00:4846 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4846 -  -  -  -  		;
   23 00:4846 2A 2C 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4849 -  -  -  -  _CCFindLow:
   25 00:4849 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:484C 5E -  -  -  		ld 		e,(hl)		
   27 00:484D 19 -  -  -  		add 	hl,de
   28 00:484E 7B -  -  -  		ld 		a,e
   29 00:484F B7 -  -  -  		or 		a
   30 00:4850 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4852 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4853 22 50 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4856 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4857 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:485A -  -  -  -  		;
   36 00:485A -  -  -  -  		; 	 		Reset the language stack
   37 00:485A -  -  -  -  		;
   38 00:485A 2A 30 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:485D -  -  -  -  		;
   40 00:485D 22 38 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:4860 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:4863 19 -  -  -  		add 	hl,de
   43 00:4864 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:4866 22 3C 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:4869 -  -  -  -  		;
   46 00:4869 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:486C 19 -  -  -  		add 	hl,de
   48 00:486D 22 40 40 -  		ld 		(StandardIntegers),hl
   49 00:4870 -  -  -  -  		;
   50 00:4870 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:4870 -  -  -  -  		;
   52 00:4870 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:4873 -  -  -  -  _CCFClearHT:
   54 00:4873 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:4874 36 00 -  -  		ld 		(hl),0
   56 00:4876 1B -  -  -  		dec 	de
   57 00:4877 7A -  -  -  		ld 		a,d
   58 00:4878 B3 -  -  -  		or 		e
   59 00:4879 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:487B 22 44 40 -  		ld 		(HashTableBase),hl 			; save table base
   61 00:487E -  -  -  -  		;
   62 00:487E -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:487E -  -  -  -  		;
   64 00:487E 22 48 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:4881 -  -  -  -  		;
   66 00:4881 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:4881 -  -  -  -  		;
   68 00:4881 CD DB 46 -  		call 	UnaryRandomInitialise
   69 00:4884 -  -  -  -  		;
   70 00:4884 -  -  -  -  		;		Erase the stack
   71 00:4884 -  -  -  -  		;
   72 00:4884 CD 42 4A -  		call 	StackReset 					; reset the basic stack to empty
   73 00:4887 C9 -  -  -  		ret
   74 00:4888 -  -  -  -  
   75 00:4888 -  -  -  -  ; ***************************************************************************************
   76 00:4888 -  -  -  -  ;
   77 00:4888 -  -  -  -  ;									Changes and Updates
   78 00:4888 -  -  -  -  ;
   79 00:4888 -  -  -  -  ; ***************************************************************************************
   80 00:4888 -  -  -  -  ;
   81 00:4888 -  -  -  -  ;		Date			Notes
   82 00:4888 -  -  -  -  ;		==== 			=====
   83 00:4888 -  -  -  -  ;
   84 00:4888 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4888 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4888 -  -  -  -  ; ***************************************************************************************
    2 00:4888 -  -  -  -  ; ***************************************************************************************
    3 00:4888 -  -  -  -  ;
    4 00:4888 -  -  -  -  ;		Name : 		instance.asm
    5 00:4888 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4888 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4888 -  -  -  -  ;		Reviewed :	No
    8 00:4888 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4888 -  -  -  -  ;
   10 00:4888 -  -  -  -  ; ***************************************************************************************
   11 00:4888 -  -  -  -  ; ***************************************************************************************
   12 00:4888 -  -  -  -  
   13 00:4888 -  -  -  -  ; ***************************************************************************************
   14 00:4888 -  -  -  -  ;
   15 00:4888 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4888 -  -  -  -  ;
   17 00:4888 -  -  -  -  ; ***************************************************************************************
   18 00:4888 -  -  -  -  
   19 00:4888 -  -  -  -  SetCurrentInstance:
   20 00:4888 ED 53 2C 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:488C 22 30 40 -  		ld 		(HighMemory),hl 
   22 00:488F ED 53 34 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:4893 -  -  -  -  
   24 00:4893 C9 -  -  -  		ret
   25 00:4894 -  -  -  -  
   26 00:4894 -  -  -  -  
   27 00:4894 -  -  -  -  ; ***************************************************************************************
   28 00:4894 -  -  -  -  ;
   29 00:4894 -  -  -  -  ;									Changes and Updates
   30 00:4894 -  -  -  -  ;
   31 00:4894 -  -  -  -  ; ***************************************************************************************
   32 00:4894 -  -  -  -  ;
   33 00:4894 -  -  -  -  ;		Date			Notes
   34 00:4894 -  -  -  -  ;		==== 			=====
   35 00:4894 -  -  -  -  ;
   36 00:4894 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4894 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:4894 -  -  -  -  ; ***************************************************************************************
    2 00:4894 -  -  -  -  ; ***************************************************************************************
    3 00:4894 -  -  -  -  ;
    4 00:4894 -  -  -  -  ;		Name : 		new.asm
    5 00:4894 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4894 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4894 -  -  -  -  ;		Reviewed :	No
    8 00:4894 -  -  -  -  ;		Purpose :	New command.
    9 00:4894 -  -  -  -  ;
   10 00:4894 -  -  -  -  ; ***************************************************************************************
   11 00:4894 -  -  -  -  ; ***************************************************************************************
   12 00:4894 -  -  -  -  
   13 00:4894 -  -  -  -  ; ***************************************************************************************
   14 00:4894 -  -  -  -  ;
   15 00:4894 -  -  -  -  ;										NEW command
   16 00:4894 -  -  -  -  ;
   17 00:4894 -  -  -  -  ; ***************************************************************************************
   18 00:4894 -  -  -  -  
   19 00:4894 -  -  -  -  Command_NEW: 	;; [new]
   20 00:4894 2A 34 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4897 36 00 -  -  		ld 		(hl),0
   22 00:4899 CD 46 48 -  		call 	Command_CLEAR 				; clear all variables
   23 00:489C 3E 00 C3 53 
              43 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:48A1 -  -  -  -  
   25 00:48A1 -  -  -  -  ; ***************************************************************************************
   26 00:48A1 -  -  -  -  ;
   27 00:48A1 -  -  -  -  ;									Changes and Updates
   28 00:48A1 -  -  -  -  ;
   29 00:48A1 -  -  -  -  ; ***************************************************************************************
   30 00:48A1 -  -  -  -  ;
   31 00:48A1 -  -  -  -  ;		Date			Notes
   32 00:48A1 -  -  -  -  ;		==== 			=====
   33 00:48A1 -  -  -  -  ;
   34 00:48A1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:48A1 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 00:48A1 -  -  -  -  ; ***************************************************************************************
    2 00:48A1 -  -  -  -  ; ***************************************************************************************
    3 00:48A1 -  -  -  -  ;
    4 00:48A1 -  -  -  -  ;		Name : 		for.asm
    5 00:48A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48A1 -  -  -  -  ;		Date : 		7th June 2022
    7 00:48A1 -  -  -  -  ;		Reviewed :	No
    8 00:48A1 -  -  -  -  ;		Purpose :	For/Next command
    9 00:48A1 -  -  -  -  ;
   10 00:48A1 -  -  -  -  ; ***************************************************************************************
   11 00:48A1 -  -  -  -  
   12 00:48A1 -  -  -  -  ; ***************************************************************************************
   13 00:48A1 -  -  -  -  ;
   14 00:48A1 -  -  -  -  ;									For Command
   15 00:48A1 -  -  -  -  ;
   16 00:48A1 -  -  -  -  ; ***************************************************************************************
   17 00:48A1 -  -  -  -  
   18 00:48A1 -  -  -  -  Command_FOR: ;; [for]
   19 00:48A1 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 00:48A3 CD 4C 4A -  			call 	StackOpenFrame
   21 00:48A6 -  -  -  -  			;
   22 00:48A6 -  -  -  -  			;		Variable Reference to increment
   23 00:48A6 -  -  -  -  			;
   24 00:48A6 DD E5 -  -  			push	ix 						; save start position
   25 00:48A8 3E FF -  -  			ld 		a,255 					; FOR can create
   26 00:48AA 32 7C 40 -  			ld 		(AllowAutoCreate),a
   27 00:48AD CD 93 45 -  			call 	EvaluateTerm 			; get term
   28 00:48B0 AF -  -  -  			xor 	a 						; autocreate off.
   29 00:48B1 32 7C 40 -  			ld 		(AllowAutoCreate),a
   30 00:48B4 DD E1 -  -  			pop 	ix 						; get start position
   31 00:48B6 E5 -  -  -  			push 	hl 						; save reference address.
   32 00:48B7 -  -  -  -  			;
   33 00:48B7 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 00:48B9 C2 B0 43 -  			jp 		nz,SyntaxError
   35 00:48BC EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 00:48BD -  -  -  -  			;
   37 00:48BD 2A 54 40 -  			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 00:48C0 01 06 00 -  			ld 		bc,6
   39 00:48C3 09 -  -  -  			add 	hl,bc 
   40 00:48C4 D1 -  -  -  			pop 	de 						; get reference.
   41 00:48C5 73 23 72 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 00:48CB -  -  -  -  			;
   43 00:48CB -  -  -  -  			;		var = value
   44 00:48CB -  -  -  -  			;
   45 00:48CB CD A7 41 -  			call 	Command_LET 			; so we do I = 1 or whatever.
   46 00:48CE -  -  -  -  			; 		
   47 00:48CE -  -  -  -  			; 		TO
   48 00:48CE -  -  -  -  			;
   49 00:48CE 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 00:48D0 CD 48 43 -  			call 	CheckNextA
   51 00:48D3 -  -  -  -  			;
   52 00:48D3 -  -  -  -  			;		value
   53 00:48D3 -  -  -  -  			;
   54 00:48D3 CD 38 45 -  			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 00:48D6 3E 0A -  -  			ld 		a,10
   56 00:48D8 CD 0F 49 -  			call 	CFWriteHLHLToA 
   57 00:48DB -  -  -  -  			;
   58 00:48DB -  -  -  -  			;		Check STEP ?
   59 00:48DB -  -  -  -  			;
   60 00:48DB 21 01 00 -  			ld 		hl,1 					; default STEP is 1.
   61 00:48DE D9 -  -  -  			exx
   62 00:48DF 21 00 00 -  			ld 		hl,0
   63 00:48E2 D9 -  -  -  			exx			
   64 00:48E3 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 00:48E6 FE B4 -  -  			cp 		KWD_STEP 				
   66 00:48E8 20 05 -  -  			jr 		nz,_CFDefaultStep
   67 00:48EA -  -  -  -  			;
   68 00:48EA DD 23 -  -  			inc 	ix 						; get step
   69 00:48EC CD 38 45 -  			call 	EvaluateInteger
   70 00:48EF -  -  -  -  _CFDefaultStep:			
   71 00:48EF 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 00:48F1 CD 0F 49 -  			call 	CFWriteHLHLToA 
   73 00:48F4 CD 81 4A -  			call 	StackSavePosition 		; save loop address
   74 00:48F7 C9 -  -  -  			ret
   75 00:48F8 -  -  -  -  
   76 00:48F8 -  -  -  -  ; ***************************************************************************************
   77 00:48F8 -  -  -  -  ;
   78 00:48F8 -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 00:48F8 -  -  -  -  ;
   80 00:48F8 -  -  -  -  ; ***************************************************************************************
   81 00:48F8 -  -  -  -  
   82 00:48F8 -  -  -  -  CFReadAToHLHL:
   83 00:48F8 01 00 00 -  			ld 		bc,0 					; BC = 00|A
   84 00:48FB 4F -  -  -  			ld 		c,a
   85 00:48FC 2A 54 40 -  			ld 		hl,(BasicSP) 			; add stack base
   86 00:48FF 09 -  -  -  			add 	hl,bc
   87 00:4900 -  -  -  -  
   88 00:4900 -  -  -  -  CFReadHLToHLHL:
   89 00:4900 E5 -  -  -  			push 	hl
   90 00:4901 7E 23 66 6F 			ld_ind_hl 						; get low word
   91 00:4905 D9 -  -  -  			exx
   92 00:4906 -  -  -  -  
   93 00:4906 E1 -  -  -  			pop 	hl 						; get high word
   94 00:4907 23 -  -  -  			inc 	hl
   95 00:4908 23 -  -  -  			inc 	hl
   96 00:4909 7E 23 66 6F 			ld_ind_hl
   97 00:490D D9 -  -  -  			exx
   98 00:490E -  -  -  -  
   99 00:490E C9 -  -  -  			ret
  100 00:490F -  -  -  -  
  101 00:490F -  -  -  -  ; ***************************************************************************************
  102 00:490F -  -  -  -  ;
  103 00:490F -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 00:490F -  -  -  -  ;
  105 00:490F -  -  -  -  ; ***************************************************************************************
  106 00:490F -  -  -  -  
  107 00:490F -  -  -  -  CFWriteHLHLToA:
  108 00:490F EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 00:4910 D9 -  -  -  			exx
  110 00:4911 EB -  -  -  			ex 		de,hl
  111 00:4912 D9 -  -  -  			exx
  112 00:4913 -  -  -  -  
  113 00:4913 01 00 00 -  			ld 		bc,0 					; BC = 00|A
  114 00:4916 4F -  -  -  			ld 		c,a
  115 00:4917 2A 54 40 -  			ld 		hl,(BasicSP) 			; add stack base
  116 00:491A 09 -  -  -  			add 	hl,bc
  117 00:491B -  -  -  -  
  118 00:491B -  -  -  -  CFWriteDEDEToHL:
  119 00:491B 73 -  -  -  			ld 		(hl),e 					; write low word
  120 00:491C 23 -  -  -  			inc 	hl
  121 00:491D 72 -  -  -  			ld 		(hl),d
  122 00:491E 23 -  -  -  			inc 	hl
  123 00:491F -  -  -  -  
  124 00:491F E5 -  -  -  			push 	hl 						; write high word
  125 00:4920 D9 -  -  -  			exx
  126 00:4921 E1 -  -  -  			pop 	hl
  127 00:4922 73 -  -  -  			ld 		(hl),e
  128 00:4923 23 -  -  -  			inc 	hl
  129 00:4924 72 -  -  -  			ld 		(hl),d
  130 00:4925 D9 -  -  -  			exx
  131 00:4926 C9 -  -  -  			ret			
  132 00:4927 -  -  -  -  
  133 00:4927 -  -  -  -  ; ***************************************************************************************
  134 00:4927 -  -  -  -  ;
  135 00:4927 -  -  -  -  ;									Next Command
  136 00:4927 -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 00:4927 -  -  -  -  ;
  138 00:4927 -  -  -  -  ; ***************************************************************************************
  139 00:4927 -  -  -  -  
  140 00:4927 -  -  -  -  Command_Next:	;; [next]
  141 00:4927 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 00:4929 CD 7C 4A -  			call 	StackCheckFrame
  143 00:492C -  -  -  -  			;
  144 00:492C -  -  -  -  			;		Get address of FOR variable
  145 00:492C -  -  -  -  			;
  146 00:492C 2A 54 40 -  			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 00:492F 01 06 00 -  			ld 		bc,6
  148 00:4932 09 -  -  -  			add 	hl,bc
  149 00:4933 7E 23 66 6F 			ld_ind_hl
  150 00:4937 -  -  -  -  			;
  151 00:4937 -  -  -  -  			; 		Save reference, read value into DE.
  152 00:4937 -  -  -  -  			;
  153 00:4937 E5 -  -  -  			push 	hl 						; save index address
  154 00:4938 CD 00 49 -  			call 	CFReadHLToHLHL 			; read the index value.
  155 00:493B -  -  -  -  
  156 00:493B EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 00:493C D9 -  -  -  			exx
  158 00:493D EB -  -  -  			ex 		de,hl
  159 00:493E D9 -  -  -  			exx
  160 00:493F -  -  -  -  			;
  161 00:493F -  -  -  -  			; 		Read step and Add
  162 00:493F -  -  -  -  			;
  163 00:493F 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 00:4941 CD F8 48 -  			call 	CFReadAToHLHL
  165 00:4944 D9 -  -  -  			exx 							; msb of step on stack
  166 00:4945 7C -  -  -  			ld 		a,h
  167 00:4946 D9 -  -  -  			exx
  168 00:4947 F5 -  -  -  			push 	af
  169 00:4948 CD DB 4F -  			call 	Int32Add 				; add step to offset => HL'HL
  170 00:494B -  -  -  -  			;
  171 00:494B -  -  -  -  			;		Put result in DE and write back out
  172 00:494B -  -  -  -  			;
  173 00:494B EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 00:494C D9 -  -  -  			exx
  175 00:494D EB -  -  -  			ex 		de,hl
  176 00:494E D9 -  -  -  			exx
  177 00:494F F1 -  -  -  			pop 	af 						; get msb of step
  178 00:4950 E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 00:4951 F5 -  -  -  			push 	af 						; push msb of step back.
  180 00:4952 CD 1B 49 -  			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 00:4955 -  -  -  -  			;
  182 00:4955 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 00:4955 -  -  -  -  			;
  184 00:4955 3E 0A -  -  			ld 		a,10 					; load limit
  185 00:4957 CD F8 48 -  			call 	CFReadAToHLHL
  186 00:495A CD 14 50 -  			call 	Int32Compare 			; compare limit to index.
  187 00:495D C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 00:495E B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 00:495F 28 0A -  -  			jr 		z,_CNXLoopBack
  190 00:4961 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 00:4963 28 02 -  -  			jr 		z,_CNXNotMStep
  192 00:4965 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 00:4967 -  -  -  -  _CNXNotMStep:			
  194 00:4967 E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 00:4969 20 03 -  -  			jr 		nz,_CNXLoopOver
  196 00:496B -  -  -  -  			;
  197 00:496B -  -  -  -  			;		For loop goes round again.
  198 00:496B -  -  -  -  			;
  199 00:496B -  -  -  -  _CNXLoopBack:			
  200 00:496B C3 9A 4A -  			jp 		StackLoadPosition
  201 00:496E -  -  -  -  			;
  202 00:496E -  -  -  -  			;		For loop completed
  203 00:496E -  -  -  -  			;
  204 00:496E -  -  -  -  _CNXLoopOver:
  205 00:496E C3 6C 4A -  			jp 		StackCloseFrame
  206 00:4971 76 -  -  -  			debug
  207 00:4972 -  -  -  -  
  208 00:4972 -  -  -  -  ; ***************************************************************************************
  209 00:4972 -  -  -  -  ;
  210 00:4972 -  -  -  -  ;									Changes and Updates
  211 00:4972 -  -  -  -  ;
  212 00:4972 -  -  -  -  ; ***************************************************************************************
  213 00:4972 -  -  -  -  ;
  214 00:4972 -  -  -  -  ;		Date			Notes
  215 00:4972 -  -  -  -  ;		==== 			=====
  216 00:4972 -  -  -  -  ;
  217 00:4972 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:4972 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:4972 -  -  -  -  ; ***************************************************************************************
    2 00:4972 -  -  -  -  ; ***************************************************************************************
    3 00:4972 -  -  -  -  ;
    4 00:4972 -  -  -  -  ;		Name : 		gosub.asm
    5 00:4972 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4972 -  -  -  -  ;		Date : 		7th June 2022
    7 00:4972 -  -  -  -  ;		Reviewed :	No
    8 00:4972 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:4972 -  -  -  -  ;
   10 00:4972 -  -  -  -  ; ***************************************************************************************
   11 00:4972 -  -  -  -  
   12 00:4972 -  -  -  -  ; ***************************************************************************************
   13 00:4972 -  -  -  -  ;
   14 00:4972 -  -  -  -  ;									Gosub Command
   15 00:4972 -  -  -  -  ;
   16 00:4972 -  -  -  -  ; ***************************************************************************************
   17 00:4972 -  -  -  -  
   18 00:4972 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:4972 3E 13 -  -  			ld		a,STM_GOSUB
   20 00:4974 CD 4C 4A -  			call 	StackOpenFrame
   21 00:4977 CD 9D 49 -  			call 	GoGetLineNumber
   22 00:497A E5 -  -  -  			push 	hl
   23 00:497B CD 81 4A -  			call 	StackSavePosition
   24 00:497E E1 -  -  -  			pop 	hl
   25 00:497F CD A8 49 -  			call	TransferToLineHL
   26 00:4982 C9 -  -  -  			ret
   27 00:4983 -  -  -  -  
   28 00:4983 -  -  -  -  ; ***************************************************************************************
   29 00:4983 -  -  -  -  ;
   30 00:4983 -  -  -  -  ;									Return command
   31 00:4983 -  -  -  -  ;
   32 00:4983 -  -  -  -  ; ***************************************************************************************
   33 00:4983 -  -  -  -  
   34 00:4983 -  -  -  -  Command_Return: ;; [return]
   35 00:4983 3E 13 -  -  			ld		a,STM_GOSUB
   36 00:4985 CD 7C 4A -  			call 	StackCheckFrame
   37 00:4988 20 07 -  -  			jr 		nz,_ReturnError
   38 00:498A CD 9A 4A -  			call 	StackLoadPosition
   39 00:498D CD 6C 4A -  			call 	StackCloseFrame
   40 00:4990 C9 -  -  -  			ret
   41 00:4991 -  -  -  -  _ReturnError:
   42 00:4991 3E 07 C3 53 
              43 -  -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:4996 -  -  -  -  
   44 00:4996 -  -  -  -  ; ***************************************************************************************
   45 00:4996 -  -  -  -  ;
   46 00:4996 -  -  -  -  ;									Changes and Updates
   47 00:4996 -  -  -  -  ;
   48 00:4996 -  -  -  -  ; ***************************************************************************************
   49 00:4996 -  -  -  -  ;
   50 00:4996 -  -  -  -  ;		Date			Notes
   51 00:4996 -  -  -  -  ;		==== 			=====
   52 00:4996 -  -  -  -  ;
   53 00:4996 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:4996 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:4996 -  -  -  -  ; ***************************************************************************************
    2 00:4996 -  -  -  -  ; ***************************************************************************************
    3 00:4996 -  -  -  -  ;
    4 00:4996 -  -  -  -  ;		Name : 		goto.asm
    5 00:4996 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4996 -  -  -  -  ;		Date : 		6th June 2022
    7 00:4996 -  -  -  -  ;		Reviewed :	No
    8 00:4996 -  -  -  -  ;		Purpose :	Goto command
    9 00:4996 -  -  -  -  ;
   10 00:4996 -  -  -  -  ; ***************************************************************************************
   11 00:4996 -  -  -  -  
   12 00:4996 -  -  -  -  ; ***************************************************************************************
   13 00:4996 -  -  -  -  ;
   14 00:4996 -  -  -  -  ;									Goto Command
   15 00:4996 -  -  -  -  ;
   16 00:4996 -  -  -  -  ; ***************************************************************************************
   17 00:4996 -  -  -  -  
   18 00:4996 -  -  -  -  Command_GOTO: ;; [goto]
   19 00:4996 CD 9D 49 -  			call 	GoGetLineNumber
   20 00:4999 CD A8 49 -  			call	TransferToLineHL
   21 00:499C C9 -  -  -  			ret
   22 00:499D -  -  -  -  
   23 00:499D -  -  -  -  ; ***************************************************************************************
   24 00:499D -  -  -  -  ;
   25 00:499D -  -  -  -  ;							Get and validate a line number in HL
   26 00:499D -  -  -  -  ;
   27 00:499D -  -  -  -  ; ***************************************************************************************
   28 00:499D -  -  -  -  
   29 00:499D -  -  -  -  GoGetLineNumber:
   30 00:499D CD 38 45 -  			call 	EvaluateInteger
   31 00:49A0 D9 -  -  -  			exx
   32 00:49A1 7C -  -  -  			ld 		a,h
   33 00:49A2 B5 -  -  -  			or 		l
   34 00:49A3 D9 -  -  -  			exx
   35 00:49A4 C8 -  -  -  			ret 	z
   36 00:49A5 C3 AB 43 -  			jp 		BadValue
   37 00:49A8 -  -  -  -  
   38 00:49A8 -  -  -  -  ; ***************************************************************************************
   39 00:49A8 -  -  -  -  ;
   40 00:49A8 -  -  -  -  ;							Transfer to Line Number HL
   41 00:49A8 -  -  -  -  ;
   42 00:49A8 -  -  -  -  ; ***************************************************************************************
   43 00:49A8 -  -  -  -  
   44 00:49A8 -  -  -  -  TransferToLineHL:
   45 00:49A8 EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:49A9 01 00 00 -  			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:49AC DD 2A 34 40 			ld 		ix,(CodeAddress)
   48 00:49B0 -  -  -  -  _TLSearch:	
   49 00:49B0 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:49B2 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:49B5 B7 -  -  -  			or 		a 						; if zero
   52 00:49B6 28 18 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:49B8 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:49B9 -  -  -  -  
   55 00:49B9 7B -  -  -  			ld 		a,e						; compare line address
   56 00:49BA DD BE 01 -  			cp 		(ix+1)
   57 00:49BD 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:49BF 7A -  -  -  			ld 		a,d
   59 00:49C0 DD BE 02 -  			cp 		(ix+2)
   60 00:49C3 20 EB -  -  			jr 		nz,_TLSearch
   61 00:49C5 -  -  -  -  			;
   62 00:49C5 DD 22 58 40 			ld 		(CurrentLineStart),ix 	; set line start
   63 00:49C9 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:49CB DD 23 -  -  			inc 	ix
   65 00:49CD DD 23 -  -  			inc 	ix
   66 00:49CF -  -  -  -  
   67 00:49CF C9 -  -  -  			ret
   68 00:49D0 -  -  -  -  
   69 00:49D0 -  -  -  -  _TLNotFound:
   70 00:49D0 3E 09 C3 53 
              43 -  -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:49D5 -  -  -  -  
   72 00:49D5 -  -  -  -  ; ***************************************************************************************
   73 00:49D5 -  -  -  -  ;
   74 00:49D5 -  -  -  -  ;									Changes and Updates
   75 00:49D5 -  -  -  -  ;
   76 00:49D5 -  -  -  -  ; ***************************************************************************************
   77 00:49D5 -  -  -  -  ;
   78 00:49D5 -  -  -  -  ;		Date			Notes
   79 00:49D5 -  -  -  -  ;		==== 			=====
   80 00:49D5 -  -  -  -  ;
   81 00:49D5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:49D5 -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 00:49D5 -  -  -  -  ; ***************************************************************************************
    2 00:49D5 -  -  -  -  ; ***************************************************************************************
    3 00:49D5 -  -  -  -  ;
    4 00:49D5 -  -  -  -  ;		Name : 		if.asm
    5 00:49D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49D5 -  -  -  -  ;		Date : 		8th June 2022
    7 00:49D5 -  -  -  -  ;		Reviewed :	No
    8 00:49D5 -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 00:49D5 -  -  -  -  ;
   10 00:49D5 -  -  -  -  ; ***************************************************************************************
   11 00:49D5 -  -  -  -  
   12 00:49D5 -  -  -  -  ; ***************************************************************************************
   13 00:49D5 -  -  -  -  ;
   14 00:49D5 -  -  -  -  ;									If Command
   15 00:49D5 -  -  -  -  ;
   16 00:49D5 -  -  -  -  ; ***************************************************************************************
   17 00:49D5 -  -  -  -  
   18 00:49D5 -  -  -  -  Command_IF: ;; [if]
   19 00:49D5 CD 38 45 -  		call 	EvaluateInteger 			; work out the test.
   20 00:49D8 CD 0D 50 -  		call 	Int32Zero 					; test if zero
   21 00:49DB 28 1A -  -  		jr 		z,_IFFail
   22 00:49DD -  -  -  -  		;
   23 00:49DD -  -  -  -  		;	 	Passed
   24 00:49DD -  -  -  -  		;
   25 00:49DD DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 00:49E0 DD 23 -  -  		inc 	ix
   27 00:49E2 FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 00:49E4 CA 96 49 -  		jp 		z,Command_GOTO
   29 00:49E7 FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 00:49E9 C2 B0 43 -  		jp 		nz,SyntaxError
   31 00:49EC DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 00:49EF E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 00:49F1 FE 40 -  -  		cp 		$40
   34 00:49F3 CA 96 49 -  		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 00:49F6 C9 -  -  -  		ret 								; otherwise carry on.
   36 00:49F7 -  -  -  -  		;
   37 00:49F7 -  -  -  -  		;		Failed.
   38 00:49F7 -  -  -  -  		;
   39 00:49F7 -  -  -  -  _IFFail:
   40 00:49F7 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 00:49F9 0E B1 -  -  		ld 		c,KWD_ELSE
   42 00:49FB CD 29 4A -  		call 	SearchForwardTokens 		; searching forward.
   43 00:49FE FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 00:4A00 CA 94 41 -  		jp 		z,EOLHandler 				; do the next line code.
   45 00:4A03 C9 -  -  -  		ret 								; otherwise carry on.
   46 00:4A04 -  -  -  -  
   47 00:4A04 -  -  -  -  ; ***************************************************************************************
   48 00:4A04 -  -  -  -  ;
   49 00:4A04 -  -  -  -  ;						Else command => Progress to next line
   50 00:4A04 -  -  -  -  ;
   51 00:4A04 -  -  -  -  ; ***************************************************************************************
   52 00:4A04 -  -  -  -  
   53 00:4A04 -  -  -  -  Command_Else: ;; [else]
   54 00:4A04 C3 94 41 -  		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 00:4A07 -  -  -  -  
   56 00:4A07 -  -  -  -  ; ***************************************************************************************
   57 00:4A07 -  -  -  -  ;
   58 00:4A07 -  -  -  -  ;									Changes and Updates
   59 00:4A07 -  -  -  -  ;
   60 00:4A07 -  -  -  -  ; ***************************************************************************************
   61 00:4A07 -  -  -  -  ;
   62 00:4A07 -  -  -  -  ;		Date			Notes
   63 00:4A07 -  -  -  -  ;		==== 			=====
   64 00:4A07 -  -  -  -  ;
   65 00:4A07 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:4A07 -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:4A07 -  -  -  -  ; ***************************************************************************************
    2 00:4A07 -  -  -  -  ; ***************************************************************************************
    3 00:4A07 -  -  -  -  ;
    4 00:4A07 -  -  -  -  ;		Name : 		repeat.asm
    5 00:4A07 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A07 -  -  -  -  ;		Date : 		7th June 2022
    7 00:4A07 -  -  -  -  ;		Reviewed :	No
    8 00:4A07 -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:4A07 -  -  -  -  ;
   10 00:4A07 -  -  -  -  ; ***************************************************************************************
   11 00:4A07 -  -  -  -  
   12 00:4A07 -  -  -  -  ; ***************************************************************************************
   13 00:4A07 -  -  -  -  ;
   14 00:4A07 -  -  -  -  ;									Repeat Command
   15 00:4A07 -  -  -  -  ;
   16 00:4A07 -  -  -  -  ; ***************************************************************************************
   17 00:4A07 -  -  -  -  
   18 00:4A07 -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:4A07 3E 23 -  -  			ld		a,STM_REPEAT
   20 00:4A09 CD 4C 4A -  			call 	StackOpenFrame
   21 00:4A0C CD 81 4A -  			call 	StackSavePosition
   22 00:4A0F C9 -  -  -  			ret
   23 00:4A10 -  -  -  -  
   24 00:4A10 -  -  -  -  ; ***************************************************************************************
   25 00:4A10 -  -  -  -  ;
   26 00:4A10 -  -  -  -  ;									Until command
   27 00:4A10 -  -  -  -  ;
   28 00:4A10 -  -  -  -  ; ***************************************************************************************
   29 00:4A10 -  -  -  -  
   30 00:4A10 -  -  -  -  Command_Until: ;; [until]
   31 00:4A10 3E 23 -  -  			ld		a,STM_REPEAT
   32 00:4A12 CD 7C 4A -  			call 	StackCheckFrame
   33 00:4A15 20 0D -  -  			jr 		nz,_UntilError
   34 00:4A17 CD 38 45 -  			call	EvaluateInteger 		; until what
   35 00:4A1A CD 0D 50 -  			call 	Int32Zero 				; check zero
   36 00:4A1D CA 9A 4A -  			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:4A20 CD 6C 4A -  			call 	StackCloseFrame 		; otherwise end frame.
   38 00:4A23 C9 -  -  -  			ret
   39 00:4A24 -  -  -  -  _UntilError:
   40 00:4A24 3E 14 C3 53 
              43 -  -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:4A29 -  -  -  -  
   42 00:4A29 -  -  -  -  ; ***************************************************************************************
   43 00:4A29 -  -  -  -  ;
   44 00:4A29 -  -  -  -  ;									Changes and Updates
   45 00:4A29 -  -  -  -  ;
   46 00:4A29 -  -  -  -  ; ***************************************************************************************
   47 00:4A29 -  -  -  -  ;
   48 00:4A29 -  -  -  -  ;		Date			Notes
   49 00:4A29 -  -  -  -  ;		==== 			=====
   50 00:4A29 -  -  -  -  ;
   51 00:4A29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:4A29 -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 00:4A29 -  -  -  -  ; ***************************************************************************************
    2 00:4A29 -  -  -  -  ; ***************************************************************************************
    3 00:4A29 -  -  -  -  ;
    4 00:4A29 -  -  -  -  ;		Name : 		search.asm
    5 00:4A29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A29 -  -  -  -  ;		Date : 		8th June 2022
    7 00:4A29 -  -  -  -  ;		Reviewed :	No
    8 00:4A29 -  -  -  -  ;		Purpose :	Search forward for token
    9 00:4A29 -  -  -  -  ;
   10 00:4A29 -  -  -  -  ; ***************************************************************************************
   11 00:4A29 -  -  -  -  
   12 00:4A29 -  -  -  -  ; ***************************************************************************************
   13 00:4A29 -  -  -  -  ;
   14 00:4A29 -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 00:4A29 -  -  -  -  ; 		and IX points to next byte.
   16 00:4A29 -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 00:4A29 -  -  -  -  ;
   18 00:4A29 -  -  -  -  ; ***************************************************************************************
   19 00:4A29 -  -  -  -  
   20 00:4A29 -  -  -  -  SearchForwardTokens:
   21 00:4A29 DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 00:4A2C DD 23 -  -  		inc 	ix
   23 00:4A2E B8 -  -  -  		cp 		b 							; exit if either found.
   24 00:4A2F C8 -  -  -  		ret 	z
   25 00:4A30 B9 -  -  -  		cp 		c
   26 00:4A31 C8 -  -  -  		ret 	z
   27 00:4A32 -  -  -  -  		;
   28 00:4A32 FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 00:4A34 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 00:4A36 -  -  -  -  
   31 00:4A36 11 00 00 -  		ld 		de,0 						; put length into DE
   32 00:4A39 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4A3C 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 00:4A3D 13 -  -  -  		inc 	de
   35 00:4A3E DD 19 -  -  		add 	ix,de 						; jump forward
   36 00:4A40 18 E7 -  -  		jr 		SearchForwardTokens
   37 00:4A42 -  -  -  -  
   38 00:4A42 -  -  -  -  ; ***************************************************************************************
   39 00:4A42 -  -  -  -  ;
   40 00:4A42 -  -  -  -  ;									Changes and Updates
   41 00:4A42 -  -  -  -  ;
   42 00:4A42 -  -  -  -  ; ***************************************************************************************
   43 00:4A42 -  -  -  -  ;
   44 00:4A42 -  -  -  -  ;		Date			Notes
   45 00:4A42 -  -  -  -  ;		==== 			=====
   46 00:4A42 -  -  -  -  ;
   47 00:4A42 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4A42 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:4A42 -  -  -  -  ; ***************************************************************************************
    2 00:4A42 -  -  -  -  ; ***************************************************************************************
    3 00:4A42 -  -  -  -  ;
    4 00:4A42 -  -  -  -  ;		Name : 		stack.asm
    5 00:4A42 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A42 -  -  -  -  ;		Date : 		6th June 2022
    7 00:4A42 -  -  -  -  ;		Reviewed :	No
    8 00:4A42 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:4A42 -  -  -  -  ;
   10 00:4A42 -  -  -  -  ; ***************************************************************************************
   11 00:4A42 -  -  -  -  ; ***************************************************************************************
   12 00:4A42 -  -  -  -  ;
   13 00:4A42 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:4A42 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 00:4A42 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:4A42 -  -  -  -  ;
   17 00:4A42 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:4A42 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:4A42 -  -  -  -  ;
   20 00:4A42 -  -  -  -  ; ***************************************************************************************
   21 00:4A42 -  -  -  -  ;
   22 00:4A42 -  -  -  -  ;								Clear the stack
   23 00:4A42 -  -  -  -  ;
   24 00:4A42 -  -  -  -  ; ***************************************************************************************
   25 00:4A42 -  -  -  -  
   26 00:4A42 -  -  -  -  StackReset:
   27 00:4A42 2A 38 40 -  		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:4A45 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:4A46 22 54 40 -  		ld 		(BasicSP),hl 				; write out current position
   30 00:4A49 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:4A4B C9 -  -  -  		ret
   32 00:4A4C -  -  -  -  
   33 00:4A4C -  -  -  -  ; ***************************************************************************************
   34 00:4A4C -  -  -  -  ;
   35 00:4A4C -  -  -  -  ;								Open a stack frame type A
   36 00:4A4C -  -  -  -  ;
   37 00:4A4C -  -  -  -  ; ***************************************************************************************
   38 00:4A4C -  -  -  -  
   39 00:4A4C -  -  -  -  StackOpenFrame:
   40 00:4A4C F5 -  -  -  		push 	af 							; save frame type
   41 00:4A4D E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:4A4F 87 -  -  -  		add 	a,a 						; double it
   43 00:4A50 11 00 00 -  		ld 		de,$0000 					; put in UDE
   44 00:4A53 5F -  -  -  		ld 		e,a
   45 00:4A54 2A 54 40 -  		ld 		hl,(BasicSP) 				; get stack pointer
   46 00:4A57 AF -  -  -  		xor 	a
   47 00:4A58 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 00:4A5A 22 54 40 -  		ld 		(BasicSP),hl
   49 00:4A5D F1 -  -  -  		pop 	af 							; copy out frame type
   50 00:4A5E 77 -  -  -  		ld 		(hl),a
   51 00:4A5F ED 5B 3C 40 		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 00:4A63 AF -  -  -  		xor 	a
   53 00:4A64 ED 52 -  -  		sbc 	hl,de
   54 00:4A66 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 00:4A67 3E 15 C3 53 
              43 -  -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 00:4A6C -  -  -  -  
   57 00:4A6C -  -  -  -  ; ***************************************************************************************
   58 00:4A6C -  -  -  -  ;
   59 00:4A6C -  -  -  -  ;								Close Stack Frame
   60 00:4A6C -  -  -  -  ;
   61 00:4A6C -  -  -  -  ; ***************************************************************************************
   62 00:4A6C -  -  -  -  
   63 00:4A6C -  -  -  -  StackCloseFrame:
   64 00:4A6C 2A 54 40 -  		ld 		hl,(BasicSP)				; get stack frame
   65 00:4A6F 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 00:4A70 E6 0F -  -  		and 	$0F 						; put into UDE
   67 00:4A72 87 -  -  -  		add 	a,a 						; double it
   68 00:4A73 11 00 00 -  		ld 		de,$000000
   69 00:4A76 5F -  -  -  		ld 		e,a
   70 00:4A77 19 -  -  -  		add 	hl,de 						; close it
   71 00:4A78 22 54 40 -  		ld 		(BasicSP),hl 				; write it back
   72 00:4A7B C9 -  -  -  		ret
   73 00:4A7C -  -  -  -  
   74 00:4A7C -  -  -  -  ; ***************************************************************************************
   75 00:4A7C -  -  -  -  ;
   76 00:4A7C -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 00:4A7C -  -  -  -  ;
   78 00:4A7C -  -  -  -  ; ***************************************************************************************
   79 00:4A7C -  -  -  -  
   80 00:4A7C -  -  -  -  StackCheckFrame:
   81 00:4A7C 2A 54 40 -  		ld 		hl,(BasicSP)				; get stack frame
   82 00:4A7F BE -  -  -  		cp 		(hl) 						; get stack marker
   83 00:4A80 C9 -  -  -  		ret
   84 00:4A81 -  -  -  -  
   85 00:4A81 -  -  -  -  ; ***************************************************************************************
   86 00:4A81 -  -  -  -  ;
   87 00:4A81 -  -  -  -  ;								Save position on stack
   88 00:4A81 -  -  -  -  ;
   89 00:4A81 -  -  -  -  ; ***************************************************************************************
   90 00:4A81 -  -  -  -  
   91 00:4A81 -  -  -  -  StackSavePosition:
   92 00:4A81 2A 54 40 -  		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 00:4A84 23 -  -  -  		inc 	hl
   94 00:4A85 ED 5B 58 40 		ld 		de,(CurrentLineStart) 		; work out current start line
   95 00:4A89 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 00:4A8F -  -  -  -  		;
   97 00:4A8F E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 00:4A90 DD E5 -  -  		push 	ix 							; HL = current position
   99 00:4A92 E1 -  -  -  		pop 	hl
  100 00:4A93 AF -  -  -  		xor 	a 							; calculate offset
  101 00:4A94 ED 52 -  -  		sbc 	hl,de
  102 00:4A96 7D -  -  -  		ld 		a,l 						; into A
  103 00:4A97 E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 00:4A98 77 -  -  -  		ld 		(hl),a
  105 00:4A99 C9 -  -  -  		ret
  106 00:4A9A -  -  -  -  
  107 00:4A9A -  -  -  -  ; ***************************************************************************************
  108 00:4A9A -  -  -  -  ;
  109 00:4A9A -  -  -  -  ;								Load position off stack
  110 00:4A9A -  -  -  -  ;
  111 00:4A9A -  -  -  -  ; ***************************************************************************************
  112 00:4A9A -  -  -  -  
  113 00:4A9A -  -  -  -  StackLoadPosition:
  114 00:4A9A 2A 54 40 -  		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 00:4A9D 23 -  -  -  		inc 	hl
  116 00:4A9E E5 -  -  -  		push 	hl 							; save on stack
  117 00:4A9F 7E 23 66 6F 		ld_ind_hl 							; get start of line
  118 00:4AA3 22 58 40 -  		ld 		(CurrentLineStart),hl 		; write it back
  119 00:4AA6 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 00:4AA7 13 -  -  -  		inc 	de
  121 00:4AA8 13 -  -  -  		inc 	de
  122 00:4AA9 13 -  -  -  		inc 	de
  123 00:4AAA 13 -  -  -  		inc 	de
  124 00:4AAB 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 00:4AAC 11 00 00 -  		ld 		de,$000000
  126 00:4AAF 5F -  -  -  		ld 		e,a
  127 00:4AB0 19 -  -  -  		add 	hl,de 						; add to start => position
  128 00:4AB1 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 00:4AB2 DD E1 -  -  		pop 	ix
  130 00:4AB4 C9 -  -  -  		ret
  131 00:4AB5 -  -  -  -  
  132 00:4AB5 -  -  -  -  ; ***************************************************************************************
  133 00:4AB5 -  -  -  -  ;
  134 00:4AB5 -  -  -  -  ;									Changes and Updates
  135 00:4AB5 -  -  -  -  ;
  136 00:4AB5 -  -  -  -  ; ***************************************************************************************
  137 00:4AB5 -  -  -  -  ;
  138 00:4AB5 -  -  -  -  ;		Date			Notes
  139 00:4AB5 -  -  -  -  ;		==== 			=====
  140 00:4AB5 -  -  -  -  ;
  141 00:4AB5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:4AB5 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:4AB5 -  -  -  -  ; ***************************************************************************************
    2 00:4AB5 -  -  -  -  ; ***************************************************************************************
    3 00:4AB5 -  -  -  -  ;
    4 00:4AB5 -  -  -  -  ;		Name : 		utility.asm
    5 00:4AB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AB5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AB5 -  -  -  -  ;		Reviewed :	No
    8 00:4AB5 -  -  -  -  ;		Purpose :	Utility routines
    9 00:4AB5 -  -  -  -  ;
   10 00:4AB5 -  -  -  -  ; ***************************************************************************************
   11 00:4AB5 -  -  -  -  ; ***************************************************************************************
   12 00:4AB5 -  -  -  -  
   13 00:4AB5 -  -  -  -  ; ***************************************************************************************
   14 00:4AB5 -  -  -  -  ;
   15 00:4AB5 -  -  -  -  ;							Print ASCII string at HL
   16 00:4AB5 -  -  -  -  ;
   17 00:4AB5 -  -  -  -  ; ***************************************************************************************
   18 00:4AB5 -  -  -  -  
   19 00:4AB5 -  -  -  -  PrintStringAtHL:
   20 00:4AB5 7E -  -  -  		ld 		a,(hl)
   21 00:4AB6 FE 20 -  -  		cp 		$20		
   22 00:4AB8 D8 -  -  -  		ret 	c
   23 00:4AB9 CD 9C 50 -  		call 	SYSPrintChar
   24 00:4ABC 23 -  -  -  		inc 	hl
   25 00:4ABD 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:4ABF -  -  -  -  
   27 00:4ABF -  -  -  -  ; ***************************************************************************************
   28 00:4ABF -  -  -  -  ;
   29 00:4ABF -  -  -  -  ;									Changes and Updates
   30 00:4ABF -  -  -  -  ;
   31 00:4ABF -  -  -  -  ; ***************************************************************************************
   32 00:4ABF -  -  -  -  ;
   33 00:4ABF -  -  -  -  ;		Date			Notes
   34 00:4ABF -  -  -  -  ;		==== 			=====
   35 00:4ABF -  -  -  -  ;
   36 00:4ABF -  -  -  -  ; ***************************************************************************************
   37 00:4ABF -  -  -  -  		
Listing for file "_build.asm"
   65 00:4ABF -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:4ABF -  -  -  -  ; ***************************************************************************************
    2 00:4ABF -  -  -  -  ; ***************************************************************************************
    3 00:4ABF -  -  -  -  ;
    4 00:4ABF -  -  -  -  ;		Name : 		create.asm
    5 00:4ABF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4ABF -  -  -  -  ;		Date : 		4th June 2022
    7 00:4ABF -  -  -  -  ;		Reviewed :	No
    8 00:4ABF -  -  -  -  ;		Purpose :	Create a variable.
    9 00:4ABF -  -  -  -  ;
   10 00:4ABF -  -  -  -  ; ***************************************************************************************
   11 00:4ABF -  -  -  -  ; ***************************************************************************************
   12 00:4ABF -  -  -  -  
   13 00:4ABF -  -  -  -  ; ***************************************************************************************
   14 00:4ABF -  -  -  -  ;
   15 00:4ABF -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:4ABF -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:4ABF -  -  -  -  ;
   18 00:4ABF -  -  -  -  ; ***************************************************************************************
   19 00:4ABF -  -  -  -  
   20 00:4ABF -  -  -  -  VariableCreate:		
   21 00:4ABF -  -  -  -  		;
   22 00:4ABF -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:4ABF -  -  -  -  		;
   24 00:4ABF 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:4AC2 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:4AC3 E5 -  -  -  		push 	hl 							; save count.
   27 00:4AC4 CD 29 48 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:4AC7 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:4AC8 -  -  -  -  		;
   30 00:4AC8 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:4AC8 -  -  -  -  		;
   32 00:4AC8 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:4AC9 -  -  -  -  _VCClear:
   34 00:4AC9 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:4ACB 23 -  -  -  		inc 	hl
   36 00:4ACC 0B -  -  -  		dec 	bc
   37 00:4ACD 78 -  -  -  		ld		a,b
   38 00:4ACE B1 -  -  -  		or 		c
   39 00:4ACF 20 F8 -  -  		jr 		nz,_VCClear
   40 00:4AD1 E1 -  -  -  		pop 	hl							; restore start address
   41 00:4AD2 -  -  -  -  		;
   42 00:4AD2 -  -  -  -  		;		Now start to create the data.
   43 00:4AD2 -  -  -  -  		;
   44 00:4AD2 E5 -  -  -  		push 	hl 							; save start
   45 00:4AD3 -  -  -  -  		;
   46 00:4AD3 -  -  -  -  		;		Write hash to +0
   47 00:4AD3 -  -  -  -  		;
   48 00:4AD3 3A 84 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:4AD6 77 -  -  -  		ld 		(hl),a
   50 00:4AD7 23 -  -  -  		inc 	hl
   51 00:4AD8 -  -  -  -  		;
   52 00:4AD8 -  -  -  -  		;		Write list head to +1
   53 00:4AD8 -  -  -  -  		;
   54 00:4AD8 E5 -  -  -  		push 	hl 							; save write position
   55 00:4AD9 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:4ADC 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:4AE0 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:4AE1 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:4AE2 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:4AE8 -  -  -  -  		;
   61 00:4AE8 -  -  -  -  		;		Write variable name to +5
   62 00:4AE8 -  -  -  -  		;
   63 00:4AE8 ED 5B 80 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4AEC 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:4AF2 -  -  -  -  		;
   66 00:4AF2 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:4AF3 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:4AF6 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4AFC -  -  -  -  		;
   70 00:4AFC EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4AFD C9 -  -  -  		ret
   72 00:4AFE -  -  -  -  
   73 00:4AFE -  -  -  -  ; ***************************************************************************************
   74 00:4AFE -  -  -  -  ;
   75 00:4AFE -  -  -  -  ;									Changes and Updates
   76 00:4AFE -  -  -  -  ;
   77 00:4AFE -  -  -  -  ; ***************************************************************************************
   78 00:4AFE -  -  -  -  ;
   79 00:4AFE -  -  -  -  ;		Date			Notes
   80 00:4AFE -  -  -  -  ;		==== 			=====
   81 00:4AFE -  -  -  -  ;
   82 00:4AFE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4AFE -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4AFE -  -  -  -  ; ***************************************************************************************
    2 00:4AFE -  -  -  -  ; ***************************************************************************************
    3 00:4AFE -  -  -  -  ;
    4 00:4AFE -  -  -  -  ;		Name : 		find.asm
    5 00:4AFE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4AFE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4AFE -  -  -  -  ;		Reviewed :	No
    8 00:4AFE -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4AFE -  -  -  -  ;
   10 00:4AFE -  -  -  -  ; ***************************************************************************************
   11 00:4AFE -  -  -  -  ; ***************************************************************************************
   12 00:4AFE -  -  -  -  
   13 00:4AFE -  -  -  -  ; ***************************************************************************************
   14 00:4AFE -  -  -  -  ;
   15 00:4AFE -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4AFE -  -  -  -  ; 		variable information at (IX)
   17 00:4AFE -  -  -  -  ;
   18 00:4AFE -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4AFE -  -  -  -  ;		Don't autocreate arrays.
   20 00:4AFE -  -  -  -  ;
   21 00:4AFE -  -  -  -  ; ***************************************************************************************
   22 00:4AFE -  -  -  -  
   23 00:4AFE -  -  -  -  FindVariable:
   24 00:4AFE DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:4B01 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:4B03 D2 B0 43 -  		jp 		nc,SyntaxError 		
   27 00:4B06 -  -  -  -  
   28 00:4B06 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4B09 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4B0B 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4B0D FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:4B0F 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:4B11 -  -  -  -  		;
   34 00:4B11 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:4B11 -  -  -  -  		;
   36 00:4B11 2A 40 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:4B14 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:4B17 87 -  -  -  		add 	a,a 						; x4
   39 00:4B18 87 -  -  -  		add 	a,a
   40 00:4B19 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4B1A 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4B1B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4B1D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4B1F DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4B21 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:4B22 C9 -  -  -  		ret
   47 00:4B23 -  -  -  -  		;
   48 00:4B23 -  -  -  -  		;		Not a standard simple variable.
   49 00:4B23 -  -  -  -  		;
   50 00:4B23 -  -  -  -  _FVNotSimple:
   51 00:4B23 CD 7F 4B -  		call 	VariableInformation 		; get information about the variable.
   52 00:4B26 CD B5 4B -  		call 	VariableSearchList 			; search the linked list
   53 00:4B29 38 12 -  -  		jr 		c,_FVNotFound  				
   54 00:4B2B -  -  -  -  		;
   55 00:4B2B -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4B2B -  -  -  -  		;
   57 00:4B2B -  -  -  -  _FVExitReference:		
   58 00:4B2B 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4B2E 19 -  -  -  		add 	hl,de 
   60 00:4B2F -  -  -  -  		;
   61 00:4B2F -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:4B2F -  -  -  -  		;
   63 00:4B2F DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:4B32 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:4B34 CC 58 4B -  		call 	z,ArrayLookup 				; array access required.
   66 00:4B37 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:4B39 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:4B3B AF -  -  -  		xor 	a 							; clear carry and return
   69 00:4B3C C9 -  -  -  		ret
   70 00:4B3D -  -  -  -  		;
   71 00:4B3D -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:4B3D -  -  -  -  		;
   73 00:4B3D -  -  -  -  _FVNotFound:		
   74 00:4B3D 3A 7C 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:4B40 B7 -  -  -  		or 		a
   76 00:4B41 28 0F -  -  		jr 		z,_FVFail
   77 00:4B43 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:4B46 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:4B48 28 08 -  -  		jr 		z,_FVFail
   80 00:4B4A 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   81 00:4B4D CD BF 4A -  		call 	VariableCreate 				; create a new variable.
   82 00:4B50 18 D9 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:4B52 -  -  -  -  
   84 00:4B52 -  -  -  -  _FVFail:
   85 00:4B52 DD 2A 80 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:4B56 37 -  -  -  		scf
   87 00:4B57 C9 -  -  -  		ret
   88 00:4B58 -  -  -  -  
   89 00:4B58 -  -  -  -  ; ***************************************************************************************
   90 00:4B58 -  -  -  -  ;
   91 00:4B58 -  -  -  -  ;									 Array lookup
   92 00:4B58 -  -  -  -  ;
   93 00:4B58 -  -  -  -  ; ***************************************************************************************
   94 00:4B58 -  -  -  -  
   95 00:4B58 -  -  -  -  ArrayLookup:
   96 00:4B58 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:4B59 CD 1A 45 -  		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:4B5C D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:4B5D 7C -  -  -  		ld 		a,h
  100 00:4B5E B5 -  -  -  		or 		l
  101 00:4B5F D9 -  -  -  		exx
  102 00:4B60 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:4B62 11 00 00 -  		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:4B65 54 -  -  -  		ld 		d,h
  105 00:4B66 5D -  -  -  		ld 		e,l
  106 00:4B67 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:4B68 E5 -  -  -  		push 	hl
  108 00:4B69 7E 23 66 6F 		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:4B6D AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:4B6E ED 52 -  -  		sbc 	hl,de
  111 00:4B70 DA 7A 4B -  		jp 		c,_ALBadValue 				; if max < index then error
  112 00:4B73 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:4B74 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:4B75 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:4B76 29 -  -  -  		add 	hl,hl
  116 00:4B77 D1 -  -  -  		pop 	de 							; get array base back
  117 00:4B78 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:4B79 C9 -  -  -  		ret
  119 00:4B7A -  -  -  -  
  120 00:4B7A -  -  -  -  _ALBadValue:
  121 00:4B7A 3E 08 C3 53 
              43 -  -  -  		ERR_INDEX
  122 00:4B7F -  -  -  -  		
  123 00:4B7F -  -  -  -  ; ***************************************************************************************
  124 00:4B7F -  -  -  -  ;
  125 00:4B7F -  -  -  -  ;									Changes and Updates
  126 00:4B7F -  -  -  -  ;
  127 00:4B7F -  -  -  -  ; ***************************************************************************************
  128 00:4B7F -  -  -  -  ;
  129 00:4B7F -  -  -  -  ;		Date			Notes
  130 00:4B7F -  -  -  -  ;		==== 			=====
  131 00:4B7F -  -  -  -  ;
  132 00:4B7F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4B7F -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4B7F -  -  -  -  ; ***************************************************************************************
    2 00:4B7F -  -  -  -  ; ***************************************************************************************
    3 00:4B7F -  -  -  -  ;
    4 00:4B7F -  -  -  -  ;		Name : 		info.asm
    5 00:4B7F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B7F -  -  -  -  ;		Date : 		4th June 2022
    7 00:4B7F -  -  -  -  ;		Reviewed :	No
    8 00:4B7F -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4B7F -  -  -  -  ;
   10 00:4B7F -  -  -  -  ; ***************************************************************************************
   11 00:4B7F -  -  -  -  ; ***************************************************************************************
   12 00:4B7F -  -  -  -  
   13 00:4B7F -  -  -  -  ; ***************************************************************************************
   14 00:4B7F -  -  -  -  ;
   15 00:4B7F -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4B7F -  -  -  -  ; 		after the identifier.
   17 00:4B7F -  -  -  -  ;
   18 00:4B7F -  -  -  -  ; ***************************************************************************************
   19 00:4B7F -  -  -  -  
   20 00:4B7F -  -  -  -  VariableInformation:
   21 00:4B7F DD 22 80 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:4B83 -  -  -  -  		;
   23 00:4B83 -  -  -  -  		; 		Calculate hash, find end.
   24 00:4B83 -  -  -  -  		;
   25 00:4B83 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:4B85 -  -  -  -  _VICalculateHash:
   27 00:4B85 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:4B88 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:4B8A 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:4B8C 80 -  -  -  		add 	a,b 						; add to hash
   31 00:4B8D 07 -  -  -  		rlca
   32 00:4B8E 07 -  -  -  		rlca
   33 00:4B8F 80 -  -  -  		add 	a,b
   34 00:4B90 47 -  -  -  		ld 		b,a 						; update hash
   35 00:4B91 DD 23 -  -  		inc 	ix 							; next character
   36 00:4B93 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:4B95 -  -  -  -  		;
   38 00:4B95 -  -  -  -  _VIHashDone:
   39 00:4B95 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:4B96 -  -  -  -  		;
   41 00:4B96 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:4B96 -  -  -  -  		;
   43 00:4B96 32 84 40 -  		ld 		(VarHash),a
   44 00:4B99 -  -  -  -  		;
   45 00:4B99 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:4B99 -  -  -  -  		;		
   47 00:4B99 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:4B9B 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:4B9E 6F -  -  -  		ld 		l,a
   50 00:4B9F 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:4BA0 29 -  -  -  		add 	hl,hl
   52 00:4BA1 -  -  -  -  		;
   53 00:4BA1 ED 5B 44 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:4BA5 19 -  -  -  		add 	hl,de
   55 00:4BA6 -  -  -  -  		;
   56 00:4BA6 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:4BA9 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:4BAB 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:4BAD 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:4BB0 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:4BB1 -  -  -  -  _VINotArray:
   62 00:4BB1 22 86 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:4BB4 C9 -  -  -  		ret
   64 00:4BB5 -  -  -  -  
   65 00:4BB5 -  -  -  -  ; ***************************************************************************************
   66 00:4BB5 -  -  -  -  ;
   67 00:4BB5 -  -  -  -  ;									Changes and Updates
   68 00:4BB5 -  -  -  -  ;
   69 00:4BB5 -  -  -  -  ; ***************************************************************************************
   70 00:4BB5 -  -  -  -  ;
   71 00:4BB5 -  -  -  -  ;		Date			Notes
   72 00:4BB5 -  -  -  -  ;		==== 			=====
   73 00:4BB5 -  -  -  -  ;
   74 00:4BB5 -  -  -  -  ; ***************************************************************************************
   75 00:4BB5 -  -  -  -  
Listing for file "_build.asm"
   68 00:4BB5 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:4BB5 -  -  -  -  ; ***************************************************************************************
    2 00:4BB5 -  -  -  -  ; ***************************************************************************************
    3 00:4BB5 -  -  -  -  ;
    4 00:4BB5 -  -  -  -  ;		Name : 		search.asm
    5 00:4BB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BB5 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4BB5 -  -  -  -  ;		Reviewed :	No
    8 00:4BB5 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:4BB5 -  -  -  -  ;
   10 00:4BB5 -  -  -  -  ; ***************************************************************************************
   11 00:4BB5 -  -  -  -  ; ***************************************************************************************
   12 00:4BB5 -  -  -  -  
   13 00:4BB5 -  -  -  -  ; ***************************************************************************************
   14 00:4BB5 -  -  -  -  ;
   15 00:4BB5 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:4BB5 -  -  -  -  ;		CS if failed.
   17 00:4BB5 -  -  -  -  ;
   18 00:4BB5 -  -  -  -  ; ***************************************************************************************
   19 00:4BB5 -  -  -  -  
   20 00:4BB5 -  -  -  -  VariableSearchList:
   21 00:4BB5 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:4BB8 -  -  -  -  		;
   23 00:4BB8 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:4BB8 -  -  -  -  		;		the address of the hash record
   25 00:4BB8 -  -  -  -  		;
   26 00:4BB8 -  -  -  -  _VSLLoop:
   27 00:4BB8 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:4BBC -  -  -  -  		;
   29 00:4BBC E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:4BBD AF -  -  -  		xor 	a
   31 00:4BBE ED 6A -  -  		adc 	hl,hl
   32 00:4BC0 E1 -  -  -  		pop 	hl
   33 00:4BC1 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:4BC3 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:4BC4 C8 -  -  -  		ret 	z
   36 00:4BC5 -  -  -  -  _VSLRecord:
   37 00:4BC5 -  -  -  -  		;
   38 00:4BC5 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:4BC5 -  -  -  -  		;
   40 00:4BC5 3A 84 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:4BC8 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:4BC9 23 -  -  -  		inc 	hl 							; points to link back
   43 00:4BCA 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:4BCC -  -  -  -  		;
   45 00:4BCC -  -  -  -  		;		Now check the name
   46 00:4BCC -  -  -  -  		;
   47 00:4BCC E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:4BCD 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:4BCE 23 -  -  -  		inc 	hl
   50 00:4BCF 23 -  -  -  		inc 	hl
   51 00:4BD0 23 -  -  -  		inc 	hl
   52 00:4BD1 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:4BD5 ED 5B 80 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:4BD9 -  -  -  -  		;
   55 00:4BD9 -  -  -  -  		;		Check individual characters
   56 00:4BD9 -  -  -  -  		;
   57 00:4BD9 -  -  -  -  _VSLCharacter:
   58 00:4BD9 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:4BDA FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:4BDC 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:4BDE BE -  -  -  		cp 		(hl) 						; compare them
   62 00:4BDF 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:4BE0 13 -  -  -  		inc 	de
   64 00:4BE1 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:4BE3 -  -  -  -  		;
   66 00:4BE3 -  -  -  -  _VSLFailed:
   67 00:4BE3 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:4BE4 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:4BE6 -  -  -  -  		;
   70 00:4BE6 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:4BE6 -  -  -  -  		;		
   72 00:4BE6 -  -  -  -  _VSLEndIdentifier:
   73 00:4BE6 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:4BE7 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4BE9 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4BEB -  -  -  -  		;
   77 00:4BEB E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4BEC 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4BED AF -  -  -  		xor 	a 							; clear carry
   80 00:4BEE C9 -  -  -  		ret
   81 00:4BEF -  -  -  -  
   82 00:4BEF -  -  -  -  ; ***************************************************************************************
   83 00:4BEF -  -  -  -  ;
   84 00:4BEF -  -  -  -  ;									Changes and Updates
   85 00:4BEF -  -  -  -  ;
   86 00:4BEF -  -  -  -  ; ***************************************************************************************
   87 00:4BEF -  -  -  -  ;
   88 00:4BEF -  -  -  -  ;		Date			Notes
   89 00:4BEF -  -  -  -  ;		==== 			=====
   90 00:4BEF -  -  -  -  ;
   91 00:4BEF -  -  -  -  ; ***************************************************************************************
   92 00:4BEF -  -  -  -  		
Listing for file "_build.asm"
   69 00:4BEF -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4BEF -  -  -  -  ;
    2 00:4BEF -  -  -  -  ;	This file is automatically generated.
    3 00:4BEF -  -  -  -  ;
    4 00:4BEF 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:4C00 -  -  -  -  PrecedenceTable:
    6 00:4C00 06 -  -  -  	.db	6	; $0083 !
    7 00:4C01 06 -  -  -  	.db	6	; $0084 ?
    8 00:4C02 05 -  -  -  	.db	5	; $0085 *
    9 00:4C03 05 -  -  -  	.db	5	; $0086 /
   10 00:4C04 05 -  -  -  	.db	5	; $0087 mod
   11 00:4C05 05 -  -  -  	.db	5	; $0088 div
   12 00:4C06 04 -  -  -  	.db	4	; $0089 +
   13 00:4C07 04 -  -  -  	.db	4	; $008a -
   14 00:4C08 03 -  -  -  	.db	3	; $008b >=
   15 00:4C09 03 -  -  -  	.db	3	; $008c <=
   16 00:4C0A 03 -  -  -  	.db	3	; $008d >
   17 00:4C0B 03 -  -  -  	.db	3	; $008e <
   18 00:4C0C 03 -  -  -  	.db	3	; $008f =
   19 00:4C0D 03 -  -  -  	.db	3	; $0090 <>
   20 00:4C0E 02 -  -  -  	.db	2	; $0091 and
   21 00:4C0F 01 -  -  -  	.db	1	; $0092 or
   22 00:4C10 01 -  -  -  	.db	1	; $0093 eor
   23 00:4C11 -  -  -  -  
Listing for file "_build.asm"
   70 00:4C11 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4C11 -  -  -  -  ;
    2 00:4C11 -  -  -  -  ;	This is automatically generated.
    3 00:4C11 -  -  -  -  ;
    4 00:4C11 -  -  -  -  ErrorIDTable:
    5 00:4C11 79 4C 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4C15 7F 4C 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4C19 90 4C 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:4C1D 9E 4C 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4C21 A8 4C 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:4C25 B2 4C 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:4C29 CC 4C 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:4C2D DD 4C 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   13 00:4C31 F2 4C 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   14 00:4C35 02 4D 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   15 00:4C39 17 4D 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   16 00:4C3D 25 4D 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   17 00:4C41 36 4D 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   18 00:4C45 44 4D 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   19 00:4C49 4E 4D 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   20 00:4C4D 63 4D 00 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   21 00:4C51 78 4D 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   22 00:4C55 8E 4D 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   23 00:4C59 9C 4D 00 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   24 00:4C5D AF 4D 00 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   25 00:4C61 C1 4D 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   26 00:4C65 D6 4D 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   27 00:4C69 E2 4D 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   28 00:4C6D E7 4D 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   29 00:4C71 F4 4D 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   30 00:4C75 05 4E 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   31 00:4C79 -  -  -  -  
   32 00:4C79 -  -  -  -  ErrText_warmstart:
   33 00:4C79 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   34 00:4C7F -  -  -  -  ErrText_assert:
   35 00:4C7F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   36 00:4C90 -  -  -  -  ErrText_badtype:
   37 00:4C90 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   38 00:4C9E -  -  -  -  ErrText_badvalue:
   39 00:4C9E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   40 00:4CA8 -  -  -  -  ErrText_dim:
   41 00:4CA8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   42 00:4CB2 -  -  -  -  ErrText_disabled:
   43 00:4CB2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   44 00:4CCC -  -  -  -  ErrText_divzero:
   45 00:4CCC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   46 00:4CDD -  -  -  -  ErrText_gosub:
   47 00:4CDD 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   48 00:4CF2 -  -  -  -  ErrText_index:
   49 00:4CF2 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   50 00:4D02 -  -  -  -  ErrText_lineno:
   51 00:4D02 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   52 00:4D17 -  -  -  -  ErrText_memory:
   53 00:4D17 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   54 00:4D25 -  -  -  -  ErrText_next:
   55 00:4D25 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   56 00:4D36 -  -  -  -  ErrText_nocomma:
   57 00:4D36 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   58 00:4D44 -  -  -  -  ErrText_nodollar:
   59 00:4D44 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   60 00:4D4E -  -  -  -  ErrText_nolbracket:
   61 00:4D4E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   62 00:4D63 -  -  -  -  ErrText_noproc:
   63 00:4D63 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   64 00:4D78 -  -  -  -  ErrText_norbracket:
   65 00:4D78 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   66 00:4D8E -  -  -  -  ErrText_notref:
   67 00:4D8E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   68 00:4D9C -  -  -  -  ErrText_param:
   69 00:4D9C 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   70 00:4DAF -  -  -  -  ErrText_proc:
   71 00:4DAF 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   72 00:4DC1 -  -  -  -  ErrText_repeat:
   73 00:4DC1 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   74 00:4DD6 -  -  -  -  ErrText_stack:
   75 00:4DD6 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   76 00:4DE2 -  -  -  -  ErrText_stop:
   77 00:4DE2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   78 00:4DE7 -  -  -  -  ErrText_syntax:
   79 00:4DE7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   80 00:4DF4 -  -  -  -  ErrText_todo:
   81 00:4DF4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   82 00:4E05 -  -  -  -  ErrText_unknownvar:
   83 00:4E05 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   71 00:4E16 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4E16 -  -  -  -  ;
    2 00:4E16 -  -  -  -  ;	Vectors for set 0
    3 00:4E16 -  -  -  -  ;
    4 00:4E16 -  -  -  -  VectorsSet0:
    5 00:4E16 94 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4E18 22 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4E1A 22 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4E1C 0D 44 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4E1E 15 44 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4E20 CB 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4E22 D6 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4E24 E1 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4E26 D6 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4E28 B5 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4E2A C0 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4E2C 68 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4E2E 5F 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4E30 4D 44 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4E32 44 44 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4E34 3B 44 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4E36 56 44 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4E38 EC 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4E3A F7 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4E3C 02 44 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4E3E 3C 47 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4E40 36 47 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4E42 7D 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4E44 A3 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4E46 6E 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4E48 4B 46 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4E4A 21 47 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4E4C 49 47 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4E4E 5D 46 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4E50 56 46 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4E52 86 46 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4E54 98 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4E56 6C 47 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4E58 72 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4E5A 7D 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4E5C 2D 44 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4E5E 31 44 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4E60 EB 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4E62 EB 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4E64 EE 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4E66 EB 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4E68 61 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4E6A EB 40 -  -  	addr(BadCmd_LSBracket)           ; $00aa [
   48 00:4E6C EB 40 -  -  	addr(BadCmd_RSBracket)           ; $00ab ]
   49 00:4E6E EB 40 -  -  	addr(BadCmd_Comma)               ; $00ac ~
   50 00:4E70 07 4A -  -  	addr(Command_REPEAT)             ; $00ad repeat
   51 00:4E72 10 4A -  -  	addr(Command_Until)              ; $00ae until
   52 00:4E74 D5 49 -  -  	addr(Command_IF)                 ; $00af if
   53 00:4E76 EB 40 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:4E78 04 4A -  -  	addr(Command_Else)               ; $00b1 else
   55 00:4E7A A1 48 -  -  	addr(Command_FOR)                ; $00b2 for
   56 00:4E7C EB 40 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:4E7E EB 40 -  -  	addr(BadCmd_Step)                ; $00b4 step
   58 00:4E80 27 49 -  -  	addr(Command_Next)               ; $00b5 next
   59 00:4E82 EB 40 -  -  	addr(BadCmd_Def)                 ; $00b6 def
   60 00:4E84 96 47 -  -  	addr(Command_PROC)               ; $00b7 proc
   61 00:4E86 C0 47 -  -  	addr(Command_ENDPROC)            ; $00b8 endproc
   62 00:4E88 72 49 -  -  	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:4E8A 83 49 -  -  	addr(Command_Return)             ; $00ba return
   64 00:4E8C 96 49 -  -  	addr(Command_GOTO)               ; $00bb goto
   65 00:4E8E 22 40 -  -  	addr(Unimplemented)              ; $00bc local
   66 00:4E90 EF 40 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:4E92 61 42 -  -  	addr(Command_REM)                ; $00be rem
   68 00:4E94 A7 41 -  -  	addr(Command_LET)                ; $00bf let
   69 00:4E96 E4 42 -  -  	addr(Command_VDU)                ; $00c0 vdu
   70 00:4E98 01 42 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:4E9A 22 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:4E9C 22 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:4E9E 22 40 -  -  	addr(Unimplemented)              ; $00c4 list
   74 00:4EA0 94 48 -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:4EA2 7C 42 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:4EA4 22 40 -  -  	addr(Unimplemented)              ; $00c7 read
   77 00:4EA6 22 40 -  -  	addr(Unimplemented)              ; $00c8 data
   78 00:4EA8 22 40 -  -  	addr(Unimplemented)              ; $00c9 restore
   79 00:4EAA DC 40 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:4EAC 46 48 -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:4EAE 8F 41 -  -  	addr(Command_END)                ; $00cc end
   82 00:4EB0 DF 42 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:4EB2 -  -  -  -  ;
   84 00:4EB2 -  -  -  -  ;	Vectors for set 1
   85 00:4EB2 -  -  -  -  ;
   86 00:4EB2 -  -  -  -  VectorsSet1:
   87 00:4EB2 -  -  -  -  ;
   88 00:4EB2 -  -  -  -  ;	Vectors for set 2
   89 00:4EB2 -  -  -  -  ;
   90 00:4EB2 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   72 00:4EB2 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4EB2 -  -  -  -  ; ***************************************************************************************
    2 00:4EB2 -  -  -  -  ; ***************************************************************************************
    3 00:4EB2 -  -  -  -  ;
    4 00:4EB2 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4EB2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4EB2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4EB2 -  -  -  -  ;		Reviewed :	No
    8 00:4EB2 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4EB2 -  -  -  -  ;
   10 00:4EB2 -  -  -  -  ; ***************************************************************************************
   11 00:4EB2 -  -  -  -  ; ***************************************************************************************
   12 00:4EB2 -  -  -  -  
   13 00:4EB2 -  -  -  -  ; ***************************************************************************************
   14 00:4EB2 -  -  -  -  ;
   15 00:4EB2 -  -  -  -  ;								Unsigned integer divide
   16 00:4EB2 -  -  -  -  ;
   17 00:4EB2 -  -  -  -  ; ***************************************************************************************
   18 00:4EB2 -  -  -  -  
   19 00:4EB2 -  -  -  -  Int32UDivide:
   20 00:4EB2 37 -  -  -  		scf
   21 00:4EB3 C3 F1 4E -  		jp 		_I32UnsignedDivide		
   22 00:4EB6 -  -  -  -  
   23 00:4EB6 -  -  -  -  ; ***************************************************************************************
   24 00:4EB6 -  -  -  -  ;
   25 00:4EB6 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4EB6 -  -  -  -  ;
   27 00:4EB6 -  -  -  -  ; ***************************************************************************************
   28 00:4EB6 -  -  -  -  
   29 00:4EB6 -  -  -  -  Int32SDivide:
   30 00:4EB6 37 -  -  -  		scf
   31 00:4EB7 18 01 -  -  		jr 		_I32SDivide
   32 00:4EB9 -  -  -  -  Int32Modulus:
   33 00:4EB9 AF -  -  -  		xor 	a
   34 00:4EBA -  -  -  -  _I32SDivide:
   35 00:4EBA 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4EBB F5 -  -  -  		push 	af
   37 00:4EBC 08 -  -  -  		ex 		af,af'
   38 00:4EBD -  -  -  -  
   39 00:4EBD D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4EBE D9 -  -  -  		exx
   41 00:4EBF D5 -  -  -  		push 	de
   42 00:4EC0 D9 -  -  -  		exx
   43 00:4EC1 -  -  -  -  
   44 00:4EC1 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4EC2 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4EC3 CD DF 4E -  		call 	_I32CheckHLSignSwap
   47 00:4EC6 CD DF 4E -  		call 	_I32CheckHLSignSwap
   48 00:4EC9 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4ECA F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4ECB F5 -  -  -  		push 	af
   51 00:4ECC CD F1 4E -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4ECF F1 -  -  -  		pop 	af 							; get function back
   53 00:4ED0 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4ED2 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4ED3 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4ED5 C4 3B 50 -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4ED8 -  -  -  -  _I32SDExit:
   58 00:4ED8 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4ED9 D1 -  -  -  		pop 	de
   60 00:4EDA D9 -  -  -  		exx
   61 00:4EDB D1 -  -  -  		pop 	de
   62 00:4EDC F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4EDD 08 -  -  -  		ex 		af,af'
   64 00:4EDE C9 -  -  -  		ret
   65 00:4EDF -  -  -  -  
   66 00:4EDF -  -  -  -  
   67 00:4EDF -  -  -  -  _I32CheckHLSignSwap:
   68 00:4EDF D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4EE0 CB 7C -  -  		bit 	7,h
   70 00:4EE2 D9 -  -  -  		exx
   71 00:4EE3 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4EE5 -  -  -  -  		;
   73 00:4EE5 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4EE7 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4EE8 CD 3B 50 -  		call 	Int32Negate 				
   76 00:4EEB F1 -  -  -  		pop 	af
   77 00:4EEC -  -  -  -  _I32CHSPositive:
   78 00:4EEC D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4EED EB -  -  -  		ex 		de,hl
   80 00:4EEE D9 -  -  -  		exx		
   81 00:4EEF EB -  -  -  		ex 		de,hl
   82 00:4EF0 C9 -  -  -  		ret
   83 00:4EF1 -  -  -  -  
   84 00:4EF1 -  -  -  -  ; ***************************************************************************************
   85 00:4EF1 -  -  -  -  ;
   86 00:4EF1 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4EF1 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4EF1 -  -  -  -  ;
   89 00:4EF1 -  -  -  -  ; ***************************************************************************************
   90 00:4EF1 -  -  -  -  
   91 00:4EF1 -  -  -  -  _I32UnsignedDivide:
   92 00:4EF1 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4EF2 D5 -  -  -  		push 	de
   94 00:4EF3 D9 -  -  -  		exx
   95 00:4EF4 C5 -  -  -  		push 	bc
   96 00:4EF5 D5 -  -  -  		push 	de 							
   97 00:4EF6 D9 -  -  -  		exx
   98 00:4EF7 -  -  -  -  
   99 00:4EF7 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4EF8 -  -  -  -  
  101 00:4EF8 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4EF9 B3 -  -  -  		or 		e
  103 00:4EFA D9 -  -  -  		exx
  104 00:4EFB B2 -  -  -  		or 		d
  105 00:4EFC B3 -  -  -  		or 		e
  106 00:4EFD D9 -  -  -  		exx
  107 00:4EFE CA 27 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4F01 -  -  -  -  
  109 00:4F01 -  -  -  -  
  110 00:4F01 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4F02 4D -  -  -  		ld		c,l
  112 00:4F03 21 00 00 -  		ld 		hl,$0000
  113 00:4F06 D9 -  -  -  		exx
  114 00:4F07 44 -  -  -  		ld 		b,h
  115 00:4F08 4D -  -  -  		ld		c,l
  116 00:4F09 21 00 00 -  		ld 		hl,$0000
  117 00:4F0C D9 -  -  -  		exx
  118 00:4F0D -  -  -  -  
  119 00:4F0D 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4F0F -  -  -  -  _I32DivideLoop:
  121 00:4F0F F5 -  -  -  		push 	af
  122 00:4F10 -  -  -  -  
  123 00:4F10 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4F12 CB 10 -  -  		rl 		b
  125 00:4F14 D9 -  -  -  		exx
  126 00:4F15 CB 11 -  -  		rl 		c
  127 00:4F17 CB 10 -  -  		rl 		b
  128 00:4F19 D9 -  -  -  		exx
  129 00:4F1A CB 15 -  -  		rl 		l
  130 00:4F1C CB 14 -  -  		rl 		h
  131 00:4F1E D9 -  -  -  		exx
  132 00:4F1F CB 15 -  -  		rl 		l
  133 00:4F21 CB 14 -  -  		rl 		h
  134 00:4F23 D9 -  -  -  		exx
  135 00:4F24 -  -  -  -  
  136 00:4F24 CD E1 4F -  		call 	Int32Subtract 				; A = A - M
  137 00:4F27 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4F29 -  -  -  -  
  139 00:4F29 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4F2A 18 03 -  -  		jr 		_I32Next
  141 00:4F2C -  -  -  -  
  142 00:4F2C -  -  -  -  _I32Borrow:
  143 00:4F2C CD DB 4F -  		call 	Int32Add 					; A = A + M
  144 00:4F2F -  -  -  -  _I32Next:
  145 00:4F2F F1 -  -  -  		pop 	af
  146 00:4F30 3D -  -  -  		dec 	a
  147 00:4F31 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4F33 -  -  -  -  
  149 00:4F33 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4F34 -  -  -  -  
  151 00:4F34 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4F35 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4F37 -  -  -  -  
  154 00:4F37 60 -  -  -  		ld  	h,b
  155 00:4F38 69 -  -  -  		ld 		l,c
  156 00:4F39 D9 -  -  -  		exx
  157 00:4F3A 60 -  -  -  		ld  	h,b
  158 00:4F3B 69 -  -  -  		ld 		l,c
  159 00:4F3C D9 -  -  -  		exx
  160 00:4F3D -  -  -  -  _I32Modulus1:		
  161 00:4F3D D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4F3E D1 -  -  -  		pop 	de
  163 00:4F3F C1 -  -  -  		pop 	bc
  164 00:4F40 D9 -  -  -  		exx
  165 00:4F41 D1 -  -  -  		pop 	de
  166 00:4F42 C1 -  -  -  		pop 	bc
  167 00:4F43 C9 -  -  -  		ret
  168 00:4F44 -  -  -  -  
  169 00:4F44 -  -  -  -  ; ***************************************************************************************
  170 00:4F44 -  -  -  -  ;
  171 00:4F44 -  -  -  -  ;									Changes and Updates
  172 00:4F44 -  -  -  -  ;
  173 00:4F44 -  -  -  -  ; ***************************************************************************************
  174 00:4F44 -  -  -  -  ;
  175 00:4F44 -  -  -  -  ;		Date			Notes
  176 00:4F44 -  -  -  -  ;		==== 			=====
  177 00:4F44 -  -  -  -  ;
  178 00:4F44 -  -  -  -  ; ***************************************************************************************
  179 00:4F44 -  -  -  -  		
Listing for file "_build.asm"
   73 00:4F44 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4F44 -  -  -  -  ; ***************************************************************************************
    2 00:4F44 -  -  -  -  ; ***************************************************************************************
    3 00:4F44 -  -  -  -  ;
    4 00:4F44 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4F44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4F44 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4F44 -  -  -  -  ;		Reviewed :	No
    8 00:4F44 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4F44 -  -  -  -  ;
   10 00:4F44 -  -  -  -  ; ***************************************************************************************
   11 00:4F44 -  -  -  -  ; ***************************************************************************************
   12 00:4F44 -  -  -  -  
   13 00:4F44 -  -  -  -  ; ***************************************************************************************
   14 00:4F44 -  -  -  -  ;
   15 00:4F44 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4F44 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4F44 -  -  -  -  ;
   18 00:4F44 -  -  -  -  ; ***************************************************************************************
   19 00:4F44 -  -  -  -  
   20 00:4F44 -  -  -  -  Int32FromString:
   21 00:4F44 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4F45 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4F46 D5 -  -  -  		push 	de
   24 00:4F47 D9 -  -  -  		exx
   25 00:4F48 D5 -  -  -  		push 	de
   26 00:4F49 -  -  -  -  
   27 00:4F49 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4F4C 11 00 00 -  		ld 		de,$0000
   29 00:4F4F D9 -  -  -  		exx
   30 00:4F50 21 00 00 -  		ld 		hl,$0000
   31 00:4F53 11 00 00 -  		ld 		de,$0000
   32 00:4F56 D9 -  -  -  		exx
   33 00:4F57 -  -  -  -  
   34 00:4F57 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4F58 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4F5A 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4F5C ED 44 -  -  		neg 		 						; fix up the base
   38 00:4F5E 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4F5F -  -  -  -  		;
   40 00:4F5F 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4F60 F5 -  -  -  		push 	af
   42 00:4F61 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4F63 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4F64 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4F66 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4F67 18 01 -  -  		jr 		_I32FSMain
   47 00:4F69 -  -  -  -  _I32FSNotSigned:		
   48 00:4F69 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4F6A -  -  -  -  		;
   50 00:4F6A -  -  -  -  		; 		Main conversion loop.
   51 00:4F6A -  -  -  -  		; 		
   52 00:4F6A -  -  -  -  _I32FSMain:		
   53 00:4F6A 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4F6B FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4F6D 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4F6F D6 20 -  -  		sub 	32
   57 00:4F71 -  -  -  -  _I32FSNotLower:
   58 00:4F71 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4F73 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4F75 FE 3A -  -  		cp 		'9'+1
   61 00:4F77 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4F79 FE 41 -  -  		cp 		'A'
   63 00:4F7B 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4F7D FE 47 -  -  		cp 		'F'+1
   65 00:4F7F 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4F81 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4F83 -  -  -  -  _I32FSOkay:
   68 00:4F83 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4F85 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4F86 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4F88 03 -  -  -  		inc 	bc 							; consume character
   72 00:4F89 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4F8A F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4F8B CD A5 4F -  		call 	Int32Multiply 				; result *= base
   75 00:4F8E F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4F8F 5F -  -  -  		ld 		e,a
   77 00:4F90 CD DB 4F -  		call 	Int32Add 					; and add it.
   78 00:4F93 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4F94 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4F96 -  -  -  -  
   81 00:4F96 -  -  -  -  _I32FSExit:
   82 00:4F96 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4F97 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4F99 CC 3B 50 -  		call 	z,Int32Negate
   85 00:4F9C 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4F9D D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4F9E D9 -  -  -  		exx
   88 00:4F9F D1 -  -  -  		pop 	de
   89 00:4FA0 D9 -  -  -  		exx
   90 00:4FA1 C1 -  -  -  		pop 	bc
   91 00:4FA2 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4FA4 C9 -  -  -  		ret				
   93 00:4FA5 -  -  -  -  
   94 00:4FA5 -  -  -  -  ; ***************************************************************************************
   95 00:4FA5 -  -  -  -  ;
   96 00:4FA5 -  -  -  -  ;									Changes and Updates
   97 00:4FA5 -  -  -  -  ;
   98 00:4FA5 -  -  -  -  ; ***************************************************************************************
   99 00:4FA5 -  -  -  -  ;
  100 00:4FA5 -  -  -  -  ;		Date			Notes
  101 00:4FA5 -  -  -  -  ;		==== 			=====
  102 00:4FA5 -  -  -  -  ;
  103 00:4FA5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   74 00:4FA5 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4FA5 -  -  -  -  ; ***************************************************************************************
    2 00:4FA5 -  -  -  -  ; ***************************************************************************************
    3 00:4FA5 -  -  -  -  ;
    4 00:4FA5 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4FA5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4FA5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4FA5 -  -  -  -  ;		Reviewed :	No
    8 00:4FA5 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4FA5 -  -  -  -  ;
   10 00:4FA5 -  -  -  -  ; ***************************************************************************************
   11 00:4FA5 -  -  -  -  ; ***************************************************************************************
   12 00:4FA5 -  -  -  -  
   13 00:4FA5 -  -  -  -  Int32Multiply:
   14 00:4FA5 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4FA6 D5 -  -  -  		push 	de
   16 00:4FA7 44 -  -  -  		ld 		b,h
   17 00:4FA8 4D -  -  -  		ld 		c,l
   18 00:4FA9 21 00 00 -  		ld 		hl,$0000
   19 00:4FAC -  -  -  -  
   20 00:4FAC D9 -  -  -  		exx
   21 00:4FAD C5 -  -  -  		push 	bc
   22 00:4FAE D5 -  -  -  		push 	de
   23 00:4FAF 44 -  -  -  		ld 		b,h
   24 00:4FB0 4D -  -  -  		ld 		c,l
   25 00:4FB1 21 00 00 -  		ld 		hl,$0000		
   26 00:4FB4 D9 -  -  -  		exx
   27 00:4FB5 -  -  -  -  
   28 00:4FB5 -  -  -  -  _I32MultiplyLoop:
   29 00:4FB5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4FB7 C4 DB 4F -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4FBA -  -  -  -  		;
   32 00:4FBA D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4FBB CB 38 -  -  		srl 	b
   34 00:4FBD CB 19 -  -  		rr 		c
   35 00:4FBF D9 -  -  -  		exx
   36 00:4FC0 CB 18 -  -  		rr 		b
   37 00:4FC2 CB 19 -  -  		rr 		c
   38 00:4FC4 -  -  -  -  		;
   39 00:4FC4 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4FC6 CB 12 -  -  		rl 		d
   41 00:4FC8 D9 -  -  -  		exx
   42 00:4FC9 CB 13 -  -  		rl 		e
   43 00:4FCB CB 12 -  -  		rl 		d
   44 00:4FCD -  -  -  -  
   45 00:4FCD 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4FCE B1 -  -  -  		or 		c
   47 00:4FCF D9 -  -  -  		exx
   48 00:4FD0 B0 -  -  -  		or 		b
   49 00:4FD1 B1 -  -  -  		or 		c
   50 00:4FD2 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4FD4 -  -  -  -  
   52 00:4FD4 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4FD5 D1 -  -  -  		pop 	de
   54 00:4FD6 C1 -  -  -  		pop 	bc
   55 00:4FD7 D9 -  -  -  		exx
   56 00:4FD8 D1 -  -  -  		pop 	de
   57 00:4FD9 C1 -  -  -  		pop 	bc
   58 00:4FDA C9 -  -  -  		ret
   59 00:4FDB -  -  -  -  
   60 00:4FDB -  -  -  -  ; ***************************************************************************************
   61 00:4FDB -  -  -  -  ;
   62 00:4FDB -  -  -  -  ;									Changes and Updates
   63 00:4FDB -  -  -  -  ;
   64 00:4FDB -  -  -  -  ; ***************************************************************************************
   65 00:4FDB -  -  -  -  ;
   66 00:4FDB -  -  -  -  ;		Date			Notes
   67 00:4FDB -  -  -  -  ;		==== 			=====
   68 00:4FDB -  -  -  -  ;
   69 00:4FDB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   75 00:4FDB -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4FDB -  -  -  -  ; ***************************************************************************************
    2 00:4FDB -  -  -  -  ; ***************************************************************************************
    3 00:4FDB -  -  -  -  ;
    4 00:4FDB -  -  -  -  ;		Name : 		isimple.asm
    5 00:4FDB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4FDB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4FDB -  -  -  -  ;		Reviewed :	No
    8 00:4FDB -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4FDB -  -  -  -  ;
   10 00:4FDB -  -  -  -  ; ***************************************************************************************
   11 00:4FDB -  -  -  -  ; ***************************************************************************************
   12 00:4FDB -  -  -  -  
   13 00:4FDB -  -  -  -  ; ***************************************************************************************
   14 00:4FDB -  -  -  -  ;
   15 00:4FDB -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4FDB -  -  -  -  ;
   17 00:4FDB -  -  -  -  ; ***************************************************************************************
   18 00:4FDB -  -  -  -  
   19 00:4FDB -  -  -  -  Int32Add:
   20 00:4FDB 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4FDC D9 -  -  -  		exx
   22 00:4FDD ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4FDF D9 -  -  -  		exx
   24 00:4FE0 C9 -  -  -  		ret
   25 00:4FE1 -  -  -  -  
   26 00:4FE1 -  -  -  -  ; ***************************************************************************************
   27 00:4FE1 -  -  -  -  ;
   28 00:4FE1 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4FE1 -  -  -  -  ;
   30 00:4FE1 -  -  -  -  ; ***************************************************************************************
   31 00:4FE1 -  -  -  -  
   32 00:4FE1 -  -  -  -  Int32Subtract:
   33 00:4FE1 AF -  -  -  		xor 	a 							; clear carry
   34 00:4FE2 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4FE4 D9 -  -  -  		exx
   36 00:4FE5 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4FE7 D9 -  -  -  		exx
   38 00:4FE8 C9 -  -  -  		ret
   39 00:4FE9 -  -  -  -  
   40 00:4FE9 -  -  -  -  ; ***************************************************************************************
   41 00:4FE9 -  -  -  -  ;
   42 00:4FE9 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4FE9 -  -  -  -  ;
   44 00:4FE9 -  -  -  -  ; ***************************************************************************************
   45 00:4FE9 -  -  -  -  
   46 00:4FE9 -  -  -  -  Int32And:
   47 00:4FE9 D9 -  -  -  		exx
   48 00:4FEA CD EE 4F -  		call 	_I32AndHLDE
   49 00:4FED D9 -  -  -  		exx
   50 00:4FEE -  -  -  -  _I32AndHLDE:		
   51 00:4FEE 7C -  -  -  		ld 		a,h
   52 00:4FEF A2 -  -  -  		and 	d
   53 00:4FF0 67 -  -  -  		ld 		h,a
   54 00:4FF1 7D -  -  -  		ld 		a,l
   55 00:4FF2 A3 -  -  -  		and 	e
   56 00:4FF3 6F -  -  -  		ld 		l,a
   57 00:4FF4 C9 -  -  -  		ret
   58 00:4FF5 -  -  -  -  
   59 00:4FF5 -  -  -  -  ; ***************************************************************************************
   60 00:4FF5 -  -  -  -  ;
   61 00:4FF5 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4FF5 -  -  -  -  ;
   63 00:4FF5 -  -  -  -  ; ***************************************************************************************
   64 00:4FF5 -  -  -  -  
   65 00:4FF5 -  -  -  -  Int32Or:
   66 00:4FF5 D9 -  -  -  		exx
   67 00:4FF6 CD FA 4F -  		call 	_I32OrHLDE
   68 00:4FF9 D9 -  -  -  		exx
   69 00:4FFA -  -  -  -  _I32OrHLDE:		
   70 00:4FFA 7C -  -  -  		ld 		a,h
   71 00:4FFB B2 -  -  -  		or 		d
   72 00:4FFC 67 -  -  -  		ld 		h,a
   73 00:4FFD 7D -  -  -  		ld 		a,l
   74 00:4FFE B3 -  -  -  		or 		e
   75 00:4FFF 6F -  -  -  		ld 		l,a
   76 00:5000 C9 -  -  -  		ret
   77 00:5001 -  -  -  -  
   78 00:5001 -  -  -  -  ; ***************************************************************************************
   79 00:5001 -  -  -  -  ;
   80 00:5001 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:5001 -  -  -  -  ;
   82 00:5001 -  -  -  -  ; ***************************************************************************************
   83 00:5001 -  -  -  -  
   84 00:5001 -  -  -  -  Int32Xor:
   85 00:5001 D9 -  -  -  		exx
   86 00:5002 CD 06 50 -  		call 	_I32XorHLDE
   87 00:5005 D9 -  -  -  		exx
   88 00:5006 -  -  -  -  _I32XorHLDE:		
   89 00:5006 7C -  -  -  		ld 		a,h
   90 00:5007 AA -  -  -  		xor 	d
   91 00:5008 67 -  -  -  		ld 		h,a
   92 00:5009 7D -  -  -  		ld 		a,l
   93 00:500A AB -  -  -  		xor 	e
   94 00:500B 6F -  -  -  		ld 		l,a
   95 00:500C C9 -  -  -  		ret
   96 00:500D -  -  -  -  
   97 00:500D -  -  -  -  ; ***************************************************************************************
   98 00:500D -  -  -  -  ;
   99 00:500D -  -  -  -  ;								 Check if HL'HL zero
  100 00:500D -  -  -  -  ;
  101 00:500D -  -  -  -  ; ***************************************************************************************
  102 00:500D -  -  -  -  
  103 00:500D -  -  -  -  Int32Zero:
  104 00:500D D9 -  -  -  		exx
  105 00:500E 7D -  -  -  		ld 		a,l
  106 00:500F B4 -  -  -  		or 		h
  107 00:5010 D9 -  -  -  		exx
  108 00:5011 B5 -  -  -  		or 		l
  109 00:5012 B4 -  -  -  		or 		h
  110 00:5013 C9 -  -  -  		ret
  111 00:5014 -  -  -  -  
  112 00:5014 -  -  -  -  ; ***************************************************************************************
  113 00:5014 -  -  -  -  ;
  114 00:5014 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:5014 -  -  -  -  ;
  116 00:5014 -  -  -  -  ; ***************************************************************************************
  117 00:5014 -  -  -  -  
  118 00:5014 -  -  -  -  Int32Compare:
  119 00:5014 E5 -  -  -  		push 	hl 							; save HL
  120 00:5015 AF -  -  -  		xor 	a 							; clear carry
  121 00:5016 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:5018 D9 -  -  -  		exx
  123 00:5019 E5 -  -  -  		push 	hl 							; save HL'
  124 00:501A ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:501C -  -  -  -  		;
  126 00:501C 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:501D E2 24 50 -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:5020 78 -  -  -  		ld 		a,b
  129 00:5021 EE 80 -  -  		xor 	$80
  130 00:5023 47 -  -  -  		ld 		b,a
  131 00:5024 -  -  -  -  _I32CNoOverflow:
  132 00:5024 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:5025 B5 -  -  -  		or 		l
  134 00:5026 D9 -  -  -  		exx 
  135 00:5027 B4 -  -  -  		or 		h
  136 00:5028 B5 -  -  -  		or 		l
  137 00:5029 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:502B -  -  -  -  		;
  139 00:502B D9 -  -  -  		exx 								; is B' -ve 	
  140 00:502C CB 78 -  -  		bit 	7,b
  141 00:502E D9 -  -  -  		exx
  142 00:502F 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:5031 28 02 -  -  		jr 		z,_I32NotPos
  144 00:5033 3E FF -  -  		ld 		a,$FF
  145 00:5035 -  -  -  -  _I32NotPos:
  146 00:5035 D9 -  -  -  		exx
  147 00:5036 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:5037 D9 -  -  -  		exx
  149 00:5038 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:5039 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:503A C9 -  -  -  		ret
  152 00:503B -  -  -  -  
  153 00:503B -  -  -  -  ; ***************************************************************************************
  154 00:503B -  -  -  -  ;
  155 00:503B -  -  -  -  ;										Negate HL'HL
  156 00:503B -  -  -  -  ;
  157 00:503B -  -  -  -  ; ***************************************************************************************
  158 00:503B -  -  -  -  
  159 00:503B -  -  -  -  Int32Negate:
  160 00:503B AF -  -  -  		xor 	a
  161 00:503C CD 45 50 -  		call 	_I32NSubtract
  162 00:503F D9 -  -  -  		exx
  163 00:5040 CD 45 50 -  		call 	_I32NSubtract
  164 00:5043 D9 -  -  -  		exx
  165 00:5044 C9 -  -  -  		ret
  166 00:5045 -  -  -  -  _I32NSubtract:
  167 00:5045 D5 -  -  -  		push 	de
  168 00:5046 EB -  -  -  		ex 		de,hl
  169 00:5047 21 00 00 -  		ld 		hl,$0000
  170 00:504A ED 52 -  -  		zm_sbc_hlde_16		
  171 00:504C D1 -  -  -  		pop 	de
  172 00:504D C9 -  -  -  		ret
  173 00:504E -  -  -  -  		
  174 00:504E -  -  -  -  ; ***************************************************************************************
  175 00:504E -  -  -  -  ;
  176 00:504E -  -  -  -  ;									Changes and Updates
  177 00:504E -  -  -  -  ;
  178 00:504E -  -  -  -  ; ***************************************************************************************
  179 00:504E -  -  -  -  ;
  180 00:504E -  -  -  -  ;		Date			Notes
  181 00:504E -  -  -  -  ;		==== 			=====
  182 00:504E -  -  -  -  ;
  183 00:504E -  -  -  -  ; ***************************************************************************************
  184 00:504E -  -  -  -  		
Listing for file "_build.asm"
   76 00:504E -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:504E -  -  -  -  ; ***************************************************************************************
    2 00:504E -  -  -  -  ; ***************************************************************************************
    3 00:504E -  -  -  -  ;
    4 00:504E -  -  -  -  ;		Name : 		itostring.asm
    5 00:504E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:504E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:504E -  -  -  -  ;		Reviewed :	No
    8 00:504E -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:504E -  -  -  -  ;
   10 00:504E -  -  -  -  ; ***************************************************************************************
   11 00:504E -  -  -  -  ;
   12 00:504E -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:504E -  -  -  -  ;
   14 00:504E -  -  -  -  ; ***************************************************************************************
   15 00:504E -  -  -  -  
   16 00:504E -  -  -  -  Int32ToString:
   17 00:504E C5 -  -  -  		push 	bc 							; save string start
   18 00:504F D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:5050 E5 -  -  -  		push 	hl
   20 00:5051 11 00 00 -  		ld	 	de,$0000
   21 00:5054 D9 -  -  -  		exx
   22 00:5055 D5 -  -  -  		push 	de
   23 00:5056 E5 -  -  -  		push 	hl
   24 00:5057 11 00 00 -  		ld 		de,$000
   25 00:505A D9 -  -  -  		exx
   26 00:505B 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:505C -  -  -  -  		;
   28 00:505C CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:505E 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:5060 ED 44 -  -  		neg 								; negate base and put in E
   31 00:5062 5F -  -  -  		ld 		e,a
   32 00:5063 -  -  -  -  		;
   33 00:5063 D9 -  -  -  		exx 								; is it -ve ?
   34 00:5064 CB 7C -  -  		bit 	7,h
   35 00:5066 D9 -  -  -  		exx
   36 00:5067 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:5069 -  -  -  -  		;
   38 00:5069 CD 3B 50 -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:506C -  -  -  -  		;
   40 00:506C 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:506E 02 -  -  -  		ld 		(bc),a
   42 00:506F 03 -  -  -  		inc 	bc
   43 00:5070 -  -  -  -  _I32TSNotNegative:	
   44 00:5070 CD 7E 50 -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:5073 -  -  -  -  _I32TSExit:
   46 00:5073 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:5075 02 -  -  -  		ld 		(bc),a 
   48 00:5076 -  -  -  -  
   49 00:5076 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:5077 E1 -  -  -  		pop 	hl
   51 00:5078 D1 -  -  -  		pop 	de
   52 00:5079 D9 -  -  -  		exx
   53 00:507A E1 -  -  -  		pop 	hl
   54 00:507B D1 -  -  -  		pop 	de
   55 00:507C C1 -  -  -  		pop 	bc
   56 00:507D C9 -  -  -  		ret
   57 00:507E -  -  -  -  
   58 00:507E -  -  -  -  _I32RecursiveConvert:
   59 00:507E CD B2 4E -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:5081 F5 -  -  -  		push 	af 							; save remainder
   61 00:5082 CD 0D 50 -  		call 	Int32Zero		 			; check result is non zero
   62 00:5085 C4 7E 50 -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:5088 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:5089 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:508B 38 02 -  -  		jr 		c,_I32NotHex
   66 00:508D C6 07 -  -  		add 	a,7
   67 00:508F -  -  -  -  _I32NotHex:
   68 00:508F C6 30 -  -  		add 	a,48
   69 00:5091 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:5092 03 -  -  -  		inc 	bc
   71 00:5093 C9 -  -  -  		ret		
   72 00:5094 -  -  -  -  
   73 00:5094 -  -  -  -  ; ***************************************************************************************
   74 00:5094 -  -  -  -  ;
   75 00:5094 -  -  -  -  ;									Changes and Updates
   76 00:5094 -  -  -  -  ;
   77 00:5094 -  -  -  -  ; ***************************************************************************************
   78 00:5094 -  -  -  -  ;
   79 00:5094 -  -  -  -  ;		Date			Notes
   80 00:5094 -  -  -  -  ;		==== 			=====
   81 00:5094 -  -  -  -  ;
   82 00:5094 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 00:5094 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:5094 -  -  -  -  ; ***************************************************************************************
    2 00:5094 -  -  -  -  ; ***************************************************************************************
    3 00:5094 -  -  -  -  ;
    4 00:5094 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:5094 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:5094 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:5094 -  -  -  -  ;		Reviewed :	No
    8 00:5094 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:5094 -  -  -  -  ;
   10 00:5094 -  -  -  -  ; ***************************************************************************************
   11 00:5094 -  -  -  -  ; ***************************************************************************************
   12 00:5094 -  -  -  -  
   13 00:5094 -  -  -  -  #ifdef AQUARIUS
   14 00:5094 -  -  -  -  
   15 00:5094 -  -  -  -  ; ***************************************************************************************
   16 00:5094 -  -  -  -  ;
   17 00:5094 -  -  -  -  ;								Initialise system stuff
   18 00:5094 -  -  -  -  ;
   19 00:5094 -  -  -  -  ; ***************************************************************************************
   20 00:5094 -  -  -  -  
   21 00:5094 -  -  -  -  SYSInitialise:
   22 00:5094 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:5096 CD 9C 50 -  	call 	SYSPrintChar
   24 00:5099 C9 -  -  -  	ret
   25 00:509A -  -  -  -  
   26 00:509A -  -  -  -  ; ***************************************************************************************
   27 00:509A -  -  -  -  ;
   28 00:509A -  -  -  -  ;								Terminate system stuff
   29 00:509A -  -  -  -  ;
   30 00:509A -  -  -  -  ; ***************************************************************************************
   31 00:509A -  -  -  -  
   32 00:509A -  -  -  -  SYSTerminate:
   33 00:509A 18 FE -  -  	jr 		SYSTerminate
   34 00:509C -  -  -  -  
   35 00:509C -  -  -  -  ; ***************************************************************************************
   36 00:509C -  -  -  -  ;
   37 00:509C -  -  -  -  ;						Print A character (note 13,10 required for CRLF)
   38 00:509C -  -  -  -  ;
   39 00:509C -  -  -  -  ; ***************************************************************************************
   40 00:509C -  -  -  -  
   41 00:509C -  -  -  -  SYSPrintChar:
   42 00:509C F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:509D C5 -  -  -  	push 	bc
   44 00:509E D5 -  -  -  	push 	de
   45 00:509F E5 -  -  -  	push 	hl
   46 00:50A0 DD E5 -  -  	push 	ix
   47 00:50A2 FD E5 -  -  	push 	iy
   48 00:50A4 D9 -  -  -  	exx
   49 00:50A5 C5 -  -  -  	push 	bc
   50 00:50A6 D5 -  -  -  	push 	de
   51 00:50A7 E5 -  -  -  	push 	hl
   52 00:50A8 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:50AB E1 -  -  -  	pop 	hl
   54 00:50AC D1 -  -  -  	pop 	de
   55 00:50AD C1 -  -  -  	pop 	bc
   56 00:50AE D9 -  -  -  	exx
   57 00:50AF FD E1 -  -  	pop 	iy
   58 00:50B1 DD E1 -  -  	pop 	ix
   59 00:50B3 E1 -  -  -  	pop 	hl
   60 00:50B4 D1 -  -  -  	pop 	de
   61 00:50B5 C1 -  -  -  	pop 	bc
   62 00:50B6 F1 -  -  -  	pop 	af
   63 00:50B7 C9 -  -  -  	ret		
   64 00:50B8 -  -  -  -  
   65 00:50B8 -  -  -  -  ; ***************************************************************************************
   66 00:50B8 -  -  -  -  ;
   67 00:50B8 -  -  -  -  ;									Print Newline
   68 00:50B8 -  -  -  -  ;
   69 00:50B8 -  -  -  -  ; ***************************************************************************************
   70 00:50B8 -  -  -  -  
   71 00:50B8 -  -  -  -  SYSPrintCRLF:
   72 00:50B8 F5 -  -  -  	push 	af
   73 00:50B9 3E 0D -  -  	ld 		a,13
   74 00:50BB CD 9C 50 -  	call 	SYSPrintChar
   75 00:50BE 3E 0A -  -  	ld 		a,10
   76 00:50C0 CD 9C 50 -  	call 	SYSPrintChar
   77 00:50C3 F1 -  -  -  	pop 	af
   78 00:50C4 C9 -  -  -  	ret
   79 00:50C5 -  -  -  -  
   80 00:50C5 -  -  -  -  ; ***************************************************************************************
   81 00:50C5 -  -  -  -  ;
   82 00:50C5 -  -  -  -  ;									Get time into HL'HL
   83 00:50C5 -  -  -  -  ;
   84 00:50C5 -  -  -  -  ; ***************************************************************************************
   85 00:50C5 -  -  -  -  
   86 00:50C5 -  -  -  -  SYSGetTimer:
   87 00:50C5 DB 00 -  -   	in 		a,($00)
   88 00:50C7 6F -  -  -   	ld 		l,a
   89 00:50C8 DB 01 -  -   	in 		a,($01)
   90 00:50CA 67 -  -  -   	ld 		h,a
   91 00:50CB D9 -  -  -   	exx
   92 00:50CC DB 02 -  -   	in 		a,($02)
   93 00:50CE 6F -  -  -   	ld 		l,a
   94 00:50CF DB 03 -  -   	in 		a,($03)
   95 00:50D1 67 -  -  -   	ld 		h,a
   96 00:50D2 D9 -  -  -   	exx
   97 00:50D3 C9 -  -  -  	ret 	
   98 00:50D4 -  -  -  -  	
   99 00:50D4 -  -  -  -  #endif
  100 00:50D4 -  -  -  -  
  101 00:50D4 -  -  -  -  ; ***************************************************************************************
  102 00:50D4 -  -  -  -  ;
  103 00:50D4 -  -  -  -  ;									Changes and Updates
  104 00:50D4 -  -  -  -  ;
  105 00:50D4 -  -  -  -  ; ***************************************************************************************
  106 00:50D4 -  -  -  -  ;
  107 00:50D4 -  -  -  -  ;		Date			Notes
  108 00:50D4 -  -  -  -  ;		==== 			=====
  109 00:50D4 -  -  -  -  ;
  110 00:50D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   78 00:50D4 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:50D4 -  -  -  -  ; ***************************************************************************************
    2 00:50D4 -  -  -  -  ; ***************************************************************************************
    3 00:50D4 -  -  -  -  ;
    4 00:50D4 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:50D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:50D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:50D4 -  -  -  -  ;		Reviewed :	No
    8 00:50D4 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:50D4 -  -  -  -  ;
   10 00:50D4 -  -  -  -  ; ***************************************************************************************
   11 00:50D4 -  -  -  -  ; ***************************************************************************************
   12 00:50D4 -  -  -  -  
   13 00:50D4 -  -  -  -  #ifdef CLEANEZ80
   14 00:50D4             
   15 00:50D4             ; ***************************************************************************************
   16 00:50D4             ;
   17 00:50D4             ;								Initialise system stuff
   18 00:50D4             ;
   19 00:50D4             ; ***************************************************************************************
   20 00:50D4             
   21 00:50D4             SYSInitialise:
   22 00:50D4             	ret
   23 00:50D4             
   24 00:50D4             ; ***************************************************************************************
   25 00:50D4             ;
   26 00:50D4             ;								Terminate system stuff
   27 00:50D4             ;
   28 00:50D4             ; ***************************************************************************************
   29 00:50D4             
   30 00:50D4             SYSTerminate:
   31 00:50D4             	ret
   32 00:50D4             
   33 00:50D4             ; ***************************************************************************************
   34 00:50D4             ;
   35 00:50D4             ;								Print A character
   36 00:50D4             ;
   37 00:50D4             ; ***************************************************************************************
   38 00:50D4             
   39 00:50D4             SYSPrintChar:
   40 00:50D4             	ret		
   41 00:50D4             
   42 00:50D4             ; ***************************************************************************************
   43 00:50D4             ;
   44 00:50D4             ;									Print Newline
   45 00:50D4             ;
   46 00:50D4             ; ***************************************************************************************
   47 00:50D4             
   48 00:50D4             SYSPrintCRLF:
   49 00:50D4             	ret
   50 00:50D4             
   51 00:50D4             ; ***************************************************************************************
   52 00:50D4             ;
   53 00:50D4             ;									Get time into HL'HL
   54 00:50D4             ;
   55 00:50D4             ; ***************************************************************************************
   56 00:50D4             
   57 00:50D4             SYSGetTimer:
   58 00:50D4             	ret
   59 00:50D4             
   60 00:50D4             #endif
   61 00:50D4 -  -  -  -  
   62 00:50D4 -  -  -  -  ; ***************************************************************************************
   63 00:50D4 -  -  -  -  ;
   64 00:50D4 -  -  -  -  ;									Changes and Updates
   65 00:50D4 -  -  -  -  ;
   66 00:50D4 -  -  -  -  ; ***************************************************************************************
   67 00:50D4 -  -  -  -  ;
   68 00:50D4 -  -  -  -  ;		Date			Notes
   69 00:50D4 -  -  -  -  ;		==== 			=====
   70 00:50D4 -  -  -  -  ;
   71 00:50D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 00:50D4 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:50D4 -  -  -  -  ; ***************************************************************************************
    2 00:50D4 -  -  -  -  ; ***************************************************************************************
    3 00:50D4 -  -  -  -  ;
    4 00:50D4 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:50D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:50D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:50D4 -  -  -  -  ;		Reviewed :	No
    8 00:50D4 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:50D4 -  -  -  -  ;
   10 00:50D4 -  -  -  -  ; ***************************************************************************************
   11 00:50D4 -  -  -  -  ; ***************************************************************************************
   12 00:50D4 -  -  -  -  
   13 00:50D4 -  -  -  -  #ifdef TI84
   14 00:50D4             
   15 00:50D4             ; ***************************************************************************************
   16 00:50D4             ;
   17 00:50D4             ;								Initialise system stuff
   18 00:50D4             ;
   19 00:50D4             ; ***************************************************************************************
   20 00:50D4             
   21 00:50D4             SYSInitialise:
   22 00:50D4             	di
   23 00:50D4             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:50D4             	ld 		(_IYTemp84),iy
   25 00:50D4             	ret
   26 00:50D4             
   27 00:50D4             ; ***************************************************************************************
   28 00:50D4             ;
   29 00:50D4             ;								Terminate system stuff
   30 00:50D4             ;
   31 00:50D4             ; ***************************************************************************************
   32 00:50D4             
   33 00:50D4             SYSTerminate:
   34 00:50D4             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:50D4             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:50D4             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:50D4             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:50D4             	ei
   39 00:50D4             	ret 										; and exit.
   40 00:50D4             
   41 00:50D4             _StackTemp84:									; temp var for TI84 only.
   42 00:50D4             	.dw 	0,0
   43 00:50D4             _IYTemp84:
   44 00:50D4             	.dw 	0,0		
   45 00:50D4             
   46 00:50D4             ; ***************************************************************************************
   47 00:50D4             ;
   48 00:50D4             ;								Print A character
   49 00:50D4             ;
   50 00:50D4             ; ***************************************************************************************
   51 00:50D4             
   52 00:50D4             SYSPrintChar:
   53 00:50D4             	push 	af 									; we stack everything including alt registers
   54 00:50D4             	push 	bc
   55 00:50D4             	push 	de
   56 00:50D4             	push 	hl
   57 00:50D4             	push 	ix
   58 00:50D4             	push 	iy
   59 00:50D4             	exx
   60 00:50D4             	push 	bc
   61 00:50D4             	push 	de
   62 00:50D4             	push 	hl
   63 00:50D4             
   64 00:50D4             	ld 		iy,(_IYTemp84)
   65 00:50D4             	call 	_PutC 								; print A as character
   66 00:50D4             	di
   67 00:50D4             	ld 		(_IYTemp84),iy
   68 00:50D4             
   69 00:50D4             	pop 	hl
   70 00:50D4             	pop 	de
   71 00:50D4             	pop 	bc
   72 00:50D4             	exx
   73 00:50D4             	pop 	iy
   74 00:50D4             	pop 	ix
   75 00:50D4             	pop 	hl
   76 00:50D4             	pop 	de
   77 00:50D4             	pop 	bc
   78 00:50D4             	pop 	af
   79 00:50D4             	ret		
   80 00:50D4             
   81 00:50D4             ; ***************************************************************************************
   82 00:50D4             ;
   83 00:50D4             ;									Print Newline
   84 00:50D4             ;
   85 00:50D4             ; ***************************************************************************************
   86 00:50D4             
   87 00:50D4             SYSPrintCRLF:
   88 00:50D4             	push 	af 									; we stack everything including alt registers
   89 00:50D4             	push 	bc
   90 00:50D4             	push 	de
   91 00:50D4             	push 	hl
   92 00:50D4             	push 	ix
   93 00:50D4             	push 	iy
   94 00:50D4             	exx
   95 00:50D4             	push 	bc
   96 00:50D4             	push 	de
   97 00:50D4             	push 	hl
   98 00:50D4             
   99 00:50D4             	ld 		iy,(_IYTemp84)
  100 00:50D4             	call 	_newline
  101 00:50D4             	di
  102 00:50D4             	ld 		(_IYTemp84),iy
  103 00:50D4             
  104 00:50D4             	pop 	hl
  105 00:50D4             	pop 	de
  106 00:50D4             	pop 	bc
  107 00:50D4             	exx
  108 00:50D4             	pop 	iy
  109 00:50D4             	pop 	ix
  110 00:50D4             	pop 	hl
  111 00:50D4             	pop 	de
  112 00:50D4             	pop 	bc
  113 00:50D4             	pop 	af
  114 00:50D4             	ret
  115 00:50D4             
  116 00:50D4             ; ***************************************************************************************
  117 00:50D4             ;
  118 00:50D4             ;									Get time into HL'HL
  119 00:50D4             ;
  120 00:50D4             ; ***************************************************************************************
  121 00:50D4             
  122 00:50D4             SYSGetTimer:
  123 00:50D4             	ld 		hl,$1234
  124 00:50D4             	exx
  125 00:50D4             	ld 		hl,$5678
  126 00:50D4             	exx
  127 00:50D4             	ret
  128 00:50D4             
  129 00:50D4             #endif
  130 00:50D4 -  -  -  -  
  131 00:50D4 -  -  -  -  ; ***************************************************************************************
  132 00:50D4 -  -  -  -  ;
  133 00:50D4 -  -  -  -  ;									Changes and Updates
  134 00:50D4 -  -  -  -  ;
  135 00:50D4 -  -  -  -  ; ***************************************************************************************
  136 00:50D4 -  -  -  -  ;
  137 00:50D4 -  -  -  -  ;		Date			Notes
  138 00:50D4 -  -  -  -  ;		==== 			=====
  139 00:50D4 -  -  -  -  ;
  140 00:50D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 00:50D4 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:50D4 -  -  -  -  ; ***************************************************************************************
    2 00:50D4 -  -  -  -  ; ***************************************************************************************
    3 00:50D4 -  -  -  -  ;
    4 00:50D4 -  -  -  -  ;		Name : 		basic.asm
    5 00:50D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:50D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:50D4 -  -  -  -  ;		Reviewed :	No
    8 00:50D4 -  -  -  -  ;		Purpose :	Main program.
    9 00:50D4 -  -  -  -  ;
   10 00:50D4 -  -  -  -  ; ***************************************************************************************
   11 00:50D4 -  -  -  -  ; ***************************************************************************************
   12 00:50D4 -  -  -  -  
   13 00:50D4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:5400 -  -  -  -  TestInstance:
   15 00:5400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5400 -  -  -  -  ;
    2 00:5400 -  -  -  -  ;	This code automatically generated.
    3 00:5400 -  -  -  -  ;
    4 00:5400 -  -  -  -  TestProgram:
    5 00:5400 1A 01 00 B7 
              13 04 12 13 
              1B A7 C1 3F 
              04 4E 65 78 
              74 0D A7 B7 
              13 04 12 13 
              1B 80 08 02 
              00 B7 13 04 
              17 80 05 03 
              00 CC 80 09 
              04 00 B6 B7 
              13 04 17 80 
              0B 05 00 C1 
              3F 03 74 65 
              78 0D 80 0A 
              06 00 B7 13 
              04 12 13 1B 
              80 0C 07 00 
              C1 3F 04 65 
              74 65 78 0D 
              80 05 08 00 
              B8 80 0B 09 
              00 B6 B7 13 
              04 12 13 1B 
              80 0D 0A 00 
              C1 3F 05 74 
              65 73 74 31 
              0D 80 05 0B 
              00 B8 80 00 	.db	$1a,$01,$00,$b7,$13,$04,$12,$13,$1b,$a7,$c1,$3f,$04,$4e,$65,$78,$74,$0d,$a7,$b7,$13,$04,$12,$13,$1b,$80,$08,$02,$00,$b7,$13,$04,$17,$80,$05,$03,$00,$cc,$80,$09,$04,$00,$b6,$b7,$13,$04,$17,$80,$0b,$05,$00,$c1,$3f,$03,$74,$65,$78,$0d,$80,$0a,$06,$00,$b7,$13,$04,$12,$13,$1b,$80,$0c,$07,$00,$c1,$3f,$04,$65,$74,$65,$78,$0d,$80,$05,$08,$00,$b8,$80,$0b,$09,$00,$b6,$b7,$13,$04,$12,$13,$1b,$80,$0d,$0a,$00,$c1,$3f,$05,$74,$65,$73,$74,$31,$0d,$80,$05,$0b,$00,$b8,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5474 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6474 -  -  -  -  EndTestInstance:
   18 00:6474 -  -  -  -  		
   19 00:6474 -  -  -  -  ; ***************************************************************************************
   20 00:6474 -  -  -  -  ;
   21 00:6474 -  -  -  -  ;									Changes and Updates
   22 00:6474 -  -  -  -  ;
   23 00:6474 -  -  -  -  ; ***************************************************************************************
   24 00:6474 -  -  -  -  ;
   25 00:6474 -  -  -  -  ;		Date			Notes
   26 00:6474 -  -  -  -  ;		==== 			=====
   27 00:6474 -  -  -  -  ;
   28 00:6474 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 00:6474 -  -  -  -  FinalAddress:
