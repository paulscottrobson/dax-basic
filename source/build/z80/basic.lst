    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_MEMORY = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_MEMORY
   63 00:0000             	ld a,ERRID_MEMORY
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOCOMMA = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   70 00:0000             	ld a,ERRID_NOCOMMA
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NODOLLAR = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   77 00:0000             	ld a,ERRID_NODOLLAR
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOLBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   84 00:0000             	ld a,ERRID_NOLBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NORBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   91 00:0000             	ld a,ERRID_NORBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOTREF = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOTREF
   98 00:0000             	ld a,ERRID_NOTREF
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_STOP = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_STOP
  105 00:0000             	ld a,ERRID_STOP
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_SYNTAX = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_SYNTAX
  112 00:0000             	ld a,ERRID_SYNTAX
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_TODO = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_TODO
  119 00:0000             	ld a,ERRID_TODO
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  126 00:0000             	ld a,ERRID_UNKNOWNVAR
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 21 40 40 -  		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:4003 31 FF BF -  		ld 		sp,$BFFF
   41 00:4006 -  -  -  -  #endif
   42 00:4006 -  -  -  -  
   43 00:4006 -  -  -  -  #endif
   44 00:4006 CD FE 4C -  		call 	SYSInitialise
   45 00:4009 11 00 50 -  		ld 		de,TestInstance
   46 00:400C 21 B4 60 -  		ld 		hl,EndTestInstance
   47 00:400F CD A9 47 -  		call 	SetCurrentInstance
   48 00:4012 -  -  -  -  
   49 00:4012 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:4014 32 60 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:4017 -  -  -  -  		
   52 00:4017 C3 67 42 -  		jp 		Command_RUN
   53 00:401A -  -  -  -  
   54 00:401A -  -  -  -  WarmStart:		
   55 00:401A 3E 2A -  -  		ld 		a,'*'
   56 00:401C CD 06 4D -  		call 	SYSPrintChar
   57 00:401F CD 04 4D -  		call 	SYSTerminate
   58 00:4022 -  -  -  -  
   59 00:4022 -  -  -  -  Unimplemented:
   60 00:4022 3E 05 C3 0E 
              43 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:4027 -  -  -  -  Int32DivZeroHandler:
   62 00:4027 3E 06 C3 0E 
              43 -  -  -  		ERR_DIVZERO
   63 00:402C -  -  -  -  
   64 00:402C -  -  -  -  ; ***************************************************************************************
   65 00:402C -  -  -  -  ;
   66 00:402C -  -  -  -  ;									Changes and Updates
   67 00:402C -  -  -  -  ;
   68 00:402C -  -  -  -  ; ***************************************************************************************
   69 00:402C -  -  -  -  ;
   70 00:402C -  -  -  -  ;		Date			Notes
   71 00:402C -  -  -  -  ;		==== 			=====
   72 00:402C -  -  -  -  ;
   73 00:402C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:402C -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:402C -  -  -  -  ; ***************************************************************************************
    2 00:402C -  -  -  -  ; ***************************************************************************************
    3 00:402C -  -  -  -  ;
    4 00:402C -  -  -  -  ;		Name : 		01data.asm
    5 00:402C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:402C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:402C -  -  -  -  ;		Reviewed :	No
    8 00:402C -  -  -  -  ;		Purpose :	Data space
    9 00:402C -  -  -  -  ;
   10 00:402C -  -  -  -  ; ***************************************************************************************
   11 00:402C -  -  -  -  ; ***************************************************************************************
   12 00:402C -  -  -  -  
   13 00:402C -  -  -  -  ; ***************************************************************************************
   14 00:402C -  -  -  -  ;
   15 00:402C -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:402C -  -  -  -  ;				LD (xxx),rr etc.
   17 00:402C -  -  -  -  ;
   18 00:402C -  -  -  -  ; ***************************************************************************************
   19 00:402C -  -  -  -  
   20 00:402C -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:402C -  -  -  -  
   22 00:402C -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:402C -  -  -  -  											; must be power of 2. 
   24 00:402C -  -  -  -  
   25 00:402C -  -  -  -  ; ***************************************************************************************
   26 00:402C -  -  -  -  ;
   27 00:402C -  -  -  -  ;								Defines the current instance
   28 00:402C -  -  -  -  ;
   29 00:402C -  -  -  -  ; ***************************************************************************************
   30 00:402C -  -  -  -  
   31 00:402C -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:402C 00 00 00 00 		.dw 	0,0
   33 00:4030 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:4030 00 00 00 00 		.dw 	0,0		
   35 00:4034 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:4034 00 00 00 00 		.dw 	0,0 							
   37 00:4038 -  -  -  -  
   38 00:4038 -  -  -  -  ; ***************************************************************************************
   39 00:4038 -  -  -  -  ;
   40 00:4038 -  -  -  -  ;								Allocatable memory, working down.
   41 00:4038 -  -  -  -  ;
   42 00:4038 -  -  -  -  ; ***************************************************************************************
   43 00:4038 -  -  -  -  
   44 00:4038 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:4038 00 00 00 00 		.dw 	0,0
   46 00:403C -  -  -  -  
   47 00:403C -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:403C 00 00 00 00 		.dw 	0,0		
   49 00:4040 -  -  -  -  
   50 00:4040 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:4040 00 00 00 00 		.dw 	0,0
   52 00:4044 -  -  -  -  
   53 00:4044 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:4044 00 00 00 00 		.dw 	0,0
   55 00:4048 -  -  -  -  
   56 00:4048 -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:4048 00 00 00 00 		.dw 	0,0		
   58 00:404C -  -  -  -  
   59 00:404C -  -  -  -  ;
   60 00:404C -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:404C -  -  -  -  ;
   62 00:404C -  -  -  -  
   63 00:404C -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:404C 00 00 00 00 		.dw 	0,0
   65 00:4050 -  -  -  -  		
   66 00:4050 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:4050 00 00 00 00 		.dw 	0,0
   68 00:4054 -  -  -  -  
   69 00:4054 -  -  -  -  ; ***************************************************************************************
   70 00:4054 -  -  -  -  ;
   71 00:4054 -  -  -  -  ;										Run variables
   72 00:4054 -  -  -  -  ;
   73 00:4054 -  -  -  -  ; ***************************************************************************************
   74 00:4054 -  -  -  -  
   75 00:4054 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:4054 00 00 00 00 		.dw 	0,0
   77 00:4058 -  -  -  -  
   78 00:4058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:4058 00 00 00 00 		.dw 	0,0
   80 00:405C -  -  -  -  		
   81 00:405C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:405C 00 00 00 00 		.dw 	0,0
   83 00:4060 -  -  -  -  
   84 00:4060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:4060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:4066 -  -  -  -  
   87 00:4066 -  -  -  -  AConvert: 									; used for address conversions.
   88 00:4066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:406C -  -  -  -  		
   90 00:406C -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:406C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:407C -  -  -  -  
   93 00:407C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:407C 00 00 -  -  		.dw 	0
   95 00:407E -  -  -  -  
   96 00:407E -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:407E 00 00 -  -  		.dw 	0 
   98 00:4080 -  -  -  -  		
   99 00:4080 -  -  -  -  ; ***************************************************************************************
  100 00:4080 -  -  -  -  ;
  101 00:4080 -  -  -  -  ;									Variable Information
  102 00:4080 -  -  -  -  ;
  103 00:4080 -  -  -  -  ; ***************************************************************************************
  104 00:4080 -  -  -  -  
  105 00:4080 -  -  -  -  VarNameStart: 								; first byte of name
  106 00:4080 00 00 00 00 		.dw 	0,0
  107 00:4084 -  -  -  -  VarHash: 									; name hash value
  108 00:4084 00 00 -  -  		.dw 	0		
  109 00:4086 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 00:4086 00 00 00 00 		.dw 	0,0
  111 00:408A -  -  -  -  		
  112 00:408A -  -  -  -  ; ***************************************************************************************
  113 00:408A -  -  -  -  ;
  114 00:408A -  -  -  -  ;										  Buffers
  115 00:408A -  -  -  -  ;
  116 00:408A -  -  -  -  ; ***************************************************************************************
  117 00:408A -  -  -  -  
  118 00:408A -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 00:408A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 00:409A -  -  -  -  
  121 00:409A -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 00:409A 00 00 -  -  		.dw 	0
  123 00:409C -  -  -  -  
  124 00:409C -  -  -  -  ConvertBuffer: 								; general usage
  125 00:409C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 00:40DC -  -  -  -  
  127 00:40DC -  -  -  -  ; ***************************************************************************************
  128 00:40DC -  -  -  -  ;
  129 00:40DC -  -  -  -  ;									Changes and Updates
  130 00:40DC -  -  -  -  ;
  131 00:40DC -  -  -  -  ; ***************************************************************************************
  132 00:40DC -  -  -  -  ;
  133 00:40DC -  -  -  -  ;		Date			Notes
  134 00:40DC -  -  -  -  ;		==== 			=====
  135 00:40DC -  -  -  -  ;
  136 00:40DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40DC -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40DC -  -  -  -  ; ***************************************************************************************
    2 00:40DC -  -  -  -  ; ***************************************************************************************
    3 00:40DC -  -  -  -  ;
    4 00:40DC -  -  -  -  ;		Name : 		assert.asm
    5 00:40DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40DC -  -  -  -  ;		Reviewed :	No
    8 00:40DC -  -  -  -  ;		Purpose :	Assert command
    9 00:40DC -  -  -  -  ;
   10 00:40DC -  -  -  -  ; ***************************************************************************************
   11 00:40DC -  -  -  -  ; ***************************************************************************************
   12 00:40DC -  -  -  -  
   13 00:40DC -  -  -  -  ; ***************************************************************************************
   14 00:40DC -  -  -  -  ;
   15 00:40DC -  -  -  -  ;									ASSERT command
   16 00:40DC -  -  -  -  ;
   17 00:40DC -  -  -  -  ; ***************************************************************************************
   18 00:40DC -  -  -  -  
   19 00:40DC -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40DC CD F3 44 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40DF 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40E5 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40E6 3E 01 C3 0E 
              43 -  -  -  		ERR_ASSERT
   24 00:40EB -  -  -  -  
   25 00:40EB -  -  -  -  ; ***************************************************************************************
   26 00:40EB -  -  -  -  ;
   27 00:40EB -  -  -  -  ;									Changes and Updates
   28 00:40EB -  -  -  -  ;
   29 00:40EB -  -  -  -  ; ***************************************************************************************
   30 00:40EB -  -  -  -  ;
   31 00:40EB -  -  -  -  ;		Date			Notes
   32 00:40EB -  -  -  -  ;		==== 			=====
   33 00:40EB -  -  -  -  ;
   34 00:40EB -  -  -  -  ; ***************************************************************************************
   35 00:40EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:40EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40EB -  -  -  -  ; ***************************************************************************************
    2 00:40EB -  -  -  -  ; ***************************************************************************************
    3 00:40EB -  -  -  -  ;
    4 00:40EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40EB -  -  -  -  ;		Reviewed :	No
    8 00:40EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40EB -  -  -  -  ;
   10 00:40EB -  -  -  -  ; ***************************************************************************************
   11 00:40EB -  -  -  -  ; ***************************************************************************************
   12 00:40EB -  -  -  -  
   13 00:40EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40EB -  -  -  -  BadCmd_Comma: 		;; [~]
   17 00:40EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 00:40EB -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40EB C3 6B 43 -  		jp 		SyntaxError
   20 00:40EE -  -  -  -  
   21 00:40EE -  -  -  -  ; ***************************************************************************************
   22 00:40EE -  -  -  -  ;
   23 00:40EE -  -  -  -  ;									Changes and Updates
   24 00:40EE -  -  -  -  ;
   25 00:40EE -  -  -  -  ; ***************************************************************************************
   26 00:40EE -  -  -  -  ;
   27 00:40EE -  -  -  -  ;		Date			Notes
   28 00:40EE -  -  -  -  ;		==== 			=====
   29 00:40EE -  -  -  -  ;
   30 00:40EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40EE -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40EE -  -  -  -  ; ***************************************************************************************
    2 00:40EE -  -  -  -  ; ***************************************************************************************
    3 00:40EE -  -  -  -  ;
    4 00:40EE -  -  -  -  ;		Name : 		colon.asm
    5 00:40EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EE -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40EE -  -  -  -  ;		Reviewed :	No
    8 00:40EE -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40EE -  -  -  -  ;
   10 00:40EE -  -  -  -  ; ***************************************************************************************
   11 00:40EE -  -  -  -  ; ***************************************************************************************
   12 00:40EE -  -  -  -  
   13 00:40EE -  -  -  -  ; ***************************************************************************************
   14 00:40EE -  -  -  -  ;
   15 00:40EE -  -  -  -  ;								Colon command, this is ignored.
   16 00:40EE -  -  -  -  ;
   17 00:40EE -  -  -  -  ; ***************************************************************************************
   18 00:40EE -  -  -  -  
   19 00:40EE -  -  -  -  Command_Colon: 	;; [:]
   20 00:40EE C9 -  -  -  		ret
   21 00:40EF -  -  -  -  
   22 00:40EF -  -  -  -  ; ***************************************************************************************
   23 00:40EF -  -  -  -  ;
   24 00:40EF -  -  -  -  ;									Changes and Updates
   25 00:40EF -  -  -  -  ;
   26 00:40EF -  -  -  -  ; ***************************************************************************************
   27 00:40EF -  -  -  -  ;
   28 00:40EF -  -  -  -  ;		Date			Notes
   29 00:40EF -  -  -  -  ;		==== 			=====
   30 00:40EF -  -  -  -  ;
   31 00:40EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40EF -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:40EF -  -  -  -  ; ***************************************************************************************
    2 00:40EF -  -  -  -  ; ***************************************************************************************
    3 00:40EF -  -  -  -  ;
    4 00:40EF -  -  -  -  ;		Name : 		dim.asm
    5 00:40EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40EF -  -  -  -  ;		Date : 		4th June 2022
    7 00:40EF -  -  -  -  ;		Reviewed :	No
    8 00:40EF -  -  -  -  ;		Purpose :	Dim command
    9 00:40EF -  -  -  -  ;
   10 00:40EF -  -  -  -  ; ***************************************************************************************
   11 00:40EF -  -  -  -  ; ***************************************************************************************
   12 00:40EF -  -  -  -  
   13 00:40EF -  -  -  -  ; ***************************************************************************************
   14 00:40EF -  -  -  -  ;
   15 00:40EF -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:40EF -  -  -  -  ;	
   17 00:40EF -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:40EF -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:40EF -  -  -  -  ;								(can be comma chained)
   20 00:40EF -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:40EF -  -  -  -  ;
   22 00:40EF -  -  -  -  ; ***************************************************************************************
   23 00:40EF -  -  -  -  
   24 00:40EF -  -  -  -  Command_DIM: 	;; [dim]
   25 00:40EF -  -  -  -  		;
   26 00:40EF -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:40EF -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:40EF -  -  -  -  		;
   29 00:40EF DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:40F1 D1 -  -  -  		pop 	de
   31 00:40F2 -  -  -  -  		;
   32 00:40F2 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:40F5 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:40F7 D2 6B 43 -  		jp 		nc,SyntaxError 				; no identifier here
   35 00:40FA -  -  -  -  _DISkip:
   36 00:40FA DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:40FC DD 7E 00 -  		ld 		a,(ix+0)
   38 00:40FF FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:4101 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:4103 -  -  -  -  		;
   41 00:4103 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:4106 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:4108 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:4109 CC 60 41 -  		call 	z,DimensionArray 			; DE points to identifier.
   45 00:410C F1 -  -  -  		pop 	af
   46 00:410D C4 1F 41 -  		call 	nz,DimensionAllocate
   47 00:4110 -  -  -  -  		;
   48 00:4110 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:4113 FE A6 -  -  		cp 		KWD_COMMA
   50 00:4115 C0 -  -  -  		ret 	nz
   51 00:4116 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:4118 18 D5 -  -  		jr 		Command_DIM
   53 00:411A -  -  -  -  
   54 00:411A -  -  -  -  _CDError:
   55 00:411A 3E 04 C3 0E 
              43 -  -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:411F -  -  -  -  
   57 00:411F -  -  -  -  ; ***************************************************************************************
   58 00:411F -  -  -  -  ;
   59 00:411F -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:411F -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:411F -  -  -  -  ;
   62 00:411F -  -  -  -  ; ***************************************************************************************
   63 00:411F -  -  -  -  
   64 00:411F -  -  -  -  DimensionAllocate:
   65 00:411F D5 -  -  -  		push 	de 							; save start on stack
   66 00:4120 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:4122 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:4124 32 7C 40 -  		ld 		(AllowAutoCreate),a
   69 00:4127 CD 15 48 -  		call 	FindVariable 				; find/create the variable appropriately.
   70 00:412A CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:412C 28 EC -  -  		jr 		z,_CDError
   72 00:412E CB 41 -  -  		bit 	CIsString,c
   73 00:4130 20 E8 -  -  		jr 		nz,_CDError
   74 00:4132 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:4134 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:4135 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:4137 CD 03 43 -  		call 	CheckNextA 					; check for [
   78 00:413A CD F3 44 -  		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:413D 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:413F CD 03 43 -  		call 	CheckNextA 					; check for ]
   81 00:4142 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:4143 7C -  -  -  		ld 		a,h
   83 00:4144 B5 -  -  -  		or 		l
   84 00:4145 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:4147 D9 -  -  -  		exx
   86 00:4148 23 -  -  -  		inc 	hl
   87 00:4149 D9 -  -  -  		exx
   88 00:414A -  -  -  -  _DANoCarry:
   89 00:414A D9 -  -  -  		exx 								; check if HL' is zero
   90 00:414B 7C -  -  -  		ld 		a,h
   91 00:414C B5 -  -  -  		or 		l
   92 00:414D D9 -  -  -  		exx
   93 00:414E 20 CA -  -  		jr 		nz,_CDError
   94 00:4150 CD 4A 47 -  		call 	AllocateBytes 				; allocate that much memory.
   95 00:4153 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:4154 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:4155 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:415B AF -  -  -  		xor 	a 							; autocreate off
   99 00:415C 32 7C 40 -  		ld 		(AllowAutoCreate),a
  100 00:415F C9 -  -  -  		ret
  101 00:4160 -  -  -  -  
  102 00:4160 -  -  -  -  ; ***************************************************************************************
  103 00:4160 -  -  -  -  ;
  104 00:4160 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:4160 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:4160 -  -  -  -  ;
  107 00:4160 -  -  -  -  ; ***************************************************************************************
  108 00:4160 -  -  -  -  
  109 00:4160 -  -  -  -  DimensionArray:
  110 00:4160 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:4161 -  -  -  -  		;
  112 00:4161 CD F3 44 -  		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:4164 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:4165 E6 FC -  -  		and 	$FC
  115 00:4167 D9 -  -  -  		exx
  116 00:4168 B4 -  -  -  		or 		h
  117 00:4169 B5 -  -  -  		or 		l
  118 00:416A D9 -  -  -  		exx
  119 00:416B 20 AD -  -  		jr 		nz,_CDError
  120 00:416D -  -  -  -  		;
  121 00:416D DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:416F E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:4170 -  -  -  -  		;
  124 00:4170 CD 96 48 -  		call 	VariableInformation 		; get information about this array
  125 00:4173 CD CC 48 -  		call 	VariableSearchList 			; look to see if already present.
  126 00:4176 30 A2 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:4178 -  -  -  -  		;
  128 00:4178 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:4179 E5 -  -  -  		push 	hl
  130 00:417A 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:417B 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:417C 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:417D 29 -  -  -  		add 	hl,hl
  134 00:417E CD D6 47 -  		call 	VariableCreate 				; create the array, completely blank.
  135 00:4181 -  -  -  -  		;
  136 00:4181 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:4182 01 09 00 -  		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:4185 09 -  -  -  		add 	hl,bc
  139 00:4186 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:418C DD E1 -  -  		pop 	ix 							; restore end position
  141 00:418E C9 -  -  -  		ret		
  142 00:418F -  -  -  -  
  143 00:418F -  -  -  -  
  144 00:418F -  -  -  -  ; ***************************************************************************************
  145 00:418F -  -  -  -  ;
  146 00:418F -  -  -  -  ;									Changes and Updates
  147 00:418F -  -  -  -  ;
  148 00:418F -  -  -  -  ; ***************************************************************************************
  149 00:418F -  -  -  -  ;
  150 00:418F -  -  -  -  ;		Date			Notes
  151 00:418F -  -  -  -  ;		==== 			=====
  152 00:418F -  -  -  -  ;
  153 00:418F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:418F -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:418F -  -  -  -  ; ***************************************************************************************
    2 00:418F -  -  -  -  ; ***************************************************************************************
    3 00:418F -  -  -  -  ;
    4 00:418F -  -  -  -  ;		Name : 		end.asm
    5 00:418F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:418F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:418F -  -  -  -  ;		Reviewed :	No
    8 00:418F -  -  -  -  ;		Purpose :	End command
    9 00:418F -  -  -  -  ;
   10 00:418F -  -  -  -  ; ***************************************************************************************
   11 00:418F -  -  -  -  ; ***************************************************************************************
   12 00:418F -  -  -  -  
   13 00:418F -  -  -  -  ; ***************************************************************************************
   14 00:418F -  -  -  -  ;
   15 00:418F -  -  -  -  ;										END command
   16 00:418F -  -  -  -  ;
   17 00:418F -  -  -  -  ; ***************************************************************************************
   18 00:418F -  -  -  -  
   19 00:418F -  -  -  -  Command_END: 	;; [end]
   20 00:418F 3E 00 C3 0E 
              43 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:4194 -  -  -  -  
   22 00:4194 -  -  -  -  ; ***************************************************************************************
   23 00:4194 -  -  -  -  ;
   24 00:4194 -  -  -  -  ;									Changes and Updates
   25 00:4194 -  -  -  -  ;
   26 00:4194 -  -  -  -  ; ***************************************************************************************
   27 00:4194 -  -  -  -  ;
   28 00:4194 -  -  -  -  ;		Date			Notes
   29 00:4194 -  -  -  -  ;		==== 			=====
   30 00:4194 -  -  -  -  ;
   31 00:4194 -  -  -  -  ; ***************************************************************************************
   32 00:4194 -  -  -  -  		
Listing for file "_build.asm"
   18 00:4194 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:4194 -  -  -  -  ; ***************************************************************************************
    2 00:4194 -  -  -  -  ; ***************************************************************************************
    3 00:4194 -  -  -  -  ;
    4 00:4194 -  -  -  -  ;		Name : 		endofline.asm
    5 00:4194 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4194 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4194 -  -  -  -  ;		Reviewed :	None
    8 00:4194 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:4194 -  -  -  -  ;
   10 00:4194 -  -  -  -  ; ***************************************************************************************
   11 00:4194 -  -  -  -  ; ***************************************************************************************
   12 00:4194 -  -  -  -  
   13 00:4194 -  -  -  -  ; ***************************************************************************************
   14 00:4194 -  -  -  -  ;
   15 00:4194 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:4194 -  -  -  -  ;
   17 00:4194 -  -  -  -  ; ***************************************************************************************
   18 00:4194 -  -  -  -  
   19 00:4194 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:4194 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:4198 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:419B DD 5E 00 -  		ld 		e,(ix+0)
   23 00:419E DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:41A0 -  -  -  -  		;
   25 00:41A0 ED 7B 5C 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:41A4 C3 76 42 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:41A7 -  -  -  -  
   28 00:41A7 -  -  -  -  ; ***************************************************************************************
   29 00:41A7 -  -  -  -  ;
   30 00:41A7 -  -  -  -  ;									Changes and Updates
   31 00:41A7 -  -  -  -  ;
   32 00:41A7 -  -  -  -  ; ***************************************************************************************
   33 00:41A7 -  -  -  -  ;
   34 00:41A7 -  -  -  -  ;		Date			Notes
   35 00:41A7 -  -  -  -  ;		==== 			=====
   36 00:41A7 -  -  -  -  ;
   37 00:41A7 -  -  -  -  ; ***************************************************************************************
   38 00:41A7 -  -  -  -  		
Listing for file "_build.asm"
   19 00:41A7 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:41A7 -  -  -  -  ; ***************************************************************************************
    2 00:41A7 -  -  -  -  ; ***************************************************************************************
    3 00:41A7 -  -  -  -  ;
    4 00:41A7 -  -  -  -  ;		Name : 		let.asm
    5 00:41A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41A7 -  -  -  -  ;		Date : 		4th June 2022
    7 00:41A7 -  -  -  -  ;		Reviewed :	No
    8 00:41A7 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:41A7 -  -  -  -  ;
   10 00:41A7 -  -  -  -  ; ***************************************************************************************
   11 00:41A7 -  -  -  -  ; ***************************************************************************************
   12 00:41A7 -  -  -  -  
   13 00:41A7 -  -  -  -  ; ***************************************************************************************
   14 00:41A7 -  -  -  -  ;
   15 00:41A7 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:41A7 -  -  -  -  ;
   17 00:41A7 -  -  -  -  ; ***************************************************************************************
   18 00:41A7 -  -  -  -  
   19 00:41A7 -  -  -  -  Command_LET: 	;; [let]
   20 00:41A7 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:41AA FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:41AC 28 28 -  -  		jr 		z,_CLString
   23 00:41AE FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:41B0 30 05 -  -  		jr 		nc,_CLNoAuto
   25 00:41B2 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:41B4 32 7C 40 -  		ld 		(AllowAutoCreate),a
   27 00:41B7 -  -  -  -  _CLNoAuto:
   28 00:41B7 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:41B9 CD 84 44 -  		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:41BC CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:41BE CA 6B 43 -  		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:41C1 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:41C2 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:41C3 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:41C4 32 7C 40 -  		ld 		(AllowAutoCreate),a 		
   36 00:41C7 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:41C9 CD 03 43 -  		call 	CheckNextA
   38 00:41CC -  -  -  -  
   39 00:41CC CD ED 44 -  		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:41CF -  -  -  -  
   41 00:41CF D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:41D0 43 -  -  -  		ld 		b,e 						
   43 00:41D1 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:41D2 -  -  -  -  		;
   45 00:41D2 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:41D2 -  -  -  -  		;
   47 00:41D2 CD D7 41 -  		call 	WriteHLToDE
   48 00:41D5 C9 -  -  -  		ret
   49 00:41D6 -  -  -  -  		;
   50 00:41D6 -  -  -  -  		; 		String assignment code.
   51 00:41D6 -  -  -  -  		;
   52 00:41D6 -  -  -  -  _CLString:
   53 00:41D6 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:41D7 -  -  -  -  
   55 00:41D7 -  -  -  -  ; ***************************************************************************************
   56 00:41D7 -  -  -  -  ;
   57 00:41D7 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:41D7 -  -  -  -  ;
   59 00:41D7 -  -  -  -  ; ***************************************************************************************
   60 00:41D7 -  -  -  -  
   61 00:41D7 -  -  -  -  WriteHLToDE:
   62 00:41D7 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:41D9 C2 61 43 -  		jp 		nz,TypeMismatch
   64 00:41DC -  -  -  -  		;
   65 00:41DC -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:41DC -  -  -  -  		;		
   67 00:41DC -  -  -  -  _WHDWriteNumber:
   68 00:41DC EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:41DD D9 -  -  -  		exx
   70 00:41DE EB -  -  -  		ex 		de,hl
   71 00:41DF D9 -  -  -  		exx
   72 00:41E0 -  -  -  -  
   73 00:41E0 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:41E1 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:41E2 72 -  -  -  		ld 		(hl),d
   76 00:41E3 23 -  -  -  		inc 	hl
   77 00:41E4 E5 -  -  -  		push 	hl
   78 00:41E5 D9 -  -  -  		exx
   79 00:41E6 E1 -  -  -  		pop 	hl
   80 00:41E7 73 -  -  -  		ld 		(hl),e
   81 00:41E8 23 -  -  -  		inc 	hl
   82 00:41E9 72 -  -  -  		ld 		(hl),d
   83 00:41EA D9 -  -  -  		exx
   84 00:41EB -  -  -  -  
   85 00:41EB C9 -  -  -  		ret
   86 00:41EC -  -  -  -  
   87 00:41EC -  -  -  -  ; ***************************************************************************************
   88 00:41EC -  -  -  -  ;
   89 00:41EC -  -  -  -  ;									Changes and Updates
   90 00:41EC -  -  -  -  ;
   91 00:41EC -  -  -  -  ; ***************************************************************************************
   92 00:41EC -  -  -  -  ;
   93 00:41EC -  -  -  -  ;		Date			Notes
   94 00:41EC -  -  -  -  ;		==== 			=====
   95 00:41EC -  -  -  -  ;
   96 00:41EC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:41EC -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:41EC -  -  -  -  ; ***************************************************************************************
    2 00:41EC -  -  -  -  ; ***************************************************************************************
    3 00:41EC -  -  -  -  ;
    4 00:41EC -  -  -  -  ;		Name : 		print.asm
    5 00:41EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41EC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41EC -  -  -  -  ;		Reviewed :	No
    8 00:41EC -  -  -  -  ;		Purpose :	Print command
    9 00:41EC -  -  -  -  ;
   10 00:41EC -  -  -  -  ; ***************************************************************************************
   11 00:41EC -  -  -  -  ; ***************************************************************************************
   12 00:41EC -  -  -  -  
   13 00:41EC -  -  -  -  ; ***************************************************************************************
   14 00:41EC -  -  -  -  ;
   15 00:41EC -  -  -  -  ;										PRINT command
   16 00:41EC -  -  -  -  ;
   17 00:41EC -  -  -  -  ; ***************************************************************************************
   18 00:41EC -  -  -  -  
   19 00:41EC -  -  -  -  Command_PRINT: 	;; [print]
   20 00:41EC 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:41EE 32 7E 40 -  		ld 		(PrintBase),a
   22 00:41F1 -  -  -  -  		;
   23 00:41F1 -  -  -  -  		;		Main loop
   24 00:41F1 -  -  -  -  		;
   25 00:41F1 -  -  -  -  _CPRLoop:
   26 00:41F1 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:41F4 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:41F6 28 50 -  -  		jr 		z,_CPRExitNL
   29 00:41F8 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:41FA 28 4C -  -  		jr 		z,_CPRExitNL
   31 00:41FC FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:41FE 28 36 -  -  		jr 		z,_CPRCheckNext10
   33 00:4200 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:4202 28 2D -  -  		jr 		z,_CPRTab
   35 00:4204 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:4206 28 24 -  -  		jr 		z,_CPRNewLine
   37 00:4208 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:420A 28 17 -  -  		jr 		z,_CPRHexMode
   39 00:420C -  -  -  -  		;
   40 00:420C CD ED 44 -  		call 	EvaluateValue 				; so it must be an expression.		
   41 00:420F CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:4211 20 0B -  -  		jr 		nz,_CPRPrintHL
   43 00:4213 -  -  -  -  		;
   44 00:4213 3A 7E 40 -  		ld 		a,(PrintBase)				; current print mode.
   45 00:4216 -  -  -  -  _CPRPrintNumber:
   46 00:4216 01 9C 40 -  		ld  	bc,ConvertBuffer
   47 00:4219 C5 -  -  -  		push 	bc
   48 00:421A CD B8 4C -  		call 	Int32ToString 				; convert to string
   49 00:421D E1 -  -  -  		pop 	hl
   50 00:421E -  -  -  -  		;
   51 00:421E -  -  -  -  		; 		Print text at HL.
   52 00:421E -  -  -  -  		;
   53 00:421E -  -  -  -  _CPRPrintHL:
   54 00:421E CD CC 47 -  		call 	PrintStringAtHL 			; print string out
   55 00:4221 18 CE -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:4223 -  -  -  -  		;
   57 00:4223 -  -  -  -  		;		Hex mode (~)
   58 00:4223 -  -  -  -  		;
   59 00:4223 -  -  -  -  _CPRHexMode:		
   60 00:4223 3E 10 -  -  		ld 		a,16
   61 00:4225 32 7E 40 -  		ld 		(PrintBase),a
   62 00:4228 DD 23 -  -  		inc 	ix
   63 00:422A 18 C5 -  -  		jr 		_CPRLoop
   64 00:422C -  -  -  -  		;
   65 00:422C -  -  -  -  		; 		New line (')
   66 00:422C -  -  -  -  		;
   67 00:422C -  -  -  -  _CPRNewLine:
   68 00:422C CD 22 4D -  		call 	SYSPrintCRLF
   69 00:422F 18 0A -  -  		jr 		_CPRCheckNext
   70 00:4231 -  -  -  -  		;
   71 00:4231 -  -  -  -  		; 		Tab command (,)
   72 00:4231 -  -  -  -  		;
   73 00:4231 -  -  -  -  _CPRTab:
   74 00:4231 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:4233 CD 06 4D -  		call 	SYSPrintChar
   76 00:4236 -  -  -  -  		;
   77 00:4236 -  -  -  -  		;		Set to base 10 then check next character
   78 00:4236 -  -  -  -  		;
   79 00:4236 -  -  -  -  _CPRCheckNext10:		
   80 00:4236 3E F6 -  -  		ld 		a,-10
   81 00:4238 32 7E 40 -  		ld 		(PrintBase),a
   82 00:423B -  -  -  -  		;
   83 00:423B -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:423B -  -  -  -  		;		
   85 00:423B -  -  -  -  _CPRCheckNext:
   86 00:423B DD 23 -  -  		inc 	ix 							; consume current
   87 00:423D DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:4240 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:4242 C8 -  -  -  		ret 	z
   90 00:4243 FE A7 -  -  		cp 		KWD_COLON
   91 00:4245 C8 -  -  -  		ret 	z
   92 00:4246 18 A9 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:4248 -  -  -  -  		;
   94 00:4248 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:4248 -  -  -  -  		;
   96 00:4248 -  -  -  -  _CPRExitNL:
   97 00:4248 CD 22 4D -  		call 	SYSPrintCRLF 				; do CR/LF
   98 00:424B C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:424C -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:424C -  -  -  -  ; ***************************************************************************************
    2 00:424C -  -  -  -  ; ***************************************************************************************
    3 00:424C -  -  -  -  ;
    4 00:424C -  -  -  -  ;		Name : 		rem.asm
    5 00:424C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:424C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:424C -  -  -  -  ;		Reviewed :	No
    8 00:424C -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:424C -  -  -  -  ;
   10 00:424C -  -  -  -  ; ***************************************************************************************
   11 00:424C -  -  -  -  ; ***************************************************************************************
   12 00:424C -  -  -  -  
   13 00:424C -  -  -  -  ; ***************************************************************************************
   14 00:424C -  -  -  -  ;
   15 00:424C -  -  -  -  ;							Comment command, can be ' or REM
   16 00:424C -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:424C -  -  -  -  ;
   18 00:424C -  -  -  -  ; ***************************************************************************************
   19 00:424C -  -  -  -  
   20 00:424C -  -  -  -  Command_REM: 	;; [rem]
   21 00:424C -  -  -  -  Command_REM2: 	;; [']
   22 00:424C DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:424F FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:4251 C8 -  -  -  		ret 	z
   25 00:4252 DD 23 -  -  		inc 	ix
   26 00:4254 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:4256 C8 -  -  -  		ret 	z
   28 00:4257 FE 3F -  -  		cp 		STRING_MARKER
   29 00:4259 C2 6B 43 -  		jp 		nz,SyntaxError
   30 00:425C -  -  -  -  		;		
   31 00:425C 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:425F DD 5E 00 -  		ld 		e,(ix+0)
   33 00:4262 13 -  -  -  		inc 	de 
   34 00:4263 13 -  -  -  		inc 	de
   35 00:4264 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:4266 C9 -  -  -  		ret
   37 00:4267 -  -  -  -  
   38 00:4267 -  -  -  -  ; ***************************************************************************************
   39 00:4267 -  -  -  -  ;
   40 00:4267 -  -  -  -  ;									Changes and Updates
   41 00:4267 -  -  -  -  ;
   42 00:4267 -  -  -  -  ; ***************************************************************************************
   43 00:4267 -  -  -  -  ;
   44 00:4267 -  -  -  -  ;		Date			Notes
   45 00:4267 -  -  -  -  ;		==== 			=====
   46 00:4267 -  -  -  -  ;
   47 00:4267 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:4267 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:4267 -  -  -  -  ; ***************************************************************************************
    2 00:4267 -  -  -  -  ; ***************************************************************************************
    3 00:4267 -  -  -  -  ;
    4 00:4267 -  -  -  -  ;		Name : 		run.asm
    5 00:4267 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4267 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4267 -  -  -  -  ;		Reviewed :	No
    8 00:4267 -  -  -  -  ;		Purpose :	Run command
    9 00:4267 -  -  -  -  ;
   10 00:4267 -  -  -  -  ; ***************************************************************************************
   11 00:4267 -  -  -  -  ; ***************************************************************************************
   12 00:4267 -  -  -  -  
   13 00:4267 -  -  -  -  ; ***************************************************************************************
   14 00:4267 -  -  -  -  ;
   15 00:4267 -  -  -  -  ;										RUN command
   16 00:4267 -  -  -  -  ;
   17 00:4267 -  -  -  -  ; ***************************************************************************************
   18 00:4267 -  -  -  -  
   19 00:4267 -  -  -  -  Command_RUN: 	;; [run]
   20 00:4267 CD 67 47 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:426A -  -  -  -  
   22 00:426A DD 2A 34 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:426E ED 73 5C 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:4272 AF -  -  -  		xor 	a
   25 00:4273 32 7C 40 -  		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:4276 -  -  -  -  		;
   27 00:4276 -  -  -  -  		; 		New line at IX.
   28 00:4276 -  -  -  -  		;
   29 00:4276 -  -  -  -  CRNewLine:
   30 00:4276 DD 22 58 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:427A -  -  -  -  		;
   32 00:427A DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:427D B7 -  -  -  		or 		a
   34 00:427E CA 8F 41 -  		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:4281 -  -  -  -  		;
   36 00:4281 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:4283 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:4285 DD 23 -  -  		inc 	ix
   39 00:4287 -  -  -  -  		;
   40 00:4287 -  -  -  -  		; 		New command at IX
   41 00:4287 -  -  -  -  		;
   42 00:4287 -  -  -  -  _CRNewCommand:	
   43 00:4287 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:428A B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:428B F2 BF 42 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:428E -  -  -  -  		;
   47 00:428E FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:4290 30 05 -  -  		jr  	nc,_CRDoCommand
   49 00:4292 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:4294 D2 B0 42 -  		jp 		nc,_CRAlternateLets
   51 00:4297 -  -  -  -  		;
   52 00:4297 -  -  -  -  _CRDoCommand:		
   53 00:4297 E6 7F 21 00 
              00 6F 29 11 
              80 4A 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:42A9 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:42AB CD 60 40 -  		call 	JumpCode 					; call the routine.
   56 00:42AE 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:42B0 -  -  -  -  		;
   58 00:42B0 -  -  -  -  		; 		Do CALL (HL)
   59 00:42B0 -  -  -  -  		;
   60 00:42B0 -  -  -  -  		;
   61 00:42B0 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:42B0 -  -  -  -  		;		
   63 00:42B0 -  -  -  -  _CRAlternateLets:		
   64 00:42B0 FE 83 -  -  		cp 		KWD_PLING
   65 00:42B2 28 10 -  -  		jr 		z,_CRAssignmentLet
   66 00:42B4 FE 84 -  -  		cp 		KWD_QMARK
   67 00:42B6 28 0C -  -  		jr 		z,_CRAssignmentLet
   68 00:42B8 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:42BA 28 08 -  -  		jr 		z,_CRAssignmentLet
   70 00:42BC C3 6B 43 -  		jp 		SyntaxError
   71 00:42BF -  -  -  -  		;
   72 00:42BF -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:42BF -  -  -  -  		;
   74 00:42BF -  -  -  -  _CRAssignmentHandler:		
   75 00:42BF FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:42C1 D2 6B 43 -  		jp 		nc,SyntaxError
   77 00:42C4 -  -  -  -  _CRAssignmentLet:		
   78 00:42C4 CD A7 41 -  		call	Command_LET 				; do LET.
   79 00:42C7 C3 87 42 -  		jp 		_CRNewCommand
   80 00:42CA -  -  -  -  
   81 00:42CA -  -  -  -  ; ***************************************************************************************
   82 00:42CA -  -  -  -  ;
   83 00:42CA -  -  -  -  ;									Changes and Updates
   84 00:42CA -  -  -  -  ;
   85 00:42CA -  -  -  -  ; ***************************************************************************************
   86 00:42CA -  -  -  -  ;
   87 00:42CA -  -  -  -  ;		Date			Notes
   88 00:42CA -  -  -  -  ;		==== 			=====
   89 00:42CA -  -  -  -  ;
   90 00:42CA -  -  -  -  ; ***************************************************************************************
   91 00:42CA -  -  -  -  		
Listing for file "_build.asm"
   23 00:42CA -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:42CA -  -  -  -  ; ***************************************************************************************
    2 00:42CA -  -  -  -  ; ***************************************************************************************
    3 00:42CA -  -  -  -  ;
    4 00:42CA -  -  -  -  ;		Name : 		stop.asm
    5 00:42CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CA -  -  -  -  ;		Reviewed :	No
    8 00:42CA -  -  -  -  ;		Purpose :	Stop command
    9 00:42CA -  -  -  -  ;
   10 00:42CA -  -  -  -  ; ***************************************************************************************
   11 00:42CA -  -  -  -  ; ***************************************************************************************
   12 00:42CA -  -  -  -  
   13 00:42CA -  -  -  -  ; ***************************************************************************************
   14 00:42CA -  -  -  -  ;
   15 00:42CA -  -  -  -  ;										STOP command
   16 00:42CA -  -  -  -  ;
   17 00:42CA -  -  -  -  ; ***************************************************************************************
   18 00:42CA -  -  -  -  
   19 00:42CA -  -  -  -  Command_STOP: 	;; [stop]
   20 00:42CA 3E 0E C3 0E 
              43 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:42CF -  -  -  -  
   22 00:42CF -  -  -  -  ; ***************************************************************************************
   23 00:42CF -  -  -  -  ;
   24 00:42CF -  -  -  -  ;									Changes and Updates
   25 00:42CF -  -  -  -  ;
   26 00:42CF -  -  -  -  ; ***************************************************************************************
   27 00:42CF -  -  -  -  ;
   28 00:42CF -  -  -  -  ;		Date			Notes
   29 00:42CF -  -  -  -  ;		==== 			=====
   30 00:42CF -  -  -  -  ;
   31 00:42CF -  -  -  -  ; ***************************************************************************************
   32 00:42CF -  -  -  -  		
Listing for file "_build.asm"
   24 00:42CF -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:42CF -  -  -  -  ; ***************************************************************************************
    2 00:42CF -  -  -  -  ; ***************************************************************************************
    3 00:42CF -  -  -  -  ;
    4 00:42CF -  -  -  -  ;		Name : 		charcheck.asm
    5 00:42CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42CF -  -  -  -  ;		Reviewed :	No
    8 00:42CF -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:42CF -  -  -  -  ;
   10 00:42CF -  -  -  -  ; ***************************************************************************************
   11 00:42CF -  -  -  -  ; ***************************************************************************************
   12 00:42CF -  -  -  -  
   13 00:42CF -  -  -  -  ; ***************************************************************************************
   14 00:42CF -  -  -  -  ;
   15 00:42CF -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:42CF -  -  -  -  ;
   17 00:42CF -  -  -  -  ; ***************************************************************************************
   18 00:42CF -  -  -  -  
   19 00:42CF -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:42CF             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:42CF             		inc 	ix
   22 00:42CF             		cp 		ch 							; exit if matches
   23 00:42CF             		ret 	z
   24 00:42CF             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:42CF             		jp 		ErrorHandler
   26 00:42CF             #endmacro
   27 00:42CF -  -  -  -  
   28 00:42CF -  -  -  -  CheckLeftBracket:
   29 00:42CF DD 7E 00 DD 
              23 FE 95 C8 
              3E 0B C3 0E 
              43 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:42DC -  -  -  -  
   31 00:42DC -  -  -  -  CheckRightBracket:
   32 00:42DC DD 7E 00 DD 
              23 FE A5 C8 
              3E 0C C3 0E 
              43 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:42E9 -  -  -  -  
   34 00:42E9 -  -  -  -  CheckDollar:
   35 00:42E9 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0A C3 0E 
              43 -  -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:42F6 -  -  -  -  		
   37 00:42F6 -  -  -  -  CheckComma:
   38 00:42F6 DD 7E 00 DD 
              23 FE A6 C8 
              3E 09 C3 0E 
              43 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:4303 -  -  -  -  
   40 00:4303 -  -  -  -  ; ***************************************************************************************
   41 00:4303 -  -  -  -  ;
   42 00:4303 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:4303 -  -  -  -  ;
   44 00:4303 -  -  -  -  ; ***************************************************************************************
   45 00:4303 -  -  -  -  
   46 00:4303 -  -  -  -  CheckNextA:
   47 00:4303 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:4306 DD 23 -  -  		inc 	ix 							; skip character
   49 00:4308 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:4309 3E 0F C3 0E 
              43 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:430E -  -  -  -  		
   52 00:430E -  -  -  -  ; ***************************************************************************************
   53 00:430E -  -  -  -  ;
   54 00:430E -  -  -  -  ;									Changes and Updates
   55 00:430E -  -  -  -  ;
   56 00:430E -  -  -  -  ; ***************************************************************************************
   57 00:430E -  -  -  -  ;
   58 00:430E -  -  -  -  ;		Date			Notes
   59 00:430E -  -  -  -  ;		==== 			=====
   60 00:430E -  -  -  -  ;
   61 00:430E -  -  -  -  ; ***************************************************************************************
   62 00:430E -  -  -  -  		
Listing for file "_build.asm"
   25 00:430E -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:430E -  -  -  -  ; ***************************************************************************************
    2 00:430E -  -  -  -  ; ***************************************************************************************
    3 00:430E -  -  -  -  ;
    4 00:430E -  -  -  -  ;		Name : 		errors.asm
    5 00:430E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:430E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:430E -  -  -  -  ;		Reviewed :	No
    8 00:430E -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:430E -  -  -  -  ;
   10 00:430E -  -  -  -  ; ***************************************************************************************
   11 00:430E -  -  -  -  ; ***************************************************************************************
   12 00:430E -  -  -  -  
   13 00:430E -  -  -  -  ; ***************************************************************************************
   14 00:430E -  -  -  -  ;
   15 00:430E -  -  -  -  ;								Error handler, message A 
   16 00:430E -  -  -  -  ;
   17 00:430E -  -  -  -  ; ***************************************************************************************
   18 00:430E -  -  -  -  
   19 00:430E -  -  -  -  ErrorHandler:
   20 00:430E F5 -  -  -  		push 	af 						; save error ID
   21 00:430F -  -  -  -  
   22 00:430F 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:4312 6F -  -  -  		ld 		l,a
   24 00:4313 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:4314 29 -  -  -  		add 	hl,hl 		
   26 00:4315 11 31 49 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4318 19 -  -  -  		add 	hl,de
   28 00:4319 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:431D CD CC 47 -  		call 	PrintStringAtHL
   30 00:4320 -  -  -  -  		;
   31 00:4320 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:4321 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:4322 28 28 -  -  		jr 		z,_EHExit
   34 00:4324 -  -  -  -  		;
   35 00:4324 DD 2A 58 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:4328 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:432B B7 -  -  -  		or 		a
   38 00:432C 28 1E -  -  		jr 		z,_EHExit
   39 00:432E -  -  -  -  
   40 00:432E 21 52 43 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:4331 CD CC 47 -  		call 	PrintStringAtHL 
   42 00:4334 -  -  -  -  		
   43 00:4334 D9 -  -  -  		exx								; HL'HL = line number
   44 00:4335 21 00 00 -  		ld 		hl,$0000 		
   45 00:4338 D9 -  -  -  		exx 
   46 00:4339 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:433C DD 66 02 -  		ld 		h,(ix+2)
   48 00:433F 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:4341 01 9C 40 -  		ld 		bc,ConvertBuffer
   50 00:4344 CD B8 4C -  		call 	Int32ToString
   51 00:4347 C5 -  -  -  		push 	bc
   52 00:4348 E1 -  -  -  		pop 	hl
   53 00:4349 CD CC 47 -  		call 	PrintStringAtHL			; print error line number.
   54 00:434C -  -  -  -  _EHExit:		
   55 00:434C CD 22 4D -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:434F C3 1A 40 -  		jp 		WarmStart
   57 00:4352 -  -  -  -  
   58 00:4352 -  -  -  -  _EHAtText:
   59 00:4352 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:435C -  -  -  -  
   61 00:435C -  -  -  -  NotImplemented:
   62 00:435C 3E 05 C3 0E 
              43 -  -  -  		ERR_DISABLED
   63 00:4361 -  -  -  -  TypeMismatch:
   64 00:4361 3E 02 C3 0E 
              43 -  -  -  		ERR_BADTYPE
   65 00:4366 -  -  -  -  BadValue:
   66 00:4366 3E 03 C3 0E 
              43 -  -  -  		ERR_BADVALUE
   67 00:436B -  -  -  -  SyntaxError:
   68 00:436B 3E 0F C3 0E 
              43 -  -  -  		ERR_SYNTAX
   69 00:4370 -  -  -  -  						
   70 00:4370 -  -  -  -  ; ***************************************************************************************
   71 00:4370 -  -  -  -  ;
   72 00:4370 -  -  -  -  ;									Changes and Updates
   73 00:4370 -  -  -  -  ;
   74 00:4370 -  -  -  -  ; ***************************************************************************************
   75 00:4370 -  -  -  -  ;
   76 00:4370 -  -  -  -  ;		Date			Notes
   77 00:4370 -  -  -  -  ;		==== 			=====
   78 00:4370 -  -  -  -  ;
   79 00:4370 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:4370 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:4370 -  -  -  -  ; ***************************************************************************************
    2 00:4370 -  -  -  -  ; ***************************************************************************************
    3 00:4370 -  -  -  -  ;
    4 00:4370 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:4370 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4370 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4370 -  -  -  -  ;		Reviewed :	No
    8 00:4370 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:4370 -  -  -  -  ;
   10 00:4370 -  -  -  -  ; ***************************************************************************************
   11 00:4370 -  -  -  -  ; ***************************************************************************************
   12 00:4370 -  -  -  -  
   13 00:4370 -  -  -  -  ; ***************************************************************************************
   14 00:4370 -  -  -  -  ;
   15 00:4370 -  -  -  -  ; 									Addition
   16 00:4370 -  -  -  -  ;
   17 00:4370 -  -  -  -  ; ***************************************************************************************
   18 00:4370 -  -  -  -  
   19 00:4370 -  -  -  -  ALUAdd: 		;; [+]
   20 00:4370 CD 63 44 78 
              B1 C2 61 43 
              C3 45 4C -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:437B -  -  -  -  
   22 00:437B -  -  -  -  ; ***************************************************************************************
   23 00:437B -  -  -  -  ;
   24 00:437B -  -  -  -  ; 									Subtraction
   25 00:437B -  -  -  -  ;
   26 00:437B -  -  -  -  ; ***************************************************************************************
   27 00:437B -  -  -  -  
   28 00:437B -  -  -  -  ALUSubtract: 	;; [-]
   29 00:437B CD 63 44 78 
              B1 C2 61 43 
              C3 4B 4C -  		IntegerDispatch(Int32Subtract)
   30 00:4386 -  -  -  -  
   31 00:4386 -  -  -  -  ; ***************************************************************************************
   32 00:4386 -  -  -  -  ;
   33 00:4386 -  -  -  -  ; 									  Multiply
   34 00:4386 -  -  -  -  ;
   35 00:4386 -  -  -  -  ; ***************************************************************************************
   36 00:4386 -  -  -  -  
   37 00:4386 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:4386 CD 63 44 78 
              B1 C2 61 43 
              C3 0F 4C -  		IntegerDispatch(Int32Multiply)
   39 00:4391 -  -  -  -  
   40 00:4391 -  -  -  -  ; ***************************************************************************************
   41 00:4391 -  -  -  -  ;
   42 00:4391 -  -  -  -  ; 									  Divide
   43 00:4391 -  -  -  -  ;
   44 00:4391 -  -  -  -  ; ***************************************************************************************
   45 00:4391 -  -  -  -  
   46 00:4391 -  -  -  -  ALUDivide: 	;; [/]
   47 00:4391 -  -  -  -  ALUDivide2:	;; [div]
   48 00:4391 CD 63 44 78 
              B1 C2 61 43 
              C3 20 4B -  		IntegerDispatch(Int32SDivide)
   49 00:439C -  -  -  -  
   50 00:439C -  -  -  -  ; ***************************************************************************************
   51 00:439C -  -  -  -  ;
   52 00:439C -  -  -  -  ; 									  Modulus
   53 00:439C -  -  -  -  ;
   54 00:439C -  -  -  -  ; ***************************************************************************************
   55 00:439C -  -  -  -  
   56 00:439C -  -  -  -  ALUModulus: 	;; [mod]
   57 00:439C CD 63 44 78 
              B1 C2 61 43 
              C3 23 4B -  		IntegerDispatch(Int32Modulus)
   58 00:43A7 -  -  -  -  
   59 00:43A7 -  -  -  -  ; ***************************************************************************************
   60 00:43A7 -  -  -  -  ;
   61 00:43A7 -  -  -  -  ; 									  Logical
   62 00:43A7 -  -  -  -  ;
   63 00:43A7 -  -  -  -  ; ***************************************************************************************
   64 00:43A7 -  -  -  -  
   65 00:43A7 -  -  -  -  ALUAnd: 		;; [and]
   66 00:43A7 CD 63 44 78 
              B1 C2 61 43 
              C3 53 4C -  		IntegerDispatch(Int32And)
   67 00:43B2 -  -  -  -  
   68 00:43B2 -  -  -  -  ALUOr: 			;; [or]
   69 00:43B2 CD 63 44 78 
              B1 C2 61 43 
              C3 5F 4C -  		IntegerDispatch(Int32Or)
   70 00:43BD -  -  -  -  
   71 00:43BD -  -  -  -  ALUXor: 		;; [eor]
   72 00:43BD CD 63 44 78 
              B1 C2 61 43 
              C3 6B 4C -  		IntegerDispatch(Int32Xor)
   73 00:43C8 -  -  -  -  
   74 00:43C8 -  -  -  -  ; ***************************************************************************************
   75 00:43C8 -  -  -  -  ;
   76 00:43C8 -  -  -  -  ;									Changes and Updates
   77 00:43C8 -  -  -  -  ;
   78 00:43C8 -  -  -  -  ; ***************************************************************************************
   79 00:43C8 -  -  -  -  ;
   80 00:43C8 -  -  -  -  ;		Date			Notes
   81 00:43C8 -  -  -  -  ;		==== 			=====
   82 00:43C8 -  -  -  -  ;
   83 00:43C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:43C8 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:43C8 -  -  -  -  ; ***************************************************************************************
    2 00:43C8 -  -  -  -  ; ***************************************************************************************
    3 00:43C8 -  -  -  -  ;
    4 00:43C8 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:43C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43C8 -  -  -  -  ;		Reviewed :	No
    8 00:43C8 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:43C8 -  -  -  -  ;
   10 00:43C8 -  -  -  -  ; ***************************************************************************************
   11 00:43C8 -  -  -  -  ; ***************************************************************************************
   12 00:43C8 -  -  -  -  
   13 00:43C8 -  -  -  -  ; ***************************************************************************************
   14 00:43C8 -  -  -  -  ;
   15 00:43C8 -  -  -  -  ; 									<l> <op> <r>
   16 00:43C8 -  -  -  -  ;
   17 00:43C8 -  -  -  -  ; ***************************************************************************************
   18 00:43C8 -  -  -  -  
   19 00:43C8 -  -  -  -  ALULongReference:			;; [!]
   20 00:43C8 CD D6 43 -  		call 	BRGetAddress 				; calculate address
   21 00:43CB 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:43CD CB F9 -  -  		set 	CIsReference,c
   23 00:43CF C9 -  -  -  		ret
   24 00:43D0 -  -  -  -  
   25 00:43D0 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:43D0 CD C8 43 -  		call 	ALULongReference
   27 00:43D3 CB F1 -  -  		set 	CIsByteReference,c
   28 00:43D5 C9 -  -  -  		ret
   29 00:43D6 -  -  -  -  
   30 00:43D6 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:43D6 CD 63 44 78 
              B1 C2 61 43 
              C3 E1 43 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:43E1 -  -  -  -  _BRGAMain:		
   33 00:43E1 CD 45 4C -  		call 	Int32Add 					; address in HL'HL
   34 00:43E4 CD 4C 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:43E7 C9 -  -  -  		ret
   36 00:43E8 -  -  -  -  
   37 00:43E8 -  -  -  -  ; ***************************************************************************************
   38 00:43E8 -  -  -  -  ;
   39 00:43E8 -  -  -  -  ;									Changes and Updates
   40 00:43E8 -  -  -  -  ;
   41 00:43E8 -  -  -  -  ; ***************************************************************************************
   42 00:43E8 -  -  -  -  ;
   43 00:43E8 -  -  -  -  ;		Date			Notes
   44 00:43E8 -  -  -  -  ;		==== 			=====
   45 00:43E8 -  -  -  -  ;
   46 00:43E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:43E8 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:43E8 -  -  -  -  ; ***************************************************************************************
    2 00:43E8 -  -  -  -  ; ***************************************************************************************
    3 00:43E8 -  -  -  -  ;
    4 00:43E8 -  -  -  -  ;		Name : 		compare.asm
    5 00:43E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43E8 -  -  -  -  ;		Reviewed :	No
    8 00:43E8 -  -  -  -  ;		Purpose :	Comparison code
    9 00:43E8 -  -  -  -  ;
   10 00:43E8 -  -  -  -  ; ***************************************************************************************
   11 00:43E8 -  -  -  -  ; ***************************************************************************************
   12 00:43E8 -  -  -  -  
   13 00:43E8 -  -  -  -  #macro compare_equals(n)
   14 00:43E8             		call 	CompareBaseCode
   15 00:43E8             		cp 		n
   16 00:43E8             		jr 		z,UnaryInt32True
   17 00:43E8             		jr 		UnaryInt32False
   18 00:43E8             #endmacro
   19 00:43E8 -  -  -  -  
   20 00:43E8 -  -  -  -  #macro compare_not_equals(n)
   21 00:43E8             		call 	CompareBaseCode
   22 00:43E8             		cp 		n
   23 00:43E8             		jr 		nz,UnaryInt32True
   24 00:43E8             		jr 		UnaryInt32False
   25 00:43E8             #endmacro
   26 00:43E8 -  -  -  -  
   27 00:43E8 -  -  -  -  ; ***************************************************************************************
   28 00:43E8 -  -  -  -  ;
   29 00:43E8 -  -  -  -  ; 								Return True/False
   30 00:43E8 -  -  -  -  ;
   31 00:43E8 -  -  -  -  ; ***************************************************************************************
   32 00:43E8 -  -  -  -  
   33 00:43E8 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:43E8 3E FF -  -  		ld 		a,255
   35 00:43EA 18 01 -  -  		jr 		_Int32Logical
   36 00:43EC -  -  -  -  UnaryInt32False: ;; [false]
   37 00:43EC AF -  -  -  		xor 	a
   38 00:43ED -  -  -  -  _Int32Logical:
   39 00:43ED 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:43EE 67 -  -  -  		ld 		h,a
   41 00:43EF D9 -  -  -  		exx
   42 00:43F0 6F -  -  -  		ld 		l,a
   43 00:43F1 67 -  -  -  		ld 		h,a
   44 00:43F2 D9 -  -  -  		exx
   45 00:43F3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:43F5 C9 -  -  -  		ret
   47 00:43F6 -  -  -  -  
   48 00:43F6 -  -  -  -  ; ***************************************************************************************
   49 00:43F6 -  -  -  -  ;
   50 00:43F6 -  -  -  -  ; 										> = < (compare == value)
   51 00:43F6 -  -  -  -  ;
   52 00:43F6 -  -  -  -  ; ***************************************************************************************
   53 00:43F6 -  -  -  -  
   54 00:43F6 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:43F6 CD 2C 44 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:43FF -  -  -  -  
   57 00:43FF -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:43FF CD 2C 44 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:4408 -  -  -  -  
   60 00:4408 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:4408 CD 2C 44 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:4411 -  -  -  -  
   63 00:4411 -  -  -  -  ; ***************************************************************************************
   64 00:4411 -  -  -  -  ;
   65 00:4411 -  -  -  -  ; 										> = < (compare <> value)
   66 00:4411 -  -  -  -  ;
   67 00:4411 -  -  -  -  ; ***************************************************************************************
   68 00:4411 -  -  -  -  
   69 00:4411 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:4411 CD 2C 44 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:441A -  -  -  -  
   72 00:441A -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:441A CD 2C 44 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:4423 -  -  -  -  
   75 00:4423 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:4423 CD 2C 44 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:442C -  -  -  -  
   78 00:442C -  -  -  -  ; ***************************************************************************************
   79 00:442C -  -  -  -  ;
   80 00:442C -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:442C -  -  -  -  ;
   82 00:442C -  -  -  -  ; ***************************************************************************************
   83 00:442C -  -  -  -  
   84 00:442C -  -  -  -  CompareBaseCode:
   85 00:442C CD 63 44 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:442F -  -  -  -  
   87 00:442F 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:4430 A1 -  -  -  		and 	c
   89 00:4431 CB 47 -  -  		bit 	CIsString,a 
   90 00:4433 C2 42 44 -  		jp 		nz,StringCompare
   91 00:4436 -  -  -  -  
   92 00:4436 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:4437 B1 -  -  -  		or 		c
   94 00:4438 CB 47 -  -  		bit 	CIsString,a 
   95 00:443A CA 7E 4C -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:443D -  -  -  -  
   97 00:443D 3E 02 C3 0E 
              43 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:4442 -  -  -  -  ;
   99 00:4442 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:4442 -  -  -  -  ;
  101 00:4442 -  -  -  -  StringCompare:
  102 00:4442 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:4443 BE -  -  -  		cp 		(hl)
  104 00:4444 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:4446 20 08 -  -  		jr 		nz,_SCLess
  106 00:4448 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:4449 23 -  -  -  		inc 	hl
  108 00:444A FE 20 -  -  		cp 		' '
  109 00:444C 30 F4 -  -  		jr 		nc,StringCompare
  110 00:444E AF -  -  -  		xor 	a 							; return 0.
  111 00:444F C9 -  -  -  		ret
  112 00:4450 -  -  -  -  
  113 00:4450 -  -  -  -  _SCLess:
  114 00:4450 3E FF -  -  		ld 		a,$FF
  115 00:4452 C9 -  -  -  		ret
  116 00:4453 -  -  -  -  _SCGreater:
  117 00:4453 3E 01 -  -  		ld 		a,1
  118 00:4455 C9 -  -  -  		ret
  119 00:4456 -  -  -  -  
  120 00:4456 3E 10 C3 0E 
              43 -  -  -  		ERR_TODO()
  121 00:445B -  -  -  -  
  122 00:445B -  -  -  -  ; ***************************************************************************************
  123 00:445B -  -  -  -  ;
  124 00:445B -  -  -  -  ;									Changes and Updates
  125 00:445B -  -  -  -  ;
  126 00:445B -  -  -  -  ; ***************************************************************************************
  127 00:445B -  -  -  -  ;
  128 00:445B -  -  -  -  ;		Date			Notes
  129 00:445B -  -  -  -  ;		==== 			=====
  130 00:445B -  -  -  -  ;
  131 00:445B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:445B -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:445B -  -  -  -  ; ***************************************************************************************
    2 00:445B -  -  -  -  ; ***************************************************************************************
    3 00:445B -  -  -  -  ;
    4 00:445B -  -  -  -  ;		Name : 		utility.asm
    5 00:445B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:445B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:445B -  -  -  -  ;		Reviewed :	No
    8 00:445B -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:445B -  -  -  -  ;
   10 00:445B -  -  -  -  ; ***************************************************************************************
   11 00:445B -  -  -  -  ; ***************************************************************************************
   12 00:445B -  -  -  -  
   13 00:445B -  -  -  -  ; ***************************************************************************************
   14 00:445B -  -  -  -  ;
   15 00:445B -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:445B -  -  -  -  ;
   17 00:445B -  -  -  -  ; ***************************************************************************************
   18 00:445B -  -  -  -  
   19 00:445B -  -  -  -  SwapHLDE:
   20 00:445B EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:445C D9 -  -  -  			exx
   22 00:445D EB -  -  -  			ex 		de,hl
   23 00:445E D9 -  -  -  			exx
   24 00:445F 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:4460 41 -  -  -  			ld 		b,c
   26 00:4461 4F -  -  -  			ld 		c,a
   27 00:4462 C9 -  -  -  			ret
   28 00:4463 -  -  -  -  
   29 00:4463 -  -  -  -  ; ***************************************************************************************
   30 00:4463 -  -  -  -  ;
   31 00:4463 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:4463 -  -  -  -  ;
   33 00:4463 -  -  -  -  ; ***************************************************************************************
   34 00:4463 -  -  -  -  
   35 00:4463 -  -  -  -  DereferenceBoth:
   36 00:4463 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:4465 C4 1E 45 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:4468 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:446A C8 -  -  -  			ret 	z
   40 00:446B CD 5B 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:446E CD 1E 45 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:4471 CD 5B 44 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:4474 C9 -  -  -  			ret
   44 00:4475 -  -  -  -  
   45 00:4475 -  -  -  -  ; ***************************************************************************************
   46 00:4475 -  -  -  -  ;
   47 00:4475 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:4475 -  -  -  -  ;
   49 00:4475 -  -  -  -  ; ***************************************************************************************
   50 00:4475 -  -  -  -  
   51 00:4475 -  -  -  -  NegateHLHL:	
   52 00:4475 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:4477 C2 61 43 -  			jp 		nz,TypeMismatch
   54 00:447A CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:447C C4 1E 45 -  			call 	nz,Dereference 			; if required.
   56 00:447F CD A5 4C -  			call 	Int32Negate
   57 00:4482 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:4483 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:4483 -  -  -  -  ; ***************************************************************************************
    2 00:4483 -  -  -  -  ; ***************************************************************************************
    3 00:4483 -  -  -  -  ;
    4 00:4483 -  -  -  -  ;		Name : 		expression.asm
    5 00:4483 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4483 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4483 -  -  -  -  ;		Reviewed :	None
    8 00:4483 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:4483 -  -  -  -  ;
   10 00:4483 -  -  -  -  ; ***************************************************************************************
   11 00:4483 -  -  -  -  ; ***************************************************************************************
   12 00:4483 -  -  -  -  
   13 00:4483 -  -  -  -  ; ***************************************************************************************
   14 00:4483 -  -  -  -  ;
   15 00:4483 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:4483 -  -  -  -  ;
   17 00:4483 -  -  -  -  ; ***************************************************************************************
   18 00:4483 -  -  -  -  
   19 00:4483 -  -  -  -  EvaluateAtPrecedence0:
   20 00:4483 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:4484 -  -  -  -  EvaluateAtPrecedence:
   22 00:4484 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:4485 -  -  -  -  		;
   24 00:4485 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:4485 -  -  -  -  		;
   26 00:4485 CD 4E 45 -  		call 	EvaluateTerm 				; get term
   27 00:4488 -  -  -  -  		;
   28 00:4488 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4488 -  -  -  -  		;
   30 00:4488 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4489 -  -  -  -  _EAPLoop:
   32 00:4489 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:448C FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:448E D8 -  -  -  		ret 	c
   35 00:448F FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:4491 D0 -  -  -  		ret 	nc
   37 00:4492 -  -  -  -  		;
   38 00:4492 -  -  -  -  		; 		Get the precedence.
   39 00:4492 -  -  -  -  		;
   40 00:4492 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:4493 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:4495 21 20 49 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4498 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4499 6F -  -  -  		ld 		l,a
   45 00:449A 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:449B E1 -  -  -  		pop 	hl 							; restore HL
   47 00:449C -  -  -  -  		;
   48 00:449C -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:449C -  -  -  -  		;
   50 00:449C 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:449D BB -  -  -  		cp 		e
   52 00:449E D0 -  -  -  		ret 	nc
   53 00:449F -  -  -  -  
   54 00:449F -  -  -  -  		;
   55 00:449F -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:449F -  -  -  -  		;
   57 00:449F D5 -  -  -  		push 	de 							; save precedence information.
   58 00:44A0 -  -  -  -  		;
   59 00:44A0 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:44A3 F5 -  -  -  		push 	af
   61 00:44A4 -  -  -  -  		;
   62 00:44A4 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:44A5 D9 -  -  -  		exx 								; save HL'
   64 00:44A6 E5 -  -  -  		push 	hl
   65 00:44A7 D9 -  -  -  		exx 								
   66 00:44A8 E5 -  -  -  		push 	hl 							; save HL
   67 00:44A9 -  -  -  -  		;
   68 00:44A9 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:44AB -  -  -  -  		;
   70 00:44AB -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:44AB -  -  -  -  		;
   72 00:44AB 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:44AC CD 84 44 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:44AF -  -  -  -  		;
   75 00:44AF -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:44AF -  -  -  -  		;
   77 00:44AF 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:44B0 -  -  -  -  
   79 00:44B0 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:44B1 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:44B2 D9 -  -  -  		exx
   82 00:44B3 EB -  -  -  		ex 		de,hl
   83 00:44B4 E1 -  -  -  		pop 	hl
   84 00:44B5 D9 -  -  -  		exx
   85 00:44B6 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:44B7 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:44B8 -  -  -  -  		;
   88 00:44B8 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:44B8 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:44B8 -  -  -  -  		;
   91 00:44B8 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:44B9 -  -  -  -  		;
   93 00:44B9 -  -  -  -  		; 		Call the binary operator in A.
   94 00:44B9 -  -  -  -  		;
   95 00:44B9 D5 -  -  -  		push 	de
   96 00:44BA E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:44BB E6 7F 21 00 
              00 6F 29 11 
              80 4A 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:44CD E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:44CE D1 -  -  -  		pop 	de 							; restore DE
  100 00:44CF CD 60 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:44D2 -  -  -  -  		;
  102 00:44D2 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:44D3 -  -  -  -  		;
  104 00:44D3 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:44D5 -  -  -  -  
  106 00:44D5 -  -  -  -  ; ***************************************************************************************
  107 00:44D5 -  -  -  -  ;
  108 00:44D5 -  -  -  -  ;									Changes and Updates
  109 00:44D5 -  -  -  -  ;
  110 00:44D5 -  -  -  -  ; ***************************************************************************************
  111 00:44D5 -  -  -  -  ;
  112 00:44D5 -  -  -  -  ;		Date			Notes
  113 00:44D5 -  -  -  -  ;		==== 			=====
  114 00:44D5 -  -  -  -  ;
  115 00:44D5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:44D5 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:44D5 -  -  -  -  ; ***************************************************************************************
    2 00:44D5 -  -  -  -  ; ***************************************************************************************
    3 00:44D5 -  -  -  -  ;
    4 00:44D5 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:44D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44D5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44D5 -  -  -  -  ;		Reviewed :	No
    8 00:44D5 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:44D5 -  -  -  -  ;
   10 00:44D5 -  -  -  -  ; ***************************************************************************************
   11 00:44D5 -  -  -  -  ; ***************************************************************************************
   12 00:44D5 -  -  -  -  
   13 00:44D5 -  -  -  -  ; ***************************************************************************************
   14 00:44D5 -  -  -  -  ;
   15 00:44D5 -  -  -  -  ; 								Evaluate an integer term
   16 00:44D5 -  -  -  -  ;
   17 00:44D5 -  -  -  -  ; ***************************************************************************************
   18 00:44D5 -  -  -  -  
   19 00:44D5 -  -  -  -  EvaluateIntegerTerm:
   20 00:44D5 CD 4E 45 -  		call 	EvaluateTerm
   21 00:44D8 CD 1E 45 -  		call 	DeReference
   22 00:44DB CB 41 -  -  		bit 	CIsString,c
   23 00:44DD C8 -  -  -  		ret 	z
   24 00:44DE C3 61 43 -  		jp 		TypeMismatch
   25 00:44E1 -  -  -  -  
   26 00:44E1 -  -  -  -  ; ***************************************************************************************
   27 00:44E1 -  -  -  -  ;
   28 00:44E1 -  -  -  -  ; 								Evaluate a string term
   29 00:44E1 -  -  -  -  ;
   30 00:44E1 -  -  -  -  ; ***************************************************************************************
   31 00:44E1 -  -  -  -  
   32 00:44E1 -  -  -  -  EvaluateStringTerm:
   33 00:44E1 CD 4E 45 -  		call 	EvaluateTerm
   34 00:44E4 CD 1E 45 -  		call 	DeReference
   35 00:44E7 CB 41 -  -  		bit 	CIsString,c
   36 00:44E9 C0 -  -  -  		ret 	nz
   37 00:44EA C3 61 43 -  		jp 		TypeMismatch
   38 00:44ED -  -  -  -  
   39 00:44ED -  -  -  -  ; ***************************************************************************************
   40 00:44ED -  -  -  -  ;
   41 00:44ED -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:44ED -  -  -  -  ;
   43 00:44ED -  -  -  -  ; ***************************************************************************************
   44 00:44ED -  -  -  -  
   45 00:44ED -  -  -  -  EvaluateValue:
   46 00:44ED CD 83 44 -  		call 	EvaluateAtPrecedence0
   47 00:44F0 C3 1E 45 -  		jp 		Dereference
   48 00:44F3 -  -  -  -  
   49 00:44F3 -  -  -  -  ; ***************************************************************************************
   50 00:44F3 -  -  -  -  ;
   51 00:44F3 -  -  -  -  ; 									Evaluate a number
   52 00:44F3 -  -  -  -  ;
   53 00:44F3 -  -  -  -  ; ***************************************************************************************
   54 00:44F3 -  -  -  -  
   55 00:44F3 -  -  -  -  EvaluateInteger:
   56 00:44F3 CD ED 44 -  		call 	EvaluateValue
   57 00:44F6 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:44F8 C8 -  -  -  		ret 	z
   59 00:44F9 C3 61 43 -  		jp 		TypeMismatch
   60 00:44FC -  -  -  -  
   61 00:44FC -  -  -  -  ; ***************************************************************************************
   62 00:44FC -  -  -  -  ;
   63 00:44FC -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:44FC -  -  -  -  ;
   65 00:44FC -  -  -  -  ; ***************************************************************************************
   66 00:44FC -  -  -  -  
   67 00:44FC -  -  -  -  Evaluate8BitInteger:
   68 00:44FC CD F3 44 -  		call 	EvaluateInteger
   69 00:44FF D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4500 7C -  -  -  		ld 		a,h
   71 00:4501 B5 -  -  -  		or 		l
   72 00:4502 D9 -  -  -  		exx 	
   73 00:4503 B4 -  -  -  		or 		h
   74 00:4504 C2 66 43 -  		jp 		nz,BadValue
   75 00:4507 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:4508 C9 -  -  -  		ret
   77 00:4509 -  -  -  -  		
   78 00:4509 -  -  -  -  ; ***************************************************************************************
   79 00:4509 -  -  -  -  ;
   80 00:4509 -  -  -  -  ; 									Evaluate a string
   81 00:4509 -  -  -  -  ;
   82 00:4509 -  -  -  -  ; ***************************************************************************************
   83 00:4509 -  -  -  -  
   84 00:4509 -  -  -  -  EvaluateStringOnly:
   85 00:4509 CD ED 44 -  		call 	EvaluateValue
   86 00:450C CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:450E CA 61 43 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:4511 C9 -  -  -  		ret
   89 00:4512 -  -  -  -  
   90 00:4512 -  -  -  -  ; ***************************************************************************************
   91 00:4512 -  -  -  -  ;
   92 00:4512 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:4512 -  -  -  -  ;
   94 00:4512 -  -  -  -  ; ***************************************************************************************
   95 00:4512 -  -  -  -  
   96 00:4512 -  -  -  -  Return8BitConstant:
   97 00:4512 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:4515 6F -  -  -  		ld 		l,a
   99 00:4516 -  -  -  -  Return16BitConstant:
  100 00:4516 D9 -  -  -  		exx 								; clear HL'
  101 00:4517 21 00 00 -  		ld 		hl,0
  102 00:451A D9 -  -  -  		exx
  103 00:451B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:451D C9 -  -  -  		ret
  105 00:451E -  -  -  -  
  106 00:451E -  -  -  -  ; ***************************************************************************************
  107 00:451E -  -  -  -  ;
  108 00:451E -  -  -  -  ;									Changes and Updates
  109 00:451E -  -  -  -  ;
  110 00:451E -  -  -  -  ; ***************************************************************************************
  111 00:451E -  -  -  -  ;
  112 00:451E -  -  -  -  ;		Date			Notes
  113 00:451E -  -  -  -  ;		==== 			=====
  114 00:451E -  -  -  -  ;
  115 00:451E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:451E -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:451E -  -  -  -  ; ***************************************************************************************
    2 00:451E -  -  -  -  ; ***************************************************************************************
    3 00:451E -  -  -  -  ;
    4 00:451E -  -  -  -  ;		Name : 		reference.asm
    5 00:451E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:451E -  -  -  -  ;		Date : 		1st May 2022
    7 00:451E -  -  -  -  ;		Reviewed :	No
    8 00:451E -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:451E -  -  -  -  ;
   10 00:451E -  -  -  -  ; ***************************************************************************************
   11 00:451E -  -  -  -  ; ***************************************************************************************
   12 00:451E -  -  -  -  
   13 00:451E -  -  -  -  ; ***************************************************************************************
   14 00:451E -  -  -  -  ;
   15 00:451E -  -  -  -  ; 									Dereference HL'HL C
   16 00:451E -  -  -  -  ;
   17 00:451E -  -  -  -  ; ***************************************************************************************
   18 00:451E -  -  -  -  
   19 00:451E -  -  -  -  Dereference:
   20 00:451E CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4520 C8 -  -  -  		ret 	z
   22 00:4521 -  -  -  -  
   23 00:4521 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:4523 -  -  -  -  		
   25 00:4523 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:4525 20 20 -  -  		jr 		nz,_DRInternal
   27 00:4527 -  -  -  -  
   28 00:4527 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:4529 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:452B -  -  -  -  
   31 00:452B E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:452C 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:4530 D9 -  -  -  		exx
   34 00:4531 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:4532 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:4533 23 -  -  -  		inc  	hl
   37 00:4534 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:4538 D9 -  -  -  		exx 								; fix back
   39 00:4539 C9 -  -  -  		ret
   40 00:453A -  -  -  -  
   41 00:453A -  -  -  -  _DeRefByte:		
   42 00:453A 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:453B 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:453E 6F -  -  -  		ld	 	l,a
   45 00:453F D9 -  -  -  		exx
   46 00:4540 21 00 00 -  		ld 		hl,$0000
   47 00:4543 D9 -  -  -  		exx
   48 00:4544 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:4546 C9 -  -  -  		ret
   50 00:4547 -  -  -  -  
   51 00:4547 -  -  -  -  _DRInternal:
   52 00:4547 3E 05 C3 0E 
              43 -  -  -  		ERR_DISABLED
   53 00:454C -  -  -  -  
   54 00:454C -  -  -  -  ; ***************************************************************************************
   55 00:454C -  -  -  -  ;
   56 00:454C -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:454C -  -  -  -  ;
   58 00:454C -  -  -  -  ; ***************************************************************************************
   59 00:454C -  -  -  -  
   60 00:454C -  -  -  -  DRConvertHLHLToAddress:
   61 00:454C -  -  -  -  		#ifdef EZ80
   62 00:454C             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:454C             		exx
   64 00:454C             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:454C             		ld 		hl,$0000 					; zero HL'
   66 00:454C             		exx
   67 00:454C             		ld 		hl,(AConvert) 				; load UHL
   68 00:454C             		#endif
   69 00:454C C9 -  -  -  		ret
   70 00:454D -  -  -  -  
   71 00:454D -  -  -  -  ; ***************************************************************************************
   72 00:454D -  -  -  -  ;
   73 00:454D -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:454D -  -  -  -  ;
   75 00:454D -  -  -  -  ; ***************************************************************************************
   76 00:454D -  -  -  -  
   77 00:454D -  -  -  -  DRConvertAddressToHLHL:
   78 00:454D -  -  -  -  		#ifdef EZ80
   79 00:454D             		ld 		(AConvert),hl
   80 00:454D             		ld 		hl,$0000
   81 00:454D             		ld 		(AConvert+3),hl
   82 00:454D             		exx
   83 00:454D             		ld 		hl,(AConvert+2)
   84 00:454D             		exx
   85 00:454D             		xor 	a
   86 00:454D             		ld 		(AConvert+2),a
   87 00:454D             		ld 		hl,(AConvert)
   88 00:454D             		#endif
   89 00:454D C9 -  -  -  		ret
   90 00:454E -  -  -  -  
   91 00:454E -  -  -  -  ; ***************************************************************************************
   92 00:454E -  -  -  -  ;
   93 00:454E -  -  -  -  ;									Changes and Updates
   94 00:454E -  -  -  -  ;
   95 00:454E -  -  -  -  ; ***************************************************************************************
   96 00:454E -  -  -  -  ;
   97 00:454E -  -  -  -  ;		Date			Notes
   98 00:454E -  -  -  -  ;		==== 			=====
   99 00:454E -  -  -  -  ;
  100 00:454E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:454E -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:454E -  -  -  -  ; ***************************************************************************************
    2 00:454E -  -  -  -  ; ***************************************************************************************
    3 00:454E -  -  -  -  ;
    4 00:454E -  -  -  -  ;		Name : 		term.asm
    5 00:454E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454E -  -  -  -  ;		Reviewed :	No
    8 00:454E -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:454E -  -  -  -  ;
   10 00:454E -  -  -  -  ; ***************************************************************************************
   11 00:454E -  -  -  -  ; ***************************************************************************************
   12 00:454E -  -  -  -  
   13 00:454E -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:454E             		add_hlhl_16
   15 00:454E             		exx
   16 00:454E             		adc_hlhl_16
   17 00:454E             		exx
   18 00:454E             #endmacro
   19 00:454E -  -  -  -  
   20 00:454E -  -  -  -  ; ***************************************************************************************
   21 00:454E -  -  -  -  ;
   22 00:454E -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:454E -  -  -  -  ;
   24 00:454E -  -  -  -  ; ***************************************************************************************
   25 00:454E -  -  -  -  ;
   26 00:454E -  -  -  -  ; 		Terms can be:
   27 00:454E -  -  -  -  ;
   28 00:454E -  -  -  -  ;			<integer> 			42 						not negative
   29 00:454E -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:454E -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:454E -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:454E -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:454E -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:454E -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:454E -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:454E -  -  -  -  ; 														reference of some sort.
   37 00:454E -  -  -  -  ;
   38 00:454E -  -  -  -  ; ***************************************************************************************
   39 00:454E -  -  -  -  
   40 00:454E -  -  -  -  EvaluateTerm:		
   41 00:454E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:4550 D9 -  -  -  		exx
   43 00:4551 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:4554 D9 -  -  -  		exx
   45 00:4555 21 00 00 -  		ld 		hl,$0000		
   46 00:4558 -  -  -  -  		;
   47 00:4558 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:455B FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:455D 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:455F DA FD 45 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:4562 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:4564 C2 AC 45 -  		jp 		nz,_ETFoundKeyword 
   53 00:4567 -  -  -  -  		;
   54 00:4567 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:4567 -  -  -  -  		;
   56 00:4567 -  -  -  -  _ETIntegerConstant:
   57 00:4567 -  -  -  -  		;
   58 00:4567 -  -  -  -  _ETIntegerLoop:		
   59 00:4567 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:456A E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:456C B5 -  -  -  		or 		l 							; or into L
   62 00:456D 6F -  -  -  		ld 		l,a
   63 00:456E DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:4570 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:4573 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:4575 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:4577 D8 -  -  -  		ret 	c
   68 00:4578 -  -  -  -  
   69 00:4578 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:457D 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:4582 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4587 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:458C 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:4591 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:4596 -  -  -  -  
   76 00:4596 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4598 -  -  -  -  		;
   78 00:4598 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4598 -  -  -  -  		;
   80 00:4598 -  -  -  -  _ETStringMarker:		
   81 00:4598 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:459A DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:459C DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:459E E1 -  -  -  		pop 	hl
   85 00:459F 11 00 00 -  		ld 		de,$0000
   86 00:45A2 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:45A5 DD 19 -  -  		add 	ix,de
   88 00:45A7 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:45A9 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:45AB C9 -  -  -  		ret
   91 00:45AC -  -  -  -  		;
   92 00:45AC -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:45AC -  -  -  -  		;
   94 00:45AC -  -  -  -  _ETFoundKeyword:
   95 00:45AC DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:45AE FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:45B0 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:45B2 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:45B4 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:45B6 -  -  -  -  		;
  101 00:45B6 -  -  -  -  		;		Unary group 0
  102 00:45B6 -  -  -  -  		;
  103 00:45B6 E6 7F 21 00 
              00 6F 29 11 
              80 4A 19 5E 
              23 56 ED 53 
              61 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:45C8 C3 60 40 -  		jp 		JumpCode 					; and go there.
  105 00:45CB -  -  -  -  
  106 00:45CB -  -  -  -  _ETNotUnaryFunction0:	
  107 00:45CB FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:45CD 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:45CF -  -  -  -  		;
  110 00:45CF -  -  -  -  		; 		- term
  111 00:45CF -  -  -  -  		;
  112 00:45CF CD D5 44 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:45D2 CD 75 44 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:45D5 C9 -  -  -  		ret
  115 00:45D6 -  -  -  -  		;
  116 00:45D6 -  -  -  -  		;		! ? indirection check
  117 00:45D6 -  -  -  -  		;
  118 00:45D6 -  -  -  -  _ETCheckIndirection:	
  119 00:45D6 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:45D8 28 05 -  -  		jr 		z,_ETIndirection
  121 00:45DA FE 83 -  -  		cp 		KWD_PLING
  122 00:45DC C2 6B 43 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:45DF -  -  -  -  		;
  124 00:45DF -  -  -  -  		; 		! ? indirection
  125 00:45DF -  -  -  -  		;
  126 00:45DF -  -  -  -  _ETIndirection:
  127 00:45DF F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:45E0 CD 4E 45 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:45E3 CD 1E 45 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:45E6 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:45E8 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:45EA CD 4C 45 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:45ED F1 -  -  -  		pop 	af 							; get type back
  134 00:45EE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:45F0 CB F9 -  -  		set 	CIsReference,c
  136 00:45F2 FE 83 -  -  		cp 		KWD_PLING
  137 00:45F4 C8 -  -  -  		ret 	z
  138 00:45F5 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:45F7 C9 -  -  -  		ret
  140 00:45F8 -  -  -  -  _ETStringIndirect:
  141 00:45F8 3E 02 C3 0E 
              43 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:45FD -  -  -  -  		;
  143 00:45FD -  -  -  -  		; 		Found an identifier.
  144 00:45FD -  -  -  -  		;
  145 00:45FD -  -  -  -  _ETVariable:
  146 00:45FD CD 15 48 -  		call 	FindVariable 				; find the variable.
  147 00:4600 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:4601 3E 11 C3 0E 
              43 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:4606 -  -  -  -  		
  150 00:4606 -  -  -  -  ; ***************************************************************************************
  151 00:4606 -  -  -  -  ;
  152 00:4606 -  -  -  -  ;									Changes and Updates
  153 00:4606 -  -  -  -  ;
  154 00:4606 -  -  -  -  ; ***************************************************************************************
  155 00:4606 -  -  -  -  ;
  156 00:4606 -  -  -  -  ;		Date			Notes
  157 00:4606 -  -  -  -  ;		==== 			=====
  158 00:4606 -  -  -  -  ;
  159 00:4606 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4606 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:4606 -  -  -  -  ; ***************************************************************************************
    2 00:4606 -  -  -  -  ; ***************************************************************************************
    3 00:4606 -  -  -  -  ;
    4 00:4606 -  -  -  -  ;		Name : 		abs.asm
    5 00:4606 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4606 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4606 -  -  -  -  ;		Reviewed :	No
    8 00:4606 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:4606 -  -  -  -  ;
   10 00:4606 -  -  -  -  ; ***************************************************************************************
   11 00:4606 -  -  -  -  ; ***************************************************************************************
   12 00:4606 -  -  -  -  
   13 00:4606 -  -  -  -  ; ***************************************************************************************
   14 00:4606 -  -  -  -  ;
   15 00:4606 -  -  -  -  ;								abs( unary function
   16 00:4606 -  -  -  -  ;
   17 00:4606 -  -  -  -  ; ***************************************************************************************
   18 00:4606 -  -  -  -  
   19 00:4606 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:4606 CD D5 44 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:4609 D9 -  -  -  		exx 								; test MSB
   22 00:460A CB 7C -  -  		bit 	7,h
   23 00:460C D9 -  -  -  		exx
   24 00:460D C4 75 44 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:4610 C9 -  -  -  		ret
   26 00:4611 -  -  -  -  
   27 00:4611 -  -  -  -  ; ***************************************************************************************
   28 00:4611 -  -  -  -  ;
   29 00:4611 -  -  -  -  ;									Changes and Updates
   30 00:4611 -  -  -  -  ;
   31 00:4611 -  -  -  -  ; ***************************************************************************************
   32 00:4611 -  -  -  -  ;
   33 00:4611 -  -  -  -  ;		Date			Notes
   34 00:4611 -  -  -  -  ;		==== 			=====
   35 00:4611 -  -  -  -  ;
   36 00:4611 -  -  -  -  ; ***************************************************************************************
   37 00:4611 -  -  -  -  		
Listing for file "_build.asm"
   35 00:4611 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:4611 -  -  -  -  ; ***************************************************************************************
    2 00:4611 -  -  -  -  ; ***************************************************************************************
    3 00:4611 -  -  -  -  ;
    4 00:4611 -  -  -  -  ;		Name : 		asc.asm
    5 00:4611 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4611 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4611 -  -  -  -  ;		Reviewed :	No
    8 00:4611 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:4611 -  -  -  -  ;
   10 00:4611 -  -  -  -  ; ***************************************************************************************
   11 00:4611 -  -  -  -  ; ***************************************************************************************
   12 00:4611 -  -  -  -  
   13 00:4611 -  -  -  -  ; ***************************************************************************************
   14 00:4611 -  -  -  -  ;
   15 00:4611 -  -  -  -  ;								Asc unary function
   16 00:4611 -  -  -  -  ;
   17 00:4611 -  -  -  -  ; ***************************************************************************************
   18 00:4611 -  -  -  -  
   19 00:4611 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:4611 CD E1 44 -  		call	EvaluateStringTerm			; Get string
   21 00:4614 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:4615 C3 12 45 -  		jp 		Return8BitConstant
   23 00:4618 -  -  -  -  
   24 00:4618 -  -  -  -  ; ***************************************************************************************
   25 00:4618 -  -  -  -  ;
   26 00:4618 -  -  -  -  ;									Changes and Updates
   27 00:4618 -  -  -  -  ;
   28 00:4618 -  -  -  -  ; ***************************************************************************************
   29 00:4618 -  -  -  -  ;
   30 00:4618 -  -  -  -  ;		Date			Notes
   31 00:4618 -  -  -  -  ;		==== 			=====
   32 00:4618 -  -  -  -  ;
   33 00:4618 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:4618 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:4618 -  -  -  -  ; ***************************************************************************************
    2 00:4618 -  -  -  -  ; ***************************************************************************************
    3 00:4618 -  -  -  -  ;
    4 00:4618 -  -  -  -  ;		Name : 		chr.asm
    5 00:4618 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4618 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4618 -  -  -  -  ;		Reviewed :	No
    8 00:4618 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:4618 -  -  -  -  ;
   10 00:4618 -  -  -  -  ; ***************************************************************************************
   11 00:4618 -  -  -  -  ; ***************************************************************************************
   12 00:4618 -  -  -  -  
   13 00:4618 -  -  -  -  ; ***************************************************************************************
   14 00:4618 -  -  -  -  ;
   15 00:4618 -  -  -  -  ;								Chr$() unary function
   16 00:4618 -  -  -  -  ;
   17 00:4618 -  -  -  -  ; ***************************************************************************************
   18 00:4618 -  -  -  -  
   19 00:4618 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:4618 CD E9 42 -  		call 	CheckDollar
   21 00:461B CD D5 44 -  		call 	EvaluateIntegerTerm
   22 00:461E 7D -  -  -  		ld 		a,l 						; get character
   23 00:461F 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:4621 21 9B 40 -  		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:4624 36 0D -  -  		ld 		(hl),13
   26 00:4626 2B -  -  -  		dec 	hl
   27 00:4627 77 -  -  -  		ld 		(hl),a
   28 00:4628 C9 -  -  -  		ret
   29 00:4629 -  -  -  -  
   30 00:4629 -  -  -  -  ; ***************************************************************************************
   31 00:4629 -  -  -  -  ;
   32 00:4629 -  -  -  -  ;									Changes and Updates
   33 00:4629 -  -  -  -  ;
   34 00:4629 -  -  -  -  ; ***************************************************************************************
   35 00:4629 -  -  -  -  ;
   36 00:4629 -  -  -  -  ;		Date			Notes
   37 00:4629 -  -  -  -  ;		==== 			=====
   38 00:4629 -  -  -  -  ;
   39 00:4629 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:4629 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4629 -  -  -  -  ; ***************************************************************************************
    2 00:4629 -  -  -  -  ; ***************************************************************************************
    3 00:4629 -  -  -  -  ;
    4 00:4629 -  -  -  -  ;		Name : 		len.asm
    5 00:4629 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4629 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4629 -  -  -  -  ;		Reviewed :	None
    8 00:4629 -  -  -  -  ;		Purpose :	String Length
    9 00:4629 -  -  -  -  ;
   10 00:4629 -  -  -  -  ; ***************************************************************************************
   11 00:4629 -  -  -  -  ; ***************************************************************************************
   12 00:4629 -  -  -  -  
   13 00:4629 -  -  -  -  ; ***************************************************************************************
   14 00:4629 -  -  -  -  ;
   15 00:4629 -  -  -  -  ;								Len unary function
   16 00:4629 -  -  -  -  ;
   17 00:4629 -  -  -  -  ; ***************************************************************************************
   18 00:4629 -  -  -  -  
   19 00:4629 -  -  -  -  Unary_Len:	;; [len]
   20 00:4629 CD E1 44 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:462C EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:462D CD EC 43 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4630 -  -  -  -  _ULCount:
   24 00:4630 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:4631 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:4633 D8 -  -  -  		ret 	c
   27 00:4634 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:4635 13 -  -  -  		inc 	de
   29 00:4636 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:4638 -  -  -  -  
   31 00:4638 -  -  -  -  ; ***************************************************************************************
   32 00:4638 -  -  -  -  ;
   33 00:4638 -  -  -  -  ;									Changes and Updates
   34 00:4638 -  -  -  -  ;
   35 00:4638 -  -  -  -  ; ***************************************************************************************
   36 00:4638 -  -  -  -  ;
   37 00:4638 -  -  -  -  ;		Date			Notes
   38 00:4638 -  -  -  -  ;		==== 			=====
   39 00:4638 -  -  -  -  ;
   40 00:4638 -  -  -  -  ; ***************************************************************************************
   41 00:4638 -  -  -  -  		
Listing for file "_build.asm"
   38 00:4638 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:4638 -  -  -  -  ; ***************************************************************************************
    2 00:4638 -  -  -  -  ; ***************************************************************************************
    3 00:4638 -  -  -  -  ;
    4 00:4638 -  -  -  -  ;		Name : 		makestring.asm
    5 00:4638 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4638 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4638 -  -  -  -  ;		Reviewed :	No
    8 00:4638 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:4638 -  -  -  -  ;
   10 00:4638 -  -  -  -  ; ***************************************************************************************
   11 00:4638 -  -  -  -  ; ***************************************************************************************
   12 00:4638 -  -  -  -  
   13 00:4638 -  -  -  -  ; ***************************************************************************************
   14 00:4638 -  -  -  -  ;
   15 00:4638 -  -  -  -  ;								Str$() unary function
   16 00:4638 -  -  -  -  ;
   17 00:4638 -  -  -  -  ; ***************************************************************************************
   18 00:4638 -  -  -  -  
   19 00:4638 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:4638 CD D5 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   21 00:463B CD 4C 45 -  		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:463E 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:4640 C9 -  -  -  		ret
   24 00:4641 -  -  -  -  
   25 00:4641 -  -  -  -  ; ***************************************************************************************
   26 00:4641 -  -  -  -  ;
   27 00:4641 -  -  -  -  ;									Changes and Updates
   28 00:4641 -  -  -  -  ;
   29 00:4641 -  -  -  -  ; ***************************************************************************************
   30 00:4641 -  -  -  -  ;
   31 00:4641 -  -  -  -  ;		Date			Notes
   32 00:4641 -  -  -  -  ;		==== 			=====
   33 00:4641 -  -  -  -  ;
   34 00:4641 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:4641 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:4641 -  -  -  -  ; ***************************************************************************************
    2 00:4641 -  -  -  -  ; ***************************************************************************************
    3 00:4641 -  -  -  -  ;
    4 00:4641 -  -  -  -  ;		Name : 		not.asm
    5 00:4641 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4641 -  -  -  -  ;		Date : 		5th June 2023
    7 00:4641 -  -  -  -  ;		Reviewed :	No
    8 00:4641 -  -  -  -  ;		Purpose :	Logical not
    9 00:4641 -  -  -  -  ;
   10 00:4641 -  -  -  -  ; ***************************************************************************************
   11 00:4641 -  -  -  -  ; ***************************************************************************************
   12 00:4641 -  -  -  -  
   13 00:4641 -  -  -  -  ; ***************************************************************************************
   14 00:4641 -  -  -  -  ;
   15 00:4641 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:4641 -  -  -  -  ;
   17 00:4641 -  -  -  -  ; ***************************************************************************************
   18 00:4641 -  -  -  -  
   19 00:4641 -  -  -  -  Unary_Not:		;; [not]
   20 00:4641 CD D5 44 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:4644 CD 4B 46 -  		call 	__UNSwap 					; not and swap twice.
   22 00:4647 CD 4B 46 -  		call 	__UNSwap		
   23 00:464A C9 -  -  -  		ret
   24 00:464B -  -  -  -  
   25 00:464B -  -  -  -  __UNSwap:
   26 00:464B 7C -  -  -  		ld 		a,h
   27 00:464C 2F -  -  -  		cpl
   28 00:464D 67 -  -  -  		ld 		h,a
   29 00:464E 7D -  -  -  		ld 		a,l
   30 00:464F 2F -  -  -  		cpl 	
   31 00:4650 6F -  -  -  		ld 		l,a
   32 00:4651 D9 -  -  -  		exx
   33 00:4652 C9 -  -  -  		ret
   34 00:4653 -  -  -  -  
   35 00:4653 -  -  -  -  ; ***************************************************************************************
   36 00:4653 -  -  -  -  ;
   37 00:4653 -  -  -  -  ;									Changes and Updates
   38 00:4653 -  -  -  -  ;
   39 00:4653 -  -  -  -  ; ***************************************************************************************
   40 00:4653 -  -  -  -  ;
   41 00:4653 -  -  -  -  ;		Date			Notes
   42 00:4653 -  -  -  -  ;		==== 			=====
   43 00:4653 -  -  -  -  ;
   44 00:4653 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:4653 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:4653 -  -  -  -  ; ***************************************************************************************
    2 00:4653 -  -  -  -  ; ***************************************************************************************
    3 00:4653 -  -  -  -  ;
    4 00:4653 -  -  -  -  ;		Name : 		page.asm
    5 00:4653 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4653 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4653 -  -  -  -  ;		Reviewed :	No
    8 00:4653 -  -  -  -  ;		Purpose :	Various constants.
    9 00:4653 -  -  -  -  ;
   10 00:4653 -  -  -  -  ; ***************************************************************************************
   11 00:4653 -  -  -  -  ; ***************************************************************************************
   12 00:4653 -  -  -  -  
   13 00:4653 -  -  -  -  ; ***************************************************************************************
   14 00:4653 -  -  -  -  ;
   15 00:4653 -  -  -  -  ;							page unary function (no bracket)
   16 00:4653 -  -  -  -  ;
   17 00:4653 -  -  -  -  ; ***************************************************************************************
   18 00:4653 -  -  -  -  
   19 00:4653 -  -  -  -  Unary_Page:	;; [page]
   20 00:4653 2A 34 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:4656 D9 -  -  -  			exx
   22 00:4657 2A 36 40 -  			ld 		hl,(CodeAddress+2)
   23 00:465A D9 -  -  -  			exx
   24 00:465B 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:465D C9 -  -  -  			ret
   26 00:465E -  -  -  -  
   27 00:465E -  -  -  -  ; ***************************************************************************************
   28 00:465E -  -  -  -  ;
   29 00:465E -  -  -  -  ;									Changes and Updates
   30 00:465E -  -  -  -  ;
   31 00:465E -  -  -  -  ; ***************************************************************************************
   32 00:465E -  -  -  -  ;
   33 00:465E -  -  -  -  ;		Date			Notes
   34 00:465E -  -  -  -  ;		==== 			=====
   35 00:465E -  -  -  -  ;
   36 00:465E -  -  -  -  ; ***************************************************************************************
   37 00:465E -  -  -  -  			
Listing for file "_build.asm"
   41 00:465E -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:465E -  -  -  -  ; ***************************************************************************************
    2 00:465E -  -  -  -  ; ***************************************************************************************
    3 00:465E -  -  -  -  ;
    4 00:465E -  -  -  -  ;		Name : 		random.asm
    5 00:465E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:465E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:465E -  -  -  -  ;		Reviewed :	No
    8 00:465E -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:465E -  -  -  -  ;
   10 00:465E -  -  -  -  ; ***************************************************************************************
   11 00:465E -  -  -  -  ; ***************************************************************************************
   12 00:465E -  -  -  -  
   13 00:465E -  -  -  -  ; ***************************************************************************************
   14 00:465E -  -  -  -  ;
   15 00:465E -  -  -  -  ;								Random unary function
   16 00:465E -  -  -  -  ;
   17 00:465E -  -  -  -  ; ***************************************************************************************
   18 00:465E -  -  -  -  
   19 00:465E -  -  -  -  Unary_Random:	;; [rnd]
   20 00:465E 76 -  -  -  		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:465F CD D5 44 -  		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:4662 D9 -  -  -  		exx 								; is it -ve
   23 00:4663 CB 7C -  -  		bit 	7,h
   24 00:4665 D9 -  -  -  		exx
   25 00:4666 28 0B -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:4668 22 6C 40 -  		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:466B D9 -  -  -  		exx
   28 00:466C 22 70 40 -  		ld 		(RandomSeed+4),hl
   29 00:466F D9 -  -  -  		exx
   30 00:4670 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:4672 C9 -  -  -  		ret
   32 00:4673 -  -  -  -  _URDontSeed:		
   33 00:4673 -  -  -  -  
   34 00:4673 CD 77 4C -  		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:4676 28 19 -  -  		jr 		z,_URFail
   36 00:4678 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:4679 D9 -  -  -  		exx
   38 00:467A E5 -  -  -  		push 	hl
   39 00:467B D9 -  -  -  		exx
   40 00:467C -  -  -  -  		;
   41 00:467C CD A0 46 -  		call 	URandomHL 					; get random HL'HL
   42 00:467F D9 -  -  -  		exx
   43 00:4680 CD A0 46 -  		call 	URandomHL
   44 00:4683 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:4685 D9 -  -  -  		exx
   46 00:4686 -  -  -  -  		;
   47 00:4686 D9 -  -  -  		exx 								; restore range.
   48 00:4687 D1 -  -  -  		pop 	de
   49 00:4688 D9 -  -  -  		exx
   50 00:4689 D1 -  -  -  		pop 	de
   51 00:468A -  -  -  -  		;
   52 00:468A CD 23 4B -  		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:468D 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:468E 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:4690 C9 -  -  -  		ret
   56 00:4691 -  -  -  -  _URFail:
   57 00:4691 3E 03 C3 0E 
              43 -  -  -  		ERR_BADVALUE
   58 00:4696 -  -  -  -  ; ***************************************************************************************
   59 00:4696 -  -  -  -  ;
   60 00:4696 -  -  -  -  ; 									Push RNG off zero
   61 00:4696 -  -  -  -  ;
   62 00:4696 -  -  -  -  ; ***************************************************************************************
   63 00:4696 -  -  -  -  
   64 00:4696 -  -  -  -  UnaryRandomInitialise:
   65 00:4696 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:4698 -  -  -  -  _URILoop:
   67 00:4698 C5 -  -  -  		push 	bc
   68 00:4699 CD A0 46 -  		call 	URandomHL
   69 00:469C C1 -  -  -  		pop 	bc
   70 00:469D 10 F9 -  -  		djnz 	_URILoop
   71 00:469F C9 -  -  -  		ret
   72 00:46A0 -  -  -  -  
   73 00:46A0 -  -  -  -  ; ***************************************************************************************
   74 00:46A0 -  -  -  -  ;
   75 00:46A0 -  -  -  -  ;							16 bit random number generator
   76 00:46A0 -  -  -  -  ;
   77 00:46A0 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:46A0 -  -  -  -  ;		Actual author unspecified.
   79 00:46A0 -  -  -  -  ;
   80 00:46A0 -  -  -  -  ; ***************************************************************************************
   81 00:46A0 -  -  -  -  
   82 00:46A0 -  -  -  -  URandomHL:
   83 00:46A0 2A 6C 40 -  	    ld 		hl,(RandomSeed)
   84 00:46A3 ED 5B 70 40 	    ld 		de,(RandomSeed+4)
   85 00:46A7 44 -  -  -  	    ld 		b,h
   86 00:46A8 4D -  -  -  	    ld 		c,l
   87 00:46A9 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:46AE 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:46B3 2C -  -  -  	    inc 	l
   90 00:46B4 09 -  -  -  	    add 	hl,bc
   91 00:46B5 22 6C 40 -  	    ld 		(RandomSeed),hl
   92 00:46B8 2A 70 40 -  	    ld 		hl,(RandomSeed+4)
   93 00:46BB ED 5A -  -  	    adc 	hl,de
   94 00:46BD 22 70 40 -  	    ld 		(RandomSeed+4),hl
   95 00:46C0 EB -  -  -  	    ex 		de,hl
   96 00:46C1 2A 74 40 -  	    ld 		hl,(RandomSeed+8)
   97 00:46C4 ED 4B 78 40 	    ld 		bc,(RandomSeed+12)
   98 00:46C8 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:46CD ED 43 78 40 	    ld 		(RandomSeed+12),bc
  100 00:46D1 9F -  -  -  	    sbc 	a,a
  101 00:46D2 E6 C5 -  -  	    and 	%11000101
  102 00:46D4 AD -  -  -  	    xor 	l
  103 00:46D5 6F -  -  -  	    ld 		l,a
  104 00:46D6 22 74 40 -  	    ld 		(RandomSeed+8),hl
  105 00:46D9 EB -  -  -  	    ex 		de,hl
  106 00:46DA 09 -  -  -  	    add 	hl,bc
  107 00:46DB C9 -  -  -  	    ret		
  108 00:46DC -  -  -  -  
  109 00:46DC -  -  -  -  ; ***************************************************************************************
  110 00:46DC -  -  -  -  ;
  111 00:46DC -  -  -  -  ;									Changes and Updates
  112 00:46DC -  -  -  -  ;
  113 00:46DC -  -  -  -  ; ***************************************************************************************
  114 00:46DC -  -  -  -  ;
  115 00:46DC -  -  -  -  ;		Date			Notes
  116 00:46DC -  -  -  -  ;		==== 			=====
  117 00:46DC -  -  -  -  ;
  118 00:46DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:46DC -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:46DC -  -  -  -  ; ***************************************************************************************
    2 00:46DC -  -  -  -  ; ***************************************************************************************
    3 00:46DC -  -  -  -  ;
    4 00:46DC -  -  -  -  ;		Name : 		sgn.asm
    5 00:46DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46DC -  -  -  -  ;		Reviewed :	No
    8 00:46DC -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:46DC -  -  -  -  ;
   10 00:46DC -  -  -  -  ; ***************************************************************************************
   11 00:46DC -  -  -  -  ; ***************************************************************************************
   12 00:46DC -  -  -  -  
   13 00:46DC -  -  -  -  ; ***************************************************************************************
   14 00:46DC -  -  -  -  ;
   15 00:46DC -  -  -  -  ;								sgn unary function
   16 00:46DC -  -  -  -  ;
   17 00:46DC -  -  -  -  ; ***************************************************************************************
   18 00:46DC -  -  -  -  
   19 00:46DC -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:46DC CD D5 44 -  		call	EvaluateIntegerTerm 		; get value
   21 00:46DF CD 77 4C -  		call 	Int32Zero 					; integer sgn() code
   22 00:46E2 CA EC 43 -  		jp 		z,UnaryInt32False
   23 00:46E5 D9 -  -  -  		exx
   24 00:46E6 CB 7C -  -  		bit 	7,h
   25 00:46E8 D9 -  -  -  		exx
   26 00:46E9 C2 E8 43 -  		jp 		nz,UnaryInt32True
   27 00:46EC 3E 01 -  -  		ld 		a,1
   28 00:46EE C3 12 45 -  		jp 		Return8BitConstant
   29 00:46F1 -  -  -  -  
   30 00:46F1 -  -  -  -  ; ***************************************************************************************
   31 00:46F1 -  -  -  -  ;
   32 00:46F1 -  -  -  -  ;									Changes and Updates
   33 00:46F1 -  -  -  -  ;
   34 00:46F1 -  -  -  -  ; ***************************************************************************************
   35 00:46F1 -  -  -  -  ;
   36 00:46F1 -  -  -  -  ;		Date			Notes
   37 00:46F1 -  -  -  -  ;		==== 			=====
   38 00:46F1 -  -  -  -  ;
   39 00:46F1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:46F1 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:46F1 -  -  -  -  ; ***************************************************************************************
    2 00:46F1 -  -  -  -  ; ***************************************************************************************
    3 00:46F1 -  -  -  -  ;
    4 00:46F1 -  -  -  -  ;		Name : 		simple.asm
    5 00:46F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46F1 -  -  -  -  ;		Reviewed :	No
    8 00:46F1 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:46F1 -  -  -  -  ;
   10 00:46F1 -  -  -  -  ; ***************************************************************************************
   11 00:46F1 -  -  -  -  ; ***************************************************************************************
   12 00:46F1 -  -  -  -  
   13 00:46F1 -  -  -  -  ; ***************************************************************************************
   14 00:46F1 -  -  -  -  ;
   15 00:46F1 -  -  -  -  ;								( unary function (think about it)
   16 00:46F1 -  -  -  -  ;
   17 00:46F1 -  -  -  -  ; ***************************************************************************************
   18 00:46F1 -  -  -  -  
   19 00:46F1 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:46F1 CD 83 44 -  		call 	EvaluateAtPrecedence0
   21 00:46F4 C3 DC 42 -  		jp  	CheckRightBracket
   22 00:46F7 -  -  -  -  
   23 00:46F7 -  -  -  -  ; ***************************************************************************************
   24 00:46F7 -  -  -  -  ;
   25 00:46F7 -  -  -  -  ;									Handle &x
   26 00:46F7 -  -  -  -  ;
   27 00:46F7 -  -  -  -  ; ***************************************************************************************
   28 00:46F7 -  -  -  -  
   29 00:46F7 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:46F7 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:46FA E6 C0 -  -  		and 		$C0
   32 00:46FC FE 40 -  -  		cp 			$40
   33 00:46FE C2 6B 43 -  		jp 			nz,SyntaxError 			; no then error
   34 00:4701 C3 4E 45 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:4704 -  -  -  -  
   36 00:4704 -  -  -  -  ; ***************************************************************************************
   37 00:4704 -  -  -  -  ;
   38 00:4704 -  -  -  -  ;									Changes and Updates
   39 00:4704 -  -  -  -  ;
   40 00:4704 -  -  -  -  ; ***************************************************************************************
   41 00:4704 -  -  -  -  ;
   42 00:4704 -  -  -  -  ;		Date			Notes
   43 00:4704 -  -  -  -  ;		==== 			=====
   44 00:4704 -  -  -  -  ;
   45 00:4704 -  -  -  -  ; ***************************************************************************************
   46 00:4704 -  -  -  -  		
Listing for file "_build.asm"
   44 00:4704 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:4704 -  -  -  -  ; ***************************************************************************************
    2 00:4704 -  -  -  -  ; ***************************************************************************************
    3 00:4704 -  -  -  -  ;
    4 00:4704 -  -  -  -  ;		Name : 		str.asm
    5 00:4704 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4704 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4704 -  -  -  -  ;		Reviewed :	No
    8 00:4704 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:4704 -  -  -  -  ;
   10 00:4704 -  -  -  -  ; ***************************************************************************************
   11 00:4704 -  -  -  -  ; ***************************************************************************************
   12 00:4704 -  -  -  -  
   13 00:4704 -  -  -  -  ; ***************************************************************************************
   14 00:4704 -  -  -  -  ;
   15 00:4704 -  -  -  -  ;								Str$() unary function
   16 00:4704 -  -  -  -  ;
   17 00:4704 -  -  -  -  ; ***************************************************************************************
   18 00:4704 -  -  -  -  
   19 00:4704 -  -  -  -  Unary_Str:	;; [str]
   20 00:4704 CD E9 42 -  		call 	CheckDollar
   21 00:4707 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:470A EE AC -  -  		xor		KWD_TILDE
   23 00:470C F5 -  -  -  		push 	af
   24 00:470D 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:470F DD 23 -  -  		inc 	ix
   26 00:4711 -  -  -  -  _USNotHex:		
   27 00:4711 CD D5 44 -  		call 	EvaluateIntegerTerm 		; get an integer
   28 00:4714 01 8A 40 -  		ld 		bc,_USBuffer 				; point to buffer.
   29 00:4717 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:4718 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:471A 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:471C 3E 10 -  -  		ld 		a,16
   33 00:471E -  -  -  -  _USNotHex2:		
   34 00:471E CD B8 4C -  		call 	Int32ToString 				
   35 00:4721 21 8A 40 -  		ld 		hl,_USBuffer 				; string address.
   36 00:4724 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:4726 C9 -  -  -  		ret
   38 00:4727 -  -  -  -  
   39 00:4727 -  -  -  -  ; ***************************************************************************************
   40 00:4727 -  -  -  -  ;
   41 00:4727 -  -  -  -  ;									Changes and Updates
   42 00:4727 -  -  -  -  ;
   43 00:4727 -  -  -  -  ; ***************************************************************************************
   44 00:4727 -  -  -  -  ;
   45 00:4727 -  -  -  -  ;		Date			Notes
   46 00:4727 -  -  -  -  ;		==== 			=====
   47 00:4727 -  -  -  -  ;
   48 00:4727 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:4727 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:4727 -  -  -  -  ; ***************************************************************************************
    2 00:4727 -  -  -  -  ; ***************************************************************************************
    3 00:4727 -  -  -  -  ;
    4 00:4727 -  -  -  -  ;		Name : 		time.asm
    5 00:4727 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4727 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4727 -  -  -  -  ;		Reviewed :	No
    8 00:4727 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:4727 -  -  -  -  ;
   10 00:4727 -  -  -  -  ; ***************************************************************************************
   11 00:4727 -  -  -  -  ; ***************************************************************************************
   12 00:4727 -  -  -  -  
   13 00:4727 -  -  -  -  ; ***************************************************************************************
   14 00:4727 -  -  -  -  ;
   15 00:4727 -  -  -  -  ;							Get system time in ms
   16 00:4727 -  -  -  -  ;
   17 00:4727 -  -  -  -  ; ***************************************************************************************
   18 00:4727 -  -  -  -  
   19 00:4727 -  -  -  -  Unary_Time:	;; [time]
   20 00:4727 CD 2F 4D -  			call 	SYSGetTimer
   21 00:472A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:472C C9 -  -  -  			ret
   23 00:472D -  -  -  -  
   24 00:472D -  -  -  -  ; ***************************************************************************************
   25 00:472D -  -  -  -  ;
   26 00:472D -  -  -  -  ;									Changes and Updates
   27 00:472D -  -  -  -  ;
   28 00:472D -  -  -  -  ; ***************************************************************************************
   29 00:472D -  -  -  -  ;
   30 00:472D -  -  -  -  ;		Date			Notes
   31 00:472D -  -  -  -  ;		==== 			=====
   32 00:472D -  -  -  -  ;
   33 00:472D -  -  -  -  ; ***************************************************************************************
   34 00:472D -  -  -  -  			
Listing for file "_build.asm"
   46 00:472D -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:472D -  -  -  -  ; ***************************************************************************************
    2 00:472D -  -  -  -  ; ***************************************************************************************
    3 00:472D -  -  -  -  ;
    4 00:472D -  -  -  -  ;		Name : 		top.asm
    5 00:472D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:472D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:472D -  -  -  -  ;		Reviewed :	No
    8 00:472D -  -  -  -  ;		Purpose :	Various constants.
    9 00:472D -  -  -  -  ;
   10 00:472D -  -  -  -  ; ***************************************************************************************
   11 00:472D -  -  -  -  ; ***************************************************************************************
   12 00:472D -  -  -  -  
   13 00:472D -  -  -  -  ; ***************************************************************************************
   14 00:472D -  -  -  -  ;
   15 00:472D -  -  -  -  ;							page unary function (no bracket)
   16 00:472D -  -  -  -  ;
   17 00:472D -  -  -  -  ; ***************************************************************************************
   18 00:472D -  -  -  -  
   19 00:472D -  -  -  -  Unary_Top:	;; [top]
   20 00:472D 2A 50 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:4730 D9 -  -  -  			exx
   22 00:4731 2A 52 40 -  			ld 		hl,(TopMemory+2)
   23 00:4734 D9 -  -  -  			exx
   24 00:4735 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:4737 C9 -  -  -  			ret
   26 00:4738 -  -  -  -  
   27 00:4738 -  -  -  -  ; ***************************************************************************************
   28 00:4738 -  -  -  -  ;
   29 00:4738 -  -  -  -  ;									Changes and Updates
   30 00:4738 -  -  -  -  ;
   31 00:4738 -  -  -  -  ; ***************************************************************************************
   32 00:4738 -  -  -  -  ;
   33 00:4738 -  -  -  -  ;		Date			Notes
   34 00:4738 -  -  -  -  ;		==== 			=====
   35 00:4738 -  -  -  -  ;
   36 00:4738 -  -  -  -  ; ***************************************************************************************
   37 00:4738 -  -  -  -  			
Listing for file "_build.asm"
   47 00:4738 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:4738 -  -  -  -  ; ***************************************************************************************
    2 00:4738 -  -  -  -  ; ***************************************************************************************
    3 00:4738 -  -  -  -  ;
    4 00:4738 -  -  -  -  ;		Name : 		val.asm
    5 00:4738 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4738 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4738 -  -  -  -  ;		Reviewed :	No
    8 00:4738 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:4738 -  -  -  -  ;
   10 00:4738 -  -  -  -  ; ***************************************************************************************
   11 00:4738 -  -  -  -  ; ***************************************************************************************
   12 00:4738 -  -  -  -  
   13 00:4738 -  -  -  -  ; ***************************************************************************************
   14 00:4738 -  -  -  -  ;
   15 00:4738 -  -  -  -  ;								val( unary function
   16 00:4738 -  -  -  -  ;
   17 00:4738 -  -  -  -  ; ***************************************************************************************
   18 00:4738 -  -  -  -  
   19 00:4738 -  -  -  -  Unary_Val:	;; [val]
   20 00:4738 CD E1 44 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:473B E5 -  -  -  		push 	hl 							; copy to BC
   22 00:473C C1 -  -  -  		pop 	bc
   23 00:473D 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:473F CD AE 4B -  		call 	Int32FromString 			; get the integer part.
   25 00:4742 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:4744 C8 -  -  -  		ret		z 							; okay
   27 00:4745 3E 03 C3 0E 
              43 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:474A -  -  -  -  
   29 00:474A -  -  -  -  ; ***************************************************************************************
   30 00:474A -  -  -  -  ;
   31 00:474A -  -  -  -  ;									Changes and Updates
   32 00:474A -  -  -  -  ;
   33 00:474A -  -  -  -  ; ***************************************************************************************
   34 00:474A -  -  -  -  ;
   35 00:474A -  -  -  -  ;		Date			Notes
   36 00:474A -  -  -  -  ;		==== 			=====
   37 00:474A -  -  -  -  ;
   38 00:474A -  -  -  -  ; ***************************************************************************************
   39 00:474A -  -  -  -  		
Listing for file "_build.asm"
   48 00:474A -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:474A -  -  -  -  ; ***************************************************************************************
    2 00:474A -  -  -  -  ; ***************************************************************************************
    3 00:474A -  -  -  -  ;
    4 00:474A -  -  -  -  ;		Name : 		allocate.asm
    5 00:474A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:474A -  -  -  -  ;		Date : 		4th June 2022
    7 00:474A -  -  -  -  ;		Reviewed :	No
    8 00:474A -  -  -  -  ;		Purpose :	Allocate memory
    9 00:474A -  -  -  -  ;
   10 00:474A -  -  -  -  ; ***************************************************************************************
   11 00:474A -  -  -  -  ; ***************************************************************************************
   12 00:474A -  -  -  -  
   13 00:474A -  -  -  -  ; ***************************************************************************************
   14 00:474A -  -  -  -  ;
   15 00:474A -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:474A -  -  -  -  ;
   17 00:474A -  -  -  -  ; ***************************************************************************************
   18 00:474A -  -  -  -  
   19 00:474A -  -  -  -  AllocateBytes:
   20 00:474A EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:474B 21 00 00 -  		ld 		hl,$000000
   22 00:474E 62 -  -  -  		ld 		h,d
   23 00:474F 6B -  -  -  		ld 		l,e
   24 00:4750 -  -  -  -  		;
   25 00:4750 ED 5B 4C 40 		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:4754 D5 -  -  -  		push 	de 							; save on stack
   27 00:4755 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:4756 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; update it
   29 00:4759 -  -  -  -  		;
   30 00:4759 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:475A 2A 48 40 -  		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:475D AF -  -  -  		xor 	a
   33 00:475E ED 52 -  -  		sbc 	hl,de
   34 00:4760 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:4761 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:4762 3E 08 C3 0E 
              43 -  -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:4767 -  -  -  -  
   38 00:4767 -  -  -  -  ; ***************************************************************************************
   39 00:4767 -  -  -  -  ;
   40 00:4767 -  -  -  -  ;									Changes and Updates
   41 00:4767 -  -  -  -  ;
   42 00:4767 -  -  -  -  ; ***************************************************************************************
   43 00:4767 -  -  -  -  ;
   44 00:4767 -  -  -  -  ;		Date			Notes
   45 00:4767 -  -  -  -  ;		==== 			=====
   46 00:4767 -  -  -  -  ;
   47 00:4767 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:4767 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4767 -  -  -  -  ; ***************************************************************************************
    2 00:4767 -  -  -  -  ; ***************************************************************************************
    3 00:4767 -  -  -  -  ;
    4 00:4767 -  -  -  -  ;		Name : 		clear.asm
    5 00:4767 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4767 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4767 -  -  -  -  ;		Reviewed :	No
    8 00:4767 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4767 -  -  -  -  ;
   10 00:4767 -  -  -  -  ; ***************************************************************************************
   11 00:4767 -  -  -  -  ; ***************************************************************************************
   12 00:4767 -  -  -  -  
   13 00:4767 -  -  -  -  ; ***************************************************************************************
   14 00:4767 -  -  -  -  ;
   15 00:4767 -  -  -  -  ;										CLEAR command
   16 00:4767 -  -  -  -  ;
   17 00:4767 -  -  -  -  ; ***************************************************************************************
   18 00:4767 -  -  -  -  
   19 00:4767 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4767 -  -  -  -  		;
   21 00:4767 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4767 -  -  -  -  		;
   23 00:4767 2A 2C 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:476A -  -  -  -  _CCFindLow:
   25 00:476A 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:476D 5E -  -  -  		ld 		e,(hl)		
   27 00:476E 19 -  -  -  		add 	hl,de
   28 00:476F 7B -  -  -  		ld 		a,e
   29 00:4770 B7 -  -  -  		or 		a
   30 00:4771 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:4773 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4774 22 50 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4777 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4778 22 4C 40 -  		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:477B -  -  -  -  		;
   36 00:477B -  -  -  -  		; 	 		Reset the language stack
   37 00:477B -  -  -  -  		;
   38 00:477B 2A 30 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:477E -  -  -  -  		;
   40 00:477E 22 38 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:4781 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:4784 19 -  -  -  		add 	hl,de
   43 00:4785 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:4787 22 3C 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:478A -  -  -  -  		;
   46 00:478A 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:478D 19 -  -  -  		add 	hl,de
   48 00:478E 22 40 40 -  		ld 		(StandardIntegers),hl
   49 00:4791 -  -  -  -  		;
   50 00:4791 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:4791 -  -  -  -  		;
   52 00:4791 11 80 00 -  		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:4794 -  -  -  -  _CCFClearHT:
   54 00:4794 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:4795 36 00 -  -  		ld 		(hl),0
   56 00:4797 1B -  -  -  		dec 	de
   57 00:4798 7A -  -  -  		ld 		a,d
   58 00:4799 B3 -  -  -  		or 		e
   59 00:479A 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:479C 22 44 40 -  		ld 		(HashTableBase),hl 			; save table base
   61 00:479F -  -  -  -  		;
   62 00:479F -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:479F -  -  -  -  		;
   64 00:479F 22 48 40 -  		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:47A2 -  -  -  -  		;
   66 00:47A2 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:47A2 -  -  -  -  		;
   68 00:47A2 CD 96 46 -  		call 	UnaryRandomInitialise
   69 00:47A5 -  -  -  -  		;
   70 00:47A5 -  -  -  -  		;		Erase the stack
   71 00:47A5 -  -  -  -  		;
   72 00:47A5 CD C2 47 -  		call 	StackReset 					; reset the basic stack to empty
   73 00:47A8 C9 -  -  -  		ret
   74 00:47A9 -  -  -  -  
   75 00:47A9 -  -  -  -  ; ***************************************************************************************
   76 00:47A9 -  -  -  -  ;
   77 00:47A9 -  -  -  -  ;									Changes and Updates
   78 00:47A9 -  -  -  -  ;
   79 00:47A9 -  -  -  -  ; ***************************************************************************************
   80 00:47A9 -  -  -  -  ;
   81 00:47A9 -  -  -  -  ;		Date			Notes
   82 00:47A9 -  -  -  -  ;		==== 			=====
   83 00:47A9 -  -  -  -  ;
   84 00:47A9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:47A9 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:47A9 -  -  -  -  ; ***************************************************************************************
    2 00:47A9 -  -  -  -  ; ***************************************************************************************
    3 00:47A9 -  -  -  -  ;
    4 00:47A9 -  -  -  -  ;		Name : 		instance.asm
    5 00:47A9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47A9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47A9 -  -  -  -  ;		Reviewed :	No
    8 00:47A9 -  -  -  -  ;		Purpose :	Instance handling
    9 00:47A9 -  -  -  -  ;
   10 00:47A9 -  -  -  -  ; ***************************************************************************************
   11 00:47A9 -  -  -  -  ; ***************************************************************************************
   12 00:47A9 -  -  -  -  
   13 00:47A9 -  -  -  -  ; ***************************************************************************************
   14 00:47A9 -  -  -  -  ;
   15 00:47A9 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:47A9 -  -  -  -  ;
   17 00:47A9 -  -  -  -  ; ***************************************************************************************
   18 00:47A9 -  -  -  -  
   19 00:47A9 -  -  -  -  SetCurrentInstance:
   20 00:47A9 ED 53 2C 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:47AD 22 30 40 -  		ld 		(HighMemory),hl 
   22 00:47B0 ED 53 34 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:47B4 -  -  -  -  
   24 00:47B4 C9 -  -  -  		ret
   25 00:47B5 -  -  -  -  
   26 00:47B5 -  -  -  -  
   27 00:47B5 -  -  -  -  ; ***************************************************************************************
   28 00:47B5 -  -  -  -  ;
   29 00:47B5 -  -  -  -  ;									Changes and Updates
   30 00:47B5 -  -  -  -  ;
   31 00:47B5 -  -  -  -  ; ***************************************************************************************
   32 00:47B5 -  -  -  -  ;
   33 00:47B5 -  -  -  -  ;		Date			Notes
   34 00:47B5 -  -  -  -  ;		==== 			=====
   35 00:47B5 -  -  -  -  ;
   36 00:47B5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:47B5 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:47B5 -  -  -  -  ; ***************************************************************************************
    2 00:47B5 -  -  -  -  ; ***************************************************************************************
    3 00:47B5 -  -  -  -  ;
    4 00:47B5 -  -  -  -  ;		Name : 		new.asm
    5 00:47B5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47B5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47B5 -  -  -  -  ;		Reviewed :	No
    8 00:47B5 -  -  -  -  ;		Purpose :	New command.
    9 00:47B5 -  -  -  -  ;
   10 00:47B5 -  -  -  -  ; ***************************************************************************************
   11 00:47B5 -  -  -  -  ; ***************************************************************************************
   12 00:47B5 -  -  -  -  
   13 00:47B5 -  -  -  -  ; ***************************************************************************************
   14 00:47B5 -  -  -  -  ;
   15 00:47B5 -  -  -  -  ;										NEW command
   16 00:47B5 -  -  -  -  ;
   17 00:47B5 -  -  -  -  ; ***************************************************************************************
   18 00:47B5 -  -  -  -  
   19 00:47B5 -  -  -  -  Command_NEW: 	;; [new]
   20 00:47B5 2A 34 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:47B8 36 00 -  -  		ld 		(hl),0
   22 00:47BA CD 67 47 -  		call 	Command_CLEAR 				; clear all variables
   23 00:47BD 3E 00 C3 0E 
              43 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:47C2 -  -  -  -  
   25 00:47C2 -  -  -  -  ; ***************************************************************************************
   26 00:47C2 -  -  -  -  ;
   27 00:47C2 -  -  -  -  ;									Changes and Updates
   28 00:47C2 -  -  -  -  ;
   29 00:47C2 -  -  -  -  ; ***************************************************************************************
   30 00:47C2 -  -  -  -  ;
   31 00:47C2 -  -  -  -  ;		Date			Notes
   32 00:47C2 -  -  -  -  ;		==== 			=====
   33 00:47C2 -  -  -  -  ;
   34 00:47C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:47C2 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:47C2 -  -  -  -  ; ***************************************************************************************
    2 00:47C2 -  -  -  -  ; ***************************************************************************************
    3 00:47C2 -  -  -  -  ;
    4 00:47C2 -  -  -  -  ;		Name : 		stack.asm
    5 00:47C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47C2 -  -  -  -  ;		Date : 		6th June 2022
    7 00:47C2 -  -  -  -  ;		Reviewed :	No
    8 00:47C2 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:47C2 -  -  -  -  ;
   10 00:47C2 -  -  -  -  ; ***************************************************************************************
   11 00:47C2 -  -  -  -  ; ***************************************************************************************
   12 00:47C2 -  -  -  -  ;
   13 00:47C2 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:47C2 -  -  -  -  ;		The low bytes (0..3) doubled the size of the stack in bytes 
   15 00:47C2 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:47C2 -  -  -  -  ;
   17 00:47C2 -  -  -  -  ; ***************************************************************************************
   18 00:47C2 -  -  -  -  ;
   19 00:47C2 -  -  -  -  ;								Clear the stack
   20 00:47C2 -  -  -  -  ;
   21 00:47C2 -  -  -  -  ; ***************************************************************************************
   22 00:47C2 -  -  -  -  
   23 00:47C2 -  -  -  -  StackReset:
   24 00:47C2 2A 38 40 -  		ld 		hl,(LanguageStack) 			; top of language stack
   25 00:47C5 2B -  -  -  		dec 	hl 							; down to make space for end.
   26 00:47C6 22 54 40 -  		ld 		(BasicSP),hl 				; write out current position
   27 00:47C9 36 00 -  -  		ld 		(hl),0 						; Dummy top, as stack size cannot be 0.
   28 00:47CB C9 -  -  -  		ret
   29 00:47CC -  -  -  -  
   30 00:47CC -  -  -  -  ; ***************************************************************************************
   31 00:47CC -  -  -  -  ;
   32 00:47CC -  -  -  -  ;									Changes and Updates
   33 00:47CC -  -  -  -  ;
   34 00:47CC -  -  -  -  ; ***************************************************************************************
   35 00:47CC -  -  -  -  ;
   36 00:47CC -  -  -  -  ;		Date			Notes
   37 00:47CC -  -  -  -  ;		==== 			=====
   38 00:47CC -  -  -  -  ;
   39 00:47CC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:47CC -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:47CC -  -  -  -  ; ***************************************************************************************
    2 00:47CC -  -  -  -  ; ***************************************************************************************
    3 00:47CC -  -  -  -  ;
    4 00:47CC -  -  -  -  ;		Name : 		utility.asm
    5 00:47CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47CC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:47CC -  -  -  -  ;		Reviewed :	No
    8 00:47CC -  -  -  -  ;		Purpose :	Utility routines
    9 00:47CC -  -  -  -  ;
   10 00:47CC -  -  -  -  ; ***************************************************************************************
   11 00:47CC -  -  -  -  ; ***************************************************************************************
   12 00:47CC -  -  -  -  
   13 00:47CC -  -  -  -  ; ***************************************************************************************
   14 00:47CC -  -  -  -  ;
   15 00:47CC -  -  -  -  ;							Print ASCII string at HL
   16 00:47CC -  -  -  -  ;
   17 00:47CC -  -  -  -  ; ***************************************************************************************
   18 00:47CC -  -  -  -  
   19 00:47CC -  -  -  -  PrintStringAtHL:
   20 00:47CC 7E -  -  -  		ld 		a,(hl)
   21 00:47CD FE 20 -  -  		cp 		$20		
   22 00:47CF D8 -  -  -  		ret 	c
   23 00:47D0 CD 06 4D -  		call 	SYSPrintChar
   24 00:47D3 23 -  -  -  		inc 	hl
   25 00:47D4 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:47D6 -  -  -  -  
   27 00:47D6 -  -  -  -  ; ***************************************************************************************
   28 00:47D6 -  -  -  -  ;
   29 00:47D6 -  -  -  -  ;									Changes and Updates
   30 00:47D6 -  -  -  -  ;
   31 00:47D6 -  -  -  -  ; ***************************************************************************************
   32 00:47D6 -  -  -  -  ;
   33 00:47D6 -  -  -  -  ;		Date			Notes
   34 00:47D6 -  -  -  -  ;		==== 			=====
   35 00:47D6 -  -  -  -  ;
   36 00:47D6 -  -  -  -  ; ***************************************************************************************
   37 00:47D6 -  -  -  -  		
Listing for file "_build.asm"
   54 00:47D6 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:47D6 -  -  -  -  ; ***************************************************************************************
    2 00:47D6 -  -  -  -  ; ***************************************************************************************
    3 00:47D6 -  -  -  -  ;
    4 00:47D6 -  -  -  -  ;		Name : 		create.asm
    5 00:47D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:47D6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:47D6 -  -  -  -  ;		Reviewed :	No
    8 00:47D6 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:47D6 -  -  -  -  ;
   10 00:47D6 -  -  -  -  ; ***************************************************************************************
   11 00:47D6 -  -  -  -  ; ***************************************************************************************
   12 00:47D6 -  -  -  -  
   13 00:47D6 -  -  -  -  ; ***************************************************************************************
   14 00:47D6 -  -  -  -  ;
   15 00:47D6 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:47D6 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:47D6 -  -  -  -  ;
   18 00:47D6 -  -  -  -  ; ***************************************************************************************
   19 00:47D6 -  -  -  -  
   20 00:47D6 -  -  -  -  VariableCreate:		
   21 00:47D6 -  -  -  -  		;
   22 00:47D6 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:47D6 -  -  -  -  		;
   24 00:47D6 11 09 00 -  		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:47D9 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:47DA E5 -  -  -  		push 	hl 							; save count.
   27 00:47DB CD 4A 47 -  		call 	AllocateBytes 				; claim that many bytes
   28 00:47DE C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:47DF -  -  -  -  		;
   30 00:47DF -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:47DF -  -  -  -  		;
   32 00:47DF E5 -  -  -  		push	hl 							; save start address on stack
   33 00:47E0 -  -  -  -  _VCClear:
   34 00:47E0 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:47E2 23 -  -  -  		inc 	hl
   36 00:47E3 0B -  -  -  		dec 	bc
   37 00:47E4 78 -  -  -  		ld		a,b
   38 00:47E5 B1 -  -  -  		or 		c
   39 00:47E6 20 F8 -  -  		jr 		nz,_VCClear
   40 00:47E8 E1 -  -  -  		pop 	hl							; restore start address
   41 00:47E9 -  -  -  -  		;
   42 00:47E9 -  -  -  -  		;		Now start to create the data.
   43 00:47E9 -  -  -  -  		;
   44 00:47E9 E5 -  -  -  		push 	hl 							; save start
   45 00:47EA -  -  -  -  		;
   46 00:47EA -  -  -  -  		;		Write hash to +0
   47 00:47EA -  -  -  -  		;
   48 00:47EA 3A 84 40 -  		ld 		a,(VarHash) 				; write Hash to +0
   49 00:47ED 77 -  -  -  		ld 		(hl),a
   50 00:47EE 23 -  -  -  		inc 	hl
   51 00:47EF -  -  -  -  		;
   52 00:47EF -  -  -  -  		;		Write list head to +1
   53 00:47EF -  -  -  -  		;
   54 00:47EF E5 -  -  -  		push 	hl 							; save write position
   55 00:47F0 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:47F3 7E 23 66 6F 		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:47F7 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:47F8 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:47F9 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:47FF -  -  -  -  		;
   61 00:47FF -  -  -  -  		;		Write variable name to +5
   62 00:47FF -  -  -  -  		;
   63 00:47FF ED 5B 80 40 		ld 		de,(VarNameStart)			; push start of variable name
   64 00:4803 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:4809 -  -  -  -  		;
   66 00:4809 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:480A 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:480D 73 23 72 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:4813 -  -  -  -  		;
   70 00:4813 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:4814 C9 -  -  -  		ret
   72 00:4815 -  -  -  -  
   73 00:4815 -  -  -  -  ; ***************************************************************************************
   74 00:4815 -  -  -  -  ;
   75 00:4815 -  -  -  -  ;									Changes and Updates
   76 00:4815 -  -  -  -  ;
   77 00:4815 -  -  -  -  ; ***************************************************************************************
   78 00:4815 -  -  -  -  ;
   79 00:4815 -  -  -  -  ;		Date			Notes
   80 00:4815 -  -  -  -  ;		==== 			=====
   81 00:4815 -  -  -  -  ;
   82 00:4815 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4815 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:4815 -  -  -  -  ; ***************************************************************************************
    2 00:4815 -  -  -  -  ; ***************************************************************************************
    3 00:4815 -  -  -  -  ;
    4 00:4815 -  -  -  -  ;		Name : 		find.asm
    5 00:4815 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4815 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4815 -  -  -  -  ;		Reviewed :	No
    8 00:4815 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:4815 -  -  -  -  ;
   10 00:4815 -  -  -  -  ; ***************************************************************************************
   11 00:4815 -  -  -  -  ; ***************************************************************************************
   12 00:4815 -  -  -  -  
   13 00:4815 -  -  -  -  ; ***************************************************************************************
   14 00:4815 -  -  -  -  ;
   15 00:4815 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:4815 -  -  -  -  ; 		variable information at (IX)
   17 00:4815 -  -  -  -  ;
   18 00:4815 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:4815 -  -  -  -  ;		Don't autocreate arrays.
   20 00:4815 -  -  -  -  ;
   21 00:4815 -  -  -  -  ; ***************************************************************************************
   22 00:4815 -  -  -  -  
   23 00:4815 -  -  -  -  FindVariable:
   24 00:4815 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:4818 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:481A D2 6B 43 -  		jp 		nc,SyntaxError 		
   27 00:481D -  -  -  -  
   28 00:481D DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:4820 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:4822 38 16 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:4824 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:4826 28 12 -  -  		jr 		z,_FVNotSimple
   33 00:4828 -  -  -  -  		;
   34 00:4828 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:4828 -  -  -  -  		;
   36 00:4828 2A 40 40 -  		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:482B DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:482E 87 -  -  -  		add 	a,a 						; x4
   39 00:482F 87 -  -  -  		add 	a,a
   40 00:4830 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:4831 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:4832 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:4834 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:4836 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:4838 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:4839 C9 -  -  -  		ret
   47 00:483A -  -  -  -  		;
   48 00:483A -  -  -  -  		;		Not a standard simple variable.
   49 00:483A -  -  -  -  		;
   50 00:483A -  -  -  -  _FVNotSimple:
   51 00:483A CD 96 48 -  		call 	VariableInformation 		; get information about the variable.
   52 00:483D CD CC 48 -  		call 	VariableSearchList 			; search the linked list
   53 00:4840 38 12 -  -  		jr 		c,_FVNotFound  				
   54 00:4842 -  -  -  -  		;
   55 00:4842 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:4842 -  -  -  -  		;
   57 00:4842 -  -  -  -  _FVExitReference:		
   58 00:4842 11 09 00 -  		ld 		de,9 						; point to the actual data.
   59 00:4845 19 -  -  -  		add 	hl,de 
   60 00:4846 -  -  -  -  		;
   61 00:4846 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:4846 -  -  -  -  		;
   63 00:4846 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:4849 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:484B CC 6F 48 -  		call 	z,ArrayLookup 				; array access required.
   66 00:484E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:4850 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:4852 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:4853 C9 -  -  -  		ret
   70 00:4854 -  -  -  -  		;
   71 00:4854 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:4854 -  -  -  -  		;
   73 00:4854 -  -  -  -  _FVNotFound:		
   74 00:4854 3A 7C 40 -  		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:4857 B7 -  -  -  		or 		a
   76 00:4858 28 0F -  -  		jr 		z,_FVFail
   77 00:485A DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:485D FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:485F 28 08 -  -  		jr 		z,_FVFail
   80 00:4861 21 04 00 -  		ld 		hl,4 						; bytes to allocate for data.
   81 00:4864 CD D6 47 -  		call 	VariableCreate 				; create a new variable.
   82 00:4867 18 D9 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:4869 -  -  -  -  
   84 00:4869 -  -  -  -  _FVFail:
   85 00:4869 DD 2A 80 40 		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:486D 37 -  -  -  		scf
   87 00:486E C9 -  -  -  		ret
   88 00:486F -  -  -  -  
   89 00:486F -  -  -  -  ; ***************************************************************************************
   90 00:486F -  -  -  -  ;
   91 00:486F -  -  -  -  ;									 Array lookup
   92 00:486F -  -  -  -  ;
   93 00:486F -  -  -  -  ; ***************************************************************************************
   94 00:486F -  -  -  -  
   95 00:486F -  -  -  -  ArrayLookup:
   96 00:486F E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:4870 CD D5 44 -  		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:4873 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:4874 7C -  -  -  		ld 		a,h
  100 00:4875 B5 -  -  -  		or 		l
  101 00:4876 D9 -  -  -  		exx
  102 00:4877 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:4879 11 00 00 -  		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:487C 54 -  -  -  		ld 		d,h
  105 00:487D 5D -  -  -  		ld 		e,l
  106 00:487E E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:487F E5 -  -  -  		push 	hl
  108 00:4880 7E 23 66 6F 		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:4884 AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:4885 ED 52 -  -  		sbc 	hl,de
  111 00:4887 DA 91 48 -  		jp 		c,_ALBadValue 				; if max < index then error
  112 00:488A EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:488B 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:488C 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:488D 29 -  -  -  		add 	hl,hl
  116 00:488E D1 -  -  -  		pop 	de 							; get array base back
  117 00:488F 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:4890 C9 -  -  -  		ret
  119 00:4891 -  -  -  -  
  120 00:4891 -  -  -  -  _ALBadValue:
  121 00:4891 3E 07 C3 0E 
              43 -  -  -  		ERR_INDEX
  122 00:4896 -  -  -  -  		
  123 00:4896 -  -  -  -  ; ***************************************************************************************
  124 00:4896 -  -  -  -  ;
  125 00:4896 -  -  -  -  ;									Changes and Updates
  126 00:4896 -  -  -  -  ;
  127 00:4896 -  -  -  -  ; ***************************************************************************************
  128 00:4896 -  -  -  -  ;
  129 00:4896 -  -  -  -  ;		Date			Notes
  130 00:4896 -  -  -  -  ;		==== 			=====
  131 00:4896 -  -  -  -  ;
  132 00:4896 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4896 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:4896 -  -  -  -  ; ***************************************************************************************
    2 00:4896 -  -  -  -  ; ***************************************************************************************
    3 00:4896 -  -  -  -  ;
    4 00:4896 -  -  -  -  ;		Name : 		info.asm
    5 00:4896 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4896 -  -  -  -  ;		Date : 		4th June 2022
    7 00:4896 -  -  -  -  ;		Reviewed :	No
    8 00:4896 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:4896 -  -  -  -  ;
   10 00:4896 -  -  -  -  ; ***************************************************************************************
   11 00:4896 -  -  -  -  ; ***************************************************************************************
   12 00:4896 -  -  -  -  
   13 00:4896 -  -  -  -  ; ***************************************************************************************
   14 00:4896 -  -  -  -  ;
   15 00:4896 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:4896 -  -  -  -  ; 		after the identifier.
   17 00:4896 -  -  -  -  ;
   18 00:4896 -  -  -  -  ; ***************************************************************************************
   19 00:4896 -  -  -  -  
   20 00:4896 -  -  -  -  VariableInformation:
   21 00:4896 DD 22 80 40 		ld 		(VarNameStart),ix 			; save start.
   22 00:489A -  -  -  -  		;
   23 00:489A -  -  -  -  		; 		Calculate hash, find end.
   24 00:489A -  -  -  -  		;
   25 00:489A 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:489C -  -  -  -  _VICalculateHash:
   27 00:489C DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:489F FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:48A1 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:48A3 80 -  -  -  		add 	a,b 						; add to hash
   31 00:48A4 07 -  -  -  		rlca
   32 00:48A5 07 -  -  -  		rlca
   33 00:48A6 80 -  -  -  		add 	a,b
   34 00:48A7 47 -  -  -  		ld 		b,a 						; update hash
   35 00:48A8 DD 23 -  -  		inc 	ix 							; next character
   36 00:48AA 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:48AC -  -  -  -  		;
   38 00:48AC -  -  -  -  _VIHashDone:
   39 00:48AC 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:48AD -  -  -  -  		;
   41 00:48AD -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:48AD -  -  -  -  		;
   43 00:48AD 32 84 40 -  		ld 		(VarHash),a
   44 00:48B0 -  -  -  -  		;
   45 00:48B0 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:48B0 -  -  -  -  		;		
   47 00:48B0 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:48B2 21 00 00 -  		ld 		hl,$0000 					; put in HL
   49 00:48B5 6F -  -  -  		ld 		l,a
   50 00:48B6 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:48B7 29 -  -  -  		add 	hl,hl
   52 00:48B8 -  -  -  -  		;
   53 00:48B8 ED 5B 44 40 		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:48BC 19 -  -  -  		add 	hl,de
   55 00:48BD -  -  -  -  		;
   56 00:48BD DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:48C0 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:48C2 20 04 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:48C4 11 40 00 -  		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:48C7 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:48C8 -  -  -  -  _VINotArray:
   62 00:48C8 22 86 40 -  		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:48CB C9 -  -  -  		ret
   64 00:48CC -  -  -  -  
   65 00:48CC -  -  -  -  ; ***************************************************************************************
   66 00:48CC -  -  -  -  ;
   67 00:48CC -  -  -  -  ;									Changes and Updates
   68 00:48CC -  -  -  -  ;
   69 00:48CC -  -  -  -  ; ***************************************************************************************
   70 00:48CC -  -  -  -  ;
   71 00:48CC -  -  -  -  ;		Date			Notes
   72 00:48CC -  -  -  -  ;		==== 			=====
   73 00:48CC -  -  -  -  ;
   74 00:48CC -  -  -  -  ; ***************************************************************************************
   75 00:48CC -  -  -  -  
Listing for file "_build.asm"
   57 00:48CC -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:48CC -  -  -  -  ; ***************************************************************************************
    2 00:48CC -  -  -  -  ; ***************************************************************************************
    3 00:48CC -  -  -  -  ;
    4 00:48CC -  -  -  -  ;		Name : 		search.asm
    5 00:48CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48CC -  -  -  -  ;		Date : 		4th June 2022
    7 00:48CC -  -  -  -  ;		Reviewed :	No
    8 00:48CC -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:48CC -  -  -  -  ;
   10 00:48CC -  -  -  -  ; ***************************************************************************************
   11 00:48CC -  -  -  -  ; ***************************************************************************************
   12 00:48CC -  -  -  -  
   13 00:48CC -  -  -  -  ; ***************************************************************************************
   14 00:48CC -  -  -  -  ;
   15 00:48CC -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:48CC -  -  -  -  ;		CS if failed.
   17 00:48CC -  -  -  -  ;
   18 00:48CC -  -  -  -  ; ***************************************************************************************
   19 00:48CC -  -  -  -  
   20 00:48CC -  -  -  -  VariableSearchList:
   21 00:48CC 2A 86 40 -  		ld 		hl,(VarHashListPtr)			; first link.
   22 00:48CF -  -  -  -  		;
   23 00:48CF -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:48CF -  -  -  -  		;		the address of the hash record
   25 00:48CF -  -  -  -  		;
   26 00:48CF -  -  -  -  _VSLLoop:
   27 00:48CF 7E 23 66 6F 		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:48D3 -  -  -  -  		;
   29 00:48D3 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:48D4 AF -  -  -  		xor 	a
   31 00:48D5 ED 6A -  -  		adc 	hl,hl
   32 00:48D7 E1 -  -  -  		pop 	hl
   33 00:48D8 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:48DA 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:48DB C8 -  -  -  		ret 	z
   36 00:48DC -  -  -  -  _VSLRecord:
   37 00:48DC -  -  -  -  		;
   38 00:48DC -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:48DC -  -  -  -  		;
   40 00:48DC 3A 84 40 -  		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:48DF BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:48E0 23 -  -  -  		inc 	hl 							; points to link back
   43 00:48E1 20 EC -  -  		jr 		nz,_VSLLoop
   44 00:48E3 -  -  -  -  		;
   45 00:48E3 -  -  -  -  		;		Now check the name
   46 00:48E3 -  -  -  -  		;
   47 00:48E3 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:48E4 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:48E5 23 -  -  -  		inc 	hl
   50 00:48E6 23 -  -  -  		inc 	hl
   51 00:48E7 23 -  -  -  		inc 	hl
   52 00:48E8 7E 23 66 6F 		ld_ind_hl 							; HL now points to the record in program space.
   53 00:48EC ED 5B 80 40 		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:48F0 -  -  -  -  		;
   55 00:48F0 -  -  -  -  		;		Check individual characters
   56 00:48F0 -  -  -  -  		;
   57 00:48F0 -  -  -  -  _VSLCharacter:
   58 00:48F0 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:48F1 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:48F3 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:48F5 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:48F6 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:48F7 13 -  -  -  		inc 	de
   64 00:48F8 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:48FA -  -  -  -  		;
   66 00:48FA -  -  -  -  _VSLFailed:
   67 00:48FA E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:48FB 18 D2 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:48FD -  -  -  -  		;
   70 00:48FD -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:48FD -  -  -  -  		;		
   72 00:48FD -  -  -  -  _VSLEndIdentifier:
   73 00:48FD 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:48FE FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:4900 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:4902 -  -  -  -  		;
   77 00:4902 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:4903 2B -  -  -  		dec 	hl 							; now start of record
   79 00:4904 AF -  -  -  		xor 	a 							; clear carry
   80 00:4905 C9 -  -  -  		ret
   81 00:4906 -  -  -  -  
   82 00:4906 -  -  -  -  ; ***************************************************************************************
   83 00:4906 -  -  -  -  ;
   84 00:4906 -  -  -  -  ;									Changes and Updates
   85 00:4906 -  -  -  -  ;
   86 00:4906 -  -  -  -  ; ***************************************************************************************
   87 00:4906 -  -  -  -  ;
   88 00:4906 -  -  -  -  ;		Date			Notes
   89 00:4906 -  -  -  -  ;		==== 			=====
   90 00:4906 -  -  -  -  ;
   91 00:4906 -  -  -  -  ; ***************************************************************************************
   92 00:4906 -  -  -  -  		
Listing for file "_build.asm"
   58 00:4906 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4906 -  -  -  -  ;
    2 00:4906 -  -  -  -  ;	This file is automatically generated.
    3 00:4906 -  -  -  -  ;
    4 00:4906 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 00:4920 -  -  -  -  PrecedenceTable:
    6 00:4920 06 -  -  -  	.db	6	; $0083 !
    7 00:4921 06 -  -  -  	.db	6	; $0084 ?
    8 00:4922 05 -  -  -  	.db	5	; $0085 *
    9 00:4923 05 -  -  -  	.db	5	; $0086 /
   10 00:4924 05 -  -  -  	.db	5	; $0087 mod
   11 00:4925 05 -  -  -  	.db	5	; $0088 div
   12 00:4926 04 -  -  -  	.db	4	; $0089 +
   13 00:4927 04 -  -  -  	.db	4	; $008a -
   14 00:4928 03 -  -  -  	.db	3	; $008b >=
   15 00:4929 03 -  -  -  	.db	3	; $008c <=
   16 00:492A 03 -  -  -  	.db	3	; $008d >
   17 00:492B 03 -  -  -  	.db	3	; $008e <
   18 00:492C 03 -  -  -  	.db	3	; $008f =
   19 00:492D 03 -  -  -  	.db	3	; $0090 <>
   20 00:492E 02 -  -  -  	.db	2	; $0091 and
   21 00:492F 01 -  -  -  	.db	1	; $0092 or
   22 00:4930 01 -  -  -  	.db	1	; $0093 eor
   23 00:4931 -  -  -  -  
Listing for file "_build.asm"
   59 00:4931 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4931 -  -  -  -  ;
    2 00:4931 -  -  -  -  ;	This is automatically generated.
    3 00:4931 -  -  -  -  ;
    4 00:4931 -  -  -  -  ErrorIDTable:
    5 00:4931 79 49 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4935 7F 49 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4939 90 49 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:493D 9E 49 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4941 A8 49 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:4945 B2 49 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:4949 CC 49 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:494D DD 49 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 00:4951 ED 49 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   14 00:4955 FB 49 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   15 00:4959 09 4A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   16 00:495D 13 4A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   17 00:4961 28 4A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   18 00:4965 3E 4A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   19 00:4969 4C 4A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   20 00:496D 51 4A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   21 00:4971 5E 4A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   22 00:4975 6F 4A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   23 00:4979 -  -  -  -  
   24 00:4979 -  -  -  -  ErrText_warmstart:
   25 00:4979 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   26 00:497F -  -  -  -  ErrText_assert:
   27 00:497F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   28 00:4990 -  -  -  -  ErrText_badtype:
   29 00:4990 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   30 00:499E -  -  -  -  ErrText_badvalue:
   31 00:499E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   32 00:49A8 -  -  -  -  ErrText_dim:
   33 00:49A8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   34 00:49B2 -  -  -  -  ErrText_disabled:
   35 00:49B2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   36 00:49CC -  -  -  -  ErrText_divzero:
   37 00:49CC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   38 00:49DD -  -  -  -  ErrText_index:
   39 00:49DD 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   40 00:49ED -  -  -  -  ErrText_memory:
   41 00:49ED 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   42 00:49FB -  -  -  -  ErrText_nocomma:
   43 00:49FB 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   44 00:4A09 -  -  -  -  ErrText_nodollar:
   45 00:4A09 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   46 00:4A13 -  -  -  -  ErrText_nolbracket:
   47 00:4A13 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   48 00:4A28 -  -  -  -  ErrText_norbracket:
   49 00:4A28 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   50 00:4A3E -  -  -  -  ErrText_notref:
   51 00:4A3E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   52 00:4A4C -  -  -  -  ErrText_stop:
   53 00:4A4C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   54 00:4A51 -  -  -  -  ErrText_syntax:
   55 00:4A51 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   56 00:4A5E -  -  -  -  ErrText_todo:
   57 00:4A5E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   58 00:4A6F -  -  -  -  ErrText_unknownvar:
   59 00:4A6F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   60 00:4A80 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4A80 -  -  -  -  ;
    2 00:4A80 -  -  -  -  ;	Vectors for set 0
    3 00:4A80 -  -  -  -  ;
    4 00:4A80 -  -  -  -  VectorsSet0:
    5 00:4A80 94 41 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4A82 22 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:4A84 22 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:4A86 C8 43 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:4A88 D0 43 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:4A8A 86 43 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:4A8C 91 43 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:4A8E 9C 43 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:4A90 91 43 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:4A92 70 43 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:4A94 7B 43 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:4A96 23 44 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:4A98 1A 44 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:4A9A 08 44 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:4A9C FF 43 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:4A9E F6 43 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:4AA0 11 44 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:4AA2 A7 43 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:4AA4 B2 43 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:4AA6 BD 43 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:4AA8 F7 46 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:4AAA F1 46 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:4AAC 38 46 -  -  	addr(Unary_MkStr)                ; $0096 $
   28 00:4AAE 5E 46 -  -  	addr(Unary_Random)               ; $0097 rnd
   29 00:4AB0 29 46 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:4AB2 06 46 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:4AB4 DC 46 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:4AB6 04 47 -  -  	addr(Unary_Str)                  ; $009b str
   33 00:4AB8 18 46 -  -  	addr(Unary_Chr)                  ; $009c chr
   34 00:4ABA 11 46 -  -  	addr(Unary_Asc)                  ; $009d asc
   35 00:4ABC 41 46 -  -  	addr(Unary_Not)                  ; $009e not
   36 00:4ABE 53 46 -  -  	addr(Unary_Page)                 ; $009f page
   37 00:4AC0 27 47 -  -  	addr(Unary_Time)                 ; $00a0 time
   38 00:4AC2 2D 47 -  -  	addr(Unary_Top)                  ; $00a1 top
   39 00:4AC4 38 47 -  -  	addr(Unary_Val)                  ; $00a2 val
   40 00:4AC6 E8 43 -  -  	addr(UnaryInt32True)             ; $00a3 true
   41 00:4AC8 EC 43 -  -  	addr(UnaryInt32False)            ; $00a4 false
   42 00:4ACA EB 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:4ACC EB 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:4ACE EE 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4AD0 EB 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4AD2 4C 42 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4AD4 22 40 -  -  	addr(Unimplemented)              ; $00aa [
   48 00:4AD6 22 40 -  -  	addr(Unimplemented)              ; $00ab ]
   49 00:4AD8 EB 40 -  -  	addr(BadCmd_Comma)               ; $00ac ~
   50 00:4ADA 22 40 -  -  	addr(Unimplemented)              ; $00ad repeat
   51 00:4ADC 22 40 -  -  	addr(Unimplemented)              ; $00ae until
   52 00:4ADE 22 40 -  -  	addr(Unimplemented)              ; $00af if
   53 00:4AE0 EB 40 -  -  	addr(BadCmd_Then)                ; $00b0 then
   54 00:4AE2 22 40 -  -  	addr(Unimplemented)              ; $00b1 else
   55 00:4AE4 22 40 -  -  	addr(Unimplemented)              ; $00b2 for
   56 00:4AE6 EB 40 -  -  	addr(BadCmd_To)                  ; $00b3 to
   57 00:4AE8 22 40 -  -  	addr(Unimplemented)              ; $00b4 step
   58 00:4AEA 22 40 -  -  	addr(Unimplemented)              ; $00b5 next
   59 00:4AEC 22 40 -  -  	addr(Unimplemented)              ; $00b6 def
   60 00:4AEE 22 40 -  -  	addr(Unimplemented)              ; $00b7 proc
   61 00:4AF0 22 40 -  -  	addr(Unimplemented)              ; $00b8 endproc
   62 00:4AF2 22 40 -  -  	addr(Unimplemented)              ; $00b9 gosub
   63 00:4AF4 22 40 -  -  	addr(Unimplemented)              ; $00ba return
   64 00:4AF6 22 40 -  -  	addr(Unimplemented)              ; $00bb goto
   65 00:4AF8 22 40 -  -  	addr(Unimplemented)              ; $00bc local
   66 00:4AFA EF 40 -  -  	addr(Command_DIM)                ; $00bd dim
   67 00:4AFC 4C 42 -  -  	addr(Command_REM)                ; $00be rem
   68 00:4AFE A7 41 -  -  	addr(Command_LET)                ; $00bf let
   69 00:4B00 22 40 -  -  	addr(Unimplemented)              ; $00c0 vdu
   70 00:4B02 EC 41 -  -  	addr(Command_PRINT)              ; $00c1 print
   71 00:4B04 22 40 -  -  	addr(Unimplemented)              ; $00c2 load
   72 00:4B06 22 40 -  -  	addr(Unimplemented)              ; $00c3 save
   73 00:4B08 22 40 -  -  	addr(Unimplemented)              ; $00c4 list
   74 00:4B0A B5 47 -  -  	addr(Command_NEW)                ; $00c5 new
   75 00:4B0C 67 42 -  -  	addr(Command_RUN)                ; $00c6 run
   76 00:4B0E 22 40 -  -  	addr(Unimplemented)              ; $00c7 read
   77 00:4B10 22 40 -  -  	addr(Unimplemented)              ; $00c8 data
   78 00:4B12 22 40 -  -  	addr(Unimplemented)              ; $00c9 restore
   79 00:4B14 DC 40 -  -  	addr(Command_ASSERT)             ; $00ca assert
   80 00:4B16 67 47 -  -  	addr(Command_CLEAR)              ; $00cb clear
   81 00:4B18 8F 41 -  -  	addr(Command_END)                ; $00cc end
   82 00:4B1A CA 42 -  -  	addr(Command_STOP)               ; $00cd stop
   83 00:4B1C -  -  -  -  ;
   84 00:4B1C -  -  -  -  ;	Vectors for set 1
   85 00:4B1C -  -  -  -  ;
   86 00:4B1C -  -  -  -  VectorsSet1:
   87 00:4B1C -  -  -  -  ;
   88 00:4B1C -  -  -  -  ;	Vectors for set 2
   89 00:4B1C -  -  -  -  ;
   90 00:4B1C -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   61 00:4B1C -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4B1C -  -  -  -  ; ***************************************************************************************
    2 00:4B1C -  -  -  -  ; ***************************************************************************************
    3 00:4B1C -  -  -  -  ;
    4 00:4B1C -  -  -  -  ;		Name : 		idivide.asm
    5 00:4B1C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4B1C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4B1C -  -  -  -  ;		Reviewed :	No
    8 00:4B1C -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4B1C -  -  -  -  ;
   10 00:4B1C -  -  -  -  ; ***************************************************************************************
   11 00:4B1C -  -  -  -  ; ***************************************************************************************
   12 00:4B1C -  -  -  -  
   13 00:4B1C -  -  -  -  ; ***************************************************************************************
   14 00:4B1C -  -  -  -  ;
   15 00:4B1C -  -  -  -  ;								Unsigned integer divide
   16 00:4B1C -  -  -  -  ;
   17 00:4B1C -  -  -  -  ; ***************************************************************************************
   18 00:4B1C -  -  -  -  
   19 00:4B1C -  -  -  -  Int32UDivide:
   20 00:4B1C 37 -  -  -  		scf
   21 00:4B1D C3 5B 4B -  		jp 		_I32UnsignedDivide		
   22 00:4B20 -  -  -  -  
   23 00:4B20 -  -  -  -  ; ***************************************************************************************
   24 00:4B20 -  -  -  -  ;
   25 00:4B20 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4B20 -  -  -  -  ;
   27 00:4B20 -  -  -  -  ; ***************************************************************************************
   28 00:4B20 -  -  -  -  
   29 00:4B20 -  -  -  -  Int32SDivide:
   30 00:4B20 37 -  -  -  		scf
   31 00:4B21 18 01 -  -  		jr 		_I32SDivide
   32 00:4B23 -  -  -  -  Int32Modulus:
   33 00:4B23 AF -  -  -  		xor 	a
   34 00:4B24 -  -  -  -  _I32SDivide:
   35 00:4B24 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4B25 F5 -  -  -  		push 	af
   37 00:4B26 08 -  -  -  		ex 		af,af'
   38 00:4B27 -  -  -  -  
   39 00:4B27 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:4B28 D9 -  -  -  		exx
   41 00:4B29 D5 -  -  -  		push 	de
   42 00:4B2A D9 -  -  -  		exx
   43 00:4B2B -  -  -  -  
   44 00:4B2B F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4B2C AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4B2D CD 49 4B -  		call 	_I32CheckHLSignSwap
   47 00:4B30 CD 49 4B -  		call 	_I32CheckHLSignSwap
   48 00:4B33 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4B34 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4B35 F5 -  -  -  		push 	af
   51 00:4B36 CD 5B 4B -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:4B39 F1 -  -  -  		pop 	af 							; get function back
   53 00:4B3A 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4B3C 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4B3D CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4B3F C4 A5 4C -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4B42 -  -  -  -  _I32SDExit:
   58 00:4B42 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4B43 D1 -  -  -  		pop 	de
   60 00:4B44 D9 -  -  -  		exx
   61 00:4B45 D1 -  -  -  		pop 	de
   62 00:4B46 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:4B47 08 -  -  -  		ex 		af,af'
   64 00:4B48 C9 -  -  -  		ret
   65 00:4B49 -  -  -  -  
   66 00:4B49 -  -  -  -  
   67 00:4B49 -  -  -  -  _I32CheckHLSignSwap:
   68 00:4B49 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:4B4A CB 7C -  -  		bit 	7,h
   70 00:4B4C D9 -  -  -  		exx
   71 00:4B4D 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4B4F -  -  -  -  		;
   73 00:4B4F C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4B51 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4B52 CD A5 4C -  		call 	Int32Negate 				
   76 00:4B55 F1 -  -  -  		pop 	af
   77 00:4B56 -  -  -  -  _I32CHSPositive:
   78 00:4B56 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:4B57 EB -  -  -  		ex 		de,hl
   80 00:4B58 D9 -  -  -  		exx		
   81 00:4B59 EB -  -  -  		ex 		de,hl
   82 00:4B5A C9 -  -  -  		ret
   83 00:4B5B -  -  -  -  
   84 00:4B5B -  -  -  -  ; ***************************************************************************************
   85 00:4B5B -  -  -  -  ;
   86 00:4B5B -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:4B5B -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:4B5B -  -  -  -  ;
   89 00:4B5B -  -  -  -  ; ***************************************************************************************
   90 00:4B5B -  -  -  -  
   91 00:4B5B -  -  -  -  _I32UnsignedDivide:
   92 00:4B5B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4B5C D5 -  -  -  		push 	de
   94 00:4B5D D9 -  -  -  		exx
   95 00:4B5E C5 -  -  -  		push 	bc
   96 00:4B5F D5 -  -  -  		push 	de 							
   97 00:4B60 D9 -  -  -  		exx
   98 00:4B61 -  -  -  -  
   99 00:4B61 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4B62 -  -  -  -  
  101 00:4B62 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4B63 B3 -  -  -  		or 		e
  103 00:4B64 D9 -  -  -  		exx
  104 00:4B65 B2 -  -  -  		or 		d
  105 00:4B66 B3 -  -  -  		or 		e
  106 00:4B67 D9 -  -  -  		exx
  107 00:4B68 CA 27 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4B6B -  -  -  -  
  109 00:4B6B -  -  -  -  
  110 00:4B6B 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4B6C 4D -  -  -  		ld		c,l
  112 00:4B6D 21 00 00 -  		ld 		hl,$0000
  113 00:4B70 D9 -  -  -  		exx
  114 00:4B71 44 -  -  -  		ld 		b,h
  115 00:4B72 4D -  -  -  		ld		c,l
  116 00:4B73 21 00 00 -  		ld 		hl,$0000
  117 00:4B76 D9 -  -  -  		exx
  118 00:4B77 -  -  -  -  
  119 00:4B77 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4B79 -  -  -  -  _I32DivideLoop:
  121 00:4B79 F5 -  -  -  		push 	af
  122 00:4B7A -  -  -  -  
  123 00:4B7A CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4B7C CB 10 -  -  		rl 		b
  125 00:4B7E D9 -  -  -  		exx
  126 00:4B7F CB 11 -  -  		rl 		c
  127 00:4B81 CB 10 -  -  		rl 		b
  128 00:4B83 D9 -  -  -  		exx
  129 00:4B84 CB 15 -  -  		rl 		l
  130 00:4B86 CB 14 -  -  		rl 		h
  131 00:4B88 D9 -  -  -  		exx
  132 00:4B89 CB 15 -  -  		rl 		l
  133 00:4B8B CB 14 -  -  		rl 		h
  134 00:4B8D D9 -  -  -  		exx
  135 00:4B8E -  -  -  -  
  136 00:4B8E CD 4B 4C -  		call 	Int32Subtract 				; A = A - M
  137 00:4B91 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:4B93 -  -  -  -  
  139 00:4B93 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4B94 18 03 -  -  		jr 		_I32Next
  141 00:4B96 -  -  -  -  
  142 00:4B96 -  -  -  -  _I32Borrow:
  143 00:4B96 CD 45 4C -  		call 	Int32Add 					; A = A + M
  144 00:4B99 -  -  -  -  _I32Next:
  145 00:4B99 F1 -  -  -  		pop 	af
  146 00:4B9A 3D -  -  -  		dec 	a
  147 00:4B9B 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4B9D -  -  -  -  
  149 00:4B9D F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:4B9E -  -  -  -  
  151 00:4B9E 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:4B9F 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:4BA1 -  -  -  -  
  154 00:4BA1 60 -  -  -  		ld  	h,b
  155 00:4BA2 69 -  -  -  		ld 		l,c
  156 00:4BA3 D9 -  -  -  		exx
  157 00:4BA4 60 -  -  -  		ld  	h,b
  158 00:4BA5 69 -  -  -  		ld 		l,c
  159 00:4BA6 D9 -  -  -  		exx
  160 00:4BA7 -  -  -  -  _I32Modulus1:		
  161 00:4BA7 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4BA8 D1 -  -  -  		pop 	de
  163 00:4BA9 C1 -  -  -  		pop 	bc
  164 00:4BAA D9 -  -  -  		exx
  165 00:4BAB D1 -  -  -  		pop 	de
  166 00:4BAC C1 -  -  -  		pop 	bc
  167 00:4BAD C9 -  -  -  		ret
  168 00:4BAE -  -  -  -  
  169 00:4BAE -  -  -  -  ; ***************************************************************************************
  170 00:4BAE -  -  -  -  ;
  171 00:4BAE -  -  -  -  ;									Changes and Updates
  172 00:4BAE -  -  -  -  ;
  173 00:4BAE -  -  -  -  ; ***************************************************************************************
  174 00:4BAE -  -  -  -  ;
  175 00:4BAE -  -  -  -  ;		Date			Notes
  176 00:4BAE -  -  -  -  ;		==== 			=====
  177 00:4BAE -  -  -  -  ;
  178 00:4BAE -  -  -  -  ; ***************************************************************************************
  179 00:4BAE -  -  -  -  		
Listing for file "_build.asm"
   62 00:4BAE -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:4BAE -  -  -  -  ; ***************************************************************************************
    2 00:4BAE -  -  -  -  ; ***************************************************************************************
    3 00:4BAE -  -  -  -  ;
    4 00:4BAE -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:4BAE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4BAE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4BAE -  -  -  -  ;		Reviewed :	No
    8 00:4BAE -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:4BAE -  -  -  -  ;
   10 00:4BAE -  -  -  -  ; ***************************************************************************************
   11 00:4BAE -  -  -  -  ; ***************************************************************************************
   12 00:4BAE -  -  -  -  
   13 00:4BAE -  -  -  -  ; ***************************************************************************************
   14 00:4BAE -  -  -  -  ;
   15 00:4BAE -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:4BAE -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:4BAE -  -  -  -  ;
   18 00:4BAE -  -  -  -  ; ***************************************************************************************
   19 00:4BAE -  -  -  -  
   20 00:4BAE -  -  -  -  Int32FromString:
   21 00:4BAE C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:4BAF D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:4BB0 D5 -  -  -  		push 	de
   24 00:4BB1 D9 -  -  -  		exx
   25 00:4BB2 D5 -  -  -  		push 	de
   26 00:4BB3 -  -  -  -  
   27 00:4BB3 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4BB6 11 00 00 -  		ld 		de,$0000
   29 00:4BB9 D9 -  -  -  		exx
   30 00:4BBA 21 00 00 -  		ld 		hl,$0000
   31 00:4BBD 11 00 00 -  		ld 		de,$0000
   32 00:4BC0 D9 -  -  -  		exx
   33 00:4BC1 -  -  -  -  
   34 00:4BC1 5F -  -  -  		ld 		e,a 						; base in E
   35 00:4BC2 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4BC4 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4BC6 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4BC8 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4BC9 -  -  -  -  		;
   40 00:4BC9 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4BCA F5 -  -  -  		push 	af
   42 00:4BCB FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4BCD 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:4BCE 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:4BD0 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:4BD1 18 01 -  -  		jr 		_I32FSMain
   47 00:4BD3 -  -  -  -  _I32FSNotSigned:		
   48 00:4BD3 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4BD4 -  -  -  -  		;
   50 00:4BD4 -  -  -  -  		; 		Main conversion loop.
   51 00:4BD4 -  -  -  -  		; 		
   52 00:4BD4 -  -  -  -  _I32FSMain:		
   53 00:4BD4 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4BD5 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4BD7 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4BD9 D6 20 -  -  		sub 	32
   57 00:4BDB -  -  -  -  _I32FSNotLower:
   58 00:4BDB FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4BDD 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4BDF FE 3A -  -  		cp 		'9'+1
   61 00:4BE1 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4BE3 FE 41 -  -  		cp 		'A'
   63 00:4BE5 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4BE7 FE 47 -  -  		cp 		'F'+1
   65 00:4BE9 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4BEB D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4BED -  -  -  -  _I32FSOkay:
   68 00:4BED D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4BEF BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4BF0 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4BF2 03 -  -  -  		inc 	bc 							; consume character
   72 00:4BF3 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4BF4 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4BF5 CD 0F 4C -  		call 	Int32Multiply 				; result *= base
   75 00:4BF8 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4BF9 5F -  -  -  		ld 		e,a
   77 00:4BFA CD 45 4C -  		call 	Int32Add 					; and add it.
   78 00:4BFD D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4BFE 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4C00 -  -  -  -  
   81 00:4C00 -  -  -  -  _I32FSExit:
   82 00:4C00 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4C01 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4C03 CC A5 4C -  		call 	z,Int32Negate
   85 00:4C06 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:4C07 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:4C08 D9 -  -  -  		exx
   88 00:4C09 D1 -  -  -  		pop 	de
   89 00:4C0A D9 -  -  -  		exx
   90 00:4C0B C1 -  -  -  		pop 	bc
   91 00:4C0C FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4C0E C9 -  -  -  		ret				
   93 00:4C0F -  -  -  -  
   94 00:4C0F -  -  -  -  ; ***************************************************************************************
   95 00:4C0F -  -  -  -  ;
   96 00:4C0F -  -  -  -  ;									Changes and Updates
   97 00:4C0F -  -  -  -  ;
   98 00:4C0F -  -  -  -  ; ***************************************************************************************
   99 00:4C0F -  -  -  -  ;
  100 00:4C0F -  -  -  -  ;		Date			Notes
  101 00:4C0F -  -  -  -  ;		==== 			=====
  102 00:4C0F -  -  -  -  ;
  103 00:4C0F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:4C0F -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4C0F -  -  -  -  ; ***************************************************************************************
    2 00:4C0F -  -  -  -  ; ***************************************************************************************
    3 00:4C0F -  -  -  -  ;
    4 00:4C0F -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4C0F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C0F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C0F -  -  -  -  ;		Reviewed :	No
    8 00:4C0F -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4C0F -  -  -  -  ;
   10 00:4C0F -  -  -  -  ; ***************************************************************************************
   11 00:4C0F -  -  -  -  ; ***************************************************************************************
   12 00:4C0F -  -  -  -  
   13 00:4C0F -  -  -  -  Int32Multiply:
   14 00:4C0F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4C10 D5 -  -  -  		push 	de
   16 00:4C11 44 -  -  -  		ld 		b,h
   17 00:4C12 4D -  -  -  		ld 		c,l
   18 00:4C13 21 00 00 -  		ld 		hl,$0000
   19 00:4C16 -  -  -  -  
   20 00:4C16 D9 -  -  -  		exx
   21 00:4C17 C5 -  -  -  		push 	bc
   22 00:4C18 D5 -  -  -  		push 	de
   23 00:4C19 44 -  -  -  		ld 		b,h
   24 00:4C1A 4D -  -  -  		ld 		c,l
   25 00:4C1B 21 00 00 -  		ld 		hl,$0000		
   26 00:4C1E D9 -  -  -  		exx
   27 00:4C1F -  -  -  -  
   28 00:4C1F -  -  -  -  _I32MultiplyLoop:
   29 00:4C1F CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4C21 C4 45 4C -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4C24 -  -  -  -  		;
   32 00:4C24 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4C25 CB 38 -  -  		srl 	b
   34 00:4C27 CB 19 -  -  		rr 		c
   35 00:4C29 D9 -  -  -  		exx
   36 00:4C2A CB 18 -  -  		rr 		b
   37 00:4C2C CB 19 -  -  		rr 		c
   38 00:4C2E -  -  -  -  		;
   39 00:4C2E CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4C30 CB 12 -  -  		rl 		d
   41 00:4C32 D9 -  -  -  		exx
   42 00:4C33 CB 13 -  -  		rl 		e
   43 00:4C35 CB 12 -  -  		rl 		d
   44 00:4C37 -  -  -  -  
   45 00:4C37 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:4C38 B1 -  -  -  		or 		c
   47 00:4C39 D9 -  -  -  		exx
   48 00:4C3A B0 -  -  -  		or 		b
   49 00:4C3B B1 -  -  -  		or 		c
   50 00:4C3C 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4C3E -  -  -  -  
   52 00:4C3E D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4C3F D1 -  -  -  		pop 	de
   54 00:4C40 C1 -  -  -  		pop 	bc
   55 00:4C41 D9 -  -  -  		exx
   56 00:4C42 D1 -  -  -  		pop 	de
   57 00:4C43 C1 -  -  -  		pop 	bc
   58 00:4C44 C9 -  -  -  		ret
   59 00:4C45 -  -  -  -  
   60 00:4C45 -  -  -  -  ; ***************************************************************************************
   61 00:4C45 -  -  -  -  ;
   62 00:4C45 -  -  -  -  ;									Changes and Updates
   63 00:4C45 -  -  -  -  ;
   64 00:4C45 -  -  -  -  ; ***************************************************************************************
   65 00:4C45 -  -  -  -  ;
   66 00:4C45 -  -  -  -  ;		Date			Notes
   67 00:4C45 -  -  -  -  ;		==== 			=====
   68 00:4C45 -  -  -  -  ;
   69 00:4C45 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:4C45 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4C45 -  -  -  -  ; ***************************************************************************************
    2 00:4C45 -  -  -  -  ; ***************************************************************************************
    3 00:4C45 -  -  -  -  ;
    4 00:4C45 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4C45 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4C45 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4C45 -  -  -  -  ;		Reviewed :	No
    8 00:4C45 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4C45 -  -  -  -  ;
   10 00:4C45 -  -  -  -  ; ***************************************************************************************
   11 00:4C45 -  -  -  -  ; ***************************************************************************************
   12 00:4C45 -  -  -  -  
   13 00:4C45 -  -  -  -  ; ***************************************************************************************
   14 00:4C45 -  -  -  -  ;
   15 00:4C45 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4C45 -  -  -  -  ;
   17 00:4C45 -  -  -  -  ; ***************************************************************************************
   18 00:4C45 -  -  -  -  
   19 00:4C45 -  -  -  -  Int32Add:
   20 00:4C45 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:4C46 D9 -  -  -  		exx
   22 00:4C47 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:4C49 D9 -  -  -  		exx
   24 00:4C4A C9 -  -  -  		ret
   25 00:4C4B -  -  -  -  
   26 00:4C4B -  -  -  -  ; ***************************************************************************************
   27 00:4C4B -  -  -  -  ;
   28 00:4C4B -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:4C4B -  -  -  -  ;
   30 00:4C4B -  -  -  -  ; ***************************************************************************************
   31 00:4C4B -  -  -  -  
   32 00:4C4B -  -  -  -  Int32Subtract:
   33 00:4C4B AF -  -  -  		xor 	a 							; clear carry
   34 00:4C4C ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4C4E D9 -  -  -  		exx
   36 00:4C4F ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4C51 D9 -  -  -  		exx
   38 00:4C52 C9 -  -  -  		ret
   39 00:4C53 -  -  -  -  
   40 00:4C53 -  -  -  -  ; ***************************************************************************************
   41 00:4C53 -  -  -  -  ;
   42 00:4C53 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4C53 -  -  -  -  ;
   44 00:4C53 -  -  -  -  ; ***************************************************************************************
   45 00:4C53 -  -  -  -  
   46 00:4C53 -  -  -  -  Int32And:
   47 00:4C53 D9 -  -  -  		exx
   48 00:4C54 CD 58 4C -  		call 	_I32AndHLDE
   49 00:4C57 D9 -  -  -  		exx
   50 00:4C58 -  -  -  -  _I32AndHLDE:		
   51 00:4C58 7C -  -  -  		ld 		a,h
   52 00:4C59 A2 -  -  -  		and 	d
   53 00:4C5A 67 -  -  -  		ld 		h,a
   54 00:4C5B 7D -  -  -  		ld 		a,l
   55 00:4C5C A3 -  -  -  		and 	e
   56 00:4C5D 6F -  -  -  		ld 		l,a
   57 00:4C5E C9 -  -  -  		ret
   58 00:4C5F -  -  -  -  
   59 00:4C5F -  -  -  -  ; ***************************************************************************************
   60 00:4C5F -  -  -  -  ;
   61 00:4C5F -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4C5F -  -  -  -  ;
   63 00:4C5F -  -  -  -  ; ***************************************************************************************
   64 00:4C5F -  -  -  -  
   65 00:4C5F -  -  -  -  Int32Or:
   66 00:4C5F D9 -  -  -  		exx
   67 00:4C60 CD 64 4C -  		call 	_I32OrHLDE
   68 00:4C63 D9 -  -  -  		exx
   69 00:4C64 -  -  -  -  _I32OrHLDE:		
   70 00:4C64 7C -  -  -  		ld 		a,h
   71 00:4C65 B2 -  -  -  		or 		d
   72 00:4C66 67 -  -  -  		ld 		h,a
   73 00:4C67 7D -  -  -  		ld 		a,l
   74 00:4C68 B3 -  -  -  		or 		e
   75 00:4C69 6F -  -  -  		ld 		l,a
   76 00:4C6A C9 -  -  -  		ret
   77 00:4C6B -  -  -  -  
   78 00:4C6B -  -  -  -  ; ***************************************************************************************
   79 00:4C6B -  -  -  -  ;
   80 00:4C6B -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4C6B -  -  -  -  ;
   82 00:4C6B -  -  -  -  ; ***************************************************************************************
   83 00:4C6B -  -  -  -  
   84 00:4C6B -  -  -  -  Int32Xor:
   85 00:4C6B D9 -  -  -  		exx
   86 00:4C6C CD 70 4C -  		call 	_I32XorHLDE
   87 00:4C6F D9 -  -  -  		exx
   88 00:4C70 -  -  -  -  _I32XorHLDE:		
   89 00:4C70 7C -  -  -  		ld 		a,h
   90 00:4C71 AA -  -  -  		xor 	d
   91 00:4C72 67 -  -  -  		ld 		h,a
   92 00:4C73 7D -  -  -  		ld 		a,l
   93 00:4C74 AB -  -  -  		xor 	e
   94 00:4C75 6F -  -  -  		ld 		l,a
   95 00:4C76 C9 -  -  -  		ret
   96 00:4C77 -  -  -  -  
   97 00:4C77 -  -  -  -  ; ***************************************************************************************
   98 00:4C77 -  -  -  -  ;
   99 00:4C77 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4C77 -  -  -  -  ;
  101 00:4C77 -  -  -  -  ; ***************************************************************************************
  102 00:4C77 -  -  -  -  
  103 00:4C77 -  -  -  -  Int32Zero:
  104 00:4C77 D9 -  -  -  		exx
  105 00:4C78 7D -  -  -  		ld 		a,l
  106 00:4C79 B4 -  -  -  		or 		h
  107 00:4C7A D9 -  -  -  		exx
  108 00:4C7B B5 -  -  -  		or 		l
  109 00:4C7C B4 -  -  -  		or 		h
  110 00:4C7D C9 -  -  -  		ret
  111 00:4C7E -  -  -  -  
  112 00:4C7E -  -  -  -  ; ***************************************************************************************
  113 00:4C7E -  -  -  -  ;
  114 00:4C7E -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4C7E -  -  -  -  ;
  116 00:4C7E -  -  -  -  ; ***************************************************************************************
  117 00:4C7E -  -  -  -  
  118 00:4C7E -  -  -  -  Int32Compare:
  119 00:4C7E E5 -  -  -  		push 	hl 							; save HL
  120 00:4C7F AF -  -  -  		xor 	a 							; clear carry
  121 00:4C80 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:4C82 D9 -  -  -  		exx
  123 00:4C83 E5 -  -  -  		push 	hl 							; save HL'
  124 00:4C84 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4C86 -  -  -  -  		;
  126 00:4C86 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4C87 E2 8E 4C -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4C8A 78 -  -  -  		ld 		a,b
  129 00:4C8B EE 80 -  -  		xor 	$80
  130 00:4C8D 47 -  -  -  		ld 		b,a
  131 00:4C8E -  -  -  -  _I32CNoOverflow:
  132 00:4C8E 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:4C8F B5 -  -  -  		or 		l
  134 00:4C90 D9 -  -  -  		exx 
  135 00:4C91 B4 -  -  -  		or 		h
  136 00:4C92 B5 -  -  -  		or 		l
  137 00:4C93 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4C95 -  -  -  -  		;
  139 00:4C95 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4C96 CB 78 -  -  		bit 	7,b
  141 00:4C98 D9 -  -  -  		exx
  142 00:4C99 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4C9B 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4C9D 3E FF -  -  		ld 		a,$FF
  145 00:4C9F -  -  -  -  _I32NotPos:
  146 00:4C9F D9 -  -  -  		exx
  147 00:4CA0 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:4CA1 D9 -  -  -  		exx
  149 00:4CA2 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:4CA3 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:4CA4 C9 -  -  -  		ret
  152 00:4CA5 -  -  -  -  
  153 00:4CA5 -  -  -  -  ; ***************************************************************************************
  154 00:4CA5 -  -  -  -  ;
  155 00:4CA5 -  -  -  -  ;										Negate HL'HL
  156 00:4CA5 -  -  -  -  ;
  157 00:4CA5 -  -  -  -  ; ***************************************************************************************
  158 00:4CA5 -  -  -  -  
  159 00:4CA5 -  -  -  -  Int32Negate:
  160 00:4CA5 AF -  -  -  		xor 	a
  161 00:4CA6 CD AF 4C -  		call 	_I32NSubtract
  162 00:4CA9 D9 -  -  -  		exx
  163 00:4CAA CD AF 4C -  		call 	_I32NSubtract
  164 00:4CAD D9 -  -  -  		exx
  165 00:4CAE C9 -  -  -  		ret
  166 00:4CAF -  -  -  -  _I32NSubtract:
  167 00:4CAF D5 -  -  -  		push 	de
  168 00:4CB0 EB -  -  -  		ex 		de,hl
  169 00:4CB1 21 00 00 -  		ld 		hl,$0000
  170 00:4CB4 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4CB6 D1 -  -  -  		pop 	de
  172 00:4CB7 C9 -  -  -  		ret
  173 00:4CB8 -  -  -  -  		
  174 00:4CB8 -  -  -  -  ; ***************************************************************************************
  175 00:4CB8 -  -  -  -  ;
  176 00:4CB8 -  -  -  -  ;									Changes and Updates
  177 00:4CB8 -  -  -  -  ;
  178 00:4CB8 -  -  -  -  ; ***************************************************************************************
  179 00:4CB8 -  -  -  -  ;
  180 00:4CB8 -  -  -  -  ;		Date			Notes
  181 00:4CB8 -  -  -  -  ;		==== 			=====
  182 00:4CB8 -  -  -  -  ;
  183 00:4CB8 -  -  -  -  ; ***************************************************************************************
  184 00:4CB8 -  -  -  -  		
Listing for file "_build.asm"
   65 00:4CB8 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4CB8 -  -  -  -  ; ***************************************************************************************
    2 00:4CB8 -  -  -  -  ; ***************************************************************************************
    3 00:4CB8 -  -  -  -  ;
    4 00:4CB8 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4CB8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CB8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CB8 -  -  -  -  ;		Reviewed :	No
    8 00:4CB8 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4CB8 -  -  -  -  ;
   10 00:4CB8 -  -  -  -  ; ***************************************************************************************
   11 00:4CB8 -  -  -  -  ;
   12 00:4CB8 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4CB8 -  -  -  -  ;
   14 00:4CB8 -  -  -  -  ; ***************************************************************************************
   15 00:4CB8 -  -  -  -  
   16 00:4CB8 -  -  -  -  Int32ToString:
   17 00:4CB8 C5 -  -  -  		push 	bc 							; save string start
   18 00:4CB9 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4CBA E5 -  -  -  		push 	hl
   20 00:4CBB 11 00 00 -  		ld	 	de,$0000
   21 00:4CBE D9 -  -  -  		exx
   22 00:4CBF D5 -  -  -  		push 	de
   23 00:4CC0 E5 -  -  -  		push 	hl
   24 00:4CC1 11 00 00 -  		ld 		de,$000
   25 00:4CC4 D9 -  -  -  		exx
   26 00:4CC5 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4CC6 -  -  -  -  		;
   28 00:4CC6 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4CC8 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4CCA ED 44 -  -  		neg 								; negate base and put in E
   31 00:4CCC 5F -  -  -  		ld 		e,a
   32 00:4CCD -  -  -  -  		;
   33 00:4CCD D9 -  -  -  		exx 								; is it -ve ?
   34 00:4CCE CB 7C -  -  		bit 	7,h
   35 00:4CD0 D9 -  -  -  		exx
   36 00:4CD1 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:4CD3 -  -  -  -  		;
   38 00:4CD3 CD A5 4C -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4CD6 -  -  -  -  		;
   40 00:4CD6 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4CD8 02 -  -  -  		ld 		(bc),a
   42 00:4CD9 03 -  -  -  		inc 	bc
   43 00:4CDA -  -  -  -  _I32TSNotNegative:	
   44 00:4CDA CD E8 4C -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4CDD -  -  -  -  _I32TSExit:
   46 00:4CDD 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:4CDF 02 -  -  -  		ld 		(bc),a 
   48 00:4CE0 -  -  -  -  
   49 00:4CE0 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4CE1 E1 -  -  -  		pop 	hl
   51 00:4CE2 D1 -  -  -  		pop 	de
   52 00:4CE3 D9 -  -  -  		exx
   53 00:4CE4 E1 -  -  -  		pop 	hl
   54 00:4CE5 D1 -  -  -  		pop 	de
   55 00:4CE6 C1 -  -  -  		pop 	bc
   56 00:4CE7 C9 -  -  -  		ret
   57 00:4CE8 -  -  -  -  
   58 00:4CE8 -  -  -  -  _I32RecursiveConvert:
   59 00:4CE8 CD 1C 4B -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4CEB F5 -  -  -  		push 	af 							; save remainder
   61 00:4CEC CD 77 4C -  		call 	Int32Zero		 			; check result is non zero
   62 00:4CEF C4 E8 4C -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4CF2 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4CF3 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4CF5 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4CF7 C6 07 -  -  		add 	a,7
   67 00:4CF9 -  -  -  -  _I32NotHex:
   68 00:4CF9 C6 30 -  -  		add 	a,48
   69 00:4CFB 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4CFC 03 -  -  -  		inc 	bc
   71 00:4CFD C9 -  -  -  		ret		
   72 00:4CFE -  -  -  -  
   73 00:4CFE -  -  -  -  ; ***************************************************************************************
   74 00:4CFE -  -  -  -  ;
   75 00:4CFE -  -  -  -  ;									Changes and Updates
   76 00:4CFE -  -  -  -  ;
   77 00:4CFE -  -  -  -  ; ***************************************************************************************
   78 00:4CFE -  -  -  -  ;
   79 00:4CFE -  -  -  -  ;		Date			Notes
   80 00:4CFE -  -  -  -  ;		==== 			=====
   81 00:4CFE -  -  -  -  ;
   82 00:4CFE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:4CFE -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4CFE -  -  -  -  ; ***************************************************************************************
    2 00:4CFE -  -  -  -  ; ***************************************************************************************
    3 00:4CFE -  -  -  -  ;
    4 00:4CFE -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4CFE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4CFE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4CFE -  -  -  -  ;		Reviewed :	No
    8 00:4CFE -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4CFE -  -  -  -  ;
   10 00:4CFE -  -  -  -  ; ***************************************************************************************
   11 00:4CFE -  -  -  -  ; ***************************************************************************************
   12 00:4CFE -  -  -  -  
   13 00:4CFE -  -  -  -  #ifdef AQUARIUS
   14 00:4CFE -  -  -  -  
   15 00:4CFE -  -  -  -  ; ***************************************************************************************
   16 00:4CFE -  -  -  -  ;
   17 00:4CFE -  -  -  -  ;								Initialise system stuff
   18 00:4CFE -  -  -  -  ;
   19 00:4CFE -  -  -  -  ; ***************************************************************************************
   20 00:4CFE -  -  -  -  
   21 00:4CFE -  -  -  -  SYSInitialise:
   22 00:4CFE 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4D00 CD 06 4D -  	call 	SYSPrintChar
   24 00:4D03 C9 -  -  -  	ret
   25 00:4D04 -  -  -  -  
   26 00:4D04 -  -  -  -  ; ***************************************************************************************
   27 00:4D04 -  -  -  -  ;
   28 00:4D04 -  -  -  -  ;								Terminate system stuff
   29 00:4D04 -  -  -  -  ;
   30 00:4D04 -  -  -  -  ; ***************************************************************************************
   31 00:4D04 -  -  -  -  
   32 00:4D04 -  -  -  -  SYSTerminate:
   33 00:4D04 18 FE -  -  	jr 		SYSTerminate
   34 00:4D06 -  -  -  -  
   35 00:4D06 -  -  -  -  ; ***************************************************************************************
   36 00:4D06 -  -  -  -  ;
   37 00:4D06 -  -  -  -  ;								Print A character
   38 00:4D06 -  -  -  -  ;
   39 00:4D06 -  -  -  -  ; ***************************************************************************************
   40 00:4D06 -  -  -  -  
   41 00:4D06 -  -  -  -  SYSPrintChar:
   42 00:4D06 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4D07 C5 -  -  -  	push 	bc
   44 00:4D08 D5 -  -  -  	push 	de
   45 00:4D09 E5 -  -  -  	push 	hl
   46 00:4D0A DD E5 -  -  	push 	ix
   47 00:4D0C FD E5 -  -  	push 	iy
   48 00:4D0E D9 -  -  -  	exx
   49 00:4D0F C5 -  -  -  	push 	bc
   50 00:4D10 D5 -  -  -  	push 	de
   51 00:4D11 E5 -  -  -  	push 	hl
   52 00:4D12 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4D15 E1 -  -  -  	pop 	hl
   54 00:4D16 D1 -  -  -  	pop 	de
   55 00:4D17 C1 -  -  -  	pop 	bc
   56 00:4D18 D9 -  -  -  	exx
   57 00:4D19 FD E1 -  -  	pop 	iy
   58 00:4D1B DD E1 -  -  	pop 	ix
   59 00:4D1D E1 -  -  -  	pop 	hl
   60 00:4D1E D1 -  -  -  	pop 	de
   61 00:4D1F C1 -  -  -  	pop 	bc
   62 00:4D20 F1 -  -  -  	pop 	af
   63 00:4D21 C9 -  -  -  	ret		
   64 00:4D22 -  -  -  -  
   65 00:4D22 -  -  -  -  ; ***************************************************************************************
   66 00:4D22 -  -  -  -  ;
   67 00:4D22 -  -  -  -  ;									Print Newline
   68 00:4D22 -  -  -  -  ;
   69 00:4D22 -  -  -  -  ; ***************************************************************************************
   70 00:4D22 -  -  -  -  
   71 00:4D22 -  -  -  -  SYSPrintCRLF:
   72 00:4D22 F5 -  -  -  	push 	af
   73 00:4D23 3E 0D -  -  	ld 		a,13
   74 00:4D25 CD 06 4D -  	call 	SYSPrintChar
   75 00:4D28 3E 0A -  -  	ld 		a,10
   76 00:4D2A CD 06 4D -  	call 	SYSPrintChar
   77 00:4D2D F1 -  -  -  	pop 	af
   78 00:4D2E C9 -  -  -  	ret
   79 00:4D2F -  -  -  -  
   80 00:4D2F -  -  -  -  ; ***************************************************************************************
   81 00:4D2F -  -  -  -  ;
   82 00:4D2F -  -  -  -  ;									Get time into HL'HL
   83 00:4D2F -  -  -  -  ;
   84 00:4D2F -  -  -  -  ; ***************************************************************************************
   85 00:4D2F -  -  -  -  
   86 00:4D2F -  -  -  -  SYSGetTimer:
   87 00:4D2F DB 00 -  -   	in 		a,($00)
   88 00:4D31 6F -  -  -   	ld 		l,a
   89 00:4D32 DB 01 -  -   	in 		a,($01)
   90 00:4D34 67 -  -  -   	ld 		h,a
   91 00:4D35 D9 -  -  -   	exx
   92 00:4D36 DB 02 -  -   	in 		a,($02)
   93 00:4D38 6F -  -  -   	ld 		l,a
   94 00:4D39 DB 03 -  -   	in 		a,($03)
   95 00:4D3B 67 -  -  -   	ld 		h,a
   96 00:4D3C D9 -  -  -   	exx
   97 00:4D3D C9 -  -  -  	ret 	
   98 00:4D3E -  -  -  -  	
   99 00:4D3E -  -  -  -  #endif
  100 00:4D3E -  -  -  -  
  101 00:4D3E -  -  -  -  ; ***************************************************************************************
  102 00:4D3E -  -  -  -  ;
  103 00:4D3E -  -  -  -  ;									Changes and Updates
  104 00:4D3E -  -  -  -  ;
  105 00:4D3E -  -  -  -  ; ***************************************************************************************
  106 00:4D3E -  -  -  -  ;
  107 00:4D3E -  -  -  -  ;		Date			Notes
  108 00:4D3E -  -  -  -  ;		==== 			=====
  109 00:4D3E -  -  -  -  ;
  110 00:4D3E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:4D3E -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4D3E -  -  -  -  ; ***************************************************************************************
    2 00:4D3E -  -  -  -  ; ***************************************************************************************
    3 00:4D3E -  -  -  -  ;
    4 00:4D3E -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4D3E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D3E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D3E -  -  -  -  ;		Reviewed :	No
    8 00:4D3E -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4D3E -  -  -  -  ;
   10 00:4D3E -  -  -  -  ; ***************************************************************************************
   11 00:4D3E -  -  -  -  ; ***************************************************************************************
   12 00:4D3E -  -  -  -  
   13 00:4D3E -  -  -  -  #ifdef CLEANEZ80
   14 00:4D3E             
   15 00:4D3E             ; ***************************************************************************************
   16 00:4D3E             ;
   17 00:4D3E             ;								Initialise system stuff
   18 00:4D3E             ;
   19 00:4D3E             ; ***************************************************************************************
   20 00:4D3E             
   21 00:4D3E             SYSInitialise:
   22 00:4D3E             	ret
   23 00:4D3E             
   24 00:4D3E             ; ***************************************************************************************
   25 00:4D3E             ;
   26 00:4D3E             ;								Terminate system stuff
   27 00:4D3E             ;
   28 00:4D3E             ; ***************************************************************************************
   29 00:4D3E             
   30 00:4D3E             SYSTerminate:
   31 00:4D3E             	ret
   32 00:4D3E             
   33 00:4D3E             ; ***************************************************************************************
   34 00:4D3E             ;
   35 00:4D3E             ;								Print A character
   36 00:4D3E             ;
   37 00:4D3E             ; ***************************************************************************************
   38 00:4D3E             
   39 00:4D3E             SYSPrintChar:
   40 00:4D3E             	ret		
   41 00:4D3E             
   42 00:4D3E             ; ***************************************************************************************
   43 00:4D3E             ;
   44 00:4D3E             ;									Print Newline
   45 00:4D3E             ;
   46 00:4D3E             ; ***************************************************************************************
   47 00:4D3E             
   48 00:4D3E             SYSPrintCRLF:
   49 00:4D3E             	ret
   50 00:4D3E             
   51 00:4D3E             ; ***************************************************************************************
   52 00:4D3E             ;
   53 00:4D3E             ;									Get time into HL'HL
   54 00:4D3E             ;
   55 00:4D3E             ; ***************************************************************************************
   56 00:4D3E             
   57 00:4D3E             SYSGetTimer:
   58 00:4D3E             	ret
   59 00:4D3E             
   60 00:4D3E             #endif
   61 00:4D3E -  -  -  -  
   62 00:4D3E -  -  -  -  ; ***************************************************************************************
   63 00:4D3E -  -  -  -  ;
   64 00:4D3E -  -  -  -  ;									Changes and Updates
   65 00:4D3E -  -  -  -  ;
   66 00:4D3E -  -  -  -  ; ***************************************************************************************
   67 00:4D3E -  -  -  -  ;
   68 00:4D3E -  -  -  -  ;		Date			Notes
   69 00:4D3E -  -  -  -  ;		==== 			=====
   70 00:4D3E -  -  -  -  ;
   71 00:4D3E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:4D3E -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4D3E -  -  -  -  ; ***************************************************************************************
    2 00:4D3E -  -  -  -  ; ***************************************************************************************
    3 00:4D3E -  -  -  -  ;
    4 00:4D3E -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4D3E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D3E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D3E -  -  -  -  ;		Reviewed :	No
    8 00:4D3E -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4D3E -  -  -  -  ;
   10 00:4D3E -  -  -  -  ; ***************************************************************************************
   11 00:4D3E -  -  -  -  ; ***************************************************************************************
   12 00:4D3E -  -  -  -  
   13 00:4D3E -  -  -  -  #ifdef TI84
   14 00:4D3E             
   15 00:4D3E             ; ***************************************************************************************
   16 00:4D3E             ;
   17 00:4D3E             ;								Initialise system stuff
   18 00:4D3E             ;
   19 00:4D3E             ; ***************************************************************************************
   20 00:4D3E             
   21 00:4D3E             SYSInitialise:
   22 00:4D3E             	di
   23 00:4D3E             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4D3E             	ld 		(_IYTemp84),iy
   25 00:4D3E             	ret
   26 00:4D3E             
   27 00:4D3E             ; ***************************************************************************************
   28 00:4D3E             ;
   29 00:4D3E             ;								Terminate system stuff
   30 00:4D3E             ;
   31 00:4D3E             ; ***************************************************************************************
   32 00:4D3E             
   33 00:4D3E             SYSTerminate:
   34 00:4D3E             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4D3E             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4D3E             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4D3E             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4D3E             	ei
   39 00:4D3E             	ret 										; and exit.
   40 00:4D3E             
   41 00:4D3E             _StackTemp84:									; temp var for TI84 only.
   42 00:4D3E             	.dw 	0,0
   43 00:4D3E             _IYTemp84:
   44 00:4D3E             	.dw 	0,0		
   45 00:4D3E             
   46 00:4D3E             ; ***************************************************************************************
   47 00:4D3E             ;
   48 00:4D3E             ;								Print A character
   49 00:4D3E             ;
   50 00:4D3E             ; ***************************************************************************************
   51 00:4D3E             
   52 00:4D3E             SYSPrintChar:
   53 00:4D3E             	push 	af 									; we stack everything including alt registers
   54 00:4D3E             	push 	bc
   55 00:4D3E             	push 	de
   56 00:4D3E             	push 	hl
   57 00:4D3E             	push 	ix
   58 00:4D3E             	push 	iy
   59 00:4D3E             	exx
   60 00:4D3E             	push 	bc
   61 00:4D3E             	push 	de
   62 00:4D3E             	push 	hl
   63 00:4D3E             
   64 00:4D3E             	ld 		iy,(_IYTemp84)
   65 00:4D3E             	call 	_PutC 								; print A as character
   66 00:4D3E             	di
   67 00:4D3E             	ld 		(_IYTemp84),iy
   68 00:4D3E             
   69 00:4D3E             	pop 	hl
   70 00:4D3E             	pop 	de
   71 00:4D3E             	pop 	bc
   72 00:4D3E             	exx
   73 00:4D3E             	pop 	iy
   74 00:4D3E             	pop 	ix
   75 00:4D3E             	pop 	hl
   76 00:4D3E             	pop 	de
   77 00:4D3E             	pop 	bc
   78 00:4D3E             	pop 	af
   79 00:4D3E             	ret		
   80 00:4D3E             
   81 00:4D3E             ; ***************************************************************************************
   82 00:4D3E             ;
   83 00:4D3E             ;									Print Newline
   84 00:4D3E             ;
   85 00:4D3E             ; ***************************************************************************************
   86 00:4D3E             
   87 00:4D3E             SYSPrintCRLF:
   88 00:4D3E             	push 	af 									; we stack everything including alt registers
   89 00:4D3E             	push 	bc
   90 00:4D3E             	push 	de
   91 00:4D3E             	push 	hl
   92 00:4D3E             	push 	ix
   93 00:4D3E             	push 	iy
   94 00:4D3E             	exx
   95 00:4D3E             	push 	bc
   96 00:4D3E             	push 	de
   97 00:4D3E             	push 	hl
   98 00:4D3E             
   99 00:4D3E             	ld 		iy,(_IYTemp84)
  100 00:4D3E             	call 	_newline
  101 00:4D3E             	di
  102 00:4D3E             	ld 		(_IYTemp84),iy
  103 00:4D3E             
  104 00:4D3E             	pop 	hl
  105 00:4D3E             	pop 	de
  106 00:4D3E             	pop 	bc
  107 00:4D3E             	exx
  108 00:4D3E             	pop 	iy
  109 00:4D3E             	pop 	ix
  110 00:4D3E             	pop 	hl
  111 00:4D3E             	pop 	de
  112 00:4D3E             	pop 	bc
  113 00:4D3E             	pop 	af
  114 00:4D3E             	ret
  115 00:4D3E             
  116 00:4D3E             ; ***************************************************************************************
  117 00:4D3E             ;
  118 00:4D3E             ;									Get time into HL'HL
  119 00:4D3E             ;
  120 00:4D3E             ; ***************************************************************************************
  121 00:4D3E             
  122 00:4D3E             SYSGetTimer:
  123 00:4D3E             	ld 		hl,$1234
  124 00:4D3E             	exx
  125 00:4D3E             	ld 		hl,$5678
  126 00:4D3E             	exx
  127 00:4D3E             	ret
  128 00:4D3E             
  129 00:4D3E             #endif
  130 00:4D3E -  -  -  -  
  131 00:4D3E -  -  -  -  ; ***************************************************************************************
  132 00:4D3E -  -  -  -  ;
  133 00:4D3E -  -  -  -  ;									Changes and Updates
  134 00:4D3E -  -  -  -  ;
  135 00:4D3E -  -  -  -  ; ***************************************************************************************
  136 00:4D3E -  -  -  -  ;
  137 00:4D3E -  -  -  -  ;		Date			Notes
  138 00:4D3E -  -  -  -  ;		==== 			=====
  139 00:4D3E -  -  -  -  ;
  140 00:4D3E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:4D3E -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4D3E -  -  -  -  ; ***************************************************************************************
    2 00:4D3E -  -  -  -  ; ***************************************************************************************
    3 00:4D3E -  -  -  -  ;
    4 00:4D3E -  -  -  -  ;		Name : 		basic.asm
    5 00:4D3E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4D3E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4D3E -  -  -  -  ;		Reviewed :	No
    8 00:4D3E -  -  -  -  ;		Purpose :	Main program.
    9 00:4D3E -  -  -  -  ;
   10 00:4D3E -  -  -  -  ; ***************************************************************************************
   11 00:4D3E -  -  -  -  ; ***************************************************************************************
   12 00:4D3E -  -  -  -  
   13 00:4D3E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 00:5000 -  -  -  -  TestInstance:
   15 00:5000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:5000 -  -  -  -  ;
    2 00:5000 -  -  -  -  ;	This code automatically generated.
    3 00:5000 -  -  -  -  ;
    4 00:5000 -  -  -  -  TestProgram:
    5 00:5000 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 05 02 00 
              BE 80 0C 03 
              00 BD 13 04 
              12 13 95 44 
              A5 80 0D 04 
              00 13 04 12 
              13 95 40 A5 
              8F 6A 80 0E 
              05 00 13 04 
              12 13 95 41 
              A5 8F 46 67 
              80 0E 06 00 
              13 04 12 13 
              95 42 A5 8F 
              46 68 80 0E 
              07 00 13 04 
              12 13 95 43 
              A5 8F 46 6A 
              80 0E 08 00 
              13 04 12 13 
              95 44 A5 8F 
              46 6C 80 0C 
              09 00 C1 13 
              04 12 13 95 
              40 A5 80 0C 
              0A 00 C1 13 
              04 12 13 95 
              41 A5 80 0C 
              0B 00 C1 13 
              04 12 13 95 
              42 A5 80 0C 
              0C 00 C1 13 
              04 12 13 95 
              43 A5 80 0C 
              0D 00 C1 13 
              04 12 13 95 
              44 A5 80 00 	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$05,$02,$00,$be,$80,$0c,$03,$00,$bd,$13,$04,$12,$13,$95,$44,$a5,$80,$0d,$04,$00,$13,$04,$12,$13,$95,$40,$a5,$8f,$6a,$80,$0e,$05,$00,$13,$04,$12,$13,$95,$41,$a5,$8f,$46,$67,$80,$0e,$06,$00,$13,$04,$12,$13,$95,$42,$a5,$8f,$46,$68,$80,$0e,$07,$00,$13,$04,$12,$13,$95,$43,$a5,$8f,$46,$6a,$80,$0e,$08,$00,$13,$04,$12,$13,$95,$44,$a5,$8f,$46,$6c,$80,$0c,$09,$00,$c1,$13,$04,$12,$13,$95,$40,$a5,$80,$0c,$0a,$00,$c1,$13,$04,$12,$13,$95,$41,$a5,$80,$0c,$0b,$00,$c1,$13,$04,$12,$13,$95,$42,$a5,$80,$0c,$0c,$00,$c1,$13,$04,$12,$13,$95,$43,$a5,$80,$0c,$0d,$00,$c1,$13,$04,$12,$13,$95,$44,$a5,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:50B4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:60B4 -  -  -  -  EndTestInstance:
   18 00:60B4 -  -  -  -  		
   19 00:60B4 -  -  -  -  ; ***************************************************************************************
   20 00:60B4 -  -  -  -  ;
   21 00:60B4 -  -  -  -  ;									Changes and Updates
   22 00:60B4 -  -  -  -  ;
   23 00:60B4 -  -  -  -  ; ***************************************************************************************
   24 00:60B4 -  -  -  -  ;
   25 00:60B4 -  -  -  -  ;		Date			Notes
   26 00:60B4 -  -  -  -  ;		==== 			=====
   27 00:60B4 -  -  -  -  ;
   28 00:60B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   70 00:60B4 -  -  -  -  FinalAddress:
