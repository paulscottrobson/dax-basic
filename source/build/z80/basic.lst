    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_INT                             	$009b ; int
   37 00:0000 -  -  -  -  #define KWD_STR                             	$009c ; str
   38 00:0000 -  -  -  -  #define KWD_CHR                             	$009d ; chr
   39 00:0000 -  -  -  -  #define KWD_ASC                             	$009e ; asc
   40 00:0000 -  -  -  -  #define KWD_NOT                             	$009f ; not
   41 00:0000 -  -  -  -  #define KWD_PAGE                            	$00a0 ; page
   42 00:0000 -  -  -  -  #define KWD_STRING                          	$00a1 ; string
   43 00:0000 -  -  -  -  #define KWD_TIME                            	$00a2 ; time
   44 00:0000 -  -  -  -  #define KWD_TOP                             	$00a3 ; top
   45 00:0000 -  -  -  -  #define KWD_VAL                             	$00a4 ; val
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOLBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   63 00:0000             	ld a,ERRID_NOLBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NORBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   70 00:0000             	ld a,ERRID_NORBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOTREF = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOTREF
   77 00:0000             	ld a,ERRID_NOTREF
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_STOP = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_STOP
   84 00:0000             	ld a,ERRID_STOP
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_SYNTAX = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_SYNTAX
   91 00:0000             	ld a,ERRID_SYNTAX
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_TODO = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_TODO
   98 00:0000             	ld a,ERRID_TODO
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  105 00:0000             	ld a,ERRID_UNKNOWNVAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 21 4A -  		call 	SYSInitialise
   44 00:4006 11 00 4C -  		ld 		de,TestInstance
   45 00:4009 21 6A 6B -  		ld 		hl,EndTestInstance
   46 00:400C CD 30 45 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 51 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 F3 40 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD 29 4A -  		call 	SYSPrintChar
   56 00:401C CD 27 4A -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 87 
              41 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 87 
              41 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  		
   59 00:4045 -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:4045 00 00 00 00 		.dw 	0,0
   61 00:4049 -  -  -  -  
   62 00:4049 -  -  -  -  ; ***************************************************************************************
   63 00:4049 -  -  -  -  ;
   64 00:4049 -  -  -  -  ;										Run variables
   65 00:4049 -  -  -  -  ;
   66 00:4049 -  -  -  -  ; ***************************************************************************************
   67 00:4049 -  -  -  -  
   68 00:4049 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  		
   71 00:404D -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:404D 00 00 00 00 		.dw 	0,0
   73 00:4051 -  -  -  -  
   74 00:4051 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:4051 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4057 -  -  -  -  
   77 00:4057 -  -  -  -  AConvert: 									; used for address conversions.
   78 00:4057 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:405D -  -  -  -  		
   80 00:405D -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:405D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:406D -  -  -  -  
   83 00:406D -  -  -  -  s; ***************************************************************************************
   84 00:406D -  -  -  -  ;
   85 00:406D -  -  -  -  ;										  Buffers
   86 00:406D -  -  -  -  ;
   87 00:406D -  -  -  -  ; ***************************************************************************************
   88 00:406D -  -  -  -  
   89 00:406D -  -  -  -  ConvertBuffer:
   90 00:406D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   91 00:40AD -  -  -  -  
   92 00:40AD -  -  -  -  ; ***************************************************************************************
   93 00:40AD -  -  -  -  ;
   94 00:40AD -  -  -  -  ;									Changes and Updates
   95 00:40AD -  -  -  -  ;
   96 00:40AD -  -  -  -  ; ***************************************************************************************
   97 00:40AD -  -  -  -  ;
   98 00:40AD -  -  -  -  ;		Date			Notes
   99 00:40AD -  -  -  -  ;		==== 			=====
  100 00:40AD -  -  -  -  ;
  101 00:40AD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40AD -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:40AD -  -  -  -  ; ***************************************************************************************
    2 00:40AD -  -  -  -  ; ***************************************************************************************
    3 00:40AD -  -  -  -  ;
    4 00:40AD -  -  -  -  ;		Name : 		assert.asm
    5 00:40AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40AD -  -  -  -  ;		Reviewed :	No
    8 00:40AD -  -  -  -  ;		Purpose :	Assert command
    9 00:40AD -  -  -  -  ;
   10 00:40AD -  -  -  -  ; ***************************************************************************************
   11 00:40AD -  -  -  -  ; ***************************************************************************************
   12 00:40AD -  -  -  -  
   13 00:40AD -  -  -  -  ; ***************************************************************************************
   14 00:40AD -  -  -  -  ;
   15 00:40AD -  -  -  -  ;									ASSERT command
   16 00:40AD -  -  -  -  ;
   17 00:40AD -  -  -  -  ; ***************************************************************************************
   18 00:40AD -  -  -  -  
   19 00:40AD -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:40AD CD 6C 43 -  		call 	EvaluateInteger 			; get an integer expression.
   21 00:40B0 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:40B6 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:40B7 3E 01 C3 87 
              41 -  -  -  		ERR_ASSERT
   24 00:40BC -  -  -  -  
   25 00:40BC -  -  -  -  ; ***************************************************************************************
   26 00:40BC -  -  -  -  ;
   27 00:40BC -  -  -  -  ;									Changes and Updates
   28 00:40BC -  -  -  -  ;
   29 00:40BC -  -  -  -  ; ***************************************************************************************
   30 00:40BC -  -  -  -  ;
   31 00:40BC -  -  -  -  ;		Date			Notes
   32 00:40BC -  -  -  -  ;		==== 			=====
   33 00:40BC -  -  -  -  ;
   34 00:40BC -  -  -  -  ; ***************************************************************************************
   35 00:40BC -  -  -  -  		
Listing for file "_build.asm"
   14 00:40BC -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40BC -  -  -  -  ; ***************************************************************************************
    2 00:40BC -  -  -  -  ; ***************************************************************************************
    3 00:40BC -  -  -  -  ;
    4 00:40BC -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40BC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40BC -  -  -  -  ;		Reviewed :	No
    8 00:40BC -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40BC -  -  -  -  ;
   10 00:40BC -  -  -  -  ; ***************************************************************************************
   11 00:40BC -  -  -  -  ; ***************************************************************************************
   12 00:40BC -  -  -  -  
   13 00:40BC -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40BC -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40BC -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40BC -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40BC -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40BC -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40BC C3 E4 41 -  		jp 		SyntaxError
   20 00:40BF -  -  -  -  
   21 00:40BF -  -  -  -  ; ***************************************************************************************
   22 00:40BF -  -  -  -  ;
   23 00:40BF -  -  -  -  ;									Changes and Updates
   24 00:40BF -  -  -  -  ;
   25 00:40BF -  -  -  -  ; ***************************************************************************************
   26 00:40BF -  -  -  -  ;
   27 00:40BF -  -  -  -  ;		Date			Notes
   28 00:40BF -  -  -  -  ;		==== 			=====
   29 00:40BF -  -  -  -  ;
   30 00:40BF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:40BF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40BF -  -  -  -  ; ***************************************************************************************
    2 00:40BF -  -  -  -  ; ***************************************************************************************
    3 00:40BF -  -  -  -  ;
    4 00:40BF -  -  -  -  ;		Name : 		colon.asm
    5 00:40BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40BF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40BF -  -  -  -  ;		Reviewed :	No
    8 00:40BF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40BF -  -  -  -  ;
   10 00:40BF -  -  -  -  ; ***************************************************************************************
   11 00:40BF -  -  -  -  ; ***************************************************************************************
   12 00:40BF -  -  -  -  
   13 00:40BF -  -  -  -  ; ***************************************************************************************
   14 00:40BF -  -  -  -  ;
   15 00:40BF -  -  -  -  ;								Colon command, this is ignored.
   16 00:40BF -  -  -  -  ;
   17 00:40BF -  -  -  -  ; ***************************************************************************************
   18 00:40BF -  -  -  -  
   19 00:40BF -  -  -  -  Command_Colon: 	;; [:]
   20 00:40BF C9 -  -  -  		ret
   21 00:40C0 -  -  -  -  
   22 00:40C0 -  -  -  -  ; ***************************************************************************************
   23 00:40C0 -  -  -  -  ;
   24 00:40C0 -  -  -  -  ;									Changes and Updates
   25 00:40C0 -  -  -  -  ;
   26 00:40C0 -  -  -  -  ; ***************************************************************************************
   27 00:40C0 -  -  -  -  ;
   28 00:40C0 -  -  -  -  ;		Date			Notes
   29 00:40C0 -  -  -  -  ;		==== 			=====
   30 00:40C0 -  -  -  -  ;
   31 00:40C0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:40C0 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40C0 -  -  -  -  ; ***************************************************************************************
    2 00:40C0 -  -  -  -  ; ***************************************************************************************
    3 00:40C0 -  -  -  -  ;
    4 00:40C0 -  -  -  -  ;		Name : 		end.asm
    5 00:40C0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40C0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40C0 -  -  -  -  ;		Reviewed :	No
    8 00:40C0 -  -  -  -  ;		Purpose :	End command
    9 00:40C0 -  -  -  -  ;
   10 00:40C0 -  -  -  -  ; ***************************************************************************************
   11 00:40C0 -  -  -  -  ; ***************************************************************************************
   12 00:40C0 -  -  -  -  
   13 00:40C0 -  -  -  -  ; ***************************************************************************************
   14 00:40C0 -  -  -  -  ;
   15 00:40C0 -  -  -  -  ;										END command
   16 00:40C0 -  -  -  -  ;
   17 00:40C0 -  -  -  -  ; ***************************************************************************************
   18 00:40C0 -  -  -  -  
   19 00:40C0 -  -  -  -  Command_END: 	;; [end]
   20 00:40C0 3E 00 C3 87 
              41 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40C5 -  -  -  -  
   22 00:40C5 -  -  -  -  ; ***************************************************************************************
   23 00:40C5 -  -  -  -  ;
   24 00:40C5 -  -  -  -  ;									Changes and Updates
   25 00:40C5 -  -  -  -  ;
   26 00:40C5 -  -  -  -  ; ***************************************************************************************
   27 00:40C5 -  -  -  -  ;
   28 00:40C5 -  -  -  -  ;		Date			Notes
   29 00:40C5 -  -  -  -  ;		==== 			=====
   30 00:40C5 -  -  -  -  ;
   31 00:40C5 -  -  -  -  ; ***************************************************************************************
   32 00:40C5 -  -  -  -  		
Listing for file "_build.asm"
   17 00:40C5 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40C5 -  -  -  -  ; ***************************************************************************************
    2 00:40C5 -  -  -  -  ; ***************************************************************************************
    3 00:40C5 -  -  -  -  ;
    4 00:40C5 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40C5 -  -  -  -  ;		Reviewed :	None
    8 00:40C5 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40C5 -  -  -  -  ;
   10 00:40C5 -  -  -  -  ; ***************************************************************************************
   11 00:40C5 -  -  -  -  ; ***************************************************************************************
   12 00:40C5 -  -  -  -  
   13 00:40C5 -  -  -  -  ; ***************************************************************************************
   14 00:40C5 -  -  -  -  ;
   15 00:40C5 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40C5 -  -  -  -  ;
   17 00:40C5 -  -  -  -  ; ***************************************************************************************
   18 00:40C5 -  -  -  -  
   19 00:40C5 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40C5 DD 2A 49 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40C9 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40CC DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40CF DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40D1 -  -  -  -  		;
   25 00:40D1 ED 7B 4D 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40D5 C3 FE 40 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40D8 -  -  -  -  
   28 00:40D8 -  -  -  -  ; ***************************************************************************************
   29 00:40D8 -  -  -  -  ;
   30 00:40D8 -  -  -  -  ;									Changes and Updates
   31 00:40D8 -  -  -  -  ;
   32 00:40D8 -  -  -  -  ; ***************************************************************************************
   33 00:40D8 -  -  -  -  ;
   34 00:40D8 -  -  -  -  ;		Date			Notes
   35 00:40D8 -  -  -  -  ;		==== 			=====
   36 00:40D8 -  -  -  -  ;
   37 00:40D8 -  -  -  -  ; ***************************************************************************************
   38 00:40D8 -  -  -  -  		
Listing for file "_build.asm"
   18 00:40D8 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:40D8 -  -  -  -  ; ***************************************************************************************
    2 00:40D8 -  -  -  -  ; ***************************************************************************************
    3 00:40D8 -  -  -  -  ;
    4 00:40D8 -  -  -  -  ;		Name : 		rem.asm
    5 00:40D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40D8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40D8 -  -  -  -  ;		Reviewed :	No
    8 00:40D8 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:40D8 -  -  -  -  ;
   10 00:40D8 -  -  -  -  ; ***************************************************************************************
   11 00:40D8 -  -  -  -  ; ***************************************************************************************
   12 00:40D8 -  -  -  -  
   13 00:40D8 -  -  -  -  ; ***************************************************************************************
   14 00:40D8 -  -  -  -  ;
   15 00:40D8 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:40D8 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:40D8 -  -  -  -  ;
   18 00:40D8 -  -  -  -  ; ***************************************************************************************
   19 00:40D8 -  -  -  -  
   20 00:40D8 -  -  -  -  Command_REM: 	;; [rem]
   21 00:40D8 -  -  -  -  Command_REM2: 	;; [']
   22 00:40D8 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:40DB DD 23 -  -  		inc 	ix
   24 00:40DD FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:40DF C8 -  -  -  		ret 	z
   26 00:40E0 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:40E2 C8 -  -  -  		ret 	z
   28 00:40E3 FE 3F -  -  		cp 		STRING_MARKER
   29 00:40E5 C2 E4 41 -  		jp 		nz,SyntaxError
   30 00:40E8 -  -  -  -  		;		
   31 00:40E8 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:40EB DD 5E 00 -  		ld 		e,(ix+0)
   33 00:40EE 13 -  -  -  		inc 	de 
   34 00:40EF 13 -  -  -  		inc 	de
   35 00:40F0 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:40F2 C9 -  -  -  		ret
   37 00:40F3 -  -  -  -  
   38 00:40F3 -  -  -  -  ; ***************************************************************************************
   39 00:40F3 -  -  -  -  ;
   40 00:40F3 -  -  -  -  ;									Changes and Updates
   41 00:40F3 -  -  -  -  ;
   42 00:40F3 -  -  -  -  ; ***************************************************************************************
   43 00:40F3 -  -  -  -  ;
   44 00:40F3 -  -  -  -  ;		Date			Notes
   45 00:40F3 -  -  -  -  ;		==== 			=====
   46 00:40F3 -  -  -  -  ;
   47 00:40F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:40F3 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:40F3 -  -  -  -  ; ***************************************************************************************
    2 00:40F3 -  -  -  -  ; ***************************************************************************************
    3 00:40F3 -  -  -  -  ;
    4 00:40F3 -  -  -  -  ;		Name : 		run.asm
    5 00:40F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40F3 -  -  -  -  ;		Reviewed :	No
    8 00:40F3 -  -  -  -  ;		Purpose :	Run command
    9 00:40F3 -  -  -  -  ;
   10 00:40F3 -  -  -  -  ; ***************************************************************************************
   11 00:40F3 -  -  -  -  ; ***************************************************************************************
   12 00:40F3 -  -  -  -  
   13 00:40F3 -  -  -  -  ; ***************************************************************************************
   14 00:40F3 -  -  -  -  ;
   15 00:40F3 -  -  -  -  ;										RUN command
   16 00:40F3 -  -  -  -  ;
   17 00:40F3 -  -  -  -  ; ***************************************************************************************
   18 00:40F3 -  -  -  -  
   19 00:40F3 -  -  -  -  Command_RUN: 	;; [run]
   20 00:40F3 CD 03 45 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:40F6 -  -  -  -  
   22 00:40F6 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:40FA ED 73 4D 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:40FE -  -  -  -  		;
   25 00:40FE -  -  -  -  		; 		New line at IX.
   26 00:40FE -  -  -  -  		;
   27 00:40FE -  -  -  -  CRNewLine:
   28 00:40FE DD 22 49 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:4102 -  -  -  -  		;
   30 00:4102 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:4105 B7 -  -  -  		or 		a
   32 00:4106 CA C0 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:4109 -  -  -  -  		;
   34 00:4109 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:410B DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:410D DD 23 -  -  		inc 	ix
   37 00:410F -  -  -  -  		;
   38 00:410F -  -  -  -  		; 		New command at IX
   39 00:410F -  -  -  -  		;
   40 00:410F -  -  -  -  _CRNewCommand:	
   41 00:410F DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:4112 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:4113 F2 43 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:4116 -  -  -  -  		;
   45 00:4116 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:4118 30 05 -  -  		jr  	nc,_CRDoCommand
   47 00:411A FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:411C D2 38 41 -  		jp 		nc,_CRAlternateLets
   49 00:411F -  -  -  -  		;
   50 00:411F -  -  -  -  _CRDoCommand:		
   51 00:411F E6 7F 21 00 
              00 6F 29 11 
              B0 47 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:4131 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:4133 CD 51 40 -  		call 	JumpCode 					; call the routine.
   54 00:4136 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:4138 -  -  -  -  		;
   56 00:4138 -  -  -  -  		; 		Do CALL (HL)
   57 00:4138 -  -  -  -  		;
   58 00:4138 -  -  -  -  		;
   59 00:4138 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:4138 -  -  -  -  		;		
   61 00:4138 -  -  -  -  _CRAlternateLets:		
   62 00:4138 FE 83 -  -  		cp 		KWD_PLING
   63 00:413A 28 0C -  -  		jr 		z,_CRAssignmentLet
   64 00:413C FE 84 -  -  		cp 		KWD_QMARK
   65 00:413E 28 08 -  -  		jr 		z,_CRAssignmentLet
   66 00:4140 C3 E4 41 -  		jp 		SyntaxError
   67 00:4143 -  -  -  -  		;
   68 00:4143 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:4143 -  -  -  -  		;
   70 00:4143 -  -  -  -  _CRAssignmentHandler:		
   71 00:4143 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:4145 D2 E4 41 -  		jp 		nc,SyntaxError
   73 00:4148 -  -  -  -  _CRAssignmentLet:		
   74 00:4148 3E 0D C3 87 
              41 -  -  -  		ERR_TODO
   75 00:414D -  -  -  -  		;call	Command_LET
   76 00:414D C3 0F 41 -  		jp 		_CRNewCommand
   77 00:4150 -  -  -  -  
   78 00:4150 -  -  -  -  ; ***************************************************************************************
   79 00:4150 -  -  -  -  ;
   80 00:4150 -  -  -  -  ;									Changes and Updates
   81 00:4150 -  -  -  -  ;
   82 00:4150 -  -  -  -  ; ***************************************************************************************
   83 00:4150 -  -  -  -  ;
   84 00:4150 -  -  -  -  ;		Date			Notes
   85 00:4150 -  -  -  -  ;		==== 			=====
   86 00:4150 -  -  -  -  ;
   87 00:4150 -  -  -  -  ; ***************************************************************************************
   88 00:4150 -  -  -  -  		
Listing for file "_build.asm"
   20 00:4150 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:4150 -  -  -  -  ; ***************************************************************************************
    2 00:4150 -  -  -  -  ; ***************************************************************************************
    3 00:4150 -  -  -  -  ;
    4 00:4150 -  -  -  -  ;		Name : 		stop.asm
    5 00:4150 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4150 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4150 -  -  -  -  ;		Reviewed :	No
    8 00:4150 -  -  -  -  ;		Purpose :	Stop command
    9 00:4150 -  -  -  -  ;
   10 00:4150 -  -  -  -  ; ***************************************************************************************
   11 00:4150 -  -  -  -  ; ***************************************************************************************
   12 00:4150 -  -  -  -  
   13 00:4150 -  -  -  -  ; ***************************************************************************************
   14 00:4150 -  -  -  -  ;
   15 00:4150 -  -  -  -  ;										STOP command
   16 00:4150 -  -  -  -  ;
   17 00:4150 -  -  -  -  ; ***************************************************************************************
   18 00:4150 -  -  -  -  
   19 00:4150 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:4150 3E 0B C3 87 
              41 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4155 -  -  -  -  
   22 00:4155 -  -  -  -  ; ***************************************************************************************
   23 00:4155 -  -  -  -  ;
   24 00:4155 -  -  -  -  ;									Changes and Updates
   25 00:4155 -  -  -  -  ;
   26 00:4155 -  -  -  -  ; ***************************************************************************************
   27 00:4155 -  -  -  -  ;
   28 00:4155 -  -  -  -  ;		Date			Notes
   29 00:4155 -  -  -  -  ;		==== 			=====
   30 00:4155 -  -  -  -  ;
   31 00:4155 -  -  -  -  ; ***************************************************************************************
   32 00:4155 -  -  -  -  		
Listing for file "_build.asm"
   21 00:4155 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4155 -  -  -  -  ; ***************************************************************************************
    2 00:4155 -  -  -  -  ; ***************************************************************************************
    3 00:4155 -  -  -  -  ;
    4 00:4155 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4155 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4155 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4155 -  -  -  -  ;		Reviewed :	No
    8 00:4155 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4155 -  -  -  -  ;
   10 00:4155 -  -  -  -  ; ***************************************************************************************
   11 00:4155 -  -  -  -  ; ***************************************************************************************
   12 00:4155 -  -  -  -  
   13 00:4155 -  -  -  -  ; ***************************************************************************************
   14 00:4155 -  -  -  -  ;
   15 00:4155 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4155 -  -  -  -  ;
   17 00:4155 -  -  -  -  ; ***************************************************************************************
   18 00:4155 -  -  -  -  
   19 00:4155 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4155             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4155             		inc 	ix
   22 00:4155             		cp 		ch 							; exit if matches
   23 00:4155             		ret 	z
   24 00:4155             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4155             		jp 		ErrorHandler
   26 00:4155             #endmacro
   27 00:4155 -  -  -  -  
   28 00:4155 -  -  -  -  CheckLeftBracket:
   29 00:4155 DD 7E 00 DD 
              23 FE 95 C8 
              3E 08 C3 87 
              41 -  -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:4162 -  -  -  -  
   31 00:4162 -  -  -  -  CheckRightBracket:
   32 00:4162 DD 7E 00 DD 
              23 FE A5 C8 
              3E 09 C3 87 
              41 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:416F -  -  -  -  
   34 00:416F -  -  -  -  CheckComma:
   35 00:416F DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 87 
              41 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   36 00:417C -  -  -  -  
   37 00:417C -  -  -  -  ; ***************************************************************************************
   38 00:417C -  -  -  -  ;
   39 00:417C -  -  -  -  ; 							Check A, gives Syntax Error
   40 00:417C -  -  -  -  ;
   41 00:417C -  -  -  -  ; ***************************************************************************************
   42 00:417C -  -  -  -  
   43 00:417C -  -  -  -  CheckNextA:
   44 00:417C DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   45 00:417F DD 23 -  -  		inc 	ix 							; skip character
   46 00:4181 C8 -  -  -  		ret 	z 							; yes, okay
   47 00:4182 3E 0C C3 87 
              41 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   48 00:4187 -  -  -  -  		
   49 00:4187 -  -  -  -  ; ***************************************************************************************
   50 00:4187 -  -  -  -  ;
   51 00:4187 -  -  -  -  ;									Changes and Updates
   52 00:4187 -  -  -  -  ;
   53 00:4187 -  -  -  -  ; ***************************************************************************************
   54 00:4187 -  -  -  -  ;
   55 00:4187 -  -  -  -  ;		Date			Notes
   56 00:4187 -  -  -  -  ;		==== 			=====
   57 00:4187 -  -  -  -  ;
   58 00:4187 -  -  -  -  ; ***************************************************************************************
   59 00:4187 -  -  -  -  		
Listing for file "_build.asm"
   22 00:4187 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4187 -  -  -  -  ; ***************************************************************************************
    2 00:4187 -  -  -  -  ; ***************************************************************************************
    3 00:4187 -  -  -  -  ;
    4 00:4187 -  -  -  -  ;		Name : 		errors.asm
    5 00:4187 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4187 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4187 -  -  -  -  ;		Reviewed :	No
    8 00:4187 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4187 -  -  -  -  ;
   10 00:4187 -  -  -  -  ; ***************************************************************************************
   11 00:4187 -  -  -  -  ; ***************************************************************************************
   12 00:4187 -  -  -  -  
   13 00:4187 -  -  -  -  ; ***************************************************************************************
   14 00:4187 -  -  -  -  ;
   15 00:4187 -  -  -  -  ;								Error handler, message A 
   16 00:4187 -  -  -  -  ;
   17 00:4187 -  -  -  -  ; ***************************************************************************************
   18 00:4187 -  -  -  -  
   19 00:4187 -  -  -  -  ErrorHandler:
   20 00:4187 F5 -  -  -  		push 	af 						; save error ID
   21 00:4188 -  -  -  -  
   22 00:4188 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:418B 6F -  -  -  		ld 		l,a
   24 00:418C 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:418D 29 -  -  -  		add 	hl,hl 		
   26 00:418E 11 91 46 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4191 19 -  -  -  		add 	hl,de
   28 00:4192 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4196 CD 49 45 -  		call 	PrintStringAtHL
   30 00:4199 -  -  -  -  		;
   31 00:4199 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:419A B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:419B 28 28 -  -  		jr 		z,_EHExit
   34 00:419D -  -  -  -  		;
   35 00:419D DD 2A 49 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:41A1 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:41A4 B7 -  -  -  		or 		a
   38 00:41A5 28 1E -  -  		jr 		z,_EHExit
   39 00:41A7 -  -  -  -  
   40 00:41A7 21 CB 41 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:41AA CD 49 45 -  		call 	PrintStringAtHL 
   42 00:41AD -  -  -  -  		
   43 00:41AD D9 -  -  -  		exx								; HL'HL = line number
   44 00:41AE 21 00 00 -  		ld 		hl,$0000 		
   45 00:41B1 D9 -  -  -  		exx 
   46 00:41B2 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:41B5 DD 66 02 -  		ld 		h,(ix+2)
   48 00:41B8 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:41BA 01 6D 40 -  		ld 		bc,ConvertBuffer
   50 00:41BD CD DC 49 -  		call 	Int32ToString
   51 00:41C0 C5 -  -  -  		push 	bc
   52 00:41C1 E1 -  -  -  		pop 	hl
   53 00:41C2 CD 49 45 -  		call 	PrintStringAtHL			; print error line number.
   54 00:41C5 -  -  -  -  _EHExit:		
   55 00:41C5 CD 45 4A -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:41C8 C3 17 40 -  		jp 		WarmStart
   57 00:41CB -  -  -  -  
   58 00:41CB -  -  -  -  _EHAtText:
   59 00:41CB 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:41D5 -  -  -  -  
   61 00:41D5 -  -  -  -  NotImplemented:
   62 00:41D5 3E 04 C3 87 
              41 -  -  -  		ERR_DISABLED
   63 00:41DA -  -  -  -  TypeMismatch:
   64 00:41DA 3E 02 C3 87 
              41 -  -  -  		ERR_BADTYPE
   65 00:41DF -  -  -  -  BadValue:
   66 00:41DF 3E 03 C3 87 
              41 -  -  -  		ERR_BADVALUE
   67 00:41E4 -  -  -  -  SyntaxError:
   68 00:41E4 3E 0C C3 87 
              41 -  -  -  		ERR_SYNTAX
   69 00:41E9 -  -  -  -  						
   70 00:41E9 -  -  -  -  ; ***************************************************************************************
   71 00:41E9 -  -  -  -  ;
   72 00:41E9 -  -  -  -  ;									Changes and Updates
   73 00:41E9 -  -  -  -  ;
   74 00:41E9 -  -  -  -  ; ***************************************************************************************
   75 00:41E9 -  -  -  -  ;
   76 00:41E9 -  -  -  -  ;		Date			Notes
   77 00:41E9 -  -  -  -  ;		==== 			=====
   78 00:41E9 -  -  -  -  ;
   79 00:41E9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:41E9 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:41E9 -  -  -  -  ; ***************************************************************************************
    2 00:41E9 -  -  -  -  ; ***************************************************************************************
    3 00:41E9 -  -  -  -  ;
    4 00:41E9 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:41E9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41E9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41E9 -  -  -  -  ;		Reviewed :	No
    8 00:41E9 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:41E9 -  -  -  -  ;
   10 00:41E9 -  -  -  -  ; ***************************************************************************************
   11 00:41E9 -  -  -  -  ; ***************************************************************************************
   12 00:41E9 -  -  -  -  
   13 00:41E9 -  -  -  -  ; ***************************************************************************************
   14 00:41E9 -  -  -  -  ;
   15 00:41E9 -  -  -  -  ; 									Addition
   16 00:41E9 -  -  -  -  ;
   17 00:41E9 -  -  -  -  ; ***************************************************************************************
   18 00:41E9 -  -  -  -  
   19 00:41E9 -  -  -  -  ALUAdd: 		;; [+]
   20 00:41E9 CD DC 42 78 
              B1 C2 DA 41 
              C3 69 49 -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:41F4 -  -  -  -  
   22 00:41F4 -  -  -  -  ; ***************************************************************************************
   23 00:41F4 -  -  -  -  ;
   24 00:41F4 -  -  -  -  ; 									Subtraction
   25 00:41F4 -  -  -  -  ;
   26 00:41F4 -  -  -  -  ; ***************************************************************************************
   27 00:41F4 -  -  -  -  
   28 00:41F4 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:41F4 CD DC 42 78 
              B1 C2 DA 41 
              C3 6F 49 -  		IntegerDispatch(Int32Subtract)
   30 00:41FF -  -  -  -  
   31 00:41FF -  -  -  -  ; ***************************************************************************************
   32 00:41FF -  -  -  -  ;
   33 00:41FF -  -  -  -  ; 									  Multiply
   34 00:41FF -  -  -  -  ;
   35 00:41FF -  -  -  -  ; ***************************************************************************************
   36 00:41FF -  -  -  -  
   37 00:41FF -  -  -  -  ALUMultiply: 	;; [*]
   38 00:41FF CD DC 42 78 
              B1 C2 DA 41 
              C3 33 49 -  		IntegerDispatch(Int32Multiply)
   39 00:420A -  -  -  -  
   40 00:420A -  -  -  -  ; ***************************************************************************************
   41 00:420A -  -  -  -  ;
   42 00:420A -  -  -  -  ; 									  Divide
   43 00:420A -  -  -  -  ;
   44 00:420A -  -  -  -  ; ***************************************************************************************
   45 00:420A -  -  -  -  
   46 00:420A -  -  -  -  ALUDivide: 	;; [/]
   47 00:420A -  -  -  -  ALUDivide2:	;; [div]
   48 00:420A CD DC 42 78 
              B1 C2 DA 41 
              C3 44 48 -  		IntegerDispatch(Int32SDivide)
   49 00:4215 -  -  -  -  
   50 00:4215 -  -  -  -  ; ***************************************************************************************
   51 00:4215 -  -  -  -  ;
   52 00:4215 -  -  -  -  ; 									  Modulus
   53 00:4215 -  -  -  -  ;
   54 00:4215 -  -  -  -  ; ***************************************************************************************
   55 00:4215 -  -  -  -  
   56 00:4215 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:4215 CD DC 42 78 
              B1 C2 DA 41 
              C3 47 48 -  		IntegerDispatch(Int32Modulus)
   58 00:4220 -  -  -  -  
   59 00:4220 -  -  -  -  ; ***************************************************************************************
   60 00:4220 -  -  -  -  ;
   61 00:4220 -  -  -  -  ; 									  Logical
   62 00:4220 -  -  -  -  ;
   63 00:4220 -  -  -  -  ; ***************************************************************************************
   64 00:4220 -  -  -  -  
   65 00:4220 -  -  -  -  ALUAnd: 		;; [and]
   66 00:4220 CD DC 42 78 
              B1 C2 DA 41 
              C3 77 49 -  		IntegerDispatch(Int32And)
   67 00:422B -  -  -  -  
   68 00:422B -  -  -  -  ALUOr: 			;; [or]
   69 00:422B CD DC 42 78 
              B1 C2 DA 41 
              C3 83 49 -  		IntegerDispatch(Int32Or)
   70 00:4236 -  -  -  -  
   71 00:4236 -  -  -  -  ALUXor: 		;; [eor]
   72 00:4236 CD DC 42 78 
              B1 C2 DA 41 
              C3 8F 49 -  		IntegerDispatch(Int32Xor)
   73 00:4241 -  -  -  -  
   74 00:4241 -  -  -  -  ; ***************************************************************************************
   75 00:4241 -  -  -  -  ;
   76 00:4241 -  -  -  -  ;									Changes and Updates
   77 00:4241 -  -  -  -  ;
   78 00:4241 -  -  -  -  ; ***************************************************************************************
   79 00:4241 -  -  -  -  ;
   80 00:4241 -  -  -  -  ;		Date			Notes
   81 00:4241 -  -  -  -  ;		==== 			=====
   82 00:4241 -  -  -  -  ;
   83 00:4241 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:4241 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:4241 -  -  -  -  ; ***************************************************************************************
    2 00:4241 -  -  -  -  ; ***************************************************************************************
    3 00:4241 -  -  -  -  ;
    4 00:4241 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:4241 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4241 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4241 -  -  -  -  ;		Reviewed :	No
    8 00:4241 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:4241 -  -  -  -  ;
   10 00:4241 -  -  -  -  ; ***************************************************************************************
   11 00:4241 -  -  -  -  ; ***************************************************************************************
   12 00:4241 -  -  -  -  
   13 00:4241 -  -  -  -  ; ***************************************************************************************
   14 00:4241 -  -  -  -  ;
   15 00:4241 -  -  -  -  ; 									<l> <op> <r>
   16 00:4241 -  -  -  -  ;
   17 00:4241 -  -  -  -  ; ***************************************************************************************
   18 00:4241 -  -  -  -  
   19 00:4241 -  -  -  -  ALULongReference:			;; [!]
   20 00:4241 CD 4F 42 -  		call 	BRGetAddress 				; calculate address
   21 00:4244 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:4246 CB F9 -  -  		set 	CIsReference,c
   23 00:4248 C9 -  -  -  		ret
   24 00:4249 -  -  -  -  
   25 00:4249 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:4249 CD 41 42 -  		call 	ALULongReference
   27 00:424C CB F1 -  -  		set 	CIsByteReference,c
   28 00:424E C9 -  -  -  		ret
   29 00:424F -  -  -  -  
   30 00:424F -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:424F CD DC 42 78 
              B1 C2 DA 41 
              C3 5A 42 -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:425A -  -  -  -  _BRGAMain:		
   33 00:425A CD 69 49 -  		call 	Int32Add 					; address in HL'HL
   34 00:425D CD C5 43 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:4260 C9 -  -  -  		ret
   36 00:4261 -  -  -  -  
   37 00:4261 -  -  -  -  ; ***************************************************************************************
   38 00:4261 -  -  -  -  ;
   39 00:4261 -  -  -  -  ;									Changes and Updates
   40 00:4261 -  -  -  -  ;
   41 00:4261 -  -  -  -  ; ***************************************************************************************
   42 00:4261 -  -  -  -  ;
   43 00:4261 -  -  -  -  ;		Date			Notes
   44 00:4261 -  -  -  -  ;		==== 			=====
   45 00:4261 -  -  -  -  ;
   46 00:4261 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:4261 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:4261 -  -  -  -  ; ***************************************************************************************
    2 00:4261 -  -  -  -  ; ***************************************************************************************
    3 00:4261 -  -  -  -  ;
    4 00:4261 -  -  -  -  ;		Name : 		compare.asm
    5 00:4261 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4261 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4261 -  -  -  -  ;		Reviewed :	No
    8 00:4261 -  -  -  -  ;		Purpose :	Comparison code
    9 00:4261 -  -  -  -  ;
   10 00:4261 -  -  -  -  ; ***************************************************************************************
   11 00:4261 -  -  -  -  ; ***************************************************************************************
   12 00:4261 -  -  -  -  
   13 00:4261 -  -  -  -  #macro compare_equals(n)
   14 00:4261             		call 	CompareBaseCode
   15 00:4261             		cp 		n
   16 00:4261             		jr 		z,UnaryInt32True
   17 00:4261             		jr 		UnaryInt32False
   18 00:4261             #endmacro
   19 00:4261 -  -  -  -  
   20 00:4261 -  -  -  -  #macro compare_not_equals(n)
   21 00:4261             		call 	CompareBaseCode
   22 00:4261             		cp 		n
   23 00:4261             		jr 		nz,UnaryInt32True
   24 00:4261             		jr 		UnaryInt32False
   25 00:4261             #endmacro
   26 00:4261 -  -  -  -  
   27 00:4261 -  -  -  -  ; ***************************************************************************************
   28 00:4261 -  -  -  -  ;
   29 00:4261 -  -  -  -  ; 								Return True/False
   30 00:4261 -  -  -  -  ;
   31 00:4261 -  -  -  -  ; ***************************************************************************************
   32 00:4261 -  -  -  -  
   33 00:4261 -  -  -  -  UnaryInt32True:	
   34 00:4261 3E FF -  -  		ld 		a,255
   35 00:4263 18 01 -  -  		jr 		_Int32Logical
   36 00:4265 -  -  -  -  UnaryInt32False: 
   37 00:4265 AF -  -  -  		xor 	a
   38 00:4266 -  -  -  -  _Int32Logical:
   39 00:4266 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:4267 67 -  -  -  		ld 		h,a
   41 00:4268 D9 -  -  -  		exx
   42 00:4269 6F -  -  -  		ld 		l,a
   43 00:426A 67 -  -  -  		ld 		h,a
   44 00:426B D9 -  -  -  		exx
   45 00:426C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:426E C9 -  -  -  		ret
   47 00:426F -  -  -  -  
   48 00:426F -  -  -  -  ; ***************************************************************************************
   49 00:426F -  -  -  -  ;
   50 00:426F -  -  -  -  ; 										> = < (compare == value)
   51 00:426F -  -  -  -  ;
   52 00:426F -  -  -  -  ; ***************************************************************************************
   53 00:426F -  -  -  -  
   54 00:426F -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:426F CD A5 42 FE 
              00 28 EB 18 
              ED -  -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:4278 -  -  -  -  
   57 00:4278 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:4278 CD A5 42 FE 
              FF 28 E2 18 
              E4 -  -  -  		compare_equals($FF)
   59 00:4281 -  -  -  -  
   60 00:4281 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:4281 CD A5 42 FE 
              01 28 D9 18 
              DB -  -  -  		compare_equals(1)
   62 00:428A -  -  -  -  
   63 00:428A -  -  -  -  ; ***************************************************************************************
   64 00:428A -  -  -  -  ;
   65 00:428A -  -  -  -  ; 										> = < (compare <> value)
   66 00:428A -  -  -  -  ;
   67 00:428A -  -  -  -  ; ***************************************************************************************
   68 00:428A -  -  -  -  
   69 00:428A -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:428A CD A5 42 FE 
              00 20 D0 18 
              D2 -  -  -  		compare_not_equals(0)
   71 00:4293 -  -  -  -  
   72 00:4293 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:4293 CD A5 42 FE 
              01 20 C7 18 
              C9 -  -  -  		compare_not_equals(1)
   74 00:429C -  -  -  -  
   75 00:429C -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:429C CD A5 42 FE 
              FF 20 BE 18 
              C0 -  -  -  		compare_not_equals($FF)
   77 00:42A5 -  -  -  -  
   78 00:42A5 -  -  -  -  ; ***************************************************************************************
   79 00:42A5 -  -  -  -  ;
   80 00:42A5 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:42A5 -  -  -  -  ;
   82 00:42A5 -  -  -  -  ; ***************************************************************************************
   83 00:42A5 -  -  -  -  
   84 00:42A5 -  -  -  -  CompareBaseCode:
   85 00:42A5 CD DC 42 -  		call 	DereferenceBoth 			; dereference both L & R
   86 00:42A8 -  -  -  -  
   87 00:42A8 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:42A9 A1 -  -  -  		and 	c
   89 00:42AA CB 47 -  -  		bit 	CIsString,a 
   90 00:42AC C2 BB 42 -  		jp 		nz,StringCompare
   91 00:42AF -  -  -  -  
   92 00:42AF 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:42B0 B1 -  -  -  		or 		c
   94 00:42B1 CB 47 -  -  		bit 	CIsString,a 
   95 00:42B3 CA A2 49 -  		jp 		z,Int32Compare 				; if not do as integer
   96 00:42B6 -  -  -  -  
   97 00:42B6 3E 02 C3 87 
              41 -  -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:42BB -  -  -  -  ;
   99 00:42BB -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:42BB -  -  -  -  ;
  101 00:42BB -  -  -  -  StringCompare:
  102 00:42BB 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:42BC BE -  -  -  		cp 		(hl)
  104 00:42BD 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:42BF 20 08 -  -  		jr 		nz,_SCLess
  106 00:42C1 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:42C2 23 -  -  -  		inc 	hl
  108 00:42C3 FE 20 -  -  		cp 		' '
  109 00:42C5 30 F4 -  -  		jr 		nc,StringCompare
  110 00:42C7 AF -  -  -  		xor 	a 							; return 0.
  111 00:42C8 C9 -  -  -  		ret
  112 00:42C9 -  -  -  -  
  113 00:42C9 -  -  -  -  _SCLess:
  114 00:42C9 3E FF -  -  		ld 		a,$FF
  115 00:42CB C9 -  -  -  		ret
  116 00:42CC -  -  -  -  _SCGreater:
  117 00:42CC 3E 01 -  -  		ld 		a,1
  118 00:42CE C9 -  -  -  		ret
  119 00:42CF -  -  -  -  
  120 00:42CF 3E 0D C3 87 
              41 -  -  -  		ERR_TODO()
  121 00:42D4 -  -  -  -  
  122 00:42D4 -  -  -  -  ; ***************************************************************************************
  123 00:42D4 -  -  -  -  ;
  124 00:42D4 -  -  -  -  ;									Changes and Updates
  125 00:42D4 -  -  -  -  ;
  126 00:42D4 -  -  -  -  ; ***************************************************************************************
  127 00:42D4 -  -  -  -  ;
  128 00:42D4 -  -  -  -  ;		Date			Notes
  129 00:42D4 -  -  -  -  ;		==== 			=====
  130 00:42D4 -  -  -  -  ;
  131 00:42D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:42D4 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:42D4 -  -  -  -  ; ***************************************************************************************
    2 00:42D4 -  -  -  -  ; ***************************************************************************************
    3 00:42D4 -  -  -  -  ;
    4 00:42D4 -  -  -  -  ;		Name : 		utility.asm
    5 00:42D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42D4 -  -  -  -  ;		Reviewed :	No
    8 00:42D4 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:42D4 -  -  -  -  ;
   10 00:42D4 -  -  -  -  ; ***************************************************************************************
   11 00:42D4 -  -  -  -  ; ***************************************************************************************
   12 00:42D4 -  -  -  -  
   13 00:42D4 -  -  -  -  ; ***************************************************************************************
   14 00:42D4 -  -  -  -  ;
   15 00:42D4 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:42D4 -  -  -  -  ;
   17 00:42D4 -  -  -  -  ; ***************************************************************************************
   18 00:42D4 -  -  -  -  
   19 00:42D4 -  -  -  -  SwapHLDE:
   20 00:42D4 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:42D5 D9 -  -  -  			exx
   22 00:42D6 EB -  -  -  			ex 		de,hl
   23 00:42D7 D9 -  -  -  			exx
   24 00:42D8 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:42D9 41 -  -  -  			ld 		b,c
   26 00:42DA 4F -  -  -  			ld 		c,a
   27 00:42DB C9 -  -  -  			ret
   28 00:42DC -  -  -  -  
   29 00:42DC -  -  -  -  ; ***************************************************************************************
   30 00:42DC -  -  -  -  ;
   31 00:42DC -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:42DC -  -  -  -  ;
   33 00:42DC -  -  -  -  ; ***************************************************************************************
   34 00:42DC -  -  -  -  
   35 00:42DC -  -  -  -  DereferenceBoth:
   36 00:42DC CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:42DE C4 97 43 -  			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:42E1 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:42E3 C8 -  -  -  			ret 	z
   40 00:42E4 CD D4 42 -  			call 	SwapHLDE 				; swap HL and DE over.
   41 00:42E7 CD 97 43 -  			call 	Dereference 			; dereference what was B:DE'DE
   42 00:42EA CD D4 42 -  			call 	SwapHLDE 				; swap HL and DE over.
   43 00:42ED C9 -  -  -  			ret
   44 00:42EE -  -  -  -  
   45 00:42EE -  -  -  -  ; ***************************************************************************************
   46 00:42EE -  -  -  -  ;
   47 00:42EE -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:42EE -  -  -  -  ;
   49 00:42EE -  -  -  -  ; ***************************************************************************************
   50 00:42EE -  -  -  -  
   51 00:42EE -  -  -  -  NegateHLHL:	
   52 00:42EE CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:42F0 C2 DA 41 -  			jp 		nz,TypeMismatch
   54 00:42F3 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:42F5 C4 97 43 -  			call 	nz,Dereference 			; if required.
   56 00:42F8 CD C9 49 -  			call 	Int32Negate
   57 00:42FB C9 -  -  -  			ret
Listing for file "_build.asm"
   27 00:42FC -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:42FC -  -  -  -  ; ***************************************************************************************
    2 00:42FC -  -  -  -  ; ***************************************************************************************
    3 00:42FC -  -  -  -  ;
    4 00:42FC -  -  -  -  ;		Name : 		expression.asm
    5 00:42FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:42FC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:42FC -  -  -  -  ;		Reviewed :	None
    8 00:42FC -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:42FC -  -  -  -  ;
   10 00:42FC -  -  -  -  ; ***************************************************************************************
   11 00:42FC -  -  -  -  ; ***************************************************************************************
   12 00:42FC -  -  -  -  
   13 00:42FC -  -  -  -  ; ***************************************************************************************
   14 00:42FC -  -  -  -  ;
   15 00:42FC -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:42FC -  -  -  -  ;
   17 00:42FC -  -  -  -  ; ***************************************************************************************
   18 00:42FC -  -  -  -  
   19 00:42FC -  -  -  -  EvaluateAtPrecedence0:
   20 00:42FC AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:42FD -  -  -  -  EvaluateAtPrecedence:
   22 00:42FD F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:42FE -  -  -  -  		;
   24 00:42FE -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:42FE -  -  -  -  		;
   26 00:42FE CD C7 43 -  		call 	EvaluateTerm 				; get term
   27 00:4301 -  -  -  -  		;
   28 00:4301 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:4301 -  -  -  -  		;
   30 00:4301 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:4302 -  -  -  -  _EAPLoop:
   32 00:4302 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:4305 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:4307 D8 -  -  -  		ret 	c
   35 00:4308 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:430A D0 -  -  -  		ret 	nc
   37 00:430B -  -  -  -  		;
   38 00:430B -  -  -  -  		; 		Get the precedence.
   39 00:430B -  -  -  -  		;
   40 00:430B E5 -  -  -  		push 	hl 							; want to use HL
   41 00:430C D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:430E 21 80 46 -  		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:4311 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:4312 6F -  -  -  		ld 		l,a
   45 00:4313 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:4314 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:4315 -  -  -  -  		;
   48 00:4315 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:4315 -  -  -  -  		;
   50 00:4315 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:4316 BB -  -  -  		cp 		e
   52 00:4317 D0 -  -  -  		ret 	nc
   53 00:4318 -  -  -  -  
   54 00:4318 -  -  -  -  		;
   55 00:4318 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:4318 -  -  -  -  		;
   57 00:4318 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:4319 -  -  -  -  		;
   59 00:4319 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:431C F5 -  -  -  		push 	af
   61 00:431D -  -  -  -  		;
   62 00:431D C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:431E D9 -  -  -  		exx 								; save HL'
   64 00:431F E5 -  -  -  		push 	hl
   65 00:4320 D9 -  -  -  		exx 								
   66 00:4321 E5 -  -  -  		push 	hl 							; save HL
   67 00:4322 -  -  -  -  		;
   68 00:4322 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:4324 -  -  -  -  		;
   70 00:4324 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:4324 -  -  -  -  		;
   72 00:4324 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:4325 CD FD 42 -  		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:4328 -  -  -  -  		;
   75 00:4328 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:4328 -  -  -  -  		;
   77 00:4328 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:4329 -  -  -  -  
   79 00:4329 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:432A E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:432B D9 -  -  -  		exx
   82 00:432C EB -  -  -  		ex 		de,hl
   83 00:432D E1 -  -  -  		pop 	hl
   84 00:432E D9 -  -  -  		exx
   85 00:432F C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:4330 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:4331 -  -  -  -  		;
   88 00:4331 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:4331 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:4331 -  -  -  -  		;
   91 00:4331 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:4332 -  -  -  -  		;
   93 00:4332 -  -  -  -  		; 		Call the binary operator in A.
   94 00:4332 -  -  -  -  		;
   95 00:4332 D5 -  -  -  		push 	de
   96 00:4333 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:4334 E6 7F 21 00 
              00 6F 29 11 
              B0 47 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:4346 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:4347 D1 -  -  -  		pop 	de 							; restore DE
  100 00:4348 CD 51 40 -  		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:434B -  -  -  -  		;
  102 00:434B D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:434C -  -  -  -  		;
  104 00:434C 18 B4 -  -  		jr 		_EAPLoop 					; and go round
  105 00:434E -  -  -  -  
  106 00:434E -  -  -  -  ; ***************************************************************************************
  107 00:434E -  -  -  -  ;
  108 00:434E -  -  -  -  ;									Changes and Updates
  109 00:434E -  -  -  -  ;
  110 00:434E -  -  -  -  ; ***************************************************************************************
  111 00:434E -  -  -  -  ;
  112 00:434E -  -  -  -  ;		Date			Notes
  113 00:434E -  -  -  -  ;		==== 			=====
  114 00:434E -  -  -  -  ;
  115 00:434E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:434E -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:434E -  -  -  -  ; ***************************************************************************************
    2 00:434E -  -  -  -  ; ***************************************************************************************
    3 00:434E -  -  -  -  ;
    4 00:434E -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:434E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:434E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:434E -  -  -  -  ;		Reviewed :	No
    8 00:434E -  -  -  -  ;		Purpose :	Expression support functions
    9 00:434E -  -  -  -  ;
   10 00:434E -  -  -  -  ; ***************************************************************************************
   11 00:434E -  -  -  -  ; ***************************************************************************************
   12 00:434E -  -  -  -  
   13 00:434E -  -  -  -  ; ***************************************************************************************
   14 00:434E -  -  -  -  ;
   15 00:434E -  -  -  -  ; 								Evaluate an integer term
   16 00:434E -  -  -  -  ;
   17 00:434E -  -  -  -  ; ***************************************************************************************
   18 00:434E -  -  -  -  
   19 00:434E -  -  -  -  EvaluateIntegerTerm:
   20 00:434E CD C7 43 -  		call 	EvaluateTerm
   21 00:4351 CD 97 43 -  		call 	DeReference
   22 00:4354 CB 41 -  -  		bit 	CIsString,c
   23 00:4356 C8 -  -  -  		ret 	z
   24 00:4357 C3 DA 41 -  		jp 		TypeMismatch
   25 00:435A -  -  -  -  
   26 00:435A -  -  -  -  ; ***************************************************************************************
   27 00:435A -  -  -  -  ;
   28 00:435A -  -  -  -  ; 								Evaluate a string term
   29 00:435A -  -  -  -  ;
   30 00:435A -  -  -  -  ; ***************************************************************************************
   31 00:435A -  -  -  -  
   32 00:435A -  -  -  -  EvaluateStringTerm:
   33 00:435A CD C7 43 -  		call 	EvaluateTerm
   34 00:435D CD 97 43 -  		call 	DeReference
   35 00:4360 CB 41 -  -  		bit 	CIsString,c
   36 00:4362 C0 -  -  -  		ret 	nz
   37 00:4363 C3 DA 41 -  		jp 		TypeMismatch
   38 00:4366 -  -  -  -  
   39 00:4366 -  -  -  -  ; ***************************************************************************************
   40 00:4366 -  -  -  -  ;
   41 00:4366 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:4366 -  -  -  -  ;
   43 00:4366 -  -  -  -  ; ***************************************************************************************
   44 00:4366 -  -  -  -  
   45 00:4366 -  -  -  -  EvaluateValue:
   46 00:4366 CD FC 42 -  		call 	EvaluateAtPrecedence0
   47 00:4369 C3 97 43 -  		jp 		Dereference
   48 00:436C -  -  -  -  
   49 00:436C -  -  -  -  ; ***************************************************************************************
   50 00:436C -  -  -  -  ;
   51 00:436C -  -  -  -  ; 									Evaluate a number
   52 00:436C -  -  -  -  ;
   53 00:436C -  -  -  -  ; ***************************************************************************************
   54 00:436C -  -  -  -  
   55 00:436C -  -  -  -  EvaluateInteger:
   56 00:436C CD 66 43 -  		call 	EvaluateValue
   57 00:436F CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:4371 C8 -  -  -  		ret 	z
   59 00:4372 C3 DA 41 -  		jp 		TypeMismatch
   60 00:4375 -  -  -  -  
   61 00:4375 -  -  -  -  ; ***************************************************************************************
   62 00:4375 -  -  -  -  ;
   63 00:4375 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:4375 -  -  -  -  ;
   65 00:4375 -  -  -  -  ; ***************************************************************************************
   66 00:4375 -  -  -  -  
   67 00:4375 -  -  -  -  Evaluate8BitInteger:
   68 00:4375 CD 6C 43 -  		call 	EvaluateInteger
   69 00:4378 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:4379 7C -  -  -  		ld 		a,h
   71 00:437A B5 -  -  -  		or 		l
   72 00:437B D9 -  -  -  		exx 	
   73 00:437C B4 -  -  -  		or 		h
   74 00:437D C2 DF 41 -  		jp 		nz,BadValue
   75 00:4380 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:4381 C9 -  -  -  		ret
   77 00:4382 -  -  -  -  		
   78 00:4382 -  -  -  -  ; ***************************************************************************************
   79 00:4382 -  -  -  -  ;
   80 00:4382 -  -  -  -  ; 									Evaluate a string
   81 00:4382 -  -  -  -  ;
   82 00:4382 -  -  -  -  ; ***************************************************************************************
   83 00:4382 -  -  -  -  
   84 00:4382 -  -  -  -  EvaluateStringOnly:
   85 00:4382 CD 66 43 -  		call 	EvaluateValue
   86 00:4385 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:4387 CA DA 41 -  		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:438A C9 -  -  -  		ret
   89 00:438B -  -  -  -  
   90 00:438B -  -  -  -  ; ***************************************************************************************
   91 00:438B -  -  -  -  ;
   92 00:438B -  -  -  -  ; 								Return 8/16 bit constant
   93 00:438B -  -  -  -  ;
   94 00:438B -  -  -  -  ; ***************************************************************************************
   95 00:438B -  -  -  -  
   96 00:438B -  -  -  -  Return8BitConstant:
   97 00:438B 21 00 00 -  		ld 		hl,$0000 					; put A into HL
   98 00:438E 6F -  -  -  		ld 		l,a
   99 00:438F -  -  -  -  Return16BitConstant:
  100 00:438F D9 -  -  -  		exx 								; clear HL'
  101 00:4390 21 00 00 -  		ld 		hl,0
  102 00:4393 D9 -  -  -  		exx
  103 00:4394 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:4396 C9 -  -  -  		ret
  105 00:4397 -  -  -  -  
  106 00:4397 -  -  -  -  ; ***************************************************************************************
  107 00:4397 -  -  -  -  ;
  108 00:4397 -  -  -  -  ;									Changes and Updates
  109 00:4397 -  -  -  -  ;
  110 00:4397 -  -  -  -  ; ***************************************************************************************
  111 00:4397 -  -  -  -  ;
  112 00:4397 -  -  -  -  ;		Date			Notes
  113 00:4397 -  -  -  -  ;		==== 			=====
  114 00:4397 -  -  -  -  ;
  115 00:4397 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:4397 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:4397 -  -  -  -  ; ***************************************************************************************
    2 00:4397 -  -  -  -  ; ***************************************************************************************
    3 00:4397 -  -  -  -  ;
    4 00:4397 -  -  -  -  ;		Name : 		reference.asm
    5 00:4397 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4397 -  -  -  -  ;		Date : 		1st May 2022
    7 00:4397 -  -  -  -  ;		Reviewed :	No
    8 00:4397 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:4397 -  -  -  -  ;
   10 00:4397 -  -  -  -  ; ***************************************************************************************
   11 00:4397 -  -  -  -  ; ***************************************************************************************
   12 00:4397 -  -  -  -  
   13 00:4397 -  -  -  -  ; ***************************************************************************************
   14 00:4397 -  -  -  -  ;
   15 00:4397 -  -  -  -  ; 									Dereference HL'HL C
   16 00:4397 -  -  -  -  ;
   17 00:4397 -  -  -  -  ; ***************************************************************************************
   18 00:4397 -  -  -  -  
   19 00:4397 -  -  -  -  Dereference:
   20 00:4397 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:4399 C8 -  -  -  		ret 	z
   22 00:439A -  -  -  -  
   23 00:439A CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:439C -  -  -  -  		
   25 00:439C CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:439E 20 20 -  -  		jr 		nz,_DRInternal
   27 00:43A0 -  -  -  -  
   28 00:43A0 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:43A2 20 0F -  -  		jr 		nz,_DeRefByte 
   30 00:43A4 -  -  -  -  
   31 00:43A4 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:43A5 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:43A9 D9 -  -  -  		exx
   34 00:43AA E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:43AB 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:43AC 23 -  -  -  		inc  	hl
   37 00:43AD 7E 23 66 6F 		ld_ind_hl 							; read HL'HL from HL+2
   38 00:43B1 D9 -  -  -  		exx 								; fix back
   39 00:43B2 C9 -  -  -  		ret
   40 00:43B3 -  -  -  -  
   41 00:43B3 -  -  -  -  _DeRefByte:		
   42 00:43B3 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:43B4 21 00 00 -  		ld 		hl,$0000 					; and zero everything else.
   44 00:43B7 6F -  -  -  		ld	 	l,a
   45 00:43B8 D9 -  -  -  		exx
   46 00:43B9 21 00 00 -  		ld 		hl,$0000
   47 00:43BC D9 -  -  -  		exx
   48 00:43BD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:43BF C9 -  -  -  		ret
   50 00:43C0 -  -  -  -  
   51 00:43C0 -  -  -  -  _DRInternal:
   52 00:43C0 3E 04 C3 87 
              41 -  -  -  		ERR_DISABLED
   53 00:43C5 -  -  -  -  
   54 00:43C5 -  -  -  -  ; ***************************************************************************************
   55 00:43C5 -  -  -  -  ;
   56 00:43C5 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:43C5 -  -  -  -  ;
   58 00:43C5 -  -  -  -  ; ***************************************************************************************
   59 00:43C5 -  -  -  -  
   60 00:43C5 -  -  -  -  DRConvertHLHLToAddress:
   61 00:43C5 -  -  -  -  		#ifdef EZ80
   62 00:43C5             		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:43C5             		exx
   64 00:43C5             		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:43C5             		ld 		hl,$0000 					; zero HL'
   66 00:43C5             		exx
   67 00:43C5             		ld 		hl,(AConvert) 				; load UHL
   68 00:43C5             		#endif
   69 00:43C5 C9 -  -  -  		ret
   70 00:43C6 -  -  -  -  
   71 00:43C6 -  -  -  -  ; ***************************************************************************************
   72 00:43C6 -  -  -  -  ;
   73 00:43C6 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:43C6 -  -  -  -  ;
   75 00:43C6 -  -  -  -  ; ***************************************************************************************
   76 00:43C6 -  -  -  -  
   77 00:43C6 -  -  -  -  DRConvertAddressToHLHL:
   78 00:43C6 -  -  -  -  		#ifdef EZ80
   79 00:43C6             		ld 		(AConvert),hl
   80 00:43C6             		ld 		hl,$0000
   81 00:43C6             		ld 		(AConvert+3),hl
   82 00:43C6             		exx
   83 00:43C6             		ld 		hl,(AConvert+2)
   84 00:43C6             		exx
   85 00:43C6             		xor 	a
   86 00:43C6             		ld 		(AConvert+2),a
   87 00:43C6             		ld 		hl,(AConvert)
   88 00:43C6             		#endif
   89 00:43C6 C9 -  -  -  		ret
   90 00:43C7 -  -  -  -  
   91 00:43C7 -  -  -  -  ; ***************************************************************************************
   92 00:43C7 -  -  -  -  ;
   93 00:43C7 -  -  -  -  ;									Changes and Updates
   94 00:43C7 -  -  -  -  ;
   95 00:43C7 -  -  -  -  ; ***************************************************************************************
   96 00:43C7 -  -  -  -  ;
   97 00:43C7 -  -  -  -  ;		Date			Notes
   98 00:43C7 -  -  -  -  ;		==== 			=====
   99 00:43C7 -  -  -  -  ;
  100 00:43C7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:43C7 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:43C7 -  -  -  -  ; ***************************************************************************************
    2 00:43C7 -  -  -  -  ; ***************************************************************************************
    3 00:43C7 -  -  -  -  ;
    4 00:43C7 -  -  -  -  ;		Name : 		term.asm
    5 00:43C7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:43C7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:43C7 -  -  -  -  ;		Reviewed :	No
    8 00:43C7 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:43C7 -  -  -  -  ;
   10 00:43C7 -  -  -  -  ; ***************************************************************************************
   11 00:43C7 -  -  -  -  ; ***************************************************************************************
   12 00:43C7 -  -  -  -  
   13 00:43C7 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:43C7             		add_hlhl_16
   15 00:43C7             		exx
   16 00:43C7             		adc_hlhl_16
   17 00:43C7             		exx
   18 00:43C7             #endmacro
   19 00:43C7 -  -  -  -  
   20 00:43C7 -  -  -  -  ; ***************************************************************************************
   21 00:43C7 -  -  -  -  ;
   22 00:43C7 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:43C7 -  -  -  -  ;
   24 00:43C7 -  -  -  -  ; ***************************************************************************************
   25 00:43C7 -  -  -  -  ;
   26 00:43C7 -  -  -  -  ; 		Terms can be:
   27 00:43C7 -  -  -  -  ;
   28 00:43C7 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:43C7 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:43C7 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:43C7 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:43C7 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:43C7 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:43C7 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:43C7 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:43C7 -  -  -  -  ; 														reference of some sort.
   37 00:43C7 -  -  -  -  ;
   38 00:43C7 -  -  -  -  ; ***************************************************************************************
   39 00:43C7 -  -  -  -  
   40 00:43C7 -  -  -  -  EvaluateTerm:		
   41 00:43C7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:43C9 D9 -  -  -  		exx
   43 00:43CA 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL
   44 00:43CD D9 -  -  -  		exx
   45 00:43CE 21 00 00 -  		ld 		hl,$0000		
   46 00:43D1 -  -  -  -  		;
   47 00:43D1 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:43D4 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:43D6 28 39 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:43D8 DA 76 44 -  		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:43DB CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:43DD C2 25 44 -  		jp 		nz,_ETFoundKeyword 
   53 00:43E0 -  -  -  -  		;
   54 00:43E0 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:43E0 -  -  -  -  		;
   56 00:43E0 -  -  -  -  _ETIntegerConstant:
   57 00:43E0 -  -  -  -  		;
   58 00:43E0 -  -  -  -  _ETIntegerLoop:		
   59 00:43E0 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:43E3 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:43E5 B5 -  -  -  		or 		l 							; or into L
   62 00:43E6 6F -  -  -  		ld 		l,a
   63 00:43E7 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:43E9 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:43EC C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:43EE FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:43F0 D8 -  -  -  		ret 	c
   68 00:43F1 -  -  -  -  
   69 00:43F1 29 -  -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:43F6 29 -  -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:43FB 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:4400 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:4405 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:440A 29 -  -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 ED 6A D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:440F -  -  -  -  
   76 00:440F 18 CF -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:4411 -  -  -  -  		;
   78 00:4411 -  -  -  -  		; 		Found the $3F string marker.
   79 00:4411 -  -  -  -  		;
   80 00:4411 -  -  -  -  _ETStringMarker:		
   81 00:4411 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:4413 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:4415 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:4417 E1 -  -  -  		pop 	hl
   85 00:4418 11 00 00 -  		ld 		de,$0000
   86 00:441B DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:441E DD 19 -  -  		add 	ix,de
   88 00:4420 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:4422 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:4424 C9 -  -  -  		ret
   91 00:4425 -  -  -  -  		;
   92 00:4425 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:4425 -  -  -  -  		;
   94 00:4425 -  -  -  -  _ETFoundKeyword:
   95 00:4425 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:4427 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:4429 38 19 -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:442B FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:442D 30 15 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:442F -  -  -  -  		;
  101 00:442F -  -  -  -  		;		Unary group 0
  102 00:442F -  -  -  -  		;
  103 00:442F E6 7F 21 00 
              00 6F 29 11 
              B0 47 19 5E 
              23 56 ED 53 
              52 40 -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:4441 C3 51 40 -  		jp 		JumpCode 					; and go there.
  105 00:4444 -  -  -  -  
  106 00:4444 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:4444 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:4446 20 07 -  -  		jr 		nz,_ETCheckIndirection
  109 00:4448 -  -  -  -  		;
  110 00:4448 -  -  -  -  		; 		- term
  111 00:4448 -  -  -  -  		;
  112 00:4448 CD 4E 43 -  		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:444B CD EE 42 -  		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:444E C9 -  -  -  		ret
  115 00:444F -  -  -  -  		;
  116 00:444F -  -  -  -  		;		! ? indirection check
  117 00:444F -  -  -  -  		;
  118 00:444F -  -  -  -  _ETCheckIndirection:	
  119 00:444F FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:4451 28 05 -  -  		jr 		z,_ETIndirection
  121 00:4453 FE 83 -  -  		cp 		KWD_PLING
  122 00:4455 C2 E4 41 -  		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:4458 -  -  -  -  		;
  124 00:4458 -  -  -  -  		; 		! ? indirection
  125 00:4458 -  -  -  -  		;
  126 00:4458 -  -  -  -  _ETIndirection:
  127 00:4458 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:4459 CD C7 43 -  		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:445C CD 97 43 -  		call 	Dereference 				; dereference it so it's a value.
  130 00:445F CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:4461 20 0E -  -  		jr 		nz,_ETStringIndirect
  132 00:4463 CD C5 43 -  		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:4466 F1 -  -  -  		pop 	af 							; get type back
  134 00:4467 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:4469 CB F9 -  -  		set 	CIsReference,c
  136 00:446B FE 83 -  -  		cp 		KWD_PLING
  137 00:446D C8 -  -  -  		ret 	z
  138 00:446E CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:4470 C9 -  -  -  		ret
  140 00:4471 -  -  -  -  _ETStringIndirect:
  141 00:4471 3E 02 C3 87 
              41 -  -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:4476 -  -  -  -  		;
  143 00:4476 -  -  -  -  		; 		Found an identifier.
  144 00:4476 -  -  -  -  		;
  145 00:4476 -  -  -  -  _ETVariable:
  146 00:4476 3E 0D C3 87 
              41 -  -  -  		ERR_TODO
  147 00:447B 3E 0E C3 87 
              41 -  -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:4480 -  -  -  -  		
  149 00:4480 -  -  -  -  ; ***************************************************************************************
  150 00:4480 -  -  -  -  ;
  151 00:4480 -  -  -  -  ;									Changes and Updates
  152 00:4480 -  -  -  -  ;
  153 00:4480 -  -  -  -  ; ***************************************************************************************
  154 00:4480 -  -  -  -  ;
  155 00:4480 -  -  -  -  ;		Date			Notes
  156 00:4480 -  -  -  -  ;		==== 			=====
  157 00:4480 -  -  -  -  ;
  158 00:4480 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:4480 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:4480 -  -  -  -  ; ***************************************************************************************
    2 00:4480 -  -  -  -  ; ***************************************************************************************
    3 00:4480 -  -  -  -  ;
    4 00:4480 -  -  -  -  ;		Name : 		abs.asm
    5 00:4480 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4480 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4480 -  -  -  -  ;		Reviewed :	No
    8 00:4480 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:4480 -  -  -  -  ;
   10 00:4480 -  -  -  -  ; ***************************************************************************************
   11 00:4480 -  -  -  -  ; ***************************************************************************************
   12 00:4480 -  -  -  -  
   13 00:4480 -  -  -  -  ; ***************************************************************************************
   14 00:4480 -  -  -  -  ;
   15 00:4480 -  -  -  -  ;								abs( unary function
   16 00:4480 -  -  -  -  ;
   17 00:4480 -  -  -  -  ; ***************************************************************************************
   18 00:4480 -  -  -  -  
   19 00:4480 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:4480 CD 4E 43 -  		call	EvaluateIntegerTerm 		; get int term
   21 00:4483 D9 -  -  -  		exx 								; test MSB
   22 00:4484 CB 7C -  -  		bit 	7,h
   23 00:4486 D9 -  -  -  		exx
   24 00:4487 C4 EE 42 -  		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:448A C9 -  -  -  		ret
   26 00:448B -  -  -  -  
   27 00:448B -  -  -  -  ; ***************************************************************************************
   28 00:448B -  -  -  -  ;
   29 00:448B -  -  -  -  ;									Changes and Updates
   30 00:448B -  -  -  -  ;
   31 00:448B -  -  -  -  ; ***************************************************************************************
   32 00:448B -  -  -  -  ;
   33 00:448B -  -  -  -  ;		Date			Notes
   34 00:448B -  -  -  -  ;		==== 			=====
   35 00:448B -  -  -  -  ;
   36 00:448B -  -  -  -  ; ***************************************************************************************
   37 00:448B -  -  -  -  		
Listing for file "_build.asm"
   32 00:448B -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:448B -  -  -  -  ; ***************************************************************************************
    2 00:448B -  -  -  -  ; ***************************************************************************************
    3 00:448B -  -  -  -  ;
    4 00:448B -  -  -  -  ;		Name : 		asc.asm
    5 00:448B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:448B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:448B -  -  -  -  ;		Reviewed :	No
    8 00:448B -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:448B -  -  -  -  ;
   10 00:448B -  -  -  -  ; ***************************************************************************************
   11 00:448B -  -  -  -  ; ***************************************************************************************
   12 00:448B -  -  -  -  
   13 00:448B -  -  -  -  ; ***************************************************************************************
   14 00:448B -  -  -  -  ;
   15 00:448B -  -  -  -  ;								Asc unary function
   16 00:448B -  -  -  -  ;
   17 00:448B -  -  -  -  ; ***************************************************************************************
   18 00:448B -  -  -  -  
   19 00:448B -  -  -  -  Unary_Asc:	;; [asc]
   20 00:448B CD 5A 43 -  		call	EvaluateStringTerm			; Get string
   21 00:448E 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:448F C3 8B 43 -  		jp 		Return8BitConstant
   23 00:4492 -  -  -  -  
   24 00:4492 -  -  -  -  ; ***************************************************************************************
   25 00:4492 -  -  -  -  ;
   26 00:4492 -  -  -  -  ;									Changes and Updates
   27 00:4492 -  -  -  -  ;
   28 00:4492 -  -  -  -  ; ***************************************************************************************
   29 00:4492 -  -  -  -  ;
   30 00:4492 -  -  -  -  ;		Date			Notes
   31 00:4492 -  -  -  -  ;		==== 			=====
   32 00:4492 -  -  -  -  ;
   33 00:4492 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:4492 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:4492 -  -  -  -  ; ***************************************************************************************
    2 00:4492 -  -  -  -  ; ***************************************************************************************
    3 00:4492 -  -  -  -  ;
    4 00:4492 -  -  -  -  ;		Name : 		len.asm
    5 00:4492 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4492 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4492 -  -  -  -  ;		Reviewed :	None
    8 00:4492 -  -  -  -  ;		Purpose :	String Length
    9 00:4492 -  -  -  -  ;
   10 00:4492 -  -  -  -  ; ***************************************************************************************
   11 00:4492 -  -  -  -  ; ***************************************************************************************
   12 00:4492 -  -  -  -  
   13 00:4492 -  -  -  -  ; ***************************************************************************************
   14 00:4492 -  -  -  -  ;
   15 00:4492 -  -  -  -  ;								Len unary function
   16 00:4492 -  -  -  -  ;
   17 00:4492 -  -  -  -  ; ***************************************************************************************
   18 00:4492 -  -  -  -  
   19 00:4492 -  -  -  -  Unary_Len:	;; [len]
   20 00:4492 CD 5A 43 -  		call	EvaluateStringTerm			; Get string address into UHL
   21 00:4495 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:4496 CD 65 42 -  		call 	UnaryInt32False 			; zero HL'HL
   23 00:4499 -  -  -  -  _ULCount:
   24 00:4499 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:449A FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:449C D8 -  -  -  		ret 	c
   27 00:449D 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:449E 13 -  -  -  		inc 	de
   29 00:449F 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:44A1 -  -  -  -  
   31 00:44A1 -  -  -  -  ; ***************************************************************************************
   32 00:44A1 -  -  -  -  ;
   33 00:44A1 -  -  -  -  ;									Changes and Updates
   34 00:44A1 -  -  -  -  ;
   35 00:44A1 -  -  -  -  ; ***************************************************************************************
   36 00:44A1 -  -  -  -  ;
   37 00:44A1 -  -  -  -  ;		Date			Notes
   38 00:44A1 -  -  -  -  ;		==== 			=====
   39 00:44A1 -  -  -  -  ;
   40 00:44A1 -  -  -  -  ; ***************************************************************************************
   41 00:44A1 -  -  -  -  		
Listing for file "_build.asm"
   34 00:44A1 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:44A1 -  -  -  -  ; ***************************************************************************************
    2 00:44A1 -  -  -  -  ; ***************************************************************************************
    3 00:44A1 -  -  -  -  ;
    4 00:44A1 -  -  -  -  ;		Name : 		not.asm
    5 00:44A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44A1 -  -  -  -  ;		Date : 		5th June 2023
    7 00:44A1 -  -  -  -  ;		Reviewed :	No
    8 00:44A1 -  -  -  -  ;		Purpose :	Logical not
    9 00:44A1 -  -  -  -  ;
   10 00:44A1 -  -  -  -  ; ***************************************************************************************
   11 00:44A1 -  -  -  -  ; ***************************************************************************************
   12 00:44A1 -  -  -  -  
   13 00:44A1 -  -  -  -  ; ***************************************************************************************
   14 00:44A1 -  -  -  -  ;
   15 00:44A1 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:44A1 -  -  -  -  ;
   17 00:44A1 -  -  -  -  ; ***************************************************************************************
   18 00:44A1 -  -  -  -  
   19 00:44A1 -  -  -  -  Unary_Not:		;; [not]
   20 00:44A1 CD 4E 43 -  		call 	EvaluateIntegerTerm 		; only an integer
   21 00:44A4 CD AB 44 -  		call 	__UNSwap 					; not and swap twice.
   22 00:44A7 CD AB 44 -  		call 	__UNSwap		
   23 00:44AA C9 -  -  -  		ret
   24 00:44AB -  -  -  -  
   25 00:44AB -  -  -  -  __UNSwap:
   26 00:44AB 7C -  -  -  		ld 		a,h
   27 00:44AC 2F -  -  -  		cpl
   28 00:44AD 67 -  -  -  		ld 		h,a
   29 00:44AE 7D -  -  -  		ld 		a,l
   30 00:44AF 2F -  -  -  		cpl 	
   31 00:44B0 6F -  -  -  		ld 		l,a
   32 00:44B1 D9 -  -  -  		exx
   33 00:44B2 C9 -  -  -  		ret
   34 00:44B3 -  -  -  -  
   35 00:44B3 -  -  -  -  ; ***************************************************************************************
   36 00:44B3 -  -  -  -  ;
   37 00:44B3 -  -  -  -  ;									Changes and Updates
   38 00:44B3 -  -  -  -  ;
   39 00:44B3 -  -  -  -  ; ***************************************************************************************
   40 00:44B3 -  -  -  -  ;
   41 00:44B3 -  -  -  -  ;		Date			Notes
   42 00:44B3 -  -  -  -  ;		==== 			=====
   43 00:44B3 -  -  -  -  ;
   44 00:44B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:44B3 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:44B3 -  -  -  -  ; ***************************************************************************************
    2 00:44B3 -  -  -  -  ; ***************************************************************************************
    3 00:44B3 -  -  -  -  ;
    4 00:44B3 -  -  -  -  ;		Name : 		page.asm
    5 00:44B3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44B3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44B3 -  -  -  -  ;		Reviewed :	No
    8 00:44B3 -  -  -  -  ;		Purpose :	Various constants.
    9 00:44B3 -  -  -  -  ;
   10 00:44B3 -  -  -  -  ; ***************************************************************************************
   11 00:44B3 -  -  -  -  ; ***************************************************************************************
   12 00:44B3 -  -  -  -  
   13 00:44B3 -  -  -  -  ; ***************************************************************************************
   14 00:44B3 -  -  -  -  ;
   15 00:44B3 -  -  -  -  ;							page unary function (no bracket)
   16 00:44B3 -  -  -  -  ;
   17 00:44B3 -  -  -  -  ; ***************************************************************************************
   18 00:44B3 -  -  -  -  
   19 00:44B3 -  -  -  -  Unary_Page:	;; [page]
   20 00:44B3 2A 31 40 -  			ld 		hl,(CodeAddress) 		; get address of code
   21 00:44B6 D9 -  -  -  			exx
   22 00:44B7 2A 33 40 -  			ld 		hl,(CodeAddress+2)
   23 00:44BA D9 -  -  -  			exx
   24 00:44BB 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:44BD C9 -  -  -  			ret
   26 00:44BE -  -  -  -  
   27 00:44BE -  -  -  -  ; ***************************************************************************************
   28 00:44BE -  -  -  -  ;
   29 00:44BE -  -  -  -  ;									Changes and Updates
   30 00:44BE -  -  -  -  ;
   31 00:44BE -  -  -  -  ; ***************************************************************************************
   32 00:44BE -  -  -  -  ;
   33 00:44BE -  -  -  -  ;		Date			Notes
   34 00:44BE -  -  -  -  ;		==== 			=====
   35 00:44BE -  -  -  -  ;
   36 00:44BE -  -  -  -  ; ***************************************************************************************
   37 00:44BE -  -  -  -  			
Listing for file "_build.asm"
   36 00:44BE -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:44BE -  -  -  -  ; ***************************************************************************************
    2 00:44BE -  -  -  -  ; ***************************************************************************************
    3 00:44BE -  -  -  -  ;
    4 00:44BE -  -  -  -  ;		Name : 		sgn.asm
    5 00:44BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44BE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44BE -  -  -  -  ;		Reviewed :	No
    8 00:44BE -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:44BE -  -  -  -  ;
   10 00:44BE -  -  -  -  ; ***************************************************************************************
   11 00:44BE -  -  -  -  ; ***************************************************************************************
   12 00:44BE -  -  -  -  
   13 00:44BE -  -  -  -  ; ***************************************************************************************
   14 00:44BE -  -  -  -  ;
   15 00:44BE -  -  -  -  ;								sgn unary function
   16 00:44BE -  -  -  -  ;
   17 00:44BE -  -  -  -  ; ***************************************************************************************
   18 00:44BE -  -  -  -  
   19 00:44BE -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:44BE CD 4E 43 -  		call	EvaluateIntegerTerm 		; get value
   21 00:44C1 CD 9B 49 -  		call 	Int32Zero 					; integer sgn() code
   22 00:44C4 CA 65 42 -  		jp 		z,UnaryInt32False
   23 00:44C7 D9 -  -  -  		exx
   24 00:44C8 CB 7C -  -  		bit 	7,h
   25 00:44CA D9 -  -  -  		exx
   26 00:44CB C2 61 42 -  		jp 		nz,UnaryInt32True
   27 00:44CE 3E 01 -  -  		ld 		a,1
   28 00:44D0 C3 8B 43 -  		jp 		Return8BitConstant
   29 00:44D3 -  -  -  -  
   30 00:44D3 -  -  -  -  ; ***************************************************************************************
   31 00:44D3 -  -  -  -  ;
   32 00:44D3 -  -  -  -  ;									Changes and Updates
   33 00:44D3 -  -  -  -  ;
   34 00:44D3 -  -  -  -  ; ***************************************************************************************
   35 00:44D3 -  -  -  -  ;
   36 00:44D3 -  -  -  -  ;		Date			Notes
   37 00:44D3 -  -  -  -  ;		==== 			=====
   38 00:44D3 -  -  -  -  ;
   39 00:44D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:44D3 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:44D3 -  -  -  -  ; ***************************************************************************************
    2 00:44D3 -  -  -  -  ; ***************************************************************************************
    3 00:44D3 -  -  -  -  ;
    4 00:44D3 -  -  -  -  ;		Name : 		simple.asm
    5 00:44D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44D3 -  -  -  -  ;		Reviewed :	No
    8 00:44D3 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:44D3 -  -  -  -  ;
   10 00:44D3 -  -  -  -  ; ***************************************************************************************
   11 00:44D3 -  -  -  -  ; ***************************************************************************************
   12 00:44D3 -  -  -  -  
   13 00:44D3 -  -  -  -  ; ***************************************************************************************
   14 00:44D3 -  -  -  -  ;
   15 00:44D3 -  -  -  -  ;								( unary function (think about it)
   16 00:44D3 -  -  -  -  ;
   17 00:44D3 -  -  -  -  ; ***************************************************************************************
   18 00:44D3 -  -  -  -  
   19 00:44D3 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:44D3 CD FC 42 -  		call 	EvaluateAtPrecedence0
   21 00:44D6 C3 62 41 -  		jp  	CheckRightBracket
   22 00:44D9 -  -  -  -  
   23 00:44D9 -  -  -  -  ; ***************************************************************************************
   24 00:44D9 -  -  -  -  ;
   25 00:44D9 -  -  -  -  ;									Handle &x
   26 00:44D9 -  -  -  -  ;
   27 00:44D9 -  -  -  -  ; ***************************************************************************************
   28 00:44D9 -  -  -  -  
   29 00:44D9 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:44D9 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:44DC E6 C0 -  -  		and 		$C0
   32 00:44DE FE 40 -  -  		cp 			$40
   33 00:44E0 C2 E4 41 -  		jp 			nz,SyntaxError 			; no then error
   34 00:44E3 C3 C7 43 -  		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:44E6 -  -  -  -  
   36 00:44E6 -  -  -  -  ; ***************************************************************************************
   37 00:44E6 -  -  -  -  ;
   38 00:44E6 -  -  -  -  ;									Changes and Updates
   39 00:44E6 -  -  -  -  ;
   40 00:44E6 -  -  -  -  ; ***************************************************************************************
   41 00:44E6 -  -  -  -  ;
   42 00:44E6 -  -  -  -  ;		Date			Notes
   43 00:44E6 -  -  -  -  ;		==== 			=====
   44 00:44E6 -  -  -  -  ;
   45 00:44E6 -  -  -  -  ; ***************************************************************************************
   46 00:44E6 -  -  -  -  		
Listing for file "_build.asm"
   38 00:44E6 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:44E6 -  -  -  -  ; ***************************************************************************************
    2 00:44E6 -  -  -  -  ; ***************************************************************************************
    3 00:44E6 -  -  -  -  ;
    4 00:44E6 -  -  -  -  ;		Name : 		top.asm
    5 00:44E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44E6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44E6 -  -  -  -  ;		Reviewed :	No
    8 00:44E6 -  -  -  -  ;		Purpose :	Various constants.
    9 00:44E6 -  -  -  -  ;
   10 00:44E6 -  -  -  -  ; ***************************************************************************************
   11 00:44E6 -  -  -  -  ; ***************************************************************************************
   12 00:44E6 -  -  -  -  
   13 00:44E6 -  -  -  -  ; ***************************************************************************************
   14 00:44E6 -  -  -  -  ;
   15 00:44E6 -  -  -  -  ;							page unary function (no bracket)
   16 00:44E6 -  -  -  -  ;
   17 00:44E6 -  -  -  -  ; ***************************************************************************************
   18 00:44E6 -  -  -  -  
   19 00:44E6 -  -  -  -  Unary_Top:	;; [top]
   20 00:44E6 2A 45 40 -  			ld 		hl,(TopMemory) 			; get address of code
   21 00:44E9 D9 -  -  -  			exx
   22 00:44EA 2A 47 40 -  			ld 		hl,(TopMemory+2)
   23 00:44ED D9 -  -  -  			exx
   24 00:44EE 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:44F0 C9 -  -  -  			ret
   26 00:44F1 -  -  -  -  
   27 00:44F1 -  -  -  -  ; ***************************************************************************************
   28 00:44F1 -  -  -  -  ;
   29 00:44F1 -  -  -  -  ;									Changes and Updates
   30 00:44F1 -  -  -  -  ;
   31 00:44F1 -  -  -  -  ; ***************************************************************************************
   32 00:44F1 -  -  -  -  ;
   33 00:44F1 -  -  -  -  ;		Date			Notes
   34 00:44F1 -  -  -  -  ;		==== 			=====
   35 00:44F1 -  -  -  -  ;
   36 00:44F1 -  -  -  -  ; ***************************************************************************************
   37 00:44F1 -  -  -  -  			
Listing for file "_build.asm"
   39 00:44F1 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:44F1 -  -  -  -  ; ***************************************************************************************
    2 00:44F1 -  -  -  -  ; ***************************************************************************************
    3 00:44F1 -  -  -  -  ;
    4 00:44F1 -  -  -  -  ;		Name : 		val.asm
    5 00:44F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44F1 -  -  -  -  ;		Reviewed :	No
    8 00:44F1 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:44F1 -  -  -  -  ;
   10 00:44F1 -  -  -  -  ; ***************************************************************************************
   11 00:44F1 -  -  -  -  ; ***************************************************************************************
   12 00:44F1 -  -  -  -  
   13 00:44F1 -  -  -  -  ; ***************************************************************************************
   14 00:44F1 -  -  -  -  ;
   15 00:44F1 -  -  -  -  ;								val( unary function
   16 00:44F1 -  -  -  -  ;
   17 00:44F1 -  -  -  -  ; ***************************************************************************************
   18 00:44F1 -  -  -  -  
   19 00:44F1 -  -  -  -  Unary_Val:	;; [val]
   20 00:44F1 CD 5A 43 -  		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:44F4 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:44F5 C1 -  -  -  		pop 	bc
   23 00:44F6 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:44F8 CD D2 48 -  		call 	Int32FromString 			; get the integer part.
   25 00:44FB 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:44FD C8 -  -  -  		ret		z 							; okay
   27 00:44FE 3E 03 C3 87 
              41 -  -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:4503 -  -  -  -  
   29 00:4503 -  -  -  -  ; ***************************************************************************************
   30 00:4503 -  -  -  -  ;
   31 00:4503 -  -  -  -  ;									Changes and Updates
   32 00:4503 -  -  -  -  ;
   33 00:4503 -  -  -  -  ; ***************************************************************************************
   34 00:4503 -  -  -  -  ;
   35 00:4503 -  -  -  -  ;		Date			Notes
   36 00:4503 -  -  -  -  ;		==== 			=====
   37 00:4503 -  -  -  -  ;
   38 00:4503 -  -  -  -  ; ***************************************************************************************
   39 00:4503 -  -  -  -  		
Listing for file "_build.asm"
   40 00:4503 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:4503 -  -  -  -  ; ***************************************************************************************
    2 00:4503 -  -  -  -  ; ***************************************************************************************
    3 00:4503 -  -  -  -  ;
    4 00:4503 -  -  -  -  ;		Name : 		clear.asm
    5 00:4503 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4503 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4503 -  -  -  -  ;		Reviewed :	No
    8 00:4503 -  -  -  -  ;		Purpose :	Clear command.
    9 00:4503 -  -  -  -  ;
   10 00:4503 -  -  -  -  ; ***************************************************************************************
   11 00:4503 -  -  -  -  ; ***************************************************************************************
   12 00:4503 -  -  -  -  
   13 00:4503 -  -  -  -  ; ***************************************************************************************
   14 00:4503 -  -  -  -  ;
   15 00:4503 -  -  -  -  ;										CLEAR command
   16 00:4503 -  -  -  -  ;
   17 00:4503 -  -  -  -  ; ***************************************************************************************
   18 00:4503 -  -  -  -  
   19 00:4503 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:4503 -  -  -  -  		;
   21 00:4503 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:4503 -  -  -  -  		;
   23 00:4503 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:4506 -  -  -  -  _CCFindLow:
   25 00:4506 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:4509 5E -  -  -  		ld 		e,(hl)		
   27 00:450A 19 -  -  -  		add 	hl,de
   28 00:450B 7B -  -  -  		ld 		a,e
   29 00:450C B7 -  -  -  		or 		a
   30 00:450D 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:450F 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:4510 22 45 40 -  		ld 		(TopMemory),hl 				; save TOP
   33 00:4513 23 -  -  -  		inc 	hl 							; one for luck
   34 00:4514 22 41 40 -  		ld 		(LowAllocMemory),hl
   35 00:4517 -  -  -  -  		;
   36 00:4517 -  -  -  -  		; 	 		Reset the language stack
   37 00:4517 -  -  -  -  		;
   38 00:4517 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:451A -  -  -  -  		;
   40 00:451A 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:451C 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   42 00:451F 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:4522 19 -  -  -  		add 	hl,de
   44 00:4523 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:4525 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:4528 -  -  -  -  		;
   47 00:4528 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:452B 19 -  -  -  		add 	hl,de
   49 00:452C 22 3D 40 -  		ld 		(StandardIntegers),hl
   50 00:452F -  -  -  -  		;
   51 00:452F -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:452F -  -  -  -  		;
   53 00:452F -  -  -  -  
   54 00:452F -  -  -  -  		;
   55 00:452F -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:452F -  -  -  -  		;
   57 00:452F -  -  -  -  
   58 00:452F -  -  -  -  		;
   59 00:452F -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:452F -  -  -  -  		;
   61 00:452F C9 -  -  -  		ret
   62 00:4530 -  -  -  -  
   63 00:4530 -  -  -  -  ; ***************************************************************************************
   64 00:4530 -  -  -  -  ;
   65 00:4530 -  -  -  -  ;									Changes and Updates
   66 00:4530 -  -  -  -  ;
   67 00:4530 -  -  -  -  ; ***************************************************************************************
   68 00:4530 -  -  -  -  ;
   69 00:4530 -  -  -  -  ;		Date			Notes
   70 00:4530 -  -  -  -  ;		==== 			=====
   71 00:4530 -  -  -  -  ;
   72 00:4530 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:4530 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:4530 -  -  -  -  ; ***************************************************************************************
    2 00:4530 -  -  -  -  ; ***************************************************************************************
    3 00:4530 -  -  -  -  ;
    4 00:4530 -  -  -  -  ;		Name : 		instance.asm
    5 00:4530 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4530 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4530 -  -  -  -  ;		Reviewed :	No
    8 00:4530 -  -  -  -  ;		Purpose :	Instance handling
    9 00:4530 -  -  -  -  ;
   10 00:4530 -  -  -  -  ; ***************************************************************************************
   11 00:4530 -  -  -  -  ; ***************************************************************************************
   12 00:4530 -  -  -  -  
   13 00:4530 -  -  -  -  ; ***************************************************************************************
   14 00:4530 -  -  -  -  ;
   15 00:4530 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:4530 -  -  -  -  ;
   17 00:4530 -  -  -  -  ; ***************************************************************************************
   18 00:4530 -  -  -  -  
   19 00:4530 -  -  -  -  SetCurrentInstance:
   20 00:4530 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:4534 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:4537 ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:453B -  -  -  -  
   24 00:453B C9 -  -  -  		ret
   25 00:453C -  -  -  -  
   26 00:453C -  -  -  -  
   27 00:453C -  -  -  -  ; ***************************************************************************************
   28 00:453C -  -  -  -  ;
   29 00:453C -  -  -  -  ;									Changes and Updates
   30 00:453C -  -  -  -  ;
   31 00:453C -  -  -  -  ; ***************************************************************************************
   32 00:453C -  -  -  -  ;
   33 00:453C -  -  -  -  ;		Date			Notes
   34 00:453C -  -  -  -  ;		==== 			=====
   35 00:453C -  -  -  -  ;
   36 00:453C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:453C -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:453C -  -  -  -  ; ***************************************************************************************
    2 00:453C -  -  -  -  ; ***************************************************************************************
    3 00:453C -  -  -  -  ;
    4 00:453C -  -  -  -  ;		Name : 		new.asm
    5 00:453C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:453C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:453C -  -  -  -  ;		Reviewed :	No
    8 00:453C -  -  -  -  ;		Purpose :	New command.
    9 00:453C -  -  -  -  ;
   10 00:453C -  -  -  -  ; ***************************************************************************************
   11 00:453C -  -  -  -  ; ***************************************************************************************
   12 00:453C -  -  -  -  
   13 00:453C -  -  -  -  ; ***************************************************************************************
   14 00:453C -  -  -  -  ;
   15 00:453C -  -  -  -  ;										NEW command
   16 00:453C -  -  -  -  ;
   17 00:453C -  -  -  -  ; ***************************************************************************************
   18 00:453C -  -  -  -  
   19 00:453C -  -  -  -  Command_NEW: 	;; [new]
   20 00:453C 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:453F 36 00 -  -  		ld 		(hl),0
   22 00:4541 CD 03 45 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4544 3E 00 C3 87 
              41 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:4549 -  -  -  -  
   25 00:4549 -  -  -  -  ; ***************************************************************************************
   26 00:4549 -  -  -  -  ;
   27 00:4549 -  -  -  -  ;									Changes and Updates
   28 00:4549 -  -  -  -  ;
   29 00:4549 -  -  -  -  ; ***************************************************************************************
   30 00:4549 -  -  -  -  ;
   31 00:4549 -  -  -  -  ;		Date			Notes
   32 00:4549 -  -  -  -  ;		==== 			=====
   33 00:4549 -  -  -  -  ;
   34 00:4549 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:4549 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:4549 -  -  -  -  ; ***************************************************************************************
    2 00:4549 -  -  -  -  ; ***************************************************************************************
    3 00:4549 -  -  -  -  ;
    4 00:4549 -  -  -  -  ;		Name : 		utility.asm
    5 00:4549 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4549 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4549 -  -  -  -  ;		Reviewed :	No
    8 00:4549 -  -  -  -  ;		Purpose :	Utility routines
    9 00:4549 -  -  -  -  ;
   10 00:4549 -  -  -  -  ; ***************************************************************************************
   11 00:4549 -  -  -  -  ; ***************************************************************************************
   12 00:4549 -  -  -  -  
   13 00:4549 -  -  -  -  ; ***************************************************************************************
   14 00:4549 -  -  -  -  ;
   15 00:4549 -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:4549 -  -  -  -  ;
   17 00:4549 -  -  -  -  ; ***************************************************************************************
   18 00:4549 -  -  -  -  
   19 00:4549 -  -  -  -  PrintStringAtHL:
   20 00:4549 7E -  -  -  		ld 		a,(hl)
   21 00:454A B7 -  -  -  		or 		a
   22 00:454B C8 -  -  -  		ret 	z
   23 00:454C CD 29 4A -  		call 	SYSPrintChar
   24 00:454F 23 -  -  -  		inc 	hl
   25 00:4550 18 F7 -  -  		jr 		PrintStringAtHL
   26 00:4552 -  -  -  -  
   27 00:4552 -  -  -  -  ; ***************************************************************************************
   28 00:4552 -  -  -  -  ;
   29 00:4552 -  -  -  -  ;									Changes and Updates
   30 00:4552 -  -  -  -  ;
   31 00:4552 -  -  -  -  ; ***************************************************************************************
   32 00:4552 -  -  -  -  ;
   33 00:4552 -  -  -  -  ;		Date			Notes
   34 00:4552 -  -  -  -  ;		==== 			=====
   35 00:4552 -  -  -  -  ;
   36 00:4552 -  -  -  -  ; ***************************************************************************************
   37 00:4552 -  -  -  -  		
Listing for file "_build.asm"
   44 00:4552 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:4552 -  -  -  -  ;
    2 00:4552 -  -  -  -  ;	This file is automatically generated.
    3 00:4552 -  -  -  -  ;
    4 00:4552 -  -  -  -  ;
    5 00:4552 -  -  -  -  ;	Keywords for set 0
    6 00:4552 -  -  -  -  ;
    7 00:4552 -  -  -  -  KeywordsSet0:
    8 00:4552 01 20 -  -  	.db	1," "              ; $0080
    9 00:4554 01 20 -  -  	.db	1," "              ; $0081
   10 00:4556 01 20 -  -  	.db	1," "              ; $0082
   11 00:4558 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:455A 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:455C 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:455E 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:4560 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:4564 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:4568 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:456A 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:456C 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:456F 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:4572 01 3E -  -  	.db	1,">"              ; $008d
   22 00:4574 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:4576 01 3D -  -  	.db	1,"="              ; $008f
   24 00:4578 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:457B 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:457F 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:4582 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:4586 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:4588 01 28 -  -  	.db	1,"("              ; $0095
   30 00:458A 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:458C 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:4590 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:4594 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:4598 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:459C 03 49 4E 54 	.db	3,"INT"            ; $009b
   36 00:45A0 03 53 54 52 	.db	3,"STR"            ; $009c
   37 00:45A4 03 43 48 52 	.db	3,"CHR"            ; $009d
   38 00:45A8 03 41 53 43 	.db	3,"ASC"            ; $009e
   39 00:45AC 03 4E 4F 54 	.db	3,"NOT"            ; $009f
   40 00:45B0 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $00a0
   41 00:45B5 06 53 54 52 
              49 4E 47 -  	.db	6,"STRING"         ; $00a1
   42 00:45BC 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a2
   43 00:45C1 03 54 4F 50 	.db	3,"TOP"            ; $00a3
   44 00:45C5 03 56 41 4C 	.db	3,"VAL"            ; $00a4
   45 00:45C9 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:45CB 01 2C -  -  	.db	1,","              ; $00a6
   47 00:45CD 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:45CF 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:45D1 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:45D3 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 00:45DA 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 00:45E0 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 00:45E3 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 00:45E8 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 00:45ED 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 00:45F1 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 00:45F4 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 00:45F9 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 00:45FE 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 00:4602 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 00:4607 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 00:460F 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 00:4615 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 00:4619 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 00:461D 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 00:4621 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 00:4625 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 00:462B 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 00:4630 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 00:4635 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 00:463A 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 00:463E 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 00:4642 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 00:4647 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 00:464C 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 00:4654 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 00:465B 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 00:4661 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 00:4665 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 00:466A 00 -  -  -  	.db	0
   81 00:466B -  -  -  -  ;
   82 00:466B -  -  -  -  ;	Keywords for set 1
   83 00:466B -  -  -  -  ;
   84 00:466B -  -  -  -  KeywordsSet1:
   85 00:466B 00 -  -  -  	.db	0
   86 00:466C -  -  -  -  ;
   87 00:466C -  -  -  -  ;	Keywords for set 2
   88 00:466C -  -  -  -  ;
   89 00:466C -  -  -  -  KeywordsSet2:
   90 00:466C 00 -  -  -  	.db	0
Listing for file "_build.asm"
   45 00:466D -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:466D -  -  -  -  ;
    2 00:466D -  -  -  -  ;	This file is automatically generated.
    3 00:466D -  -  -  -  ;
    4 00:466D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:4680 -  -  -  -  PrecedenceTable:
    6 00:4680 06 -  -  -  	.db	6	; $0083 !
    7 00:4681 06 -  -  -  	.db	6	; $0084 ?
    8 00:4682 05 -  -  -  	.db	5	; $0085 *
    9 00:4683 05 -  -  -  	.db	5	; $0086 /
   10 00:4684 05 -  -  -  	.db	5	; $0087 mod
   11 00:4685 05 -  -  -  	.db	5	; $0088 div
   12 00:4686 04 -  -  -  	.db	4	; $0089 +
   13 00:4687 04 -  -  -  	.db	4	; $008a -
   14 00:4688 03 -  -  -  	.db	3	; $008b >=
   15 00:4689 03 -  -  -  	.db	3	; $008c <=
   16 00:468A 03 -  -  -  	.db	3	; $008d >
   17 00:468B 03 -  -  -  	.db	3	; $008e <
   18 00:468C 03 -  -  -  	.db	3	; $008f =
   19 00:468D 03 -  -  -  	.db	3	; $0090 <>
   20 00:468E 02 -  -  -  	.db	2	; $0091 and
   21 00:468F 01 -  -  -  	.db	1	; $0092 or
   22 00:4690 01 -  -  -  	.db	1	; $0093 eor
   23 00:4691 -  -  -  -  
Listing for file "_build.asm"
   46 00:4691 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4691 -  -  -  -  ;
    2 00:4691 -  -  -  -  ;	This is automatically generated.
    3 00:4691 -  -  -  -  ;
    4 00:4691 -  -  -  -  ErrorIDTable:
    5 00:4691 CD 46 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4695 D3 46 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4699 E4 46 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:469D F2 46 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:46A1 FC 46 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:46A5 16 47 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:46A9 27 47 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:46AD 35 47 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:46B1 43 47 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   14 00:46B5 58 47 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   15 00:46B9 6E 47 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   16 00:46BD 7C 47 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   17 00:46C1 81 47 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   18 00:46C5 8E 47 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   19 00:46C9 9F 47 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   20 00:46CD -  -  -  -  
   21 00:46CD -  -  -  -  ErrText_warmstart:
   22 00:46CD 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   23 00:46D3 -  -  -  -  ErrText_assert:
   24 00:46D3 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   25 00:46E4 -  -  -  -  ErrText_badtype:
   26 00:46E4 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   27 00:46F2 -  -  -  -  ErrText_badvalue:
   28 00:46F2 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   29 00:46FC -  -  -  -  ErrText_disabled:
   30 00:46FC 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   31 00:4716 -  -  -  -  ErrText_divzero:
   32 00:4716 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   33 00:4727 -  -  -  -  ErrText_memory:
   34 00:4727 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   35 00:4735 -  -  -  -  ErrText_nocomma:
   36 00:4735 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   37 00:4743 -  -  -  -  ErrText_nolbracket:
   38 00:4743 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   39 00:4758 -  -  -  -  ErrText_norbracket:
   40 00:4758 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   41 00:476E -  -  -  -  ErrText_notref:
   42 00:476E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   43 00:477C -  -  -  -  ErrText_stop:
   44 00:477C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   45 00:4781 -  -  -  -  ErrText_syntax:
   46 00:4781 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   47 00:478E -  -  -  -  ErrText_todo:
   48 00:478E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   49 00:479F -  -  -  -  ErrText_unknownvar:
   50 00:479F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   47 00:47B0 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:47B0 -  -  -  -  ;
    2 00:47B0 -  -  -  -  ;	Vectors for set 0
    3 00:47B0 -  -  -  -  ;
    4 00:47B0 -  -  -  -  VectorsSet0:
    5 00:47B0 C5 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:47B2 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:47B4 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:47B6 41 42 -  -  	addr(ALULongReference)           ; $0083 !
    9 00:47B8 49 42 -  -  	addr(ALUByteReference)           ; $0084 ?
   10 00:47BA FF 41 -  -  	addr(ALUMultiply)                ; $0085 *
   11 00:47BC 0A 42 -  -  	addr(ALUDivide)                  ; $0086 /
   12 00:47BE 15 42 -  -  	addr(ALUModulus)                 ; $0087 mod
   13 00:47C0 0A 42 -  -  	addr(ALUDivide2)                 ; $0088 div
   14 00:47C2 E9 41 -  -  	addr(ALUAdd)                     ; $0089 +
   15 00:47C4 F4 41 -  -  	addr(ALUSubtract)                ; $008a -
   16 00:47C6 9C 42 -  -  	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:47C8 93 42 -  -  	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:47CA 81 42 -  -  	addr(ALUCompareGreater)          ; $008d >
   19 00:47CC 78 42 -  -  	addr(ALUCompareLess)             ; $008e <
   20 00:47CE 6F 42 -  -  	addr(ALUCompareEqual)            ; $008f =
   21 00:47D0 8A 42 -  -  	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:47D2 20 42 -  -  	addr(ALUAnd)                     ; $0091 and
   23 00:47D4 2B 42 -  -  	addr(ALUOr)                      ; $0092 or
   24 00:47D6 36 42 -  -  	addr(ALUXor)                     ; $0093 eor
   25 00:47D8 D9 44 -  -  	addr(Unary_Ampersand)            ; $0094 &
   26 00:47DA D3 44 -  -  	addr(Unary_Brackets)             ; $0095 (
   27 00:47DC 1F 40 -  -  	addr(Unimplemented)              ; $0096 $
   28 00:47DE 1F 40 -  -  	addr(Unimplemented)              ; $0097 rnd
   29 00:47E0 92 44 -  -  	addr(Unary_Len)                  ; $0098 len
   30 00:47E2 80 44 -  -  	addr(Unary_Abs)                  ; $0099 abs
   31 00:47E4 BE 44 -  -  	addr(Unary_Sgn)                  ; $009a sgn
   32 00:47E6 1F 40 -  -  	addr(Unimplemented)              ; $009b int
   33 00:47E8 1F 40 -  -  	addr(Unimplemented)              ; $009c str
   34 00:47EA 1F 40 -  -  	addr(Unimplemented)              ; $009d chr
   35 00:47EC 8B 44 -  -  	addr(Unary_Asc)                  ; $009e asc
   36 00:47EE A1 44 -  -  	addr(Unary_Not)                  ; $009f not
   37 00:47F0 B3 44 -  -  	addr(Unary_Page)                 ; $00a0 page
   38 00:47F2 1F 40 -  -  	addr(Unimplemented)              ; $00a1 string
   39 00:47F4 1F 40 -  -  	addr(Unimplemented)              ; $00a2 time
   40 00:47F6 E6 44 -  -  	addr(Unary_Top)                  ; $00a3 top
   41 00:47F8 F1 44 -  -  	addr(Unary_Val)                  ; $00a4 val
   42 00:47FA BC 40 -  -  	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:47FC BC 40 -  -  	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:47FE BF 40 -  -  	addr(Command_Colon)              ; $00a7 :
   45 00:4800 BC 40 -  -  	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:4802 D8 40 -  -  	addr(Command_REM2)               ; $00a9 '
   47 00:4804 1F 40 -  -  	addr(Unimplemented)              ; $00aa repeat
   48 00:4806 1F 40 -  -  	addr(Unimplemented)              ; $00ab until
   49 00:4808 1F 40 -  -  	addr(Unimplemented)              ; $00ac if
   50 00:480A BC 40 -  -  	addr(BadCmd_Then)                ; $00ad then
   51 00:480C 1F 40 -  -  	addr(Unimplemented)              ; $00ae else
   52 00:480E 1F 40 -  -  	addr(Unimplemented)              ; $00af for
   53 00:4810 BC 40 -  -  	addr(BadCmd_To)                  ; $00b0 to
   54 00:4812 1F 40 -  -  	addr(Unimplemented)              ; $00b1 step
   55 00:4814 1F 40 -  -  	addr(Unimplemented)              ; $00b2 next
   56 00:4816 BC 40 -  -  	addr(BadCmd_Defproc)             ; $00b3 def
   57 00:4818 1F 40 -  -  	addr(Unimplemented)              ; $00b4 proc
   58 00:481A 1F 40 -  -  	addr(Unimplemented)              ; $00b5 endproc
   59 00:481C 1F 40 -  -  	addr(Unimplemented)              ; $00b6 local
   60 00:481E 1F 40 -  -  	addr(Unimplemented)              ; $00b7 dim
   61 00:4820 D8 40 -  -  	addr(Command_REM)                ; $00b8 rem
   62 00:4822 1F 40 -  -  	addr(Unimplemented)              ; $00b9 let
   63 00:4824 1F 40 -  -  	addr(Unimplemented)              ; $00ba vdu
   64 00:4826 1F 40 -  -  	addr(Unimplemented)              ; $00bb print
   65 00:4828 1F 40 -  -  	addr(Unimplemented)              ; $00bc load
   66 00:482A 1F 40 -  -  	addr(Unimplemented)              ; $00bd save
   67 00:482C 1F 40 -  -  	addr(Unimplemented)              ; $00be list
   68 00:482E 3C 45 -  -  	addr(Command_NEW)                ; $00bf new
   69 00:4830 F3 40 -  -  	addr(Command_RUN)                ; $00c0 run
   70 00:4832 1F 40 -  -  	addr(Unimplemented)              ; $00c1 read
   71 00:4834 1F 40 -  -  	addr(Unimplemented)              ; $00c2 data
   72 00:4836 1F 40 -  -  	addr(Unimplemented)              ; $00c3 restore
   73 00:4838 AD 40 -  -  	addr(Command_ASSERT)             ; $00c4 assert
   74 00:483A 03 45 -  -  	addr(Command_CLEAR)              ; $00c5 clear
   75 00:483C C0 40 -  -  	addr(Command_END)                ; $00c6 end
   76 00:483E 50 41 -  -  	addr(Command_STOP)               ; $00c7 stop
   77 00:4840 -  -  -  -  ;
   78 00:4840 -  -  -  -  ;	Vectors for set 1
   79 00:4840 -  -  -  -  ;
   80 00:4840 -  -  -  -  VectorsSet1:
   81 00:4840 -  -  -  -  ;
   82 00:4840 -  -  -  -  ;	Vectors for set 2
   83 00:4840 -  -  -  -  ;
   84 00:4840 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   48 00:4840 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:4840 -  -  -  -  ; ***************************************************************************************
    2 00:4840 -  -  -  -  ; ***************************************************************************************
    3 00:4840 -  -  -  -  ;
    4 00:4840 -  -  -  -  ;		Name : 		idivide.asm
    5 00:4840 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4840 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4840 -  -  -  -  ;		Reviewed :	No
    8 00:4840 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:4840 -  -  -  -  ;
   10 00:4840 -  -  -  -  ; ***************************************************************************************
   11 00:4840 -  -  -  -  ; ***************************************************************************************
   12 00:4840 -  -  -  -  
   13 00:4840 -  -  -  -  ; ***************************************************************************************
   14 00:4840 -  -  -  -  ;
   15 00:4840 -  -  -  -  ;								Unsigned integer divide
   16 00:4840 -  -  -  -  ;
   17 00:4840 -  -  -  -  ; ***************************************************************************************
   18 00:4840 -  -  -  -  
   19 00:4840 -  -  -  -  Int32UDivide:
   20 00:4840 37 -  -  -  		scf
   21 00:4841 C3 7F 48 -  		jp 		_I32UnsignedDivide		
   22 00:4844 -  -  -  -  
   23 00:4844 -  -  -  -  ; ***************************************************************************************
   24 00:4844 -  -  -  -  ;
   25 00:4844 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:4844 -  -  -  -  ;
   27 00:4844 -  -  -  -  ; ***************************************************************************************
   28 00:4844 -  -  -  -  
   29 00:4844 -  -  -  -  Int32SDivide:
   30 00:4844 37 -  -  -  		scf
   31 00:4845 18 01 -  -  		jr 		_I32SDivide
   32 00:4847 -  -  -  -  Int32Modulus:
   33 00:4847 AF -  -  -  		xor 	a
   34 00:4848 -  -  -  -  _I32SDivide:
   35 00:4848 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:4849 F5 -  -  -  		push 	af
   37 00:484A 08 -  -  -  		ex 		af,af'
   38 00:484B -  -  -  -  
   39 00:484B D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:484C D9 -  -  -  		exx
   41 00:484D D5 -  -  -  		push 	de
   42 00:484E D9 -  -  -  		exx
   43 00:484F -  -  -  -  
   44 00:484F F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:4850 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:4851 CD 6D 48 -  		call 	_I32CheckHLSignSwap
   47 00:4854 CD 6D 48 -  		call 	_I32CheckHLSignSwap
   48 00:4857 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:4858 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:4859 F5 -  -  -  		push 	af
   51 00:485A CD 7F 48 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:485D F1 -  -  -  		pop 	af 							; get function back
   53 00:485E 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:4860 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:4861 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:4863 C4 C9 49 -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:4866 -  -  -  -  _I32SDExit:
   58 00:4866 D9 -  -  -  		exx 								; restore DE'DE
   59 00:4867 D1 -  -  -  		pop 	de
   60 00:4868 D9 -  -  -  		exx
   61 00:4869 D1 -  -  -  		pop 	de
   62 00:486A F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:486B 08 -  -  -  		ex 		af,af'
   64 00:486C C9 -  -  -  		ret
   65 00:486D -  -  -  -  
   66 00:486D -  -  -  -  
   67 00:486D -  -  -  -  _I32CheckHLSignSwap:
   68 00:486D D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:486E CB 7C -  -  		bit 	7,h
   70 00:4870 D9 -  -  -  		exx
   71 00:4871 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:4873 -  -  -  -  		;
   73 00:4873 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:4875 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:4876 CD C9 49 -  		call 	Int32Negate 				
   76 00:4879 F1 -  -  -  		pop 	af
   77 00:487A -  -  -  -  _I32CHSPositive:
   78 00:487A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:487B EB -  -  -  		ex 		de,hl
   80 00:487C D9 -  -  -  		exx		
   81 00:487D EB -  -  -  		ex 		de,hl
   82 00:487E C9 -  -  -  		ret
   83 00:487F -  -  -  -  
   84 00:487F -  -  -  -  ; ***************************************************************************************
   85 00:487F -  -  -  -  ;
   86 00:487F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:487F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:487F -  -  -  -  ;
   89 00:487F -  -  -  -  ; ***************************************************************************************
   90 00:487F -  -  -  -  
   91 00:487F -  -  -  -  _I32UnsignedDivide:
   92 00:487F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:4880 D5 -  -  -  		push 	de
   94 00:4881 D9 -  -  -  		exx
   95 00:4882 C5 -  -  -  		push 	bc
   96 00:4883 D5 -  -  -  		push 	de 							
   97 00:4884 D9 -  -  -  		exx
   98 00:4885 -  -  -  -  
   99 00:4885 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:4886 -  -  -  -  
  101 00:4886 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:4887 B3 -  -  -  		or 		e
  103 00:4888 D9 -  -  -  		exx
  104 00:4889 B2 -  -  -  		or 		d
  105 00:488A B3 -  -  -  		or 		e
  106 00:488B D9 -  -  -  		exx
  107 00:488C CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:488F -  -  -  -  
  109 00:488F -  -  -  -  
  110 00:488F 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4890 4D -  -  -  		ld		c,l
  112 00:4891 21 00 00 -  		ld 		hl,$0000
  113 00:4894 D9 -  -  -  		exx
  114 00:4895 44 -  -  -  		ld 		b,h
  115 00:4896 4D -  -  -  		ld		c,l
  116 00:4897 21 00 00 -  		ld 		hl,$0000
  117 00:489A D9 -  -  -  		exx
  118 00:489B -  -  -  -  
  119 00:489B 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:489D -  -  -  -  _I32DivideLoop:
  121 00:489D F5 -  -  -  		push 	af
  122 00:489E -  -  -  -  
  123 00:489E CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:48A0 CB 10 -  -  		rl 		b
  125 00:48A2 D9 -  -  -  		exx
  126 00:48A3 CB 11 -  -  		rl 		c
  127 00:48A5 CB 10 -  -  		rl 		b
  128 00:48A7 D9 -  -  -  		exx
  129 00:48A8 CB 15 -  -  		rl 		l
  130 00:48AA CB 14 -  -  		rl 		h
  131 00:48AC D9 -  -  -  		exx
  132 00:48AD CB 15 -  -  		rl 		l
  133 00:48AF CB 14 -  -  		rl 		h
  134 00:48B1 D9 -  -  -  		exx
  135 00:48B2 -  -  -  -  
  136 00:48B2 CD 6F 49 -  		call 	Int32Subtract 				; A = A - M
  137 00:48B5 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:48B7 -  -  -  -  
  139 00:48B7 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:48B8 18 03 -  -  		jr 		_I32Next
  141 00:48BA -  -  -  -  
  142 00:48BA -  -  -  -  _I32Borrow:
  143 00:48BA CD 69 49 -  		call 	Int32Add 					; A = A + M
  144 00:48BD -  -  -  -  _I32Next:
  145 00:48BD F1 -  -  -  		pop 	af
  146 00:48BE 3D -  -  -  		dec 	a
  147 00:48BF 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:48C1 -  -  -  -  
  149 00:48C1 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:48C2 -  -  -  -  
  151 00:48C2 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:48C3 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:48C5 -  -  -  -  
  154 00:48C5 60 -  -  -  		ld  	h,b
  155 00:48C6 69 -  -  -  		ld 		l,c
  156 00:48C7 D9 -  -  -  		exx
  157 00:48C8 60 -  -  -  		ld  	h,b
  158 00:48C9 69 -  -  -  		ld 		l,c
  159 00:48CA D9 -  -  -  		exx
  160 00:48CB -  -  -  -  _I32Modulus1:		
  161 00:48CB D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:48CC D1 -  -  -  		pop 	de
  163 00:48CD C1 -  -  -  		pop 	bc
  164 00:48CE D9 -  -  -  		exx
  165 00:48CF D1 -  -  -  		pop 	de
  166 00:48D0 C1 -  -  -  		pop 	bc
  167 00:48D1 C9 -  -  -  		ret
  168 00:48D2 -  -  -  -  
  169 00:48D2 -  -  -  -  ; ***************************************************************************************
  170 00:48D2 -  -  -  -  ;
  171 00:48D2 -  -  -  -  ;									Changes and Updates
  172 00:48D2 -  -  -  -  ;
  173 00:48D2 -  -  -  -  ; ***************************************************************************************
  174 00:48D2 -  -  -  -  ;
  175 00:48D2 -  -  -  -  ;		Date			Notes
  176 00:48D2 -  -  -  -  ;		==== 			=====
  177 00:48D2 -  -  -  -  ;
  178 00:48D2 -  -  -  -  ; ***************************************************************************************
  179 00:48D2 -  -  -  -  		
Listing for file "_build.asm"
   49 00:48D2 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:48D2 -  -  -  -  ; ***************************************************************************************
    2 00:48D2 -  -  -  -  ; ***************************************************************************************
    3 00:48D2 -  -  -  -  ;
    4 00:48D2 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:48D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:48D2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:48D2 -  -  -  -  ;		Reviewed :	No
    8 00:48D2 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:48D2 -  -  -  -  ;
   10 00:48D2 -  -  -  -  ; ***************************************************************************************
   11 00:48D2 -  -  -  -  ; ***************************************************************************************
   12 00:48D2 -  -  -  -  
   13 00:48D2 -  -  -  -  ; ***************************************************************************************
   14 00:48D2 -  -  -  -  ;
   15 00:48D2 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:48D2 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:48D2 -  -  -  -  ;
   18 00:48D2 -  -  -  -  ; ***************************************************************************************
   19 00:48D2 -  -  -  -  
   20 00:48D2 -  -  -  -  Int32FromString:
   21 00:48D2 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:48D3 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:48D4 D5 -  -  -  		push 	de
   24 00:48D5 D9 -  -  -  		exx
   25 00:48D6 D5 -  -  -  		push 	de
   26 00:48D7 -  -  -  -  
   27 00:48D7 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:48DA 11 00 00 -  		ld 		de,$0000
   29 00:48DD D9 -  -  -  		exx
   30 00:48DE 21 00 00 -  		ld 		hl,$0000
   31 00:48E1 11 00 00 -  		ld 		de,$0000
   32 00:48E4 D9 -  -  -  		exx
   33 00:48E5 -  -  -  -  
   34 00:48E5 5F -  -  -  		ld 		e,a 						; base in E
   35 00:48E6 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:48E8 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:48EA ED 44 -  -  		neg 		 						; fix up the base
   38 00:48EC 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:48ED -  -  -  -  		;
   40 00:48ED 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:48EE F5 -  -  -  		push 	af
   42 00:48EF FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:48F1 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:48F2 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:48F4 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:48F5 18 01 -  -  		jr 		_I32FSMain
   47 00:48F7 -  -  -  -  _I32FSNotSigned:		
   48 00:48F7 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:48F8 -  -  -  -  		;
   50 00:48F8 -  -  -  -  		; 		Main conversion loop.
   51 00:48F8 -  -  -  -  		; 		
   52 00:48F8 -  -  -  -  _I32FSMain:		
   53 00:48F8 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:48F9 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:48FB 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:48FD D6 20 -  -  		sub 	32
   57 00:48FF -  -  -  -  _I32FSNotLower:
   58 00:48FF FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4901 38 21 -  -  		jr 		c,_I32FSExit
   60 00:4903 FE 3A -  -  		cp 		'9'+1
   61 00:4905 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:4907 FE 41 -  -  		cp 		'A'
   63 00:4909 38 19 -  -  		jr 		c,_I32FSExit
   64 00:490B FE 47 -  -  		cp 		'F'+1
   65 00:490D 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:490F D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4911 -  -  -  -  _I32FSOkay:
   68 00:4911 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:4913 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:4914 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:4916 03 -  -  -  		inc 	bc 							; consume character
   72 00:4917 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4918 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4919 CD 33 49 -  		call 	Int32Multiply 				; result *= base
   75 00:491C F1 -  -  -  		pop 	af 							; additive in DE
   76 00:491D 5F -  -  -  		ld 		e,a
   77 00:491E CD 69 49 -  		call 	Int32Add 					; and add it.
   78 00:4921 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:4922 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:4924 -  -  -  -  
   81 00:4924 -  -  -  -  _I32FSExit:
   82 00:4924 F1 -  -  -  		pop 	af 							; get sign back
   83 00:4925 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:4927 CC C9 49 -  		call 	z,Int32Negate
   85 00:492A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:492B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:492C D9 -  -  -  		exx
   88 00:492D D1 -  -  -  		pop 	de
   89 00:492E D9 -  -  -  		exx
   90 00:492F C1 -  -  -  		pop 	bc
   91 00:4930 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:4932 C9 -  -  -  		ret				
   93 00:4933 -  -  -  -  
   94 00:4933 -  -  -  -  ; ***************************************************************************************
   95 00:4933 -  -  -  -  ;
   96 00:4933 -  -  -  -  ;									Changes and Updates
   97 00:4933 -  -  -  -  ;
   98 00:4933 -  -  -  -  ; ***************************************************************************************
   99 00:4933 -  -  -  -  ;
  100 00:4933 -  -  -  -  ;		Date			Notes
  101 00:4933 -  -  -  -  ;		==== 			=====
  102 00:4933 -  -  -  -  ;
  103 00:4933 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:4933 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:4933 -  -  -  -  ; ***************************************************************************************
    2 00:4933 -  -  -  -  ; ***************************************************************************************
    3 00:4933 -  -  -  -  ;
    4 00:4933 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:4933 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4933 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4933 -  -  -  -  ;		Reviewed :	No
    8 00:4933 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:4933 -  -  -  -  ;
   10 00:4933 -  -  -  -  ; ***************************************************************************************
   11 00:4933 -  -  -  -  ; ***************************************************************************************
   12 00:4933 -  -  -  -  
   13 00:4933 -  -  -  -  Int32Multiply:
   14 00:4933 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:4934 D5 -  -  -  		push 	de
   16 00:4935 44 -  -  -  		ld 		b,h
   17 00:4936 4D -  -  -  		ld 		c,l
   18 00:4937 21 00 00 -  		ld 		hl,$0000
   19 00:493A -  -  -  -  
   20 00:493A D9 -  -  -  		exx
   21 00:493B C5 -  -  -  		push 	bc
   22 00:493C D5 -  -  -  		push 	de
   23 00:493D 44 -  -  -  		ld 		b,h
   24 00:493E 4D -  -  -  		ld 		c,l
   25 00:493F 21 00 00 -  		ld 		hl,$0000		
   26 00:4942 D9 -  -  -  		exx
   27 00:4943 -  -  -  -  
   28 00:4943 -  -  -  -  _I32MultiplyLoop:
   29 00:4943 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:4945 C4 69 49 -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:4948 -  -  -  -  		;
   32 00:4948 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:4949 CB 38 -  -  		srl 	b
   34 00:494B CB 19 -  -  		rr 		c
   35 00:494D D9 -  -  -  		exx
   36 00:494E CB 18 -  -  		rr 		b
   37 00:4950 CB 19 -  -  		rr 		c
   38 00:4952 -  -  -  -  		;
   39 00:4952 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:4954 CB 12 -  -  		rl 		d
   41 00:4956 D9 -  -  -  		exx
   42 00:4957 CB 13 -  -  		rl 		e
   43 00:4959 CB 12 -  -  		rl 		d
   44 00:495B -  -  -  -  
   45 00:495B 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:495C B1 -  -  -  		or 		c
   47 00:495D D9 -  -  -  		exx
   48 00:495E B0 -  -  -  		or 		b
   49 00:495F B1 -  -  -  		or 		c
   50 00:4960 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:4962 -  -  -  -  
   52 00:4962 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:4963 D1 -  -  -  		pop 	de
   54 00:4964 C1 -  -  -  		pop 	bc
   55 00:4965 D9 -  -  -  		exx
   56 00:4966 D1 -  -  -  		pop 	de
   57 00:4967 C1 -  -  -  		pop 	bc
   58 00:4968 C9 -  -  -  		ret
   59 00:4969 -  -  -  -  
   60 00:4969 -  -  -  -  ; ***************************************************************************************
   61 00:4969 -  -  -  -  ;
   62 00:4969 -  -  -  -  ;									Changes and Updates
   63 00:4969 -  -  -  -  ;
   64 00:4969 -  -  -  -  ; ***************************************************************************************
   65 00:4969 -  -  -  -  ;
   66 00:4969 -  -  -  -  ;		Date			Notes
   67 00:4969 -  -  -  -  ;		==== 			=====
   68 00:4969 -  -  -  -  ;
   69 00:4969 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:4969 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:4969 -  -  -  -  ; ***************************************************************************************
    2 00:4969 -  -  -  -  ; ***************************************************************************************
    3 00:4969 -  -  -  -  ;
    4 00:4969 -  -  -  -  ;		Name : 		isimple.asm
    5 00:4969 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4969 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4969 -  -  -  -  ;		Reviewed :	No
    8 00:4969 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:4969 -  -  -  -  ;
   10 00:4969 -  -  -  -  ; ***************************************************************************************
   11 00:4969 -  -  -  -  ; ***************************************************************************************
   12 00:4969 -  -  -  -  
   13 00:4969 -  -  -  -  ; ***************************************************************************************
   14 00:4969 -  -  -  -  ;
   15 00:4969 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:4969 -  -  -  -  ;
   17 00:4969 -  -  -  -  ; ***************************************************************************************
   18 00:4969 -  -  -  -  
   19 00:4969 -  -  -  -  Int32Add:
   20 00:4969 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:496A D9 -  -  -  		exx
   22 00:496B ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:496D D9 -  -  -  		exx
   24 00:496E C9 -  -  -  		ret
   25 00:496F -  -  -  -  
   26 00:496F -  -  -  -  ; ***************************************************************************************
   27 00:496F -  -  -  -  ;
   28 00:496F -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:496F -  -  -  -  ;
   30 00:496F -  -  -  -  ; ***************************************************************************************
   31 00:496F -  -  -  -  
   32 00:496F -  -  -  -  Int32Subtract:
   33 00:496F AF -  -  -  		xor 	a 							; clear carry
   34 00:4970 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:4972 D9 -  -  -  		exx
   36 00:4973 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:4975 D9 -  -  -  		exx
   38 00:4976 C9 -  -  -  		ret
   39 00:4977 -  -  -  -  
   40 00:4977 -  -  -  -  ; ***************************************************************************************
   41 00:4977 -  -  -  -  ;
   42 00:4977 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:4977 -  -  -  -  ;
   44 00:4977 -  -  -  -  ; ***************************************************************************************
   45 00:4977 -  -  -  -  
   46 00:4977 -  -  -  -  Int32And:
   47 00:4977 D9 -  -  -  		exx
   48 00:4978 CD 7C 49 -  		call 	_I32AndHLDE
   49 00:497B D9 -  -  -  		exx
   50 00:497C -  -  -  -  _I32AndHLDE:		
   51 00:497C 7C -  -  -  		ld 		a,h
   52 00:497D A2 -  -  -  		and 	d
   53 00:497E 67 -  -  -  		ld 		h,a
   54 00:497F 7D -  -  -  		ld 		a,l
   55 00:4980 A3 -  -  -  		and 	e
   56 00:4981 6F -  -  -  		ld 		l,a
   57 00:4982 C9 -  -  -  		ret
   58 00:4983 -  -  -  -  
   59 00:4983 -  -  -  -  ; ***************************************************************************************
   60 00:4983 -  -  -  -  ;
   61 00:4983 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:4983 -  -  -  -  ;
   63 00:4983 -  -  -  -  ; ***************************************************************************************
   64 00:4983 -  -  -  -  
   65 00:4983 -  -  -  -  Int32Or:
   66 00:4983 D9 -  -  -  		exx
   67 00:4984 CD 88 49 -  		call 	_I32OrHLDE
   68 00:4987 D9 -  -  -  		exx
   69 00:4988 -  -  -  -  _I32OrHLDE:		
   70 00:4988 7C -  -  -  		ld 		a,h
   71 00:4989 B2 -  -  -  		or 		d
   72 00:498A 67 -  -  -  		ld 		h,a
   73 00:498B 7D -  -  -  		ld 		a,l
   74 00:498C B3 -  -  -  		or 		e
   75 00:498D 6F -  -  -  		ld 		l,a
   76 00:498E C9 -  -  -  		ret
   77 00:498F -  -  -  -  
   78 00:498F -  -  -  -  ; ***************************************************************************************
   79 00:498F -  -  -  -  ;
   80 00:498F -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:498F -  -  -  -  ;
   82 00:498F -  -  -  -  ; ***************************************************************************************
   83 00:498F -  -  -  -  
   84 00:498F -  -  -  -  Int32Xor:
   85 00:498F D9 -  -  -  		exx
   86 00:4990 CD 94 49 -  		call 	_I32XorHLDE
   87 00:4993 D9 -  -  -  		exx
   88 00:4994 -  -  -  -  _I32XorHLDE:		
   89 00:4994 7C -  -  -  		ld 		a,h
   90 00:4995 AA -  -  -  		xor 	d
   91 00:4996 67 -  -  -  		ld 		h,a
   92 00:4997 7D -  -  -  		ld 		a,l
   93 00:4998 AB -  -  -  		xor 	e
   94 00:4999 6F -  -  -  		ld 		l,a
   95 00:499A C9 -  -  -  		ret
   96 00:499B -  -  -  -  
   97 00:499B -  -  -  -  ; ***************************************************************************************
   98 00:499B -  -  -  -  ;
   99 00:499B -  -  -  -  ;								 Check if HL'HL zero
  100 00:499B -  -  -  -  ;
  101 00:499B -  -  -  -  ; ***************************************************************************************
  102 00:499B -  -  -  -  
  103 00:499B -  -  -  -  Int32Zero:
  104 00:499B D9 -  -  -  		exx
  105 00:499C 7D -  -  -  		ld 		a,l
  106 00:499D B4 -  -  -  		or 		h
  107 00:499E D9 -  -  -  		exx
  108 00:499F B5 -  -  -  		or 		l
  109 00:49A0 B4 -  -  -  		or 		h
  110 00:49A1 C9 -  -  -  		ret
  111 00:49A2 -  -  -  -  
  112 00:49A2 -  -  -  -  ; ***************************************************************************************
  113 00:49A2 -  -  -  -  ;
  114 00:49A2 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:49A2 -  -  -  -  ;
  116 00:49A2 -  -  -  -  ; ***************************************************************************************
  117 00:49A2 -  -  -  -  
  118 00:49A2 -  -  -  -  Int32Compare:
  119 00:49A2 E5 -  -  -  		push 	hl 							; save HL
  120 00:49A3 AF -  -  -  		xor 	a 							; clear carry
  121 00:49A4 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:49A6 D9 -  -  -  		exx
  123 00:49A7 E5 -  -  -  		push 	hl 							; save HL'
  124 00:49A8 ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:49AA -  -  -  -  		;
  126 00:49AA 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:49AB E2 B2 49 -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:49AE 78 -  -  -  		ld 		a,b
  129 00:49AF EE 80 -  -  		xor 	$80
  130 00:49B1 47 -  -  -  		ld 		b,a
  131 00:49B2 -  -  -  -  _I32CNoOverflow:
  132 00:49B2 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:49B3 B5 -  -  -  		or 		l
  134 00:49B4 D9 -  -  -  		exx 
  135 00:49B5 B4 -  -  -  		or 		h
  136 00:49B6 B5 -  -  -  		or 		l
  137 00:49B7 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:49B9 -  -  -  -  		;
  139 00:49B9 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:49BA CB 78 -  -  		bit 	7,b
  141 00:49BC D9 -  -  -  		exx
  142 00:49BD 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:49BF 28 02 -  -  		jr 		z,_I32NotPos
  144 00:49C1 3E FF -  -  		ld 		a,$FF
  145 00:49C3 -  -  -  -  _I32NotPos:
  146 00:49C3 D9 -  -  -  		exx
  147 00:49C4 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:49C5 D9 -  -  -  		exx
  149 00:49C6 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:49C7 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:49C8 C9 -  -  -  		ret
  152 00:49C9 -  -  -  -  
  153 00:49C9 -  -  -  -  ; ***************************************************************************************
  154 00:49C9 -  -  -  -  ;
  155 00:49C9 -  -  -  -  ;										Negate HL'HL
  156 00:49C9 -  -  -  -  ;
  157 00:49C9 -  -  -  -  ; ***************************************************************************************
  158 00:49C9 -  -  -  -  
  159 00:49C9 -  -  -  -  Int32Negate:
  160 00:49C9 AF -  -  -  		xor 	a
  161 00:49CA CD D3 49 -  		call 	_I32NSubtract
  162 00:49CD D9 -  -  -  		exx
  163 00:49CE CD D3 49 -  		call 	_I32NSubtract
  164 00:49D1 D9 -  -  -  		exx
  165 00:49D2 C9 -  -  -  		ret
  166 00:49D3 -  -  -  -  _I32NSubtract:
  167 00:49D3 D5 -  -  -  		push 	de
  168 00:49D4 EB -  -  -  		ex 		de,hl
  169 00:49D5 21 00 00 -  		ld 		hl,$0000
  170 00:49D8 ED 52 -  -  		zm_sbc_hlde_16		
  171 00:49DA D1 -  -  -  		pop 	de
  172 00:49DB C9 -  -  -  		ret
  173 00:49DC -  -  -  -  		
  174 00:49DC -  -  -  -  ; ***************************************************************************************
  175 00:49DC -  -  -  -  ;
  176 00:49DC -  -  -  -  ;									Changes and Updates
  177 00:49DC -  -  -  -  ;
  178 00:49DC -  -  -  -  ; ***************************************************************************************
  179 00:49DC -  -  -  -  ;
  180 00:49DC -  -  -  -  ;		Date			Notes
  181 00:49DC -  -  -  -  ;		==== 			=====
  182 00:49DC -  -  -  -  ;
  183 00:49DC -  -  -  -  ; ***************************************************************************************
  184 00:49DC -  -  -  -  		
Listing for file "_build.asm"
   52 00:49DC -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:49DC -  -  -  -  ; ***************************************************************************************
    2 00:49DC -  -  -  -  ; ***************************************************************************************
    3 00:49DC -  -  -  -  ;
    4 00:49DC -  -  -  -  ;		Name : 		itostring.asm
    5 00:49DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:49DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:49DC -  -  -  -  ;		Reviewed :	No
    8 00:49DC -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:49DC -  -  -  -  ;
   10 00:49DC -  -  -  -  ; ***************************************************************************************
   11 00:49DC -  -  -  -  ;
   12 00:49DC -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:49DC -  -  -  -  ;
   14 00:49DC -  -  -  -  ; ***************************************************************************************
   15 00:49DC -  -  -  -  
   16 00:49DC -  -  -  -  Int32ToString:
   17 00:49DC C5 -  -  -  		push 	bc 							; save string start
   18 00:49DD D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:49DE E5 -  -  -  		push 	hl
   20 00:49DF 11 00 00 -  		ld	 	de,$0000
   21 00:49E2 D9 -  -  -  		exx
   22 00:49E3 D5 -  -  -  		push 	de
   23 00:49E4 E5 -  -  -  		push 	hl
   24 00:49E5 11 00 00 -  		ld 		de,$000
   25 00:49E8 D9 -  -  -  		exx
   26 00:49E9 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:49EA -  -  -  -  		;
   28 00:49EA CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:49EC 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:49EE ED 44 -  -  		neg 								; negate base and put in E
   31 00:49F0 5F -  -  -  		ld 		e,a
   32 00:49F1 -  -  -  -  		;
   33 00:49F1 D9 -  -  -  		exx 								; is it -ve ?
   34 00:49F2 CB 7C -  -  		bit 	7,h
   35 00:49F4 D9 -  -  -  		exx
   36 00:49F5 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:49F7 -  -  -  -  		;
   38 00:49F7 CD C9 49 -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:49FA -  -  -  -  		;
   40 00:49FA 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:49FC 02 -  -  -  		ld 		(bc),a
   42 00:49FD 03 -  -  -  		inc 	bc
   43 00:49FE -  -  -  -  _I32TSNotNegative:	
   44 00:49FE CD 0B 4A -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4A01 -  -  -  -  _I32TSExit:
   46 00:4A01 AF -  -  -  		xor 	a  							; write the end of string code
   47 00:4A02 02 -  -  -  		ld 		(bc),a 
   48 00:4A03 -  -  -  -  
   49 00:4A03 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:4A04 E1 -  -  -  		pop 	hl
   51 00:4A05 D1 -  -  -  		pop 	de
   52 00:4A06 D9 -  -  -  		exx
   53 00:4A07 E1 -  -  -  		pop 	hl
   54 00:4A08 D1 -  -  -  		pop 	de
   55 00:4A09 C1 -  -  -  		pop 	bc
   56 00:4A0A C9 -  -  -  		ret
   57 00:4A0B -  -  -  -  
   58 00:4A0B -  -  -  -  _I32RecursiveConvert:
   59 00:4A0B CD 40 48 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4A0E F5 -  -  -  		push 	af 							; save remainder
   61 00:4A0F CD 9B 49 -  		call 	Int32Zero		 			; check result is non zero
   62 00:4A12 C4 0B 4A -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:4A15 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:4A16 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:4A18 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4A1A C6 07 -  -  		add 	a,7
   67 00:4A1C -  -  -  -  _I32NotHex:
   68 00:4A1C C6 30 -  -  		add 	a,48
   69 00:4A1E 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4A1F 03 -  -  -  		inc 	bc
   71 00:4A20 C9 -  -  -  		ret		
   72 00:4A21 -  -  -  -  
   73 00:4A21 -  -  -  -  ; ***************************************************************************************
   74 00:4A21 -  -  -  -  ;
   75 00:4A21 -  -  -  -  ;									Changes and Updates
   76 00:4A21 -  -  -  -  ;
   77 00:4A21 -  -  -  -  ; ***************************************************************************************
   78 00:4A21 -  -  -  -  ;
   79 00:4A21 -  -  -  -  ;		Date			Notes
   80 00:4A21 -  -  -  -  ;		==== 			=====
   81 00:4A21 -  -  -  -  ;
   82 00:4A21 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:4A21 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4A21 -  -  -  -  ; ***************************************************************************************
    2 00:4A21 -  -  -  -  ; ***************************************************************************************
    3 00:4A21 -  -  -  -  ;
    4 00:4A21 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4A21 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A21 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A21 -  -  -  -  ;		Reviewed :	No
    8 00:4A21 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4A21 -  -  -  -  ;
   10 00:4A21 -  -  -  -  ; ***************************************************************************************
   11 00:4A21 -  -  -  -  ; ***************************************************************************************
   12 00:4A21 -  -  -  -  
   13 00:4A21 -  -  -  -  #ifdef AQUARIUS
   14 00:4A21 -  -  -  -  
   15 00:4A21 -  -  -  -  ; ***************************************************************************************
   16 00:4A21 -  -  -  -  ;
   17 00:4A21 -  -  -  -  ;								Initialise system stuff
   18 00:4A21 -  -  -  -  ;
   19 00:4A21 -  -  -  -  ; ***************************************************************************************
   20 00:4A21 -  -  -  -  
   21 00:4A21 -  -  -  -  SYSInitialise:
   22 00:4A21 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:4A23 CD 29 4A -  	call 	SYSPrintChar
   24 00:4A26 C9 -  -  -  	ret
   25 00:4A27 -  -  -  -  
   26 00:4A27 -  -  -  -  ; ***************************************************************************************
   27 00:4A27 -  -  -  -  ;
   28 00:4A27 -  -  -  -  ;								Terminate system stuff
   29 00:4A27 -  -  -  -  ;
   30 00:4A27 -  -  -  -  ; ***************************************************************************************
   31 00:4A27 -  -  -  -  
   32 00:4A27 -  -  -  -  SYSTerminate:
   33 00:4A27 18 FE -  -  	jr 		SYSTerminate
   34 00:4A29 -  -  -  -  
   35 00:4A29 -  -  -  -  ; ***************************************************************************************
   36 00:4A29 -  -  -  -  ;
   37 00:4A29 -  -  -  -  ;								Print A character
   38 00:4A29 -  -  -  -  ;
   39 00:4A29 -  -  -  -  ; ***************************************************************************************
   40 00:4A29 -  -  -  -  
   41 00:4A29 -  -  -  -  SYSPrintChar:
   42 00:4A29 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:4A2A C5 -  -  -  	push 	bc
   44 00:4A2B D5 -  -  -  	push 	de
   45 00:4A2C E5 -  -  -  	push 	hl
   46 00:4A2D DD E5 -  -  	push 	ix
   47 00:4A2F FD E5 -  -  	push 	iy
   48 00:4A31 D9 -  -  -  	exx
   49 00:4A32 C5 -  -  -  	push 	bc
   50 00:4A33 D5 -  -  -  	push 	de
   51 00:4A34 E5 -  -  -  	push 	hl
   52 00:4A35 CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:4A38 E1 -  -  -  	pop 	hl
   54 00:4A39 D1 -  -  -  	pop 	de
   55 00:4A3A C1 -  -  -  	pop 	bc
   56 00:4A3B D9 -  -  -  	exx
   57 00:4A3C FD E1 -  -  	pop 	iy
   58 00:4A3E DD E1 -  -  	pop 	ix
   59 00:4A40 E1 -  -  -  	pop 	hl
   60 00:4A41 D1 -  -  -  	pop 	de
   61 00:4A42 C1 -  -  -  	pop 	bc
   62 00:4A43 F1 -  -  -  	pop 	af
   63 00:4A44 C9 -  -  -  	ret		
   64 00:4A45 -  -  -  -  
   65 00:4A45 -  -  -  -  ; ***************************************************************************************
   66 00:4A45 -  -  -  -  ;
   67 00:4A45 -  -  -  -  ;									Print Newline
   68 00:4A45 -  -  -  -  ;
   69 00:4A45 -  -  -  -  ; ***************************************************************************************
   70 00:4A45 -  -  -  -  
   71 00:4A45 -  -  -  -  SYSPrintCRLF:
   72 00:4A45 F5 -  -  -  	push 	af
   73 00:4A46 3E 0D -  -  	ld 		a,13
   74 00:4A48 CD 29 4A -  	call 	SYSPrintChar
   75 00:4A4B 3E 0A -  -  	ld 		a,10
   76 00:4A4D CD 29 4A -  	call 	SYSPrintChar
   77 00:4A50 F1 -  -  -  	pop 	af
   78 00:4A51 C9 -  -  -  	ret
   79 00:4A52 -  -  -  -  
   80 00:4A52 -  -  -  -  #endif
   81 00:4A52 -  -  -  -  
   82 00:4A52 -  -  -  -  ; ***************************************************************************************
   83 00:4A52 -  -  -  -  ;
   84 00:4A52 -  -  -  -  ;									Changes and Updates
   85 00:4A52 -  -  -  -  ;
   86 00:4A52 -  -  -  -  ; ***************************************************************************************
   87 00:4A52 -  -  -  -  ;
   88 00:4A52 -  -  -  -  ;		Date			Notes
   89 00:4A52 -  -  -  -  ;		==== 			=====
   90 00:4A52 -  -  -  -  ;
   91 00:4A52 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:4A52 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:4A52 -  -  -  -  ; ***************************************************************************************
    2 00:4A52 -  -  -  -  ; ***************************************************************************************
    3 00:4A52 -  -  -  -  ;
    4 00:4A52 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:4A52 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A52 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A52 -  -  -  -  ;		Reviewed :	No
    8 00:4A52 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:4A52 -  -  -  -  ;
   10 00:4A52 -  -  -  -  ; ***************************************************************************************
   11 00:4A52 -  -  -  -  ; ***************************************************************************************
   12 00:4A52 -  -  -  -  
   13 00:4A52 -  -  -  -  #ifdef CLEANEZ80
   14 00:4A52             
   15 00:4A52             ; ***************************************************************************************
   16 00:4A52             ;
   17 00:4A52             ;								Initialise system stuff
   18 00:4A52             ;
   19 00:4A52             ; ***************************************************************************************
   20 00:4A52             
   21 00:4A52             SYSInitialise:
   22 00:4A52             	ret
   23 00:4A52             
   24 00:4A52             ; ***************************************************************************************
   25 00:4A52             ;
   26 00:4A52             ;								Terminate system stuff
   27 00:4A52             ;
   28 00:4A52             ; ***************************************************************************************
   29 00:4A52             
   30 00:4A52             SYSTerminate:
   31 00:4A52             	ret
   32 00:4A52             
   33 00:4A52             ; ***************************************************************************************
   34 00:4A52             ;
   35 00:4A52             ;								Print A character
   36 00:4A52             ;
   37 00:4A52             ; ***************************************************************************************
   38 00:4A52             
   39 00:4A52             SYSPrintChar:
   40 00:4A52             	ret		
   41 00:4A52             
   42 00:4A52             ; ***************************************************************************************
   43 00:4A52             ;
   44 00:4A52             ;									Print Newline
   45 00:4A52             ;
   46 00:4A52             ; ***************************************************************************************
   47 00:4A52             
   48 00:4A52             SYSPrintCRLF:
   49 00:4A52             	ret
   50 00:4A52             
   51 00:4A52             #endif
   52 00:4A52 -  -  -  -  
   53 00:4A52 -  -  -  -  ; ***************************************************************************************
   54 00:4A52 -  -  -  -  ;
   55 00:4A52 -  -  -  -  ;									Changes and Updates
   56 00:4A52 -  -  -  -  ;
   57 00:4A52 -  -  -  -  ; ***************************************************************************************
   58 00:4A52 -  -  -  -  ;
   59 00:4A52 -  -  -  -  ;		Date			Notes
   60 00:4A52 -  -  -  -  ;		==== 			=====
   61 00:4A52 -  -  -  -  ;
   62 00:4A52 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:4A52 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:4A52 -  -  -  -  ; ***************************************************************************************
    2 00:4A52 -  -  -  -  ; ***************************************************************************************
    3 00:4A52 -  -  -  -  ;
    4 00:4A52 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:4A52 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A52 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A52 -  -  -  -  ;		Reviewed :	No
    8 00:4A52 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:4A52 -  -  -  -  ;
   10 00:4A52 -  -  -  -  ; ***************************************************************************************
   11 00:4A52 -  -  -  -  ; ***************************************************************************************
   12 00:4A52 -  -  -  -  
   13 00:4A52 -  -  -  -  #ifdef TI84
   14 00:4A52             
   15 00:4A52             ; ***************************************************************************************
   16 00:4A52             ;
   17 00:4A52             ;								Initialise system stuff
   18 00:4A52             ;
   19 00:4A52             ; ***************************************************************************************
   20 00:4A52             
   21 00:4A52             SYSInitialise:
   22 00:4A52             	di
   23 00:4A52             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:4A52             	ld 		(_IYTemp84),iy
   25 00:4A52             	ret
   26 00:4A52             
   27 00:4A52             ; ***************************************************************************************
   28 00:4A52             ;
   29 00:4A52             ;								Terminate system stuff
   30 00:4A52             ;
   31 00:4A52             ; ***************************************************************************************
   32 00:4A52             
   33 00:4A52             SYSTerminate:
   34 00:4A52             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:4A52             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:4A52             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:4A52             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:4A52             	ei
   39 00:4A52             	ret 										; and exit.
   40 00:4A52             
   41 00:4A52             _StackTemp84:									; temp var for TI84 only.
   42 00:4A52             	.dw 	0,0
   43 00:4A52             _IYTemp84:
   44 00:4A52             	.dw 	0,0		
   45 00:4A52             
   46 00:4A52             ; ***************************************************************************************
   47 00:4A52             ;
   48 00:4A52             ;								Print A character
   49 00:4A52             ;
   50 00:4A52             ; ***************************************************************************************
   51 00:4A52             
   52 00:4A52             SYSPrintChar:
   53 00:4A52             	push 	af 									; we stack everything including alt registers
   54 00:4A52             	push 	bc
   55 00:4A52             	push 	de
   56 00:4A52             	push 	hl
   57 00:4A52             	push 	ix
   58 00:4A52             	push 	iy
   59 00:4A52             	exx
   60 00:4A52             	push 	bc
   61 00:4A52             	push 	de
   62 00:4A52             	push 	hl
   63 00:4A52             
   64 00:4A52             	ld 		iy,(_IYTemp84)
   65 00:4A52             	call 	_PutC 								; print A as character
   66 00:4A52             	di
   67 00:4A52             	ld 		(_IYTemp84),iy
   68 00:4A52             
   69 00:4A52             	pop 	hl
   70 00:4A52             	pop 	de
   71 00:4A52             	pop 	bc
   72 00:4A52             	exx
   73 00:4A52             	pop 	iy
   74 00:4A52             	pop 	ix
   75 00:4A52             	pop 	hl
   76 00:4A52             	pop 	de
   77 00:4A52             	pop 	bc
   78 00:4A52             	pop 	af
   79 00:4A52             	ret		
   80 00:4A52             
   81 00:4A52             ; ***************************************************************************************
   82 00:4A52             ;
   83 00:4A52             ;									Print Newline
   84 00:4A52             ;
   85 00:4A52             ; ***************************************************************************************
   86 00:4A52             
   87 00:4A52             SYSPrintCRLF:
   88 00:4A52             	push 	af 									; we stack everything including alt registers
   89 00:4A52             	push 	bc
   90 00:4A52             	push 	de
   91 00:4A52             	push 	hl
   92 00:4A52             	push 	ix
   93 00:4A52             	push 	iy
   94 00:4A52             	exx
   95 00:4A52             	push 	bc
   96 00:4A52             	push 	de
   97 00:4A52             	push 	hl
   98 00:4A52             
   99 00:4A52             	ld 		iy,(_IYTemp84)
  100 00:4A52             	call 	_newline
  101 00:4A52             	di
  102 00:4A52             	ld 		(_IYTemp84),iy
  103 00:4A52             
  104 00:4A52             	pop 	hl
  105 00:4A52             	pop 	de
  106 00:4A52             	pop 	bc
  107 00:4A52             	exx
  108 00:4A52             	pop 	iy
  109 00:4A52             	pop 	ix
  110 00:4A52             	pop 	hl
  111 00:4A52             	pop 	de
  112 00:4A52             	pop 	bc
  113 00:4A52             	pop 	af
  114 00:4A52             	ret
  115 00:4A52             
  116 00:4A52             #endif
  117 00:4A52 -  -  -  -  
  118 00:4A52 -  -  -  -  ; ***************************************************************************************
  119 00:4A52 -  -  -  -  ;
  120 00:4A52 -  -  -  -  ;									Changes and Updates
  121 00:4A52 -  -  -  -  ;
  122 00:4A52 -  -  -  -  ; ***************************************************************************************
  123 00:4A52 -  -  -  -  ;
  124 00:4A52 -  -  -  -  ;		Date			Notes
  125 00:4A52 -  -  -  -  ;		==== 			=====
  126 00:4A52 -  -  -  -  ;
  127 00:4A52 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:4A52 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:4A52 -  -  -  -  ; ***************************************************************************************
    2 00:4A52 -  -  -  -  ; ***************************************************************************************
    3 00:4A52 -  -  -  -  ;
    4 00:4A52 -  -  -  -  ;		Name : 		basic.asm
    5 00:4A52 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4A52 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4A52 -  -  -  -  ;		Reviewed :	No
    8 00:4A52 -  -  -  -  ;		Purpose :	Main program.
    9 00:4A52 -  -  -  -  ;
   10 00:4A52 -  -  -  -  ; ***************************************************************************************
   11 00:4A52 -  -  -  -  ; ***************************************************************************************
   12 00:4A52 -  -  -  -  
   13 00:4A52 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 00:4C00 -  -  -  -  TestInstance:
   15 00:4C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4C00 -  -  -  -  ;
    2 00:4C00 -  -  -  -  ;	This code automatically generated.
    3 00:4C00 -  -  -  -  ;
    4 00:4C00 -  -  -  -  TestProgram:
    5 00:4C00 22 01 00 B8 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B8 3F 0C 
              53 65 65 64 
              20 3D 20 38 
              37 32 39 36 
              0D 80 0E 03 
              00 C4 84 95 
              A0 89 50 A5 
              8F 41 4B 80 
              11 04 00 C4 
              9E 95 3F 03 
              6C 4E 4B 0D 
              A5 8F 41 6C 
              80 14 05 00 
              C4 8A 8A 41 
              7C 7B 49 7A 
              73 8F 41 7C 
              7B 49 7A 73 
              80 13 06 00 
              C4 94 43 47 
              51 57 42 4E 
              8F 43 47 51 
              57 42 4E 80 
              11 07 00 C4 
              94 61 64 72 
              51 5F 8F 61 
              64 72 51 5F 
              80 11 08 00 
              C4 9A 95 8A 
              4B 48 54 5D 
              63 A5 8F 8A 
              41 80 15 09 
              00 C4 9F 95 
              42 42 6A 70 
              6B 5E A5 8F 
              41 7D 55 4F 
              54 61 80 13 
              0A 00 C4 94 
              43 59 73 72 
              45 68 8F 43 
              59 73 72 45 
              68 80 11 0B 
              00 C4 9A 95 
              8A 7E 6F 4E 
              60 4E A5 8F 
              8A 41 80 15 
              0C 00 C4 99 
              95 41 6A 66 
              67 43 78 A5 
              8F 41 6A 66 
              67 43 78 80 
              1C 0D 00 C4 
              A4 95 3F 0A 
              31 31 33 35 
              37 37 38 38 
              30 38 0D A5 
              8F 41 43 6C 
              69 6F 78 80 
              0E 0E 00 C4 
              84 95 A0 89 
              50 A5 8F 41 
              4B 80 15 0F 
              00 C4 9F 95 
              41 57 5B 70 
              53 43 A5 8F 
              42 68 64 4F 
              6C 7C 80 1E 
              10 00 C4 A4 
              95 3F 0B 2D 
              31 35 39 37 
              36 31 39 31 
              39 31 0D A5 
              8F 8A 41 5F 
              4E 5B 6F 77 
              80 16 11 00 
              C4 99 95 8A 
              41 7C 7B 68 
              71 74 A5 8F 
              41 7C 7B 68 
              71 74 80 1C 
              12 00 C4 A4 
              95 3F 0A 2D 
              36 35 37 30 
              34 39 31 36 
              37 0D A5 8F 
              8A 67 4A 5C 
              59 4F 80 15 
              13 00 C4 9F 
              95 42 58 53 
              57 7D 45 A5 
              8F 41 67 6C 
              68 42 7A 80 
              0F 14 00 C4 
              9A 95 7F 55 
              68 7C 76 A5 
              8F 41 80 13 
              15 00 C4 83 
              95 A0 89 52 
              A5 8F 94 41 
              50 53 74 79 
              4D 80 11 16 
              00 C4 94 4C 
              56 68 5C 53 
              8F 4C 56 68 
              5C 53 80 0E 
              17 00 C4 84 
              95 A0 89 4F 
              A5 8F 41 4A 
              80 14 18 00 
              C4 8A 8A 41 
              5D 4B 47 5C 
              7C 8F 41 5D 
              4B 47 5C 7C 
              80 13 19 00 
              C4 83 95 A0 
              89 4E A5 8F 
              94 41 4C 52 
              74 69 49 80 
              15 1A 00 C4 
              98 95 3F 08 
              72 6D 6D 4A 
              66 71 47 72 
              0D A5 8F 48 
              80 0E 1B 00 
              C4 84 95 A0 
              89 4D A5 8F 
              41 48 80 12 
              1C 00 C4 9E 
              95 3F 04 4F 
              75 4D 6C 0D 
              A5 8F 41 4F 
              80 15 1D 00 
              C4 9F 95 41 
              59 6C 76 4F 
              6A A5 8F 42 
              66 53 49 70 
              55 80 13 1E 
              00 C4 94 43 
              7C 7C 49 52 
              41 8F 43 7C 
              7C 49 52 41 
              80 0E 1F 00 
              C4 84 95 A0 
              89 4E A5 8F 
              41 49 80 13 
              20 00 C4 83 
              95 A0 89 48 
              A5 8F 94 41 
              46 51 54 51 
              43 80 13 21 
              00 C4 94 41 
              57 49 7C 4F 
              67 8F 41 57 
              49 7C 4F 67 
              80 11 22 00 
              C4 94 7F 49 
              71 58 56 8F 
              7F 49 71 58 
              56 80 12 23 
              00 C4 8A 62 
              5A 6E 62 44 
              8F 8A 62 5A 
              6E 62 44 80 
              13 24 00 C4 
              83 95 A0 89 
              4F A5 8F 94 
              41 4D 53 44 
              6D 4A 80 11 
              25 00 C4 98 
              95 3F 04 53 
              57 5A 5A 0D 
              A5 8F 44 80 
              13 26 00 C4 
              99 95 4F 5E 
              7A 51 4D A5 
              8F 4F 5E 7A 
              51 4D 80 1C 
              27 00 C4 A4 
              95 3F 0A 31 
              38 39 32 33 
              33 33 39 33 
              30 0D A5 8F 
              41 70 72 6B 
              65 6A 80 10 
              28 00 C4 9E 
              95 3F 02 6E 
              53 0D A5 8F 
              41 6E 80 14 
              29 00 C4 99 
              95 8A 44 6A 
              45 7E 5E A5 
              8F 44 6A 45 
              7E 5E 80 1C 
              2A 00 C4 A4 
              95 3F 0A 2D 
              36 39 31 33 
              33 30 32 38 
              34 0D A5 8F 
              8A 69 4D 4D 
              73 6C 80 10 
              2B 00 C4 9A 
              95 41 46 73 
              58 4D 72 A5 
              8F 41 80 0E 
              2C 00 C4 84 
              95 A0 89 50 
              A5 8F 41 4B 
              80 14 2D 00 
              C4 8A 8A 41 
              66 45 4D 68 
              54 8F 41 66 
              45 4D 68 54 
              80 14 2E 00 
              C4 9E 95 3F 
              06 4D 48 43 
              48 58 43 0D 
              A5 8F 41 4D 
              80 0E 2F 00 
              C4 84 95 A0 
              89 52 A5 8F 
              41 4D 80 14 
              30 00 C4 8A 
              8A 41 56 7C 
              51 57 7B 8F 
              41 56 7C 51 
              57 7B 80 13 
              31 00 C4 94 
              41 79 6B 62 
              54 5B 8F 41 
              79 6B 62 54 
              5B 80 11 32 
              00 C4 94 6C 
              45 69 58 6A 
              8F 6C 45 69 
              58 6A 80 10 
              33 00 C4 9A 
              95 41 7C 61 
              4A 63 64 A5 
              8F 41 80 10 
              34 00 C4 9A 
              95 41 66 6E 
              58 61 46 A5 
              8F 41 80 0E 
              35 00 C4 84 
              95 A0 89 46 
              A5 8F 41 41 
              80 13 36 00 
              C4 94 42 53 
              40 50 7C 7C 
              8F 42 53 40 
              50 7C 7C 80 
              14 37 00 C4 
              9E 95 3F 06 
              76 70 75 64 
              51 6B 0D A5 
              8F 41 76 80 
              13 38 00 C4 
              83 95 A0 89 
              4B A5 8F 94 
              41 49 52 44 
              5D 46 80 15 
              39 00 C4 9F 
              95 41 78 4E 
              7D 48 6C A5 
              8F 42 47 71 
              42 77 53 80 
              14 3A 00 C4 
              8A 8A 41 6D 
              52 73 62 44 
              8F 41 6D 52 
              73 62 44 80 
              0E 3B 00 C4 
              84 95 A0 89 
              52 A5 8F 41 
              4D 80 13 3C 
              00 C4 83 95 
              A0 89 4F A5 
              8F 94 41 4D 
              53 44 6D 4A 
              80 10 3D 00 
              C4 9A 95 41 
              5A 75 53 77 
              40 A5 8F 41 
              80 12 3E 00 
              C4 9A 95 8A 
              41 45 6A 67 
              7A 58 A5 8F 
              8A 41 80 13 
              3F 00 C4 99 
              95 5F 60 63 
              47 59 A5 8F 
              5F 60 63 47 
              59 80 15 40 
              00 C4 99 95 
              41 6A 72 50 
              52 7E A5 8F 
              41 6A 72 50 
              52 7E 80 13 
              41 00 C4 94 
              41 45 4D 6D 
              5A 58 8F 41 
              45 4D 6D 5A 
              58 80 0E 42 
              00 C4 84 95 
              A0 89 48 A5 
              8F 41 43 80 
              14 43 00 C4 
              9E 95 3F 06 
              79 51 65 5A 
              77 57 0D A5 
              8F 41 79 80 
              0E 44 00 C4 
              84 95 A0 89 
              4A A5 8F 41 
              45 80 0E 45 
              00 C4 84 95 
              A0 89 47 A5 
              8F 41 42 80 
              13 46 00 C4 
              94 42 69 60 
              7E 4F 70 8F 
              42 69 60 7E 
              4F 70 80 15 
              47 00 C4 9E 
              95 3F 07 74 
              41 69 6D 4F 
              51 6C 0D A5 
              8F 41 74 80 
              12 48 00 C4 
              98 95 3F 05 
              61 48 55 56 
              59 0D A5 8F 
              45 80 13 49 
              00 C4 99 95 
              5D 75 57 45 
              79 A5 8F 5D 
              75 57 45 79 
              80 12 4A 00 
              C4 9E 95 3F 
              04 77 59 4A 
              54 0D A5 8F 
              41 77 80 0E 
              4B 00 C4 84 
              95 A0 89 48 
              A5 8F 41 43 
              80 15 4C 00 
              C4 9F 95 42 
              44 72 4B 79 
              60 A5 8F 41 
              7B 4D 74 46 
              5F 80 12 4D 
              00 C4 8A 8A 
              6F 65 53 48 
              5F 8F 6F 65 
              53 48 5F 80 
              11 4E 00 C4 
              98 95 3F 04 
              57 57 78 4D 
              0D A5 8F 44 
              80 0E 4F 00 
              C4 84 95 A0 
              89 54 A5 8F 
              41 4F 80 0D 
              50 00 C4 98 
              95 3F 00 0D 
              A5 8F 40 80 
              13 51 00 C4 
              83 95 A0 89 
              47 A5 8F 94 
              41 45 51 44 
              4D 42 80 0E 
              52 00 C4 84 
              95 A0 89 4C 
              A5 8F 41 47 
              80 14 53 00 
              C4 99 95 8A 
              75 79 6C 70 
              51 A5 8F 75 
              79 6C 70 51 
              80 14 54 00 
              C4 9E 95 3F 
              06 77 57 6F 
              63 62 68 0D 
              A5 8F 41 77 
              80 12 55 00 
              C4 8A 8A 74 
              53 6D 49 7B 
              8F 74 53 6D 
              49 7B 80 1E 
              56 00 C4 A4 
              95 3F 0B 2D 
              31 31 31 37 
              33 31 38 33 
              31 32 0D A5 
              8F 8A 41 42 
              66 4E 72 68 
              80 14 57 00 
              C4 9F 95 4D 
              63 6A 6A 77 
              A5 8F 43 72 
              5C 55 55 48 
              80 13 58 00 
              C4 94 41 72 
              6D 65 41 69 
              8F 41 72 6D 
              65 41 69 80 
              14 59 00 C4 
              9F 95 43 75 
              7E 48 67 A5 
              8F 43 7C 4A 
              41 77 58 80 
              16 5A 00 C4 
              99 95 8A 41 
              48 45 58 5D 
              62 A5 8F 41 
              48 45 58 5D 
              62 80 12 5B 
              00 C4 8A 65 
              7A 77 45 63 
              8F 8A 65 7A 
              77 45 63 80 
              16 5C 00 C4 
              99 95 8A 41 
              4F 7F 72 70 
              73 A5 8F 41 
              4F 7F 72 70 
              73 80 11 5D 
              00 C4 9E 95 
              3F 03 77 54 
              7A 0D A5 8F 
              41 77 80 16 
              5E 00 C4 99 
              95 8A 41 62 
              75 48 5F 6D 
              A5 8F 41 62 
              75 48 5F 6D 
              80 14 5F 00 
              C4 99 95 8A 
              73 69 5C 64 
              59 A5 8F 73 
              69 5C 64 59 
              80 0E 60 00 
              C4 84 95 A0 
              89 4B A5 8F 
              41 46 80 14 
              61 00 C4 8A 
              8A 41 5F 70 
              5E 73 42 8F 
              41 5F 70 5E 
              73 42 80 1C 
              62 00 C4 A4 
              95 3F 0A 31 
              35 39 30 35 
              39 31 31 30 
              35 0D A5 8F 
              41 5E 73 67 
              7A 41 80 11 
              63 00 C4 94 
              79 70 53 61 
              58 8F 79 70 
              53 61 58 80 
              0E 64 00 C4 
              84 95 A0 89 
              4B A5 8F 41 
              46 80 19 65 
              00 C4 A4 95 
              3F 08 35 38 
              30 39 33 31 
              33 35 0D A5 
              8F 43 5D 66 
              79 4F 80 1A 
              66 00 C4 A4 
              95 3F 09 33 
              36 36 30 32 
              37 30 30 33 
              0D A5 8F 55 
              74 52 43 7B 
              80 12 67 00 
              C4 8A 8A 74 
              46 5F 6C 78 
              8F 74 46 5F 
              6C 78 80 1E 
              68 00 C4 A4 
              95 3F 0B 2D 
              31 38 35 32 
              33 30 31 33 
              33 30 0D A5 
              8F 8A 41 6E 
              59 7E 40 52 
              80 13 69 00 
              C4 94 43 5E 
              55 40 4B 54 
              8F 43 5E 55 
              40 4B 54 80 
              13 6A 00 C4 
              99 95 78 52 
              76 76 7E A5 
              8F 78 52 76 
              76 7E 80 1A 
              6B 00 C4 A4 
              95 3F 09 31 
              38 35 36 31 
              38 33 39 35 
              0D A5 8F 4B 
              44 44 7F 5B 
              80 0F 6C 00 
              C4 98 95 3F 
              02 6D 6E 0D 
              A5 8F 42 80 
              1A 6D 00 C4 
              A4 95 3F 09 
              33 37 37 37 
              37 35 37 31 
              34 0D A5 8F 
              56 61 46 59 
              62 80 13 6E 
              00 C4 94 42 
              45 6A 7F 59 
              66 8F 42 45 
              6A 7F 59 66 
              80 13 6F 00 
              C4 94 42 41 
              42 62 74 5C 
              8F 42 41 42 
              62 74 5C 80 
              13 70 00 C4 
              99 95 45 4E 
              61 41 6C A5 
              8F 45 4E 61 
              41 6C 80 13 
              71 00 C4 83 
              95 A0 89 47 
              A5 8F 94 41 
              45 51 44 4D 
              42 80 12 72 
              00 C4 8A 8A 
              59 6C 70 56 
              4F 8F 59 6C 
              70 56 4F 80 
              14 73 00 C4 
              8A 41 70 41 
              47 58 60 8F 
              8A 41 70 41 
              47 58 60 80 
              13 74 00 C4 
              83 95 A0 89 
              47 A5 8F 94 
              41 45 51 44 
              4D 42 80 14 
              75 00 C4 8A 
              8A 41 4C 68 
              6F 42 40 8F 
              41 4C 68 6F 
              42 40 80 15 
              76 00 C4 9F 
              95 41 5E 5F 
              40 69 5E A5 
              8F 42 61 60 
              7F 56 61 80 
              16 77 00 C4 
              99 95 8A 41 
              70 61 6E 7E 
              7F A5 8F 41 
              70 61 6E 7E 
              7F 80 14 78 
              00 C4 99 95 
              8A 58 70 4B 
              4D 72 A5 8F 
              58 70 4B 4D 
              72 80 13 79 
              00 C4 83 95 
              A0 89 4B A5 
              8F 94 41 49 
              52 44 5D 46 
              80 13 7A 00 
              C4 83 95 A0 
              89 4E A5 8F 
              94 41 4C 52 
              74 69 49 80 
              13 7B 00 C4 
              83 95 A0 89 
              53 A5 8F 94 
              41 51 54 44 
              7D 4E 80 0E 
              7C 00 C4 84 
              95 A0 89 4F 
              A5 8F 41 4A 
              80 1E 7D 00 
              C4 A4 95 3F 
              0B 2D 31 32 
              39 39 34 34 
              34 35 36 30 
              0D A5 8F 8A 
              41 4D 5C 7F 
              4D 50 80 12 
              7E 00 C4 8A 
              8A 50 64 64 
              5D 5C 8F 50 
              64 64 5D 5C 
              80 13 7F 00 
              C4 99 95 42 
              5B 43 68 70 
              A5 8F 42 5B 
              43 68 70 80 
              1C 80 00 C4 
              A4 95 3F 0A 
              2D 34 37 30 
              32 38 31 36 
              32 34 0D A5 
              8F 8A 5C 41 
              7E 76 58 80 
              16 81 00 C4 
              99 95 8A 41 
              7E 43 40 52 
              59 A5 8F 41 
              7E 43 40 52 
              59 80 14 82 
              00 C4 99 95 
              8A 70 65 48 
              55 6B A5 8F 
              70 65 48 55 
              6B 80 0E 83 
              00 C4 84 95 
              A0 89 54 A5 
              8F 41 4F 80 
              0E 84 00 C4 
              84 95 A0 89 
              4F A5 8F 41 
              4A 80 0F 85 
              00 C4 9E 95 
              3F 01 4E 0D 
              A5 8F 41 4E 
              80 1C 86 00 
              C4 A4 95 3F 
              0A 31 31 39 
              38 32 31 31 
              34 30 34 0D 
              A5 8F 41 47 
              5A 74 45 4C 
              80 12 87 00 
              C4 8A 8A 63 
              70 68 5D 44 
              8F 63 70 68 
              5D 44 80 13 
              88 00 C4 83 
              95 A0 89 49 
              A5 8F 94 41 
              47 51 64 55 
              44 80 1E 89 
              00 C4 A4 95 
              3F 0B 2D 31 
              37 31 32 39 
              32 38 32 32 
              34 0D A5 8F 
              8A 41 66 46 
              53 57 60 80 
              14 8A 00 C4 
              99 95 8A 4F 
              4D 76 5D 7E 
              A5 8F 4F 4D 
              76 5D 7E 80 
              14 8B 00 C4 
              9F 95 59 64 
              4A 68 6E A5 
              8F 43 66 5B 
              75 57 51 80 
              14 8C 00 C4 
              8A 41 6C 6D 
              46 67 73 8F 
              8A 41 6C 6D 
              46 67 73 80 
              14 8D 00 C4 
              9E 95 3F 06 
              41 76 7A 70 
              51 63 0D A5 
              8F 41 41 80 
              16 8E 00 C4 
              9E 95 3F 08 
              6B 57 4B 77 
              74 62 65 71 
              0D A5 8F 41 
              6B 80 0E 8F 
              00 C4 84 95 
              A0 89 54 A5 
              8F 41 4F 80 
              1E 90 00 C4 
              A4 95 3F 0B 
              2D 31 31 38 
              30 36 31 35 
              34 31 37 0D 
              A5 8F 8A 41 
              46 57 6C 4B 
              79 80 12 91 
              00 C4 98 95 
              3F 05 63 64 
              78 4C 4B 0D 
              A5 8F 45 80 
              13 92 00 C4 
              94 43 4B 6D 
              64 60 56 8F 
              43 4B 6D 64 
              60 56 80 11 
              93 00 C4 9E 
              95 3F 03 63 
              46 52 0D A5 
              8F 41 63 80 
              14 94 00 C4 
              8A 41 5A 42 
              4D 5F 68 8F 
              8A 41 5A 42 
              4D 5F 68 80 
              14 95 00 C4 
              9F 95 50 5C 
              63 7F 74 A5 
              8F 43 6F 63 
              5C 40 4B 80 
              15 96 00 C4 
              9E 95 3F 07 
              78 69 61 4F 
              59 69 73 0D 
              A5 8F 41 78 
              80 14 97 00 
              C4 8A 41 7E 
              6C 4F 5A 43 
              8F 8A 41 7E 
              6C 4F 5A 43 
              80 1E 98 00 
              C4 A4 95 3F 
              0B 2D 31 33 
              38 34 37 34 
              30 39 39 32 
              0D A5 8F 8A 
              41 52 62 57 
              62 40 80 13 
              99 00 C4 83 
              95 A0 89 48 
              A5 8F 94 41 
              46 51 54 51 
              43 80 13 9A 
              00 C4 83 95 
              A0 89 4C A5 
              8F 94 41 4A 
              52 54 61 47 
              80 12 9B 00 
              C4 8A 8A 55 
              79 75 64 46 
              8F 55 79 75 
              64 46 80 12 
              9C 00 C4 9E 
              95 3F 04 47 
              45 43 48 0D 
              A5 8F 41 47 
              80 0E 9D 00 
              C4 84 95 A0 
              89 4F A5 8F 
              41 4A 80 14 
              9E 00 C4 8A 
              8A 41 45 6A 
              4D 6F 6D 8F 
              41 45 6A 4D 
              6F 6D 80 11 
              9F 00 C4 9A 
              95 8A 74 62 
              7F 5A 50 A5 
              8F 8A 41 80 
              14 A0 00 C4 
              9F 95 43 44 
              68 77 4D 7E 
              A5 8F 7B 57 
              48 72 41 80 
              13 A1 00 C4 
              94 41 79 41 
              6A 50 77 8F 
              41 79 41 6A 
              50 77 80 13 
              A2 00 C4 83 
              95 A0 89 4C 
              A5 8F 94 41 
              4A 52 54 61 
              47 80 15 A3 
              00 C4 98 95 
              3F 08 6C 73 
              76 79 4A 75 
              58 79 0D A5 
              8F 48 80 13 
              A4 00 C4 83 
              95 A0 89 52 
              A5 8F 94 41 
              50 53 74 79 
              4D 80 13 A5 
              00 C4 94 41 
              70 51 78 73 
              6B 8F 41 70 
              51 78 73 6B 
              80 0D A6 00 
              C4 98 95 3F 
              00 0D A5 8F 
              40 80 1C A7 
              00 C4 A4 95 
              3F 0A 2D 38 
              34 37 30 30 
              36 32 36 32 
              0D A5 8F 8A 
              72 5F 44 68 
              76 80 1D A8 
              00 C4 A4 95 
              3F 0B 2D 31 
              30 30 34 37 
              31 39 36 37 
              38 0D A5 8F 
              8A 7B 78 6C 
              78 7E 80 10 
              A9 00 C4 9A 
              95 41 5F 6C 
              51 7C 54 A5 
              8F 41 80 13 
              AA 00 C4 83 
              95 A0 89 4B 
              A5 8F 94 41 
              49 52 44 5D 
              46 80 12 AB 
              00 C4 8A 8A 
              6E 72 65 4E 
              50 8F 6E 72 
              65 4E 50 80 
              0E AC 00 C4 
              84 95 A0 89 
              49 A5 8F 41 
              44 80 15 AD 
              00 C4 99 95 
              41 4B 61 46 
              7E 66 A5 8F 
              41 4B 61 46 
              7E 66 80 0E 
              AE 00 C4 84 
              95 A0 89 4B 
              A5 8F 41 46 
              80 12 AF 00 
              C4 8A 8A 58 
              57 40 63 4A 
              8F 58 57 40 
              63 4A 80 13 
              B0 00 C4 94 
              41 78 5F 4F 
              5A 7E 8F 41 
              78 5F 4F 5A 
              7E 80 13 B1 
              00 C4 83 95 
              A0 89 4F A5 
              8F 94 41 4D 
              53 44 6D 4A 
              80 15 B2 00 
              C4 9F 95 42 
              74 60 6B 42 
              59 A5 8F 41 
              4B 5F 54 7D 
              66 80 0F B3 
              00 C4 9A 95 
              5B 78 75 57 
              77 A5 8F 41 
              80 15 B4 00 
              C4 9F 95 42 
              6C 43 49 72 
              7F A5 8F 41 
              53 7C 76 4D 
              40 80 13 B5 
              00 C4 83 95 
              A0 89 4A A5 
              8F 94 41 48 
              51 74 59 45 
              80 12 B6 00 
              C4 9E 95 3F 
              04 53 42 44 
              41 0D A5 8F 
              41 53 80 10 
              B7 00 C4 9A 
              95 41 5C 5C 
              50 69 6A A5 
              8F 41 80 13 
              B8 00 C4 94 
              42 7E 7E 7D 
              5C 49 8F 42 
              7E 7E 7D 5C 
              49 80 1A B9 
              00 C4 A4 95 
              3F 09 34 35 
              39 35 33 39 
              31 37 30 0D 
              A5 8F 5B 59 
              40 4B 62 80 
              0E BA 00 C4 
              84 95 A0 89 
              53 A5 8F 41 
              4E 80 15 BB 
              00 C4 99 95 
              41 7D 79 79 
              7E 53 A5 8F 
              41 7D 79 79 
              7E 53 80 13 
              BC 00 C4 83 
              95 A0 89 54 
              A5 8F 94 41 
              52 54 55 41 
              4F 80 14 BD 
              00 C4 8A 8A 
              41 6E 6F 5E 
              73 4E 8F 41 
              6E 6F 5E 73 
              4E 80 1C BE 
              00 C4 A4 95 
              3F 0A 2D 34 
              36 35 30 33 
              36 37 31 39 
              0D A5 8F 8A 
              5B 6D 7E 56 
              6F 80 11 BF 
              00 C4 9A 95 
              8A 7B 44 59 
              45 76 A5 8F 
              8A 41 80 13 
              C0 00 C4 83 
              95 A0 89 51 
              A5 8F 94 41 
              4F 53 64 75 
              4C 80 16 C1 
              00 C4 9E 95 
              3F 08 73 6B 
              4B 61 61 57 
              4E 6E 0D A5 
              8F 41 73 80 
              13 C2 00 C4 
              83 95 A0 89 
              53 A5 8F 94 
              41 51 54 44 
              7D 4E 80 14 
              C3 00 C4 9F 
              95 6E 48 65 
              65 67 A5 8F 
              43 51 77 5A 
              5A 58 80 13 
              C4 00 C4 83 
              95 A0 89 51 
              A5 8F 94 41 
              4F 53 64 75 
              4C 80 14 C5 
              00 C4 8A 8A 
              41 65 7F 4A 
              4F 48 8F 41 
              65 7F 4A 4F 
              48 80 14 C6 
              00 C4 9F 95 
              43 60 6D 60 
              67 6A A5 8F 
              5F 52 5F 58 
              55 80 1C C7 
              00 C4 A4 95 
              3F 0A 2D 35 
              37 31 39 33 
              39 36 37 37 
              0D A5 8F 8A 
              62 45 71 6D 
              5D 80 12 C8 
              00 C4 9E 95 
              3F 04 53 64 
              4D 47 0D A5 
              8F 41 53 80 
              1C C9 00 C4 
              A4 95 3F 0A 
              31 35 30 35 
              30 38 36 38 
              32 32 0D A5 
              8F 41 59 6D 
              5C 75 66 80 
              15 CA 00 C4 
              9F 95 42 7B 
              6F 4C 4A 7B 
              A5 8F 41 44 
              50 73 75 44 
              80 00 -  -  	.db	$22,$01,$00,$b8,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b8,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$38,$37,$32,$39,$36,$0d,$80,$0e,$03,$00,$c4,$84,$95,$a0,$89,$50,$a5,$8f,$41,$4b,$80,$11,$04,$00,$c4,$9e,$95,$3f,$03,$6c,$4e,$4b,$0d,$a5,$8f,$41,$6c,$80,$14,$05,$00,$c4,$8a,$8a,$41,$7c,$7b,$49,$7a,$73,$8f,$41,$7c,$7b,$49,$7a,$73,$80,$13,$06,$00,$c4,$94,$43,$47,$51,$57,$42,$4e,$8f,$43,$47,$51,$57,$42,$4e,$80,$11,$07,$00,$c4,$94,$61,$64,$72,$51,$5f,$8f,$61,$64,$72,$51,$5f,$80,$11,$08,$00,$c4,$9a,$95,$8a,$4b,$48,$54,$5d,$63,$a5,$8f,$8a,$41,$80,$15,$09,$00,$c4,$9f,$95,$42,$42,$6a,$70,$6b,$5e,$a5,$8f,$41,$7d,$55,$4f,$54,$61,$80,$13,$0a,$00,$c4,$94,$43,$59,$73,$72,$45,$68,$8f,$43,$59,$73,$72,$45,$68,$80,$11,$0b,$00,$c4,$9a,$95,$8a,$7e,$6f,$4e,$60,$4e,$a5,$8f,$8a,$41,$80,$15,$0c,$00,$c4,$99,$95,$41,$6a,$66,$67,$43,$78,$a5,$8f,$41,$6a,$66,$67,$43,$78,$80,$1c,$0d,$00,$c4,$a4,$95,$3f,$0a,$31,$31,$33,$35,$37,$37,$38,$38,$30,$38,$0d,$a5,$8f,$41,$43,$6c,$69,$6f,$78,$80,$0e,$0e,$00,$c4,$84,$95,$a0,$89,$50,$a5,$8f,$41,$4b,$80,$15,$0f,$00,$c4,$9f,$95,$41,$57,$5b,$70,$53,$43,$a5,$8f,$42,$68,$64,$4f,$6c,$7c,$80,$1e,$10,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$35,$39,$37,$36,$31,$39,$31,$39,$31,$0d,$a5,$8f,$8a,$41,$5f,$4e,$5b,$6f,$77,$80,$16,$11,$00,$c4,$99,$95,$8a,$41,$7c,$7b,$68,$71,$74,$a5,$8f,$41,$7c,$7b,$68,$71,$74,$80,$1c,$12,$00,$c4,$a4,$95,$3f,$0a,$2d,$36,$35,$37,$30,$34,$39,$31,$36,$37,$0d,$a5,$8f,$8a,$67,$4a,$5c,$59,$4f,$80,$15,$13,$00,$c4,$9f,$95,$42,$58,$53,$57,$7d,$45,$a5,$8f,$41,$67,$6c,$68,$42,$7a,$80,$0f,$14,$00,$c4,$9a,$95,$7f,$55,$68,$7c,$76,$a5,$8f,$41,$80,$13,$15,$00,$c4,$83,$95,$a0,$89,$52,$a5,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$11,$16,$00,$c4,$94,$4c,$56,$68,$5c,$53,$8f,$4c,$56,$68,$5c,$53,$80,$0e,$17,$00,$c4,$84,$95,$a0,$89,$4f,$a5,$8f,$41,$4a,$80,$14,$18,$00,$c4,$8a,$8a,$41,$5d,$4b,$47,$5c,$7c,$8f,$41,$5d,$4b,$47,$5c,$7c,$80,$13,$19,$00,$c4,$83,$95,$a0,$89,$4e,$a5,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$15,$1a,$00,$c4,$98,$95,$3f,$08,$72,$6d,$6d,$4a,$66,$71,$47,$72,$0d,$a5,$8f,$48,$80,$0e,$1b,$00,$c4,$84,$95,$a0,$89,$4d,$a5,$8f,$41,$48,$80,$12,$1c,$00,$c4,$9e,$95,$3f,$04,$4f,$75,$4d,$6c,$0d,$a5,$8f,$41,$4f,$80,$15,$1d,$00,$c4,$9f,$95,$41,$59,$6c,$76,$4f,$6a,$a5,$8f,$42,$66,$53,$49,$70,$55,$80,$13,$1e,$00,$c4,$94,$43,$7c,$7c,$49,$52,$41,$8f,$43,$7c,$7c,$49,$52,$41,$80,$0e,$1f,$00,$c4,$84,$95,$a0,$89,$4e,$a5,$8f,$41,$49,$80,$13,$20,$00,$c4,$83,$95,$a0,$89,$48,$a5,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$13,$21,$00,$c4,$94,$41,$57,$49,$7c,$4f,$67,$8f,$41,$57,$49,$7c,$4f,$67,$80,$11,$22,$00,$c4,$94,$7f,$49,$71,$58,$56,$8f,$7f,$49,$71,$58,$56,$80,$12,$23,$00,$c4,$8a,$62,$5a,$6e,$62,$44,$8f,$8a,$62,$5a,$6e,$62,$44,$80,$13,$24,$00,$c4,$83,$95,$a0,$89,$4f,$a5,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$11,$25,$00,$c4,$98,$95,$3f,$04,$53,$57,$5a,$5a,$0d,$a5,$8f,$44,$80,$13,$26,$00,$c4,$99,$95,$4f,$5e,$7a,$51,$4d,$a5,$8f,$4f,$5e,$7a,$51,$4d,$80,$1c,$27,$00,$c4,$a4,$95,$3f,$0a,$31,$38,$39,$32,$33,$33,$33,$39,$33,$30,$0d,$a5,$8f,$41,$70,$72,$6b,$65,$6a,$80,$10,$28,$00,$c4,$9e,$95,$3f,$02,$6e,$53,$0d,$a5,$8f,$41,$6e,$80,$14,$29,$00,$c4,$99,$95,$8a,$44,$6a,$45,$7e,$5e,$a5,$8f,$44,$6a,$45,$7e,$5e,$80,$1c,$2a,$00,$c4,$a4,$95,$3f,$0a,$2d,$36,$39,$31,$33,$33,$30,$32,$38,$34,$0d,$a5,$8f,$8a,$69,$4d,$4d,$73,$6c,$80,$10,$2b,$00,$c4,$9a,$95,$41,$46,$73,$58,$4d,$72,$a5,$8f,$41,$80,$0e,$2c,$00,$c4,$84,$95,$a0,$89,$50,$a5,$8f,$41,$4b,$80,$14,$2d,$00,$c4,$8a,$8a,$41,$66,$45,$4d,$68,$54,$8f,$41,$66,$45,$4d,$68,$54,$80,$14,$2e,$00,$c4,$9e,$95,$3f,$06,$4d,$48,$43,$48,$58,$43,$0d,$a5,$8f,$41,$4d,$80,$0e,$2f,$00,$c4,$84,$95,$a0,$89,$52,$a5,$8f,$41,$4d,$80,$14,$30,$00,$c4,$8a,$8a,$41,$56,$7c,$51,$57,$7b,$8f,$41,$56,$7c,$51,$57,$7b,$80,$13,$31,$00,$c4,$94,$41,$79,$6b,$62,$54,$5b,$8f,$41,$79,$6b,$62,$54,$5b,$80,$11,$32,$00,$c4,$94,$6c,$45,$69,$58,$6a,$8f,$6c,$45,$69,$58,$6a,$80,$10,$33,$00,$c4,$9a,$95,$41,$7c,$61,$4a,$63,$64,$a5,$8f,$41,$80,$10,$34,$00,$c4,$9a,$95,$41,$66,$6e,$58,$61,$46,$a5,$8f,$41,$80,$0e,$35,$00,$c4,$84,$95,$a0,$89,$46,$a5,$8f,$41,$41,$80,$13,$36,$00,$c4,$94,$42,$53,$40,$50,$7c,$7c,$8f,$42,$53,$40,$50,$7c,$7c,$80,$14,$37,$00,$c4,$9e,$95,$3f,$06,$76,$70,$75,$64,$51,$6b,$0d,$a5,$8f,$41,$76,$80,$13,$38,$00,$c4,$83,$95,$a0,$89,$4b,$a5,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$15,$39,$00,$c4,$9f,$95,$41,$78,$4e,$7d,$48,$6c,$a5,$8f,$42,$47,$71,$42,$77,$53,$80,$14,$3a,$00,$c4,$8a,$8a,$41,$6d,$52,$73,$62,$44,$8f,$41,$6d,$52,$73,$62,$44,$80,$0e,$3b,$00,$c4,$84,$95,$a0,$89,$52,$a5,$8f,$41,$4d,$80,$13,$3c,$00,$c4,$83,$95,$a0,$89,$4f,$a5,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$10,$3d,$00,$c4,$9a,$95,$41,$5a,$75,$53,$77,$40,$a5,$8f,$41,$80,$12,$3e,$00,$c4,$9a,$95,$8a,$41,$45,$6a,$67,$7a,$58,$a5,$8f,$8a,$41,$80,$13,$3f,$00,$c4,$99,$95,$5f,$60,$63,$47,$59,$a5,$8f,$5f,$60,$63,$47,$59,$80,$15,$40,$00,$c4,$99,$95,$41,$6a,$72,$50,$52,$7e,$a5,$8f,$41,$6a,$72,$50,$52,$7e,$80,$13,$41,$00,$c4,$94,$41,$45,$4d,$6d,$5a,$58,$8f,$41,$45,$4d,$6d,$5a,$58,$80,$0e,$42,$00,$c4,$84,$95,$a0,$89,$48,$a5,$8f,$41,$43,$80,$14,$43,$00,$c4,$9e,$95,$3f,$06,$79,$51,$65,$5a,$77,$57,$0d,$a5,$8f,$41,$79,$80,$0e,$44,$00,$c4,$84,$95,$a0,$89,$4a,$a5,$8f,$41,$45,$80,$0e,$45,$00,$c4,$84,$95,$a0,$89,$47,$a5,$8f,$41,$42,$80,$13,$46,$00,$c4,$94,$42,$69,$60,$7e,$4f,$70,$8f,$42,$69,$60,$7e,$4f,$70,$80,$15,$47,$00,$c4,$9e,$95,$3f,$07,$74,$41,$69,$6d,$4f,$51,$6c,$0d,$a5,$8f,$41,$74,$80,$12,$48,$00,$c4,$98,$95,$3f,$05,$61,$48,$55,$56,$59,$0d,$a5,$8f,$45,$80,$13,$49,$00,$c4,$99,$95,$5d,$75,$57,$45,$79,$a5,$8f,$5d,$75,$57,$45,$79,$80,$12,$4a,$00,$c4,$9e,$95,$3f,$04,$77,$59,$4a,$54,$0d,$a5,$8f,$41,$77,$80,$0e,$4b,$00,$c4,$84,$95,$a0,$89,$48,$a5,$8f,$41,$43,$80,$15,$4c,$00,$c4,$9f,$95,$42,$44,$72,$4b,$79,$60,$a5,$8f,$41,$7b,$4d,$74,$46,$5f,$80,$12,$4d,$00,$c4,$8a,$8a,$6f,$65,$53,$48,$5f,$8f,$6f,$65,$53,$48,$5f,$80,$11,$4e,$00,$c4,$98,$95,$3f,$04,$57,$57,$78,$4d,$0d,$a5,$8f,$44,$80,$0e,$4f,$00,$c4,$84,$95,$a0,$89,$54,$a5,$8f,$41,$4f,$80,$0d,$50,$00,$c4,$98,$95,$3f,$00,$0d,$a5,$8f,$40,$80,$13,$51,$00,$c4,$83,$95,$a0,$89,$47,$a5,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$0e,$52,$00,$c4,$84,$95,$a0,$89,$4c,$a5,$8f,$41,$47,$80,$14,$53,$00,$c4,$99,$95,$8a,$75,$79,$6c,$70,$51,$a5,$8f,$75,$79,$6c,$70,$51,$80,$14,$54,$00,$c4,$9e,$95,$3f,$06,$77,$57,$6f,$63,$62,$68,$0d,$a5,$8f,$41,$77,$80,$12,$55,$00,$c4,$8a,$8a,$74,$53,$6d,$49,$7b,$8f,$74,$53,$6d,$49,$7b,$80,$1e,$56,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$31,$31,$37,$33,$31,$38,$33,$31,$32,$0d,$a5,$8f,$8a,$41,$42,$66,$4e,$72,$68,$80,$14,$57,$00,$c4,$9f,$95,$4d,$63,$6a,$6a,$77,$a5,$8f,$43,$72,$5c,$55,$55,$48,$80,$13,$58,$00,$c4,$94,$41,$72,$6d,$65,$41,$69,$8f,$41,$72,$6d,$65,$41,$69,$80,$14,$59,$00,$c4,$9f,$95,$43,$75,$7e,$48,$67,$a5,$8f,$43,$7c,$4a,$41,$77,$58,$80,$16,$5a,$00,$c4,$99,$95,$8a,$41,$48,$45,$58,$5d,$62,$a5,$8f,$41,$48,$45,$58,$5d,$62,$80,$12,$5b,$00,$c4,$8a,$65,$7a,$77,$45,$63,$8f,$8a,$65,$7a,$77,$45,$63,$80,$16,$5c,$00,$c4,$99,$95,$8a,$41,$4f,$7f,$72,$70,$73,$a5,$8f,$41,$4f,$7f,$72,$70,$73,$80,$11,$5d,$00,$c4,$9e,$95,$3f,$03,$77,$54,$7a,$0d,$a5,$8f,$41,$77,$80,$16,$5e,$00,$c4,$99,$95,$8a,$41,$62,$75,$48,$5f,$6d,$a5,$8f,$41,$62,$75,$48,$5f,$6d,$80,$14,$5f,$00,$c4,$99,$95,$8a,$73,$69,$5c,$64,$59,$a5,$8f,$73,$69,$5c,$64,$59,$80,$0e,$60,$00,$c4,$84,$95,$a0,$89,$4b,$a5,$8f,$41,$46,$80,$14,$61,$00,$c4,$8a,$8a,$41,$5f,$70,$5e,$73,$42,$8f,$41,$5f,$70,$5e,$73,$42,$80,$1c,$62,$00,$c4,$a4,$95,$3f,$0a,$31,$35,$39,$30,$35,$39,$31,$31,$30,$35,$0d,$a5,$8f,$41,$5e,$73,$67,$7a,$41,$80,$11,$63,$00,$c4,$94,$79,$70,$53,$61,$58,$8f,$79,$70,$53,$61,$58,$80,$0e,$64,$00,$c4,$84,$95,$a0,$89,$4b,$a5,$8f,$41,$46,$80,$19,$65,$00,$c4,$a4,$95,$3f,$08,$35,$38,$30,$39,$33,$31,$33,$35,$0d,$a5,$8f,$43,$5d,$66,$79,$4f,$80,$1a,$66,$00,$c4,$a4,$95,$3f,$09,$33,$36,$36,$30,$32,$37,$30,$30,$33,$0d,$a5,$8f,$55,$74,$52,$43,$7b,$80,$12,$67,$00,$c4,$8a,$8a,$74,$46,$5f,$6c,$78,$8f,$74,$46,$5f,$6c,$78,$80,$1e,$68,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$38,$35,$32,$33,$30,$31,$33,$33,$30,$0d,$a5,$8f,$8a,$41,$6e,$59,$7e,$40,$52,$80,$13,$69,$00,$c4,$94,$43,$5e,$55,$40,$4b,$54,$8f,$43,$5e,$55,$40,$4b,$54,$80,$13,$6a,$00,$c4,$99,$95,$78,$52,$76,$76,$7e,$a5,$8f,$78,$52,$76,$76,$7e,$80,$1a,$6b,$00,$c4,$a4,$95,$3f,$09,$31,$38,$35,$36,$31,$38,$33,$39,$35,$0d,$a5,$8f,$4b,$44,$44,$7f,$5b,$80,$0f,$6c,$00,$c4,$98,$95,$3f,$02,$6d,$6e,$0d,$a5,$8f,$42,$80,$1a,$6d,$00,$c4,$a4,$95,$3f,$09,$33,$37,$37,$37,$37,$35,$37,$31,$34,$0d,$a5,$8f,$56,$61,$46,$59,$62,$80,$13,$6e,$00,$c4,$94,$42,$45,$6a,$7f,$59,$66,$8f,$42,$45,$6a,$7f,$59,$66,$80,$13,$6f,$00,$c4,$94,$42,$41,$42,$62,$74,$5c,$8f,$42,$41,$42,$62,$74,$5c,$80,$13,$70,$00,$c4,$99,$95,$45,$4e,$61,$41,$6c,$a5,$8f,$45,$4e,$61,$41,$6c,$80,$13,$71,$00,$c4,$83,$95,$a0,$89,$47,$a5,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$12,$72,$00,$c4,$8a,$8a,$59,$6c,$70,$56,$4f,$8f,$59,$6c,$70,$56,$4f,$80,$14,$73,$00,$c4,$8a,$41,$70,$41,$47,$58,$60,$8f,$8a,$41,$70,$41,$47,$58,$60,$80,$13,$74,$00,$c4,$83,$95,$a0,$89,$47,$a5,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$14,$75,$00,$c4,$8a,$8a,$41,$4c,$68,$6f,$42,$40,$8f,$41,$4c,$68,$6f,$42,$40,$80,$15,$76,$00,$c4,$9f,$95,$41,$5e,$5f,$40,$69,$5e,$a5,$8f,$42,$61,$60,$7f,$56,$61,$80,$16,$77,$00,$c4,$99,$95,$8a,$41,$70,$61,$6e,$7e,$7f,$a5,$8f,$41,$70,$61,$6e,$7e,$7f,$80,$14,$78,$00,$c4,$99,$95,$8a,$58,$70,$4b,$4d,$72,$a5,$8f,$58,$70,$4b,$4d,$72,$80,$13,$79,$00,$c4,$83,$95,$a0,$89,$4b,$a5,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$13,$7a,$00,$c4,$83,$95,$a0,$89,$4e,$a5,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$13,$7b,$00,$c4,$83,$95,$a0,$89,$53,$a5,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$0e,$7c,$00,$c4,$84,$95,$a0,$89,$4f,$a5,$8f,$41,$4a,$80,$1e,$7d,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$32,$39,$39,$34,$34,$34,$35,$36,$30,$0d,$a5,$8f,$8a,$41,$4d,$5c,$7f,$4d,$50,$80,$12,$7e,$00,$c4,$8a,$8a,$50,$64,$64,$5d,$5c,$8f,$50,$64,$64,$5d,$5c,$80,$13,$7f,$00,$c4,$99,$95,$42,$5b,$43,$68,$70,$a5,$8f,$42,$5b,$43,$68,$70,$80,$1c,$80,$00,$c4,$a4,$95,$3f,$0a,$2d,$34,$37,$30,$32,$38,$31,$36,$32,$34,$0d,$a5,$8f,$8a,$5c,$41,$7e,$76,$58,$80,$16,$81,$00,$c4,$99,$95,$8a,$41,$7e,$43,$40,$52,$59,$a5,$8f,$41,$7e,$43,$40,$52,$59,$80,$14,$82,$00,$c4,$99,$95,$8a,$70,$65,$48,$55,$6b,$a5,$8f,$70,$65,$48,$55,$6b,$80,$0e,$83,$00,$c4,$84,$95,$a0,$89,$54,$a5,$8f,$41,$4f,$80,$0e,$84,$00,$c4,$84,$95,$a0,$89,$4f,$a5,$8f,$41,$4a,$80,$0f,$85,$00,$c4,$9e,$95,$3f,$01,$4e,$0d,$a5,$8f,$41,$4e,$80,$1c,$86,$00,$c4,$a4,$95,$3f,$0a,$31,$31,$39,$38,$32,$31,$31,$34,$30,$34,$0d,$a5,$8f,$41,$47,$5a,$74,$45,$4c,$80,$12,$87,$00,$c4,$8a,$8a,$63,$70,$68,$5d,$44,$8f,$63,$70,$68,$5d,$44,$80,$13,$88,$00,$c4,$83,$95,$a0,$89,$49,$a5,$8f,$94,$41,$47,$51,$64,$55,$44,$80,$1e,$89,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$37,$31,$32,$39,$32,$38,$32,$32,$34,$0d,$a5,$8f,$8a,$41,$66,$46,$53,$57,$60,$80,$14,$8a,$00,$c4,$99,$95,$8a,$4f,$4d,$76,$5d,$7e,$a5,$8f,$4f,$4d,$76,$5d,$7e,$80,$14,$8b,$00,$c4,$9f,$95,$59,$64,$4a,$68,$6e,$a5,$8f,$43,$66,$5b,$75,$57,$51,$80,$14,$8c,$00,$c4,$8a,$41,$6c,$6d,$46,$67,$73,$8f,$8a,$41,$6c,$6d,$46,$67,$73,$80,$14,$8d,$00,$c4,$9e,$95,$3f,$06,$41,$76,$7a,$70,$51,$63,$0d,$a5,$8f,$41,$41,$80,$16,$8e,$00,$c4,$9e,$95,$3f,$08,$6b,$57,$4b,$77,$74,$62,$65,$71,$0d,$a5,$8f,$41,$6b,$80,$0e,$8f,$00,$c4,$84,$95,$a0,$89,$54,$a5,$8f,$41,$4f,$80,$1e,$90,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$31,$38,$30,$36,$31,$35,$34,$31,$37,$0d,$a5,$8f,$8a,$41,$46,$57,$6c,$4b,$79,$80,$12,$91,$00,$c4,$98,$95,$3f,$05,$63,$64,$78,$4c,$4b,$0d,$a5,$8f,$45,$80,$13,$92,$00,$c4,$94,$43,$4b,$6d,$64,$60,$56,$8f,$43,$4b,$6d,$64,$60,$56,$80,$11,$93,$00,$c4,$9e,$95,$3f,$03,$63,$46,$52,$0d,$a5,$8f,$41,$63,$80,$14,$94,$00,$c4,$8a,$41,$5a,$42,$4d,$5f,$68,$8f,$8a,$41,$5a,$42,$4d,$5f,$68,$80,$14,$95,$00,$c4,$9f,$95,$50,$5c,$63,$7f,$74,$a5,$8f,$43,$6f,$63,$5c,$40,$4b,$80,$15,$96,$00,$c4,$9e,$95,$3f,$07,$78,$69,$61,$4f,$59,$69,$73,$0d,$a5,$8f,$41,$78,$80,$14,$97,$00,$c4,$8a,$41,$7e,$6c,$4f,$5a,$43,$8f,$8a,$41,$7e,$6c,$4f,$5a,$43,$80,$1e,$98,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$33,$38,$34,$37,$34,$30,$39,$39,$32,$0d,$a5,$8f,$8a,$41,$52,$62,$57,$62,$40,$80,$13,$99,$00,$c4,$83,$95,$a0,$89,$48,$a5,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$13,$9a,$00,$c4,$83,$95,$a0,$89,$4c,$a5,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$12,$9b,$00,$c4,$8a,$8a,$55,$79,$75,$64,$46,$8f,$55,$79,$75,$64,$46,$80,$12,$9c,$00,$c4,$9e,$95,$3f,$04,$47,$45,$43,$48,$0d,$a5,$8f,$41,$47,$80,$0e,$9d,$00,$c4,$84,$95,$a0,$89,$4f,$a5,$8f,$41,$4a,$80,$14,$9e,$00,$c4,$8a,$8a,$41,$45,$6a,$4d,$6f,$6d,$8f,$41,$45,$6a,$4d,$6f,$6d,$80,$11,$9f,$00,$c4,$9a,$95,$8a,$74,$62,$7f,$5a,$50,$a5,$8f,$8a,$41,$80,$14,$a0,$00,$c4,$9f,$95,$43,$44,$68,$77,$4d,$7e,$a5,$8f,$7b,$57,$48,$72,$41,$80,$13,$a1,$00,$c4,$94,$41,$79,$41,$6a,$50,$77,$8f,$41,$79,$41,$6a,$50,$77,$80,$13,$a2,$00,$c4,$83,$95,$a0,$89,$4c,$a5,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$15,$a3,$00,$c4,$98,$95,$3f,$08,$6c,$73,$76,$79,$4a,$75,$58,$79,$0d,$a5,$8f,$48,$80,$13,$a4,$00,$c4,$83,$95,$a0,$89,$52,$a5,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$13,$a5,$00,$c4,$94,$41,$70,$51,$78,$73,$6b,$8f,$41,$70,$51,$78,$73,$6b,$80,$0d,$a6,$00,$c4,$98,$95,$3f,$00,$0d,$a5,$8f,$40,$80,$1c,$a7,$00,$c4,$a4,$95,$3f,$0a,$2d,$38,$34,$37,$30,$30,$36,$32,$36,$32,$0d,$a5,$8f,$8a,$72,$5f,$44,$68,$76,$80,$1d,$a8,$00,$c4,$a4,$95,$3f,$0b,$2d,$31,$30,$30,$34,$37,$31,$39,$36,$37,$38,$0d,$a5,$8f,$8a,$7b,$78,$6c,$78,$7e,$80,$10,$a9,$00,$c4,$9a,$95,$41,$5f,$6c,$51,$7c,$54,$a5,$8f,$41,$80,$13,$aa,$00,$c4,$83,$95,$a0,$89,$4b,$a5,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$12,$ab,$00,$c4,$8a,$8a,$6e,$72,$65,$4e,$50,$8f,$6e,$72,$65,$4e,$50,$80,$0e,$ac,$00,$c4,$84,$95,$a0,$89,$49,$a5,$8f,$41,$44,$80,$15,$ad,$00,$c4,$99,$95,$41,$4b,$61,$46,$7e,$66,$a5,$8f,$41,$4b,$61,$46,$7e,$66,$80,$0e,$ae,$00,$c4,$84,$95,$a0,$89,$4b,$a5,$8f,$41,$46,$80,$12,$af,$00,$c4,$8a,$8a,$58,$57,$40,$63,$4a,$8f,$58,$57,$40,$63,$4a,$80,$13,$b0,$00,$c4,$94,$41,$78,$5f,$4f,$5a,$7e,$8f,$41,$78,$5f,$4f,$5a,$7e,$80,$13,$b1,$00,$c4,$83,$95,$a0,$89,$4f,$a5,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$15,$b2,$00,$c4,$9f,$95,$42,$74,$60,$6b,$42,$59,$a5,$8f,$41,$4b,$5f,$54,$7d,$66,$80,$0f,$b3,$00,$c4,$9a,$95,$5b,$78,$75,$57,$77,$a5,$8f,$41,$80,$15,$b4,$00,$c4,$9f,$95,$42,$6c,$43,$49,$72,$7f,$a5,$8f,$41,$53,$7c,$76,$4d,$40,$80,$13,$b5,$00,$c4,$83,$95,$a0,$89,$4a,$a5,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$12,$b6,$00,$c4,$9e,$95,$3f,$04,$53,$42,$44,$41,$0d,$a5,$8f,$41,$53,$80,$10,$b7,$00,$c4,$9a,$95,$41,$5c,$5c,$50,$69,$6a,$a5,$8f,$41,$80,$13,$b8,$00,$c4,$94,$42,$7e,$7e,$7d,$5c,$49,$8f,$42,$7e,$7e,$7d,$5c,$49,$80,$1a,$b9,$00,$c4,$a4,$95,$3f,$09,$34,$35,$39,$35,$33,$39,$31,$37,$30,$0d,$a5,$8f,$5b,$59,$40,$4b,$62,$80,$0e,$ba,$00,$c4,$84,$95,$a0,$89,$53,$a5,$8f,$41,$4e,$80,$15,$bb,$00,$c4,$99,$95,$41,$7d,$79,$79,$7e,$53,$a5,$8f,$41,$7d,$79,$79,$7e,$53,$80,$13,$bc,$00,$c4,$83,$95,$a0,$89,$54,$a5,$8f,$94,$41,$52,$54,$55,$41,$4f,$80,$14,$bd,$00,$c4,$8a,$8a,$41,$6e,$6f,$5e,$73,$4e,$8f,$41,$6e,$6f,$5e,$73,$4e,$80,$1c,$be,$00,$c4,$a4,$95,$3f,$0a,$2d,$34,$36,$35,$30,$33,$36,$37,$31,$39,$0d,$a5,$8f,$8a,$5b,$6d,$7e,$56,$6f,$80,$11,$bf,$00,$c4,$9a,$95,$8a,$7b,$44,$59,$45,$76,$a5,$8f,$8a,$41,$80,$13,$c0,$00,$c4,$83,$95,$a0,$89,$51,$a5,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$16,$c1,$00,$c4,$9e,$95,$3f,$08,$73,$6b,$4b,$61,$61,$57,$4e,$6e,$0d,$a5,$8f,$41,$73,$80,$13,$c2,$00,$c4,$83,$95,$a0,$89,$53,$a5,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$14,$c3,$00,$c4,$9f,$95,$6e,$48,$65,$65,$67,$a5,$8f,$43,$51,$77,$5a,$5a,$58,$80,$13,$c4,$00,$c4,$83,$95,$a0,$89,$51,$a5,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$14,$c5,$00,$c4,$8a,$8a,$41,$65,$7f,$4a,$4f,$48,$8f,$41,$65,$7f,$4a,$4f,$48,$80,$14,$c6,$00,$c4,$9f,$95,$43,$60,$6d,$60,$67,$6a,$a5,$8f,$5f,$52,$5f,$58,$55,$80,$1c,$c7,$00,$c4,$a4,$95,$3f,$0a,$2d,$35,$37,$31,$39,$33,$39,$36,$37,$37,$0d,$a5,$8f,$8a,$62,$45,$71,$6d,$5d,$80,$12,$c8,$00,$c4,$9e,$95,$3f,$04,$53,$64,$4d,$47,$0d,$a5,$8f,$41,$53,$80,$1c,$c9,$00,$c4,$a4,$95,$3f,$0a,$31,$35,$30,$35,$30,$38,$36,$38,$32,$32,$0d,$a5,$8f,$41,$59,$6d,$5c,$75,$66,$80,$15,$ca,$00,$c4,$9f,$95,$42,$7b,$6f,$4c,$4a,$7b,$a5,$8f,$41,$44,$50,$73,$75,$44,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:5B6A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:6B6A -  -  -  -  EndTestInstance:
   18 00:6B6A -  -  -  -  		
   19 00:6B6A -  -  -  -  ; ***************************************************************************************
   20 00:6B6A -  -  -  -  ;
   21 00:6B6A -  -  -  -  ;									Changes and Updates
   22 00:6B6A -  -  -  -  ;
   23 00:6B6A -  -  -  -  ; ***************************************************************************************
   24 00:6B6A -  -  -  -  ;
   25 00:6B6A -  -  -  -  ;		Date			Notes
   26 00:6B6A -  -  -  -  ;		==== 			=====
   27 00:6B6A -  -  -  -  ;
   28 00:6B6A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:6B6A -  -  -  -  FinalAddress:
