    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;
   19 00:0000 -  -  -  -  XTYPE_INTEGER = $00	 						; Constants for C
   20 00:0000 -  -  -  -  XTYPE_FLOAT = $01
   21 00:0000 -  -  -  -  XTYPE_STRING = $02
   22 00:0000 -  -  -  -  XTYPE_REFERENCE = $80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   25 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   26 00:0000 -  -  -  -  CIsString = 1 								; Bit 1 set if string
   27 00:0000 -  -  -  -  CIsFloat = 0 								; Bit 0 set if float
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ;									Changes and Updates
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;		Date			Notes
   36 00:0000 -  -  -  -  ;		==== 			=====
   37 00:0000 -  -  -  -  ;
   38 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000             
   22 00:0000             #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000             
   34 00:0000             #else
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000 -  -  -  -  
   49 00:0000 -  -  -  -  #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000             #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000             #else
   39 00:0000 -  -  -  -  #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000             #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000             #else
   62 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000 -  -  -  -  #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000             #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000             #else
   86 00:0000 -  -  -  -  #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000 -  -  -  -  #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000             #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000             #else
  103 00:0000 -  -  -  -  #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000 -  -  -  -  #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000             
  119 00:0000             #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000             
  123 00:0000             #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000             
  127 00:0000             #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000             
  131 00:0000             #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000             
  135 00:0000             #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000             
  139 00:0000             #else 									
  140 00:0000 -  -  -  -  
  141 00:0000 -  -  -  -  #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000 -  -  -  -  
  145 00:0000 -  -  -  -  #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000 -  -  -  -  
  149 00:0000 -  -  -  -  #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000 -  -  -  -  
  157 00:0000 -  -  -  -  #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000 -  -  -  -  
  161 00:0000 -  -  -  -  #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_XOR                             	$0092 ; xor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000             
   24 00:0000             #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000             
   28 00:0000             #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000             
   32 00:0000             #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000             
   36 00:0000             #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000             
   40 00:0000             #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000             
   44 00:0000             #else 									
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000 -  -  -  -  
   50 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000 -  -  -  -  
   54 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000             
   21 00:0000             .assume ADL=1
   22 00:0000             
   23 00:0000             #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000             
   29 00:0000             ; ***************************************************************************************
   30 00:0000             ;
   31 00:0000             ; 								Handle Z80 for Aquarius binary
   32 00:0000             ;
   33 00:0000             ; ***************************************************************************************
   34 00:0000             
   35 00:0000             #else 
   36 00:0000 -  -  -  -  
   37 00:0000 -  -  -  -  #ifdef AQUARIUS
   38 00:0000 -  -  -  -  .org 	$4000
   39 00:4000 31 FF BF -  		ld 		sp,$BFFF
   40 00:4003 -  -  -  -  #endif
   41 00:4003 -  -  -  -  
   42 00:4003 -  -  -  -  #endif
   43 00:4003 CD 98 46 -  		call 	SYSInitialise
   44 00:4006 11 00 48 -  		ld 		de,TestInstance
   45 00:4009 21 3B 58 -  		ld 		hl,EndTestInstance
   46 00:400C CD F3 41 -  		call 	SetCurrentInstance
   47 00:400F -  -  -  -  
   48 00:400F 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:4011 32 4D 40 -  		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:4014 -  -  -  -  		
   51 00:4014 C3 E0 40 -  		jp 		Command_RUN
   52 00:4017 -  -  -  -  
   53 00:4017 -  -  -  -  WarmStart:		
   54 00:4017 3E 2A -  -  		ld 		a,'*'
   55 00:4019 CD A0 46 -  		call 	SYSPrintChar
   56 00:401C CD 9E 46 -  		call 	SYSTerminate
   57 00:401F -  -  -  -  
   58 00:401F -  -  -  -  Unimplemented:
   59 00:401F 3E 04 C3 67 
              41 -  -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:4024 -  -  -  -  Int32DivZeroHandler:
   61 00:4024 3E 05 C3 67 
              41 -  -  -  		ERR_DIVZERO
   62 00:4029 -  -  -  -  
   63 00:4029 -  -  -  -  ; ***************************************************************************************
   64 00:4029 -  -  -  -  ;
   65 00:4029 -  -  -  -  ;									Changes and Updates
   66 00:4029 -  -  -  -  ;
   67 00:4029 -  -  -  -  ; ***************************************************************************************
   68 00:4029 -  -  -  -  ;
   69 00:4029 -  -  -  -  ;		Date			Notes
   70 00:4029 -  -  -  -  ;		==== 			=====
   71 00:4029 -  -  -  -  ;
   72 00:4029 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:4029 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:4029 -  -  -  -  ; ***************************************************************************************
    2 00:4029 -  -  -  -  ; ***************************************************************************************
    3 00:4029 -  -  -  -  ;
    4 00:4029 -  -  -  -  ;		Name : 		01data.asm
    5 00:4029 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4029 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4029 -  -  -  -  ;		Reviewed :	No
    8 00:4029 -  -  -  -  ;		Purpose :	Data space
    9 00:4029 -  -  -  -  ;
   10 00:4029 -  -  -  -  ; ***************************************************************************************
   11 00:4029 -  -  -  -  ; ***************************************************************************************
   12 00:4029 -  -  -  -  
   13 00:4029 -  -  -  -  ; ***************************************************************************************
   14 00:4029 -  -  -  -  ;
   15 00:4029 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:4029 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:4029 -  -  -  -  ;
   18 00:4029 -  -  -  -  ; ***************************************************************************************
   19 00:4029 -  -  -  -  
   20 00:4029 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:4029 -  -  -  -  
   22 00:4029 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:4029 -  -  -  -  
   24 00:4029 -  -  -  -  ; ***************************************************************************************
   25 00:4029 -  -  -  -  ;
   26 00:4029 -  -  -  -  ;								Defines the current instance
   27 00:4029 -  -  -  -  ;
   28 00:4029 -  -  -  -  ; ***************************************************************************************
   29 00:4029 -  -  -  -  
   30 00:4029 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:4029 00 00 00 00 		.dw 	0,0
   32 00:402D -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:402D 00 00 00 00 		.dw 	0,0		
   34 00:4031 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:4031 00 00 00 00 		.dw 	0,0 							
   36 00:4035 -  -  -  -  
   37 00:4035 -  -  -  -  ; ***************************************************************************************
   38 00:4035 -  -  -  -  ;
   39 00:4035 -  -  -  -  ;								Allocatable memory, working down.
   40 00:4035 -  -  -  -  ;
   41 00:4035 -  -  -  -  ; ***************************************************************************************
   42 00:4035 -  -  -  -  
   43 00:4035 -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:4035 00 00 00 00 		.dw 	0,0
   45 00:4039 -  -  -  -  
   46 00:4039 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:4039 00 00 00 00 		.dw 	0,0		
   48 00:403D -  -  -  -  
   49 00:403D -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:403D 00 00 00 00 		.dw 	0,0
   51 00:4041 -  -  -  -  
   52 00:4041 -  -  -  -  ;
   53 00:4041 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:4041 -  -  -  -  ;
   55 00:4041 -  -  -  -  
   56 00:4041 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:4041 00 00 00 00 		.dw 	0,0
   58 00:4045 -  -  -  -  
   59 00:4045 -  -  -  -  ; ***************************************************************************************
   60 00:4045 -  -  -  -  ;
   61 00:4045 -  -  -  -  ;										Run variables
   62 00:4045 -  -  -  -  ;
   63 00:4045 -  -  -  -  ; ***************************************************************************************
   64 00:4045 -  -  -  -  
   65 00:4045 -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 00:4045 00 00 00 00 		.dw 	0,0
   67 00:4049 -  -  -  -  		
   68 00:4049 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 00:4049 00 00 00 00 		.dw 	0,0
   70 00:404D -  -  -  -  
   71 00:404D -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 00:404D 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 00:4053 -  -  -  -  
   74 00:4053 -  -  -  -  AConvert: 									; used for address conversions.
   75 00:4053 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:4059 -  -  -  -  		
   77 00:4059 -  -  -  -  RandomSeed: 								; random number seeds.
   78 00:4059 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 00:4069 -  -  -  -  
   80 00:4069 -  -  -  -  s; ***************************************************************************************
   81 00:4069 -  -  -  -  ;
   82 00:4069 -  -  -  -  ;										  Buffers
   83 00:4069 -  -  -  -  ;
   84 00:4069 -  -  -  -  ; ***************************************************************************************
   85 00:4069 -  -  -  -  
   86 00:4069 -  -  -  -  ConvertBuffer:
   87 00:4069 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 00:40A9 -  -  -  -  
   89 00:40A9 -  -  -  -  ; ***************************************************************************************
   90 00:40A9 -  -  -  -  ;
   91 00:40A9 -  -  -  -  ;									Changes and Updates
   92 00:40A9 -  -  -  -  ;
   93 00:40A9 -  -  -  -  ; ***************************************************************************************
   94 00:40A9 -  -  -  -  ;
   95 00:40A9 -  -  -  -  ;		Date			Notes
   96 00:40A9 -  -  -  -  ;		==== 			=====
   97 00:40A9 -  -  -  -  ;
   98 00:40A9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:40A9 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:40A9 -  -  -  -  ; ***************************************************************************************
    2 00:40A9 -  -  -  -  ; ***************************************************************************************
    3 00:40A9 -  -  -  -  ;
    4 00:40A9 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:40A9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40A9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40A9 -  -  -  -  ;		Reviewed :	No
    8 00:40A9 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:40A9 -  -  -  -  ;
   10 00:40A9 -  -  -  -  ; ***************************************************************************************
   11 00:40A9 -  -  -  -  ; ***************************************************************************************
   12 00:40A9 -  -  -  -  
   13 00:40A9 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:40A9 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:40A9 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:40A9 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:40A9 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:40A9 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:40A9 C3 C4 41 -  		jp 		SyntaxError
   20 00:40AC -  -  -  -  
   21 00:40AC -  -  -  -  ; ***************************************************************************************
   22 00:40AC -  -  -  -  ;
   23 00:40AC -  -  -  -  ;									Changes and Updates
   24 00:40AC -  -  -  -  ;
   25 00:40AC -  -  -  -  ; ***************************************************************************************
   26 00:40AC -  -  -  -  ;
   27 00:40AC -  -  -  -  ;		Date			Notes
   28 00:40AC -  -  -  -  ;		==== 			=====
   29 00:40AC -  -  -  -  ;
   30 00:40AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:40AC -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:40AC -  -  -  -  ; ***************************************************************************************
    2 00:40AC -  -  -  -  ; ***************************************************************************************
    3 00:40AC -  -  -  -  ;
    4 00:40AC -  -  -  -  ;		Name : 		colon.asm
    5 00:40AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40AC -  -  -  -  ;		Date : 		3rd May 2022
    7 00:40AC -  -  -  -  ;		Reviewed :	No
    8 00:40AC -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:40AC -  -  -  -  ;
   10 00:40AC -  -  -  -  ; ***************************************************************************************
   11 00:40AC -  -  -  -  ; ***************************************************************************************
   12 00:40AC -  -  -  -  
   13 00:40AC -  -  -  -  ; ***************************************************************************************
   14 00:40AC -  -  -  -  ;
   15 00:40AC -  -  -  -  ;								Colon command, this is ignored.
   16 00:40AC -  -  -  -  ;
   17 00:40AC -  -  -  -  ; ***************************************************************************************
   18 00:40AC -  -  -  -  
   19 00:40AC -  -  -  -  Command_Colon: 	;; [:]
   20 00:40AC C9 -  -  -  		ret
   21 00:40AD -  -  -  -  
   22 00:40AD -  -  -  -  ; ***************************************************************************************
   23 00:40AD -  -  -  -  ;
   24 00:40AD -  -  -  -  ;									Changes and Updates
   25 00:40AD -  -  -  -  ;
   26 00:40AD -  -  -  -  ; ***************************************************************************************
   27 00:40AD -  -  -  -  ;
   28 00:40AD -  -  -  -  ;		Date			Notes
   29 00:40AD -  -  -  -  ;		==== 			=====
   30 00:40AD -  -  -  -  ;
   31 00:40AD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:40AD -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:40AD -  -  -  -  ; ***************************************************************************************
    2 00:40AD -  -  -  -  ; ***************************************************************************************
    3 00:40AD -  -  -  -  ;
    4 00:40AD -  -  -  -  ;		Name : 		end.asm
    5 00:40AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40AD -  -  -  -  ;		Reviewed :	No
    8 00:40AD -  -  -  -  ;		Purpose :	End command
    9 00:40AD -  -  -  -  ;
   10 00:40AD -  -  -  -  ; ***************************************************************************************
   11 00:40AD -  -  -  -  ; ***************************************************************************************
   12 00:40AD -  -  -  -  
   13 00:40AD -  -  -  -  ; ***************************************************************************************
   14 00:40AD -  -  -  -  ;
   15 00:40AD -  -  -  -  ;										END command
   16 00:40AD -  -  -  -  ;
   17 00:40AD -  -  -  -  ; ***************************************************************************************
   18 00:40AD -  -  -  -  
   19 00:40AD -  -  -  -  Command_END: 	;; [end]
   20 00:40AD 3E 00 C3 67 
              41 -  -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:40B2 -  -  -  -  
   22 00:40B2 -  -  -  -  ; ***************************************************************************************
   23 00:40B2 -  -  -  -  ;
   24 00:40B2 -  -  -  -  ;									Changes and Updates
   25 00:40B2 -  -  -  -  ;
   26 00:40B2 -  -  -  -  ; ***************************************************************************************
   27 00:40B2 -  -  -  -  ;
   28 00:40B2 -  -  -  -  ;		Date			Notes
   29 00:40B2 -  -  -  -  ;		==== 			=====
   30 00:40B2 -  -  -  -  ;
   31 00:40B2 -  -  -  -  ; ***************************************************************************************
   32 00:40B2 -  -  -  -  		
Listing for file "_build.asm"
   15 00:40B2 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:40B2 -  -  -  -  ; ***************************************************************************************
    2 00:40B2 -  -  -  -  ; ***************************************************************************************
    3 00:40B2 -  -  -  -  ;
    4 00:40B2 -  -  -  -  ;		Name : 		endofline.asm
    5 00:40B2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40B2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40B2 -  -  -  -  ;		Reviewed :	None
    8 00:40B2 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:40B2 -  -  -  -  ;
   10 00:40B2 -  -  -  -  ; ***************************************************************************************
   11 00:40B2 -  -  -  -  ; ***************************************************************************************
   12 00:40B2 -  -  -  -  
   13 00:40B2 -  -  -  -  ; ***************************************************************************************
   14 00:40B2 -  -  -  -  ;
   15 00:40B2 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:40B2 -  -  -  -  ;
   17 00:40B2 -  -  -  -  ; ***************************************************************************************
   18 00:40B2 -  -  -  -  
   19 00:40B2 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:40B2 DD 2A 45 40 		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:40B6 11 00 00 -  		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:40B9 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:40BC DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:40BE -  -  -  -  		;
   25 00:40BE ED 7B 49 40 		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:40C2 C3 EB 40 -  		jp 		CRNewLine 					; and start running a new line.
   27 00:40C5 -  -  -  -  
   28 00:40C5 -  -  -  -  ; ***************************************************************************************
   29 00:40C5 -  -  -  -  ;
   30 00:40C5 -  -  -  -  ;									Changes and Updates
   31 00:40C5 -  -  -  -  ;
   32 00:40C5 -  -  -  -  ; ***************************************************************************************
   33 00:40C5 -  -  -  -  ;
   34 00:40C5 -  -  -  -  ;		Date			Notes
   35 00:40C5 -  -  -  -  ;		==== 			=====
   36 00:40C5 -  -  -  -  ;
   37 00:40C5 -  -  -  -  ; ***************************************************************************************
   38 00:40C5 -  -  -  -  		
Listing for file "_build.asm"
   16 00:40C5 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:40C5 -  -  -  -  ; ***************************************************************************************
    2 00:40C5 -  -  -  -  ; ***************************************************************************************
    3 00:40C5 -  -  -  -  ;
    4 00:40C5 -  -  -  -  ;		Name : 		rem.asm
    5 00:40C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40C5 -  -  -  -  ;		Reviewed :	No
    8 00:40C5 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:40C5 -  -  -  -  ;
   10 00:40C5 -  -  -  -  ; ***************************************************************************************
   11 00:40C5 -  -  -  -  ; ***************************************************************************************
   12 00:40C5 -  -  -  -  
   13 00:40C5 -  -  -  -  ; ***************************************************************************************
   14 00:40C5 -  -  -  -  ;
   15 00:40C5 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:40C5 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:40C5 -  -  -  -  ;
   18 00:40C5 -  -  -  -  ; ***************************************************************************************
   19 00:40C5 -  -  -  -  
   20 00:40C5 -  -  -  -  Command_REM: 	;; [rem]
   21 00:40C5 -  -  -  -  Command_REM2: 	;; [']
   22 00:40C5 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:40C8 DD 23 -  -  		inc 	ix
   24 00:40CA FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:40CC C8 -  -  -  		ret 	z
   26 00:40CD FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:40CF C8 -  -  -  		ret 	z
   28 00:40D0 FE 3F -  -  		cp 		STRING_MARKER
   29 00:40D2 C2 C4 41 -  		jp 		nz,SyntaxError
   30 00:40D5 -  -  -  -  		;		
   31 00:40D5 11 00 00 -  		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:40D8 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:40DB 13 -  -  -  		inc 	de 
   34 00:40DC 13 -  -  -  		inc 	de
   35 00:40DD DD 19 -  -  		add 	ix,de 						; skip string
   36 00:40DF C9 -  -  -  		ret
   37 00:40E0 -  -  -  -  
   38 00:40E0 -  -  -  -  ; ***************************************************************************************
   39 00:40E0 -  -  -  -  ;
   40 00:40E0 -  -  -  -  ;									Changes and Updates
   41 00:40E0 -  -  -  -  ;
   42 00:40E0 -  -  -  -  ; ***************************************************************************************
   43 00:40E0 -  -  -  -  ;
   44 00:40E0 -  -  -  -  ;		Date			Notes
   45 00:40E0 -  -  -  -  ;		==== 			=====
   46 00:40E0 -  -  -  -  ;
   47 00:40E0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:40E0 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:40E0 -  -  -  -  ; ***************************************************************************************
    2 00:40E0 -  -  -  -  ; ***************************************************************************************
    3 00:40E0 -  -  -  -  ;
    4 00:40E0 -  -  -  -  ;		Name : 		run.asm
    5 00:40E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:40E0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:40E0 -  -  -  -  ;		Reviewed :	No
    8 00:40E0 -  -  -  -  ;		Purpose :	Run command
    9 00:40E0 -  -  -  -  ;
   10 00:40E0 -  -  -  -  ; ***************************************************************************************
   11 00:40E0 -  -  -  -  ; ***************************************************************************************
   12 00:40E0 -  -  -  -  
   13 00:40E0 -  -  -  -  ; ***************************************************************************************
   14 00:40E0 -  -  -  -  ;
   15 00:40E0 -  -  -  -  ;										RUN command
   16 00:40E0 -  -  -  -  ;
   17 00:40E0 -  -  -  -  ; ***************************************************************************************
   18 00:40E0 -  -  -  -  
   19 00:40E0 -  -  -  -  Command_RUN: 	;; [run]
   20 00:40E0 CD C9 41 -  		call 	Command_CLEAR 				; clear all variables, stack
   21 00:40E3 -  -  -  -  
   22 00:40E3 DD 2A 31 40 		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:40E7 ED 73 49 40 		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:40EB -  -  -  -  		;
   25 00:40EB -  -  -  -  		; 		New line at IX.
   26 00:40EB -  -  -  -  		;
   27 00:40EB -  -  -  -  CRNewLine:
   28 00:40EB DD 22 45 40 		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:40EF -  -  -  -  		;
   30 00:40EF DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:40F2 B7 -  -  -  		or 		a
   32 00:40F3 CA AD 40 -  		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:40F6 -  -  -  -  		;
   34 00:40F6 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:40F8 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:40FA DD 23 -  -  		inc 	ix
   37 00:40FC -  -  -  -  		;
   38 00:40FC -  -  -  -  		; 		New command at IX
   39 00:40FC -  -  -  -  		;
   40 00:40FC -  -  -  -  _CRNewCommand:	
   41 00:40FC DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:40FF B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:4100 F2 30 41 -  		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:4103 -  -  -  -  		;
   45 00:4103 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:4105 30 05 -  -  		jr  	nc,_CRDoCommand
   47 00:4107 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:4109 D2 25 41 -  		jp 		nc,_CRAlternateLets
   49 00:410C -  -  -  -  		;
   50 00:410C -  -  -  -  _CRDoCommand:		
   51 00:410C E6 7F 21 00 
              00 6F 29 11 
              36 44 19 5E 
              23 56 ED 53 
              4E 40 -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:411E DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:4120 CD 4D 40 -  		call 	JumpCode 					; call the routine.
   54 00:4123 18 D7 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:4125 -  -  -  -  		;
   56 00:4125 -  -  -  -  		; 		Do CALL (HL)
   57 00:4125 -  -  -  -  		;
   58 00:4125 -  -  -  -  		;
   59 00:4125 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:4125 -  -  -  -  		;		
   61 00:4125 -  -  -  -  _CRAlternateLets:		
   62 00:4125 FE 83 -  -  		cp 		KWD_PLING
   63 00:4127 28 0C -  -  		jr 		z,_CRAssignmentLet
   64 00:4129 FE 84 -  -  		cp 		KWD_QMARK
   65 00:412B 28 08 -  -  		jr 		z,_CRAssignmentLet
   66 00:412D C3 C4 41 -  		jp 		SyntaxError
   67 00:4130 -  -  -  -  		;
   68 00:4130 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:4130 -  -  -  -  		;
   70 00:4130 -  -  -  -  _CRAssignmentHandler:		
   71 00:4130 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:4132 D2 C4 41 -  		jp 		nc,SyntaxError
   73 00:4135 -  -  -  -  _CRAssignmentLet:		
   74 00:4135 3E 0C C3 67 
              41 -  -  -  		ERR_TODO
   75 00:413A -  -  -  -  		;call	Command_LET
   76 00:413A C3 FC 40 -  		jp 		_CRNewCommand
   77 00:413D -  -  -  -  
   78 00:413D -  -  -  -  ; ***************************************************************************************
   79 00:413D -  -  -  -  ;
   80 00:413D -  -  -  -  ;									Changes and Updates
   81 00:413D -  -  -  -  ;
   82 00:413D -  -  -  -  ; ***************************************************************************************
   83 00:413D -  -  -  -  ;
   84 00:413D -  -  -  -  ;		Date			Notes
   85 00:413D -  -  -  -  ;		==== 			=====
   86 00:413D -  -  -  -  ;
   87 00:413D -  -  -  -  ; ***************************************************************************************
   88 00:413D -  -  -  -  		
Listing for file "_build.asm"
   18 00:413D -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:413D -  -  -  -  ; ***************************************************************************************
    2 00:413D -  -  -  -  ; ***************************************************************************************
    3 00:413D -  -  -  -  ;
    4 00:413D -  -  -  -  ;		Name : 		stop.asm
    5 00:413D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:413D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:413D -  -  -  -  ;		Reviewed :	No
    8 00:413D -  -  -  -  ;		Purpose :	Stop command
    9 00:413D -  -  -  -  ;
   10 00:413D -  -  -  -  ; ***************************************************************************************
   11 00:413D -  -  -  -  ; ***************************************************************************************
   12 00:413D -  -  -  -  
   13 00:413D -  -  -  -  ; ***************************************************************************************
   14 00:413D -  -  -  -  ;
   15 00:413D -  -  -  -  ;										STOP command
   16 00:413D -  -  -  -  ;
   17 00:413D -  -  -  -  ; ***************************************************************************************
   18 00:413D -  -  -  -  
   19 00:413D -  -  -  -  Command_STOP: 	;; [stop]
   20 00:413D 3E 0A C3 67 
              41 -  -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:4142 -  -  -  -  
   22 00:4142 -  -  -  -  ; ***************************************************************************************
   23 00:4142 -  -  -  -  ;
   24 00:4142 -  -  -  -  ;									Changes and Updates
   25 00:4142 -  -  -  -  ;
   26 00:4142 -  -  -  -  ; ***************************************************************************************
   27 00:4142 -  -  -  -  ;
   28 00:4142 -  -  -  -  ;		Date			Notes
   29 00:4142 -  -  -  -  ;		==== 			=====
   30 00:4142 -  -  -  -  ;
   31 00:4142 -  -  -  -  ; ***************************************************************************************
   32 00:4142 -  -  -  -  		
Listing for file "_build.asm"
   19 00:4142 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:4142 -  -  -  -  ; ***************************************************************************************
    2 00:4142 -  -  -  -  ; ***************************************************************************************
    3 00:4142 -  -  -  -  ;
    4 00:4142 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:4142 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4142 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4142 -  -  -  -  ;		Reviewed :	No
    8 00:4142 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:4142 -  -  -  -  ;
   10 00:4142 -  -  -  -  ; ***************************************************************************************
   11 00:4142 -  -  -  -  ; ***************************************************************************************
   12 00:4142 -  -  -  -  
   13 00:4142 -  -  -  -  ; ***************************************************************************************
   14 00:4142 -  -  -  -  ;
   15 00:4142 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:4142 -  -  -  -  ;
   17 00:4142 -  -  -  -  ; ***************************************************************************************
   18 00:4142 -  -  -  -  
   19 00:4142 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:4142             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:4142             		inc 	ix
   22 00:4142             		cp 		ch 							; exit if matches
   23 00:4142             		ret 	z
   24 00:4142             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:4142             		jp 		ErrorHandler
   26 00:4142             #endmacro
   27 00:4142 -  -  -  -  
   28 00:4142 -  -  -  -  CheckRightBracket:
   29 00:4142 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 67 
              41 -  -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:414F -  -  -  -  
   31 00:414F -  -  -  -  CheckComma:
   32 00:414F DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 67 
              41 -  -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 00:415C -  -  -  -  
   34 00:415C -  -  -  -  ; ***************************************************************************************
   35 00:415C -  -  -  -  ;
   36 00:415C -  -  -  -  ; 							Check A, gives Syntax Error
   37 00:415C -  -  -  -  ;
   38 00:415C -  -  -  -  ; ***************************************************************************************
   39 00:415C -  -  -  -  
   40 00:415C -  -  -  -  CheckNextA:
   41 00:415C DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 00:415F DD 23 -  -  		inc 	ix 							; skip character
   43 00:4161 C8 -  -  -  		ret 	z 							; yes, okay
   44 00:4162 3E 0B C3 67 
              41 -  -  -  		ERR_SYNTAX 							; no, syntax error.
   45 00:4167 -  -  -  -  		
   46 00:4167 -  -  -  -  ; ***************************************************************************************
   47 00:4167 -  -  -  -  ;
   48 00:4167 -  -  -  -  ;									Changes and Updates
   49 00:4167 -  -  -  -  ;
   50 00:4167 -  -  -  -  ; ***************************************************************************************
   51 00:4167 -  -  -  -  ;
   52 00:4167 -  -  -  -  ;		Date			Notes
   53 00:4167 -  -  -  -  ;		==== 			=====
   54 00:4167 -  -  -  -  ;
   55 00:4167 -  -  -  -  ; ***************************************************************************************
   56 00:4167 -  -  -  -  		
Listing for file "_build.asm"
   20 00:4167 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:4167 -  -  -  -  ; ***************************************************************************************
    2 00:4167 -  -  -  -  ; ***************************************************************************************
    3 00:4167 -  -  -  -  ;
    4 00:4167 -  -  -  -  ;		Name : 		errors.asm
    5 00:4167 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4167 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4167 -  -  -  -  ;		Reviewed :	No
    8 00:4167 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:4167 -  -  -  -  ;
   10 00:4167 -  -  -  -  ; ***************************************************************************************
   11 00:4167 -  -  -  -  ; ***************************************************************************************
   12 00:4167 -  -  -  -  
   13 00:4167 -  -  -  -  ; ***************************************************************************************
   14 00:4167 -  -  -  -  ;
   15 00:4167 -  -  -  -  ;								Error handler, message A 
   16 00:4167 -  -  -  -  ;
   17 00:4167 -  -  -  -  ; ***************************************************************************************
   18 00:4167 -  -  -  -  
   19 00:4167 -  -  -  -  ErrorHandler:
   20 00:4167 F5 -  -  -  		push 	af 						; save error ID
   21 00:4168 -  -  -  -  
   22 00:4168 21 00 00 -  		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:416B 6F -  -  -  		ld 		l,a
   24 00:416C 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:416D 29 -  -  -  		add 	hl,hl 		
   26 00:416E 11 30 43 -  		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:4171 19 -  -  -  		add 	hl,de
   28 00:4172 7E 23 66 6F 		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:4176 CD 0C 42 -  		call 	PrintStringAtHL
   30 00:4179 -  -  -  -  		;
   31 00:4179 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:417A B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:417B 28 28 -  -  		jr 		z,_EHExit
   34 00:417D -  -  -  -  		;
   35 00:417D DD 2A 45 40 		ld 		ix,(CurrentLineStart) 	; get line
   36 00:4181 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:4184 B7 -  -  -  		or 		a
   38 00:4185 28 1E -  -  		jr 		z,_EHExit
   39 00:4187 -  -  -  -  
   40 00:4187 21 AB 41 -  		ld 		hl,_EHAtText 			; print "at line"
   41 00:418A CD 0C 42 -  		call 	PrintStringAtHL 
   42 00:418D -  -  -  -  		
   43 00:418D D9 -  -  -  		exx								; HL'HL = line number
   44 00:418E 21 00 00 -  		ld 		hl,$0000 		
   45 00:4191 D9 -  -  -  		exx 
   46 00:4192 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:4195 DD 66 02 -  		ld 		h,(ix+2)
   48 00:4198 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:419A 01 69 40 -  		ld 		bc,ConvertBuffer
   50 00:419D CD 53 46 -  		call 	Int32ToString
   51 00:41A0 C5 -  -  -  		push 	bc
   52 00:41A1 E1 -  -  -  		pop 	hl
   53 00:41A2 CD 0C 42 -  		call 	PrintStringAtHL			; print error line number.
   54 00:41A5 -  -  -  -  _EHExit:		
   55 00:41A5 CD BC 46 -  		call 	SYSPrintCRLF 			; print carriage return
   56 00:41A8 C3 17 40 -  		jp 		WarmStart
   57 00:41AB -  -  -  -  
   58 00:41AB -  -  -  -  _EHAtText:
   59 00:41AB 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:41B5 -  -  -  -  
   61 00:41B5 -  -  -  -  NotImplemented:
   62 00:41B5 3E 04 C3 67 
              41 -  -  -  		ERR_DISABLED
   63 00:41BA -  -  -  -  TypeMismatch:
   64 00:41BA 3E 02 C3 67 
              41 -  -  -  		ERR_BADTYPE
   65 00:41BF -  -  -  -  BadValue:
   66 00:41BF 3E 03 C3 67 
              41 -  -  -  		ERR_BADVALUE
   67 00:41C4 -  -  -  -  SyntaxError:
   68 00:41C4 3E 0B C3 67 
              41 -  -  -  		ERR_SYNTAX
   69 00:41C9 -  -  -  -  						
   70 00:41C9 -  -  -  -  ; ***************************************************************************************
   71 00:41C9 -  -  -  -  ;
   72 00:41C9 -  -  -  -  ;									Changes and Updates
   73 00:41C9 -  -  -  -  ;
   74 00:41C9 -  -  -  -  ; ***************************************************************************************
   75 00:41C9 -  -  -  -  ;
   76 00:41C9 -  -  -  -  ;		Date			Notes
   77 00:41C9 -  -  -  -  ;		==== 			=====
   78 00:41C9 -  -  -  -  ;
   79 00:41C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:41C9 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:41C9 -  -  -  -  ; ***************************************************************************************
    2 00:41C9 -  -  -  -  ; ***************************************************************************************
    3 00:41C9 -  -  -  -  ;
    4 00:41C9 -  -  -  -  ;		Name : 		clear.asm
    5 00:41C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41C9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41C9 -  -  -  -  ;		Reviewed :	No
    8 00:41C9 -  -  -  -  ;		Purpose :	Clear command.
    9 00:41C9 -  -  -  -  ;
   10 00:41C9 -  -  -  -  ; ***************************************************************************************
   11 00:41C9 -  -  -  -  ; ***************************************************************************************
   12 00:41C9 -  -  -  -  
   13 00:41C9 -  -  -  -  ; ***************************************************************************************
   14 00:41C9 -  -  -  -  ;
   15 00:41C9 -  -  -  -  ;										CLEAR command
   16 00:41C9 -  -  -  -  ;
   17 00:41C9 -  -  -  -  ; ***************************************************************************************
   18 00:41C9 -  -  -  -  
   19 00:41C9 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:41C9 -  -  -  -  		;
   21 00:41C9 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:41C9 -  -  -  -  		;
   23 00:41C9 2A 29 40 -  		ld 		hl,(LowMemory) 				; base memory
   24 00:41CC -  -  -  -  _CCFindLow:
   25 00:41CC 11 00 00 -  		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:41CF 5E -  -  -  		ld 		e,(hl)		
   27 00:41D0 19 -  -  -  		add 	hl,de
   28 00:41D1 7B -  -  -  		ld 		a,e
   29 00:41D2 B7 -  -  -  		or 		a
   30 00:41D3 20 F7 -  -  		jr 		nz,_CCFindLow
   31 00:41D5 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 00:41D6 23 -  -  -  		inc 	hl
   33 00:41D7 22 41 40 -  		ld 		(LowAllocMemory),hl
   34 00:41DA -  -  -  -  		;
   35 00:41DA -  -  -  -  		; 	 		Reset the language stack
   36 00:41DA -  -  -  -  		;
   37 00:41DA 2A 2D 40 -  		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 00:41DD -  -  -  -  		;
   39 00:41DD 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 00:41DF 22 35 40 -  		ld 		(LanguageStack),hl 			; going down from here		
   41 00:41E2 11 00 F8 -  		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:41E5 19 -  -  -  		add 	hl,de
   43 00:41E6 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:41E8 22 39 40 -  		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:41EB -  -  -  -  		;
   46 00:41EB 11 80 FF -  		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:41EE 19 -  -  -  		add 	hl,de
   48 00:41EF 22 3D 40 -  		ld 		(StandardIntegers),hl
   49 00:41F2 -  -  -  -  		;
   50 00:41F2 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 00:41F2 -  -  -  -  		;
   52 00:41F2 -  -  -  -  
   53 00:41F2 -  -  -  -  		;
   54 00:41F2 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 00:41F2 -  -  -  -  		;
   56 00:41F2 -  -  -  -  
   57 00:41F2 C9 -  -  -  		ret
   58 00:41F3 -  -  -  -  
   59 00:41F3 -  -  -  -  ; ***************************************************************************************
   60 00:41F3 -  -  -  -  ;
   61 00:41F3 -  -  -  -  ;									Changes and Updates
   62 00:41F3 -  -  -  -  ;
   63 00:41F3 -  -  -  -  ; ***************************************************************************************
   64 00:41F3 -  -  -  -  ;
   65 00:41F3 -  -  -  -  ;		Date			Notes
   66 00:41F3 -  -  -  -  ;		==== 			=====
   67 00:41F3 -  -  -  -  ;
   68 00:41F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:41F3 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:41F3 -  -  -  -  ; ***************************************************************************************
    2 00:41F3 -  -  -  -  ; ***************************************************************************************
    3 00:41F3 -  -  -  -  ;
    4 00:41F3 -  -  -  -  ;		Name : 		instance.asm
    5 00:41F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41F3 -  -  -  -  ;		Reviewed :	No
    8 00:41F3 -  -  -  -  ;		Purpose :	Instance handling
    9 00:41F3 -  -  -  -  ;
   10 00:41F3 -  -  -  -  ; ***************************************************************************************
   11 00:41F3 -  -  -  -  ; ***************************************************************************************
   12 00:41F3 -  -  -  -  
   13 00:41F3 -  -  -  -  ; ***************************************************************************************
   14 00:41F3 -  -  -  -  ;
   15 00:41F3 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:41F3 -  -  -  -  ;
   17 00:41F3 -  -  -  -  ; ***************************************************************************************
   18 00:41F3 -  -  -  -  
   19 00:41F3 -  -  -  -  SetCurrentInstance:
   20 00:41F3 ED 53 29 40 		ld 		(LowMemory),de 				; set low and high memory
   21 00:41F7 22 2D 40 -  		ld 		(HighMemory),hl 
   22 00:41FA ED 53 31 40 		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:41FE -  -  -  -  
   24 00:41FE C9 -  -  -  		ret
   25 00:41FF -  -  -  -  
   26 00:41FF -  -  -  -  
   27 00:41FF -  -  -  -  ; ***************************************************************************************
   28 00:41FF -  -  -  -  ;
   29 00:41FF -  -  -  -  ;									Changes and Updates
   30 00:41FF -  -  -  -  ;
   31 00:41FF -  -  -  -  ; ***************************************************************************************
   32 00:41FF -  -  -  -  ;
   33 00:41FF -  -  -  -  ;		Date			Notes
   34 00:41FF -  -  -  -  ;		==== 			=====
   35 00:41FF -  -  -  -  ;
   36 00:41FF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:41FF -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:41FF -  -  -  -  ; ***************************************************************************************
    2 00:41FF -  -  -  -  ; ***************************************************************************************
    3 00:41FF -  -  -  -  ;
    4 00:41FF -  -  -  -  ;		Name : 		new.asm
    5 00:41FF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:41FF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:41FF -  -  -  -  ;		Reviewed :	No
    8 00:41FF -  -  -  -  ;		Purpose :	New command.
    9 00:41FF -  -  -  -  ;
   10 00:41FF -  -  -  -  ; ***************************************************************************************
   11 00:41FF -  -  -  -  ; ***************************************************************************************
   12 00:41FF -  -  -  -  
   13 00:41FF -  -  -  -  ; ***************************************************************************************
   14 00:41FF -  -  -  -  ;
   15 00:41FF -  -  -  -  ;										NEW command
   16 00:41FF -  -  -  -  ;
   17 00:41FF -  -  -  -  ; ***************************************************************************************
   18 00:41FF -  -  -  -  
   19 00:41FF -  -  -  -  Command_NEW: 	;; [new]
   20 00:41FF 2A 31 40 -  		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:4202 36 00 -  -  		ld 		(hl),0
   22 00:4204 CD C9 41 -  		call 	Command_CLEAR 				; clear all variables
   23 00:4207 3E 00 C3 67 
              41 -  -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:420C -  -  -  -  
   25 00:420C -  -  -  -  ; ***************************************************************************************
   26 00:420C -  -  -  -  ;
   27 00:420C -  -  -  -  ;									Changes and Updates
   28 00:420C -  -  -  -  ;
   29 00:420C -  -  -  -  ; ***************************************************************************************
   30 00:420C -  -  -  -  ;
   31 00:420C -  -  -  -  ;		Date			Notes
   32 00:420C -  -  -  -  ;		==== 			=====
   33 00:420C -  -  -  -  ;
   34 00:420C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:420C -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:420C -  -  -  -  ; ***************************************************************************************
    2 00:420C -  -  -  -  ; ***************************************************************************************
    3 00:420C -  -  -  -  ;
    4 00:420C -  -  -  -  ;		Name : 		utility.asm
    5 00:420C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:420C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:420C -  -  -  -  ;		Reviewed :	No
    8 00:420C -  -  -  -  ;		Purpose :	Utility routines
    9 00:420C -  -  -  -  ;
   10 00:420C -  -  -  -  ; ***************************************************************************************
   11 00:420C -  -  -  -  ; ***************************************************************************************
   12 00:420C -  -  -  -  
   13 00:420C -  -  -  -  ; ***************************************************************************************
   14 00:420C -  -  -  -  ;
   15 00:420C -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:420C -  -  -  -  ;
   17 00:420C -  -  -  -  ; ***************************************************************************************
   18 00:420C -  -  -  -  
   19 00:420C -  -  -  -  PrintStringAtHL:
   20 00:420C 7E -  -  -  		ld 		a,(hl)
   21 00:420D B7 -  -  -  		or 		a
   22 00:420E C8 -  -  -  		ret 	z
   23 00:420F CD A0 46 -  		call 	SYSPrintChar
   24 00:4212 23 -  -  -  		inc 	hl
   25 00:4213 18 F7 -  -  		jr 		PrintStringAtHL
   26 00:4215 -  -  -  -  
   27 00:4215 -  -  -  -  ; ***************************************************************************************
   28 00:4215 -  -  -  -  ;
   29 00:4215 -  -  -  -  ;									Changes and Updates
   30 00:4215 -  -  -  -  ;
   31 00:4215 -  -  -  -  ; ***************************************************************************************
   32 00:4215 -  -  -  -  ;
   33 00:4215 -  -  -  -  ;		Date			Notes
   34 00:4215 -  -  -  -  ;		==== 			=====
   35 00:4215 -  -  -  -  ;
   36 00:4215 -  -  -  -  ; ***************************************************************************************
   37 00:4215 -  -  -  -  		
Listing for file "_build.asm"
   25 00:4215 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:4215 -  -  -  -  ;
    2 00:4215 -  -  -  -  ;	This file is automatically generated.
    3 00:4215 -  -  -  -  ;
    4 00:4215 -  -  -  -  ;
    5 00:4215 -  -  -  -  ;	Keywords for set 0
    6 00:4215 -  -  -  -  ;
    7 00:4215 -  -  -  -  KeywordsSet0:
    8 00:4215 01 20 -  -  	.db	1," "              ; $0080
    9 00:4217 01 20 -  -  	.db	1," "              ; $0081
   10 00:4219 01 20 -  -  	.db	1," "              ; $0082
   11 00:421B 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:421D 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:421F 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:4221 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:4223 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:4227 01 2B -  -  	.db	1,"+"              ; $0088
   17 00:4229 01 2D -  -  	.db	1,"-"              ; $0089
   18 00:422B 02 3E 3D -  	.db	2,">="             ; $008a
   19 00:422E 02 3C 3D -  	.db	2,"<="             ; $008b
   20 00:4231 01 3E -  -  	.db	1,">"              ; $008c
   21 00:4233 01 3C -  -  	.db	1,"<"              ; $008d
   22 00:4235 01 3D -  -  	.db	1,"="              ; $008e
   23 00:4237 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 00:423A 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 00:423E 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 00:4241 03 58 4F 52 	.db	3,"XOR"            ; $0092
   27 00:4245 01 26 -  -  	.db	1,"&"              ; $0093
   28 00:4247 01 28 -  -  	.db	1,"("              ; $0094
   29 00:4249 01 24 -  -  	.db	1,"$"              ; $0095
   30 00:424B 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 00:424F 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 00:4253 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 00:4257 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 00:425B 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 00:425F 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 00:4264 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 00:4268 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 00:426D 01 29 -  -  	.db	1,")"              ; $009e
   39 00:426F 01 2C -  -  	.db	1,","              ; $009f
   40 00:4271 01 3A -  -  	.db	1,":"              ; $00a0
   41 00:4273 01 3B -  -  	.db	1,";"              ; $00a1
   42 00:4275 01 27 -  -  	.db	1,"'"              ; $00a2
   43 00:4277 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 00:427E 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 00:4284 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 00:4287 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 00:428C 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 00:4291 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 00:4295 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 00:4298 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 00:429D 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 00:42A2 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 00:42A6 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 00:42AB 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 00:42B3 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 00:42B9 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 00:42BD 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 00:42C1 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 00:42C5 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 00:42C9 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 00:42CF 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 00:42D4 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 00:42D9 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 00:42DE 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 00:42E2 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 00:42E6 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 00:42EB 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 00:42F0 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 00:42F8 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 00:42FF 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 00:4305 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 00:4309 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 00:430E 00 -  -  -  	.db	0
   74 00:430F -  -  -  -  ;
   75 00:430F -  -  -  -  ;	Keywords for set 1
   76 00:430F -  -  -  -  ;
   77 00:430F -  -  -  -  KeywordsSet1:
   78 00:430F 00 -  -  -  	.db	0
   79 00:4310 -  -  -  -  ;
   80 00:4310 -  -  -  -  ;	Keywords for set 2
   81 00:4310 -  -  -  -  ;
   82 00:4310 -  -  -  -  KeywordsSet2:
   83 00:4310 00 -  -  -  	.db	0
Listing for file "_build.asm"
   26 00:4311 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:4311 -  -  -  -  ;
    2 00:4311 -  -  -  -  ;	This file is automatically generated.
    3 00:4311 -  -  -  -  ;
    4 00:4311 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:4320 -  -  -  -  PrecedenceTable:
    6 00:4320 06 -  -  -  	.db	6	; $0083 !
    7 00:4321 06 -  -  -  	.db	6	; $0084 ?
    8 00:4322 05 -  -  -  	.db	5	; $0085 *
    9 00:4323 05 -  -  -  	.db	5	; $0086 /
   10 00:4324 05 -  -  -  	.db	5	; $0087 mod
   11 00:4325 04 -  -  -  	.db	4	; $0088 +
   12 00:4326 04 -  -  -  	.db	4	; $0089 -
   13 00:4327 03 -  -  -  	.db	3	; $008a >=
   14 00:4328 03 -  -  -  	.db	3	; $008b <=
   15 00:4329 03 -  -  -  	.db	3	; $008c >
   16 00:432A 03 -  -  -  	.db	3	; $008d <
   17 00:432B 03 -  -  -  	.db	3	; $008e =
   18 00:432C 03 -  -  -  	.db	3	; $008f <>
   19 00:432D 02 -  -  -  	.db	2	; $0090 and
   20 00:432E 01 -  -  -  	.db	1	; $0091 or
   21 00:432F 01 -  -  -  	.db	1	; $0092 xor
   22 00:4330 -  -  -  -  
Listing for file "_build.asm"
   27 00:4330 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:4330 -  -  -  -  ;
    2 00:4330 -  -  -  -  ;	This is automatically generated.
    3 00:4330 -  -  -  -  ;
    4 00:4330 -  -  -  -  ErrorIDTable:
    5 00:4330 68 43 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:4334 6E 43 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:4338 7F 43 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:433C 8D 43 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:4340 97 43 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:4344 B1 43 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:4348 C2 43 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:434C D0 43 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:4350 DE 43 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 00:4354 F4 43 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 00:4358 02 44 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 00:435C 07 44 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 00:4360 14 44 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 00:4364 25 44 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 00:4368 -  -  -  -  
   20 00:4368 -  -  -  -  ErrText_warmstart:
   21 00:4368 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 00:436E -  -  -  -  ErrText_assert:
   23 00:436E 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 00:437F -  -  -  -  ErrText_badtype:
   25 00:437F 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 00:438D -  -  -  -  ErrText_badvalue:
   27 00:438D 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 00:4397 -  -  -  -  ErrText_disabled:
   29 00:4397 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 00:43B1 -  -  -  -  ErrText_divzero:
   31 00:43B1 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 00:43C2 -  -  -  -  ErrText_memory:
   33 00:43C2 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 00:43D0 -  -  -  -  ErrText_nocomma:
   35 00:43D0 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 00:43DE -  -  -  -  ErrText_norbracket:
   37 00:43DE 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 00:43F4 -  -  -  -  ErrText_notref:
   39 00:43F4 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 00:4402 -  -  -  -  ErrText_stop:
   41 00:4402 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 00:4407 -  -  -  -  ErrText_syntax:
   43 00:4407 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 00:4414 -  -  -  -  ErrText_todo:
   45 00:4414 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 00:4425 -  -  -  -  ErrText_unknownvar:
   47 00:4425 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   28 00:4436 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:4436 -  -  -  -  ;
    2 00:4436 -  -  -  -  ;	Vectors for set 0
    3 00:4436 -  -  -  -  ;
    4 00:4436 -  -  -  -  VectorsSet0:
    5 00:4436 B2 40 -  -  	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:4438 1F 40 -  -  	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:443A 1F 40 -  -  	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:443C 1F 40 -  -  	addr(Unimplemented)              ; $0083 !
    9 00:443E 1F 40 -  -  	addr(Unimplemented)              ; $0084 ?
   10 00:4440 1F 40 -  -  	addr(Unimplemented)              ; $0085 *
   11 00:4442 1F 40 -  -  	addr(Unimplemented)              ; $0086 /
   12 00:4444 1F 40 -  -  	addr(Unimplemented)              ; $0087 mod
   13 00:4446 1F 40 -  -  	addr(Unimplemented)              ; $0088 +
   14 00:4448 1F 40 -  -  	addr(Unimplemented)              ; $0089 -
   15 00:444A 1F 40 -  -  	addr(Unimplemented)              ; $008a >=
   16 00:444C 1F 40 -  -  	addr(Unimplemented)              ; $008b <=
   17 00:444E 1F 40 -  -  	addr(Unimplemented)              ; $008c >
   18 00:4450 1F 40 -  -  	addr(Unimplemented)              ; $008d <
   19 00:4452 1F 40 -  -  	addr(Unimplemented)              ; $008e =
   20 00:4454 1F 40 -  -  	addr(Unimplemented)              ; $008f <>
   21 00:4456 1F 40 -  -  	addr(Unimplemented)              ; $0090 and
   22 00:4458 1F 40 -  -  	addr(Unimplemented)              ; $0091 or
   23 00:445A 1F 40 -  -  	addr(Unimplemented)              ; $0092 xor
   24 00:445C 1F 40 -  -  	addr(Unimplemented)              ; $0093 &
   25 00:445E 1F 40 -  -  	addr(Unimplemented)              ; $0094 (
   26 00:4460 1F 40 -  -  	addr(Unimplemented)              ; $0095 $
   27 00:4462 1F 40 -  -  	addr(Unimplemented)              ; $0096 rnd
   28 00:4464 1F 40 -  -  	addr(Unimplemented)              ; $0097 len
   29 00:4466 1F 40 -  -  	addr(Unimplemented)              ; $0098 abs
   30 00:4468 1F 40 -  -  	addr(Unimplemented)              ; $0099 sgn
   31 00:446A 1F 40 -  -  	addr(Unimplemented)              ; $009a int
   32 00:446C 1F 40 -  -  	addr(Unimplemented)              ; $009b str$
   33 00:446E 1F 40 -  -  	addr(Unimplemented)              ; $009c asc
   34 00:4470 1F 40 -  -  	addr(Unimplemented)              ; $009d page
   35 00:4472 A9 40 -  -  	addr(BadCmd_RBracket)            ; $009e )
   36 00:4474 A9 40 -  -  	addr(BadCmd_Comma)               ; $009f ,
   37 00:4476 AC 40 -  -  	addr(Command_Colon)              ; $00a0 :
   38 00:4478 A9 40 -  -  	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 00:447A C5 40 -  -  	addr(Command_REM2)               ; $00a2 '
   40 00:447C 1F 40 -  -  	addr(Unimplemented)              ; $00a3 repeat
   41 00:447E 1F 40 -  -  	addr(Unimplemented)              ; $00a4 until
   42 00:4480 1F 40 -  -  	addr(Unimplemented)              ; $00a5 if
   43 00:4482 A9 40 -  -  	addr(BadCmd_Then)                ; $00a6 then
   44 00:4484 1F 40 -  -  	addr(Unimplemented)              ; $00a7 else
   45 00:4486 1F 40 -  -  	addr(Unimplemented)              ; $00a8 for
   46 00:4488 A9 40 -  -  	addr(BadCmd_To)                  ; $00a9 to
   47 00:448A 1F 40 -  -  	addr(Unimplemented)              ; $00aa step
   48 00:448C 1F 40 -  -  	addr(Unimplemented)              ; $00ab next
   49 00:448E A9 40 -  -  	addr(BadCmd_Defproc)             ; $00ac def
   50 00:4490 1F 40 -  -  	addr(Unimplemented)              ; $00ad proc
   51 00:4492 1F 40 -  -  	addr(Unimplemented)              ; $00ae endproc
   52 00:4494 1F 40 -  -  	addr(Unimplemented)              ; $00af local
   53 00:4496 1F 40 -  -  	addr(Unimplemented)              ; $00b0 dim
   54 00:4498 C5 40 -  -  	addr(Command_REM)                ; $00b1 rem
   55 00:449A 1F 40 -  -  	addr(Unimplemented)              ; $00b2 let
   56 00:449C 1F 40 -  -  	addr(Unimplemented)              ; $00b3 vdu
   57 00:449E 1F 40 -  -  	addr(Unimplemented)              ; $00b4 print
   58 00:44A0 1F 40 -  -  	addr(Unimplemented)              ; $00b5 load
   59 00:44A2 1F 40 -  -  	addr(Unimplemented)              ; $00b6 save
   60 00:44A4 1F 40 -  -  	addr(Unimplemented)              ; $00b7 list
   61 00:44A6 FF 41 -  -  	addr(Command_NEW)                ; $00b8 new
   62 00:44A8 E0 40 -  -  	addr(Command_RUN)                ; $00b9 run
   63 00:44AA 1F 40 -  -  	addr(Unimplemented)              ; $00ba read
   64 00:44AC 1F 40 -  -  	addr(Unimplemented)              ; $00bb data
   65 00:44AE 1F 40 -  -  	addr(Unimplemented)              ; $00bc restore
   66 00:44B0 1F 40 -  -  	addr(Unimplemented)              ; $00bd assert
   67 00:44B2 C9 41 -  -  	addr(Command_CLEAR)              ; $00be clear
   68 00:44B4 AD 40 -  -  	addr(Command_END)                ; $00bf end
   69 00:44B6 3D 41 -  -  	addr(Command_STOP)               ; $00c0 stop
   70 00:44B8 -  -  -  -  ;
   71 00:44B8 -  -  -  -  ;	Vectors for set 1
   72 00:44B8 -  -  -  -  ;
   73 00:44B8 -  -  -  -  VectorsSet1:
   74 00:44B8 -  -  -  -  ;
   75 00:44B8 -  -  -  -  ;	Vectors for set 2
   76 00:44B8 -  -  -  -  ;
   77 00:44B8 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   29 00:44B8 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:44B8 -  -  -  -  ; ***************************************************************************************
    2 00:44B8 -  -  -  -  ; ***************************************************************************************
    3 00:44B8 -  -  -  -  ;
    4 00:44B8 -  -  -  -  ;		Name : 		idivide.asm
    5 00:44B8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:44B8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:44B8 -  -  -  -  ;		Reviewed :	No
    8 00:44B8 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:44B8 -  -  -  -  ;
   10 00:44B8 -  -  -  -  ; ***************************************************************************************
   11 00:44B8 -  -  -  -  ; ***************************************************************************************
   12 00:44B8 -  -  -  -  
   13 00:44B8 -  -  -  -  ; ***************************************************************************************
   14 00:44B8 -  -  -  -  ;
   15 00:44B8 -  -  -  -  ;								Unsigned integer divide
   16 00:44B8 -  -  -  -  ;
   17 00:44B8 -  -  -  -  ; ***************************************************************************************
   18 00:44B8 -  -  -  -  
   19 00:44B8 -  -  -  -  Int32UDivide:
   20 00:44B8 37 -  -  -  		scf
   21 00:44B9 C3 F7 44 -  		jp 		_I32UnsignedDivide		
   22 00:44BC -  -  -  -  
   23 00:44BC -  -  -  -  ; ***************************************************************************************
   24 00:44BC -  -  -  -  ;
   25 00:44BC -  -  -  -  ;							Signed integer divide/Modulus
   26 00:44BC -  -  -  -  ;
   27 00:44BC -  -  -  -  ; ***************************************************************************************
   28 00:44BC -  -  -  -  
   29 00:44BC -  -  -  -  Int32SDivide:
   30 00:44BC 37 -  -  -  		scf
   31 00:44BD 18 01 -  -  		jr 		_I32SDivide
   32 00:44BF -  -  -  -  Int32Modulus:
   33 00:44BF AF -  -  -  		xor 	a
   34 00:44C0 -  -  -  -  _I32SDivide:
   35 00:44C0 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:44C1 F5 -  -  -  		push 	af
   37 00:44C2 08 -  -  -  		ex 		af,af'
   38 00:44C3 -  -  -  -  
   39 00:44C3 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:44C4 D9 -  -  -  		exx
   41 00:44C5 D5 -  -  -  		push 	de
   42 00:44C6 D9 -  -  -  		exx
   43 00:44C7 -  -  -  -  
   44 00:44C7 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:44C8 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:44C9 CD E5 44 -  		call 	_I32CheckHLSignSwap
   47 00:44CC CD E5 44 -  		call 	_I32CheckHLSignSwap
   48 00:44CF 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:44D0 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:44D1 F5 -  -  -  		push 	af
   51 00:44D2 CD F7 44 -  		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:44D5 F1 -  -  -  		pop 	af 							; get function back
   53 00:44D6 30 06 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:44D8 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:44D9 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:44DB C4 40 46 -  		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:44DE -  -  -  -  _I32SDExit:
   58 00:44DE D9 -  -  -  		exx 								; restore DE'DE
   59 00:44DF D1 -  -  -  		pop 	de
   60 00:44E0 D9 -  -  -  		exx
   61 00:44E1 D1 -  -  -  		pop 	de
   62 00:44E2 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:44E3 08 -  -  -  		ex 		af,af'
   64 00:44E4 C9 -  -  -  		ret
   65 00:44E5 -  -  -  -  
   66 00:44E5 -  -  -  -  
   67 00:44E5 -  -  -  -  _I32CheckHLSignSwap:
   68 00:44E5 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:44E6 CB 7C -  -  		bit 	7,h
   70 00:44E8 D9 -  -  -  		exx
   71 00:44E9 28 07 -  -  		jr 		z,_I32CHSPositive 		
   72 00:44EB -  -  -  -  		;
   73 00:44EB C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:44ED F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:44EE CD 40 46 -  		call 	Int32Negate 				
   76 00:44F1 F1 -  -  -  		pop 	af
   77 00:44F2 -  -  -  -  _I32CHSPositive:
   78 00:44F2 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:44F3 EB -  -  -  		ex 		de,hl
   80 00:44F4 D9 -  -  -  		exx		
   81 00:44F5 EB -  -  -  		ex 		de,hl
   82 00:44F6 C9 -  -  -  		ret
   83 00:44F7 -  -  -  -  
   84 00:44F7 -  -  -  -  ; ***************************************************************************************
   85 00:44F7 -  -  -  -  ;
   86 00:44F7 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:44F7 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:44F7 -  -  -  -  ;
   89 00:44F7 -  -  -  -  ; ***************************************************************************************
   90 00:44F7 -  -  -  -  
   91 00:44F7 -  -  -  -  _I32UnsignedDivide:
   92 00:44F7 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:44F8 D5 -  -  -  		push 	de
   94 00:44F9 D9 -  -  -  		exx
   95 00:44FA C5 -  -  -  		push 	bc
   96 00:44FB D5 -  -  -  		push 	de 							
   97 00:44FC D9 -  -  -  		exx
   98 00:44FD -  -  -  -  
   99 00:44FD F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:44FE -  -  -  -  
  101 00:44FE 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:44FF B3 -  -  -  		or 		e
  103 00:4500 D9 -  -  -  		exx
  104 00:4501 B2 -  -  -  		or 		d
  105 00:4502 B3 -  -  -  		or 		e
  106 00:4503 D9 -  -  -  		exx
  107 00:4504 CA 24 40 -  		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:4507 -  -  -  -  
  109 00:4507 -  -  -  -  
  110 00:4507 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:4508 4D -  -  -  		ld		c,l
  112 00:4509 21 00 00 -  		ld 		hl,$0000
  113 00:450C D9 -  -  -  		exx
  114 00:450D 44 -  -  -  		ld 		b,h
  115 00:450E 4D -  -  -  		ld		c,l
  116 00:450F 21 00 00 -  		ld 		hl,$0000
  117 00:4512 D9 -  -  -  		exx
  118 00:4513 -  -  -  -  
  119 00:4513 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:4515 -  -  -  -  _I32DivideLoop:
  121 00:4515 F5 -  -  -  		push 	af
  122 00:4516 -  -  -  -  
  123 00:4516 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:4518 CB 10 -  -  		rl 		b
  125 00:451A D9 -  -  -  		exx
  126 00:451B CB 11 -  -  		rl 		c
  127 00:451D CB 10 -  -  		rl 		b
  128 00:451F D9 -  -  -  		exx
  129 00:4520 CB 15 -  -  		rl 		l
  130 00:4522 CB 14 -  -  		rl 		h
  131 00:4524 D9 -  -  -  		exx
  132 00:4525 CB 15 -  -  		rl 		l
  133 00:4527 CB 14 -  -  		rl 		h
  134 00:4529 D9 -  -  -  		exx
  135 00:452A -  -  -  -  
  136 00:452A CD E6 45 -  		call 	Int32Subtract 				; A = A - M
  137 00:452D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:452F -  -  -  -  
  139 00:452F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:4530 18 03 -  -  		jr 		_I32Next
  141 00:4532 -  -  -  -  
  142 00:4532 -  -  -  -  _I32Borrow:
  143 00:4532 CD E0 45 -  		call 	Int32Add 					; A = A + M
  144 00:4535 -  -  -  -  _I32Next:
  145 00:4535 F1 -  -  -  		pop 	af
  146 00:4536 3D -  -  -  		dec 	a
  147 00:4537 20 DC -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:4539 -  -  -  -  
  149 00:4539 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:453A -  -  -  -  
  151 00:453A 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:453B 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:453D -  -  -  -  
  154 00:453D 60 -  -  -  		ld  	h,b
  155 00:453E 69 -  -  -  		ld 		l,c
  156 00:453F D9 -  -  -  		exx
  157 00:4540 60 -  -  -  		ld  	h,b
  158 00:4541 69 -  -  -  		ld 		l,c
  159 00:4542 D9 -  -  -  		exx
  160 00:4543 -  -  -  -  _I32Modulus1:		
  161 00:4543 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:4544 D1 -  -  -  		pop 	de
  163 00:4545 C1 -  -  -  		pop 	bc
  164 00:4546 D9 -  -  -  		exx
  165 00:4547 D1 -  -  -  		pop 	de
  166 00:4548 C1 -  -  -  		pop 	bc
  167 00:4549 C9 -  -  -  		ret
  168 00:454A -  -  -  -  
  169 00:454A -  -  -  -  ; ***************************************************************************************
  170 00:454A -  -  -  -  ;
  171 00:454A -  -  -  -  ;									Changes and Updates
  172 00:454A -  -  -  -  ;
  173 00:454A -  -  -  -  ; ***************************************************************************************
  174 00:454A -  -  -  -  ;
  175 00:454A -  -  -  -  ;		Date			Notes
  176 00:454A -  -  -  -  ;		==== 			=====
  177 00:454A -  -  -  -  ;
  178 00:454A -  -  -  -  ; ***************************************************************************************
  179 00:454A -  -  -  -  		
Listing for file "_build.asm"
   30 00:454A -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:454A -  -  -  -  ; ***************************************************************************************
    2 00:454A -  -  -  -  ; ***************************************************************************************
    3 00:454A -  -  -  -  ;
    4 00:454A -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:454A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:454A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:454A -  -  -  -  ;		Reviewed :	No
    8 00:454A -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:454A -  -  -  -  ;
   10 00:454A -  -  -  -  ; ***************************************************************************************
   11 00:454A -  -  -  -  ; ***************************************************************************************
   12 00:454A -  -  -  -  
   13 00:454A -  -  -  -  ; ***************************************************************************************
   14 00:454A -  -  -  -  ;
   15 00:454A -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:454A -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:454A -  -  -  -  ;
   18 00:454A -  -  -  -  ; ***************************************************************************************
   19 00:454A -  -  -  -  
   20 00:454A -  -  -  -  Int32FromString:
   21 00:454A C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:454B D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:454C D5 -  -  -  		push 	de
   24 00:454D D9 -  -  -  		exx
   25 00:454E D5 -  -  -  		push 	de
   26 00:454F -  -  -  -  
   27 00:454F 21 00 00 -  		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:4552 11 00 00 -  		ld 		de,$0000
   29 00:4555 D9 -  -  -  		exx
   30 00:4556 21 00 00 -  		ld 		hl,$0000
   31 00:4559 11 00 00 -  		ld 		de,$0000
   32 00:455C D9 -  -  -  		exx
   33 00:455D -  -  -  -  
   34 00:455D 5F -  -  -  		ld 		e,a 						; base in E
   35 00:455E CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:4560 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:4562 ED 44 -  -  		neg 		 						; fix up the base
   38 00:4564 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:4565 -  -  -  -  		;
   40 00:4565 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:4566 F5 -  -  -  		push 	af
   42 00:4567 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:4569 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:456A 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:456C 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:456D 18 01 -  -  		jr 		_I32FSMain
   47 00:456F -  -  -  -  _I32FSNotSigned:		
   48 00:456F E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:4570 -  -  -  -  		;
   50 00:4570 -  -  -  -  		; 		Main conversion loop.
   51 00:4570 -  -  -  -  		; 		
   52 00:4570 -  -  -  -  _I32FSMain:		
   53 00:4570 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:4571 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:4573 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:4575 D6 20 -  -  		sub 	32
   57 00:4577 -  -  -  -  _I32FSNotLower:
   58 00:4577 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:4579 38 21 -  -  		jr 		c,_I32FSExit
   60 00:457B FE 3A -  -  		cp 		'9'+1
   61 00:457D 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:457F FE 41 -  -  		cp 		'A'
   63 00:4581 38 19 -  -  		jr 		c,_I32FSExit
   64 00:4583 FE 47 -  -  		cp 		'F'+1
   65 00:4585 30 15 -  -  		jr 		nc,_I32FSExit
   66 00:4587 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:4589 -  -  -  -  _I32FSOkay:
   68 00:4589 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:458B BB -  -  -  		cp 		e 							; fail if >= base
   70 00:458C 30 0E -  -  		jr 		nc,_I32FSExit 
   71 00:458E 03 -  -  -  		inc 	bc 							; consume character
   72 00:458F D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:4590 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:4591 CD AA 45 -  		call 	Int32Multiply 				; result *= base
   75 00:4594 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:4595 5F -  -  -  		ld 		e,a
   77 00:4596 CD E0 45 -  		call 	Int32Add 					; and add it.
   78 00:4599 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:459A 18 D4 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:459C -  -  -  -  
   81 00:459C -  -  -  -  _I32FSExit:
   82 00:459C F1 -  -  -  		pop 	af 							; get sign back
   83 00:459D FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:459F CC 40 46 -  		call 	z,Int32Negate
   85 00:45A2 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:45A3 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:45A4 D9 -  -  -  		exx
   88 00:45A5 D1 -  -  -  		pop 	de
   89 00:45A6 D9 -  -  -  		exx
   90 00:45A7 C1 -  -  -  		pop 	bc
   91 00:45A8 B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 00:45A9 C9 -  -  -  		ret				
   93 00:45AA -  -  -  -  
   94 00:45AA -  -  -  -  ; ***************************************************************************************
   95 00:45AA -  -  -  -  ;
   96 00:45AA -  -  -  -  ;									Changes and Updates
   97 00:45AA -  -  -  -  ;
   98 00:45AA -  -  -  -  ; ***************************************************************************************
   99 00:45AA -  -  -  -  ;
  100 00:45AA -  -  -  -  ;		Date			Notes
  101 00:45AA -  -  -  -  ;		==== 			=====
  102 00:45AA -  -  -  -  ;
  103 00:45AA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:45AA -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:45AA -  -  -  -  ; ***************************************************************************************
    2 00:45AA -  -  -  -  ; ***************************************************************************************
    3 00:45AA -  -  -  -  ;
    4 00:45AA -  -  -  -  ;		Name : 		imultiply.asm
    5 00:45AA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45AA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45AA -  -  -  -  ;		Reviewed :	No
    8 00:45AA -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:45AA -  -  -  -  ;
   10 00:45AA -  -  -  -  ; ***************************************************************************************
   11 00:45AA -  -  -  -  ; ***************************************************************************************
   12 00:45AA -  -  -  -  
   13 00:45AA -  -  -  -  Int32Multiply:
   14 00:45AA C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:45AB D5 -  -  -  		push 	de
   16 00:45AC 44 -  -  -  		ld 		b,h
   17 00:45AD 4D -  -  -  		ld 		c,l
   18 00:45AE 21 00 00 -  		ld 		hl,$0000
   19 00:45B1 -  -  -  -  
   20 00:45B1 D9 -  -  -  		exx
   21 00:45B2 C5 -  -  -  		push 	bc
   22 00:45B3 D5 -  -  -  		push 	de
   23 00:45B4 44 -  -  -  		ld 		b,h
   24 00:45B5 4D -  -  -  		ld 		c,l
   25 00:45B6 21 00 00 -  		ld 		hl,$0000		
   26 00:45B9 D9 -  -  -  		exx
   27 00:45BA -  -  -  -  
   28 00:45BA -  -  -  -  _I32MultiplyLoop:
   29 00:45BA CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:45BC C4 E0 45 -  		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:45BF -  -  -  -  		;
   32 00:45BF D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:45C0 CB 38 -  -  		srl 	b
   34 00:45C2 CB 19 -  -  		rr 		c
   35 00:45C4 D9 -  -  -  		exx
   36 00:45C5 CB 18 -  -  		rr 		b
   37 00:45C7 CB 19 -  -  		rr 		c
   38 00:45C9 -  -  -  -  		;
   39 00:45C9 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:45CB CB 12 -  -  		rl 		d
   41 00:45CD D9 -  -  -  		exx
   42 00:45CE CB 13 -  -  		rl 		e
   43 00:45D0 CB 12 -  -  		rl 		d
   44 00:45D2 -  -  -  -  
   45 00:45D2 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:45D3 B1 -  -  -  		or 		c
   47 00:45D4 D9 -  -  -  		exx
   48 00:45D5 B0 -  -  -  		or 		b
   49 00:45D6 B1 -  -  -  		or 		c
   50 00:45D7 20 E1 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:45D9 -  -  -  -  
   52 00:45D9 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:45DA D1 -  -  -  		pop 	de
   54 00:45DB C1 -  -  -  		pop 	bc
   55 00:45DC D9 -  -  -  		exx
   56 00:45DD D1 -  -  -  		pop 	de
   57 00:45DE C1 -  -  -  		pop 	bc
   58 00:45DF C9 -  -  -  		ret
   59 00:45E0 -  -  -  -  
   60 00:45E0 -  -  -  -  ; ***************************************************************************************
   61 00:45E0 -  -  -  -  ;
   62 00:45E0 -  -  -  -  ;									Changes and Updates
   63 00:45E0 -  -  -  -  ;
   64 00:45E0 -  -  -  -  ; ***************************************************************************************
   65 00:45E0 -  -  -  -  ;
   66 00:45E0 -  -  -  -  ;		Date			Notes
   67 00:45E0 -  -  -  -  ;		==== 			=====
   68 00:45E0 -  -  -  -  ;
   69 00:45E0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:45E0 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:45E0 -  -  -  -  ; ***************************************************************************************
    2 00:45E0 -  -  -  -  ; ***************************************************************************************
    3 00:45E0 -  -  -  -  ;
    4 00:45E0 -  -  -  -  ;		Name : 		isimple.asm
    5 00:45E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:45E0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:45E0 -  -  -  -  ;		Reviewed :	No
    8 00:45E0 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:45E0 -  -  -  -  ;
   10 00:45E0 -  -  -  -  ; ***************************************************************************************
   11 00:45E0 -  -  -  -  ; ***************************************************************************************
   12 00:45E0 -  -  -  -  
   13 00:45E0 -  -  -  -  ; ***************************************************************************************
   14 00:45E0 -  -  -  -  ;
   15 00:45E0 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:45E0 -  -  -  -  ;
   17 00:45E0 -  -  -  -  ; ***************************************************************************************
   18 00:45E0 -  -  -  -  
   19 00:45E0 -  -  -  -  Int32Add:
   20 00:45E0 19 -  -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:45E1 D9 -  -  -  		exx
   22 00:45E2 ED 5A -  -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:45E4 D9 -  -  -  		exx
   24 00:45E5 C9 -  -  -  		ret
   25 00:45E6 -  -  -  -  
   26 00:45E6 -  -  -  -  ; ***************************************************************************************
   27 00:45E6 -  -  -  -  ;
   28 00:45E6 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:45E6 -  -  -  -  ;
   30 00:45E6 -  -  -  -  ; ***************************************************************************************
   31 00:45E6 -  -  -  -  
   32 00:45E6 -  -  -  -  Int32Subtract:
   33 00:45E6 AF -  -  -  		xor 	a 							; clear carry
   34 00:45E7 ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:45E9 D9 -  -  -  		exx
   36 00:45EA ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:45EC D9 -  -  -  		exx
   38 00:45ED C9 -  -  -  		ret
   39 00:45EE -  -  -  -  
   40 00:45EE -  -  -  -  ; ***************************************************************************************
   41 00:45EE -  -  -  -  ;
   42 00:45EE -  -  -  -  ;								And DE'DE into HL'HL
   43 00:45EE -  -  -  -  ;
   44 00:45EE -  -  -  -  ; ***************************************************************************************
   45 00:45EE -  -  -  -  
   46 00:45EE -  -  -  -  Int32And:
   47 00:45EE D9 -  -  -  		exx
   48 00:45EF CD F3 45 -  		call 	_I32AndHLDE
   49 00:45F2 D9 -  -  -  		exx
   50 00:45F3 -  -  -  -  _I32AndHLDE:		
   51 00:45F3 7C -  -  -  		ld 		a,h
   52 00:45F4 A2 -  -  -  		and 	d
   53 00:45F5 67 -  -  -  		ld 		h,a
   54 00:45F6 7D -  -  -  		ld 		a,l
   55 00:45F7 A3 -  -  -  		and 	e
   56 00:45F8 6F -  -  -  		ld 		l,a
   57 00:45F9 C9 -  -  -  		ret
   58 00:45FA -  -  -  -  
   59 00:45FA -  -  -  -  ; ***************************************************************************************
   60 00:45FA -  -  -  -  ;
   61 00:45FA -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:45FA -  -  -  -  ;
   63 00:45FA -  -  -  -  ; ***************************************************************************************
   64 00:45FA -  -  -  -  
   65 00:45FA -  -  -  -  Int32Or:
   66 00:45FA D9 -  -  -  		exx
   67 00:45FB CD FF 45 -  		call 	_I32OrHLDE
   68 00:45FE D9 -  -  -  		exx
   69 00:45FF -  -  -  -  _I32OrHLDE:		
   70 00:45FF 7C -  -  -  		ld 		a,h
   71 00:4600 B2 -  -  -  		or 		d
   72 00:4601 67 -  -  -  		ld 		h,a
   73 00:4602 7D -  -  -  		ld 		a,l
   74 00:4603 B3 -  -  -  		or 		e
   75 00:4604 6F -  -  -  		ld 		l,a
   76 00:4605 C9 -  -  -  		ret
   77 00:4606 -  -  -  -  
   78 00:4606 -  -  -  -  ; ***************************************************************************************
   79 00:4606 -  -  -  -  ;
   80 00:4606 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:4606 -  -  -  -  ;
   82 00:4606 -  -  -  -  ; ***************************************************************************************
   83 00:4606 -  -  -  -  
   84 00:4606 -  -  -  -  Int32Xor:
   85 00:4606 D9 -  -  -  		exx
   86 00:4607 CD 0B 46 -  		call 	_I32XorHLDE
   87 00:460A D9 -  -  -  		exx
   88 00:460B -  -  -  -  _I32XorHLDE:		
   89 00:460B 7C -  -  -  		ld 		a,h
   90 00:460C AA -  -  -  		xor 	d
   91 00:460D 67 -  -  -  		ld 		h,a
   92 00:460E 7D -  -  -  		ld 		a,l
   93 00:460F AB -  -  -  		xor 	e
   94 00:4610 6F -  -  -  		ld 		l,a
   95 00:4611 C9 -  -  -  		ret
   96 00:4612 -  -  -  -  
   97 00:4612 -  -  -  -  ; ***************************************************************************************
   98 00:4612 -  -  -  -  ;
   99 00:4612 -  -  -  -  ;								 Check if HL'HL zero
  100 00:4612 -  -  -  -  ;
  101 00:4612 -  -  -  -  ; ***************************************************************************************
  102 00:4612 -  -  -  -  
  103 00:4612 -  -  -  -  Int32Zero:
  104 00:4612 D9 -  -  -  		exx
  105 00:4613 7D -  -  -  		ld 		a,l
  106 00:4614 B4 -  -  -  		or 		h
  107 00:4615 D9 -  -  -  		exx
  108 00:4616 B5 -  -  -  		or 		l
  109 00:4617 B4 -  -  -  		or 		h
  110 00:4618 C9 -  -  -  		ret
  111 00:4619 -  -  -  -  
  112 00:4619 -  -  -  -  ; ***************************************************************************************
  113 00:4619 -  -  -  -  ;
  114 00:4619 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:4619 -  -  -  -  ;
  116 00:4619 -  -  -  -  ; ***************************************************************************************
  117 00:4619 -  -  -  -  
  118 00:4619 -  -  -  -  Int32Compare:
  119 00:4619 E5 -  -  -  		push 	hl 							; save HL
  120 00:461A AF -  -  -  		xor 	a 							; clear carry
  121 00:461B ED 52 -  -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:461D D9 -  -  -  		exx
  123 00:461E E5 -  -  -  		push 	hl 							; save HL'
  124 00:461F ED 52 -  -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:4621 -  -  -  -  		;
  126 00:4621 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:4622 E2 29 46 -  		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:4625 78 -  -  -  		ld 		a,b
  129 00:4626 EE 80 -  -  		xor 	$80
  130 00:4628 47 -  -  -  		ld 		b,a
  131 00:4629 -  -  -  -  _I32CNoOverflow:
  132 00:4629 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:462A B5 -  -  -  		or 		l
  134 00:462B D9 -  -  -  		exx 
  135 00:462C B4 -  -  -  		or 		h
  136 00:462D B5 -  -  -  		or 		l
  137 00:462E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:4630 -  -  -  -  		;
  139 00:4630 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:4631 CB 78 -  -  		bit 	7,b
  141 00:4633 D9 -  -  -  		exx
  142 00:4634 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:4636 28 02 -  -  		jr 		z,_I32NotPos
  144 00:4638 3E FF -  -  		ld 		a,$FF
  145 00:463A -  -  -  -  _I32NotPos:
  146 00:463A D9 -  -  -  		exx
  147 00:463B E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:463C D9 -  -  -  		exx
  149 00:463D E1 -  -  -  		pop 	hl 							; restore HL
  150 00:463E B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:463F C9 -  -  -  		ret
  152 00:4640 -  -  -  -  
  153 00:4640 -  -  -  -  ; ***************************************************************************************
  154 00:4640 -  -  -  -  ;
  155 00:4640 -  -  -  -  ;										Negate HL'HL
  156 00:4640 -  -  -  -  ;
  157 00:4640 -  -  -  -  ; ***************************************************************************************
  158 00:4640 -  -  -  -  
  159 00:4640 -  -  -  -  Int32Negate:
  160 00:4640 AF -  -  -  		xor 	a
  161 00:4641 CD 4A 46 -  		call 	_I32NSubtract
  162 00:4644 D9 -  -  -  		exx
  163 00:4645 CD 4A 46 -  		call 	_I32NSubtract
  164 00:4648 D9 -  -  -  		exx
  165 00:4649 C9 -  -  -  		ret
  166 00:464A -  -  -  -  _I32NSubtract:
  167 00:464A D5 -  -  -  		push 	de
  168 00:464B EB -  -  -  		ex 		de,hl
  169 00:464C 21 00 00 -  		ld 		hl,$0000
  170 00:464F ED 52 -  -  		zm_sbc_hlde_16		
  171 00:4651 D1 -  -  -  		pop 	de
  172 00:4652 C9 -  -  -  		ret
  173 00:4653 -  -  -  -  		
  174 00:4653 -  -  -  -  ; ***************************************************************************************
  175 00:4653 -  -  -  -  ;
  176 00:4653 -  -  -  -  ;									Changes and Updates
  177 00:4653 -  -  -  -  ;
  178 00:4653 -  -  -  -  ; ***************************************************************************************
  179 00:4653 -  -  -  -  ;
  180 00:4653 -  -  -  -  ;		Date			Notes
  181 00:4653 -  -  -  -  ;		==== 			=====
  182 00:4653 -  -  -  -  ;
  183 00:4653 -  -  -  -  ; ***************************************************************************************
  184 00:4653 -  -  -  -  		
Listing for file "_build.asm"
   33 00:4653 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:4653 -  -  -  -  ; ***************************************************************************************
    2 00:4653 -  -  -  -  ; ***************************************************************************************
    3 00:4653 -  -  -  -  ;
    4 00:4653 -  -  -  -  ;		Name : 		itostring.asm
    5 00:4653 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4653 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4653 -  -  -  -  ;		Reviewed :	No
    8 00:4653 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:4653 -  -  -  -  ;
   10 00:4653 -  -  -  -  ; ***************************************************************************************
   11 00:4653 -  -  -  -  ;
   12 00:4653 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:4653 -  -  -  -  ;
   14 00:4653 -  -  -  -  ; ***************************************************************************************
   15 00:4653 -  -  -  -  
   16 00:4653 -  -  -  -  Int32ToString:
   17 00:4653 C5 -  -  -  		push 	bc 							; save string start
   18 00:4654 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:4655 E5 -  -  -  		push 	hl
   20 00:4656 11 00 00 -  		ld	 	de,$0000
   21 00:4659 D9 -  -  -  		exx
   22 00:465A D5 -  -  -  		push 	de
   23 00:465B E5 -  -  -  		push 	hl
   24 00:465C 11 00 00 -  		ld 		de,$000
   25 00:465F D9 -  -  -  		exx
   26 00:4660 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:4661 -  -  -  -  		;
   28 00:4661 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:4663 28 10 -  -  		jr 		z,_I32TSNotNegative
   30 00:4665 ED 44 -  -  		neg 								; negate base and put in E
   31 00:4667 5F -  -  -  		ld 		e,a
   32 00:4668 -  -  -  -  		;
   33 00:4668 D9 -  -  -  		exx 								; is it -ve ?
   34 00:4669 CB 7C -  -  		bit 	7,h
   35 00:466B D9 -  -  -  		exx
   36 00:466C 28 07 -  -  		jr 		z,_I32TSNotNegative
   37 00:466E -  -  -  -  		;
   38 00:466E CD 40 46 -  		call 	Int32Negate 				; yes, negate HL'HL
   39 00:4671 -  -  -  -  		;
   40 00:4671 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:4673 02 -  -  -  		ld 		(bc),a
   42 00:4674 03 -  -  -  		inc 	bc
   43 00:4675 -  -  -  -  _I32TSNotNegative:	
   44 00:4675 CD 82 46 -  		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:4678 -  -  -  -  _I32TSExit:
   46 00:4678 AF -  -  -  		xor 	a  							; write the end of string code
   47 00:4679 02 -  -  -  		ld 		(bc),a 
   48 00:467A -  -  -  -  
   49 00:467A D9 -  -  -  		exx 								; restore registers and exit.
   50 00:467B E1 -  -  -  		pop 	hl
   51 00:467C D1 -  -  -  		pop 	de
   52 00:467D D9 -  -  -  		exx
   53 00:467E E1 -  -  -  		pop 	hl
   54 00:467F D1 -  -  -  		pop 	de
   55 00:4680 C1 -  -  -  		pop 	bc
   56 00:4681 C9 -  -  -  		ret
   57 00:4682 -  -  -  -  
   58 00:4682 -  -  -  -  _I32RecursiveConvert:
   59 00:4682 CD B8 44 -  		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:4685 F5 -  -  -  		push 	af 							; save remainder
   61 00:4686 CD 12 46 -  		call 	Int32Zero		 			; check result is non zero
   62 00:4689 C4 82 46 -  		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:468C F1 -  -  -  		pop 	af 							; restore remainder
   64 00:468D FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:468F 38 02 -  -  		jr 		c,_I32NotHex
   66 00:4691 C6 07 -  -  		add 	a,7
   67 00:4693 -  -  -  -  _I32NotHex:
   68 00:4693 C6 30 -  -  		add 	a,48
   69 00:4695 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:4696 03 -  -  -  		inc 	bc
   71 00:4697 C9 -  -  -  		ret		
   72 00:4698 -  -  -  -  
   73 00:4698 -  -  -  -  ; ***************************************************************************************
   74 00:4698 -  -  -  -  ;
   75 00:4698 -  -  -  -  ;									Changes and Updates
   76 00:4698 -  -  -  -  ;
   77 00:4698 -  -  -  -  ; ***************************************************************************************
   78 00:4698 -  -  -  -  ;
   79 00:4698 -  -  -  -  ;		Date			Notes
   80 00:4698 -  -  -  -  ;		==== 			=====
   81 00:4698 -  -  -  -  ;
   82 00:4698 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:4698 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:4698 -  -  -  -  ; ***************************************************************************************
    2 00:4698 -  -  -  -  ; ***************************************************************************************
    3 00:4698 -  -  -  -  ;
    4 00:4698 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:4698 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:4698 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:4698 -  -  -  -  ;		Reviewed :	No
    8 00:4698 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:4698 -  -  -  -  ;
   10 00:4698 -  -  -  -  ; ***************************************************************************************
   11 00:4698 -  -  -  -  ; ***************************************************************************************
   12 00:4698 -  -  -  -  
   13 00:4698 -  -  -  -  #ifdef AQUARIUS
   14 00:4698 -  -  -  -  
   15 00:4698 -  -  -  -  ; ***************************************************************************************
   16 00:4698 -  -  -  -  ;
   17 00:4698 -  -  -  -  ;								Initialise system stuff
   18 00:4698 -  -  -  -  ;
   19 00:4698 -  -  -  -  ; ***************************************************************************************
   20 00:4698 -  -  -  -  
   21 00:4698 -  -  -  -  SYSInitialise:
   22 00:4698 3E 0B -  -  	ld 		a,$0b 								; Aquarius clear screen
   23 00:469A CD A0 46 -  	call 	SYSPrintChar
   24 00:469D C9 -  -  -  	ret
   25 00:469E -  -  -  -  
   26 00:469E -  -  -  -  ; ***************************************************************************************
   27 00:469E -  -  -  -  ;
   28 00:469E -  -  -  -  ;								Terminate system stuff
   29 00:469E -  -  -  -  ;
   30 00:469E -  -  -  -  ; ***************************************************************************************
   31 00:469E -  -  -  -  
   32 00:469E -  -  -  -  SYSTerminate:
   33 00:469E 18 FE -  -  	jr 		SYSTerminate
   34 00:46A0 -  -  -  -  
   35 00:46A0 -  -  -  -  ; ***************************************************************************************
   36 00:46A0 -  -  -  -  ;
   37 00:46A0 -  -  -  -  ;								Print A character
   38 00:46A0 -  -  -  -  ;
   39 00:46A0 -  -  -  -  ; ***************************************************************************************
   40 00:46A0 -  -  -  -  
   41 00:46A0 -  -  -  -  SYSPrintChar:
   42 00:46A0 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   43 00:46A1 C5 -  -  -  	push 	bc
   44 00:46A2 D5 -  -  -  	push 	de
   45 00:46A3 E5 -  -  -  	push 	hl
   46 00:46A4 DD E5 -  -  	push 	ix
   47 00:46A6 FD E5 -  -  	push 	iy
   48 00:46A8 D9 -  -  -  	exx
   49 00:46A9 C5 -  -  -  	push 	bc
   50 00:46AA D5 -  -  -  	push 	de
   51 00:46AB E5 -  -  -  	push 	hl
   52 00:46AC CD 94 1D -  	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:46AF E1 -  -  -  	pop 	hl
   54 00:46B0 D1 -  -  -  	pop 	de
   55 00:46B1 C1 -  -  -  	pop 	bc
   56 00:46B2 D9 -  -  -  	exx
   57 00:46B3 FD E1 -  -  	pop 	iy
   58 00:46B5 DD E1 -  -  	pop 	ix
   59 00:46B7 E1 -  -  -  	pop 	hl
   60 00:46B8 D1 -  -  -  	pop 	de
   61 00:46B9 C1 -  -  -  	pop 	bc
   62 00:46BA F1 -  -  -  	pop 	af
   63 00:46BB C9 -  -  -  	ret		
   64 00:46BC -  -  -  -  
   65 00:46BC -  -  -  -  ; ***************************************************************************************
   66 00:46BC -  -  -  -  ;
   67 00:46BC -  -  -  -  ;									Print Newline
   68 00:46BC -  -  -  -  ;
   69 00:46BC -  -  -  -  ; ***************************************************************************************
   70 00:46BC -  -  -  -  
   71 00:46BC -  -  -  -  SYSPrintCRLF:
   72 00:46BC F5 -  -  -  	push 	af
   73 00:46BD 3E 0D -  -  	ld 		a,13
   74 00:46BF CD A0 46 -  	call 	SYSPrintChar
   75 00:46C2 3E 0A -  -  	ld 		a,10
   76 00:46C4 CD A0 46 -  	call 	SYSPrintChar
   77 00:46C7 F1 -  -  -  	pop 	af
   78 00:46C8 C9 -  -  -  	ret
   79 00:46C9 -  -  -  -  
   80 00:46C9 -  -  -  -  #endif
   81 00:46C9 -  -  -  -  
   82 00:46C9 -  -  -  -  ; ***************************************************************************************
   83 00:46C9 -  -  -  -  ;
   84 00:46C9 -  -  -  -  ;									Changes and Updates
   85 00:46C9 -  -  -  -  ;
   86 00:46C9 -  -  -  -  ; ***************************************************************************************
   87 00:46C9 -  -  -  -  ;
   88 00:46C9 -  -  -  -  ;		Date			Notes
   89 00:46C9 -  -  -  -  ;		==== 			=====
   90 00:46C9 -  -  -  -  ;
   91 00:46C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:46C9 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:46C9 -  -  -  -  ; ***************************************************************************************
    2 00:46C9 -  -  -  -  ; ***************************************************************************************
    3 00:46C9 -  -  -  -  ;
    4 00:46C9 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:46C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C9 -  -  -  -  ;		Reviewed :	No
    8 00:46C9 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:46C9 -  -  -  -  ;
   10 00:46C9 -  -  -  -  ; ***************************************************************************************
   11 00:46C9 -  -  -  -  ; ***************************************************************************************
   12 00:46C9 -  -  -  -  
   13 00:46C9 -  -  -  -  #ifdef CLEANEZ80
   14 00:46C9             
   15 00:46C9             ; ***************************************************************************************
   16 00:46C9             ;
   17 00:46C9             ;								Initialise system stuff
   18 00:46C9             ;
   19 00:46C9             ; ***************************************************************************************
   20 00:46C9             
   21 00:46C9             SYSInitialise:
   22 00:46C9             	ret
   23 00:46C9             
   24 00:46C9             ; ***************************************************************************************
   25 00:46C9             ;
   26 00:46C9             ;								Terminate system stuff
   27 00:46C9             ;
   28 00:46C9             ; ***************************************************************************************
   29 00:46C9             
   30 00:46C9             SYSTerminate:
   31 00:46C9             	ret
   32 00:46C9             
   33 00:46C9             ; ***************************************************************************************
   34 00:46C9             ;
   35 00:46C9             ;								Print A character
   36 00:46C9             ;
   37 00:46C9             ; ***************************************************************************************
   38 00:46C9             
   39 00:46C9             SYSPrintChar:
   40 00:46C9             	ret		
   41 00:46C9             
   42 00:46C9             ; ***************************************************************************************
   43 00:46C9             ;
   44 00:46C9             ;									Print Newline
   45 00:46C9             ;
   46 00:46C9             ; ***************************************************************************************
   47 00:46C9             
   48 00:46C9             SYSPrintCRLF:
   49 00:46C9             	ret
   50 00:46C9             
   51 00:46C9             #endif
   52 00:46C9 -  -  -  -  
   53 00:46C9 -  -  -  -  ; ***************************************************************************************
   54 00:46C9 -  -  -  -  ;
   55 00:46C9 -  -  -  -  ;									Changes and Updates
   56 00:46C9 -  -  -  -  ;
   57 00:46C9 -  -  -  -  ; ***************************************************************************************
   58 00:46C9 -  -  -  -  ;
   59 00:46C9 -  -  -  -  ;		Date			Notes
   60 00:46C9 -  -  -  -  ;		==== 			=====
   61 00:46C9 -  -  -  -  ;
   62 00:46C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:46C9 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:46C9 -  -  -  -  ; ***************************************************************************************
    2 00:46C9 -  -  -  -  ; ***************************************************************************************
    3 00:46C9 -  -  -  -  ;
    4 00:46C9 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:46C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C9 -  -  -  -  ;		Reviewed :	No
    8 00:46C9 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:46C9 -  -  -  -  ;
   10 00:46C9 -  -  -  -  ; ***************************************************************************************
   11 00:46C9 -  -  -  -  ; ***************************************************************************************
   12 00:46C9 -  -  -  -  
   13 00:46C9 -  -  -  -  #ifdef TI84
   14 00:46C9             
   15 00:46C9             ; ***************************************************************************************
   16 00:46C9             ;
   17 00:46C9             ;								Initialise system stuff
   18 00:46C9             ;
   19 00:46C9             ; ***************************************************************************************
   20 00:46C9             
   21 00:46C9             SYSInitialise:
   22 00:46C9             	di
   23 00:46C9             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:46C9             	ld 		(_IYTemp84),iy
   25 00:46C9             	ret
   26 00:46C9             
   27 00:46C9             ; ***************************************************************************************
   28 00:46C9             ;
   29 00:46C9             ;								Terminate system stuff
   30 00:46C9             ;
   31 00:46C9             ; ***************************************************************************************
   32 00:46C9             
   33 00:46C9             SYSTerminate:
   34 00:46C9             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:46C9             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:46C9             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:46C9             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:46C9             	ei
   39 00:46C9             	ret 										; and exit.
   40 00:46C9             
   41 00:46C9             _StackTemp84:									; temp var for TI84 only.
   42 00:46C9             	.dw 	0,0
   43 00:46C9             _IYTemp84:
   44 00:46C9             	.dw 	0,0		
   45 00:46C9             
   46 00:46C9             ; ***************************************************************************************
   47 00:46C9             ;
   48 00:46C9             ;								Print A character
   49 00:46C9             ;
   50 00:46C9             ; ***************************************************************************************
   51 00:46C9             
   52 00:46C9             SYSPrintChar:
   53 00:46C9             	push 	af 									; we stack everything including alt registers
   54 00:46C9             	push 	bc
   55 00:46C9             	push 	de
   56 00:46C9             	push 	hl
   57 00:46C9             	push 	ix
   58 00:46C9             	push 	iy
   59 00:46C9             	exx
   60 00:46C9             	push 	bc
   61 00:46C9             	push 	de
   62 00:46C9             	push 	hl
   63 00:46C9             
   64 00:46C9             	ld 		iy,(_IYTemp84)
   65 00:46C9             	call 	_PutC 								; print A as character
   66 00:46C9             	di
   67 00:46C9             	ld 		(_IYTemp84),iy
   68 00:46C9             
   69 00:46C9             	pop 	hl
   70 00:46C9             	pop 	de
   71 00:46C9             	pop 	bc
   72 00:46C9             	exx
   73 00:46C9             	pop 	iy
   74 00:46C9             	pop 	ix
   75 00:46C9             	pop 	hl
   76 00:46C9             	pop 	de
   77 00:46C9             	pop 	bc
   78 00:46C9             	pop 	af
   79 00:46C9             	ret		
   80 00:46C9             
   81 00:46C9             ; ***************************************************************************************
   82 00:46C9             ;
   83 00:46C9             ;									Print Newline
   84 00:46C9             ;
   85 00:46C9             ; ***************************************************************************************
   86 00:46C9             
   87 00:46C9             SYSPrintCRLF:
   88 00:46C9             	push 	af 									; we stack everything including alt registers
   89 00:46C9             	push 	bc
   90 00:46C9             	push 	de
   91 00:46C9             	push 	hl
   92 00:46C9             	push 	ix
   93 00:46C9             	push 	iy
   94 00:46C9             	exx
   95 00:46C9             	push 	bc
   96 00:46C9             	push 	de
   97 00:46C9             	push 	hl
   98 00:46C9             
   99 00:46C9             	ld 		iy,(_IYTemp84)
  100 00:46C9             	call 	_newline
  101 00:46C9             	di
  102 00:46C9             	ld 		(_IYTemp84),iy
  103 00:46C9             
  104 00:46C9             	pop 	hl
  105 00:46C9             	pop 	de
  106 00:46C9             	pop 	bc
  107 00:46C9             	exx
  108 00:46C9             	pop 	iy
  109 00:46C9             	pop 	ix
  110 00:46C9             	pop 	hl
  111 00:46C9             	pop 	de
  112 00:46C9             	pop 	bc
  113 00:46C9             	pop 	af
  114 00:46C9             	ret
  115 00:46C9             
  116 00:46C9             #endif
  117 00:46C9 -  -  -  -  
  118 00:46C9 -  -  -  -  ; ***************************************************************************************
  119 00:46C9 -  -  -  -  ;
  120 00:46C9 -  -  -  -  ;									Changes and Updates
  121 00:46C9 -  -  -  -  ;
  122 00:46C9 -  -  -  -  ; ***************************************************************************************
  123 00:46C9 -  -  -  -  ;
  124 00:46C9 -  -  -  -  ;		Date			Notes
  125 00:46C9 -  -  -  -  ;		==== 			=====
  126 00:46C9 -  -  -  -  ;
  127 00:46C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:46C9 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:46C9 -  -  -  -  ; ***************************************************************************************
    2 00:46C9 -  -  -  -  ; ***************************************************************************************
    3 00:46C9 -  -  -  -  ;
    4 00:46C9 -  -  -  -  ;		Name : 		basic.asm
    5 00:46C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:46C9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:46C9 -  -  -  -  ;		Reviewed :	No
    8 00:46C9 -  -  -  -  ;		Purpose :	Main program.
    9 00:46C9 -  -  -  -  ;
   10 00:46C9 -  -  -  -  ; ***************************************************************************************
   11 00:46C9 -  -  -  -  ; ***************************************************************************************
   12 00:46C9 -  -  -  -  
   13 00:46C9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:4800 -  -  -  -  TestInstance:
   15 00:4800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:4800 -  -  -  -  ;
    2 00:4800 -  -  -  -  ;	This code automatically generated.
    3 00:4800 -  -  -  -  ;
    4 00:4800 -  -  -  -  TestProgram:
    5 00:4800 21 01 00 B1 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0E 02 00 
              02 8E 89 42 
              A0 00 8E 56 
              86 47 80 0B 
              03 00 B4 02 
              3F 01 3B 0D 
              00 80 00 -  	.db	$21,$01,$00,$b1,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0e,$02,$00,$02,$8e,$89,$42,$a0,$00,$8e,$56,$86,$47,$80,$0b,$03,$00,$b4,$02,$3f,$01,$3b,$0d,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:483B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:583B -  -  -  -  EndTestInstance:
   18 00:583B -  -  -  -  		
   19 00:583B -  -  -  -  ; ***************************************************************************************
   20 00:583B -  -  -  -  ;
   21 00:583B -  -  -  -  ;									Changes and Updates
   22 00:583B -  -  -  -  ;
   23 00:583B -  -  -  -  ; ***************************************************************************************
   24 00:583B -  -  -  -  ;
   25 00:583B -  -  -  -  ;		Date			Notes
   26 00:583B -  -  -  -  ;		==== 			=====
   27 00:583B -  -  -  -  ;
   28 00:583B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:583B -  -  -  -  FinalAddress:
