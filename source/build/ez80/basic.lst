    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD AA 0D 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 2F 20 00 		ld 		hl,EndTestInstance
   46 00:000C CD C5 07 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 58 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 C3 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD AC 0D 00 		call 	SYSPrintChar
   56 00:0020 CD AB 0D 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 80 
              02 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 80 
              02 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  		
   59 00:004C -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:004C 00 00 00 00 		.dw 	0,0
   61 00:0050 -  -  -  -  
   62 00:0050 -  -  -  -  ; ***************************************************************************************
   63 00:0050 -  -  -  -  ;
   64 00:0050 -  -  -  -  ;										Run variables
   65 00:0050 -  -  -  -  ;
   66 00:0050 -  -  -  -  ; ***************************************************************************************
   67 00:0050 -  -  -  -  
   68 00:0050 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  		
   71 00:0054 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:0054 00 00 00 00 		.dw 	0,0
   73 00:0058 -  -  -  -  
   74 00:0058 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:0058 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:005E -  -  -  -  
   77 00:005E -  -  -  -  AConvert: 									; used for address conversions.
   78 00:005E 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:0064 -  -  -  -  		
   80 00:0064 -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:0064 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:0074 -  -  -  -  
   83 00:0074 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   84 00:0074 00 00 -  -  		.dw 	0
   85 00:0076 -  -  -  -  
   86 00:0076 -  -  -  -  ; ***************************************************************************************
   87 00:0076 -  -  -  -  ;
   88 00:0076 -  -  -  -  ;										  Buffers
   89 00:0076 -  -  -  -  ;
   90 00:0076 -  -  -  -  ; ***************************************************************************************
   91 00:0076 -  -  -  -  
   92 00:0076 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   93 00:0076 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   94 00:0086 -  -  -  -  
   95 00:0086 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   96 00:0086 00 00 -  -  		.dw 	0
   97 00:0088 -  -  -  -  
   98 00:0088 -  -  -  -  ConvertBuffer: 								; general usage
   99 00:0088 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  100 00:00C8 -  -  -  -  
  101 00:00C8 -  -  -  -  ; ***************************************************************************************
  102 00:00C8 -  -  -  -  ;
  103 00:00C8 -  -  -  -  ;									Changes and Updates
  104 00:00C8 -  -  -  -  ;
  105 00:00C8 -  -  -  -  ; ***************************************************************************************
  106 00:00C8 -  -  -  -  ;
  107 00:00C8 -  -  -  -  ;		Date			Notes
  108 00:00C8 -  -  -  -  ;		==== 			=====
  109 00:00C8 -  -  -  -  ;
  110 00:00C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00C8 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00C8 -  -  -  -  ; ***************************************************************************************
    2 00:00C8 -  -  -  -  ; ***************************************************************************************
    3 00:00C8 -  -  -  -  ;
    4 00:00C8 -  -  -  -  ;		Name : 		assert.asm
    5 00:00C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C8 -  -  -  -  ;		Reviewed :	No
    8 00:00C8 -  -  -  -  ;		Purpose :	Assert command
    9 00:00C8 -  -  -  -  ;
   10 00:00C8 -  -  -  -  ; ***************************************************************************************
   11 00:00C8 -  -  -  -  ; ***************************************************************************************
   12 00:00C8 -  -  -  -  
   13 00:00C8 -  -  -  -  ; ***************************************************************************************
   14 00:00C8 -  -  -  -  ;
   15 00:00C8 -  -  -  -  ;									ASSERT command
   16 00:00C8 -  -  -  -  ;
   17 00:00C8 -  -  -  -  ; ***************************************************************************************
   18 00:00C8 -  -  -  -  
   19 00:00C8 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00C8 CD B3 04 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00CC 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00D2 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00D3 3E 01 C3 80 
              02 00 -  -  		ERR_ASSERT
   24 00:00D9 -  -  -  -  
   25 00:00D9 -  -  -  -  ; ***************************************************************************************
   26 00:00D9 -  -  -  -  ;
   27 00:00D9 -  -  -  -  ;									Changes and Updates
   28 00:00D9 -  -  -  -  ;
   29 00:00D9 -  -  -  -  ; ***************************************************************************************
   30 00:00D9 -  -  -  -  ;
   31 00:00D9 -  -  -  -  ;		Date			Notes
   32 00:00D9 -  -  -  -  ;		==== 			=====
   33 00:00D9 -  -  -  -  ;
   34 00:00D9 -  -  -  -  ; ***************************************************************************************
   35 00:00D9 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00D9 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00D9 -  -  -  -  ; ***************************************************************************************
    2 00:00D9 -  -  -  -  ; ***************************************************************************************
    3 00:00D9 -  -  -  -  ;
    4 00:00D9 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00D9 -  -  -  -  ;		Reviewed :	No
    8 00:00D9 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00D9 -  -  -  -  ;
   10 00:00D9 -  -  -  -  ; ***************************************************************************************
   11 00:00D9 -  -  -  -  ; ***************************************************************************************
   12 00:00D9 -  -  -  -  
   13 00:00D9 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00D9 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00D9 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00D9 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00D9 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00D9 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00D9 C3 EA 02 00 		jp 		SyntaxError
   20 00:00DD -  -  -  -  
   21 00:00DD -  -  -  -  ; ***************************************************************************************
   22 00:00DD -  -  -  -  ;
   23 00:00DD -  -  -  -  ;									Changes and Updates
   24 00:00DD -  -  -  -  ;
   25 00:00DD -  -  -  -  ; ***************************************************************************************
   26 00:00DD -  -  -  -  ;
   27 00:00DD -  -  -  -  ;		Date			Notes
   28 00:00DD -  -  -  -  ;		==== 			=====
   29 00:00DD -  -  -  -  ;
   30 00:00DD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00DD -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00DD -  -  -  -  ; ***************************************************************************************
    2 00:00DD -  -  -  -  ; ***************************************************************************************
    3 00:00DD -  -  -  -  ;
    4 00:00DD -  -  -  -  ;		Name : 		colon.asm
    5 00:00DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DD -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00DD -  -  -  -  ;		Reviewed :	No
    8 00:00DD -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00DD -  -  -  -  ;
   10 00:00DD -  -  -  -  ; ***************************************************************************************
   11 00:00DD -  -  -  -  ; ***************************************************************************************
   12 00:00DD -  -  -  -  
   13 00:00DD -  -  -  -  ; ***************************************************************************************
   14 00:00DD -  -  -  -  ;
   15 00:00DD -  -  -  -  ;								Colon command, this is ignored.
   16 00:00DD -  -  -  -  ;
   17 00:00DD -  -  -  -  ; ***************************************************************************************
   18 00:00DD -  -  -  -  
   19 00:00DD -  -  -  -  Command_Colon: 	;; [:]
   20 00:00DD C9 -  -  -  		ret
   21 00:00DE -  -  -  -  
   22 00:00DE -  -  -  -  ; ***************************************************************************************
   23 00:00DE -  -  -  -  ;
   24 00:00DE -  -  -  -  ;									Changes and Updates
   25 00:00DE -  -  -  -  ;
   26 00:00DE -  -  -  -  ; ***************************************************************************************
   27 00:00DE -  -  -  -  ;
   28 00:00DE -  -  -  -  ;		Date			Notes
   29 00:00DE -  -  -  -  ;		==== 			=====
   30 00:00DE -  -  -  -  ;
   31 00:00DE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00DE -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00DE -  -  -  -  ; ***************************************************************************************
    2 00:00DE -  -  -  -  ; ***************************************************************************************
    3 00:00DE -  -  -  -  ;
    4 00:00DE -  -  -  -  ;		Name : 		end.asm
    5 00:00DE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DE -  -  -  -  ;		Reviewed :	No
    8 00:00DE -  -  -  -  ;		Purpose :	End command
    9 00:00DE -  -  -  -  ;
   10 00:00DE -  -  -  -  ; ***************************************************************************************
   11 00:00DE -  -  -  -  ; ***************************************************************************************
   12 00:00DE -  -  -  -  
   13 00:00DE -  -  -  -  ; ***************************************************************************************
   14 00:00DE -  -  -  -  ;
   15 00:00DE -  -  -  -  ;										END command
   16 00:00DE -  -  -  -  ;
   17 00:00DE -  -  -  -  ; ***************************************************************************************
   18 00:00DE -  -  -  -  
   19 00:00DE -  -  -  -  Command_END: 	;; [end]
   20 00:00DE 3E 00 C3 80 
              02 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00E4 -  -  -  -  
   22 00:00E4 -  -  -  -  ; ***************************************************************************************
   23 00:00E4 -  -  -  -  ;
   24 00:00E4 -  -  -  -  ;									Changes and Updates
   25 00:00E4 -  -  -  -  ;
   26 00:00E4 -  -  -  -  ; ***************************************************************************************
   27 00:00E4 -  -  -  -  ;
   28 00:00E4 -  -  -  -  ;		Date			Notes
   29 00:00E4 -  -  -  -  ;		==== 			=====
   30 00:00E4 -  -  -  -  ;
   31 00:00E4 -  -  -  -  ; ***************************************************************************************
   32 00:00E4 -  -  -  -  		
Listing for file "_build.asm"
   17 00:00E4 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00E4 -  -  -  -  ; ***************************************************************************************
    2 00:00E4 -  -  -  -  ; ***************************************************************************************
    3 00:00E4 -  -  -  -  ;
    4 00:00E4 -  -  -  -  ;		Name : 		endofline.asm
    5 00:00E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E4 -  -  -  -  ;		Reviewed :	None
    8 00:00E4 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00E4 -  -  -  -  ;
   10 00:00E4 -  -  -  -  ; ***************************************************************************************
   11 00:00E4 -  -  -  -  ; ***************************************************************************************
   12 00:00E4 -  -  -  -  
   13 00:00E4 -  -  -  -  ; ***************************************************************************************
   14 00:00E4 -  -  -  -  ;
   15 00:00E4 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00E4 -  -  -  -  ;
   17 00:00E4 -  -  -  -  ; ***************************************************************************************
   18 00:00E4 -  -  -  -  
   19 00:00E4 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00E4 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00E9 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00ED DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00F0 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00F2 -  -  -  -  		;
   25 00:00F2 ED 7B 54 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00F7 C3 D6 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00FB -  -  -  -  
   28 00:00FB -  -  -  -  ; ***************************************************************************************
   29 00:00FB -  -  -  -  ;
   30 00:00FB -  -  -  -  ;									Changes and Updates
   31 00:00FB -  -  -  -  ;
   32 00:00FB -  -  -  -  ; ***************************************************************************************
   33 00:00FB -  -  -  -  ;
   34 00:00FB -  -  -  -  ;		Date			Notes
   35 00:00FB -  -  -  -  ;		==== 			=====
   36 00:00FB -  -  -  -  ;
   37 00:00FB -  -  -  -  ; ***************************************************************************************
   38 00:00FB -  -  -  -  		
Listing for file "_build.asm"
   18 00:00FB -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:00FB -  -  -  -  ; ***************************************************************************************
    2 00:00FB -  -  -  -  ; ***************************************************************************************
    3 00:00FB -  -  -  -  ;
    4 00:00FB -  -  -  -  ;		Name : 		let.asm
    5 00:00FB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00FB -  -  -  -  ;		Date : 		4th June 2022
    7 00:00FB -  -  -  -  ;		Reviewed :	No
    8 00:00FB -  -  -  -  ;		Purpose :	Assignment statement
    9 00:00FB -  -  -  -  ;
   10 00:00FB -  -  -  -  ; ***************************************************************************************
   11 00:00FB -  -  -  -  ; ***************************************************************************************
   12 00:00FB -  -  -  -  
   13 00:00FB -  -  -  -  ; ***************************************************************************************
   14 00:00FB -  -  -  -  ;
   15 00:00FB -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:00FB -  -  -  -  ;
   17 00:00FB -  -  -  -  ; ***************************************************************************************
   18 00:00FB -  -  -  -  
   19 00:00FB -  -  -  -  Command_LET: 	;; [let]
   20 00:00FB DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:00FE FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:0100 28 2F -  -  		jr 		z,_CLString
   23 00:0102 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:0104 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:0106 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:0108 32 74 00 00 		ld 		(AllowAutoCreate),a
   27 00:010C -  -  -  -  _CLNoAuto:
   28 00:010C 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:010E CD 35 04 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:0112 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:0114 CA EA 02 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:0118 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:0119 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:011A AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:011B 32 74 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:011F 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:0121 CD 74 02 00 		call 	CheckNextA
   38 00:0125 -  -  -  -  
   39 00:0125 CD AB 04 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:0129 -  -  -  -  
   41 00:0129 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:012A 43 -  -  -  		ld 		b,e 						
   43 00:012B D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:012C -  -  -  -  		;
   45 00:012C -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:012C -  -  -  -  		;
   47 00:012C CD 39 01 00 		call 	WriteHLToDE
   48 00:0130 C9 -  -  -  		ret
   49 00:0131 -  -  -  -  		;
   50 00:0131 -  -  -  -  		; 		String assignment code
   51 00:0131 -  -  -  -  		;
   52 00:0131 -  -  -  -  _CLString:
   53 00:0131 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:0139 -  -  -  -  
   55 00:0139 -  -  -  -  ; ***************************************************************************************
   56 00:0139 -  -  -  -  ;
   57 00:0139 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:0139 -  -  -  -  ;
   59 00:0139 -  -  -  -  ; ***************************************************************************************
   60 00:0139 -  -  -  -  
   61 00:0139 -  -  -  -  WriteHLToDE:
   62 00:0139 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:013B C2 DE 02 00 		jp 		nz,TypeMismatch
   64 00:013F -  -  -  -  		;
   65 00:013F -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:013F -  -  -  -  		;		
   67 00:013F -  -  -  -  _WHDWriteNumber:
   68 00:013F EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:0140 D9 -  -  -  		exx
   70 00:0141 EB -  -  -  		ex 		de,hl
   71 00:0142 D9 -  -  -  		exx
   72 00:0143 -  -  -  -  
   73 00:0143 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:0144 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:0145 72 -  -  -  		ld 		(hl),d
   76 00:0146 23 -  -  -  		inc 	hl
   77 00:0147 E5 -  -  -  		push 	hl
   78 00:0148 D9 -  -  -  		exx
   79 00:0149 E1 -  -  -  		pop 	hl
   80 00:014A 73 -  -  -  		ld 		(hl),e
   81 00:014B 23 -  -  -  		inc 	hl
   82 00:014C 72 -  -  -  		ld 		(hl),d
   83 00:014D D9 -  -  -  		exx
   84 00:014E -  -  -  -  
   85 00:014E C9 -  -  -  		ret
   86 00:014F -  -  -  -  
   87 00:014F -  -  -  -  ; ***************************************************************************************
   88 00:014F -  -  -  -  ;
   89 00:014F -  -  -  -  ;									Changes and Updates
   90 00:014F -  -  -  -  ;
   91 00:014F -  -  -  -  ; ***************************************************************************************
   92 00:014F -  -  -  -  ;
   93 00:014F -  -  -  -  ;		Date			Notes
   94 00:014F -  -  -  -  ;		==== 			=====
   95 00:014F -  -  -  -  ;
   96 00:014F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:014F -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:014F -  -  -  -  ; ***************************************************************************************
    2 00:014F -  -  -  -  ; ***************************************************************************************
    3 00:014F -  -  -  -  ;
    4 00:014F -  -  -  -  ;		Name : 		print.asm
    5 00:014F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:014F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:014F -  -  -  -  ;		Reviewed :	No
    8 00:014F -  -  -  -  ;		Purpose :	Print command
    9 00:014F -  -  -  -  ;
   10 00:014F -  -  -  -  ; ***************************************************************************************
   11 00:014F -  -  -  -  ; ***************************************************************************************
   12 00:014F -  -  -  -  
   13 00:014F -  -  -  -  ; ***************************************************************************************
   14 00:014F -  -  -  -  ;
   15 00:014F -  -  -  -  ;										PRINT command
   16 00:014F -  -  -  -  ;
   17 00:014F -  -  -  -  ; ***************************************************************************************
   18 00:014F -  -  -  -  
   19 00:014F -  -  -  -  Command_PRINT: 	;; [print]
   20 00:014F -  -  -  -  		;
   21 00:014F -  -  -  -  		;		Main loop
   22 00:014F -  -  -  -  		;
   23 00:014F -  -  -  -  _CPRLoop:
   24 00:014F DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:0152 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:0154 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:0156 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:0158 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:015A FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:015C 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:015E FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:0160 28 2C -  -  		jr 		z,_CPRTab
   33 00:0162 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:0164 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:0166 -  -  -  -  		;
   36 00:0166 CD AB 04 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:016A CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:016C 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:016E -  -  -  -  		;
   40 00:016E 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:0170 -  -  -  -  _CPRPrintNumber:
   42 00:0170 F5 -  -  -  		push 	af 							; print leading space
   43 00:0171 3E 20 -  -  		ld 		a,' '
   44 00:0173 CD AC 0D 00 		call 	SYSPrintChar
   45 00:0177 F1 -  -  -  		pop 	af
   46 00:0178 01 88 00 00 		ld  	bc,ConvertBuffer
   47 00:017C C5 -  -  -  		push 	bc
   48 00:017D CD 5D 0D 00 		call 	Int32ToString 				; convert to string
   49 00:0181 E1 -  -  -  		pop 	hl
   50 00:0182 -  -  -  -  		;
   51 00:0182 -  -  -  -  		; 		Print text at HL.
   52 00:0182 -  -  -  -  		;
   53 00:0182 -  -  -  -  _CPRPrintHL:
   54 00:0182 CD E4 07 00 		call 	PrintStringAtHL 			; print string out
   55 00:0186 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:0188 -  -  -  -  		;
   57 00:0188 -  -  -  -  		; 		New line (')
   58 00:0188 -  -  -  -  		;
   59 00:0188 -  -  -  -  _CPRNewLine:
   60 00:0188 CD AD 0D 00 		call 	SYSPrintCRLF
   61 00:018C 18 06 -  -  		jr 		_CPRCheckNext
   62 00:018E -  -  -  -  		;
   63 00:018E -  -  -  -  		; 		Tab command (,)
   64 00:018E -  -  -  -  		;
   65 00:018E -  -  -  -  _CPRTab:
   66 00:018E 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:0190 CD AC 0D 00 		call 	SYSPrintChar
   68 00:0194 -  -  -  -  		;
   69 00:0194 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:0194 -  -  -  -  		;
   71 00:0194 -  -  -  -  _CPRCheckNext:
   72 00:0194 DD 23 -  -  		inc 	ix 							; consume current
   73 00:0196 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:0199 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:019B C8 -  -  -  		ret 	z
   76 00:019C FE A7 -  -  		cp 		KWD_COLON
   77 00:019E C8 -  -  -  		ret 	z
   78 00:019F 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:01A1 -  -  -  -  		;
   80 00:01A1 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:01A1 -  -  -  -  		;
   82 00:01A1 -  -  -  -  _CPRExitNL:
   83 00:01A1 CD AD 0D 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:01A5 C9 -  -  -  		ret
Listing for file "_build.asm"
   20 00:01A6 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:01A6 -  -  -  -  ; ***************************************************************************************
    2 00:01A6 -  -  -  -  ; ***************************************************************************************
    3 00:01A6 -  -  -  -  ;
    4 00:01A6 -  -  -  -  ;		Name : 		rem.asm
    5 00:01A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A6 -  -  -  -  ;		Reviewed :	No
    8 00:01A6 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:01A6 -  -  -  -  ;
   10 00:01A6 -  -  -  -  ; ***************************************************************************************
   11 00:01A6 -  -  -  -  ; ***************************************************************************************
   12 00:01A6 -  -  -  -  
   13 00:01A6 -  -  -  -  ; ***************************************************************************************
   14 00:01A6 -  -  -  -  ;
   15 00:01A6 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:01A6 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:01A6 -  -  -  -  ;
   18 00:01A6 -  -  -  -  ; ***************************************************************************************
   19 00:01A6 -  -  -  -  
   20 00:01A6 -  -  -  -  Command_REM: 	;; [rem]
   21 00:01A6 -  -  -  -  Command_REM2: 	;; [']
   22 00:01A6 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:01A9 DD 23 -  -  		inc 	ix
   24 00:01AB FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:01AD C8 -  -  -  		ret 	z
   26 00:01AE FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:01B0 C8 -  -  -  		ret 	z
   28 00:01B1 FE 3F -  -  		cp 		STRING_MARKER
   29 00:01B3 C2 EA 02 00 		jp 		nz,SyntaxError
   30 00:01B7 -  -  -  -  		;		
   31 00:01B7 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:01BB DD 5E 00 -  		ld 		e,(ix+0)
   33 00:01BE 13 -  -  -  		inc 	de 
   34 00:01BF 13 -  -  -  		inc 	de
   35 00:01C0 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:01C2 C9 -  -  -  		ret
   37 00:01C3 -  -  -  -  
   38 00:01C3 -  -  -  -  ; ***************************************************************************************
   39 00:01C3 -  -  -  -  ;
   40 00:01C3 -  -  -  -  ;									Changes and Updates
   41 00:01C3 -  -  -  -  ;
   42 00:01C3 -  -  -  -  ; ***************************************************************************************
   43 00:01C3 -  -  -  -  ;
   44 00:01C3 -  -  -  -  ;		Date			Notes
   45 00:01C3 -  -  -  -  ;		==== 			=====
   46 00:01C3 -  -  -  -  ;
   47 00:01C3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:01C3 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:01C3 -  -  -  -  ; ***************************************************************************************
    2 00:01C3 -  -  -  -  ; ***************************************************************************************
    3 00:01C3 -  -  -  -  ;
    4 00:01C3 -  -  -  -  ;		Name : 		run.asm
    5 00:01C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01C3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01C3 -  -  -  -  ;		Reviewed :	No
    8 00:01C3 -  -  -  -  ;		Purpose :	Run command
    9 00:01C3 -  -  -  -  ;
   10 00:01C3 -  -  -  -  ; ***************************************************************************************
   11 00:01C3 -  -  -  -  ; ***************************************************************************************
   12 00:01C3 -  -  -  -  
   13 00:01C3 -  -  -  -  ; ***************************************************************************************
   14 00:01C3 -  -  -  -  ;
   15 00:01C3 -  -  -  -  ;										RUN command
   16 00:01C3 -  -  -  -  ;
   17 00:01C3 -  -  -  -  ; ***************************************************************************************
   18 00:01C3 -  -  -  -  
   19 00:01C3 -  -  -  -  Command_RUN: 	;; [run]
   20 00:01C3 CD 8A 07 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:01C7 -  -  -  -  
   22 00:01C7 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:01CC ED 73 54 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:01D1 AF -  -  -  		xor 	a
   25 00:01D2 32 74 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:01D6 -  -  -  -  		;
   27 00:01D6 -  -  -  -  		; 		New line at IX.
   28 00:01D6 -  -  -  -  		;
   29 00:01D6 -  -  -  -  CRNewLine:
   30 00:01D6 DD 22 50 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:01DB -  -  -  -  		;
   32 00:01DB DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:01DE B7 -  -  -  		or 		a
   34 00:01DF CA DE 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:01E3 -  -  -  -  		;
   36 00:01E3 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:01E5 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:01E7 DD 23 -  -  		inc 	ix
   39 00:01E9 -  -  -  -  		;
   40 00:01E9 -  -  -  -  		; 		New command at IX
   41 00:01E9 -  -  -  -  		;
   42 00:01E9 -  -  -  -  _CRNewCommand:	
   43 00:01E9 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:01EC B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:01ED F2 28 02 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:01F1 -  -  -  -  		;
   47 00:01F1 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:01F3 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:01F5 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:01F7 D2 18 02 00 		jp 		nc,_CRAlternateLets
   51 00:01FB -  -  -  -  		;
   52 00:01FB -  -  -  -  _CRDoCommand:		
   53 00:01FB E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 0A 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:0210 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:0212 CD 58 00 00 		call 	JumpCode 					; call the routine.
   56 00:0216 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:0218 -  -  -  -  		;
   58 00:0218 -  -  -  -  		; 		Do CALL (HL)
   59 00:0218 -  -  -  -  		;
   60 00:0218 -  -  -  -  		;
   61 00:0218 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:0218 -  -  -  -  		;		
   63 00:0218 -  -  -  -  _CRAlternateLets:		
   64 00:0218 FE 83 -  -  		cp 		KWD_PLING
   65 00:021A 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:021C FE 84 -  -  		cp 		KWD_QMARK
   67 00:021E 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:0220 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:0222 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:0224 C3 EA 02 00 		jp 		SyntaxError
   71 00:0228 -  -  -  -  		;
   72 00:0228 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0228 -  -  -  -  		;
   74 00:0228 -  -  -  -  _CRAssignmentHandler:		
   75 00:0228 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:022A D2 EA 02 00 		jp 		nc,SyntaxError
   77 00:022E -  -  -  -  _CRAssignmentLet:		
   78 00:022E CD FB 00 00 		call	Command_LET 				; do LET.
   79 00:0232 C3 E9 01 00 		jp 		_CRNewCommand
   80 00:0236 -  -  -  -  
   81 00:0236 -  -  -  -  ; ***************************************************************************************
   82 00:0236 -  -  -  -  ;
   83 00:0236 -  -  -  -  ;									Changes and Updates
   84 00:0236 -  -  -  -  ;
   85 00:0236 -  -  -  -  ; ***************************************************************************************
   86 00:0236 -  -  -  -  ;
   87 00:0236 -  -  -  -  ;		Date			Notes
   88 00:0236 -  -  -  -  ;		==== 			=====
   89 00:0236 -  -  -  -  ;
   90 00:0236 -  -  -  -  ; ***************************************************************************************
   91 00:0236 -  -  -  -  		
Listing for file "_build.asm"
   22 00:0236 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0236 -  -  -  -  ; ***************************************************************************************
    2 00:0236 -  -  -  -  ; ***************************************************************************************
    3 00:0236 -  -  -  -  ;
    4 00:0236 -  -  -  -  ;		Name : 		stop.asm
    5 00:0236 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0236 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0236 -  -  -  -  ;		Reviewed :	No
    8 00:0236 -  -  -  -  ;		Purpose :	Stop command
    9 00:0236 -  -  -  -  ;
   10 00:0236 -  -  -  -  ; ***************************************************************************************
   11 00:0236 -  -  -  -  ; ***************************************************************************************
   12 00:0236 -  -  -  -  
   13 00:0236 -  -  -  -  ; ***************************************************************************************
   14 00:0236 -  -  -  -  ;
   15 00:0236 -  -  -  -  ;										STOP command
   16 00:0236 -  -  -  -  ;
   17 00:0236 -  -  -  -  ; ***************************************************************************************
   18 00:0236 -  -  -  -  
   19 00:0236 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0236 3E 0C C3 80 
              02 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:023C -  -  -  -  
   22 00:023C -  -  -  -  ; ***************************************************************************************
   23 00:023C -  -  -  -  ;
   24 00:023C -  -  -  -  ;									Changes and Updates
   25 00:023C -  -  -  -  ;
   26 00:023C -  -  -  -  ; ***************************************************************************************
   27 00:023C -  -  -  -  ;
   28 00:023C -  -  -  -  ;		Date			Notes
   29 00:023C -  -  -  -  ;		==== 			=====
   30 00:023C -  -  -  -  ;
   31 00:023C -  -  -  -  ; ***************************************************************************************
   32 00:023C -  -  -  -  		
Listing for file "_build.asm"
   23 00:023C -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:023C -  -  -  -  ; ***************************************************************************************
    2 00:023C -  -  -  -  ; ***************************************************************************************
    3 00:023C -  -  -  -  ;
    4 00:023C -  -  -  -  ;		Name : 		charcheck.asm
    5 00:023C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:023C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:023C -  -  -  -  ;		Reviewed :	No
    8 00:023C -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:023C -  -  -  -  ;
   10 00:023C -  -  -  -  ; ***************************************************************************************
   11 00:023C -  -  -  -  ; ***************************************************************************************
   12 00:023C -  -  -  -  
   13 00:023C -  -  -  -  ; ***************************************************************************************
   14 00:023C -  -  -  -  ;
   15 00:023C -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:023C -  -  -  -  ;
   17 00:023C -  -  -  -  ; ***************************************************************************************
   18 00:023C -  -  -  -  
   19 00:023C -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:023C             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:023C             		inc 	ix
   22 00:023C             		cp 		ch 							; exit if matches
   23 00:023C             		ret 	z
   24 00:023C             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:023C             		jp 		ErrorHandler
   26 00:023C             #endmacro
   27 00:023C -  -  -  -  
   28 00:023C -  -  -  -  CheckLeftBracket:
   29 00:023C DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 80 
              02 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:024A -  -  -  -  
   31 00:024A -  -  -  -  CheckRightBracket:
   32 00:024A DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 80 
              02 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0258 -  -  -  -  
   34 00:0258 -  -  -  -  CheckDollar:
   35 00:0258 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 80 
              02 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0266 -  -  -  -  		
   37 00:0266 -  -  -  -  CheckComma:
   38 00:0266 DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 80 
              02 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0274 -  -  -  -  
   40 00:0274 -  -  -  -  ; ***************************************************************************************
   41 00:0274 -  -  -  -  ;
   42 00:0274 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0274 -  -  -  -  ;
   44 00:0274 -  -  -  -  ; ***************************************************************************************
   45 00:0274 -  -  -  -  
   46 00:0274 -  -  -  -  CheckNextA:
   47 00:0274 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0277 DD 23 -  -  		inc 	ix 							; skip character
   49 00:0279 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:027A 3E 0D C3 80 
              02 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0280 -  -  -  -  		
   52 00:0280 -  -  -  -  ; ***************************************************************************************
   53 00:0280 -  -  -  -  ;
   54 00:0280 -  -  -  -  ;									Changes and Updates
   55 00:0280 -  -  -  -  ;
   56 00:0280 -  -  -  -  ; ***************************************************************************************
   57 00:0280 -  -  -  -  ;
   58 00:0280 -  -  -  -  ;		Date			Notes
   59 00:0280 -  -  -  -  ;		==== 			=====
   60 00:0280 -  -  -  -  ;
   61 00:0280 -  -  -  -  ; ***************************************************************************************
   62 00:0280 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0280 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0280 -  -  -  -  ; ***************************************************************************************
    2 00:0280 -  -  -  -  ; ***************************************************************************************
    3 00:0280 -  -  -  -  ;
    4 00:0280 -  -  -  -  ;		Name : 		errors.asm
    5 00:0280 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0280 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0280 -  -  -  -  ;		Reviewed :	No
    8 00:0280 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0280 -  -  -  -  ;
   10 00:0280 -  -  -  -  ; ***************************************************************************************
   11 00:0280 -  -  -  -  ; ***************************************************************************************
   12 00:0280 -  -  -  -  
   13 00:0280 -  -  -  -  ; ***************************************************************************************
   14 00:0280 -  -  -  -  ;
   15 00:0280 -  -  -  -  ;								Error handler, message A 
   16 00:0280 -  -  -  -  ;
   17 00:0280 -  -  -  -  ; ***************************************************************************************
   18 00:0280 -  -  -  -  
   19 00:0280 -  -  -  -  ErrorHandler:
   20 00:0280 F5 -  -  -  		push 	af 						; save error ID
   21 00:0281 -  -  -  -  
   22 00:0281 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0285 6F -  -  -  		ld 		l,a
   24 00:0286 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0287 29 -  -  -  		add 	hl,hl 		
   26 00:0288 11 51 09 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:028C 19 -  -  -  		add 	hl,de
   28 00:028D ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:028F CD E4 07 00 		call 	PrintStringAtHL
   30 00:0293 -  -  -  -  		;
   31 00:0293 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0294 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0295 28 2F -  -  		jr 		z,_EHExit
   34 00:0297 -  -  -  -  		;
   35 00:0297 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:029C DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:029F B7 -  -  -  		or 		a
   38 00:02A0 28 24 -  -  		jr 		z,_EHExit
   39 00:02A2 -  -  -  -  
   40 00:02A2 21 CE 02 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:02A6 CD E4 07 00 		call 	PrintStringAtHL 
   42 00:02AA -  -  -  -  		
   43 00:02AA D9 -  -  -  		exx								; HL'HL = line number
   44 00:02AB 21 00 00 00 		ld 		hl,$0000 		
   45 00:02AF D9 -  -  -  		exx 
   46 00:02B0 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:02B3 DD 66 02 -  		ld 		h,(ix+2)
   48 00:02B6 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:02B8 01 88 00 00 		ld 		bc,ConvertBuffer
   50 00:02BC CD 5D 0D 00 		call 	Int32ToString
   51 00:02C0 C5 -  -  -  		push 	bc
   52 00:02C1 E1 -  -  -  		pop 	hl
   53 00:02C2 CD E4 07 00 		call 	PrintStringAtHL			; print error line number.
   54 00:02C6 -  -  -  -  _EHExit:		
   55 00:02C6 CD AD 0D 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:02CA C3 1A 00 00 		jp 		WarmStart
   57 00:02CE -  -  -  -  
   58 00:02CE -  -  -  -  _EHAtText:
   59 00:02CE 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:02D8 -  -  -  -  
   61 00:02D8 -  -  -  -  NotImplemented:
   62 00:02D8 3E 04 C3 80 
              02 00 -  -  		ERR_DISABLED
   63 00:02DE -  -  -  -  TypeMismatch:
   64 00:02DE 3E 02 C3 80 
              02 00 -  -  		ERR_BADTYPE
   65 00:02E4 -  -  -  -  BadValue:
   66 00:02E4 3E 03 C3 80 
              02 00 -  -  		ERR_BADVALUE
   67 00:02EA -  -  -  -  SyntaxError:
   68 00:02EA 3E 0D C3 80 
              02 00 -  -  		ERR_SYNTAX
   69 00:02F0 -  -  -  -  						
   70 00:02F0 -  -  -  -  ; ***************************************************************************************
   71 00:02F0 -  -  -  -  ;
   72 00:02F0 -  -  -  -  ;									Changes and Updates
   73 00:02F0 -  -  -  -  ;
   74 00:02F0 -  -  -  -  ; ***************************************************************************************
   75 00:02F0 -  -  -  -  ;
   76 00:02F0 -  -  -  -  ;		Date			Notes
   77 00:02F0 -  -  -  -  ;		==== 			=====
   78 00:02F0 -  -  -  -  ;
   79 00:02F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:02F0 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:02F0 -  -  -  -  ; ***************************************************************************************
    2 00:02F0 -  -  -  -  ; ***************************************************************************************
    3 00:02F0 -  -  -  -  ;
    4 00:02F0 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:02F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02F0 -  -  -  -  ;		Reviewed :	No
    8 00:02F0 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:02F0 -  -  -  -  ;
   10 00:02F0 -  -  -  -  ; ***************************************************************************************
   11 00:02F0 -  -  -  -  ; ***************************************************************************************
   12 00:02F0 -  -  -  -  
   13 00:02F0 -  -  -  -  ; ***************************************************************************************
   14 00:02F0 -  -  -  -  ;
   15 00:02F0 -  -  -  -  ; 									Addition
   16 00:02F0 -  -  -  -  ;
   17 00:02F0 -  -  -  -  ; ***************************************************************************************
   18 00:02F0 -  -  -  -  
   19 00:02F0 -  -  -  -  ALUAdd: 		;; [+]
   20 00:02F0 CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 DC 
              0C 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:02FE -  -  -  -  
   22 00:02FE -  -  -  -  ; ***************************************************************************************
   23 00:02FE -  -  -  -  ;
   24 00:02FE -  -  -  -  ; 									Subtraction
   25 00:02FE -  -  -  -  ;
   26 00:02FE -  -  -  -  ; ***************************************************************************************
   27 00:02FE -  -  -  -  
   28 00:02FE -  -  -  -  ALUSubtract: 	;; [-]
   29 00:02FE CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 E4 
              0C 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:030C -  -  -  -  
   31 00:030C -  -  -  -  ; ***************************************************************************************
   32 00:030C -  -  -  -  ;
   33 00:030C -  -  -  -  ; 									  Multiply
   34 00:030C -  -  -  -  ;
   35 00:030C -  -  -  -  ; ***************************************************************************************
   36 00:030C -  -  -  -  
   37 00:030C -  -  -  -  ALUMultiply: 	;; [*]
   38 00:030C CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 A3 
              0C 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:031A -  -  -  -  
   40 00:031A -  -  -  -  ; ***************************************************************************************
   41 00:031A -  -  -  -  ;
   42 00:031A -  -  -  -  ; 									  Divide
   43 00:031A -  -  -  -  ;
   44 00:031A -  -  -  -  ; ***************************************************************************************
   45 00:031A -  -  -  -  
   46 00:031A -  -  -  -  ALUDivide: 	;; [/]
   47 00:031A -  -  -  -  ALUDivide2:	;; [div]
   48 00:031A CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 A3 
              0B 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0328 -  -  -  -  
   50 00:0328 -  -  -  -  ; ***************************************************************************************
   51 00:0328 -  -  -  -  ;
   52 00:0328 -  -  -  -  ; 									  Modulus
   53 00:0328 -  -  -  -  ;
   54 00:0328 -  -  -  -  ; ***************************************************************************************
   55 00:0328 -  -  -  -  
   56 00:0328 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0328 CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 A6 
              0B 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0336 -  -  -  -  
   59 00:0336 -  -  -  -  ; ***************************************************************************************
   60 00:0336 -  -  -  -  ;
   61 00:0336 -  -  -  -  ; 									  Logical
   62 00:0336 -  -  -  -  ;
   63 00:0336 -  -  -  -  ; ***************************************************************************************
   64 00:0336 -  -  -  -  
   65 00:0336 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0336 CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 EE 
              0C 00 -  -  		IntegerDispatch(Int32And)
   67 00:0344 -  -  -  -  
   68 00:0344 -  -  -  -  ALUOr: 			;; [or]
   69 00:0344 CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 FB 
              0C 00 -  -  		IntegerDispatch(Int32Or)
   70 00:0352 -  -  -  -  
   71 00:0352 -  -  -  -  ALUXor: 		;; [eor]
   72 00:0352 CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 08 
              0D 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:0360 -  -  -  -  
   74 00:0360 -  -  -  -  ; ***************************************************************************************
   75 00:0360 -  -  -  -  ;
   76 00:0360 -  -  -  -  ;									Changes and Updates
   77 00:0360 -  -  -  -  ;
   78 00:0360 -  -  -  -  ; ***************************************************************************************
   79 00:0360 -  -  -  -  ;
   80 00:0360 -  -  -  -  ;		Date			Notes
   81 00:0360 -  -  -  -  ;		==== 			=====
   82 00:0360 -  -  -  -  ;
   83 00:0360 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0360 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:0360 -  -  -  -  ; ***************************************************************************************
    2 00:0360 -  -  -  -  ; ***************************************************************************************
    3 00:0360 -  -  -  -  ;
    4 00:0360 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:0360 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0360 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0360 -  -  -  -  ;		Reviewed :	No
    8 00:0360 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:0360 -  -  -  -  ;
   10 00:0360 -  -  -  -  ; ***************************************************************************************
   11 00:0360 -  -  -  -  ; ***************************************************************************************
   12 00:0360 -  -  -  -  
   13 00:0360 -  -  -  -  ; ***************************************************************************************
   14 00:0360 -  -  -  -  ;
   15 00:0360 -  -  -  -  ; 									<l> <op> <r>
   16 00:0360 -  -  -  -  ;
   17 00:0360 -  -  -  -  ; ***************************************************************************************
   18 00:0360 -  -  -  -  
   19 00:0360 -  -  -  -  ALULongReference:			;; [!]
   20 00:0360 CD 70 03 00 		call 	BRGetAddress 				; calculate address
   21 00:0364 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0366 CB F9 -  -  		set 	CIsReference,c
   23 00:0368 C9 -  -  -  		ret
   24 00:0369 -  -  -  -  
   25 00:0369 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0369 CD 60 03 00 		call 	ALULongReference
   27 00:036D CB F1 -  -  		set 	CIsByteReference,c
   28 00:036F C9 -  -  -  		ret
   29 00:0370 -  -  -  -  
   30 00:0370 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0370 CD 0D 04 00 
              78 B1 C2 DE 
              02 00 C3 7E 
              03 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:037E -  -  -  -  _BRGAMain:		
   33 00:037E CD DC 0C 00 		call 	Int32Add 					; address in HL'HL
   34 00:0382 CD 13 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0386 C9 -  -  -  		ret
   36 00:0387 -  -  -  -  
   37 00:0387 -  -  -  -  ; ***************************************************************************************
   38 00:0387 -  -  -  -  ;
   39 00:0387 -  -  -  -  ;									Changes and Updates
   40 00:0387 -  -  -  -  ;
   41 00:0387 -  -  -  -  ; ***************************************************************************************
   42 00:0387 -  -  -  -  ;
   43 00:0387 -  -  -  -  ;		Date			Notes
   44 00:0387 -  -  -  -  ;		==== 			=====
   45 00:0387 -  -  -  -  ;
   46 00:0387 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:0387 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0387 -  -  -  -  ; ***************************************************************************************
    2 00:0387 -  -  -  -  ; ***************************************************************************************
    3 00:0387 -  -  -  -  ;
    4 00:0387 -  -  -  -  ;		Name : 		compare.asm
    5 00:0387 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0387 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0387 -  -  -  -  ;		Reviewed :	No
    8 00:0387 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0387 -  -  -  -  ;
   10 00:0387 -  -  -  -  ; ***************************************************************************************
   11 00:0387 -  -  -  -  ; ***************************************************************************************
   12 00:0387 -  -  -  -  
   13 00:0387 -  -  -  -  #macro compare_equals(n)
   14 00:0387             		call 	CompareBaseCode
   15 00:0387             		cp 		n
   16 00:0387             		jr 		z,UnaryInt32True
   17 00:0387             		jr 		UnaryInt32False
   18 00:0387             #endmacro
   19 00:0387 -  -  -  -  
   20 00:0387 -  -  -  -  #macro compare_not_equals(n)
   21 00:0387             		call 	CompareBaseCode
   22 00:0387             		cp 		n
   23 00:0387             		jr 		nz,UnaryInt32True
   24 00:0387             		jr 		UnaryInt32False
   25 00:0387             #endmacro
   26 00:0387 -  -  -  -  
   27 00:0387 -  -  -  -  ; ***************************************************************************************
   28 00:0387 -  -  -  -  ;
   29 00:0387 -  -  -  -  ; 								Return True/False
   30 00:0387 -  -  -  -  ;
   31 00:0387 -  -  -  -  ; ***************************************************************************************
   32 00:0387 -  -  -  -  
   33 00:0387 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0387 3E FF -  -  		ld 		a,255
   35 00:0389 18 01 -  -  		jr 		_Int32Logical
   36 00:038B -  -  -  -  UnaryInt32False: ;; [false]
   37 00:038B AF -  -  -  		xor 	a
   38 00:038C -  -  -  -  _Int32Logical:
   39 00:038C 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:038D 67 -  -  -  		ld 		h,a
   41 00:038E D9 -  -  -  		exx
   42 00:038F 6F -  -  -  		ld 		l,a
   43 00:0390 67 -  -  -  		ld 		h,a
   44 00:0391 D9 -  -  -  		exx
   45 00:0392 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0394 C9 -  -  -  		ret
   47 00:0395 -  -  -  -  
   48 00:0395 -  -  -  -  ; ***************************************************************************************
   49 00:0395 -  -  -  -  ;
   50 00:0395 -  -  -  -  ; 										> = < (compare == value)
   51 00:0395 -  -  -  -  ;
   52 00:0395 -  -  -  -  ; ***************************************************************************************
   53 00:0395 -  -  -  -  
   54 00:0395 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0395 CD D1 03 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:039F -  -  -  -  
   57 00:039F -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:039F CD D1 03 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:03A9 -  -  -  -  
   60 00:03A9 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:03A9 CD D1 03 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:03B3 -  -  -  -  
   63 00:03B3 -  -  -  -  ; ***************************************************************************************
   64 00:03B3 -  -  -  -  ;
   65 00:03B3 -  -  -  -  ; 										> = < (compare <> value)
   66 00:03B3 -  -  -  -  ;
   67 00:03B3 -  -  -  -  ; ***************************************************************************************
   68 00:03B3 -  -  -  -  
   69 00:03B3 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:03B3 CD D1 03 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:03BD -  -  -  -  
   72 00:03BD -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:03BD CD D1 03 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:03C7 -  -  -  -  
   75 00:03C7 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:03C7 CD D1 03 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:03D1 -  -  -  -  
   78 00:03D1 -  -  -  -  ; ***************************************************************************************
   79 00:03D1 -  -  -  -  ;
   80 00:03D1 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:03D1 -  -  -  -  ;
   82 00:03D1 -  -  -  -  ; ***************************************************************************************
   83 00:03D1 -  -  -  -  
   84 00:03D1 -  -  -  -  CompareBaseCode:
   85 00:03D1 CD 0D 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:03D5 -  -  -  -  
   87 00:03D5 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:03D6 A1 -  -  -  		and 	c
   89 00:03D7 CB 47 -  -  		bit 	CIsString,a 
   90 00:03D9 C2 EB 03 00 		jp 		nz,StringCompare
   91 00:03DD -  -  -  -  
   92 00:03DD 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:03DE B1 -  -  -  		or 		c
   94 00:03DF CB 47 -  -  		bit 	CIsString,a 
   95 00:03E1 CA 1C 0D 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:03E5 -  -  -  -  
   97 00:03E5 3E 02 C3 80 
              02 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:03EB -  -  -  -  ;
   99 00:03EB -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:03EB -  -  -  -  ;
  101 00:03EB -  -  -  -  StringCompare:
  102 00:03EB 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:03EC BE -  -  -  		cp 		(hl)
  104 00:03ED 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:03EF 20 08 -  -  		jr 		nz,_SCLess
  106 00:03F1 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:03F2 23 -  -  -  		inc 	hl
  108 00:03F3 FE 20 -  -  		cp 		' '
  109 00:03F5 30 F4 -  -  		jr 		nc,StringCompare
  110 00:03F7 AF -  -  -  		xor 	a 							; return 0.
  111 00:03F8 C9 -  -  -  		ret
  112 00:03F9 -  -  -  -  
  113 00:03F9 -  -  -  -  _SCLess:
  114 00:03F9 3E FF -  -  		ld 		a,$FF
  115 00:03FB C9 -  -  -  		ret
  116 00:03FC -  -  -  -  _SCGreater:
  117 00:03FC 3E 01 -  -  		ld 		a,1
  118 00:03FE C9 -  -  -  		ret
  119 00:03FF -  -  -  -  
  120 00:03FF 3E 0E C3 80 
              02 00 -  -  		ERR_TODO()
  121 00:0405 -  -  -  -  
  122 00:0405 -  -  -  -  ; ***************************************************************************************
  123 00:0405 -  -  -  -  ;
  124 00:0405 -  -  -  -  ;									Changes and Updates
  125 00:0405 -  -  -  -  ;
  126 00:0405 -  -  -  -  ; ***************************************************************************************
  127 00:0405 -  -  -  -  ;
  128 00:0405 -  -  -  -  ;		Date			Notes
  129 00:0405 -  -  -  -  ;		==== 			=====
  130 00:0405 -  -  -  -  ;
  131 00:0405 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:0405 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0405 -  -  -  -  ; ***************************************************************************************
    2 00:0405 -  -  -  -  ; ***************************************************************************************
    3 00:0405 -  -  -  -  ;
    4 00:0405 -  -  -  -  ;		Name : 		utility.asm
    5 00:0405 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0405 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0405 -  -  -  -  ;		Reviewed :	No
    8 00:0405 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0405 -  -  -  -  ;
   10 00:0405 -  -  -  -  ; ***************************************************************************************
   11 00:0405 -  -  -  -  ; ***************************************************************************************
   12 00:0405 -  -  -  -  
   13 00:0405 -  -  -  -  ; ***************************************************************************************
   14 00:0405 -  -  -  -  ;
   15 00:0405 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0405 -  -  -  -  ;
   17 00:0405 -  -  -  -  ; ***************************************************************************************
   18 00:0405 -  -  -  -  
   19 00:0405 -  -  -  -  SwapHLDE:
   20 00:0405 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0406 D9 -  -  -  			exx
   22 00:0407 EB -  -  -  			ex 		de,hl
   23 00:0408 D9 -  -  -  			exx
   24 00:0409 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:040A 41 -  -  -  			ld 		b,c
   26 00:040B 4F -  -  -  			ld 		c,a
   27 00:040C C9 -  -  -  			ret
   28 00:040D -  -  -  -  
   29 00:040D -  -  -  -  ; ***************************************************************************************
   30 00:040D -  -  -  -  ;
   31 00:040D -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:040D -  -  -  -  ;
   33 00:040D -  -  -  -  ; ***************************************************************************************
   34 00:040D -  -  -  -  
   35 00:040D -  -  -  -  DereferenceBoth:
   36 00:040D CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:040F C4 E6 04 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0413 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0415 C8 -  -  -  			ret 	z
   40 00:0416 CD 05 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:041A CD E6 04 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:041E CD 05 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:0422 C9 -  -  -  			ret
   44 00:0423 -  -  -  -  
   45 00:0423 -  -  -  -  ; ***************************************************************************************
   46 00:0423 -  -  -  -  ;
   47 00:0423 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:0423 -  -  -  -  ;
   49 00:0423 -  -  -  -  ; ***************************************************************************************
   50 00:0423 -  -  -  -  
   51 00:0423 -  -  -  -  NegateHLHL:	
   52 00:0423 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0425 C2 DE 02 00 			jp 		nz,TypeMismatch
   54 00:0429 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:042B C4 E6 04 00 			call 	nz,Dereference 			; if required.
   56 00:042F CD 46 0D 00 			call 	Int32Negate
   57 00:0433 C9 -  -  -  			ret
Listing for file "_build.asm"
   29 00:0434 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0434 -  -  -  -  ; ***************************************************************************************
    2 00:0434 -  -  -  -  ; ***************************************************************************************
    3 00:0434 -  -  -  -  ;
    4 00:0434 -  -  -  -  ;		Name : 		expression.asm
    5 00:0434 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0434 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0434 -  -  -  -  ;		Reviewed :	None
    8 00:0434 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0434 -  -  -  -  ;
   10 00:0434 -  -  -  -  ; ***************************************************************************************
   11 00:0434 -  -  -  -  ; ***************************************************************************************
   12 00:0434 -  -  -  -  
   13 00:0434 -  -  -  -  ; ***************************************************************************************
   14 00:0434 -  -  -  -  ;
   15 00:0434 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0434 -  -  -  -  ;
   17 00:0434 -  -  -  -  ; ***************************************************************************************
   18 00:0434 -  -  -  -  
   19 00:0434 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0434 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0435 -  -  -  -  EvaluateAtPrecedence:
   22 00:0435 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0436 -  -  -  -  		;
   24 00:0436 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0436 -  -  -  -  		;
   26 00:0436 CD 42 05 00 		call 	EvaluateTerm 				; get term
   27 00:043A -  -  -  -  		;
   28 00:043A -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:043A -  -  -  -  		;
   30 00:043A D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:043B -  -  -  -  _EAPLoop:
   32 00:043B DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:043E FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:0440 D8 -  -  -  		ret 	c
   35 00:0441 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:0443 D0 -  -  -  		ret 	nc
   37 00:0444 -  -  -  -  		;
   38 00:0444 -  -  -  -  		; 		Get the precedence.
   39 00:0444 -  -  -  -  		;
   40 00:0444 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0445 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0447 21 40 09 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:044B B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:044C 6F -  -  -  		ld 		l,a
   45 00:044D 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:044E E1 -  -  -  		pop 	hl 							; restore HL
   47 00:044F -  -  -  -  		;
   48 00:044F -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:044F -  -  -  -  		;
   50 00:044F 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:0450 BB -  -  -  		cp 		e
   52 00:0451 D0 -  -  -  		ret 	nc
   53 00:0452 -  -  -  -  
   54 00:0452 -  -  -  -  		;
   55 00:0452 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:0452 -  -  -  -  		;
   57 00:0452 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0453 -  -  -  -  		;
   59 00:0453 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0456 F5 -  -  -  		push 	af
   61 00:0457 -  -  -  -  		;
   62 00:0457 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0458 D9 -  -  -  		exx 								; save HL'
   64 00:0459 E5 -  -  -  		push 	hl
   65 00:045A D9 -  -  -  		exx 								
   66 00:045B E5 -  -  -  		push 	hl 							; save HL
   67 00:045C -  -  -  -  		;
   68 00:045C DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:045E -  -  -  -  		;
   70 00:045E -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:045E -  -  -  -  		;
   72 00:045E 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:045F CD 35 04 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0463 -  -  -  -  		;
   75 00:0463 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0463 -  -  -  -  		;
   77 00:0463 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0464 -  -  -  -  
   79 00:0464 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0465 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0466 D9 -  -  -  		exx
   82 00:0467 EB -  -  -  		ex 		de,hl
   83 00:0468 E1 -  -  -  		pop 	hl
   84 00:0469 D9 -  -  -  		exx
   85 00:046A C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:046B 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:046C -  -  -  -  		;
   88 00:046C -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:046C -  -  -  -  		; 		is in B (type) DE'DE
   90 00:046C -  -  -  -  		;
   91 00:046C F1 -  -  -  		pop 	af 							; get operator in A
   92 00:046D -  -  -  -  		;
   93 00:046D -  -  -  -  		; 		Call the binary operator in A.
   94 00:046D -  -  -  -  		;
   95 00:046D D5 -  -  -  		push 	de
   96 00:046E E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:046F E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 0A 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0484 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0485 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0486 CD 58 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:048A -  -  -  -  		;
  102 00:048A D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:048B -  -  -  -  		;
  104 00:048B 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:048D -  -  -  -  
  106 00:048D -  -  -  -  ; ***************************************************************************************
  107 00:048D -  -  -  -  ;
  108 00:048D -  -  -  -  ;									Changes and Updates
  109 00:048D -  -  -  -  ;
  110 00:048D -  -  -  -  ; ***************************************************************************************
  111 00:048D -  -  -  -  ;
  112 00:048D -  -  -  -  ;		Date			Notes
  113 00:048D -  -  -  -  ;		==== 			=====
  114 00:048D -  -  -  -  ;
  115 00:048D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:048D -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:048D -  -  -  -  ; ***************************************************************************************
    2 00:048D -  -  -  -  ; ***************************************************************************************
    3 00:048D -  -  -  -  ;
    4 00:048D -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:048D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:048D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:048D -  -  -  -  ;		Reviewed :	No
    8 00:048D -  -  -  -  ;		Purpose :	Expression support functions
    9 00:048D -  -  -  -  ;
   10 00:048D -  -  -  -  ; ***************************************************************************************
   11 00:048D -  -  -  -  ; ***************************************************************************************
   12 00:048D -  -  -  -  
   13 00:048D -  -  -  -  ; ***************************************************************************************
   14 00:048D -  -  -  -  ;
   15 00:048D -  -  -  -  ; 								Evaluate an integer term
   16 00:048D -  -  -  -  ;
   17 00:048D -  -  -  -  ; ***************************************************************************************
   18 00:048D -  -  -  -  
   19 00:048D -  -  -  -  EvaluateIntegerTerm:
   20 00:048D CD 42 05 00 		call 	EvaluateTerm
   21 00:0491 CD E6 04 00 		call 	DeReference
   22 00:0495 CB 41 -  -  		bit 	CIsString,c
   23 00:0497 C8 -  -  -  		ret 	z
   24 00:0498 C3 DE 02 00 		jp 		TypeMismatch
   25 00:049C -  -  -  -  
   26 00:049C -  -  -  -  ; ***************************************************************************************
   27 00:049C -  -  -  -  ;
   28 00:049C -  -  -  -  ; 								Evaluate a string term
   29 00:049C -  -  -  -  ;
   30 00:049C -  -  -  -  ; ***************************************************************************************
   31 00:049C -  -  -  -  
   32 00:049C -  -  -  -  EvaluateStringTerm:
   33 00:049C CD 42 05 00 		call 	EvaluateTerm
   34 00:04A0 CD E6 04 00 		call 	DeReference
   35 00:04A4 CB 41 -  -  		bit 	CIsString,c
   36 00:04A6 C0 -  -  -  		ret 	nz
   37 00:04A7 C3 DE 02 00 		jp 		TypeMismatch
   38 00:04AB -  -  -  -  
   39 00:04AB -  -  -  -  ; ***************************************************************************************
   40 00:04AB -  -  -  -  ;
   41 00:04AB -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:04AB -  -  -  -  ;
   43 00:04AB -  -  -  -  ; ***************************************************************************************
   44 00:04AB -  -  -  -  
   45 00:04AB -  -  -  -  EvaluateValue:
   46 00:04AB CD 34 04 00 		call 	EvaluateAtPrecedence0
   47 00:04AF C3 E6 04 00 		jp 		Dereference
   48 00:04B3 -  -  -  -  
   49 00:04B3 -  -  -  -  ; ***************************************************************************************
   50 00:04B3 -  -  -  -  ;
   51 00:04B3 -  -  -  -  ; 									Evaluate a number
   52 00:04B3 -  -  -  -  ;
   53 00:04B3 -  -  -  -  ; ***************************************************************************************
   54 00:04B3 -  -  -  -  
   55 00:04B3 -  -  -  -  EvaluateInteger:
   56 00:04B3 CD AB 04 00 		call 	EvaluateValue
   57 00:04B7 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:04B9 C8 -  -  -  		ret 	z
   59 00:04BA C3 DE 02 00 		jp 		TypeMismatch
   60 00:04BE -  -  -  -  
   61 00:04BE -  -  -  -  ; ***************************************************************************************
   62 00:04BE -  -  -  -  ;
   63 00:04BE -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:04BE -  -  -  -  ;
   65 00:04BE -  -  -  -  ; ***************************************************************************************
   66 00:04BE -  -  -  -  
   67 00:04BE -  -  -  -  Evaluate8BitInteger:
   68 00:04BE CD B3 04 00 		call 	EvaluateInteger
   69 00:04C2 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:04C3 7C -  -  -  		ld 		a,h
   71 00:04C4 B5 -  -  -  		or 		l
   72 00:04C5 D9 -  -  -  		exx 	
   73 00:04C6 B4 -  -  -  		or 		h
   74 00:04C7 C2 E4 02 00 		jp 		nz,BadValue
   75 00:04CB 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:04CC C9 -  -  -  		ret
   77 00:04CD -  -  -  -  		
   78 00:04CD -  -  -  -  ; ***************************************************************************************
   79 00:04CD -  -  -  -  ;
   80 00:04CD -  -  -  -  ; 									Evaluate a string
   81 00:04CD -  -  -  -  ;
   82 00:04CD -  -  -  -  ; ***************************************************************************************
   83 00:04CD -  -  -  -  
   84 00:04CD -  -  -  -  EvaluateStringOnly:
   85 00:04CD CD AB 04 00 		call 	EvaluateValue
   86 00:04D1 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:04D3 CA DE 02 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:04D7 C9 -  -  -  		ret
   89 00:04D8 -  -  -  -  
   90 00:04D8 -  -  -  -  ; ***************************************************************************************
   91 00:04D8 -  -  -  -  ;
   92 00:04D8 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:04D8 -  -  -  -  ;
   94 00:04D8 -  -  -  -  ; ***************************************************************************************
   95 00:04D8 -  -  -  -  
   96 00:04D8 -  -  -  -  Return8BitConstant:
   97 00:04D8 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:04DC 6F -  -  -  		ld 		l,a
   99 00:04DD -  -  -  -  Return16BitConstant:
  100 00:04DD D9 -  -  -  		exx 								; clear HL'
  101 00:04DE 21 00 00 00 		ld 		hl,0
  102 00:04E2 D9 -  -  -  		exx
  103 00:04E3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:04E5 C9 -  -  -  		ret
  105 00:04E6 -  -  -  -  
  106 00:04E6 -  -  -  -  ; ***************************************************************************************
  107 00:04E6 -  -  -  -  ;
  108 00:04E6 -  -  -  -  ;									Changes and Updates
  109 00:04E6 -  -  -  -  ;
  110 00:04E6 -  -  -  -  ; ***************************************************************************************
  111 00:04E6 -  -  -  -  ;
  112 00:04E6 -  -  -  -  ;		Date			Notes
  113 00:04E6 -  -  -  -  ;		==== 			=====
  114 00:04E6 -  -  -  -  ;
  115 00:04E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:04E6 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:04E6 -  -  -  -  ; ***************************************************************************************
    2 00:04E6 -  -  -  -  ; ***************************************************************************************
    3 00:04E6 -  -  -  -  ;
    4 00:04E6 -  -  -  -  ;		Name : 		reference.asm
    5 00:04E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04E6 -  -  -  -  ;		Date : 		1st May 2022
    7 00:04E6 -  -  -  -  ;		Reviewed :	No
    8 00:04E6 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:04E6 -  -  -  -  ;
   10 00:04E6 -  -  -  -  ; ***************************************************************************************
   11 00:04E6 -  -  -  -  ; ***************************************************************************************
   12 00:04E6 -  -  -  -  
   13 00:04E6 -  -  -  -  ; ***************************************************************************************
   14 00:04E6 -  -  -  -  ;
   15 00:04E6 -  -  -  -  ; 									Dereference HL'HL C
   16 00:04E6 -  -  -  -  ;
   17 00:04E6 -  -  -  -  ; ***************************************************************************************
   18 00:04E6 -  -  -  -  
   19 00:04E6 -  -  -  -  Dereference:
   20 00:04E6 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:04E8 C8 -  -  -  		ret 	z
   22 00:04E9 -  -  -  -  
   23 00:04E9 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:04EB -  -  -  -  		
   25 00:04EB CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:04ED 20 1E -  -  		jr 		nz,_DRInternal
   27 00:04EF -  -  -  -  
   28 00:04EF CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:04F1 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:04F3 -  -  -  -  
   31 00:04F3 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:04F4 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:04F6 D9 -  -  -  		exx
   34 00:04F7 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:04F8 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:04F9 23 -  -  -  		inc  	hl
   37 00:04FA ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:04FC D9 -  -  -  		exx 								; fix back
   39 00:04FD C9 -  -  -  		ret
   40 00:04FE -  -  -  -  
   41 00:04FE -  -  -  -  _DeRefByte:		
   42 00:04FE 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:04FF 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:0503 6F -  -  -  		ld	 	l,a
   45 00:0504 D9 -  -  -  		exx
   46 00:0505 21 00 00 00 		ld 		hl,$0000
   47 00:0509 D9 -  -  -  		exx
   48 00:050A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:050C C9 -  -  -  		ret
   50 00:050D -  -  -  -  
   51 00:050D -  -  -  -  _DRInternal:
   52 00:050D 3E 04 C3 80 
              02 00 -  -  		ERR_DISABLED
   53 00:0513 -  -  -  -  
   54 00:0513 -  -  -  -  ; ***************************************************************************************
   55 00:0513 -  -  -  -  ;
   56 00:0513 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:0513 -  -  -  -  ;
   58 00:0513 -  -  -  -  ; ***************************************************************************************
   59 00:0513 -  -  -  -  
   60 00:0513 -  -  -  -  DRConvertHLHLToAddress:
   61 00:0513 -  -  -  -  		#ifdef EZ80
   62 00:0513 22 5E 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0517 D9 -  -  -  		exx
   64 00:0518 22 60 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:051C 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:0520 D9 -  -  -  		exx
   67 00:0521 2A 5E 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0525 -  -  -  -  		#endif
   69 00:0525 C9 -  -  -  		ret
   70 00:0526 -  -  -  -  
   71 00:0526 -  -  -  -  ; ***************************************************************************************
   72 00:0526 -  -  -  -  ;
   73 00:0526 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0526 -  -  -  -  ;
   75 00:0526 -  -  -  -  ; ***************************************************************************************
   76 00:0526 -  -  -  -  
   77 00:0526 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0526 -  -  -  -  		#ifdef EZ80
   79 00:0526 22 5E 00 00 		ld 		(AConvert),hl
   80 00:052A 21 00 00 00 		ld 		hl,$0000
   81 00:052E 22 61 00 00 		ld 		(AConvert+3),hl
   82 00:0532 D9 -  -  -  		exx
   83 00:0533 2A 60 00 00 		ld 		hl,(AConvert+2)
   84 00:0537 D9 -  -  -  		exx
   85 00:0538 AF -  -  -  		xor 	a
   86 00:0539 32 60 00 00 		ld 		(AConvert+2),a
   87 00:053D 2A 5E 00 00 		ld 		hl,(AConvert)
   88 00:0541 -  -  -  -  		#endif
   89 00:0541 C9 -  -  -  		ret
   90 00:0542 -  -  -  -  
   91 00:0542 -  -  -  -  ; ***************************************************************************************
   92 00:0542 -  -  -  -  ;
   93 00:0542 -  -  -  -  ;									Changes and Updates
   94 00:0542 -  -  -  -  ;
   95 00:0542 -  -  -  -  ; ***************************************************************************************
   96 00:0542 -  -  -  -  ;
   97 00:0542 -  -  -  -  ;		Date			Notes
   98 00:0542 -  -  -  -  ;		==== 			=====
   99 00:0542 -  -  -  -  ;
  100 00:0542 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:0542 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:0542 -  -  -  -  ; ***************************************************************************************
    2 00:0542 -  -  -  -  ; ***************************************************************************************
    3 00:0542 -  -  -  -  ;
    4 00:0542 -  -  -  -  ;		Name : 		term.asm
    5 00:0542 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0542 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0542 -  -  -  -  ;		Reviewed :	No
    8 00:0542 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:0542 -  -  -  -  ;
   10 00:0542 -  -  -  -  ; ***************************************************************************************
   11 00:0542 -  -  -  -  ; ***************************************************************************************
   12 00:0542 -  -  -  -  
   13 00:0542 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:0542             		add_hlhl_16
   15 00:0542             		exx
   16 00:0542             		adc_hlhl_16
   17 00:0542             		exx
   18 00:0542             #endmacro
   19 00:0542 -  -  -  -  
   20 00:0542 -  -  -  -  ; ***************************************************************************************
   21 00:0542 -  -  -  -  ;
   22 00:0542 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:0542 -  -  -  -  ;
   24 00:0542 -  -  -  -  ; ***************************************************************************************
   25 00:0542 -  -  -  -  ;
   26 00:0542 -  -  -  -  ; 		Terms can be:
   27 00:0542 -  -  -  -  ;
   28 00:0542 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:0542 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:0542 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:0542 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:0542 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:0542 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:0542 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:0542 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:0542 -  -  -  -  ; 														reference of some sort.
   37 00:0542 -  -  -  -  ;
   38 00:0542 -  -  -  -  ; ***************************************************************************************
   39 00:0542 -  -  -  -  
   40 00:0542 -  -  -  -  EvaluateTerm:		
   41 00:0542 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0544 D9 -  -  -  		exx
   43 00:0545 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0549 D9 -  -  -  		exx
   45 00:054A 21 00 00 00 		ld 		hl,$0000		
   46 00:054E -  -  -  -  		;
   47 00:054E DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:0551 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0553 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0555 DA 0D 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0559 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:055B C2 B1 05 00 		jp 		nz,_ETFoundKeyword 
   53 00:055F -  -  -  -  		;
   54 00:055F -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:055F -  -  -  -  		;
   56 00:055F -  -  -  -  _ETIntegerConstant:
   57 00:055F -  -  -  -  		;
   58 00:055F -  -  -  -  _ETIntegerLoop:		
   59 00:055F DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0562 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0564 B5 -  -  -  		or 		l 							; or into L
   62 00:0565 6F -  -  -  		ld 		l,a
   63 00:0566 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0568 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:056B C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:056D FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:056F D8 -  -  -  		ret 	c
   68 00:0570 -  -  -  -  
   69 00:0570 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0577 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:057E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0585 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:058C 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0593 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:059A -  -  -  -  
   76 00:059A 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:059C -  -  -  -  		;
   78 00:059C -  -  -  -  		; 		Found the $3F string marker.
   79 00:059C -  -  -  -  		;
   80 00:059C -  -  -  -  _ETStringMarker:		
   81 00:059C DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:059E DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:05A0 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:05A2 E1 -  -  -  		pop 	hl
   85 00:05A3 11 00 00 00 		ld 		de,$0000
   86 00:05A7 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:05AA DD 19 -  -  		add 	ix,de
   88 00:05AC DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:05AE 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:05B0 C9 -  -  -  		ret
   91 00:05B1 -  -  -  -  		;
   92 00:05B1 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:05B1 -  -  -  -  		;
   94 00:05B1 -  -  -  -  _ETFoundKeyword:
   95 00:05B1 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:05B3 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:05B5 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:05B7 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:05B9 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:05BB -  -  -  -  		;
  101 00:05BB -  -  -  -  		;		Unary group 0
  102 00:05BB -  -  -  -  		;
  103 00:05BB E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 0A 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:05D0 C3 58 00 00 		jp 		JumpCode 					; and go there.
  105 00:05D4 -  -  -  -  
  106 00:05D4 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:05D4 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:05D6 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:05D8 -  -  -  -  		;
  110 00:05D8 -  -  -  -  		; 		- term
  111 00:05D8 -  -  -  -  		;
  112 00:05D8 CD 8D 04 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:05DC CD 23 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:05E0 C9 -  -  -  		ret
  115 00:05E1 -  -  -  -  		;
  116 00:05E1 -  -  -  -  		;		! ? indirection check
  117 00:05E1 -  -  -  -  		;
  118 00:05E1 -  -  -  -  _ETCheckIndirection:	
  119 00:05E1 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:05E3 28 06 -  -  		jr 		z,_ETIndirection
  121 00:05E5 FE 83 -  -  		cp 		KWD_PLING
  122 00:05E7 C2 EA 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:05EB -  -  -  -  		;
  124 00:05EB -  -  -  -  		; 		! ? indirection
  125 00:05EB -  -  -  -  		;
  126 00:05EB -  -  -  -  _ETIndirection:
  127 00:05EB F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:05EC CD 42 05 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:05F0 CD E6 04 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:05F4 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:05F6 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:05F8 CD 13 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:05FC F1 -  -  -  		pop 	af 							; get type back
  134 00:05FD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:05FF CB F9 -  -  		set 	CIsReference,c
  136 00:0601 FE 83 -  -  		cp 		KWD_PLING
  137 00:0603 C8 -  -  -  		ret 	z
  138 00:0604 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0606 C9 -  -  -  		ret
  140 00:0607 -  -  -  -  _ETStringIndirect:
  141 00:0607 3E 02 C3 80 
              02 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:060D -  -  -  -  		;
  143 00:060D -  -  -  -  		; 		Found an identifier.
  144 00:060D -  -  -  -  		;
  145 00:060D -  -  -  -  _ETVariable:
  146 00:060D CD EF 07 00 		call 	FindVariable 				; find the variable.
  147 00:0611 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:0612 3E 0F C3 80 
              02 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:0618 -  -  -  -  		
  150 00:0618 -  -  -  -  ; ***************************************************************************************
  151 00:0618 -  -  -  -  ;
  152 00:0618 -  -  -  -  ;									Changes and Updates
  153 00:0618 -  -  -  -  ;
  154 00:0618 -  -  -  -  ; ***************************************************************************************
  155 00:0618 -  -  -  -  ;
  156 00:0618 -  -  -  -  ;		Date			Notes
  157 00:0618 -  -  -  -  ;		==== 			=====
  158 00:0618 -  -  -  -  ;
  159 00:0618 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:0618 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0618 -  -  -  -  ; ***************************************************************************************
    2 00:0618 -  -  -  -  ; ***************************************************************************************
    3 00:0618 -  -  -  -  ;
    4 00:0618 -  -  -  -  ;		Name : 		abs.asm
    5 00:0618 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0618 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0618 -  -  -  -  ;		Reviewed :	No
    8 00:0618 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0618 -  -  -  -  ;
   10 00:0618 -  -  -  -  ; ***************************************************************************************
   11 00:0618 -  -  -  -  ; ***************************************************************************************
   12 00:0618 -  -  -  -  
   13 00:0618 -  -  -  -  ; ***************************************************************************************
   14 00:0618 -  -  -  -  ;
   15 00:0618 -  -  -  -  ;								abs( unary function
   16 00:0618 -  -  -  -  ;
   17 00:0618 -  -  -  -  ; ***************************************************************************************
   18 00:0618 -  -  -  -  
   19 00:0618 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0618 CD 8D 04 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:061C D9 -  -  -  		exx 								; test MSB
   22 00:061D CB 7C -  -  		bit 	7,h
   23 00:061F D9 -  -  -  		exx
   24 00:0620 C4 23 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0624 C9 -  -  -  		ret
   26 00:0625 -  -  -  -  
   27 00:0625 -  -  -  -  ; ***************************************************************************************
   28 00:0625 -  -  -  -  ;
   29 00:0625 -  -  -  -  ;									Changes and Updates
   30 00:0625 -  -  -  -  ;
   31 00:0625 -  -  -  -  ; ***************************************************************************************
   32 00:0625 -  -  -  -  ;
   33 00:0625 -  -  -  -  ;		Date			Notes
   34 00:0625 -  -  -  -  ;		==== 			=====
   35 00:0625 -  -  -  -  ;
   36 00:0625 -  -  -  -  ; ***************************************************************************************
   37 00:0625 -  -  -  -  		
Listing for file "_build.asm"
   34 00:0625 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0625 -  -  -  -  ; ***************************************************************************************
    2 00:0625 -  -  -  -  ; ***************************************************************************************
    3 00:0625 -  -  -  -  ;
    4 00:0625 -  -  -  -  ;		Name : 		asc.asm
    5 00:0625 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0625 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0625 -  -  -  -  ;		Reviewed :	No
    8 00:0625 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0625 -  -  -  -  ;
   10 00:0625 -  -  -  -  ; ***************************************************************************************
   11 00:0625 -  -  -  -  ; ***************************************************************************************
   12 00:0625 -  -  -  -  
   13 00:0625 -  -  -  -  ; ***************************************************************************************
   14 00:0625 -  -  -  -  ;
   15 00:0625 -  -  -  -  ;								Asc unary function
   16 00:0625 -  -  -  -  ;
   17 00:0625 -  -  -  -  ; ***************************************************************************************
   18 00:0625 -  -  -  -  
   19 00:0625 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0625 CD 9C 04 00 		call	EvaluateStringTerm			; Get string
   21 00:0629 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:062A C3 D8 04 00 		jp 		Return8BitConstant
   23 00:062E -  -  -  -  
   24 00:062E -  -  -  -  ; ***************************************************************************************
   25 00:062E -  -  -  -  ;
   26 00:062E -  -  -  -  ;									Changes and Updates
   27 00:062E -  -  -  -  ;
   28 00:062E -  -  -  -  ; ***************************************************************************************
   29 00:062E -  -  -  -  ;
   30 00:062E -  -  -  -  ;		Date			Notes
   31 00:062E -  -  -  -  ;		==== 			=====
   32 00:062E -  -  -  -  ;
   33 00:062E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:062E -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:062E -  -  -  -  ; ***************************************************************************************
    2 00:062E -  -  -  -  ; ***************************************************************************************
    3 00:062E -  -  -  -  ;
    4 00:062E -  -  -  -  ;		Name : 		chr.asm
    5 00:062E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:062E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:062E -  -  -  -  ;		Reviewed :	No
    8 00:062E -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:062E -  -  -  -  ;
   10 00:062E -  -  -  -  ; ***************************************************************************************
   11 00:062E -  -  -  -  ; ***************************************************************************************
   12 00:062E -  -  -  -  
   13 00:062E -  -  -  -  ; ***************************************************************************************
   14 00:062E -  -  -  -  ;
   15 00:062E -  -  -  -  ;								Chr$() unary function
   16 00:062E -  -  -  -  ;
   17 00:062E -  -  -  -  ; ***************************************************************************************
   18 00:062E -  -  -  -  
   19 00:062E -  -  -  -  Unary_Chr:	;; [chr]
   20 00:062E CD 58 02 00 		call 	CheckDollar
   21 00:0632 CD 8D 04 00 		call 	EvaluateIntegerTerm
   22 00:0636 7D -  -  -  		ld 		a,l 						; get character
   23 00:0637 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0639 21 87 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:063D 36 0D -  -  		ld 		(hl),13
   26 00:063F 2B -  -  -  		dec 	hl
   27 00:0640 77 -  -  -  		ld 		(hl),a
   28 00:0641 C9 -  -  -  		ret
   29 00:0642 -  -  -  -  
   30 00:0642 -  -  -  -  ; ***************************************************************************************
   31 00:0642 -  -  -  -  ;
   32 00:0642 -  -  -  -  ;									Changes and Updates
   33 00:0642 -  -  -  -  ;
   34 00:0642 -  -  -  -  ; ***************************************************************************************
   35 00:0642 -  -  -  -  ;
   36 00:0642 -  -  -  -  ;		Date			Notes
   37 00:0642 -  -  -  -  ;		==== 			=====
   38 00:0642 -  -  -  -  ;
   39 00:0642 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0642 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:0642 -  -  -  -  ; ***************************************************************************************
    2 00:0642 -  -  -  -  ; ***************************************************************************************
    3 00:0642 -  -  -  -  ;
    4 00:0642 -  -  -  -  ;		Name : 		len.asm
    5 00:0642 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0642 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0642 -  -  -  -  ;		Reviewed :	None
    8 00:0642 -  -  -  -  ;		Purpose :	String Length
    9 00:0642 -  -  -  -  ;
   10 00:0642 -  -  -  -  ; ***************************************************************************************
   11 00:0642 -  -  -  -  ; ***************************************************************************************
   12 00:0642 -  -  -  -  
   13 00:0642 -  -  -  -  ; ***************************************************************************************
   14 00:0642 -  -  -  -  ;
   15 00:0642 -  -  -  -  ;								Len unary function
   16 00:0642 -  -  -  -  ;
   17 00:0642 -  -  -  -  ; ***************************************************************************************
   18 00:0642 -  -  -  -  
   19 00:0642 -  -  -  -  Unary_Len:	;; [len]
   20 00:0642 CD 9C 04 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0646 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0647 CD 8B 03 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:064B -  -  -  -  _ULCount:
   24 00:064B 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:064C FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:064E D8 -  -  -  		ret 	c
   27 00:064F 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:0650 13 -  -  -  		inc 	de
   29 00:0651 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:0653 -  -  -  -  
   31 00:0653 -  -  -  -  ; ***************************************************************************************
   32 00:0653 -  -  -  -  ;
   33 00:0653 -  -  -  -  ;									Changes and Updates
   34 00:0653 -  -  -  -  ;
   35 00:0653 -  -  -  -  ; ***************************************************************************************
   36 00:0653 -  -  -  -  ;
   37 00:0653 -  -  -  -  ;		Date			Notes
   38 00:0653 -  -  -  -  ;		==== 			=====
   39 00:0653 -  -  -  -  ;
   40 00:0653 -  -  -  -  ; ***************************************************************************************
   41 00:0653 -  -  -  -  		
Listing for file "_build.asm"
   37 00:0653 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:0653 -  -  -  -  ; ***************************************************************************************
    2 00:0653 -  -  -  -  ; ***************************************************************************************
    3 00:0653 -  -  -  -  ;
    4 00:0653 -  -  -  -  ;		Name : 		makestring.asm
    5 00:0653 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0653 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0653 -  -  -  -  ;		Reviewed :	No
    8 00:0653 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:0653 -  -  -  -  ;
   10 00:0653 -  -  -  -  ; ***************************************************************************************
   11 00:0653 -  -  -  -  ; ***************************************************************************************
   12 00:0653 -  -  -  -  
   13 00:0653 -  -  -  -  ; ***************************************************************************************
   14 00:0653 -  -  -  -  ;
   15 00:0653 -  -  -  -  ;								Str$() unary function
   16 00:0653 -  -  -  -  ;
   17 00:0653 -  -  -  -  ; ***************************************************************************************
   18 00:0653 -  -  -  -  
   19 00:0653 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:0653 CD 8D 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0657 CD 13 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:065B 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:065D C9 -  -  -  		ret
   24 00:065E -  -  -  -  
   25 00:065E -  -  -  -  ; ***************************************************************************************
   26 00:065E -  -  -  -  ;
   27 00:065E -  -  -  -  ;									Changes and Updates
   28 00:065E -  -  -  -  ;
   29 00:065E -  -  -  -  ; ***************************************************************************************
   30 00:065E -  -  -  -  ;
   31 00:065E -  -  -  -  ;		Date			Notes
   32 00:065E -  -  -  -  ;		==== 			=====
   33 00:065E -  -  -  -  ;
   34 00:065E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:065E -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:065E -  -  -  -  ; ***************************************************************************************
    2 00:065E -  -  -  -  ; ***************************************************************************************
    3 00:065E -  -  -  -  ;
    4 00:065E -  -  -  -  ;		Name : 		not.asm
    5 00:065E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:065E -  -  -  -  ;		Date : 		5th June 2023
    7 00:065E -  -  -  -  ;		Reviewed :	No
    8 00:065E -  -  -  -  ;		Purpose :	Logical not
    9 00:065E -  -  -  -  ;
   10 00:065E -  -  -  -  ; ***************************************************************************************
   11 00:065E -  -  -  -  ; ***************************************************************************************
   12 00:065E -  -  -  -  
   13 00:065E -  -  -  -  ; ***************************************************************************************
   14 00:065E -  -  -  -  ;
   15 00:065E -  -  -  -  ;							not(x) e.g. one's complement
   16 00:065E -  -  -  -  ;
   17 00:065E -  -  -  -  ; ***************************************************************************************
   18 00:065E -  -  -  -  
   19 00:065E -  -  -  -  Unary_Not:		;; [not]
   20 00:065E CD 8D 04 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:0662 CD 6B 06 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0666 CD 6B 06 00 		call 	__UNSwap		
   23 00:066A C9 -  -  -  		ret
   24 00:066B -  -  -  -  
   25 00:066B -  -  -  -  __UNSwap:
   26 00:066B 7C -  -  -  		ld 		a,h
   27 00:066C 2F -  -  -  		cpl
   28 00:066D 67 -  -  -  		ld 		h,a
   29 00:066E 7D -  -  -  		ld 		a,l
   30 00:066F 2F -  -  -  		cpl 	
   31 00:0670 6F -  -  -  		ld 		l,a
   32 00:0671 D9 -  -  -  		exx
   33 00:0672 C9 -  -  -  		ret
   34 00:0673 -  -  -  -  
   35 00:0673 -  -  -  -  ; ***************************************************************************************
   36 00:0673 -  -  -  -  ;
   37 00:0673 -  -  -  -  ;									Changes and Updates
   38 00:0673 -  -  -  -  ;
   39 00:0673 -  -  -  -  ; ***************************************************************************************
   40 00:0673 -  -  -  -  ;
   41 00:0673 -  -  -  -  ;		Date			Notes
   42 00:0673 -  -  -  -  ;		==== 			=====
   43 00:0673 -  -  -  -  ;
   44 00:0673 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0673 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0673 -  -  -  -  ; ***************************************************************************************
    2 00:0673 -  -  -  -  ; ***************************************************************************************
    3 00:0673 -  -  -  -  ;
    4 00:0673 -  -  -  -  ;		Name : 		page.asm
    5 00:0673 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0673 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0673 -  -  -  -  ;		Reviewed :	No
    8 00:0673 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0673 -  -  -  -  ;
   10 00:0673 -  -  -  -  ; ***************************************************************************************
   11 00:0673 -  -  -  -  ; ***************************************************************************************
   12 00:0673 -  -  -  -  
   13 00:0673 -  -  -  -  ; ***************************************************************************************
   14 00:0673 -  -  -  -  ;
   15 00:0673 -  -  -  -  ;							page unary function (no bracket)
   16 00:0673 -  -  -  -  ;
   17 00:0673 -  -  -  -  ; ***************************************************************************************
   18 00:0673 -  -  -  -  
   19 00:0673 -  -  -  -  Unary_Page:	;; [page]
   20 00:0673 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0677 D9 -  -  -  			exx
   22 00:0678 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:067C D9 -  -  -  			exx
   24 00:067D 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:067F C9 -  -  -  			ret
   26 00:0680 -  -  -  -  
   27 00:0680 -  -  -  -  ; ***************************************************************************************
   28 00:0680 -  -  -  -  ;
   29 00:0680 -  -  -  -  ;									Changes and Updates
   30 00:0680 -  -  -  -  ;
   31 00:0680 -  -  -  -  ; ***************************************************************************************
   32 00:0680 -  -  -  -  ;
   33 00:0680 -  -  -  -  ;		Date			Notes
   34 00:0680 -  -  -  -  ;		==== 			=====
   35 00:0680 -  -  -  -  ;
   36 00:0680 -  -  -  -  ; ***************************************************************************************
   37 00:0680 -  -  -  -  			
Listing for file "_build.asm"
   40 00:0680 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0680 -  -  -  -  ; ***************************************************************************************
    2 00:0680 -  -  -  -  ; ***************************************************************************************
    3 00:0680 -  -  -  -  ;
    4 00:0680 -  -  -  -  ;		Name : 		random.asm
    5 00:0680 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0680 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0680 -  -  -  -  ;		Reviewed :	No
    8 00:0680 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0680 -  -  -  -  ;
   10 00:0680 -  -  -  -  ; ***************************************************************************************
   11 00:0680 -  -  -  -  ; ***************************************************************************************
   12 00:0680 -  -  -  -  
   13 00:0680 -  -  -  -  ; ***************************************************************************************
   14 00:0680 -  -  -  -  ;
   15 00:0680 -  -  -  -  ;								Random unary function
   16 00:0680 -  -  -  -  ;
   17 00:0680 -  -  -  -  ; ***************************************************************************************
   18 00:0680 -  -  -  -  
   19 00:0680 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0680 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:0688 CD 8D 04 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:068C D9 -  -  -  		exx 								; is it -ve
   23 00:068D CB 7C -  -  		bit 	7,h
   24 00:068F D9 -  -  -  		exx
   25 00:0690 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:0692 22 64 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0696 D9 -  -  -  		exx
   28 00:0697 22 68 00 00 		ld 		(RandomSeed+4),hl
   29 00:069B D9 -  -  -  		exx
   30 00:069C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:069E C9 -  -  -  		ret
   32 00:069F -  -  -  -  _URDontSeed:		
   33 00:069F -  -  -  -  
   34 00:069F CD 15 0D 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:06A3 28 1C -  -  		jr 		z,_URFail
   36 00:06A5 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:06A6 D9 -  -  -  		exx
   38 00:06A7 E5 -  -  -  		push 	hl
   39 00:06A8 D9 -  -  -  		exx
   40 00:06A9 -  -  -  -  		;
   41 00:06A9 CD D2 06 00 		call 	URandomHL 					; get random HL'HL
   42 00:06AD D9 -  -  -  		exx
   43 00:06AE CD D2 06 00 		call 	URandomHL
   44 00:06B2 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:06B4 D9 -  -  -  		exx
   46 00:06B5 -  -  -  -  		;
   47 00:06B5 D9 -  -  -  		exx 								; restore range.
   48 00:06B6 D1 -  -  -  		pop 	de
   49 00:06B7 D9 -  -  -  		exx
   50 00:06B8 D1 -  -  -  		pop 	de
   51 00:06B9 -  -  -  -  		;
   52 00:06B9 CD A6 0B 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:06BD 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:06BE 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:06C0 C9 -  -  -  		ret
   56 00:06C1 -  -  -  -  _URFail:
   57 00:06C1 3E 03 C3 80 
              02 00 -  -  		ERR_BADVALUE
   58 00:06C7 -  -  -  -  ; ***************************************************************************************
   59 00:06C7 -  -  -  -  ;
   60 00:06C7 -  -  -  -  ; 									Push RNG off zero
   61 00:06C7 -  -  -  -  ;
   62 00:06C7 -  -  -  -  ; ***************************************************************************************
   63 00:06C7 -  -  -  -  
   64 00:06C7 -  -  -  -  UnaryRandomInitialise:
   65 00:06C7 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:06C9 -  -  -  -  _URILoop:
   67 00:06C9 C5 -  -  -  		push 	bc
   68 00:06CA CD D2 06 00 		call 	URandomHL
   69 00:06CE C1 -  -  -  		pop 	bc
   70 00:06CF 10 F8 -  -  		djnz 	_URILoop
   71 00:06D1 C9 -  -  -  		ret
   72 00:06D2 -  -  -  -  
   73 00:06D2 -  -  -  -  ; ***************************************************************************************
   74 00:06D2 -  -  -  -  ;
   75 00:06D2 -  -  -  -  ;							16 bit random number generator
   76 00:06D2 -  -  -  -  ;
   77 00:06D2 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:06D2 -  -  -  -  ;		Actual author unspecified.
   79 00:06D2 -  -  -  -  ;
   80 00:06D2 -  -  -  -  ; ***************************************************************************************
   81 00:06D2 -  -  -  -  
   82 00:06D2 -  -  -  -  URandomHL:
   83 00:06D2 2A 64 00 00 	    ld 		hl,(RandomSeed)
   84 00:06D6 ED 5B 68 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:06DB 44 -  -  -  	    ld 		b,h
   86 00:06DC 4D -  -  -  	    ld 		c,l
   87 00:06DD 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:06E2 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:06E7 2C -  -  -  	    inc 	l
   90 00:06E8 09 -  -  -  	    add 	hl,bc
   91 00:06E9 22 64 00 00 	    ld 		(RandomSeed),hl
   92 00:06ED 2A 68 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:06F1 ED 5A -  -  	    adc 	hl,de
   94 00:06F3 22 68 00 00 	    ld 		(RandomSeed+4),hl
   95 00:06F7 EB -  -  -  	    ex 		de,hl
   96 00:06F8 2A 6C 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:06FC ED 4B 70 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:0701 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0706 ED 43 70 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:070B 9F -  -  -  	    sbc 	a,a
  101 00:070C E6 C5 -  -  	    and 	%11000101
  102 00:070E AD -  -  -  	    xor 	l
  103 00:070F 6F -  -  -  	    ld 		l,a
  104 00:0710 22 6C 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0714 EB -  -  -  	    ex 		de,hl
  106 00:0715 09 -  -  -  	    add 	hl,bc
  107 00:0716 C9 -  -  -  	    ret		
  108 00:0717 -  -  -  -  
  109 00:0717 -  -  -  -  ; ***************************************************************************************
  110 00:0717 -  -  -  -  ;
  111 00:0717 -  -  -  -  ;									Changes and Updates
  112 00:0717 -  -  -  -  ;
  113 00:0717 -  -  -  -  ; ***************************************************************************************
  114 00:0717 -  -  -  -  ;
  115 00:0717 -  -  -  -  ;		Date			Notes
  116 00:0717 -  -  -  -  ;		==== 			=====
  117 00:0717 -  -  -  -  ;
  118 00:0717 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:0717 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0717 -  -  -  -  ; ***************************************************************************************
    2 00:0717 -  -  -  -  ; ***************************************************************************************
    3 00:0717 -  -  -  -  ;
    4 00:0717 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0717 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0717 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0717 -  -  -  -  ;		Reviewed :	No
    8 00:0717 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0717 -  -  -  -  ;
   10 00:0717 -  -  -  -  ; ***************************************************************************************
   11 00:0717 -  -  -  -  ; ***************************************************************************************
   12 00:0717 -  -  -  -  
   13 00:0717 -  -  -  -  ; ***************************************************************************************
   14 00:0717 -  -  -  -  ;
   15 00:0717 -  -  -  -  ;								sgn unary function
   16 00:0717 -  -  -  -  ;
   17 00:0717 -  -  -  -  ; ***************************************************************************************
   18 00:0717 -  -  -  -  
   19 00:0717 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0717 CD 8D 04 00 		call	EvaluateIntegerTerm 		; get value
   21 00:071B CD 15 0D 00 		call 	Int32Zero 					; integer sgn() code
   22 00:071F CA 8B 03 00 		jp 		z,UnaryInt32False
   23 00:0723 D9 -  -  -  		exx
   24 00:0724 CB 7C -  -  		bit 	7,h
   25 00:0726 D9 -  -  -  		exx
   26 00:0727 C2 87 03 00 		jp 		nz,UnaryInt32True
   27 00:072B 3E 01 -  -  		ld 		a,1
   28 00:072D C3 D8 04 00 		jp 		Return8BitConstant
   29 00:0731 -  -  -  -  
   30 00:0731 -  -  -  -  ; ***************************************************************************************
   31 00:0731 -  -  -  -  ;
   32 00:0731 -  -  -  -  ;									Changes and Updates
   33 00:0731 -  -  -  -  ;
   34 00:0731 -  -  -  -  ; ***************************************************************************************
   35 00:0731 -  -  -  -  ;
   36 00:0731 -  -  -  -  ;		Date			Notes
   37 00:0731 -  -  -  -  ;		==== 			=====
   38 00:0731 -  -  -  -  ;
   39 00:0731 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:0731 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:0731 -  -  -  -  ; ***************************************************************************************
    2 00:0731 -  -  -  -  ; ***************************************************************************************
    3 00:0731 -  -  -  -  ;
    4 00:0731 -  -  -  -  ;		Name : 		simple.asm
    5 00:0731 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0731 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0731 -  -  -  -  ;		Reviewed :	No
    8 00:0731 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:0731 -  -  -  -  ;
   10 00:0731 -  -  -  -  ; ***************************************************************************************
   11 00:0731 -  -  -  -  ; ***************************************************************************************
   12 00:0731 -  -  -  -  
   13 00:0731 -  -  -  -  ; ***************************************************************************************
   14 00:0731 -  -  -  -  ;
   15 00:0731 -  -  -  -  ;								( unary function (think about it)
   16 00:0731 -  -  -  -  ;
   17 00:0731 -  -  -  -  ; ***************************************************************************************
   18 00:0731 -  -  -  -  
   19 00:0731 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:0731 CD 34 04 00 		call 	EvaluateAtPrecedence0
   21 00:0735 C3 4A 02 00 		jp  	CheckRightBracket
   22 00:0739 -  -  -  -  
   23 00:0739 -  -  -  -  ; ***************************************************************************************
   24 00:0739 -  -  -  -  ;
   25 00:0739 -  -  -  -  ;									Handle &x
   26 00:0739 -  -  -  -  ;
   27 00:0739 -  -  -  -  ; ***************************************************************************************
   28 00:0739 -  -  -  -  
   29 00:0739 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0739 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:073C E6 C0 -  -  		and 		$C0
   32 00:073E FE 40 -  -  		cp 			$40
   33 00:0740 C2 EA 02 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0744 C3 42 05 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0748 -  -  -  -  
   36 00:0748 -  -  -  -  ; ***************************************************************************************
   37 00:0748 -  -  -  -  ;
   38 00:0748 -  -  -  -  ;									Changes and Updates
   39 00:0748 -  -  -  -  ;
   40 00:0748 -  -  -  -  ; ***************************************************************************************
   41 00:0748 -  -  -  -  ;
   42 00:0748 -  -  -  -  ;		Date			Notes
   43 00:0748 -  -  -  -  ;		==== 			=====
   44 00:0748 -  -  -  -  ;
   45 00:0748 -  -  -  -  ; ***************************************************************************************
   46 00:0748 -  -  -  -  		
Listing for file "_build.asm"
   43 00:0748 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0748 -  -  -  -  ; ***************************************************************************************
    2 00:0748 -  -  -  -  ; ***************************************************************************************
    3 00:0748 -  -  -  -  ;
    4 00:0748 -  -  -  -  ;		Name : 		str.asm
    5 00:0748 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0748 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0748 -  -  -  -  ;		Reviewed :	No
    8 00:0748 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0748 -  -  -  -  ;
   10 00:0748 -  -  -  -  ; ***************************************************************************************
   11 00:0748 -  -  -  -  ; ***************************************************************************************
   12 00:0748 -  -  -  -  
   13 00:0748 -  -  -  -  ; ***************************************************************************************
   14 00:0748 -  -  -  -  ;
   15 00:0748 -  -  -  -  ;								Str$() unary function
   16 00:0748 -  -  -  -  ;
   17 00:0748 -  -  -  -  ; ***************************************************************************************
   18 00:0748 -  -  -  -  
   19 00:0748 -  -  -  -  Unary_Str:	;; [str]
   20 00:0748 CD 58 02 00 		call 	CheckDollar
   21 00:074C CD 8D 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:0750 01 76 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:0754 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:0756 CD 5D 0D 00 		call 	Int32ToString 				
   25 00:075A 21 76 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:075E 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:0760 C9 -  -  -  		ret
   28 00:0761 -  -  -  -  
   29 00:0761 -  -  -  -  ; ***************************************************************************************
   30 00:0761 -  -  -  -  ;
   31 00:0761 -  -  -  -  ;									Changes and Updates
   32 00:0761 -  -  -  -  ;
   33 00:0761 -  -  -  -  ; ***************************************************************************************
   34 00:0761 -  -  -  -  ;
   35 00:0761 -  -  -  -  ;		Date			Notes
   36 00:0761 -  -  -  -  ;		==== 			=====
   37 00:0761 -  -  -  -  ;
   38 00:0761 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0761 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:0761 -  -  -  -  ; ***************************************************************************************
    2 00:0761 -  -  -  -  ; ***************************************************************************************
    3 00:0761 -  -  -  -  ;
    4 00:0761 -  -  -  -  ;		Name : 		time.asm
    5 00:0761 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0761 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0761 -  -  -  -  ;		Reviewed :	No
    8 00:0761 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:0761 -  -  -  -  ;
   10 00:0761 -  -  -  -  ; ***************************************************************************************
   11 00:0761 -  -  -  -  ; ***************************************************************************************
   12 00:0761 -  -  -  -  
   13 00:0761 -  -  -  -  ; ***************************************************************************************
   14 00:0761 -  -  -  -  ;
   15 00:0761 -  -  -  -  ;							Get system time in ms
   16 00:0761 -  -  -  -  ;
   17 00:0761 -  -  -  -  ; ***************************************************************************************
   18 00:0761 -  -  -  -  
   19 00:0761 -  -  -  -  Unary_Time:	;; [time]
   20 00:0761 CD AE 0D 00 			call 	SYSGetTimer
   21 00:0765 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0767 C9 -  -  -  			ret
   23 00:0768 -  -  -  -  
   24 00:0768 -  -  -  -  ; ***************************************************************************************
   25 00:0768 -  -  -  -  ;
   26 00:0768 -  -  -  -  ;									Changes and Updates
   27 00:0768 -  -  -  -  ;
   28 00:0768 -  -  -  -  ; ***************************************************************************************
   29 00:0768 -  -  -  -  ;
   30 00:0768 -  -  -  -  ;		Date			Notes
   31 00:0768 -  -  -  -  ;		==== 			=====
   32 00:0768 -  -  -  -  ;
   33 00:0768 -  -  -  -  ; ***************************************************************************************
   34 00:0768 -  -  -  -  			
Listing for file "_build.asm"
   45 00:0768 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0768 -  -  -  -  ; ***************************************************************************************
    2 00:0768 -  -  -  -  ; ***************************************************************************************
    3 00:0768 -  -  -  -  ;
    4 00:0768 -  -  -  -  ;		Name : 		top.asm
    5 00:0768 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0768 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0768 -  -  -  -  ;		Reviewed :	No
    8 00:0768 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0768 -  -  -  -  ;
   10 00:0768 -  -  -  -  ; ***************************************************************************************
   11 00:0768 -  -  -  -  ; ***************************************************************************************
   12 00:0768 -  -  -  -  
   13 00:0768 -  -  -  -  ; ***************************************************************************************
   14 00:0768 -  -  -  -  ;
   15 00:0768 -  -  -  -  ;							page unary function (no bracket)
   16 00:0768 -  -  -  -  ;
   17 00:0768 -  -  -  -  ; ***************************************************************************************
   18 00:0768 -  -  -  -  
   19 00:0768 -  -  -  -  Unary_Top:	;; [top]
   20 00:0768 2A 4C 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:076C D9 -  -  -  			exx
   22 00:076D 2A 4E 00 00 			ld 		hl,(TopMemory+2)
   23 00:0771 D9 -  -  -  			exx
   24 00:0772 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0774 C9 -  -  -  			ret
   26 00:0775 -  -  -  -  
   27 00:0775 -  -  -  -  ; ***************************************************************************************
   28 00:0775 -  -  -  -  ;
   29 00:0775 -  -  -  -  ;									Changes and Updates
   30 00:0775 -  -  -  -  ;
   31 00:0775 -  -  -  -  ; ***************************************************************************************
   32 00:0775 -  -  -  -  ;
   33 00:0775 -  -  -  -  ;		Date			Notes
   34 00:0775 -  -  -  -  ;		==== 			=====
   35 00:0775 -  -  -  -  ;
   36 00:0775 -  -  -  -  ; ***************************************************************************************
   37 00:0775 -  -  -  -  			
Listing for file "_build.asm"
   46 00:0775 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0775 -  -  -  -  ; ***************************************************************************************
    2 00:0775 -  -  -  -  ; ***************************************************************************************
    3 00:0775 -  -  -  -  ;
    4 00:0775 -  -  -  -  ;		Name : 		val.asm
    5 00:0775 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0775 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0775 -  -  -  -  ;		Reviewed :	No
    8 00:0775 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0775 -  -  -  -  ;
   10 00:0775 -  -  -  -  ; ***************************************************************************************
   11 00:0775 -  -  -  -  ; ***************************************************************************************
   12 00:0775 -  -  -  -  
   13 00:0775 -  -  -  -  ; ***************************************************************************************
   14 00:0775 -  -  -  -  ;
   15 00:0775 -  -  -  -  ;								val( unary function
   16 00:0775 -  -  -  -  ;
   17 00:0775 -  -  -  -  ; ***************************************************************************************
   18 00:0775 -  -  -  -  
   19 00:0775 -  -  -  -  Unary_Val:	;; [val]
   20 00:0775 CD 9C 04 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0779 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:077A C1 -  -  -  		pop 	bc
   23 00:077B 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:077D CD 3B 0C 00 		call 	Int32FromString 			; get the integer part.
   25 00:0781 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0783 C8 -  -  -  		ret		z 							; okay
   27 00:0784 3E 03 C3 80 
              02 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:078A -  -  -  -  
   29 00:078A -  -  -  -  ; ***************************************************************************************
   30 00:078A -  -  -  -  ;
   31 00:078A -  -  -  -  ;									Changes and Updates
   32 00:078A -  -  -  -  ;
   33 00:078A -  -  -  -  ; ***************************************************************************************
   34 00:078A -  -  -  -  ;
   35 00:078A -  -  -  -  ;		Date			Notes
   36 00:078A -  -  -  -  ;		==== 			=====
   37 00:078A -  -  -  -  ;
   38 00:078A -  -  -  -  ; ***************************************************************************************
   39 00:078A -  -  -  -  		
Listing for file "_build.asm"
   47 00:078A -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:078A -  -  -  -  ; ***************************************************************************************
    2 00:078A -  -  -  -  ; ***************************************************************************************
    3 00:078A -  -  -  -  ;
    4 00:078A -  -  -  -  ;		Name : 		clear.asm
    5 00:078A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:078A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:078A -  -  -  -  ;		Reviewed :	No
    8 00:078A -  -  -  -  ;		Purpose :	Clear command.
    9 00:078A -  -  -  -  ;
   10 00:078A -  -  -  -  ; ***************************************************************************************
   11 00:078A -  -  -  -  ; ***************************************************************************************
   12 00:078A -  -  -  -  
   13 00:078A -  -  -  -  ; ***************************************************************************************
   14 00:078A -  -  -  -  ;
   15 00:078A -  -  -  -  ;										CLEAR command
   16 00:078A -  -  -  -  ;
   17 00:078A -  -  -  -  ; ***************************************************************************************
   18 00:078A -  -  -  -  
   19 00:078A -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:078A -  -  -  -  		;
   21 00:078A -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:078A -  -  -  -  		;
   23 00:078A 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:078E -  -  -  -  _CCFindLow:
   25 00:078E 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0792 5E -  -  -  		ld 		e,(hl)		
   27 00:0793 19 -  -  -  		add 	hl,de
   28 00:0794 7B -  -  -  		ld 		a,e
   29 00:0795 B7 -  -  -  		or 		a
   30 00:0796 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:0798 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:0799 22 4C 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:079D 23 -  -  -  		inc 	hl 							; one for luck
   34 00:079E 22 48 00 00 		ld 		(LowAllocMemory),hl
   35 00:07A2 -  -  -  -  		;
   36 00:07A2 -  -  -  -  		; 	 		Reset the language stack
   37 00:07A2 -  -  -  -  		;
   38 00:07A2 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:07A6 -  -  -  -  		;
   40 00:07A6 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:07A8 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:07AC 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:07B0 19 -  -  -  		add 	hl,de
   44 00:07B1 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:07B3 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:07B7 -  -  -  -  		;
   47 00:07B7 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:07BB 19 -  -  -  		add 	hl,de
   49 00:07BC 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:07C0 -  -  -  -  		;
   51 00:07C0 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:07C0 -  -  -  -  		;
   53 00:07C0 -  -  -  -  
   54 00:07C0 -  -  -  -  		;
   55 00:07C0 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:07C0 -  -  -  -  		;
   57 00:07C0 CD C7 06 00 		call 	UnaryRandomInitialise
   58 00:07C4 -  -  -  -  		;
   59 00:07C4 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:07C4 -  -  -  -  		;
   61 00:07C4 C9 -  -  -  		ret
   62 00:07C5 -  -  -  -  
   63 00:07C5 -  -  -  -  ; ***************************************************************************************
   64 00:07C5 -  -  -  -  ;
   65 00:07C5 -  -  -  -  ;									Changes and Updates
   66 00:07C5 -  -  -  -  ;
   67 00:07C5 -  -  -  -  ; ***************************************************************************************
   68 00:07C5 -  -  -  -  ;
   69 00:07C5 -  -  -  -  ;		Date			Notes
   70 00:07C5 -  -  -  -  ;		==== 			=====
   71 00:07C5 -  -  -  -  ;
   72 00:07C5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:07C5 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:07C5 -  -  -  -  ; ***************************************************************************************
    2 00:07C5 -  -  -  -  ; ***************************************************************************************
    3 00:07C5 -  -  -  -  ;
    4 00:07C5 -  -  -  -  ;		Name : 		instance.asm
    5 00:07C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07C5 -  -  -  -  ;		Reviewed :	No
    8 00:07C5 -  -  -  -  ;		Purpose :	Instance handling
    9 00:07C5 -  -  -  -  ;
   10 00:07C5 -  -  -  -  ; ***************************************************************************************
   11 00:07C5 -  -  -  -  ; ***************************************************************************************
   12 00:07C5 -  -  -  -  
   13 00:07C5 -  -  -  -  ; ***************************************************************************************
   14 00:07C5 -  -  -  -  ;
   15 00:07C5 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:07C5 -  -  -  -  ;
   17 00:07C5 -  -  -  -  ; ***************************************************************************************
   18 00:07C5 -  -  -  -  
   19 00:07C5 -  -  -  -  SetCurrentInstance:
   20 00:07C5 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:07CA 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:07CE ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:07D3 -  -  -  -  
   24 00:07D3 C9 -  -  -  		ret
   25 00:07D4 -  -  -  -  
   26 00:07D4 -  -  -  -  
   27 00:07D4 -  -  -  -  ; ***************************************************************************************
   28 00:07D4 -  -  -  -  ;
   29 00:07D4 -  -  -  -  ;									Changes and Updates
   30 00:07D4 -  -  -  -  ;
   31 00:07D4 -  -  -  -  ; ***************************************************************************************
   32 00:07D4 -  -  -  -  ;
   33 00:07D4 -  -  -  -  ;		Date			Notes
   34 00:07D4 -  -  -  -  ;		==== 			=====
   35 00:07D4 -  -  -  -  ;
   36 00:07D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:07D4 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:07D4 -  -  -  -  ; ***************************************************************************************
    2 00:07D4 -  -  -  -  ; ***************************************************************************************
    3 00:07D4 -  -  -  -  ;
    4 00:07D4 -  -  -  -  ;		Name : 		new.asm
    5 00:07D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07D4 -  -  -  -  ;		Reviewed :	No
    8 00:07D4 -  -  -  -  ;		Purpose :	New command.
    9 00:07D4 -  -  -  -  ;
   10 00:07D4 -  -  -  -  ; ***************************************************************************************
   11 00:07D4 -  -  -  -  ; ***************************************************************************************
   12 00:07D4 -  -  -  -  
   13 00:07D4 -  -  -  -  ; ***************************************************************************************
   14 00:07D4 -  -  -  -  ;
   15 00:07D4 -  -  -  -  ;										NEW command
   16 00:07D4 -  -  -  -  ;
   17 00:07D4 -  -  -  -  ; ***************************************************************************************
   18 00:07D4 -  -  -  -  
   19 00:07D4 -  -  -  -  Command_NEW: 	;; [new]
   20 00:07D4 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:07D8 36 00 -  -  		ld 		(hl),0
   22 00:07DA CD 8A 07 00 		call 	Command_CLEAR 				; clear all variables
   23 00:07DE 3E 00 C3 80 
              02 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:07E4 -  -  -  -  
   25 00:07E4 -  -  -  -  ; ***************************************************************************************
   26 00:07E4 -  -  -  -  ;
   27 00:07E4 -  -  -  -  ;									Changes and Updates
   28 00:07E4 -  -  -  -  ;
   29 00:07E4 -  -  -  -  ; ***************************************************************************************
   30 00:07E4 -  -  -  -  ;
   31 00:07E4 -  -  -  -  ;		Date			Notes
   32 00:07E4 -  -  -  -  ;		==== 			=====
   33 00:07E4 -  -  -  -  ;
   34 00:07E4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:07E4 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:07E4 -  -  -  -  ; ***************************************************************************************
    2 00:07E4 -  -  -  -  ; ***************************************************************************************
    3 00:07E4 -  -  -  -  ;
    4 00:07E4 -  -  -  -  ;		Name : 		utility.asm
    5 00:07E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07E4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07E4 -  -  -  -  ;		Reviewed :	No
    8 00:07E4 -  -  -  -  ;		Purpose :	Utility routines
    9 00:07E4 -  -  -  -  ;
   10 00:07E4 -  -  -  -  ; ***************************************************************************************
   11 00:07E4 -  -  -  -  ; ***************************************************************************************
   12 00:07E4 -  -  -  -  
   13 00:07E4 -  -  -  -  ; ***************************************************************************************
   14 00:07E4 -  -  -  -  ;
   15 00:07E4 -  -  -  -  ;							Print ASCII string at HL
   16 00:07E4 -  -  -  -  ;
   17 00:07E4 -  -  -  -  ; ***************************************************************************************
   18 00:07E4 -  -  -  -  
   19 00:07E4 -  -  -  -  PrintStringAtHL:
   20 00:07E4 7E -  -  -  		ld 		a,(hl)
   21 00:07E5 FE 20 -  -  		cp 		$20		
   22 00:07E7 D8 -  -  -  		ret 	c
   23 00:07E8 CD AC 0D 00 		call 	SYSPrintChar
   24 00:07EC 23 -  -  -  		inc 	hl
   25 00:07ED 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:07EF -  -  -  -  
   27 00:07EF -  -  -  -  ; ***************************************************************************************
   28 00:07EF -  -  -  -  ;
   29 00:07EF -  -  -  -  ;									Changes and Updates
   30 00:07EF -  -  -  -  ;
   31 00:07EF -  -  -  -  ; ***************************************************************************************
   32 00:07EF -  -  -  -  ;
   33 00:07EF -  -  -  -  ;		Date			Notes
   34 00:07EF -  -  -  -  ;		==== 			=====
   35 00:07EF -  -  -  -  ;
   36 00:07EF -  -  -  -  ; ***************************************************************************************
   37 00:07EF -  -  -  -  		
Listing for file "_build.asm"
   51 00:07EF -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:07EF -  -  -  -  ; ***************************************************************************************
    2 00:07EF -  -  -  -  ; ***************************************************************************************
    3 00:07EF -  -  -  -  ;
    4 00:07EF -  -  -  -  ;		Name : 		find.asm
    5 00:07EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07EF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07EF -  -  -  -  ;		Reviewed :	No
    8 00:07EF -  -  -  -  ;		Purpose :	Find a variable.
    9 00:07EF -  -  -  -  ;
   10 00:07EF -  -  -  -  ; ***************************************************************************************
   11 00:07EF -  -  -  -  ; ***************************************************************************************
   12 00:07EF -  -  -  -  
   13 00:07EF -  -  -  -  ; ***************************************************************************************
   14 00:07EF -  -  -  -  ;
   15 00:07EF -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:07EF -  -  -  -  ; 		variable information at (IX)
   17 00:07EF -  -  -  -  ;
   18 00:07EF -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:07EF -  -  -  -  ;		Don't autocreate arrays.
   20 00:07EF -  -  -  -  ;
   21 00:07EF -  -  -  -  ; ***************************************************************************************
   22 00:07EF -  -  -  -  
   23 00:07EF -  -  -  -  FindVariable:
   24 00:07EF DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:07F2 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:07F4 D2 EA 02 00 		jp 		nc,SyntaxError 		
   27 00:07F8 -  -  -  -  
   28 00:07F8 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:07FB FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:07FD 38 19 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:07FF FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0801 28 15 -  -  		jr 		z,_FVNotSimple
   33 00:0803 -  -  -  -  		;
   34 00:0803 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0803 -  -  -  -  		;
   36 00:0803 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0807 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:080A 87 -  -  -  		add 	a,a 						; x4
   39 00:080B 87 -  -  -  		add 	a,a
   40 00:080C B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:080D 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:080E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0810 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0812 DD 23 -  -  		inc 	ix 							; skip over identifier marker
   45 00:0814 DD 23 -  -  		inc 	ix
   46 00:0816 AF -  -  -  		xor 	a 							; clear carry and return
   47 00:0817 C9 -  -  -  		ret
   48 00:0818 -  -  -  -  		;
   49 00:0818 -  -  -  -  		;		Not a standard simple variable.
   50 00:0818 -  -  -  -  		;
   51 00:0818 -  -  -  -  _FVNotSimple:
   52 00:0818 37 -  -  -  		scf
   53 00:0819 C9 -  -  -  		ret
   54 00:081A -  -  -  -  
   55 00:081A -  -  -  -  ; ***************************************************************************************
   56 00:081A -  -  -  -  ;
   57 00:081A -  -  -  -  ;									Changes and Updates
   58 00:081A -  -  -  -  ;
   59 00:081A -  -  -  -  ; ***************************************************************************************
   60 00:081A -  -  -  -  ;
   61 00:081A -  -  -  -  ;		Date			Notes
   62 00:081A -  -  -  -  ;		==== 			=====
   63 00:081A -  -  -  -  ;
   64 00:081A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:081A -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:081A -  -  -  -  ;
    2 00:081A -  -  -  -  ;	This file is automatically generated.
    3 00:081A -  -  -  -  ;
    4 00:081A -  -  -  -  ;
    5 00:081A -  -  -  -  ;	Keywords for set 0
    6 00:081A -  -  -  -  ;
    7 00:081A -  -  -  -  KeywordsSet0:
    8 00:081A 01 20 -  -  	.db	1," "              ; $0080
    9 00:081C 01 20 -  -  	.db	1," "              ; $0081
   10 00:081E 01 20 -  -  	.db	1," "              ; $0082
   11 00:0820 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:0822 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:0824 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:0826 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:0828 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:082C 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:0830 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:0832 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:0834 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:0837 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:083A 01 3E -  -  	.db	1,">"              ; $008d
   22 00:083C 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:083E 01 3D -  -  	.db	1,"="              ; $008f
   24 00:0840 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:0843 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:0847 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:084A 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:084E 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:0850 01 28 -  -  	.db	1,"("              ; $0095
   30 00:0852 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:0854 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:0858 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:085C 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:0860 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:0864 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:0868 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:086C 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:0870 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:0874 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:0879 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:087E 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:0882 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:0886 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 00:088B 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 00:0891 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:0893 01 2C -  -  	.db	1,","              ; $00a6
   47 00:0895 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:0897 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:0899 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:089B 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 00:08A2 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 00:08A8 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 00:08AB 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 00:08B0 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 00:08B5 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 00:08B9 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 00:08BC 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 00:08C1 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 00:08C6 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 00:08CA 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 00:08CF 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 00:08D7 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 00:08DD 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 00:08E1 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 00:08E5 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 00:08E9 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 00:08ED 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 00:08F3 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 00:08F8 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 00:08FD 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 00:0902 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 00:0906 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 00:090A 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 00:090F 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 00:0914 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 00:091C 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 00:0923 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 00:0929 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 00:092D 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 00:0932 00 -  -  -  	.db	0
   81 00:0933 -  -  -  -  ;
   82 00:0933 -  -  -  -  ;	Keywords for set 1
   83 00:0933 -  -  -  -  ;
   84 00:0933 -  -  -  -  KeywordsSet1:
   85 00:0933 00 -  -  -  	.db	0
   86 00:0934 -  -  -  -  ;
   87 00:0934 -  -  -  -  ;	Keywords for set 2
   88 00:0934 -  -  -  -  ;
   89 00:0934 -  -  -  -  KeywordsSet2:
   90 00:0934 00 -  -  -  	.db	0
Listing for file "_build.asm"
   53 00:0935 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0935 -  -  -  -  ;
    2 00:0935 -  -  -  -  ;	This file is automatically generated.
    3 00:0935 -  -  -  -  ;
    4 00:0935 00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:0940 -  -  -  -  PrecedenceTable:
    6 00:0940 06 -  -  -  	.db	6	; $0083 !
    7 00:0941 06 -  -  -  	.db	6	; $0084 ?
    8 00:0942 05 -  -  -  	.db	5	; $0085 *
    9 00:0943 05 -  -  -  	.db	5	; $0086 /
   10 00:0944 05 -  -  -  	.db	5	; $0087 mod
   11 00:0945 05 -  -  -  	.db	5	; $0088 div
   12 00:0946 04 -  -  -  	.db	4	; $0089 +
   13 00:0947 04 -  -  -  	.db	4	; $008a -
   14 00:0948 03 -  -  -  	.db	3	; $008b >=
   15 00:0949 03 -  -  -  	.db	3	; $008c <=
   16 00:094A 03 -  -  -  	.db	3	; $008d >
   17 00:094B 03 -  -  -  	.db	3	; $008e <
   18 00:094C 03 -  -  -  	.db	3	; $008f =
   19 00:094D 03 -  -  -  	.db	3	; $0090 <>
   20 00:094E 02 -  -  -  	.db	2	; $0091 and
   21 00:094F 01 -  -  -  	.db	1	; $0092 or
   22 00:0950 01 -  -  -  	.db	1	; $0093 eor
   23 00:0951 -  -  -  -  
Listing for file "_build.asm"
   54 00:0951 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0951 -  -  -  -  ;
    2 00:0951 -  -  -  -  ;	This is automatically generated.
    3 00:0951 -  -  -  -  ;
    4 00:0951 -  -  -  -  ErrorIDTable:
    5 00:0951 91 09 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0955 97 09 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0959 A8 09 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:095D B6 09 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0961 C0 09 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0965 DA 09 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0969 EB 09 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:096D F9 09 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0971 07 0A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:0975 11 0A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:0979 26 0A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:097D 3C 0A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:0981 4A 0A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:0985 4F 0A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:0989 5C 0A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:098D 6D 0A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:0991 -  -  -  -  
   22 00:0991 -  -  -  -  ErrText_warmstart:
   23 00:0991 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:0997 -  -  -  -  ErrText_assert:
   25 00:0997 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:09A8 -  -  -  -  ErrText_badtype:
   27 00:09A8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:09B6 -  -  -  -  ErrText_badvalue:
   29 00:09B6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:09C0 -  -  -  -  ErrText_disabled:
   31 00:09C0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:09DA -  -  -  -  ErrText_divzero:
   33 00:09DA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:09EB -  -  -  -  ErrText_memory:
   35 00:09EB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:09F9 -  -  -  -  ErrText_nocomma:
   37 00:09F9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:0A07 -  -  -  -  ErrText_nodollar:
   39 00:0A07 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:0A11 -  -  -  -  ErrText_nolbracket:
   41 00:0A11 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:0A26 -  -  -  -  ErrText_norbracket:
   43 00:0A26 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:0A3C -  -  -  -  ErrText_notref:
   45 00:0A3C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:0A4A -  -  -  -  ErrText_stop:
   47 00:0A4A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:0A4F -  -  -  -  ErrText_syntax:
   49 00:0A4F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:0A5C -  -  -  -  ErrText_todo:
   51 00:0A5C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:0A6D -  -  -  -  ErrText_unknownvar:
   53 00:0A6D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   55 00:0A7E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0A7E -  -  -  -  ;
    2 00:0A7E -  -  -  -  ;	Vectors for set 0
    3 00:0A7E -  -  -  -  ;
    4 00:0A7E -  -  -  -  VectorsSet0:
    5 00:0A7E E4 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0A82 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0A86 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0A8A 60 03 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0A8E 69 03 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0A92 0C 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0A96 1A 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0A9A 28 03 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0A9E 1A 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0AA2 F0 02 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0AA6 FE 02 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0AAA C7 03 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0AAE BD 03 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0AB2 A9 03 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0AB6 9F 03 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0ABA 95 03 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0ABE B3 03 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0AC2 36 03 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0AC6 44 03 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0ACA 52 03 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0ACE 39 07 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0AD2 31 07 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0AD6 53 06 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0ADA 80 06 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0ADE 42 06 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0AE2 18 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0AE6 17 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0AEA 48 07 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0AEE 2E 06 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0AF2 25 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0AF6 5E 06 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0AFA 73 06 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0AFE 61 07 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0B02 68 07 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0B06 75 07 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0B0A 87 03 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0B0E 8B 03 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0B12 D9 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0B16 D9 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0B1A DD 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0B1E D9 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0B22 A6 01 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0B26 24 00 00 00 	addr(Unimplemented)              ; $00aa repeat
   48 00:0B2A 24 00 00 00 	addr(Unimplemented)              ; $00ab until
   49 00:0B2E 24 00 00 00 	addr(Unimplemented)              ; $00ac if
   50 00:0B32 D9 00 00 00 	addr(BadCmd_Then)                ; $00ad then
   51 00:0B36 24 00 00 00 	addr(Unimplemented)              ; $00ae else
   52 00:0B3A 24 00 00 00 	addr(Unimplemented)              ; $00af for
   53 00:0B3E D9 00 00 00 	addr(BadCmd_To)                  ; $00b0 to
   54 00:0B42 24 00 00 00 	addr(Unimplemented)              ; $00b1 step
   55 00:0B46 24 00 00 00 	addr(Unimplemented)              ; $00b2 next
   56 00:0B4A D9 00 00 00 	addr(BadCmd_Defproc)             ; $00b3 def
   57 00:0B4E 24 00 00 00 	addr(Unimplemented)              ; $00b4 proc
   58 00:0B52 24 00 00 00 	addr(Unimplemented)              ; $00b5 endproc
   59 00:0B56 24 00 00 00 	addr(Unimplemented)              ; $00b6 local
   60 00:0B5A 24 00 00 00 	addr(Unimplemented)              ; $00b7 dim
   61 00:0B5E A6 01 00 00 	addr(Command_REM)                ; $00b8 rem
   62 00:0B62 FB 00 00 00 	addr(Command_LET)                ; $00b9 let
   63 00:0B66 24 00 00 00 	addr(Unimplemented)              ; $00ba vdu
   64 00:0B6A 4F 01 00 00 	addr(Command_PRINT)              ; $00bb print
   65 00:0B6E 24 00 00 00 	addr(Unimplemented)              ; $00bc load
   66 00:0B72 24 00 00 00 	addr(Unimplemented)              ; $00bd save
   67 00:0B76 24 00 00 00 	addr(Unimplemented)              ; $00be list
   68 00:0B7A D4 07 00 00 	addr(Command_NEW)                ; $00bf new
   69 00:0B7E C3 01 00 00 	addr(Command_RUN)                ; $00c0 run
   70 00:0B82 24 00 00 00 	addr(Unimplemented)              ; $00c1 read
   71 00:0B86 24 00 00 00 	addr(Unimplemented)              ; $00c2 data
   72 00:0B8A 24 00 00 00 	addr(Unimplemented)              ; $00c3 restore
   73 00:0B8E C8 00 00 00 	addr(Command_ASSERT)             ; $00c4 assert
   74 00:0B92 8A 07 00 00 	addr(Command_CLEAR)              ; $00c5 clear
   75 00:0B96 DE 00 00 00 	addr(Command_END)                ; $00c6 end
   76 00:0B9A 36 02 00 00 	addr(Command_STOP)               ; $00c7 stop
   77 00:0B9E -  -  -  -  ;
   78 00:0B9E -  -  -  -  ;	Vectors for set 1
   79 00:0B9E -  -  -  -  ;
   80 00:0B9E -  -  -  -  VectorsSet1:
   81 00:0B9E -  -  -  -  ;
   82 00:0B9E -  -  -  -  ;	Vectors for set 2
   83 00:0B9E -  -  -  -  ;
   84 00:0B9E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   56 00:0B9E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0B9E -  -  -  -  ; ***************************************************************************************
    2 00:0B9E -  -  -  -  ; ***************************************************************************************
    3 00:0B9E -  -  -  -  ;
    4 00:0B9E -  -  -  -  ;		Name : 		idivide.asm
    5 00:0B9E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B9E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B9E -  -  -  -  ;		Reviewed :	No
    8 00:0B9E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0B9E -  -  -  -  ;
   10 00:0B9E -  -  -  -  ; ***************************************************************************************
   11 00:0B9E -  -  -  -  ; ***************************************************************************************
   12 00:0B9E -  -  -  -  
   13 00:0B9E -  -  -  -  ; ***************************************************************************************
   14 00:0B9E -  -  -  -  ;
   15 00:0B9E -  -  -  -  ;								Unsigned integer divide
   16 00:0B9E -  -  -  -  ;
   17 00:0B9E -  -  -  -  ; ***************************************************************************************
   18 00:0B9E -  -  -  -  
   19 00:0B9E -  -  -  -  Int32UDivide:
   20 00:0B9E 37 -  -  -  		scf
   21 00:0B9F C3 E3 0B 00 		jp 		_I32UnsignedDivide		
   22 00:0BA3 -  -  -  -  
   23 00:0BA3 -  -  -  -  ; ***************************************************************************************
   24 00:0BA3 -  -  -  -  ;
   25 00:0BA3 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0BA3 -  -  -  -  ;
   27 00:0BA3 -  -  -  -  ; ***************************************************************************************
   28 00:0BA3 -  -  -  -  
   29 00:0BA3 -  -  -  -  Int32SDivide:
   30 00:0BA3 37 -  -  -  		scf
   31 00:0BA4 18 01 -  -  		jr 		_I32SDivide
   32 00:0BA6 -  -  -  -  Int32Modulus:
   33 00:0BA6 AF -  -  -  		xor 	a
   34 00:0BA7 -  -  -  -  _I32SDivide:
   35 00:0BA7 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0BA8 F5 -  -  -  		push 	af
   37 00:0BA9 08 -  -  -  		ex 		af,af'
   38 00:0BAA -  -  -  -  
   39 00:0BAA D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0BAB D9 -  -  -  		exx
   41 00:0BAC D5 -  -  -  		push 	de
   42 00:0BAD D9 -  -  -  		exx
   43 00:0BAE -  -  -  -  
   44 00:0BAE F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0BAF AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0BB0 CD D0 0B 00 		call 	_I32CheckHLSignSwap
   47 00:0BB4 CD D0 0B 00 		call 	_I32CheckHLSignSwap
   48 00:0BB8 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0BB9 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0BBA F5 -  -  -  		push 	af
   51 00:0BBB CD E3 0B 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0BBF F1 -  -  -  		pop 	af 							; get function back
   53 00:0BC0 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0BC2 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0BC3 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0BC5 C4 46 0D 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0BC9 -  -  -  -  _I32SDExit:
   58 00:0BC9 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0BCA D1 -  -  -  		pop 	de
   60 00:0BCB D9 -  -  -  		exx
   61 00:0BCC D1 -  -  -  		pop 	de
   62 00:0BCD F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0BCE 08 -  -  -  		ex 		af,af'
   64 00:0BCF C9 -  -  -  		ret
   65 00:0BD0 -  -  -  -  
   66 00:0BD0 -  -  -  -  
   67 00:0BD0 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0BD0 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0BD1 CB 7C -  -  		bit 	7,h
   70 00:0BD3 D9 -  -  -  		exx
   71 00:0BD4 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0BD6 -  -  -  -  		;
   73 00:0BD6 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0BD8 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0BD9 CD 46 0D 00 		call 	Int32Negate 				
   76 00:0BDD F1 -  -  -  		pop 	af
   77 00:0BDE -  -  -  -  _I32CHSPositive:
   78 00:0BDE D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0BDF EB -  -  -  		ex 		de,hl
   80 00:0BE0 D9 -  -  -  		exx		
   81 00:0BE1 EB -  -  -  		ex 		de,hl
   82 00:0BE2 C9 -  -  -  		ret
   83 00:0BE3 -  -  -  -  
   84 00:0BE3 -  -  -  -  ; ***************************************************************************************
   85 00:0BE3 -  -  -  -  ;
   86 00:0BE3 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0BE3 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0BE3 -  -  -  -  ;
   89 00:0BE3 -  -  -  -  ; ***************************************************************************************
   90 00:0BE3 -  -  -  -  
   91 00:0BE3 -  -  -  -  _I32UnsignedDivide:
   92 00:0BE3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0BE4 D5 -  -  -  		push 	de
   94 00:0BE5 D9 -  -  -  		exx
   95 00:0BE6 C5 -  -  -  		push 	bc
   96 00:0BE7 D5 -  -  -  		push 	de 							
   97 00:0BE8 D9 -  -  -  		exx
   98 00:0BE9 -  -  -  -  
   99 00:0BE9 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0BEA -  -  -  -  
  101 00:0BEA 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0BEB B3 -  -  -  		or 		e
  103 00:0BEC D9 -  -  -  		exx
  104 00:0BED B2 -  -  -  		or 		d
  105 00:0BEE B3 -  -  -  		or 		e
  106 00:0BEF D9 -  -  -  		exx
  107 00:0BF0 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0BF4 -  -  -  -  
  109 00:0BF4 -  -  -  -  
  110 00:0BF4 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0BF5 4D -  -  -  		ld		c,l
  112 00:0BF6 21 00 00 00 		ld 		hl,$0000
  113 00:0BFA D9 -  -  -  		exx
  114 00:0BFB 44 -  -  -  		ld 		b,h
  115 00:0BFC 4D -  -  -  		ld		c,l
  116 00:0BFD 21 00 00 00 		ld 		hl,$0000
  117 00:0C01 D9 -  -  -  		exx
  118 00:0C02 -  -  -  -  
  119 00:0C02 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0C04 -  -  -  -  _I32DivideLoop:
  121 00:0C04 F5 -  -  -  		push 	af
  122 00:0C05 -  -  -  -  
  123 00:0C05 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0C07 CB 10 -  -  		rl 		b
  125 00:0C09 D9 -  -  -  		exx
  126 00:0C0A CB 11 -  -  		rl 		c
  127 00:0C0C CB 10 -  -  		rl 		b
  128 00:0C0E D9 -  -  -  		exx
  129 00:0C0F CB 15 -  -  		rl 		l
  130 00:0C11 CB 14 -  -  		rl 		h
  131 00:0C13 D9 -  -  -  		exx
  132 00:0C14 CB 15 -  -  		rl 		l
  133 00:0C16 CB 14 -  -  		rl 		h
  134 00:0C18 D9 -  -  -  		exx
  135 00:0C19 -  -  -  -  
  136 00:0C19 CD E4 0C 00 		call 	Int32Subtract 				; A = A - M
  137 00:0C1D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0C1F -  -  -  -  
  139 00:0C1F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0C20 18 04 -  -  		jr 		_I32Next
  141 00:0C22 -  -  -  -  
  142 00:0C22 -  -  -  -  _I32Borrow:
  143 00:0C22 CD DC 0C 00 		call 	Int32Add 					; A = A + M
  144 00:0C26 -  -  -  -  _I32Next:
  145 00:0C26 F1 -  -  -  		pop 	af
  146 00:0C27 3D -  -  -  		dec 	a
  147 00:0C28 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0C2A -  -  -  -  
  149 00:0C2A F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0C2B -  -  -  -  
  151 00:0C2B 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0C2C 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0C2E -  -  -  -  
  154 00:0C2E 60 -  -  -  		ld  	h,b
  155 00:0C2F 69 -  -  -  		ld 		l,c
  156 00:0C30 D9 -  -  -  		exx
  157 00:0C31 60 -  -  -  		ld  	h,b
  158 00:0C32 69 -  -  -  		ld 		l,c
  159 00:0C33 D9 -  -  -  		exx
  160 00:0C34 -  -  -  -  _I32Modulus1:		
  161 00:0C34 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0C35 D1 -  -  -  		pop 	de
  163 00:0C36 C1 -  -  -  		pop 	bc
  164 00:0C37 D9 -  -  -  		exx
  165 00:0C38 D1 -  -  -  		pop 	de
  166 00:0C39 C1 -  -  -  		pop 	bc
  167 00:0C3A C9 -  -  -  		ret
  168 00:0C3B -  -  -  -  
  169 00:0C3B -  -  -  -  ; ***************************************************************************************
  170 00:0C3B -  -  -  -  ;
  171 00:0C3B -  -  -  -  ;									Changes and Updates
  172 00:0C3B -  -  -  -  ;
  173 00:0C3B -  -  -  -  ; ***************************************************************************************
  174 00:0C3B -  -  -  -  ;
  175 00:0C3B -  -  -  -  ;		Date			Notes
  176 00:0C3B -  -  -  -  ;		==== 			=====
  177 00:0C3B -  -  -  -  ;
  178 00:0C3B -  -  -  -  ; ***************************************************************************************
  179 00:0C3B -  -  -  -  		
Listing for file "_build.asm"
   57 00:0C3B -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0C3B -  -  -  -  ; ***************************************************************************************
    2 00:0C3B -  -  -  -  ; ***************************************************************************************
    3 00:0C3B -  -  -  -  ;
    4 00:0C3B -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0C3B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C3B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C3B -  -  -  -  ;		Reviewed :	No
    8 00:0C3B -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0C3B -  -  -  -  ;
   10 00:0C3B -  -  -  -  ; ***************************************************************************************
   11 00:0C3B -  -  -  -  ; ***************************************************************************************
   12 00:0C3B -  -  -  -  
   13 00:0C3B -  -  -  -  ; ***************************************************************************************
   14 00:0C3B -  -  -  -  ;
   15 00:0C3B -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0C3B -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0C3B -  -  -  -  ;
   18 00:0C3B -  -  -  -  ; ***************************************************************************************
   19 00:0C3B -  -  -  -  
   20 00:0C3B -  -  -  -  Int32FromString:
   21 00:0C3B C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0C3C D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0C3D D5 -  -  -  		push 	de
   24 00:0C3E D9 -  -  -  		exx
   25 00:0C3F D5 -  -  -  		push 	de
   26 00:0C40 -  -  -  -  
   27 00:0C40 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0C44 11 00 00 00 		ld 		de,$0000
   29 00:0C48 D9 -  -  -  		exx
   30 00:0C49 21 00 00 00 		ld 		hl,$0000
   31 00:0C4D 11 00 00 00 		ld 		de,$0000
   32 00:0C51 D9 -  -  -  		exx
   33 00:0C52 -  -  -  -  
   34 00:0C52 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0C53 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0C55 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0C57 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0C59 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0C5A -  -  -  -  		;
   40 00:0C5A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0C5B F5 -  -  -  		push 	af
   42 00:0C5C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0C5E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0C5F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0C61 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0C62 18 01 -  -  		jr 		_I32FSMain
   47 00:0C64 -  -  -  -  _I32FSNotSigned:		
   48 00:0C64 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0C65 -  -  -  -  		;
   50 00:0C65 -  -  -  -  		; 		Main conversion loop.
   51 00:0C65 -  -  -  -  		; 		
   52 00:0C65 -  -  -  -  _I32FSMain:		
   53 00:0C65 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0C66 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0C68 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0C6A D6 20 -  -  		sub 	32
   57 00:0C6C -  -  -  -  _I32FSNotLower:
   58 00:0C6C FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0C6E 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0C70 FE 3A -  -  		cp 		'9'+1
   61 00:0C72 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0C74 FE 41 -  -  		cp 		'A'
   63 00:0C76 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0C78 FE 47 -  -  		cp 		'F'+1
   65 00:0C7A 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0C7C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0C7E -  -  -  -  _I32FSOkay:
   68 00:0C7E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0C80 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0C81 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0C83 03 -  -  -  		inc 	bc 							; consume character
   72 00:0C84 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0C85 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0C86 CD A3 0C 00 		call 	Int32Multiply 				; result *= base
   75 00:0C8A F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0C8B 5F -  -  -  		ld 		e,a
   77 00:0C8C CD DC 0C 00 		call 	Int32Add 					; and add it.
   78 00:0C90 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0C91 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0C93 -  -  -  -  
   81 00:0C93 -  -  -  -  _I32FSExit:
   82 00:0C93 F1 -  -  -  		pop 	af 							; get sign back
   83 00:0C94 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0C96 CC 46 0D 00 		call 	z,Int32Negate
   85 00:0C9A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0C9B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0C9C D9 -  -  -  		exx
   88 00:0C9D D1 -  -  -  		pop 	de
   89 00:0C9E D9 -  -  -  		exx
   90 00:0C9F C1 -  -  -  		pop 	bc
   91 00:0CA0 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0CA2 C9 -  -  -  		ret				
   93 00:0CA3 -  -  -  -  
   94 00:0CA3 -  -  -  -  ; ***************************************************************************************
   95 00:0CA3 -  -  -  -  ;
   96 00:0CA3 -  -  -  -  ;									Changes and Updates
   97 00:0CA3 -  -  -  -  ;
   98 00:0CA3 -  -  -  -  ; ***************************************************************************************
   99 00:0CA3 -  -  -  -  ;
  100 00:0CA3 -  -  -  -  ;		Date			Notes
  101 00:0CA3 -  -  -  -  ;		==== 			=====
  102 00:0CA3 -  -  -  -  ;
  103 00:0CA3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0CA3 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0CA3 -  -  -  -  ; ***************************************************************************************
    2 00:0CA3 -  -  -  -  ; ***************************************************************************************
    3 00:0CA3 -  -  -  -  ;
    4 00:0CA3 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0CA3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CA3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CA3 -  -  -  -  ;		Reviewed :	No
    8 00:0CA3 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0CA3 -  -  -  -  ;
   10 00:0CA3 -  -  -  -  ; ***************************************************************************************
   11 00:0CA3 -  -  -  -  ; ***************************************************************************************
   12 00:0CA3 -  -  -  -  
   13 00:0CA3 -  -  -  -  Int32Multiply:
   14 00:0CA3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0CA4 D5 -  -  -  		push 	de
   16 00:0CA5 44 -  -  -  		ld 		b,h
   17 00:0CA6 4D -  -  -  		ld 		c,l
   18 00:0CA7 21 00 00 00 		ld 		hl,$0000
   19 00:0CAB -  -  -  -  
   20 00:0CAB D9 -  -  -  		exx
   21 00:0CAC C5 -  -  -  		push 	bc
   22 00:0CAD D5 -  -  -  		push 	de
   23 00:0CAE 44 -  -  -  		ld 		b,h
   24 00:0CAF 4D -  -  -  		ld 		c,l
   25 00:0CB0 21 00 00 00 		ld 		hl,$0000		
   26 00:0CB4 D9 -  -  -  		exx
   27 00:0CB5 -  -  -  -  
   28 00:0CB5 -  -  -  -  _I32MultiplyLoop:
   29 00:0CB5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0CB7 C4 DC 0C 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0CBB -  -  -  -  		;
   32 00:0CBB D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0CBC CB 38 -  -  		srl 	b
   34 00:0CBE CB 19 -  -  		rr 		c
   35 00:0CC0 D9 -  -  -  		exx
   36 00:0CC1 CB 18 -  -  		rr 		b
   37 00:0CC3 CB 19 -  -  		rr 		c
   38 00:0CC5 -  -  -  -  		;
   39 00:0CC5 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0CC7 CB 12 -  -  		rl 		d
   41 00:0CC9 D9 -  -  -  		exx
   42 00:0CCA CB 13 -  -  		rl 		e
   43 00:0CCC CB 12 -  -  		rl 		d
   44 00:0CCE -  -  -  -  
   45 00:0CCE 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0CCF B1 -  -  -  		or 		c
   47 00:0CD0 D9 -  -  -  		exx
   48 00:0CD1 B0 -  -  -  		or 		b
   49 00:0CD2 B1 -  -  -  		or 		c
   50 00:0CD3 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0CD5 -  -  -  -  
   52 00:0CD5 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0CD6 D1 -  -  -  		pop 	de
   54 00:0CD7 C1 -  -  -  		pop 	bc
   55 00:0CD8 D9 -  -  -  		exx
   56 00:0CD9 D1 -  -  -  		pop 	de
   57 00:0CDA C1 -  -  -  		pop 	bc
   58 00:0CDB C9 -  -  -  		ret
   59 00:0CDC -  -  -  -  
   60 00:0CDC -  -  -  -  ; ***************************************************************************************
   61 00:0CDC -  -  -  -  ;
   62 00:0CDC -  -  -  -  ;									Changes and Updates
   63 00:0CDC -  -  -  -  ;
   64 00:0CDC -  -  -  -  ; ***************************************************************************************
   65 00:0CDC -  -  -  -  ;
   66 00:0CDC -  -  -  -  ;		Date			Notes
   67 00:0CDC -  -  -  -  ;		==== 			=====
   68 00:0CDC -  -  -  -  ;
   69 00:0CDC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0CDC -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0CDC -  -  -  -  ; ***************************************************************************************
    2 00:0CDC -  -  -  -  ; ***************************************************************************************
    3 00:0CDC -  -  -  -  ;
    4 00:0CDC -  -  -  -  ;		Name : 		isimple.asm
    5 00:0CDC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CDC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CDC -  -  -  -  ;		Reviewed :	No
    8 00:0CDC -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0CDC -  -  -  -  ;
   10 00:0CDC -  -  -  -  ; ***************************************************************************************
   11 00:0CDC -  -  -  -  ; ***************************************************************************************
   12 00:0CDC -  -  -  -  
   13 00:0CDC -  -  -  -  ; ***************************************************************************************
   14 00:0CDC -  -  -  -  ;
   15 00:0CDC -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0CDC -  -  -  -  ;
   17 00:0CDC -  -  -  -  ; ***************************************************************************************
   18 00:0CDC -  -  -  -  
   19 00:0CDC -  -  -  -  Int32Add:
   20 00:0CDC 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0CDE D9 -  -  -  		exx
   22 00:0CDF 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0CE2 D9 -  -  -  		exx
   24 00:0CE3 C9 -  -  -  		ret
   25 00:0CE4 -  -  -  -  
   26 00:0CE4 -  -  -  -  ; ***************************************************************************************
   27 00:0CE4 -  -  -  -  ;
   28 00:0CE4 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0CE4 -  -  -  -  ;
   30 00:0CE4 -  -  -  -  ; ***************************************************************************************
   31 00:0CE4 -  -  -  -  
   32 00:0CE4 -  -  -  -  Int32Subtract:
   33 00:0CE4 AF -  -  -  		xor 	a 							; clear carry
   34 00:0CE5 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0CE8 D9 -  -  -  		exx
   36 00:0CE9 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0CEC D9 -  -  -  		exx
   38 00:0CED C9 -  -  -  		ret
   39 00:0CEE -  -  -  -  
   40 00:0CEE -  -  -  -  ; ***************************************************************************************
   41 00:0CEE -  -  -  -  ;
   42 00:0CEE -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0CEE -  -  -  -  ;
   44 00:0CEE -  -  -  -  ; ***************************************************************************************
   45 00:0CEE -  -  -  -  
   46 00:0CEE -  -  -  -  Int32And:
   47 00:0CEE D9 -  -  -  		exx
   48 00:0CEF CD F4 0C 00 		call 	_I32AndHLDE
   49 00:0CF3 D9 -  -  -  		exx
   50 00:0CF4 -  -  -  -  _I32AndHLDE:		
   51 00:0CF4 7C -  -  -  		ld 		a,h
   52 00:0CF5 A2 -  -  -  		and 	d
   53 00:0CF6 67 -  -  -  		ld 		h,a
   54 00:0CF7 7D -  -  -  		ld 		a,l
   55 00:0CF8 A3 -  -  -  		and 	e
   56 00:0CF9 6F -  -  -  		ld 		l,a
   57 00:0CFA C9 -  -  -  		ret
   58 00:0CFB -  -  -  -  
   59 00:0CFB -  -  -  -  ; ***************************************************************************************
   60 00:0CFB -  -  -  -  ;
   61 00:0CFB -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0CFB -  -  -  -  ;
   63 00:0CFB -  -  -  -  ; ***************************************************************************************
   64 00:0CFB -  -  -  -  
   65 00:0CFB -  -  -  -  Int32Or:
   66 00:0CFB D9 -  -  -  		exx
   67 00:0CFC CD 01 0D 00 		call 	_I32OrHLDE
   68 00:0D00 D9 -  -  -  		exx
   69 00:0D01 -  -  -  -  _I32OrHLDE:		
   70 00:0D01 7C -  -  -  		ld 		a,h
   71 00:0D02 B2 -  -  -  		or 		d
   72 00:0D03 67 -  -  -  		ld 		h,a
   73 00:0D04 7D -  -  -  		ld 		a,l
   74 00:0D05 B3 -  -  -  		or 		e
   75 00:0D06 6F -  -  -  		ld 		l,a
   76 00:0D07 C9 -  -  -  		ret
   77 00:0D08 -  -  -  -  
   78 00:0D08 -  -  -  -  ; ***************************************************************************************
   79 00:0D08 -  -  -  -  ;
   80 00:0D08 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0D08 -  -  -  -  ;
   82 00:0D08 -  -  -  -  ; ***************************************************************************************
   83 00:0D08 -  -  -  -  
   84 00:0D08 -  -  -  -  Int32Xor:
   85 00:0D08 D9 -  -  -  		exx
   86 00:0D09 CD 0E 0D 00 		call 	_I32XorHLDE
   87 00:0D0D D9 -  -  -  		exx
   88 00:0D0E -  -  -  -  _I32XorHLDE:		
   89 00:0D0E 7C -  -  -  		ld 		a,h
   90 00:0D0F AA -  -  -  		xor 	d
   91 00:0D10 67 -  -  -  		ld 		h,a
   92 00:0D11 7D -  -  -  		ld 		a,l
   93 00:0D12 AB -  -  -  		xor 	e
   94 00:0D13 6F -  -  -  		ld 		l,a
   95 00:0D14 C9 -  -  -  		ret
   96 00:0D15 -  -  -  -  
   97 00:0D15 -  -  -  -  ; ***************************************************************************************
   98 00:0D15 -  -  -  -  ;
   99 00:0D15 -  -  -  -  ;								 Check if HL'HL zero
  100 00:0D15 -  -  -  -  ;
  101 00:0D15 -  -  -  -  ; ***************************************************************************************
  102 00:0D15 -  -  -  -  
  103 00:0D15 -  -  -  -  Int32Zero:
  104 00:0D15 D9 -  -  -  		exx
  105 00:0D16 7D -  -  -  		ld 		a,l
  106 00:0D17 B4 -  -  -  		or 		h
  107 00:0D18 D9 -  -  -  		exx
  108 00:0D19 B5 -  -  -  		or 		l
  109 00:0D1A B4 -  -  -  		or 		h
  110 00:0D1B C9 -  -  -  		ret
  111 00:0D1C -  -  -  -  
  112 00:0D1C -  -  -  -  ; ***************************************************************************************
  113 00:0D1C -  -  -  -  ;
  114 00:0D1C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0D1C -  -  -  -  ;
  116 00:0D1C -  -  -  -  ; ***************************************************************************************
  117 00:0D1C -  -  -  -  
  118 00:0D1C -  -  -  -  Int32Compare:
  119 00:0D1C E5 -  -  -  		push 	hl 							; save HL
  120 00:0D1D AF -  -  -  		xor 	a 							; clear carry
  121 00:0D1E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0D21 D9 -  -  -  		exx
  123 00:0D22 E5 -  -  -  		push 	hl 							; save HL'
  124 00:0D23 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0D26 -  -  -  -  		;
  126 00:0D26 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0D27 E2 2F 0D 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0D2B 78 -  -  -  		ld 		a,b
  129 00:0D2C EE 80 -  -  		xor 	$80
  130 00:0D2E 47 -  -  -  		ld 		b,a
  131 00:0D2F -  -  -  -  _I32CNoOverflow:
  132 00:0D2F 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0D30 B5 -  -  -  		or 		l
  134 00:0D31 D9 -  -  -  		exx 
  135 00:0D32 B4 -  -  -  		or 		h
  136 00:0D33 B5 -  -  -  		or 		l
  137 00:0D34 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0D36 -  -  -  -  		;
  139 00:0D36 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0D37 CB 78 -  -  		bit 	7,b
  141 00:0D39 D9 -  -  -  		exx
  142 00:0D3A 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0D3C 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0D3E 3E FF -  -  		ld 		a,$FF
  145 00:0D40 -  -  -  -  _I32NotPos:
  146 00:0D40 D9 -  -  -  		exx
  147 00:0D41 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0D42 D9 -  -  -  		exx
  149 00:0D43 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0D44 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0D45 C9 -  -  -  		ret
  152 00:0D46 -  -  -  -  
  153 00:0D46 -  -  -  -  ; ***************************************************************************************
  154 00:0D46 -  -  -  -  ;
  155 00:0D46 -  -  -  -  ;										Negate HL'HL
  156 00:0D46 -  -  -  -  ;
  157 00:0D46 -  -  -  -  ; ***************************************************************************************
  158 00:0D46 -  -  -  -  
  159 00:0D46 -  -  -  -  Int32Negate:
  160 00:0D46 AF -  -  -  		xor 	a
  161 00:0D47 CD 52 0D 00 		call 	_I32NSubtract
  162 00:0D4B D9 -  -  -  		exx
  163 00:0D4C CD 52 0D 00 		call 	_I32NSubtract
  164 00:0D50 D9 -  -  -  		exx
  165 00:0D51 C9 -  -  -  		ret
  166 00:0D52 -  -  -  -  _I32NSubtract:
  167 00:0D52 D5 -  -  -  		push 	de
  168 00:0D53 EB -  -  -  		ex 		de,hl
  169 00:0D54 21 00 00 00 		ld 		hl,$0000
  170 00:0D58 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0D5B D1 -  -  -  		pop 	de
  172 00:0D5C C9 -  -  -  		ret
  173 00:0D5D -  -  -  -  		
  174 00:0D5D -  -  -  -  ; ***************************************************************************************
  175 00:0D5D -  -  -  -  ;
  176 00:0D5D -  -  -  -  ;									Changes and Updates
  177 00:0D5D -  -  -  -  ;
  178 00:0D5D -  -  -  -  ; ***************************************************************************************
  179 00:0D5D -  -  -  -  ;
  180 00:0D5D -  -  -  -  ;		Date			Notes
  181 00:0D5D -  -  -  -  ;		==== 			=====
  182 00:0D5D -  -  -  -  ;
  183 00:0D5D -  -  -  -  ; ***************************************************************************************
  184 00:0D5D -  -  -  -  		
Listing for file "_build.asm"
   60 00:0D5D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0D5D -  -  -  -  ; ***************************************************************************************
    2 00:0D5D -  -  -  -  ; ***************************************************************************************
    3 00:0D5D -  -  -  -  ;
    4 00:0D5D -  -  -  -  ;		Name : 		itostring.asm
    5 00:0D5D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D5D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D5D -  -  -  -  ;		Reviewed :	No
    8 00:0D5D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0D5D -  -  -  -  ;
   10 00:0D5D -  -  -  -  ; ***************************************************************************************
   11 00:0D5D -  -  -  -  ;
   12 00:0D5D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0D5D -  -  -  -  ;
   14 00:0D5D -  -  -  -  ; ***************************************************************************************
   15 00:0D5D -  -  -  -  
   16 00:0D5D -  -  -  -  Int32ToString:
   17 00:0D5D C5 -  -  -  		push 	bc 							; save string start
   18 00:0D5E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0D5F E5 -  -  -  		push 	hl
   20 00:0D60 11 00 00 00 		ld	 	de,$0000
   21 00:0D64 D9 -  -  -  		exx
   22 00:0D65 D5 -  -  -  		push 	de
   23 00:0D66 E5 -  -  -  		push 	hl
   24 00:0D67 11 00 00 00 		ld 		de,$000
   25 00:0D6B D9 -  -  -  		exx
   26 00:0D6C 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0D6D -  -  -  -  		;
   28 00:0D6D CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0D6F 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0D71 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0D73 5F -  -  -  		ld 		e,a
   32 00:0D74 -  -  -  -  		;
   33 00:0D74 D9 -  -  -  		exx 								; is it -ve ?
   34 00:0D75 CB 7C -  -  		bit 	7,h
   35 00:0D77 D9 -  -  -  		exx
   36 00:0D78 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0D7A -  -  -  -  		;
   38 00:0D7A CD 46 0D 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0D7E -  -  -  -  		;
   40 00:0D7E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0D80 02 -  -  -  		ld 		(bc),a
   42 00:0D81 03 -  -  -  		inc 	bc
   43 00:0D82 -  -  -  -  _I32TSNotNegative:	
   44 00:0D82 CD 91 0D 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0D86 -  -  -  -  _I32TSExit:
   46 00:0D86 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0D88 02 -  -  -  		ld 		(bc),a 
   48 00:0D89 -  -  -  -  
   49 00:0D89 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0D8A E1 -  -  -  		pop 	hl
   51 00:0D8B D1 -  -  -  		pop 	de
   52 00:0D8C D9 -  -  -  		exx
   53 00:0D8D E1 -  -  -  		pop 	hl
   54 00:0D8E D1 -  -  -  		pop 	de
   55 00:0D8F C1 -  -  -  		pop 	bc
   56 00:0D90 C9 -  -  -  		ret
   57 00:0D91 -  -  -  -  
   58 00:0D91 -  -  -  -  _I32RecursiveConvert:
   59 00:0D91 CD 9E 0B 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0D95 F5 -  -  -  		push 	af 							; save remainder
   61 00:0D96 CD 15 0D 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0D9A C4 91 0D 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0D9E F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0D9F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0DA1 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0DA3 C6 07 -  -  		add 	a,7
   67 00:0DA5 -  -  -  -  _I32NotHex:
   68 00:0DA5 C6 30 -  -  		add 	a,48
   69 00:0DA7 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0DA8 03 -  -  -  		inc 	bc
   71 00:0DA9 C9 -  -  -  		ret		
   72 00:0DAA -  -  -  -  
   73 00:0DAA -  -  -  -  ; ***************************************************************************************
   74 00:0DAA -  -  -  -  ;
   75 00:0DAA -  -  -  -  ;									Changes and Updates
   76 00:0DAA -  -  -  -  ;
   77 00:0DAA -  -  -  -  ; ***************************************************************************************
   78 00:0DAA -  -  -  -  ;
   79 00:0DAA -  -  -  -  ;		Date			Notes
   80 00:0DAA -  -  -  -  ;		==== 			=====
   81 00:0DAA -  -  -  -  ;
   82 00:0DAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:0DAA -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0DAA -  -  -  -  ; ***************************************************************************************
    2 00:0DAA -  -  -  -  ; ***************************************************************************************
    3 00:0DAA -  -  -  -  ;
    4 00:0DAA -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0DAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DAA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DAA -  -  -  -  ;		Reviewed :	No
    8 00:0DAA -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0DAA -  -  -  -  ;
   10 00:0DAA -  -  -  -  ; ***************************************************************************************
   11 00:0DAA -  -  -  -  ; ***************************************************************************************
   12 00:0DAA -  -  -  -  
   13 00:0DAA -  -  -  -  #ifdef AQUARIUS
   14 00:0DAA             
   15 00:0DAA             ; ***************************************************************************************
   16 00:0DAA             ;
   17 00:0DAA             ;								Initialise system stuff
   18 00:0DAA             ;
   19 00:0DAA             ; ***************************************************************************************
   20 00:0DAA             
   21 00:0DAA             SYSInitialise:
   22 00:0DAA             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0DAA             	call 	SYSPrintChar
   24 00:0DAA             	ret
   25 00:0DAA             
   26 00:0DAA             ; ***************************************************************************************
   27 00:0DAA             ;
   28 00:0DAA             ;								Terminate system stuff
   29 00:0DAA             ;
   30 00:0DAA             ; ***************************************************************************************
   31 00:0DAA             
   32 00:0DAA             SYSTerminate:
   33 00:0DAA             	jr 		SYSTerminate
   34 00:0DAA             
   35 00:0DAA             ; ***************************************************************************************
   36 00:0DAA             ;
   37 00:0DAA             ;								Print A character
   38 00:0DAA             ;
   39 00:0DAA             ; ***************************************************************************************
   40 00:0DAA             
   41 00:0DAA             SYSPrintChar:
   42 00:0DAA             	push 	af 									; we stack everything including alt registers
   43 00:0DAA             	push 	bc
   44 00:0DAA             	push 	de
   45 00:0DAA             	push 	hl
   46 00:0DAA             	push 	ix
   47 00:0DAA             	push 	iy
   48 00:0DAA             	exx
   49 00:0DAA             	push 	bc
   50 00:0DAA             	push 	de
   51 00:0DAA             	push 	hl
   52 00:0DAA             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0DAA             	pop 	hl
   54 00:0DAA             	pop 	de
   55 00:0DAA             	pop 	bc
   56 00:0DAA             	exx
   57 00:0DAA             	pop 	iy
   58 00:0DAA             	pop 	ix
   59 00:0DAA             	pop 	hl
   60 00:0DAA             	pop 	de
   61 00:0DAA             	pop 	bc
   62 00:0DAA             	pop 	af
   63 00:0DAA             	ret		
   64 00:0DAA             
   65 00:0DAA             ; ***************************************************************************************
   66 00:0DAA             ;
   67 00:0DAA             ;									Print Newline
   68 00:0DAA             ;
   69 00:0DAA             ; ***************************************************************************************
   70 00:0DAA             
   71 00:0DAA             SYSPrintCRLF:
   72 00:0DAA             	push 	af
   73 00:0DAA             	ld 		a,13
   74 00:0DAA             	call 	SYSPrintChar
   75 00:0DAA             	ld 		a,10
   76 00:0DAA             	call 	SYSPrintChar
   77 00:0DAA             	pop 	af
   78 00:0DAA             	ret
   79 00:0DAA             
   80 00:0DAA             ; ***************************************************************************************
   81 00:0DAA             ;
   82 00:0DAA             ;									Get time into HL'HL
   83 00:0DAA             ;
   84 00:0DAA             ; ***************************************************************************************
   85 00:0DAA             
   86 00:0DAA             SYSGetTimer:
   87 00:0DAA              	in 		a,($00)
   88 00:0DAA              	ld 		l,a
   89 00:0DAA              	in 		a,($01)
   90 00:0DAA              	ld 		h,a
   91 00:0DAA              	exx
   92 00:0DAA              	in 		a,($02)
   93 00:0DAA              	ld 		l,a
   94 00:0DAA              	in 		a,($03)
   95 00:0DAA              	ld 		h,a
   96 00:0DAA              	exx
   97 00:0DAA             	ret 	
   98 00:0DAA             	
   99 00:0DAA             #endif
  100 00:0DAA -  -  -  -  
  101 00:0DAA -  -  -  -  ; ***************************************************************************************
  102 00:0DAA -  -  -  -  ;
  103 00:0DAA -  -  -  -  ;									Changes and Updates
  104 00:0DAA -  -  -  -  ;
  105 00:0DAA -  -  -  -  ; ***************************************************************************************
  106 00:0DAA -  -  -  -  ;
  107 00:0DAA -  -  -  -  ;		Date			Notes
  108 00:0DAA -  -  -  -  ;		==== 			=====
  109 00:0DAA -  -  -  -  ;
  110 00:0DAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0DAA -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0DAA -  -  -  -  ; ***************************************************************************************
    2 00:0DAA -  -  -  -  ; ***************************************************************************************
    3 00:0DAA -  -  -  -  ;
    4 00:0DAA -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0DAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DAA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DAA -  -  -  -  ;		Reviewed :	No
    8 00:0DAA -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0DAA -  -  -  -  ;
   10 00:0DAA -  -  -  -  ; ***************************************************************************************
   11 00:0DAA -  -  -  -  ; ***************************************************************************************
   12 00:0DAA -  -  -  -  
   13 00:0DAA -  -  -  -  #ifdef CLEANEZ80
   14 00:0DAA -  -  -  -  
   15 00:0DAA -  -  -  -  ; ***************************************************************************************
   16 00:0DAA -  -  -  -  ;
   17 00:0DAA -  -  -  -  ;								Initialise system stuff
   18 00:0DAA -  -  -  -  ;
   19 00:0DAA -  -  -  -  ; ***************************************************************************************
   20 00:0DAA -  -  -  -  
   21 00:0DAA -  -  -  -  SYSInitialise:
   22 00:0DAA C9 -  -  -  	ret
   23 00:0DAB -  -  -  -  
   24 00:0DAB -  -  -  -  ; ***************************************************************************************
   25 00:0DAB -  -  -  -  ;
   26 00:0DAB -  -  -  -  ;								Terminate system stuff
   27 00:0DAB -  -  -  -  ;
   28 00:0DAB -  -  -  -  ; ***************************************************************************************
   29 00:0DAB -  -  -  -  
   30 00:0DAB -  -  -  -  SYSTerminate:
   31 00:0DAB C9 -  -  -  	ret
   32 00:0DAC -  -  -  -  
   33 00:0DAC -  -  -  -  ; ***************************************************************************************
   34 00:0DAC -  -  -  -  ;
   35 00:0DAC -  -  -  -  ;								Print A character
   36 00:0DAC -  -  -  -  ;
   37 00:0DAC -  -  -  -  ; ***************************************************************************************
   38 00:0DAC -  -  -  -  
   39 00:0DAC -  -  -  -  SYSPrintChar:
   40 00:0DAC C9 -  -  -  	ret		
   41 00:0DAD -  -  -  -  
   42 00:0DAD -  -  -  -  ; ***************************************************************************************
   43 00:0DAD -  -  -  -  ;
   44 00:0DAD -  -  -  -  ;									Print Newline
   45 00:0DAD -  -  -  -  ;
   46 00:0DAD -  -  -  -  ; ***************************************************************************************
   47 00:0DAD -  -  -  -  
   48 00:0DAD -  -  -  -  SYSPrintCRLF:
   49 00:0DAD C9 -  -  -  	ret
   50 00:0DAE -  -  -  -  
   51 00:0DAE -  -  -  -  ; ***************************************************************************************
   52 00:0DAE -  -  -  -  ;
   53 00:0DAE -  -  -  -  ;									Get time into HL'HL
   54 00:0DAE -  -  -  -  ;
   55 00:0DAE -  -  -  -  ; ***************************************************************************************
   56 00:0DAE -  -  -  -  
   57 00:0DAE -  -  -  -  SYSGetTimer:
   58 00:0DAE C9 -  -  -  	ret
   59 00:0DAF -  -  -  -  
   60 00:0DAF -  -  -  -  #endif
   61 00:0DAF -  -  -  -  
   62 00:0DAF -  -  -  -  ; ***************************************************************************************
   63 00:0DAF -  -  -  -  ;
   64 00:0DAF -  -  -  -  ;									Changes and Updates
   65 00:0DAF -  -  -  -  ;
   66 00:0DAF -  -  -  -  ; ***************************************************************************************
   67 00:0DAF -  -  -  -  ;
   68 00:0DAF -  -  -  -  ;		Date			Notes
   69 00:0DAF -  -  -  -  ;		==== 			=====
   70 00:0DAF -  -  -  -  ;
   71 00:0DAF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0DAF -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0DAF -  -  -  -  ; ***************************************************************************************
    2 00:0DAF -  -  -  -  ; ***************************************************************************************
    3 00:0DAF -  -  -  -  ;
    4 00:0DAF -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0DAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DAF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DAF -  -  -  -  ;		Reviewed :	No
    8 00:0DAF -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0DAF -  -  -  -  ;
   10 00:0DAF -  -  -  -  ; ***************************************************************************************
   11 00:0DAF -  -  -  -  ; ***************************************************************************************
   12 00:0DAF -  -  -  -  
   13 00:0DAF -  -  -  -  #ifdef TI84
   14 00:0DAF             
   15 00:0DAF             ; ***************************************************************************************
   16 00:0DAF             ;
   17 00:0DAF             ;								Initialise system stuff
   18 00:0DAF             ;
   19 00:0DAF             ; ***************************************************************************************
   20 00:0DAF             
   21 00:0DAF             SYSInitialise:
   22 00:0DAF             	di
   23 00:0DAF             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0DAF             	ld 		(_IYTemp84),iy
   25 00:0DAF             	ret
   26 00:0DAF             
   27 00:0DAF             ; ***************************************************************************************
   28 00:0DAF             ;
   29 00:0DAF             ;								Terminate system stuff
   30 00:0DAF             ;
   31 00:0DAF             ; ***************************************************************************************
   32 00:0DAF             
   33 00:0DAF             SYSTerminate:
   34 00:0DAF             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0DAF             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0DAF             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0DAF             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0DAF             	ei
   39 00:0DAF             	ret 										; and exit.
   40 00:0DAF             
   41 00:0DAF             _StackTemp84:									; temp var for TI84 only.
   42 00:0DAF             	.dw 	0,0
   43 00:0DAF             _IYTemp84:
   44 00:0DAF             	.dw 	0,0		
   45 00:0DAF             
   46 00:0DAF             ; ***************************************************************************************
   47 00:0DAF             ;
   48 00:0DAF             ;								Print A character
   49 00:0DAF             ;
   50 00:0DAF             ; ***************************************************************************************
   51 00:0DAF             
   52 00:0DAF             SYSPrintChar:
   53 00:0DAF             	push 	af 									; we stack everything including alt registers
   54 00:0DAF             	push 	bc
   55 00:0DAF             	push 	de
   56 00:0DAF             	push 	hl
   57 00:0DAF             	push 	ix
   58 00:0DAF             	push 	iy
   59 00:0DAF             	exx
   60 00:0DAF             	push 	bc
   61 00:0DAF             	push 	de
   62 00:0DAF             	push 	hl
   63 00:0DAF             
   64 00:0DAF             	ld 		iy,(_IYTemp84)
   65 00:0DAF             	call 	_PutC 								; print A as character
   66 00:0DAF             	di
   67 00:0DAF             	ld 		(_IYTemp84),iy
   68 00:0DAF             
   69 00:0DAF             	pop 	hl
   70 00:0DAF             	pop 	de
   71 00:0DAF             	pop 	bc
   72 00:0DAF             	exx
   73 00:0DAF             	pop 	iy
   74 00:0DAF             	pop 	ix
   75 00:0DAF             	pop 	hl
   76 00:0DAF             	pop 	de
   77 00:0DAF             	pop 	bc
   78 00:0DAF             	pop 	af
   79 00:0DAF             	ret		
   80 00:0DAF             
   81 00:0DAF             ; ***************************************************************************************
   82 00:0DAF             ;
   83 00:0DAF             ;									Print Newline
   84 00:0DAF             ;
   85 00:0DAF             ; ***************************************************************************************
   86 00:0DAF             
   87 00:0DAF             SYSPrintCRLF:
   88 00:0DAF             	push 	af 									; we stack everything including alt registers
   89 00:0DAF             	push 	bc
   90 00:0DAF             	push 	de
   91 00:0DAF             	push 	hl
   92 00:0DAF             	push 	ix
   93 00:0DAF             	push 	iy
   94 00:0DAF             	exx
   95 00:0DAF             	push 	bc
   96 00:0DAF             	push 	de
   97 00:0DAF             	push 	hl
   98 00:0DAF             
   99 00:0DAF             	ld 		iy,(_IYTemp84)
  100 00:0DAF             	call 	_newline
  101 00:0DAF             	di
  102 00:0DAF             	ld 		(_IYTemp84),iy
  103 00:0DAF             
  104 00:0DAF             	pop 	hl
  105 00:0DAF             	pop 	de
  106 00:0DAF             	pop 	bc
  107 00:0DAF             	exx
  108 00:0DAF             	pop 	iy
  109 00:0DAF             	pop 	ix
  110 00:0DAF             	pop 	hl
  111 00:0DAF             	pop 	de
  112 00:0DAF             	pop 	bc
  113 00:0DAF             	pop 	af
  114 00:0DAF             	ret
  115 00:0DAF             
  116 00:0DAF             ; ***************************************************************************************
  117 00:0DAF             ;
  118 00:0DAF             ;									Get time into HL'HL
  119 00:0DAF             ;
  120 00:0DAF             ; ***************************************************************************************
  121 00:0DAF             
  122 00:0DAF             SYSGetTimer:
  123 00:0DAF             	ld 		hl,$1234
  124 00:0DAF             	exx
  125 00:0DAF             	ld 		hl,$5678
  126 00:0DAF             	exx
  127 00:0DAF             	ret
  128 00:0DAF             
  129 00:0DAF             #endif
  130 00:0DAF -  -  -  -  
  131 00:0DAF -  -  -  -  ; ***************************************************************************************
  132 00:0DAF -  -  -  -  ;
  133 00:0DAF -  -  -  -  ;									Changes and Updates
  134 00:0DAF -  -  -  -  ;
  135 00:0DAF -  -  -  -  ; ***************************************************************************************
  136 00:0DAF -  -  -  -  ;
  137 00:0DAF -  -  -  -  ;		Date			Notes
  138 00:0DAF -  -  -  -  ;		==== 			=====
  139 00:0DAF -  -  -  -  ;
  140 00:0DAF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:0DAF -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0DAF -  -  -  -  ; ***************************************************************************************
    2 00:0DAF -  -  -  -  ; ***************************************************************************************
    3 00:0DAF -  -  -  -  ;
    4 00:0DAF -  -  -  -  ;		Name : 		basic.asm
    5 00:0DAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DAF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DAF -  -  -  -  ;		Reviewed :	No
    8 00:0DAF -  -  -  -  ;		Purpose :	Main program.
    9 00:0DAF -  -  -  -  ;
   10 00:0DAF -  -  -  -  ; ***************************************************************************************
   11 00:0DAF -  -  -  -  ; ***************************************************************************************
   12 00:0DAF -  -  -  -  
   13 00:0DAF 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 21 01 00 B8 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 07 02 00 
              02 8F 4C 80 
              06 03 00 BB 
              02 80 00 -  	.db	$21,$01,$00,$b8,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$07,$02,$00,$02,$8f,$4c,$80,$06,$03,$00,$bb,$02,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:102F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:202F -  -  -  -  EndTestInstance:
   18 00:202F -  -  -  -  		
   19 00:202F -  -  -  -  ; ***************************************************************************************
   20 00:202F -  -  -  -  ;
   21 00:202F -  -  -  -  ;									Changes and Updates
   22 00:202F -  -  -  -  ;
   23 00:202F -  -  -  -  ; ***************************************************************************************
   24 00:202F -  -  -  -  ;
   25 00:202F -  -  -  -  ;		Date			Notes
   26 00:202F -  -  -  -  ;		==== 			=====
   27 00:202F -  -  -  -  ;
   28 00:202F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:202F -  -  -  -  FinalAddress:
