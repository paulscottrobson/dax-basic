    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a4
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_INT                             	$009b ; int
   37 00:0000 -  -  -  -  #define KWD_STR                             	$009c ; str
   38 00:0000 -  -  -  -  #define KWD_CHR                             	$009d ; chr
   39 00:0000 -  -  -  -  #define KWD_ASC                             	$009e ; asc
   40 00:0000 -  -  -  -  #define KWD_NOT                             	$009f ; not
   41 00:0000 -  -  -  -  #define KWD_PAGE                            	$00a0 ; page
   42 00:0000 -  -  -  -  #define KWD_STRING                          	$00a1 ; string
   43 00:0000 -  -  -  -  #define KWD_TIME                            	$00a2 ; time
   44 00:0000 -  -  -  -  #define KWD_TOP                             	$00a3 ; top
   45 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a4 ; )
   46 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a5 ; ,
   47 00:0000 -  -  -  -  #define KWD_COLON                           	$00a6 ; :
   48 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a7 ; ;
   49 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a8 ; '
   50 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a9 ; repeat
   51 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00aa ; until
   52 00:0000 -  -  -  -  #define KWD_IF                              	$00ab ; if
   53 00:0000 -  -  -  -  #define KWD_THEN                            	$00ac ; then
   54 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ad ; else
   55 00:0000 -  -  -  -  #define KWD_FOR                             	$00ae ; for
   56 00:0000 -  -  -  -  #define KWD_TO                              	$00af ; to
   57 00:0000 -  -  -  -  #define KWD_STEP                            	$00b0 ; step
   58 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b1 ; next
   59 00:0000 -  -  -  -  #define KWD_DEF                             	$00b2 ; def
   60 00:0000 -  -  -  -  #define KWD_PROC                            	$00b3 ; proc
   61 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b4 ; endproc
   62 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b5 ; local
   63 00:0000 -  -  -  -  #define KWD_DIM                             	$00b6 ; dim
   64 00:0000 -  -  -  -  #define KWD_REM                             	$00b7 ; rem
   65 00:0000 -  -  -  -  #define KWD_LET                             	$00b8 ; let
   66 00:0000 -  -  -  -  #define KWD_VDU                             	$00b9 ; vdu
   67 00:0000 -  -  -  -  #define KWD_PRINT                           	$00ba ; print
   68 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bb ; load
   69 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bc ; save
   70 00:0000 -  -  -  -  #define KWD_LIST                            	$00bd ; list
   71 00:0000 -  -  -  -  #define KWD_NEW                             	$00be ; new
   72 00:0000 -  -  -  -  #define KWD_RUN                             	$00bf ; run
   73 00:0000 -  -  -  -  #define KWD_READ                            	$00c0 ; read
   74 00:0000 -  -  -  -  #define KWD_DATA                            	$00c1 ; data
   75 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c2 ; restore
   76 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c3 ; assert
   77 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c4 ; clear
   78 00:0000 -  -  -  -  #define KWD_END                             	$00c5 ; end
   79 00:0000 -  -  -  -  #define KWD_STOP                            	$00c6 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD FD 0A 00 		call 	SYSInitialise
   44 00:0004 11 00 0C 00 		ld 		de,TestInstance
   45 00:0008 21 0D 2B 00 		ld 		hl,EndTestInstance
   46 00:000C CD 74 05 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 58 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 04 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD FF 0A 00 		call 	SYSPrintChar
   56 00:0020 CD FE 0A 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 9E 
              01 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 9E 
              01 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  		
   59 00:004C -  -  -  -  TopAddress: 								; first free location after PAGE.
   60 00:004C 00 00 00 00 		.dw 	0,0
   61 00:0050 -  -  -  -  
   62 00:0050 -  -  -  -  ; ***************************************************************************************
   63 00:0050 -  -  -  -  ;
   64 00:0050 -  -  -  -  ;										Run variables
   65 00:0050 -  -  -  -  ;
   66 00:0050 -  -  -  -  ; ***************************************************************************************
   67 00:0050 -  -  -  -  
   68 00:0050 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  		
   71 00:0054 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:0054 00 00 00 00 		.dw 	0,0
   73 00:0058 -  -  -  -  
   74 00:0058 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:0058 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:005E -  -  -  -  
   77 00:005E -  -  -  -  AConvert: 									; used for address conversions.
   78 00:005E 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:0064 -  -  -  -  		
   80 00:0064 -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:0064 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:0074 -  -  -  -  
   83 00:0074 -  -  -  -  s; ***************************************************************************************
   84 00:0074 -  -  -  -  ;
   85 00:0074 -  -  -  -  ;										  Buffers
   86 00:0074 -  -  -  -  ;
   87 00:0074 -  -  -  -  ; ***************************************************************************************
   88 00:0074 -  -  -  -  
   89 00:0074 -  -  -  -  ConvertBuffer:
   90 00:0074 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   91 00:00B4 -  -  -  -  
   92 00:00B4 -  -  -  -  ; ***************************************************************************************
   93 00:00B4 -  -  -  -  ;
   94 00:00B4 -  -  -  -  ;									Changes and Updates
   95 00:00B4 -  -  -  -  ;
   96 00:00B4 -  -  -  -  ; ***************************************************************************************
   97 00:00B4 -  -  -  -  ;
   98 00:00B4 -  -  -  -  ;		Date			Notes
   99 00:00B4 -  -  -  -  ;		==== 			=====
  100 00:00B4 -  -  -  -  ;
  101 00:00B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00B4 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00B4 -  -  -  -  ; ***************************************************************************************
    2 00:00B4 -  -  -  -  ; ***************************************************************************************
    3 00:00B4 -  -  -  -  ;
    4 00:00B4 -  -  -  -  ;		Name : 		assert.asm
    5 00:00B4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00B4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00B4 -  -  -  -  ;		Reviewed :	No
    8 00:00B4 -  -  -  -  ;		Purpose :	Assert command
    9 00:00B4 -  -  -  -  ;
   10 00:00B4 -  -  -  -  ; ***************************************************************************************
   11 00:00B4 -  -  -  -  ; ***************************************************************************************
   12 00:00B4 -  -  -  -  
   13 00:00B4 -  -  -  -  ; ***************************************************************************************
   14 00:00B4 -  -  -  -  ;
   15 00:00B4 -  -  -  -  ;									ASSERT command
   16 00:00B4 -  -  -  -  ;
   17 00:00B4 -  -  -  -  ; ***************************************************************************************
   18 00:00B4 -  -  -  -  
   19 00:00B4 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00B4 CD B3 03 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00B8 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00BE C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00BF 3E 01 C3 9E 
              01 00 -  -  		ERR_ASSERT
   24 00:00C5 -  -  -  -  
   25 00:00C5 -  -  -  -  ; ***************************************************************************************
   26 00:00C5 -  -  -  -  ;
   27 00:00C5 -  -  -  -  ;									Changes and Updates
   28 00:00C5 -  -  -  -  ;
   29 00:00C5 -  -  -  -  ; ***************************************************************************************
   30 00:00C5 -  -  -  -  ;
   31 00:00C5 -  -  -  -  ;		Date			Notes
   32 00:00C5 -  -  -  -  ;		==== 			=====
   33 00:00C5 -  -  -  -  ;
   34 00:00C5 -  -  -  -  ; ***************************************************************************************
   35 00:00C5 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00C5 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00C5 -  -  -  -  ; ***************************************************************************************
    2 00:00C5 -  -  -  -  ; ***************************************************************************************
    3 00:00C5 -  -  -  -  ;
    4 00:00C5 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C5 -  -  -  -  ;		Reviewed :	No
    8 00:00C5 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00C5 -  -  -  -  ;
   10 00:00C5 -  -  -  -  ; ***************************************************************************************
   11 00:00C5 -  -  -  -  ; ***************************************************************************************
   12 00:00C5 -  -  -  -  
   13 00:00C5 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00C5 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00C5 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00C5 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00C5 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00C5 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00C5 C3 08 02 00 		jp 		SyntaxError
   20 00:00C9 -  -  -  -  
   21 00:00C9 -  -  -  -  ; ***************************************************************************************
   22 00:00C9 -  -  -  -  ;
   23 00:00C9 -  -  -  -  ;									Changes and Updates
   24 00:00C9 -  -  -  -  ;
   25 00:00C9 -  -  -  -  ; ***************************************************************************************
   26 00:00C9 -  -  -  -  ;
   27 00:00C9 -  -  -  -  ;		Date			Notes
   28 00:00C9 -  -  -  -  ;		==== 			=====
   29 00:00C9 -  -  -  -  ;
   30 00:00C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00C9 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00C9 -  -  -  -  ; ***************************************************************************************
    2 00:00C9 -  -  -  -  ; ***************************************************************************************
    3 00:00C9 -  -  -  -  ;
    4 00:00C9 -  -  -  -  ;		Name : 		colon.asm
    5 00:00C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C9 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00C9 -  -  -  -  ;		Reviewed :	No
    8 00:00C9 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00C9 -  -  -  -  ;
   10 00:00C9 -  -  -  -  ; ***************************************************************************************
   11 00:00C9 -  -  -  -  ; ***************************************************************************************
   12 00:00C9 -  -  -  -  
   13 00:00C9 -  -  -  -  ; ***************************************************************************************
   14 00:00C9 -  -  -  -  ;
   15 00:00C9 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00C9 -  -  -  -  ;
   17 00:00C9 -  -  -  -  ; ***************************************************************************************
   18 00:00C9 -  -  -  -  
   19 00:00C9 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00C9 C9 -  -  -  		ret
   21 00:00CA -  -  -  -  
   22 00:00CA -  -  -  -  ; ***************************************************************************************
   23 00:00CA -  -  -  -  ;
   24 00:00CA -  -  -  -  ;									Changes and Updates
   25 00:00CA -  -  -  -  ;
   26 00:00CA -  -  -  -  ; ***************************************************************************************
   27 00:00CA -  -  -  -  ;
   28 00:00CA -  -  -  -  ;		Date			Notes
   29 00:00CA -  -  -  -  ;		==== 			=====
   30 00:00CA -  -  -  -  ;
   31 00:00CA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00CA -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00CA -  -  -  -  ; ***************************************************************************************
    2 00:00CA -  -  -  -  ; ***************************************************************************************
    3 00:00CA -  -  -  -  ;
    4 00:00CA -  -  -  -  ;		Name : 		end.asm
    5 00:00CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00CA -  -  -  -  ;		Reviewed :	No
    8 00:00CA -  -  -  -  ;		Purpose :	End command
    9 00:00CA -  -  -  -  ;
   10 00:00CA -  -  -  -  ; ***************************************************************************************
   11 00:00CA -  -  -  -  ; ***************************************************************************************
   12 00:00CA -  -  -  -  
   13 00:00CA -  -  -  -  ; ***************************************************************************************
   14 00:00CA -  -  -  -  ;
   15 00:00CA -  -  -  -  ;										END command
   16 00:00CA -  -  -  -  ;
   17 00:00CA -  -  -  -  ; ***************************************************************************************
   18 00:00CA -  -  -  -  
   19 00:00CA -  -  -  -  Command_END: 	;; [end]
   20 00:00CA 3E 00 C3 9E 
              01 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00D0 -  -  -  -  
   22 00:00D0 -  -  -  -  ; ***************************************************************************************
   23 00:00D0 -  -  -  -  ;
   24 00:00D0 -  -  -  -  ;									Changes and Updates
   25 00:00D0 -  -  -  -  ;
   26 00:00D0 -  -  -  -  ; ***************************************************************************************
   27 00:00D0 -  -  -  -  ;
   28 00:00D0 -  -  -  -  ;		Date			Notes
   29 00:00D0 -  -  -  -  ;		==== 			=====
   30 00:00D0 -  -  -  -  ;
   31 00:00D0 -  -  -  -  ; ***************************************************************************************
   32 00:00D0 -  -  -  -  		
Listing for file "_build.asm"
   17 00:00D0 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00D0 -  -  -  -  ; ***************************************************************************************
    2 00:00D0 -  -  -  -  ; ***************************************************************************************
    3 00:00D0 -  -  -  -  ;
    4 00:00D0 -  -  -  -  ;		Name : 		endofline.asm
    5 00:00D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00D0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00D0 -  -  -  -  ;		Reviewed :	None
    8 00:00D0 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00D0 -  -  -  -  ;
   10 00:00D0 -  -  -  -  ; ***************************************************************************************
   11 00:00D0 -  -  -  -  ; ***************************************************************************************
   12 00:00D0 -  -  -  -  
   13 00:00D0 -  -  -  -  ; ***************************************************************************************
   14 00:00D0 -  -  -  -  ;
   15 00:00D0 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00D0 -  -  -  -  ;
   17 00:00D0 -  -  -  -  ; ***************************************************************************************
   18 00:00D0 -  -  -  -  
   19 00:00D0 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00D0 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00D5 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00D9 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00DC DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00DE -  -  -  -  		;
   25 00:00DE ED 7B 54 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00E3 C3 12 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00E7 -  -  -  -  
   28 00:00E7 -  -  -  -  ; ***************************************************************************************
   29 00:00E7 -  -  -  -  ;
   30 00:00E7 -  -  -  -  ;									Changes and Updates
   31 00:00E7 -  -  -  -  ;
   32 00:00E7 -  -  -  -  ; ***************************************************************************************
   33 00:00E7 -  -  -  -  ;
   34 00:00E7 -  -  -  -  ;		Date			Notes
   35 00:00E7 -  -  -  -  ;		==== 			=====
   36 00:00E7 -  -  -  -  ;
   37 00:00E7 -  -  -  -  ; ***************************************************************************************
   38 00:00E7 -  -  -  -  		
Listing for file "_build.asm"
   18 00:00E7 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:00E7 -  -  -  -  ; ***************************************************************************************
    2 00:00E7 -  -  -  -  ; ***************************************************************************************
    3 00:00E7 -  -  -  -  ;
    4 00:00E7 -  -  -  -  ;		Name : 		rem.asm
    5 00:00E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E7 -  -  -  -  ;		Reviewed :	No
    8 00:00E7 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:00E7 -  -  -  -  ;
   10 00:00E7 -  -  -  -  ; ***************************************************************************************
   11 00:00E7 -  -  -  -  ; ***************************************************************************************
   12 00:00E7 -  -  -  -  
   13 00:00E7 -  -  -  -  ; ***************************************************************************************
   14 00:00E7 -  -  -  -  ;
   15 00:00E7 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:00E7 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:00E7 -  -  -  -  ;
   18 00:00E7 -  -  -  -  ; ***************************************************************************************
   19 00:00E7 -  -  -  -  
   20 00:00E7 -  -  -  -  Command_REM: 	;; [rem]
   21 00:00E7 -  -  -  -  Command_REM2: 	;; [']
   22 00:00E7 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:00EA DD 23 -  -  		inc 	ix
   24 00:00EC FE A6 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:00EE C8 -  -  -  		ret 	z
   26 00:00EF FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:00F1 C8 -  -  -  		ret 	z
   28 00:00F2 FE 3F -  -  		cp 		STRING_MARKER
   29 00:00F4 C2 08 02 00 		jp 		nz,SyntaxError
   30 00:00F8 -  -  -  -  		;		
   31 00:00F8 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:00FC DD 5E 00 -  		ld 		e,(ix+0)
   33 00:00FF 13 -  -  -  		inc 	de 
   34 00:0100 13 -  -  -  		inc 	de
   35 00:0101 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:0103 C9 -  -  -  		ret
   37 00:0104 -  -  -  -  
   38 00:0104 -  -  -  -  ; ***************************************************************************************
   39 00:0104 -  -  -  -  ;
   40 00:0104 -  -  -  -  ;									Changes and Updates
   41 00:0104 -  -  -  -  ;
   42 00:0104 -  -  -  -  ; ***************************************************************************************
   43 00:0104 -  -  -  -  ;
   44 00:0104 -  -  -  -  ;		Date			Notes
   45 00:0104 -  -  -  -  ;		==== 			=====
   46 00:0104 -  -  -  -  ;
   47 00:0104 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:0104 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:0104 -  -  -  -  ; ***************************************************************************************
    2 00:0104 -  -  -  -  ; ***************************************************************************************
    3 00:0104 -  -  -  -  ;
    4 00:0104 -  -  -  -  ;		Name : 		run.asm
    5 00:0104 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0104 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0104 -  -  -  -  ;		Reviewed :	No
    8 00:0104 -  -  -  -  ;		Purpose :	Run command
    9 00:0104 -  -  -  -  ;
   10 00:0104 -  -  -  -  ; ***************************************************************************************
   11 00:0104 -  -  -  -  ; ***************************************************************************************
   12 00:0104 -  -  -  -  
   13 00:0104 -  -  -  -  ; ***************************************************************************************
   14 00:0104 -  -  -  -  ;
   15 00:0104 -  -  -  -  ;										RUN command
   16 00:0104 -  -  -  -  ;
   17 00:0104 -  -  -  -  ; ***************************************************************************************
   18 00:0104 -  -  -  -  
   19 00:0104 -  -  -  -  Command_RUN: 	;; [run]
   20 00:0104 CD 3D 05 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:0108 -  -  -  -  
   22 00:0108 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:010D ED 73 54 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:0112 -  -  -  -  		;
   25 00:0112 -  -  -  -  		; 		New line at IX.
   26 00:0112 -  -  -  -  		;
   27 00:0112 -  -  -  -  CRNewLine:
   28 00:0112 DD 22 50 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:0117 -  -  -  -  		;
   30 00:0117 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:011A B7 -  -  -  		or 		a
   32 00:011B CA CA 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:011F -  -  -  -  		;
   34 00:011F DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:0121 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:0123 DD 23 -  -  		inc 	ix
   37 00:0125 -  -  -  -  		;
   38 00:0125 -  -  -  -  		; 		New command at IX
   39 00:0125 -  -  -  -  		;
   40 00:0125 -  -  -  -  _CRNewCommand:	
   41 00:0125 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:0128 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:0129 F2 60 01 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:012D -  -  -  -  		;
   45 00:012D FE A4 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:012F 30 06 -  -  		jr  	nc,_CRDoCommand
   47 00:0131 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:0133 D2 54 01 00 		jp 		nc,_CRAlternateLets
   49 00:0137 -  -  -  -  		;
   50 00:0137 -  -  -  -  _CRDoCommand:		
   51 00:0137 E6 7F 21 00 
              00 00 6F 29 
              29 11 D7 07 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:014C DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:014E CD 58 00 00 		call 	JumpCode 					; call the routine.
   54 00:0152 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:0154 -  -  -  -  		;
   56 00:0154 -  -  -  -  		; 		Do CALL (HL)
   57 00:0154 -  -  -  -  		;
   58 00:0154 -  -  -  -  		;
   59 00:0154 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:0154 -  -  -  -  		;		
   61 00:0154 -  -  -  -  _CRAlternateLets:		
   62 00:0154 FE 83 -  -  		cp 		KWD_PLING
   63 00:0156 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 00:0158 FE 84 -  -  		cp 		KWD_QMARK
   65 00:015A 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 00:015C C3 08 02 00 		jp 		SyntaxError
   67 00:0160 -  -  -  -  		;
   68 00:0160 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:0160 -  -  -  -  		;
   70 00:0160 -  -  -  -  _CRAssignmentHandler:		
   71 00:0160 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:0162 D2 08 02 00 		jp 		nc,SyntaxError
   73 00:0166 -  -  -  -  _CRAssignmentLet:		
   74 00:0166 3E 0C C3 9E 
              01 00 -  -  		ERR_TODO
   75 00:016C -  -  -  -  		;call	Command_LET
   76 00:016C C3 25 01 00 		jp 		_CRNewCommand
   77 00:0170 -  -  -  -  
   78 00:0170 -  -  -  -  ; ***************************************************************************************
   79 00:0170 -  -  -  -  ;
   80 00:0170 -  -  -  -  ;									Changes and Updates
   81 00:0170 -  -  -  -  ;
   82 00:0170 -  -  -  -  ; ***************************************************************************************
   83 00:0170 -  -  -  -  ;
   84 00:0170 -  -  -  -  ;		Date			Notes
   85 00:0170 -  -  -  -  ;		==== 			=====
   86 00:0170 -  -  -  -  ;
   87 00:0170 -  -  -  -  ; ***************************************************************************************
   88 00:0170 -  -  -  -  		
Listing for file "_build.asm"
   20 00:0170 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0170 -  -  -  -  ; ***************************************************************************************
    2 00:0170 -  -  -  -  ; ***************************************************************************************
    3 00:0170 -  -  -  -  ;
    4 00:0170 -  -  -  -  ;		Name : 		stop.asm
    5 00:0170 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0170 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0170 -  -  -  -  ;		Reviewed :	No
    8 00:0170 -  -  -  -  ;		Purpose :	Stop command
    9 00:0170 -  -  -  -  ;
   10 00:0170 -  -  -  -  ; ***************************************************************************************
   11 00:0170 -  -  -  -  ; ***************************************************************************************
   12 00:0170 -  -  -  -  
   13 00:0170 -  -  -  -  ; ***************************************************************************************
   14 00:0170 -  -  -  -  ;
   15 00:0170 -  -  -  -  ;										STOP command
   16 00:0170 -  -  -  -  ;
   17 00:0170 -  -  -  -  ; ***************************************************************************************
   18 00:0170 -  -  -  -  
   19 00:0170 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0170 3E 0A C3 9E 
              01 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0176 -  -  -  -  
   22 00:0176 -  -  -  -  ; ***************************************************************************************
   23 00:0176 -  -  -  -  ;
   24 00:0176 -  -  -  -  ;									Changes and Updates
   25 00:0176 -  -  -  -  ;
   26 00:0176 -  -  -  -  ; ***************************************************************************************
   27 00:0176 -  -  -  -  ;
   28 00:0176 -  -  -  -  ;		Date			Notes
   29 00:0176 -  -  -  -  ;		==== 			=====
   30 00:0176 -  -  -  -  ;
   31 00:0176 -  -  -  -  ; ***************************************************************************************
   32 00:0176 -  -  -  -  		
Listing for file "_build.asm"
   21 00:0176 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0176 -  -  -  -  ; ***************************************************************************************
    2 00:0176 -  -  -  -  ; ***************************************************************************************
    3 00:0176 -  -  -  -  ;
    4 00:0176 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0176 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0176 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0176 -  -  -  -  ;		Reviewed :	No
    8 00:0176 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0176 -  -  -  -  ;
   10 00:0176 -  -  -  -  ; ***************************************************************************************
   11 00:0176 -  -  -  -  ; ***************************************************************************************
   12 00:0176 -  -  -  -  
   13 00:0176 -  -  -  -  ; ***************************************************************************************
   14 00:0176 -  -  -  -  ;
   15 00:0176 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0176 -  -  -  -  ;
   17 00:0176 -  -  -  -  ; ***************************************************************************************
   18 00:0176 -  -  -  -  
   19 00:0176 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0176             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0176             		inc 	ix
   22 00:0176             		cp 		ch 							; exit if matches
   23 00:0176             		ret 	z
   24 00:0176             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0176             		jp 		ErrorHandler
   26 00:0176             #endmacro
   27 00:0176 -  -  -  -  
   28 00:0176 -  -  -  -  CheckRightBracket:
   29 00:0176 DD 7E 00 DD 
              23 FE A4 C8 
              3E 08 C3 9E 
              01 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0184 -  -  -  -  
   31 00:0184 -  -  -  -  CheckComma:
   32 00:0184 DD 7E 00 DD 
              23 FE A5 C8 
              3E 07 C3 9E 
              01 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 00:0192 -  -  -  -  
   34 00:0192 -  -  -  -  ; ***************************************************************************************
   35 00:0192 -  -  -  -  ;
   36 00:0192 -  -  -  -  ; 							Check A, gives Syntax Error
   37 00:0192 -  -  -  -  ;
   38 00:0192 -  -  -  -  ; ***************************************************************************************
   39 00:0192 -  -  -  -  
   40 00:0192 -  -  -  -  CheckNextA:
   41 00:0192 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 00:0195 DD 23 -  -  		inc 	ix 							; skip character
   43 00:0197 C8 -  -  -  		ret 	z 							; yes, okay
   44 00:0198 3E 0B C3 9E 
              01 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 00:019E -  -  -  -  		
   46 00:019E -  -  -  -  ; ***************************************************************************************
   47 00:019E -  -  -  -  ;
   48 00:019E -  -  -  -  ;									Changes and Updates
   49 00:019E -  -  -  -  ;
   50 00:019E -  -  -  -  ; ***************************************************************************************
   51 00:019E -  -  -  -  ;
   52 00:019E -  -  -  -  ;		Date			Notes
   53 00:019E -  -  -  -  ;		==== 			=====
   54 00:019E -  -  -  -  ;
   55 00:019E -  -  -  -  ; ***************************************************************************************
   56 00:019E -  -  -  -  		
Listing for file "_build.asm"
   22 00:019E -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:019E -  -  -  -  ; ***************************************************************************************
    2 00:019E -  -  -  -  ; ***************************************************************************************
    3 00:019E -  -  -  -  ;
    4 00:019E -  -  -  -  ;		Name : 		errors.asm
    5 00:019E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:019E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:019E -  -  -  -  ;		Reviewed :	No
    8 00:019E -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:019E -  -  -  -  ;
   10 00:019E -  -  -  -  ; ***************************************************************************************
   11 00:019E -  -  -  -  ; ***************************************************************************************
   12 00:019E -  -  -  -  
   13 00:019E -  -  -  -  ; ***************************************************************************************
   14 00:019E -  -  -  -  ;
   15 00:019E -  -  -  -  ;								Error handler, message A 
   16 00:019E -  -  -  -  ;
   17 00:019E -  -  -  -  ; ***************************************************************************************
   18 00:019E -  -  -  -  
   19 00:019E -  -  -  -  ErrorHandler:
   20 00:019E F5 -  -  -  		push 	af 						; save error ID
   21 00:019F -  -  -  -  
   22 00:019F 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:01A3 6F -  -  -  		ld 		l,a
   24 00:01A4 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:01A5 29 -  -  -  		add 	hl,hl 		
   26 00:01A6 11 D1 06 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:01AA 19 -  -  -  		add 	hl,de
   28 00:01AB ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:01AD CD 93 05 00 		call 	PrintStringAtHL
   30 00:01B1 -  -  -  -  		;
   31 00:01B1 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:01B2 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:01B3 28 2F -  -  		jr 		z,_EHExit
   34 00:01B5 -  -  -  -  		;
   35 00:01B5 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:01BA DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:01BD B7 -  -  -  		or 		a
   38 00:01BE 28 24 -  -  		jr 		z,_EHExit
   39 00:01C0 -  -  -  -  
   40 00:01C0 21 EC 01 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:01C4 CD 93 05 00 		call 	PrintStringAtHL 
   42 00:01C8 -  -  -  -  		
   43 00:01C8 D9 -  -  -  		exx								; HL'HL = line number
   44 00:01C9 21 00 00 00 		ld 		hl,$0000 		
   45 00:01CD D9 -  -  -  		exx 
   46 00:01CE DD 6E 01 -  		ld 		l,(ix+1)
   47 00:01D1 DD 66 02 -  		ld 		h,(ix+2)
   48 00:01D4 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:01D6 01 74 00 00 		ld 		bc,ConvertBuffer
   50 00:01DA CD B1 0A 00 		call 	Int32ToString
   51 00:01DE C5 -  -  -  		push 	bc
   52 00:01DF E1 -  -  -  		pop 	hl
   53 00:01E0 CD 93 05 00 		call 	PrintStringAtHL			; print error line number.
   54 00:01E4 -  -  -  -  _EHExit:		
   55 00:01E4 CD 00 0B 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:01E8 C3 1A 00 00 		jp 		WarmStart
   57 00:01EC -  -  -  -  
   58 00:01EC -  -  -  -  _EHAtText:
   59 00:01EC 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:01F6 -  -  -  -  
   61 00:01F6 -  -  -  -  NotImplemented:
   62 00:01F6 3E 04 C3 9E 
              01 00 -  -  		ERR_DISABLED
   63 00:01FC -  -  -  -  TypeMismatch:
   64 00:01FC 3E 02 C3 9E 
              01 00 -  -  		ERR_BADTYPE
   65 00:0202 -  -  -  -  BadValue:
   66 00:0202 3E 03 C3 9E 
              01 00 -  -  		ERR_BADVALUE
   67 00:0208 -  -  -  -  SyntaxError:
   68 00:0208 3E 0B C3 9E 
              01 00 -  -  		ERR_SYNTAX
   69 00:020E -  -  -  -  						
   70 00:020E -  -  -  -  ; ***************************************************************************************
   71 00:020E -  -  -  -  ;
   72 00:020E -  -  -  -  ;									Changes and Updates
   73 00:020E -  -  -  -  ;
   74 00:020E -  -  -  -  ; ***************************************************************************************
   75 00:020E -  -  -  -  ;
   76 00:020E -  -  -  -  ;		Date			Notes
   77 00:020E -  -  -  -  ;		==== 			=====
   78 00:020E -  -  -  -  ;
   79 00:020E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:020E -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:020E -  -  -  -  ; ***************************************************************************************
    2 00:020E -  -  -  -  ; ***************************************************************************************
    3 00:020E -  -  -  -  ;
    4 00:020E -  -  -  -  ;		Name : 		basicmath.asm
    5 00:020E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:020E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:020E -  -  -  -  ;		Reviewed :	No
    8 00:020E -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:020E -  -  -  -  ;
   10 00:020E -  -  -  -  ; ***************************************************************************************
   11 00:020E -  -  -  -  ; ***************************************************************************************
   12 00:020E -  -  -  -  
   13 00:020E -  -  -  -  ; ***************************************************************************************
   14 00:020E -  -  -  -  ;
   15 00:020E -  -  -  -  ; 									Addition
   16 00:020E -  -  -  -  ;
   17 00:020E -  -  -  -  ; ***************************************************************************************
   18 00:020E -  -  -  -  
   19 00:020E -  -  -  -  ALUAdd: 		;; [+]
   20 00:020E CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 30 
              0A 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:021C -  -  -  -  
   22 00:021C -  -  -  -  ; ***************************************************************************************
   23 00:021C -  -  -  -  ;
   24 00:021C -  -  -  -  ; 									Subtraction
   25 00:021C -  -  -  -  ;
   26 00:021C -  -  -  -  ; ***************************************************************************************
   27 00:021C -  -  -  -  
   28 00:021C -  -  -  -  ALUSubtract: 	;; [-]
   29 00:021C CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 38 
              0A 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:022A -  -  -  -  
   31 00:022A -  -  -  -  ; ***************************************************************************************
   32 00:022A -  -  -  -  ;
   33 00:022A -  -  -  -  ; 									  Multiply
   34 00:022A -  -  -  -  ;
   35 00:022A -  -  -  -  ; ***************************************************************************************
   36 00:022A -  -  -  -  
   37 00:022A -  -  -  -  ALUMultiply: 	;; [*]
   38 00:022A CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 F7 
              09 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0238 -  -  -  -  
   40 00:0238 -  -  -  -  ; ***************************************************************************************
   41 00:0238 -  -  -  -  ;
   42 00:0238 -  -  -  -  ; 									  Divide
   43 00:0238 -  -  -  -  ;
   44 00:0238 -  -  -  -  ; ***************************************************************************************
   45 00:0238 -  -  -  -  
   46 00:0238 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0238 -  -  -  -  ALUDivide2:	;; [div]
   48 00:0238 CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 F8 
              08 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0246 -  -  -  -  
   50 00:0246 -  -  -  -  ; ***************************************************************************************
   51 00:0246 -  -  -  -  ;
   52 00:0246 -  -  -  -  ; 									  Modulus
   53 00:0246 -  -  -  -  ;
   54 00:0246 -  -  -  -  ; ***************************************************************************************
   55 00:0246 -  -  -  -  
   56 00:0246 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0246 CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 FB 
              08 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0254 -  -  -  -  
   59 00:0254 -  -  -  -  ; ***************************************************************************************
   60 00:0254 -  -  -  -  ;
   61 00:0254 -  -  -  -  ; 									  Logical
   62 00:0254 -  -  -  -  ;
   63 00:0254 -  -  -  -  ; ***************************************************************************************
   64 00:0254 -  -  -  -  
   65 00:0254 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0254 CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 42 
              0A 00 -  -  		IntegerDispatch(Int32And)
   67 00:0262 -  -  -  -  
   68 00:0262 -  -  -  -  ALUOr: 			;; [or]
   69 00:0262 CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 4F 
              0A 00 -  -  		IntegerDispatch(Int32Or)
   70 00:0270 -  -  -  -  
   71 00:0270 -  -  -  -  ALUXor: 		;; [eor]
   72 00:0270 CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 5C 
              0A 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:027E -  -  -  -  
   74 00:027E -  -  -  -  ; ***************************************************************************************
   75 00:027E -  -  -  -  ;
   76 00:027E -  -  -  -  ;									Changes and Updates
   77 00:027E -  -  -  -  ;
   78 00:027E -  -  -  -  ; ***************************************************************************************
   79 00:027E -  -  -  -  ;
   80 00:027E -  -  -  -  ;		Date			Notes
   81 00:027E -  -  -  -  ;		==== 			=====
   82 00:027E -  -  -  -  ;
   83 00:027E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:027E -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:027E -  -  -  -  ; ***************************************************************************************
    2 00:027E -  -  -  -  ; ***************************************************************************************
    3 00:027E -  -  -  -  ;
    4 00:027E -  -  -  -  ;		Name : 		binrefs.asm
    5 00:027E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:027E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:027E -  -  -  -  ;		Reviewed :	No
    8 00:027E -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:027E -  -  -  -  ;
   10 00:027E -  -  -  -  ; ***************************************************************************************
   11 00:027E -  -  -  -  ; ***************************************************************************************
   12 00:027E -  -  -  -  
   13 00:027E -  -  -  -  ; ***************************************************************************************
   14 00:027E -  -  -  -  ;
   15 00:027E -  -  -  -  ; 									<l> <op> <r>
   16 00:027E -  -  -  -  ;
   17 00:027E -  -  -  -  ; ***************************************************************************************
   18 00:027E -  -  -  -  
   19 00:027E -  -  -  -  ALULongReference:			;; [!]
   20 00:027E CD 8E 02 00 		call 	BRGetAddress 				; calculate address
   21 00:0282 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0284 CB F9 -  -  		set 	CIsReference,c
   23 00:0286 C9 -  -  -  		ret
   24 00:0287 -  -  -  -  
   25 00:0287 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0287 CD 7E 02 00 		call 	ALULongReference
   27 00:028B CB F1 -  -  		set 	CIsByteReference,c
   28 00:028D C9 -  -  -  		ret
   29 00:028E -  -  -  -  
   30 00:028E -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:028E CD 2B 03 00 
              78 B1 C2 FC 
              01 00 C3 9C 
              02 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:029C -  -  -  -  _BRGAMain:		
   33 00:029C CD 30 0A 00 		call 	Int32Add 					; address in HL'HL
   34 00:02A0 CD 13 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:02A4 C9 -  -  -  		ret
   36 00:02A5 -  -  -  -  
   37 00:02A5 -  -  -  -  ; ***************************************************************************************
   38 00:02A5 -  -  -  -  ;
   39 00:02A5 -  -  -  -  ;									Changes and Updates
   40 00:02A5 -  -  -  -  ;
   41 00:02A5 -  -  -  -  ; ***************************************************************************************
   42 00:02A5 -  -  -  -  ;
   43 00:02A5 -  -  -  -  ;		Date			Notes
   44 00:02A5 -  -  -  -  ;		==== 			=====
   45 00:02A5 -  -  -  -  ;
   46 00:02A5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:02A5 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:02A5 -  -  -  -  ; ***************************************************************************************
    2 00:02A5 -  -  -  -  ; ***************************************************************************************
    3 00:02A5 -  -  -  -  ;
    4 00:02A5 -  -  -  -  ;		Name : 		compare.asm
    5 00:02A5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02A5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02A5 -  -  -  -  ;		Reviewed :	No
    8 00:02A5 -  -  -  -  ;		Purpose :	Comparison code
    9 00:02A5 -  -  -  -  ;
   10 00:02A5 -  -  -  -  ; ***************************************************************************************
   11 00:02A5 -  -  -  -  ; ***************************************************************************************
   12 00:02A5 -  -  -  -  
   13 00:02A5 -  -  -  -  #macro compare_equals(n)
   14 00:02A5             		call 	CompareBaseCode
   15 00:02A5             		cp 		n
   16 00:02A5             		jr 		z,UnaryInt32True
   17 00:02A5             		jr 		UnaryInt32False
   18 00:02A5             #endmacro
   19 00:02A5 -  -  -  -  
   20 00:02A5 -  -  -  -  #macro compare_not_equals(n)
   21 00:02A5             		call 	CompareBaseCode
   22 00:02A5             		cp 		n
   23 00:02A5             		jr 		nz,UnaryInt32True
   24 00:02A5             		jr 		UnaryInt32False
   25 00:02A5             #endmacro
   26 00:02A5 -  -  -  -  
   27 00:02A5 -  -  -  -  ; ***************************************************************************************
   28 00:02A5 -  -  -  -  ;
   29 00:02A5 -  -  -  -  ; 								Return True/False
   30 00:02A5 -  -  -  -  ;
   31 00:02A5 -  -  -  -  ; ***************************************************************************************
   32 00:02A5 -  -  -  -  
   33 00:02A5 -  -  -  -  UnaryInt32True:	
   34 00:02A5 3E FF -  -  		ld 		a,255
   35 00:02A7 18 01 -  -  		jr 		_Int32Logical
   36 00:02A9 -  -  -  -  UnaryInt32False: 
   37 00:02A9 AF -  -  -  		xor 	a
   38 00:02AA -  -  -  -  _Int32Logical:
   39 00:02AA 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:02AB 67 -  -  -  		ld 		h,a
   41 00:02AC D9 -  -  -  		exx
   42 00:02AD 6F -  -  -  		ld 		l,a
   43 00:02AE 67 -  -  -  		ld 		h,a
   44 00:02AF D9 -  -  -  		exx
   45 00:02B0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:02B2 C9 -  -  -  		ret
   47 00:02B3 -  -  -  -  
   48 00:02B3 -  -  -  -  ; ***************************************************************************************
   49 00:02B3 -  -  -  -  ;
   50 00:02B3 -  -  -  -  ; 										> = < (compare == value)
   51 00:02B3 -  -  -  -  ;
   52 00:02B3 -  -  -  -  ; ***************************************************************************************
   53 00:02B3 -  -  -  -  
   54 00:02B3 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:02B3 CD EF 02 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:02BD -  -  -  -  
   57 00:02BD -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:02BD CD EF 02 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:02C7 -  -  -  -  
   60 00:02C7 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:02C7 CD EF 02 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:02D1 -  -  -  -  
   63 00:02D1 -  -  -  -  ; ***************************************************************************************
   64 00:02D1 -  -  -  -  ;
   65 00:02D1 -  -  -  -  ; 										> = < (compare <> value)
   66 00:02D1 -  -  -  -  ;
   67 00:02D1 -  -  -  -  ; ***************************************************************************************
   68 00:02D1 -  -  -  -  
   69 00:02D1 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:02D1 CD EF 02 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:02DB -  -  -  -  
   72 00:02DB -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:02DB CD EF 02 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:02E5 -  -  -  -  
   75 00:02E5 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:02E5 CD EF 02 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:02EF -  -  -  -  
   78 00:02EF -  -  -  -  ; ***************************************************************************************
   79 00:02EF -  -  -  -  ;
   80 00:02EF -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:02EF -  -  -  -  ;
   82 00:02EF -  -  -  -  ; ***************************************************************************************
   83 00:02EF -  -  -  -  
   84 00:02EF -  -  -  -  CompareBaseCode:
   85 00:02EF CD 2B 03 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:02F3 -  -  -  -  
   87 00:02F3 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:02F4 A1 -  -  -  		and 	c
   89 00:02F5 CB 47 -  -  		bit 	CIsString,a 
   90 00:02F7 C2 09 03 00 		jp 		nz,StringCompare
   91 00:02FB -  -  -  -  
   92 00:02FB 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:02FC B1 -  -  -  		or 		c
   94 00:02FD CB 47 -  -  		bit 	CIsString,a 
   95 00:02FF CA 70 0A 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0303 -  -  -  -  
   97 00:0303 3E 02 C3 9E 
              01 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:0309 -  -  -  -  ;
   99 00:0309 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:0309 -  -  -  -  ;
  101 00:0309 -  -  -  -  StringCompare:
  102 00:0309 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:030A BE -  -  -  		cp 		(hl)
  104 00:030B 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:030D 20 08 -  -  		jr 		nz,_SCLess
  106 00:030F 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:0310 23 -  -  -  		inc 	hl
  108 00:0311 FE 20 -  -  		cp 		' '
  109 00:0313 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0315 AF -  -  -  		xor 	a 							; return 0.
  111 00:0316 C9 -  -  -  		ret
  112 00:0317 -  -  -  -  
  113 00:0317 -  -  -  -  _SCLess:
  114 00:0317 3E FF -  -  		ld 		a,$FF
  115 00:0319 C9 -  -  -  		ret
  116 00:031A -  -  -  -  _SCGreater:
  117 00:031A 3E 01 -  -  		ld 		a,1
  118 00:031C C9 -  -  -  		ret
  119 00:031D -  -  -  -  
  120 00:031D 3E 0C C3 9E 
              01 00 -  -  		ERR_TODO()
  121 00:0323 -  -  -  -  
  122 00:0323 -  -  -  -  ; ***************************************************************************************
  123 00:0323 -  -  -  -  ;
  124 00:0323 -  -  -  -  ;									Changes and Updates
  125 00:0323 -  -  -  -  ;
  126 00:0323 -  -  -  -  ; ***************************************************************************************
  127 00:0323 -  -  -  -  ;
  128 00:0323 -  -  -  -  ;		Date			Notes
  129 00:0323 -  -  -  -  ;		==== 			=====
  130 00:0323 -  -  -  -  ;
  131 00:0323 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0323 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0323 -  -  -  -  ; ***************************************************************************************
    2 00:0323 -  -  -  -  ; ***************************************************************************************
    3 00:0323 -  -  -  -  ;
    4 00:0323 -  -  -  -  ;		Name : 		utility.asm
    5 00:0323 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0323 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0323 -  -  -  -  ;		Reviewed :	No
    8 00:0323 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0323 -  -  -  -  ;
   10 00:0323 -  -  -  -  ; ***************************************************************************************
   11 00:0323 -  -  -  -  ; ***************************************************************************************
   12 00:0323 -  -  -  -  
   13 00:0323 -  -  -  -  ; ***************************************************************************************
   14 00:0323 -  -  -  -  ;
   15 00:0323 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0323 -  -  -  -  ;
   17 00:0323 -  -  -  -  ; ***************************************************************************************
   18 00:0323 -  -  -  -  
   19 00:0323 -  -  -  -  SwapHLDE:
   20 00:0323 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0324 D9 -  -  -  			exx
   22 00:0325 EB -  -  -  			ex 		de,hl
   23 00:0326 D9 -  -  -  			exx
   24 00:0327 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:0328 41 -  -  -  			ld 		b,c
   26 00:0329 4F -  -  -  			ld 		c,a
   27 00:032A C9 -  -  -  			ret
   28 00:032B -  -  -  -  
   29 00:032B -  -  -  -  ; ***************************************************************************************
   30 00:032B -  -  -  -  ;
   31 00:032B -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:032B -  -  -  -  ;
   33 00:032B -  -  -  -  ; ***************************************************************************************
   34 00:032B -  -  -  -  
   35 00:032B -  -  -  -  DereferenceBoth:
   36 00:032B CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:032D C4 E6 03 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0331 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0333 C8 -  -  -  			ret 	z
   40 00:0334 CD 23 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:0338 CD E6 03 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:033C CD 23 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:0340 C9 -  -  -  			ret
   44 00:0341 -  -  -  -  
   45 00:0341 -  -  -  -  ; ***************************************************************************************
   46 00:0341 -  -  -  -  ;
   47 00:0341 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:0341 -  -  -  -  ;
   49 00:0341 -  -  -  -  ; ***************************************************************************************
   50 00:0341 -  -  -  -  
   51 00:0341 -  -  -  -  NegateHLHL:	
   52 00:0341 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0343 C2 FC 01 00 			jp 		nz,TypeMismatch
   54 00:0347 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0349 C4 E6 03 00 			call 	nz,Dereference 			; if required.
   56 00:034D CD 9A 0A 00 			call 	Int32Negate
   57 00:0351 C9 -  -  -  			ret
Listing for file "_build.asm"
   27 00:0352 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0352 -  -  -  -  ; ***************************************************************************************
    2 00:0352 -  -  -  -  ; ***************************************************************************************
    3 00:0352 -  -  -  -  ;
    4 00:0352 -  -  -  -  ;		Name : 		expression.asm
    5 00:0352 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0352 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0352 -  -  -  -  ;		Reviewed :	None
    8 00:0352 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0352 -  -  -  -  ;
   10 00:0352 -  -  -  -  ; ***************************************************************************************
   11 00:0352 -  -  -  -  ; ***************************************************************************************
   12 00:0352 -  -  -  -  
   13 00:0352 -  -  -  -  ; ***************************************************************************************
   14 00:0352 -  -  -  -  ;
   15 00:0352 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0352 -  -  -  -  ;
   17 00:0352 -  -  -  -  ; ***************************************************************************************
   18 00:0352 -  -  -  -  
   19 00:0352 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0352 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0353 -  -  -  -  EvaluateAtPrecedence:
   22 00:0353 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0354 -  -  -  -  		;
   24 00:0354 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0354 -  -  -  -  		;
   26 00:0354 CD 42 04 00 		call 	EvaluateTerm 				; get term
   27 00:0358 -  -  -  -  		;
   28 00:0358 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0358 -  -  -  -  		;
   30 00:0358 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0359 -  -  -  -  _EAPLoop:
   32 00:0359 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:035C FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:035E D8 -  -  -  		ret 	c
   35 00:035F FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:0361 D0 -  -  -  		ret 	nc
   37 00:0362 -  -  -  -  		;
   38 00:0362 -  -  -  -  		; 		Get the precedence.
   39 00:0362 -  -  -  -  		;
   40 00:0362 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0363 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0365 21 C0 06 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0369 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:036A 6F -  -  -  		ld 		l,a
   45 00:036B 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:036C E1 -  -  -  		pop 	hl 							; restore HL
   47 00:036D -  -  -  -  		;
   48 00:036D -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:036D -  -  -  -  		;
   50 00:036D 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:036E BB -  -  -  		cp 		e
   52 00:036F D0 -  -  -  		ret 	nc
   53 00:0370 -  -  -  -  
   54 00:0370 -  -  -  -  		;
   55 00:0370 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:0370 -  -  -  -  		;
   57 00:0370 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0371 -  -  -  -  		;
   59 00:0371 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0374 F5 -  -  -  		push 	af
   61 00:0375 -  -  -  -  		;
   62 00:0375 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0376 D9 -  -  -  		exx 								; save HL'
   64 00:0377 E5 -  -  -  		push 	hl
   65 00:0378 D9 -  -  -  		exx 								
   66 00:0379 E5 -  -  -  		push 	hl 							; save HL
   67 00:037A -  -  -  -  		;
   68 00:037A DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:037C -  -  -  -  		;
   70 00:037C -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:037C -  -  -  -  		;
   72 00:037C 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:037D CD 53 03 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0381 -  -  -  -  		;
   75 00:0381 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0381 -  -  -  -  		;
   77 00:0381 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0382 -  -  -  -  
   79 00:0382 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0383 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0384 D9 -  -  -  		exx
   82 00:0385 EB -  -  -  		ex 		de,hl
   83 00:0386 E1 -  -  -  		pop 	hl
   84 00:0387 D9 -  -  -  		exx
   85 00:0388 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:0389 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:038A -  -  -  -  		;
   88 00:038A -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:038A -  -  -  -  		; 		is in B (type) DE'DE
   90 00:038A -  -  -  -  		;
   91 00:038A F1 -  -  -  		pop 	af 							; get operator in A
   92 00:038B -  -  -  -  		;
   93 00:038B -  -  -  -  		; 		Call the binary operator in A.
   94 00:038B -  -  -  -  		;
   95 00:038B D5 -  -  -  		push 	de
   96 00:038C E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:038D E6 7F 21 00 
              00 00 6F 29 
              29 11 D7 07 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:03A2 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:03A3 D1 -  -  -  		pop 	de 							; restore DE
  100 00:03A4 CD 58 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:03A8 -  -  -  -  		;
  102 00:03A8 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:03A9 -  -  -  -  		;
  104 00:03A9 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:03AB -  -  -  -  
  106 00:03AB -  -  -  -  ; ***************************************************************************************
  107 00:03AB -  -  -  -  ;
  108 00:03AB -  -  -  -  ;									Changes and Updates
  109 00:03AB -  -  -  -  ;
  110 00:03AB -  -  -  -  ; ***************************************************************************************
  111 00:03AB -  -  -  -  ;
  112 00:03AB -  -  -  -  ;		Date			Notes
  113 00:03AB -  -  -  -  ;		==== 			=====
  114 00:03AB -  -  -  -  ;
  115 00:03AB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:03AB -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:03AB -  -  -  -  ; ***************************************************************************************
    2 00:03AB -  -  -  -  ; ***************************************************************************************
    3 00:03AB -  -  -  -  ;
    4 00:03AB -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:03AB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03AB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03AB -  -  -  -  ;		Reviewed :	No
    8 00:03AB -  -  -  -  ;		Purpose :	Expression support functions
    9 00:03AB -  -  -  -  ;
   10 00:03AB -  -  -  -  ; ***************************************************************************************
   11 00:03AB -  -  -  -  ; ***************************************************************************************
   12 00:03AB -  -  -  -  
   13 00:03AB -  -  -  -  ; ***************************************************************************************
   14 00:03AB -  -  -  -  ;
   15 00:03AB -  -  -  -  ; 						Evaluate and dereference an expression
   16 00:03AB -  -  -  -  ;
   17 00:03AB -  -  -  -  ; ***************************************************************************************
   18 00:03AB -  -  -  -  
   19 00:03AB -  -  -  -  EvaluateValue:
   20 00:03AB CD 52 03 00 		call 	EvaluateAtPrecedence0
   21 00:03AF C3 E6 03 00 		jp 		Dereference
   22 00:03B3 -  -  -  -  
   23 00:03B3 -  -  -  -  ; ***************************************************************************************
   24 00:03B3 -  -  -  -  ;
   25 00:03B3 -  -  -  -  ; 									Evaluate a number
   26 00:03B3 -  -  -  -  ;
   27 00:03B3 -  -  -  -  ; ***************************************************************************************
   28 00:03B3 -  -  -  -  
   29 00:03B3 -  -  -  -  EvaluateInteger:
   30 00:03B3 CD AB 03 00 		call 	EvaluateValue
   31 00:03B7 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   32 00:03B9 C8 -  -  -  		ret 	z
   33 00:03BA C3 FC 01 00 		jp 		TypeMismatch
   34 00:03BE -  -  -  -  
   35 00:03BE -  -  -  -  ; ***************************************************************************************
   36 00:03BE -  -  -  -  ;
   37 00:03BE -  -  -  -  ; 									Evaluate an 8 bit integer
   38 00:03BE -  -  -  -  ;
   39 00:03BE -  -  -  -  ; ***************************************************************************************
   40 00:03BE -  -  -  -  
   41 00:03BE -  -  -  -  Evaluate8BitInteger:
   42 00:03BE CD B3 03 00 		call 	EvaluateInteger
   43 00:03C2 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   44 00:03C3 7C -  -  -  		ld 		a,h
   45 00:03C4 B5 -  -  -  		or 		l
   46 00:03C5 D9 -  -  -  		exx 	
   47 00:03C6 B4 -  -  -  		or 		h
   48 00:03C7 C2 02 02 00 		jp 		nz,BadValue
   49 00:03CB 7D -  -  -  		ld 		a,l 						; return integer in A
   50 00:03CC C9 -  -  -  		ret
   51 00:03CD -  -  -  -  		
   52 00:03CD -  -  -  -  ; ***************************************************************************************
   53 00:03CD -  -  -  -  ;
   54 00:03CD -  -  -  -  ; 									Evaluate a string
   55 00:03CD -  -  -  -  ;
   56 00:03CD -  -  -  -  ; ***************************************************************************************
   57 00:03CD -  -  -  -  
   58 00:03CD -  -  -  -  EvaluateStringOnly:
   59 00:03CD CD AB 03 00 		call 	EvaluateValue
   60 00:03D1 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   61 00:03D3 CA FC 01 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   62 00:03D7 C9 -  -  -  		ret
   63 00:03D8 -  -  -  -  
   64 00:03D8 -  -  -  -  ; ***************************************************************************************
   65 00:03D8 -  -  -  -  ;
   66 00:03D8 -  -  -  -  ; 								Return 8/16 bit constant
   67 00:03D8 -  -  -  -  ;
   68 00:03D8 -  -  -  -  ; ***************************************************************************************
   69 00:03D8 -  -  -  -  
   70 00:03D8 -  -  -  -  Return8BitConstant:
   71 00:03D8 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   72 00:03DC 6F -  -  -  		ld 		l,a
   73 00:03DD -  -  -  -  Return16BitConstant:
   74 00:03DD D9 -  -  -  		exx 								; clear HL'
   75 00:03DE 21 00 00 00 		ld 		hl,0
   76 00:03E2 D9 -  -  -  		exx
   77 00:03E3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
   78 00:03E5 C9 -  -  -  		ret
   79 00:03E6 -  -  -  -  
   80 00:03E6 -  -  -  -  ; ***************************************************************************************
   81 00:03E6 -  -  -  -  ;
   82 00:03E6 -  -  -  -  ;									Changes and Updates
   83 00:03E6 -  -  -  -  ;
   84 00:03E6 -  -  -  -  ; ***************************************************************************************
   85 00:03E6 -  -  -  -  ;
   86 00:03E6 -  -  -  -  ;		Date			Notes
   87 00:03E6 -  -  -  -  ;		==== 			=====
   88 00:03E6 -  -  -  -  ;
   89 00:03E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:03E6 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:03E6 -  -  -  -  ; ***************************************************************************************
    2 00:03E6 -  -  -  -  ; ***************************************************************************************
    3 00:03E6 -  -  -  -  ;
    4 00:03E6 -  -  -  -  ;		Name : 		reference.asm
    5 00:03E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03E6 -  -  -  -  ;		Date : 		1st May 2022
    7 00:03E6 -  -  -  -  ;		Reviewed :	No
    8 00:03E6 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:03E6 -  -  -  -  ;
   10 00:03E6 -  -  -  -  ; ***************************************************************************************
   11 00:03E6 -  -  -  -  ; ***************************************************************************************
   12 00:03E6 -  -  -  -  
   13 00:03E6 -  -  -  -  ; ***************************************************************************************
   14 00:03E6 -  -  -  -  ;
   15 00:03E6 -  -  -  -  ; 									Dereference HL'HL C
   16 00:03E6 -  -  -  -  ;
   17 00:03E6 -  -  -  -  ; ***************************************************************************************
   18 00:03E6 -  -  -  -  
   19 00:03E6 -  -  -  -  Dereference:
   20 00:03E6 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:03E8 C8 -  -  -  		ret 	z
   22 00:03E9 -  -  -  -  
   23 00:03E9 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:03EB -  -  -  -  		
   25 00:03EB CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:03ED 20 1E -  -  		jr 		nz,_DRInternal
   27 00:03EF -  -  -  -  
   28 00:03EF CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:03F1 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:03F3 -  -  -  -  
   31 00:03F3 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:03F4 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:03F6 D9 -  -  -  		exx
   34 00:03F7 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:03F8 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:03F9 23 -  -  -  		inc  	hl
   37 00:03FA ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:03FC D9 -  -  -  		exx 								; fix back
   39 00:03FD C9 -  -  -  		ret
   40 00:03FE -  -  -  -  
   41 00:03FE -  -  -  -  _DeRefByte:		
   42 00:03FE 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:03FF 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:0403 6F -  -  -  		ld	 	l,a
   45 00:0404 D9 -  -  -  		exx
   46 00:0405 21 00 00 00 		ld 		hl,$0000
   47 00:0409 D9 -  -  -  		exx
   48 00:040A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:040C C9 -  -  -  		ret
   50 00:040D -  -  -  -  
   51 00:040D -  -  -  -  _DRInternal:
   52 00:040D 3E 04 C3 9E 
              01 00 -  -  		ERR_DISABLED
   53 00:0413 -  -  -  -  
   54 00:0413 -  -  -  -  ; ***************************************************************************************
   55 00:0413 -  -  -  -  ;
   56 00:0413 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:0413 -  -  -  -  ;
   58 00:0413 -  -  -  -  ; ***************************************************************************************
   59 00:0413 -  -  -  -  
   60 00:0413 -  -  -  -  DRConvertHLHLToAddress:
   61 00:0413 -  -  -  -  		#ifdef EZ80
   62 00:0413 22 5E 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0417 D9 -  -  -  		exx
   64 00:0418 22 60 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:041C 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:0420 D9 -  -  -  		exx
   67 00:0421 2A 5E 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0425 -  -  -  -  		#endif
   69 00:0425 C9 -  -  -  		ret
   70 00:0426 -  -  -  -  
   71 00:0426 -  -  -  -  ; ***************************************************************************************
   72 00:0426 -  -  -  -  ;
   73 00:0426 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0426 -  -  -  -  ;
   75 00:0426 -  -  -  -  ; ***************************************************************************************
   76 00:0426 -  -  -  -  
   77 00:0426 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0426 -  -  -  -  		#ifdef EZ80
   79 00:0426 22 5E 00 00 		ld 		(AConvert),hl
   80 00:042A 21 00 00 00 		ld 		hl,$0000
   81 00:042E 22 61 00 00 		ld 		(AConvert+3),hl
   82 00:0432 D9 -  -  -  		exx
   83 00:0433 2A 60 00 00 		ld 		hl,(AConvert+2)
   84 00:0437 D9 -  -  -  		exx
   85 00:0438 AF -  -  -  		xor 	a
   86 00:0439 32 60 00 00 		ld 		(AConvert+2),a
   87 00:043D 2A 5E 00 00 		ld 		hl,(AConvert)
   88 00:0441 -  -  -  -  		#endif
   89 00:0441 C9 -  -  -  		ret
   90 00:0442 -  -  -  -  
   91 00:0442 -  -  -  -  ; ***************************************************************************************
   92 00:0442 -  -  -  -  ;
   93 00:0442 -  -  -  -  ;									Changes and Updates
   94 00:0442 -  -  -  -  ;
   95 00:0442 -  -  -  -  ; ***************************************************************************************
   96 00:0442 -  -  -  -  ;
   97 00:0442 -  -  -  -  ;		Date			Notes
   98 00:0442 -  -  -  -  ;		==== 			=====
   99 00:0442 -  -  -  -  ;
  100 00:0442 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:0442 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:0442 -  -  -  -  ; ***************************************************************************************
    2 00:0442 -  -  -  -  ; ***************************************************************************************
    3 00:0442 -  -  -  -  ;
    4 00:0442 -  -  -  -  ;		Name : 		term.asm
    5 00:0442 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0442 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0442 -  -  -  -  ;		Reviewed :	No
    8 00:0442 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:0442 -  -  -  -  ;
   10 00:0442 -  -  -  -  ; ***************************************************************************************
   11 00:0442 -  -  -  -  ; ***************************************************************************************
   12 00:0442 -  -  -  -  
   13 00:0442 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:0442             		add_hlhl_16
   15 00:0442             		exx
   16 00:0442             		adc_hlhl_16
   17 00:0442             		exx
   18 00:0442             #endmacro
   19 00:0442 -  -  -  -  
   20 00:0442 -  -  -  -  ; ***************************************************************************************
   21 00:0442 -  -  -  -  ;
   22 00:0442 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:0442 -  -  -  -  ;
   24 00:0442 -  -  -  -  ; ***************************************************************************************
   25 00:0442 -  -  -  -  ;
   26 00:0442 -  -  -  -  ; 		Terms can be:
   27 00:0442 -  -  -  -  ;
   28 00:0442 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:0442 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:0442 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:0442 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:0442 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:0442 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:0442 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:0442 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:0442 -  -  -  -  ; 														reference of some sort.
   37 00:0442 -  -  -  -  ;
   38 00:0442 -  -  -  -  ; ***************************************************************************************
   39 00:0442 -  -  -  -  
   40 00:0442 -  -  -  -  EvaluateTerm:		
   41 00:0442 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0444 D9 -  -  -  		exx
   43 00:0445 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0449 D9 -  -  -  		exx
   45 00:044A 21 00 00 00 		ld 		hl,$0000		
   46 00:044E -  -  -  -  		;
   47 00:044E DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:0451 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0453 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0455 DA 0D 05 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0459 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:045B C2 B1 04 00 		jp 		nz,_ETFoundKeyword 
   53 00:045F -  -  -  -  		;
   54 00:045F -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:045F -  -  -  -  		;
   56 00:045F -  -  -  -  _ETIntegerConstant:
   57 00:045F -  -  -  -  		;
   58 00:045F -  -  -  -  _ETIntegerLoop:		
   59 00:045F DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0462 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0464 B5 -  -  -  		or 		l 							; or into L
   62 00:0465 6F -  -  -  		ld 		l,a
   63 00:0466 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0468 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:046B C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:046D FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:046F D8 -  -  -  		ret 	c
   68 00:0470 -  -  -  -  
   69 00:0470 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0477 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:047E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0485 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:048C 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0493 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:049A -  -  -  -  
   76 00:049A 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:049C -  -  -  -  		;
   78 00:049C -  -  -  -  		; 		Found the $3F string marker.
   79 00:049C -  -  -  -  		;
   80 00:049C -  -  -  -  _ETStringMarker:		
   81 00:049C DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:049E DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:04A0 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:04A2 E1 -  -  -  		pop 	hl
   85 00:04A3 11 00 00 00 		ld 		de,$0000
   86 00:04A7 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:04AA DD 19 -  -  		add 	ix,de
   88 00:04AC DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:04AE 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:04B0 C9 -  -  -  		ret
   91 00:04B1 -  -  -  -  		;
   92 00:04B1 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:04B1 -  -  -  -  		;
   94 00:04B1 -  -  -  -  _ETFoundKeyword:
   95 00:04B1 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:04B3 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:04B5 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:04B7 FE A4 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:04B9 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:04BB -  -  -  -  		;
  101 00:04BB -  -  -  -  		;		Unary group 0
  102 00:04BB -  -  -  -  		;
  103 00:04BB E6 7F 21 00 
              00 00 6F 29 
              29 11 D7 07 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:04D0 C3 58 00 00 		jp 		JumpCode 					; and go there.
  105 00:04D4 -  -  -  -  
  106 00:04D4 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:04D4 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:04D6 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:04D8 -  -  -  -  		;
  110 00:04D8 -  -  -  -  		; 		- term
  111 00:04D8 -  -  -  -  		;
  112 00:04D8 CD 42 04 00 		call 	EvaluateTerm 				; evaluate term
  113 00:04DC CD 41 03 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:04E0 C9 -  -  -  		ret
  115 00:04E1 -  -  -  -  		;
  116 00:04E1 -  -  -  -  		;		! ? indirection check
  117 00:04E1 -  -  -  -  		;
  118 00:04E1 -  -  -  -  _ETCheckIndirection:	
  119 00:04E1 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:04E3 28 06 -  -  		jr 		z,_ETIndirection
  121 00:04E5 FE 83 -  -  		cp 		KWD_PLING
  122 00:04E7 C2 08 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:04EB -  -  -  -  		;
  124 00:04EB -  -  -  -  		; 		! ? indirection
  125 00:04EB -  -  -  -  		;
  126 00:04EB -  -  -  -  _ETIndirection:
  127 00:04EB F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:04EC CD 42 04 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:04F0 CD E6 03 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:04F4 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:04F6 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:04F8 CD 13 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:04FC F1 -  -  -  		pop 	af 							; get type back
  134 00:04FD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:04FF CB F9 -  -  		set 	CIsReference,c
  136 00:0501 FE 83 -  -  		cp 		KWD_PLING
  137 00:0503 C8 -  -  -  		ret 	z
  138 00:0504 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0506 C9 -  -  -  		ret
  140 00:0507 -  -  -  -  _ETStringIndirect:
  141 00:0507 3E 02 C3 9E 
              01 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:050D -  -  -  -  		;
  143 00:050D -  -  -  -  		; 		Found an identifier.
  144 00:050D -  -  -  -  		;
  145 00:050D -  -  -  -  _ETVariable:
  146 00:050D 3E 0C C3 9E 
              01 00 -  -  		ERR_TODO
  147 00:0513 3E 0D C3 9E 
              01 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:0519 -  -  -  -  		
  149 00:0519 -  -  -  -  ; ***************************************************************************************
  150 00:0519 -  -  -  -  ;
  151 00:0519 -  -  -  -  ;									Changes and Updates
  152 00:0519 -  -  -  -  ;
  153 00:0519 -  -  -  -  ; ***************************************************************************************
  154 00:0519 -  -  -  -  ;
  155 00:0519 -  -  -  -  ;		Date			Notes
  156 00:0519 -  -  -  -  ;		==== 			=====
  157 00:0519 -  -  -  -  ;
  158 00:0519 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0519 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0519 -  -  -  -  ; ***************************************************************************************
    2 00:0519 -  -  -  -  ; ***************************************************************************************
    3 00:0519 -  -  -  -  ;
    4 00:0519 -  -  -  -  ;		Name : 		page.asm
    5 00:0519 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0519 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0519 -  -  -  -  ;		Reviewed :	No
    8 00:0519 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0519 -  -  -  -  ;
   10 00:0519 -  -  -  -  ; ***************************************************************************************
   11 00:0519 -  -  -  -  ; ***************************************************************************************
   12 00:0519 -  -  -  -  
   13 00:0519 -  -  -  -  ; ***************************************************************************************
   14 00:0519 -  -  -  -  ;
   15 00:0519 -  -  -  -  ;							page unary function (no bracket)
   16 00:0519 -  -  -  -  ;
   17 00:0519 -  -  -  -  ; ***************************************************************************************
   18 00:0519 -  -  -  -  
   19 00:0519 -  -  -  -  Unary_Page:	;; [page]
   20 00:0519 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:051D D9 -  -  -  			exx
   22 00:051E 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:0522 D9 -  -  -  			exx
   24 00:0523 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0525 C9 -  -  -  			ret
   26 00:0526 -  -  -  -  
   27 00:0526 -  -  -  -  ; ***************************************************************************************
   28 00:0526 -  -  -  -  ;
   29 00:0526 -  -  -  -  ;									Changes and Updates
   30 00:0526 -  -  -  -  ;
   31 00:0526 -  -  -  -  ; ***************************************************************************************
   32 00:0526 -  -  -  -  ;
   33 00:0526 -  -  -  -  ;		Date			Notes
   34 00:0526 -  -  -  -  ;		==== 			=====
   35 00:0526 -  -  -  -  ;
   36 00:0526 -  -  -  -  ; ***************************************************************************************
   37 00:0526 -  -  -  -  			
Listing for file "_build.asm"
   32 00:0526 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:0526 -  -  -  -  ; ***************************************************************************************
    2 00:0526 -  -  -  -  ; ***************************************************************************************
    3 00:0526 -  -  -  -  ;
    4 00:0526 -  -  -  -  ;		Name : 		simple.asm
    5 00:0526 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0526 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0526 -  -  -  -  ;		Reviewed :	No
    8 00:0526 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:0526 -  -  -  -  ;
   10 00:0526 -  -  -  -  ; ***************************************************************************************
   11 00:0526 -  -  -  -  ; ***************************************************************************************
   12 00:0526 -  -  -  -  
   13 00:0526 -  -  -  -  ; ***************************************************************************************
   14 00:0526 -  -  -  -  ;
   15 00:0526 -  -  -  -  ;								( unary function (think about it)
   16 00:0526 -  -  -  -  ;
   17 00:0526 -  -  -  -  ; ***************************************************************************************
   18 00:0526 -  -  -  -  
   19 00:0526 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:0526 CD 52 03 00 		call 	EvaluateAtPrecedence0
   21 00:052A C3 76 01 00 		jp  	CheckRightBracket
   22 00:052E -  -  -  -  
   23 00:052E -  -  -  -  ; ***************************************************************************************
   24 00:052E -  -  -  -  ;
   25 00:052E -  -  -  -  ;									Handle &x
   26 00:052E -  -  -  -  ;
   27 00:052E -  -  -  -  ; ***************************************************************************************
   28 00:052E -  -  -  -  
   29 00:052E -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:052E DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0531 E6 C0 -  -  		and 		$C0
   32 00:0533 FE 40 -  -  		cp 			$40
   33 00:0535 C2 08 02 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0539 C3 42 04 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:053D -  -  -  -  
   36 00:053D -  -  -  -  ; ***************************************************************************************
   37 00:053D -  -  -  -  ;
   38 00:053D -  -  -  -  ;									Changes and Updates
   39 00:053D -  -  -  -  ;
   40 00:053D -  -  -  -  ; ***************************************************************************************
   41 00:053D -  -  -  -  ;
   42 00:053D -  -  -  -  ;		Date			Notes
   43 00:053D -  -  -  -  ;		==== 			=====
   44 00:053D -  -  -  -  ;
   45 00:053D -  -  -  -  ; ***************************************************************************************
   46 00:053D -  -  -  -  		
Listing for file "_build.asm"
   33 00:053D -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:053D -  -  -  -  ; ***************************************************************************************
    2 00:053D -  -  -  -  ; ***************************************************************************************
    3 00:053D -  -  -  -  ;
    4 00:053D -  -  -  -  ;		Name : 		clear.asm
    5 00:053D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:053D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:053D -  -  -  -  ;		Reviewed :	No
    8 00:053D -  -  -  -  ;		Purpose :	Clear command.
    9 00:053D -  -  -  -  ;
   10 00:053D -  -  -  -  ; ***************************************************************************************
   11 00:053D -  -  -  -  ; ***************************************************************************************
   12 00:053D -  -  -  -  
   13 00:053D -  -  -  -  ; ***************************************************************************************
   14 00:053D -  -  -  -  ;
   15 00:053D -  -  -  -  ;										CLEAR command
   16 00:053D -  -  -  -  ;
   17 00:053D -  -  -  -  ; ***************************************************************************************
   18 00:053D -  -  -  -  
   19 00:053D -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:053D -  -  -  -  		;
   21 00:053D -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:053D -  -  -  -  		;
   23 00:053D 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0541 -  -  -  -  _CCFindLow:
   25 00:0541 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0545 5E -  -  -  		ld 		e,(hl)		
   27 00:0546 19 -  -  -  		add 	hl,de
   28 00:0547 7B -  -  -  		ld 		a,e
   29 00:0548 B7 -  -  -  		or 		a
   30 00:0549 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:054B 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:054C 22 00 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:0550 23 -  -  -  		inc 	hl 							; one for luck
   34 00:0551 22 48 00 00 		ld 		(LowAllocMemory),hl
   35 00:0555 -  -  -  -  		;
   36 00:0555 -  -  -  -  		; 	 		Reset the language stack
   37 00:0555 -  -  -  -  		;
   38 00:0555 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:0559 -  -  -  -  		;
   40 00:0559 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:055B 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:055F 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:0563 19 -  -  -  		add 	hl,de
   44 00:0564 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:0566 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:056A -  -  -  -  		;
   47 00:056A 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:056E 19 -  -  -  		add 	hl,de
   49 00:056F 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:0573 -  -  -  -  		;
   51 00:0573 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:0573 -  -  -  -  		;
   53 00:0573 -  -  -  -  
   54 00:0573 -  -  -  -  		;
   55 00:0573 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:0573 -  -  -  -  		;
   57 00:0573 -  -  -  -  
   58 00:0573 -  -  -  -  		;
   59 00:0573 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:0573 -  -  -  -  		;
   61 00:0573 C9 -  -  -  		ret
   62 00:0574 -  -  -  -  
   63 00:0574 -  -  -  -  ; ***************************************************************************************
   64 00:0574 -  -  -  -  ;
   65 00:0574 -  -  -  -  ;									Changes and Updates
   66 00:0574 -  -  -  -  ;
   67 00:0574 -  -  -  -  ; ***************************************************************************************
   68 00:0574 -  -  -  -  ;
   69 00:0574 -  -  -  -  ;		Date			Notes
   70 00:0574 -  -  -  -  ;		==== 			=====
   71 00:0574 -  -  -  -  ;
   72 00:0574 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:0574 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0574 -  -  -  -  ; ***************************************************************************************
    2 00:0574 -  -  -  -  ; ***************************************************************************************
    3 00:0574 -  -  -  -  ;
    4 00:0574 -  -  -  -  ;		Name : 		instance.asm
    5 00:0574 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0574 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0574 -  -  -  -  ;		Reviewed :	No
    8 00:0574 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0574 -  -  -  -  ;
   10 00:0574 -  -  -  -  ; ***************************************************************************************
   11 00:0574 -  -  -  -  ; ***************************************************************************************
   12 00:0574 -  -  -  -  
   13 00:0574 -  -  -  -  ; ***************************************************************************************
   14 00:0574 -  -  -  -  ;
   15 00:0574 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0574 -  -  -  -  ;
   17 00:0574 -  -  -  -  ; ***************************************************************************************
   18 00:0574 -  -  -  -  
   19 00:0574 -  -  -  -  SetCurrentInstance:
   20 00:0574 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0579 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:057D ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0582 -  -  -  -  
   24 00:0582 C9 -  -  -  		ret
   25 00:0583 -  -  -  -  
   26 00:0583 -  -  -  -  
   27 00:0583 -  -  -  -  ; ***************************************************************************************
   28 00:0583 -  -  -  -  ;
   29 00:0583 -  -  -  -  ;									Changes and Updates
   30 00:0583 -  -  -  -  ;
   31 00:0583 -  -  -  -  ; ***************************************************************************************
   32 00:0583 -  -  -  -  ;
   33 00:0583 -  -  -  -  ;		Date			Notes
   34 00:0583 -  -  -  -  ;		==== 			=====
   35 00:0583 -  -  -  -  ;
   36 00:0583 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:0583 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0583 -  -  -  -  ; ***************************************************************************************
    2 00:0583 -  -  -  -  ; ***************************************************************************************
    3 00:0583 -  -  -  -  ;
    4 00:0583 -  -  -  -  ;		Name : 		new.asm
    5 00:0583 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0583 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0583 -  -  -  -  ;		Reviewed :	No
    8 00:0583 -  -  -  -  ;		Purpose :	New command.
    9 00:0583 -  -  -  -  ;
   10 00:0583 -  -  -  -  ; ***************************************************************************************
   11 00:0583 -  -  -  -  ; ***************************************************************************************
   12 00:0583 -  -  -  -  
   13 00:0583 -  -  -  -  ; ***************************************************************************************
   14 00:0583 -  -  -  -  ;
   15 00:0583 -  -  -  -  ;										NEW command
   16 00:0583 -  -  -  -  ;
   17 00:0583 -  -  -  -  ; ***************************************************************************************
   18 00:0583 -  -  -  -  
   19 00:0583 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0583 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0587 36 00 -  -  		ld 		(hl),0
   22 00:0589 CD 3D 05 00 		call 	Command_CLEAR 				; clear all variables
   23 00:058D 3E 00 C3 9E 
              01 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0593 -  -  -  -  
   25 00:0593 -  -  -  -  ; ***************************************************************************************
   26 00:0593 -  -  -  -  ;
   27 00:0593 -  -  -  -  ;									Changes and Updates
   28 00:0593 -  -  -  -  ;
   29 00:0593 -  -  -  -  ; ***************************************************************************************
   30 00:0593 -  -  -  -  ;
   31 00:0593 -  -  -  -  ;		Date			Notes
   32 00:0593 -  -  -  -  ;		==== 			=====
   33 00:0593 -  -  -  -  ;
   34 00:0593 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0593 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0593 -  -  -  -  ; ***************************************************************************************
    2 00:0593 -  -  -  -  ; ***************************************************************************************
    3 00:0593 -  -  -  -  ;
    4 00:0593 -  -  -  -  ;		Name : 		utility.asm
    5 00:0593 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0593 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0593 -  -  -  -  ;		Reviewed :	No
    8 00:0593 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0593 -  -  -  -  ;
   10 00:0593 -  -  -  -  ; ***************************************************************************************
   11 00:0593 -  -  -  -  ; ***************************************************************************************
   12 00:0593 -  -  -  -  
   13 00:0593 -  -  -  -  ; ***************************************************************************************
   14 00:0593 -  -  -  -  ;
   15 00:0593 -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:0593 -  -  -  -  ;
   17 00:0593 -  -  -  -  ; ***************************************************************************************
   18 00:0593 -  -  -  -  
   19 00:0593 -  -  -  -  PrintStringAtHL:
   20 00:0593 7E -  -  -  		ld 		a,(hl)
   21 00:0594 B7 -  -  -  		or 		a
   22 00:0595 C8 -  -  -  		ret 	z
   23 00:0596 CD FF 0A 00 		call 	SYSPrintChar
   24 00:059A 23 -  -  -  		inc 	hl
   25 00:059B 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:059D -  -  -  -  
   27 00:059D -  -  -  -  ; ***************************************************************************************
   28 00:059D -  -  -  -  ;
   29 00:059D -  -  -  -  ;									Changes and Updates
   30 00:059D -  -  -  -  ;
   31 00:059D -  -  -  -  ; ***************************************************************************************
   32 00:059D -  -  -  -  ;
   33 00:059D -  -  -  -  ;		Date			Notes
   34 00:059D -  -  -  -  ;		==== 			=====
   35 00:059D -  -  -  -  ;
   36 00:059D -  -  -  -  ; ***************************************************************************************
   37 00:059D -  -  -  -  		
Listing for file "_build.asm"
   37 00:059D -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:059D -  -  -  -  ;
    2 00:059D -  -  -  -  ;	This file is automatically generated.
    3 00:059D -  -  -  -  ;
    4 00:059D -  -  -  -  ;
    5 00:059D -  -  -  -  ;	Keywords for set 0
    6 00:059D -  -  -  -  ;
    7 00:059D -  -  -  -  KeywordsSet0:
    8 00:059D 01 20 -  -  	.db	1," "              ; $0080
    9 00:059F 01 20 -  -  	.db	1," "              ; $0081
   10 00:05A1 01 20 -  -  	.db	1," "              ; $0082
   11 00:05A3 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:05A5 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:05A7 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:05A9 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:05AB 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:05AF 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:05B3 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:05B5 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:05B7 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:05BA 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:05BD 01 3E -  -  	.db	1,">"              ; $008d
   22 00:05BF 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:05C1 01 3D -  -  	.db	1,"="              ; $008f
   24 00:05C3 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:05C6 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:05CA 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:05CD 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:05D1 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:05D3 01 28 -  -  	.db	1,"("              ; $0095
   30 00:05D5 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:05D7 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:05DB 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:05DF 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:05E3 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:05E7 03 49 4E 54 	.db	3,"INT"            ; $009b
   36 00:05EB 03 53 54 52 	.db	3,"STR"            ; $009c
   37 00:05EF 03 43 48 52 	.db	3,"CHR"            ; $009d
   38 00:05F3 03 41 53 43 	.db	3,"ASC"            ; $009e
   39 00:05F7 03 4E 4F 54 	.db	3,"NOT"            ; $009f
   40 00:05FB 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $00a0
   41 00:0600 06 53 54 52 
              49 4E 47 -  	.db	6,"STRING"         ; $00a1
   42 00:0607 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a2
   43 00:060C 03 54 4F 50 	.db	3,"TOP"            ; $00a3
   44 00:0610 01 29 -  -  	.db	1,")"              ; $00a4
   45 00:0612 01 2C -  -  	.db	1,","              ; $00a5
   46 00:0614 01 3A -  -  	.db	1,":"              ; $00a6
   47 00:0616 01 3B -  -  	.db	1,";"              ; $00a7
   48 00:0618 01 27 -  -  	.db	1,"'"              ; $00a8
   49 00:061A 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a9
   50 00:0621 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00aa
   51 00:0627 02 49 46 -  	.db	2,"IF"             ; $00ab
   52 00:062A 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ac
   53 00:062F 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ad
   54 00:0634 03 46 4F 52 	.db	3,"FOR"            ; $00ae
   55 00:0638 02 54 4F -  	.db	2,"TO"             ; $00af
   56 00:063B 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b0
   57 00:0640 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b1
   58 00:0645 03 44 45 46 	.db	3,"DEF"            ; $00b2
   59 00:0649 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b3
   60 00:064E 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b4
   61 00:0656 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b5
   62 00:065C 03 44 49 4D 	.db	3,"DIM"            ; $00b6
   63 00:0660 03 52 45 4D 	.db	3,"REM"            ; $00b7
   64 00:0664 03 4C 45 54 	.db	3,"LET"            ; $00b8
   65 00:0668 03 56 44 55 	.db	3,"VDU"            ; $00b9
   66 00:066C 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00ba
   67 00:0672 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bb
   68 00:0677 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bc
   69 00:067C 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bd
   70 00:0681 03 4E 45 57 	.db	3,"NEW"            ; $00be
   71 00:0685 03 52 55 4E 	.db	3,"RUN"            ; $00bf
   72 00:0689 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c0
   73 00:068E 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c1
   74 00:0693 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c2
   75 00:069B 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c3
   76 00:06A2 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c4
   77 00:06A8 03 45 4E 44 	.db	3,"END"            ; $00c5
   78 00:06AC 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c6
   79 00:06B1 00 -  -  -  	.db	0
   80 00:06B2 -  -  -  -  ;
   81 00:06B2 -  -  -  -  ;	Keywords for set 1
   82 00:06B2 -  -  -  -  ;
   83 00:06B2 -  -  -  -  KeywordsSet1:
   84 00:06B2 00 -  -  -  	.db	0
   85 00:06B3 -  -  -  -  ;
   86 00:06B3 -  -  -  -  ;	Keywords for set 2
   87 00:06B3 -  -  -  -  ;
   88 00:06B3 -  -  -  -  KeywordsSet2:
   89 00:06B3 00 -  -  -  	.db	0
Listing for file "_build.asm"
   38 00:06B4 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:06B4 -  -  -  -  ;
    2 00:06B4 -  -  -  -  ;	This file is automatically generated.
    3 00:06B4 -  -  -  -  ;
    4 00:06B4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 00:06C0 -  -  -  -  PrecedenceTable:
    6 00:06C0 06 -  -  -  	.db	6	; $0083 !
    7 00:06C1 06 -  -  -  	.db	6	; $0084 ?
    8 00:06C2 05 -  -  -  	.db	5	; $0085 *
    9 00:06C3 05 -  -  -  	.db	5	; $0086 /
   10 00:06C4 05 -  -  -  	.db	5	; $0087 mod
   11 00:06C5 05 -  -  -  	.db	5	; $0088 div
   12 00:06C6 04 -  -  -  	.db	4	; $0089 +
   13 00:06C7 04 -  -  -  	.db	4	; $008a -
   14 00:06C8 03 -  -  -  	.db	3	; $008b >=
   15 00:06C9 03 -  -  -  	.db	3	; $008c <=
   16 00:06CA 03 -  -  -  	.db	3	; $008d >
   17 00:06CB 03 -  -  -  	.db	3	; $008e <
   18 00:06CC 03 -  -  -  	.db	3	; $008f =
   19 00:06CD 03 -  -  -  	.db	3	; $0090 <>
   20 00:06CE 02 -  -  -  	.db	2	; $0091 and
   21 00:06CF 01 -  -  -  	.db	1	; $0092 or
   22 00:06D0 01 -  -  -  	.db	1	; $0093 eor
   23 00:06D1 -  -  -  -  
Listing for file "_build.asm"
   39 00:06D1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:06D1 -  -  -  -  ;
    2 00:06D1 -  -  -  -  ;	This is automatically generated.
    3 00:06D1 -  -  -  -  ;
    4 00:06D1 -  -  -  -  ErrorIDTable:
    5 00:06D1 09 07 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:06D5 0F 07 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:06D9 20 07 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:06DD 2E 07 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:06E1 38 07 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:06E5 52 07 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:06E9 63 07 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:06ED 71 07 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:06F1 7F 07 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 00:06F5 95 07 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 00:06F9 A3 07 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 00:06FD A8 07 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 00:0701 B5 07 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 00:0705 C6 07 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 00:0709 -  -  -  -  
   20 00:0709 -  -  -  -  ErrText_warmstart:
   21 00:0709 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 00:070F -  -  -  -  ErrText_assert:
   23 00:070F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 00:0720 -  -  -  -  ErrText_badtype:
   25 00:0720 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 00:072E -  -  -  -  ErrText_badvalue:
   27 00:072E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 00:0738 -  -  -  -  ErrText_disabled:
   29 00:0738 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 00:0752 -  -  -  -  ErrText_divzero:
   31 00:0752 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 00:0763 -  -  -  -  ErrText_memory:
   33 00:0763 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 00:0771 -  -  -  -  ErrText_nocomma:
   35 00:0771 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 00:077F -  -  -  -  ErrText_norbracket:
   37 00:077F 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 00:0795 -  -  -  -  ErrText_notref:
   39 00:0795 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 00:07A3 -  -  -  -  ErrText_stop:
   41 00:07A3 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 00:07A8 -  -  -  -  ErrText_syntax:
   43 00:07A8 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 00:07B5 -  -  -  -  ErrText_todo:
   45 00:07B5 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 00:07C6 -  -  -  -  ErrText_unknownvar:
   47 00:07C6 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   40 00:07D7 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:07D7 -  -  -  -  ;
    2 00:07D7 -  -  -  -  ;	Vectors for set 0
    3 00:07D7 -  -  -  -  ;
    4 00:07D7 -  -  -  -  VectorsSet0:
    5 00:07D7 D0 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:07DB 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:07DF 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:07E3 7E 02 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:07E7 87 02 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:07EB 2A 02 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:07EF 38 02 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:07F3 46 02 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:07F7 38 02 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:07FB 0E 02 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:07FF 1C 02 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0803 E5 02 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0807 DB 02 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:080B C7 02 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:080F BD 02 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0813 B3 02 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0817 D1 02 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:081B 54 02 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:081F 62 02 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0823 70 02 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0827 2E 05 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:082B 26 05 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:082F 24 00 00 00 	addr(Unimplemented)              ; $0096 $
   28 00:0833 24 00 00 00 	addr(Unimplemented)              ; $0097 rnd
   29 00:0837 24 00 00 00 	addr(Unimplemented)              ; $0098 len
   30 00:083B 24 00 00 00 	addr(Unimplemented)              ; $0099 abs
   31 00:083F 24 00 00 00 	addr(Unimplemented)              ; $009a sgn
   32 00:0843 24 00 00 00 	addr(Unimplemented)              ; $009b int
   33 00:0847 24 00 00 00 	addr(Unimplemented)              ; $009c str
   34 00:084B 24 00 00 00 	addr(Unimplemented)              ; $009d chr
   35 00:084F 24 00 00 00 	addr(Unimplemented)              ; $009e asc
   36 00:0853 24 00 00 00 	addr(Unimplemented)              ; $009f not
   37 00:0857 19 05 00 00 	addr(Unary_Page)                 ; $00a0 page
   38 00:085B 24 00 00 00 	addr(Unimplemented)              ; $00a1 string
   39 00:085F 24 00 00 00 	addr(Unimplemented)              ; $00a2 time
   40 00:0863 24 00 00 00 	addr(Unimplemented)              ; $00a3 top
   41 00:0867 C5 00 00 00 	addr(BadCmd_RBracket)            ; $00a4 )
   42 00:086B C5 00 00 00 	addr(BadCmd_Comma)               ; $00a5 ,
   43 00:086F C9 00 00 00 	addr(Command_Colon)              ; $00a6 :
   44 00:0873 C5 00 00 00 	addr(BadCmd_SemiColon)           ; $00a7 ;
   45 00:0877 E7 00 00 00 	addr(Command_REM2)               ; $00a8 '
   46 00:087B 24 00 00 00 	addr(Unimplemented)              ; $00a9 repeat
   47 00:087F 24 00 00 00 	addr(Unimplemented)              ; $00aa until
   48 00:0883 24 00 00 00 	addr(Unimplemented)              ; $00ab if
   49 00:0887 C5 00 00 00 	addr(BadCmd_Then)                ; $00ac then
   50 00:088B 24 00 00 00 	addr(Unimplemented)              ; $00ad else
   51 00:088F 24 00 00 00 	addr(Unimplemented)              ; $00ae for
   52 00:0893 C5 00 00 00 	addr(BadCmd_To)                  ; $00af to
   53 00:0897 24 00 00 00 	addr(Unimplemented)              ; $00b0 step
   54 00:089B 24 00 00 00 	addr(Unimplemented)              ; $00b1 next
   55 00:089F C5 00 00 00 	addr(BadCmd_Defproc)             ; $00b2 def
   56 00:08A3 24 00 00 00 	addr(Unimplemented)              ; $00b3 proc
   57 00:08A7 24 00 00 00 	addr(Unimplemented)              ; $00b4 endproc
   58 00:08AB 24 00 00 00 	addr(Unimplemented)              ; $00b5 local
   59 00:08AF 24 00 00 00 	addr(Unimplemented)              ; $00b6 dim
   60 00:08B3 E7 00 00 00 	addr(Command_REM)                ; $00b7 rem
   61 00:08B7 24 00 00 00 	addr(Unimplemented)              ; $00b8 let
   62 00:08BB 24 00 00 00 	addr(Unimplemented)              ; $00b9 vdu
   63 00:08BF 24 00 00 00 	addr(Unimplemented)              ; $00ba print
   64 00:08C3 24 00 00 00 	addr(Unimplemented)              ; $00bb load
   65 00:08C7 24 00 00 00 	addr(Unimplemented)              ; $00bc save
   66 00:08CB 24 00 00 00 	addr(Unimplemented)              ; $00bd list
   67 00:08CF 83 05 00 00 	addr(Command_NEW)                ; $00be new
   68 00:08D3 04 01 00 00 	addr(Command_RUN)                ; $00bf run
   69 00:08D7 24 00 00 00 	addr(Unimplemented)              ; $00c0 read
   70 00:08DB 24 00 00 00 	addr(Unimplemented)              ; $00c1 data
   71 00:08DF 24 00 00 00 	addr(Unimplemented)              ; $00c2 restore
   72 00:08E3 B4 00 00 00 	addr(Command_ASSERT)             ; $00c3 assert
   73 00:08E7 3D 05 00 00 	addr(Command_CLEAR)              ; $00c4 clear
   74 00:08EB CA 00 00 00 	addr(Command_END)                ; $00c5 end
   75 00:08EF 70 01 00 00 	addr(Command_STOP)               ; $00c6 stop
   76 00:08F3 -  -  -  -  ;
   77 00:08F3 -  -  -  -  ;	Vectors for set 1
   78 00:08F3 -  -  -  -  ;
   79 00:08F3 -  -  -  -  VectorsSet1:
   80 00:08F3 -  -  -  -  ;
   81 00:08F3 -  -  -  -  ;	Vectors for set 2
   82 00:08F3 -  -  -  -  ;
   83 00:08F3 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   41 00:08F3 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:08F3 -  -  -  -  ; ***************************************************************************************
    2 00:08F3 -  -  -  -  ; ***************************************************************************************
    3 00:08F3 -  -  -  -  ;
    4 00:08F3 -  -  -  -  ;		Name : 		idivide.asm
    5 00:08F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F3 -  -  -  -  ;		Reviewed :	No
    8 00:08F3 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:08F3 -  -  -  -  ;
   10 00:08F3 -  -  -  -  ; ***************************************************************************************
   11 00:08F3 -  -  -  -  ; ***************************************************************************************
   12 00:08F3 -  -  -  -  
   13 00:08F3 -  -  -  -  ; ***************************************************************************************
   14 00:08F3 -  -  -  -  ;
   15 00:08F3 -  -  -  -  ;								Unsigned integer divide
   16 00:08F3 -  -  -  -  ;
   17 00:08F3 -  -  -  -  ; ***************************************************************************************
   18 00:08F3 -  -  -  -  
   19 00:08F3 -  -  -  -  Int32UDivide:
   20 00:08F3 37 -  -  -  		scf
   21 00:08F4 C3 38 09 00 		jp 		_I32UnsignedDivide		
   22 00:08F8 -  -  -  -  
   23 00:08F8 -  -  -  -  ; ***************************************************************************************
   24 00:08F8 -  -  -  -  ;
   25 00:08F8 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:08F8 -  -  -  -  ;
   27 00:08F8 -  -  -  -  ; ***************************************************************************************
   28 00:08F8 -  -  -  -  
   29 00:08F8 -  -  -  -  Int32SDivide:
   30 00:08F8 37 -  -  -  		scf
   31 00:08F9 18 01 -  -  		jr 		_I32SDivide
   32 00:08FB -  -  -  -  Int32Modulus:
   33 00:08FB AF -  -  -  		xor 	a
   34 00:08FC -  -  -  -  _I32SDivide:
   35 00:08FC 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:08FD F5 -  -  -  		push 	af
   37 00:08FE 08 -  -  -  		ex 		af,af'
   38 00:08FF -  -  -  -  
   39 00:08FF D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0900 D9 -  -  -  		exx
   41 00:0901 D5 -  -  -  		push 	de
   42 00:0902 D9 -  -  -  		exx
   43 00:0903 -  -  -  -  
   44 00:0903 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0904 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0905 CD 25 09 00 		call 	_I32CheckHLSignSwap
   47 00:0909 CD 25 09 00 		call 	_I32CheckHLSignSwap
   48 00:090D 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:090E F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:090F F5 -  -  -  		push 	af
   51 00:0910 CD 38 09 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0914 F1 -  -  -  		pop 	af 							; get function back
   53 00:0915 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0917 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0918 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:091A C4 9A 0A 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:091E -  -  -  -  _I32SDExit:
   58 00:091E D9 -  -  -  		exx 								; restore DE'DE
   59 00:091F D1 -  -  -  		pop 	de
   60 00:0920 D9 -  -  -  		exx
   61 00:0921 D1 -  -  -  		pop 	de
   62 00:0922 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0923 08 -  -  -  		ex 		af,af'
   64 00:0924 C9 -  -  -  		ret
   65 00:0925 -  -  -  -  
   66 00:0925 -  -  -  -  
   67 00:0925 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0925 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0926 CB 7C -  -  		bit 	7,h
   70 00:0928 D9 -  -  -  		exx
   71 00:0929 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:092B -  -  -  -  		;
   73 00:092B C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:092D F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:092E CD 9A 0A 00 		call 	Int32Negate 				
   76 00:0932 F1 -  -  -  		pop 	af
   77 00:0933 -  -  -  -  _I32CHSPositive:
   78 00:0933 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0934 EB -  -  -  		ex 		de,hl
   80 00:0935 D9 -  -  -  		exx		
   81 00:0936 EB -  -  -  		ex 		de,hl
   82 00:0937 C9 -  -  -  		ret
   83 00:0938 -  -  -  -  
   84 00:0938 -  -  -  -  ; ***************************************************************************************
   85 00:0938 -  -  -  -  ;
   86 00:0938 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0938 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0938 -  -  -  -  ;
   89 00:0938 -  -  -  -  ; ***************************************************************************************
   90 00:0938 -  -  -  -  
   91 00:0938 -  -  -  -  _I32UnsignedDivide:
   92 00:0938 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0939 D5 -  -  -  		push 	de
   94 00:093A D9 -  -  -  		exx
   95 00:093B C5 -  -  -  		push 	bc
   96 00:093C D5 -  -  -  		push 	de 							
   97 00:093D D9 -  -  -  		exx
   98 00:093E -  -  -  -  
   99 00:093E F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:093F -  -  -  -  
  101 00:093F 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0940 B3 -  -  -  		or 		e
  103 00:0941 D9 -  -  -  		exx
  104 00:0942 B2 -  -  -  		or 		d
  105 00:0943 B3 -  -  -  		or 		e
  106 00:0944 D9 -  -  -  		exx
  107 00:0945 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0949 -  -  -  -  
  109 00:0949 -  -  -  -  
  110 00:0949 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:094A 4D -  -  -  		ld		c,l
  112 00:094B 21 00 00 00 		ld 		hl,$0000
  113 00:094F D9 -  -  -  		exx
  114 00:0950 44 -  -  -  		ld 		b,h
  115 00:0951 4D -  -  -  		ld		c,l
  116 00:0952 21 00 00 00 		ld 		hl,$0000
  117 00:0956 D9 -  -  -  		exx
  118 00:0957 -  -  -  -  
  119 00:0957 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0959 -  -  -  -  _I32DivideLoop:
  121 00:0959 F5 -  -  -  		push 	af
  122 00:095A -  -  -  -  
  123 00:095A CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:095C CB 10 -  -  		rl 		b
  125 00:095E D9 -  -  -  		exx
  126 00:095F CB 11 -  -  		rl 		c
  127 00:0961 CB 10 -  -  		rl 		b
  128 00:0963 D9 -  -  -  		exx
  129 00:0964 CB 15 -  -  		rl 		l
  130 00:0966 CB 14 -  -  		rl 		h
  131 00:0968 D9 -  -  -  		exx
  132 00:0969 CB 15 -  -  		rl 		l
  133 00:096B CB 14 -  -  		rl 		h
  134 00:096D D9 -  -  -  		exx
  135 00:096E -  -  -  -  
  136 00:096E CD 38 0A 00 		call 	Int32Subtract 				; A = A - M
  137 00:0972 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0974 -  -  -  -  
  139 00:0974 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0975 18 04 -  -  		jr 		_I32Next
  141 00:0977 -  -  -  -  
  142 00:0977 -  -  -  -  _I32Borrow:
  143 00:0977 CD 30 0A 00 		call 	Int32Add 					; A = A + M
  144 00:097B -  -  -  -  _I32Next:
  145 00:097B F1 -  -  -  		pop 	af
  146 00:097C 3D -  -  -  		dec 	a
  147 00:097D 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:097F -  -  -  -  
  149 00:097F F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0980 -  -  -  -  
  151 00:0980 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0981 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0983 -  -  -  -  
  154 00:0983 60 -  -  -  		ld  	h,b
  155 00:0984 69 -  -  -  		ld 		l,c
  156 00:0985 D9 -  -  -  		exx
  157 00:0986 60 -  -  -  		ld  	h,b
  158 00:0987 69 -  -  -  		ld 		l,c
  159 00:0988 D9 -  -  -  		exx
  160 00:0989 -  -  -  -  _I32Modulus1:		
  161 00:0989 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:098A D1 -  -  -  		pop 	de
  163 00:098B C1 -  -  -  		pop 	bc
  164 00:098C D9 -  -  -  		exx
  165 00:098D D1 -  -  -  		pop 	de
  166 00:098E C1 -  -  -  		pop 	bc
  167 00:098F C9 -  -  -  		ret
  168 00:0990 -  -  -  -  
  169 00:0990 -  -  -  -  ; ***************************************************************************************
  170 00:0990 -  -  -  -  ;
  171 00:0990 -  -  -  -  ;									Changes and Updates
  172 00:0990 -  -  -  -  ;
  173 00:0990 -  -  -  -  ; ***************************************************************************************
  174 00:0990 -  -  -  -  ;
  175 00:0990 -  -  -  -  ;		Date			Notes
  176 00:0990 -  -  -  -  ;		==== 			=====
  177 00:0990 -  -  -  -  ;
  178 00:0990 -  -  -  -  ; ***************************************************************************************
  179 00:0990 -  -  -  -  		
Listing for file "_build.asm"
   42 00:0990 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0990 -  -  -  -  ; ***************************************************************************************
    2 00:0990 -  -  -  -  ; ***************************************************************************************
    3 00:0990 -  -  -  -  ;
    4 00:0990 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0990 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0990 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0990 -  -  -  -  ;		Reviewed :	No
    8 00:0990 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0990 -  -  -  -  ;
   10 00:0990 -  -  -  -  ; ***************************************************************************************
   11 00:0990 -  -  -  -  ; ***************************************************************************************
   12 00:0990 -  -  -  -  
   13 00:0990 -  -  -  -  ; ***************************************************************************************
   14 00:0990 -  -  -  -  ;
   15 00:0990 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0990 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0990 -  -  -  -  ;
   18 00:0990 -  -  -  -  ; ***************************************************************************************
   19 00:0990 -  -  -  -  
   20 00:0990 -  -  -  -  Int32FromString:
   21 00:0990 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0991 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0992 D5 -  -  -  		push 	de
   24 00:0993 D9 -  -  -  		exx
   25 00:0994 D5 -  -  -  		push 	de
   26 00:0995 -  -  -  -  
   27 00:0995 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0999 11 00 00 00 		ld 		de,$0000
   29 00:099D D9 -  -  -  		exx
   30 00:099E 21 00 00 00 		ld 		hl,$0000
   31 00:09A2 11 00 00 00 		ld 		de,$0000
   32 00:09A6 D9 -  -  -  		exx
   33 00:09A7 -  -  -  -  
   34 00:09A7 5F -  -  -  		ld 		e,a 						; base in E
   35 00:09A8 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:09AA 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:09AC ED 44 -  -  		neg 		 						; fix up the base
   38 00:09AE 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:09AF -  -  -  -  		;
   40 00:09AF 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:09B0 F5 -  -  -  		push 	af
   42 00:09B1 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:09B3 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:09B4 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:09B6 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:09B7 18 01 -  -  		jr 		_I32FSMain
   47 00:09B9 -  -  -  -  _I32FSNotSigned:		
   48 00:09B9 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:09BA -  -  -  -  		;
   50 00:09BA -  -  -  -  		; 		Main conversion loop.
   51 00:09BA -  -  -  -  		; 		
   52 00:09BA -  -  -  -  _I32FSMain:		
   53 00:09BA 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:09BB FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:09BD 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:09BF D6 20 -  -  		sub 	32
   57 00:09C1 -  -  -  -  _I32FSNotLower:
   58 00:09C1 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:09C3 38 23 -  -  		jr 		c,_I32FSExit
   60 00:09C5 FE 3A -  -  		cp 		'9'+1
   61 00:09C7 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:09C9 FE 41 -  -  		cp 		'A'
   63 00:09CB 38 1B -  -  		jr 		c,_I32FSExit
   64 00:09CD FE 47 -  -  		cp 		'F'+1
   65 00:09CF 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:09D1 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:09D3 -  -  -  -  _I32FSOkay:
   68 00:09D3 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:09D5 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:09D6 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:09D8 03 -  -  -  		inc 	bc 							; consume character
   72 00:09D9 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:09DA F5 -  -  -  		push 	af 							; save additive on stack
   74 00:09DB CD F7 09 00 		call 	Int32Multiply 				; result *= base
   75 00:09DF F1 -  -  -  		pop 	af 							; additive in DE
   76 00:09E0 5F -  -  -  		ld 		e,a
   77 00:09E1 CD 30 0A 00 		call 	Int32Add 					; and add it.
   78 00:09E5 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:09E6 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:09E8 -  -  -  -  
   81 00:09E8 -  -  -  -  _I32FSExit:
   82 00:09E8 F1 -  -  -  		pop 	af 							; get sign back
   83 00:09E9 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:09EB CC 9A 0A 00 		call 	z,Int32Negate
   85 00:09EF 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:09F0 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:09F1 D9 -  -  -  		exx
   88 00:09F2 D1 -  -  -  		pop 	de
   89 00:09F3 D9 -  -  -  		exx
   90 00:09F4 C1 -  -  -  		pop 	bc
   91 00:09F5 B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 00:09F6 C9 -  -  -  		ret				
   93 00:09F7 -  -  -  -  
   94 00:09F7 -  -  -  -  ; ***************************************************************************************
   95 00:09F7 -  -  -  -  ;
   96 00:09F7 -  -  -  -  ;									Changes and Updates
   97 00:09F7 -  -  -  -  ;
   98 00:09F7 -  -  -  -  ; ***************************************************************************************
   99 00:09F7 -  -  -  -  ;
  100 00:09F7 -  -  -  -  ;		Date			Notes
  101 00:09F7 -  -  -  -  ;		==== 			=====
  102 00:09F7 -  -  -  -  ;
  103 00:09F7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:09F7 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:09F7 -  -  -  -  ; ***************************************************************************************
    2 00:09F7 -  -  -  -  ; ***************************************************************************************
    3 00:09F7 -  -  -  -  ;
    4 00:09F7 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:09F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09F7 -  -  -  -  ;		Reviewed :	No
    8 00:09F7 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:09F7 -  -  -  -  ;
   10 00:09F7 -  -  -  -  ; ***************************************************************************************
   11 00:09F7 -  -  -  -  ; ***************************************************************************************
   12 00:09F7 -  -  -  -  
   13 00:09F7 -  -  -  -  Int32Multiply:
   14 00:09F7 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:09F8 D5 -  -  -  		push 	de
   16 00:09F9 44 -  -  -  		ld 		b,h
   17 00:09FA 4D -  -  -  		ld 		c,l
   18 00:09FB 21 00 00 00 		ld 		hl,$0000
   19 00:09FF -  -  -  -  
   20 00:09FF D9 -  -  -  		exx
   21 00:0A00 C5 -  -  -  		push 	bc
   22 00:0A01 D5 -  -  -  		push 	de
   23 00:0A02 44 -  -  -  		ld 		b,h
   24 00:0A03 4D -  -  -  		ld 		c,l
   25 00:0A04 21 00 00 00 		ld 		hl,$0000		
   26 00:0A08 D9 -  -  -  		exx
   27 00:0A09 -  -  -  -  
   28 00:0A09 -  -  -  -  _I32MultiplyLoop:
   29 00:0A09 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0A0B C4 30 0A 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0A0F -  -  -  -  		;
   32 00:0A0F D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0A10 CB 38 -  -  		srl 	b
   34 00:0A12 CB 19 -  -  		rr 		c
   35 00:0A14 D9 -  -  -  		exx
   36 00:0A15 CB 18 -  -  		rr 		b
   37 00:0A17 CB 19 -  -  		rr 		c
   38 00:0A19 -  -  -  -  		;
   39 00:0A19 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0A1B CB 12 -  -  		rl 		d
   41 00:0A1D D9 -  -  -  		exx
   42 00:0A1E CB 13 -  -  		rl 		e
   43 00:0A20 CB 12 -  -  		rl 		d
   44 00:0A22 -  -  -  -  
   45 00:0A22 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0A23 B1 -  -  -  		or 		c
   47 00:0A24 D9 -  -  -  		exx
   48 00:0A25 B0 -  -  -  		or 		b
   49 00:0A26 B1 -  -  -  		or 		c
   50 00:0A27 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0A29 -  -  -  -  
   52 00:0A29 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0A2A D1 -  -  -  		pop 	de
   54 00:0A2B C1 -  -  -  		pop 	bc
   55 00:0A2C D9 -  -  -  		exx
   56 00:0A2D D1 -  -  -  		pop 	de
   57 00:0A2E C1 -  -  -  		pop 	bc
   58 00:0A2F C9 -  -  -  		ret
   59 00:0A30 -  -  -  -  
   60 00:0A30 -  -  -  -  ; ***************************************************************************************
   61 00:0A30 -  -  -  -  ;
   62 00:0A30 -  -  -  -  ;									Changes and Updates
   63 00:0A30 -  -  -  -  ;
   64 00:0A30 -  -  -  -  ; ***************************************************************************************
   65 00:0A30 -  -  -  -  ;
   66 00:0A30 -  -  -  -  ;		Date			Notes
   67 00:0A30 -  -  -  -  ;		==== 			=====
   68 00:0A30 -  -  -  -  ;
   69 00:0A30 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0A30 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0A30 -  -  -  -  ; ***************************************************************************************
    2 00:0A30 -  -  -  -  ; ***************************************************************************************
    3 00:0A30 -  -  -  -  ;
    4 00:0A30 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0A30 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A30 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A30 -  -  -  -  ;		Reviewed :	No
    8 00:0A30 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0A30 -  -  -  -  ;
   10 00:0A30 -  -  -  -  ; ***************************************************************************************
   11 00:0A30 -  -  -  -  ; ***************************************************************************************
   12 00:0A30 -  -  -  -  
   13 00:0A30 -  -  -  -  ; ***************************************************************************************
   14 00:0A30 -  -  -  -  ;
   15 00:0A30 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0A30 -  -  -  -  ;
   17 00:0A30 -  -  -  -  ; ***************************************************************************************
   18 00:0A30 -  -  -  -  
   19 00:0A30 -  -  -  -  Int32Add:
   20 00:0A30 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0A32 D9 -  -  -  		exx
   22 00:0A33 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0A36 D9 -  -  -  		exx
   24 00:0A37 C9 -  -  -  		ret
   25 00:0A38 -  -  -  -  
   26 00:0A38 -  -  -  -  ; ***************************************************************************************
   27 00:0A38 -  -  -  -  ;
   28 00:0A38 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0A38 -  -  -  -  ;
   30 00:0A38 -  -  -  -  ; ***************************************************************************************
   31 00:0A38 -  -  -  -  
   32 00:0A38 -  -  -  -  Int32Subtract:
   33 00:0A38 AF -  -  -  		xor 	a 							; clear carry
   34 00:0A39 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0A3C D9 -  -  -  		exx
   36 00:0A3D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0A40 D9 -  -  -  		exx
   38 00:0A41 C9 -  -  -  		ret
   39 00:0A42 -  -  -  -  
   40 00:0A42 -  -  -  -  ; ***************************************************************************************
   41 00:0A42 -  -  -  -  ;
   42 00:0A42 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0A42 -  -  -  -  ;
   44 00:0A42 -  -  -  -  ; ***************************************************************************************
   45 00:0A42 -  -  -  -  
   46 00:0A42 -  -  -  -  Int32And:
   47 00:0A42 D9 -  -  -  		exx
   48 00:0A43 CD 48 0A 00 		call 	_I32AndHLDE
   49 00:0A47 D9 -  -  -  		exx
   50 00:0A48 -  -  -  -  _I32AndHLDE:		
   51 00:0A48 7C -  -  -  		ld 		a,h
   52 00:0A49 A2 -  -  -  		and 	d
   53 00:0A4A 67 -  -  -  		ld 		h,a
   54 00:0A4B 7D -  -  -  		ld 		a,l
   55 00:0A4C A3 -  -  -  		and 	e
   56 00:0A4D 6F -  -  -  		ld 		l,a
   57 00:0A4E C9 -  -  -  		ret
   58 00:0A4F -  -  -  -  
   59 00:0A4F -  -  -  -  ; ***************************************************************************************
   60 00:0A4F -  -  -  -  ;
   61 00:0A4F -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0A4F -  -  -  -  ;
   63 00:0A4F -  -  -  -  ; ***************************************************************************************
   64 00:0A4F -  -  -  -  
   65 00:0A4F -  -  -  -  Int32Or:
   66 00:0A4F D9 -  -  -  		exx
   67 00:0A50 CD 55 0A 00 		call 	_I32OrHLDE
   68 00:0A54 D9 -  -  -  		exx
   69 00:0A55 -  -  -  -  _I32OrHLDE:		
   70 00:0A55 7C -  -  -  		ld 		a,h
   71 00:0A56 B2 -  -  -  		or 		d
   72 00:0A57 67 -  -  -  		ld 		h,a
   73 00:0A58 7D -  -  -  		ld 		a,l
   74 00:0A59 B3 -  -  -  		or 		e
   75 00:0A5A 6F -  -  -  		ld 		l,a
   76 00:0A5B C9 -  -  -  		ret
   77 00:0A5C -  -  -  -  
   78 00:0A5C -  -  -  -  ; ***************************************************************************************
   79 00:0A5C -  -  -  -  ;
   80 00:0A5C -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0A5C -  -  -  -  ;
   82 00:0A5C -  -  -  -  ; ***************************************************************************************
   83 00:0A5C -  -  -  -  
   84 00:0A5C -  -  -  -  Int32Xor:
   85 00:0A5C D9 -  -  -  		exx
   86 00:0A5D CD 62 0A 00 		call 	_I32XorHLDE
   87 00:0A61 D9 -  -  -  		exx
   88 00:0A62 -  -  -  -  _I32XorHLDE:		
   89 00:0A62 7C -  -  -  		ld 		a,h
   90 00:0A63 AA -  -  -  		xor 	d
   91 00:0A64 67 -  -  -  		ld 		h,a
   92 00:0A65 7D -  -  -  		ld 		a,l
   93 00:0A66 AB -  -  -  		xor 	e
   94 00:0A67 6F -  -  -  		ld 		l,a
   95 00:0A68 C9 -  -  -  		ret
   96 00:0A69 -  -  -  -  
   97 00:0A69 -  -  -  -  ; ***************************************************************************************
   98 00:0A69 -  -  -  -  ;
   99 00:0A69 -  -  -  -  ;								 Check if HL'HL zero
  100 00:0A69 -  -  -  -  ;
  101 00:0A69 -  -  -  -  ; ***************************************************************************************
  102 00:0A69 -  -  -  -  
  103 00:0A69 -  -  -  -  Int32Zero:
  104 00:0A69 D9 -  -  -  		exx
  105 00:0A6A 7D -  -  -  		ld 		a,l
  106 00:0A6B B4 -  -  -  		or 		h
  107 00:0A6C D9 -  -  -  		exx
  108 00:0A6D B5 -  -  -  		or 		l
  109 00:0A6E B4 -  -  -  		or 		h
  110 00:0A6F C9 -  -  -  		ret
  111 00:0A70 -  -  -  -  
  112 00:0A70 -  -  -  -  ; ***************************************************************************************
  113 00:0A70 -  -  -  -  ;
  114 00:0A70 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0A70 -  -  -  -  ;
  116 00:0A70 -  -  -  -  ; ***************************************************************************************
  117 00:0A70 -  -  -  -  
  118 00:0A70 -  -  -  -  Int32Compare:
  119 00:0A70 E5 -  -  -  		push 	hl 							; save HL
  120 00:0A71 AF -  -  -  		xor 	a 							; clear carry
  121 00:0A72 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0A75 D9 -  -  -  		exx
  123 00:0A76 E5 -  -  -  		push 	hl 							; save HL'
  124 00:0A77 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0A7A -  -  -  -  		;
  126 00:0A7A 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0A7B E2 83 0A 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0A7F 78 -  -  -  		ld 		a,b
  129 00:0A80 EE 80 -  -  		xor 	$80
  130 00:0A82 47 -  -  -  		ld 		b,a
  131 00:0A83 -  -  -  -  _I32CNoOverflow:
  132 00:0A83 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0A84 B5 -  -  -  		or 		l
  134 00:0A85 D9 -  -  -  		exx 
  135 00:0A86 B4 -  -  -  		or 		h
  136 00:0A87 B5 -  -  -  		or 		l
  137 00:0A88 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0A8A -  -  -  -  		;
  139 00:0A8A D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0A8B CB 78 -  -  		bit 	7,b
  141 00:0A8D D9 -  -  -  		exx
  142 00:0A8E 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0A90 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0A92 3E FF -  -  		ld 		a,$FF
  145 00:0A94 -  -  -  -  _I32NotPos:
  146 00:0A94 D9 -  -  -  		exx
  147 00:0A95 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0A96 D9 -  -  -  		exx
  149 00:0A97 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0A98 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0A99 C9 -  -  -  		ret
  152 00:0A9A -  -  -  -  
  153 00:0A9A -  -  -  -  ; ***************************************************************************************
  154 00:0A9A -  -  -  -  ;
  155 00:0A9A -  -  -  -  ;										Negate HL'HL
  156 00:0A9A -  -  -  -  ;
  157 00:0A9A -  -  -  -  ; ***************************************************************************************
  158 00:0A9A -  -  -  -  
  159 00:0A9A -  -  -  -  Int32Negate:
  160 00:0A9A AF -  -  -  		xor 	a
  161 00:0A9B CD A6 0A 00 		call 	_I32NSubtract
  162 00:0A9F D9 -  -  -  		exx
  163 00:0AA0 CD A6 0A 00 		call 	_I32NSubtract
  164 00:0AA4 D9 -  -  -  		exx
  165 00:0AA5 C9 -  -  -  		ret
  166 00:0AA6 -  -  -  -  _I32NSubtract:
  167 00:0AA6 D5 -  -  -  		push 	de
  168 00:0AA7 EB -  -  -  		ex 		de,hl
  169 00:0AA8 21 00 00 00 		ld 		hl,$0000
  170 00:0AAC 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0AAF D1 -  -  -  		pop 	de
  172 00:0AB0 C9 -  -  -  		ret
  173 00:0AB1 -  -  -  -  		
  174 00:0AB1 -  -  -  -  ; ***************************************************************************************
  175 00:0AB1 -  -  -  -  ;
  176 00:0AB1 -  -  -  -  ;									Changes and Updates
  177 00:0AB1 -  -  -  -  ;
  178 00:0AB1 -  -  -  -  ; ***************************************************************************************
  179 00:0AB1 -  -  -  -  ;
  180 00:0AB1 -  -  -  -  ;		Date			Notes
  181 00:0AB1 -  -  -  -  ;		==== 			=====
  182 00:0AB1 -  -  -  -  ;
  183 00:0AB1 -  -  -  -  ; ***************************************************************************************
  184 00:0AB1 -  -  -  -  		
Listing for file "_build.asm"
   45 00:0AB1 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0AB1 -  -  -  -  ; ***************************************************************************************
    2 00:0AB1 -  -  -  -  ; ***************************************************************************************
    3 00:0AB1 -  -  -  -  ;
    4 00:0AB1 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0AB1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AB1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0AB1 -  -  -  -  ;		Reviewed :	No
    8 00:0AB1 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0AB1 -  -  -  -  ;
   10 00:0AB1 -  -  -  -  ; ***************************************************************************************
   11 00:0AB1 -  -  -  -  ;
   12 00:0AB1 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0AB1 -  -  -  -  ;
   14 00:0AB1 -  -  -  -  ; ***************************************************************************************
   15 00:0AB1 -  -  -  -  
   16 00:0AB1 -  -  -  -  Int32ToString:
   17 00:0AB1 C5 -  -  -  		push 	bc 							; save string start
   18 00:0AB2 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0AB3 E5 -  -  -  		push 	hl
   20 00:0AB4 11 00 00 00 		ld	 	de,$0000
   21 00:0AB8 D9 -  -  -  		exx
   22 00:0AB9 D5 -  -  -  		push 	de
   23 00:0ABA E5 -  -  -  		push 	hl
   24 00:0ABB 11 00 00 00 		ld 		de,$000
   25 00:0ABF D9 -  -  -  		exx
   26 00:0AC0 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0AC1 -  -  -  -  		;
   28 00:0AC1 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0AC3 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0AC5 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0AC7 5F -  -  -  		ld 		e,a
   32 00:0AC8 -  -  -  -  		;
   33 00:0AC8 D9 -  -  -  		exx 								; is it -ve ?
   34 00:0AC9 CB 7C -  -  		bit 	7,h
   35 00:0ACB D9 -  -  -  		exx
   36 00:0ACC 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0ACE -  -  -  -  		;
   38 00:0ACE CD 9A 0A 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0AD2 -  -  -  -  		;
   40 00:0AD2 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0AD4 02 -  -  -  		ld 		(bc),a
   42 00:0AD5 03 -  -  -  		inc 	bc
   43 00:0AD6 -  -  -  -  _I32TSNotNegative:	
   44 00:0AD6 CD E4 0A 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0ADA -  -  -  -  _I32TSExit:
   46 00:0ADA AF -  -  -  		xor 	a  							; write the end of string code
   47 00:0ADB 02 -  -  -  		ld 		(bc),a 
   48 00:0ADC -  -  -  -  
   49 00:0ADC D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0ADD E1 -  -  -  		pop 	hl
   51 00:0ADE D1 -  -  -  		pop 	de
   52 00:0ADF D9 -  -  -  		exx
   53 00:0AE0 E1 -  -  -  		pop 	hl
   54 00:0AE1 D1 -  -  -  		pop 	de
   55 00:0AE2 C1 -  -  -  		pop 	bc
   56 00:0AE3 C9 -  -  -  		ret
   57 00:0AE4 -  -  -  -  
   58 00:0AE4 -  -  -  -  _I32RecursiveConvert:
   59 00:0AE4 CD F3 08 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0AE8 F5 -  -  -  		push 	af 							; save remainder
   61 00:0AE9 CD 69 0A 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0AED C4 E4 0A 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0AF1 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0AF2 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0AF4 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0AF6 C6 07 -  -  		add 	a,7
   67 00:0AF8 -  -  -  -  _I32NotHex:
   68 00:0AF8 C6 30 -  -  		add 	a,48
   69 00:0AFA 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0AFB 03 -  -  -  		inc 	bc
   71 00:0AFC C9 -  -  -  		ret		
   72 00:0AFD -  -  -  -  
   73 00:0AFD -  -  -  -  ; ***************************************************************************************
   74 00:0AFD -  -  -  -  ;
   75 00:0AFD -  -  -  -  ;									Changes and Updates
   76 00:0AFD -  -  -  -  ;
   77 00:0AFD -  -  -  -  ; ***************************************************************************************
   78 00:0AFD -  -  -  -  ;
   79 00:0AFD -  -  -  -  ;		Date			Notes
   80 00:0AFD -  -  -  -  ;		==== 			=====
   81 00:0AFD -  -  -  -  ;
   82 00:0AFD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:0AFD -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0AFD -  -  -  -  ; ***************************************************************************************
    2 00:0AFD -  -  -  -  ; ***************************************************************************************
    3 00:0AFD -  -  -  -  ;
    4 00:0AFD -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0AFD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AFD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0AFD -  -  -  -  ;		Reviewed :	No
    8 00:0AFD -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0AFD -  -  -  -  ;
   10 00:0AFD -  -  -  -  ; ***************************************************************************************
   11 00:0AFD -  -  -  -  ; ***************************************************************************************
   12 00:0AFD -  -  -  -  
   13 00:0AFD -  -  -  -  #ifdef AQUARIUS
   14 00:0AFD             
   15 00:0AFD             ; ***************************************************************************************
   16 00:0AFD             ;
   17 00:0AFD             ;								Initialise system stuff
   18 00:0AFD             ;
   19 00:0AFD             ; ***************************************************************************************
   20 00:0AFD             
   21 00:0AFD             SYSInitialise:
   22 00:0AFD             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0AFD             	call 	SYSPrintChar
   24 00:0AFD             	ret
   25 00:0AFD             
   26 00:0AFD             ; ***************************************************************************************
   27 00:0AFD             ;
   28 00:0AFD             ;								Terminate system stuff
   29 00:0AFD             ;
   30 00:0AFD             ; ***************************************************************************************
   31 00:0AFD             
   32 00:0AFD             SYSTerminate:
   33 00:0AFD             	jr 		SYSTerminate
   34 00:0AFD             
   35 00:0AFD             ; ***************************************************************************************
   36 00:0AFD             ;
   37 00:0AFD             ;								Print A character
   38 00:0AFD             ;
   39 00:0AFD             ; ***************************************************************************************
   40 00:0AFD             
   41 00:0AFD             SYSPrintChar:
   42 00:0AFD             	push 	af 									; we stack everything including alt registers
   43 00:0AFD             	push 	bc
   44 00:0AFD             	push 	de
   45 00:0AFD             	push 	hl
   46 00:0AFD             	push 	ix
   47 00:0AFD             	push 	iy
   48 00:0AFD             	exx
   49 00:0AFD             	push 	bc
   50 00:0AFD             	push 	de
   51 00:0AFD             	push 	hl
   52 00:0AFD             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0AFD             	pop 	hl
   54 00:0AFD             	pop 	de
   55 00:0AFD             	pop 	bc
   56 00:0AFD             	exx
   57 00:0AFD             	pop 	iy
   58 00:0AFD             	pop 	ix
   59 00:0AFD             	pop 	hl
   60 00:0AFD             	pop 	de
   61 00:0AFD             	pop 	bc
   62 00:0AFD             	pop 	af
   63 00:0AFD             	ret		
   64 00:0AFD             
   65 00:0AFD             ; ***************************************************************************************
   66 00:0AFD             ;
   67 00:0AFD             ;									Print Newline
   68 00:0AFD             ;
   69 00:0AFD             ; ***************************************************************************************
   70 00:0AFD             
   71 00:0AFD             SYSPrintCRLF:
   72 00:0AFD             	push 	af
   73 00:0AFD             	ld 		a,13
   74 00:0AFD             	call 	SYSPrintChar
   75 00:0AFD             	ld 		a,10
   76 00:0AFD             	call 	SYSPrintChar
   77 00:0AFD             	pop 	af
   78 00:0AFD             	ret
   79 00:0AFD             
   80 00:0AFD             #endif
   81 00:0AFD -  -  -  -  
   82 00:0AFD -  -  -  -  ; ***************************************************************************************
   83 00:0AFD -  -  -  -  ;
   84 00:0AFD -  -  -  -  ;									Changes and Updates
   85 00:0AFD -  -  -  -  ;
   86 00:0AFD -  -  -  -  ; ***************************************************************************************
   87 00:0AFD -  -  -  -  ;
   88 00:0AFD -  -  -  -  ;		Date			Notes
   89 00:0AFD -  -  -  -  ;		==== 			=====
   90 00:0AFD -  -  -  -  ;
   91 00:0AFD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:0AFD -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0AFD -  -  -  -  ; ***************************************************************************************
    2 00:0AFD -  -  -  -  ; ***************************************************************************************
    3 00:0AFD -  -  -  -  ;
    4 00:0AFD -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0AFD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AFD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0AFD -  -  -  -  ;		Reviewed :	No
    8 00:0AFD -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0AFD -  -  -  -  ;
   10 00:0AFD -  -  -  -  ; ***************************************************************************************
   11 00:0AFD -  -  -  -  ; ***************************************************************************************
   12 00:0AFD -  -  -  -  
   13 00:0AFD -  -  -  -  #ifdef CLEANEZ80
   14 00:0AFD -  -  -  -  
   15 00:0AFD -  -  -  -  ; ***************************************************************************************
   16 00:0AFD -  -  -  -  ;
   17 00:0AFD -  -  -  -  ;								Initialise system stuff
   18 00:0AFD -  -  -  -  ;
   19 00:0AFD -  -  -  -  ; ***************************************************************************************
   20 00:0AFD -  -  -  -  
   21 00:0AFD -  -  -  -  SYSInitialise:
   22 00:0AFD C9 -  -  -  	ret
   23 00:0AFE -  -  -  -  
   24 00:0AFE -  -  -  -  ; ***************************************************************************************
   25 00:0AFE -  -  -  -  ;
   26 00:0AFE -  -  -  -  ;								Terminate system stuff
   27 00:0AFE -  -  -  -  ;
   28 00:0AFE -  -  -  -  ; ***************************************************************************************
   29 00:0AFE -  -  -  -  
   30 00:0AFE -  -  -  -  SYSTerminate:
   31 00:0AFE C9 -  -  -  	ret
   32 00:0AFF -  -  -  -  
   33 00:0AFF -  -  -  -  ; ***************************************************************************************
   34 00:0AFF -  -  -  -  ;
   35 00:0AFF -  -  -  -  ;								Print A character
   36 00:0AFF -  -  -  -  ;
   37 00:0AFF -  -  -  -  ; ***************************************************************************************
   38 00:0AFF -  -  -  -  
   39 00:0AFF -  -  -  -  SYSPrintChar:
   40 00:0AFF C9 -  -  -  	ret		
   41 00:0B00 -  -  -  -  
   42 00:0B00 -  -  -  -  ; ***************************************************************************************
   43 00:0B00 -  -  -  -  ;
   44 00:0B00 -  -  -  -  ;									Print Newline
   45 00:0B00 -  -  -  -  ;
   46 00:0B00 -  -  -  -  ; ***************************************************************************************
   47 00:0B00 -  -  -  -  
   48 00:0B00 -  -  -  -  SYSPrintCRLF:
   49 00:0B00 C9 -  -  -  	ret
   50 00:0B01 -  -  -  -  
   51 00:0B01 -  -  -  -  #endif
   52 00:0B01 -  -  -  -  
   53 00:0B01 -  -  -  -  ; ***************************************************************************************
   54 00:0B01 -  -  -  -  ;
   55 00:0B01 -  -  -  -  ;									Changes and Updates
   56 00:0B01 -  -  -  -  ;
   57 00:0B01 -  -  -  -  ; ***************************************************************************************
   58 00:0B01 -  -  -  -  ;
   59 00:0B01 -  -  -  -  ;		Date			Notes
   60 00:0B01 -  -  -  -  ;		==== 			=====
   61 00:0B01 -  -  -  -  ;
   62 00:0B01 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:0B01 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0B01 -  -  -  -  ; ***************************************************************************************
    2 00:0B01 -  -  -  -  ; ***************************************************************************************
    3 00:0B01 -  -  -  -  ;
    4 00:0B01 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0B01 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B01 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B01 -  -  -  -  ;		Reviewed :	No
    8 00:0B01 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0B01 -  -  -  -  ;
   10 00:0B01 -  -  -  -  ; ***************************************************************************************
   11 00:0B01 -  -  -  -  ; ***************************************************************************************
   12 00:0B01 -  -  -  -  
   13 00:0B01 -  -  -  -  #ifdef TI84
   14 00:0B01             
   15 00:0B01             ; ***************************************************************************************
   16 00:0B01             ;
   17 00:0B01             ;								Initialise system stuff
   18 00:0B01             ;
   19 00:0B01             ; ***************************************************************************************
   20 00:0B01             
   21 00:0B01             SYSInitialise:
   22 00:0B01             	di
   23 00:0B01             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0B01             	ld 		(_IYTemp84),iy
   25 00:0B01             	ret
   26 00:0B01             
   27 00:0B01             ; ***************************************************************************************
   28 00:0B01             ;
   29 00:0B01             ;								Terminate system stuff
   30 00:0B01             ;
   31 00:0B01             ; ***************************************************************************************
   32 00:0B01             
   33 00:0B01             SYSTerminate:
   34 00:0B01             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0B01             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0B01             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0B01             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0B01             	ei
   39 00:0B01             	ret 										; and exit.
   40 00:0B01             
   41 00:0B01             _StackTemp84:									; temp var for TI84 only.
   42 00:0B01             	.dw 	0,0
   43 00:0B01             _IYTemp84:
   44 00:0B01             	.dw 	0,0		
   45 00:0B01             
   46 00:0B01             ; ***************************************************************************************
   47 00:0B01             ;
   48 00:0B01             ;								Print A character
   49 00:0B01             ;
   50 00:0B01             ; ***************************************************************************************
   51 00:0B01             
   52 00:0B01             SYSPrintChar:
   53 00:0B01             	push 	af 									; we stack everything including alt registers
   54 00:0B01             	push 	bc
   55 00:0B01             	push 	de
   56 00:0B01             	push 	hl
   57 00:0B01             	push 	ix
   58 00:0B01             	push 	iy
   59 00:0B01             	exx
   60 00:0B01             	push 	bc
   61 00:0B01             	push 	de
   62 00:0B01             	push 	hl
   63 00:0B01             
   64 00:0B01             	ld 		iy,(_IYTemp84)
   65 00:0B01             	call 	_PutC 								; print A as character
   66 00:0B01             	di
   67 00:0B01             	ld 		(_IYTemp84),iy
   68 00:0B01             
   69 00:0B01             	pop 	hl
   70 00:0B01             	pop 	de
   71 00:0B01             	pop 	bc
   72 00:0B01             	exx
   73 00:0B01             	pop 	iy
   74 00:0B01             	pop 	ix
   75 00:0B01             	pop 	hl
   76 00:0B01             	pop 	de
   77 00:0B01             	pop 	bc
   78 00:0B01             	pop 	af
   79 00:0B01             	ret		
   80 00:0B01             
   81 00:0B01             ; ***************************************************************************************
   82 00:0B01             ;
   83 00:0B01             ;									Print Newline
   84 00:0B01             ;
   85 00:0B01             ; ***************************************************************************************
   86 00:0B01             
   87 00:0B01             SYSPrintCRLF:
   88 00:0B01             	push 	af 									; we stack everything including alt registers
   89 00:0B01             	push 	bc
   90 00:0B01             	push 	de
   91 00:0B01             	push 	hl
   92 00:0B01             	push 	ix
   93 00:0B01             	push 	iy
   94 00:0B01             	exx
   95 00:0B01             	push 	bc
   96 00:0B01             	push 	de
   97 00:0B01             	push 	hl
   98 00:0B01             
   99 00:0B01             	ld 		iy,(_IYTemp84)
  100 00:0B01             	call 	_newline
  101 00:0B01             	di
  102 00:0B01             	ld 		(_IYTemp84),iy
  103 00:0B01             
  104 00:0B01             	pop 	hl
  105 00:0B01             	pop 	de
  106 00:0B01             	pop 	bc
  107 00:0B01             	exx
  108 00:0B01             	pop 	iy
  109 00:0B01             	pop 	ix
  110 00:0B01             	pop 	hl
  111 00:0B01             	pop 	de
  112 00:0B01             	pop 	bc
  113 00:0B01             	pop 	af
  114 00:0B01             	ret
  115 00:0B01             
  116 00:0B01             #endif
  117 00:0B01 -  -  -  -  
  118 00:0B01 -  -  -  -  ; ***************************************************************************************
  119 00:0B01 -  -  -  -  ;
  120 00:0B01 -  -  -  -  ;									Changes and Updates
  121 00:0B01 -  -  -  -  ;
  122 00:0B01 -  -  -  -  ; ***************************************************************************************
  123 00:0B01 -  -  -  -  ;
  124 00:0B01 -  -  -  -  ;		Date			Notes
  125 00:0B01 -  -  -  -  ;		==== 			=====
  126 00:0B01 -  -  -  -  ;
  127 00:0B01 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:0B01 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0B01 -  -  -  -  ; ***************************************************************************************
    2 00:0B01 -  -  -  -  ; ***************************************************************************************
    3 00:0B01 -  -  -  -  ;
    4 00:0B01 -  -  -  -  ;		Name : 		basic.asm
    5 00:0B01 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B01 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B01 -  -  -  -  ;		Reviewed :	No
    8 00:0B01 -  -  -  -  ;		Purpose :	Main program.
    9 00:0B01 -  -  -  -  ;
   10 00:0B01 -  -  -  -  ; ***************************************************************************************
   11 00:0B01 -  -  -  -  ; ***************************************************************************************
   12 00:0B01 -  -  -  -  
   13 00:0B01 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:0C00 -  -  -  -  TestInstance:
   15 00:0C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:0C00 -  -  -  -  ;
    2 00:0C00 -  -  -  -  ;	This code automatically generated.
    3 00:0C00 -  -  -  -  ;
    4 00:0C00 -  -  -  -  TestProgram:
    5 00:0C00 22 01 00 B7 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B7 3F 0C 
              53 65 65 64 
              20 3D 20 34 
              33 31 35 31 
              0D 80 12 03 
              00 C3 8A 8A 
              66 44 66 6B 
              5A 8F 66 44 
              66 6B 5A 80 
              14 04 00 C3 
              8A 41 5A 4C 
              59 4E 68 8F 
              8A 41 5A 4C 
              59 4E 68 80 
              14 05 00 C3 
              8A 41 47 53 
              51 66 42 8F 
              8A 41 47 53 
              51 66 42 80 
              14 06 00 C3 
              8A 41 6A 6F 
              66 7E 73 8F 
              8A 41 6A 6F 
              66 7E 73 80 
              12 07 00 C3 
              8A 8A 7A 4D 
              63 4A 7E 8F 
              7A 4D 63 4A 
              7E 80 14 08 
              00 C3 8A 41 
              44 53 70 43 
              64 8F 8A 41 
              44 53 70 43 
              64 80 12 09 
              00 C3 8A 8A 
              42 58 6C 43 
              7F 8F 42 58 
              6C 43 7F 80 
              12 0A 00 C3 
              8A 8A 74 6C 
              5A 73 62 8F 
              74 6C 5A 73 
              62 80 14 0B 
              00 C3 8A 41 
              79 6D 7E 71 
              52 8F 8A 41 
              79 6D 7E 71 
              52 80 14 0C 
              00 C3 8A 8A 
              41 6A 51 71 
              7C 50 8F 41 
              6A 51 71 7C 
              50 80 14 0D 
              00 C3 8A 8A 
              41 7F 54 62 
              60 5D 8F 41 
              7F 54 62 60 
              5D 80 14 0E 
              00 C3 8A 8A 
              41 56 43 6D 
              6A 6B 8F 41 
              56 43 6D 6A 
              6B 80 12 0F 
              00 C3 8A 8A 
              41 48 58 6F 
              55 8F 41 48 
              58 6F 55 80 
              14 10 00 C3 
              8A 41 46 60 
              45 54 76 8F 
              8A 41 46 60 
              45 54 76 80 
              12 11 00 C3 
              8A 8A 71 71 
              57 73 4C 8F 
              71 71 57 73 
              4C 80 14 12 
              00 C3 8A 8A 
              41 5E 66 70 
              71 65 8F 41 
              5E 66 70 71 
              65 80 12 13 
              00 C3 8A 64 
              72 6F 7C 55 
              8F 8A 64 72 
              6F 7C 55 80 
              14 14 00 C3 
              8A 8A 41 64 
              5B 4C 6E 68 
              8F 41 64 5B 
              4C 6E 68 80 
              12 15 00 C3 
              8A 72 4F 54 
              67 74 8F 8A 
              72 4F 54 67 
              74 80 14 16 
              00 C3 8A 41 
              74 5C 54 75 
              6C 8F 8A 41 
              74 5C 54 75 
              6C 80 12 17 
              00 C3 8A 8A 
              47 5A 7F 4C 
              68 8F 47 5A 
              7F 4C 68 80 
              14 18 00 C3 
              8A 41 41 50 
              78 4F 5E 8F 
              8A 41 41 50 
              78 4F 5E 80 
              14 19 00 C3 
              8A 8A 41 72 
              62 40 44 7E 
              8F 41 72 62 
              40 44 7E 80 
              12 1A 00 C3 
              8A 58 75 51 
              4C 78 8F 8A 
              58 75 51 4C 
              78 80 12 1B 
              00 C3 8A 8A 
              4E 6D 7C 79 
              51 8F 4E 6D 
              7C 79 51 80 
              14 1C 00 C3 
              8A 41 67 7A 
              47 72 53 8F 
              8A 41 67 7A 
              47 72 53 80 
              14 1D 00 C3 
              8A 8A 41 42 
              68 4B 49 42 
              8F 41 42 68 
              4B 49 42 80 
              12 1E 00 C3 
              8A 69 68 40 
              70 47 8F 8A 
              69 68 40 70 
              47 80 14 1F 
              00 C3 8A 8A 
              41 72 7C 4F 
              55 79 8F 41 
              72 7C 4F 55 
              79 80 12 20 
              00 C3 8A 8A 
              7B 5E 64 45 
              52 8F 7B 5E 
              64 45 52 80 
              14 21 00 C3 
              8A 8A 41 5A 
              68 44 40 6C 
              8F 41 5A 68 
              44 40 6C 80 
              14 22 00 C3 
              8A 41 52 65 
              52 5E 42 8F 
              8A 41 52 65 
              52 5E 42 80 
              14 23 00 C3 
              8A 8A 41 7D 
              78 7B 4B 4B 
              8F 41 7D 78 
              7B 4B 4B 80 
              12 24 00 C3 
              8A 8A 45 78 
              56 5B 47 8F 
              45 78 56 5B 
              47 80 12 25 
              00 C3 8A 70 
              45 69 4E 4C 
              8F 8A 70 45 
              69 4E 4C 80 
              12 26 00 C3 
              8A 8A 6F 5C 
              71 5B 7C 8F 
              6F 5C 71 5B 
              7C 80 14 27 
              00 C3 8A 8A 
              41 46 6A 47 
              6C 56 8F 41 
              46 6A 47 6C 
              56 80 14 28 
              00 C3 8A 41 
              59 51 6D 45 
              6C 8F 8A 41 
              59 51 6D 45 
              6C 80 14 29 
              00 C3 8A 41 
              72 5E 71 7F 
              5A 8F 8A 41 
              72 5E 71 7F 
              5A 80 12 2A 
              00 C3 8A 8A 
              54 41 69 7B 
              4F 8F 54 41 
              69 7B 4F 80 
              14 2B 00 C3 
              8A 41 44 5E 
              55 6D 42 8F 
              8A 41 44 5E 
              55 6D 42 80 
              12 2C 00 C3 
              8A 8A 4A 47 
              68 49 54 8F 
              4A 47 68 49 
              54 80 12 2D 
              00 C3 8A 73 
              71 48 5E 44 
              8F 8A 73 71 
              48 5E 44 80 
              12 2E 00 C3 
              8A 8A 71 4B 
              67 77 7F 8F 
              71 4B 67 77 
              7F 80 12 2F 
              00 C3 8A 79 
              4B 40 74 5F 
              8F 8A 79 4B 
              40 74 5F 80 
              14 30 00 C3 
              8A 41 5A 71 
              58 42 46 8F 
              8A 41 5A 71 
              58 42 46 80 
              12 31 00 C3 
              8A 8A 69 68 
              41 48 7C 8F 
              69 68 41 48 
              7C 80 14 32 
              00 C3 8A 41 
              6D 4F 67 62 
              72 8F 8A 41 
              6D 4F 67 62 
              72 80 14 33 
              00 C3 8A 8A 
              41 6C 5B 79 
              4D 70 8F 41 
              6C 5B 79 4D 
              70 80 12 34 
              00 C3 8A 6A 
              42 50 7F 71 
              8F 8A 6A 42 
              50 7F 71 80 
              12 35 00 C3 
              8A 8A 70 7D 
              50 7D 57 8F 
              70 7D 50 7D 
              57 80 12 36 
              00 C3 8A 51 
              78 68 57 60 
              8F 8A 51 78 
              68 57 60 80 
              12 37 00 C3 
              8A 6C 73 51 
              6F 46 8F 8A 
              6C 73 51 6F 
              46 80 12 38 
              00 C3 8A 8A 
              4E 45 68 57 
              5C 8F 4E 45 
              68 57 5C 80 
              14 39 00 C3 
              8A 8A 41 52 
              42 4D 71 72 
              8F 41 52 42 
              4D 71 72 80 
              14 3A 00 C3 
              8A 41 65 57 
              52 64 7D 8F 
              8A 41 65 57 
              52 64 7D 80 
              14 3B 00 C3 
              8A 41 76 6E 
              44 78 58 8F 
              8A 41 76 6E 
              44 78 58 80 
              14 3C 00 C3 
              8A 8A 41 77 
              62 5E 50 79 
              8F 41 77 62 
              5E 50 79 80 
              12 3D 00 C3 
              8A 7E 6F 4E 
              79 40 8F 8A 
              7E 6F 4E 79 
              40 80 12 3E 
              00 C3 8A 46 
              64 47 71 5B 
              8F 8A 46 64 
              47 71 5B 80 
              12 3F 00 C3 
              8A 8A 67 52 
              61 7F 54 8F 
              67 52 61 7F 
              54 80 14 40 
              00 C3 8A 41 
              44 6E 7D 44 
              63 8F 8A 41 
              44 6E 7D 44 
              63 80 14 41 
              00 C3 8A 8A 
              41 6C 57 6D 
              75 4A 8F 41 
              6C 57 6D 75 
              4A 80 12 42 
              00 C3 8A 8A 
              74 4D 66 68 
              6E 8F 74 4D 
              66 68 6E 80 
              14 43 00 C3 
              8A 8A 41 5F 
              5D 42 6F 7A 
              8F 41 5F 5D 
              42 6F 7A 80 
              10 44 00 C3 
              8A 8A 4E 4A 
              66 5F 8F 4E 
              4A 66 5F 80 
              14 45 00 C3 
              8A 8A 41 50 
              64 7F 7E 7E 
              8F 41 50 64 
              7F 7E 7E 80 
              12 46 00 C3 
              8A 7C 41 59 
              78 69 8F 8A 
              7C 41 59 78 
              69 80 12 47 
              00 C3 8A 6F 
              6A 6A 5A 63 
              8F 8A 6F 6A 
              6A 5A 63 80 
              14 48 00 C3 
              8A 8A 41 43 
              58 43 6A 6B 
              8F 41 43 58 
              43 6A 6B 80 
              12 49 00 C3 
              8A 7E 6C 76 
              58 55 8F 8A 
              7E 6C 76 58 
              55 80 12 4A 
              00 C3 8A 8A 
              73 4B 7A 75 
              66 8F 73 4B 
              7A 75 66 80 
              12 4B 00 C3 
              8A 56 6C 4F 
              74 4E 8F 8A 
              56 6C 4F 74 
              4E 80 12 4C 
              00 C3 8A 8A 
              5F 51 6C 60 
              40 8F 5F 51 
              6C 60 40 80 
              12 4D 00 C3 
              8A 8A 62 6A 
              44 6D 50 8F 
              62 6A 44 6D 
              50 80 12 4E 
              00 C3 8A 8A 
              4F 51 76 6E 
              52 8F 4F 51 
              76 6E 52 80 
              14 4F 00 C3 
              8A 41 7D 40 
              53 70 4E 8F 
              8A 41 7D 40 
              53 70 4E 80 
              12 50 00 C3 
              8A 8A 49 47 
              4A 69 64 8F 
              49 47 4A 69 
              64 80 12 51 
              00 C3 8A 5A 
              75 7F 7E 43 
              8F 8A 5A 75 
              7F 7E 43 80 
              14 52 00 C3 
              8A 8A 41 51 
              67 54 42 7B 
              8F 41 51 67 
              54 42 7B 80 
              12 53 00 C3 
              8A 8A 48 5C 
              7F 72 60 8F 
              48 5C 7F 72 
              60 80 14 54 
              00 C3 8A 8A 
              41 61 4E 7D 
              78 76 8F 41 
              61 4E 7D 78 
              76 80 12 55 
              00 C3 8A 8A 
              70 4F 48 4C 
              6F 8F 70 4F 
              48 4C 6F 80 
              14 56 00 C3 
              8A 41 57 50 
              46 45 6C 8F 
              8A 41 57 50 
              46 45 6C 80 
              12 57 00 C3 
              8A 8A 6F 4D 
              74 62 7E 8F 
              6F 4D 74 62 
              7E 80 12 58 
              00 C3 8A 61 
              6A 68 6A 4E 
              8F 8A 61 6A 
              68 6A 4E 80 
              14 59 00 C3 
              8A 41 55 54 
              7A 45 5A 8F 
              8A 41 55 54 
              7A 45 5A 80 
              12 5A 00 C3 
              8A 8A 42 4C 
              53 78 77 8F 
              42 4C 53 78 
              77 80 14 5B 
              00 C3 8A 41 
              47 63 69 6D 
              49 8F 8A 41 
              47 63 69 6D 
              49 80 14 5C 
              00 C3 8A 8A 
              41 7C 55 46 
              48 6B 8F 41 
              7C 55 46 48 
              6B 80 14 5D 
              00 C3 8A 41 
              6E 47 77 4E 
              55 8F 8A 41 
              6E 47 77 4E 
              55 80 12 5E 
              00 C3 8A 56 
              56 63 64 76 
              8F 8A 56 56 
              63 64 76 80 
              14 5F 00 C3 
              8A 8A 41 57 
              7E 6A 52 55 
              8F 41 57 7E 
              6A 52 55 80 
              14 60 00 C3 
              8A 41 78 61 
              62 56 5D 8F 
              8A 41 78 61 
              62 56 5D 80 
              14 61 00 C3 
              8A 41 5A 4D 
              75 7D 48 8F 
              8A 41 5A 4D 
              75 7D 48 80 
              14 62 00 C3 
              8A 8A 41 67 
              54 7D 64 5A 
              8F 41 67 54 
              7D 64 5A 80 
              12 63 00 C3 
              8A 68 6B 5E 
              73 5A 8F 8A 
              68 6B 5E 73 
              5A 80 14 64 
              00 C3 8A 8A 
              41 5F 6C 5C 
              40 57 8F 41 
              5F 6C 5C 40 
              57 80 12 65 
              00 C3 8A 8A 
              7F 79 7A 6E 
              65 8F 7F 79 
              7A 6E 65 80 
              14 66 00 C3 
              8A 41 66 61 
              57 4F 76 8F 
              8A 41 66 61 
              57 4F 76 80 
              12 67 00 C3 
              8A 66 64 65 
              54 45 8F 8A 
              66 64 65 54 
              45 80 14 68 
              00 C3 8A 41 
              5E 4C 79 4E 
              57 8F 8A 41 
              5E 4C 79 4E 
              57 80 14 69 
              00 C3 8A 41 
              57 57 43 69 
              74 8F 8A 41 
              57 57 43 69 
              74 80 14 6A 
              00 C3 8A 8A 
              41 50 65 53 
              6B 6D 8F 41 
              50 65 53 6B 
              6D 80 12 6B 
              00 C3 8A 69 
              4B 55 6E 50 
              8F 8A 69 4B 
              55 6E 50 80 
              12 6C 00 C3 
              8A 6C 63 54 
              78 6C 8F 8A 
              6C 63 54 78 
              6C 80 12 6D 
              00 C3 8A 56 
              60 69 71 46 
              8F 8A 56 60 
              69 71 46 80 
              12 6E 00 C3 
              8A 56 6F 6E 
              5F 5F 8F 8A 
              56 6F 6E 5F 
              5F 80 14 6F 
              00 C3 8A 41 
              4B 5C 4D 47 
              48 8F 8A 41 
              4B 5C 4D 47 
              48 80 12 70 
              00 C3 8A 8A 
              6B 76 4B 7F 
              70 8F 6B 76 
              4B 7F 70 80 
              14 71 00 C3 
              8A 41 40 76 
              59 44 66 8F 
              8A 41 40 76 
              59 44 66 80 
              12 72 00 C3 
              8A 4F 5D 77 
              6F 71 8F 8A 
              4F 5D 77 6F 
              71 80 12 73 
              00 C3 8A 8A 
              51 49 49 4C 
              7F 8F 51 49 
              49 4C 7F 80 
              14 74 00 C3 
              8A 41 5F 52 
              4A 4E 72 8F 
              8A 41 5F 52 
              4A 4E 72 80 
              12 75 00 C3 
              8A 8A 63 7F 
              6C 46 67 8F 
              63 7F 6C 46 
              67 80 12 76 
              00 C3 8A 8A 
              68 74 59 4E 
              5F 8F 68 74 
              59 4E 5F 80 
              12 77 00 C3 
              8A 53 7E 5C 
              66 7E 8F 8A 
              53 7E 5C 66 
              7E 80 12 78 
              00 C3 8A 49 
              53 7A 5A 56 
              8F 8A 49 53 
              7A 5A 56 80 
              12 79 00 C3 
              8A 45 55 68 
              5E 6A 8F 8A 
              45 55 68 5E 
              6A 80 12 7A 
              00 C3 8A 8A 
              5E 47 54 74 
              4B 8F 5E 47 
              54 74 4B 80 
              12 7B 00 C3 
              8A 8A 4B 49 
              5C 62 40 8F 
              4B 49 5C 62 
              40 80 14 7C 
              00 C3 8A 8A 
              41 7F 6D 58 
              51 74 8F 41 
              7F 6D 58 51 
              74 80 14 7D 
              00 C3 8A 41 
              54 53 4E 44 
              54 8F 8A 41 
              54 53 4E 44 
              54 80 12 7E 
              00 C3 8A 62 
              40 46 61 79 
              8F 8A 62 40 
              46 61 79 80 
              12 7F 00 C3 
              8A 79 76 40 
              48 77 8F 8A 
              79 76 40 48 
              77 80 14 80 
              00 C3 8A 8A 
              41 42 74 59 
              75 5C 8F 41 
              42 74 59 75 
              5C 80 14 81 
              00 C3 8A 41 
              6E 4E 5C 4C 
              78 8F 8A 41 
              6E 4E 5C 4C 
              78 80 12 82 
              00 C3 8A 5E 
              59 60 50 5B 
              8F 8A 5E 59 
              60 50 5B 80 
              14 83 00 C3 
              8A 8A 41 61 
              5E 7C 40 70 
              8F 41 61 5E 
              7C 40 70 80 
              12 84 00 C3 
              8A 8A 64 4B 
              6B 6B 6B 8F 
              64 4B 6B 6B 
              6B 80 14 85 
              00 C3 8A 41 
              7B 7C 7F 6D 
              40 8F 8A 41 
              7B 7C 7F 6D 
              40 80 14 86 
              00 C3 8A 41 
              40 58 7A 7F 
              40 8F 8A 41 
              40 58 7A 7F 
              40 80 14 87 
              00 C3 8A 41 
              7F 65 70 46 
              6A 8F 8A 41 
              7F 65 70 46 
              6A 80 14 88 
              00 C3 8A 41 
              5A 73 4D 69 
              6D 8F 8A 41 
              5A 73 4D 69 
              6D 80 12 89 
              00 C3 8A 8A 
              54 4B 6A 44 
              5E 8F 54 4B 
              6A 44 5E 80 
              14 8A 00 C3 
              8A 41 4B 4E 
              69 4A 58 8F 
              8A 41 4B 4E 
              69 4A 58 80 
              12 8B 00 C3 
              8A 55 46 6E 
              51 5B 8F 8A 
              55 46 6E 51 
              5B 80 14 8C 
              00 C3 8A 8A 
              41 75 4C 42 
              68 5D 8F 41 
              75 4C 42 68 
              5D 80 14 8D 
              00 C3 8A 41 
              69 78 5D 58 
              56 8F 8A 41 
              69 78 5D 58 
              56 80 14 8E 
              00 C3 8A 41 
              5E 63 7A 79 
              46 8F 8A 41 
              5E 63 7A 79 
              46 80 14 8F 
              00 C3 8A 41 
              6D 54 75 5A 
              56 8F 8A 41 
              6D 54 75 5A 
              56 80 12 90 
              00 C3 8A 8A 
              5C 75 65 66 
              43 8F 5C 75 
              65 66 43 80 
              12 91 00 C3 
              8A 8A 50 6A 
              53 67 64 8F 
              50 6A 53 67 
              64 80 12 92 
              00 C3 8A 8A 
              46 5B 68 67 
              49 8F 46 5B 
              68 67 49 80 
              12 93 00 C3 
              8A 45 58 7A 
              47 60 8F 8A 
              45 58 7A 47 
              60 80 12 94 
              00 C3 8A 5B 
              69 61 5B 54 
              8F 8A 5B 69 
              61 5B 54 80 
              12 95 00 C3 
              8A 8A 41 6C 
              7E 6D 74 8F 
              41 6C 7E 6D 
              74 80 14 96 
              00 C3 8A 8A 
              41 72 79 63 
              54 5A 8F 41 
              72 79 63 54 
              5A 80 14 97 
              00 C3 8A 41 
              6B 74 58 55 
              6F 8F 8A 41 
              6B 74 58 55 
              6F 80 12 98 
              00 C3 8A 8A 
              7F 4E 67 74 
              41 8F 7F 4E 
              67 74 41 80 
              14 99 00 C3 
              8A 41 4A 53 
              5B 70 61 8F 
              8A 41 4A 53 
              5B 70 61 80 
              12 9A 00 C3 
              8A 41 5E 50 
              6F 77 8F 8A 
              41 5E 50 6F 
              77 80 14 9B 
              00 C3 8A 41 
              54 7D 55 6D 
              43 8F 8A 41 
              54 7D 55 6D 
              43 80 14 9C 
              00 C3 8A 8A 
              41 53 51 48 
              7C 51 8F 41 
              53 51 48 7C 
              51 80 12 9D 
              00 C3 8A 8A 
              4E 53 70 4A 
              46 8F 4E 53 
              70 4A 46 80 
              12 9E 00 C3 
              8A 77 58 66 
              62 6E 8F 8A 
              77 58 66 62 
              6E 80 14 9F 
              00 C3 8A 41 
              57 4E 6C 4F 
              74 8F 8A 41 
              57 4E 6C 4F 
              74 80 12 A0 
              00 C3 8A 59 
              4D 78 46 63 
              8F 8A 59 4D 
              78 46 63 80 
              12 A1 00 C3 
              8A 78 67 45 
              6A 7D 8F 8A 
              78 67 45 6A 
              7D 80 14 A2 
              00 C3 8A 8A 
              41 58 74 7D 
              50 55 8F 41 
              58 74 7D 50 
              55 80 14 A3 
              00 C3 8A 41 
              6B 5B 6B 71 
              77 8F 8A 41 
              6B 5B 6B 71 
              77 80 14 A4 
              00 C3 8A 41 
              71 7B 65 47 
              50 8F 8A 41 
              71 7B 65 47 
              50 80 12 A5 
              00 C3 8A 7E 
              65 74 59 73 
              8F 8A 7E 65 
              74 59 73 80 
              14 A6 00 C3 
              8A 8A 41 7B 
              77 7C 68 50 
              8F 41 7B 77 
              7C 68 50 80 
              12 A7 00 C3 
              8A 8A 6B 6C 
              57 4B 79 8F 
              6B 6C 57 4B 
              79 80 12 A8 
              00 C3 8A 8A 
              65 59 6B 46 
              6F 8F 65 59 
              6B 46 6F 80 
              14 A9 00 C3 
              8A 41 72 6A 
              47 72 5B 8F 
              8A 41 72 6A 
              47 72 5B 80 
              12 AA 00 C3 
              8A 4F 4D 52 
              41 57 8F 8A 
              4F 4D 52 41 
              57 80 12 AB 
              00 C3 8A 8A 
              4D 4A 59 50 
              5B 8F 4D 4A 
              59 50 5B 80 
              12 AC 00 C3 
              8A 8A 51 6A 
              5E 75 54 8F 
              51 6A 5E 75 
              54 80 14 AD 
              00 C3 8A 8A 
              41 6A 7B 46 
              55 4C 8F 41 
              6A 7B 46 55 
              4C 80 14 AE 
              00 C3 8A 41 
              54 61 61 44 
              40 8F 8A 41 
              54 61 61 44 
              40 80 10 AF 
              00 C3 8A 8A 
              69 6A 7D 59 
              8F 69 6A 7D 
              59 80 14 B0 
              00 C3 8A 41 
              77 69 57 4D 
              61 8F 8A 41 
              77 69 57 4D 
              61 80 14 B1 
              00 C3 8A 41 
              78 79 7A 6E 
              45 8F 8A 41 
              78 79 7A 6E 
              45 80 14 B2 
              00 C3 8A 41 
              4E 63 40 5D 
              6B 8F 8A 41 
              4E 63 40 5D 
              6B 80 14 B3 
              00 C3 8A 8A 
              41 41 66 4A 
              40 74 8F 41 
              41 66 4A 40 
              74 80 14 B4 
              00 C3 8A 41 
              48 77 70 61 
              49 8F 8A 41 
              48 77 70 61 
              49 80 12 B5 
              00 C3 8A 8A 
              79 53 7D 70 
              56 8F 79 53 
              7D 70 56 80 
              12 B6 00 C3 
              8A 74 72 65 
              6A 59 8F 8A 
              74 72 65 6A 
              59 80 14 B7 
              00 C3 8A 8A 
              41 68 5F 55 
              70 5A 8F 41 
              68 5F 55 70 
              5A 80 12 B8 
              00 C3 8A 65 
              48 48 5B 54 
              8F 8A 65 48 
              48 5B 54 80 
              14 B9 00 C3 
              8A 41 72 7D 
              61 6C 55 8F 
              8A 41 72 7D 
              61 6C 55 80 
              14 BA 00 C3 
              8A 41 73 71 
              57 66 69 8F 
              8A 41 73 71 
              57 66 69 80 
              12 BB 00 C3 
              8A 8A 76 78 
              6A 75 5B 8F 
              76 78 6A 75 
              5B 80 14 BC 
              00 C3 8A 8A 
              41 7B 5A 64 
              52 5F 8F 41 
              7B 5A 64 52 
              5F 80 12 BD 
              00 C3 8A 8A 
              54 64 44 67 
              4B 8F 54 64 
              44 67 4B 80 
              12 BE 00 C3 
              8A 44 50 7B 
              6E 41 8F 8A 
              44 50 7B 6E 
              41 80 14 BF 
              00 C3 8A 8A 
              41 5A 67 46 
              58 63 8F 41 
              5A 67 46 58 
              63 80 14 C0 
              00 C3 8A 8A 
              41 56 5C 42 
              78 5F 8F 41 
              56 5C 42 78 
              5F 80 14 C1 
              00 C3 8A 41 
              68 4C 69 56 
              5F 8F 8A 41 
              68 4C 69 56 
              5F 80 12 C2 
              00 C3 8A 8A 
              7A 6F 60 5C 
              58 8F 7A 6F 
              60 5C 58 80 
              14 C3 00 C3 
              8A 41 5A 68 
              41 67 56 8F 
              8A 41 5A 68 
              41 67 56 80 
              12 C4 00 C3 
              8A 71 6D 5B 
              44 6A 8F 8A 
              71 6D 5B 44 
              6A 80 12 C5 
              00 C3 8A 8A 
              77 7C 60 44 
              76 8F 77 7C 
              60 44 76 80 
              14 C6 00 C3 
              8A 41 43 53 
              6F 5F 6E 8F 
              8A 41 43 53 
              6F 5F 6E 80 
              14 C7 00 C3 
              8A 41 43 5B 
              4D 60 68 8F 
              8A 41 43 5B 
              4D 60 68 80 
              14 C8 00 C3 
              8A 8A 41 43 
              65 7F 49 70 
              8F 41 43 65 
              7F 49 70 80 
              14 C9 00 C3 
              8A 8A 41 78 
              64 65 44 7A 
              8F 41 78 64 
              65 44 7A 80 
              14 CA 00 C3 
              8A 8A 41 55 
              4D 5D 7E 7A 
              8F 41 55 4D 
              5D 7E 7A 80 
              00 -  -  -  	.db	$22,$01,$00,$b7,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b7,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$34,$33,$31,$35,$31,$0d,$80,$12,$03,$00,$c3,$8a,$8a,$66,$44,$66,$6b,$5a,$8f,$66,$44,$66,$6b,$5a,$80,$14,$04,$00,$c3,$8a,$41,$5a,$4c,$59,$4e,$68,$8f,$8a,$41,$5a,$4c,$59,$4e,$68,$80,$14,$05,$00,$c3,$8a,$41,$47,$53,$51,$66,$42,$8f,$8a,$41,$47,$53,$51,$66,$42,$80,$14,$06,$00,$c3,$8a,$41,$6a,$6f,$66,$7e,$73,$8f,$8a,$41,$6a,$6f,$66,$7e,$73,$80,$12,$07,$00,$c3,$8a,$8a,$7a,$4d,$63,$4a,$7e,$8f,$7a,$4d,$63,$4a,$7e,$80,$14,$08,$00,$c3,$8a,$41,$44,$53,$70,$43,$64,$8f,$8a,$41,$44,$53,$70,$43,$64,$80,$12,$09,$00,$c3,$8a,$8a,$42,$58,$6c,$43,$7f,$8f,$42,$58,$6c,$43,$7f,$80,$12,$0a,$00,$c3,$8a,$8a,$74,$6c,$5a,$73,$62,$8f,$74,$6c,$5a,$73,$62,$80,$14,$0b,$00,$c3,$8a,$41,$79,$6d,$7e,$71,$52,$8f,$8a,$41,$79,$6d,$7e,$71,$52,$80,$14,$0c,$00,$c3,$8a,$8a,$41,$6a,$51,$71,$7c,$50,$8f,$41,$6a,$51,$71,$7c,$50,$80,$14,$0d,$00,$c3,$8a,$8a,$41,$7f,$54,$62,$60,$5d,$8f,$41,$7f,$54,$62,$60,$5d,$80,$14,$0e,$00,$c3,$8a,$8a,$41,$56,$43,$6d,$6a,$6b,$8f,$41,$56,$43,$6d,$6a,$6b,$80,$12,$0f,$00,$c3,$8a,$8a,$41,$48,$58,$6f,$55,$8f,$41,$48,$58,$6f,$55,$80,$14,$10,$00,$c3,$8a,$41,$46,$60,$45,$54,$76,$8f,$8a,$41,$46,$60,$45,$54,$76,$80,$12,$11,$00,$c3,$8a,$8a,$71,$71,$57,$73,$4c,$8f,$71,$71,$57,$73,$4c,$80,$14,$12,$00,$c3,$8a,$8a,$41,$5e,$66,$70,$71,$65,$8f,$41,$5e,$66,$70,$71,$65,$80,$12,$13,$00,$c3,$8a,$64,$72,$6f,$7c,$55,$8f,$8a,$64,$72,$6f,$7c,$55,$80,$14,$14,$00,$c3,$8a,$8a,$41,$64,$5b,$4c,$6e,$68,$8f,$41,$64,$5b,$4c,$6e,$68,$80,$12,$15,$00,$c3,$8a,$72,$4f,$54,$67,$74,$8f,$8a,$72,$4f,$54,$67,$74,$80,$14,$16,$00,$c3,$8a,$41,$74,$5c,$54,$75,$6c,$8f,$8a,$41,$74,$5c,$54,$75,$6c,$80,$12,$17,$00,$c3,$8a,$8a,$47,$5a,$7f,$4c,$68,$8f,$47,$5a,$7f,$4c,$68,$80,$14,$18,$00,$c3,$8a,$41,$41,$50,$78,$4f,$5e,$8f,$8a,$41,$41,$50,$78,$4f,$5e,$80,$14,$19,$00,$c3,$8a,$8a,$41,$72,$62,$40,$44,$7e,$8f,$41,$72,$62,$40,$44,$7e,$80,$12,$1a,$00,$c3,$8a,$58,$75,$51,$4c,$78,$8f,$8a,$58,$75,$51,$4c,$78,$80,$12,$1b,$00,$c3,$8a,$8a,$4e,$6d,$7c,$79,$51,$8f,$4e,$6d,$7c,$79,$51,$80,$14,$1c,$00,$c3,$8a,$41,$67,$7a,$47,$72,$53,$8f,$8a,$41,$67,$7a,$47,$72,$53,$80,$14,$1d,$00,$c3,$8a,$8a,$41,$42,$68,$4b,$49,$42,$8f,$41,$42,$68,$4b,$49,$42,$80,$12,$1e,$00,$c3,$8a,$69,$68,$40,$70,$47,$8f,$8a,$69,$68,$40,$70,$47,$80,$14,$1f,$00,$c3,$8a,$8a,$41,$72,$7c,$4f,$55,$79,$8f,$41,$72,$7c,$4f,$55,$79,$80,$12,$20,$00,$c3,$8a,$8a,$7b,$5e,$64,$45,$52,$8f,$7b,$5e,$64,$45,$52,$80,$14,$21,$00,$c3,$8a,$8a,$41,$5a,$68,$44,$40,$6c,$8f,$41,$5a,$68,$44,$40,$6c,$80,$14,$22,$00,$c3,$8a,$41,$52,$65,$52,$5e,$42,$8f,$8a,$41,$52,$65,$52,$5e,$42,$80,$14,$23,$00,$c3,$8a,$8a,$41,$7d,$78,$7b,$4b,$4b,$8f,$41,$7d,$78,$7b,$4b,$4b,$80,$12,$24,$00,$c3,$8a,$8a,$45,$78,$56,$5b,$47,$8f,$45,$78,$56,$5b,$47,$80,$12,$25,$00,$c3,$8a,$70,$45,$69,$4e,$4c,$8f,$8a,$70,$45,$69,$4e,$4c,$80,$12,$26,$00,$c3,$8a,$8a,$6f,$5c,$71,$5b,$7c,$8f,$6f,$5c,$71,$5b,$7c,$80,$14,$27,$00,$c3,$8a,$8a,$41,$46,$6a,$47,$6c,$56,$8f,$41,$46,$6a,$47,$6c,$56,$80,$14,$28,$00,$c3,$8a,$41,$59,$51,$6d,$45,$6c,$8f,$8a,$41,$59,$51,$6d,$45,$6c,$80,$14,$29,$00,$c3,$8a,$41,$72,$5e,$71,$7f,$5a,$8f,$8a,$41,$72,$5e,$71,$7f,$5a,$80,$12,$2a,$00,$c3,$8a,$8a,$54,$41,$69,$7b,$4f,$8f,$54,$41,$69,$7b,$4f,$80,$14,$2b,$00,$c3,$8a,$41,$44,$5e,$55,$6d,$42,$8f,$8a,$41,$44,$5e,$55,$6d,$42,$80,$12,$2c,$00,$c3,$8a,$8a,$4a,$47,$68,$49,$54,$8f,$4a,$47,$68,$49,$54,$80,$12,$2d,$00,$c3,$8a,$73,$71,$48,$5e,$44,$8f,$8a,$73,$71,$48,$5e,$44,$80,$12,$2e,$00,$c3,$8a,$8a,$71,$4b,$67,$77,$7f,$8f,$71,$4b,$67,$77,$7f,$80,$12,$2f,$00,$c3,$8a,$79,$4b,$40,$74,$5f,$8f,$8a,$79,$4b,$40,$74,$5f,$80,$14,$30,$00,$c3,$8a,$41,$5a,$71,$58,$42,$46,$8f,$8a,$41,$5a,$71,$58,$42,$46,$80,$12,$31,$00,$c3,$8a,$8a,$69,$68,$41,$48,$7c,$8f,$69,$68,$41,$48,$7c,$80,$14,$32,$00,$c3,$8a,$41,$6d,$4f,$67,$62,$72,$8f,$8a,$41,$6d,$4f,$67,$62,$72,$80,$14,$33,$00,$c3,$8a,$8a,$41,$6c,$5b,$79,$4d,$70,$8f,$41,$6c,$5b,$79,$4d,$70,$80,$12,$34,$00,$c3,$8a,$6a,$42,$50,$7f,$71,$8f,$8a,$6a,$42,$50,$7f,$71,$80,$12,$35,$00,$c3,$8a,$8a,$70,$7d,$50,$7d,$57,$8f,$70,$7d,$50,$7d,$57,$80,$12,$36,$00,$c3,$8a,$51,$78,$68,$57,$60,$8f,$8a,$51,$78,$68,$57,$60,$80,$12,$37,$00,$c3,$8a,$6c,$73,$51,$6f,$46,$8f,$8a,$6c,$73,$51,$6f,$46,$80,$12,$38,$00,$c3,$8a,$8a,$4e,$45,$68,$57,$5c,$8f,$4e,$45,$68,$57,$5c,$80,$14,$39,$00,$c3,$8a,$8a,$41,$52,$42,$4d,$71,$72,$8f,$41,$52,$42,$4d,$71,$72,$80,$14,$3a,$00,$c3,$8a,$41,$65,$57,$52,$64,$7d,$8f,$8a,$41,$65,$57,$52,$64,$7d,$80,$14,$3b,$00,$c3,$8a,$41,$76,$6e,$44,$78,$58,$8f,$8a,$41,$76,$6e,$44,$78,$58,$80,$14,$3c,$00,$c3,$8a,$8a,$41,$77,$62,$5e,$50,$79,$8f,$41,$77,$62,$5e,$50,$79,$80,$12,$3d,$00,$c3,$8a,$7e,$6f,$4e,$79,$40,$8f,$8a,$7e,$6f,$4e,$79,$40,$80,$12,$3e,$00,$c3,$8a,$46,$64,$47,$71,$5b,$8f,$8a,$46,$64,$47,$71,$5b,$80,$12,$3f,$00,$c3,$8a,$8a,$67,$52,$61,$7f,$54,$8f,$67,$52,$61,$7f,$54,$80,$14,$40,$00,$c3,$8a,$41,$44,$6e,$7d,$44,$63,$8f,$8a,$41,$44,$6e,$7d,$44,$63,$80,$14,$41,$00,$c3,$8a,$8a,$41,$6c,$57,$6d,$75,$4a,$8f,$41,$6c,$57,$6d,$75,$4a,$80,$12,$42,$00,$c3,$8a,$8a,$74,$4d,$66,$68,$6e,$8f,$74,$4d,$66,$68,$6e,$80,$14,$43,$00,$c3,$8a,$8a,$41,$5f,$5d,$42,$6f,$7a,$8f,$41,$5f,$5d,$42,$6f,$7a,$80,$10,$44,$00,$c3,$8a,$8a,$4e,$4a,$66,$5f,$8f,$4e,$4a,$66,$5f,$80,$14,$45,$00,$c3,$8a,$8a,$41,$50,$64,$7f,$7e,$7e,$8f,$41,$50,$64,$7f,$7e,$7e,$80,$12,$46,$00,$c3,$8a,$7c,$41,$59,$78,$69,$8f,$8a,$7c,$41,$59,$78,$69,$80,$12,$47,$00,$c3,$8a,$6f,$6a,$6a,$5a,$63,$8f,$8a,$6f,$6a,$6a,$5a,$63,$80,$14,$48,$00,$c3,$8a,$8a,$41,$43,$58,$43,$6a,$6b,$8f,$41,$43,$58,$43,$6a,$6b,$80,$12,$49,$00,$c3,$8a,$7e,$6c,$76,$58,$55,$8f,$8a,$7e,$6c,$76,$58,$55,$80,$12,$4a,$00,$c3,$8a,$8a,$73,$4b,$7a,$75,$66,$8f,$73,$4b,$7a,$75,$66,$80,$12,$4b,$00,$c3,$8a,$56,$6c,$4f,$74,$4e,$8f,$8a,$56,$6c,$4f,$74,$4e,$80,$12,$4c,$00,$c3,$8a,$8a,$5f,$51,$6c,$60,$40,$8f,$5f,$51,$6c,$60,$40,$80,$12,$4d,$00,$c3,$8a,$8a,$62,$6a,$44,$6d,$50,$8f,$62,$6a,$44,$6d,$50,$80,$12,$4e,$00,$c3,$8a,$8a,$4f,$51,$76,$6e,$52,$8f,$4f,$51,$76,$6e,$52,$80,$14,$4f,$00,$c3,$8a,$41,$7d,$40,$53,$70,$4e,$8f,$8a,$41,$7d,$40,$53,$70,$4e,$80,$12,$50,$00,$c3,$8a,$8a,$49,$47,$4a,$69,$64,$8f,$49,$47,$4a,$69,$64,$80,$12,$51,$00,$c3,$8a,$5a,$75,$7f,$7e,$43,$8f,$8a,$5a,$75,$7f,$7e,$43,$80,$14,$52,$00,$c3,$8a,$8a,$41,$51,$67,$54,$42,$7b,$8f,$41,$51,$67,$54,$42,$7b,$80,$12,$53,$00,$c3,$8a,$8a,$48,$5c,$7f,$72,$60,$8f,$48,$5c,$7f,$72,$60,$80,$14,$54,$00,$c3,$8a,$8a,$41,$61,$4e,$7d,$78,$76,$8f,$41,$61,$4e,$7d,$78,$76,$80,$12,$55,$00,$c3,$8a,$8a,$70,$4f,$48,$4c,$6f,$8f,$70,$4f,$48,$4c,$6f,$80,$14,$56,$00,$c3,$8a,$41,$57,$50,$46,$45,$6c,$8f,$8a,$41,$57,$50,$46,$45,$6c,$80,$12,$57,$00,$c3,$8a,$8a,$6f,$4d,$74,$62,$7e,$8f,$6f,$4d,$74,$62,$7e,$80,$12,$58,$00,$c3,$8a,$61,$6a,$68,$6a,$4e,$8f,$8a,$61,$6a,$68,$6a,$4e,$80,$14,$59,$00,$c3,$8a,$41,$55,$54,$7a,$45,$5a,$8f,$8a,$41,$55,$54,$7a,$45,$5a,$80,$12,$5a,$00,$c3,$8a,$8a,$42,$4c,$53,$78,$77,$8f,$42,$4c,$53,$78,$77,$80,$14,$5b,$00,$c3,$8a,$41,$47,$63,$69,$6d,$49,$8f,$8a,$41,$47,$63,$69,$6d,$49,$80,$14,$5c,$00,$c3,$8a,$8a,$41,$7c,$55,$46,$48,$6b,$8f,$41,$7c,$55,$46,$48,$6b,$80,$14,$5d,$00,$c3,$8a,$41,$6e,$47,$77,$4e,$55,$8f,$8a,$41,$6e,$47,$77,$4e,$55,$80,$12,$5e,$00,$c3,$8a,$56,$56,$63,$64,$76,$8f,$8a,$56,$56,$63,$64,$76,$80,$14,$5f,$00,$c3,$8a,$8a,$41,$57,$7e,$6a,$52,$55,$8f,$41,$57,$7e,$6a,$52,$55,$80,$14,$60,$00,$c3,$8a,$41,$78,$61,$62,$56,$5d,$8f,$8a,$41,$78,$61,$62,$56,$5d,$80,$14,$61,$00,$c3,$8a,$41,$5a,$4d,$75,$7d,$48,$8f,$8a,$41,$5a,$4d,$75,$7d,$48,$80,$14,$62,$00,$c3,$8a,$8a,$41,$67,$54,$7d,$64,$5a,$8f,$41,$67,$54,$7d,$64,$5a,$80,$12,$63,$00,$c3,$8a,$68,$6b,$5e,$73,$5a,$8f,$8a,$68,$6b,$5e,$73,$5a,$80,$14,$64,$00,$c3,$8a,$8a,$41,$5f,$6c,$5c,$40,$57,$8f,$41,$5f,$6c,$5c,$40,$57,$80,$12,$65,$00,$c3,$8a,$8a,$7f,$79,$7a,$6e,$65,$8f,$7f,$79,$7a,$6e,$65,$80,$14,$66,$00,$c3,$8a,$41,$66,$61,$57,$4f,$76,$8f,$8a,$41,$66,$61,$57,$4f,$76,$80,$12,$67,$00,$c3,$8a,$66,$64,$65,$54,$45,$8f,$8a,$66,$64,$65,$54,$45,$80,$14,$68,$00,$c3,$8a,$41,$5e,$4c,$79,$4e,$57,$8f,$8a,$41,$5e,$4c,$79,$4e,$57,$80,$14,$69,$00,$c3,$8a,$41,$57,$57,$43,$69,$74,$8f,$8a,$41,$57,$57,$43,$69,$74,$80,$14,$6a,$00,$c3,$8a,$8a,$41,$50,$65,$53,$6b,$6d,$8f,$41,$50,$65,$53,$6b,$6d,$80,$12,$6b,$00,$c3,$8a,$69,$4b,$55,$6e,$50,$8f,$8a,$69,$4b,$55,$6e,$50,$80,$12,$6c,$00,$c3,$8a,$6c,$63,$54,$78,$6c,$8f,$8a,$6c,$63,$54,$78,$6c,$80,$12,$6d,$00,$c3,$8a,$56,$60,$69,$71,$46,$8f,$8a,$56,$60,$69,$71,$46,$80,$12,$6e,$00,$c3,$8a,$56,$6f,$6e,$5f,$5f,$8f,$8a,$56,$6f,$6e,$5f,$5f,$80,$14,$6f,$00,$c3,$8a,$41,$4b,$5c,$4d,$47,$48,$8f,$8a,$41,$4b,$5c,$4d,$47,$48,$80,$12,$70,$00,$c3,$8a,$8a,$6b,$76,$4b,$7f,$70,$8f,$6b,$76,$4b,$7f,$70,$80,$14,$71,$00,$c3,$8a,$41,$40,$76,$59,$44,$66,$8f,$8a,$41,$40,$76,$59,$44,$66,$80,$12,$72,$00,$c3,$8a,$4f,$5d,$77,$6f,$71,$8f,$8a,$4f,$5d,$77,$6f,$71,$80,$12,$73,$00,$c3,$8a,$8a,$51,$49,$49,$4c,$7f,$8f,$51,$49,$49,$4c,$7f,$80,$14,$74,$00,$c3,$8a,$41,$5f,$52,$4a,$4e,$72,$8f,$8a,$41,$5f,$52,$4a,$4e,$72,$80,$12,$75,$00,$c3,$8a,$8a,$63,$7f,$6c,$46,$67,$8f,$63,$7f,$6c,$46,$67,$80,$12,$76,$00,$c3,$8a,$8a,$68,$74,$59,$4e,$5f,$8f,$68,$74,$59,$4e,$5f,$80,$12,$77,$00,$c3,$8a,$53,$7e,$5c,$66,$7e,$8f,$8a,$53,$7e,$5c,$66,$7e,$80,$12,$78,$00,$c3,$8a,$49,$53,$7a,$5a,$56,$8f,$8a,$49,$53,$7a,$5a,$56,$80,$12,$79,$00,$c3,$8a,$45,$55,$68,$5e,$6a,$8f,$8a,$45,$55,$68,$5e,$6a,$80,$12,$7a,$00,$c3,$8a,$8a,$5e,$47,$54,$74,$4b,$8f,$5e,$47,$54,$74,$4b,$80,$12,$7b,$00,$c3,$8a,$8a,$4b,$49,$5c,$62,$40,$8f,$4b,$49,$5c,$62,$40,$80,$14,$7c,$00,$c3,$8a,$8a,$41,$7f,$6d,$58,$51,$74,$8f,$41,$7f,$6d,$58,$51,$74,$80,$14,$7d,$00,$c3,$8a,$41,$54,$53,$4e,$44,$54,$8f,$8a,$41,$54,$53,$4e,$44,$54,$80,$12,$7e,$00,$c3,$8a,$62,$40,$46,$61,$79,$8f,$8a,$62,$40,$46,$61,$79,$80,$12,$7f,$00,$c3,$8a,$79,$76,$40,$48,$77,$8f,$8a,$79,$76,$40,$48,$77,$80,$14,$80,$00,$c3,$8a,$8a,$41,$42,$74,$59,$75,$5c,$8f,$41,$42,$74,$59,$75,$5c,$80,$14,$81,$00,$c3,$8a,$41,$6e,$4e,$5c,$4c,$78,$8f,$8a,$41,$6e,$4e,$5c,$4c,$78,$80,$12,$82,$00,$c3,$8a,$5e,$59,$60,$50,$5b,$8f,$8a,$5e,$59,$60,$50,$5b,$80,$14,$83,$00,$c3,$8a,$8a,$41,$61,$5e,$7c,$40,$70,$8f,$41,$61,$5e,$7c,$40,$70,$80,$12,$84,$00,$c3,$8a,$8a,$64,$4b,$6b,$6b,$6b,$8f,$64,$4b,$6b,$6b,$6b,$80,$14,$85,$00,$c3,$8a,$41,$7b,$7c,$7f,$6d,$40,$8f,$8a,$41,$7b,$7c,$7f,$6d,$40,$80,$14,$86,$00,$c3,$8a,$41,$40,$58,$7a,$7f,$40,$8f,$8a,$41,$40,$58,$7a,$7f,$40,$80,$14,$87,$00,$c3,$8a,$41,$7f,$65,$70,$46,$6a,$8f,$8a,$41,$7f,$65,$70,$46,$6a,$80,$14,$88,$00,$c3,$8a,$41,$5a,$73,$4d,$69,$6d,$8f,$8a,$41,$5a,$73,$4d,$69,$6d,$80,$12,$89,$00,$c3,$8a,$8a,$54,$4b,$6a,$44,$5e,$8f,$54,$4b,$6a,$44,$5e,$80,$14,$8a,$00,$c3,$8a,$41,$4b,$4e,$69,$4a,$58,$8f,$8a,$41,$4b,$4e,$69,$4a,$58,$80,$12,$8b,$00,$c3,$8a,$55,$46,$6e,$51,$5b,$8f,$8a,$55,$46,$6e,$51,$5b,$80,$14,$8c,$00,$c3,$8a,$8a,$41,$75,$4c,$42,$68,$5d,$8f,$41,$75,$4c,$42,$68,$5d,$80,$14,$8d,$00,$c3,$8a,$41,$69,$78,$5d,$58,$56,$8f,$8a,$41,$69,$78,$5d,$58,$56,$80,$14,$8e,$00,$c3,$8a,$41,$5e,$63,$7a,$79,$46,$8f,$8a,$41,$5e,$63,$7a,$79,$46,$80,$14,$8f,$00,$c3,$8a,$41,$6d,$54,$75,$5a,$56,$8f,$8a,$41,$6d,$54,$75,$5a,$56,$80,$12,$90,$00,$c3,$8a,$8a,$5c,$75,$65,$66,$43,$8f,$5c,$75,$65,$66,$43,$80,$12,$91,$00,$c3,$8a,$8a,$50,$6a,$53,$67,$64,$8f,$50,$6a,$53,$67,$64,$80,$12,$92,$00,$c3,$8a,$8a,$46,$5b,$68,$67,$49,$8f,$46,$5b,$68,$67,$49,$80,$12,$93,$00,$c3,$8a,$45,$58,$7a,$47,$60,$8f,$8a,$45,$58,$7a,$47,$60,$80,$12,$94,$00,$c3,$8a,$5b,$69,$61,$5b,$54,$8f,$8a,$5b,$69,$61,$5b,$54,$80,$12,$95,$00,$c3,$8a,$8a,$41,$6c,$7e,$6d,$74,$8f,$41,$6c,$7e,$6d,$74,$80,$14,$96,$00,$c3,$8a,$8a,$41,$72,$79,$63,$54,$5a,$8f,$41,$72,$79,$63,$54,$5a,$80,$14,$97,$00,$c3,$8a,$41,$6b,$74,$58,$55,$6f,$8f,$8a,$41,$6b,$74,$58,$55,$6f,$80,$12,$98,$00,$c3,$8a,$8a,$7f,$4e,$67,$74,$41,$8f,$7f,$4e,$67,$74,$41,$80,$14,$99,$00,$c3,$8a,$41,$4a,$53,$5b,$70,$61,$8f,$8a,$41,$4a,$53,$5b,$70,$61,$80,$12,$9a,$00,$c3,$8a,$41,$5e,$50,$6f,$77,$8f,$8a,$41,$5e,$50,$6f,$77,$80,$14,$9b,$00,$c3,$8a,$41,$54,$7d,$55,$6d,$43,$8f,$8a,$41,$54,$7d,$55,$6d,$43,$80,$14,$9c,$00,$c3,$8a,$8a,$41,$53,$51,$48,$7c,$51,$8f,$41,$53,$51,$48,$7c,$51,$80,$12,$9d,$00,$c3,$8a,$8a,$4e,$53,$70,$4a,$46,$8f,$4e,$53,$70,$4a,$46,$80,$12,$9e,$00,$c3,$8a,$77,$58,$66,$62,$6e,$8f,$8a,$77,$58,$66,$62,$6e,$80,$14,$9f,$00,$c3,$8a,$41,$57,$4e,$6c,$4f,$74,$8f,$8a,$41,$57,$4e,$6c,$4f,$74,$80,$12,$a0,$00,$c3,$8a,$59,$4d,$78,$46,$63,$8f,$8a,$59,$4d,$78,$46,$63,$80,$12,$a1,$00,$c3,$8a,$78,$67,$45,$6a,$7d,$8f,$8a,$78,$67,$45,$6a,$7d,$80,$14,$a2,$00,$c3,$8a,$8a,$41,$58,$74,$7d,$50,$55,$8f,$41,$58,$74,$7d,$50,$55,$80,$14,$a3,$00,$c3,$8a,$41,$6b,$5b,$6b,$71,$77,$8f,$8a,$41,$6b,$5b,$6b,$71,$77,$80,$14,$a4,$00,$c3,$8a,$41,$71,$7b,$65,$47,$50,$8f,$8a,$41,$71,$7b,$65,$47,$50,$80,$12,$a5,$00,$c3,$8a,$7e,$65,$74,$59,$73,$8f,$8a,$7e,$65,$74,$59,$73,$80,$14,$a6,$00,$c3,$8a,$8a,$41,$7b,$77,$7c,$68,$50,$8f,$41,$7b,$77,$7c,$68,$50,$80,$12,$a7,$00,$c3,$8a,$8a,$6b,$6c,$57,$4b,$79,$8f,$6b,$6c,$57,$4b,$79,$80,$12,$a8,$00,$c3,$8a,$8a,$65,$59,$6b,$46,$6f,$8f,$65,$59,$6b,$46,$6f,$80,$14,$a9,$00,$c3,$8a,$41,$72,$6a,$47,$72,$5b,$8f,$8a,$41,$72,$6a,$47,$72,$5b,$80,$12,$aa,$00,$c3,$8a,$4f,$4d,$52,$41,$57,$8f,$8a,$4f,$4d,$52,$41,$57,$80,$12,$ab,$00,$c3,$8a,$8a,$4d,$4a,$59,$50,$5b,$8f,$4d,$4a,$59,$50,$5b,$80,$12,$ac,$00,$c3,$8a,$8a,$51,$6a,$5e,$75,$54,$8f,$51,$6a,$5e,$75,$54,$80,$14,$ad,$00,$c3,$8a,$8a,$41,$6a,$7b,$46,$55,$4c,$8f,$41,$6a,$7b,$46,$55,$4c,$80,$14,$ae,$00,$c3,$8a,$41,$54,$61,$61,$44,$40,$8f,$8a,$41,$54,$61,$61,$44,$40,$80,$10,$af,$00,$c3,$8a,$8a,$69,$6a,$7d,$59,$8f,$69,$6a,$7d,$59,$80,$14,$b0,$00,$c3,$8a,$41,$77,$69,$57,$4d,$61,$8f,$8a,$41,$77,$69,$57,$4d,$61,$80,$14,$b1,$00,$c3,$8a,$41,$78,$79,$7a,$6e,$45,$8f,$8a,$41,$78,$79,$7a,$6e,$45,$80,$14,$b2,$00,$c3,$8a,$41,$4e,$63,$40,$5d,$6b,$8f,$8a,$41,$4e,$63,$40,$5d,$6b,$80,$14,$b3,$00,$c3,$8a,$8a,$41,$41,$66,$4a,$40,$74,$8f,$41,$41,$66,$4a,$40,$74,$80,$14,$b4,$00,$c3,$8a,$41,$48,$77,$70,$61,$49,$8f,$8a,$41,$48,$77,$70,$61,$49,$80,$12,$b5,$00,$c3,$8a,$8a,$79,$53,$7d,$70,$56,$8f,$79,$53,$7d,$70,$56,$80,$12,$b6,$00,$c3,$8a,$74,$72,$65,$6a,$59,$8f,$8a,$74,$72,$65,$6a,$59,$80,$14,$b7,$00,$c3,$8a,$8a,$41,$68,$5f,$55,$70,$5a,$8f,$41,$68,$5f,$55,$70,$5a,$80,$12,$b8,$00,$c3,$8a,$65,$48,$48,$5b,$54,$8f,$8a,$65,$48,$48,$5b,$54,$80,$14,$b9,$00,$c3,$8a,$41,$72,$7d,$61,$6c,$55,$8f,$8a,$41,$72,$7d,$61,$6c,$55,$80,$14,$ba,$00,$c3,$8a,$41,$73,$71,$57,$66,$69,$8f,$8a,$41,$73,$71,$57,$66,$69,$80,$12,$bb,$00,$c3,$8a,$8a,$76,$78,$6a,$75,$5b,$8f,$76,$78,$6a,$75,$5b,$80,$14,$bc,$00,$c3,$8a,$8a,$41,$7b,$5a,$64,$52,$5f,$8f,$41,$7b,$5a,$64,$52,$5f,$80,$12,$bd,$00,$c3,$8a,$8a,$54,$64,$44,$67,$4b,$8f,$54,$64,$44,$67,$4b,$80,$12,$be,$00,$c3,$8a,$44,$50,$7b,$6e,$41,$8f,$8a,$44,$50,$7b,$6e,$41,$80,$14,$bf,$00,$c3,$8a,$8a,$41,$5a,$67,$46,$58,$63,$8f,$41,$5a,$67,$46,$58,$63,$80,$14,$c0,$00,$c3,$8a,$8a,$41,$56,$5c,$42,$78,$5f,$8f,$41,$56,$5c,$42,$78,$5f,$80,$14,$c1,$00,$c3,$8a,$41,$68,$4c,$69,$56,$5f,$8f,$8a,$41,$68,$4c,$69,$56,$5f,$80,$12,$c2,$00,$c3,$8a,$8a,$7a,$6f,$60,$5c,$58,$8f,$7a,$6f,$60,$5c,$58,$80,$14,$c3,$00,$c3,$8a,$41,$5a,$68,$41,$67,$56,$8f,$8a,$41,$5a,$68,$41,$67,$56,$80,$12,$c4,$00,$c3,$8a,$71,$6d,$5b,$44,$6a,$8f,$8a,$71,$6d,$5b,$44,$6a,$80,$12,$c5,$00,$c3,$8a,$8a,$77,$7c,$60,$44,$76,$8f,$77,$7c,$60,$44,$76,$80,$14,$c6,$00,$c3,$8a,$41,$43,$53,$6f,$5f,$6e,$8f,$8a,$41,$43,$53,$6f,$5f,$6e,$80,$14,$c7,$00,$c3,$8a,$41,$43,$5b,$4d,$60,$68,$8f,$8a,$41,$43,$5b,$4d,$60,$68,$80,$14,$c8,$00,$c3,$8a,$8a,$41,$43,$65,$7f,$49,$70,$8f,$41,$43,$65,$7f,$49,$70,$80,$14,$c9,$00,$c3,$8a,$8a,$41,$78,$64,$65,$44,$7a,$8f,$41,$78,$64,$65,$44,$7a,$80,$14,$ca,$00,$c3,$8a,$8a,$41,$55,$4d,$5d,$7e,$7a,$8f,$41,$55,$4d,$5d,$7e,$7a,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1B0D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2B0D -  -  -  -  EndTestInstance:
   18 00:2B0D -  -  -  -  		
   19 00:2B0D -  -  -  -  ; ***************************************************************************************
   20 00:2B0D -  -  -  -  ;
   21 00:2B0D -  -  -  -  ;									Changes and Updates
   22 00:2B0D -  -  -  -  ;
   23 00:2B0D -  -  -  -  ; ***************************************************************************************
   24 00:2B0D -  -  -  -  ;
   25 00:2B0D -  -  -  -  ;		Date			Notes
   26 00:2B0D -  -  -  -  ;		==== 			=====
   27 00:2B0D -  -  -  -  ;
   28 00:2B0D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:2B0D -  -  -  -  FinalAddress:
