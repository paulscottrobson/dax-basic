    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD 42 0D 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 B9 30 00 		ld 		hl,EndTestInstance
   46 00:000C CD 68 07 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 58 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 6D 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD 44 0D 00 		call 	SYSPrintChar
   56 00:0020 CD 43 0D 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 23 
              02 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 23 
              02 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  		
   59 00:004C -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:004C 00 00 00 00 		.dw 	0,0
   61 00:0050 -  -  -  -  
   62 00:0050 -  -  -  -  ; ***************************************************************************************
   63 00:0050 -  -  -  -  ;
   64 00:0050 -  -  -  -  ;										Run variables
   65 00:0050 -  -  -  -  ;
   66 00:0050 -  -  -  -  ; ***************************************************************************************
   67 00:0050 -  -  -  -  
   68 00:0050 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  		
   71 00:0054 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:0054 00 00 00 00 		.dw 	0,0
   73 00:0058 -  -  -  -  
   74 00:0058 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:0058 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:005E -  -  -  -  
   77 00:005E -  -  -  -  AConvert: 									; used for address conversions.
   78 00:005E 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:0064 -  -  -  -  		
   80 00:0064 -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:0064 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:0074 -  -  -  -  
   83 00:0074 -  -  -  -  s; ***************************************************************************************
   84 00:0074 -  -  -  -  ;
   85 00:0074 -  -  -  -  ;										  Buffers
   86 00:0074 -  -  -  -  ;
   87 00:0074 -  -  -  -  ; ***************************************************************************************
   88 00:0074 -  -  -  -  
   89 00:0074 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 00:0074 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 00:0084 -  -  -  -  
   92 00:0084 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 00:0084 00 00 -  -  		.dw 	0
   94 00:0086 -  -  -  -  
   95 00:0086 -  -  -  -  ConvertBuffer: 								; general usage
   96 00:0086 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 00:00C6 -  -  -  -  
   98 00:00C6 -  -  -  -  ; ***************************************************************************************
   99 00:00C6 -  -  -  -  ;
  100 00:00C6 -  -  -  -  ;									Changes and Updates
  101 00:00C6 -  -  -  -  ;
  102 00:00C6 -  -  -  -  ; ***************************************************************************************
  103 00:00C6 -  -  -  -  ;
  104 00:00C6 -  -  -  -  ;		Date			Notes
  105 00:00C6 -  -  -  -  ;		==== 			=====
  106 00:00C6 -  -  -  -  ;
  107 00:00C6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00C6 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00C6 -  -  -  -  ; ***************************************************************************************
    2 00:00C6 -  -  -  -  ; ***************************************************************************************
    3 00:00C6 -  -  -  -  ;
    4 00:00C6 -  -  -  -  ;		Name : 		assert.asm
    5 00:00C6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C6 -  -  -  -  ;		Reviewed :	No
    8 00:00C6 -  -  -  -  ;		Purpose :	Assert command
    9 00:00C6 -  -  -  -  ;
   10 00:00C6 -  -  -  -  ; ***************************************************************************************
   11 00:00C6 -  -  -  -  ; ***************************************************************************************
   12 00:00C6 -  -  -  -  
   13 00:00C6 -  -  -  -  ; ***************************************************************************************
   14 00:00C6 -  -  -  -  ;
   15 00:00C6 -  -  -  -  ;									ASSERT command
   16 00:00C6 -  -  -  -  ;
   17 00:00C6 -  -  -  -  ; ***************************************************************************************
   18 00:00C6 -  -  -  -  
   19 00:00C6 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00C6 CD 56 04 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00CA 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00D0 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00D1 3E 01 C3 23 
              02 00 -  -  		ERR_ASSERT
   24 00:00D7 -  -  -  -  
   25 00:00D7 -  -  -  -  ; ***************************************************************************************
   26 00:00D7 -  -  -  -  ;
   27 00:00D7 -  -  -  -  ;									Changes and Updates
   28 00:00D7 -  -  -  -  ;
   29 00:00D7 -  -  -  -  ; ***************************************************************************************
   30 00:00D7 -  -  -  -  ;
   31 00:00D7 -  -  -  -  ;		Date			Notes
   32 00:00D7 -  -  -  -  ;		==== 			=====
   33 00:00D7 -  -  -  -  ;
   34 00:00D7 -  -  -  -  ; ***************************************************************************************
   35 00:00D7 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00D7 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00D7 -  -  -  -  ; ***************************************************************************************
    2 00:00D7 -  -  -  -  ; ***************************************************************************************
    3 00:00D7 -  -  -  -  ;
    4 00:00D7 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00D7 -  -  -  -  ;		Reviewed :	No
    8 00:00D7 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00D7 -  -  -  -  ;
   10 00:00D7 -  -  -  -  ; ***************************************************************************************
   11 00:00D7 -  -  -  -  ; ***************************************************************************************
   12 00:00D7 -  -  -  -  
   13 00:00D7 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00D7 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00D7 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00D7 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00D7 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00D7 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00D7 C3 8D 02 00 		jp 		SyntaxError
   20 00:00DB -  -  -  -  
   21 00:00DB -  -  -  -  ; ***************************************************************************************
   22 00:00DB -  -  -  -  ;
   23 00:00DB -  -  -  -  ;									Changes and Updates
   24 00:00DB -  -  -  -  ;
   25 00:00DB -  -  -  -  ; ***************************************************************************************
   26 00:00DB -  -  -  -  ;
   27 00:00DB -  -  -  -  ;		Date			Notes
   28 00:00DB -  -  -  -  ;		==== 			=====
   29 00:00DB -  -  -  -  ;
   30 00:00DB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00DB -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00DB -  -  -  -  ; ***************************************************************************************
    2 00:00DB -  -  -  -  ; ***************************************************************************************
    3 00:00DB -  -  -  -  ;
    4 00:00DB -  -  -  -  ;		Name : 		colon.asm
    5 00:00DB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DB -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00DB -  -  -  -  ;		Reviewed :	No
    8 00:00DB -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00DB -  -  -  -  ;
   10 00:00DB -  -  -  -  ; ***************************************************************************************
   11 00:00DB -  -  -  -  ; ***************************************************************************************
   12 00:00DB -  -  -  -  
   13 00:00DB -  -  -  -  ; ***************************************************************************************
   14 00:00DB -  -  -  -  ;
   15 00:00DB -  -  -  -  ;								Colon command, this is ignored.
   16 00:00DB -  -  -  -  ;
   17 00:00DB -  -  -  -  ; ***************************************************************************************
   18 00:00DB -  -  -  -  
   19 00:00DB -  -  -  -  Command_Colon: 	;; [:]
   20 00:00DB C9 -  -  -  		ret
   21 00:00DC -  -  -  -  
   22 00:00DC -  -  -  -  ; ***************************************************************************************
   23 00:00DC -  -  -  -  ;
   24 00:00DC -  -  -  -  ;									Changes and Updates
   25 00:00DC -  -  -  -  ;
   26 00:00DC -  -  -  -  ; ***************************************************************************************
   27 00:00DC -  -  -  -  ;
   28 00:00DC -  -  -  -  ;		Date			Notes
   29 00:00DC -  -  -  -  ;		==== 			=====
   30 00:00DC -  -  -  -  ;
   31 00:00DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00DC -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00DC -  -  -  -  ; ***************************************************************************************
    2 00:00DC -  -  -  -  ; ***************************************************************************************
    3 00:00DC -  -  -  -  ;
    4 00:00DC -  -  -  -  ;		Name : 		end.asm
    5 00:00DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DC -  -  -  -  ;		Reviewed :	No
    8 00:00DC -  -  -  -  ;		Purpose :	End command
    9 00:00DC -  -  -  -  ;
   10 00:00DC -  -  -  -  ; ***************************************************************************************
   11 00:00DC -  -  -  -  ; ***************************************************************************************
   12 00:00DC -  -  -  -  
   13 00:00DC -  -  -  -  ; ***************************************************************************************
   14 00:00DC -  -  -  -  ;
   15 00:00DC -  -  -  -  ;										END command
   16 00:00DC -  -  -  -  ;
   17 00:00DC -  -  -  -  ; ***************************************************************************************
   18 00:00DC -  -  -  -  
   19 00:00DC -  -  -  -  Command_END: 	;; [end]
   20 00:00DC 3E 00 C3 23 
              02 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00E2 -  -  -  -  
   22 00:00E2 -  -  -  -  ; ***************************************************************************************
   23 00:00E2 -  -  -  -  ;
   24 00:00E2 -  -  -  -  ;									Changes and Updates
   25 00:00E2 -  -  -  -  ;
   26 00:00E2 -  -  -  -  ; ***************************************************************************************
   27 00:00E2 -  -  -  -  ;
   28 00:00E2 -  -  -  -  ;		Date			Notes
   29 00:00E2 -  -  -  -  ;		==== 			=====
   30 00:00E2 -  -  -  -  ;
   31 00:00E2 -  -  -  -  ; ***************************************************************************************
   32 00:00E2 -  -  -  -  		
Listing for file "_build.asm"
   17 00:00E2 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00E2 -  -  -  -  ; ***************************************************************************************
    2 00:00E2 -  -  -  -  ; ***************************************************************************************
    3 00:00E2 -  -  -  -  ;
    4 00:00E2 -  -  -  -  ;		Name : 		endofline.asm
    5 00:00E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E2 -  -  -  -  ;		Reviewed :	None
    8 00:00E2 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00E2 -  -  -  -  ;
   10 00:00E2 -  -  -  -  ; ***************************************************************************************
   11 00:00E2 -  -  -  -  ; ***************************************************************************************
   12 00:00E2 -  -  -  -  
   13 00:00E2 -  -  -  -  ; ***************************************************************************************
   14 00:00E2 -  -  -  -  ;
   15 00:00E2 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00E2 -  -  -  -  ;
   17 00:00E2 -  -  -  -  ; ***************************************************************************************
   18 00:00E2 -  -  -  -  
   19 00:00E2 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00E2 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00E7 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00EB DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00EE DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00F0 -  -  -  -  		;
   25 00:00F0 ED 7B 54 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00F5 C3 7B 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00F9 -  -  -  -  
   28 00:00F9 -  -  -  -  ; ***************************************************************************************
   29 00:00F9 -  -  -  -  ;
   30 00:00F9 -  -  -  -  ;									Changes and Updates
   31 00:00F9 -  -  -  -  ;
   32 00:00F9 -  -  -  -  ; ***************************************************************************************
   33 00:00F9 -  -  -  -  ;
   34 00:00F9 -  -  -  -  ;		Date			Notes
   35 00:00F9 -  -  -  -  ;		==== 			=====
   36 00:00F9 -  -  -  -  ;
   37 00:00F9 -  -  -  -  ; ***************************************************************************************
   38 00:00F9 -  -  -  -  		
Listing for file "_build.asm"
   18 00:00F9 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:00F9 -  -  -  -  ; ***************************************************************************************
    2 00:00F9 -  -  -  -  ; ***************************************************************************************
    3 00:00F9 -  -  -  -  ;
    4 00:00F9 -  -  -  -  ;		Name : 		print.asm
    5 00:00F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F9 -  -  -  -  ;		Reviewed :	No
    8 00:00F9 -  -  -  -  ;		Purpose :	Print command
    9 00:00F9 -  -  -  -  ;
   10 00:00F9 -  -  -  -  ; ***************************************************************************************
   11 00:00F9 -  -  -  -  ; ***************************************************************************************
   12 00:00F9 -  -  -  -  
   13 00:00F9 -  -  -  -  ; ***************************************************************************************
   14 00:00F9 -  -  -  -  ;
   15 00:00F9 -  -  -  -  ;										PRINT command
   16 00:00F9 -  -  -  -  ;
   17 00:00F9 -  -  -  -  ; ***************************************************************************************
   18 00:00F9 -  -  -  -  
   19 00:00F9 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:00F9 -  -  -  -  		;
   21 00:00F9 -  -  -  -  		;		Main loop
   22 00:00F9 -  -  -  -  		;
   23 00:00F9 -  -  -  -  _CPRLoop:
   24 00:00F9 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:00FC FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:00FE 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:0100 FE A5 -  -  		cp 		KWD_COLON 	
   28 00:0102 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:0104 FE A6 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:0106 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:0108 FE A4 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:010A 28 2C -  -  		jr 		z,_CPRTab
   33 00:010C FE A7 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:010E 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:0110 -  -  -  -  		;
   36 00:0110 CD 4E 04 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:0114 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:0116 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:0118 -  -  -  -  		;
   40 00:0118 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:011A -  -  -  -  _CPRPrintNumber:
   42 00:011A F5 -  -  -  		push 	af 							; print leading space
   43 00:011B 3E 20 -  -  		ld 		a,' '
   44 00:011D CD 44 0D 00 		call 	SYSPrintChar
   45 00:0121 F1 -  -  -  		pop 	af
   46 00:0122 01 86 00 00 		ld  	bc,ConvertBuffer
   47 00:0126 C5 -  -  -  		push 	bc
   48 00:0127 CD F5 0C 00 		call 	Int32ToString 				; convert to string
   49 00:012B E1 -  -  -  		pop 	hl
   50 00:012C -  -  -  -  		;
   51 00:012C -  -  -  -  		; 		Print text at HL.
   52 00:012C -  -  -  -  		;
   53 00:012C -  -  -  -  _CPRPrintHL:
   54 00:012C CD 87 07 00 		call 	PrintStringAtHL 			; print string out
   55 00:0130 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:0132 -  -  -  -  		;
   57 00:0132 -  -  -  -  		; 		New line (')
   58 00:0132 -  -  -  -  		;
   59 00:0132 -  -  -  -  _CPRNewLine:
   60 00:0132 CD 45 0D 00 		call 	SYSPrintCRLF
   61 00:0136 18 06 -  -  		jr 		_CPRCheckNext
   62 00:0138 -  -  -  -  		;
   63 00:0138 -  -  -  -  		; 		Tab command (,)
   64 00:0138 -  -  -  -  		;
   65 00:0138 -  -  -  -  _CPRTab:
   66 00:0138 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:013A CD 44 0D 00 		call 	SYSPrintChar
   68 00:013E -  -  -  -  		;
   69 00:013E -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:013E -  -  -  -  		;
   71 00:013E -  -  -  -  _CPRCheckNext:
   72 00:013E DD 23 -  -  		inc 	ix 							; consume current
   73 00:0140 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:0143 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:0145 C8 -  -  -  		ret 	z
   76 00:0146 FE A5 -  -  		cp 		KWD_COLON
   77 00:0148 C8 -  -  -  		ret 	z
   78 00:0149 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:014B -  -  -  -  		;
   80 00:014B -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:014B -  -  -  -  		;
   82 00:014B -  -  -  -  _CPRExitNL:
   83 00:014B CD 45 0D 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:014F C9 -  -  -  		ret
Listing for file "_build.asm"
   19 00:0150 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0150 -  -  -  -  ; ***************************************************************************************
    2 00:0150 -  -  -  -  ; ***************************************************************************************
    3 00:0150 -  -  -  -  ;
    4 00:0150 -  -  -  -  ;		Name : 		rem.asm
    5 00:0150 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0150 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0150 -  -  -  -  ;		Reviewed :	No
    8 00:0150 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0150 -  -  -  -  ;
   10 00:0150 -  -  -  -  ; ***************************************************************************************
   11 00:0150 -  -  -  -  ; ***************************************************************************************
   12 00:0150 -  -  -  -  
   13 00:0150 -  -  -  -  ; ***************************************************************************************
   14 00:0150 -  -  -  -  ;
   15 00:0150 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0150 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0150 -  -  -  -  ;
   18 00:0150 -  -  -  -  ; ***************************************************************************************
   19 00:0150 -  -  -  -  
   20 00:0150 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0150 -  -  -  -  Command_REM2: 	;; [']
   22 00:0150 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0153 DD 23 -  -  		inc 	ix
   24 00:0155 FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:0157 C8 -  -  -  		ret 	z
   26 00:0158 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:015A C8 -  -  -  		ret 	z
   28 00:015B FE 3F -  -  		cp 		STRING_MARKER
   29 00:015D C2 8D 02 00 		jp 		nz,SyntaxError
   30 00:0161 -  -  -  -  		;		
   31 00:0161 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:0165 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0168 13 -  -  -  		inc 	de 
   34 00:0169 13 -  -  -  		inc 	de
   35 00:016A DD 19 -  -  		add 	ix,de 						; skip string
   36 00:016C C9 -  -  -  		ret
   37 00:016D -  -  -  -  
   38 00:016D -  -  -  -  ; ***************************************************************************************
   39 00:016D -  -  -  -  ;
   40 00:016D -  -  -  -  ;									Changes and Updates
   41 00:016D -  -  -  -  ;
   42 00:016D -  -  -  -  ; ***************************************************************************************
   43 00:016D -  -  -  -  ;
   44 00:016D -  -  -  -  ;		Date			Notes
   45 00:016D -  -  -  -  ;		==== 			=====
   46 00:016D -  -  -  -  ;
   47 00:016D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:016D -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:016D -  -  -  -  ; ***************************************************************************************
    2 00:016D -  -  -  -  ; ***************************************************************************************
    3 00:016D -  -  -  -  ;
    4 00:016D -  -  -  -  ;		Name : 		run.asm
    5 00:016D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:016D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:016D -  -  -  -  ;		Reviewed :	No
    8 00:016D -  -  -  -  ;		Purpose :	Run command
    9 00:016D -  -  -  -  ;
   10 00:016D -  -  -  -  ; ***************************************************************************************
   11 00:016D -  -  -  -  ; ***************************************************************************************
   12 00:016D -  -  -  -  
   13 00:016D -  -  -  -  ; ***************************************************************************************
   14 00:016D -  -  -  -  ;
   15 00:016D -  -  -  -  ;										RUN command
   16 00:016D -  -  -  -  ;
   17 00:016D -  -  -  -  ; ***************************************************************************************
   18 00:016D -  -  -  -  
   19 00:016D -  -  -  -  Command_RUN: 	;; [run]
   20 00:016D CD 2D 07 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:0171 -  -  -  -  
   22 00:0171 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:0176 ED 73 54 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:017B -  -  -  -  		;
   25 00:017B -  -  -  -  		; 		New line at IX.
   26 00:017B -  -  -  -  		;
   27 00:017B -  -  -  -  CRNewLine:
   28 00:017B DD 22 50 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:0180 -  -  -  -  		;
   30 00:0180 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:0183 B7 -  -  -  		or 		a
   32 00:0184 CA DC 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:0188 -  -  -  -  		;
   34 00:0188 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:018A DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:018C DD 23 -  -  		inc 	ix
   37 00:018E -  -  -  -  		;
   38 00:018E -  -  -  -  		; 		New command at IX
   39 00:018E -  -  -  -  		;
   40 00:018E -  -  -  -  _CRNewCommand:	
   41 00:018E DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:0191 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:0192 F2 C9 01 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:0196 -  -  -  -  		;
   45 00:0196 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:0198 30 06 -  -  		jr  	nc,_CRDoCommand
   47 00:019A FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:019C D2 BD 01 00 		jp 		nc,_CRAlternateLets
   49 00:01A0 -  -  -  -  		;
   50 00:01A0 -  -  -  -  _CRDoCommand:		
   51 00:01A0 E6 7F 21 00 
              00 00 6F 29 
              29 11 1E 0A 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:01B5 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:01B7 CD 58 00 00 		call 	JumpCode 					; call the routine.
   54 00:01BB 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:01BD -  -  -  -  		;
   56 00:01BD -  -  -  -  		; 		Do CALL (HL)
   57 00:01BD -  -  -  -  		;
   58 00:01BD -  -  -  -  		;
   59 00:01BD -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:01BD -  -  -  -  		;		
   61 00:01BD -  -  -  -  _CRAlternateLets:		
   62 00:01BD FE 83 -  -  		cp 		KWD_PLING
   63 00:01BF 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 00:01C1 FE 84 -  -  		cp 		KWD_QMARK
   65 00:01C3 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 00:01C5 C3 8D 02 00 		jp 		SyntaxError
   67 00:01C9 -  -  -  -  		;
   68 00:01C9 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:01C9 -  -  -  -  		;
   70 00:01C9 -  -  -  -  _CRAssignmentHandler:		
   71 00:01C9 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:01CB D2 8D 02 00 		jp 		nc,SyntaxError
   73 00:01CF -  -  -  -  _CRAssignmentLet:		
   74 00:01CF 3E 0E C3 23 
              02 00 -  -  		ERR_TODO
   75 00:01D5 -  -  -  -  		;call	Command_LET
   76 00:01D5 C3 8E 01 00 		jp 		_CRNewCommand
   77 00:01D9 -  -  -  -  
   78 00:01D9 -  -  -  -  ; ***************************************************************************************
   79 00:01D9 -  -  -  -  ;
   80 00:01D9 -  -  -  -  ;									Changes and Updates
   81 00:01D9 -  -  -  -  ;
   82 00:01D9 -  -  -  -  ; ***************************************************************************************
   83 00:01D9 -  -  -  -  ;
   84 00:01D9 -  -  -  -  ;		Date			Notes
   85 00:01D9 -  -  -  -  ;		==== 			=====
   86 00:01D9 -  -  -  -  ;
   87 00:01D9 -  -  -  -  ; ***************************************************************************************
   88 00:01D9 -  -  -  -  		
Listing for file "_build.asm"
   21 00:01D9 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:01D9 -  -  -  -  ; ***************************************************************************************
    2 00:01D9 -  -  -  -  ; ***************************************************************************************
    3 00:01D9 -  -  -  -  ;
    4 00:01D9 -  -  -  -  ;		Name : 		stop.asm
    5 00:01D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01D9 -  -  -  -  ;		Reviewed :	No
    8 00:01D9 -  -  -  -  ;		Purpose :	Stop command
    9 00:01D9 -  -  -  -  ;
   10 00:01D9 -  -  -  -  ; ***************************************************************************************
   11 00:01D9 -  -  -  -  ; ***************************************************************************************
   12 00:01D9 -  -  -  -  
   13 00:01D9 -  -  -  -  ; ***************************************************************************************
   14 00:01D9 -  -  -  -  ;
   15 00:01D9 -  -  -  -  ;										STOP command
   16 00:01D9 -  -  -  -  ;
   17 00:01D9 -  -  -  -  ; ***************************************************************************************
   18 00:01D9 -  -  -  -  
   19 00:01D9 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:01D9 3E 0C C3 23 
              02 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:01DF -  -  -  -  
   22 00:01DF -  -  -  -  ; ***************************************************************************************
   23 00:01DF -  -  -  -  ;
   24 00:01DF -  -  -  -  ;									Changes and Updates
   25 00:01DF -  -  -  -  ;
   26 00:01DF -  -  -  -  ; ***************************************************************************************
   27 00:01DF -  -  -  -  ;
   28 00:01DF -  -  -  -  ;		Date			Notes
   29 00:01DF -  -  -  -  ;		==== 			=====
   30 00:01DF -  -  -  -  ;
   31 00:01DF -  -  -  -  ; ***************************************************************************************
   32 00:01DF -  -  -  -  		
Listing for file "_build.asm"
   22 00:01DF -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:01DF -  -  -  -  ; ***************************************************************************************
    2 00:01DF -  -  -  -  ; ***************************************************************************************
    3 00:01DF -  -  -  -  ;
    4 00:01DF -  -  -  -  ;		Name : 		charcheck.asm
    5 00:01DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01DF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01DF -  -  -  -  ;		Reviewed :	No
    8 00:01DF -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:01DF -  -  -  -  ;
   10 00:01DF -  -  -  -  ; ***************************************************************************************
   11 00:01DF -  -  -  -  ; ***************************************************************************************
   12 00:01DF -  -  -  -  
   13 00:01DF -  -  -  -  ; ***************************************************************************************
   14 00:01DF -  -  -  -  ;
   15 00:01DF -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:01DF -  -  -  -  ;
   17 00:01DF -  -  -  -  ; ***************************************************************************************
   18 00:01DF -  -  -  -  
   19 00:01DF -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:01DF             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:01DF             		inc 	ix
   22 00:01DF             		cp 		ch 							; exit if matches
   23 00:01DF             		ret 	z
   24 00:01DF             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:01DF             		jp 		ErrorHandler
   26 00:01DF             #endmacro
   27 00:01DF -  -  -  -  
   28 00:01DF -  -  -  -  CheckLeftBracket:
   29 00:01DF DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 23 
              02 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:01ED -  -  -  -  
   31 00:01ED -  -  -  -  CheckRightBracket:
   32 00:01ED DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 23 
              02 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:01FB -  -  -  -  
   34 00:01FB -  -  -  -  CheckDollar:
   35 00:01FB DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 23 
              02 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0209 -  -  -  -  		
   37 00:0209 -  -  -  -  CheckComma:
   38 00:0209 DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 23 
              02 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0217 -  -  -  -  
   40 00:0217 -  -  -  -  ; ***************************************************************************************
   41 00:0217 -  -  -  -  ;
   42 00:0217 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0217 -  -  -  -  ;
   44 00:0217 -  -  -  -  ; ***************************************************************************************
   45 00:0217 -  -  -  -  
   46 00:0217 -  -  -  -  CheckNextA:
   47 00:0217 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:021A DD 23 -  -  		inc 	ix 							; skip character
   49 00:021C C8 -  -  -  		ret 	z 							; yes, okay
   50 00:021D 3E 0D C3 23 
              02 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0223 -  -  -  -  		
   52 00:0223 -  -  -  -  ; ***************************************************************************************
   53 00:0223 -  -  -  -  ;
   54 00:0223 -  -  -  -  ;									Changes and Updates
   55 00:0223 -  -  -  -  ;
   56 00:0223 -  -  -  -  ; ***************************************************************************************
   57 00:0223 -  -  -  -  ;
   58 00:0223 -  -  -  -  ;		Date			Notes
   59 00:0223 -  -  -  -  ;		==== 			=====
   60 00:0223 -  -  -  -  ;
   61 00:0223 -  -  -  -  ; ***************************************************************************************
   62 00:0223 -  -  -  -  		
Listing for file "_build.asm"
   23 00:0223 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0223 -  -  -  -  ; ***************************************************************************************
    2 00:0223 -  -  -  -  ; ***************************************************************************************
    3 00:0223 -  -  -  -  ;
    4 00:0223 -  -  -  -  ;		Name : 		errors.asm
    5 00:0223 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0223 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0223 -  -  -  -  ;		Reviewed :	No
    8 00:0223 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0223 -  -  -  -  ;
   10 00:0223 -  -  -  -  ; ***************************************************************************************
   11 00:0223 -  -  -  -  ; ***************************************************************************************
   12 00:0223 -  -  -  -  
   13 00:0223 -  -  -  -  ; ***************************************************************************************
   14 00:0223 -  -  -  -  ;
   15 00:0223 -  -  -  -  ;								Error handler, message A 
   16 00:0223 -  -  -  -  ;
   17 00:0223 -  -  -  -  ; ***************************************************************************************
   18 00:0223 -  -  -  -  
   19 00:0223 -  -  -  -  ErrorHandler:
   20 00:0223 F5 -  -  -  		push 	af 						; save error ID
   21 00:0224 -  -  -  -  
   22 00:0224 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0228 6F -  -  -  		ld 		l,a
   24 00:0229 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:022A 29 -  -  -  		add 	hl,hl 		
   26 00:022B 11 F1 08 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:022F 19 -  -  -  		add 	hl,de
   28 00:0230 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:0232 CD 87 07 00 		call 	PrintStringAtHL
   30 00:0236 -  -  -  -  		;
   31 00:0236 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0237 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0238 28 2F -  -  		jr 		z,_EHExit
   34 00:023A -  -  -  -  		;
   35 00:023A DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:023F DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:0242 B7 -  -  -  		or 		a
   38 00:0243 28 24 -  -  		jr 		z,_EHExit
   39 00:0245 -  -  -  -  
   40 00:0245 21 71 02 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0249 CD 87 07 00 		call 	PrintStringAtHL 
   42 00:024D -  -  -  -  		
   43 00:024D D9 -  -  -  		exx								; HL'HL = line number
   44 00:024E 21 00 00 00 		ld 		hl,$0000 		
   45 00:0252 D9 -  -  -  		exx 
   46 00:0253 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:0256 DD 66 02 -  		ld 		h,(ix+2)
   48 00:0259 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:025B 01 86 00 00 		ld 		bc,ConvertBuffer
   50 00:025F CD F5 0C 00 		call 	Int32ToString
   51 00:0263 C5 -  -  -  		push 	bc
   52 00:0264 E1 -  -  -  		pop 	hl
   53 00:0265 CD 87 07 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0269 -  -  -  -  _EHExit:		
   55 00:0269 CD 45 0D 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:026D C3 1A 00 00 		jp 		WarmStart
   57 00:0271 -  -  -  -  
   58 00:0271 -  -  -  -  _EHAtText:
   59 00:0271 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:027B -  -  -  -  
   61 00:027B -  -  -  -  NotImplemented:
   62 00:027B 3E 04 C3 23 
              02 00 -  -  		ERR_DISABLED
   63 00:0281 -  -  -  -  TypeMismatch:
   64 00:0281 3E 02 C3 23 
              02 00 -  -  		ERR_BADTYPE
   65 00:0287 -  -  -  -  BadValue:
   66 00:0287 3E 03 C3 23 
              02 00 -  -  		ERR_BADVALUE
   67 00:028D -  -  -  -  SyntaxError:
   68 00:028D 3E 0D C3 23 
              02 00 -  -  		ERR_SYNTAX
   69 00:0293 -  -  -  -  						
   70 00:0293 -  -  -  -  ; ***************************************************************************************
   71 00:0293 -  -  -  -  ;
   72 00:0293 -  -  -  -  ;									Changes and Updates
   73 00:0293 -  -  -  -  ;
   74 00:0293 -  -  -  -  ; ***************************************************************************************
   75 00:0293 -  -  -  -  ;
   76 00:0293 -  -  -  -  ;		Date			Notes
   77 00:0293 -  -  -  -  ;		==== 			=====
   78 00:0293 -  -  -  -  ;
   79 00:0293 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:0293 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:0293 -  -  -  -  ; ***************************************************************************************
    2 00:0293 -  -  -  -  ; ***************************************************************************************
    3 00:0293 -  -  -  -  ;
    4 00:0293 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:0293 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0293 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0293 -  -  -  -  ;		Reviewed :	No
    8 00:0293 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:0293 -  -  -  -  ;
   10 00:0293 -  -  -  -  ; ***************************************************************************************
   11 00:0293 -  -  -  -  ; ***************************************************************************************
   12 00:0293 -  -  -  -  
   13 00:0293 -  -  -  -  ; ***************************************************************************************
   14 00:0293 -  -  -  -  ;
   15 00:0293 -  -  -  -  ; 									Addition
   16 00:0293 -  -  -  -  ;
   17 00:0293 -  -  -  -  ; ***************************************************************************************
   18 00:0293 -  -  -  -  
   19 00:0293 -  -  -  -  ALUAdd: 		;; [+]
   20 00:0293 CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 74 
              0C 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:02A1 -  -  -  -  
   22 00:02A1 -  -  -  -  ; ***************************************************************************************
   23 00:02A1 -  -  -  -  ;
   24 00:02A1 -  -  -  -  ; 									Subtraction
   25 00:02A1 -  -  -  -  ;
   26 00:02A1 -  -  -  -  ; ***************************************************************************************
   27 00:02A1 -  -  -  -  
   28 00:02A1 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:02A1 CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 7C 
              0C 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:02AF -  -  -  -  
   31 00:02AF -  -  -  -  ; ***************************************************************************************
   32 00:02AF -  -  -  -  ;
   33 00:02AF -  -  -  -  ; 									  Multiply
   34 00:02AF -  -  -  -  ;
   35 00:02AF -  -  -  -  ; ***************************************************************************************
   36 00:02AF -  -  -  -  
   37 00:02AF -  -  -  -  ALUMultiply: 	;; [*]
   38 00:02AF CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 3B 
              0C 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:02BD -  -  -  -  
   40 00:02BD -  -  -  -  ; ***************************************************************************************
   41 00:02BD -  -  -  -  ;
   42 00:02BD -  -  -  -  ; 									  Divide
   43 00:02BD -  -  -  -  ;
   44 00:02BD -  -  -  -  ; ***************************************************************************************
   45 00:02BD -  -  -  -  
   46 00:02BD -  -  -  -  ALUDivide: 	;; [/]
   47 00:02BD -  -  -  -  ALUDivide2:	;; [div]
   48 00:02BD CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 3B 
              0B 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:02CB -  -  -  -  
   50 00:02CB -  -  -  -  ; ***************************************************************************************
   51 00:02CB -  -  -  -  ;
   52 00:02CB -  -  -  -  ; 									  Modulus
   53 00:02CB -  -  -  -  ;
   54 00:02CB -  -  -  -  ; ***************************************************************************************
   55 00:02CB -  -  -  -  
   56 00:02CB -  -  -  -  ALUModulus: 	;; [mod]
   57 00:02CB CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 3E 
              0B 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:02D9 -  -  -  -  
   59 00:02D9 -  -  -  -  ; ***************************************************************************************
   60 00:02D9 -  -  -  -  ;
   61 00:02D9 -  -  -  -  ; 									  Logical
   62 00:02D9 -  -  -  -  ;
   63 00:02D9 -  -  -  -  ; ***************************************************************************************
   64 00:02D9 -  -  -  -  
   65 00:02D9 -  -  -  -  ALUAnd: 		;; [and]
   66 00:02D9 CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 86 
              0C 00 -  -  		IntegerDispatch(Int32And)
   67 00:02E7 -  -  -  -  
   68 00:02E7 -  -  -  -  ALUOr: 			;; [or]
   69 00:02E7 CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 93 
              0C 00 -  -  		IntegerDispatch(Int32Or)
   70 00:02F5 -  -  -  -  
   71 00:02F5 -  -  -  -  ALUXor: 		;; [eor]
   72 00:02F5 CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 A0 
              0C 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:0303 -  -  -  -  
   74 00:0303 -  -  -  -  ; ***************************************************************************************
   75 00:0303 -  -  -  -  ;
   76 00:0303 -  -  -  -  ;									Changes and Updates
   77 00:0303 -  -  -  -  ;
   78 00:0303 -  -  -  -  ; ***************************************************************************************
   79 00:0303 -  -  -  -  ;
   80 00:0303 -  -  -  -  ;		Date			Notes
   81 00:0303 -  -  -  -  ;		==== 			=====
   82 00:0303 -  -  -  -  ;
   83 00:0303 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:0303 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:0303 -  -  -  -  ; ***************************************************************************************
    2 00:0303 -  -  -  -  ; ***************************************************************************************
    3 00:0303 -  -  -  -  ;
    4 00:0303 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:0303 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0303 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0303 -  -  -  -  ;		Reviewed :	No
    8 00:0303 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:0303 -  -  -  -  ;
   10 00:0303 -  -  -  -  ; ***************************************************************************************
   11 00:0303 -  -  -  -  ; ***************************************************************************************
   12 00:0303 -  -  -  -  
   13 00:0303 -  -  -  -  ; ***************************************************************************************
   14 00:0303 -  -  -  -  ;
   15 00:0303 -  -  -  -  ; 									<l> <op> <r>
   16 00:0303 -  -  -  -  ;
   17 00:0303 -  -  -  -  ; ***************************************************************************************
   18 00:0303 -  -  -  -  
   19 00:0303 -  -  -  -  ALULongReference:			;; [!]
   20 00:0303 CD 13 03 00 		call 	BRGetAddress 				; calculate address
   21 00:0307 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0309 CB F9 -  -  		set 	CIsReference,c
   23 00:030B C9 -  -  -  		ret
   24 00:030C -  -  -  -  
   25 00:030C -  -  -  -  ALUByteReference: 			;; [?]
   26 00:030C CD 03 03 00 		call 	ALULongReference
   27 00:0310 CB F1 -  -  		set 	CIsByteReference,c
   28 00:0312 C9 -  -  -  		ret
   29 00:0313 -  -  -  -  
   30 00:0313 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0313 CD B0 03 00 
              78 B1 C2 81 
              02 00 C3 21 
              03 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0321 -  -  -  -  _BRGAMain:		
   33 00:0321 CD 74 0C 00 		call 	Int32Add 					; address in HL'HL
   34 00:0325 CD B6 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0329 C9 -  -  -  		ret
   36 00:032A -  -  -  -  
   37 00:032A -  -  -  -  ; ***************************************************************************************
   38 00:032A -  -  -  -  ;
   39 00:032A -  -  -  -  ;									Changes and Updates
   40 00:032A -  -  -  -  ;
   41 00:032A -  -  -  -  ; ***************************************************************************************
   42 00:032A -  -  -  -  ;
   43 00:032A -  -  -  -  ;		Date			Notes
   44 00:032A -  -  -  -  ;		==== 			=====
   45 00:032A -  -  -  -  ;
   46 00:032A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:032A -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:032A -  -  -  -  ; ***************************************************************************************
    2 00:032A -  -  -  -  ; ***************************************************************************************
    3 00:032A -  -  -  -  ;
    4 00:032A -  -  -  -  ;		Name : 		compare.asm
    5 00:032A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:032A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:032A -  -  -  -  ;		Reviewed :	No
    8 00:032A -  -  -  -  ;		Purpose :	Comparison code
    9 00:032A -  -  -  -  ;
   10 00:032A -  -  -  -  ; ***************************************************************************************
   11 00:032A -  -  -  -  ; ***************************************************************************************
   12 00:032A -  -  -  -  
   13 00:032A -  -  -  -  #macro compare_equals(n)
   14 00:032A             		call 	CompareBaseCode
   15 00:032A             		cp 		n
   16 00:032A             		jr 		z,UnaryInt32True
   17 00:032A             		jr 		UnaryInt32False
   18 00:032A             #endmacro
   19 00:032A -  -  -  -  
   20 00:032A -  -  -  -  #macro compare_not_equals(n)
   21 00:032A             		call 	CompareBaseCode
   22 00:032A             		cp 		n
   23 00:032A             		jr 		nz,UnaryInt32True
   24 00:032A             		jr 		UnaryInt32False
   25 00:032A             #endmacro
   26 00:032A -  -  -  -  
   27 00:032A -  -  -  -  ; ***************************************************************************************
   28 00:032A -  -  -  -  ;
   29 00:032A -  -  -  -  ; 								Return True/False
   30 00:032A -  -  -  -  ;
   31 00:032A -  -  -  -  ; ***************************************************************************************
   32 00:032A -  -  -  -  
   33 00:032A -  -  -  -  UnaryInt32True:	
   34 00:032A 3E FF -  -  		ld 		a,255
   35 00:032C 18 01 -  -  		jr 		_Int32Logical
   36 00:032E -  -  -  -  UnaryInt32False: 
   37 00:032E AF -  -  -  		xor 	a
   38 00:032F -  -  -  -  _Int32Logical:
   39 00:032F 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:0330 67 -  -  -  		ld 		h,a
   41 00:0331 D9 -  -  -  		exx
   42 00:0332 6F -  -  -  		ld 		l,a
   43 00:0333 67 -  -  -  		ld 		h,a
   44 00:0334 D9 -  -  -  		exx
   45 00:0335 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0337 C9 -  -  -  		ret
   47 00:0338 -  -  -  -  
   48 00:0338 -  -  -  -  ; ***************************************************************************************
   49 00:0338 -  -  -  -  ;
   50 00:0338 -  -  -  -  ; 										> = < (compare == value)
   51 00:0338 -  -  -  -  ;
   52 00:0338 -  -  -  -  ; ***************************************************************************************
   53 00:0338 -  -  -  -  
   54 00:0338 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0338 CD 74 03 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:0342 -  -  -  -  
   57 00:0342 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:0342 CD 74 03 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:034C -  -  -  -  
   60 00:034C -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:034C CD 74 03 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:0356 -  -  -  -  
   63 00:0356 -  -  -  -  ; ***************************************************************************************
   64 00:0356 -  -  -  -  ;
   65 00:0356 -  -  -  -  ; 										> = < (compare <> value)
   66 00:0356 -  -  -  -  ;
   67 00:0356 -  -  -  -  ; ***************************************************************************************
   68 00:0356 -  -  -  -  
   69 00:0356 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:0356 CD 74 03 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0360 -  -  -  -  
   72 00:0360 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0360 CD 74 03 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:036A -  -  -  -  
   75 00:036A -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:036A CD 74 03 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:0374 -  -  -  -  
   78 00:0374 -  -  -  -  ; ***************************************************************************************
   79 00:0374 -  -  -  -  ;
   80 00:0374 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:0374 -  -  -  -  ;
   82 00:0374 -  -  -  -  ; ***************************************************************************************
   83 00:0374 -  -  -  -  
   84 00:0374 -  -  -  -  CompareBaseCode:
   85 00:0374 CD B0 03 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0378 -  -  -  -  
   87 00:0378 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0379 A1 -  -  -  		and 	c
   89 00:037A CB 47 -  -  		bit 	CIsString,a 
   90 00:037C C2 8E 03 00 		jp 		nz,StringCompare
   91 00:0380 -  -  -  -  
   92 00:0380 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:0381 B1 -  -  -  		or 		c
   94 00:0382 CB 47 -  -  		bit 	CIsString,a 
   95 00:0384 CA B4 0C 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0388 -  -  -  -  
   97 00:0388 3E 02 C3 23 
              02 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:038E -  -  -  -  ;
   99 00:038E -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:038E -  -  -  -  ;
  101 00:038E -  -  -  -  StringCompare:
  102 00:038E 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:038F BE -  -  -  		cp 		(hl)
  104 00:0390 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0392 20 08 -  -  		jr 		nz,_SCLess
  106 00:0394 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:0395 23 -  -  -  		inc 	hl
  108 00:0396 FE 20 -  -  		cp 		' '
  109 00:0398 30 F4 -  -  		jr 		nc,StringCompare
  110 00:039A AF -  -  -  		xor 	a 							; return 0.
  111 00:039B C9 -  -  -  		ret
  112 00:039C -  -  -  -  
  113 00:039C -  -  -  -  _SCLess:
  114 00:039C 3E FF -  -  		ld 		a,$FF
  115 00:039E C9 -  -  -  		ret
  116 00:039F -  -  -  -  _SCGreater:
  117 00:039F 3E 01 -  -  		ld 		a,1
  118 00:03A1 C9 -  -  -  		ret
  119 00:03A2 -  -  -  -  
  120 00:03A2 3E 0E C3 23 
              02 00 -  -  		ERR_TODO()
  121 00:03A8 -  -  -  -  
  122 00:03A8 -  -  -  -  ; ***************************************************************************************
  123 00:03A8 -  -  -  -  ;
  124 00:03A8 -  -  -  -  ;									Changes and Updates
  125 00:03A8 -  -  -  -  ;
  126 00:03A8 -  -  -  -  ; ***************************************************************************************
  127 00:03A8 -  -  -  -  ;
  128 00:03A8 -  -  -  -  ;		Date			Notes
  129 00:03A8 -  -  -  -  ;		==== 			=====
  130 00:03A8 -  -  -  -  ;
  131 00:03A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:03A8 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:03A8 -  -  -  -  ; ***************************************************************************************
    2 00:03A8 -  -  -  -  ; ***************************************************************************************
    3 00:03A8 -  -  -  -  ;
    4 00:03A8 -  -  -  -  ;		Name : 		utility.asm
    5 00:03A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03A8 -  -  -  -  ;		Reviewed :	No
    8 00:03A8 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:03A8 -  -  -  -  ;
   10 00:03A8 -  -  -  -  ; ***************************************************************************************
   11 00:03A8 -  -  -  -  ; ***************************************************************************************
   12 00:03A8 -  -  -  -  
   13 00:03A8 -  -  -  -  ; ***************************************************************************************
   14 00:03A8 -  -  -  -  ;
   15 00:03A8 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:03A8 -  -  -  -  ;
   17 00:03A8 -  -  -  -  ; ***************************************************************************************
   18 00:03A8 -  -  -  -  
   19 00:03A8 -  -  -  -  SwapHLDE:
   20 00:03A8 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:03A9 D9 -  -  -  			exx
   22 00:03AA EB -  -  -  			ex 		de,hl
   23 00:03AB D9 -  -  -  			exx
   24 00:03AC 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:03AD 41 -  -  -  			ld 		b,c
   26 00:03AE 4F -  -  -  			ld 		c,a
   27 00:03AF C9 -  -  -  			ret
   28 00:03B0 -  -  -  -  
   29 00:03B0 -  -  -  -  ; ***************************************************************************************
   30 00:03B0 -  -  -  -  ;
   31 00:03B0 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:03B0 -  -  -  -  ;
   33 00:03B0 -  -  -  -  ; ***************************************************************************************
   34 00:03B0 -  -  -  -  
   35 00:03B0 -  -  -  -  DereferenceBoth:
   36 00:03B0 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:03B2 C4 89 04 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:03B6 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:03B8 C8 -  -  -  			ret 	z
   40 00:03B9 CD A8 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:03BD CD 89 04 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:03C1 CD A8 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:03C5 C9 -  -  -  			ret
   44 00:03C6 -  -  -  -  
   45 00:03C6 -  -  -  -  ; ***************************************************************************************
   46 00:03C6 -  -  -  -  ;
   47 00:03C6 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:03C6 -  -  -  -  ;
   49 00:03C6 -  -  -  -  ; ***************************************************************************************
   50 00:03C6 -  -  -  -  
   51 00:03C6 -  -  -  -  NegateHLHL:	
   52 00:03C6 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:03C8 C2 81 02 00 			jp 		nz,TypeMismatch
   54 00:03CC CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:03CE C4 89 04 00 			call 	nz,Dereference 			; if required.
   56 00:03D2 CD DE 0C 00 			call 	Int32Negate
   57 00:03D6 C9 -  -  -  			ret
Listing for file "_build.asm"
   28 00:03D7 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:03D7 -  -  -  -  ; ***************************************************************************************
    2 00:03D7 -  -  -  -  ; ***************************************************************************************
    3 00:03D7 -  -  -  -  ;
    4 00:03D7 -  -  -  -  ;		Name : 		expression.asm
    5 00:03D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03D7 -  -  -  -  ;		Reviewed :	None
    8 00:03D7 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:03D7 -  -  -  -  ;
   10 00:03D7 -  -  -  -  ; ***************************************************************************************
   11 00:03D7 -  -  -  -  ; ***************************************************************************************
   12 00:03D7 -  -  -  -  
   13 00:03D7 -  -  -  -  ; ***************************************************************************************
   14 00:03D7 -  -  -  -  ;
   15 00:03D7 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:03D7 -  -  -  -  ;
   17 00:03D7 -  -  -  -  ; ***************************************************************************************
   18 00:03D7 -  -  -  -  
   19 00:03D7 -  -  -  -  EvaluateAtPrecedence0:
   20 00:03D7 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:03D8 -  -  -  -  EvaluateAtPrecedence:
   22 00:03D8 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:03D9 -  -  -  -  		;
   24 00:03D9 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:03D9 -  -  -  -  		;
   26 00:03D9 CD E5 04 00 		call 	EvaluateTerm 				; get term
   27 00:03DD -  -  -  -  		;
   28 00:03DD -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:03DD -  -  -  -  		;
   30 00:03DD D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:03DE -  -  -  -  _EAPLoop:
   32 00:03DE DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:03E1 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:03E3 D8 -  -  -  		ret 	c
   35 00:03E4 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:03E6 D0 -  -  -  		ret 	nc
   37 00:03E7 -  -  -  -  		;
   38 00:03E7 -  -  -  -  		; 		Get the precedence.
   39 00:03E7 -  -  -  -  		;
   40 00:03E7 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:03E8 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:03EA 21 E0 08 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:03EE B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:03EF 6F -  -  -  		ld 		l,a
   45 00:03F0 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:03F1 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:03F2 -  -  -  -  		;
   48 00:03F2 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:03F2 -  -  -  -  		;
   50 00:03F2 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:03F3 BB -  -  -  		cp 		e
   52 00:03F4 D0 -  -  -  		ret 	nc
   53 00:03F5 -  -  -  -  
   54 00:03F5 -  -  -  -  		;
   55 00:03F5 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:03F5 -  -  -  -  		;
   57 00:03F5 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:03F6 -  -  -  -  		;
   59 00:03F6 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:03F9 F5 -  -  -  		push 	af
   61 00:03FA -  -  -  -  		;
   62 00:03FA C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:03FB D9 -  -  -  		exx 								; save HL'
   64 00:03FC E5 -  -  -  		push 	hl
   65 00:03FD D9 -  -  -  		exx 								
   66 00:03FE E5 -  -  -  		push 	hl 							; save HL
   67 00:03FF -  -  -  -  		;
   68 00:03FF DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:0401 -  -  -  -  		;
   70 00:0401 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:0401 -  -  -  -  		;
   72 00:0401 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:0402 CD D8 03 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0406 -  -  -  -  		;
   75 00:0406 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0406 -  -  -  -  		;
   77 00:0406 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0407 -  -  -  -  
   79 00:0407 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0408 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0409 D9 -  -  -  		exx
   82 00:040A EB -  -  -  		ex 		de,hl
   83 00:040B E1 -  -  -  		pop 	hl
   84 00:040C D9 -  -  -  		exx
   85 00:040D C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:040E 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:040F -  -  -  -  		;
   88 00:040F -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:040F -  -  -  -  		; 		is in B (type) DE'DE
   90 00:040F -  -  -  -  		;
   91 00:040F F1 -  -  -  		pop 	af 							; get operator in A
   92 00:0410 -  -  -  -  		;
   93 00:0410 -  -  -  -  		; 		Call the binary operator in A.
   94 00:0410 -  -  -  -  		;
   95 00:0410 D5 -  -  -  		push 	de
   96 00:0411 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0412 E6 7F 21 00 
              00 00 6F 29 
              29 11 1E 0A 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0427 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0428 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0429 CD 58 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:042D -  -  -  -  		;
  102 00:042D D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:042E -  -  -  -  		;
  104 00:042E 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:0430 -  -  -  -  
  106 00:0430 -  -  -  -  ; ***************************************************************************************
  107 00:0430 -  -  -  -  ;
  108 00:0430 -  -  -  -  ;									Changes and Updates
  109 00:0430 -  -  -  -  ;
  110 00:0430 -  -  -  -  ; ***************************************************************************************
  111 00:0430 -  -  -  -  ;
  112 00:0430 -  -  -  -  ;		Date			Notes
  113 00:0430 -  -  -  -  ;		==== 			=====
  114 00:0430 -  -  -  -  ;
  115 00:0430 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:0430 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:0430 -  -  -  -  ; ***************************************************************************************
    2 00:0430 -  -  -  -  ; ***************************************************************************************
    3 00:0430 -  -  -  -  ;
    4 00:0430 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:0430 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0430 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0430 -  -  -  -  ;		Reviewed :	No
    8 00:0430 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:0430 -  -  -  -  ;
   10 00:0430 -  -  -  -  ; ***************************************************************************************
   11 00:0430 -  -  -  -  ; ***************************************************************************************
   12 00:0430 -  -  -  -  
   13 00:0430 -  -  -  -  ; ***************************************************************************************
   14 00:0430 -  -  -  -  ;
   15 00:0430 -  -  -  -  ; 								Evaluate an integer term
   16 00:0430 -  -  -  -  ;
   17 00:0430 -  -  -  -  ; ***************************************************************************************
   18 00:0430 -  -  -  -  
   19 00:0430 -  -  -  -  EvaluateIntegerTerm:
   20 00:0430 CD E5 04 00 		call 	EvaluateTerm
   21 00:0434 CD 89 04 00 		call 	DeReference
   22 00:0438 CB 41 -  -  		bit 	CIsString,c
   23 00:043A C8 -  -  -  		ret 	z
   24 00:043B C3 81 02 00 		jp 		TypeMismatch
   25 00:043F -  -  -  -  
   26 00:043F -  -  -  -  ; ***************************************************************************************
   27 00:043F -  -  -  -  ;
   28 00:043F -  -  -  -  ; 								Evaluate a string term
   29 00:043F -  -  -  -  ;
   30 00:043F -  -  -  -  ; ***************************************************************************************
   31 00:043F -  -  -  -  
   32 00:043F -  -  -  -  EvaluateStringTerm:
   33 00:043F CD E5 04 00 		call 	EvaluateTerm
   34 00:0443 CD 89 04 00 		call 	DeReference
   35 00:0447 CB 41 -  -  		bit 	CIsString,c
   36 00:0449 C0 -  -  -  		ret 	nz
   37 00:044A C3 81 02 00 		jp 		TypeMismatch
   38 00:044E -  -  -  -  
   39 00:044E -  -  -  -  ; ***************************************************************************************
   40 00:044E -  -  -  -  ;
   41 00:044E -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:044E -  -  -  -  ;
   43 00:044E -  -  -  -  ; ***************************************************************************************
   44 00:044E -  -  -  -  
   45 00:044E -  -  -  -  EvaluateValue:
   46 00:044E CD D7 03 00 		call 	EvaluateAtPrecedence0
   47 00:0452 C3 89 04 00 		jp 		Dereference
   48 00:0456 -  -  -  -  
   49 00:0456 -  -  -  -  ; ***************************************************************************************
   50 00:0456 -  -  -  -  ;
   51 00:0456 -  -  -  -  ; 									Evaluate a number
   52 00:0456 -  -  -  -  ;
   53 00:0456 -  -  -  -  ; ***************************************************************************************
   54 00:0456 -  -  -  -  
   55 00:0456 -  -  -  -  EvaluateInteger:
   56 00:0456 CD 4E 04 00 		call 	EvaluateValue
   57 00:045A CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:045C C8 -  -  -  		ret 	z
   59 00:045D C3 81 02 00 		jp 		TypeMismatch
   60 00:0461 -  -  -  -  
   61 00:0461 -  -  -  -  ; ***************************************************************************************
   62 00:0461 -  -  -  -  ;
   63 00:0461 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:0461 -  -  -  -  ;
   65 00:0461 -  -  -  -  ; ***************************************************************************************
   66 00:0461 -  -  -  -  
   67 00:0461 -  -  -  -  Evaluate8BitInteger:
   68 00:0461 CD 56 04 00 		call 	EvaluateInteger
   69 00:0465 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:0466 7C -  -  -  		ld 		a,h
   71 00:0467 B5 -  -  -  		or 		l
   72 00:0468 D9 -  -  -  		exx 	
   73 00:0469 B4 -  -  -  		or 		h
   74 00:046A C2 87 02 00 		jp 		nz,BadValue
   75 00:046E 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:046F C9 -  -  -  		ret
   77 00:0470 -  -  -  -  		
   78 00:0470 -  -  -  -  ; ***************************************************************************************
   79 00:0470 -  -  -  -  ;
   80 00:0470 -  -  -  -  ; 									Evaluate a string
   81 00:0470 -  -  -  -  ;
   82 00:0470 -  -  -  -  ; ***************************************************************************************
   83 00:0470 -  -  -  -  
   84 00:0470 -  -  -  -  EvaluateStringOnly:
   85 00:0470 CD 4E 04 00 		call 	EvaluateValue
   86 00:0474 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:0476 CA 81 02 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:047A C9 -  -  -  		ret
   89 00:047B -  -  -  -  
   90 00:047B -  -  -  -  ; ***************************************************************************************
   91 00:047B -  -  -  -  ;
   92 00:047B -  -  -  -  ; 								Return 8/16 bit constant
   93 00:047B -  -  -  -  ;
   94 00:047B -  -  -  -  ; ***************************************************************************************
   95 00:047B -  -  -  -  
   96 00:047B -  -  -  -  Return8BitConstant:
   97 00:047B 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:047F 6F -  -  -  		ld 		l,a
   99 00:0480 -  -  -  -  Return16BitConstant:
  100 00:0480 D9 -  -  -  		exx 								; clear HL'
  101 00:0481 21 00 00 00 		ld 		hl,0
  102 00:0485 D9 -  -  -  		exx
  103 00:0486 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0488 C9 -  -  -  		ret
  105 00:0489 -  -  -  -  
  106 00:0489 -  -  -  -  ; ***************************************************************************************
  107 00:0489 -  -  -  -  ;
  108 00:0489 -  -  -  -  ;									Changes and Updates
  109 00:0489 -  -  -  -  ;
  110 00:0489 -  -  -  -  ; ***************************************************************************************
  111 00:0489 -  -  -  -  ;
  112 00:0489 -  -  -  -  ;		Date			Notes
  113 00:0489 -  -  -  -  ;		==== 			=====
  114 00:0489 -  -  -  -  ;
  115 00:0489 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:0489 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0489 -  -  -  -  ; ***************************************************************************************
    2 00:0489 -  -  -  -  ; ***************************************************************************************
    3 00:0489 -  -  -  -  ;
    4 00:0489 -  -  -  -  ;		Name : 		reference.asm
    5 00:0489 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0489 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0489 -  -  -  -  ;		Reviewed :	No
    8 00:0489 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0489 -  -  -  -  ;
   10 00:0489 -  -  -  -  ; ***************************************************************************************
   11 00:0489 -  -  -  -  ; ***************************************************************************************
   12 00:0489 -  -  -  -  
   13 00:0489 -  -  -  -  ; ***************************************************************************************
   14 00:0489 -  -  -  -  ;
   15 00:0489 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0489 -  -  -  -  ;
   17 00:0489 -  -  -  -  ; ***************************************************************************************
   18 00:0489 -  -  -  -  
   19 00:0489 -  -  -  -  Dereference:
   20 00:0489 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:048B C8 -  -  -  		ret 	z
   22 00:048C -  -  -  -  
   23 00:048C CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:048E -  -  -  -  		
   25 00:048E CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0490 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0492 -  -  -  -  
   28 00:0492 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:0494 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:0496 -  -  -  -  
   31 00:0496 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0497 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0499 D9 -  -  -  		exx
   34 00:049A E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:049B 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:049C 23 -  -  -  		inc  	hl
   37 00:049D ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:049F D9 -  -  -  		exx 								; fix back
   39 00:04A0 C9 -  -  -  		ret
   40 00:04A1 -  -  -  -  
   41 00:04A1 -  -  -  -  _DeRefByte:		
   42 00:04A1 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:04A2 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:04A6 6F -  -  -  		ld	 	l,a
   45 00:04A7 D9 -  -  -  		exx
   46 00:04A8 21 00 00 00 		ld 		hl,$0000
   47 00:04AC D9 -  -  -  		exx
   48 00:04AD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:04AF C9 -  -  -  		ret
   50 00:04B0 -  -  -  -  
   51 00:04B0 -  -  -  -  _DRInternal:
   52 00:04B0 3E 04 C3 23 
              02 00 -  -  		ERR_DISABLED
   53 00:04B6 -  -  -  -  
   54 00:04B6 -  -  -  -  ; ***************************************************************************************
   55 00:04B6 -  -  -  -  ;
   56 00:04B6 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:04B6 -  -  -  -  ;
   58 00:04B6 -  -  -  -  ; ***************************************************************************************
   59 00:04B6 -  -  -  -  
   60 00:04B6 -  -  -  -  DRConvertHLHLToAddress:
   61 00:04B6 -  -  -  -  		#ifdef EZ80
   62 00:04B6 22 5E 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:04BA D9 -  -  -  		exx
   64 00:04BB 22 60 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:04BF 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:04C3 D9 -  -  -  		exx
   67 00:04C4 2A 5E 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:04C8 -  -  -  -  		#endif
   69 00:04C8 C9 -  -  -  		ret
   70 00:04C9 -  -  -  -  
   71 00:04C9 -  -  -  -  ; ***************************************************************************************
   72 00:04C9 -  -  -  -  ;
   73 00:04C9 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:04C9 -  -  -  -  ;
   75 00:04C9 -  -  -  -  ; ***************************************************************************************
   76 00:04C9 -  -  -  -  
   77 00:04C9 -  -  -  -  DRConvertAddressToHLHL:
   78 00:04C9 -  -  -  -  		#ifdef EZ80
   79 00:04C9 22 5E 00 00 		ld 		(AConvert),hl
   80 00:04CD 21 00 00 00 		ld 		hl,$0000
   81 00:04D1 22 61 00 00 		ld 		(AConvert+3),hl
   82 00:04D5 D9 -  -  -  		exx
   83 00:04D6 2A 60 00 00 		ld 		hl,(AConvert+2)
   84 00:04DA D9 -  -  -  		exx
   85 00:04DB AF -  -  -  		xor 	a
   86 00:04DC 32 60 00 00 		ld 		(AConvert+2),a
   87 00:04E0 2A 5E 00 00 		ld 		hl,(AConvert)
   88 00:04E4 -  -  -  -  		#endif
   89 00:04E4 C9 -  -  -  		ret
   90 00:04E5 -  -  -  -  
   91 00:04E5 -  -  -  -  ; ***************************************************************************************
   92 00:04E5 -  -  -  -  ;
   93 00:04E5 -  -  -  -  ;									Changes and Updates
   94 00:04E5 -  -  -  -  ;
   95 00:04E5 -  -  -  -  ; ***************************************************************************************
   96 00:04E5 -  -  -  -  ;
   97 00:04E5 -  -  -  -  ;		Date			Notes
   98 00:04E5 -  -  -  -  ;		==== 			=====
   99 00:04E5 -  -  -  -  ;
  100 00:04E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:04E5 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:04E5 -  -  -  -  ; ***************************************************************************************
    2 00:04E5 -  -  -  -  ; ***************************************************************************************
    3 00:04E5 -  -  -  -  ;
    4 00:04E5 -  -  -  -  ;		Name : 		term.asm
    5 00:04E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04E5 -  -  -  -  ;		Reviewed :	No
    8 00:04E5 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:04E5 -  -  -  -  ;
   10 00:04E5 -  -  -  -  ; ***************************************************************************************
   11 00:04E5 -  -  -  -  ; ***************************************************************************************
   12 00:04E5 -  -  -  -  
   13 00:04E5 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:04E5             		add_hlhl_16
   15 00:04E5             		exx
   16 00:04E5             		adc_hlhl_16
   17 00:04E5             		exx
   18 00:04E5             #endmacro
   19 00:04E5 -  -  -  -  
   20 00:04E5 -  -  -  -  ; ***************************************************************************************
   21 00:04E5 -  -  -  -  ;
   22 00:04E5 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:04E5 -  -  -  -  ;
   24 00:04E5 -  -  -  -  ; ***************************************************************************************
   25 00:04E5 -  -  -  -  ;
   26 00:04E5 -  -  -  -  ; 		Terms can be:
   27 00:04E5 -  -  -  -  ;
   28 00:04E5 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:04E5 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:04E5 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:04E5 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:04E5 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:04E5 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:04E5 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:04E5 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:04E5 -  -  -  -  ; 														reference of some sort.
   37 00:04E5 -  -  -  -  ;
   38 00:04E5 -  -  -  -  ; ***************************************************************************************
   39 00:04E5 -  -  -  -  
   40 00:04E5 -  -  -  -  EvaluateTerm:		
   41 00:04E5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:04E7 D9 -  -  -  		exx
   43 00:04E8 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:04EC D9 -  -  -  		exx
   45 00:04ED 21 00 00 00 		ld 		hl,$0000		
   46 00:04F1 -  -  -  -  		;
   47 00:04F1 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:04F4 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:04F6 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:04F8 DA B0 05 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:04FC CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:04FE C2 54 05 00 		jp 		nz,_ETFoundKeyword 
   53 00:0502 -  -  -  -  		;
   54 00:0502 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:0502 -  -  -  -  		;
   56 00:0502 -  -  -  -  _ETIntegerConstant:
   57 00:0502 -  -  -  -  		;
   58 00:0502 -  -  -  -  _ETIntegerLoop:		
   59 00:0502 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0505 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0507 B5 -  -  -  		or 		l 							; or into L
   62 00:0508 6F -  -  -  		ld 		l,a
   63 00:0509 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:050B DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:050E C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:0510 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0512 D8 -  -  -  		ret 	c
   68 00:0513 -  -  -  -  
   69 00:0513 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:051A 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0521 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0528 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:052F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0536 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:053D -  -  -  -  
   76 00:053D 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:053F -  -  -  -  		;
   78 00:053F -  -  -  -  		; 		Found the $3F string marker.
   79 00:053F -  -  -  -  		;
   80 00:053F -  -  -  -  _ETStringMarker:		
   81 00:053F DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:0541 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:0543 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:0545 E1 -  -  -  		pop 	hl
   85 00:0546 11 00 00 00 		ld 		de,$0000
   86 00:054A DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:054D DD 19 -  -  		add 	ix,de
   88 00:054F DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0551 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:0553 C9 -  -  -  		ret
   91 00:0554 -  -  -  -  		;
   92 00:0554 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:0554 -  -  -  -  		;
   94 00:0554 -  -  -  -  _ETFoundKeyword:
   95 00:0554 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:0556 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0558 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:055A FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:055C 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:055E -  -  -  -  		;
  101 00:055E -  -  -  -  		;		Unary group 0
  102 00:055E -  -  -  -  		;
  103 00:055E E6 7F 21 00 
              00 00 6F 29 
              29 11 1E 0A 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:0573 C3 58 00 00 		jp 		JumpCode 					; and go there.
  105 00:0577 -  -  -  -  
  106 00:0577 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0577 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0579 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:057B -  -  -  -  		;
  110 00:057B -  -  -  -  		; 		- term
  111 00:057B -  -  -  -  		;
  112 00:057B CD 30 04 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:057F CD C6 03 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:0583 C9 -  -  -  		ret
  115 00:0584 -  -  -  -  		;
  116 00:0584 -  -  -  -  		;		! ? indirection check
  117 00:0584 -  -  -  -  		;
  118 00:0584 -  -  -  -  _ETCheckIndirection:	
  119 00:0584 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:0586 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0588 FE 83 -  -  		cp 		KWD_PLING
  122 00:058A C2 8D 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:058E -  -  -  -  		;
  124 00:058E -  -  -  -  		; 		! ? indirection
  125 00:058E -  -  -  -  		;
  126 00:058E -  -  -  -  _ETIndirection:
  127 00:058E F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:058F CD E5 04 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:0593 CD 89 04 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0597 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0599 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:059B CD B6 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:059F F1 -  -  -  		pop 	af 							; get type back
  134 00:05A0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:05A2 CB F9 -  -  		set 	CIsReference,c
  136 00:05A4 FE 83 -  -  		cp 		KWD_PLING
  137 00:05A6 C8 -  -  -  		ret 	z
  138 00:05A7 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:05A9 C9 -  -  -  		ret
  140 00:05AA -  -  -  -  _ETStringIndirect:
  141 00:05AA 3E 02 C3 23 
              02 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:05B0 -  -  -  -  		;
  143 00:05B0 -  -  -  -  		; 		Found an identifier.
  144 00:05B0 -  -  -  -  		;
  145 00:05B0 -  -  -  -  _ETVariable:
  146 00:05B0 CD 92 07 00 		call 	FindVariable 				; find the variable.
  147 00:05B4 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:05B5 3E 0F C3 23 
              02 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:05BB -  -  -  -  		
  150 00:05BB -  -  -  -  ; ***************************************************************************************
  151 00:05BB -  -  -  -  ;
  152 00:05BB -  -  -  -  ;									Changes and Updates
  153 00:05BB -  -  -  -  ;
  154 00:05BB -  -  -  -  ; ***************************************************************************************
  155 00:05BB -  -  -  -  ;
  156 00:05BB -  -  -  -  ;		Date			Notes
  157 00:05BB -  -  -  -  ;		==== 			=====
  158 00:05BB -  -  -  -  ;
  159 00:05BB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:05BB -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:05BB -  -  -  -  ; ***************************************************************************************
    2 00:05BB -  -  -  -  ; ***************************************************************************************
    3 00:05BB -  -  -  -  ;
    4 00:05BB -  -  -  -  ;		Name : 		abs.asm
    5 00:05BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05BB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05BB -  -  -  -  ;		Reviewed :	No
    8 00:05BB -  -  -  -  ;		Purpose :	Absolute value 
    9 00:05BB -  -  -  -  ;
   10 00:05BB -  -  -  -  ; ***************************************************************************************
   11 00:05BB -  -  -  -  ; ***************************************************************************************
   12 00:05BB -  -  -  -  
   13 00:05BB -  -  -  -  ; ***************************************************************************************
   14 00:05BB -  -  -  -  ;
   15 00:05BB -  -  -  -  ;								abs( unary function
   16 00:05BB -  -  -  -  ;
   17 00:05BB -  -  -  -  ; ***************************************************************************************
   18 00:05BB -  -  -  -  
   19 00:05BB -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:05BB CD 30 04 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:05BF D9 -  -  -  		exx 								; test MSB
   22 00:05C0 CB 7C -  -  		bit 	7,h
   23 00:05C2 D9 -  -  -  		exx
   24 00:05C3 C4 C6 03 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:05C7 C9 -  -  -  		ret
   26 00:05C8 -  -  -  -  
   27 00:05C8 -  -  -  -  ; ***************************************************************************************
   28 00:05C8 -  -  -  -  ;
   29 00:05C8 -  -  -  -  ;									Changes and Updates
   30 00:05C8 -  -  -  -  ;
   31 00:05C8 -  -  -  -  ; ***************************************************************************************
   32 00:05C8 -  -  -  -  ;
   33 00:05C8 -  -  -  -  ;		Date			Notes
   34 00:05C8 -  -  -  -  ;		==== 			=====
   35 00:05C8 -  -  -  -  ;
   36 00:05C8 -  -  -  -  ; ***************************************************************************************
   37 00:05C8 -  -  -  -  		
Listing for file "_build.asm"
   33 00:05C8 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:05C8 -  -  -  -  ; ***************************************************************************************
    2 00:05C8 -  -  -  -  ; ***************************************************************************************
    3 00:05C8 -  -  -  -  ;
    4 00:05C8 -  -  -  -  ;		Name : 		asc.asm
    5 00:05C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05C8 -  -  -  -  ;		Reviewed :	No
    8 00:05C8 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:05C8 -  -  -  -  ;
   10 00:05C8 -  -  -  -  ; ***************************************************************************************
   11 00:05C8 -  -  -  -  ; ***************************************************************************************
   12 00:05C8 -  -  -  -  
   13 00:05C8 -  -  -  -  ; ***************************************************************************************
   14 00:05C8 -  -  -  -  ;
   15 00:05C8 -  -  -  -  ;								Asc unary function
   16 00:05C8 -  -  -  -  ;
   17 00:05C8 -  -  -  -  ; ***************************************************************************************
   18 00:05C8 -  -  -  -  
   19 00:05C8 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:05C8 CD 3F 04 00 		call	EvaluateStringTerm			; Get string
   21 00:05CC 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:05CD C3 7B 04 00 		jp 		Return8BitConstant
   23 00:05D1 -  -  -  -  
   24 00:05D1 -  -  -  -  ; ***************************************************************************************
   25 00:05D1 -  -  -  -  ;
   26 00:05D1 -  -  -  -  ;									Changes and Updates
   27 00:05D1 -  -  -  -  ;
   28 00:05D1 -  -  -  -  ; ***************************************************************************************
   29 00:05D1 -  -  -  -  ;
   30 00:05D1 -  -  -  -  ;		Date			Notes
   31 00:05D1 -  -  -  -  ;		==== 			=====
   32 00:05D1 -  -  -  -  ;
   33 00:05D1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:05D1 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:05D1 -  -  -  -  ; ***************************************************************************************
    2 00:05D1 -  -  -  -  ; ***************************************************************************************
    3 00:05D1 -  -  -  -  ;
    4 00:05D1 -  -  -  -  ;		Name : 		chr.asm
    5 00:05D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05D1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05D1 -  -  -  -  ;		Reviewed :	No
    8 00:05D1 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:05D1 -  -  -  -  ;
   10 00:05D1 -  -  -  -  ; ***************************************************************************************
   11 00:05D1 -  -  -  -  ; ***************************************************************************************
   12 00:05D1 -  -  -  -  
   13 00:05D1 -  -  -  -  ; ***************************************************************************************
   14 00:05D1 -  -  -  -  ;
   15 00:05D1 -  -  -  -  ;								Chr$() unary function
   16 00:05D1 -  -  -  -  ;
   17 00:05D1 -  -  -  -  ; ***************************************************************************************
   18 00:05D1 -  -  -  -  
   19 00:05D1 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:05D1 CD FB 01 00 		call 	CheckDollar
   21 00:05D5 CD 30 04 00 		call 	EvaluateIntegerTerm
   22 00:05D9 7D -  -  -  		ld 		a,l 						; get character
   23 00:05DA 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:05DC 21 85 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:05E0 36 0D -  -  		ld 		(hl),13
   26 00:05E2 2B -  -  -  		dec 	hl
   27 00:05E3 77 -  -  -  		ld 		(hl),a
   28 00:05E4 C9 -  -  -  		ret
   29 00:05E5 -  -  -  -  
   30 00:05E5 -  -  -  -  ; ***************************************************************************************
   31 00:05E5 -  -  -  -  ;
   32 00:05E5 -  -  -  -  ;									Changes and Updates
   33 00:05E5 -  -  -  -  ;
   34 00:05E5 -  -  -  -  ; ***************************************************************************************
   35 00:05E5 -  -  -  -  ;
   36 00:05E5 -  -  -  -  ;		Date			Notes
   37 00:05E5 -  -  -  -  ;		==== 			=====
   38 00:05E5 -  -  -  -  ;
   39 00:05E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:05E5 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:05E5 -  -  -  -  ; ***************************************************************************************
    2 00:05E5 -  -  -  -  ; ***************************************************************************************
    3 00:05E5 -  -  -  -  ;
    4 00:05E5 -  -  -  -  ;		Name : 		len.asm
    5 00:05E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05E5 -  -  -  -  ;		Reviewed :	None
    8 00:05E5 -  -  -  -  ;		Purpose :	String Length
    9 00:05E5 -  -  -  -  ;
   10 00:05E5 -  -  -  -  ; ***************************************************************************************
   11 00:05E5 -  -  -  -  ; ***************************************************************************************
   12 00:05E5 -  -  -  -  
   13 00:05E5 -  -  -  -  ; ***************************************************************************************
   14 00:05E5 -  -  -  -  ;
   15 00:05E5 -  -  -  -  ;								Len unary function
   16 00:05E5 -  -  -  -  ;
   17 00:05E5 -  -  -  -  ; ***************************************************************************************
   18 00:05E5 -  -  -  -  
   19 00:05E5 -  -  -  -  Unary_Len:	;; [len]
   20 00:05E5 CD 3F 04 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:05E9 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:05EA CD 2E 03 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:05EE -  -  -  -  _ULCount:
   24 00:05EE 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:05EF FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:05F1 D8 -  -  -  		ret 	c
   27 00:05F2 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:05F3 13 -  -  -  		inc 	de
   29 00:05F4 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:05F6 -  -  -  -  
   31 00:05F6 -  -  -  -  ; ***************************************************************************************
   32 00:05F6 -  -  -  -  ;
   33 00:05F6 -  -  -  -  ;									Changes and Updates
   34 00:05F6 -  -  -  -  ;
   35 00:05F6 -  -  -  -  ; ***************************************************************************************
   36 00:05F6 -  -  -  -  ;
   37 00:05F6 -  -  -  -  ;		Date			Notes
   38 00:05F6 -  -  -  -  ;		==== 			=====
   39 00:05F6 -  -  -  -  ;
   40 00:05F6 -  -  -  -  ; ***************************************************************************************
   41 00:05F6 -  -  -  -  		
Listing for file "_build.asm"
   36 00:05F6 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:05F6 -  -  -  -  ; ***************************************************************************************
    2 00:05F6 -  -  -  -  ; ***************************************************************************************
    3 00:05F6 -  -  -  -  ;
    4 00:05F6 -  -  -  -  ;		Name : 		makestring.asm
    5 00:05F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05F6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05F6 -  -  -  -  ;		Reviewed :	No
    8 00:05F6 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:05F6 -  -  -  -  ;
   10 00:05F6 -  -  -  -  ; ***************************************************************************************
   11 00:05F6 -  -  -  -  ; ***************************************************************************************
   12 00:05F6 -  -  -  -  
   13 00:05F6 -  -  -  -  ; ***************************************************************************************
   14 00:05F6 -  -  -  -  ;
   15 00:05F6 -  -  -  -  ;								Str$() unary function
   16 00:05F6 -  -  -  -  ;
   17 00:05F6 -  -  -  -  ; ***************************************************************************************
   18 00:05F6 -  -  -  -  
   19 00:05F6 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:05F6 CD 30 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:05FA CD B6 04 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:05FE 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:0600 C9 -  -  -  		ret
   24 00:0601 -  -  -  -  
   25 00:0601 -  -  -  -  ; ***************************************************************************************
   26 00:0601 -  -  -  -  ;
   27 00:0601 -  -  -  -  ;									Changes and Updates
   28 00:0601 -  -  -  -  ;
   29 00:0601 -  -  -  -  ; ***************************************************************************************
   30 00:0601 -  -  -  -  ;
   31 00:0601 -  -  -  -  ;		Date			Notes
   32 00:0601 -  -  -  -  ;		==== 			=====
   33 00:0601 -  -  -  -  ;
   34 00:0601 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:0601 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:0601 -  -  -  -  ; ***************************************************************************************
    2 00:0601 -  -  -  -  ; ***************************************************************************************
    3 00:0601 -  -  -  -  ;
    4 00:0601 -  -  -  -  ;		Name : 		not.asm
    5 00:0601 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0601 -  -  -  -  ;		Date : 		5th June 2023
    7 00:0601 -  -  -  -  ;		Reviewed :	No
    8 00:0601 -  -  -  -  ;		Purpose :	Logical not
    9 00:0601 -  -  -  -  ;
   10 00:0601 -  -  -  -  ; ***************************************************************************************
   11 00:0601 -  -  -  -  ; ***************************************************************************************
   12 00:0601 -  -  -  -  
   13 00:0601 -  -  -  -  ; ***************************************************************************************
   14 00:0601 -  -  -  -  ;
   15 00:0601 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:0601 -  -  -  -  ;
   17 00:0601 -  -  -  -  ; ***************************************************************************************
   18 00:0601 -  -  -  -  
   19 00:0601 -  -  -  -  Unary_Not:		;; [not]
   20 00:0601 CD 30 04 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:0605 CD 0E 06 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0609 CD 0E 06 00 		call 	__UNSwap		
   23 00:060D C9 -  -  -  		ret
   24 00:060E -  -  -  -  
   25 00:060E -  -  -  -  __UNSwap:
   26 00:060E 7C -  -  -  		ld 		a,h
   27 00:060F 2F -  -  -  		cpl
   28 00:0610 67 -  -  -  		ld 		h,a
   29 00:0611 7D -  -  -  		ld 		a,l
   30 00:0612 2F -  -  -  		cpl 	
   31 00:0613 6F -  -  -  		ld 		l,a
   32 00:0614 D9 -  -  -  		exx
   33 00:0615 C9 -  -  -  		ret
   34 00:0616 -  -  -  -  
   35 00:0616 -  -  -  -  ; ***************************************************************************************
   36 00:0616 -  -  -  -  ;
   37 00:0616 -  -  -  -  ;									Changes and Updates
   38 00:0616 -  -  -  -  ;
   39 00:0616 -  -  -  -  ; ***************************************************************************************
   40 00:0616 -  -  -  -  ;
   41 00:0616 -  -  -  -  ;		Date			Notes
   42 00:0616 -  -  -  -  ;		==== 			=====
   43 00:0616 -  -  -  -  ;
   44 00:0616 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:0616 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0616 -  -  -  -  ; ***************************************************************************************
    2 00:0616 -  -  -  -  ; ***************************************************************************************
    3 00:0616 -  -  -  -  ;
    4 00:0616 -  -  -  -  ;		Name : 		page.asm
    5 00:0616 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0616 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0616 -  -  -  -  ;		Reviewed :	No
    8 00:0616 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0616 -  -  -  -  ;
   10 00:0616 -  -  -  -  ; ***************************************************************************************
   11 00:0616 -  -  -  -  ; ***************************************************************************************
   12 00:0616 -  -  -  -  
   13 00:0616 -  -  -  -  ; ***************************************************************************************
   14 00:0616 -  -  -  -  ;
   15 00:0616 -  -  -  -  ;							page unary function (no bracket)
   16 00:0616 -  -  -  -  ;
   17 00:0616 -  -  -  -  ; ***************************************************************************************
   18 00:0616 -  -  -  -  
   19 00:0616 -  -  -  -  Unary_Page:	;; [page]
   20 00:0616 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:061A D9 -  -  -  			exx
   22 00:061B 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:061F D9 -  -  -  			exx
   24 00:0620 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0622 C9 -  -  -  			ret
   26 00:0623 -  -  -  -  
   27 00:0623 -  -  -  -  ; ***************************************************************************************
   28 00:0623 -  -  -  -  ;
   29 00:0623 -  -  -  -  ;									Changes and Updates
   30 00:0623 -  -  -  -  ;
   31 00:0623 -  -  -  -  ; ***************************************************************************************
   32 00:0623 -  -  -  -  ;
   33 00:0623 -  -  -  -  ;		Date			Notes
   34 00:0623 -  -  -  -  ;		==== 			=====
   35 00:0623 -  -  -  -  ;
   36 00:0623 -  -  -  -  ; ***************************************************************************************
   37 00:0623 -  -  -  -  			
Listing for file "_build.asm"
   39 00:0623 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0623 -  -  -  -  ; ***************************************************************************************
    2 00:0623 -  -  -  -  ; ***************************************************************************************
    3 00:0623 -  -  -  -  ;
    4 00:0623 -  -  -  -  ;		Name : 		random.asm
    5 00:0623 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0623 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0623 -  -  -  -  ;		Reviewed :	No
    8 00:0623 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0623 -  -  -  -  ;
   10 00:0623 -  -  -  -  ; ***************************************************************************************
   11 00:0623 -  -  -  -  ; ***************************************************************************************
   12 00:0623 -  -  -  -  
   13 00:0623 -  -  -  -  ; ***************************************************************************************
   14 00:0623 -  -  -  -  ;
   15 00:0623 -  -  -  -  ;								Random unary function
   16 00:0623 -  -  -  -  ;
   17 00:0623 -  -  -  -  ; ***************************************************************************************
   18 00:0623 -  -  -  -  
   19 00:0623 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0623 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:062B CD 30 04 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:062F D9 -  -  -  		exx 								; is it -ve
   23 00:0630 CB 7C -  -  		bit 	7,h
   24 00:0632 D9 -  -  -  		exx
   25 00:0633 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:0635 22 64 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0639 D9 -  -  -  		exx
   28 00:063A 22 68 00 00 		ld 		(RandomSeed+4),hl
   29 00:063E D9 -  -  -  		exx
   30 00:063F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:0641 C9 -  -  -  		ret
   32 00:0642 -  -  -  -  _URDontSeed:		
   33 00:0642 -  -  -  -  
   34 00:0642 CD AD 0C 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:0646 28 1C -  -  		jr 		z,_URFail
   36 00:0648 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0649 D9 -  -  -  		exx
   38 00:064A E5 -  -  -  		push 	hl
   39 00:064B D9 -  -  -  		exx
   40 00:064C -  -  -  -  		;
   41 00:064C CD 75 06 00 		call 	URandomHL 					; get random HL'HL
   42 00:0650 D9 -  -  -  		exx
   43 00:0651 CD 75 06 00 		call 	URandomHL
   44 00:0655 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0657 D9 -  -  -  		exx
   46 00:0658 -  -  -  -  		;
   47 00:0658 D9 -  -  -  		exx 								; restore range.
   48 00:0659 D1 -  -  -  		pop 	de
   49 00:065A D9 -  -  -  		exx
   50 00:065B D1 -  -  -  		pop 	de
   51 00:065C -  -  -  -  		;
   52 00:065C CD 3E 0B 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:0660 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0661 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:0663 C9 -  -  -  		ret
   56 00:0664 -  -  -  -  _URFail:
   57 00:0664 3E 03 C3 23 
              02 00 -  -  		ERR_BADVALUE
   58 00:066A -  -  -  -  ; ***************************************************************************************
   59 00:066A -  -  -  -  ;
   60 00:066A -  -  -  -  ; 									Push RNG off zero
   61 00:066A -  -  -  -  ;
   62 00:066A -  -  -  -  ; ***************************************************************************************
   63 00:066A -  -  -  -  
   64 00:066A -  -  -  -  UnaryRandomInitialise:
   65 00:066A 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:066C -  -  -  -  _URILoop:
   67 00:066C C5 -  -  -  		push 	bc
   68 00:066D CD 75 06 00 		call 	URandomHL
   69 00:0671 C1 -  -  -  		pop 	bc
   70 00:0672 10 F8 -  -  		djnz 	_URILoop
   71 00:0674 C9 -  -  -  		ret
   72 00:0675 -  -  -  -  
   73 00:0675 -  -  -  -  ; ***************************************************************************************
   74 00:0675 -  -  -  -  ;
   75 00:0675 -  -  -  -  ;							16 bit random number generator
   76 00:0675 -  -  -  -  ;
   77 00:0675 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:0675 -  -  -  -  ;		Actual author unspecified.
   79 00:0675 -  -  -  -  ;
   80 00:0675 -  -  -  -  ; ***************************************************************************************
   81 00:0675 -  -  -  -  
   82 00:0675 -  -  -  -  URandomHL:
   83 00:0675 2A 64 00 00 	    ld 		hl,(RandomSeed)
   84 00:0679 ED 5B 68 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:067E 44 -  -  -  	    ld 		b,h
   86 00:067F 4D -  -  -  	    ld 		c,l
   87 00:0680 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:0685 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:068A 2C -  -  -  	    inc 	l
   90 00:068B 09 -  -  -  	    add 	hl,bc
   91 00:068C 22 64 00 00 	    ld 		(RandomSeed),hl
   92 00:0690 2A 68 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:0694 ED 5A -  -  	    adc 	hl,de
   94 00:0696 22 68 00 00 	    ld 		(RandomSeed+4),hl
   95 00:069A EB -  -  -  	    ex 		de,hl
   96 00:069B 2A 6C 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:069F ED 4B 70 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:06A4 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:06A9 ED 43 70 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:06AE 9F -  -  -  	    sbc 	a,a
  101 00:06AF E6 C5 -  -  	    and 	%11000101
  102 00:06B1 AD -  -  -  	    xor 	l
  103 00:06B2 6F -  -  -  	    ld 		l,a
  104 00:06B3 22 6C 00 00 	    ld 		(RandomSeed+8),hl
  105 00:06B7 EB -  -  -  	    ex 		de,hl
  106 00:06B8 09 -  -  -  	    add 	hl,bc
  107 00:06B9 C9 -  -  -  	    ret		
  108 00:06BA -  -  -  -  
  109 00:06BA -  -  -  -  ; ***************************************************************************************
  110 00:06BA -  -  -  -  ;
  111 00:06BA -  -  -  -  ;									Changes and Updates
  112 00:06BA -  -  -  -  ;
  113 00:06BA -  -  -  -  ; ***************************************************************************************
  114 00:06BA -  -  -  -  ;
  115 00:06BA -  -  -  -  ;		Date			Notes
  116 00:06BA -  -  -  -  ;		==== 			=====
  117 00:06BA -  -  -  -  ;
  118 00:06BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:06BA -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:06BA -  -  -  -  ; ***************************************************************************************
    2 00:06BA -  -  -  -  ; ***************************************************************************************
    3 00:06BA -  -  -  -  ;
    4 00:06BA -  -  -  -  ;		Name : 		sgn.asm
    5 00:06BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06BA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06BA -  -  -  -  ;		Reviewed :	No
    8 00:06BA -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:06BA -  -  -  -  ;
   10 00:06BA -  -  -  -  ; ***************************************************************************************
   11 00:06BA -  -  -  -  ; ***************************************************************************************
   12 00:06BA -  -  -  -  
   13 00:06BA -  -  -  -  ; ***************************************************************************************
   14 00:06BA -  -  -  -  ;
   15 00:06BA -  -  -  -  ;								sgn unary function
   16 00:06BA -  -  -  -  ;
   17 00:06BA -  -  -  -  ; ***************************************************************************************
   18 00:06BA -  -  -  -  
   19 00:06BA -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:06BA CD 30 04 00 		call	EvaluateIntegerTerm 		; get value
   21 00:06BE CD AD 0C 00 		call 	Int32Zero 					; integer sgn() code
   22 00:06C2 CA 2E 03 00 		jp 		z,UnaryInt32False
   23 00:06C6 D9 -  -  -  		exx
   24 00:06C7 CB 7C -  -  		bit 	7,h
   25 00:06C9 D9 -  -  -  		exx
   26 00:06CA C2 2A 03 00 		jp 		nz,UnaryInt32True
   27 00:06CE 3E 01 -  -  		ld 		a,1
   28 00:06D0 C3 7B 04 00 		jp 		Return8BitConstant
   29 00:06D4 -  -  -  -  
   30 00:06D4 -  -  -  -  ; ***************************************************************************************
   31 00:06D4 -  -  -  -  ;
   32 00:06D4 -  -  -  -  ;									Changes and Updates
   33 00:06D4 -  -  -  -  ;
   34 00:06D4 -  -  -  -  ; ***************************************************************************************
   35 00:06D4 -  -  -  -  ;
   36 00:06D4 -  -  -  -  ;		Date			Notes
   37 00:06D4 -  -  -  -  ;		==== 			=====
   38 00:06D4 -  -  -  -  ;
   39 00:06D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:06D4 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:06D4 -  -  -  -  ; ***************************************************************************************
    2 00:06D4 -  -  -  -  ; ***************************************************************************************
    3 00:06D4 -  -  -  -  ;
    4 00:06D4 -  -  -  -  ;		Name : 		simple.asm
    5 00:06D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06D4 -  -  -  -  ;		Reviewed :	No
    8 00:06D4 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:06D4 -  -  -  -  ;
   10 00:06D4 -  -  -  -  ; ***************************************************************************************
   11 00:06D4 -  -  -  -  ; ***************************************************************************************
   12 00:06D4 -  -  -  -  
   13 00:06D4 -  -  -  -  ; ***************************************************************************************
   14 00:06D4 -  -  -  -  ;
   15 00:06D4 -  -  -  -  ;								( unary function (think about it)
   16 00:06D4 -  -  -  -  ;
   17 00:06D4 -  -  -  -  ; ***************************************************************************************
   18 00:06D4 -  -  -  -  
   19 00:06D4 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:06D4 CD D7 03 00 		call 	EvaluateAtPrecedence0
   21 00:06D8 C3 ED 01 00 		jp  	CheckRightBracket
   22 00:06DC -  -  -  -  
   23 00:06DC -  -  -  -  ; ***************************************************************************************
   24 00:06DC -  -  -  -  ;
   25 00:06DC -  -  -  -  ;									Handle &x
   26 00:06DC -  -  -  -  ;
   27 00:06DC -  -  -  -  ; ***************************************************************************************
   28 00:06DC -  -  -  -  
   29 00:06DC -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:06DC DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:06DF E6 C0 -  -  		and 		$C0
   32 00:06E1 FE 40 -  -  		cp 			$40
   33 00:06E3 C2 8D 02 00 		jp 			nz,SyntaxError 			; no then error
   34 00:06E7 C3 E5 04 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:06EB -  -  -  -  
   36 00:06EB -  -  -  -  ; ***************************************************************************************
   37 00:06EB -  -  -  -  ;
   38 00:06EB -  -  -  -  ;									Changes and Updates
   39 00:06EB -  -  -  -  ;
   40 00:06EB -  -  -  -  ; ***************************************************************************************
   41 00:06EB -  -  -  -  ;
   42 00:06EB -  -  -  -  ;		Date			Notes
   43 00:06EB -  -  -  -  ;		==== 			=====
   44 00:06EB -  -  -  -  ;
   45 00:06EB -  -  -  -  ; ***************************************************************************************
   46 00:06EB -  -  -  -  		
Listing for file "_build.asm"
   42 00:06EB -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:06EB -  -  -  -  ; ***************************************************************************************
    2 00:06EB -  -  -  -  ; ***************************************************************************************
    3 00:06EB -  -  -  -  ;
    4 00:06EB -  -  -  -  ;		Name : 		str.asm
    5 00:06EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06EB -  -  -  -  ;		Reviewed :	No
    8 00:06EB -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:06EB -  -  -  -  ;
   10 00:06EB -  -  -  -  ; ***************************************************************************************
   11 00:06EB -  -  -  -  ; ***************************************************************************************
   12 00:06EB -  -  -  -  
   13 00:06EB -  -  -  -  ; ***************************************************************************************
   14 00:06EB -  -  -  -  ;
   15 00:06EB -  -  -  -  ;								Str$() unary function
   16 00:06EB -  -  -  -  ;
   17 00:06EB -  -  -  -  ; ***************************************************************************************
   18 00:06EB -  -  -  -  
   19 00:06EB -  -  -  -  Unary_Str:	;; [str]
   20 00:06EB CD FB 01 00 		call 	CheckDollar
   21 00:06EF CD 30 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:06F3 01 74 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:06F7 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:06F9 CD F5 0C 00 		call 	Int32ToString 				
   25 00:06FD 21 74 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:0701 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:0703 C9 -  -  -  		ret
   28 00:0704 -  -  -  -  
   29 00:0704 -  -  -  -  ; ***************************************************************************************
   30 00:0704 -  -  -  -  ;
   31 00:0704 -  -  -  -  ;									Changes and Updates
   32 00:0704 -  -  -  -  ;
   33 00:0704 -  -  -  -  ; ***************************************************************************************
   34 00:0704 -  -  -  -  ;
   35 00:0704 -  -  -  -  ;		Date			Notes
   36 00:0704 -  -  -  -  ;		==== 			=====
   37 00:0704 -  -  -  -  ;
   38 00:0704 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:0704 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:0704 -  -  -  -  ; ***************************************************************************************
    2 00:0704 -  -  -  -  ; ***************************************************************************************
    3 00:0704 -  -  -  -  ;
    4 00:0704 -  -  -  -  ;		Name : 		time.asm
    5 00:0704 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0704 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0704 -  -  -  -  ;		Reviewed :	No
    8 00:0704 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:0704 -  -  -  -  ;
   10 00:0704 -  -  -  -  ; ***************************************************************************************
   11 00:0704 -  -  -  -  ; ***************************************************************************************
   12 00:0704 -  -  -  -  
   13 00:0704 -  -  -  -  ; ***************************************************************************************
   14 00:0704 -  -  -  -  ;
   15 00:0704 -  -  -  -  ;							Get system time in ms
   16 00:0704 -  -  -  -  ;
   17 00:0704 -  -  -  -  ; ***************************************************************************************
   18 00:0704 -  -  -  -  
   19 00:0704 -  -  -  -  Unary_Time:	;; [time]
   20 00:0704 CD 46 0D 00 			call 	SYSGetTimer
   21 00:0708 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:070A C9 -  -  -  			ret
   23 00:070B -  -  -  -  
   24 00:070B -  -  -  -  ; ***************************************************************************************
   25 00:070B -  -  -  -  ;
   26 00:070B -  -  -  -  ;									Changes and Updates
   27 00:070B -  -  -  -  ;
   28 00:070B -  -  -  -  ; ***************************************************************************************
   29 00:070B -  -  -  -  ;
   30 00:070B -  -  -  -  ;		Date			Notes
   31 00:070B -  -  -  -  ;		==== 			=====
   32 00:070B -  -  -  -  ;
   33 00:070B -  -  -  -  ; ***************************************************************************************
   34 00:070B -  -  -  -  			
Listing for file "_build.asm"
   44 00:070B -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:070B -  -  -  -  ; ***************************************************************************************
    2 00:070B -  -  -  -  ; ***************************************************************************************
    3 00:070B -  -  -  -  ;
    4 00:070B -  -  -  -  ;		Name : 		top.asm
    5 00:070B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:070B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:070B -  -  -  -  ;		Reviewed :	No
    8 00:070B -  -  -  -  ;		Purpose :	Various constants.
    9 00:070B -  -  -  -  ;
   10 00:070B -  -  -  -  ; ***************************************************************************************
   11 00:070B -  -  -  -  ; ***************************************************************************************
   12 00:070B -  -  -  -  
   13 00:070B -  -  -  -  ; ***************************************************************************************
   14 00:070B -  -  -  -  ;
   15 00:070B -  -  -  -  ;							page unary function (no bracket)
   16 00:070B -  -  -  -  ;
   17 00:070B -  -  -  -  ; ***************************************************************************************
   18 00:070B -  -  -  -  
   19 00:070B -  -  -  -  Unary_Top:	;; [top]
   20 00:070B 2A 4C 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:070F D9 -  -  -  			exx
   22 00:0710 2A 4E 00 00 			ld 		hl,(TopMemory+2)
   23 00:0714 D9 -  -  -  			exx
   24 00:0715 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0717 C9 -  -  -  			ret
   26 00:0718 -  -  -  -  
   27 00:0718 -  -  -  -  ; ***************************************************************************************
   28 00:0718 -  -  -  -  ;
   29 00:0718 -  -  -  -  ;									Changes and Updates
   30 00:0718 -  -  -  -  ;
   31 00:0718 -  -  -  -  ; ***************************************************************************************
   32 00:0718 -  -  -  -  ;
   33 00:0718 -  -  -  -  ;		Date			Notes
   34 00:0718 -  -  -  -  ;		==== 			=====
   35 00:0718 -  -  -  -  ;
   36 00:0718 -  -  -  -  ; ***************************************************************************************
   37 00:0718 -  -  -  -  			
Listing for file "_build.asm"
   45 00:0718 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0718 -  -  -  -  ; ***************************************************************************************
    2 00:0718 -  -  -  -  ; ***************************************************************************************
    3 00:0718 -  -  -  -  ;
    4 00:0718 -  -  -  -  ;		Name : 		val.asm
    5 00:0718 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0718 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0718 -  -  -  -  ;		Reviewed :	No
    8 00:0718 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0718 -  -  -  -  ;
   10 00:0718 -  -  -  -  ; ***************************************************************************************
   11 00:0718 -  -  -  -  ; ***************************************************************************************
   12 00:0718 -  -  -  -  
   13 00:0718 -  -  -  -  ; ***************************************************************************************
   14 00:0718 -  -  -  -  ;
   15 00:0718 -  -  -  -  ;								val( unary function
   16 00:0718 -  -  -  -  ;
   17 00:0718 -  -  -  -  ; ***************************************************************************************
   18 00:0718 -  -  -  -  
   19 00:0718 -  -  -  -  Unary_Val:	;; [val]
   20 00:0718 CD 3F 04 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:071C E5 -  -  -  		push 	hl 							; copy to BC
   22 00:071D C1 -  -  -  		pop 	bc
   23 00:071E 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0720 CD D3 0B 00 		call 	Int32FromString 			; get the integer part.
   25 00:0724 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0726 C8 -  -  -  		ret		z 							; okay
   27 00:0727 3E 03 C3 23 
              02 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:072D -  -  -  -  
   29 00:072D -  -  -  -  ; ***************************************************************************************
   30 00:072D -  -  -  -  ;
   31 00:072D -  -  -  -  ;									Changes and Updates
   32 00:072D -  -  -  -  ;
   33 00:072D -  -  -  -  ; ***************************************************************************************
   34 00:072D -  -  -  -  ;
   35 00:072D -  -  -  -  ;		Date			Notes
   36 00:072D -  -  -  -  ;		==== 			=====
   37 00:072D -  -  -  -  ;
   38 00:072D -  -  -  -  ; ***************************************************************************************
   39 00:072D -  -  -  -  		
Listing for file "_build.asm"
   46 00:072D -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:072D -  -  -  -  ; ***************************************************************************************
    2 00:072D -  -  -  -  ; ***************************************************************************************
    3 00:072D -  -  -  -  ;
    4 00:072D -  -  -  -  ;		Name : 		clear.asm
    5 00:072D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:072D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:072D -  -  -  -  ;		Reviewed :	No
    8 00:072D -  -  -  -  ;		Purpose :	Clear command.
    9 00:072D -  -  -  -  ;
   10 00:072D -  -  -  -  ; ***************************************************************************************
   11 00:072D -  -  -  -  ; ***************************************************************************************
   12 00:072D -  -  -  -  
   13 00:072D -  -  -  -  ; ***************************************************************************************
   14 00:072D -  -  -  -  ;
   15 00:072D -  -  -  -  ;										CLEAR command
   16 00:072D -  -  -  -  ;
   17 00:072D -  -  -  -  ; ***************************************************************************************
   18 00:072D -  -  -  -  
   19 00:072D -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:072D -  -  -  -  		;
   21 00:072D -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:072D -  -  -  -  		;
   23 00:072D 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0731 -  -  -  -  _CCFindLow:
   25 00:0731 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0735 5E -  -  -  		ld 		e,(hl)		
   27 00:0736 19 -  -  -  		add 	hl,de
   28 00:0737 7B -  -  -  		ld 		a,e
   29 00:0738 B7 -  -  -  		or 		a
   30 00:0739 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:073B 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:073C 22 4C 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:0740 23 -  -  -  		inc 	hl 							; one for luck
   34 00:0741 22 48 00 00 		ld 		(LowAllocMemory),hl
   35 00:0745 -  -  -  -  		;
   36 00:0745 -  -  -  -  		; 	 		Reset the language stack
   37 00:0745 -  -  -  -  		;
   38 00:0745 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:0749 -  -  -  -  		;
   40 00:0749 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:074B 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:074F 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:0753 19 -  -  -  		add 	hl,de
   44 00:0754 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:0756 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:075A -  -  -  -  		;
   47 00:075A 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:075E 19 -  -  -  		add 	hl,de
   49 00:075F 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:0763 -  -  -  -  		;
   51 00:0763 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:0763 -  -  -  -  		;
   53 00:0763 -  -  -  -  
   54 00:0763 -  -  -  -  		;
   55 00:0763 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:0763 -  -  -  -  		;
   57 00:0763 CD 6A 06 00 		call 	UnaryRandomInitialise
   58 00:0767 -  -  -  -  		;
   59 00:0767 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:0767 -  -  -  -  		;
   61 00:0767 C9 -  -  -  		ret
   62 00:0768 -  -  -  -  
   63 00:0768 -  -  -  -  ; ***************************************************************************************
   64 00:0768 -  -  -  -  ;
   65 00:0768 -  -  -  -  ;									Changes and Updates
   66 00:0768 -  -  -  -  ;
   67 00:0768 -  -  -  -  ; ***************************************************************************************
   68 00:0768 -  -  -  -  ;
   69 00:0768 -  -  -  -  ;		Date			Notes
   70 00:0768 -  -  -  -  ;		==== 			=====
   71 00:0768 -  -  -  -  ;
   72 00:0768 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:0768 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0768 -  -  -  -  ; ***************************************************************************************
    2 00:0768 -  -  -  -  ; ***************************************************************************************
    3 00:0768 -  -  -  -  ;
    4 00:0768 -  -  -  -  ;		Name : 		instance.asm
    5 00:0768 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0768 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0768 -  -  -  -  ;		Reviewed :	No
    8 00:0768 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0768 -  -  -  -  ;
   10 00:0768 -  -  -  -  ; ***************************************************************************************
   11 00:0768 -  -  -  -  ; ***************************************************************************************
   12 00:0768 -  -  -  -  
   13 00:0768 -  -  -  -  ; ***************************************************************************************
   14 00:0768 -  -  -  -  ;
   15 00:0768 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0768 -  -  -  -  ;
   17 00:0768 -  -  -  -  ; ***************************************************************************************
   18 00:0768 -  -  -  -  
   19 00:0768 -  -  -  -  SetCurrentInstance:
   20 00:0768 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:076D 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0771 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0776 -  -  -  -  
   24 00:0776 C9 -  -  -  		ret
   25 00:0777 -  -  -  -  
   26 00:0777 -  -  -  -  
   27 00:0777 -  -  -  -  ; ***************************************************************************************
   28 00:0777 -  -  -  -  ;
   29 00:0777 -  -  -  -  ;									Changes and Updates
   30 00:0777 -  -  -  -  ;
   31 00:0777 -  -  -  -  ; ***************************************************************************************
   32 00:0777 -  -  -  -  ;
   33 00:0777 -  -  -  -  ;		Date			Notes
   34 00:0777 -  -  -  -  ;		==== 			=====
   35 00:0777 -  -  -  -  ;
   36 00:0777 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:0777 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0777 -  -  -  -  ; ***************************************************************************************
    2 00:0777 -  -  -  -  ; ***************************************************************************************
    3 00:0777 -  -  -  -  ;
    4 00:0777 -  -  -  -  ;		Name : 		new.asm
    5 00:0777 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0777 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0777 -  -  -  -  ;		Reviewed :	No
    8 00:0777 -  -  -  -  ;		Purpose :	New command.
    9 00:0777 -  -  -  -  ;
   10 00:0777 -  -  -  -  ; ***************************************************************************************
   11 00:0777 -  -  -  -  ; ***************************************************************************************
   12 00:0777 -  -  -  -  
   13 00:0777 -  -  -  -  ; ***************************************************************************************
   14 00:0777 -  -  -  -  ;
   15 00:0777 -  -  -  -  ;										NEW command
   16 00:0777 -  -  -  -  ;
   17 00:0777 -  -  -  -  ; ***************************************************************************************
   18 00:0777 -  -  -  -  
   19 00:0777 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0777 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:077B 36 00 -  -  		ld 		(hl),0
   22 00:077D CD 2D 07 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0781 3E 00 C3 23 
              02 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0787 -  -  -  -  
   25 00:0787 -  -  -  -  ; ***************************************************************************************
   26 00:0787 -  -  -  -  ;
   27 00:0787 -  -  -  -  ;									Changes and Updates
   28 00:0787 -  -  -  -  ;
   29 00:0787 -  -  -  -  ; ***************************************************************************************
   30 00:0787 -  -  -  -  ;
   31 00:0787 -  -  -  -  ;		Date			Notes
   32 00:0787 -  -  -  -  ;		==== 			=====
   33 00:0787 -  -  -  -  ;
   34 00:0787 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:0787 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0787 -  -  -  -  ; ***************************************************************************************
    2 00:0787 -  -  -  -  ; ***************************************************************************************
    3 00:0787 -  -  -  -  ;
    4 00:0787 -  -  -  -  ;		Name : 		utility.asm
    5 00:0787 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0787 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0787 -  -  -  -  ;		Reviewed :	No
    8 00:0787 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0787 -  -  -  -  ;
   10 00:0787 -  -  -  -  ; ***************************************************************************************
   11 00:0787 -  -  -  -  ; ***************************************************************************************
   12 00:0787 -  -  -  -  
   13 00:0787 -  -  -  -  ; ***************************************************************************************
   14 00:0787 -  -  -  -  ;
   15 00:0787 -  -  -  -  ;							Print ASCII string at HL
   16 00:0787 -  -  -  -  ;
   17 00:0787 -  -  -  -  ; ***************************************************************************************
   18 00:0787 -  -  -  -  
   19 00:0787 -  -  -  -  PrintStringAtHL:
   20 00:0787 7E -  -  -  		ld 		a,(hl)
   21 00:0788 FE 20 -  -  		cp 		$20		
   22 00:078A D8 -  -  -  		ret 	c
   23 00:078B CD 44 0D 00 		call 	SYSPrintChar
   24 00:078F 23 -  -  -  		inc 	hl
   25 00:0790 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0792 -  -  -  -  
   27 00:0792 -  -  -  -  ; ***************************************************************************************
   28 00:0792 -  -  -  -  ;
   29 00:0792 -  -  -  -  ;									Changes and Updates
   30 00:0792 -  -  -  -  ;
   31 00:0792 -  -  -  -  ; ***************************************************************************************
   32 00:0792 -  -  -  -  ;
   33 00:0792 -  -  -  -  ;		Date			Notes
   34 00:0792 -  -  -  -  ;		==== 			=====
   35 00:0792 -  -  -  -  ;
   36 00:0792 -  -  -  -  ; ***************************************************************************************
   37 00:0792 -  -  -  -  		
Listing for file "_build.asm"
   50 00:0792 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0792 -  -  -  -  ; ***************************************************************************************
    2 00:0792 -  -  -  -  ; ***************************************************************************************
    3 00:0792 -  -  -  -  ;
    4 00:0792 -  -  -  -  ;		Name : 		find.asm
    5 00:0792 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0792 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0792 -  -  -  -  ;		Reviewed :	No
    8 00:0792 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0792 -  -  -  -  ;
   10 00:0792 -  -  -  -  ; ***************************************************************************************
   11 00:0792 -  -  -  -  ; ***************************************************************************************
   12 00:0792 -  -  -  -  
   13 00:0792 -  -  -  -  ; ***************************************************************************************
   14 00:0792 -  -  -  -  ;
   15 00:0792 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0792 -  -  -  -  ; 		variable information at (IX)
   17 00:0792 -  -  -  -  ;
   18 00:0792 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0792 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0792 -  -  -  -  ;
   21 00:0792 -  -  -  -  ; ***************************************************************************************
   22 00:0792 -  -  -  -  
   23 00:0792 -  -  -  -  FindVariable:
   24 00:0792 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
   25 00:079A DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   26 00:079D FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   27 00:079F D2 8D 02 00 		jp 		nc,SyntaxError 		
   28 00:07A3 -  -  -  -  
   29 00:07A3 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   30 00:07A6 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   31 00:07A8 30 15 -  -  		jr 		nc,_FVNotSimple 			; integer.
   32 00:07AA -  -  -  -  
   33 00:07AA 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   34 00:07AE DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   35 00:07B1 87 -  -  -  		add 	a,a 						; x4
   36 00:07B2 87 -  -  -  		add 	a,a
   37 00:07B3 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   38 00:07B4 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   39 00:07B5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   40 00:07B7 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   41 00:07B9 DD 23 -  -  		inc 	ix 							; skip over identifier marker
   42 00:07BB DD 23 -  -  		inc 	ix
   43 00:07BD AF -  -  -  		xor 	a 							; clear carry and return
   44 00:07BE C9 -  -  -  		ret
   45 00:07BF -  -  -  -  		;
   46 00:07BF -  -  -  -  		;		Not a standard simple variable.
   47 00:07BF -  -  -  -  		;
   48 00:07BF -  -  -  -  _FVNotSimple:
   49 00:07BF 37 -  -  -  		scf
   50 00:07C0 C9 -  -  -  		ret
   51 00:07C1 -  -  -  -  
   52 00:07C1 -  -  -  -  ; ***************************************************************************************
   53 00:07C1 -  -  -  -  ;
   54 00:07C1 -  -  -  -  ;									Changes and Updates
   55 00:07C1 -  -  -  -  ;
   56 00:07C1 -  -  -  -  ; ***************************************************************************************
   57 00:07C1 -  -  -  -  ;
   58 00:07C1 -  -  -  -  ;		Date			Notes
   59 00:07C1 -  -  -  -  ;		==== 			=====
   60 00:07C1 -  -  -  -  ;
   61 00:07C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:07C1 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:07C1 -  -  -  -  ;
    2 00:07C1 -  -  -  -  ;	This file is automatically generated.
    3 00:07C1 -  -  -  -  ;
    4 00:07C1 -  -  -  -  ;
    5 00:07C1 -  -  -  -  ;	Keywords for set 0
    6 00:07C1 -  -  -  -  ;
    7 00:07C1 -  -  -  -  KeywordsSet0:
    8 00:07C1 01 20 -  -  	.db	1," "              ; $0080
    9 00:07C3 01 20 -  -  	.db	1," "              ; $0081
   10 00:07C5 01 20 -  -  	.db	1," "              ; $0082
   11 00:07C7 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:07C9 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:07CB 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:07CD 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:07CF 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:07D3 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:07D7 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:07D9 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:07DB 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:07DE 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:07E1 01 3E -  -  	.db	1,">"              ; $008d
   22 00:07E3 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:07E5 01 3D -  -  	.db	1,"="              ; $008f
   24 00:07E7 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:07EA 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:07EE 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:07F1 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:07F5 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:07F7 01 28 -  -  	.db	1,"("              ; $0095
   30 00:07F9 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:07FB 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:07FF 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:0803 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:0807 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:080B 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:080F 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:0813 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:0817 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:081B 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:0820 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:0825 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:0829 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:082D 01 29 -  -  	.db	1,")"              ; $00a3
   44 00:082F 01 2C -  -  	.db	1,","              ; $00a4
   45 00:0831 01 3A -  -  	.db	1,":"              ; $00a5
   46 00:0833 01 3B -  -  	.db	1,";"              ; $00a6
   47 00:0835 01 27 -  -  	.db	1,"'"              ; $00a7
   48 00:0837 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 00:083E 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 00:0844 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 00:0847 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 00:084C 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 00:0851 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 00:0855 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 00:0858 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 00:085D 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 00:0862 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 00:0866 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 00:086B 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 00:0873 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 00:0879 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 00:087D 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 00:0881 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 00:0885 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 00:0889 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 00:088F 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 00:0894 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 00:0899 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 00:089E 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 00:08A2 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 00:08A6 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 00:08AB 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 00:08B0 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 00:08B8 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 00:08BF 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 00:08C5 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 00:08C9 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 00:08CE 00 -  -  -  	.db	0
   79 00:08CF -  -  -  -  ;
   80 00:08CF -  -  -  -  ;	Keywords for set 1
   81 00:08CF -  -  -  -  ;
   82 00:08CF -  -  -  -  KeywordsSet1:
   83 00:08CF 00 -  -  -  	.db	0
   84 00:08D0 -  -  -  -  ;
   85 00:08D0 -  -  -  -  ;	Keywords for set 2
   86 00:08D0 -  -  -  -  ;
   87 00:08D0 -  -  -  -  KeywordsSet2:
   88 00:08D0 00 -  -  -  	.db	0
Listing for file "_build.asm"
   52 00:08D1 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:08D1 -  -  -  -  ;
    2 00:08D1 -  -  -  -  ;	This file is automatically generated.
    3 00:08D1 -  -  -  -  ;
    4 00:08D1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:08E0 -  -  -  -  PrecedenceTable:
    6 00:08E0 06 -  -  -  	.db	6	; $0083 !
    7 00:08E1 06 -  -  -  	.db	6	; $0084 ?
    8 00:08E2 05 -  -  -  	.db	5	; $0085 *
    9 00:08E3 05 -  -  -  	.db	5	; $0086 /
   10 00:08E4 05 -  -  -  	.db	5	; $0087 mod
   11 00:08E5 05 -  -  -  	.db	5	; $0088 div
   12 00:08E6 04 -  -  -  	.db	4	; $0089 +
   13 00:08E7 04 -  -  -  	.db	4	; $008a -
   14 00:08E8 03 -  -  -  	.db	3	; $008b >=
   15 00:08E9 03 -  -  -  	.db	3	; $008c <=
   16 00:08EA 03 -  -  -  	.db	3	; $008d >
   17 00:08EB 03 -  -  -  	.db	3	; $008e <
   18 00:08EC 03 -  -  -  	.db	3	; $008f =
   19 00:08ED 03 -  -  -  	.db	3	; $0090 <>
   20 00:08EE 02 -  -  -  	.db	2	; $0091 and
   21 00:08EF 01 -  -  -  	.db	1	; $0092 or
   22 00:08F0 01 -  -  -  	.db	1	; $0093 eor
   23 00:08F1 -  -  -  -  
Listing for file "_build.asm"
   53 00:08F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:08F1 -  -  -  -  ;
    2 00:08F1 -  -  -  -  ;	This is automatically generated.
    3 00:08F1 -  -  -  -  ;
    4 00:08F1 -  -  -  -  ErrorIDTable:
    5 00:08F1 31 09 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:08F5 37 09 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:08F9 48 09 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:08FD 56 09 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0901 60 09 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0905 7A 09 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0909 8B 09 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:090D 99 09 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0911 A7 09 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:0915 B1 09 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:0919 C6 09 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:091D DC 09 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:0921 EA 09 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:0925 EF 09 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:0929 FC 09 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:092D 0D 0A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:0931 -  -  -  -  
   22 00:0931 -  -  -  -  ErrText_warmstart:
   23 00:0931 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:0937 -  -  -  -  ErrText_assert:
   25 00:0937 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:0948 -  -  -  -  ErrText_badtype:
   27 00:0948 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:0956 -  -  -  -  ErrText_badvalue:
   29 00:0956 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:0960 -  -  -  -  ErrText_disabled:
   31 00:0960 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:097A -  -  -  -  ErrText_divzero:
   33 00:097A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:098B -  -  -  -  ErrText_memory:
   35 00:098B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:0999 -  -  -  -  ErrText_nocomma:
   37 00:0999 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:09A7 -  -  -  -  ErrText_nodollar:
   39 00:09A7 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:09B1 -  -  -  -  ErrText_nolbracket:
   41 00:09B1 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:09C6 -  -  -  -  ErrText_norbracket:
   43 00:09C6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:09DC -  -  -  -  ErrText_notref:
   45 00:09DC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:09EA -  -  -  -  ErrText_stop:
   47 00:09EA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:09EF -  -  -  -  ErrText_syntax:
   49 00:09EF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:09FC -  -  -  -  ErrText_todo:
   51 00:09FC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:0A0D -  -  -  -  ErrText_unknownvar:
   53 00:0A0D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   54 00:0A1E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0A1E -  -  -  -  ;
    2 00:0A1E -  -  -  -  ;	Vectors for set 0
    3 00:0A1E -  -  -  -  ;
    4 00:0A1E -  -  -  -  VectorsSet0:
    5 00:0A1E E2 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0A22 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0A26 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0A2A 03 03 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0A2E 0C 03 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0A32 AF 02 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0A36 BD 02 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0A3A CB 02 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0A3E BD 02 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0A42 93 02 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0A46 A1 02 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0A4A 6A 03 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0A4E 60 03 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0A52 4C 03 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0A56 42 03 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0A5A 38 03 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0A5E 56 03 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0A62 D9 02 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0A66 E7 02 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0A6A F5 02 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0A6E DC 06 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0A72 D4 06 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0A76 F6 05 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0A7A 23 06 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0A7E E5 05 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0A82 BB 05 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0A86 BA 06 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0A8A EB 06 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0A8E D1 05 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0A92 C8 05 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0A96 01 06 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0A9A 16 06 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0A9E 04 07 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0AA2 0B 07 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0AA6 18 07 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0AAA D7 00 00 00 	addr(BadCmd_RBracket)            ; $00a3 )
   41 00:0AAE D7 00 00 00 	addr(BadCmd_Comma)               ; $00a4 ,
   42 00:0AB2 DB 00 00 00 	addr(Command_Colon)              ; $00a5 :
   43 00:0AB6 D7 00 00 00 	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 00:0ABA 50 01 00 00 	addr(Command_REM2)               ; $00a7 '
   45 00:0ABE 24 00 00 00 	addr(Unimplemented)              ; $00a8 repeat
   46 00:0AC2 24 00 00 00 	addr(Unimplemented)              ; $00a9 until
   47 00:0AC6 24 00 00 00 	addr(Unimplemented)              ; $00aa if
   48 00:0ACA D7 00 00 00 	addr(BadCmd_Then)                ; $00ab then
   49 00:0ACE 24 00 00 00 	addr(Unimplemented)              ; $00ac else
   50 00:0AD2 24 00 00 00 	addr(Unimplemented)              ; $00ad for
   51 00:0AD6 D7 00 00 00 	addr(BadCmd_To)                  ; $00ae to
   52 00:0ADA 24 00 00 00 	addr(Unimplemented)              ; $00af step
   53 00:0ADE 24 00 00 00 	addr(Unimplemented)              ; $00b0 next
   54 00:0AE2 D7 00 00 00 	addr(BadCmd_Defproc)             ; $00b1 def
   55 00:0AE6 24 00 00 00 	addr(Unimplemented)              ; $00b2 proc
   56 00:0AEA 24 00 00 00 	addr(Unimplemented)              ; $00b3 endproc
   57 00:0AEE 24 00 00 00 	addr(Unimplemented)              ; $00b4 local
   58 00:0AF2 24 00 00 00 	addr(Unimplemented)              ; $00b5 dim
   59 00:0AF6 50 01 00 00 	addr(Command_REM)                ; $00b6 rem
   60 00:0AFA 24 00 00 00 	addr(Unimplemented)              ; $00b7 let
   61 00:0AFE 24 00 00 00 	addr(Unimplemented)              ; $00b8 vdu
   62 00:0B02 F9 00 00 00 	addr(Command_PRINT)              ; $00b9 print
   63 00:0B06 24 00 00 00 	addr(Unimplemented)              ; $00ba load
   64 00:0B0A 24 00 00 00 	addr(Unimplemented)              ; $00bb save
   65 00:0B0E 24 00 00 00 	addr(Unimplemented)              ; $00bc list
   66 00:0B12 77 07 00 00 	addr(Command_NEW)                ; $00bd new
   67 00:0B16 6D 01 00 00 	addr(Command_RUN)                ; $00be run
   68 00:0B1A 24 00 00 00 	addr(Unimplemented)              ; $00bf read
   69 00:0B1E 24 00 00 00 	addr(Unimplemented)              ; $00c0 data
   70 00:0B22 24 00 00 00 	addr(Unimplemented)              ; $00c1 restore
   71 00:0B26 C6 00 00 00 	addr(Command_ASSERT)             ; $00c2 assert
   72 00:0B2A 2D 07 00 00 	addr(Command_CLEAR)              ; $00c3 clear
   73 00:0B2E DC 00 00 00 	addr(Command_END)                ; $00c4 end
   74 00:0B32 D9 01 00 00 	addr(Command_STOP)               ; $00c5 stop
   75 00:0B36 -  -  -  -  ;
   76 00:0B36 -  -  -  -  ;	Vectors for set 1
   77 00:0B36 -  -  -  -  ;
   78 00:0B36 -  -  -  -  VectorsSet1:
   79 00:0B36 -  -  -  -  ;
   80 00:0B36 -  -  -  -  ;	Vectors for set 2
   81 00:0B36 -  -  -  -  ;
   82 00:0B36 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   55 00:0B36 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0B36 -  -  -  -  ; ***************************************************************************************
    2 00:0B36 -  -  -  -  ; ***************************************************************************************
    3 00:0B36 -  -  -  -  ;
    4 00:0B36 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0B36 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B36 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B36 -  -  -  -  ;		Reviewed :	No
    8 00:0B36 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0B36 -  -  -  -  ;
   10 00:0B36 -  -  -  -  ; ***************************************************************************************
   11 00:0B36 -  -  -  -  ; ***************************************************************************************
   12 00:0B36 -  -  -  -  
   13 00:0B36 -  -  -  -  ; ***************************************************************************************
   14 00:0B36 -  -  -  -  ;
   15 00:0B36 -  -  -  -  ;								Unsigned integer divide
   16 00:0B36 -  -  -  -  ;
   17 00:0B36 -  -  -  -  ; ***************************************************************************************
   18 00:0B36 -  -  -  -  
   19 00:0B36 -  -  -  -  Int32UDivide:
   20 00:0B36 37 -  -  -  		scf
   21 00:0B37 C3 7B 0B 00 		jp 		_I32UnsignedDivide		
   22 00:0B3B -  -  -  -  
   23 00:0B3B -  -  -  -  ; ***************************************************************************************
   24 00:0B3B -  -  -  -  ;
   25 00:0B3B -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0B3B -  -  -  -  ;
   27 00:0B3B -  -  -  -  ; ***************************************************************************************
   28 00:0B3B -  -  -  -  
   29 00:0B3B -  -  -  -  Int32SDivide:
   30 00:0B3B 37 -  -  -  		scf
   31 00:0B3C 18 01 -  -  		jr 		_I32SDivide
   32 00:0B3E -  -  -  -  Int32Modulus:
   33 00:0B3E AF -  -  -  		xor 	a
   34 00:0B3F -  -  -  -  _I32SDivide:
   35 00:0B3F 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0B40 F5 -  -  -  		push 	af
   37 00:0B41 08 -  -  -  		ex 		af,af'
   38 00:0B42 -  -  -  -  
   39 00:0B42 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0B43 D9 -  -  -  		exx
   41 00:0B44 D5 -  -  -  		push 	de
   42 00:0B45 D9 -  -  -  		exx
   43 00:0B46 -  -  -  -  
   44 00:0B46 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0B47 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0B48 CD 68 0B 00 		call 	_I32CheckHLSignSwap
   47 00:0B4C CD 68 0B 00 		call 	_I32CheckHLSignSwap
   48 00:0B50 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0B51 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0B52 F5 -  -  -  		push 	af
   51 00:0B53 CD 7B 0B 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0B57 F1 -  -  -  		pop 	af 							; get function back
   53 00:0B58 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0B5A 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0B5B CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0B5D C4 DE 0C 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0B61 -  -  -  -  _I32SDExit:
   58 00:0B61 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0B62 D1 -  -  -  		pop 	de
   60 00:0B63 D9 -  -  -  		exx
   61 00:0B64 D1 -  -  -  		pop 	de
   62 00:0B65 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0B66 08 -  -  -  		ex 		af,af'
   64 00:0B67 C9 -  -  -  		ret
   65 00:0B68 -  -  -  -  
   66 00:0B68 -  -  -  -  
   67 00:0B68 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0B68 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0B69 CB 7C -  -  		bit 	7,h
   70 00:0B6B D9 -  -  -  		exx
   71 00:0B6C 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0B6E -  -  -  -  		;
   73 00:0B6E C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0B70 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0B71 CD DE 0C 00 		call 	Int32Negate 				
   76 00:0B75 F1 -  -  -  		pop 	af
   77 00:0B76 -  -  -  -  _I32CHSPositive:
   78 00:0B76 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0B77 EB -  -  -  		ex 		de,hl
   80 00:0B78 D9 -  -  -  		exx		
   81 00:0B79 EB -  -  -  		ex 		de,hl
   82 00:0B7A C9 -  -  -  		ret
   83 00:0B7B -  -  -  -  
   84 00:0B7B -  -  -  -  ; ***************************************************************************************
   85 00:0B7B -  -  -  -  ;
   86 00:0B7B -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0B7B -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0B7B -  -  -  -  ;
   89 00:0B7B -  -  -  -  ; ***************************************************************************************
   90 00:0B7B -  -  -  -  
   91 00:0B7B -  -  -  -  _I32UnsignedDivide:
   92 00:0B7B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0B7C D5 -  -  -  		push 	de
   94 00:0B7D D9 -  -  -  		exx
   95 00:0B7E C5 -  -  -  		push 	bc
   96 00:0B7F D5 -  -  -  		push 	de 							
   97 00:0B80 D9 -  -  -  		exx
   98 00:0B81 -  -  -  -  
   99 00:0B81 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0B82 -  -  -  -  
  101 00:0B82 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0B83 B3 -  -  -  		or 		e
  103 00:0B84 D9 -  -  -  		exx
  104 00:0B85 B2 -  -  -  		or 		d
  105 00:0B86 B3 -  -  -  		or 		e
  106 00:0B87 D9 -  -  -  		exx
  107 00:0B88 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0B8C -  -  -  -  
  109 00:0B8C -  -  -  -  
  110 00:0B8C 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0B8D 4D -  -  -  		ld		c,l
  112 00:0B8E 21 00 00 00 		ld 		hl,$0000
  113 00:0B92 D9 -  -  -  		exx
  114 00:0B93 44 -  -  -  		ld 		b,h
  115 00:0B94 4D -  -  -  		ld		c,l
  116 00:0B95 21 00 00 00 		ld 		hl,$0000
  117 00:0B99 D9 -  -  -  		exx
  118 00:0B9A -  -  -  -  
  119 00:0B9A 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0B9C -  -  -  -  _I32DivideLoop:
  121 00:0B9C F5 -  -  -  		push 	af
  122 00:0B9D -  -  -  -  
  123 00:0B9D CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0B9F CB 10 -  -  		rl 		b
  125 00:0BA1 D9 -  -  -  		exx
  126 00:0BA2 CB 11 -  -  		rl 		c
  127 00:0BA4 CB 10 -  -  		rl 		b
  128 00:0BA6 D9 -  -  -  		exx
  129 00:0BA7 CB 15 -  -  		rl 		l
  130 00:0BA9 CB 14 -  -  		rl 		h
  131 00:0BAB D9 -  -  -  		exx
  132 00:0BAC CB 15 -  -  		rl 		l
  133 00:0BAE CB 14 -  -  		rl 		h
  134 00:0BB0 D9 -  -  -  		exx
  135 00:0BB1 -  -  -  -  
  136 00:0BB1 CD 7C 0C 00 		call 	Int32Subtract 				; A = A - M
  137 00:0BB5 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0BB7 -  -  -  -  
  139 00:0BB7 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0BB8 18 04 -  -  		jr 		_I32Next
  141 00:0BBA -  -  -  -  
  142 00:0BBA -  -  -  -  _I32Borrow:
  143 00:0BBA CD 74 0C 00 		call 	Int32Add 					; A = A + M
  144 00:0BBE -  -  -  -  _I32Next:
  145 00:0BBE F1 -  -  -  		pop 	af
  146 00:0BBF 3D -  -  -  		dec 	a
  147 00:0BC0 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0BC2 -  -  -  -  
  149 00:0BC2 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0BC3 -  -  -  -  
  151 00:0BC3 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0BC4 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0BC6 -  -  -  -  
  154 00:0BC6 60 -  -  -  		ld  	h,b
  155 00:0BC7 69 -  -  -  		ld 		l,c
  156 00:0BC8 D9 -  -  -  		exx
  157 00:0BC9 60 -  -  -  		ld  	h,b
  158 00:0BCA 69 -  -  -  		ld 		l,c
  159 00:0BCB D9 -  -  -  		exx
  160 00:0BCC -  -  -  -  _I32Modulus1:		
  161 00:0BCC D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0BCD D1 -  -  -  		pop 	de
  163 00:0BCE C1 -  -  -  		pop 	bc
  164 00:0BCF D9 -  -  -  		exx
  165 00:0BD0 D1 -  -  -  		pop 	de
  166 00:0BD1 C1 -  -  -  		pop 	bc
  167 00:0BD2 C9 -  -  -  		ret
  168 00:0BD3 -  -  -  -  
  169 00:0BD3 -  -  -  -  ; ***************************************************************************************
  170 00:0BD3 -  -  -  -  ;
  171 00:0BD3 -  -  -  -  ;									Changes and Updates
  172 00:0BD3 -  -  -  -  ;
  173 00:0BD3 -  -  -  -  ; ***************************************************************************************
  174 00:0BD3 -  -  -  -  ;
  175 00:0BD3 -  -  -  -  ;		Date			Notes
  176 00:0BD3 -  -  -  -  ;		==== 			=====
  177 00:0BD3 -  -  -  -  ;
  178 00:0BD3 -  -  -  -  ; ***************************************************************************************
  179 00:0BD3 -  -  -  -  		
Listing for file "_build.asm"
   56 00:0BD3 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0BD3 -  -  -  -  ; ***************************************************************************************
    2 00:0BD3 -  -  -  -  ; ***************************************************************************************
    3 00:0BD3 -  -  -  -  ;
    4 00:0BD3 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0BD3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BD3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BD3 -  -  -  -  ;		Reviewed :	No
    8 00:0BD3 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0BD3 -  -  -  -  ;
   10 00:0BD3 -  -  -  -  ; ***************************************************************************************
   11 00:0BD3 -  -  -  -  ; ***************************************************************************************
   12 00:0BD3 -  -  -  -  
   13 00:0BD3 -  -  -  -  ; ***************************************************************************************
   14 00:0BD3 -  -  -  -  ;
   15 00:0BD3 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0BD3 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0BD3 -  -  -  -  ;
   18 00:0BD3 -  -  -  -  ; ***************************************************************************************
   19 00:0BD3 -  -  -  -  
   20 00:0BD3 -  -  -  -  Int32FromString:
   21 00:0BD3 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0BD4 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0BD5 D5 -  -  -  		push 	de
   24 00:0BD6 D9 -  -  -  		exx
   25 00:0BD7 D5 -  -  -  		push 	de
   26 00:0BD8 -  -  -  -  
   27 00:0BD8 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0BDC 11 00 00 00 		ld 		de,$0000
   29 00:0BE0 D9 -  -  -  		exx
   30 00:0BE1 21 00 00 00 		ld 		hl,$0000
   31 00:0BE5 11 00 00 00 		ld 		de,$0000
   32 00:0BE9 D9 -  -  -  		exx
   33 00:0BEA -  -  -  -  
   34 00:0BEA 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0BEB CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0BED 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0BEF ED 44 -  -  		neg 		 						; fix up the base
   38 00:0BF1 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0BF2 -  -  -  -  		;
   40 00:0BF2 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0BF3 F5 -  -  -  		push 	af
   42 00:0BF4 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0BF6 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0BF7 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0BF9 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0BFA 18 01 -  -  		jr 		_I32FSMain
   47 00:0BFC -  -  -  -  _I32FSNotSigned:		
   48 00:0BFC E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0BFD -  -  -  -  		;
   50 00:0BFD -  -  -  -  		; 		Main conversion loop.
   51 00:0BFD -  -  -  -  		; 		
   52 00:0BFD -  -  -  -  _I32FSMain:		
   53 00:0BFD 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0BFE FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0C00 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0C02 D6 20 -  -  		sub 	32
   57 00:0C04 -  -  -  -  _I32FSNotLower:
   58 00:0C04 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0C06 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0C08 FE 3A -  -  		cp 		'9'+1
   61 00:0C0A 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0C0C FE 41 -  -  		cp 		'A'
   63 00:0C0E 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0C10 FE 47 -  -  		cp 		'F'+1
   65 00:0C12 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0C14 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0C16 -  -  -  -  _I32FSOkay:
   68 00:0C16 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0C18 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0C19 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0C1B 03 -  -  -  		inc 	bc 							; consume character
   72 00:0C1C D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0C1D F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0C1E CD 3B 0C 00 		call 	Int32Multiply 				; result *= base
   75 00:0C22 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0C23 5F -  -  -  		ld 		e,a
   77 00:0C24 CD 74 0C 00 		call 	Int32Add 					; and add it.
   78 00:0C28 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0C29 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0C2B -  -  -  -  
   81 00:0C2B -  -  -  -  _I32FSExit:
   82 00:0C2B F1 -  -  -  		pop 	af 							; get sign back
   83 00:0C2C FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0C2E CC DE 0C 00 		call 	z,Int32Negate
   85 00:0C32 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0C33 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0C34 D9 -  -  -  		exx
   88 00:0C35 D1 -  -  -  		pop 	de
   89 00:0C36 D9 -  -  -  		exx
   90 00:0C37 C1 -  -  -  		pop 	bc
   91 00:0C38 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0C3A C9 -  -  -  		ret				
   93 00:0C3B -  -  -  -  
   94 00:0C3B -  -  -  -  ; ***************************************************************************************
   95 00:0C3B -  -  -  -  ;
   96 00:0C3B -  -  -  -  ;									Changes and Updates
   97 00:0C3B -  -  -  -  ;
   98 00:0C3B -  -  -  -  ; ***************************************************************************************
   99 00:0C3B -  -  -  -  ;
  100 00:0C3B -  -  -  -  ;		Date			Notes
  101 00:0C3B -  -  -  -  ;		==== 			=====
  102 00:0C3B -  -  -  -  ;
  103 00:0C3B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:0C3B -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0C3B -  -  -  -  ; ***************************************************************************************
    2 00:0C3B -  -  -  -  ; ***************************************************************************************
    3 00:0C3B -  -  -  -  ;
    4 00:0C3B -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0C3B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C3B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C3B -  -  -  -  ;		Reviewed :	No
    8 00:0C3B -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0C3B -  -  -  -  ;
   10 00:0C3B -  -  -  -  ; ***************************************************************************************
   11 00:0C3B -  -  -  -  ; ***************************************************************************************
   12 00:0C3B -  -  -  -  
   13 00:0C3B -  -  -  -  Int32Multiply:
   14 00:0C3B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0C3C D5 -  -  -  		push 	de
   16 00:0C3D 44 -  -  -  		ld 		b,h
   17 00:0C3E 4D -  -  -  		ld 		c,l
   18 00:0C3F 21 00 00 00 		ld 		hl,$0000
   19 00:0C43 -  -  -  -  
   20 00:0C43 D9 -  -  -  		exx
   21 00:0C44 C5 -  -  -  		push 	bc
   22 00:0C45 D5 -  -  -  		push 	de
   23 00:0C46 44 -  -  -  		ld 		b,h
   24 00:0C47 4D -  -  -  		ld 		c,l
   25 00:0C48 21 00 00 00 		ld 		hl,$0000		
   26 00:0C4C D9 -  -  -  		exx
   27 00:0C4D -  -  -  -  
   28 00:0C4D -  -  -  -  _I32MultiplyLoop:
   29 00:0C4D CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0C4F C4 74 0C 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0C53 -  -  -  -  		;
   32 00:0C53 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0C54 CB 38 -  -  		srl 	b
   34 00:0C56 CB 19 -  -  		rr 		c
   35 00:0C58 D9 -  -  -  		exx
   36 00:0C59 CB 18 -  -  		rr 		b
   37 00:0C5B CB 19 -  -  		rr 		c
   38 00:0C5D -  -  -  -  		;
   39 00:0C5D CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0C5F CB 12 -  -  		rl 		d
   41 00:0C61 D9 -  -  -  		exx
   42 00:0C62 CB 13 -  -  		rl 		e
   43 00:0C64 CB 12 -  -  		rl 		d
   44 00:0C66 -  -  -  -  
   45 00:0C66 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0C67 B1 -  -  -  		or 		c
   47 00:0C68 D9 -  -  -  		exx
   48 00:0C69 B0 -  -  -  		or 		b
   49 00:0C6A B1 -  -  -  		or 		c
   50 00:0C6B 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0C6D -  -  -  -  
   52 00:0C6D D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0C6E D1 -  -  -  		pop 	de
   54 00:0C6F C1 -  -  -  		pop 	bc
   55 00:0C70 D9 -  -  -  		exx
   56 00:0C71 D1 -  -  -  		pop 	de
   57 00:0C72 C1 -  -  -  		pop 	bc
   58 00:0C73 C9 -  -  -  		ret
   59 00:0C74 -  -  -  -  
   60 00:0C74 -  -  -  -  ; ***************************************************************************************
   61 00:0C74 -  -  -  -  ;
   62 00:0C74 -  -  -  -  ;									Changes and Updates
   63 00:0C74 -  -  -  -  ;
   64 00:0C74 -  -  -  -  ; ***************************************************************************************
   65 00:0C74 -  -  -  -  ;
   66 00:0C74 -  -  -  -  ;		Date			Notes
   67 00:0C74 -  -  -  -  ;		==== 			=====
   68 00:0C74 -  -  -  -  ;
   69 00:0C74 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0C74 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0C74 -  -  -  -  ; ***************************************************************************************
    2 00:0C74 -  -  -  -  ; ***************************************************************************************
    3 00:0C74 -  -  -  -  ;
    4 00:0C74 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0C74 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C74 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C74 -  -  -  -  ;		Reviewed :	No
    8 00:0C74 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0C74 -  -  -  -  ;
   10 00:0C74 -  -  -  -  ; ***************************************************************************************
   11 00:0C74 -  -  -  -  ; ***************************************************************************************
   12 00:0C74 -  -  -  -  
   13 00:0C74 -  -  -  -  ; ***************************************************************************************
   14 00:0C74 -  -  -  -  ;
   15 00:0C74 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0C74 -  -  -  -  ;
   17 00:0C74 -  -  -  -  ; ***************************************************************************************
   18 00:0C74 -  -  -  -  
   19 00:0C74 -  -  -  -  Int32Add:
   20 00:0C74 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0C76 D9 -  -  -  		exx
   22 00:0C77 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0C7A D9 -  -  -  		exx
   24 00:0C7B C9 -  -  -  		ret
   25 00:0C7C -  -  -  -  
   26 00:0C7C -  -  -  -  ; ***************************************************************************************
   27 00:0C7C -  -  -  -  ;
   28 00:0C7C -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0C7C -  -  -  -  ;
   30 00:0C7C -  -  -  -  ; ***************************************************************************************
   31 00:0C7C -  -  -  -  
   32 00:0C7C -  -  -  -  Int32Subtract:
   33 00:0C7C AF -  -  -  		xor 	a 							; clear carry
   34 00:0C7D 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0C80 D9 -  -  -  		exx
   36 00:0C81 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0C84 D9 -  -  -  		exx
   38 00:0C85 C9 -  -  -  		ret
   39 00:0C86 -  -  -  -  
   40 00:0C86 -  -  -  -  ; ***************************************************************************************
   41 00:0C86 -  -  -  -  ;
   42 00:0C86 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0C86 -  -  -  -  ;
   44 00:0C86 -  -  -  -  ; ***************************************************************************************
   45 00:0C86 -  -  -  -  
   46 00:0C86 -  -  -  -  Int32And:
   47 00:0C86 D9 -  -  -  		exx
   48 00:0C87 CD 8C 0C 00 		call 	_I32AndHLDE
   49 00:0C8B D9 -  -  -  		exx
   50 00:0C8C -  -  -  -  _I32AndHLDE:		
   51 00:0C8C 7C -  -  -  		ld 		a,h
   52 00:0C8D A2 -  -  -  		and 	d
   53 00:0C8E 67 -  -  -  		ld 		h,a
   54 00:0C8F 7D -  -  -  		ld 		a,l
   55 00:0C90 A3 -  -  -  		and 	e
   56 00:0C91 6F -  -  -  		ld 		l,a
   57 00:0C92 C9 -  -  -  		ret
   58 00:0C93 -  -  -  -  
   59 00:0C93 -  -  -  -  ; ***************************************************************************************
   60 00:0C93 -  -  -  -  ;
   61 00:0C93 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0C93 -  -  -  -  ;
   63 00:0C93 -  -  -  -  ; ***************************************************************************************
   64 00:0C93 -  -  -  -  
   65 00:0C93 -  -  -  -  Int32Or:
   66 00:0C93 D9 -  -  -  		exx
   67 00:0C94 CD 99 0C 00 		call 	_I32OrHLDE
   68 00:0C98 D9 -  -  -  		exx
   69 00:0C99 -  -  -  -  _I32OrHLDE:		
   70 00:0C99 7C -  -  -  		ld 		a,h
   71 00:0C9A B2 -  -  -  		or 		d
   72 00:0C9B 67 -  -  -  		ld 		h,a
   73 00:0C9C 7D -  -  -  		ld 		a,l
   74 00:0C9D B3 -  -  -  		or 		e
   75 00:0C9E 6F -  -  -  		ld 		l,a
   76 00:0C9F C9 -  -  -  		ret
   77 00:0CA0 -  -  -  -  
   78 00:0CA0 -  -  -  -  ; ***************************************************************************************
   79 00:0CA0 -  -  -  -  ;
   80 00:0CA0 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0CA0 -  -  -  -  ;
   82 00:0CA0 -  -  -  -  ; ***************************************************************************************
   83 00:0CA0 -  -  -  -  
   84 00:0CA0 -  -  -  -  Int32Xor:
   85 00:0CA0 D9 -  -  -  		exx
   86 00:0CA1 CD A6 0C 00 		call 	_I32XorHLDE
   87 00:0CA5 D9 -  -  -  		exx
   88 00:0CA6 -  -  -  -  _I32XorHLDE:		
   89 00:0CA6 7C -  -  -  		ld 		a,h
   90 00:0CA7 AA -  -  -  		xor 	d
   91 00:0CA8 67 -  -  -  		ld 		h,a
   92 00:0CA9 7D -  -  -  		ld 		a,l
   93 00:0CAA AB -  -  -  		xor 	e
   94 00:0CAB 6F -  -  -  		ld 		l,a
   95 00:0CAC C9 -  -  -  		ret
   96 00:0CAD -  -  -  -  
   97 00:0CAD -  -  -  -  ; ***************************************************************************************
   98 00:0CAD -  -  -  -  ;
   99 00:0CAD -  -  -  -  ;								 Check if HL'HL zero
  100 00:0CAD -  -  -  -  ;
  101 00:0CAD -  -  -  -  ; ***************************************************************************************
  102 00:0CAD -  -  -  -  
  103 00:0CAD -  -  -  -  Int32Zero:
  104 00:0CAD D9 -  -  -  		exx
  105 00:0CAE 7D -  -  -  		ld 		a,l
  106 00:0CAF B4 -  -  -  		or 		h
  107 00:0CB0 D9 -  -  -  		exx
  108 00:0CB1 B5 -  -  -  		or 		l
  109 00:0CB2 B4 -  -  -  		or 		h
  110 00:0CB3 C9 -  -  -  		ret
  111 00:0CB4 -  -  -  -  
  112 00:0CB4 -  -  -  -  ; ***************************************************************************************
  113 00:0CB4 -  -  -  -  ;
  114 00:0CB4 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0CB4 -  -  -  -  ;
  116 00:0CB4 -  -  -  -  ; ***************************************************************************************
  117 00:0CB4 -  -  -  -  
  118 00:0CB4 -  -  -  -  Int32Compare:
  119 00:0CB4 E5 -  -  -  		push 	hl 							; save HL
  120 00:0CB5 AF -  -  -  		xor 	a 							; clear carry
  121 00:0CB6 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0CB9 D9 -  -  -  		exx
  123 00:0CBA E5 -  -  -  		push 	hl 							; save HL'
  124 00:0CBB 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0CBE -  -  -  -  		;
  126 00:0CBE 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0CBF E2 C7 0C 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0CC3 78 -  -  -  		ld 		a,b
  129 00:0CC4 EE 80 -  -  		xor 	$80
  130 00:0CC6 47 -  -  -  		ld 		b,a
  131 00:0CC7 -  -  -  -  _I32CNoOverflow:
  132 00:0CC7 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0CC8 B5 -  -  -  		or 		l
  134 00:0CC9 D9 -  -  -  		exx 
  135 00:0CCA B4 -  -  -  		or 		h
  136 00:0CCB B5 -  -  -  		or 		l
  137 00:0CCC 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0CCE -  -  -  -  		;
  139 00:0CCE D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0CCF CB 78 -  -  		bit 	7,b
  141 00:0CD1 D9 -  -  -  		exx
  142 00:0CD2 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0CD4 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0CD6 3E FF -  -  		ld 		a,$FF
  145 00:0CD8 -  -  -  -  _I32NotPos:
  146 00:0CD8 D9 -  -  -  		exx
  147 00:0CD9 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0CDA D9 -  -  -  		exx
  149 00:0CDB E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0CDC B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0CDD C9 -  -  -  		ret
  152 00:0CDE -  -  -  -  
  153 00:0CDE -  -  -  -  ; ***************************************************************************************
  154 00:0CDE -  -  -  -  ;
  155 00:0CDE -  -  -  -  ;										Negate HL'HL
  156 00:0CDE -  -  -  -  ;
  157 00:0CDE -  -  -  -  ; ***************************************************************************************
  158 00:0CDE -  -  -  -  
  159 00:0CDE -  -  -  -  Int32Negate:
  160 00:0CDE AF -  -  -  		xor 	a
  161 00:0CDF CD EA 0C 00 		call 	_I32NSubtract
  162 00:0CE3 D9 -  -  -  		exx
  163 00:0CE4 CD EA 0C 00 		call 	_I32NSubtract
  164 00:0CE8 D9 -  -  -  		exx
  165 00:0CE9 C9 -  -  -  		ret
  166 00:0CEA -  -  -  -  _I32NSubtract:
  167 00:0CEA D5 -  -  -  		push 	de
  168 00:0CEB EB -  -  -  		ex 		de,hl
  169 00:0CEC 21 00 00 00 		ld 		hl,$0000
  170 00:0CF0 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0CF3 D1 -  -  -  		pop 	de
  172 00:0CF4 C9 -  -  -  		ret
  173 00:0CF5 -  -  -  -  		
  174 00:0CF5 -  -  -  -  ; ***************************************************************************************
  175 00:0CF5 -  -  -  -  ;
  176 00:0CF5 -  -  -  -  ;									Changes and Updates
  177 00:0CF5 -  -  -  -  ;
  178 00:0CF5 -  -  -  -  ; ***************************************************************************************
  179 00:0CF5 -  -  -  -  ;
  180 00:0CF5 -  -  -  -  ;		Date			Notes
  181 00:0CF5 -  -  -  -  ;		==== 			=====
  182 00:0CF5 -  -  -  -  ;
  183 00:0CF5 -  -  -  -  ; ***************************************************************************************
  184 00:0CF5 -  -  -  -  		
Listing for file "_build.asm"
   59 00:0CF5 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0CF5 -  -  -  -  ; ***************************************************************************************
    2 00:0CF5 -  -  -  -  ; ***************************************************************************************
    3 00:0CF5 -  -  -  -  ;
    4 00:0CF5 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0CF5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CF5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CF5 -  -  -  -  ;		Reviewed :	No
    8 00:0CF5 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0CF5 -  -  -  -  ;
   10 00:0CF5 -  -  -  -  ; ***************************************************************************************
   11 00:0CF5 -  -  -  -  ;
   12 00:0CF5 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0CF5 -  -  -  -  ;
   14 00:0CF5 -  -  -  -  ; ***************************************************************************************
   15 00:0CF5 -  -  -  -  
   16 00:0CF5 -  -  -  -  Int32ToString:
   17 00:0CF5 C5 -  -  -  		push 	bc 							; save string start
   18 00:0CF6 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0CF7 E5 -  -  -  		push 	hl
   20 00:0CF8 11 00 00 00 		ld	 	de,$0000
   21 00:0CFC D9 -  -  -  		exx
   22 00:0CFD D5 -  -  -  		push 	de
   23 00:0CFE E5 -  -  -  		push 	hl
   24 00:0CFF 11 00 00 00 		ld 		de,$000
   25 00:0D03 D9 -  -  -  		exx
   26 00:0D04 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0D05 -  -  -  -  		;
   28 00:0D05 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0D07 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0D09 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0D0B 5F -  -  -  		ld 		e,a
   32 00:0D0C -  -  -  -  		;
   33 00:0D0C D9 -  -  -  		exx 								; is it -ve ?
   34 00:0D0D CB 7C -  -  		bit 	7,h
   35 00:0D0F D9 -  -  -  		exx
   36 00:0D10 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0D12 -  -  -  -  		;
   38 00:0D12 CD DE 0C 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0D16 -  -  -  -  		;
   40 00:0D16 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0D18 02 -  -  -  		ld 		(bc),a
   42 00:0D19 03 -  -  -  		inc 	bc
   43 00:0D1A -  -  -  -  _I32TSNotNegative:	
   44 00:0D1A CD 29 0D 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0D1E -  -  -  -  _I32TSExit:
   46 00:0D1E 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0D20 02 -  -  -  		ld 		(bc),a 
   48 00:0D21 -  -  -  -  
   49 00:0D21 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0D22 E1 -  -  -  		pop 	hl
   51 00:0D23 D1 -  -  -  		pop 	de
   52 00:0D24 D9 -  -  -  		exx
   53 00:0D25 E1 -  -  -  		pop 	hl
   54 00:0D26 D1 -  -  -  		pop 	de
   55 00:0D27 C1 -  -  -  		pop 	bc
   56 00:0D28 C9 -  -  -  		ret
   57 00:0D29 -  -  -  -  
   58 00:0D29 -  -  -  -  _I32RecursiveConvert:
   59 00:0D29 CD 36 0B 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0D2D F5 -  -  -  		push 	af 							; save remainder
   61 00:0D2E CD AD 0C 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0D32 C4 29 0D 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0D36 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0D37 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0D39 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0D3B C6 07 -  -  		add 	a,7
   67 00:0D3D -  -  -  -  _I32NotHex:
   68 00:0D3D C6 30 -  -  		add 	a,48
   69 00:0D3F 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0D40 03 -  -  -  		inc 	bc
   71 00:0D41 C9 -  -  -  		ret		
   72 00:0D42 -  -  -  -  
   73 00:0D42 -  -  -  -  ; ***************************************************************************************
   74 00:0D42 -  -  -  -  ;
   75 00:0D42 -  -  -  -  ;									Changes and Updates
   76 00:0D42 -  -  -  -  ;
   77 00:0D42 -  -  -  -  ; ***************************************************************************************
   78 00:0D42 -  -  -  -  ;
   79 00:0D42 -  -  -  -  ;		Date			Notes
   80 00:0D42 -  -  -  -  ;		==== 			=====
   81 00:0D42 -  -  -  -  ;
   82 00:0D42 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:0D42 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0D42 -  -  -  -  ; ***************************************************************************************
    2 00:0D42 -  -  -  -  ; ***************************************************************************************
    3 00:0D42 -  -  -  -  ;
    4 00:0D42 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0D42 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D42 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D42 -  -  -  -  ;		Reviewed :	No
    8 00:0D42 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0D42 -  -  -  -  ;
   10 00:0D42 -  -  -  -  ; ***************************************************************************************
   11 00:0D42 -  -  -  -  ; ***************************************************************************************
   12 00:0D42 -  -  -  -  
   13 00:0D42 -  -  -  -  #ifdef AQUARIUS
   14 00:0D42             
   15 00:0D42             ; ***************************************************************************************
   16 00:0D42             ;
   17 00:0D42             ;								Initialise system stuff
   18 00:0D42             ;
   19 00:0D42             ; ***************************************************************************************
   20 00:0D42             
   21 00:0D42             SYSInitialise:
   22 00:0D42             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0D42             	call 	SYSPrintChar
   24 00:0D42             	ret
   25 00:0D42             
   26 00:0D42             ; ***************************************************************************************
   27 00:0D42             ;
   28 00:0D42             ;								Terminate system stuff
   29 00:0D42             ;
   30 00:0D42             ; ***************************************************************************************
   31 00:0D42             
   32 00:0D42             SYSTerminate:
   33 00:0D42             	jr 		SYSTerminate
   34 00:0D42             
   35 00:0D42             ; ***************************************************************************************
   36 00:0D42             ;
   37 00:0D42             ;								Print A character
   38 00:0D42             ;
   39 00:0D42             ; ***************************************************************************************
   40 00:0D42             
   41 00:0D42             SYSPrintChar:
   42 00:0D42             	push 	af 									; we stack everything including alt registers
   43 00:0D42             	push 	bc
   44 00:0D42             	push 	de
   45 00:0D42             	push 	hl
   46 00:0D42             	push 	ix
   47 00:0D42             	push 	iy
   48 00:0D42             	exx
   49 00:0D42             	push 	bc
   50 00:0D42             	push 	de
   51 00:0D42             	push 	hl
   52 00:0D42             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0D42             	pop 	hl
   54 00:0D42             	pop 	de
   55 00:0D42             	pop 	bc
   56 00:0D42             	exx
   57 00:0D42             	pop 	iy
   58 00:0D42             	pop 	ix
   59 00:0D42             	pop 	hl
   60 00:0D42             	pop 	de
   61 00:0D42             	pop 	bc
   62 00:0D42             	pop 	af
   63 00:0D42             	ret		
   64 00:0D42             
   65 00:0D42             ; ***************************************************************************************
   66 00:0D42             ;
   67 00:0D42             ;									Print Newline
   68 00:0D42             ;
   69 00:0D42             ; ***************************************************************************************
   70 00:0D42             
   71 00:0D42             SYSPrintCRLF:
   72 00:0D42             	push 	af
   73 00:0D42             	ld 		a,13
   74 00:0D42             	call 	SYSPrintChar
   75 00:0D42             	ld 		a,10
   76 00:0D42             	call 	SYSPrintChar
   77 00:0D42             	pop 	af
   78 00:0D42             	ret
   79 00:0D42             
   80 00:0D42             ; ***************************************************************************************
   81 00:0D42             ;
   82 00:0D42             ;									Get time into HL'HL
   83 00:0D42             ;
   84 00:0D42             ; ***************************************************************************************
   85 00:0D42             
   86 00:0D42             SYSGetTimer:
   87 00:0D42              	in 		a,($00)
   88 00:0D42              	ld 		l,a
   89 00:0D42              	in 		a,($01)
   90 00:0D42              	ld 		h,a
   91 00:0D42              	exx
   92 00:0D42              	in 		a,($02)
   93 00:0D42              	ld 		l,a
   94 00:0D42              	in 		a,($03)
   95 00:0D42              	ld 		h,a
   96 00:0D42              	exx
   97 00:0D42             	ret 	
   98 00:0D42             	
   99 00:0D42             #endif
  100 00:0D42 -  -  -  -  
  101 00:0D42 -  -  -  -  ; ***************************************************************************************
  102 00:0D42 -  -  -  -  ;
  103 00:0D42 -  -  -  -  ;									Changes and Updates
  104 00:0D42 -  -  -  -  ;
  105 00:0D42 -  -  -  -  ; ***************************************************************************************
  106 00:0D42 -  -  -  -  ;
  107 00:0D42 -  -  -  -  ;		Date			Notes
  108 00:0D42 -  -  -  -  ;		==== 			=====
  109 00:0D42 -  -  -  -  ;
  110 00:0D42 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:0D42 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0D42 -  -  -  -  ; ***************************************************************************************
    2 00:0D42 -  -  -  -  ; ***************************************************************************************
    3 00:0D42 -  -  -  -  ;
    4 00:0D42 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0D42 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D42 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D42 -  -  -  -  ;		Reviewed :	No
    8 00:0D42 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0D42 -  -  -  -  ;
   10 00:0D42 -  -  -  -  ; ***************************************************************************************
   11 00:0D42 -  -  -  -  ; ***************************************************************************************
   12 00:0D42 -  -  -  -  
   13 00:0D42 -  -  -  -  #ifdef CLEANEZ80
   14 00:0D42 -  -  -  -  
   15 00:0D42 -  -  -  -  ; ***************************************************************************************
   16 00:0D42 -  -  -  -  ;
   17 00:0D42 -  -  -  -  ;								Initialise system stuff
   18 00:0D42 -  -  -  -  ;
   19 00:0D42 -  -  -  -  ; ***************************************************************************************
   20 00:0D42 -  -  -  -  
   21 00:0D42 -  -  -  -  SYSInitialise:
   22 00:0D42 C9 -  -  -  	ret
   23 00:0D43 -  -  -  -  
   24 00:0D43 -  -  -  -  ; ***************************************************************************************
   25 00:0D43 -  -  -  -  ;
   26 00:0D43 -  -  -  -  ;								Terminate system stuff
   27 00:0D43 -  -  -  -  ;
   28 00:0D43 -  -  -  -  ; ***************************************************************************************
   29 00:0D43 -  -  -  -  
   30 00:0D43 -  -  -  -  SYSTerminate:
   31 00:0D43 C9 -  -  -  	ret
   32 00:0D44 -  -  -  -  
   33 00:0D44 -  -  -  -  ; ***************************************************************************************
   34 00:0D44 -  -  -  -  ;
   35 00:0D44 -  -  -  -  ;								Print A character
   36 00:0D44 -  -  -  -  ;
   37 00:0D44 -  -  -  -  ; ***************************************************************************************
   38 00:0D44 -  -  -  -  
   39 00:0D44 -  -  -  -  SYSPrintChar:
   40 00:0D44 C9 -  -  -  	ret		
   41 00:0D45 -  -  -  -  
   42 00:0D45 -  -  -  -  ; ***************************************************************************************
   43 00:0D45 -  -  -  -  ;
   44 00:0D45 -  -  -  -  ;									Print Newline
   45 00:0D45 -  -  -  -  ;
   46 00:0D45 -  -  -  -  ; ***************************************************************************************
   47 00:0D45 -  -  -  -  
   48 00:0D45 -  -  -  -  SYSPrintCRLF:
   49 00:0D45 C9 -  -  -  	ret
   50 00:0D46 -  -  -  -  
   51 00:0D46 -  -  -  -  ; ***************************************************************************************
   52 00:0D46 -  -  -  -  ;
   53 00:0D46 -  -  -  -  ;									Get time into HL'HL
   54 00:0D46 -  -  -  -  ;
   55 00:0D46 -  -  -  -  ; ***************************************************************************************
   56 00:0D46 -  -  -  -  
   57 00:0D46 -  -  -  -  SYSGetTimer:
   58 00:0D46 C9 -  -  -  	ret
   59 00:0D47 -  -  -  -  
   60 00:0D47 -  -  -  -  #endif
   61 00:0D47 -  -  -  -  
   62 00:0D47 -  -  -  -  ; ***************************************************************************************
   63 00:0D47 -  -  -  -  ;
   64 00:0D47 -  -  -  -  ;									Changes and Updates
   65 00:0D47 -  -  -  -  ;
   66 00:0D47 -  -  -  -  ; ***************************************************************************************
   67 00:0D47 -  -  -  -  ;
   68 00:0D47 -  -  -  -  ;		Date			Notes
   69 00:0D47 -  -  -  -  ;		==== 			=====
   70 00:0D47 -  -  -  -  ;
   71 00:0D47 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0D47 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0D47 -  -  -  -  ; ***************************************************************************************
    2 00:0D47 -  -  -  -  ; ***************************************************************************************
    3 00:0D47 -  -  -  -  ;
    4 00:0D47 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0D47 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D47 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D47 -  -  -  -  ;		Reviewed :	No
    8 00:0D47 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0D47 -  -  -  -  ;
   10 00:0D47 -  -  -  -  ; ***************************************************************************************
   11 00:0D47 -  -  -  -  ; ***************************************************************************************
   12 00:0D47 -  -  -  -  
   13 00:0D47 -  -  -  -  #ifdef TI84
   14 00:0D47             
   15 00:0D47             ; ***************************************************************************************
   16 00:0D47             ;
   17 00:0D47             ;								Initialise system stuff
   18 00:0D47             ;
   19 00:0D47             ; ***************************************************************************************
   20 00:0D47             
   21 00:0D47             SYSInitialise:
   22 00:0D47             	di
   23 00:0D47             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0D47             	ld 		(_IYTemp84),iy
   25 00:0D47             	ret
   26 00:0D47             
   27 00:0D47             ; ***************************************************************************************
   28 00:0D47             ;
   29 00:0D47             ;								Terminate system stuff
   30 00:0D47             ;
   31 00:0D47             ; ***************************************************************************************
   32 00:0D47             
   33 00:0D47             SYSTerminate:
   34 00:0D47             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0D47             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0D47             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0D47             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0D47             	ei
   39 00:0D47             	ret 										; and exit.
   40 00:0D47             
   41 00:0D47             _StackTemp84:									; temp var for TI84 only.
   42 00:0D47             	.dw 	0,0
   43 00:0D47             _IYTemp84:
   44 00:0D47             	.dw 	0,0		
   45 00:0D47             
   46 00:0D47             ; ***************************************************************************************
   47 00:0D47             ;
   48 00:0D47             ;								Print A character
   49 00:0D47             ;
   50 00:0D47             ; ***************************************************************************************
   51 00:0D47             
   52 00:0D47             SYSPrintChar:
   53 00:0D47             	push 	af 									; we stack everything including alt registers
   54 00:0D47             	push 	bc
   55 00:0D47             	push 	de
   56 00:0D47             	push 	hl
   57 00:0D47             	push 	ix
   58 00:0D47             	push 	iy
   59 00:0D47             	exx
   60 00:0D47             	push 	bc
   61 00:0D47             	push 	de
   62 00:0D47             	push 	hl
   63 00:0D47             
   64 00:0D47             	ld 		iy,(_IYTemp84)
   65 00:0D47             	call 	_PutC 								; print A as character
   66 00:0D47             	di
   67 00:0D47             	ld 		(_IYTemp84),iy
   68 00:0D47             
   69 00:0D47             	pop 	hl
   70 00:0D47             	pop 	de
   71 00:0D47             	pop 	bc
   72 00:0D47             	exx
   73 00:0D47             	pop 	iy
   74 00:0D47             	pop 	ix
   75 00:0D47             	pop 	hl
   76 00:0D47             	pop 	de
   77 00:0D47             	pop 	bc
   78 00:0D47             	pop 	af
   79 00:0D47             	ret		
   80 00:0D47             
   81 00:0D47             ; ***************************************************************************************
   82 00:0D47             ;
   83 00:0D47             ;									Print Newline
   84 00:0D47             ;
   85 00:0D47             ; ***************************************************************************************
   86 00:0D47             
   87 00:0D47             SYSPrintCRLF:
   88 00:0D47             	push 	af 									; we stack everything including alt registers
   89 00:0D47             	push 	bc
   90 00:0D47             	push 	de
   91 00:0D47             	push 	hl
   92 00:0D47             	push 	ix
   93 00:0D47             	push 	iy
   94 00:0D47             	exx
   95 00:0D47             	push 	bc
   96 00:0D47             	push 	de
   97 00:0D47             	push 	hl
   98 00:0D47             
   99 00:0D47             	ld 		iy,(_IYTemp84)
  100 00:0D47             	call 	_newline
  101 00:0D47             	di
  102 00:0D47             	ld 		(_IYTemp84),iy
  103 00:0D47             
  104 00:0D47             	pop 	hl
  105 00:0D47             	pop 	de
  106 00:0D47             	pop 	bc
  107 00:0D47             	exx
  108 00:0D47             	pop 	iy
  109 00:0D47             	pop 	ix
  110 00:0D47             	pop 	hl
  111 00:0D47             	pop 	de
  112 00:0D47             	pop 	bc
  113 00:0D47             	pop 	af
  114 00:0D47             	ret
  115 00:0D47             
  116 00:0D47             ; ***************************************************************************************
  117 00:0D47             ;
  118 00:0D47             ;									Get time into HL'HL
  119 00:0D47             ;
  120 00:0D47             ; ***************************************************************************************
  121 00:0D47             
  122 00:0D47             SYSGetTimer:
  123 00:0D47             	ld 		hl,$1234
  124 00:0D47             	exx
  125 00:0D47             	ld 		hl,$5678
  126 00:0D47             	exx
  127 00:0D47             	ret
  128 00:0D47             
  129 00:0D47             #endif
  130 00:0D47 -  -  -  -  
  131 00:0D47 -  -  -  -  ; ***************************************************************************************
  132 00:0D47 -  -  -  -  ;
  133 00:0D47 -  -  -  -  ;									Changes and Updates
  134 00:0D47 -  -  -  -  ;
  135 00:0D47 -  -  -  -  ; ***************************************************************************************
  136 00:0D47 -  -  -  -  ;
  137 00:0D47 -  -  -  -  ;		Date			Notes
  138 00:0D47 -  -  -  -  ;		==== 			=====
  139 00:0D47 -  -  -  -  ;
  140 00:0D47 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0D47 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0D47 -  -  -  -  ; ***************************************************************************************
    2 00:0D47 -  -  -  -  ; ***************************************************************************************
    3 00:0D47 -  -  -  -  ;
    4 00:0D47 -  -  -  -  ;		Name : 		basic.asm
    5 00:0D47 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D47 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D47 -  -  -  -  ;		Reviewed :	No
    8 00:0D47 -  -  -  -  ;		Purpose :	Main program.
    9 00:0D47 -  -  -  -  ;
   10 00:0D47 -  -  -  -  ; ***************************************************************************************
   11 00:0D47 -  -  -  -  ; ***************************************************************************************
   12 00:0D47 -  -  -  -  
   13 00:0D47 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 37 
              37 31 33 31 
              0D 80 1C 03 
              00 C2 A2 95 
              3F 0A 31 30 
              39 34 38 35 
              30 35 35 36 
              0D A3 8F 41 
              41 50 61 5F 
              7C 80 15 04 
              00 C2 9E 95 
              41 42 6F 65 
              79 42 A3 8F 
              42 7D 50 5A 
              46 7D 80 12 
              05 00 C2 9A 
              95 8A 41 59 
              75 4A 5B 68 
              A3 8F 8A 41 
              80 14 06 00 
              C2 8A 41 5B 
              61 47 52 54 
              8F 8A 41 5B 
              61 47 52 54 
              80 0E 07 00 
              C2 84 95 9F 
              89 47 A3 8F 
              41 42 80 13 
              08 00 C2 94 
              42 5D 71 7E 
              4D 60 8F 42 
              5D 71 7E 4D 
              60 80 10 09 
              00 C2 9C 96 
              95 41 58 A3 
              8F 3F 01 58 
              0D 80 14 0A 
              00 C2 8A 8A 
              41 77 55 7D 
              6C 66 8F 41 
              77 55 7D 6C 
              66 80 15 0B 
              00 C2 9E 95 
              42 4E 4A 65 
              60 59 A3 8F 
              41 71 75 5A 
              5F 66 80 28 
              0C 00 C2 96 
              95 9F 89 47 
              A3 8F 3F 19 
              42 43 44 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 1D 
              0D 00 C2 96 
              95 9F 89 52 
              A3 8F 3F 0E 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              14 0E 00 C2 
              8A 8A 41 72 
              78 40 47 58 
              8F 41 72 78 
              40 47 58 80 
              1C 0F 00 C2 
              A2 95 3F 0A 
              31 37 31 39 
              33 30 34 38 
              32 30 0D A3 
              8F 41 66 5E 
              68 49 74 80 
              13 10 00 C2 
              9D 95 3F 05 
              52 77 49 74 
              48 0D A3 8F 
              41 52 80 0E 
              11 00 C2 84 
              95 9F 89 4C 
              A3 8F 41 47 
              80 11 12 00 
              C2 9A 95 8A 
              5C 7B 56 4D 
              57 A3 8F 8A 
              41 80 1E 13 
              00 C2 A2 95 
              3F 0B 2D 31 
              35 36 39 39 
              30 32 37 30 
              36 0D A3 8F 
              8A 41 5D 64 
              6D 41 72 80 
              13 14 00 C2 
              83 95 9F 89 
              4D A3 8F 94 
              41 4B 52 64 
              65 48 80 16 
              15 00 C2 9D 
              95 3F 08 67 
              53 51 73 43 
              76 72 76 0D 
              A3 8F 41 67 
              80 1C 16 00 
              C2 A2 95 3F 
              0A 32 30 31 
              38 30 30 30 
              32 31 30 0D 
              A3 8F 41 78 
              52 43 75 52 
              80 0E 17 00 
              C2 84 95 9F 
              89 52 A3 8F 
              41 4D 80 13 
              18 00 C2 83 
              95 9F 89 4E 
              A3 8F 94 41 
              4C 52 74 69 
              49 80 14 19 
              00 C2 9E 95 
              43 48 47 68 
              64 7E A3 8F 
              77 78 57 5B 
              41 80 13 1A 
              00 C2 83 95 
              9F 89 4F A3 
              8F 94 41 4D 
              53 44 6D 4A 
              80 10 1B 00 
              C2 9A 95 41 
              6A 63 79 74 
              44 A3 8F 41 
              80 27 1C 00 
              C2 96 95 9F 
              89 48 A3 8F 
              3F 18 43 44 
              45 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              13 1D 00 C2 
              98 95 3F 06 
              45 43 43 77 
              4A 51 0D A3 
              8F 46 80 26 
              1E 00 C2 96 
              95 9F 89 49 
              A3 8F 3F 17 
              44 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 1F 1F 00 
              C2 9B 96 95 
              8A 41 43 69 
              5D 7F 7F A3 
              8F 3F 0B 2D 
              31 31 33 34 
              39 34 34 32 
              35 35 0D 80 
              10 20 00 C2 
              9C 96 95 41 
              4A A3 8F 3F 
              01 4A 0D 80 
              0E 21 00 C2 
              98 95 3F 01 
              4F 0D A3 8F 
              41 80 0E 22 
              00 C2 84 95 
              9F 89 52 A3 
              8F 41 4D 80 
              25 23 00 C2 
              96 95 9F 89 
              4A A3 8F 3F 
              16 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 10 24 00 
              C2 9C 96 95 
              41 40 A3 8F 
              3F 01 40 0D 
              80 10 25 00 
              C2 9C 96 95 
              41 51 A3 8F 
              3F 01 51 0D 
              80 14 26 00 
              C2 9E 95 43 
              4A 5F 76 56 
              7C A3 8F 75 
              60 49 69 43 
              80 29 27 00 
              C2 96 95 9F 
              89 46 A3 8F 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 11 28 
              00 C2 9A 95 
              8A 51 4B 5A 
              77 75 A3 8F 
              8A 41 80 11 
              29 00 C2 94 
              42 41 50 7C 
              51 8F 42 41 
              50 7C 51 80 
              0F 2A 00 C2 
              9A 95 71 61 
              44 59 47 A3 
              8F 41 80 10 
              2B 00 C2 9C 
              96 95 41 40 
              A3 8F 3F 01 
              40 0D 80 1C 
              2C 00 C2 A2 
              95 3F 0A 31 
              37 34 37 39 
              39 36 34 38 
              38 0D A3 8F 
              41 68 4C 44 
              7D 48 80 1C 
              2D 00 C2 9B 
              96 95 7D 4C 
              74 5E 72 A3 
              8F 3F 0A 31 
              30 32 36 37 
              37 30 38 36 
              36 0D 80 13 
              2E 00 C2 83 
              95 9F 89 51 
              A3 8F 94 41 
              4F 53 64 75 
              4C 80 12 2F 
              00 C2 8A 50 
              78 67 6E 45 
              8F 8A 50 78 
              67 6E 45 80 
              1B 30 00 C2 
              96 95 9F 89 
              54 A3 8F 3F 
              0C 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 12 
              31 00 C2 8A 
              62 47 72 7D 
              47 8F 8A 62 
              47 72 7D 47 
              80 12 32 00 
              C2 8A 48 57 
              60 43 50 8F 
              8A 48 57 60 
              43 50 80 12 
              33 00 C2 8A 
              8A 4D 64 51 
              53 4B 8F 4D 
              64 51 53 4B 
              80 10 34 00 
              C2 9C 96 95 
              41 4B A3 8F 
              3F 01 4B 0D 
              80 13 35 00 
              C2 99 95 51 
              57 40 58 6D 
              A3 8F 51 57 
              40 58 6D 80 
              1F 36 00 C2 
              9B 96 95 8A 
              41 6E 68 7E 
              65 79 A3 8F 
              3F 0B 2D 31 
              38 35 36 32 
              33 35 38 39 
              37 0D 80 1F 
              37 00 C2 9B 
              96 95 8A 41 
              52 55 48 43 
              4A A3 8F 3F 
              0B 2D 31 33 
              38 31 32 36 
              39 37 30 36 
              0D 80 1E 38 
              00 C2 A2 95 
              3F 0B 2D 31 
              34 34 32 31 
              33 37 32 37 
              39 0D A3 8F 
              8A 41 55 7D 
              54 52 7F 80 
              1C 39 00 C2 
              96 95 9F 89 
              53 A3 8F 3F 
              0D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              14 3A 00 C2 
              9E 95 5A 44 
              6F 7A 40 A3 
              8F 43 65 7B 
              50 45 7F 80 
              1D 3B 00 C2 
              9B 96 95 41 
              45 74 61 56 
              69 A3 8F 3F 
              0A 31 31 37 
              31 33 39 36 
              30 30 39 0D 
              80 0D 3C 00 
              C2 98 95 3F 
              00 0D A3 8F 
              40 80 11 3D 
              00 C2 9D 95 
              3F 03 73 4C 
              7A 0D A3 8F 
              41 73 80 12 
              3E 00 C2 8A 
              8A 66 5F 55 
              59 6C 8F 66 
              5F 55 59 6C 
              80 1C 3F 00 
              C2 A2 95 3F 
              0A 31 32 38 
              34 39 31 39 
              34 39 31 0D 
              A3 8F 41 4C 
              65 65 43 43 
              80 15 40 00 
              C2 9E 95 42 
              4D 5E 60 44 
              49 A3 8F 41 
              72 61 5F 7B 
              76 80 1C 41 
              00 C2 96 95 
              9F 89 53 A3 
              8F 3F 0D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 12 42 
              00 C2 9D 95 
              3F 04 49 5A 
              6E 73 0D A3 
              8F 41 49 80 
              12 43 00 C2 
              9A 95 8A 41 
              60 77 5E 67 
              7C A3 8F 8A 
              41 80 13 44 
              00 C2 94 43 
              4F 59 79 6A 
              72 8F 43 4F 
              59 79 6A 72 
              80 13 45 00 
              C2 83 95 9F 
              89 4E A3 8F 
              94 41 4C 52 
              74 69 49 80 
              28 46 00 C2 
              96 95 9F 89 
              47 A3 8F 3F 
              19 42 43 44 
              45 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              0E 47 00 C2 
              84 95 9F 89 
              48 A3 8F 41 
              43 80 13 48 
              00 C2 94 43 
              47 7D 61 4D 
              6F 8F 43 47 
              7D 61 4D 6F 
              80 10 49 00 
              C2 9C 96 95 
              41 43 A3 8F 
              3F 01 43 0D 
              80 1C 4A 00 
              C2 A2 95 3F 
              0A 31 37 36 
              31 37 30 36 
              33 34 38 0D 
              A3 8F 41 69 
              40 58 45 6C 
              80 10 4B 00 
              C2 9C 96 95 
              41 4C A3 8F 
              3F 01 4C 0D 
              80 13 4C 00 
              C2 99 95 5B 
              4F 42 74 7B 
              A3 8F 5B 4F 
              42 74 7B 80 
              23 4D 00 C2 
              96 95 9F 89 
              4C A3 8F 3F 
              14 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 0F 
              4E 00 C2 9A 
              95 41 6A 4F 
              55 79 A3 8F 
              41 80 10 4F 
              00 C2 9C 96 
              95 41 40 A3 
              8F 3F 01 40 
              0D 80 13 50 
              00 C2 99 95 
              68 58 64 6F 
              79 A3 8F 68 
              58 64 6F 79 
              80 11 51 00 
              C2 9A 95 8A 
              71 5A 54 6D 
              6F A3 8F 8A 
              41 80 15 52 
              00 C2 9E 95 
              41 72 47 50 
              62 7E A3 8F 
              42 4D 78 6F 
              5D 41 80 24 
              53 00 C2 96 
              95 9F 89 4B 
              A3 8F 3F 15 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 10 
              54 00 C2 9C 
              96 95 41 53 
              A3 8F 3F 01 
              53 0D 80 15 
              55 00 C2 9E 
              95 41 64 79 
              70 4D 43 A3 
              8F 42 5B 46 
              4F 72 7C 80 
              0D 56 00 C2 
              9D 95 3F 00 
              0D A3 8F 4D 
              80 1C 57 00 
              C2 A2 95 3F 
              0A 2D 31 39 
              31 30 32 35 
              30 37 31 0D 
              A3 8F 8A 4B 
              58 6C 7E 6F 
              80 10 58 00 
              C2 9C 96 95 
              41 5A A3 8F 
              3F 01 5A 0D 
              80 0D 59 00 
              C2 9D 95 3F 
              00 0D A3 8F 
              4D 80 1F 5A 
              00 C2 9B 96 
              95 8A 41 7A 
              4D 5F 45 74 
              A3 8F 3F 0B 
              2D 32 30 35 
              30 33 35 35 
              35 37 32 0D 
              80 0E 5B 00 
              C2 84 95 9F 
              89 4F A3 8F 
              41 4A 80 14 
              5C 00 C2 8A 
              8A 41 68 4A 
              7F 4A 54 8F 
              41 68 4A 7F 
              4A 54 80 16 
              5D 00 C2 9D 
              95 3F 08 47 
              5A 55 73 43 
              4D 59 58 0D 
              A3 8F 41 47 
              80 15 5E 00 
              C2 9E 95 41 
              69 45 49 78 
              6F A3 8F 42 
              56 7A 76 47 
              50 80 15 5F 
              00 C2 9E 95 
              42 4B 58 5C 
              48 61 A3 8F 
              41 74 67 63 
              77 5E 80 11 
              60 00 C2 9D 
              95 3F 03 61 
              73 69 0D A3 
              8F 41 61 80 
              14 61 00 C2 
              9E 95 79 44 
              57 4F 6F A3 
              8F 43 46 7B 
              68 70 50 80 
              1E 62 00 C2 
              96 95 9F 89 
              51 A3 8F 3F 
              0F 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 0E 63 
              00 C2 84 95 
              9F 89 50 A3 
              8F 41 4B 80 
              13 64 00 C2 
              98 95 3F 06 
              45 44 6F 4E 
              4E 78 0D A3 
              8F 46 80 1B 
              65 00 C2 9B 
              96 95 6B 40 
              7C 56 7B A3 
              8F 3F 09 37 
              32 31 36 36 
              37 35 31 35 
              0D 80 10 66 
              00 C2 9C 96 
              95 41 4C A3 
              8F 3F 01 4C 
              0D 80 13 67 
              00 C2 94 41 
              50 7E 76 7A 
              65 8F 41 50 
              7E 76 7A 65 
              80 10 68 00 
              C2 9D 95 3F 
              02 57 78 0D 
              A3 8F 41 57 
              80 13 69 00 
              C2 83 95 9F 
              89 4A A3 8F 
              94 41 48 51 
              74 59 45 80 
              10 6A 00 C2 
              9C 96 95 41 
              58 A3 8F 3F 
              01 58 0D 80 
              0E 6B 00 C2 
              84 95 9F 89 
              54 A3 8F 41 
              4F 80 14 6C 
              00 C2 99 95 
              8A 45 41 63 
              75 7E A3 8F 
              45 41 63 75 
              7E 80 14 6D 
              00 C2 99 95 
              8A 67 76 53 
              45 50 A3 8F 
              67 76 53 45 
              50 80 1B 6E 
              00 C2 9B 96 
              95 70 4A 45 
              77 41 A3 8F 
              3F 09 38 30 
              37 39 35 31 
              38 30 39 0D 
              80 0F 6F 00 
              C2 98 95 3F 
              02 63 43 0D 
              A3 8F 42 80 
              14 70 00 C2 
              9E 95 43 62 
              50 40 5E 78 
              A3 8F 5D 6F 
              7F 61 47 80 
              15 71 00 C2 
              9E 95 41 7B 
              72 70 58 55 
              A3 8F 42 44 
              4D 4F 67 6A 
              80 10 72 00 
              C2 9C 96 95 
              41 51 A3 8F 
              3F 01 51 0D 
              80 1D 73 00 
              C2 9B 96 95 
              41 77 6A 71 
              49 66 A3 8F 
              3F 0A 32 30 
              30 37 37 30 
              30 30 37 30 
              0D 80 29 74 
              00 C2 96 95 
              9F 89 46 A3 
              8F 3F 1A 41 
              42 43 44 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 1A 
              75 00 C2 A2 
              95 3F 09 37 
              34 37 32 34 
              31 39 31 32 
              0D A3 8F 6C 
              62 60 46 78 
              80 13 76 00 
              C2 94 43 53 
              4E 67 7E 6E 
              8F 43 53 4E 
              67 7E 6E 80 
              1D 77 00 C2 
              A2 95 3F 0B 
              2D 31 30 30 
              36 39 31 31 
              37 33 31 0D 
              A3 8F 8A 7C 
              41 44 43 73 
              80 0E 78 00 
              C2 84 95 9F 
              89 4D A3 8F 
              41 48 80 10 
              79 00 C2 9C 
              96 95 41 50 
              A3 8F 3F 01 
              50 0D 80 15 
              7A 00 C2 9E 
              95 41 52 41 
              70 4C 42 A3 
              8F 42 6D 7E 
              4F 73 7D 80 
              10 7B 00 C2 
              9C 96 95 41 
              42 A3 8F 3F 
              01 42 0D 80 
              0D 7C 00 C2 
              9D 95 3F 00 
              0D A3 8F 4D 
              80 24 7D 00 
              C2 96 95 9F 
              89 4B A3 8F 
              3F 15 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 10 7E 00 
              C2 98 95 3F 
              03 43 6E 6F 
              0D A3 8F 43 
              80 11 7F 00 
              C2 9A 95 8A 
              6D 78 6A 4D 
              4F A3 8F 8A 
              41 80 12 80 
              00 C2 98 95 
              3F 05 74 50 
              53 54 47 0D 
              A3 8F 45 80 
              13 81 00 C2 
              98 95 3F 06 
              6E 75 51 76 
              4D 4E 0D A3 
              8F 46 80 1C 
              82 00 C2 A2 
              95 3F 0A 2D 
              34 35 39 35 
              32 37 36 37 
              38 0D A3 8F 
              8A 5B 58 7D 
              57 7E 80 10 
              83 00 C2 9A 
              95 41 56 76 
              41 7C 7B A3 
              8F 41 80 10 
              84 00 C2 9C 
              96 95 41 53 
              A3 8F 3F 01 
              53 0D 80 1D 
              85 00 C2 96 
              95 9F 89 52 
              A3 8F 3F 0E 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              10 86 00 C2 
              9C 96 95 41 
              58 A3 8F 3F 
              01 58 0D 80 
              11 87 00 C2 
              9A 95 8A 56 
              42 48 6F 63 
              A3 8F 8A 41 
              80 0E 88 00 
              C2 84 95 9F 
              89 47 A3 8F 
              41 42 80 0E 
              89 00 C2 84 
              95 9F 89 4B 
              A3 8F 41 46 
              80 0E 8A 00 
              C2 84 95 9F 
              89 4B A3 8F 
              41 46 80 0E 
              8B 00 C2 84 
              95 9F 89 4C 
              A3 8F 41 47 
              80 11 8C 00 
              C2 98 95 3F 
              04 6B 6E 76 
              50 0D A3 8F 
              44 80 15 8D 
              00 C2 99 95 
              41 79 59 74 
              50 43 A3 8F 
              41 79 59 74 
              50 43 80 14 
              8E 00 C2 8A 
              41 7A 45 63 
              55 57 8F 8A 
              41 7A 45 63 
              55 57 80 28 
              8F 00 C2 96 
              95 9F 89 47 
              A3 8F 3F 19 
              42 43 44 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 11 
              90 00 C2 94 
              7C 5F 5D 5E 
              74 8F 7C 5F 
              5D 5E 74 80 
              1D 91 00 C2 
              9B 96 95 41 
              77 40 69 78 
              49 A3 8F 3F 
              0A 31 39 39 
              36 36 36 30 
              32 33 33 0D 
              80 13 92 00 
              C2 94 42 61 
              50 7D 75 6C 
              8F 42 61 50 
              7D 75 6C 80 
              13 93 00 C2 
              83 95 9F 89 
              53 A3 8F 94 
              41 51 54 44 
              7D 4E 80 13 
              94 00 C2 99 
              95 6E 5F 68 
              42 5A A3 8F 
              6E 5F 68 42 
              5A 80 13 95 
              00 C2 99 95 
              6A 46 50 7F 
              4F A3 8F 6A 
              46 50 7F 4F 
              80 13 96 00 
              C2 83 95 9F 
              89 4A A3 8F 
              94 41 48 51 
              74 59 45 80 
              10 97 00 C2 
              9D 95 3F 02 
              61 6E 0D A3 
              8F 41 61 80 
              0E 98 00 C2 
              84 95 9F 89 
              4D A3 8F 41 
              48 80 15 99 
              00 C2 9E 95 
              42 57 73 65 
              5C 78 A3 8F 
              41 68 4C 5A 
              63 47 80 14 
              9A 00 C2 9E 
              95 4D 42 48 
              4A 49 A3 8F 
              43 72 7D 77 
              75 76 80 11 
              9B 00 C2 94 
              76 4D 6D 74 
              7C 8F 76 4D 
              6D 74 7C 80 
              13 9C 00 C2 
              94 41 64 44 
              7C 6A 7B 8F 
              41 64 44 7C 
              6A 7B 80 14 
              9D 00 C2 8A 
              41 6D 5F 46 
              73 5E 8F 8A 
              41 6D 5F 46 
              73 5E 80 13 
              9E 00 C2 83 
              95 9F 89 46 
              A3 8F 94 41 
              44 50 74 49 
              41 80 0E 9F 
              00 C2 84 95 
              9F 89 47 A3 
              8F 41 42 80 
              0E A0 00 C2 
              84 95 9F 89 
              48 A3 8F 41 
              43 80 24 A1 
              00 C2 96 95 
              9F 89 4B A3 
              8F 3F 15 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 A2 
              00 C2 98 95 
              3F 07 5A 6D 
              6A 44 79 55 
              79 0D A3 8F 
              47 80 16 A3 
              00 C2 99 95 
              8A 41 7C 75 
              4B 64 54 A3 
              8F 41 7C 75 
              4B 64 54 80 
              16 A4 00 C2 
              9D 95 3F 08 
              7A 41 48 77 
              45 6F 59 52 
              0D A3 8F 41 
              7A 80 1F A5 
              00 C2 9B 96 
              95 8A 41 77 
              4D 60 79 51 
              A3 8F 3F 0B 
              2D 32 30 30 
              30 30 33 31 
              33 31 33 0D 
              80 0E A6 00 
              C2 84 95 9F 
              89 48 A3 8F 
              41 43 80 0E 
              A7 00 C2 84 
              95 9F 89 4D 
              A3 8F 41 48 
              80 13 A8 00 
              C2 83 95 9F 
              89 51 A3 8F 
              94 41 4F 53 
              64 75 4C 80 
              0E A9 00 C2 
              98 95 3F 01 
              5A 0D A3 8F 
              41 80 11 AA 
              00 C2 9D 95 
              3F 03 6A 43 
              48 0D A3 8F 
              41 6A 80 14 
              AB 00 C2 98 
              95 3F 07 79 
              6C 55 47 61 
              47 4B 0D A3 
              8F 47 80 13 
              AC 00 C2 94 
              42 75 67 40 
              4A 7F 8F 42 
              75 67 40 4A 
              7F 80 1F AD 
              00 C2 9B 96 
              95 8A 41 6F 
              5B 73 5C 45 
              A3 8F 3F 0B 
              2D 31 38 36 
              39 35 35 39 
              35 35 37 0D 
              80 0E AE 00 
              C2 84 95 9F 
              89 4B A3 8F 
              41 46 80 14 
              AF 00 C2 8A 
              41 40 50 6E 
              60 41 8F 8A 
              41 40 50 6E 
              60 41 80 1D 
              B0 00 C2 9B 
              96 95 41 68 
              50 70 67 78 
              A3 8F 3F 0A 
              31 37 34 39 
              32 32 33 39 
              32 38 0D 80 
              15 B1 00 C2 
              9D 95 3F 07 
              72 41 5A 55 
              74 66 59 0D 
              A3 8F 41 72 
              80 13 B2 00 
              C2 94 41 77 
              78 57 51 65 
              8F 41 77 78 
              57 51 65 80 
              13 B3 00 C2 
              83 95 9F 89 
              4B A3 8F 94 
              41 49 52 44 
              5D 46 80 13 
              B4 00 C2 94 
              43 64 58 63 
              66 59 8F 43 
              64 58 63 66 
              59 80 13 B5 
              00 C2 83 95 
              9F 89 4E A3 
              8F 94 41 4C 
              52 74 69 49 
              80 13 B6 00 
              C2 83 95 9F 
              89 54 A3 8F 
              94 41 52 54 
              55 41 4F 80 
              14 B7 00 C2 
              9E 95 71 5C 
              7B 40 59 A3 
              8F 43 4E 63 
              44 7F 66 80 
              0E B8 00 C2 
              84 95 9F 89 
              54 A3 8F 41 
              4F 80 14 B9 
              00 C2 8A 8A 
              41 55 57 4D 
              5D 60 8F 41 
              55 57 4D 5D 
              60 80 14 BA 
              00 C2 9E 95 
              43 73 43 48 
              61 79 A3 8F 
              4C 7C 77 5E 
              46 80 15 BB 
              00 C2 9E 95 
              42 70 71 71 
              4D 70 A3 8F 
              41 4F 4E 4E 
              72 4F 80 15 
              BC 00 C2 99 
              95 41 4A 49 
              5C 68 4A A3 
              8F 41 4A 49 
              5C 68 4A 80 
              14 BD 00 C2 
              98 95 3F 07 
              49 79 61 65 
              74 77 58 0D 
              A3 8F 47 80 
              11 BE 00 C2 
              98 95 3F 04 
              72 48 42 4B 
              0D A3 8F 44 
              80 15 BF 00 
              C2 9E 95 41 
              6E 46 7F 5F 
              6C A3 8F 42 
              51 79 40 60 
              53 80 1B C0 
              00 C2 9B 96 
              95 72 7A 51 
              62 5E A3 8F 
              3F 09 38 35 
              34 31 33 36 
              39 39 30 0D 
              80 0E C1 00 
              C2 84 95 9F 
              89 51 A3 8F 
              41 4C 80 1D 
              C2 00 C2 9B 
              96 95 8A 6C 
              58 5D 57 77 
              A3 8F 3F 0A 
              2D 37 34 34 
              36 30 39 32 
              37 31 0D 80 
              1D C3 00 C2 
              9B 96 95 8A 
              65 47 56 6D 
              59 A3 8F 3F 
              0A 2D 36 32 
              32 36 38 35 
              30 31 37 0D 
              80 11 C4 00 
              C2 9A 95 8A 
              60 5C 67 70 
              67 A3 8F 8A 
              41 80 1B C5 
              00 C2 9B 96 
              95 50 78 5D 
              55 66 A3 8F 
              3F 09 32 38 
              33 32 33 35 
              36 38 36 0D 
              80 25 C6 00 
              C2 96 95 9F 
              89 4A A3 8F 
              3F 16 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 1B C7 
              00 C2 96 95 
              9F 89 54 A3 
              8F 3F 0C 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 1B C8 00 
              C2 9B 96 95 
              57 7D 59 7E 
              50 A3 8F 3F 
              09 34 30 31 
              39 37 33 31 
              33 36 0D 80 
              0E C9 00 C2 
              84 95 9F 89 
              50 A3 8F 41 
              4B 80 11 CA 
              00 C2 9A 95 
              8A 5E 64 57 
              47 55 A3 8F 
              8A 41 80 15 
              CB 00 B9 3F 
              0D 4F 6B 20 
              53 65 65 64 
              20 37 37 31 
              33 31 0D 80 
              00 -  -  -  	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$37,$37,$31,$33,$31,$0d,$80,$1c,$03,$00,$c2,$a2,$95,$3f,$0a,$31,$30,$39,$34,$38,$35,$30,$35,$35,$36,$0d,$a3,$8f,$41,$41,$50,$61,$5f,$7c,$80,$15,$04,$00,$c2,$9e,$95,$41,$42,$6f,$65,$79,$42,$a3,$8f,$42,$7d,$50,$5a,$46,$7d,$80,$12,$05,$00,$c2,$9a,$95,$8a,$41,$59,$75,$4a,$5b,$68,$a3,$8f,$8a,$41,$80,$14,$06,$00,$c2,$8a,$41,$5b,$61,$47,$52,$54,$8f,$8a,$41,$5b,$61,$47,$52,$54,$80,$0e,$07,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$13,$08,$00,$c2,$94,$42,$5d,$71,$7e,$4d,$60,$8f,$42,$5d,$71,$7e,$4d,$60,$80,$10,$09,$00,$c2,$9c,$96,$95,$41,$58,$a3,$8f,$3f,$01,$58,$0d,$80,$14,$0a,$00,$c2,$8a,$8a,$41,$77,$55,$7d,$6c,$66,$8f,$41,$77,$55,$7d,$6c,$66,$80,$15,$0b,$00,$c2,$9e,$95,$42,$4e,$4a,$65,$60,$59,$a3,$8f,$41,$71,$75,$5a,$5f,$66,$80,$28,$0c,$00,$c2,$96,$95,$9f,$89,$47,$a3,$8f,$3f,$19,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1d,$0d,$00,$c2,$96,$95,$9f,$89,$52,$a3,$8f,$3f,$0e,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$0e,$00,$c2,$8a,$8a,$41,$72,$78,$40,$47,$58,$8f,$41,$72,$78,$40,$47,$58,$80,$1c,$0f,$00,$c2,$a2,$95,$3f,$0a,$31,$37,$31,$39,$33,$30,$34,$38,$32,$30,$0d,$a3,$8f,$41,$66,$5e,$68,$49,$74,$80,$13,$10,$00,$c2,$9d,$95,$3f,$05,$52,$77,$49,$74,$48,$0d,$a3,$8f,$41,$52,$80,$0e,$11,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$11,$12,$00,$c2,$9a,$95,$8a,$5c,$7b,$56,$4d,$57,$a3,$8f,$8a,$41,$80,$1e,$13,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$35,$36,$39,$39,$30,$32,$37,$30,$36,$0d,$a3,$8f,$8a,$41,$5d,$64,$6d,$41,$72,$80,$13,$14,$00,$c2,$83,$95,$9f,$89,$4d,$a3,$8f,$94,$41,$4b,$52,$64,$65,$48,$80,$16,$15,$00,$c2,$9d,$95,$3f,$08,$67,$53,$51,$73,$43,$76,$72,$76,$0d,$a3,$8f,$41,$67,$80,$1c,$16,$00,$c2,$a2,$95,$3f,$0a,$32,$30,$31,$38,$30,$30,$30,$32,$31,$30,$0d,$a3,$8f,$41,$78,$52,$43,$75,$52,$80,$0e,$17,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$13,$18,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$14,$19,$00,$c2,$9e,$95,$43,$48,$47,$68,$64,$7e,$a3,$8f,$77,$78,$57,$5b,$41,$80,$13,$1a,$00,$c2,$83,$95,$9f,$89,$4f,$a3,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$10,$1b,$00,$c2,$9a,$95,$41,$6a,$63,$79,$74,$44,$a3,$8f,$41,$80,$27,$1c,$00,$c2,$96,$95,$9f,$89,$48,$a3,$8f,$3f,$18,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$1d,$00,$c2,$98,$95,$3f,$06,$45,$43,$43,$77,$4a,$51,$0d,$a3,$8f,$46,$80,$26,$1e,$00,$c2,$96,$95,$9f,$89,$49,$a3,$8f,$3f,$17,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1f,$1f,$00,$c2,$9b,$96,$95,$8a,$41,$43,$69,$5d,$7f,$7f,$a3,$8f,$3f,$0b,$2d,$31,$31,$33,$34,$39,$34,$34,$32,$35,$35,$0d,$80,$10,$20,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$0e,$21,$00,$c2,$98,$95,$3f,$01,$4f,$0d,$a3,$8f,$41,$80,$0e,$22,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$25,$23,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$24,$00,$c2,$9c,$96,$95,$41,$40,$a3,$8f,$3f,$01,$40,$0d,$80,$10,$25,$00,$c2,$9c,$96,$95,$41,$51,$a3,$8f,$3f,$01,$51,$0d,$80,$14,$26,$00,$c2,$9e,$95,$43,$4a,$5f,$76,$56,$7c,$a3,$8f,$75,$60,$49,$69,$43,$80,$29,$27,$00,$c2,$96,$95,$9f,$89,$46,$a3,$8f,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$11,$28,$00,$c2,$9a,$95,$8a,$51,$4b,$5a,$77,$75,$a3,$8f,$8a,$41,$80,$11,$29,$00,$c2,$94,$42,$41,$50,$7c,$51,$8f,$42,$41,$50,$7c,$51,$80,$0f,$2a,$00,$c2,$9a,$95,$71,$61,$44,$59,$47,$a3,$8f,$41,$80,$10,$2b,$00,$c2,$9c,$96,$95,$41,$40,$a3,$8f,$3f,$01,$40,$0d,$80,$1c,$2c,$00,$c2,$a2,$95,$3f,$0a,$31,$37,$34,$37,$39,$39,$36,$34,$38,$38,$0d,$a3,$8f,$41,$68,$4c,$44,$7d,$48,$80,$1c,$2d,$00,$c2,$9b,$96,$95,$7d,$4c,$74,$5e,$72,$a3,$8f,$3f,$0a,$31,$30,$32,$36,$37,$37,$30,$38,$36,$36,$0d,$80,$13,$2e,$00,$c2,$83,$95,$9f,$89,$51,$a3,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$12,$2f,$00,$c2,$8a,$50,$78,$67,$6e,$45,$8f,$8a,$50,$78,$67,$6e,$45,$80,$1b,$30,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$31,$00,$c2,$8a,$62,$47,$72,$7d,$47,$8f,$8a,$62,$47,$72,$7d,$47,$80,$12,$32,$00,$c2,$8a,$48,$57,$60,$43,$50,$8f,$8a,$48,$57,$60,$43,$50,$80,$12,$33,$00,$c2,$8a,$8a,$4d,$64,$51,$53,$4b,$8f,$4d,$64,$51,$53,$4b,$80,$10,$34,$00,$c2,$9c,$96,$95,$41,$4b,$a3,$8f,$3f,$01,$4b,$0d,$80,$13,$35,$00,$c2,$99,$95,$51,$57,$40,$58,$6d,$a3,$8f,$51,$57,$40,$58,$6d,$80,$1f,$36,$00,$c2,$9b,$96,$95,$8a,$41,$6e,$68,$7e,$65,$79,$a3,$8f,$3f,$0b,$2d,$31,$38,$35,$36,$32,$33,$35,$38,$39,$37,$0d,$80,$1f,$37,$00,$c2,$9b,$96,$95,$8a,$41,$52,$55,$48,$43,$4a,$a3,$8f,$3f,$0b,$2d,$31,$33,$38,$31,$32,$36,$39,$37,$30,$36,$0d,$80,$1e,$38,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$34,$34,$32,$31,$33,$37,$32,$37,$39,$0d,$a3,$8f,$8a,$41,$55,$7d,$54,$52,$7f,$80,$1c,$39,$00,$c2,$96,$95,$9f,$89,$53,$a3,$8f,$3f,$0d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$3a,$00,$c2,$9e,$95,$5a,$44,$6f,$7a,$40,$a3,$8f,$43,$65,$7b,$50,$45,$7f,$80,$1d,$3b,$00,$c2,$9b,$96,$95,$41,$45,$74,$61,$56,$69,$a3,$8f,$3f,$0a,$31,$31,$37,$31,$33,$39,$36,$30,$30,$39,$0d,$80,$0d,$3c,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$11,$3d,$00,$c2,$9d,$95,$3f,$03,$73,$4c,$7a,$0d,$a3,$8f,$41,$73,$80,$12,$3e,$00,$c2,$8a,$8a,$66,$5f,$55,$59,$6c,$8f,$66,$5f,$55,$59,$6c,$80,$1c,$3f,$00,$c2,$a2,$95,$3f,$0a,$31,$32,$38,$34,$39,$31,$39,$34,$39,$31,$0d,$a3,$8f,$41,$4c,$65,$65,$43,$43,$80,$15,$40,$00,$c2,$9e,$95,$42,$4d,$5e,$60,$44,$49,$a3,$8f,$41,$72,$61,$5f,$7b,$76,$80,$1c,$41,$00,$c2,$96,$95,$9f,$89,$53,$a3,$8f,$3f,$0d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$42,$00,$c2,$9d,$95,$3f,$04,$49,$5a,$6e,$73,$0d,$a3,$8f,$41,$49,$80,$12,$43,$00,$c2,$9a,$95,$8a,$41,$60,$77,$5e,$67,$7c,$a3,$8f,$8a,$41,$80,$13,$44,$00,$c2,$94,$43,$4f,$59,$79,$6a,$72,$8f,$43,$4f,$59,$79,$6a,$72,$80,$13,$45,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$28,$46,$00,$c2,$96,$95,$9f,$89,$47,$a3,$8f,$3f,$19,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$47,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$13,$48,$00,$c2,$94,$43,$47,$7d,$61,$4d,$6f,$8f,$43,$47,$7d,$61,$4d,$6f,$80,$10,$49,$00,$c2,$9c,$96,$95,$41,$43,$a3,$8f,$3f,$01,$43,$0d,$80,$1c,$4a,$00,$c2,$a2,$95,$3f,$0a,$31,$37,$36,$31,$37,$30,$36,$33,$34,$38,$0d,$a3,$8f,$41,$69,$40,$58,$45,$6c,$80,$10,$4b,$00,$c2,$9c,$96,$95,$41,$4c,$a3,$8f,$3f,$01,$4c,$0d,$80,$13,$4c,$00,$c2,$99,$95,$5b,$4f,$42,$74,$7b,$a3,$8f,$5b,$4f,$42,$74,$7b,$80,$23,$4d,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0f,$4e,$00,$c2,$9a,$95,$41,$6a,$4f,$55,$79,$a3,$8f,$41,$80,$10,$4f,$00,$c2,$9c,$96,$95,$41,$40,$a3,$8f,$3f,$01,$40,$0d,$80,$13,$50,$00,$c2,$99,$95,$68,$58,$64,$6f,$79,$a3,$8f,$68,$58,$64,$6f,$79,$80,$11,$51,$00,$c2,$9a,$95,$8a,$71,$5a,$54,$6d,$6f,$a3,$8f,$8a,$41,$80,$15,$52,$00,$c2,$9e,$95,$41,$72,$47,$50,$62,$7e,$a3,$8f,$42,$4d,$78,$6f,$5d,$41,$80,$24,$53,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$54,$00,$c2,$9c,$96,$95,$41,$53,$a3,$8f,$3f,$01,$53,$0d,$80,$15,$55,$00,$c2,$9e,$95,$41,$64,$79,$70,$4d,$43,$a3,$8f,$42,$5b,$46,$4f,$72,$7c,$80,$0d,$56,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$1c,$57,$00,$c2,$a2,$95,$3f,$0a,$2d,$31,$39,$31,$30,$32,$35,$30,$37,$31,$0d,$a3,$8f,$8a,$4b,$58,$6c,$7e,$6f,$80,$10,$58,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$0d,$59,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$1f,$5a,$00,$c2,$9b,$96,$95,$8a,$41,$7a,$4d,$5f,$45,$74,$a3,$8f,$3f,$0b,$2d,$32,$30,$35,$30,$33,$35,$35,$35,$37,$32,$0d,$80,$0e,$5b,$00,$c2,$84,$95,$9f,$89,$4f,$a3,$8f,$41,$4a,$80,$14,$5c,$00,$c2,$8a,$8a,$41,$68,$4a,$7f,$4a,$54,$8f,$41,$68,$4a,$7f,$4a,$54,$80,$16,$5d,$00,$c2,$9d,$95,$3f,$08,$47,$5a,$55,$73,$43,$4d,$59,$58,$0d,$a3,$8f,$41,$47,$80,$15,$5e,$00,$c2,$9e,$95,$41,$69,$45,$49,$78,$6f,$a3,$8f,$42,$56,$7a,$76,$47,$50,$80,$15,$5f,$00,$c2,$9e,$95,$42,$4b,$58,$5c,$48,$61,$a3,$8f,$41,$74,$67,$63,$77,$5e,$80,$11,$60,$00,$c2,$9d,$95,$3f,$03,$61,$73,$69,$0d,$a3,$8f,$41,$61,$80,$14,$61,$00,$c2,$9e,$95,$79,$44,$57,$4f,$6f,$a3,$8f,$43,$46,$7b,$68,$70,$50,$80,$1e,$62,$00,$c2,$96,$95,$9f,$89,$51,$a3,$8f,$3f,$0f,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$63,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$13,$64,$00,$c2,$98,$95,$3f,$06,$45,$44,$6f,$4e,$4e,$78,$0d,$a3,$8f,$46,$80,$1b,$65,$00,$c2,$9b,$96,$95,$6b,$40,$7c,$56,$7b,$a3,$8f,$3f,$09,$37,$32,$31,$36,$36,$37,$35,$31,$35,$0d,$80,$10,$66,$00,$c2,$9c,$96,$95,$41,$4c,$a3,$8f,$3f,$01,$4c,$0d,$80,$13,$67,$00,$c2,$94,$41,$50,$7e,$76,$7a,$65,$8f,$41,$50,$7e,$76,$7a,$65,$80,$10,$68,$00,$c2,$9d,$95,$3f,$02,$57,$78,$0d,$a3,$8f,$41,$57,$80,$13,$69,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$10,$6a,$00,$c2,$9c,$96,$95,$41,$58,$a3,$8f,$3f,$01,$58,$0d,$80,$0e,$6b,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$14,$6c,$00,$c2,$99,$95,$8a,$45,$41,$63,$75,$7e,$a3,$8f,$45,$41,$63,$75,$7e,$80,$14,$6d,$00,$c2,$99,$95,$8a,$67,$76,$53,$45,$50,$a3,$8f,$67,$76,$53,$45,$50,$80,$1b,$6e,$00,$c2,$9b,$96,$95,$70,$4a,$45,$77,$41,$a3,$8f,$3f,$09,$38,$30,$37,$39,$35,$31,$38,$30,$39,$0d,$80,$0f,$6f,$00,$c2,$98,$95,$3f,$02,$63,$43,$0d,$a3,$8f,$42,$80,$14,$70,$00,$c2,$9e,$95,$43,$62,$50,$40,$5e,$78,$a3,$8f,$5d,$6f,$7f,$61,$47,$80,$15,$71,$00,$c2,$9e,$95,$41,$7b,$72,$70,$58,$55,$a3,$8f,$42,$44,$4d,$4f,$67,$6a,$80,$10,$72,$00,$c2,$9c,$96,$95,$41,$51,$a3,$8f,$3f,$01,$51,$0d,$80,$1d,$73,$00,$c2,$9b,$96,$95,$41,$77,$6a,$71,$49,$66,$a3,$8f,$3f,$0a,$32,$30,$30,$37,$37,$30,$30,$30,$37,$30,$0d,$80,$29,$74,$00,$c2,$96,$95,$9f,$89,$46,$a3,$8f,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1a,$75,$00,$c2,$a2,$95,$3f,$09,$37,$34,$37,$32,$34,$31,$39,$31,$32,$0d,$a3,$8f,$6c,$62,$60,$46,$78,$80,$13,$76,$00,$c2,$94,$43,$53,$4e,$67,$7e,$6e,$8f,$43,$53,$4e,$67,$7e,$6e,$80,$1d,$77,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$30,$30,$36,$39,$31,$31,$37,$33,$31,$0d,$a3,$8f,$8a,$7c,$41,$44,$43,$73,$80,$0e,$78,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$10,$79,$00,$c2,$9c,$96,$95,$41,$50,$a3,$8f,$3f,$01,$50,$0d,$80,$15,$7a,$00,$c2,$9e,$95,$41,$52,$41,$70,$4c,$42,$a3,$8f,$42,$6d,$7e,$4f,$73,$7d,$80,$10,$7b,$00,$c2,$9c,$96,$95,$41,$42,$a3,$8f,$3f,$01,$42,$0d,$80,$0d,$7c,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$24,$7d,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$7e,$00,$c2,$98,$95,$3f,$03,$43,$6e,$6f,$0d,$a3,$8f,$43,$80,$11,$7f,$00,$c2,$9a,$95,$8a,$6d,$78,$6a,$4d,$4f,$a3,$8f,$8a,$41,$80,$12,$80,$00,$c2,$98,$95,$3f,$05,$74,$50,$53,$54,$47,$0d,$a3,$8f,$45,$80,$13,$81,$00,$c2,$98,$95,$3f,$06,$6e,$75,$51,$76,$4d,$4e,$0d,$a3,$8f,$46,$80,$1c,$82,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$35,$39,$35,$32,$37,$36,$37,$38,$0d,$a3,$8f,$8a,$5b,$58,$7d,$57,$7e,$80,$10,$83,$00,$c2,$9a,$95,$41,$56,$76,$41,$7c,$7b,$a3,$8f,$41,$80,$10,$84,$00,$c2,$9c,$96,$95,$41,$53,$a3,$8f,$3f,$01,$53,$0d,$80,$1d,$85,$00,$c2,$96,$95,$9f,$89,$52,$a3,$8f,$3f,$0e,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$86,$00,$c2,$9c,$96,$95,$41,$58,$a3,$8f,$3f,$01,$58,$0d,$80,$11,$87,$00,$c2,$9a,$95,$8a,$56,$42,$48,$6f,$63,$a3,$8f,$8a,$41,$80,$0e,$88,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$0e,$89,$00,$c2,$84,$95,$9f,$89,$4b,$a3,$8f,$41,$46,$80,$0e,$8a,$00,$c2,$84,$95,$9f,$89,$4b,$a3,$8f,$41,$46,$80,$0e,$8b,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$11,$8c,$00,$c2,$98,$95,$3f,$04,$6b,$6e,$76,$50,$0d,$a3,$8f,$44,$80,$15,$8d,$00,$c2,$99,$95,$41,$79,$59,$74,$50,$43,$a3,$8f,$41,$79,$59,$74,$50,$43,$80,$14,$8e,$00,$c2,$8a,$41,$7a,$45,$63,$55,$57,$8f,$8a,$41,$7a,$45,$63,$55,$57,$80,$28,$8f,$00,$c2,$96,$95,$9f,$89,$47,$a3,$8f,$3f,$19,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$11,$90,$00,$c2,$94,$7c,$5f,$5d,$5e,$74,$8f,$7c,$5f,$5d,$5e,$74,$80,$1d,$91,$00,$c2,$9b,$96,$95,$41,$77,$40,$69,$78,$49,$a3,$8f,$3f,$0a,$31,$39,$39,$36,$36,$36,$30,$32,$33,$33,$0d,$80,$13,$92,$00,$c2,$94,$42,$61,$50,$7d,$75,$6c,$8f,$42,$61,$50,$7d,$75,$6c,$80,$13,$93,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$94,$00,$c2,$99,$95,$6e,$5f,$68,$42,$5a,$a3,$8f,$6e,$5f,$68,$42,$5a,$80,$13,$95,$00,$c2,$99,$95,$6a,$46,$50,$7f,$4f,$a3,$8f,$6a,$46,$50,$7f,$4f,$80,$13,$96,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$10,$97,$00,$c2,$9d,$95,$3f,$02,$61,$6e,$0d,$a3,$8f,$41,$61,$80,$0e,$98,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$15,$99,$00,$c2,$9e,$95,$42,$57,$73,$65,$5c,$78,$a3,$8f,$41,$68,$4c,$5a,$63,$47,$80,$14,$9a,$00,$c2,$9e,$95,$4d,$42,$48,$4a,$49,$a3,$8f,$43,$72,$7d,$77,$75,$76,$80,$11,$9b,$00,$c2,$94,$76,$4d,$6d,$74,$7c,$8f,$76,$4d,$6d,$74,$7c,$80,$13,$9c,$00,$c2,$94,$41,$64,$44,$7c,$6a,$7b,$8f,$41,$64,$44,$7c,$6a,$7b,$80,$14,$9d,$00,$c2,$8a,$41,$6d,$5f,$46,$73,$5e,$8f,$8a,$41,$6d,$5f,$46,$73,$5e,$80,$13,$9e,$00,$c2,$83,$95,$9f,$89,$46,$a3,$8f,$94,$41,$44,$50,$74,$49,$41,$80,$0e,$9f,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$0e,$a0,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$24,$a1,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$a2,$00,$c2,$98,$95,$3f,$07,$5a,$6d,$6a,$44,$79,$55,$79,$0d,$a3,$8f,$47,$80,$16,$a3,$00,$c2,$99,$95,$8a,$41,$7c,$75,$4b,$64,$54,$a3,$8f,$41,$7c,$75,$4b,$64,$54,$80,$16,$a4,$00,$c2,$9d,$95,$3f,$08,$7a,$41,$48,$77,$45,$6f,$59,$52,$0d,$a3,$8f,$41,$7a,$80,$1f,$a5,$00,$c2,$9b,$96,$95,$8a,$41,$77,$4d,$60,$79,$51,$a3,$8f,$3f,$0b,$2d,$32,$30,$30,$30,$30,$33,$31,$33,$31,$33,$0d,$80,$0e,$a6,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$0e,$a7,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$13,$a8,$00,$c2,$83,$95,$9f,$89,$51,$a3,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$0e,$a9,$00,$c2,$98,$95,$3f,$01,$5a,$0d,$a3,$8f,$41,$80,$11,$aa,$00,$c2,$9d,$95,$3f,$03,$6a,$43,$48,$0d,$a3,$8f,$41,$6a,$80,$14,$ab,$00,$c2,$98,$95,$3f,$07,$79,$6c,$55,$47,$61,$47,$4b,$0d,$a3,$8f,$47,$80,$13,$ac,$00,$c2,$94,$42,$75,$67,$40,$4a,$7f,$8f,$42,$75,$67,$40,$4a,$7f,$80,$1f,$ad,$00,$c2,$9b,$96,$95,$8a,$41,$6f,$5b,$73,$5c,$45,$a3,$8f,$3f,$0b,$2d,$31,$38,$36,$39,$35,$35,$39,$35,$35,$37,$0d,$80,$0e,$ae,$00,$c2,$84,$95,$9f,$89,$4b,$a3,$8f,$41,$46,$80,$14,$af,$00,$c2,$8a,$41,$40,$50,$6e,$60,$41,$8f,$8a,$41,$40,$50,$6e,$60,$41,$80,$1d,$b0,$00,$c2,$9b,$96,$95,$41,$68,$50,$70,$67,$78,$a3,$8f,$3f,$0a,$31,$37,$34,$39,$32,$32,$33,$39,$32,$38,$0d,$80,$15,$b1,$00,$c2,$9d,$95,$3f,$07,$72,$41,$5a,$55,$74,$66,$59,$0d,$a3,$8f,$41,$72,$80,$13,$b2,$00,$c2,$94,$41,$77,$78,$57,$51,$65,$8f,$41,$77,$78,$57,$51,$65,$80,$13,$b3,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$13,$b4,$00,$c2,$94,$43,$64,$58,$63,$66,$59,$8f,$43,$64,$58,$63,$66,$59,$80,$13,$b5,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$13,$b6,$00,$c2,$83,$95,$9f,$89,$54,$a3,$8f,$94,$41,$52,$54,$55,$41,$4f,$80,$14,$b7,$00,$c2,$9e,$95,$71,$5c,$7b,$40,$59,$a3,$8f,$43,$4e,$63,$44,$7f,$66,$80,$0e,$b8,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$14,$b9,$00,$c2,$8a,$8a,$41,$55,$57,$4d,$5d,$60,$8f,$41,$55,$57,$4d,$5d,$60,$80,$14,$ba,$00,$c2,$9e,$95,$43,$73,$43,$48,$61,$79,$a3,$8f,$4c,$7c,$77,$5e,$46,$80,$15,$bb,$00,$c2,$9e,$95,$42,$70,$71,$71,$4d,$70,$a3,$8f,$41,$4f,$4e,$4e,$72,$4f,$80,$15,$bc,$00,$c2,$99,$95,$41,$4a,$49,$5c,$68,$4a,$a3,$8f,$41,$4a,$49,$5c,$68,$4a,$80,$14,$bd,$00,$c2,$98,$95,$3f,$07,$49,$79,$61,$65,$74,$77,$58,$0d,$a3,$8f,$47,$80,$11,$be,$00,$c2,$98,$95,$3f,$04,$72,$48,$42,$4b,$0d,$a3,$8f,$44,$80,$15,$bf,$00,$c2,$9e,$95,$41,$6e,$46,$7f,$5f,$6c,$a3,$8f,$42,$51,$79,$40,$60,$53,$80,$1b,$c0,$00,$c2,$9b,$96,$95,$72,$7a,$51,$62,$5e,$a3,$8f,$3f,$09,$38,$35,$34,$31,$33,$36,$39,$39,$30,$0d,$80,$0e,$c1,$00,$c2,$84,$95,$9f,$89,$51,$a3,$8f,$41,$4c,$80,$1d,$c2,$00,$c2,$9b,$96,$95,$8a,$6c,$58,$5d,$57,$77,$a3,$8f,$3f,$0a,$2d,$37,$34,$34,$36,$30,$39,$32,$37,$31,$0d,$80,$1d,$c3,$00,$c2,$9b,$96,$95,$8a,$65,$47,$56,$6d,$59,$a3,$8f,$3f,$0a,$2d,$36,$32,$32,$36,$38,$35,$30,$31,$37,$0d,$80,$11,$c4,$00,$c2,$9a,$95,$8a,$60,$5c,$67,$70,$67,$a3,$8f,$8a,$41,$80,$1b,$c5,$00,$c2,$9b,$96,$95,$50,$78,$5d,$55,$66,$a3,$8f,$3f,$09,$32,$38,$33,$32,$33,$35,$36,$38,$36,$0d,$80,$25,$c6,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1b,$c7,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1b,$c8,$00,$c2,$9b,$96,$95,$57,$7d,$59,$7e,$50,$a3,$8f,$3f,$09,$34,$30,$31,$39,$37,$33,$31,$33,$36,$0d,$80,$0e,$c9,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$11,$ca,$00,$c2,$9a,$95,$8a,$5e,$64,$57,$47,$55,$a3,$8f,$8a,$41,$80,$15,$cb,$00,$b9,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$37,$37,$31,$33,$31,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:20B9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:30B9 -  -  -  -  EndTestInstance:
   18 00:30B9 -  -  -  -  		
   19 00:30B9 -  -  -  -  ; ***************************************************************************************
   20 00:30B9 -  -  -  -  ;
   21 00:30B9 -  -  -  -  ;									Changes and Updates
   22 00:30B9 -  -  -  -  ;
   23 00:30B9 -  -  -  -  ; ***************************************************************************************
   24 00:30B9 -  -  -  -  ;
   25 00:30B9 -  -  -  -  ;		Date			Notes
   26 00:30B9 -  -  -  -  ;		==== 			=====
   27 00:30B9 -  -  -  -  ;
   28 00:30B9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:30B9 -  -  -  -  FinalAddress:
