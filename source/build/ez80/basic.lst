    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ac ; repeat
   54 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ad ; until
   55 00:0000 -  -  -  -  #define KWD_IF                              	$00ae ; if
   56 00:0000 -  -  -  -  #define KWD_THEN                            	$00af ; then
   57 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b0 ; else
   58 00:0000 -  -  -  -  #define KWD_FOR                             	$00b1 ; for
   59 00:0000 -  -  -  -  #define KWD_TO                              	$00b2 ; to
   60 00:0000 -  -  -  -  #define KWD_STEP                            	$00b3 ; step
   61 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b4 ; next
   62 00:0000 -  -  -  -  #define KWD_DEF                             	$00b5 ; def
   63 00:0000 -  -  -  -  #define KWD_PROC                            	$00b6 ; proc
   64 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b7 ; endproc
   65 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b8 ; gosub
   66 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b9 ; return
   67 00:0000 -  -  -  -  #define KWD_GOTO                            	$00ba ; goto
   68 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bb ; local
   69 00:0000 -  -  -  -  #define KWD_DIM                             	$00bc ; dim
   70 00:0000 -  -  -  -  #define KWD_REM                             	$00bd ; rem
   71 00:0000 -  -  -  -  #define KWD_LET                             	$00be ; let
   72 00:0000 -  -  -  -  #define KWD_VDU                             	$00bf ; vdu
   73 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c0 ; print
   74 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c1 ; load
   75 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c2 ; save
   76 00:0000 -  -  -  -  #define KWD_LIST                            	$00c3 ; list
   77 00:0000 -  -  -  -  #define KWD_NEW                             	$00c4 ; new
   78 00:0000 -  -  -  -  #define KWD_RUN                             	$00c5 ; run
   79 00:0000 -  -  -  -  #define KWD_READ                            	$00c6 ; read
   80 00:0000 -  -  -  -  #define KWD_DATA                            	$00c7 ; data
   81 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c8 ; restore
   82 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c9 ; assert
   83 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00ca ; clear
   84 00:0000 -  -  -  -  #define KWD_END                             	$00cb ; end
   85 00:0000 -  -  -  -  #define KWD_STOP                            	$00cc ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD 6C 0E 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 4F 20 00 		ld 		hl,EndTestInstance
   46 00:000C CD 88 08 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 60 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 57 02 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD 6E 0E 00 		call 	SYSPrintChar
   56 00:0020 CD 6D 0E 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 05 C3 14 
              03 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 06 C3 14 
              03 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  		
   78 00:005C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  
   81 00:0060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:0060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:0066 -  -  -  -  
   84 00:0066 -  -  -  -  AConvert: 									; used for address conversions.
   85 00:0066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006C -  -  -  -  		
   87 00:006C -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:006C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:007C -  -  -  -  
   90 00:007C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:007C 00 00 -  -  		.dw 	0
   92 00:007E -  -  -  -  
   93 00:007E -  -  -  -  ; ***************************************************************************************
   94 00:007E -  -  -  -  ;
   95 00:007E -  -  -  -  ;									Variable Information
   96 00:007E -  -  -  -  ;
   97 00:007E -  -  -  -  ; ***************************************************************************************
   98 00:007E -  -  -  -  
   99 00:007E -  -  -  -  VarNameStart: 								; first byte of name
  100 00:007E 00 00 00 00 		.dw 	0,0
  101 00:0082 -  -  -  -  VarHash: 									; name hash value
  102 00:0082 00 00 -  -  		.dw 	0		
  103 00:0084 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:0084 00 00 00 00 		.dw 	0,0
  105 00:0088 -  -  -  -  		
  106 00:0088 -  -  -  -  ; ***************************************************************************************
  107 00:0088 -  -  -  -  ;
  108 00:0088 -  -  -  -  ;										  Buffers
  109 00:0088 -  -  -  -  ;
  110 00:0088 -  -  -  -  ; ***************************************************************************************
  111 00:0088 -  -  -  -  
  112 00:0088 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:0088 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:0098 -  -  -  -  
  115 00:0098 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:0098 00 00 -  -  		.dw 	0
  117 00:009A -  -  -  -  
  118 00:009A -  -  -  -  ConvertBuffer: 								; general usage
  119 00:009A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:00DA -  -  -  -  
  121 00:00DA -  -  -  -  ; ***************************************************************************************
  122 00:00DA -  -  -  -  ;
  123 00:00DA -  -  -  -  ;									Changes and Updates
  124 00:00DA -  -  -  -  ;
  125 00:00DA -  -  -  -  ; ***************************************************************************************
  126 00:00DA -  -  -  -  ;
  127 00:00DA -  -  -  -  ;		Date			Notes
  128 00:00DA -  -  -  -  ;		==== 			=====
  129 00:00DA -  -  -  -  ;
  130 00:00DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00DA -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00DA -  -  -  -  ; ***************************************************************************************
    2 00:00DA -  -  -  -  ; ***************************************************************************************
    3 00:00DA -  -  -  -  ;
    4 00:00DA -  -  -  -  ;		Name : 		assert.asm
    5 00:00DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DA -  -  -  -  ;		Reviewed :	No
    8 00:00DA -  -  -  -  ;		Purpose :	Assert command
    9 00:00DA -  -  -  -  ;
   10 00:00DA -  -  -  -  ; ***************************************************************************************
   11 00:00DA -  -  -  -  ; ***************************************************************************************
   12 00:00DA -  -  -  -  
   13 00:00DA -  -  -  -  ; ***************************************************************************************
   14 00:00DA -  -  -  -  ;
   15 00:00DA -  -  -  -  ;									ASSERT command
   16 00:00DA -  -  -  -  ;
   17 00:00DA -  -  -  -  ; ***************************************************************************************
   18 00:00DA -  -  -  -  
   19 00:00DA -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00DA CD 47 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00DE 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00E4 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00E5 3E 01 C3 14 
              03 00 -  -  		ERR_ASSERT
   24 00:00EB -  -  -  -  
   25 00:00EB -  -  -  -  ; ***************************************************************************************
   26 00:00EB -  -  -  -  ;
   27 00:00EB -  -  -  -  ;									Changes and Updates
   28 00:00EB -  -  -  -  ;
   29 00:00EB -  -  -  -  ; ***************************************************************************************
   30 00:00EB -  -  -  -  ;
   31 00:00EB -  -  -  -  ;		Date			Notes
   32 00:00EB -  -  -  -  ;		==== 			=====
   33 00:00EB -  -  -  -  ;
   34 00:00EB -  -  -  -  ; ***************************************************************************************
   35 00:00EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:00EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00EB -  -  -  -  ; ***************************************************************************************
    2 00:00EB -  -  -  -  ; ***************************************************************************************
    3 00:00EB -  -  -  -  ;
    4 00:00EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00EB -  -  -  -  ;		Reviewed :	No
    8 00:00EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00EB -  -  -  -  ;
   10 00:00EB -  -  -  -  ; ***************************************************************************************
   11 00:00EB -  -  -  -  ; ***************************************************************************************
   12 00:00EB -  -  -  -  
   13 00:00EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00EB -  -  -  -  BadCmd_To: 			;; [to]
   18 00:00EB C3 7E 03 00 		jp 		SyntaxError
   19 00:00EF -  -  -  -  
   20 00:00EF -  -  -  -  ; ***************************************************************************************
   21 00:00EF -  -  -  -  ;
   22 00:00EF -  -  -  -  ;									Changes and Updates
   23 00:00EF -  -  -  -  ;
   24 00:00EF -  -  -  -  ; ***************************************************************************************
   25 00:00EF -  -  -  -  ;
   26 00:00EF -  -  -  -  ;		Date			Notes
   27 00:00EF -  -  -  -  ;		==== 			=====
   28 00:00EF -  -  -  -  ;
   29 00:00EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00EF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00EF -  -  -  -  ; ***************************************************************************************
    2 00:00EF -  -  -  -  ; ***************************************************************************************
    3 00:00EF -  -  -  -  ;
    4 00:00EF -  -  -  -  ;		Name : 		colon.asm
    5 00:00EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00EF -  -  -  -  ;		Reviewed :	No
    8 00:00EF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00EF -  -  -  -  ;
   10 00:00EF -  -  -  -  ; ***************************************************************************************
   11 00:00EF -  -  -  -  ; ***************************************************************************************
   12 00:00EF -  -  -  -  
   13 00:00EF -  -  -  -  ; ***************************************************************************************
   14 00:00EF -  -  -  -  ;
   15 00:00EF -  -  -  -  ;								Colon command, this is ignored.
   16 00:00EF -  -  -  -  ;
   17 00:00EF -  -  -  -  ; ***************************************************************************************
   18 00:00EF -  -  -  -  
   19 00:00EF -  -  -  -  Command_Colon: 	;; [:]
   20 00:00EF C9 -  -  -  		ret
   21 00:00F0 -  -  -  -  
   22 00:00F0 -  -  -  -  ; ***************************************************************************************
   23 00:00F0 -  -  -  -  ;
   24 00:00F0 -  -  -  -  ;									Changes and Updates
   25 00:00F0 -  -  -  -  ;
   26 00:00F0 -  -  -  -  ; ***************************************************************************************
   27 00:00F0 -  -  -  -  ;
   28 00:00F0 -  -  -  -  ;		Date			Notes
   29 00:00F0 -  -  -  -  ;		==== 			=====
   30 00:00F0 -  -  -  -  ;
   31 00:00F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F0 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F0 -  -  -  -  ; ***************************************************************************************
    2 00:00F0 -  -  -  -  ; ***************************************************************************************
    3 00:00F0 -  -  -  -  ;
    4 00:00F0 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F0 -  -  -  -  ;		Reviewed :	No
    8 00:00F0 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F0 -  -  -  -  ;
   10 00:00F0 -  -  -  -  ; ***************************************************************************************
   11 00:00F0 -  -  -  -  ; ***************************************************************************************
   12 00:00F0 -  -  -  -  
   13 00:00F0 -  -  -  -  ; ***************************************************************************************
   14 00:00F0 -  -  -  -  ;
   15 00:00F0 -  -  -  -  ;		DIM command
   16 00:00F0 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 00:00F0 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 00:00F0 -  -  -  -  ;								(can be comma chained)
   19 00:00F0 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 00:00F0 -  -  -  -  ;
   21 00:00F0 -  -  -  -  ; ***************************************************************************************
   22 00:00F0 -  -  -  -  
   23 00:00F0 -  -  -  -  Command_DIM: 	;; [dim]
   24 00:00F0 -  -  -  -  		;
   25 00:00F0 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   26 00:00F0 -  -  -  -  		; 		we cannot just get a l-value here.
   27 00:00F0 -  -  -  -  		;
   28 00:00F0 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   29 00:00F2 D1 -  -  -  		pop 	de
   30 00:00F3 -  -  -  -  		;
   31 00:00F3 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   32 00:00F6 FE 26 -  -  		cp 		IDENTIFIER_END 				
   33 00:00F8 D2 7E 03 00 		jp 		nc,SyntaxError 				; no identifier here
   34 00:00FC -  -  -  -  _DISkip:
   35 00:00FC DD 23 -  -  		inc 	ix 							; skip over identifier
   36 00:00FE DD 7E 00 -  		ld 		a,(ix+0)
   37 00:0101 FE 26 -  -  		cp 		IDENTIFIER_END
   38 00:0103 38 F7 -  -  		jr 		c,_DISkip 					
   39 00:0105 -  -  -  -  		;
   40 00:0105 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   41 00:0108 FE 95 -  -  		cp 		KWD_LPAREN
   42 00:010A F5 -  -  -  		push 	af 							; call whichever function depending.
   43 00:010B CC 6C 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   44 00:010F F1 -  -  -  		pop 	af
   45 00:0110 C4 24 01 00 		call 	nz,DimensionAllocate
   46 00:0114 -  -  -  -  		;
   47 00:0114 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   48 00:0117 FE A6 -  -  		cp 		KWD_COMMA
   49 00:0119 C0 -  -  -  		ret 	nz
   50 00:011A DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   51 00:011C 18 D2 -  -  		jr 		Command_DIM
   52 00:011E -  -  -  -  
   53 00:011E -  -  -  -  _CDError:
   54 00:011E 3E 04 C3 14 
              03 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   55 00:0124 -  -  -  -  
   56 00:0124 -  -  -  -  ; ***************************************************************************************
   57 00:0124 -  -  -  -  ;
   58 00:0124 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   59 00:0124 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   60 00:0124 -  -  -  -  ;
   61 00:0124 -  -  -  -  ; ***************************************************************************************
   62 00:0124 -  -  -  -  
   63 00:0124 -  -  -  -  DimensionAllocate:
   64 00:0124 D5 -  -  -  		push 	de 							; save start on stack
   65 00:0125 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   66 00:0127 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   67 00:0129 32 7C 00 00 		ld 		(AllowAutoCreate),a
   68 00:012D CD F5 08 00 		call 	FindVariable 				; find/create the variable appropriately.
   69 00:0131 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   70 00:0133 28 E9 -  -  		jr 		z,_CDError
   71 00:0135 CB 41 -  -  		bit 	CIsString,c
   72 00:0137 20 E5 -  -  		jr 		nz,_CDError
   73 00:0139 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   74 00:013B E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   75 00:013C 3E AA -  -  		ld  	a,KWD_LSQPAREN
   76 00:013E CD 08 03 00 		call 	CheckNextA 					; check for [
   77 00:0142 CD 47 05 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   78 00:0146 3E AB -  -  		ld  	a,KWD_RSQPAREN
   79 00:0148 CD 08 03 00 		call 	CheckNextA 					; check for ]
   80 00:014C 23 -  -  -  		inc 	hl 							; increment HL,HL'
   81 00:014D 7C -  -  -  		ld 		a,h
   82 00:014E B5 -  -  -  		or 		l
   83 00:014F 20 03 -  -  		jr 		nz,_DANoCarry
   84 00:0151 D9 -  -  -  		exx
   85 00:0152 23 -  -  -  		inc 	hl
   86 00:0153 D9 -  -  -  		exx
   87 00:0154 -  -  -  -  _DANoCarry:
   88 00:0154 D9 -  -  -  		exx 								; check if HL' is zero
   89 00:0155 7C -  -  -  		ld 		a,h
   90 00:0156 B5 -  -  -  		or 		l
   91 00:0157 D9 -  -  -  		exx
   92 00:0158 20 C4 -  -  		jr 		nz,_CDError
   93 00:015A CD 1E 08 00 		call 	AllocateBytes 				; allocate that much memory.
   94 00:015E EB -  -  -  		ex 		de,hl 						; put address into UDE
   95 00:015F E1 -  -  -  		pop 	hl 							; this is where it goes.
   96 00:0160 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   97 00:0166 AF -  -  -  		xor 	a 							; autocreate off
   98 00:0167 32 7C 00 00 		ld 		(AllowAutoCreate),a
   99 00:016B C9 -  -  -  		ret
  100 00:016C -  -  -  -  
  101 00:016C -  -  -  -  ; ***************************************************************************************
  102 00:016C -  -  -  -  ;
  103 00:016C -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  104 00:016C -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  105 00:016C -  -  -  -  ;
  106 00:016C -  -  -  -  ; ***************************************************************************************
  107 00:016C -  -  -  -  
  108 00:016C -  -  -  -  DimensionArray:
  109 00:016C 3E 0F C3 14 
              03 00 -  -  		ERR_TODO
  110 00:0172 -  -  -  -  
  111 00:0172 -  -  -  -  
  112 00:0172 -  -  -  -  ; ***************************************************************************************
  113 00:0172 -  -  -  -  ;
  114 00:0172 -  -  -  -  ;									Changes and Updates
  115 00:0172 -  -  -  -  ;
  116 00:0172 -  -  -  -  ; ***************************************************************************************
  117 00:0172 -  -  -  -  ;
  118 00:0172 -  -  -  -  ;		Date			Notes
  119 00:0172 -  -  -  -  ;		==== 			=====
  120 00:0172 -  -  -  -  ;
  121 00:0172 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:0172 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:0172 -  -  -  -  ; ***************************************************************************************
    2 00:0172 -  -  -  -  ; ***************************************************************************************
    3 00:0172 -  -  -  -  ;
    4 00:0172 -  -  -  -  ;		Name : 		end.asm
    5 00:0172 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0172 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0172 -  -  -  -  ;		Reviewed :	No
    8 00:0172 -  -  -  -  ;		Purpose :	End command
    9 00:0172 -  -  -  -  ;
   10 00:0172 -  -  -  -  ; ***************************************************************************************
   11 00:0172 -  -  -  -  ; ***************************************************************************************
   12 00:0172 -  -  -  -  
   13 00:0172 -  -  -  -  ; ***************************************************************************************
   14 00:0172 -  -  -  -  ;
   15 00:0172 -  -  -  -  ;										END command
   16 00:0172 -  -  -  -  ;
   17 00:0172 -  -  -  -  ; ***************************************************************************************
   18 00:0172 -  -  -  -  
   19 00:0172 -  -  -  -  Command_END: 	;; [end]
   20 00:0172 3E 00 C3 14 
              03 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:0178 -  -  -  -  
   22 00:0178 -  -  -  -  ; ***************************************************************************************
   23 00:0178 -  -  -  -  ;
   24 00:0178 -  -  -  -  ;									Changes and Updates
   25 00:0178 -  -  -  -  ;
   26 00:0178 -  -  -  -  ; ***************************************************************************************
   27 00:0178 -  -  -  -  ;
   28 00:0178 -  -  -  -  ;		Date			Notes
   29 00:0178 -  -  -  -  ;		==== 			=====
   30 00:0178 -  -  -  -  ;
   31 00:0178 -  -  -  -  ; ***************************************************************************************
   32 00:0178 -  -  -  -  		
Listing for file "_build.asm"
   18 00:0178 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:0178 -  -  -  -  ; ***************************************************************************************
    2 00:0178 -  -  -  -  ; ***************************************************************************************
    3 00:0178 -  -  -  -  ;
    4 00:0178 -  -  -  -  ;		Name : 		endofline.asm
    5 00:0178 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0178 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0178 -  -  -  -  ;		Reviewed :	None
    8 00:0178 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:0178 -  -  -  -  ;
   10 00:0178 -  -  -  -  ; ***************************************************************************************
   11 00:0178 -  -  -  -  ; ***************************************************************************************
   12 00:0178 -  -  -  -  
   13 00:0178 -  -  -  -  ; ***************************************************************************************
   14 00:0178 -  -  -  -  ;
   15 00:0178 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:0178 -  -  -  -  ;
   17 00:0178 -  -  -  -  ; ***************************************************************************************
   18 00:0178 -  -  -  -  
   19 00:0178 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:0178 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:017D 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:0181 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:0184 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:0186 -  -  -  -  		;
   25 00:0186 ED 7B 5C 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:018B C3 6A 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:018F -  -  -  -  
   28 00:018F -  -  -  -  ; ***************************************************************************************
   29 00:018F -  -  -  -  ;
   30 00:018F -  -  -  -  ;									Changes and Updates
   31 00:018F -  -  -  -  ;
   32 00:018F -  -  -  -  ; ***************************************************************************************
   33 00:018F -  -  -  -  ;
   34 00:018F -  -  -  -  ;		Date			Notes
   35 00:018F -  -  -  -  ;		==== 			=====
   36 00:018F -  -  -  -  ;
   37 00:018F -  -  -  -  ; ***************************************************************************************
   38 00:018F -  -  -  -  		
Listing for file "_build.asm"
   19 00:018F -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:018F -  -  -  -  ; ***************************************************************************************
    2 00:018F -  -  -  -  ; ***************************************************************************************
    3 00:018F -  -  -  -  ;
    4 00:018F -  -  -  -  ;		Name : 		let.asm
    5 00:018F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:018F -  -  -  -  ;		Date : 		4th June 2022
    7 00:018F -  -  -  -  ;		Reviewed :	No
    8 00:018F -  -  -  -  ;		Purpose :	Assignment statement
    9 00:018F -  -  -  -  ;
   10 00:018F -  -  -  -  ; ***************************************************************************************
   11 00:018F -  -  -  -  ; ***************************************************************************************
   12 00:018F -  -  -  -  
   13 00:018F -  -  -  -  ; ***************************************************************************************
   14 00:018F -  -  -  -  ;
   15 00:018F -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:018F -  -  -  -  ;
   17 00:018F -  -  -  -  ; ***************************************************************************************
   18 00:018F -  -  -  -  
   19 00:018F -  -  -  -  Command_LET: 	;; [let]
   20 00:018F DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:0192 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:0194 28 2F -  -  		jr 		z,_CLString
   23 00:0196 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:0198 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:019A 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:019C 32 7C 00 00 		ld 		(AllowAutoCreate),a
   27 00:01A0 -  -  -  -  _CLNoAuto:
   28 00:01A0 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01A2 CD C9 04 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01A6 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01A8 CA 7E 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01AC E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01AD C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01AE AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01AF 32 7C 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01B3 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01B5 CD 08 03 00 		call 	CheckNextA
   38 00:01B9 -  -  -  -  
   39 00:01B9 CD 3F 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01BD -  -  -  -  
   41 00:01BD D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01BE 43 -  -  -  		ld 		b,e 						
   43 00:01BF D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01C0 -  -  -  -  		;
   45 00:01C0 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01C0 -  -  -  -  		;
   47 00:01C0 CD CD 01 00 		call 	WriteHLToDE
   48 00:01C4 C9 -  -  -  		ret
   49 00:01C5 -  -  -  -  		;
   50 00:01C5 -  -  -  -  		; 		String assignment code.
   51 00:01C5 -  -  -  -  		;
   52 00:01C5 -  -  -  -  _CLString:
   53 00:01C5 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:01CD -  -  -  -  
   55 00:01CD -  -  -  -  ; ***************************************************************************************
   56 00:01CD -  -  -  -  ;
   57 00:01CD -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:01CD -  -  -  -  ;
   59 00:01CD -  -  -  -  ; ***************************************************************************************
   60 00:01CD -  -  -  -  
   61 00:01CD -  -  -  -  WriteHLToDE:
   62 00:01CD CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:01CF C2 72 03 00 		jp 		nz,TypeMismatch
   64 00:01D3 -  -  -  -  		;
   65 00:01D3 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:01D3 -  -  -  -  		;		
   67 00:01D3 -  -  -  -  _WHDWriteNumber:
   68 00:01D3 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:01D4 D9 -  -  -  		exx
   70 00:01D5 EB -  -  -  		ex 		de,hl
   71 00:01D6 D9 -  -  -  		exx
   72 00:01D7 -  -  -  -  
   73 00:01D7 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:01D8 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:01D9 72 -  -  -  		ld 		(hl),d
   76 00:01DA 23 -  -  -  		inc 	hl
   77 00:01DB E5 -  -  -  		push 	hl
   78 00:01DC D9 -  -  -  		exx
   79 00:01DD E1 -  -  -  		pop 	hl
   80 00:01DE 73 -  -  -  		ld 		(hl),e
   81 00:01DF 23 -  -  -  		inc 	hl
   82 00:01E0 72 -  -  -  		ld 		(hl),d
   83 00:01E1 D9 -  -  -  		exx
   84 00:01E2 -  -  -  -  
   85 00:01E2 C9 -  -  -  		ret
   86 00:01E3 -  -  -  -  
   87 00:01E3 -  -  -  -  ; ***************************************************************************************
   88 00:01E3 -  -  -  -  ;
   89 00:01E3 -  -  -  -  ;									Changes and Updates
   90 00:01E3 -  -  -  -  ;
   91 00:01E3 -  -  -  -  ; ***************************************************************************************
   92 00:01E3 -  -  -  -  ;
   93 00:01E3 -  -  -  -  ;		Date			Notes
   94 00:01E3 -  -  -  -  ;		==== 			=====
   95 00:01E3 -  -  -  -  ;
   96 00:01E3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:01E3 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:01E3 -  -  -  -  ; ***************************************************************************************
    2 00:01E3 -  -  -  -  ; ***************************************************************************************
    3 00:01E3 -  -  -  -  ;
    4 00:01E3 -  -  -  -  ;		Name : 		print.asm
    5 00:01E3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01E3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01E3 -  -  -  -  ;		Reviewed :	No
    8 00:01E3 -  -  -  -  ;		Purpose :	Print command
    9 00:01E3 -  -  -  -  ;
   10 00:01E3 -  -  -  -  ; ***************************************************************************************
   11 00:01E3 -  -  -  -  ; ***************************************************************************************
   12 00:01E3 -  -  -  -  
   13 00:01E3 -  -  -  -  ; ***************************************************************************************
   14 00:01E3 -  -  -  -  ;
   15 00:01E3 -  -  -  -  ;										PRINT command
   16 00:01E3 -  -  -  -  ;
   17 00:01E3 -  -  -  -  ; ***************************************************************************************
   18 00:01E3 -  -  -  -  
   19 00:01E3 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:01E3 -  -  -  -  		;
   21 00:01E3 -  -  -  -  		;		Main loop
   22 00:01E3 -  -  -  -  		;
   23 00:01E3 -  -  -  -  _CPRLoop:
   24 00:01E3 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:01E6 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:01E8 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:01EA FE A7 -  -  		cp 		KWD_COLON 	
   28 00:01EC 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:01EE FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:01F0 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:01F2 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:01F4 28 2C -  -  		jr 		z,_CPRTab
   33 00:01F6 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:01F8 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:01FA -  -  -  -  		;
   36 00:01FA CD 3F 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:01FE CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:0200 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:0202 -  -  -  -  		;
   40 00:0202 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:0204 -  -  -  -  _CPRPrintNumber:
   42 00:0204 F5 -  -  -  		push 	af 							; print leading space
   43 00:0205 3E 20 -  -  		ld 		a,' '
   44 00:0207 CD 6E 0E 00 		call 	SYSPrintChar
   45 00:020B F1 -  -  -  		pop 	af
   46 00:020C 01 9A 00 00 		ld  	bc,ConvertBuffer
   47 00:0210 C5 -  -  -  		push 	bc
   48 00:0211 CD 1F 0E 00 		call 	Int32ToString 				; convert to string
   49 00:0215 E1 -  -  -  		pop 	hl
   50 00:0216 -  -  -  -  		;
   51 00:0216 -  -  -  -  		; 		Print text at HL.
   52 00:0216 -  -  -  -  		;
   53 00:0216 -  -  -  -  _CPRPrintHL:
   54 00:0216 CD A7 08 00 		call 	PrintStringAtHL 			; print string out
   55 00:021A 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:021C -  -  -  -  		;
   57 00:021C -  -  -  -  		; 		New line (')
   58 00:021C -  -  -  -  		;
   59 00:021C -  -  -  -  _CPRNewLine:
   60 00:021C CD 6F 0E 00 		call 	SYSPrintCRLF
   61 00:0220 18 06 -  -  		jr 		_CPRCheckNext
   62 00:0222 -  -  -  -  		;
   63 00:0222 -  -  -  -  		; 		Tab command (,)
   64 00:0222 -  -  -  -  		;
   65 00:0222 -  -  -  -  _CPRTab:
   66 00:0222 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:0224 CD 6E 0E 00 		call 	SYSPrintChar
   68 00:0228 -  -  -  -  		;
   69 00:0228 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:0228 -  -  -  -  		;
   71 00:0228 -  -  -  -  _CPRCheckNext:
   72 00:0228 DD 23 -  -  		inc 	ix 							; consume current
   73 00:022A DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:022D FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:022F C8 -  -  -  		ret 	z
   76 00:0230 FE A7 -  -  		cp 		KWD_COLON
   77 00:0232 C8 -  -  -  		ret 	z
   78 00:0233 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:0235 -  -  -  -  		;
   80 00:0235 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:0235 -  -  -  -  		;
   82 00:0235 -  -  -  -  _CPRExitNL:
   83 00:0235 CD 6F 0E 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:0239 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:023A -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:023A -  -  -  -  ; ***************************************************************************************
    2 00:023A -  -  -  -  ; ***************************************************************************************
    3 00:023A -  -  -  -  ;
    4 00:023A -  -  -  -  ;		Name : 		rem.asm
    5 00:023A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:023A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:023A -  -  -  -  ;		Reviewed :	No
    8 00:023A -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:023A -  -  -  -  ;
   10 00:023A -  -  -  -  ; ***************************************************************************************
   11 00:023A -  -  -  -  ; ***************************************************************************************
   12 00:023A -  -  -  -  
   13 00:023A -  -  -  -  ; ***************************************************************************************
   14 00:023A -  -  -  -  ;
   15 00:023A -  -  -  -  ;							Comment command, can be ' or REM
   16 00:023A -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:023A -  -  -  -  ;
   18 00:023A -  -  -  -  ; ***************************************************************************************
   19 00:023A -  -  -  -  
   20 00:023A -  -  -  -  Command_REM: 	;; [rem]
   21 00:023A -  -  -  -  Command_REM2: 	;; [']
   22 00:023A DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:023D DD 23 -  -  		inc 	ix
   24 00:023F FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:0241 C8 -  -  -  		ret 	z
   26 00:0242 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:0244 C8 -  -  -  		ret 	z
   28 00:0245 FE 3F -  -  		cp 		STRING_MARKER
   29 00:0247 C2 7E 03 00 		jp 		nz,SyntaxError
   30 00:024B -  -  -  -  		;		
   31 00:024B 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:024F DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0252 13 -  -  -  		inc 	de 
   34 00:0253 13 -  -  -  		inc 	de
   35 00:0254 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:0256 C9 -  -  -  		ret
   37 00:0257 -  -  -  -  
   38 00:0257 -  -  -  -  ; ***************************************************************************************
   39 00:0257 -  -  -  -  ;
   40 00:0257 -  -  -  -  ;									Changes and Updates
   41 00:0257 -  -  -  -  ;
   42 00:0257 -  -  -  -  ; ***************************************************************************************
   43 00:0257 -  -  -  -  ;
   44 00:0257 -  -  -  -  ;		Date			Notes
   45 00:0257 -  -  -  -  ;		==== 			=====
   46 00:0257 -  -  -  -  ;
   47 00:0257 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:0257 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:0257 -  -  -  -  ; ***************************************************************************************
    2 00:0257 -  -  -  -  ; ***************************************************************************************
    3 00:0257 -  -  -  -  ;
    4 00:0257 -  -  -  -  ;		Name : 		run.asm
    5 00:0257 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0257 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0257 -  -  -  -  ;		Reviewed :	No
    8 00:0257 -  -  -  -  ;		Purpose :	Run command
    9 00:0257 -  -  -  -  ;
   10 00:0257 -  -  -  -  ; ***************************************************************************************
   11 00:0257 -  -  -  -  ; ***************************************************************************************
   12 00:0257 -  -  -  -  
   13 00:0257 -  -  -  -  ; ***************************************************************************************
   14 00:0257 -  -  -  -  ;
   15 00:0257 -  -  -  -  ;										RUN command
   16 00:0257 -  -  -  -  ;
   17 00:0257 -  -  -  -  ; ***************************************************************************************
   18 00:0257 -  -  -  -  
   19 00:0257 -  -  -  -  Command_RUN: 	;; [run]
   20 00:0257 CD 39 08 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:025B -  -  -  -  
   22 00:025B DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:0260 ED 73 5C 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:0265 AF -  -  -  		xor 	a
   25 00:0266 32 7C 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:026A -  -  -  -  		;
   27 00:026A -  -  -  -  		; 		New line at IX.
   28 00:026A -  -  -  -  		;
   29 00:026A -  -  -  -  CRNewLine:
   30 00:026A DD 22 58 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:026F -  -  -  -  		;
   32 00:026F DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:0272 B7 -  -  -  		or 		a
   34 00:0273 CA 72 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:0277 -  -  -  -  		;
   36 00:0277 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:0279 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:027B DD 23 -  -  		inc 	ix
   39 00:027D -  -  -  -  		;
   40 00:027D -  -  -  -  		; 		New command at IX
   41 00:027D -  -  -  -  		;
   42 00:027D -  -  -  -  _CRNewCommand:	
   43 00:027D DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:0280 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:0281 F2 BC 02 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:0285 -  -  -  -  		;
   47 00:0285 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:0287 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:0289 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:028B D2 AC 02 00 		jp 		nc,_CRAlternateLets
   51 00:028F -  -  -  -  		;
   52 00:028F -  -  -  -  _CRDoCommand:		
   53 00:028F E6 7F 21 00 
              00 00 6F 29 
              29 11 2C 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:02A4 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:02A6 CD 60 00 00 		call 	JumpCode 					; call the routine.
   56 00:02AA 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:02AC -  -  -  -  		;
   58 00:02AC -  -  -  -  		; 		Do CALL (HL)
   59 00:02AC -  -  -  -  		;
   60 00:02AC -  -  -  -  		;
   61 00:02AC -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:02AC -  -  -  -  		;		
   63 00:02AC -  -  -  -  _CRAlternateLets:		
   64 00:02AC FE 83 -  -  		cp 		KWD_PLING
   65 00:02AE 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:02B0 FE 84 -  -  		cp 		KWD_QMARK
   67 00:02B2 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:02B4 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:02B6 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:02B8 C3 7E 03 00 		jp 		SyntaxError
   71 00:02BC -  -  -  -  		;
   72 00:02BC -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:02BC -  -  -  -  		;
   74 00:02BC -  -  -  -  _CRAssignmentHandler:		
   75 00:02BC FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:02BE D2 7E 03 00 		jp 		nc,SyntaxError
   77 00:02C2 -  -  -  -  _CRAssignmentLet:		
   78 00:02C2 CD 8F 01 00 		call	Command_LET 				; do LET.
   79 00:02C6 C3 7D 02 00 		jp 		_CRNewCommand
   80 00:02CA -  -  -  -  
   81 00:02CA -  -  -  -  ; ***************************************************************************************
   82 00:02CA -  -  -  -  ;
   83 00:02CA -  -  -  -  ;									Changes and Updates
   84 00:02CA -  -  -  -  ;
   85 00:02CA -  -  -  -  ; ***************************************************************************************
   86 00:02CA -  -  -  -  ;
   87 00:02CA -  -  -  -  ;		Date			Notes
   88 00:02CA -  -  -  -  ;		==== 			=====
   89 00:02CA -  -  -  -  ;
   90 00:02CA -  -  -  -  ; ***************************************************************************************
   91 00:02CA -  -  -  -  		
Listing for file "_build.asm"
   23 00:02CA -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:02CA -  -  -  -  ; ***************************************************************************************
    2 00:02CA -  -  -  -  ; ***************************************************************************************
    3 00:02CA -  -  -  -  ;
    4 00:02CA -  -  -  -  ;		Name : 		stop.asm
    5 00:02CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02CA -  -  -  -  ;		Reviewed :	No
    8 00:02CA -  -  -  -  ;		Purpose :	Stop command
    9 00:02CA -  -  -  -  ;
   10 00:02CA -  -  -  -  ; ***************************************************************************************
   11 00:02CA -  -  -  -  ; ***************************************************************************************
   12 00:02CA -  -  -  -  
   13 00:02CA -  -  -  -  ; ***************************************************************************************
   14 00:02CA -  -  -  -  ;
   15 00:02CA -  -  -  -  ;										STOP command
   16 00:02CA -  -  -  -  ;
   17 00:02CA -  -  -  -  ; ***************************************************************************************
   18 00:02CA -  -  -  -  
   19 00:02CA -  -  -  -  Command_STOP: 	;; [stop]
   20 00:02CA 3E 0D C3 14 
              03 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:02D0 -  -  -  -  
   22 00:02D0 -  -  -  -  ; ***************************************************************************************
   23 00:02D0 -  -  -  -  ;
   24 00:02D0 -  -  -  -  ;									Changes and Updates
   25 00:02D0 -  -  -  -  ;
   26 00:02D0 -  -  -  -  ; ***************************************************************************************
   27 00:02D0 -  -  -  -  ;
   28 00:02D0 -  -  -  -  ;		Date			Notes
   29 00:02D0 -  -  -  -  ;		==== 			=====
   30 00:02D0 -  -  -  -  ;
   31 00:02D0 -  -  -  -  ; ***************************************************************************************
   32 00:02D0 -  -  -  -  		
Listing for file "_build.asm"
   24 00:02D0 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:02D0 -  -  -  -  ; ***************************************************************************************
    2 00:02D0 -  -  -  -  ; ***************************************************************************************
    3 00:02D0 -  -  -  -  ;
    4 00:02D0 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:02D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02D0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02D0 -  -  -  -  ;		Reviewed :	No
    8 00:02D0 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:02D0 -  -  -  -  ;
   10 00:02D0 -  -  -  -  ; ***************************************************************************************
   11 00:02D0 -  -  -  -  ; ***************************************************************************************
   12 00:02D0 -  -  -  -  
   13 00:02D0 -  -  -  -  ; ***************************************************************************************
   14 00:02D0 -  -  -  -  ;
   15 00:02D0 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:02D0 -  -  -  -  ;
   17 00:02D0 -  -  -  -  ; ***************************************************************************************
   18 00:02D0 -  -  -  -  
   19 00:02D0 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:02D0             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:02D0             		inc 	ix
   22 00:02D0             		cp 		ch 							; exit if matches
   23 00:02D0             		ret 	z
   24 00:02D0             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:02D0             		jp 		ErrorHandler
   26 00:02D0             #endmacro
   27 00:02D0 -  -  -  -  
   28 00:02D0 -  -  -  -  CheckLeftBracket:
   29 00:02D0 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 14 
              03 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:02DE -  -  -  -  
   31 00:02DE -  -  -  -  CheckRightBracket:
   32 00:02DE DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 14 
              03 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:02EC -  -  -  -  
   34 00:02EC -  -  -  -  CheckDollar:
   35 00:02EC DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 14 
              03 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:02FA -  -  -  -  		
   37 00:02FA -  -  -  -  CheckComma:
   38 00:02FA DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 14 
              03 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0308 -  -  -  -  
   40 00:0308 -  -  -  -  ; ***************************************************************************************
   41 00:0308 -  -  -  -  ;
   42 00:0308 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0308 -  -  -  -  ;
   44 00:0308 -  -  -  -  ; ***************************************************************************************
   45 00:0308 -  -  -  -  
   46 00:0308 -  -  -  -  CheckNextA:
   47 00:0308 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:030B DD 23 -  -  		inc 	ix 							; skip character
   49 00:030D C8 -  -  -  		ret 	z 							; yes, okay
   50 00:030E 3E 0E C3 14 
              03 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0314 -  -  -  -  		
   52 00:0314 -  -  -  -  ; ***************************************************************************************
   53 00:0314 -  -  -  -  ;
   54 00:0314 -  -  -  -  ;									Changes and Updates
   55 00:0314 -  -  -  -  ;
   56 00:0314 -  -  -  -  ; ***************************************************************************************
   57 00:0314 -  -  -  -  ;
   58 00:0314 -  -  -  -  ;		Date			Notes
   59 00:0314 -  -  -  -  ;		==== 			=====
   60 00:0314 -  -  -  -  ;
   61 00:0314 -  -  -  -  ; ***************************************************************************************
   62 00:0314 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0314 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0314 -  -  -  -  ; ***************************************************************************************
    2 00:0314 -  -  -  -  ; ***************************************************************************************
    3 00:0314 -  -  -  -  ;
    4 00:0314 -  -  -  -  ;		Name : 		errors.asm
    5 00:0314 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0314 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0314 -  -  -  -  ;		Reviewed :	No
    8 00:0314 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0314 -  -  -  -  ;
   10 00:0314 -  -  -  -  ; ***************************************************************************************
   11 00:0314 -  -  -  -  ; ***************************************************************************************
   12 00:0314 -  -  -  -  
   13 00:0314 -  -  -  -  ; ***************************************************************************************
   14 00:0314 -  -  -  -  ;
   15 00:0314 -  -  -  -  ;								Error handler, message A 
   16 00:0314 -  -  -  -  ;
   17 00:0314 -  -  -  -  ; ***************************************************************************************
   18 00:0314 -  -  -  -  
   19 00:0314 -  -  -  -  ErrorHandler:
   20 00:0314 F5 -  -  -  		push 	af 						; save error ID
   21 00:0315 -  -  -  -  
   22 00:0315 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0319 6F -  -  -  		ld 		l,a
   24 00:031A 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:031B 29 -  -  -  		add 	hl,hl 		
   26 00:031C 11 F1 09 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:0320 19 -  -  -  		add 	hl,de
   28 00:0321 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:0323 CD A7 08 00 		call 	PrintStringAtHL
   30 00:0327 -  -  -  -  		;
   31 00:0327 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0328 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0329 28 2F -  -  		jr 		z,_EHExit
   34 00:032B -  -  -  -  		;
   35 00:032B DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:0330 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:0333 B7 -  -  -  		or 		a
   38 00:0334 28 24 -  -  		jr 		z,_EHExit
   39 00:0336 -  -  -  -  
   40 00:0336 21 62 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:033A CD A7 08 00 		call 	PrintStringAtHL 
   42 00:033E -  -  -  -  		
   43 00:033E D9 -  -  -  		exx								; HL'HL = line number
   44 00:033F 21 00 00 00 		ld 		hl,$0000 		
   45 00:0343 D9 -  -  -  		exx 
   46 00:0344 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:0347 DD 66 02 -  		ld 		h,(ix+2)
   48 00:034A 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:034C 01 9A 00 00 		ld 		bc,ConvertBuffer
   50 00:0350 CD 1F 0E 00 		call 	Int32ToString
   51 00:0354 C5 -  -  -  		push 	bc
   52 00:0355 E1 -  -  -  		pop 	hl
   53 00:0356 CD A7 08 00 		call 	PrintStringAtHL			; print error line number.
   54 00:035A -  -  -  -  _EHExit:		
   55 00:035A CD 6F 0E 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:035E C3 1A 00 00 		jp 		WarmStart
   57 00:0362 -  -  -  -  
   58 00:0362 -  -  -  -  _EHAtText:
   59 00:0362 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:036C -  -  -  -  
   61 00:036C -  -  -  -  NotImplemented:
   62 00:036C 3E 05 C3 14 
              03 00 -  -  		ERR_DISABLED
   63 00:0372 -  -  -  -  TypeMismatch:
   64 00:0372 3E 02 C3 14 
              03 00 -  -  		ERR_BADTYPE
   65 00:0378 -  -  -  -  BadValue:
   66 00:0378 3E 03 C3 14 
              03 00 -  -  		ERR_BADVALUE
   67 00:037E -  -  -  -  SyntaxError:
   68 00:037E 3E 0E C3 14 
              03 00 -  -  		ERR_SYNTAX
   69 00:0384 -  -  -  -  						
   70 00:0384 -  -  -  -  ; ***************************************************************************************
   71 00:0384 -  -  -  -  ;
   72 00:0384 -  -  -  -  ;									Changes and Updates
   73 00:0384 -  -  -  -  ;
   74 00:0384 -  -  -  -  ; ***************************************************************************************
   75 00:0384 -  -  -  -  ;
   76 00:0384 -  -  -  -  ;		Date			Notes
   77 00:0384 -  -  -  -  ;		==== 			=====
   78 00:0384 -  -  -  -  ;
   79 00:0384 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0384 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:0384 -  -  -  -  ; ***************************************************************************************
    2 00:0384 -  -  -  -  ; ***************************************************************************************
    3 00:0384 -  -  -  -  ;
    4 00:0384 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:0384 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0384 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0384 -  -  -  -  ;		Reviewed :	No
    8 00:0384 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:0384 -  -  -  -  ;
   10 00:0384 -  -  -  -  ; ***************************************************************************************
   11 00:0384 -  -  -  -  ; ***************************************************************************************
   12 00:0384 -  -  -  -  
   13 00:0384 -  -  -  -  ; ***************************************************************************************
   14 00:0384 -  -  -  -  ;
   15 00:0384 -  -  -  -  ; 									Addition
   16 00:0384 -  -  -  -  ;
   17 00:0384 -  -  -  -  ; ***************************************************************************************
   18 00:0384 -  -  -  -  
   19 00:0384 -  -  -  -  ALUAdd: 		;; [+]
   20 00:0384 CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 9E 
              0D 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:0392 -  -  -  -  
   22 00:0392 -  -  -  -  ; ***************************************************************************************
   23 00:0392 -  -  -  -  ;
   24 00:0392 -  -  -  -  ; 									Subtraction
   25 00:0392 -  -  -  -  ;
   26 00:0392 -  -  -  -  ; ***************************************************************************************
   27 00:0392 -  -  -  -  
   28 00:0392 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:0392 CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 A6 
              0D 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:03A0 -  -  -  -  
   31 00:03A0 -  -  -  -  ; ***************************************************************************************
   32 00:03A0 -  -  -  -  ;
   33 00:03A0 -  -  -  -  ; 									  Multiply
   34 00:03A0 -  -  -  -  ;
   35 00:03A0 -  -  -  -  ; ***************************************************************************************
   36 00:03A0 -  -  -  -  
   37 00:03A0 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:03A0 CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 65 
              0D 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:03AE -  -  -  -  
   40 00:03AE -  -  -  -  ; ***************************************************************************************
   41 00:03AE -  -  -  -  ;
   42 00:03AE -  -  -  -  ; 									  Divide
   43 00:03AE -  -  -  -  ;
   44 00:03AE -  -  -  -  ; ***************************************************************************************
   45 00:03AE -  -  -  -  
   46 00:03AE -  -  -  -  ALUDivide: 	;; [/]
   47 00:03AE -  -  -  -  ALUDivide2:	;; [div]
   48 00:03AE CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 65 
              0C 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:03BC -  -  -  -  
   50 00:03BC -  -  -  -  ; ***************************************************************************************
   51 00:03BC -  -  -  -  ;
   52 00:03BC -  -  -  -  ; 									  Modulus
   53 00:03BC -  -  -  -  ;
   54 00:03BC -  -  -  -  ; ***************************************************************************************
   55 00:03BC -  -  -  -  
   56 00:03BC -  -  -  -  ALUModulus: 	;; [mod]
   57 00:03BC CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 68 
              0C 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:03CA -  -  -  -  
   59 00:03CA -  -  -  -  ; ***************************************************************************************
   60 00:03CA -  -  -  -  ;
   61 00:03CA -  -  -  -  ; 									  Logical
   62 00:03CA -  -  -  -  ;
   63 00:03CA -  -  -  -  ; ***************************************************************************************
   64 00:03CA -  -  -  -  
   65 00:03CA -  -  -  -  ALUAnd: 		;; [and]
   66 00:03CA CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 B0 
              0D 00 -  -  		IntegerDispatch(Int32And)
   67 00:03D8 -  -  -  -  
   68 00:03D8 -  -  -  -  ALUOr: 			;; [or]
   69 00:03D8 CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 BD 
              0D 00 -  -  		IntegerDispatch(Int32Or)
   70 00:03E6 -  -  -  -  
   71 00:03E6 -  -  -  -  ALUXor: 		;; [eor]
   72 00:03E6 CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 CA 
              0D 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:03F4 -  -  -  -  
   74 00:03F4 -  -  -  -  ; ***************************************************************************************
   75 00:03F4 -  -  -  -  ;
   76 00:03F4 -  -  -  -  ;									Changes and Updates
   77 00:03F4 -  -  -  -  ;
   78 00:03F4 -  -  -  -  ; ***************************************************************************************
   79 00:03F4 -  -  -  -  ;
   80 00:03F4 -  -  -  -  ;		Date			Notes
   81 00:03F4 -  -  -  -  ;		==== 			=====
   82 00:03F4 -  -  -  -  ;
   83 00:03F4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:03F4 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:03F4 -  -  -  -  ; ***************************************************************************************
    2 00:03F4 -  -  -  -  ; ***************************************************************************************
    3 00:03F4 -  -  -  -  ;
    4 00:03F4 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:03F4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03F4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03F4 -  -  -  -  ;		Reviewed :	No
    8 00:03F4 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:03F4 -  -  -  -  ;
   10 00:03F4 -  -  -  -  ; ***************************************************************************************
   11 00:03F4 -  -  -  -  ; ***************************************************************************************
   12 00:03F4 -  -  -  -  
   13 00:03F4 -  -  -  -  ; ***************************************************************************************
   14 00:03F4 -  -  -  -  ;
   15 00:03F4 -  -  -  -  ; 									<l> <op> <r>
   16 00:03F4 -  -  -  -  ;
   17 00:03F4 -  -  -  -  ; ***************************************************************************************
   18 00:03F4 -  -  -  -  
   19 00:03F4 -  -  -  -  ALULongReference:			;; [!]
   20 00:03F4 CD 04 04 00 		call 	BRGetAddress 				; calculate address
   21 00:03F8 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:03FA CB F9 -  -  		set 	CIsReference,c
   23 00:03FC C9 -  -  -  		ret
   24 00:03FD -  -  -  -  
   25 00:03FD -  -  -  -  ALUByteReference: 			;; [?]
   26 00:03FD CD F4 03 00 		call 	ALULongReference
   27 00:0401 CB F1 -  -  		set 	CIsByteReference,c
   28 00:0403 C9 -  -  -  		ret
   29 00:0404 -  -  -  -  
   30 00:0404 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0404 CD A1 04 00 
              78 B1 C2 72 
              03 00 C3 12 
              04 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0412 -  -  -  -  _BRGAMain:		
   33 00:0412 CD 9E 0D 00 		call 	Int32Add 					; address in HL'HL
   34 00:0416 CD A7 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:041A C9 -  -  -  		ret
   36 00:041B -  -  -  -  
   37 00:041B -  -  -  -  ; ***************************************************************************************
   38 00:041B -  -  -  -  ;
   39 00:041B -  -  -  -  ;									Changes and Updates
   40 00:041B -  -  -  -  ;
   41 00:041B -  -  -  -  ; ***************************************************************************************
   42 00:041B -  -  -  -  ;
   43 00:041B -  -  -  -  ;		Date			Notes
   44 00:041B -  -  -  -  ;		==== 			=====
   45 00:041B -  -  -  -  ;
   46 00:041B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:041B -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:041B -  -  -  -  ; ***************************************************************************************
    2 00:041B -  -  -  -  ; ***************************************************************************************
    3 00:041B -  -  -  -  ;
    4 00:041B -  -  -  -  ;		Name : 		compare.asm
    5 00:041B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:041B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:041B -  -  -  -  ;		Reviewed :	No
    8 00:041B -  -  -  -  ;		Purpose :	Comparison code
    9 00:041B -  -  -  -  ;
   10 00:041B -  -  -  -  ; ***************************************************************************************
   11 00:041B -  -  -  -  ; ***************************************************************************************
   12 00:041B -  -  -  -  
   13 00:041B -  -  -  -  #macro compare_equals(n)
   14 00:041B             		call 	CompareBaseCode
   15 00:041B             		cp 		n
   16 00:041B             		jr 		z,UnaryInt32True
   17 00:041B             		jr 		UnaryInt32False
   18 00:041B             #endmacro
   19 00:041B -  -  -  -  
   20 00:041B -  -  -  -  #macro compare_not_equals(n)
   21 00:041B             		call 	CompareBaseCode
   22 00:041B             		cp 		n
   23 00:041B             		jr 		nz,UnaryInt32True
   24 00:041B             		jr 		UnaryInt32False
   25 00:041B             #endmacro
   26 00:041B -  -  -  -  
   27 00:041B -  -  -  -  ; ***************************************************************************************
   28 00:041B -  -  -  -  ;
   29 00:041B -  -  -  -  ; 								Return True/False
   30 00:041B -  -  -  -  ;
   31 00:041B -  -  -  -  ; ***************************************************************************************
   32 00:041B -  -  -  -  
   33 00:041B -  -  -  -  UnaryInt32True:	;; [true]
   34 00:041B 3E FF -  -  		ld 		a,255
   35 00:041D 18 01 -  -  		jr 		_Int32Logical
   36 00:041F -  -  -  -  UnaryInt32False: ;; [false]
   37 00:041F AF -  -  -  		xor 	a
   38 00:0420 -  -  -  -  _Int32Logical:
   39 00:0420 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:0421 67 -  -  -  		ld 		h,a
   41 00:0422 D9 -  -  -  		exx
   42 00:0423 6F -  -  -  		ld 		l,a
   43 00:0424 67 -  -  -  		ld 		h,a
   44 00:0425 D9 -  -  -  		exx
   45 00:0426 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0428 C9 -  -  -  		ret
   47 00:0429 -  -  -  -  
   48 00:0429 -  -  -  -  ; ***************************************************************************************
   49 00:0429 -  -  -  -  ;
   50 00:0429 -  -  -  -  ; 										> = < (compare == value)
   51 00:0429 -  -  -  -  ;
   52 00:0429 -  -  -  -  ; ***************************************************************************************
   53 00:0429 -  -  -  -  
   54 00:0429 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0429 CD 65 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:0433 -  -  -  -  
   57 00:0433 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:0433 CD 65 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:043D -  -  -  -  
   60 00:043D -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:043D CD 65 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:0447 -  -  -  -  
   63 00:0447 -  -  -  -  ; ***************************************************************************************
   64 00:0447 -  -  -  -  ;
   65 00:0447 -  -  -  -  ; 										> = < (compare <> value)
   66 00:0447 -  -  -  -  ;
   67 00:0447 -  -  -  -  ; ***************************************************************************************
   68 00:0447 -  -  -  -  
   69 00:0447 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:0447 CD 65 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0451 -  -  -  -  
   72 00:0451 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0451 CD 65 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:045B -  -  -  -  
   75 00:045B -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:045B CD 65 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:0465 -  -  -  -  
   78 00:0465 -  -  -  -  ; ***************************************************************************************
   79 00:0465 -  -  -  -  ;
   80 00:0465 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:0465 -  -  -  -  ;
   82 00:0465 -  -  -  -  ; ***************************************************************************************
   83 00:0465 -  -  -  -  
   84 00:0465 -  -  -  -  CompareBaseCode:
   85 00:0465 CD A1 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0469 -  -  -  -  
   87 00:0469 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:046A A1 -  -  -  		and 	c
   89 00:046B CB 47 -  -  		bit 	CIsString,a 
   90 00:046D C2 7F 04 00 		jp 		nz,StringCompare
   91 00:0471 -  -  -  -  
   92 00:0471 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:0472 B1 -  -  -  		or 		c
   94 00:0473 CB 47 -  -  		bit 	CIsString,a 
   95 00:0475 CA DE 0D 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0479 -  -  -  -  
   97 00:0479 3E 02 C3 14 
              03 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:047F -  -  -  -  ;
   99 00:047F -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:047F -  -  -  -  ;
  101 00:047F -  -  -  -  StringCompare:
  102 00:047F 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:0480 BE -  -  -  		cp 		(hl)
  104 00:0481 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0483 20 08 -  -  		jr 		nz,_SCLess
  106 00:0485 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:0486 23 -  -  -  		inc 	hl
  108 00:0487 FE 20 -  -  		cp 		' '
  109 00:0489 30 F4 -  -  		jr 		nc,StringCompare
  110 00:048B AF -  -  -  		xor 	a 							; return 0.
  111 00:048C C9 -  -  -  		ret
  112 00:048D -  -  -  -  
  113 00:048D -  -  -  -  _SCLess:
  114 00:048D 3E FF -  -  		ld 		a,$FF
  115 00:048F C9 -  -  -  		ret
  116 00:0490 -  -  -  -  _SCGreater:
  117 00:0490 3E 01 -  -  		ld 		a,1
  118 00:0492 C9 -  -  -  		ret
  119 00:0493 -  -  -  -  
  120 00:0493 3E 0F C3 14 
              03 00 -  -  		ERR_TODO()
  121 00:0499 -  -  -  -  
  122 00:0499 -  -  -  -  ; ***************************************************************************************
  123 00:0499 -  -  -  -  ;
  124 00:0499 -  -  -  -  ;									Changes and Updates
  125 00:0499 -  -  -  -  ;
  126 00:0499 -  -  -  -  ; ***************************************************************************************
  127 00:0499 -  -  -  -  ;
  128 00:0499 -  -  -  -  ;		Date			Notes
  129 00:0499 -  -  -  -  ;		==== 			=====
  130 00:0499 -  -  -  -  ;
  131 00:0499 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:0499 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0499 -  -  -  -  ; ***************************************************************************************
    2 00:0499 -  -  -  -  ; ***************************************************************************************
    3 00:0499 -  -  -  -  ;
    4 00:0499 -  -  -  -  ;		Name : 		utility.asm
    5 00:0499 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0499 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0499 -  -  -  -  ;		Reviewed :	No
    8 00:0499 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0499 -  -  -  -  ;
   10 00:0499 -  -  -  -  ; ***************************************************************************************
   11 00:0499 -  -  -  -  ; ***************************************************************************************
   12 00:0499 -  -  -  -  
   13 00:0499 -  -  -  -  ; ***************************************************************************************
   14 00:0499 -  -  -  -  ;
   15 00:0499 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0499 -  -  -  -  ;
   17 00:0499 -  -  -  -  ; ***************************************************************************************
   18 00:0499 -  -  -  -  
   19 00:0499 -  -  -  -  SwapHLDE:
   20 00:0499 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:049A D9 -  -  -  			exx
   22 00:049B EB -  -  -  			ex 		de,hl
   23 00:049C D9 -  -  -  			exx
   24 00:049D 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:049E 41 -  -  -  			ld 		b,c
   26 00:049F 4F -  -  -  			ld 		c,a
   27 00:04A0 C9 -  -  -  			ret
   28 00:04A1 -  -  -  -  
   29 00:04A1 -  -  -  -  ; ***************************************************************************************
   30 00:04A1 -  -  -  -  ;
   31 00:04A1 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:04A1 -  -  -  -  ;
   33 00:04A1 -  -  -  -  ; ***************************************************************************************
   34 00:04A1 -  -  -  -  
   35 00:04A1 -  -  -  -  DereferenceBoth:
   36 00:04A1 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:04A3 C4 7A 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:04A7 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:04A9 C8 -  -  -  			ret 	z
   40 00:04AA CD 99 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:04AE CD 7A 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:04B2 CD 99 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:04B6 C9 -  -  -  			ret
   44 00:04B7 -  -  -  -  
   45 00:04B7 -  -  -  -  ; ***************************************************************************************
   46 00:04B7 -  -  -  -  ;
   47 00:04B7 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:04B7 -  -  -  -  ;
   49 00:04B7 -  -  -  -  ; ***************************************************************************************
   50 00:04B7 -  -  -  -  
   51 00:04B7 -  -  -  -  NegateHLHL:	
   52 00:04B7 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:04B9 C2 72 03 00 			jp 		nz,TypeMismatch
   54 00:04BD CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:04BF C4 7A 05 00 			call 	nz,Dereference 			; if required.
   56 00:04C3 CD 08 0E 00 			call 	Int32Negate
   57 00:04C7 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:04C8 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:04C8 -  -  -  -  ; ***************************************************************************************
    2 00:04C8 -  -  -  -  ; ***************************************************************************************
    3 00:04C8 -  -  -  -  ;
    4 00:04C8 -  -  -  -  ;		Name : 		expression.asm
    5 00:04C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04C8 -  -  -  -  ;		Reviewed :	None
    8 00:04C8 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:04C8 -  -  -  -  ;
   10 00:04C8 -  -  -  -  ; ***************************************************************************************
   11 00:04C8 -  -  -  -  ; ***************************************************************************************
   12 00:04C8 -  -  -  -  
   13 00:04C8 -  -  -  -  ; ***************************************************************************************
   14 00:04C8 -  -  -  -  ;
   15 00:04C8 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:04C8 -  -  -  -  ;
   17 00:04C8 -  -  -  -  ; ***************************************************************************************
   18 00:04C8 -  -  -  -  
   19 00:04C8 -  -  -  -  EvaluateAtPrecedence0:
   20 00:04C8 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:04C9 -  -  -  -  EvaluateAtPrecedence:
   22 00:04C9 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:04CA -  -  -  -  		;
   24 00:04CA -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:04CA -  -  -  -  		;
   26 00:04CA CD D6 05 00 		call 	EvaluateTerm 				; get term
   27 00:04CE -  -  -  -  		;
   28 00:04CE -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:04CE -  -  -  -  		;
   30 00:04CE D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:04CF -  -  -  -  _EAPLoop:
   32 00:04CF DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:04D2 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:04D4 D8 -  -  -  		ret 	c
   35 00:04D5 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:04D7 D0 -  -  -  		ret 	nc
   37 00:04D8 -  -  -  -  		;
   38 00:04D8 -  -  -  -  		; 		Get the precedence.
   39 00:04D8 -  -  -  -  		;
   40 00:04D8 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:04D9 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:04DB 21 E0 09 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:04DF B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:04E0 6F -  -  -  		ld 		l,a
   45 00:04E1 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:04E2 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:04E3 -  -  -  -  		;
   48 00:04E3 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:04E3 -  -  -  -  		;
   50 00:04E3 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:04E4 BB -  -  -  		cp 		e
   52 00:04E5 D0 -  -  -  		ret 	nc
   53 00:04E6 -  -  -  -  
   54 00:04E6 -  -  -  -  		;
   55 00:04E6 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:04E6 -  -  -  -  		;
   57 00:04E6 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:04E7 -  -  -  -  		;
   59 00:04E7 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:04EA F5 -  -  -  		push 	af
   61 00:04EB -  -  -  -  		;
   62 00:04EB C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:04EC D9 -  -  -  		exx 								; save HL'
   64 00:04ED E5 -  -  -  		push 	hl
   65 00:04EE D9 -  -  -  		exx 								
   66 00:04EF E5 -  -  -  		push 	hl 							; save HL
   67 00:04F0 -  -  -  -  		;
   68 00:04F0 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:04F2 -  -  -  -  		;
   70 00:04F2 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:04F2 -  -  -  -  		;
   72 00:04F2 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:04F3 CD C9 04 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:04F7 -  -  -  -  		;
   75 00:04F7 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:04F7 -  -  -  -  		;
   77 00:04F7 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:04F8 -  -  -  -  
   79 00:04F8 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:04F9 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:04FA D9 -  -  -  		exx
   82 00:04FB EB -  -  -  		ex 		de,hl
   83 00:04FC E1 -  -  -  		pop 	hl
   84 00:04FD D9 -  -  -  		exx
   85 00:04FE C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:04FF 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:0500 -  -  -  -  		;
   88 00:0500 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:0500 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:0500 -  -  -  -  		;
   91 00:0500 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:0501 -  -  -  -  		;
   93 00:0501 -  -  -  -  		; 		Call the binary operator in A.
   94 00:0501 -  -  -  -  		;
   95 00:0501 D5 -  -  -  		push 	de
   96 00:0502 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0503 E6 7F 21 00 
              00 00 6F 29 
              29 11 2C 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0518 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0519 D1 -  -  -  		pop 	de 							; restore DE
  100 00:051A CD 60 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:051E -  -  -  -  		;
  102 00:051E D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:051F -  -  -  -  		;
  104 00:051F 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:0521 -  -  -  -  
  106 00:0521 -  -  -  -  ; ***************************************************************************************
  107 00:0521 -  -  -  -  ;
  108 00:0521 -  -  -  -  ;									Changes and Updates
  109 00:0521 -  -  -  -  ;
  110 00:0521 -  -  -  -  ; ***************************************************************************************
  111 00:0521 -  -  -  -  ;
  112 00:0521 -  -  -  -  ;		Date			Notes
  113 00:0521 -  -  -  -  ;		==== 			=====
  114 00:0521 -  -  -  -  ;
  115 00:0521 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0521 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:0521 -  -  -  -  ; ***************************************************************************************
    2 00:0521 -  -  -  -  ; ***************************************************************************************
    3 00:0521 -  -  -  -  ;
    4 00:0521 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:0521 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0521 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0521 -  -  -  -  ;		Reviewed :	No
    8 00:0521 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:0521 -  -  -  -  ;
   10 00:0521 -  -  -  -  ; ***************************************************************************************
   11 00:0521 -  -  -  -  ; ***************************************************************************************
   12 00:0521 -  -  -  -  
   13 00:0521 -  -  -  -  ; ***************************************************************************************
   14 00:0521 -  -  -  -  ;
   15 00:0521 -  -  -  -  ; 								Evaluate an integer term
   16 00:0521 -  -  -  -  ;
   17 00:0521 -  -  -  -  ; ***************************************************************************************
   18 00:0521 -  -  -  -  
   19 00:0521 -  -  -  -  EvaluateIntegerTerm:
   20 00:0521 CD D6 05 00 		call 	EvaluateTerm
   21 00:0525 CD 7A 05 00 		call 	DeReference
   22 00:0529 CB 41 -  -  		bit 	CIsString,c
   23 00:052B C8 -  -  -  		ret 	z
   24 00:052C C3 72 03 00 		jp 		TypeMismatch
   25 00:0530 -  -  -  -  
   26 00:0530 -  -  -  -  ; ***************************************************************************************
   27 00:0530 -  -  -  -  ;
   28 00:0530 -  -  -  -  ; 								Evaluate a string term
   29 00:0530 -  -  -  -  ;
   30 00:0530 -  -  -  -  ; ***************************************************************************************
   31 00:0530 -  -  -  -  
   32 00:0530 -  -  -  -  EvaluateStringTerm:
   33 00:0530 CD D6 05 00 		call 	EvaluateTerm
   34 00:0534 CD 7A 05 00 		call 	DeReference
   35 00:0538 CB 41 -  -  		bit 	CIsString,c
   36 00:053A C0 -  -  -  		ret 	nz
   37 00:053B C3 72 03 00 		jp 		TypeMismatch
   38 00:053F -  -  -  -  
   39 00:053F -  -  -  -  ; ***************************************************************************************
   40 00:053F -  -  -  -  ;
   41 00:053F -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:053F -  -  -  -  ;
   43 00:053F -  -  -  -  ; ***************************************************************************************
   44 00:053F -  -  -  -  
   45 00:053F -  -  -  -  EvaluateValue:
   46 00:053F CD C8 04 00 		call 	EvaluateAtPrecedence0
   47 00:0543 C3 7A 05 00 		jp 		Dereference
   48 00:0547 -  -  -  -  
   49 00:0547 -  -  -  -  ; ***************************************************************************************
   50 00:0547 -  -  -  -  ;
   51 00:0547 -  -  -  -  ; 									Evaluate a number
   52 00:0547 -  -  -  -  ;
   53 00:0547 -  -  -  -  ; ***************************************************************************************
   54 00:0547 -  -  -  -  
   55 00:0547 -  -  -  -  EvaluateInteger:
   56 00:0547 CD 3F 05 00 		call 	EvaluateValue
   57 00:054B CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:054D C8 -  -  -  		ret 	z
   59 00:054E C3 72 03 00 		jp 		TypeMismatch
   60 00:0552 -  -  -  -  
   61 00:0552 -  -  -  -  ; ***************************************************************************************
   62 00:0552 -  -  -  -  ;
   63 00:0552 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:0552 -  -  -  -  ;
   65 00:0552 -  -  -  -  ; ***************************************************************************************
   66 00:0552 -  -  -  -  
   67 00:0552 -  -  -  -  Evaluate8BitInteger:
   68 00:0552 CD 47 05 00 		call 	EvaluateInteger
   69 00:0556 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:0557 7C -  -  -  		ld 		a,h
   71 00:0558 B5 -  -  -  		or 		l
   72 00:0559 D9 -  -  -  		exx 	
   73 00:055A B4 -  -  -  		or 		h
   74 00:055B C2 78 03 00 		jp 		nz,BadValue
   75 00:055F 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:0560 C9 -  -  -  		ret
   77 00:0561 -  -  -  -  		
   78 00:0561 -  -  -  -  ; ***************************************************************************************
   79 00:0561 -  -  -  -  ;
   80 00:0561 -  -  -  -  ; 									Evaluate a string
   81 00:0561 -  -  -  -  ;
   82 00:0561 -  -  -  -  ; ***************************************************************************************
   83 00:0561 -  -  -  -  
   84 00:0561 -  -  -  -  EvaluateStringOnly:
   85 00:0561 CD 3F 05 00 		call 	EvaluateValue
   86 00:0565 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:0567 CA 72 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:056B C9 -  -  -  		ret
   89 00:056C -  -  -  -  
   90 00:056C -  -  -  -  ; ***************************************************************************************
   91 00:056C -  -  -  -  ;
   92 00:056C -  -  -  -  ; 								Return 8/16 bit constant
   93 00:056C -  -  -  -  ;
   94 00:056C -  -  -  -  ; ***************************************************************************************
   95 00:056C -  -  -  -  
   96 00:056C -  -  -  -  Return8BitConstant:
   97 00:056C 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:0570 6F -  -  -  		ld 		l,a
   99 00:0571 -  -  -  -  Return16BitConstant:
  100 00:0571 D9 -  -  -  		exx 								; clear HL'
  101 00:0572 21 00 00 00 		ld 		hl,0
  102 00:0576 D9 -  -  -  		exx
  103 00:0577 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0579 C9 -  -  -  		ret
  105 00:057A -  -  -  -  
  106 00:057A -  -  -  -  ; ***************************************************************************************
  107 00:057A -  -  -  -  ;
  108 00:057A -  -  -  -  ;									Changes and Updates
  109 00:057A -  -  -  -  ;
  110 00:057A -  -  -  -  ; ***************************************************************************************
  111 00:057A -  -  -  -  ;
  112 00:057A -  -  -  -  ;		Date			Notes
  113 00:057A -  -  -  -  ;		==== 			=====
  114 00:057A -  -  -  -  ;
  115 00:057A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:057A -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:057A -  -  -  -  ; ***************************************************************************************
    2 00:057A -  -  -  -  ; ***************************************************************************************
    3 00:057A -  -  -  -  ;
    4 00:057A -  -  -  -  ;		Name : 		reference.asm
    5 00:057A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:057A -  -  -  -  ;		Date : 		1st May 2022
    7 00:057A -  -  -  -  ;		Reviewed :	No
    8 00:057A -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:057A -  -  -  -  ;
   10 00:057A -  -  -  -  ; ***************************************************************************************
   11 00:057A -  -  -  -  ; ***************************************************************************************
   12 00:057A -  -  -  -  
   13 00:057A -  -  -  -  ; ***************************************************************************************
   14 00:057A -  -  -  -  ;
   15 00:057A -  -  -  -  ; 									Dereference HL'HL C
   16 00:057A -  -  -  -  ;
   17 00:057A -  -  -  -  ; ***************************************************************************************
   18 00:057A -  -  -  -  
   19 00:057A -  -  -  -  Dereference:
   20 00:057A CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:057C C8 -  -  -  		ret 	z
   22 00:057D -  -  -  -  
   23 00:057D CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:057F -  -  -  -  		
   25 00:057F CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0581 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0583 -  -  -  -  
   28 00:0583 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:0585 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:0587 -  -  -  -  
   31 00:0587 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0588 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:058A D9 -  -  -  		exx
   34 00:058B E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:058C 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:058D 23 -  -  -  		inc  	hl
   37 00:058E ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:0590 D9 -  -  -  		exx 								; fix back
   39 00:0591 C9 -  -  -  		ret
   40 00:0592 -  -  -  -  
   41 00:0592 -  -  -  -  _DeRefByte:		
   42 00:0592 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0593 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:0597 6F -  -  -  		ld	 	l,a
   45 00:0598 D9 -  -  -  		exx
   46 00:0599 21 00 00 00 		ld 		hl,$0000
   47 00:059D D9 -  -  -  		exx
   48 00:059E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:05A0 C9 -  -  -  		ret
   50 00:05A1 -  -  -  -  
   51 00:05A1 -  -  -  -  _DRInternal:
   52 00:05A1 3E 05 C3 14 
              03 00 -  -  		ERR_DISABLED
   53 00:05A7 -  -  -  -  
   54 00:05A7 -  -  -  -  ; ***************************************************************************************
   55 00:05A7 -  -  -  -  ;
   56 00:05A7 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:05A7 -  -  -  -  ;
   58 00:05A7 -  -  -  -  ; ***************************************************************************************
   59 00:05A7 -  -  -  -  
   60 00:05A7 -  -  -  -  DRConvertHLHLToAddress:
   61 00:05A7 -  -  -  -  		#ifdef EZ80
   62 00:05A7 22 66 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:05AB D9 -  -  -  		exx
   64 00:05AC 22 68 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:05B0 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:05B4 D9 -  -  -  		exx
   67 00:05B5 2A 66 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:05B9 -  -  -  -  		#endif
   69 00:05B9 C9 -  -  -  		ret
   70 00:05BA -  -  -  -  
   71 00:05BA -  -  -  -  ; ***************************************************************************************
   72 00:05BA -  -  -  -  ;
   73 00:05BA -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:05BA -  -  -  -  ;
   75 00:05BA -  -  -  -  ; ***************************************************************************************
   76 00:05BA -  -  -  -  
   77 00:05BA -  -  -  -  DRConvertAddressToHLHL:
   78 00:05BA -  -  -  -  		#ifdef EZ80
   79 00:05BA 22 66 00 00 		ld 		(AConvert),hl
   80 00:05BE 21 00 00 00 		ld 		hl,$0000
   81 00:05C2 22 69 00 00 		ld 		(AConvert+3),hl
   82 00:05C6 D9 -  -  -  		exx
   83 00:05C7 2A 68 00 00 		ld 		hl,(AConvert+2)
   84 00:05CB D9 -  -  -  		exx
   85 00:05CC AF -  -  -  		xor 	a
   86 00:05CD 32 68 00 00 		ld 		(AConvert+2),a
   87 00:05D1 2A 66 00 00 		ld 		hl,(AConvert)
   88 00:05D5 -  -  -  -  		#endif
   89 00:05D5 C9 -  -  -  		ret
   90 00:05D6 -  -  -  -  
   91 00:05D6 -  -  -  -  ; ***************************************************************************************
   92 00:05D6 -  -  -  -  ;
   93 00:05D6 -  -  -  -  ;									Changes and Updates
   94 00:05D6 -  -  -  -  ;
   95 00:05D6 -  -  -  -  ; ***************************************************************************************
   96 00:05D6 -  -  -  -  ;
   97 00:05D6 -  -  -  -  ;		Date			Notes
   98 00:05D6 -  -  -  -  ;		==== 			=====
   99 00:05D6 -  -  -  -  ;
  100 00:05D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:05D6 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:05D6 -  -  -  -  ; ***************************************************************************************
    2 00:05D6 -  -  -  -  ; ***************************************************************************************
    3 00:05D6 -  -  -  -  ;
    4 00:05D6 -  -  -  -  ;		Name : 		term.asm
    5 00:05D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05D6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05D6 -  -  -  -  ;		Reviewed :	No
    8 00:05D6 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:05D6 -  -  -  -  ;
   10 00:05D6 -  -  -  -  ; ***************************************************************************************
   11 00:05D6 -  -  -  -  ; ***************************************************************************************
   12 00:05D6 -  -  -  -  
   13 00:05D6 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:05D6             		add_hlhl_16
   15 00:05D6             		exx
   16 00:05D6             		adc_hlhl_16
   17 00:05D6             		exx
   18 00:05D6             #endmacro
   19 00:05D6 -  -  -  -  
   20 00:05D6 -  -  -  -  ; ***************************************************************************************
   21 00:05D6 -  -  -  -  ;
   22 00:05D6 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:05D6 -  -  -  -  ;
   24 00:05D6 -  -  -  -  ; ***************************************************************************************
   25 00:05D6 -  -  -  -  ;
   26 00:05D6 -  -  -  -  ; 		Terms can be:
   27 00:05D6 -  -  -  -  ;
   28 00:05D6 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:05D6 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:05D6 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:05D6 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:05D6 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:05D6 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:05D6 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:05D6 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:05D6 -  -  -  -  ; 														reference of some sort.
   37 00:05D6 -  -  -  -  ;
   38 00:05D6 -  -  -  -  ; ***************************************************************************************
   39 00:05D6 -  -  -  -  
   40 00:05D6 -  -  -  -  EvaluateTerm:		
   41 00:05D6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:05D8 D9 -  -  -  		exx
   43 00:05D9 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:05DD D9 -  -  -  		exx
   45 00:05DE 21 00 00 00 		ld 		hl,$0000		
   46 00:05E2 -  -  -  -  		;
   47 00:05E2 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:05E5 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:05E7 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:05E9 DA A1 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:05ED CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:05EF C2 45 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:05F3 -  -  -  -  		;
   54 00:05F3 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:05F3 -  -  -  -  		;
   56 00:05F3 -  -  -  -  _ETIntegerConstant:
   57 00:05F3 -  -  -  -  		;
   58 00:05F3 -  -  -  -  _ETIntegerLoop:		
   59 00:05F3 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:05F6 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:05F8 B5 -  -  -  		or 		l 							; or into L
   62 00:05F9 6F -  -  -  		ld 		l,a
   63 00:05FA DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:05FC DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:05FF C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:0601 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0603 D8 -  -  -  		ret 	c
   68 00:0604 -  -  -  -  
   69 00:0604 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:060B 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0612 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0619 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:0620 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0627 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:062E -  -  -  -  
   76 00:062E 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:0630 -  -  -  -  		;
   78 00:0630 -  -  -  -  		; 		Found the $3F string marker.
   79 00:0630 -  -  -  -  		;
   80 00:0630 -  -  -  -  _ETStringMarker:		
   81 00:0630 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:0632 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:0634 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:0636 E1 -  -  -  		pop 	hl
   85 00:0637 11 00 00 00 		ld 		de,$0000
   86 00:063B DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:063E DD 19 -  -  		add 	ix,de
   88 00:0640 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0642 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:0644 C9 -  -  -  		ret
   91 00:0645 -  -  -  -  		;
   92 00:0645 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:0645 -  -  -  -  		;
   94 00:0645 -  -  -  -  _ETFoundKeyword:
   95 00:0645 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:0647 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0649 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:064B FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:064D 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:064F -  -  -  -  		;
  101 00:064F -  -  -  -  		;		Unary group 0
  102 00:064F -  -  -  -  		;
  103 00:064F E6 7F 21 00 
              00 00 6F 29 
              29 11 2C 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:0664 C3 60 00 00 		jp 		JumpCode 					; and go there.
  105 00:0668 -  -  -  -  
  106 00:0668 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0668 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:066A 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:066C -  -  -  -  		;
  110 00:066C -  -  -  -  		; 		- term
  111 00:066C -  -  -  -  		;
  112 00:066C CD 21 05 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:0670 CD B7 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:0674 C9 -  -  -  		ret
  115 00:0675 -  -  -  -  		;
  116 00:0675 -  -  -  -  		;		! ? indirection check
  117 00:0675 -  -  -  -  		;
  118 00:0675 -  -  -  -  _ETCheckIndirection:	
  119 00:0675 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:0677 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0679 FE 83 -  -  		cp 		KWD_PLING
  122 00:067B C2 7E 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:067F -  -  -  -  		;
  124 00:067F -  -  -  -  		; 		! ? indirection
  125 00:067F -  -  -  -  		;
  126 00:067F -  -  -  -  _ETIndirection:
  127 00:067F F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:0680 CD D6 05 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:0684 CD 7A 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0688 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:068A 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:068C CD A7 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:0690 F1 -  -  -  		pop 	af 							; get type back
  134 00:0691 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:0693 CB F9 -  -  		set 	CIsReference,c
  136 00:0695 FE 83 -  -  		cp 		KWD_PLING
  137 00:0697 C8 -  -  -  		ret 	z
  138 00:0698 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:069A C9 -  -  -  		ret
  140 00:069B -  -  -  -  _ETStringIndirect:
  141 00:069B 3E 02 C3 14 
              03 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:06A1 -  -  -  -  		;
  143 00:06A1 -  -  -  -  		; 		Found an identifier.
  144 00:06A1 -  -  -  -  		;
  145 00:06A1 -  -  -  -  _ETVariable:
  146 00:06A1 CD F5 08 00 		call 	FindVariable 				; find the variable.
  147 00:06A5 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:06A6 3E 10 C3 14 
              03 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:06AC -  -  -  -  		
  150 00:06AC -  -  -  -  ; ***************************************************************************************
  151 00:06AC -  -  -  -  ;
  152 00:06AC -  -  -  -  ;									Changes and Updates
  153 00:06AC -  -  -  -  ;
  154 00:06AC -  -  -  -  ; ***************************************************************************************
  155 00:06AC -  -  -  -  ;
  156 00:06AC -  -  -  -  ;		Date			Notes
  157 00:06AC -  -  -  -  ;		==== 			=====
  158 00:06AC -  -  -  -  ;
  159 00:06AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:06AC -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:06AC -  -  -  -  ; ***************************************************************************************
    2 00:06AC -  -  -  -  ; ***************************************************************************************
    3 00:06AC -  -  -  -  ;
    4 00:06AC -  -  -  -  ;		Name : 		abs.asm
    5 00:06AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06AC -  -  -  -  ;		Reviewed :	No
    8 00:06AC -  -  -  -  ;		Purpose :	Absolute value 
    9 00:06AC -  -  -  -  ;
   10 00:06AC -  -  -  -  ; ***************************************************************************************
   11 00:06AC -  -  -  -  ; ***************************************************************************************
   12 00:06AC -  -  -  -  
   13 00:06AC -  -  -  -  ; ***************************************************************************************
   14 00:06AC -  -  -  -  ;
   15 00:06AC -  -  -  -  ;								abs( unary function
   16 00:06AC -  -  -  -  ;
   17 00:06AC -  -  -  -  ; ***************************************************************************************
   18 00:06AC -  -  -  -  
   19 00:06AC -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:06AC CD 21 05 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:06B0 D9 -  -  -  		exx 								; test MSB
   22 00:06B1 CB 7C -  -  		bit 	7,h
   23 00:06B3 D9 -  -  -  		exx
   24 00:06B4 C4 B7 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:06B8 C9 -  -  -  		ret
   26 00:06B9 -  -  -  -  
   27 00:06B9 -  -  -  -  ; ***************************************************************************************
   28 00:06B9 -  -  -  -  ;
   29 00:06B9 -  -  -  -  ;									Changes and Updates
   30 00:06B9 -  -  -  -  ;
   31 00:06B9 -  -  -  -  ; ***************************************************************************************
   32 00:06B9 -  -  -  -  ;
   33 00:06B9 -  -  -  -  ;		Date			Notes
   34 00:06B9 -  -  -  -  ;		==== 			=====
   35 00:06B9 -  -  -  -  ;
   36 00:06B9 -  -  -  -  ; ***************************************************************************************
   37 00:06B9 -  -  -  -  		
Listing for file "_build.asm"
   35 00:06B9 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:06B9 -  -  -  -  ; ***************************************************************************************
    2 00:06B9 -  -  -  -  ; ***************************************************************************************
    3 00:06B9 -  -  -  -  ;
    4 00:06B9 -  -  -  -  ;		Name : 		asc.asm
    5 00:06B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06B9 -  -  -  -  ;		Reviewed :	No
    8 00:06B9 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:06B9 -  -  -  -  ;
   10 00:06B9 -  -  -  -  ; ***************************************************************************************
   11 00:06B9 -  -  -  -  ; ***************************************************************************************
   12 00:06B9 -  -  -  -  
   13 00:06B9 -  -  -  -  ; ***************************************************************************************
   14 00:06B9 -  -  -  -  ;
   15 00:06B9 -  -  -  -  ;								Asc unary function
   16 00:06B9 -  -  -  -  ;
   17 00:06B9 -  -  -  -  ; ***************************************************************************************
   18 00:06B9 -  -  -  -  
   19 00:06B9 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:06B9 CD 30 05 00 		call	EvaluateStringTerm			; Get string
   21 00:06BD 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:06BE C3 6C 05 00 		jp 		Return8BitConstant
   23 00:06C2 -  -  -  -  
   24 00:06C2 -  -  -  -  ; ***************************************************************************************
   25 00:06C2 -  -  -  -  ;
   26 00:06C2 -  -  -  -  ;									Changes and Updates
   27 00:06C2 -  -  -  -  ;
   28 00:06C2 -  -  -  -  ; ***************************************************************************************
   29 00:06C2 -  -  -  -  ;
   30 00:06C2 -  -  -  -  ;		Date			Notes
   31 00:06C2 -  -  -  -  ;		==== 			=====
   32 00:06C2 -  -  -  -  ;
   33 00:06C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:06C2 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:06C2 -  -  -  -  ; ***************************************************************************************
    2 00:06C2 -  -  -  -  ; ***************************************************************************************
    3 00:06C2 -  -  -  -  ;
    4 00:06C2 -  -  -  -  ;		Name : 		chr.asm
    5 00:06C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06C2 -  -  -  -  ;		Reviewed :	No
    8 00:06C2 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:06C2 -  -  -  -  ;
   10 00:06C2 -  -  -  -  ; ***************************************************************************************
   11 00:06C2 -  -  -  -  ; ***************************************************************************************
   12 00:06C2 -  -  -  -  
   13 00:06C2 -  -  -  -  ; ***************************************************************************************
   14 00:06C2 -  -  -  -  ;
   15 00:06C2 -  -  -  -  ;								Chr$() unary function
   16 00:06C2 -  -  -  -  ;
   17 00:06C2 -  -  -  -  ; ***************************************************************************************
   18 00:06C2 -  -  -  -  
   19 00:06C2 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:06C2 CD EC 02 00 		call 	CheckDollar
   21 00:06C6 CD 21 05 00 		call 	EvaluateIntegerTerm
   22 00:06CA 7D -  -  -  		ld 		a,l 						; get character
   23 00:06CB 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:06CD 21 99 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:06D1 36 0D -  -  		ld 		(hl),13
   26 00:06D3 2B -  -  -  		dec 	hl
   27 00:06D4 77 -  -  -  		ld 		(hl),a
   28 00:06D5 C9 -  -  -  		ret
   29 00:06D6 -  -  -  -  
   30 00:06D6 -  -  -  -  ; ***************************************************************************************
   31 00:06D6 -  -  -  -  ;
   32 00:06D6 -  -  -  -  ;									Changes and Updates
   33 00:06D6 -  -  -  -  ;
   34 00:06D6 -  -  -  -  ; ***************************************************************************************
   35 00:06D6 -  -  -  -  ;
   36 00:06D6 -  -  -  -  ;		Date			Notes
   37 00:06D6 -  -  -  -  ;		==== 			=====
   38 00:06D6 -  -  -  -  ;
   39 00:06D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:06D6 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:06D6 -  -  -  -  ; ***************************************************************************************
    2 00:06D6 -  -  -  -  ; ***************************************************************************************
    3 00:06D6 -  -  -  -  ;
    4 00:06D6 -  -  -  -  ;		Name : 		len.asm
    5 00:06D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06D6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06D6 -  -  -  -  ;		Reviewed :	None
    8 00:06D6 -  -  -  -  ;		Purpose :	String Length
    9 00:06D6 -  -  -  -  ;
   10 00:06D6 -  -  -  -  ; ***************************************************************************************
   11 00:06D6 -  -  -  -  ; ***************************************************************************************
   12 00:06D6 -  -  -  -  
   13 00:06D6 -  -  -  -  ; ***************************************************************************************
   14 00:06D6 -  -  -  -  ;
   15 00:06D6 -  -  -  -  ;								Len unary function
   16 00:06D6 -  -  -  -  ;
   17 00:06D6 -  -  -  -  ; ***************************************************************************************
   18 00:06D6 -  -  -  -  
   19 00:06D6 -  -  -  -  Unary_Len:	;; [len]
   20 00:06D6 CD 30 05 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:06DA EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:06DB CD 1F 04 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:06DF -  -  -  -  _ULCount:
   24 00:06DF 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:06E0 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:06E2 D8 -  -  -  		ret 	c
   27 00:06E3 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:06E4 13 -  -  -  		inc 	de
   29 00:06E5 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:06E7 -  -  -  -  
   31 00:06E7 -  -  -  -  ; ***************************************************************************************
   32 00:06E7 -  -  -  -  ;
   33 00:06E7 -  -  -  -  ;									Changes and Updates
   34 00:06E7 -  -  -  -  ;
   35 00:06E7 -  -  -  -  ; ***************************************************************************************
   36 00:06E7 -  -  -  -  ;
   37 00:06E7 -  -  -  -  ;		Date			Notes
   38 00:06E7 -  -  -  -  ;		==== 			=====
   39 00:06E7 -  -  -  -  ;
   40 00:06E7 -  -  -  -  ; ***************************************************************************************
   41 00:06E7 -  -  -  -  		
Listing for file "_build.asm"
   38 00:06E7 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:06E7 -  -  -  -  ; ***************************************************************************************
    2 00:06E7 -  -  -  -  ; ***************************************************************************************
    3 00:06E7 -  -  -  -  ;
    4 00:06E7 -  -  -  -  ;		Name : 		makestring.asm
    5 00:06E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06E7 -  -  -  -  ;		Reviewed :	No
    8 00:06E7 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:06E7 -  -  -  -  ;
   10 00:06E7 -  -  -  -  ; ***************************************************************************************
   11 00:06E7 -  -  -  -  ; ***************************************************************************************
   12 00:06E7 -  -  -  -  
   13 00:06E7 -  -  -  -  ; ***************************************************************************************
   14 00:06E7 -  -  -  -  ;
   15 00:06E7 -  -  -  -  ;								Str$() unary function
   16 00:06E7 -  -  -  -  ;
   17 00:06E7 -  -  -  -  ; ***************************************************************************************
   18 00:06E7 -  -  -  -  
   19 00:06E7 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:06E7 CD 21 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:06EB CD A7 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:06EF 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:06F1 C9 -  -  -  		ret
   24 00:06F2 -  -  -  -  
   25 00:06F2 -  -  -  -  ; ***************************************************************************************
   26 00:06F2 -  -  -  -  ;
   27 00:06F2 -  -  -  -  ;									Changes and Updates
   28 00:06F2 -  -  -  -  ;
   29 00:06F2 -  -  -  -  ; ***************************************************************************************
   30 00:06F2 -  -  -  -  ;
   31 00:06F2 -  -  -  -  ;		Date			Notes
   32 00:06F2 -  -  -  -  ;		==== 			=====
   33 00:06F2 -  -  -  -  ;
   34 00:06F2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:06F2 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:06F2 -  -  -  -  ; ***************************************************************************************
    2 00:06F2 -  -  -  -  ; ***************************************************************************************
    3 00:06F2 -  -  -  -  ;
    4 00:06F2 -  -  -  -  ;		Name : 		not.asm
    5 00:06F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06F2 -  -  -  -  ;		Date : 		5th June 2023
    7 00:06F2 -  -  -  -  ;		Reviewed :	No
    8 00:06F2 -  -  -  -  ;		Purpose :	Logical not
    9 00:06F2 -  -  -  -  ;
   10 00:06F2 -  -  -  -  ; ***************************************************************************************
   11 00:06F2 -  -  -  -  ; ***************************************************************************************
   12 00:06F2 -  -  -  -  
   13 00:06F2 -  -  -  -  ; ***************************************************************************************
   14 00:06F2 -  -  -  -  ;
   15 00:06F2 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:06F2 -  -  -  -  ;
   17 00:06F2 -  -  -  -  ; ***************************************************************************************
   18 00:06F2 -  -  -  -  
   19 00:06F2 -  -  -  -  Unary_Not:		;; [not]
   20 00:06F2 CD 21 05 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:06F6 CD FF 06 00 		call 	__UNSwap 					; not and swap twice.
   22 00:06FA CD FF 06 00 		call 	__UNSwap		
   23 00:06FE C9 -  -  -  		ret
   24 00:06FF -  -  -  -  
   25 00:06FF -  -  -  -  __UNSwap:
   26 00:06FF 7C -  -  -  		ld 		a,h
   27 00:0700 2F -  -  -  		cpl
   28 00:0701 67 -  -  -  		ld 		h,a
   29 00:0702 7D -  -  -  		ld 		a,l
   30 00:0703 2F -  -  -  		cpl 	
   31 00:0704 6F -  -  -  		ld 		l,a
   32 00:0705 D9 -  -  -  		exx
   33 00:0706 C9 -  -  -  		ret
   34 00:0707 -  -  -  -  
   35 00:0707 -  -  -  -  ; ***************************************************************************************
   36 00:0707 -  -  -  -  ;
   37 00:0707 -  -  -  -  ;									Changes and Updates
   38 00:0707 -  -  -  -  ;
   39 00:0707 -  -  -  -  ; ***************************************************************************************
   40 00:0707 -  -  -  -  ;
   41 00:0707 -  -  -  -  ;		Date			Notes
   42 00:0707 -  -  -  -  ;		==== 			=====
   43 00:0707 -  -  -  -  ;
   44 00:0707 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:0707 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0707 -  -  -  -  ; ***************************************************************************************
    2 00:0707 -  -  -  -  ; ***************************************************************************************
    3 00:0707 -  -  -  -  ;
    4 00:0707 -  -  -  -  ;		Name : 		page.asm
    5 00:0707 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0707 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0707 -  -  -  -  ;		Reviewed :	No
    8 00:0707 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0707 -  -  -  -  ;
   10 00:0707 -  -  -  -  ; ***************************************************************************************
   11 00:0707 -  -  -  -  ; ***************************************************************************************
   12 00:0707 -  -  -  -  
   13 00:0707 -  -  -  -  ; ***************************************************************************************
   14 00:0707 -  -  -  -  ;
   15 00:0707 -  -  -  -  ;							page unary function (no bracket)
   16 00:0707 -  -  -  -  ;
   17 00:0707 -  -  -  -  ; ***************************************************************************************
   18 00:0707 -  -  -  -  
   19 00:0707 -  -  -  -  Unary_Page:	;; [page]
   20 00:0707 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:070B D9 -  -  -  			exx
   22 00:070C 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:0710 D9 -  -  -  			exx
   24 00:0711 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0713 C9 -  -  -  			ret
   26 00:0714 -  -  -  -  
   27 00:0714 -  -  -  -  ; ***************************************************************************************
   28 00:0714 -  -  -  -  ;
   29 00:0714 -  -  -  -  ;									Changes and Updates
   30 00:0714 -  -  -  -  ;
   31 00:0714 -  -  -  -  ; ***************************************************************************************
   32 00:0714 -  -  -  -  ;
   33 00:0714 -  -  -  -  ;		Date			Notes
   34 00:0714 -  -  -  -  ;		==== 			=====
   35 00:0714 -  -  -  -  ;
   36 00:0714 -  -  -  -  ; ***************************************************************************************
   37 00:0714 -  -  -  -  			
Listing for file "_build.asm"
   41 00:0714 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0714 -  -  -  -  ; ***************************************************************************************
    2 00:0714 -  -  -  -  ; ***************************************************************************************
    3 00:0714 -  -  -  -  ;
    4 00:0714 -  -  -  -  ;		Name : 		random.asm
    5 00:0714 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0714 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0714 -  -  -  -  ;		Reviewed :	No
    8 00:0714 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0714 -  -  -  -  ;
   10 00:0714 -  -  -  -  ; ***************************************************************************************
   11 00:0714 -  -  -  -  ; ***************************************************************************************
   12 00:0714 -  -  -  -  
   13 00:0714 -  -  -  -  ; ***************************************************************************************
   14 00:0714 -  -  -  -  ;
   15 00:0714 -  -  -  -  ;								Random unary function
   16 00:0714 -  -  -  -  ;
   17 00:0714 -  -  -  -  ; ***************************************************************************************
   18 00:0714 -  -  -  -  
   19 00:0714 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0714 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:071C CD 21 05 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:0720 D9 -  -  -  		exx 								; is it -ve
   23 00:0721 CB 7C -  -  		bit 	7,h
   24 00:0723 D9 -  -  -  		exx
   25 00:0724 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:0726 22 6C 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:072A D9 -  -  -  		exx
   28 00:072B 22 70 00 00 		ld 		(RandomSeed+4),hl
   29 00:072F D9 -  -  -  		exx
   30 00:0730 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:0732 C9 -  -  -  		ret
   32 00:0733 -  -  -  -  _URDontSeed:		
   33 00:0733 -  -  -  -  
   34 00:0733 CD D7 0D 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:0737 28 1C -  -  		jr 		z,_URFail
   36 00:0739 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:073A D9 -  -  -  		exx
   38 00:073B E5 -  -  -  		push 	hl
   39 00:073C D9 -  -  -  		exx
   40 00:073D -  -  -  -  		;
   41 00:073D CD 66 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:0741 D9 -  -  -  		exx
   43 00:0742 CD 66 07 00 		call 	URandomHL
   44 00:0746 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0748 D9 -  -  -  		exx
   46 00:0749 -  -  -  -  		;
   47 00:0749 D9 -  -  -  		exx 								; restore range.
   48 00:074A D1 -  -  -  		pop 	de
   49 00:074B D9 -  -  -  		exx
   50 00:074C D1 -  -  -  		pop 	de
   51 00:074D -  -  -  -  		;
   52 00:074D CD 68 0C 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:0751 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0752 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:0754 C9 -  -  -  		ret
   56 00:0755 -  -  -  -  _URFail:
   57 00:0755 3E 03 C3 14 
              03 00 -  -  		ERR_BADVALUE
   58 00:075B -  -  -  -  ; ***************************************************************************************
   59 00:075B -  -  -  -  ;
   60 00:075B -  -  -  -  ; 									Push RNG off zero
   61 00:075B -  -  -  -  ;
   62 00:075B -  -  -  -  ; ***************************************************************************************
   63 00:075B -  -  -  -  
   64 00:075B -  -  -  -  UnaryRandomInitialise:
   65 00:075B 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:075D -  -  -  -  _URILoop:
   67 00:075D C5 -  -  -  		push 	bc
   68 00:075E CD 66 07 00 		call 	URandomHL
   69 00:0762 C1 -  -  -  		pop 	bc
   70 00:0763 10 F8 -  -  		djnz 	_URILoop
   71 00:0765 C9 -  -  -  		ret
   72 00:0766 -  -  -  -  
   73 00:0766 -  -  -  -  ; ***************************************************************************************
   74 00:0766 -  -  -  -  ;
   75 00:0766 -  -  -  -  ;							16 bit random number generator
   76 00:0766 -  -  -  -  ;
   77 00:0766 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:0766 -  -  -  -  ;		Actual author unspecified.
   79 00:0766 -  -  -  -  ;
   80 00:0766 -  -  -  -  ; ***************************************************************************************
   81 00:0766 -  -  -  -  
   82 00:0766 -  -  -  -  URandomHL:
   83 00:0766 2A 6C 00 00 	    ld 		hl,(RandomSeed)
   84 00:076A ED 5B 70 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:076F 44 -  -  -  	    ld 		b,h
   86 00:0770 4D -  -  -  	    ld 		c,l
   87 00:0771 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:0776 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:077B 2C -  -  -  	    inc 	l
   90 00:077C 09 -  -  -  	    add 	hl,bc
   91 00:077D 22 6C 00 00 	    ld 		(RandomSeed),hl
   92 00:0781 2A 70 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:0785 ED 5A -  -  	    adc 	hl,de
   94 00:0787 22 70 00 00 	    ld 		(RandomSeed+4),hl
   95 00:078B EB -  -  -  	    ex 		de,hl
   96 00:078C 2A 74 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:0790 ED 4B 78 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:0795 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:079A ED 43 78 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:079F 9F -  -  -  	    sbc 	a,a
  101 00:07A0 E6 C5 -  -  	    and 	%11000101
  102 00:07A2 AD -  -  -  	    xor 	l
  103 00:07A3 6F -  -  -  	    ld 		l,a
  104 00:07A4 22 74 00 00 	    ld 		(RandomSeed+8),hl
  105 00:07A8 EB -  -  -  	    ex 		de,hl
  106 00:07A9 09 -  -  -  	    add 	hl,bc
  107 00:07AA C9 -  -  -  	    ret		
  108 00:07AB -  -  -  -  
  109 00:07AB -  -  -  -  ; ***************************************************************************************
  110 00:07AB -  -  -  -  ;
  111 00:07AB -  -  -  -  ;									Changes and Updates
  112 00:07AB -  -  -  -  ;
  113 00:07AB -  -  -  -  ; ***************************************************************************************
  114 00:07AB -  -  -  -  ;
  115 00:07AB -  -  -  -  ;		Date			Notes
  116 00:07AB -  -  -  -  ;		==== 			=====
  117 00:07AB -  -  -  -  ;
  118 00:07AB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:07AB -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:07AB -  -  -  -  ; ***************************************************************************************
    2 00:07AB -  -  -  -  ; ***************************************************************************************
    3 00:07AB -  -  -  -  ;
    4 00:07AB -  -  -  -  ;		Name : 		sgn.asm
    5 00:07AB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07AB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07AB -  -  -  -  ;		Reviewed :	No
    8 00:07AB -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:07AB -  -  -  -  ;
   10 00:07AB -  -  -  -  ; ***************************************************************************************
   11 00:07AB -  -  -  -  ; ***************************************************************************************
   12 00:07AB -  -  -  -  
   13 00:07AB -  -  -  -  ; ***************************************************************************************
   14 00:07AB -  -  -  -  ;
   15 00:07AB -  -  -  -  ;								sgn unary function
   16 00:07AB -  -  -  -  ;
   17 00:07AB -  -  -  -  ; ***************************************************************************************
   18 00:07AB -  -  -  -  
   19 00:07AB -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:07AB CD 21 05 00 		call	EvaluateIntegerTerm 		; get value
   21 00:07AF CD D7 0D 00 		call 	Int32Zero 					; integer sgn() code
   22 00:07B3 CA 1F 04 00 		jp 		z,UnaryInt32False
   23 00:07B7 D9 -  -  -  		exx
   24 00:07B8 CB 7C -  -  		bit 	7,h
   25 00:07BA D9 -  -  -  		exx
   26 00:07BB C2 1B 04 00 		jp 		nz,UnaryInt32True
   27 00:07BF 3E 01 -  -  		ld 		a,1
   28 00:07C1 C3 6C 05 00 		jp 		Return8BitConstant
   29 00:07C5 -  -  -  -  
   30 00:07C5 -  -  -  -  ; ***************************************************************************************
   31 00:07C5 -  -  -  -  ;
   32 00:07C5 -  -  -  -  ;									Changes and Updates
   33 00:07C5 -  -  -  -  ;
   34 00:07C5 -  -  -  -  ; ***************************************************************************************
   35 00:07C5 -  -  -  -  ;
   36 00:07C5 -  -  -  -  ;		Date			Notes
   37 00:07C5 -  -  -  -  ;		==== 			=====
   38 00:07C5 -  -  -  -  ;
   39 00:07C5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:07C5 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:07C5 -  -  -  -  ; ***************************************************************************************
    2 00:07C5 -  -  -  -  ; ***************************************************************************************
    3 00:07C5 -  -  -  -  ;
    4 00:07C5 -  -  -  -  ;		Name : 		simple.asm
    5 00:07C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07C5 -  -  -  -  ;		Reviewed :	No
    8 00:07C5 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:07C5 -  -  -  -  ;
   10 00:07C5 -  -  -  -  ; ***************************************************************************************
   11 00:07C5 -  -  -  -  ; ***************************************************************************************
   12 00:07C5 -  -  -  -  
   13 00:07C5 -  -  -  -  ; ***************************************************************************************
   14 00:07C5 -  -  -  -  ;
   15 00:07C5 -  -  -  -  ;								( unary function (think about it)
   16 00:07C5 -  -  -  -  ;
   17 00:07C5 -  -  -  -  ; ***************************************************************************************
   18 00:07C5 -  -  -  -  
   19 00:07C5 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:07C5 CD C8 04 00 		call 	EvaluateAtPrecedence0
   21 00:07C9 C3 DE 02 00 		jp  	CheckRightBracket
   22 00:07CD -  -  -  -  
   23 00:07CD -  -  -  -  ; ***************************************************************************************
   24 00:07CD -  -  -  -  ;
   25 00:07CD -  -  -  -  ;									Handle &x
   26 00:07CD -  -  -  -  ;
   27 00:07CD -  -  -  -  ; ***************************************************************************************
   28 00:07CD -  -  -  -  
   29 00:07CD -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:07CD DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:07D0 E6 C0 -  -  		and 		$C0
   32 00:07D2 FE 40 -  -  		cp 			$40
   33 00:07D4 C2 7E 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:07D8 C3 D6 05 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:07DC -  -  -  -  
   36 00:07DC -  -  -  -  ; ***************************************************************************************
   37 00:07DC -  -  -  -  ;
   38 00:07DC -  -  -  -  ;									Changes and Updates
   39 00:07DC -  -  -  -  ;
   40 00:07DC -  -  -  -  ; ***************************************************************************************
   41 00:07DC -  -  -  -  ;
   42 00:07DC -  -  -  -  ;		Date			Notes
   43 00:07DC -  -  -  -  ;		==== 			=====
   44 00:07DC -  -  -  -  ;
   45 00:07DC -  -  -  -  ; ***************************************************************************************
   46 00:07DC -  -  -  -  		
Listing for file "_build.asm"
   44 00:07DC -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:07DC -  -  -  -  ; ***************************************************************************************
    2 00:07DC -  -  -  -  ; ***************************************************************************************
    3 00:07DC -  -  -  -  ;
    4 00:07DC -  -  -  -  ;		Name : 		str.asm
    5 00:07DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07DC -  -  -  -  ;		Reviewed :	No
    8 00:07DC -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:07DC -  -  -  -  ;
   10 00:07DC -  -  -  -  ; ***************************************************************************************
   11 00:07DC -  -  -  -  ; ***************************************************************************************
   12 00:07DC -  -  -  -  
   13 00:07DC -  -  -  -  ; ***************************************************************************************
   14 00:07DC -  -  -  -  ;
   15 00:07DC -  -  -  -  ;								Str$() unary function
   16 00:07DC -  -  -  -  ;
   17 00:07DC -  -  -  -  ; ***************************************************************************************
   18 00:07DC -  -  -  -  
   19 00:07DC -  -  -  -  Unary_Str:	;; [str]
   20 00:07DC CD EC 02 00 		call 	CheckDollar
   21 00:07E0 CD 21 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:07E4 01 88 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:07E8 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:07EA CD 1F 0E 00 		call 	Int32ToString 				
   25 00:07EE 21 88 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:07F2 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:07F4 C9 -  -  -  		ret
   28 00:07F5 -  -  -  -  
   29 00:07F5 -  -  -  -  ; ***************************************************************************************
   30 00:07F5 -  -  -  -  ;
   31 00:07F5 -  -  -  -  ;									Changes and Updates
   32 00:07F5 -  -  -  -  ;
   33 00:07F5 -  -  -  -  ; ***************************************************************************************
   34 00:07F5 -  -  -  -  ;
   35 00:07F5 -  -  -  -  ;		Date			Notes
   36 00:07F5 -  -  -  -  ;		==== 			=====
   37 00:07F5 -  -  -  -  ;
   38 00:07F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:07F5 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:07F5 -  -  -  -  ; ***************************************************************************************
    2 00:07F5 -  -  -  -  ; ***************************************************************************************
    3 00:07F5 -  -  -  -  ;
    4 00:07F5 -  -  -  -  ;		Name : 		time.asm
    5 00:07F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07F5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07F5 -  -  -  -  ;		Reviewed :	No
    8 00:07F5 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:07F5 -  -  -  -  ;
   10 00:07F5 -  -  -  -  ; ***************************************************************************************
   11 00:07F5 -  -  -  -  ; ***************************************************************************************
   12 00:07F5 -  -  -  -  
   13 00:07F5 -  -  -  -  ; ***************************************************************************************
   14 00:07F5 -  -  -  -  ;
   15 00:07F5 -  -  -  -  ;							Get system time in ms
   16 00:07F5 -  -  -  -  ;
   17 00:07F5 -  -  -  -  ; ***************************************************************************************
   18 00:07F5 -  -  -  -  
   19 00:07F5 -  -  -  -  Unary_Time:	;; [time]
   20 00:07F5 CD 70 0E 00 			call 	SYSGetTimer
   21 00:07F9 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:07FB C9 -  -  -  			ret
   23 00:07FC -  -  -  -  
   24 00:07FC -  -  -  -  ; ***************************************************************************************
   25 00:07FC -  -  -  -  ;
   26 00:07FC -  -  -  -  ;									Changes and Updates
   27 00:07FC -  -  -  -  ;
   28 00:07FC -  -  -  -  ; ***************************************************************************************
   29 00:07FC -  -  -  -  ;
   30 00:07FC -  -  -  -  ;		Date			Notes
   31 00:07FC -  -  -  -  ;		==== 			=====
   32 00:07FC -  -  -  -  ;
   33 00:07FC -  -  -  -  ; ***************************************************************************************
   34 00:07FC -  -  -  -  			
Listing for file "_build.asm"
   46 00:07FC -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:07FC -  -  -  -  ; ***************************************************************************************
    2 00:07FC -  -  -  -  ; ***************************************************************************************
    3 00:07FC -  -  -  -  ;
    4 00:07FC -  -  -  -  ;		Name : 		top.asm
    5 00:07FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07FC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07FC -  -  -  -  ;		Reviewed :	No
    8 00:07FC -  -  -  -  ;		Purpose :	Various constants.
    9 00:07FC -  -  -  -  ;
   10 00:07FC -  -  -  -  ; ***************************************************************************************
   11 00:07FC -  -  -  -  ; ***************************************************************************************
   12 00:07FC -  -  -  -  
   13 00:07FC -  -  -  -  ; ***************************************************************************************
   14 00:07FC -  -  -  -  ;
   15 00:07FC -  -  -  -  ;							page unary function (no bracket)
   16 00:07FC -  -  -  -  ;
   17 00:07FC -  -  -  -  ; ***************************************************************************************
   18 00:07FC -  -  -  -  
   19 00:07FC -  -  -  -  Unary_Top:	;; [top]
   20 00:07FC 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:0800 D9 -  -  -  			exx
   22 00:0801 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:0805 D9 -  -  -  			exx
   24 00:0806 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0808 C9 -  -  -  			ret
   26 00:0809 -  -  -  -  
   27 00:0809 -  -  -  -  ; ***************************************************************************************
   28 00:0809 -  -  -  -  ;
   29 00:0809 -  -  -  -  ;									Changes and Updates
   30 00:0809 -  -  -  -  ;
   31 00:0809 -  -  -  -  ; ***************************************************************************************
   32 00:0809 -  -  -  -  ;
   33 00:0809 -  -  -  -  ;		Date			Notes
   34 00:0809 -  -  -  -  ;		==== 			=====
   35 00:0809 -  -  -  -  ;
   36 00:0809 -  -  -  -  ; ***************************************************************************************
   37 00:0809 -  -  -  -  			
Listing for file "_build.asm"
   47 00:0809 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0809 -  -  -  -  ; ***************************************************************************************
    2 00:0809 -  -  -  -  ; ***************************************************************************************
    3 00:0809 -  -  -  -  ;
    4 00:0809 -  -  -  -  ;		Name : 		val.asm
    5 00:0809 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0809 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0809 -  -  -  -  ;		Reviewed :	No
    8 00:0809 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0809 -  -  -  -  ;
   10 00:0809 -  -  -  -  ; ***************************************************************************************
   11 00:0809 -  -  -  -  ; ***************************************************************************************
   12 00:0809 -  -  -  -  
   13 00:0809 -  -  -  -  ; ***************************************************************************************
   14 00:0809 -  -  -  -  ;
   15 00:0809 -  -  -  -  ;								val( unary function
   16 00:0809 -  -  -  -  ;
   17 00:0809 -  -  -  -  ; ***************************************************************************************
   18 00:0809 -  -  -  -  
   19 00:0809 -  -  -  -  Unary_Val:	;; [val]
   20 00:0809 CD 30 05 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:080D E5 -  -  -  		push 	hl 							; copy to BC
   22 00:080E C1 -  -  -  		pop 	bc
   23 00:080F 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0811 CD FD 0C 00 		call 	Int32FromString 			; get the integer part.
   25 00:0815 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0817 C8 -  -  -  		ret		z 							; okay
   27 00:0818 3E 03 C3 14 
              03 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:081E -  -  -  -  
   29 00:081E -  -  -  -  ; ***************************************************************************************
   30 00:081E -  -  -  -  ;
   31 00:081E -  -  -  -  ;									Changes and Updates
   32 00:081E -  -  -  -  ;
   33 00:081E -  -  -  -  ; ***************************************************************************************
   34 00:081E -  -  -  -  ;
   35 00:081E -  -  -  -  ;		Date			Notes
   36 00:081E -  -  -  -  ;		==== 			=====
   37 00:081E -  -  -  -  ;
   38 00:081E -  -  -  -  ; ***************************************************************************************
   39 00:081E -  -  -  -  		
Listing for file "_build.asm"
   48 00:081E -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:081E -  -  -  -  ; ***************************************************************************************
    2 00:081E -  -  -  -  ; ***************************************************************************************
    3 00:081E -  -  -  -  ;
    4 00:081E -  -  -  -  ;		Name : 		allocate.asm
    5 00:081E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:081E -  -  -  -  ;		Date : 		4th June 2022
    7 00:081E -  -  -  -  ;		Reviewed :	No
    8 00:081E -  -  -  -  ;		Purpose :	Allocate memory
    9 00:081E -  -  -  -  ;
   10 00:081E -  -  -  -  ; ***************************************************************************************
   11 00:081E -  -  -  -  ; ***************************************************************************************
   12 00:081E -  -  -  -  
   13 00:081E -  -  -  -  ; ***************************************************************************************
   14 00:081E -  -  -  -  ;
   15 00:081E -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:081E -  -  -  -  ;
   17 00:081E -  -  -  -  ; ***************************************************************************************
   18 00:081E -  -  -  -  
   19 00:081E -  -  -  -  AllocateBytes:
   20 00:081E ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:0823 D5 -  -  -  		push 	de 							; save on stack
   22 00:0824 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:0825 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   24 00:0829 EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:082A 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:082E AF -  -  -  		xor 	a
   27 00:082F ED 52 -  -  		sbc 	hl,de
   28 00:0831 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:0832 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:0833 3E 07 C3 14 
              03 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:0839 -  -  -  -  
   32 00:0839 -  -  -  -  ; ***************************************************************************************
   33 00:0839 -  -  -  -  ;
   34 00:0839 -  -  -  -  ;									Changes and Updates
   35 00:0839 -  -  -  -  ;
   36 00:0839 -  -  -  -  ; ***************************************************************************************
   37 00:0839 -  -  -  -  ;
   38 00:0839 -  -  -  -  ;		Date			Notes
   39 00:0839 -  -  -  -  ;		==== 			=====
   40 00:0839 -  -  -  -  ;
   41 00:0839 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:0839 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:0839 -  -  -  -  ; ***************************************************************************************
    2 00:0839 -  -  -  -  ; ***************************************************************************************
    3 00:0839 -  -  -  -  ;
    4 00:0839 -  -  -  -  ;		Name : 		clear.asm
    5 00:0839 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0839 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0839 -  -  -  -  ;		Reviewed :	No
    8 00:0839 -  -  -  -  ;		Purpose :	Clear command.
    9 00:0839 -  -  -  -  ;
   10 00:0839 -  -  -  -  ; ***************************************************************************************
   11 00:0839 -  -  -  -  ; ***************************************************************************************
   12 00:0839 -  -  -  -  
   13 00:0839 -  -  -  -  ; ***************************************************************************************
   14 00:0839 -  -  -  -  ;
   15 00:0839 -  -  -  -  ;										CLEAR command
   16 00:0839 -  -  -  -  ;
   17 00:0839 -  -  -  -  ; ***************************************************************************************
   18 00:0839 -  -  -  -  
   19 00:0839 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:0839 -  -  -  -  		;
   21 00:0839 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:0839 -  -  -  -  		;
   23 00:0839 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:083D -  -  -  -  _CCFindLow:
   25 00:083D 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0841 5E -  -  -  		ld 		e,(hl)		
   27 00:0842 19 -  -  -  		add 	hl,de
   28 00:0843 7B -  -  -  		ld 		a,e
   29 00:0844 B7 -  -  -  		or 		a
   30 00:0845 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:0847 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:0848 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:084C 23 -  -  -  		inc 	hl 							; one for luck
   34 00:084D 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:0851 -  -  -  -  		;
   36 00:0851 -  -  -  -  		; 	 		Reset the language stack
   37 00:0851 -  -  -  -  		;
   38 00:0851 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:0855 -  -  -  -  		;
   40 00:0855 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:0857 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:085B 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:085F 19 -  -  -  		add 	hl,de
   44 00:0860 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:0862 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:0866 -  -  -  -  		;
   47 00:0866 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:086A 19 -  -  -  		add 	hl,de
   49 00:086B 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:086F -  -  -  -  		;
   51 00:086F -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:086F -  -  -  -  		;
   53 00:086F 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:0873 -  -  -  -  _CCFClearHT:
   55 00:0873 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:0874 36 00 -  -  		ld 		(hl),0
   57 00:0876 1B -  -  -  		dec 	de
   58 00:0877 7A -  -  -  		ld 		a,d
   59 00:0878 B3 -  -  -  		or 		e
   60 00:0879 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:087B 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   62 00:087F -  -  -  -  		;
   63 00:087F -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:087F -  -  -  -  		;
   65 00:087F 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:0883 -  -  -  -  		;
   67 00:0883 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:0883 -  -  -  -  		;
   69 00:0883 CD 5B 07 00 		call 	UnaryRandomInitialise
   70 00:0887 C9 -  -  -  		ret
   71 00:0888 -  -  -  -  
   72 00:0888 -  -  -  -  ; ***************************************************************************************
   73 00:0888 -  -  -  -  ;
   74 00:0888 -  -  -  -  ;									Changes and Updates
   75 00:0888 -  -  -  -  ;
   76 00:0888 -  -  -  -  ; ***************************************************************************************
   77 00:0888 -  -  -  -  ;
   78 00:0888 -  -  -  -  ;		Date			Notes
   79 00:0888 -  -  -  -  ;		==== 			=====
   80 00:0888 -  -  -  -  ;
   81 00:0888 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:0888 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0888 -  -  -  -  ; ***************************************************************************************
    2 00:0888 -  -  -  -  ; ***************************************************************************************
    3 00:0888 -  -  -  -  ;
    4 00:0888 -  -  -  -  ;		Name : 		instance.asm
    5 00:0888 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0888 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0888 -  -  -  -  ;		Reviewed :	No
    8 00:0888 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0888 -  -  -  -  ;
   10 00:0888 -  -  -  -  ; ***************************************************************************************
   11 00:0888 -  -  -  -  ; ***************************************************************************************
   12 00:0888 -  -  -  -  
   13 00:0888 -  -  -  -  ; ***************************************************************************************
   14 00:0888 -  -  -  -  ;
   15 00:0888 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0888 -  -  -  -  ;
   17 00:0888 -  -  -  -  ; ***************************************************************************************
   18 00:0888 -  -  -  -  
   19 00:0888 -  -  -  -  SetCurrentInstance:
   20 00:0888 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:088D 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0891 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0896 -  -  -  -  
   24 00:0896 C9 -  -  -  		ret
   25 00:0897 -  -  -  -  
   26 00:0897 -  -  -  -  
   27 00:0897 -  -  -  -  ; ***************************************************************************************
   28 00:0897 -  -  -  -  ;
   29 00:0897 -  -  -  -  ;									Changes and Updates
   30 00:0897 -  -  -  -  ;
   31 00:0897 -  -  -  -  ; ***************************************************************************************
   32 00:0897 -  -  -  -  ;
   33 00:0897 -  -  -  -  ;		Date			Notes
   34 00:0897 -  -  -  -  ;		==== 			=====
   35 00:0897 -  -  -  -  ;
   36 00:0897 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:0897 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0897 -  -  -  -  ; ***************************************************************************************
    2 00:0897 -  -  -  -  ; ***************************************************************************************
    3 00:0897 -  -  -  -  ;
    4 00:0897 -  -  -  -  ;		Name : 		new.asm
    5 00:0897 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0897 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0897 -  -  -  -  ;		Reviewed :	No
    8 00:0897 -  -  -  -  ;		Purpose :	New command.
    9 00:0897 -  -  -  -  ;
   10 00:0897 -  -  -  -  ; ***************************************************************************************
   11 00:0897 -  -  -  -  ; ***************************************************************************************
   12 00:0897 -  -  -  -  
   13 00:0897 -  -  -  -  ; ***************************************************************************************
   14 00:0897 -  -  -  -  ;
   15 00:0897 -  -  -  -  ;										NEW command
   16 00:0897 -  -  -  -  ;
   17 00:0897 -  -  -  -  ; ***************************************************************************************
   18 00:0897 -  -  -  -  
   19 00:0897 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0897 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:089B 36 00 -  -  		ld 		(hl),0
   22 00:089D CD 39 08 00 		call 	Command_CLEAR 				; clear all variables
   23 00:08A1 3E 00 C3 14 
              03 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:08A7 -  -  -  -  
   25 00:08A7 -  -  -  -  ; ***************************************************************************************
   26 00:08A7 -  -  -  -  ;
   27 00:08A7 -  -  -  -  ;									Changes and Updates
   28 00:08A7 -  -  -  -  ;
   29 00:08A7 -  -  -  -  ; ***************************************************************************************
   30 00:08A7 -  -  -  -  ;
   31 00:08A7 -  -  -  -  ;		Date			Notes
   32 00:08A7 -  -  -  -  ;		==== 			=====
   33 00:08A7 -  -  -  -  ;
   34 00:08A7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:08A7 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:08A7 -  -  -  -  ; ***************************************************************************************
    2 00:08A7 -  -  -  -  ; ***************************************************************************************
    3 00:08A7 -  -  -  -  ;
    4 00:08A7 -  -  -  -  ;		Name : 		utility.asm
    5 00:08A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08A7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08A7 -  -  -  -  ;		Reviewed :	No
    8 00:08A7 -  -  -  -  ;		Purpose :	Utility routines
    9 00:08A7 -  -  -  -  ;
   10 00:08A7 -  -  -  -  ; ***************************************************************************************
   11 00:08A7 -  -  -  -  ; ***************************************************************************************
   12 00:08A7 -  -  -  -  
   13 00:08A7 -  -  -  -  ; ***************************************************************************************
   14 00:08A7 -  -  -  -  ;
   15 00:08A7 -  -  -  -  ;							Print ASCII string at HL
   16 00:08A7 -  -  -  -  ;
   17 00:08A7 -  -  -  -  ; ***************************************************************************************
   18 00:08A7 -  -  -  -  
   19 00:08A7 -  -  -  -  PrintStringAtHL:
   20 00:08A7 7E -  -  -  		ld 		a,(hl)
   21 00:08A8 FE 20 -  -  		cp 		$20		
   22 00:08AA D8 -  -  -  		ret 	c
   23 00:08AB CD 6E 0E 00 		call 	SYSPrintChar
   24 00:08AF 23 -  -  -  		inc 	hl
   25 00:08B0 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:08B2 -  -  -  -  
   27 00:08B2 -  -  -  -  ; ***************************************************************************************
   28 00:08B2 -  -  -  -  ;
   29 00:08B2 -  -  -  -  ;									Changes and Updates
   30 00:08B2 -  -  -  -  ;
   31 00:08B2 -  -  -  -  ; ***************************************************************************************
   32 00:08B2 -  -  -  -  ;
   33 00:08B2 -  -  -  -  ;		Date			Notes
   34 00:08B2 -  -  -  -  ;		==== 			=====
   35 00:08B2 -  -  -  -  ;
   36 00:08B2 -  -  -  -  ; ***************************************************************************************
   37 00:08B2 -  -  -  -  		
Listing for file "_build.asm"
   53 00:08B2 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:08B2 -  -  -  -  ; ***************************************************************************************
    2 00:08B2 -  -  -  -  ; ***************************************************************************************
    3 00:08B2 -  -  -  -  ;
    4 00:08B2 -  -  -  -  ;		Name : 		create.asm
    5 00:08B2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08B2 -  -  -  -  ;		Date : 		4th June 2022
    7 00:08B2 -  -  -  -  ;		Reviewed :	No
    8 00:08B2 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:08B2 -  -  -  -  ;
   10 00:08B2 -  -  -  -  ; ***************************************************************************************
   11 00:08B2 -  -  -  -  ; ***************************************************************************************
   12 00:08B2 -  -  -  -  
   13 00:08B2 -  -  -  -  ; ***************************************************************************************
   14 00:08B2 -  -  -  -  ;
   15 00:08B2 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:08B2 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:08B2 -  -  -  -  ;
   18 00:08B2 -  -  -  -  ; ***************************************************************************************
   19 00:08B2 -  -  -  -  
   20 00:08B2 -  -  -  -  VariableCreate:		
   21 00:08B2 -  -  -  -  		;
   22 00:08B2 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:08B2 -  -  -  -  		;
   24 00:08B2 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:08B6 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:08B7 E5 -  -  -  		push 	hl 							; save count.
   27 00:08B8 CD 1E 08 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:08BC C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:08BD -  -  -  -  		;
   30 00:08BD -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:08BD -  -  -  -  		;
   32 00:08BD E5 -  -  -  		push	hl 							; save start address on stack
   33 00:08BE -  -  -  -  _VCClear:
   34 00:08BE 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:08C0 23 -  -  -  		inc 	hl
   36 00:08C1 0B -  -  -  		dec 	bc
   37 00:08C2 78 -  -  -  		ld		a,b
   38 00:08C3 B1 -  -  -  		or 		c
   39 00:08C4 20 F8 -  -  		jr 		nz,_VCClear
   40 00:08C6 E1 -  -  -  		pop 	hl							; restore start address
   41 00:08C7 -  -  -  -  		;
   42 00:08C7 -  -  -  -  		;		Now start to create the data.
   43 00:08C7 -  -  -  -  		;
   44 00:08C7 E5 -  -  -  		push 	hl 							; save start
   45 00:08C8 -  -  -  -  		;
   46 00:08C8 -  -  -  -  		;		Write hash to +0
   47 00:08C8 -  -  -  -  		;
   48 00:08C8 3A 82 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:08CC 77 -  -  -  		ld 		(hl),a
   50 00:08CD 23 -  -  -  		inc 	hl
   51 00:08CE -  -  -  -  		;
   52 00:08CE -  -  -  -  		;		Write list head to +1
   53 00:08CE -  -  -  -  		;
   54 00:08CE E5 -  -  -  		push 	hl 							; save write position
   55 00:08CF 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:08D3 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:08D5 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:08D6 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:08D7 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:08DD -  -  -  -  		;
   61 00:08DD -  -  -  -  		;		Write variable name to +5
   62 00:08DD -  -  -  -  		;
   63 00:08DD ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:08E2 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:08E8 -  -  -  -  		;
   66 00:08E8 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:08E9 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:08ED ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:08F3 -  -  -  -  		;
   70 00:08F3 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:08F4 C9 -  -  -  		ret
   72 00:08F5 -  -  -  -  
   73 00:08F5 -  -  -  -  ; ***************************************************************************************
   74 00:08F5 -  -  -  -  ;
   75 00:08F5 -  -  -  -  ;									Changes and Updates
   76 00:08F5 -  -  -  -  ;
   77 00:08F5 -  -  -  -  ; ***************************************************************************************
   78 00:08F5 -  -  -  -  ;
   79 00:08F5 -  -  -  -  ;		Date			Notes
   80 00:08F5 -  -  -  -  ;		==== 			=====
   81 00:08F5 -  -  -  -  ;
   82 00:08F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:08F5 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:08F5 -  -  -  -  ; ***************************************************************************************
    2 00:08F5 -  -  -  -  ; ***************************************************************************************
    3 00:08F5 -  -  -  -  ;
    4 00:08F5 -  -  -  -  ;		Name : 		find.asm
    5 00:08F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F5 -  -  -  -  ;		Reviewed :	No
    8 00:08F5 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:08F5 -  -  -  -  ;
   10 00:08F5 -  -  -  -  ; ***************************************************************************************
   11 00:08F5 -  -  -  -  ; ***************************************************************************************
   12 00:08F5 -  -  -  -  
   13 00:08F5 -  -  -  -  ; ***************************************************************************************
   14 00:08F5 -  -  -  -  ;
   15 00:08F5 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:08F5 -  -  -  -  ; 		variable information at (IX)
   17 00:08F5 -  -  -  -  ;
   18 00:08F5 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:08F5 -  -  -  -  ;		Don't autocreate arrays.
   20 00:08F5 -  -  -  -  ;
   21 00:08F5 -  -  -  -  ; ***************************************************************************************
   22 00:08F5 -  -  -  -  
   23 00:08F5 -  -  -  -  FindVariable:
   24 00:08F5 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:08F8 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:08FA D2 7E 03 00 		jp 		nc,SyntaxError 		
   27 00:08FE -  -  -  -  
   28 00:08FE DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0901 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0903 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0905 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0907 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0909 -  -  -  -  		;
   34 00:0909 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0909 -  -  -  -  		;
   36 00:0909 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:090D DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0910 87 -  -  -  		add 	a,a 						; x4
   39 00:0911 87 -  -  -  		add 	a,a
   40 00:0912 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0913 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0914 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0916 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0918 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:091A AF -  -  -  		xor 	a 							; clear carry and return
   46 00:091B C9 -  -  -  		ret
   47 00:091C -  -  -  -  		;
   48 00:091C -  -  -  -  		;		Not a standard simple variable.
   49 00:091C -  -  -  -  		;
   50 00:091C -  -  -  -  _FVNotSimple:
   51 00:091C CD 50 09 00 		call 	VariableInformation 		; get information about the variable.
   52 00:0920 CD 8C 09 00 		call 	VariableSearchList 			; search the linked list
   53 00:0924 38 0B -  -  		jr 		c,_FVNotFound  				
   54 00:0926 -  -  -  -  		;
   55 00:0926 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0926 -  -  -  -  		;
   57 00:0926 -  -  -  -  _FVExitReference:		
   58 00:0926 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:092A 19 -  -  -  		add 	hl,de 
   60 00:092B -  -  -  -  		;
   61 00:092B -  -  -  -  		; 		TODO: Array check code.
   62 00:092B -  -  -  -  		;
   63 00:092B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:092D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:092F AF -  -  -  		xor 	a 							; clear carry and return
   66 00:0930 C9 -  -  -  		ret
   67 00:0931 -  -  -  -  		;
   68 00:0931 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:0931 -  -  -  -  		;
   70 00:0931 -  -  -  -  _FVNotFound:		
   71 00:0931 3A 7C 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:0935 B7 -  -  -  		or 		a
   73 00:0936 28 11 -  -  		jr 		z,_FVFail
   74 00:0938 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:093B FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:093D 28 0A -  -  		jr 		z,_FVFail
   77 00:093F 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 00:0943 CD B2 08 00 		call 	VariableCreate 				; create a new variable.
   79 00:0947 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:0949 -  -  -  -  
   81 00:0949 -  -  -  -  _FVFail:
   82 00:0949 DD 2A 7E 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:094E 37 -  -  -  		scf
   84 00:094F C9 -  -  -  		ret
   85 00:0950 -  -  -  -  
   86 00:0950 -  -  -  -  ; ***************************************************************************************
   87 00:0950 -  -  -  -  ;
   88 00:0950 -  -  -  -  ;									Changes and Updates
   89 00:0950 -  -  -  -  ;
   90 00:0950 -  -  -  -  ; ***************************************************************************************
   91 00:0950 -  -  -  -  ;
   92 00:0950 -  -  -  -  ;		Date			Notes
   93 00:0950 -  -  -  -  ;		==== 			=====
   94 00:0950 -  -  -  -  ;
   95 00:0950 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0950 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0950 -  -  -  -  ; ***************************************************************************************
    2 00:0950 -  -  -  -  ; ***************************************************************************************
    3 00:0950 -  -  -  -  ;
    4 00:0950 -  -  -  -  ;		Name : 		info.asm
    5 00:0950 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0950 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0950 -  -  -  -  ;		Reviewed :	No
    8 00:0950 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0950 -  -  -  -  ;
   10 00:0950 -  -  -  -  ; ***************************************************************************************
   11 00:0950 -  -  -  -  ; ***************************************************************************************
   12 00:0950 -  -  -  -  
   13 00:0950 -  -  -  -  ; ***************************************************************************************
   14 00:0950 -  -  -  -  ;
   15 00:0950 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0950 -  -  -  -  ; 		after the identifier.
   17 00:0950 -  -  -  -  ;
   18 00:0950 -  -  -  -  ; ***************************************************************************************
   19 00:0950 -  -  -  -  
   20 00:0950 -  -  -  -  VariableInformation:
   21 00:0950 DD 22 7E 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:0955 -  -  -  -  		;
   23 00:0955 -  -  -  -  		; 		Calculate hash, find end.
   24 00:0955 -  -  -  -  		;
   25 00:0955 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:0957 -  -  -  -  _VICalculateHash:
   27 00:0957 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:095A FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:095C 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:095E 80 -  -  -  		add 	a,b 						; add to hash
   31 00:095F 07 -  -  -  		rlca
   32 00:0960 07 -  -  -  		rlca
   33 00:0961 80 -  -  -  		add 	a,b
   34 00:0962 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0963 DD 23 -  -  		inc 	ix 							; next character
   36 00:0965 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:0967 -  -  -  -  		;
   38 00:0967 -  -  -  -  _VIHashDone:
   39 00:0967 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:0968 -  -  -  -  		;
   41 00:0968 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:0968 -  -  -  -  		;
   43 00:0968 32 82 00 00 		ld 		(VarHash),a
   44 00:096C -  -  -  -  		;
   45 00:096C -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:096C -  -  -  -  		;		
   47 00:096C E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:096E 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0972 6F -  -  -  		ld 		l,a
   50 00:0973 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0974 29 -  -  -  		add 	hl,hl
   52 00:0975 -  -  -  -  		;
   53 00:0975 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:097A 19 -  -  -  		add 	hl,de
   55 00:097B -  -  -  -  		;
   56 00:097B DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:097E FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0980 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0982 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0986 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0987 -  -  -  -  _VINotArray:
   62 00:0987 22 84 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:098B C9 -  -  -  		ret
   64 00:098C -  -  -  -  
   65 00:098C -  -  -  -  ; ***************************************************************************************
   66 00:098C -  -  -  -  ;
   67 00:098C -  -  -  -  ;									Changes and Updates
   68 00:098C -  -  -  -  ;
   69 00:098C -  -  -  -  ; ***************************************************************************************
   70 00:098C -  -  -  -  ;
   71 00:098C -  -  -  -  ;		Date			Notes
   72 00:098C -  -  -  -  ;		==== 			=====
   73 00:098C -  -  -  -  ;
   74 00:098C -  -  -  -  ; ***************************************************************************************
   75 00:098C -  -  -  -  
Listing for file "_build.asm"
   56 00:098C -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:098C -  -  -  -  ; ***************************************************************************************
    2 00:098C -  -  -  -  ; ***************************************************************************************
    3 00:098C -  -  -  -  ;
    4 00:098C -  -  -  -  ;		Name : 		search.asm
    5 00:098C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:098C -  -  -  -  ;		Date : 		4th June 2022
    7 00:098C -  -  -  -  ;		Reviewed :	No
    8 00:098C -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:098C -  -  -  -  ;
   10 00:098C -  -  -  -  ; ***************************************************************************************
   11 00:098C -  -  -  -  ; ***************************************************************************************
   12 00:098C -  -  -  -  
   13 00:098C -  -  -  -  ; ***************************************************************************************
   14 00:098C -  -  -  -  ;
   15 00:098C -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:098C -  -  -  -  ;		CS if failed.
   17 00:098C -  -  -  -  ;
   18 00:098C -  -  -  -  ; ***************************************************************************************
   19 00:098C -  -  -  -  
   20 00:098C -  -  -  -  VariableSearchList:
   21 00:098C 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0990 -  -  -  -  		;
   23 00:0990 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0990 -  -  -  -  		;		the address of the hash record
   25 00:0990 -  -  -  -  		;
   26 00:0990 -  -  -  -  _VSLLoop:
   27 00:0990 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0992 -  -  -  -  		;
   29 00:0992 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0993 AF -  -  -  		xor 	a
   31 00:0994 ED 6A -  -  		adc 	hl,hl
   32 00:0996 E1 -  -  -  		pop 	hl
   33 00:0997 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0999 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:099A C8 -  -  -  		ret 	z
   36 00:099B -  -  -  -  _VSLRecord:
   37 00:099B -  -  -  -  		;
   38 00:099B -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:099B -  -  -  -  		;
   40 00:099B 3A 82 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:099F BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:09A0 23 -  -  -  		inc 	hl 							; points to link back
   43 00:09A1 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:09A3 -  -  -  -  		;
   45 00:09A3 -  -  -  -  		;		Now check the name
   46 00:09A3 -  -  -  -  		;
   47 00:09A3 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:09A4 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:09A5 23 -  -  -  		inc 	hl
   50 00:09A6 23 -  -  -  		inc 	hl
   51 00:09A7 23 -  -  -  		inc 	hl
   52 00:09A8 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:09AA ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:09AF -  -  -  -  		;
   55 00:09AF -  -  -  -  		;		Check individual characters
   56 00:09AF -  -  -  -  		;
   57 00:09AF -  -  -  -  _VSLCharacter:
   58 00:09AF 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:09B0 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:09B2 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:09B4 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:09B5 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:09B6 13 -  -  -  		inc 	de
   64 00:09B7 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:09B9 -  -  -  -  		;
   66 00:09B9 -  -  -  -  _VSLFailed:
   67 00:09B9 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:09BA 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:09BC -  -  -  -  		;
   70 00:09BC -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:09BC -  -  -  -  		;		
   72 00:09BC -  -  -  -  _VSLEndIdentifier:
   73 00:09BC 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:09BD FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:09BF 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:09C1 -  -  -  -  		;
   77 00:09C1 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:09C2 2B -  -  -  		dec 	hl 							; now start of record
   79 00:09C3 AF -  -  -  		xor 	a 							; clear carry
   80 00:09C4 C9 -  -  -  		ret
   81 00:09C5 -  -  -  -  
   82 00:09C5 -  -  -  -  ; ***************************************************************************************
   83 00:09C5 -  -  -  -  ;
   84 00:09C5 -  -  -  -  ;									Changes and Updates
   85 00:09C5 -  -  -  -  ;
   86 00:09C5 -  -  -  -  ; ***************************************************************************************
   87 00:09C5 -  -  -  -  ;
   88 00:09C5 -  -  -  -  ;		Date			Notes
   89 00:09C5 -  -  -  -  ;		==== 			=====
   90 00:09C5 -  -  -  -  ;
   91 00:09C5 -  -  -  -  ; ***************************************************************************************
   92 00:09C5 -  -  -  -  		
Listing for file "_build.asm"
   57 00:09C5 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:09C5 -  -  -  -  ;
    2 00:09C5 -  -  -  -  ;	This file is automatically generated.
    3 00:09C5 -  -  -  -  ;
    4 00:09C5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:09E0 -  -  -  -  PrecedenceTable:
    6 00:09E0 06 -  -  -  	.db	6	; $0083 !
    7 00:09E1 06 -  -  -  	.db	6	; $0084 ?
    8 00:09E2 05 -  -  -  	.db	5	; $0085 *
    9 00:09E3 05 -  -  -  	.db	5	; $0086 /
   10 00:09E4 05 -  -  -  	.db	5	; $0087 mod
   11 00:09E5 05 -  -  -  	.db	5	; $0088 div
   12 00:09E6 04 -  -  -  	.db	4	; $0089 +
   13 00:09E7 04 -  -  -  	.db	4	; $008a -
   14 00:09E8 03 -  -  -  	.db	3	; $008b >=
   15 00:09E9 03 -  -  -  	.db	3	; $008c <=
   16 00:09EA 03 -  -  -  	.db	3	; $008d >
   17 00:09EB 03 -  -  -  	.db	3	; $008e <
   18 00:09EC 03 -  -  -  	.db	3	; $008f =
   19 00:09ED 03 -  -  -  	.db	3	; $0090 <>
   20 00:09EE 02 -  -  -  	.db	2	; $0091 and
   21 00:09EF 01 -  -  -  	.db	1	; $0092 or
   22 00:09F0 01 -  -  -  	.db	1	; $0093 eor
   23 00:09F1 -  -  -  -  
Listing for file "_build.asm"
   58 00:09F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:09F1 -  -  -  -  ;
    2 00:09F1 -  -  -  -  ;	This is automatically generated.
    3 00:09F1 -  -  -  -  ;
    4 00:09F1 -  -  -  -  ErrorIDTable:
    5 00:09F1 35 0A 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:09F5 3B 0A 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:09F9 4C 0A 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:09FD 5A 0A 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0A01 64 0A 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:0A05 6E 0A 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:0A09 88 0A 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:0A0D 99 0A 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:0A11 A7 0A 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:0A15 B5 0A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:0A19 BF 0A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:0A1D D4 0A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:0A21 EA 0A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:0A25 F8 0A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:0A29 FD 0A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:0A2D 0A 0B 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:0A31 1B 0B 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:0A35 -  -  -  -  
   23 00:0A35 -  -  -  -  ErrText_warmstart:
   24 00:0A35 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:0A3B -  -  -  -  ErrText_assert:
   26 00:0A3B 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:0A4C -  -  -  -  ErrText_badtype:
   28 00:0A4C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:0A5A -  -  -  -  ErrText_badvalue:
   30 00:0A5A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:0A64 -  -  -  -  ErrText_dim:
   32 00:0A64 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:0A6E -  -  -  -  ErrText_disabled:
   34 00:0A6E 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:0A88 -  -  -  -  ErrText_divzero:
   36 00:0A88 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:0A99 -  -  -  -  ErrText_memory:
   38 00:0A99 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:0AA7 -  -  -  -  ErrText_nocomma:
   40 00:0AA7 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:0AB5 -  -  -  -  ErrText_nodollar:
   42 00:0AB5 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:0ABF -  -  -  -  ErrText_nolbracket:
   44 00:0ABF 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:0AD4 -  -  -  -  ErrText_norbracket:
   46 00:0AD4 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:0AEA -  -  -  -  ErrText_notref:
   48 00:0AEA 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:0AF8 -  -  -  -  ErrText_stop:
   50 00:0AF8 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:0AFD -  -  -  -  ErrText_syntax:
   52 00:0AFD 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:0B0A -  -  -  -  ErrText_todo:
   54 00:0B0A 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:0B1B -  -  -  -  ErrText_unknownvar:
   56 00:0B1B 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:0B2C -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0B2C -  -  -  -  ;
    2 00:0B2C -  -  -  -  ;	Vectors for set 0
    3 00:0B2C -  -  -  -  ;
    4 00:0B2C -  -  -  -  VectorsSet0:
    5 00:0B2C 78 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0B30 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0B34 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0B38 F4 03 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0B3C FD 03 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0B40 A0 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0B44 AE 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0B48 BC 03 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0B4C AE 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0B50 84 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0B54 92 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0B58 5B 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0B5C 51 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0B60 3D 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0B64 33 04 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0B68 29 04 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0B6C 47 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0B70 CA 03 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0B74 D8 03 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0B78 E6 03 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0B7C CD 07 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0B80 C5 07 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0B84 E7 06 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0B88 14 07 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0B8C D6 06 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0B90 AC 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0B94 AB 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0B98 DC 07 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0B9C C2 06 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0BA0 B9 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0BA4 F2 06 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0BA8 07 07 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0BAC F5 07 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0BB0 FC 07 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0BB4 09 08 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0BB8 1B 04 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0BBC 1F 04 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0BC0 EB 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0BC4 EB 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0BC8 EF 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0BCC EB 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0BD0 3A 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0BD4 24 00 00 00 	addr(Unimplemented)              ; $00aa [
   48 00:0BD8 24 00 00 00 	addr(Unimplemented)              ; $00ab ]
   49 00:0BDC 24 00 00 00 	addr(Unimplemented)              ; $00ac repeat
   50 00:0BE0 24 00 00 00 	addr(Unimplemented)              ; $00ad until
   51 00:0BE4 24 00 00 00 	addr(Unimplemented)              ; $00ae if
   52 00:0BE8 EB 00 00 00 	addr(BadCmd_Then)                ; $00af then
   53 00:0BEC 24 00 00 00 	addr(Unimplemented)              ; $00b0 else
   54 00:0BF0 24 00 00 00 	addr(Unimplemented)              ; $00b1 for
   55 00:0BF4 EB 00 00 00 	addr(BadCmd_To)                  ; $00b2 to
   56 00:0BF8 24 00 00 00 	addr(Unimplemented)              ; $00b3 step
   57 00:0BFC 24 00 00 00 	addr(Unimplemented)              ; $00b4 next
   58 00:0C00 24 00 00 00 	addr(Unimplemented)              ; $00b5 def
   59 00:0C04 24 00 00 00 	addr(Unimplemented)              ; $00b6 proc
   60 00:0C08 24 00 00 00 	addr(Unimplemented)              ; $00b7 endproc
   61 00:0C0C 24 00 00 00 	addr(Unimplemented)              ; $00b8 gosub
   62 00:0C10 24 00 00 00 	addr(Unimplemented)              ; $00b9 return
   63 00:0C14 24 00 00 00 	addr(Unimplemented)              ; $00ba goto
   64 00:0C18 24 00 00 00 	addr(Unimplemented)              ; $00bb local
   65 00:0C1C F0 00 00 00 	addr(Command_DIM)                ; $00bc dim
   66 00:0C20 3A 02 00 00 	addr(Command_REM)                ; $00bd rem
   67 00:0C24 8F 01 00 00 	addr(Command_LET)                ; $00be let
   68 00:0C28 24 00 00 00 	addr(Unimplemented)              ; $00bf vdu
   69 00:0C2C E3 01 00 00 	addr(Command_PRINT)              ; $00c0 print
   70 00:0C30 24 00 00 00 	addr(Unimplemented)              ; $00c1 load
   71 00:0C34 24 00 00 00 	addr(Unimplemented)              ; $00c2 save
   72 00:0C38 24 00 00 00 	addr(Unimplemented)              ; $00c3 list
   73 00:0C3C 97 08 00 00 	addr(Command_NEW)                ; $00c4 new
   74 00:0C40 57 02 00 00 	addr(Command_RUN)                ; $00c5 run
   75 00:0C44 24 00 00 00 	addr(Unimplemented)              ; $00c6 read
   76 00:0C48 24 00 00 00 	addr(Unimplemented)              ; $00c7 data
   77 00:0C4C 24 00 00 00 	addr(Unimplemented)              ; $00c8 restore
   78 00:0C50 DA 00 00 00 	addr(Command_ASSERT)             ; $00c9 assert
   79 00:0C54 39 08 00 00 	addr(Command_CLEAR)              ; $00ca clear
   80 00:0C58 72 01 00 00 	addr(Command_END)                ; $00cb end
   81 00:0C5C CA 02 00 00 	addr(Command_STOP)               ; $00cc stop
   82 00:0C60 -  -  -  -  ;
   83 00:0C60 -  -  -  -  ;	Vectors for set 1
   84 00:0C60 -  -  -  -  ;
   85 00:0C60 -  -  -  -  VectorsSet1:
   86 00:0C60 -  -  -  -  ;
   87 00:0C60 -  -  -  -  ;	Vectors for set 2
   88 00:0C60 -  -  -  -  ;
   89 00:0C60 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:0C60 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0C60 -  -  -  -  ; ***************************************************************************************
    2 00:0C60 -  -  -  -  ; ***************************************************************************************
    3 00:0C60 -  -  -  -  ;
    4 00:0C60 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0C60 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C60 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C60 -  -  -  -  ;		Reviewed :	No
    8 00:0C60 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0C60 -  -  -  -  ;
   10 00:0C60 -  -  -  -  ; ***************************************************************************************
   11 00:0C60 -  -  -  -  ; ***************************************************************************************
   12 00:0C60 -  -  -  -  
   13 00:0C60 -  -  -  -  ; ***************************************************************************************
   14 00:0C60 -  -  -  -  ;
   15 00:0C60 -  -  -  -  ;								Unsigned integer divide
   16 00:0C60 -  -  -  -  ;
   17 00:0C60 -  -  -  -  ; ***************************************************************************************
   18 00:0C60 -  -  -  -  
   19 00:0C60 -  -  -  -  Int32UDivide:
   20 00:0C60 37 -  -  -  		scf
   21 00:0C61 C3 A5 0C 00 		jp 		_I32UnsignedDivide		
   22 00:0C65 -  -  -  -  
   23 00:0C65 -  -  -  -  ; ***************************************************************************************
   24 00:0C65 -  -  -  -  ;
   25 00:0C65 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0C65 -  -  -  -  ;
   27 00:0C65 -  -  -  -  ; ***************************************************************************************
   28 00:0C65 -  -  -  -  
   29 00:0C65 -  -  -  -  Int32SDivide:
   30 00:0C65 37 -  -  -  		scf
   31 00:0C66 18 01 -  -  		jr 		_I32SDivide
   32 00:0C68 -  -  -  -  Int32Modulus:
   33 00:0C68 AF -  -  -  		xor 	a
   34 00:0C69 -  -  -  -  _I32SDivide:
   35 00:0C69 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0C6A F5 -  -  -  		push 	af
   37 00:0C6B 08 -  -  -  		ex 		af,af'
   38 00:0C6C -  -  -  -  
   39 00:0C6C D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0C6D D9 -  -  -  		exx
   41 00:0C6E D5 -  -  -  		push 	de
   42 00:0C6F D9 -  -  -  		exx
   43 00:0C70 -  -  -  -  
   44 00:0C70 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0C71 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0C72 CD 92 0C 00 		call 	_I32CheckHLSignSwap
   47 00:0C76 CD 92 0C 00 		call 	_I32CheckHLSignSwap
   48 00:0C7A 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0C7B F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0C7C F5 -  -  -  		push 	af
   51 00:0C7D CD A5 0C 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0C81 F1 -  -  -  		pop 	af 							; get function back
   53 00:0C82 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0C84 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0C85 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0C87 C4 08 0E 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0C8B -  -  -  -  _I32SDExit:
   58 00:0C8B D9 -  -  -  		exx 								; restore DE'DE
   59 00:0C8C D1 -  -  -  		pop 	de
   60 00:0C8D D9 -  -  -  		exx
   61 00:0C8E D1 -  -  -  		pop 	de
   62 00:0C8F F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0C90 08 -  -  -  		ex 		af,af'
   64 00:0C91 C9 -  -  -  		ret
   65 00:0C92 -  -  -  -  
   66 00:0C92 -  -  -  -  
   67 00:0C92 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0C92 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0C93 CB 7C -  -  		bit 	7,h
   70 00:0C95 D9 -  -  -  		exx
   71 00:0C96 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0C98 -  -  -  -  		;
   73 00:0C98 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0C9A F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0C9B CD 08 0E 00 		call 	Int32Negate 				
   76 00:0C9F F1 -  -  -  		pop 	af
   77 00:0CA0 -  -  -  -  _I32CHSPositive:
   78 00:0CA0 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0CA1 EB -  -  -  		ex 		de,hl
   80 00:0CA2 D9 -  -  -  		exx		
   81 00:0CA3 EB -  -  -  		ex 		de,hl
   82 00:0CA4 C9 -  -  -  		ret
   83 00:0CA5 -  -  -  -  
   84 00:0CA5 -  -  -  -  ; ***************************************************************************************
   85 00:0CA5 -  -  -  -  ;
   86 00:0CA5 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0CA5 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0CA5 -  -  -  -  ;
   89 00:0CA5 -  -  -  -  ; ***************************************************************************************
   90 00:0CA5 -  -  -  -  
   91 00:0CA5 -  -  -  -  _I32UnsignedDivide:
   92 00:0CA5 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0CA6 D5 -  -  -  		push 	de
   94 00:0CA7 D9 -  -  -  		exx
   95 00:0CA8 C5 -  -  -  		push 	bc
   96 00:0CA9 D5 -  -  -  		push 	de 							
   97 00:0CAA D9 -  -  -  		exx
   98 00:0CAB -  -  -  -  
   99 00:0CAB F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0CAC -  -  -  -  
  101 00:0CAC 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0CAD B3 -  -  -  		or 		e
  103 00:0CAE D9 -  -  -  		exx
  104 00:0CAF B2 -  -  -  		or 		d
  105 00:0CB0 B3 -  -  -  		or 		e
  106 00:0CB1 D9 -  -  -  		exx
  107 00:0CB2 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0CB6 -  -  -  -  
  109 00:0CB6 -  -  -  -  
  110 00:0CB6 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0CB7 4D -  -  -  		ld		c,l
  112 00:0CB8 21 00 00 00 		ld 		hl,$0000
  113 00:0CBC D9 -  -  -  		exx
  114 00:0CBD 44 -  -  -  		ld 		b,h
  115 00:0CBE 4D -  -  -  		ld		c,l
  116 00:0CBF 21 00 00 00 		ld 		hl,$0000
  117 00:0CC3 D9 -  -  -  		exx
  118 00:0CC4 -  -  -  -  
  119 00:0CC4 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0CC6 -  -  -  -  _I32DivideLoop:
  121 00:0CC6 F5 -  -  -  		push 	af
  122 00:0CC7 -  -  -  -  
  123 00:0CC7 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0CC9 CB 10 -  -  		rl 		b
  125 00:0CCB D9 -  -  -  		exx
  126 00:0CCC CB 11 -  -  		rl 		c
  127 00:0CCE CB 10 -  -  		rl 		b
  128 00:0CD0 D9 -  -  -  		exx
  129 00:0CD1 CB 15 -  -  		rl 		l
  130 00:0CD3 CB 14 -  -  		rl 		h
  131 00:0CD5 D9 -  -  -  		exx
  132 00:0CD6 CB 15 -  -  		rl 		l
  133 00:0CD8 CB 14 -  -  		rl 		h
  134 00:0CDA D9 -  -  -  		exx
  135 00:0CDB -  -  -  -  
  136 00:0CDB CD A6 0D 00 		call 	Int32Subtract 				; A = A - M
  137 00:0CDF 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0CE1 -  -  -  -  
  139 00:0CE1 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0CE2 18 04 -  -  		jr 		_I32Next
  141 00:0CE4 -  -  -  -  
  142 00:0CE4 -  -  -  -  _I32Borrow:
  143 00:0CE4 CD 9E 0D 00 		call 	Int32Add 					; A = A + M
  144 00:0CE8 -  -  -  -  _I32Next:
  145 00:0CE8 F1 -  -  -  		pop 	af
  146 00:0CE9 3D -  -  -  		dec 	a
  147 00:0CEA 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0CEC -  -  -  -  
  149 00:0CEC F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0CED -  -  -  -  
  151 00:0CED 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0CEE 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0CF0 -  -  -  -  
  154 00:0CF0 60 -  -  -  		ld  	h,b
  155 00:0CF1 69 -  -  -  		ld 		l,c
  156 00:0CF2 D9 -  -  -  		exx
  157 00:0CF3 60 -  -  -  		ld  	h,b
  158 00:0CF4 69 -  -  -  		ld 		l,c
  159 00:0CF5 D9 -  -  -  		exx
  160 00:0CF6 -  -  -  -  _I32Modulus1:		
  161 00:0CF6 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0CF7 D1 -  -  -  		pop 	de
  163 00:0CF8 C1 -  -  -  		pop 	bc
  164 00:0CF9 D9 -  -  -  		exx
  165 00:0CFA D1 -  -  -  		pop 	de
  166 00:0CFB C1 -  -  -  		pop 	bc
  167 00:0CFC C9 -  -  -  		ret
  168 00:0CFD -  -  -  -  
  169 00:0CFD -  -  -  -  ; ***************************************************************************************
  170 00:0CFD -  -  -  -  ;
  171 00:0CFD -  -  -  -  ;									Changes and Updates
  172 00:0CFD -  -  -  -  ;
  173 00:0CFD -  -  -  -  ; ***************************************************************************************
  174 00:0CFD -  -  -  -  ;
  175 00:0CFD -  -  -  -  ;		Date			Notes
  176 00:0CFD -  -  -  -  ;		==== 			=====
  177 00:0CFD -  -  -  -  ;
  178 00:0CFD -  -  -  -  ; ***************************************************************************************
  179 00:0CFD -  -  -  -  		
Listing for file "_build.asm"
   61 00:0CFD -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0CFD -  -  -  -  ; ***************************************************************************************
    2 00:0CFD -  -  -  -  ; ***************************************************************************************
    3 00:0CFD -  -  -  -  ;
    4 00:0CFD -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0CFD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CFD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CFD -  -  -  -  ;		Reviewed :	No
    8 00:0CFD -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0CFD -  -  -  -  ;
   10 00:0CFD -  -  -  -  ; ***************************************************************************************
   11 00:0CFD -  -  -  -  ; ***************************************************************************************
   12 00:0CFD -  -  -  -  
   13 00:0CFD -  -  -  -  ; ***************************************************************************************
   14 00:0CFD -  -  -  -  ;
   15 00:0CFD -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0CFD -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0CFD -  -  -  -  ;
   18 00:0CFD -  -  -  -  ; ***************************************************************************************
   19 00:0CFD -  -  -  -  
   20 00:0CFD -  -  -  -  Int32FromString:
   21 00:0CFD C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0CFE D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0CFF D5 -  -  -  		push 	de
   24 00:0D00 D9 -  -  -  		exx
   25 00:0D01 D5 -  -  -  		push 	de
   26 00:0D02 -  -  -  -  
   27 00:0D02 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0D06 11 00 00 00 		ld 		de,$0000
   29 00:0D0A D9 -  -  -  		exx
   30 00:0D0B 21 00 00 00 		ld 		hl,$0000
   31 00:0D0F 11 00 00 00 		ld 		de,$0000
   32 00:0D13 D9 -  -  -  		exx
   33 00:0D14 -  -  -  -  
   34 00:0D14 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0D15 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0D17 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0D19 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0D1B 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0D1C -  -  -  -  		;
   40 00:0D1C 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0D1D F5 -  -  -  		push 	af
   42 00:0D1E FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0D20 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0D21 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0D23 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0D24 18 01 -  -  		jr 		_I32FSMain
   47 00:0D26 -  -  -  -  _I32FSNotSigned:		
   48 00:0D26 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0D27 -  -  -  -  		;
   50 00:0D27 -  -  -  -  		; 		Main conversion loop.
   51 00:0D27 -  -  -  -  		; 		
   52 00:0D27 -  -  -  -  _I32FSMain:		
   53 00:0D27 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0D28 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0D2A 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0D2C D6 20 -  -  		sub 	32
   57 00:0D2E -  -  -  -  _I32FSNotLower:
   58 00:0D2E FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0D30 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0D32 FE 3A -  -  		cp 		'9'+1
   61 00:0D34 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0D36 FE 41 -  -  		cp 		'A'
   63 00:0D38 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0D3A FE 47 -  -  		cp 		'F'+1
   65 00:0D3C 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0D3E D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0D40 -  -  -  -  _I32FSOkay:
   68 00:0D40 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0D42 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0D43 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0D45 03 -  -  -  		inc 	bc 							; consume character
   72 00:0D46 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0D47 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0D48 CD 65 0D 00 		call 	Int32Multiply 				; result *= base
   75 00:0D4C F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0D4D 5F -  -  -  		ld 		e,a
   77 00:0D4E CD 9E 0D 00 		call 	Int32Add 					; and add it.
   78 00:0D52 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0D53 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0D55 -  -  -  -  
   81 00:0D55 -  -  -  -  _I32FSExit:
   82 00:0D55 F1 -  -  -  		pop 	af 							; get sign back
   83 00:0D56 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0D58 CC 08 0E 00 		call 	z,Int32Negate
   85 00:0D5C 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0D5D D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0D5E D9 -  -  -  		exx
   88 00:0D5F D1 -  -  -  		pop 	de
   89 00:0D60 D9 -  -  -  		exx
   90 00:0D61 C1 -  -  -  		pop 	bc
   91 00:0D62 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0D64 C9 -  -  -  		ret				
   93 00:0D65 -  -  -  -  
   94 00:0D65 -  -  -  -  ; ***************************************************************************************
   95 00:0D65 -  -  -  -  ;
   96 00:0D65 -  -  -  -  ;									Changes and Updates
   97 00:0D65 -  -  -  -  ;
   98 00:0D65 -  -  -  -  ; ***************************************************************************************
   99 00:0D65 -  -  -  -  ;
  100 00:0D65 -  -  -  -  ;		Date			Notes
  101 00:0D65 -  -  -  -  ;		==== 			=====
  102 00:0D65 -  -  -  -  ;
  103 00:0D65 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0D65 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0D65 -  -  -  -  ; ***************************************************************************************
    2 00:0D65 -  -  -  -  ; ***************************************************************************************
    3 00:0D65 -  -  -  -  ;
    4 00:0D65 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0D65 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D65 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D65 -  -  -  -  ;		Reviewed :	No
    8 00:0D65 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0D65 -  -  -  -  ;
   10 00:0D65 -  -  -  -  ; ***************************************************************************************
   11 00:0D65 -  -  -  -  ; ***************************************************************************************
   12 00:0D65 -  -  -  -  
   13 00:0D65 -  -  -  -  Int32Multiply:
   14 00:0D65 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0D66 D5 -  -  -  		push 	de
   16 00:0D67 44 -  -  -  		ld 		b,h
   17 00:0D68 4D -  -  -  		ld 		c,l
   18 00:0D69 21 00 00 00 		ld 		hl,$0000
   19 00:0D6D -  -  -  -  
   20 00:0D6D D9 -  -  -  		exx
   21 00:0D6E C5 -  -  -  		push 	bc
   22 00:0D6F D5 -  -  -  		push 	de
   23 00:0D70 44 -  -  -  		ld 		b,h
   24 00:0D71 4D -  -  -  		ld 		c,l
   25 00:0D72 21 00 00 00 		ld 		hl,$0000		
   26 00:0D76 D9 -  -  -  		exx
   27 00:0D77 -  -  -  -  
   28 00:0D77 -  -  -  -  _I32MultiplyLoop:
   29 00:0D77 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0D79 C4 9E 0D 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0D7D -  -  -  -  		;
   32 00:0D7D D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0D7E CB 38 -  -  		srl 	b
   34 00:0D80 CB 19 -  -  		rr 		c
   35 00:0D82 D9 -  -  -  		exx
   36 00:0D83 CB 18 -  -  		rr 		b
   37 00:0D85 CB 19 -  -  		rr 		c
   38 00:0D87 -  -  -  -  		;
   39 00:0D87 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0D89 CB 12 -  -  		rl 		d
   41 00:0D8B D9 -  -  -  		exx
   42 00:0D8C CB 13 -  -  		rl 		e
   43 00:0D8E CB 12 -  -  		rl 		d
   44 00:0D90 -  -  -  -  
   45 00:0D90 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0D91 B1 -  -  -  		or 		c
   47 00:0D92 D9 -  -  -  		exx
   48 00:0D93 B0 -  -  -  		or 		b
   49 00:0D94 B1 -  -  -  		or 		c
   50 00:0D95 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0D97 -  -  -  -  
   52 00:0D97 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0D98 D1 -  -  -  		pop 	de
   54 00:0D99 C1 -  -  -  		pop 	bc
   55 00:0D9A D9 -  -  -  		exx
   56 00:0D9B D1 -  -  -  		pop 	de
   57 00:0D9C C1 -  -  -  		pop 	bc
   58 00:0D9D C9 -  -  -  		ret
   59 00:0D9E -  -  -  -  
   60 00:0D9E -  -  -  -  ; ***************************************************************************************
   61 00:0D9E -  -  -  -  ;
   62 00:0D9E -  -  -  -  ;									Changes and Updates
   63 00:0D9E -  -  -  -  ;
   64 00:0D9E -  -  -  -  ; ***************************************************************************************
   65 00:0D9E -  -  -  -  ;
   66 00:0D9E -  -  -  -  ;		Date			Notes
   67 00:0D9E -  -  -  -  ;		==== 			=====
   68 00:0D9E -  -  -  -  ;
   69 00:0D9E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0D9E -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0D9E -  -  -  -  ; ***************************************************************************************
    2 00:0D9E -  -  -  -  ; ***************************************************************************************
    3 00:0D9E -  -  -  -  ;
    4 00:0D9E -  -  -  -  ;		Name : 		isimple.asm
    5 00:0D9E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D9E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D9E -  -  -  -  ;		Reviewed :	No
    8 00:0D9E -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0D9E -  -  -  -  ;
   10 00:0D9E -  -  -  -  ; ***************************************************************************************
   11 00:0D9E -  -  -  -  ; ***************************************************************************************
   12 00:0D9E -  -  -  -  
   13 00:0D9E -  -  -  -  ; ***************************************************************************************
   14 00:0D9E -  -  -  -  ;
   15 00:0D9E -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0D9E -  -  -  -  ;
   17 00:0D9E -  -  -  -  ; ***************************************************************************************
   18 00:0D9E -  -  -  -  
   19 00:0D9E -  -  -  -  Int32Add:
   20 00:0D9E 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0DA0 D9 -  -  -  		exx
   22 00:0DA1 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0DA4 D9 -  -  -  		exx
   24 00:0DA5 C9 -  -  -  		ret
   25 00:0DA6 -  -  -  -  
   26 00:0DA6 -  -  -  -  ; ***************************************************************************************
   27 00:0DA6 -  -  -  -  ;
   28 00:0DA6 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0DA6 -  -  -  -  ;
   30 00:0DA6 -  -  -  -  ; ***************************************************************************************
   31 00:0DA6 -  -  -  -  
   32 00:0DA6 -  -  -  -  Int32Subtract:
   33 00:0DA6 AF -  -  -  		xor 	a 							; clear carry
   34 00:0DA7 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0DAA D9 -  -  -  		exx
   36 00:0DAB 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0DAE D9 -  -  -  		exx
   38 00:0DAF C9 -  -  -  		ret
   39 00:0DB0 -  -  -  -  
   40 00:0DB0 -  -  -  -  ; ***************************************************************************************
   41 00:0DB0 -  -  -  -  ;
   42 00:0DB0 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0DB0 -  -  -  -  ;
   44 00:0DB0 -  -  -  -  ; ***************************************************************************************
   45 00:0DB0 -  -  -  -  
   46 00:0DB0 -  -  -  -  Int32And:
   47 00:0DB0 D9 -  -  -  		exx
   48 00:0DB1 CD B6 0D 00 		call 	_I32AndHLDE
   49 00:0DB5 D9 -  -  -  		exx
   50 00:0DB6 -  -  -  -  _I32AndHLDE:		
   51 00:0DB6 7C -  -  -  		ld 		a,h
   52 00:0DB7 A2 -  -  -  		and 	d
   53 00:0DB8 67 -  -  -  		ld 		h,a
   54 00:0DB9 7D -  -  -  		ld 		a,l
   55 00:0DBA A3 -  -  -  		and 	e
   56 00:0DBB 6F -  -  -  		ld 		l,a
   57 00:0DBC C9 -  -  -  		ret
   58 00:0DBD -  -  -  -  
   59 00:0DBD -  -  -  -  ; ***************************************************************************************
   60 00:0DBD -  -  -  -  ;
   61 00:0DBD -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0DBD -  -  -  -  ;
   63 00:0DBD -  -  -  -  ; ***************************************************************************************
   64 00:0DBD -  -  -  -  
   65 00:0DBD -  -  -  -  Int32Or:
   66 00:0DBD D9 -  -  -  		exx
   67 00:0DBE CD C3 0D 00 		call 	_I32OrHLDE
   68 00:0DC2 D9 -  -  -  		exx
   69 00:0DC3 -  -  -  -  _I32OrHLDE:		
   70 00:0DC3 7C -  -  -  		ld 		a,h
   71 00:0DC4 B2 -  -  -  		or 		d
   72 00:0DC5 67 -  -  -  		ld 		h,a
   73 00:0DC6 7D -  -  -  		ld 		a,l
   74 00:0DC7 B3 -  -  -  		or 		e
   75 00:0DC8 6F -  -  -  		ld 		l,a
   76 00:0DC9 C9 -  -  -  		ret
   77 00:0DCA -  -  -  -  
   78 00:0DCA -  -  -  -  ; ***************************************************************************************
   79 00:0DCA -  -  -  -  ;
   80 00:0DCA -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0DCA -  -  -  -  ;
   82 00:0DCA -  -  -  -  ; ***************************************************************************************
   83 00:0DCA -  -  -  -  
   84 00:0DCA -  -  -  -  Int32Xor:
   85 00:0DCA D9 -  -  -  		exx
   86 00:0DCB CD D0 0D 00 		call 	_I32XorHLDE
   87 00:0DCF D9 -  -  -  		exx
   88 00:0DD0 -  -  -  -  _I32XorHLDE:		
   89 00:0DD0 7C -  -  -  		ld 		a,h
   90 00:0DD1 AA -  -  -  		xor 	d
   91 00:0DD2 67 -  -  -  		ld 		h,a
   92 00:0DD3 7D -  -  -  		ld 		a,l
   93 00:0DD4 AB -  -  -  		xor 	e
   94 00:0DD5 6F -  -  -  		ld 		l,a
   95 00:0DD6 C9 -  -  -  		ret
   96 00:0DD7 -  -  -  -  
   97 00:0DD7 -  -  -  -  ; ***************************************************************************************
   98 00:0DD7 -  -  -  -  ;
   99 00:0DD7 -  -  -  -  ;								 Check if HL'HL zero
  100 00:0DD7 -  -  -  -  ;
  101 00:0DD7 -  -  -  -  ; ***************************************************************************************
  102 00:0DD7 -  -  -  -  
  103 00:0DD7 -  -  -  -  Int32Zero:
  104 00:0DD7 D9 -  -  -  		exx
  105 00:0DD8 7D -  -  -  		ld 		a,l
  106 00:0DD9 B4 -  -  -  		or 		h
  107 00:0DDA D9 -  -  -  		exx
  108 00:0DDB B5 -  -  -  		or 		l
  109 00:0DDC B4 -  -  -  		or 		h
  110 00:0DDD C9 -  -  -  		ret
  111 00:0DDE -  -  -  -  
  112 00:0DDE -  -  -  -  ; ***************************************************************************************
  113 00:0DDE -  -  -  -  ;
  114 00:0DDE -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0DDE -  -  -  -  ;
  116 00:0DDE -  -  -  -  ; ***************************************************************************************
  117 00:0DDE -  -  -  -  
  118 00:0DDE -  -  -  -  Int32Compare:
  119 00:0DDE E5 -  -  -  		push 	hl 							; save HL
  120 00:0DDF AF -  -  -  		xor 	a 							; clear carry
  121 00:0DE0 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0DE3 D9 -  -  -  		exx
  123 00:0DE4 E5 -  -  -  		push 	hl 							; save HL'
  124 00:0DE5 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0DE8 -  -  -  -  		;
  126 00:0DE8 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0DE9 E2 F1 0D 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0DED 78 -  -  -  		ld 		a,b
  129 00:0DEE EE 80 -  -  		xor 	$80
  130 00:0DF0 47 -  -  -  		ld 		b,a
  131 00:0DF1 -  -  -  -  _I32CNoOverflow:
  132 00:0DF1 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0DF2 B5 -  -  -  		or 		l
  134 00:0DF3 D9 -  -  -  		exx 
  135 00:0DF4 B4 -  -  -  		or 		h
  136 00:0DF5 B5 -  -  -  		or 		l
  137 00:0DF6 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0DF8 -  -  -  -  		;
  139 00:0DF8 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0DF9 CB 78 -  -  		bit 	7,b
  141 00:0DFB D9 -  -  -  		exx
  142 00:0DFC 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0DFE 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0E00 3E FF -  -  		ld 		a,$FF
  145 00:0E02 -  -  -  -  _I32NotPos:
  146 00:0E02 D9 -  -  -  		exx
  147 00:0E03 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0E04 D9 -  -  -  		exx
  149 00:0E05 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0E06 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0E07 C9 -  -  -  		ret
  152 00:0E08 -  -  -  -  
  153 00:0E08 -  -  -  -  ; ***************************************************************************************
  154 00:0E08 -  -  -  -  ;
  155 00:0E08 -  -  -  -  ;										Negate HL'HL
  156 00:0E08 -  -  -  -  ;
  157 00:0E08 -  -  -  -  ; ***************************************************************************************
  158 00:0E08 -  -  -  -  
  159 00:0E08 -  -  -  -  Int32Negate:
  160 00:0E08 AF -  -  -  		xor 	a
  161 00:0E09 CD 14 0E 00 		call 	_I32NSubtract
  162 00:0E0D D9 -  -  -  		exx
  163 00:0E0E CD 14 0E 00 		call 	_I32NSubtract
  164 00:0E12 D9 -  -  -  		exx
  165 00:0E13 C9 -  -  -  		ret
  166 00:0E14 -  -  -  -  _I32NSubtract:
  167 00:0E14 D5 -  -  -  		push 	de
  168 00:0E15 EB -  -  -  		ex 		de,hl
  169 00:0E16 21 00 00 00 		ld 		hl,$0000
  170 00:0E1A 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0E1D D1 -  -  -  		pop 	de
  172 00:0E1E C9 -  -  -  		ret
  173 00:0E1F -  -  -  -  		
  174 00:0E1F -  -  -  -  ; ***************************************************************************************
  175 00:0E1F -  -  -  -  ;
  176 00:0E1F -  -  -  -  ;									Changes and Updates
  177 00:0E1F -  -  -  -  ;
  178 00:0E1F -  -  -  -  ; ***************************************************************************************
  179 00:0E1F -  -  -  -  ;
  180 00:0E1F -  -  -  -  ;		Date			Notes
  181 00:0E1F -  -  -  -  ;		==== 			=====
  182 00:0E1F -  -  -  -  ;
  183 00:0E1F -  -  -  -  ; ***************************************************************************************
  184 00:0E1F -  -  -  -  		
Listing for file "_build.asm"
   64 00:0E1F -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0E1F -  -  -  -  ; ***************************************************************************************
    2 00:0E1F -  -  -  -  ; ***************************************************************************************
    3 00:0E1F -  -  -  -  ;
    4 00:0E1F -  -  -  -  ;		Name : 		itostring.asm
    5 00:0E1F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E1F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E1F -  -  -  -  ;		Reviewed :	No
    8 00:0E1F -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0E1F -  -  -  -  ;
   10 00:0E1F -  -  -  -  ; ***************************************************************************************
   11 00:0E1F -  -  -  -  ;
   12 00:0E1F -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0E1F -  -  -  -  ;
   14 00:0E1F -  -  -  -  ; ***************************************************************************************
   15 00:0E1F -  -  -  -  
   16 00:0E1F -  -  -  -  Int32ToString:
   17 00:0E1F C5 -  -  -  		push 	bc 							; save string start
   18 00:0E20 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0E21 E5 -  -  -  		push 	hl
   20 00:0E22 11 00 00 00 		ld	 	de,$0000
   21 00:0E26 D9 -  -  -  		exx
   22 00:0E27 D5 -  -  -  		push 	de
   23 00:0E28 E5 -  -  -  		push 	hl
   24 00:0E29 11 00 00 00 		ld 		de,$000
   25 00:0E2D D9 -  -  -  		exx
   26 00:0E2E 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0E2F -  -  -  -  		;
   28 00:0E2F CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0E31 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0E33 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0E35 5F -  -  -  		ld 		e,a
   32 00:0E36 -  -  -  -  		;
   33 00:0E36 D9 -  -  -  		exx 								; is it -ve ?
   34 00:0E37 CB 7C -  -  		bit 	7,h
   35 00:0E39 D9 -  -  -  		exx
   36 00:0E3A 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0E3C -  -  -  -  		;
   38 00:0E3C CD 08 0E 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0E40 -  -  -  -  		;
   40 00:0E40 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0E42 02 -  -  -  		ld 		(bc),a
   42 00:0E43 03 -  -  -  		inc 	bc
   43 00:0E44 -  -  -  -  _I32TSNotNegative:	
   44 00:0E44 CD 53 0E 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0E48 -  -  -  -  _I32TSExit:
   46 00:0E48 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0E4A 02 -  -  -  		ld 		(bc),a 
   48 00:0E4B -  -  -  -  
   49 00:0E4B D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0E4C E1 -  -  -  		pop 	hl
   51 00:0E4D D1 -  -  -  		pop 	de
   52 00:0E4E D9 -  -  -  		exx
   53 00:0E4F E1 -  -  -  		pop 	hl
   54 00:0E50 D1 -  -  -  		pop 	de
   55 00:0E51 C1 -  -  -  		pop 	bc
   56 00:0E52 C9 -  -  -  		ret
   57 00:0E53 -  -  -  -  
   58 00:0E53 -  -  -  -  _I32RecursiveConvert:
   59 00:0E53 CD 60 0C 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0E57 F5 -  -  -  		push 	af 							; save remainder
   61 00:0E58 CD D7 0D 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0E5C C4 53 0E 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0E60 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0E61 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0E63 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0E65 C6 07 -  -  		add 	a,7
   67 00:0E67 -  -  -  -  _I32NotHex:
   68 00:0E67 C6 30 -  -  		add 	a,48
   69 00:0E69 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0E6A 03 -  -  -  		inc 	bc
   71 00:0E6B C9 -  -  -  		ret		
   72 00:0E6C -  -  -  -  
   73 00:0E6C -  -  -  -  ; ***************************************************************************************
   74 00:0E6C -  -  -  -  ;
   75 00:0E6C -  -  -  -  ;									Changes and Updates
   76 00:0E6C -  -  -  -  ;
   77 00:0E6C -  -  -  -  ; ***************************************************************************************
   78 00:0E6C -  -  -  -  ;
   79 00:0E6C -  -  -  -  ;		Date			Notes
   80 00:0E6C -  -  -  -  ;		==== 			=====
   81 00:0E6C -  -  -  -  ;
   82 00:0E6C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0E6C -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0E6C -  -  -  -  ; ***************************************************************************************
    2 00:0E6C -  -  -  -  ; ***************************************************************************************
    3 00:0E6C -  -  -  -  ;
    4 00:0E6C -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0E6C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E6C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E6C -  -  -  -  ;		Reviewed :	No
    8 00:0E6C -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0E6C -  -  -  -  ;
   10 00:0E6C -  -  -  -  ; ***************************************************************************************
   11 00:0E6C -  -  -  -  ; ***************************************************************************************
   12 00:0E6C -  -  -  -  
   13 00:0E6C -  -  -  -  #ifdef AQUARIUS
   14 00:0E6C             
   15 00:0E6C             ; ***************************************************************************************
   16 00:0E6C             ;
   17 00:0E6C             ;								Initialise system stuff
   18 00:0E6C             ;
   19 00:0E6C             ; ***************************************************************************************
   20 00:0E6C             
   21 00:0E6C             SYSInitialise:
   22 00:0E6C             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0E6C             	call 	SYSPrintChar
   24 00:0E6C             	ret
   25 00:0E6C             
   26 00:0E6C             ; ***************************************************************************************
   27 00:0E6C             ;
   28 00:0E6C             ;								Terminate system stuff
   29 00:0E6C             ;
   30 00:0E6C             ; ***************************************************************************************
   31 00:0E6C             
   32 00:0E6C             SYSTerminate:
   33 00:0E6C             	jr 		SYSTerminate
   34 00:0E6C             
   35 00:0E6C             ; ***************************************************************************************
   36 00:0E6C             ;
   37 00:0E6C             ;								Print A character
   38 00:0E6C             ;
   39 00:0E6C             ; ***************************************************************************************
   40 00:0E6C             
   41 00:0E6C             SYSPrintChar:
   42 00:0E6C             	push 	af 									; we stack everything including alt registers
   43 00:0E6C             	push 	bc
   44 00:0E6C             	push 	de
   45 00:0E6C             	push 	hl
   46 00:0E6C             	push 	ix
   47 00:0E6C             	push 	iy
   48 00:0E6C             	exx
   49 00:0E6C             	push 	bc
   50 00:0E6C             	push 	de
   51 00:0E6C             	push 	hl
   52 00:0E6C             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0E6C             	pop 	hl
   54 00:0E6C             	pop 	de
   55 00:0E6C             	pop 	bc
   56 00:0E6C             	exx
   57 00:0E6C             	pop 	iy
   58 00:0E6C             	pop 	ix
   59 00:0E6C             	pop 	hl
   60 00:0E6C             	pop 	de
   61 00:0E6C             	pop 	bc
   62 00:0E6C             	pop 	af
   63 00:0E6C             	ret		
   64 00:0E6C             
   65 00:0E6C             ; ***************************************************************************************
   66 00:0E6C             ;
   67 00:0E6C             ;									Print Newline
   68 00:0E6C             ;
   69 00:0E6C             ; ***************************************************************************************
   70 00:0E6C             
   71 00:0E6C             SYSPrintCRLF:
   72 00:0E6C             	push 	af
   73 00:0E6C             	ld 		a,13
   74 00:0E6C             	call 	SYSPrintChar
   75 00:0E6C             	ld 		a,10
   76 00:0E6C             	call 	SYSPrintChar
   77 00:0E6C             	pop 	af
   78 00:0E6C             	ret
   79 00:0E6C             
   80 00:0E6C             ; ***************************************************************************************
   81 00:0E6C             ;
   82 00:0E6C             ;									Get time into HL'HL
   83 00:0E6C             ;
   84 00:0E6C             ; ***************************************************************************************
   85 00:0E6C             
   86 00:0E6C             SYSGetTimer:
   87 00:0E6C              	in 		a,($00)
   88 00:0E6C              	ld 		l,a
   89 00:0E6C              	in 		a,($01)
   90 00:0E6C              	ld 		h,a
   91 00:0E6C              	exx
   92 00:0E6C              	in 		a,($02)
   93 00:0E6C              	ld 		l,a
   94 00:0E6C              	in 		a,($03)
   95 00:0E6C              	ld 		h,a
   96 00:0E6C              	exx
   97 00:0E6C             	ret 	
   98 00:0E6C             	
   99 00:0E6C             #endif
  100 00:0E6C -  -  -  -  
  101 00:0E6C -  -  -  -  ; ***************************************************************************************
  102 00:0E6C -  -  -  -  ;
  103 00:0E6C -  -  -  -  ;									Changes and Updates
  104 00:0E6C -  -  -  -  ;
  105 00:0E6C -  -  -  -  ; ***************************************************************************************
  106 00:0E6C -  -  -  -  ;
  107 00:0E6C -  -  -  -  ;		Date			Notes
  108 00:0E6C -  -  -  -  ;		==== 			=====
  109 00:0E6C -  -  -  -  ;
  110 00:0E6C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0E6C -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0E6C -  -  -  -  ; ***************************************************************************************
    2 00:0E6C -  -  -  -  ; ***************************************************************************************
    3 00:0E6C -  -  -  -  ;
    4 00:0E6C -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0E6C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E6C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E6C -  -  -  -  ;		Reviewed :	No
    8 00:0E6C -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0E6C -  -  -  -  ;
   10 00:0E6C -  -  -  -  ; ***************************************************************************************
   11 00:0E6C -  -  -  -  ; ***************************************************************************************
   12 00:0E6C -  -  -  -  
   13 00:0E6C -  -  -  -  #ifdef CLEANEZ80
   14 00:0E6C -  -  -  -  
   15 00:0E6C -  -  -  -  ; ***************************************************************************************
   16 00:0E6C -  -  -  -  ;
   17 00:0E6C -  -  -  -  ;								Initialise system stuff
   18 00:0E6C -  -  -  -  ;
   19 00:0E6C -  -  -  -  ; ***************************************************************************************
   20 00:0E6C -  -  -  -  
   21 00:0E6C -  -  -  -  SYSInitialise:
   22 00:0E6C C9 -  -  -  	ret
   23 00:0E6D -  -  -  -  
   24 00:0E6D -  -  -  -  ; ***************************************************************************************
   25 00:0E6D -  -  -  -  ;
   26 00:0E6D -  -  -  -  ;								Terminate system stuff
   27 00:0E6D -  -  -  -  ;
   28 00:0E6D -  -  -  -  ; ***************************************************************************************
   29 00:0E6D -  -  -  -  
   30 00:0E6D -  -  -  -  SYSTerminate:
   31 00:0E6D C9 -  -  -  	ret
   32 00:0E6E -  -  -  -  
   33 00:0E6E -  -  -  -  ; ***************************************************************************************
   34 00:0E6E -  -  -  -  ;
   35 00:0E6E -  -  -  -  ;								Print A character
   36 00:0E6E -  -  -  -  ;
   37 00:0E6E -  -  -  -  ; ***************************************************************************************
   38 00:0E6E -  -  -  -  
   39 00:0E6E -  -  -  -  SYSPrintChar:
   40 00:0E6E C9 -  -  -  	ret		
   41 00:0E6F -  -  -  -  
   42 00:0E6F -  -  -  -  ; ***************************************************************************************
   43 00:0E6F -  -  -  -  ;
   44 00:0E6F -  -  -  -  ;									Print Newline
   45 00:0E6F -  -  -  -  ;
   46 00:0E6F -  -  -  -  ; ***************************************************************************************
   47 00:0E6F -  -  -  -  
   48 00:0E6F -  -  -  -  SYSPrintCRLF:
   49 00:0E6F C9 -  -  -  	ret
   50 00:0E70 -  -  -  -  
   51 00:0E70 -  -  -  -  ; ***************************************************************************************
   52 00:0E70 -  -  -  -  ;
   53 00:0E70 -  -  -  -  ;									Get time into HL'HL
   54 00:0E70 -  -  -  -  ;
   55 00:0E70 -  -  -  -  ; ***************************************************************************************
   56 00:0E70 -  -  -  -  
   57 00:0E70 -  -  -  -  SYSGetTimer:
   58 00:0E70 C9 -  -  -  	ret
   59 00:0E71 -  -  -  -  
   60 00:0E71 -  -  -  -  #endif
   61 00:0E71 -  -  -  -  
   62 00:0E71 -  -  -  -  ; ***************************************************************************************
   63 00:0E71 -  -  -  -  ;
   64 00:0E71 -  -  -  -  ;									Changes and Updates
   65 00:0E71 -  -  -  -  ;
   66 00:0E71 -  -  -  -  ; ***************************************************************************************
   67 00:0E71 -  -  -  -  ;
   68 00:0E71 -  -  -  -  ;		Date			Notes
   69 00:0E71 -  -  -  -  ;		==== 			=====
   70 00:0E71 -  -  -  -  ;
   71 00:0E71 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0E71 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0E71 -  -  -  -  ; ***************************************************************************************
    2 00:0E71 -  -  -  -  ; ***************************************************************************************
    3 00:0E71 -  -  -  -  ;
    4 00:0E71 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0E71 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E71 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E71 -  -  -  -  ;		Reviewed :	No
    8 00:0E71 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0E71 -  -  -  -  ;
   10 00:0E71 -  -  -  -  ; ***************************************************************************************
   11 00:0E71 -  -  -  -  ; ***************************************************************************************
   12 00:0E71 -  -  -  -  
   13 00:0E71 -  -  -  -  #ifdef TI84
   14 00:0E71             
   15 00:0E71             ; ***************************************************************************************
   16 00:0E71             ;
   17 00:0E71             ;								Initialise system stuff
   18 00:0E71             ;
   19 00:0E71             ; ***************************************************************************************
   20 00:0E71             
   21 00:0E71             SYSInitialise:
   22 00:0E71             	di
   23 00:0E71             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0E71             	ld 		(_IYTemp84),iy
   25 00:0E71             	ret
   26 00:0E71             
   27 00:0E71             ; ***************************************************************************************
   28 00:0E71             ;
   29 00:0E71             ;								Terminate system stuff
   30 00:0E71             ;
   31 00:0E71             ; ***************************************************************************************
   32 00:0E71             
   33 00:0E71             SYSTerminate:
   34 00:0E71             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0E71             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0E71             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0E71             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0E71             	ei
   39 00:0E71             	ret 										; and exit.
   40 00:0E71             
   41 00:0E71             _StackTemp84:									; temp var for TI84 only.
   42 00:0E71             	.dw 	0,0
   43 00:0E71             _IYTemp84:
   44 00:0E71             	.dw 	0,0		
   45 00:0E71             
   46 00:0E71             ; ***************************************************************************************
   47 00:0E71             ;
   48 00:0E71             ;								Print A character
   49 00:0E71             ;
   50 00:0E71             ; ***************************************************************************************
   51 00:0E71             
   52 00:0E71             SYSPrintChar:
   53 00:0E71             	push 	af 									; we stack everything including alt registers
   54 00:0E71             	push 	bc
   55 00:0E71             	push 	de
   56 00:0E71             	push 	hl
   57 00:0E71             	push 	ix
   58 00:0E71             	push 	iy
   59 00:0E71             	exx
   60 00:0E71             	push 	bc
   61 00:0E71             	push 	de
   62 00:0E71             	push 	hl
   63 00:0E71             
   64 00:0E71             	ld 		iy,(_IYTemp84)
   65 00:0E71             	call 	_PutC 								; print A as character
   66 00:0E71             	di
   67 00:0E71             	ld 		(_IYTemp84),iy
   68 00:0E71             
   69 00:0E71             	pop 	hl
   70 00:0E71             	pop 	de
   71 00:0E71             	pop 	bc
   72 00:0E71             	exx
   73 00:0E71             	pop 	iy
   74 00:0E71             	pop 	ix
   75 00:0E71             	pop 	hl
   76 00:0E71             	pop 	de
   77 00:0E71             	pop 	bc
   78 00:0E71             	pop 	af
   79 00:0E71             	ret		
   80 00:0E71             
   81 00:0E71             ; ***************************************************************************************
   82 00:0E71             ;
   83 00:0E71             ;									Print Newline
   84 00:0E71             ;
   85 00:0E71             ; ***************************************************************************************
   86 00:0E71             
   87 00:0E71             SYSPrintCRLF:
   88 00:0E71             	push 	af 									; we stack everything including alt registers
   89 00:0E71             	push 	bc
   90 00:0E71             	push 	de
   91 00:0E71             	push 	hl
   92 00:0E71             	push 	ix
   93 00:0E71             	push 	iy
   94 00:0E71             	exx
   95 00:0E71             	push 	bc
   96 00:0E71             	push 	de
   97 00:0E71             	push 	hl
   98 00:0E71             
   99 00:0E71             	ld 		iy,(_IYTemp84)
  100 00:0E71             	call 	_newline
  101 00:0E71             	di
  102 00:0E71             	ld 		(_IYTemp84),iy
  103 00:0E71             
  104 00:0E71             	pop 	hl
  105 00:0E71             	pop 	de
  106 00:0E71             	pop 	bc
  107 00:0E71             	exx
  108 00:0E71             	pop 	iy
  109 00:0E71             	pop 	ix
  110 00:0E71             	pop 	hl
  111 00:0E71             	pop 	de
  112 00:0E71             	pop 	bc
  113 00:0E71             	pop 	af
  114 00:0E71             	ret
  115 00:0E71             
  116 00:0E71             ; ***************************************************************************************
  117 00:0E71             ;
  118 00:0E71             ;									Get time into HL'HL
  119 00:0E71             ;
  120 00:0E71             ; ***************************************************************************************
  121 00:0E71             
  122 00:0E71             SYSGetTimer:
  123 00:0E71             	ld 		hl,$1234
  124 00:0E71             	exx
  125 00:0E71             	ld 		hl,$5678
  126 00:0E71             	exx
  127 00:0E71             	ret
  128 00:0E71             
  129 00:0E71             #endif
  130 00:0E71 -  -  -  -  
  131 00:0E71 -  -  -  -  ; ***************************************************************************************
  132 00:0E71 -  -  -  -  ;
  133 00:0E71 -  -  -  -  ;									Changes and Updates
  134 00:0E71 -  -  -  -  ;
  135 00:0E71 -  -  -  -  ; ***************************************************************************************
  136 00:0E71 -  -  -  -  ;
  137 00:0E71 -  -  -  -  ;		Date			Notes
  138 00:0E71 -  -  -  -  ;		==== 			=====
  139 00:0E71 -  -  -  -  ;
  140 00:0E71 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0E71 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0E71 -  -  -  -  ; ***************************************************************************************
    2 00:0E71 -  -  -  -  ; ***************************************************************************************
    3 00:0E71 -  -  -  -  ;
    4 00:0E71 -  -  -  -  ;		Name : 		basic.asm
    5 00:0E71 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E71 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E71 -  -  -  -  ;		Reviewed :	No
    8 00:0E71 -  -  -  -  ;		Purpose :	Main program.
    9 00:0E71 -  -  -  -  ;
   10 00:0E71 -  -  -  -  ; ***************************************************************************************
   11 00:0E71 -  -  -  -  ; ***************************************************************************************
   12 00:0E71 -  -  -  -  
   13 00:0E71 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 21 01 00 BD 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 09 02 00 
              BC 00 AA 4C 
              AB 80 06 03 
              00 C0 00 80 
              0A 04 00 BC 
              04 AA 8A 41 
              AB 80 0A 05 
              00 BC 05 AA 
              8A 41 AB 80 
              0A 06 00 C0 
              04 A6 05 A6 
              00 80 00 -  	.db	$21,$01,$00,$bd,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$09,$02,$00,$bc,$00,$aa,$4c,$ab,$80,$06,$03,$00,$c0,$00,$80,$0a,$04,$00,$bc,$04,$aa,$8a,$41,$ab,$80,$0a,$05,$00,$bc,$05,$aa,$8a,$41,$ab,$80,$0a,$06,$00,$c0,$04,$a6,$05,$a6,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:104F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:204F -  -  -  -  EndTestInstance:
   18 00:204F -  -  -  -  		
   19 00:204F -  -  -  -  ; ***************************************************************************************
   20 00:204F -  -  -  -  ;
   21 00:204F -  -  -  -  ;									Changes and Updates
   22 00:204F -  -  -  -  ;
   23 00:204F -  -  -  -  ; ***************************************************************************************
   24 00:204F -  -  -  -  ;
   25 00:204F -  -  -  -  ;		Date			Notes
   26 00:204F -  -  -  -  ;		==== 			=====
   27 00:204F -  -  -  -  ;
   28 00:204F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:204F -  -  -  -  FinalAddress:
