    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_XOR                             	$0092 ; xor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD 04 0A 00 		call 	SYSInitialise
   44 00:0004 11 00 0C 00 		ld 		de,TestInstance
   45 00:0008 21 2A 1C 00 		ld 		hl,EndTestInstance
   46 00:000C CD 9E 04 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 54 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 00 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD 06 0A 00 		call 	SYSPrintChar
   56 00:0020 CD 05 0A 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 9A 
              01 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 9A 
              01 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  
   59 00:004C -  -  -  -  ; ***************************************************************************************
   60 00:004C -  -  -  -  ;
   61 00:004C -  -  -  -  ;										Run variables
   62 00:004C -  -  -  -  ;
   63 00:004C -  -  -  -  ; ***************************************************************************************
   64 00:004C -  -  -  -  
   65 00:004C -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 00:004C 00 00 00 00 		.dw 	0,0
   67 00:0050 -  -  -  -  		
   68 00:0050 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  
   71 00:0054 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 00:0054 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 00:005A -  -  -  -  
   74 00:005A -  -  -  -  AConvert: 									; used for address conversions.
   75 00:005A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:0060 -  -  -  -  		
   77 00:0060 -  -  -  -  RandomSeed: 								; random number seeds.
   78 00:0060 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 00:0070 -  -  -  -  
   80 00:0070 -  -  -  -  s; ***************************************************************************************
   81 00:0070 -  -  -  -  ;
   82 00:0070 -  -  -  -  ;										  Buffers
   83 00:0070 -  -  -  -  ;
   84 00:0070 -  -  -  -  ; ***************************************************************************************
   85 00:0070 -  -  -  -  
   86 00:0070 -  -  -  -  ConvertBuffer:
   87 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 00:00B0 -  -  -  -  
   89 00:00B0 -  -  -  -  ; ***************************************************************************************
   90 00:00B0 -  -  -  -  ;
   91 00:00B0 -  -  -  -  ;									Changes and Updates
   92 00:00B0 -  -  -  -  ;
   93 00:00B0 -  -  -  -  ; ***************************************************************************************
   94 00:00B0 -  -  -  -  ;
   95 00:00B0 -  -  -  -  ;		Date			Notes
   96 00:00B0 -  -  -  -  ;		==== 			=====
   97 00:00B0 -  -  -  -  ;
   98 00:00B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00B0 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00B0 -  -  -  -  ; ***************************************************************************************
    2 00:00B0 -  -  -  -  ; ***************************************************************************************
    3 00:00B0 -  -  -  -  ;
    4 00:00B0 -  -  -  -  ;		Name : 		assert.asm
    5 00:00B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00B0 -  -  -  -  ;		Reviewed :	No
    8 00:00B0 -  -  -  -  ;		Purpose :	Assert command
    9 00:00B0 -  -  -  -  ;
   10 00:00B0 -  -  -  -  ; ***************************************************************************************
   11 00:00B0 -  -  -  -  ; ***************************************************************************************
   12 00:00B0 -  -  -  -  
   13 00:00B0 -  -  -  -  ; ***************************************************************************************
   14 00:00B0 -  -  -  -  ;
   15 00:00B0 -  -  -  -  ;									ASSERT command
   16 00:00B0 -  -  -  -  ;
   17 00:00B0 -  -  -  -  ; ***************************************************************************************
   18 00:00B0 -  -  -  -  
   19 00:00B0 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00B0 CD 0A 03 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00B4 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00BA C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00BB 3E 01 C3 9A 
              01 00 -  -  		ERR_ASSERT
   24 00:00C1 -  -  -  -  
   25 00:00C1 -  -  -  -  ; ***************************************************************************************
   26 00:00C1 -  -  -  -  ;
   27 00:00C1 -  -  -  -  ;									Changes and Updates
   28 00:00C1 -  -  -  -  ;
   29 00:00C1 -  -  -  -  ; ***************************************************************************************
   30 00:00C1 -  -  -  -  ;
   31 00:00C1 -  -  -  -  ;		Date			Notes
   32 00:00C1 -  -  -  -  ;		==== 			=====
   33 00:00C1 -  -  -  -  ;
   34 00:00C1 -  -  -  -  ; ***************************************************************************************
   35 00:00C1 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00C1 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00C1 -  -  -  -  ; ***************************************************************************************
    2 00:00C1 -  -  -  -  ; ***************************************************************************************
    3 00:00C1 -  -  -  -  ;
    4 00:00C1 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C1 -  -  -  -  ;		Reviewed :	No
    8 00:00C1 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00C1 -  -  -  -  ;
   10 00:00C1 -  -  -  -  ; ***************************************************************************************
   11 00:00C1 -  -  -  -  ; ***************************************************************************************
   12 00:00C1 -  -  -  -  
   13 00:00C1 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00C1 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00C1 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00C1 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00C1 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00C1 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00C1 C3 04 02 00 		jp 		SyntaxError
   20 00:00C5 -  -  -  -  
   21 00:00C5 -  -  -  -  ; ***************************************************************************************
   22 00:00C5 -  -  -  -  ;
   23 00:00C5 -  -  -  -  ;									Changes and Updates
   24 00:00C5 -  -  -  -  ;
   25 00:00C5 -  -  -  -  ; ***************************************************************************************
   26 00:00C5 -  -  -  -  ;
   27 00:00C5 -  -  -  -  ;		Date			Notes
   28 00:00C5 -  -  -  -  ;		==== 			=====
   29 00:00C5 -  -  -  -  ;
   30 00:00C5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00C5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00C5 -  -  -  -  ; ***************************************************************************************
    2 00:00C5 -  -  -  -  ; ***************************************************************************************
    3 00:00C5 -  -  -  -  ;
    4 00:00C5 -  -  -  -  ;		Name : 		colon.asm
    5 00:00C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00C5 -  -  -  -  ;		Reviewed :	No
    8 00:00C5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00C5 -  -  -  -  ;
   10 00:00C5 -  -  -  -  ; ***************************************************************************************
   11 00:00C5 -  -  -  -  ; ***************************************************************************************
   12 00:00C5 -  -  -  -  
   13 00:00C5 -  -  -  -  ; ***************************************************************************************
   14 00:00C5 -  -  -  -  ;
   15 00:00C5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00C5 -  -  -  -  ;
   17 00:00C5 -  -  -  -  ; ***************************************************************************************
   18 00:00C5 -  -  -  -  
   19 00:00C5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00C5 C9 -  -  -  		ret
   21 00:00C6 -  -  -  -  
   22 00:00C6 -  -  -  -  ; ***************************************************************************************
   23 00:00C6 -  -  -  -  ;
   24 00:00C6 -  -  -  -  ;									Changes and Updates
   25 00:00C6 -  -  -  -  ;
   26 00:00C6 -  -  -  -  ; ***************************************************************************************
   27 00:00C6 -  -  -  -  ;
   28 00:00C6 -  -  -  -  ;		Date			Notes
   29 00:00C6 -  -  -  -  ;		==== 			=====
   30 00:00C6 -  -  -  -  ;
   31 00:00C6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00C6 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00C6 -  -  -  -  ; ***************************************************************************************
    2 00:00C6 -  -  -  -  ; ***************************************************************************************
    3 00:00C6 -  -  -  -  ;
    4 00:00C6 -  -  -  -  ;		Name : 		end.asm
    5 00:00C6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C6 -  -  -  -  ;		Reviewed :	No
    8 00:00C6 -  -  -  -  ;		Purpose :	End command
    9 00:00C6 -  -  -  -  ;
   10 00:00C6 -  -  -  -  ; ***************************************************************************************
   11 00:00C6 -  -  -  -  ; ***************************************************************************************
   12 00:00C6 -  -  -  -  
   13 00:00C6 -  -  -  -  ; ***************************************************************************************
   14 00:00C6 -  -  -  -  ;
   15 00:00C6 -  -  -  -  ;										END command
   16 00:00C6 -  -  -  -  ;
   17 00:00C6 -  -  -  -  ; ***************************************************************************************
   18 00:00C6 -  -  -  -  
   19 00:00C6 -  -  -  -  Command_END: 	;; [end]
   20 00:00C6 3E 00 C3 9A 
              01 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00CC -  -  -  -  
   22 00:00CC -  -  -  -  ; ***************************************************************************************
   23 00:00CC -  -  -  -  ;
   24 00:00CC -  -  -  -  ;									Changes and Updates
   25 00:00CC -  -  -  -  ;
   26 00:00CC -  -  -  -  ; ***************************************************************************************
   27 00:00CC -  -  -  -  ;
   28 00:00CC -  -  -  -  ;		Date			Notes
   29 00:00CC -  -  -  -  ;		==== 			=====
   30 00:00CC -  -  -  -  ;
   31 00:00CC -  -  -  -  ; ***************************************************************************************
   32 00:00CC -  -  -  -  		
Listing for file "_build.asm"
   17 00:00CC -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00CC -  -  -  -  ; ***************************************************************************************
    2 00:00CC -  -  -  -  ; ***************************************************************************************
    3 00:00CC -  -  -  -  ;
    4 00:00CC -  -  -  -  ;		Name : 		endofline.asm
    5 00:00CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00CC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00CC -  -  -  -  ;		Reviewed :	None
    8 00:00CC -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00CC -  -  -  -  ;
   10 00:00CC -  -  -  -  ; ***************************************************************************************
   11 00:00CC -  -  -  -  ; ***************************************************************************************
   12 00:00CC -  -  -  -  
   13 00:00CC -  -  -  -  ; ***************************************************************************************
   14 00:00CC -  -  -  -  ;
   15 00:00CC -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00CC -  -  -  -  ;
   17 00:00CC -  -  -  -  ; ***************************************************************************************
   18 00:00CC -  -  -  -  
   19 00:00CC -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00CC DD 2A 4C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00D1 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00D5 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00D8 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00DA -  -  -  -  		;
   25 00:00DA ED 7B 50 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00DF C3 0E 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00E3 -  -  -  -  
   28 00:00E3 -  -  -  -  ; ***************************************************************************************
   29 00:00E3 -  -  -  -  ;
   30 00:00E3 -  -  -  -  ;									Changes and Updates
   31 00:00E3 -  -  -  -  ;
   32 00:00E3 -  -  -  -  ; ***************************************************************************************
   33 00:00E3 -  -  -  -  ;
   34 00:00E3 -  -  -  -  ;		Date			Notes
   35 00:00E3 -  -  -  -  ;		==== 			=====
   36 00:00E3 -  -  -  -  ;
   37 00:00E3 -  -  -  -  ; ***************************************************************************************
   38 00:00E3 -  -  -  -  		
Listing for file "_build.asm"
   18 00:00E3 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:00E3 -  -  -  -  ; ***************************************************************************************
    2 00:00E3 -  -  -  -  ; ***************************************************************************************
    3 00:00E3 -  -  -  -  ;
    4 00:00E3 -  -  -  -  ;		Name : 		rem.asm
    5 00:00E3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E3 -  -  -  -  ;		Reviewed :	No
    8 00:00E3 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:00E3 -  -  -  -  ;
   10 00:00E3 -  -  -  -  ; ***************************************************************************************
   11 00:00E3 -  -  -  -  ; ***************************************************************************************
   12 00:00E3 -  -  -  -  
   13 00:00E3 -  -  -  -  ; ***************************************************************************************
   14 00:00E3 -  -  -  -  ;
   15 00:00E3 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:00E3 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:00E3 -  -  -  -  ;
   18 00:00E3 -  -  -  -  ; ***************************************************************************************
   19 00:00E3 -  -  -  -  
   20 00:00E3 -  -  -  -  Command_REM: 	;; [rem]
   21 00:00E3 -  -  -  -  Command_REM2: 	;; [']
   22 00:00E3 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:00E6 DD 23 -  -  		inc 	ix
   24 00:00E8 FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:00EA C8 -  -  -  		ret 	z
   26 00:00EB FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:00ED C8 -  -  -  		ret 	z
   28 00:00EE FE 3F -  -  		cp 		STRING_MARKER
   29 00:00F0 C2 04 02 00 		jp 		nz,SyntaxError
   30 00:00F4 -  -  -  -  		;		
   31 00:00F4 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:00F8 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:00FB 13 -  -  -  		inc 	de 
   34 00:00FC 13 -  -  -  		inc 	de
   35 00:00FD DD 19 -  -  		add 	ix,de 						; skip string
   36 00:00FF C9 -  -  -  		ret
   37 00:0100 -  -  -  -  
   38 00:0100 -  -  -  -  ; ***************************************************************************************
   39 00:0100 -  -  -  -  ;
   40 00:0100 -  -  -  -  ;									Changes and Updates
   41 00:0100 -  -  -  -  ;
   42 00:0100 -  -  -  -  ; ***************************************************************************************
   43 00:0100 -  -  -  -  ;
   44 00:0100 -  -  -  -  ;		Date			Notes
   45 00:0100 -  -  -  -  ;		==== 			=====
   46 00:0100 -  -  -  -  ;
   47 00:0100 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:0100 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:0100 -  -  -  -  ; ***************************************************************************************
    2 00:0100 -  -  -  -  ; ***************************************************************************************
    3 00:0100 -  -  -  -  ;
    4 00:0100 -  -  -  -  ;		Name : 		run.asm
    5 00:0100 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0100 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0100 -  -  -  -  ;		Reviewed :	No
    8 00:0100 -  -  -  -  ;		Purpose :	Run command
    9 00:0100 -  -  -  -  ;
   10 00:0100 -  -  -  -  ; ***************************************************************************************
   11 00:0100 -  -  -  -  ; ***************************************************************************************
   12 00:0100 -  -  -  -  
   13 00:0100 -  -  -  -  ; ***************************************************************************************
   14 00:0100 -  -  -  -  ;
   15 00:0100 -  -  -  -  ;										RUN command
   16 00:0100 -  -  -  -  ;
   17 00:0100 -  -  -  -  ; ***************************************************************************************
   18 00:0100 -  -  -  -  
   19 00:0100 -  -  -  -  Command_RUN: 	;; [run]
   20 00:0100 CD 6B 04 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:0104 -  -  -  -  
   22 00:0104 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:0109 ED 73 50 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:010E -  -  -  -  		;
   25 00:010E -  -  -  -  		; 		New line at IX.
   26 00:010E -  -  -  -  		;
   27 00:010E -  -  -  -  CRNewLine:
   28 00:010E DD 22 4C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:0113 -  -  -  -  		;
   30 00:0113 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:0116 B7 -  -  -  		or 		a
   32 00:0117 CA C6 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:011B -  -  -  -  		;
   34 00:011B DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:011D DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:011F DD 23 -  -  		inc 	ix
   37 00:0121 -  -  -  -  		;
   38 00:0121 -  -  -  -  		; 		New command at IX
   39 00:0121 -  -  -  -  		;
   40 00:0121 -  -  -  -  _CRNewCommand:	
   41 00:0121 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:0124 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:0125 F2 5C 01 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:0129 -  -  -  -  		;
   45 00:0129 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:012B 30 06 -  -  		jr  	nc,_CRDoCommand
   47 00:012D FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:012F D2 50 01 00 		jp 		nc,_CRAlternateLets
   49 00:0133 -  -  -  -  		;
   50 00:0133 -  -  -  -  _CRDoCommand:		
   51 00:0133 E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 06 
              00 19 ED 17 
              ED 53 55 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:0148 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:014A CD 54 00 00 		call 	JumpCode 					; call the routine.
   54 00:014E 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:0150 -  -  -  -  		;
   56 00:0150 -  -  -  -  		; 		Do CALL (HL)
   57 00:0150 -  -  -  -  		;
   58 00:0150 -  -  -  -  		;
   59 00:0150 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:0150 -  -  -  -  		;		
   61 00:0150 -  -  -  -  _CRAlternateLets:		
   62 00:0150 FE 83 -  -  		cp 		KWD_PLING
   63 00:0152 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 00:0154 FE 84 -  -  		cp 		KWD_QMARK
   65 00:0156 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 00:0158 C3 04 02 00 		jp 		SyntaxError
   67 00:015C -  -  -  -  		;
   68 00:015C -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:015C -  -  -  -  		;
   70 00:015C -  -  -  -  _CRAssignmentHandler:		
   71 00:015C FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:015E D2 04 02 00 		jp 		nc,SyntaxError
   73 00:0162 -  -  -  -  _CRAssignmentLet:		
   74 00:0162 3E 0C C3 9A 
              01 00 -  -  		ERR_TODO
   75 00:0168 -  -  -  -  		;call	Command_LET
   76 00:0168 C3 21 01 00 		jp 		_CRNewCommand
   77 00:016C -  -  -  -  
   78 00:016C -  -  -  -  ; ***************************************************************************************
   79 00:016C -  -  -  -  ;
   80 00:016C -  -  -  -  ;									Changes and Updates
   81 00:016C -  -  -  -  ;
   82 00:016C -  -  -  -  ; ***************************************************************************************
   83 00:016C -  -  -  -  ;
   84 00:016C -  -  -  -  ;		Date			Notes
   85 00:016C -  -  -  -  ;		==== 			=====
   86 00:016C -  -  -  -  ;
   87 00:016C -  -  -  -  ; ***************************************************************************************
   88 00:016C -  -  -  -  		
Listing for file "_build.asm"
   20 00:016C -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:016C -  -  -  -  ; ***************************************************************************************
    2 00:016C -  -  -  -  ; ***************************************************************************************
    3 00:016C -  -  -  -  ;
    4 00:016C -  -  -  -  ;		Name : 		stop.asm
    5 00:016C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:016C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:016C -  -  -  -  ;		Reviewed :	No
    8 00:016C -  -  -  -  ;		Purpose :	Stop command
    9 00:016C -  -  -  -  ;
   10 00:016C -  -  -  -  ; ***************************************************************************************
   11 00:016C -  -  -  -  ; ***************************************************************************************
   12 00:016C -  -  -  -  
   13 00:016C -  -  -  -  ; ***************************************************************************************
   14 00:016C -  -  -  -  ;
   15 00:016C -  -  -  -  ;										STOP command
   16 00:016C -  -  -  -  ;
   17 00:016C -  -  -  -  ; ***************************************************************************************
   18 00:016C -  -  -  -  
   19 00:016C -  -  -  -  Command_STOP: 	;; [stop]
   20 00:016C 3E 0A C3 9A 
              01 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0172 -  -  -  -  
   22 00:0172 -  -  -  -  ; ***************************************************************************************
   23 00:0172 -  -  -  -  ;
   24 00:0172 -  -  -  -  ;									Changes and Updates
   25 00:0172 -  -  -  -  ;
   26 00:0172 -  -  -  -  ; ***************************************************************************************
   27 00:0172 -  -  -  -  ;
   28 00:0172 -  -  -  -  ;		Date			Notes
   29 00:0172 -  -  -  -  ;		==== 			=====
   30 00:0172 -  -  -  -  ;
   31 00:0172 -  -  -  -  ; ***************************************************************************************
   32 00:0172 -  -  -  -  		
Listing for file "_build.asm"
   21 00:0172 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0172 -  -  -  -  ; ***************************************************************************************
    2 00:0172 -  -  -  -  ; ***************************************************************************************
    3 00:0172 -  -  -  -  ;
    4 00:0172 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0172 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0172 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0172 -  -  -  -  ;		Reviewed :	No
    8 00:0172 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0172 -  -  -  -  ;
   10 00:0172 -  -  -  -  ; ***************************************************************************************
   11 00:0172 -  -  -  -  ; ***************************************************************************************
   12 00:0172 -  -  -  -  
   13 00:0172 -  -  -  -  ; ***************************************************************************************
   14 00:0172 -  -  -  -  ;
   15 00:0172 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0172 -  -  -  -  ;
   17 00:0172 -  -  -  -  ; ***************************************************************************************
   18 00:0172 -  -  -  -  
   19 00:0172 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0172             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0172             		inc 	ix
   22 00:0172             		cp 		ch 							; exit if matches
   23 00:0172             		ret 	z
   24 00:0172             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0172             		jp 		ErrorHandler
   26 00:0172             #endmacro
   27 00:0172 -  -  -  -  
   28 00:0172 -  -  -  -  CheckRightBracket:
   29 00:0172 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 9A 
              01 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0180 -  -  -  -  
   31 00:0180 -  -  -  -  CheckComma:
   32 00:0180 DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 9A 
              01 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 00:018E -  -  -  -  
   34 00:018E -  -  -  -  ; ***************************************************************************************
   35 00:018E -  -  -  -  ;
   36 00:018E -  -  -  -  ; 							Check A, gives Syntax Error
   37 00:018E -  -  -  -  ;
   38 00:018E -  -  -  -  ; ***************************************************************************************
   39 00:018E -  -  -  -  
   40 00:018E -  -  -  -  CheckNextA:
   41 00:018E DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 00:0191 DD 23 -  -  		inc 	ix 							; skip character
   43 00:0193 C8 -  -  -  		ret 	z 							; yes, okay
   44 00:0194 3E 0B C3 9A 
              01 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 00:019A -  -  -  -  		
   46 00:019A -  -  -  -  ; ***************************************************************************************
   47 00:019A -  -  -  -  ;
   48 00:019A -  -  -  -  ;									Changes and Updates
   49 00:019A -  -  -  -  ;
   50 00:019A -  -  -  -  ; ***************************************************************************************
   51 00:019A -  -  -  -  ;
   52 00:019A -  -  -  -  ;		Date			Notes
   53 00:019A -  -  -  -  ;		==== 			=====
   54 00:019A -  -  -  -  ;
   55 00:019A -  -  -  -  ; ***************************************************************************************
   56 00:019A -  -  -  -  		
Listing for file "_build.asm"
   22 00:019A -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:019A -  -  -  -  ; ***************************************************************************************
    2 00:019A -  -  -  -  ; ***************************************************************************************
    3 00:019A -  -  -  -  ;
    4 00:019A -  -  -  -  ;		Name : 		errors.asm
    5 00:019A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:019A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:019A -  -  -  -  ;		Reviewed :	No
    8 00:019A -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:019A -  -  -  -  ;
   10 00:019A -  -  -  -  ; ***************************************************************************************
   11 00:019A -  -  -  -  ; ***************************************************************************************
   12 00:019A -  -  -  -  
   13 00:019A -  -  -  -  ; ***************************************************************************************
   14 00:019A -  -  -  -  ;
   15 00:019A -  -  -  -  ;								Error handler, message A 
   16 00:019A -  -  -  -  ;
   17 00:019A -  -  -  -  ; ***************************************************************************************
   18 00:019A -  -  -  -  
   19 00:019A -  -  -  -  ErrorHandler:
   20 00:019A F5 -  -  -  		push 	af 						; save error ID
   21 00:019B -  -  -  -  
   22 00:019B 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:019F 6F -  -  -  		ld 		l,a
   24 00:01A0 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:01A1 29 -  -  -  		add 	hl,hl 		
   26 00:01A2 11 F0 05 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:01A6 19 -  -  -  		add 	hl,de
   28 00:01A7 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:01A9 CD BD 04 00 		call 	PrintStringAtHL
   30 00:01AD -  -  -  -  		;
   31 00:01AD F1 -  -  -  		pop 	af 						; restore error ID
   32 00:01AE B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:01AF 28 2F -  -  		jr 		z,_EHExit
   34 00:01B1 -  -  -  -  		;
   35 00:01B1 DD 2A 4C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:01B6 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:01B9 B7 -  -  -  		or 		a
   38 00:01BA 28 24 -  -  		jr 		z,_EHExit
   39 00:01BC -  -  -  -  
   40 00:01BC 21 E8 01 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:01C0 CD BD 04 00 		call 	PrintStringAtHL 
   42 00:01C4 -  -  -  -  		
   43 00:01C4 D9 -  -  -  		exx								; HL'HL = line number
   44 00:01C5 21 00 00 00 		ld 		hl,$0000 		
   45 00:01C9 D9 -  -  -  		exx 
   46 00:01CA DD 6E 01 -  		ld 		l,(ix+1)
   47 00:01CD DD 66 02 -  		ld 		h,(ix+2)
   48 00:01D0 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:01D2 01 70 00 00 		ld 		bc,ConvertBuffer
   50 00:01D6 CD B8 09 00 		call 	Int32ToString
   51 00:01DA C5 -  -  -  		push 	bc
   52 00:01DB E1 -  -  -  		pop 	hl
   53 00:01DC CD BD 04 00 		call 	PrintStringAtHL			; print error line number.
   54 00:01E0 -  -  -  -  _EHExit:		
   55 00:01E0 CD 07 0A 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:01E4 C3 1A 00 00 		jp 		WarmStart
   57 00:01E8 -  -  -  -  
   58 00:01E8 -  -  -  -  _EHAtText:
   59 00:01E8 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:01F2 -  -  -  -  
   61 00:01F2 -  -  -  -  NotImplemented:
   62 00:01F2 3E 04 C3 9A 
              01 00 -  -  		ERR_DISABLED
   63 00:01F8 -  -  -  -  TypeMismatch:
   64 00:01F8 3E 02 C3 9A 
              01 00 -  -  		ERR_BADTYPE
   65 00:01FE -  -  -  -  BadValue:
   66 00:01FE 3E 03 C3 9A 
              01 00 -  -  		ERR_BADVALUE
   67 00:0204 -  -  -  -  SyntaxError:
   68 00:0204 3E 0B C3 9A 
              01 00 -  -  		ERR_SYNTAX
   69 00:020A -  -  -  -  						
   70 00:020A -  -  -  -  ; ***************************************************************************************
   71 00:020A -  -  -  -  ;
   72 00:020A -  -  -  -  ;									Changes and Updates
   73 00:020A -  -  -  -  ;
   74 00:020A -  -  -  -  ; ***************************************************************************************
   75 00:020A -  -  -  -  ;
   76 00:020A -  -  -  -  ;		Date			Notes
   77 00:020A -  -  -  -  ;		==== 			=====
   78 00:020A -  -  -  -  ;
   79 00:020A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:020A -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:020A -  -  -  -  ; ***************************************************************************************
    2 00:020A -  -  -  -  ; ***************************************************************************************
    3 00:020A -  -  -  -  ;
    4 00:020A -  -  -  -  ;		Name : 		basicmath.asm
    5 00:020A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:020A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:020A -  -  -  -  ;		Reviewed :	No
    8 00:020A -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:020A -  -  -  -  ;
   10 00:020A -  -  -  -  ; ***************************************************************************************
   11 00:020A -  -  -  -  ; ***************************************************************************************
   12 00:020A -  -  -  -  
   13 00:020A -  -  -  -  ; ***************************************************************************************
   14 00:020A -  -  -  -  ;
   15 00:020A -  -  -  -  ; 									Addition
   16 00:020A -  -  -  -  ;
   17 00:020A -  -  -  -  ; ***************************************************************************************
   18 00:020A -  -  -  -  
   19 00:020A -  -  -  -  ALUAdd: 		;; [+]
   20 00:020A CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 37 
              09 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:0218 -  -  -  -  
   22 00:0218 -  -  -  -  ; ***************************************************************************************
   23 00:0218 -  -  -  -  ;
   24 00:0218 -  -  -  -  ; 									Subtraction
   25 00:0218 -  -  -  -  ;
   26 00:0218 -  -  -  -  ; ***************************************************************************************
   27 00:0218 -  -  -  -  
   28 00:0218 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:0218 CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 3F 
              09 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:0226 -  -  -  -  
   31 00:0226 -  -  -  -  ; ***************************************************************************************
   32 00:0226 -  -  -  -  ;
   33 00:0226 -  -  -  -  ; 									  Multiply
   34 00:0226 -  -  -  -  ;
   35 00:0226 -  -  -  -  ; ***************************************************************************************
   36 00:0226 -  -  -  -  
   37 00:0226 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:0226 CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 FE 
              08 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0234 -  -  -  -  
   40 00:0234 -  -  -  -  ; ***************************************************************************************
   41 00:0234 -  -  -  -  ;
   42 00:0234 -  -  -  -  ; 									  Divide
   43 00:0234 -  -  -  -  ;
   44 00:0234 -  -  -  -  ; ***************************************************************************************
   45 00:0234 -  -  -  -  
   46 00:0234 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0234 CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 FF 
              07 00 -  -  		IntegerDispatch(Int32SDivide)
   48 00:0242 -  -  -  -  
   49 00:0242 -  -  -  -  ; ***************************************************************************************
   50 00:0242 -  -  -  -  ;
   51 00:0242 -  -  -  -  ; 									  Modulus
   52 00:0242 -  -  -  -  ;
   53 00:0242 -  -  -  -  ; ***************************************************************************************
   54 00:0242 -  -  -  -  
   55 00:0242 -  -  -  -  ALUModulus: 	;; [mod]
   56 00:0242 CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 02 
              08 00 -  -  		IntegerDispatch(Int32Modulus)
   57 00:0250 -  -  -  -  
   58 00:0250 -  -  -  -  ; ***************************************************************************************
   59 00:0250 -  -  -  -  ;
   60 00:0250 -  -  -  -  ; 									  Logical
   61 00:0250 -  -  -  -  ;
   62 00:0250 -  -  -  -  ; ***************************************************************************************
   63 00:0250 -  -  -  -  
   64 00:0250 -  -  -  -  ALUAnd: 		;; [and]
   65 00:0250 CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 49 
              09 00 -  -  		IntegerDispatch(Int32And)
   66 00:025E -  -  -  -  
   67 00:025E -  -  -  -  ALUOr: 			;; [or]
   68 00:025E CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 56 
              09 00 -  -  		IntegerDispatch(Int32Or)
   69 00:026C -  -  -  -  
   70 00:026C -  -  -  -  ALUXor: 		;; [xor]
   71 00:026C CD 82 02 00 
              78 B1 C2 F8 
              01 00 C3 63 
              09 00 -  -  		IntegerDispatch(Int32Xor)
   72 00:027A -  -  -  -  
   73 00:027A -  -  -  -  ; ***************************************************************************************
   74 00:027A -  -  -  -  ;
   75 00:027A -  -  -  -  ;									Changes and Updates
   76 00:027A -  -  -  -  ;
   77 00:027A -  -  -  -  ; ***************************************************************************************
   78 00:027A -  -  -  -  ;
   79 00:027A -  -  -  -  ;		Date			Notes
   80 00:027A -  -  -  -  ;		==== 			=====
   81 00:027A -  -  -  -  ;
   82 00:027A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:027A -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:027A -  -  -  -  ; ***************************************************************************************
    2 00:027A -  -  -  -  ; ***************************************************************************************
    3 00:027A -  -  -  -  ;
    4 00:027A -  -  -  -  ;		Name : 		utility.asm
    5 00:027A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:027A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:027A -  -  -  -  ;		Reviewed :	No
    8 00:027A -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:027A -  -  -  -  ;
   10 00:027A -  -  -  -  ; ***************************************************************************************
   11 00:027A -  -  -  -  ; ***************************************************************************************
   12 00:027A -  -  -  -  
   13 00:027A -  -  -  -  ; ***************************************************************************************
   14 00:027A -  -  -  -  ;
   15 00:027A -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:027A -  -  -  -  ;
   17 00:027A -  -  -  -  ; ***************************************************************************************
   18 00:027A -  -  -  -  
   19 00:027A -  -  -  -  SwapHLDE:
   20 00:027A EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:027B D9 -  -  -  			exx
   22 00:027C EB -  -  -  			ex 		de,hl
   23 00:027D D9 -  -  -  			exx
   24 00:027E 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:027F 41 -  -  -  			ld 		b,c
   26 00:0280 4F -  -  -  			ld 		c,a
   27 00:0281 C9 -  -  -  			ret
   28 00:0282 -  -  -  -  
   29 00:0282 -  -  -  -  ; ***************************************************************************************
   30 00:0282 -  -  -  -  ;
   31 00:0282 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:0282 -  -  -  -  ;
   33 00:0282 -  -  -  -  ; ***************************************************************************************
   34 00:0282 -  -  -  -  
   35 00:0282 -  -  -  -  DereferenceBoth:
   36 00:0282 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:0284 C4 3D 03 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0288 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:028A C8 -  -  -  			ret 	z
   40 00:028B CD 7A 02 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:028F CD 3D 03 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:0293 CD 7A 02 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:0297 C9 -  -  -  			ret
   44 00:0298 -  -  -  -  
   45 00:0298 -  -  -  -  ; ***************************************************************************************
   46 00:0298 -  -  -  -  ;
   47 00:0298 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:0298 -  -  -  -  ;
   49 00:0298 -  -  -  -  ; ***************************************************************************************
   50 00:0298 -  -  -  -  
   51 00:0298 -  -  -  -  NegateHLHL:	
   52 00:0298 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:029A C2 F8 01 00 			jp 		nz,TypeMismatch
   54 00:029E CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:02A0 C4 3D 03 00 			call 	nz,Dereference 			; if required.
   56 00:02A4 CD A1 09 00 			call 	Int32Negate
   57 00:02A8 C9 -  -  -  			ret
Listing for file "_build.asm"
   25 00:02A9 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:02A9 -  -  -  -  ; ***************************************************************************************
    2 00:02A9 -  -  -  -  ; ***************************************************************************************
    3 00:02A9 -  -  -  -  ;
    4 00:02A9 -  -  -  -  ;		Name : 		expression.asm
    5 00:02A9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02A9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02A9 -  -  -  -  ;		Reviewed :	None
    8 00:02A9 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:02A9 -  -  -  -  ;
   10 00:02A9 -  -  -  -  ; ***************************************************************************************
   11 00:02A9 -  -  -  -  ; ***************************************************************************************
   12 00:02A9 -  -  -  -  
   13 00:02A9 -  -  -  -  ; ***************************************************************************************
   14 00:02A9 -  -  -  -  ;
   15 00:02A9 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:02A9 -  -  -  -  ;
   17 00:02A9 -  -  -  -  ; ***************************************************************************************
   18 00:02A9 -  -  -  -  
   19 00:02A9 -  -  -  -  EvaluateAtPrecedence0:
   20 00:02A9 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:02AA -  -  -  -  EvaluateAtPrecedence:
   22 00:02AA F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:02AB -  -  -  -  		;
   24 00:02AB -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:02AB -  -  -  -  		;
   26 00:02AB CD 99 03 00 		call 	EvaluateTerm 				; get term
   27 00:02AF -  -  -  -  		;
   28 00:02AF -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:02AF -  -  -  -  		;
   30 00:02AF D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:02B0 -  -  -  -  _EAPLoop:
   32 00:02B0 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:02B3 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:02B5 D8 -  -  -  		ret 	c
   35 00:02B6 FE 93 -  -  		cp 		KWC_FIRST_UNARY
   36 00:02B8 D0 -  -  -  		ret 	nc
   37 00:02B9 -  -  -  -  		;
   38 00:02B9 -  -  -  -  		; 		Get the precedence.
   39 00:02B9 -  -  -  -  		;
   40 00:02B9 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:02BA D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:02BC 21 E0 05 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:02C0 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:02C1 6F -  -  -  		ld 		l,a
   45 00:02C2 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:02C3 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:02C4 -  -  -  -  		;
   48 00:02C4 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:02C4 -  -  -  -  		;
   50 00:02C4 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:02C5 BB -  -  -  		cp 		e
   52 00:02C6 D0 -  -  -  		ret 	nc
   53 00:02C7 -  -  -  -  
   54 00:02C7 -  -  -  -  		;
   55 00:02C7 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:02C7 -  -  -  -  		;
   57 00:02C7 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:02C8 -  -  -  -  		;
   59 00:02C8 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:02CB F5 -  -  -  		push 	af
   61 00:02CC -  -  -  -  		;
   62 00:02CC C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:02CD D9 -  -  -  		exx 								; save HL'
   64 00:02CE E5 -  -  -  		push 	hl
   65 00:02CF D9 -  -  -  		exx 								
   66 00:02D0 E5 -  -  -  		push 	hl 							; save HL
   67 00:02D1 -  -  -  -  		;
   68 00:02D1 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:02D3 -  -  -  -  		;
   70 00:02D3 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:02D3 -  -  -  -  		;
   72 00:02D3 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:02D4 CD AA 02 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:02D8 -  -  -  -  		;
   75 00:02D8 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:02D8 -  -  -  -  		;
   77 00:02D8 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:02D9 -  -  -  -  
   79 00:02D9 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:02DA E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:02DB D9 -  -  -  		exx
   82 00:02DC EB -  -  -  		ex 		de,hl
   83 00:02DD E1 -  -  -  		pop 	hl
   84 00:02DE D9 -  -  -  		exx
   85 00:02DF C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:02E0 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:02E1 -  -  -  -  		;
   88 00:02E1 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:02E1 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:02E1 -  -  -  -  		;
   91 00:02E1 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:02E2 -  -  -  -  		;
   93 00:02E2 -  -  -  -  		; 		Call the binary operator in A.
   94 00:02E2 -  -  -  -  		;
   95 00:02E2 D5 -  -  -  		push 	de
   96 00:02E3 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:02E4 E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 06 
              00 19 ED 17 
              ED 53 55 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:02F9 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:02FA D1 -  -  -  		pop 	de 							; restore DE
  100 00:02FB CD 54 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:02FF -  -  -  -  		;
  102 00:02FF D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:0300 -  -  -  -  		;
  104 00:0300 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:0302 -  -  -  -  
  106 00:0302 -  -  -  -  ; ***************************************************************************************
  107 00:0302 -  -  -  -  ;
  108 00:0302 -  -  -  -  ;									Changes and Updates
  109 00:0302 -  -  -  -  ;
  110 00:0302 -  -  -  -  ; ***************************************************************************************
  111 00:0302 -  -  -  -  ;
  112 00:0302 -  -  -  -  ;		Date			Notes
  113 00:0302 -  -  -  -  ;		==== 			=====
  114 00:0302 -  -  -  -  ;
  115 00:0302 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0302 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:0302 -  -  -  -  ; ***************************************************************************************
    2 00:0302 -  -  -  -  ; ***************************************************************************************
    3 00:0302 -  -  -  -  ;
    4 00:0302 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:0302 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0302 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0302 -  -  -  -  ;		Reviewed :	No
    8 00:0302 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:0302 -  -  -  -  ;
   10 00:0302 -  -  -  -  ; ***************************************************************************************
   11 00:0302 -  -  -  -  ; ***************************************************************************************
   12 00:0302 -  -  -  -  
   13 00:0302 -  -  -  -  ; ***************************************************************************************
   14 00:0302 -  -  -  -  ;
   15 00:0302 -  -  -  -  ; 						Evaluate and dereference an expression
   16 00:0302 -  -  -  -  ;
   17 00:0302 -  -  -  -  ; ***************************************************************************************
   18 00:0302 -  -  -  -  
   19 00:0302 -  -  -  -  EvaluateValue:
   20 00:0302 CD A9 02 00 		call 	EvaluateAtPrecedence0
   21 00:0306 C3 3D 03 00 		jp 		Dereference
   22 00:030A -  -  -  -  
   23 00:030A -  -  -  -  ; ***************************************************************************************
   24 00:030A -  -  -  -  ;
   25 00:030A -  -  -  -  ; 									Evaluate a number
   26 00:030A -  -  -  -  ;
   27 00:030A -  -  -  -  ; ***************************************************************************************
   28 00:030A -  -  -  -  
   29 00:030A -  -  -  -  EvaluateInteger:
   30 00:030A CD 02 03 00 		call 	EvaluateValue
   31 00:030E CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   32 00:0310 C8 -  -  -  		ret 	z
   33 00:0311 C3 F8 01 00 		jp 		TypeMismatch
   34 00:0315 -  -  -  -  
   35 00:0315 -  -  -  -  ; ***************************************************************************************
   36 00:0315 -  -  -  -  ;
   37 00:0315 -  -  -  -  ; 									Evaluate an 8 bit integer
   38 00:0315 -  -  -  -  ;
   39 00:0315 -  -  -  -  ; ***************************************************************************************
   40 00:0315 -  -  -  -  
   41 00:0315 -  -  -  -  Evaluate8BitInteger:
   42 00:0315 CD 0A 03 00 		call 	EvaluateInteger
   43 00:0319 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   44 00:031A 7C -  -  -  		ld 		a,h
   45 00:031B B5 -  -  -  		or 		l
   46 00:031C D9 -  -  -  		exx 	
   47 00:031D B4 -  -  -  		or 		h
   48 00:031E C2 FE 01 00 		jp 		nz,BadValue
   49 00:0322 7D -  -  -  		ld 		a,l 						; return integer in A
   50 00:0323 C9 -  -  -  		ret
   51 00:0324 -  -  -  -  		
   52 00:0324 -  -  -  -  ; ***************************************************************************************
   53 00:0324 -  -  -  -  ;
   54 00:0324 -  -  -  -  ; 									Evaluate a string
   55 00:0324 -  -  -  -  ;
   56 00:0324 -  -  -  -  ; ***************************************************************************************
   57 00:0324 -  -  -  -  
   58 00:0324 -  -  -  -  EvaluateStringOnly:
   59 00:0324 CD 02 03 00 		call 	EvaluateValue
   60 00:0328 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   61 00:032A CA F8 01 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   62 00:032E C9 -  -  -  		ret
   63 00:032F -  -  -  -  
   64 00:032F -  -  -  -  ; ***************************************************************************************
   65 00:032F -  -  -  -  ;
   66 00:032F -  -  -  -  ; 								Return 8/16 bit constant
   67 00:032F -  -  -  -  ;
   68 00:032F -  -  -  -  ; ***************************************************************************************
   69 00:032F -  -  -  -  
   70 00:032F -  -  -  -  Return8BitConstant:
   71 00:032F 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   72 00:0333 6F -  -  -  		ld 		l,a
   73 00:0334 -  -  -  -  Return16BitConstant:
   74 00:0334 D9 -  -  -  		exx 								; clear HL'
   75 00:0335 21 00 00 00 		ld 		hl,0
   76 00:0339 D9 -  -  -  		exx
   77 00:033A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
   78 00:033C C9 -  -  -  		ret
   79 00:033D -  -  -  -  
   80 00:033D -  -  -  -  ; ***************************************************************************************
   81 00:033D -  -  -  -  ;
   82 00:033D -  -  -  -  ;									Changes and Updates
   83 00:033D -  -  -  -  ;
   84 00:033D -  -  -  -  ; ***************************************************************************************
   85 00:033D -  -  -  -  ;
   86 00:033D -  -  -  -  ;		Date			Notes
   87 00:033D -  -  -  -  ;		==== 			=====
   88 00:033D -  -  -  -  ;
   89 00:033D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:033D -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:033D -  -  -  -  ; ***************************************************************************************
    2 00:033D -  -  -  -  ; ***************************************************************************************
    3 00:033D -  -  -  -  ;
    4 00:033D -  -  -  -  ;		Name : 		reference.asm
    5 00:033D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:033D -  -  -  -  ;		Date : 		1st May 2022
    7 00:033D -  -  -  -  ;		Reviewed :	No
    8 00:033D -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:033D -  -  -  -  ;
   10 00:033D -  -  -  -  ; ***************************************************************************************
   11 00:033D -  -  -  -  ; ***************************************************************************************
   12 00:033D -  -  -  -  
   13 00:033D -  -  -  -  ; ***************************************************************************************
   14 00:033D -  -  -  -  ;
   15 00:033D -  -  -  -  ; 									Dereference HL'HL C
   16 00:033D -  -  -  -  ;
   17 00:033D -  -  -  -  ; ***************************************************************************************
   18 00:033D -  -  -  -  
   19 00:033D -  -  -  -  Dereference:
   20 00:033D CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:033F C8 -  -  -  		ret 	z
   22 00:0340 -  -  -  -  
   23 00:0340 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:0342 -  -  -  -  		
   25 00:0342 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0344 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0346 -  -  -  -  
   28 00:0346 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:0348 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:034A -  -  -  -  
   31 00:034A E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:034B ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:034D D9 -  -  -  		exx
   34 00:034E E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:034F 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:0350 23 -  -  -  		inc  	hl
   37 00:0351 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:0353 D9 -  -  -  		exx 								; fix back
   39 00:0354 C9 -  -  -  		ret
   40 00:0355 -  -  -  -  
   41 00:0355 -  -  -  -  _DeRefByte:		
   42 00:0355 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0356 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:035A 6F -  -  -  		ld	 	l,a
   45 00:035B D9 -  -  -  		exx
   46 00:035C 21 00 00 00 		ld 		hl,$0000
   47 00:0360 D9 -  -  -  		exx
   48 00:0361 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:0363 C9 -  -  -  		ret
   50 00:0364 -  -  -  -  
   51 00:0364 -  -  -  -  _DRInternal:
   52 00:0364 3E 04 C3 9A 
              01 00 -  -  		ERR_DISABLED
   53 00:036A -  -  -  -  
   54 00:036A -  -  -  -  ; ***************************************************************************************
   55 00:036A -  -  -  -  ;
   56 00:036A -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:036A -  -  -  -  ;
   58 00:036A -  -  -  -  ; ***************************************************************************************
   59 00:036A -  -  -  -  
   60 00:036A -  -  -  -  DRConvertHLHLToAddress:
   61 00:036A -  -  -  -  		#ifdef EZ80
   62 00:036A 22 5A 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:036E D9 -  -  -  		exx
   64 00:036F 22 5C 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:0373 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:0377 D9 -  -  -  		exx
   67 00:0378 2A 5A 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:037C -  -  -  -  		#endif
   69 00:037C C9 -  -  -  		ret
   70 00:037D -  -  -  -  
   71 00:037D -  -  -  -  ; ***************************************************************************************
   72 00:037D -  -  -  -  ;
   73 00:037D -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:037D -  -  -  -  ;
   75 00:037D -  -  -  -  ; ***************************************************************************************
   76 00:037D -  -  -  -  
   77 00:037D -  -  -  -  DRConvertAddressToHLHL:
   78 00:037D -  -  -  -  		#ifdef EZ80
   79 00:037D 22 5A 00 00 		ld 		(AConvert),hl
   80 00:0381 21 00 00 00 		ld 		hl,$0000
   81 00:0385 22 5D 00 00 		ld 		(AConvert+3),hl
   82 00:0389 D9 -  -  -  		exx
   83 00:038A 2A 5C 00 00 		ld 		hl,(AConvert+2)
   84 00:038E D9 -  -  -  		exx
   85 00:038F AF -  -  -  		xor 	a
   86 00:0390 32 5C 00 00 		ld 		(AConvert+2),a
   87 00:0394 2A 5A 00 00 		ld 		hl,(AConvert)
   88 00:0398 -  -  -  -  		#endif
   89 00:0398 C9 -  -  -  		ret
   90 00:0399 -  -  -  -  
   91 00:0399 -  -  -  -  ; ***************************************************************************************
   92 00:0399 -  -  -  -  ;
   93 00:0399 -  -  -  -  ;									Changes and Updates
   94 00:0399 -  -  -  -  ;
   95 00:0399 -  -  -  -  ; ***************************************************************************************
   96 00:0399 -  -  -  -  ;
   97 00:0399 -  -  -  -  ;		Date			Notes
   98 00:0399 -  -  -  -  ;		==== 			=====
   99 00:0399 -  -  -  -  ;
  100 00:0399 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:0399 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:0399 -  -  -  -  ; ***************************************************************************************
    2 00:0399 -  -  -  -  ; ***************************************************************************************
    3 00:0399 -  -  -  -  ;
    4 00:0399 -  -  -  -  ;		Name : 		term.asm
    5 00:0399 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0399 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0399 -  -  -  -  ;		Reviewed :	No
    8 00:0399 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:0399 -  -  -  -  ;
   10 00:0399 -  -  -  -  ; ***************************************************************************************
   11 00:0399 -  -  -  -  ; ***************************************************************************************
   12 00:0399 -  -  -  -  
   13 00:0399 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:0399             		add_hlhl_16
   15 00:0399             		exx
   16 00:0399             		adc_hlhl_16
   17 00:0399             		exx
   18 00:0399             #endmacro
   19 00:0399 -  -  -  -  
   20 00:0399 -  -  -  -  ; ***************************************************************************************
   21 00:0399 -  -  -  -  ;
   22 00:0399 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:0399 -  -  -  -  ;
   24 00:0399 -  -  -  -  ; ***************************************************************************************
   25 00:0399 -  -  -  -  ;
   26 00:0399 -  -  -  -  ; 		Terms can be:
   27 00:0399 -  -  -  -  ;
   28 00:0399 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:0399 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:0399 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:0399 -  -  -  -  ; 			$ ? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:0399 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:0399 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:0399 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:0399 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:0399 -  -  -  -  ; 														reference of some sort.
   37 00:0399 -  -  -  -  ;
   38 00:0399 -  -  -  -  ; ***************************************************************************************
   39 00:0399 -  -  -  -  
   40 00:0399 -  -  -  -  EvaluateTerm:		
   41 00:0399 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:039B D9 -  -  -  		exx
   43 00:039C 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:03A0 D9 -  -  -  		exx
   45 00:03A1 21 00 00 00 		ld 		hl,$0000		
   46 00:03A5 -  -  -  -  		;
   47 00:03A5 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:03A8 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:03AA 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:03AC DA 5F 04 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:03B0 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:03B2 C2 08 04 00 		jp 		nz,_ETFoundKeyword 
   53 00:03B6 -  -  -  -  		;
   54 00:03B6 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:03B6 -  -  -  -  		;
   56 00:03B6 -  -  -  -  _ETIntegerConstant:
   57 00:03B6 -  -  -  -  		;
   58 00:03B6 -  -  -  -  _ETIntegerLoop:		
   59 00:03B6 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:03B9 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:03BB B5 -  -  -  		or 		l 							; or into L
   62 00:03BC 6F -  -  -  		ld 		l,a
   63 00:03BD DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:03BF DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:03C2 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:03C4 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:03C6 D8 -  -  -  		ret 	c
   68 00:03C7 -  -  -  -  
   69 00:03C7 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:03CE 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:03D5 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:03DC 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:03E3 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:03EA 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:03F1 -  -  -  -  
   76 00:03F1 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:03F3 -  -  -  -  		;
   78 00:03F3 -  -  -  -  		; 		Found the $3F string marker.
   79 00:03F3 -  -  -  -  		;
   80 00:03F3 -  -  -  -  _ETStringMarker:		
   81 00:03F3 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:03F5 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:03F7 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:03F9 E1 -  -  -  		pop 	hl
   85 00:03FA 11 00 00 00 		ld 		de,$0000
   86 00:03FE DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:0401 DD 19 -  -  		add 	ix,de
   88 00:0403 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0405 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:0407 C9 -  -  -  		ret
   91 00:0408 -  -  -  -  		;
   92 00:0408 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:0408 -  -  -  -  		;
   94 00:0408 -  -  -  -  _ETFoundKeyword:
   95 00:0408 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:040A FE 93 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:040C 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:040E FE 9E -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0410 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0412 -  -  -  -  		;
  101 00:0412 -  -  -  -  		;		Unary group 0
  102 00:0412 -  -  -  -  		;
  103 00:0412 E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 06 
              00 19 ED 17 
              ED 53 55 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:0427 C3 54 00 00 		jp 		JumpCode 					; and go there.
  105 00:042B -  -  -  -  
  106 00:042B -  -  -  -  _ETNotUnaryFunction0:	
  107 00:042B FE 89 -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:042D 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:042F -  -  -  -  		;
  110 00:042F -  -  -  -  		; 		- term
  111 00:042F -  -  -  -  		;
  112 00:042F CD 99 03 00 		call 	EvaluateTerm 				; evaluate term
  113 00:0433 CD 98 02 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:0437 C9 -  -  -  		ret
  115 00:0438 -  -  -  -  		;
  116 00:0438 -  -  -  -  		;		! ? $ indirection check
  117 00:0438 -  -  -  -  		;
  118 00:0438 -  -  -  -  _ETCheckIndirection:	
  119 00:0438 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? ! $
  120 00:043A 28 0A -  -  		jr 		z,_ETIndirection
  121 00:043C FE 95 -  -  		cp 		KWD_DOLLAR
  122 00:043E 28 06 -  -  		jr 		z,_ETIndirection
  123 00:0440 FE 83 -  -  		cp 		KWD_PLING
  124 00:0442 C2 04 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  125 00:0446 -  -  -  -  		;
  126 00:0446 -  -  -  -  		; 		! ? $ indirection
  127 00:0446 -  -  -  -  		;
  128 00:0446 -  -  -  -  _ETIndirection:
  129 00:0446 F5 -  -  -  		push 	af 							; check type of indirection.
  130 00:0447 CD 99 03 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  131 00:044B CD 6A 03 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  132 00:044F F1 -  -  -  		pop 	af 							; get type back
  133 00:0450 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  134 00:0452 CB F9 -  -  		set 	CIsReference,c
  135 00:0454 FE 83 -  -  		cp 		KWD_PLING
  136 00:0456 C8 -  -  -  		ret 	z
  137 00:0457 CB F1 -  -  		set 	CIsByteReference,c 			; byte ?
  138 00:0459 FE 84 -  -  		cp 		KWD_QMARK
  139 00:045B C8 -  -  -  		ret 	z
  140 00:045C 0E 01 -  -  		ld 		c,XTYPE_STRING 				; otherwise string address.
  141 00:045E C9 -  -  -  		ret
  142 00:045F -  -  -  -  		;
  143 00:045F -  -  -  -  		; 		Found an identifier.
  144 00:045F -  -  -  -  		;
  145 00:045F -  -  -  -  _ETVariable:
  146 00:045F 3E 0C C3 9A 
              01 00 -  -  		ERR_TODO
  147 00:0465 3E 0D C3 9A 
              01 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:046B -  -  -  -  		
  149 00:046B -  -  -  -  ; ***************************************************************************************
  150 00:046B -  -  -  -  ;
  151 00:046B -  -  -  -  ;									Changes and Updates
  152 00:046B -  -  -  -  ;
  153 00:046B -  -  -  -  ; ***************************************************************************************
  154 00:046B -  -  -  -  ;
  155 00:046B -  -  -  -  ;		Date			Notes
  156 00:046B -  -  -  -  ;		==== 			=====
  157 00:046B -  -  -  -  ;
  158 00:046B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:046B -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:046B -  -  -  -  ; ***************************************************************************************
    2 00:046B -  -  -  -  ; ***************************************************************************************
    3 00:046B -  -  -  -  ;
    4 00:046B -  -  -  -  ;		Name : 		clear.asm
    5 00:046B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:046B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:046B -  -  -  -  ;		Reviewed :	No
    8 00:046B -  -  -  -  ;		Purpose :	Clear command.
    9 00:046B -  -  -  -  ;
   10 00:046B -  -  -  -  ; ***************************************************************************************
   11 00:046B -  -  -  -  ; ***************************************************************************************
   12 00:046B -  -  -  -  
   13 00:046B -  -  -  -  ; ***************************************************************************************
   14 00:046B -  -  -  -  ;
   15 00:046B -  -  -  -  ;										CLEAR command
   16 00:046B -  -  -  -  ;
   17 00:046B -  -  -  -  ; ***************************************************************************************
   18 00:046B -  -  -  -  
   19 00:046B -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:046B -  -  -  -  		;
   21 00:046B -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:046B -  -  -  -  		;
   23 00:046B 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:046F -  -  -  -  _CCFindLow:
   25 00:046F 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0473 5E -  -  -  		ld 		e,(hl)		
   27 00:0474 19 -  -  -  		add 	hl,de
   28 00:0475 7B -  -  -  		ld 		a,e
   29 00:0476 B7 -  -  -  		or 		a
   30 00:0477 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:0479 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 00:047A 23 -  -  -  		inc 	hl
   33 00:047B 22 48 00 00 		ld 		(LowAllocMemory),hl
   34 00:047F -  -  -  -  		;
   35 00:047F -  -  -  -  		; 	 		Reset the language stack
   36 00:047F -  -  -  -  		;
   37 00:047F 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 00:0483 -  -  -  -  		;
   39 00:0483 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 00:0485 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:0489 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:048D 19 -  -  -  		add 	hl,de
   43 00:048E 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:0490 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:0494 -  -  -  -  		;
   46 00:0494 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:0498 19 -  -  -  		add 	hl,de
   48 00:0499 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:049D -  -  -  -  		;
   50 00:049D -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 00:049D -  -  -  -  		;
   52 00:049D -  -  -  -  
   53 00:049D -  -  -  -  		;
   54 00:049D -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 00:049D -  -  -  -  		;
   56 00:049D -  -  -  -  
   57 00:049D C9 -  -  -  		ret
   58 00:049E -  -  -  -  
   59 00:049E -  -  -  -  ; ***************************************************************************************
   60 00:049E -  -  -  -  ;
   61 00:049E -  -  -  -  ;									Changes and Updates
   62 00:049E -  -  -  -  ;
   63 00:049E -  -  -  -  ; ***************************************************************************************
   64 00:049E -  -  -  -  ;
   65 00:049E -  -  -  -  ;		Date			Notes
   66 00:049E -  -  -  -  ;		==== 			=====
   67 00:049E -  -  -  -  ;
   68 00:049E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:049E -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:049E -  -  -  -  ; ***************************************************************************************
    2 00:049E -  -  -  -  ; ***************************************************************************************
    3 00:049E -  -  -  -  ;
    4 00:049E -  -  -  -  ;		Name : 		instance.asm
    5 00:049E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:049E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:049E -  -  -  -  ;		Reviewed :	No
    8 00:049E -  -  -  -  ;		Purpose :	Instance handling
    9 00:049E -  -  -  -  ;
   10 00:049E -  -  -  -  ; ***************************************************************************************
   11 00:049E -  -  -  -  ; ***************************************************************************************
   12 00:049E -  -  -  -  
   13 00:049E -  -  -  -  ; ***************************************************************************************
   14 00:049E -  -  -  -  ;
   15 00:049E -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:049E -  -  -  -  ;
   17 00:049E -  -  -  -  ; ***************************************************************************************
   18 00:049E -  -  -  -  
   19 00:049E -  -  -  -  SetCurrentInstance:
   20 00:049E ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:04A3 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:04A7 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:04AC -  -  -  -  
   24 00:04AC C9 -  -  -  		ret
   25 00:04AD -  -  -  -  
   26 00:04AD -  -  -  -  
   27 00:04AD -  -  -  -  ; ***************************************************************************************
   28 00:04AD -  -  -  -  ;
   29 00:04AD -  -  -  -  ;									Changes and Updates
   30 00:04AD -  -  -  -  ;
   31 00:04AD -  -  -  -  ; ***************************************************************************************
   32 00:04AD -  -  -  -  ;
   33 00:04AD -  -  -  -  ;		Date			Notes
   34 00:04AD -  -  -  -  ;		==== 			=====
   35 00:04AD -  -  -  -  ;
   36 00:04AD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:04AD -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:04AD -  -  -  -  ; ***************************************************************************************
    2 00:04AD -  -  -  -  ; ***************************************************************************************
    3 00:04AD -  -  -  -  ;
    4 00:04AD -  -  -  -  ;		Name : 		new.asm
    5 00:04AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04AD -  -  -  -  ;		Reviewed :	No
    8 00:04AD -  -  -  -  ;		Purpose :	New command.
    9 00:04AD -  -  -  -  ;
   10 00:04AD -  -  -  -  ; ***************************************************************************************
   11 00:04AD -  -  -  -  ; ***************************************************************************************
   12 00:04AD -  -  -  -  
   13 00:04AD -  -  -  -  ; ***************************************************************************************
   14 00:04AD -  -  -  -  ;
   15 00:04AD -  -  -  -  ;										NEW command
   16 00:04AD -  -  -  -  ;
   17 00:04AD -  -  -  -  ; ***************************************************************************************
   18 00:04AD -  -  -  -  
   19 00:04AD -  -  -  -  Command_NEW: 	;; [new]
   20 00:04AD 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:04B1 36 00 -  -  		ld 		(hl),0
   22 00:04B3 CD 6B 04 00 		call 	Command_CLEAR 				; clear all variables
   23 00:04B7 3E 00 C3 9A 
              01 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:04BD -  -  -  -  
   25 00:04BD -  -  -  -  ; ***************************************************************************************
   26 00:04BD -  -  -  -  ;
   27 00:04BD -  -  -  -  ;									Changes and Updates
   28 00:04BD -  -  -  -  ;
   29 00:04BD -  -  -  -  ; ***************************************************************************************
   30 00:04BD -  -  -  -  ;
   31 00:04BD -  -  -  -  ;		Date			Notes
   32 00:04BD -  -  -  -  ;		==== 			=====
   33 00:04BD -  -  -  -  ;
   34 00:04BD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:04BD -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:04BD -  -  -  -  ; ***************************************************************************************
    2 00:04BD -  -  -  -  ; ***************************************************************************************
    3 00:04BD -  -  -  -  ;
    4 00:04BD -  -  -  -  ;		Name : 		utility.asm
    5 00:04BD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04BD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04BD -  -  -  -  ;		Reviewed :	No
    8 00:04BD -  -  -  -  ;		Purpose :	Utility routines
    9 00:04BD -  -  -  -  ;
   10 00:04BD -  -  -  -  ; ***************************************************************************************
   11 00:04BD -  -  -  -  ; ***************************************************************************************
   12 00:04BD -  -  -  -  
   13 00:04BD -  -  -  -  ; ***************************************************************************************
   14 00:04BD -  -  -  -  ;
   15 00:04BD -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:04BD -  -  -  -  ;
   17 00:04BD -  -  -  -  ; ***************************************************************************************
   18 00:04BD -  -  -  -  
   19 00:04BD -  -  -  -  PrintStringAtHL:
   20 00:04BD 7E -  -  -  		ld 		a,(hl)
   21 00:04BE B7 -  -  -  		or 		a
   22 00:04BF C8 -  -  -  		ret 	z
   23 00:04C0 CD 06 0A 00 		call 	SYSPrintChar
   24 00:04C4 23 -  -  -  		inc 	hl
   25 00:04C5 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:04C7 -  -  -  -  
   27 00:04C7 -  -  -  -  ; ***************************************************************************************
   28 00:04C7 -  -  -  -  ;
   29 00:04C7 -  -  -  -  ;									Changes and Updates
   30 00:04C7 -  -  -  -  ;
   31 00:04C7 -  -  -  -  ; ***************************************************************************************
   32 00:04C7 -  -  -  -  ;
   33 00:04C7 -  -  -  -  ;		Date			Notes
   34 00:04C7 -  -  -  -  ;		==== 			=====
   35 00:04C7 -  -  -  -  ;
   36 00:04C7 -  -  -  -  ; ***************************************************************************************
   37 00:04C7 -  -  -  -  		
Listing for file "_build.asm"
   33 00:04C7 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:04C7 -  -  -  -  ;
    2 00:04C7 -  -  -  -  ;	This file is automatically generated.
    3 00:04C7 -  -  -  -  ;
    4 00:04C7 -  -  -  -  ;
    5 00:04C7 -  -  -  -  ;	Keywords for set 0
    6 00:04C7 -  -  -  -  ;
    7 00:04C7 -  -  -  -  KeywordsSet0:
    8 00:04C7 01 20 -  -  	.db	1," "              ; $0080
    9 00:04C9 01 20 -  -  	.db	1," "              ; $0081
   10 00:04CB 01 20 -  -  	.db	1," "              ; $0082
   11 00:04CD 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:04CF 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:04D1 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:04D3 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:04D5 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:04D9 01 2B -  -  	.db	1,"+"              ; $0088
   17 00:04DB 01 2D -  -  	.db	1,"-"              ; $0089
   18 00:04DD 02 3E 3D -  	.db	2,">="             ; $008a
   19 00:04E0 02 3C 3D -  	.db	2,"<="             ; $008b
   20 00:04E3 01 3E -  -  	.db	1,">"              ; $008c
   21 00:04E5 01 3C -  -  	.db	1,"<"              ; $008d
   22 00:04E7 01 3D -  -  	.db	1,"="              ; $008e
   23 00:04E9 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 00:04EC 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 00:04F0 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 00:04F3 03 58 4F 52 	.db	3,"XOR"            ; $0092
   27 00:04F7 01 26 -  -  	.db	1,"&"              ; $0093
   28 00:04F9 01 28 -  -  	.db	1,"("              ; $0094
   29 00:04FB 01 24 -  -  	.db	1,"$"              ; $0095
   30 00:04FD 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 00:0501 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 00:0505 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 00:0509 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 00:050D 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 00:0511 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 00:0516 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 00:051A 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 00:051F 01 29 -  -  	.db	1,")"              ; $009e
   39 00:0521 01 2C -  -  	.db	1,","              ; $009f
   40 00:0523 01 3A -  -  	.db	1,":"              ; $00a0
   41 00:0525 01 3B -  -  	.db	1,";"              ; $00a1
   42 00:0527 01 27 -  -  	.db	1,"'"              ; $00a2
   43 00:0529 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 00:0530 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 00:0536 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 00:0539 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 00:053E 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 00:0543 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 00:0547 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 00:054A 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 00:054F 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 00:0554 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 00:0558 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 00:055D 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 00:0565 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 00:056B 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 00:056F 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 00:0573 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 00:0577 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 00:057B 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 00:0581 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 00:0586 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 00:058B 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 00:0590 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 00:0594 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 00:0598 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 00:059D 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 00:05A2 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 00:05AA 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 00:05B1 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 00:05B7 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 00:05BB 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 00:05C0 00 -  -  -  	.db	0
   74 00:05C1 -  -  -  -  ;
   75 00:05C1 -  -  -  -  ;	Keywords for set 1
   76 00:05C1 -  -  -  -  ;
   77 00:05C1 -  -  -  -  KeywordsSet1:
   78 00:05C1 00 -  -  -  	.db	0
   79 00:05C2 -  -  -  -  ;
   80 00:05C2 -  -  -  -  ;	Keywords for set 2
   81 00:05C2 -  -  -  -  ;
   82 00:05C2 -  -  -  -  KeywordsSet2:
   83 00:05C2 00 -  -  -  	.db	0
Listing for file "_build.asm"
   34 00:05C3 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:05C3 -  -  -  -  ;
    2 00:05C3 -  -  -  -  ;	This file is automatically generated.
    3 00:05C3 -  -  -  -  ;
    4 00:05C3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:05E0 -  -  -  -  PrecedenceTable:
    6 00:05E0 06 -  -  -  	.db	6	; $0083 !
    7 00:05E1 06 -  -  -  	.db	6	; $0084 ?
    8 00:05E2 05 -  -  -  	.db	5	; $0085 *
    9 00:05E3 05 -  -  -  	.db	5	; $0086 /
   10 00:05E4 05 -  -  -  	.db	5	; $0087 mod
   11 00:05E5 04 -  -  -  	.db	4	; $0088 +
   12 00:05E6 04 -  -  -  	.db	4	; $0089 -
   13 00:05E7 03 -  -  -  	.db	3	; $008a >=
   14 00:05E8 03 -  -  -  	.db	3	; $008b <=
   15 00:05E9 03 -  -  -  	.db	3	; $008c >
   16 00:05EA 03 -  -  -  	.db	3	; $008d <
   17 00:05EB 03 -  -  -  	.db	3	; $008e =
   18 00:05EC 03 -  -  -  	.db	3	; $008f <>
   19 00:05ED 02 -  -  -  	.db	2	; $0090 and
   20 00:05EE 01 -  -  -  	.db	1	; $0091 or
   21 00:05EF 01 -  -  -  	.db	1	; $0092 xor
   22 00:05F0 -  -  -  -  
Listing for file "_build.asm"
   35 00:05F0 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:05F0 -  -  -  -  ;
    2 00:05F0 -  -  -  -  ;	This is automatically generated.
    3 00:05F0 -  -  -  -  ;
    4 00:05F0 -  -  -  -  ErrorIDTable:
    5 00:05F0 28 06 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:05F4 2E 06 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:05F8 3F 06 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:05FC 4D 06 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0600 57 06 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0604 71 06 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0608 82 06 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:060C 90 06 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0610 9E 06 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 00:0614 B4 06 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 00:0618 C2 06 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 00:061C C7 06 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 00:0620 D4 06 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 00:0624 E5 06 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 00:0628 -  -  -  -  
   20 00:0628 -  -  -  -  ErrText_warmstart:
   21 00:0628 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 00:062E -  -  -  -  ErrText_assert:
   23 00:062E 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 00:063F -  -  -  -  ErrText_badtype:
   25 00:063F 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 00:064D -  -  -  -  ErrText_badvalue:
   27 00:064D 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 00:0657 -  -  -  -  ErrText_disabled:
   29 00:0657 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 00:0671 -  -  -  -  ErrText_divzero:
   31 00:0671 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 00:0682 -  -  -  -  ErrText_memory:
   33 00:0682 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 00:0690 -  -  -  -  ErrText_nocomma:
   35 00:0690 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 00:069E -  -  -  -  ErrText_norbracket:
   37 00:069E 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 00:06B4 -  -  -  -  ErrText_notref:
   39 00:06B4 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 00:06C2 -  -  -  -  ErrText_stop:
   41 00:06C2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 00:06C7 -  -  -  -  ErrText_syntax:
   43 00:06C7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 00:06D4 -  -  -  -  ErrText_todo:
   45 00:06D4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 00:06E5 -  -  -  -  ErrText_unknownvar:
   47 00:06E5 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   36 00:06F6 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:06F6 -  -  -  -  ;
    2 00:06F6 -  -  -  -  ;	Vectors for set 0
    3 00:06F6 -  -  -  -  ;
    4 00:06F6 -  -  -  -  VectorsSet0:
    5 00:06F6 CC 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:06FA 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:06FE 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0702 24 00 00 00 	addr(Unimplemented)              ; $0083 !
    9 00:0706 24 00 00 00 	addr(Unimplemented)              ; $0084 ?
   10 00:070A 26 02 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:070E 34 02 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0712 42 02 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0716 0A 02 00 00 	addr(ALUAdd)                     ; $0088 +
   14 00:071A 18 02 00 00 	addr(ALUSubtract)                ; $0089 -
   15 00:071E 24 00 00 00 	addr(Unimplemented)              ; $008a >=
   16 00:0722 24 00 00 00 	addr(Unimplemented)              ; $008b <=
   17 00:0726 24 00 00 00 	addr(Unimplemented)              ; $008c >
   18 00:072A 24 00 00 00 	addr(Unimplemented)              ; $008d <
   19 00:072E 24 00 00 00 	addr(Unimplemented)              ; $008e =
   20 00:0732 24 00 00 00 	addr(Unimplemented)              ; $008f <>
   21 00:0736 50 02 00 00 	addr(ALUAnd)                     ; $0090 and
   22 00:073A 5E 02 00 00 	addr(ALUOr)                      ; $0091 or
   23 00:073E 6C 02 00 00 	addr(ALUXor)                     ; $0092 xor
   24 00:0742 24 00 00 00 	addr(Unimplemented)              ; $0093 &
   25 00:0746 24 00 00 00 	addr(Unimplemented)              ; $0094 (
   26 00:074A 24 00 00 00 	addr(Unimplemented)              ; $0095 $
   27 00:074E 24 00 00 00 	addr(Unimplemented)              ; $0096 rnd
   28 00:0752 24 00 00 00 	addr(Unimplemented)              ; $0097 len
   29 00:0756 24 00 00 00 	addr(Unimplemented)              ; $0098 abs
   30 00:075A 24 00 00 00 	addr(Unimplemented)              ; $0099 sgn
   31 00:075E 24 00 00 00 	addr(Unimplemented)              ; $009a int
   32 00:0762 24 00 00 00 	addr(Unimplemented)              ; $009b str$
   33 00:0766 24 00 00 00 	addr(Unimplemented)              ; $009c asc
   34 00:076A 24 00 00 00 	addr(Unimplemented)              ; $009d page
   35 00:076E C1 00 00 00 	addr(BadCmd_RBracket)            ; $009e )
   36 00:0772 C1 00 00 00 	addr(BadCmd_Comma)               ; $009f ,
   37 00:0776 C5 00 00 00 	addr(Command_Colon)              ; $00a0 :
   38 00:077A C1 00 00 00 	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 00:077E E3 00 00 00 	addr(Command_REM2)               ; $00a2 '
   40 00:0782 24 00 00 00 	addr(Unimplemented)              ; $00a3 repeat
   41 00:0786 24 00 00 00 	addr(Unimplemented)              ; $00a4 until
   42 00:078A 24 00 00 00 	addr(Unimplemented)              ; $00a5 if
   43 00:078E C1 00 00 00 	addr(BadCmd_Then)                ; $00a6 then
   44 00:0792 24 00 00 00 	addr(Unimplemented)              ; $00a7 else
   45 00:0796 24 00 00 00 	addr(Unimplemented)              ; $00a8 for
   46 00:079A C1 00 00 00 	addr(BadCmd_To)                  ; $00a9 to
   47 00:079E 24 00 00 00 	addr(Unimplemented)              ; $00aa step
   48 00:07A2 24 00 00 00 	addr(Unimplemented)              ; $00ab next
   49 00:07A6 C1 00 00 00 	addr(BadCmd_Defproc)             ; $00ac def
   50 00:07AA 24 00 00 00 	addr(Unimplemented)              ; $00ad proc
   51 00:07AE 24 00 00 00 	addr(Unimplemented)              ; $00ae endproc
   52 00:07B2 24 00 00 00 	addr(Unimplemented)              ; $00af local
   53 00:07B6 24 00 00 00 	addr(Unimplemented)              ; $00b0 dim
   54 00:07BA E3 00 00 00 	addr(Command_REM)                ; $00b1 rem
   55 00:07BE 24 00 00 00 	addr(Unimplemented)              ; $00b2 let
   56 00:07C2 24 00 00 00 	addr(Unimplemented)              ; $00b3 vdu
   57 00:07C6 24 00 00 00 	addr(Unimplemented)              ; $00b4 print
   58 00:07CA 24 00 00 00 	addr(Unimplemented)              ; $00b5 load
   59 00:07CE 24 00 00 00 	addr(Unimplemented)              ; $00b6 save
   60 00:07D2 24 00 00 00 	addr(Unimplemented)              ; $00b7 list
   61 00:07D6 AD 04 00 00 	addr(Command_NEW)                ; $00b8 new
   62 00:07DA 00 01 00 00 	addr(Command_RUN)                ; $00b9 run
   63 00:07DE 24 00 00 00 	addr(Unimplemented)              ; $00ba read
   64 00:07E2 24 00 00 00 	addr(Unimplemented)              ; $00bb data
   65 00:07E6 24 00 00 00 	addr(Unimplemented)              ; $00bc restore
   66 00:07EA B0 00 00 00 	addr(Command_ASSERT)             ; $00bd assert
   67 00:07EE 6B 04 00 00 	addr(Command_CLEAR)              ; $00be clear
   68 00:07F2 C6 00 00 00 	addr(Command_END)                ; $00bf end
   69 00:07F6 6C 01 00 00 	addr(Command_STOP)               ; $00c0 stop
   70 00:07FA -  -  -  -  ;
   71 00:07FA -  -  -  -  ;	Vectors for set 1
   72 00:07FA -  -  -  -  ;
   73 00:07FA -  -  -  -  VectorsSet1:
   74 00:07FA -  -  -  -  ;
   75 00:07FA -  -  -  -  ;	Vectors for set 2
   76 00:07FA -  -  -  -  ;
   77 00:07FA -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   37 00:07FA -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:07FA -  -  -  -  ; ***************************************************************************************
    2 00:07FA -  -  -  -  ; ***************************************************************************************
    3 00:07FA -  -  -  -  ;
    4 00:07FA -  -  -  -  ;		Name : 		idivide.asm
    5 00:07FA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07FA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07FA -  -  -  -  ;		Reviewed :	No
    8 00:07FA -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:07FA -  -  -  -  ;
   10 00:07FA -  -  -  -  ; ***************************************************************************************
   11 00:07FA -  -  -  -  ; ***************************************************************************************
   12 00:07FA -  -  -  -  
   13 00:07FA -  -  -  -  ; ***************************************************************************************
   14 00:07FA -  -  -  -  ;
   15 00:07FA -  -  -  -  ;								Unsigned integer divide
   16 00:07FA -  -  -  -  ;
   17 00:07FA -  -  -  -  ; ***************************************************************************************
   18 00:07FA -  -  -  -  
   19 00:07FA -  -  -  -  Int32UDivide:
   20 00:07FA 37 -  -  -  		scf
   21 00:07FB C3 3F 08 00 		jp 		_I32UnsignedDivide		
   22 00:07FF -  -  -  -  
   23 00:07FF -  -  -  -  ; ***************************************************************************************
   24 00:07FF -  -  -  -  ;
   25 00:07FF -  -  -  -  ;							Signed integer divide/Modulus
   26 00:07FF -  -  -  -  ;
   27 00:07FF -  -  -  -  ; ***************************************************************************************
   28 00:07FF -  -  -  -  
   29 00:07FF -  -  -  -  Int32SDivide:
   30 00:07FF 37 -  -  -  		scf
   31 00:0800 18 01 -  -  		jr 		_I32SDivide
   32 00:0802 -  -  -  -  Int32Modulus:
   33 00:0802 AF -  -  -  		xor 	a
   34 00:0803 -  -  -  -  _I32SDivide:
   35 00:0803 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0804 F5 -  -  -  		push 	af
   37 00:0805 08 -  -  -  		ex 		af,af'
   38 00:0806 -  -  -  -  
   39 00:0806 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0807 D9 -  -  -  		exx
   41 00:0808 D5 -  -  -  		push 	de
   42 00:0809 D9 -  -  -  		exx
   43 00:080A -  -  -  -  
   44 00:080A F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:080B AF -  -  -  		xor 	a 							; clear sign count.
   46 00:080C CD 2C 08 00 		call 	_I32CheckHLSignSwap
   47 00:0810 CD 2C 08 00 		call 	_I32CheckHLSignSwap
   48 00:0814 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0815 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0816 F5 -  -  -  		push 	af
   51 00:0817 CD 3F 08 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:081B F1 -  -  -  		pop 	af 							; get function back
   53 00:081C 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:081E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:081F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0821 C4 A1 09 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0825 -  -  -  -  _I32SDExit:
   58 00:0825 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0826 D1 -  -  -  		pop 	de
   60 00:0827 D9 -  -  -  		exx
   61 00:0828 D1 -  -  -  		pop 	de
   62 00:0829 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:082A 08 -  -  -  		ex 		af,af'
   64 00:082B C9 -  -  -  		ret
   65 00:082C -  -  -  -  
   66 00:082C -  -  -  -  
   67 00:082C -  -  -  -  _I32CheckHLSignSwap:
   68 00:082C D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:082D CB 7C -  -  		bit 	7,h
   70 00:082F D9 -  -  -  		exx
   71 00:0830 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0832 -  -  -  -  		;
   73 00:0832 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0834 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0835 CD A1 09 00 		call 	Int32Negate 				
   76 00:0839 F1 -  -  -  		pop 	af
   77 00:083A -  -  -  -  _I32CHSPositive:
   78 00:083A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:083B EB -  -  -  		ex 		de,hl
   80 00:083C D9 -  -  -  		exx		
   81 00:083D EB -  -  -  		ex 		de,hl
   82 00:083E C9 -  -  -  		ret
   83 00:083F -  -  -  -  
   84 00:083F -  -  -  -  ; ***************************************************************************************
   85 00:083F -  -  -  -  ;
   86 00:083F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:083F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:083F -  -  -  -  ;
   89 00:083F -  -  -  -  ; ***************************************************************************************
   90 00:083F -  -  -  -  
   91 00:083F -  -  -  -  _I32UnsignedDivide:
   92 00:083F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0840 D5 -  -  -  		push 	de
   94 00:0841 D9 -  -  -  		exx
   95 00:0842 C5 -  -  -  		push 	bc
   96 00:0843 D5 -  -  -  		push 	de 							
   97 00:0844 D9 -  -  -  		exx
   98 00:0845 -  -  -  -  
   99 00:0845 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0846 -  -  -  -  
  101 00:0846 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0847 B3 -  -  -  		or 		e
  103 00:0848 D9 -  -  -  		exx
  104 00:0849 B2 -  -  -  		or 		d
  105 00:084A B3 -  -  -  		or 		e
  106 00:084B D9 -  -  -  		exx
  107 00:084C CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0850 -  -  -  -  
  109 00:0850 -  -  -  -  
  110 00:0850 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0851 4D -  -  -  		ld		c,l
  112 00:0852 21 00 00 00 		ld 		hl,$0000
  113 00:0856 D9 -  -  -  		exx
  114 00:0857 44 -  -  -  		ld 		b,h
  115 00:0858 4D -  -  -  		ld		c,l
  116 00:0859 21 00 00 00 		ld 		hl,$0000
  117 00:085D D9 -  -  -  		exx
  118 00:085E -  -  -  -  
  119 00:085E 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0860 -  -  -  -  _I32DivideLoop:
  121 00:0860 F5 -  -  -  		push 	af
  122 00:0861 -  -  -  -  
  123 00:0861 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0863 CB 10 -  -  		rl 		b
  125 00:0865 D9 -  -  -  		exx
  126 00:0866 CB 11 -  -  		rl 		c
  127 00:0868 CB 10 -  -  		rl 		b
  128 00:086A D9 -  -  -  		exx
  129 00:086B CB 15 -  -  		rl 		l
  130 00:086D CB 14 -  -  		rl 		h
  131 00:086F D9 -  -  -  		exx
  132 00:0870 CB 15 -  -  		rl 		l
  133 00:0872 CB 14 -  -  		rl 		h
  134 00:0874 D9 -  -  -  		exx
  135 00:0875 -  -  -  -  
  136 00:0875 CD 3F 09 00 		call 	Int32Subtract 				; A = A - M
  137 00:0879 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:087B -  -  -  -  
  139 00:087B 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:087C 18 04 -  -  		jr 		_I32Next
  141 00:087E -  -  -  -  
  142 00:087E -  -  -  -  _I32Borrow:
  143 00:087E CD 37 09 00 		call 	Int32Add 					; A = A + M
  144 00:0882 -  -  -  -  _I32Next:
  145 00:0882 F1 -  -  -  		pop 	af
  146 00:0883 3D -  -  -  		dec 	a
  147 00:0884 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0886 -  -  -  -  
  149 00:0886 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0887 -  -  -  -  
  151 00:0887 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0888 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:088A -  -  -  -  
  154 00:088A 60 -  -  -  		ld  	h,b
  155 00:088B 69 -  -  -  		ld 		l,c
  156 00:088C D9 -  -  -  		exx
  157 00:088D 60 -  -  -  		ld  	h,b
  158 00:088E 69 -  -  -  		ld 		l,c
  159 00:088F D9 -  -  -  		exx
  160 00:0890 -  -  -  -  _I32Modulus1:		
  161 00:0890 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0891 D1 -  -  -  		pop 	de
  163 00:0892 C1 -  -  -  		pop 	bc
  164 00:0893 D9 -  -  -  		exx
  165 00:0894 D1 -  -  -  		pop 	de
  166 00:0895 C1 -  -  -  		pop 	bc
  167 00:0896 C9 -  -  -  		ret
  168 00:0897 -  -  -  -  
  169 00:0897 -  -  -  -  ; ***************************************************************************************
  170 00:0897 -  -  -  -  ;
  171 00:0897 -  -  -  -  ;									Changes and Updates
  172 00:0897 -  -  -  -  ;
  173 00:0897 -  -  -  -  ; ***************************************************************************************
  174 00:0897 -  -  -  -  ;
  175 00:0897 -  -  -  -  ;		Date			Notes
  176 00:0897 -  -  -  -  ;		==== 			=====
  177 00:0897 -  -  -  -  ;
  178 00:0897 -  -  -  -  ; ***************************************************************************************
  179 00:0897 -  -  -  -  		
Listing for file "_build.asm"
   38 00:0897 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0897 -  -  -  -  ; ***************************************************************************************
    2 00:0897 -  -  -  -  ; ***************************************************************************************
    3 00:0897 -  -  -  -  ;
    4 00:0897 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0897 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0897 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0897 -  -  -  -  ;		Reviewed :	No
    8 00:0897 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0897 -  -  -  -  ;
   10 00:0897 -  -  -  -  ; ***************************************************************************************
   11 00:0897 -  -  -  -  ; ***************************************************************************************
   12 00:0897 -  -  -  -  
   13 00:0897 -  -  -  -  ; ***************************************************************************************
   14 00:0897 -  -  -  -  ;
   15 00:0897 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0897 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0897 -  -  -  -  ;
   18 00:0897 -  -  -  -  ; ***************************************************************************************
   19 00:0897 -  -  -  -  
   20 00:0897 -  -  -  -  Int32FromString:
   21 00:0897 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0898 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0899 D5 -  -  -  		push 	de
   24 00:089A D9 -  -  -  		exx
   25 00:089B D5 -  -  -  		push 	de
   26 00:089C -  -  -  -  
   27 00:089C 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:08A0 11 00 00 00 		ld 		de,$0000
   29 00:08A4 D9 -  -  -  		exx
   30 00:08A5 21 00 00 00 		ld 		hl,$0000
   31 00:08A9 11 00 00 00 		ld 		de,$0000
   32 00:08AD D9 -  -  -  		exx
   33 00:08AE -  -  -  -  
   34 00:08AE 5F -  -  -  		ld 		e,a 						; base in E
   35 00:08AF CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:08B1 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:08B3 ED 44 -  -  		neg 		 						; fix up the base
   38 00:08B5 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:08B6 -  -  -  -  		;
   40 00:08B6 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:08B7 F5 -  -  -  		push 	af
   42 00:08B8 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:08BA 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:08BB 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:08BD 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:08BE 18 01 -  -  		jr 		_I32FSMain
   47 00:08C0 -  -  -  -  _I32FSNotSigned:		
   48 00:08C0 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:08C1 -  -  -  -  		;
   50 00:08C1 -  -  -  -  		; 		Main conversion loop.
   51 00:08C1 -  -  -  -  		; 		
   52 00:08C1 -  -  -  -  _I32FSMain:		
   53 00:08C1 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:08C2 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:08C4 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:08C6 D6 20 -  -  		sub 	32
   57 00:08C8 -  -  -  -  _I32FSNotLower:
   58 00:08C8 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:08CA 38 23 -  -  		jr 		c,_I32FSExit
   60 00:08CC FE 3A -  -  		cp 		'9'+1
   61 00:08CE 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:08D0 FE 41 -  -  		cp 		'A'
   63 00:08D2 38 1B -  -  		jr 		c,_I32FSExit
   64 00:08D4 FE 47 -  -  		cp 		'F'+1
   65 00:08D6 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:08D8 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:08DA -  -  -  -  _I32FSOkay:
   68 00:08DA D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:08DC BB -  -  -  		cp 		e 							; fail if >= base
   70 00:08DD 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:08DF 03 -  -  -  		inc 	bc 							; consume character
   72 00:08E0 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:08E1 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:08E2 CD FE 08 00 		call 	Int32Multiply 				; result *= base
   75 00:08E6 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:08E7 5F -  -  -  		ld 		e,a
   77 00:08E8 CD 37 09 00 		call 	Int32Add 					; and add it.
   78 00:08EC D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:08ED 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:08EF -  -  -  -  
   81 00:08EF -  -  -  -  _I32FSExit:
   82 00:08EF F1 -  -  -  		pop 	af 							; get sign back
   83 00:08F0 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:08F2 CC A1 09 00 		call 	z,Int32Negate
   85 00:08F6 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:08F7 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:08F8 D9 -  -  -  		exx
   88 00:08F9 D1 -  -  -  		pop 	de
   89 00:08FA D9 -  -  -  		exx
   90 00:08FB C1 -  -  -  		pop 	bc
   91 00:08FC B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 00:08FD C9 -  -  -  		ret				
   93 00:08FE -  -  -  -  
   94 00:08FE -  -  -  -  ; ***************************************************************************************
   95 00:08FE -  -  -  -  ;
   96 00:08FE -  -  -  -  ;									Changes and Updates
   97 00:08FE -  -  -  -  ;
   98 00:08FE -  -  -  -  ; ***************************************************************************************
   99 00:08FE -  -  -  -  ;
  100 00:08FE -  -  -  -  ;		Date			Notes
  101 00:08FE -  -  -  -  ;		==== 			=====
  102 00:08FE -  -  -  -  ;
  103 00:08FE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:08FE -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:08FE -  -  -  -  ; ***************************************************************************************
    2 00:08FE -  -  -  -  ; ***************************************************************************************
    3 00:08FE -  -  -  -  ;
    4 00:08FE -  -  -  -  ;		Name : 		imultiply.asm
    5 00:08FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08FE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08FE -  -  -  -  ;		Reviewed :	No
    8 00:08FE -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:08FE -  -  -  -  ;
   10 00:08FE -  -  -  -  ; ***************************************************************************************
   11 00:08FE -  -  -  -  ; ***************************************************************************************
   12 00:08FE -  -  -  -  
   13 00:08FE -  -  -  -  Int32Multiply:
   14 00:08FE C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:08FF D5 -  -  -  		push 	de
   16 00:0900 44 -  -  -  		ld 		b,h
   17 00:0901 4D -  -  -  		ld 		c,l
   18 00:0902 21 00 00 00 		ld 		hl,$0000
   19 00:0906 -  -  -  -  
   20 00:0906 D9 -  -  -  		exx
   21 00:0907 C5 -  -  -  		push 	bc
   22 00:0908 D5 -  -  -  		push 	de
   23 00:0909 44 -  -  -  		ld 		b,h
   24 00:090A 4D -  -  -  		ld 		c,l
   25 00:090B 21 00 00 00 		ld 		hl,$0000		
   26 00:090F D9 -  -  -  		exx
   27 00:0910 -  -  -  -  
   28 00:0910 -  -  -  -  _I32MultiplyLoop:
   29 00:0910 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0912 C4 37 09 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0916 -  -  -  -  		;
   32 00:0916 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0917 CB 38 -  -  		srl 	b
   34 00:0919 CB 19 -  -  		rr 		c
   35 00:091B D9 -  -  -  		exx
   36 00:091C CB 18 -  -  		rr 		b
   37 00:091E CB 19 -  -  		rr 		c
   38 00:0920 -  -  -  -  		;
   39 00:0920 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0922 CB 12 -  -  		rl 		d
   41 00:0924 D9 -  -  -  		exx
   42 00:0925 CB 13 -  -  		rl 		e
   43 00:0927 CB 12 -  -  		rl 		d
   44 00:0929 -  -  -  -  
   45 00:0929 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:092A B1 -  -  -  		or 		c
   47 00:092B D9 -  -  -  		exx
   48 00:092C B0 -  -  -  		or 		b
   49 00:092D B1 -  -  -  		or 		c
   50 00:092E 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0930 -  -  -  -  
   52 00:0930 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0931 D1 -  -  -  		pop 	de
   54 00:0932 C1 -  -  -  		pop 	bc
   55 00:0933 D9 -  -  -  		exx
   56 00:0934 D1 -  -  -  		pop 	de
   57 00:0935 C1 -  -  -  		pop 	bc
   58 00:0936 C9 -  -  -  		ret
   59 00:0937 -  -  -  -  
   60 00:0937 -  -  -  -  ; ***************************************************************************************
   61 00:0937 -  -  -  -  ;
   62 00:0937 -  -  -  -  ;									Changes and Updates
   63 00:0937 -  -  -  -  ;
   64 00:0937 -  -  -  -  ; ***************************************************************************************
   65 00:0937 -  -  -  -  ;
   66 00:0937 -  -  -  -  ;		Date			Notes
   67 00:0937 -  -  -  -  ;		==== 			=====
   68 00:0937 -  -  -  -  ;
   69 00:0937 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:0937 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0937 -  -  -  -  ; ***************************************************************************************
    2 00:0937 -  -  -  -  ; ***************************************************************************************
    3 00:0937 -  -  -  -  ;
    4 00:0937 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0937 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0937 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0937 -  -  -  -  ;		Reviewed :	No
    8 00:0937 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0937 -  -  -  -  ;
   10 00:0937 -  -  -  -  ; ***************************************************************************************
   11 00:0937 -  -  -  -  ; ***************************************************************************************
   12 00:0937 -  -  -  -  
   13 00:0937 -  -  -  -  ; ***************************************************************************************
   14 00:0937 -  -  -  -  ;
   15 00:0937 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0937 -  -  -  -  ;
   17 00:0937 -  -  -  -  ; ***************************************************************************************
   18 00:0937 -  -  -  -  
   19 00:0937 -  -  -  -  Int32Add:
   20 00:0937 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0939 D9 -  -  -  		exx
   22 00:093A 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:093D D9 -  -  -  		exx
   24 00:093E C9 -  -  -  		ret
   25 00:093F -  -  -  -  
   26 00:093F -  -  -  -  ; ***************************************************************************************
   27 00:093F -  -  -  -  ;
   28 00:093F -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:093F -  -  -  -  ;
   30 00:093F -  -  -  -  ; ***************************************************************************************
   31 00:093F -  -  -  -  
   32 00:093F -  -  -  -  Int32Subtract:
   33 00:093F AF -  -  -  		xor 	a 							; clear carry
   34 00:0940 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0943 D9 -  -  -  		exx
   36 00:0944 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0947 D9 -  -  -  		exx
   38 00:0948 C9 -  -  -  		ret
   39 00:0949 -  -  -  -  
   40 00:0949 -  -  -  -  ; ***************************************************************************************
   41 00:0949 -  -  -  -  ;
   42 00:0949 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0949 -  -  -  -  ;
   44 00:0949 -  -  -  -  ; ***************************************************************************************
   45 00:0949 -  -  -  -  
   46 00:0949 -  -  -  -  Int32And:
   47 00:0949 D9 -  -  -  		exx
   48 00:094A CD 4F 09 00 		call 	_I32AndHLDE
   49 00:094E D9 -  -  -  		exx
   50 00:094F -  -  -  -  _I32AndHLDE:		
   51 00:094F 7C -  -  -  		ld 		a,h
   52 00:0950 A2 -  -  -  		and 	d
   53 00:0951 67 -  -  -  		ld 		h,a
   54 00:0952 7D -  -  -  		ld 		a,l
   55 00:0953 A3 -  -  -  		and 	e
   56 00:0954 6F -  -  -  		ld 		l,a
   57 00:0955 C9 -  -  -  		ret
   58 00:0956 -  -  -  -  
   59 00:0956 -  -  -  -  ; ***************************************************************************************
   60 00:0956 -  -  -  -  ;
   61 00:0956 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0956 -  -  -  -  ;
   63 00:0956 -  -  -  -  ; ***************************************************************************************
   64 00:0956 -  -  -  -  
   65 00:0956 -  -  -  -  Int32Or:
   66 00:0956 D9 -  -  -  		exx
   67 00:0957 CD 5C 09 00 		call 	_I32OrHLDE
   68 00:095B D9 -  -  -  		exx
   69 00:095C -  -  -  -  _I32OrHLDE:		
   70 00:095C 7C -  -  -  		ld 		a,h
   71 00:095D B2 -  -  -  		or 		d
   72 00:095E 67 -  -  -  		ld 		h,a
   73 00:095F 7D -  -  -  		ld 		a,l
   74 00:0960 B3 -  -  -  		or 		e
   75 00:0961 6F -  -  -  		ld 		l,a
   76 00:0962 C9 -  -  -  		ret
   77 00:0963 -  -  -  -  
   78 00:0963 -  -  -  -  ; ***************************************************************************************
   79 00:0963 -  -  -  -  ;
   80 00:0963 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0963 -  -  -  -  ;
   82 00:0963 -  -  -  -  ; ***************************************************************************************
   83 00:0963 -  -  -  -  
   84 00:0963 -  -  -  -  Int32Xor:
   85 00:0963 D9 -  -  -  		exx
   86 00:0964 CD 69 09 00 		call 	_I32XorHLDE
   87 00:0968 D9 -  -  -  		exx
   88 00:0969 -  -  -  -  _I32XorHLDE:		
   89 00:0969 7C -  -  -  		ld 		a,h
   90 00:096A AA -  -  -  		xor 	d
   91 00:096B 67 -  -  -  		ld 		h,a
   92 00:096C 7D -  -  -  		ld 		a,l
   93 00:096D AB -  -  -  		xor 	e
   94 00:096E 6F -  -  -  		ld 		l,a
   95 00:096F C9 -  -  -  		ret
   96 00:0970 -  -  -  -  
   97 00:0970 -  -  -  -  ; ***************************************************************************************
   98 00:0970 -  -  -  -  ;
   99 00:0970 -  -  -  -  ;								 Check if HL'HL zero
  100 00:0970 -  -  -  -  ;
  101 00:0970 -  -  -  -  ; ***************************************************************************************
  102 00:0970 -  -  -  -  
  103 00:0970 -  -  -  -  Int32Zero:
  104 00:0970 D9 -  -  -  		exx
  105 00:0971 7D -  -  -  		ld 		a,l
  106 00:0972 B4 -  -  -  		or 		h
  107 00:0973 D9 -  -  -  		exx
  108 00:0974 B5 -  -  -  		or 		l
  109 00:0975 B4 -  -  -  		or 		h
  110 00:0976 C9 -  -  -  		ret
  111 00:0977 -  -  -  -  
  112 00:0977 -  -  -  -  ; ***************************************************************************************
  113 00:0977 -  -  -  -  ;
  114 00:0977 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0977 -  -  -  -  ;
  116 00:0977 -  -  -  -  ; ***************************************************************************************
  117 00:0977 -  -  -  -  
  118 00:0977 -  -  -  -  Int32Compare:
  119 00:0977 E5 -  -  -  		push 	hl 							; save HL
  120 00:0978 AF -  -  -  		xor 	a 							; clear carry
  121 00:0979 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:097C D9 -  -  -  		exx
  123 00:097D E5 -  -  -  		push 	hl 							; save HL'
  124 00:097E 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0981 -  -  -  -  		;
  126 00:0981 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0982 E2 8A 09 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0986 78 -  -  -  		ld 		a,b
  129 00:0987 EE 80 -  -  		xor 	$80
  130 00:0989 47 -  -  -  		ld 		b,a
  131 00:098A -  -  -  -  _I32CNoOverflow:
  132 00:098A 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:098B B5 -  -  -  		or 		l
  134 00:098C D9 -  -  -  		exx 
  135 00:098D B4 -  -  -  		or 		h
  136 00:098E B5 -  -  -  		or 		l
  137 00:098F 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0991 -  -  -  -  		;
  139 00:0991 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0992 CB 78 -  -  		bit 	7,b
  141 00:0994 D9 -  -  -  		exx
  142 00:0995 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0997 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0999 3E FF -  -  		ld 		a,$FF
  145 00:099B -  -  -  -  _I32NotPos:
  146 00:099B D9 -  -  -  		exx
  147 00:099C E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:099D D9 -  -  -  		exx
  149 00:099E E1 -  -  -  		pop 	hl 							; restore HL
  150 00:099F B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:09A0 C9 -  -  -  		ret
  152 00:09A1 -  -  -  -  
  153 00:09A1 -  -  -  -  ; ***************************************************************************************
  154 00:09A1 -  -  -  -  ;
  155 00:09A1 -  -  -  -  ;										Negate HL'HL
  156 00:09A1 -  -  -  -  ;
  157 00:09A1 -  -  -  -  ; ***************************************************************************************
  158 00:09A1 -  -  -  -  
  159 00:09A1 -  -  -  -  Int32Negate:
  160 00:09A1 AF -  -  -  		xor 	a
  161 00:09A2 CD AD 09 00 		call 	_I32NSubtract
  162 00:09A6 D9 -  -  -  		exx
  163 00:09A7 CD AD 09 00 		call 	_I32NSubtract
  164 00:09AB D9 -  -  -  		exx
  165 00:09AC C9 -  -  -  		ret
  166 00:09AD -  -  -  -  _I32NSubtract:
  167 00:09AD D5 -  -  -  		push 	de
  168 00:09AE EB -  -  -  		ex 		de,hl
  169 00:09AF 21 00 00 00 		ld 		hl,$0000
  170 00:09B3 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:09B6 D1 -  -  -  		pop 	de
  172 00:09B7 C9 -  -  -  		ret
  173 00:09B8 -  -  -  -  		
  174 00:09B8 -  -  -  -  ; ***************************************************************************************
  175 00:09B8 -  -  -  -  ;
  176 00:09B8 -  -  -  -  ;									Changes and Updates
  177 00:09B8 -  -  -  -  ;
  178 00:09B8 -  -  -  -  ; ***************************************************************************************
  179 00:09B8 -  -  -  -  ;
  180 00:09B8 -  -  -  -  ;		Date			Notes
  181 00:09B8 -  -  -  -  ;		==== 			=====
  182 00:09B8 -  -  -  -  ;
  183 00:09B8 -  -  -  -  ; ***************************************************************************************
  184 00:09B8 -  -  -  -  		
Listing for file "_build.asm"
   41 00:09B8 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:09B8 -  -  -  -  ; ***************************************************************************************
    2 00:09B8 -  -  -  -  ; ***************************************************************************************
    3 00:09B8 -  -  -  -  ;
    4 00:09B8 -  -  -  -  ;		Name : 		itostring.asm
    5 00:09B8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09B8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09B8 -  -  -  -  ;		Reviewed :	No
    8 00:09B8 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:09B8 -  -  -  -  ;
   10 00:09B8 -  -  -  -  ; ***************************************************************************************
   11 00:09B8 -  -  -  -  ;
   12 00:09B8 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:09B8 -  -  -  -  ;
   14 00:09B8 -  -  -  -  ; ***************************************************************************************
   15 00:09B8 -  -  -  -  
   16 00:09B8 -  -  -  -  Int32ToString:
   17 00:09B8 C5 -  -  -  		push 	bc 							; save string start
   18 00:09B9 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:09BA E5 -  -  -  		push 	hl
   20 00:09BB 11 00 00 00 		ld	 	de,$0000
   21 00:09BF D9 -  -  -  		exx
   22 00:09C0 D5 -  -  -  		push 	de
   23 00:09C1 E5 -  -  -  		push 	hl
   24 00:09C2 11 00 00 00 		ld 		de,$000
   25 00:09C6 D9 -  -  -  		exx
   26 00:09C7 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:09C8 -  -  -  -  		;
   28 00:09C8 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:09CA 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:09CC ED 44 -  -  		neg 								; negate base and put in E
   31 00:09CE 5F -  -  -  		ld 		e,a
   32 00:09CF -  -  -  -  		;
   33 00:09CF D9 -  -  -  		exx 								; is it -ve ?
   34 00:09D0 CB 7C -  -  		bit 	7,h
   35 00:09D2 D9 -  -  -  		exx
   36 00:09D3 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:09D5 -  -  -  -  		;
   38 00:09D5 CD A1 09 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:09D9 -  -  -  -  		;
   40 00:09D9 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:09DB 02 -  -  -  		ld 		(bc),a
   42 00:09DC 03 -  -  -  		inc 	bc
   43 00:09DD -  -  -  -  _I32TSNotNegative:	
   44 00:09DD CD EB 09 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:09E1 -  -  -  -  _I32TSExit:
   46 00:09E1 AF -  -  -  		xor 	a  							; write the end of string code
   47 00:09E2 02 -  -  -  		ld 		(bc),a 
   48 00:09E3 -  -  -  -  
   49 00:09E3 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:09E4 E1 -  -  -  		pop 	hl
   51 00:09E5 D1 -  -  -  		pop 	de
   52 00:09E6 D9 -  -  -  		exx
   53 00:09E7 E1 -  -  -  		pop 	hl
   54 00:09E8 D1 -  -  -  		pop 	de
   55 00:09E9 C1 -  -  -  		pop 	bc
   56 00:09EA C9 -  -  -  		ret
   57 00:09EB -  -  -  -  
   58 00:09EB -  -  -  -  _I32RecursiveConvert:
   59 00:09EB CD FA 07 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:09EF F5 -  -  -  		push 	af 							; save remainder
   61 00:09F0 CD 70 09 00 		call 	Int32Zero		 			; check result is non zero
   62 00:09F4 C4 EB 09 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:09F8 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:09F9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:09FB 38 02 -  -  		jr 		c,_I32NotHex
   66 00:09FD C6 07 -  -  		add 	a,7
   67 00:09FF -  -  -  -  _I32NotHex:
   68 00:09FF C6 30 -  -  		add 	a,48
   69 00:0A01 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0A02 03 -  -  -  		inc 	bc
   71 00:0A03 C9 -  -  -  		ret		
   72 00:0A04 -  -  -  -  
   73 00:0A04 -  -  -  -  ; ***************************************************************************************
   74 00:0A04 -  -  -  -  ;
   75 00:0A04 -  -  -  -  ;									Changes and Updates
   76 00:0A04 -  -  -  -  ;
   77 00:0A04 -  -  -  -  ; ***************************************************************************************
   78 00:0A04 -  -  -  -  ;
   79 00:0A04 -  -  -  -  ;		Date			Notes
   80 00:0A04 -  -  -  -  ;		==== 			=====
   81 00:0A04 -  -  -  -  ;
   82 00:0A04 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:0A04 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0A04 -  -  -  -  ; ***************************************************************************************
    2 00:0A04 -  -  -  -  ; ***************************************************************************************
    3 00:0A04 -  -  -  -  ;
    4 00:0A04 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0A04 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A04 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A04 -  -  -  -  ;		Reviewed :	No
    8 00:0A04 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0A04 -  -  -  -  ;
   10 00:0A04 -  -  -  -  ; ***************************************************************************************
   11 00:0A04 -  -  -  -  ; ***************************************************************************************
   12 00:0A04 -  -  -  -  
   13 00:0A04 -  -  -  -  #ifdef AQUARIUS
   14 00:0A04             
   15 00:0A04             ; ***************************************************************************************
   16 00:0A04             ;
   17 00:0A04             ;								Initialise system stuff
   18 00:0A04             ;
   19 00:0A04             ; ***************************************************************************************
   20 00:0A04             
   21 00:0A04             SYSInitialise:
   22 00:0A04             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0A04             	call 	SYSPrintChar
   24 00:0A04             	ret
   25 00:0A04             
   26 00:0A04             ; ***************************************************************************************
   27 00:0A04             ;
   28 00:0A04             ;								Terminate system stuff
   29 00:0A04             ;
   30 00:0A04             ; ***************************************************************************************
   31 00:0A04             
   32 00:0A04             SYSTerminate:
   33 00:0A04             	jr 		SYSTerminate
   34 00:0A04             
   35 00:0A04             ; ***************************************************************************************
   36 00:0A04             ;
   37 00:0A04             ;								Print A character
   38 00:0A04             ;
   39 00:0A04             ; ***************************************************************************************
   40 00:0A04             
   41 00:0A04             SYSPrintChar:
   42 00:0A04             	push 	af 									; we stack everything including alt registers
   43 00:0A04             	push 	bc
   44 00:0A04             	push 	de
   45 00:0A04             	push 	hl
   46 00:0A04             	push 	ix
   47 00:0A04             	push 	iy
   48 00:0A04             	exx
   49 00:0A04             	push 	bc
   50 00:0A04             	push 	de
   51 00:0A04             	push 	hl
   52 00:0A04             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0A04             	pop 	hl
   54 00:0A04             	pop 	de
   55 00:0A04             	pop 	bc
   56 00:0A04             	exx
   57 00:0A04             	pop 	iy
   58 00:0A04             	pop 	ix
   59 00:0A04             	pop 	hl
   60 00:0A04             	pop 	de
   61 00:0A04             	pop 	bc
   62 00:0A04             	pop 	af
   63 00:0A04             	ret		
   64 00:0A04             
   65 00:0A04             ; ***************************************************************************************
   66 00:0A04             ;
   67 00:0A04             ;									Print Newline
   68 00:0A04             ;
   69 00:0A04             ; ***************************************************************************************
   70 00:0A04             
   71 00:0A04             SYSPrintCRLF:
   72 00:0A04             	push 	af
   73 00:0A04             	ld 		a,13
   74 00:0A04             	call 	SYSPrintChar
   75 00:0A04             	ld 		a,10
   76 00:0A04             	call 	SYSPrintChar
   77 00:0A04             	pop 	af
   78 00:0A04             	ret
   79 00:0A04             
   80 00:0A04             #endif
   81 00:0A04 -  -  -  -  
   82 00:0A04 -  -  -  -  ; ***************************************************************************************
   83 00:0A04 -  -  -  -  ;
   84 00:0A04 -  -  -  -  ;									Changes and Updates
   85 00:0A04 -  -  -  -  ;
   86 00:0A04 -  -  -  -  ; ***************************************************************************************
   87 00:0A04 -  -  -  -  ;
   88 00:0A04 -  -  -  -  ;		Date			Notes
   89 00:0A04 -  -  -  -  ;		==== 			=====
   90 00:0A04 -  -  -  -  ;
   91 00:0A04 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:0A04 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0A04 -  -  -  -  ; ***************************************************************************************
    2 00:0A04 -  -  -  -  ; ***************************************************************************************
    3 00:0A04 -  -  -  -  ;
    4 00:0A04 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0A04 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A04 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A04 -  -  -  -  ;		Reviewed :	No
    8 00:0A04 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0A04 -  -  -  -  ;
   10 00:0A04 -  -  -  -  ; ***************************************************************************************
   11 00:0A04 -  -  -  -  ; ***************************************************************************************
   12 00:0A04 -  -  -  -  
   13 00:0A04 -  -  -  -  #ifdef CLEANEZ80
   14 00:0A04 -  -  -  -  
   15 00:0A04 -  -  -  -  ; ***************************************************************************************
   16 00:0A04 -  -  -  -  ;
   17 00:0A04 -  -  -  -  ;								Initialise system stuff
   18 00:0A04 -  -  -  -  ;
   19 00:0A04 -  -  -  -  ; ***************************************************************************************
   20 00:0A04 -  -  -  -  
   21 00:0A04 -  -  -  -  SYSInitialise:
   22 00:0A04 C9 -  -  -  	ret
   23 00:0A05 -  -  -  -  
   24 00:0A05 -  -  -  -  ; ***************************************************************************************
   25 00:0A05 -  -  -  -  ;
   26 00:0A05 -  -  -  -  ;								Terminate system stuff
   27 00:0A05 -  -  -  -  ;
   28 00:0A05 -  -  -  -  ; ***************************************************************************************
   29 00:0A05 -  -  -  -  
   30 00:0A05 -  -  -  -  SYSTerminate:
   31 00:0A05 C9 -  -  -  	ret
   32 00:0A06 -  -  -  -  
   33 00:0A06 -  -  -  -  ; ***************************************************************************************
   34 00:0A06 -  -  -  -  ;
   35 00:0A06 -  -  -  -  ;								Print A character
   36 00:0A06 -  -  -  -  ;
   37 00:0A06 -  -  -  -  ; ***************************************************************************************
   38 00:0A06 -  -  -  -  
   39 00:0A06 -  -  -  -  SYSPrintChar:
   40 00:0A06 C9 -  -  -  	ret		
   41 00:0A07 -  -  -  -  
   42 00:0A07 -  -  -  -  ; ***************************************************************************************
   43 00:0A07 -  -  -  -  ;
   44 00:0A07 -  -  -  -  ;									Print Newline
   45 00:0A07 -  -  -  -  ;
   46 00:0A07 -  -  -  -  ; ***************************************************************************************
   47 00:0A07 -  -  -  -  
   48 00:0A07 -  -  -  -  SYSPrintCRLF:
   49 00:0A07 C9 -  -  -  	ret
   50 00:0A08 -  -  -  -  
   51 00:0A08 -  -  -  -  #endif
   52 00:0A08 -  -  -  -  
   53 00:0A08 -  -  -  -  ; ***************************************************************************************
   54 00:0A08 -  -  -  -  ;
   55 00:0A08 -  -  -  -  ;									Changes and Updates
   56 00:0A08 -  -  -  -  ;
   57 00:0A08 -  -  -  -  ; ***************************************************************************************
   58 00:0A08 -  -  -  -  ;
   59 00:0A08 -  -  -  -  ;		Date			Notes
   60 00:0A08 -  -  -  -  ;		==== 			=====
   61 00:0A08 -  -  -  -  ;
   62 00:0A08 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0A08 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0A08 -  -  -  -  ; ***************************************************************************************
    2 00:0A08 -  -  -  -  ; ***************************************************************************************
    3 00:0A08 -  -  -  -  ;
    4 00:0A08 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0A08 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A08 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A08 -  -  -  -  ;		Reviewed :	No
    8 00:0A08 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0A08 -  -  -  -  ;
   10 00:0A08 -  -  -  -  ; ***************************************************************************************
   11 00:0A08 -  -  -  -  ; ***************************************************************************************
   12 00:0A08 -  -  -  -  
   13 00:0A08 -  -  -  -  #ifdef TI84
   14 00:0A08             
   15 00:0A08             ; ***************************************************************************************
   16 00:0A08             ;
   17 00:0A08             ;								Initialise system stuff
   18 00:0A08             ;
   19 00:0A08             ; ***************************************************************************************
   20 00:0A08             
   21 00:0A08             SYSInitialise:
   22 00:0A08             	di
   23 00:0A08             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0A08             	ld 		(_IYTemp84),iy
   25 00:0A08             	ret
   26 00:0A08             
   27 00:0A08             ; ***************************************************************************************
   28 00:0A08             ;
   29 00:0A08             ;								Terminate system stuff
   30 00:0A08             ;
   31 00:0A08             ; ***************************************************************************************
   32 00:0A08             
   33 00:0A08             SYSTerminate:
   34 00:0A08             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0A08             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0A08             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0A08             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0A08             	ei
   39 00:0A08             	ret 										; and exit.
   40 00:0A08             
   41 00:0A08             _StackTemp84:									; temp var for TI84 only.
   42 00:0A08             	.dw 	0,0
   43 00:0A08             _IYTemp84:
   44 00:0A08             	.dw 	0,0		
   45 00:0A08             
   46 00:0A08             ; ***************************************************************************************
   47 00:0A08             ;
   48 00:0A08             ;								Print A character
   49 00:0A08             ;
   50 00:0A08             ; ***************************************************************************************
   51 00:0A08             
   52 00:0A08             SYSPrintChar:
   53 00:0A08             	push 	af 									; we stack everything including alt registers
   54 00:0A08             	push 	bc
   55 00:0A08             	push 	de
   56 00:0A08             	push 	hl
   57 00:0A08             	push 	ix
   58 00:0A08             	push 	iy
   59 00:0A08             	exx
   60 00:0A08             	push 	bc
   61 00:0A08             	push 	de
   62 00:0A08             	push 	hl
   63 00:0A08             
   64 00:0A08             	ld 		iy,(_IYTemp84)
   65 00:0A08             	call 	_PutC 								; print A as character
   66 00:0A08             	di
   67 00:0A08             	ld 		(_IYTemp84),iy
   68 00:0A08             
   69 00:0A08             	pop 	hl
   70 00:0A08             	pop 	de
   71 00:0A08             	pop 	bc
   72 00:0A08             	exx
   73 00:0A08             	pop 	iy
   74 00:0A08             	pop 	ix
   75 00:0A08             	pop 	hl
   76 00:0A08             	pop 	de
   77 00:0A08             	pop 	bc
   78 00:0A08             	pop 	af
   79 00:0A08             	ret		
   80 00:0A08             
   81 00:0A08             ; ***************************************************************************************
   82 00:0A08             ;
   83 00:0A08             ;									Print Newline
   84 00:0A08             ;
   85 00:0A08             ; ***************************************************************************************
   86 00:0A08             
   87 00:0A08             SYSPrintCRLF:
   88 00:0A08             	push 	af 									; we stack everything including alt registers
   89 00:0A08             	push 	bc
   90 00:0A08             	push 	de
   91 00:0A08             	push 	hl
   92 00:0A08             	push 	ix
   93 00:0A08             	push 	iy
   94 00:0A08             	exx
   95 00:0A08             	push 	bc
   96 00:0A08             	push 	de
   97 00:0A08             	push 	hl
   98 00:0A08             
   99 00:0A08             	ld 		iy,(_IYTemp84)
  100 00:0A08             	call 	_newline
  101 00:0A08             	di
  102 00:0A08             	ld 		(_IYTemp84),iy
  103 00:0A08             
  104 00:0A08             	pop 	hl
  105 00:0A08             	pop 	de
  106 00:0A08             	pop 	bc
  107 00:0A08             	exx
  108 00:0A08             	pop 	iy
  109 00:0A08             	pop 	ix
  110 00:0A08             	pop 	hl
  111 00:0A08             	pop 	de
  112 00:0A08             	pop 	bc
  113 00:0A08             	pop 	af
  114 00:0A08             	ret
  115 00:0A08             
  116 00:0A08             #endif
  117 00:0A08 -  -  -  -  
  118 00:0A08 -  -  -  -  ; ***************************************************************************************
  119 00:0A08 -  -  -  -  ;
  120 00:0A08 -  -  -  -  ;									Changes and Updates
  121 00:0A08 -  -  -  -  ;
  122 00:0A08 -  -  -  -  ; ***************************************************************************************
  123 00:0A08 -  -  -  -  ;
  124 00:0A08 -  -  -  -  ;		Date			Notes
  125 00:0A08 -  -  -  -  ;		==== 			=====
  126 00:0A08 -  -  -  -  ;
  127 00:0A08 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:0A08 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0A08 -  -  -  -  ; ***************************************************************************************
    2 00:0A08 -  -  -  -  ; ***************************************************************************************
    3 00:0A08 -  -  -  -  ;
    4 00:0A08 -  -  -  -  ;		Name : 		basic.asm
    5 00:0A08 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A08 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A08 -  -  -  -  ;		Reviewed :	No
    8 00:0A08 -  -  -  -  ;		Purpose :	Main program.
    9 00:0A08 -  -  -  -  ;
   10 00:0A08 -  -  -  -  ; ***************************************************************************************
   11 00:0A08 -  -  -  -  ; ***************************************************************************************
   12 00:0A08 -  -  -  -  
   13 00:0A08 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:0C00 -  -  -  -  TestInstance:
   15 00:0C00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:0C00 -  -  -  -  ;
    2 00:0C00 -  -  -  -  ;	This code automatically generated.
    3 00:0C00 -  -  -  -  ;
    4 00:0C00 -  -  -  -  TestProgram:
    5 00:0C00 21 01 00 B1 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 08 02 00 
              BD 43 88 42 
              80 00 -  -  	.db	$21,$01,$00,$b1,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$08,$02,$00,$bd,$43,$88,$42,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:0C2A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:1C2A -  -  -  -  EndTestInstance:
   18 00:1C2A -  -  -  -  		
   19 00:1C2A -  -  -  -  ; ***************************************************************************************
   20 00:1C2A -  -  -  -  ;
   21 00:1C2A -  -  -  -  ;									Changes and Updates
   22 00:1C2A -  -  -  -  ;
   23 00:1C2A -  -  -  -  ; ***************************************************************************************
   24 00:1C2A -  -  -  -  ;
   25 00:1C2A -  -  -  -  ;		Date			Notes
   26 00:1C2A -  -  -  -  ;		==== 			=====
   27 00:1C2A -  -  -  -  ;
   28 00:1C2A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:1C2A -  -  -  -  FinalAddress:
