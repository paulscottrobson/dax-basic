    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_MEMORY = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_MEMORY
   63 00:0000             	ld a,ERRID_MEMORY
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOCOMMA = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   70 00:0000             	ld a,ERRID_NOCOMMA
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NODOLLAR = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   77 00:0000             	ld a,ERRID_NODOLLAR
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOLBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   84 00:0000             	ld a,ERRID_NOLBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NORBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   91 00:0000             	ld a,ERRID_NORBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOTREF = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOTREF
   98 00:0000             	ld a,ERRID_NOTREF
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_STOP = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_STOP
  105 00:0000             	ld a,ERRID_STOP
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_SYNTAX = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_SYNTAX
  112 00:0000             	ld a,ERRID_SYNTAX
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_TODO = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_TODO
  119 00:0000             	ld a,ERRID_TODO
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  126 00:0000             	ld a,ERRID_UNKNOWNVAR
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:0000             		ld 		sp,$BFFF
   41 00:0000             #endif
   42 00:0000             
   43 00:0000             #endif
   44 00:0000 CD 04 0F 00 		call 	SYSInitialise
   45 00:0004 11 00 10 00 		ld 		de,TestInstance
   46 00:0008 21 7B 23 00 		ld 		hl,EndTestInstance
   47 00:000C CD E2 08 00 		call 	SetCurrentInstance
   48 00:0010 -  -  -  -  
   49 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:0012 32 60 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:0016 -  -  -  -  		
   52 00:0016 C3 9B 02 00 		jp 		Command_RUN
   53 00:001A -  -  -  -  
   54 00:001A -  -  -  -  WarmStart:		
   55 00:001A 3E 2A -  -  		ld 		a,'*'
   56 00:001C CD 06 0F 00 		call 	SYSPrintChar
   57 00:0020 CD 05 0F 00 		call 	SYSTerminate
   58 00:0024 -  -  -  -  
   59 00:0024 -  -  -  -  Unimplemented:
   60 00:0024 3E 05 C3 58 
              03 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:002A -  -  -  -  Int32DivZeroHandler:
   62 00:002A 3E 06 C3 58 
              03 00 -  -  		ERR_DIVZERO
   63 00:0030 -  -  -  -  
   64 00:0030 -  -  -  -  ; ***************************************************************************************
   65 00:0030 -  -  -  -  ;
   66 00:0030 -  -  -  -  ;									Changes and Updates
   67 00:0030 -  -  -  -  ;
   68 00:0030 -  -  -  -  ; ***************************************************************************************
   69 00:0030 -  -  -  -  ;
   70 00:0030 -  -  -  -  ;		Date			Notes
   71 00:0030 -  -  -  -  ;		==== 			=====
   72 00:0030 -  -  -  -  ;
   73 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  		
   78 00:005C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  
   81 00:0060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:0060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:0066 -  -  -  -  
   84 00:0066 -  -  -  -  AConvert: 									; used for address conversions.
   85 00:0066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006C -  -  -  -  		
   87 00:006C -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:006C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:007C -  -  -  -  
   90 00:007C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:007C 00 00 -  -  		.dw 	0
   92 00:007E -  -  -  -  
   93 00:007E -  -  -  -  PrintBase: 									; current base for PRINT
   94 00:007E 00 00 -  -  		.dw 	0 
   95 00:0080 -  -  -  -  		
   96 00:0080 -  -  -  -  ; ***************************************************************************************
   97 00:0080 -  -  -  -  ;
   98 00:0080 -  -  -  -  ;									Variable Information
   99 00:0080 -  -  -  -  ;
  100 00:0080 -  -  -  -  ; ***************************************************************************************
  101 00:0080 -  -  -  -  
  102 00:0080 -  -  -  -  VarNameStart: 								; first byte of name
  103 00:0080 00 00 00 00 		.dw 	0,0
  104 00:0084 -  -  -  -  VarHash: 									; name hash value
  105 00:0084 00 00 -  -  		.dw 	0		
  106 00:0086 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  107 00:0086 00 00 00 00 		.dw 	0,0
  108 00:008A -  -  -  -  		
  109 00:008A -  -  -  -  ; ***************************************************************************************
  110 00:008A -  -  -  -  ;
  111 00:008A -  -  -  -  ;										  Buffers
  112 00:008A -  -  -  -  ;
  113 00:008A -  -  -  -  ; ***************************************************************************************
  114 00:008A -  -  -  -  
  115 00:008A -  -  -  -  _USBuffer: 									; buffer space for STR$()
  116 00:008A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  117 00:009A -  -  -  -  
  118 00:009A -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  119 00:009A 00 00 -  -  		.dw 	0
  120 00:009C -  -  -  -  
  121 00:009C -  -  -  -  ConvertBuffer: 								; general usage
  122 00:009C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  123 00:00DC -  -  -  -  
  124 00:00DC -  -  -  -  ; ***************************************************************************************
  125 00:00DC -  -  -  -  ;
  126 00:00DC -  -  -  -  ;									Changes and Updates
  127 00:00DC -  -  -  -  ;
  128 00:00DC -  -  -  -  ; ***************************************************************************************
  129 00:00DC -  -  -  -  ;
  130 00:00DC -  -  -  -  ;		Date			Notes
  131 00:00DC -  -  -  -  ;		==== 			=====
  132 00:00DC -  -  -  -  ;
  133 00:00DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00DC -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00DC -  -  -  -  ; ***************************************************************************************
    2 00:00DC -  -  -  -  ; ***************************************************************************************
    3 00:00DC -  -  -  -  ;
    4 00:00DC -  -  -  -  ;		Name : 		assert.asm
    5 00:00DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DC -  -  -  -  ;		Reviewed :	No
    8 00:00DC -  -  -  -  ;		Purpose :	Assert command
    9 00:00DC -  -  -  -  ;
   10 00:00DC -  -  -  -  ; ***************************************************************************************
   11 00:00DC -  -  -  -  ; ***************************************************************************************
   12 00:00DC -  -  -  -  
   13 00:00DC -  -  -  -  ; ***************************************************************************************
   14 00:00DC -  -  -  -  ;
   15 00:00DC -  -  -  -  ;									ASSERT command
   16 00:00DC -  -  -  -  ;
   17 00:00DC -  -  -  -  ; ***************************************************************************************
   18 00:00DC -  -  -  -  
   19 00:00DC -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00DC CD 8B 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00E0 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00E6 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00E7 3E 01 C3 58 
              03 00 -  -  		ERR_ASSERT
   24 00:00ED -  -  -  -  
   25 00:00ED -  -  -  -  ; ***************************************************************************************
   26 00:00ED -  -  -  -  ;
   27 00:00ED -  -  -  -  ;									Changes and Updates
   28 00:00ED -  -  -  -  ;
   29 00:00ED -  -  -  -  ; ***************************************************************************************
   30 00:00ED -  -  -  -  ;
   31 00:00ED -  -  -  -  ;		Date			Notes
   32 00:00ED -  -  -  -  ;		==== 			=====
   33 00:00ED -  -  -  -  ;
   34 00:00ED -  -  -  -  ; ***************************************************************************************
   35 00:00ED -  -  -  -  		
Listing for file "_build.asm"
   14 00:00ED -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00ED -  -  -  -  ; ***************************************************************************************
    2 00:00ED -  -  -  -  ; ***************************************************************************************
    3 00:00ED -  -  -  -  ;
    4 00:00ED -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00ED -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00ED -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00ED -  -  -  -  ;		Reviewed :	No
    8 00:00ED -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00ED -  -  -  -  ;
   10 00:00ED -  -  -  -  ; ***************************************************************************************
   11 00:00ED -  -  -  -  ; ***************************************************************************************
   12 00:00ED -  -  -  -  
   13 00:00ED -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00ED -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00ED -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00ED -  -  -  -  BadCmd_Comma: 		;; [~]
   17 00:00ED -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 00:00ED -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00ED C3 C2 03 00 		jp 		SyntaxError
   20 00:00F1 -  -  -  -  
   21 00:00F1 -  -  -  -  ; ***************************************************************************************
   22 00:00F1 -  -  -  -  ;
   23 00:00F1 -  -  -  -  ;									Changes and Updates
   24 00:00F1 -  -  -  -  ;
   25 00:00F1 -  -  -  -  ; ***************************************************************************************
   26 00:00F1 -  -  -  -  ;
   27 00:00F1 -  -  -  -  ;		Date			Notes
   28 00:00F1 -  -  -  -  ;		==== 			=====
   29 00:00F1 -  -  -  -  ;
   30 00:00F1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00F1 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00F1 -  -  -  -  ; ***************************************************************************************
    2 00:00F1 -  -  -  -  ; ***************************************************************************************
    3 00:00F1 -  -  -  -  ;
    4 00:00F1 -  -  -  -  ;		Name : 		colon.asm
    5 00:00F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F1 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00F1 -  -  -  -  ;		Reviewed :	No
    8 00:00F1 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00F1 -  -  -  -  ;
   10 00:00F1 -  -  -  -  ; ***************************************************************************************
   11 00:00F1 -  -  -  -  ; ***************************************************************************************
   12 00:00F1 -  -  -  -  
   13 00:00F1 -  -  -  -  ; ***************************************************************************************
   14 00:00F1 -  -  -  -  ;
   15 00:00F1 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00F1 -  -  -  -  ;
   17 00:00F1 -  -  -  -  ; ***************************************************************************************
   18 00:00F1 -  -  -  -  
   19 00:00F1 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00F1 C9 -  -  -  		ret
   21 00:00F2 -  -  -  -  
   22 00:00F2 -  -  -  -  ; ***************************************************************************************
   23 00:00F2 -  -  -  -  ;
   24 00:00F2 -  -  -  -  ;									Changes and Updates
   25 00:00F2 -  -  -  -  ;
   26 00:00F2 -  -  -  -  ; ***************************************************************************************
   27 00:00F2 -  -  -  -  ;
   28 00:00F2 -  -  -  -  ;		Date			Notes
   29 00:00F2 -  -  -  -  ;		==== 			=====
   30 00:00F2 -  -  -  -  ;
   31 00:00F2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F2 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F2 -  -  -  -  ; ***************************************************************************************
    2 00:00F2 -  -  -  -  ; ***************************************************************************************
    3 00:00F2 -  -  -  -  ;
    4 00:00F2 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F2 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F2 -  -  -  -  ;		Reviewed :	No
    8 00:00F2 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F2 -  -  -  -  ;
   10 00:00F2 -  -  -  -  ; ***************************************************************************************
   11 00:00F2 -  -  -  -  ; ***************************************************************************************
   12 00:00F2 -  -  -  -  
   13 00:00F2 -  -  -  -  ; ***************************************************************************************
   14 00:00F2 -  -  -  -  ;
   15 00:00F2 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:00F2 -  -  -  -  ;	
   17 00:00F2 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:00F2 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:00F2 -  -  -  -  ;								(can be comma chained)
   20 00:00F2 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:00F2 -  -  -  -  ;
   22 00:00F2 -  -  -  -  ; ***************************************************************************************
   23 00:00F2 -  -  -  -  
   24 00:00F2 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:00F2 -  -  -  -  		;
   26 00:00F2 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:00F2 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:00F2 -  -  -  -  		;
   29 00:00F2 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:00F4 D1 -  -  -  		pop 	de
   31 00:00F5 -  -  -  -  		;
   32 00:00F5 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:00F8 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:00FA D2 C2 03 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:00FE -  -  -  -  _DISkip:
   36 00:00FE DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:0100 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:0103 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:0105 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:0107 -  -  -  -  		;
   41 00:0107 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:010A FE 95 -  -  		cp 		KWD_LPAREN
   43 00:010C F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:010D CC 6E 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:0111 F1 -  -  -  		pop 	af
   46 00:0112 C4 26 01 00 		call 	nz,DimensionAllocate
   47 00:0116 -  -  -  -  		;
   48 00:0116 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:0119 FE A6 -  -  		cp 		KWD_COMMA
   50 00:011B C0 -  -  -  		ret 	nz
   51 00:011C DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:011E 18 D2 -  -  		jr 		Command_DIM
   53 00:0120 -  -  -  -  
   54 00:0120 -  -  -  -  _CDError:
   55 00:0120 3E 04 C3 58 
              03 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:0126 -  -  -  -  
   57 00:0126 -  -  -  -  ; ***************************************************************************************
   58 00:0126 -  -  -  -  ;
   59 00:0126 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:0126 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:0126 -  -  -  -  ;
   62 00:0126 -  -  -  -  ; ***************************************************************************************
   63 00:0126 -  -  -  -  
   64 00:0126 -  -  -  -  DimensionAllocate:
   65 00:0126 D5 -  -  -  		push 	de 							; save start on stack
   66 00:0127 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:0129 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:012B 32 7C 00 00 		ld 		(AllowAutoCreate),a
   69 00:012F CD 4F 09 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:0133 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:0135 28 E9 -  -  		jr 		z,_CDError
   72 00:0137 CB 41 -  -  		bit 	CIsString,c
   73 00:0139 20 E5 -  -  		jr 		nz,_CDError
   74 00:013B DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:013D E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:013E 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:0140 CD 4C 03 00 		call 	CheckNextA 					; check for [
   78 00:0144 CD 8B 05 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:0148 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:014A CD 4C 03 00 		call 	CheckNextA 					; check for ]
   81 00:014E 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:014F 7C -  -  -  		ld 		a,h
   83 00:0150 B5 -  -  -  		or 		l
   84 00:0151 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:0153 D9 -  -  -  		exx
   86 00:0154 23 -  -  -  		inc 	hl
   87 00:0155 D9 -  -  -  		exx
   88 00:0156 -  -  -  -  _DANoCarry:
   89 00:0156 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:0157 7C -  -  -  		ld 		a,h
   91 00:0158 B5 -  -  -  		or 		l
   92 00:0159 D9 -  -  -  		exx
   93 00:015A 20 C4 -  -  		jr 		nz,_CDError
   94 00:015C CD 71 08 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:0160 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:0161 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:0162 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:0168 AF -  -  -  		xor 	a 							; autocreate off
   99 00:0169 32 7C 00 00 		ld 		(AllowAutoCreate),a
  100 00:016D C9 -  -  -  		ret
  101 00:016E -  -  -  -  
  102 00:016E -  -  -  -  ; ***************************************************************************************
  103 00:016E -  -  -  -  ;
  104 00:016E -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:016E -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:016E -  -  -  -  ;
  107 00:016E -  -  -  -  ; ***************************************************************************************
  108 00:016E -  -  -  -  
  109 00:016E -  -  -  -  DimensionArray:
  110 00:016E D5 -  -  -  		push 	de 							; save start on stack.
  111 00:016F -  -  -  -  		;
  112 00:016F CD 8B 05 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:0173 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:0174 E6 FC -  -  		and 	$FC
  115 00:0176 D9 -  -  -  		exx
  116 00:0177 B4 -  -  -  		or 		h
  117 00:0178 B5 -  -  -  		or 		l
  118 00:0179 D9 -  -  -  		exx
  119 00:017A 20 A4 -  -  		jr 		nz,_CDError
  120 00:017C -  -  -  -  		;
  121 00:017C DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:017E E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:017F -  -  -  -  		;
  124 00:017F CD DC 09 00 		call 	VariableInformation 		; get information about this array
  125 00:0183 CD 18 0A 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:0187 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:0189 -  -  -  -  		;
  128 00:0189 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:018A E5 -  -  -  		push 	hl
  130 00:018B 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:018C 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:018D 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:018E 29 -  -  -  		add 	hl,hl
  134 00:018F CD 0C 09 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:0193 -  -  -  -  		;
  136 00:0193 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:0194 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:0198 09 -  -  -  		add 	hl,bc
  139 00:0199 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:019F DD E1 -  -  		pop 	ix 							; restore end position
  141 00:01A1 C9 -  -  -  		ret		
  142 00:01A2 -  -  -  -  
  143 00:01A2 -  -  -  -  
  144 00:01A2 -  -  -  -  ; ***************************************************************************************
  145 00:01A2 -  -  -  -  ;
  146 00:01A2 -  -  -  -  ;									Changes and Updates
  147 00:01A2 -  -  -  -  ;
  148 00:01A2 -  -  -  -  ; ***************************************************************************************
  149 00:01A2 -  -  -  -  ;
  150 00:01A2 -  -  -  -  ;		Date			Notes
  151 00:01A2 -  -  -  -  ;		==== 			=====
  152 00:01A2 -  -  -  -  ;
  153 00:01A2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:01A2 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:01A2 -  -  -  -  ; ***************************************************************************************
    2 00:01A2 -  -  -  -  ; ***************************************************************************************
    3 00:01A2 -  -  -  -  ;
    4 00:01A2 -  -  -  -  ;		Name : 		end.asm
    5 00:01A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A2 -  -  -  -  ;		Reviewed :	No
    8 00:01A2 -  -  -  -  ;		Purpose :	End command
    9 00:01A2 -  -  -  -  ;
   10 00:01A2 -  -  -  -  ; ***************************************************************************************
   11 00:01A2 -  -  -  -  ; ***************************************************************************************
   12 00:01A2 -  -  -  -  
   13 00:01A2 -  -  -  -  ; ***************************************************************************************
   14 00:01A2 -  -  -  -  ;
   15 00:01A2 -  -  -  -  ;										END command
   16 00:01A2 -  -  -  -  ;
   17 00:01A2 -  -  -  -  ; ***************************************************************************************
   18 00:01A2 -  -  -  -  
   19 00:01A2 -  -  -  -  Command_END: 	;; [end]
   20 00:01A2 3E 00 C3 58 
              03 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:01A8 -  -  -  -  
   22 00:01A8 -  -  -  -  ; ***************************************************************************************
   23 00:01A8 -  -  -  -  ;
   24 00:01A8 -  -  -  -  ;									Changes and Updates
   25 00:01A8 -  -  -  -  ;
   26 00:01A8 -  -  -  -  ; ***************************************************************************************
   27 00:01A8 -  -  -  -  ;
   28 00:01A8 -  -  -  -  ;		Date			Notes
   29 00:01A8 -  -  -  -  ;		==== 			=====
   30 00:01A8 -  -  -  -  ;
   31 00:01A8 -  -  -  -  ; ***************************************************************************************
   32 00:01A8 -  -  -  -  		
Listing for file "_build.asm"
   18 00:01A8 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:01A8 -  -  -  -  ; ***************************************************************************************
    2 00:01A8 -  -  -  -  ; ***************************************************************************************
    3 00:01A8 -  -  -  -  ;
    4 00:01A8 -  -  -  -  ;		Name : 		endofline.asm
    5 00:01A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A8 -  -  -  -  ;		Reviewed :	None
    8 00:01A8 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:01A8 -  -  -  -  ;
   10 00:01A8 -  -  -  -  ; ***************************************************************************************
   11 00:01A8 -  -  -  -  ; ***************************************************************************************
   12 00:01A8 -  -  -  -  
   13 00:01A8 -  -  -  -  ; ***************************************************************************************
   14 00:01A8 -  -  -  -  ;
   15 00:01A8 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:01A8 -  -  -  -  ;
   17 00:01A8 -  -  -  -  ; ***************************************************************************************
   18 00:01A8 -  -  -  -  
   19 00:01A8 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:01A8 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:01AD 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:01B1 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:01B4 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:01B6 -  -  -  -  		;
   25 00:01B6 ED 7B 5C 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:01BB C3 AE 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:01BF -  -  -  -  
   28 00:01BF -  -  -  -  ; ***************************************************************************************
   29 00:01BF -  -  -  -  ;
   30 00:01BF -  -  -  -  ;									Changes and Updates
   31 00:01BF -  -  -  -  ;
   32 00:01BF -  -  -  -  ; ***************************************************************************************
   33 00:01BF -  -  -  -  ;
   34 00:01BF -  -  -  -  ;		Date			Notes
   35 00:01BF -  -  -  -  ;		==== 			=====
   36 00:01BF -  -  -  -  ;
   37 00:01BF -  -  -  -  ; ***************************************************************************************
   38 00:01BF -  -  -  -  		
Listing for file "_build.asm"
   19 00:01BF -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:01BF -  -  -  -  ; ***************************************************************************************
    2 00:01BF -  -  -  -  ; ***************************************************************************************
    3 00:01BF -  -  -  -  ;
    4 00:01BF -  -  -  -  ;		Name : 		let.asm
    5 00:01BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01BF -  -  -  -  ;		Date : 		4th June 2022
    7 00:01BF -  -  -  -  ;		Reviewed :	No
    8 00:01BF -  -  -  -  ;		Purpose :	Assignment statement
    9 00:01BF -  -  -  -  ;
   10 00:01BF -  -  -  -  ; ***************************************************************************************
   11 00:01BF -  -  -  -  ; ***************************************************************************************
   12 00:01BF -  -  -  -  
   13 00:01BF -  -  -  -  ; ***************************************************************************************
   14 00:01BF -  -  -  -  ;
   15 00:01BF -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:01BF -  -  -  -  ;
   17 00:01BF -  -  -  -  ; ***************************************************************************************
   18 00:01BF -  -  -  -  
   19 00:01BF -  -  -  -  Command_LET: 	;; [let]
   20 00:01BF DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:01C2 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:01C4 28 2F -  -  		jr 		z,_CLString
   23 00:01C6 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:01C8 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:01CA 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:01CC 32 7C 00 00 		ld 		(AllowAutoCreate),a
   27 00:01D0 -  -  -  -  _CLNoAuto:
   28 00:01D0 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01D2 CD 0D 05 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01D6 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01D8 CA C2 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01DC E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01DD C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01DE AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01DF 32 7C 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01E3 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01E5 CD 4C 03 00 		call 	CheckNextA
   38 00:01E9 -  -  -  -  
   39 00:01E9 CD 83 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01ED -  -  -  -  
   41 00:01ED D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01EE 43 -  -  -  		ld 		b,e 						
   43 00:01EF D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01F0 -  -  -  -  		;
   45 00:01F0 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01F0 -  -  -  -  		;
   47 00:01F0 CD FD 01 00 		call 	WriteHLToDE
   48 00:01F4 C9 -  -  -  		ret
   49 00:01F5 -  -  -  -  		;
   50 00:01F5 -  -  -  -  		; 		String assignment code.
   51 00:01F5 -  -  -  -  		;
   52 00:01F5 -  -  -  -  _CLString:
   53 00:01F5 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:01FD -  -  -  -  
   55 00:01FD -  -  -  -  ; ***************************************************************************************
   56 00:01FD -  -  -  -  ;
   57 00:01FD -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:01FD -  -  -  -  ;
   59 00:01FD -  -  -  -  ; ***************************************************************************************
   60 00:01FD -  -  -  -  
   61 00:01FD -  -  -  -  WriteHLToDE:
   62 00:01FD CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:01FF C2 B6 03 00 		jp 		nz,TypeMismatch
   64 00:0203 -  -  -  -  		;
   65 00:0203 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:0203 -  -  -  -  		;		
   67 00:0203 -  -  -  -  _WHDWriteNumber:
   68 00:0203 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:0204 D9 -  -  -  		exx
   70 00:0205 EB -  -  -  		ex 		de,hl
   71 00:0206 D9 -  -  -  		exx
   72 00:0207 -  -  -  -  
   73 00:0207 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:0208 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:0209 72 -  -  -  		ld 		(hl),d
   76 00:020A 23 -  -  -  		inc 	hl
   77 00:020B E5 -  -  -  		push 	hl
   78 00:020C D9 -  -  -  		exx
   79 00:020D E1 -  -  -  		pop 	hl
   80 00:020E 73 -  -  -  		ld 		(hl),e
   81 00:020F 23 -  -  -  		inc 	hl
   82 00:0210 72 -  -  -  		ld 		(hl),d
   83 00:0211 D9 -  -  -  		exx
   84 00:0212 -  -  -  -  
   85 00:0212 C9 -  -  -  		ret
   86 00:0213 -  -  -  -  
   87 00:0213 -  -  -  -  ; ***************************************************************************************
   88 00:0213 -  -  -  -  ;
   89 00:0213 -  -  -  -  ;									Changes and Updates
   90 00:0213 -  -  -  -  ;
   91 00:0213 -  -  -  -  ; ***************************************************************************************
   92 00:0213 -  -  -  -  ;
   93 00:0213 -  -  -  -  ;		Date			Notes
   94 00:0213 -  -  -  -  ;		==== 			=====
   95 00:0213 -  -  -  -  ;
   96 00:0213 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:0213 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0213 -  -  -  -  ; ***************************************************************************************
    2 00:0213 -  -  -  -  ; ***************************************************************************************
    3 00:0213 -  -  -  -  ;
    4 00:0213 -  -  -  -  ;		Name : 		print.asm
    5 00:0213 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0213 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0213 -  -  -  -  ;		Reviewed :	No
    8 00:0213 -  -  -  -  ;		Purpose :	Print command
    9 00:0213 -  -  -  -  ;
   10 00:0213 -  -  -  -  ; ***************************************************************************************
   11 00:0213 -  -  -  -  ; ***************************************************************************************
   12 00:0213 -  -  -  -  
   13 00:0213 -  -  -  -  ; ***************************************************************************************
   14 00:0213 -  -  -  -  ;
   15 00:0213 -  -  -  -  ;										PRINT command
   16 00:0213 -  -  -  -  ;
   17 00:0213 -  -  -  -  ; ***************************************************************************************
   18 00:0213 -  -  -  -  
   19 00:0213 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0213 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:0215 32 7E 00 00 		ld 		(PrintBase),a
   22 00:0219 -  -  -  -  		;
   23 00:0219 -  -  -  -  		;		Main loop
   24 00:0219 -  -  -  -  		;
   25 00:0219 -  -  -  -  _CPRLoop:
   26 00:0219 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:021C FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:021E 28 59 -  -  		jr 		z,_CPRExitNL
   29 00:0220 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:0222 28 55 -  -  		jr 		z,_CPRExitNL
   31 00:0224 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:0226 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 00:0228 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:022A 28 34 -  -  		jr 		z,_CPRTab
   35 00:022C FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:022E 28 2A -  -  		jr 		z,_CPRNewLine
   37 00:0230 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:0232 28 1C -  -  		jr 		z,_CPRHexMode
   39 00:0234 -  -  -  -  		;
   40 00:0234 CD 83 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   41 00:0238 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:023A 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 00:023C -  -  -  -  		;
   44 00:023C 3A 7E 00 00 		ld 		a,(PrintBase)				; current print mode.
   45 00:0240 -  -  -  -  _CPRPrintNumber:
   46 00:0240 01 9C 00 00 		ld  	bc,ConvertBuffer
   47 00:0244 C5 -  -  -  		push 	bc
   48 00:0245 CD B7 0E 00 		call 	Int32ToString 				; convert to string
   49 00:0249 E1 -  -  -  		pop 	hl
   50 00:024A -  -  -  -  		;
   51 00:024A -  -  -  -  		; 		Print text at HL.
   52 00:024A -  -  -  -  		;
   53 00:024A -  -  -  -  _CPRPrintHL:
   54 00:024A CD 01 09 00 		call 	PrintStringAtHL 			; print string out
   55 00:024E 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:0250 -  -  -  -  		;
   57 00:0250 -  -  -  -  		;		Hex mode (~)
   58 00:0250 -  -  -  -  		;
   59 00:0250 -  -  -  -  _CPRHexMode:		
   60 00:0250 3E 10 -  -  		ld 		a,16
   61 00:0252 32 7E 00 00 		ld 		(PrintBase),a
   62 00:0256 DD 23 -  -  		inc 	ix
   63 00:0258 18 BF -  -  		jr 		_CPRLoop
   64 00:025A -  -  -  -  		;
   65 00:025A -  -  -  -  		; 		New line (')
   66 00:025A -  -  -  -  		;
   67 00:025A -  -  -  -  _CPRNewLine:
   68 00:025A CD 07 0F 00 		call 	SYSPrintCRLF
   69 00:025E 18 0C -  -  		jr 		_CPRCheckNext
   70 00:0260 -  -  -  -  		;
   71 00:0260 -  -  -  -  		; 		Tab command (,)
   72 00:0260 -  -  -  -  		;
   73 00:0260 -  -  -  -  _CPRTab:
   74 00:0260 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:0262 CD 06 0F 00 		call 	SYSPrintChar
   76 00:0266 -  -  -  -  		;
   77 00:0266 -  -  -  -  		;		Set to base 10 then check next character
   78 00:0266 -  -  -  -  		;
   79 00:0266 -  -  -  -  _CPRCheckNext10:		
   80 00:0266 3E F6 -  -  		ld 		a,-10
   81 00:0268 32 7E 00 00 		ld 		(PrintBase),a
   82 00:026C -  -  -  -  		;
   83 00:026C -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:026C -  -  -  -  		;		
   85 00:026C -  -  -  -  _CPRCheckNext:
   86 00:026C DD 23 -  -  		inc 	ix 							; consume current
   87 00:026E DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:0271 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:0273 C8 -  -  -  		ret 	z
   90 00:0274 FE A7 -  -  		cp 		KWD_COLON
   91 00:0276 C8 -  -  -  		ret 	z
   92 00:0277 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:0279 -  -  -  -  		;
   94 00:0279 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:0279 -  -  -  -  		;
   96 00:0279 -  -  -  -  _CPRExitNL:
   97 00:0279 CD 07 0F 00 		call 	SYSPrintCRLF 				; do CR/LF
   98 00:027D C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:027E -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:027E -  -  -  -  ; ***************************************************************************************
    2 00:027E -  -  -  -  ; ***************************************************************************************
    3 00:027E -  -  -  -  ;
    4 00:027E -  -  -  -  ;		Name : 		rem.asm
    5 00:027E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:027E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:027E -  -  -  -  ;		Reviewed :	No
    8 00:027E -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:027E -  -  -  -  ;
   10 00:027E -  -  -  -  ; ***************************************************************************************
   11 00:027E -  -  -  -  ; ***************************************************************************************
   12 00:027E -  -  -  -  
   13 00:027E -  -  -  -  ; ***************************************************************************************
   14 00:027E -  -  -  -  ;
   15 00:027E -  -  -  -  ;							Comment command, can be ' or REM
   16 00:027E -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:027E -  -  -  -  ;
   18 00:027E -  -  -  -  ; ***************************************************************************************
   19 00:027E -  -  -  -  
   20 00:027E -  -  -  -  Command_REM: 	;; [rem]
   21 00:027E -  -  -  -  Command_REM2: 	;; [']
   22 00:027E DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0281 DD 23 -  -  		inc 	ix
   24 00:0283 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:0285 C8 -  -  -  		ret 	z
   26 00:0286 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:0288 C8 -  -  -  		ret 	z
   28 00:0289 FE 3F -  -  		cp 		STRING_MARKER
   29 00:028B C2 C2 03 00 		jp 		nz,SyntaxError
   30 00:028F -  -  -  -  		;		
   31 00:028F 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:0293 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0296 13 -  -  -  		inc 	de 
   34 00:0297 13 -  -  -  		inc 	de
   35 00:0298 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:029A C9 -  -  -  		ret
   37 00:029B -  -  -  -  
   38 00:029B -  -  -  -  ; ***************************************************************************************
   39 00:029B -  -  -  -  ;
   40 00:029B -  -  -  -  ;									Changes and Updates
   41 00:029B -  -  -  -  ;
   42 00:029B -  -  -  -  ; ***************************************************************************************
   43 00:029B -  -  -  -  ;
   44 00:029B -  -  -  -  ;		Date			Notes
   45 00:029B -  -  -  -  ;		==== 			=====
   46 00:029B -  -  -  -  ;
   47 00:029B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:029B -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:029B -  -  -  -  ; ***************************************************************************************
    2 00:029B -  -  -  -  ; ***************************************************************************************
    3 00:029B -  -  -  -  ;
    4 00:029B -  -  -  -  ;		Name : 		run.asm
    5 00:029B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:029B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:029B -  -  -  -  ;		Reviewed :	No
    8 00:029B -  -  -  -  ;		Purpose :	Run command
    9 00:029B -  -  -  -  ;
   10 00:029B -  -  -  -  ; ***************************************************************************************
   11 00:029B -  -  -  -  ; ***************************************************************************************
   12 00:029B -  -  -  -  
   13 00:029B -  -  -  -  ; ***************************************************************************************
   14 00:029B -  -  -  -  ;
   15 00:029B -  -  -  -  ;										RUN command
   16 00:029B -  -  -  -  ;
   17 00:029B -  -  -  -  ; ***************************************************************************************
   18 00:029B -  -  -  -  
   19 00:029B -  -  -  -  Command_RUN: 	;; [run]
   20 00:029B CD 93 08 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:029F -  -  -  -  
   22 00:029F DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:02A4 ED 73 5C 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:02A9 AF -  -  -  		xor 	a
   25 00:02AA 32 7C 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:02AE -  -  -  -  		;
   27 00:02AE -  -  -  -  		; 		New line at IX.
   28 00:02AE -  -  -  -  		;
   29 00:02AE -  -  -  -  CRNewLine:
   30 00:02AE DD 22 58 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:02B3 -  -  -  -  		;
   32 00:02B3 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:02B6 B7 -  -  -  		or 		a
   34 00:02B7 CA A2 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:02BB -  -  -  -  		;
   36 00:02BB DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:02BD DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:02BF DD 23 -  -  		inc 	ix
   39 00:02C1 -  -  -  -  		;
   40 00:02C1 -  -  -  -  		; 		New command at IX
   41 00:02C1 -  -  -  -  		;
   42 00:02C1 -  -  -  -  _CRNewCommand:	
   43 00:02C1 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:02C4 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:02C5 F2 00 03 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:02C9 -  -  -  -  		;
   47 00:02C9 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:02CB 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:02CD FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:02CF D2 F0 02 00 		jp 		nc,_CRAlternateLets
   51 00:02D3 -  -  -  -  		;
   52 00:02D3 -  -  -  -  _CRDoCommand:		
   53 00:02D3 E6 7F 21 00 
              00 00 6F 29 
              29 11 C0 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:02E8 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:02EA CD 60 00 00 		call 	JumpCode 					; call the routine.
   56 00:02EE 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:02F0 -  -  -  -  		;
   58 00:02F0 -  -  -  -  		; 		Do CALL (HL)
   59 00:02F0 -  -  -  -  		;
   60 00:02F0 -  -  -  -  		;
   61 00:02F0 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:02F0 -  -  -  -  		;		
   63 00:02F0 -  -  -  -  _CRAlternateLets:		
   64 00:02F0 FE 83 -  -  		cp 		KWD_PLING
   65 00:02F2 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:02F4 FE 84 -  -  		cp 		KWD_QMARK
   67 00:02F6 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:02F8 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:02FA 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:02FC C3 C2 03 00 		jp 		SyntaxError
   71 00:0300 -  -  -  -  		;
   72 00:0300 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0300 -  -  -  -  		;
   74 00:0300 -  -  -  -  _CRAssignmentHandler:		
   75 00:0300 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:0302 D2 C2 03 00 		jp 		nc,SyntaxError
   77 00:0306 -  -  -  -  _CRAssignmentLet:		
   78 00:0306 CD BF 01 00 		call	Command_LET 				; do LET.
   79 00:030A C3 C1 02 00 		jp 		_CRNewCommand
   80 00:030E -  -  -  -  
   81 00:030E -  -  -  -  ; ***************************************************************************************
   82 00:030E -  -  -  -  ;
   83 00:030E -  -  -  -  ;									Changes and Updates
   84 00:030E -  -  -  -  ;
   85 00:030E -  -  -  -  ; ***************************************************************************************
   86 00:030E -  -  -  -  ;
   87 00:030E -  -  -  -  ;		Date			Notes
   88 00:030E -  -  -  -  ;		==== 			=====
   89 00:030E -  -  -  -  ;
   90 00:030E -  -  -  -  ; ***************************************************************************************
   91 00:030E -  -  -  -  		
Listing for file "_build.asm"
   23 00:030E -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:030E -  -  -  -  ; ***************************************************************************************
    2 00:030E -  -  -  -  ; ***************************************************************************************
    3 00:030E -  -  -  -  ;
    4 00:030E -  -  -  -  ;		Name : 		stop.asm
    5 00:030E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:030E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:030E -  -  -  -  ;		Reviewed :	No
    8 00:030E -  -  -  -  ;		Purpose :	Stop command
    9 00:030E -  -  -  -  ;
   10 00:030E -  -  -  -  ; ***************************************************************************************
   11 00:030E -  -  -  -  ; ***************************************************************************************
   12 00:030E -  -  -  -  
   13 00:030E -  -  -  -  ; ***************************************************************************************
   14 00:030E -  -  -  -  ;
   15 00:030E -  -  -  -  ;										STOP command
   16 00:030E -  -  -  -  ;
   17 00:030E -  -  -  -  ; ***************************************************************************************
   18 00:030E -  -  -  -  
   19 00:030E -  -  -  -  Command_STOP: 	;; [stop]
   20 00:030E 3E 0E C3 58 
              03 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0314 -  -  -  -  
   22 00:0314 -  -  -  -  ; ***************************************************************************************
   23 00:0314 -  -  -  -  ;
   24 00:0314 -  -  -  -  ;									Changes and Updates
   25 00:0314 -  -  -  -  ;
   26 00:0314 -  -  -  -  ; ***************************************************************************************
   27 00:0314 -  -  -  -  ;
   28 00:0314 -  -  -  -  ;		Date			Notes
   29 00:0314 -  -  -  -  ;		==== 			=====
   30 00:0314 -  -  -  -  ;
   31 00:0314 -  -  -  -  ; ***************************************************************************************
   32 00:0314 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0314 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0314 -  -  -  -  ; ***************************************************************************************
    2 00:0314 -  -  -  -  ; ***************************************************************************************
    3 00:0314 -  -  -  -  ;
    4 00:0314 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0314 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0314 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0314 -  -  -  -  ;		Reviewed :	No
    8 00:0314 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0314 -  -  -  -  ;
   10 00:0314 -  -  -  -  ; ***************************************************************************************
   11 00:0314 -  -  -  -  ; ***************************************************************************************
   12 00:0314 -  -  -  -  
   13 00:0314 -  -  -  -  ; ***************************************************************************************
   14 00:0314 -  -  -  -  ;
   15 00:0314 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0314 -  -  -  -  ;
   17 00:0314 -  -  -  -  ; ***************************************************************************************
   18 00:0314 -  -  -  -  
   19 00:0314 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0314             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0314             		inc 	ix
   22 00:0314             		cp 		ch 							; exit if matches
   23 00:0314             		ret 	z
   24 00:0314             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0314             		jp 		ErrorHandler
   26 00:0314             #endmacro
   27 00:0314 -  -  -  -  
   28 00:0314 -  -  -  -  CheckLeftBracket:
   29 00:0314 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0B C3 58 
              03 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0322 -  -  -  -  
   31 00:0322 -  -  -  -  CheckRightBracket:
   32 00:0322 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0C C3 58 
              03 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0330 -  -  -  -  
   34 00:0330 -  -  -  -  CheckDollar:
   35 00:0330 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0A C3 58 
              03 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:033E -  -  -  -  		
   37 00:033E -  -  -  -  CheckComma:
   38 00:033E DD 7E 00 DD 
              23 FE A6 C8 
              3E 09 C3 58 
              03 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:034C -  -  -  -  
   40 00:034C -  -  -  -  ; ***************************************************************************************
   41 00:034C -  -  -  -  ;
   42 00:034C -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:034C -  -  -  -  ;
   44 00:034C -  -  -  -  ; ***************************************************************************************
   45 00:034C -  -  -  -  
   46 00:034C -  -  -  -  CheckNextA:
   47 00:034C DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:034F DD 23 -  -  		inc 	ix 							; skip character
   49 00:0351 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:0352 3E 0F C3 58 
              03 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0358 -  -  -  -  		
   52 00:0358 -  -  -  -  ; ***************************************************************************************
   53 00:0358 -  -  -  -  ;
   54 00:0358 -  -  -  -  ;									Changes and Updates
   55 00:0358 -  -  -  -  ;
   56 00:0358 -  -  -  -  ; ***************************************************************************************
   57 00:0358 -  -  -  -  ;
   58 00:0358 -  -  -  -  ;		Date			Notes
   59 00:0358 -  -  -  -  ;		==== 			=====
   60 00:0358 -  -  -  -  ;
   61 00:0358 -  -  -  -  ; ***************************************************************************************
   62 00:0358 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0358 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0358 -  -  -  -  ; ***************************************************************************************
    2 00:0358 -  -  -  -  ; ***************************************************************************************
    3 00:0358 -  -  -  -  ;
    4 00:0358 -  -  -  -  ;		Name : 		errors.asm
    5 00:0358 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0358 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0358 -  -  -  -  ;		Reviewed :	No
    8 00:0358 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0358 -  -  -  -  ;
   10 00:0358 -  -  -  -  ; ***************************************************************************************
   11 00:0358 -  -  -  -  ; ***************************************************************************************
   12 00:0358 -  -  -  -  
   13 00:0358 -  -  -  -  ; ***************************************************************************************
   14 00:0358 -  -  -  -  ;
   15 00:0358 -  -  -  -  ;								Error handler, message A 
   16 00:0358 -  -  -  -  ;
   17 00:0358 -  -  -  -  ; ***************************************************************************************
   18 00:0358 -  -  -  -  
   19 00:0358 -  -  -  -  ErrorHandler:
   20 00:0358 F5 -  -  -  		push 	af 						; save error ID
   21 00:0359 -  -  -  -  
   22 00:0359 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:035D 6F -  -  -  		ld 		l,a
   24 00:035E 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:035F 29 -  -  -  		add 	hl,hl 		
   26 00:0360 11 71 0A 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:0364 19 -  -  -  		add 	hl,de
   28 00:0365 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:0367 CD 01 09 00 		call 	PrintStringAtHL
   30 00:036B -  -  -  -  		;
   31 00:036B F1 -  -  -  		pop 	af 						; restore error ID
   32 00:036C B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:036D 28 2F -  -  		jr 		z,_EHExit
   34 00:036F -  -  -  -  		;
   35 00:036F DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:0374 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:0377 B7 -  -  -  		or 		a
   38 00:0378 28 24 -  -  		jr 		z,_EHExit
   39 00:037A -  -  -  -  
   40 00:037A 21 A6 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:037E CD 01 09 00 		call 	PrintStringAtHL 
   42 00:0382 -  -  -  -  		
   43 00:0382 D9 -  -  -  		exx								; HL'HL = line number
   44 00:0383 21 00 00 00 		ld 		hl,$0000 		
   45 00:0387 D9 -  -  -  		exx 
   46 00:0388 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:038B DD 66 02 -  		ld 		h,(ix+2)
   48 00:038E 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:0390 01 9C 00 00 		ld 		bc,ConvertBuffer
   50 00:0394 CD B7 0E 00 		call 	Int32ToString
   51 00:0398 C5 -  -  -  		push 	bc
   52 00:0399 E1 -  -  -  		pop 	hl
   53 00:039A CD 01 09 00 		call 	PrintStringAtHL			; print error line number.
   54 00:039E -  -  -  -  _EHExit:		
   55 00:039E CD 07 0F 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:03A2 C3 1A 00 00 		jp 		WarmStart
   57 00:03A6 -  -  -  -  
   58 00:03A6 -  -  -  -  _EHAtText:
   59 00:03A6 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:03B0 -  -  -  -  
   61 00:03B0 -  -  -  -  NotImplemented:
   62 00:03B0 3E 05 C3 58 
              03 00 -  -  		ERR_DISABLED
   63 00:03B6 -  -  -  -  TypeMismatch:
   64 00:03B6 3E 02 C3 58 
              03 00 -  -  		ERR_BADTYPE
   65 00:03BC -  -  -  -  BadValue:
   66 00:03BC 3E 03 C3 58 
              03 00 -  -  		ERR_BADVALUE
   67 00:03C2 -  -  -  -  SyntaxError:
   68 00:03C2 3E 0F C3 58 
              03 00 -  -  		ERR_SYNTAX
   69 00:03C8 -  -  -  -  						
   70 00:03C8 -  -  -  -  ; ***************************************************************************************
   71 00:03C8 -  -  -  -  ;
   72 00:03C8 -  -  -  -  ;									Changes and Updates
   73 00:03C8 -  -  -  -  ;
   74 00:03C8 -  -  -  -  ; ***************************************************************************************
   75 00:03C8 -  -  -  -  ;
   76 00:03C8 -  -  -  -  ;		Date			Notes
   77 00:03C8 -  -  -  -  ;		==== 			=====
   78 00:03C8 -  -  -  -  ;
   79 00:03C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:03C8 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:03C8 -  -  -  -  ; ***************************************************************************************
    2 00:03C8 -  -  -  -  ; ***************************************************************************************
    3 00:03C8 -  -  -  -  ;
    4 00:03C8 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:03C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03C8 -  -  -  -  ;		Reviewed :	No
    8 00:03C8 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:03C8 -  -  -  -  ;
   10 00:03C8 -  -  -  -  ; ***************************************************************************************
   11 00:03C8 -  -  -  -  ; ***************************************************************************************
   12 00:03C8 -  -  -  -  
   13 00:03C8 -  -  -  -  ; ***************************************************************************************
   14 00:03C8 -  -  -  -  ;
   15 00:03C8 -  -  -  -  ; 									Addition
   16 00:03C8 -  -  -  -  ;
   17 00:03C8 -  -  -  -  ; ***************************************************************************************
   18 00:03C8 -  -  -  -  
   19 00:03C8 -  -  -  -  ALUAdd: 		;; [+]
   20 00:03C8 CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 36 
              0E 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:03D6 -  -  -  -  
   22 00:03D6 -  -  -  -  ; ***************************************************************************************
   23 00:03D6 -  -  -  -  ;
   24 00:03D6 -  -  -  -  ; 									Subtraction
   25 00:03D6 -  -  -  -  ;
   26 00:03D6 -  -  -  -  ; ***************************************************************************************
   27 00:03D6 -  -  -  -  
   28 00:03D6 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:03D6 CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 3E 
              0E 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:03E4 -  -  -  -  
   31 00:03E4 -  -  -  -  ; ***************************************************************************************
   32 00:03E4 -  -  -  -  ;
   33 00:03E4 -  -  -  -  ; 									  Multiply
   34 00:03E4 -  -  -  -  ;
   35 00:03E4 -  -  -  -  ; ***************************************************************************************
   36 00:03E4 -  -  -  -  
   37 00:03E4 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:03E4 CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 FD 
              0D 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:03F2 -  -  -  -  
   40 00:03F2 -  -  -  -  ; ***************************************************************************************
   41 00:03F2 -  -  -  -  ;
   42 00:03F2 -  -  -  -  ; 									  Divide
   43 00:03F2 -  -  -  -  ;
   44 00:03F2 -  -  -  -  ; ***************************************************************************************
   45 00:03F2 -  -  -  -  
   46 00:03F2 -  -  -  -  ALUDivide: 	;; [/]
   47 00:03F2 -  -  -  -  ALUDivide2:	;; [div]
   48 00:03F2 CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 FD 
              0C 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0400 -  -  -  -  
   50 00:0400 -  -  -  -  ; ***************************************************************************************
   51 00:0400 -  -  -  -  ;
   52 00:0400 -  -  -  -  ; 									  Modulus
   53 00:0400 -  -  -  -  ;
   54 00:0400 -  -  -  -  ; ***************************************************************************************
   55 00:0400 -  -  -  -  
   56 00:0400 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0400 CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 00 
              0D 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:040E -  -  -  -  
   59 00:040E -  -  -  -  ; ***************************************************************************************
   60 00:040E -  -  -  -  ;
   61 00:040E -  -  -  -  ; 									  Logical
   62 00:040E -  -  -  -  ;
   63 00:040E -  -  -  -  ; ***************************************************************************************
   64 00:040E -  -  -  -  
   65 00:040E -  -  -  -  ALUAnd: 		;; [and]
   66 00:040E CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 48 
              0E 00 -  -  		IntegerDispatch(Int32And)
   67 00:041C -  -  -  -  
   68 00:041C -  -  -  -  ALUOr: 			;; [or]
   69 00:041C CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 55 
              0E 00 -  -  		IntegerDispatch(Int32Or)
   70 00:042A -  -  -  -  
   71 00:042A -  -  -  -  ALUXor: 		;; [eor]
   72 00:042A CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 62 
              0E 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:0438 -  -  -  -  
   74 00:0438 -  -  -  -  ; ***************************************************************************************
   75 00:0438 -  -  -  -  ;
   76 00:0438 -  -  -  -  ;									Changes and Updates
   77 00:0438 -  -  -  -  ;
   78 00:0438 -  -  -  -  ; ***************************************************************************************
   79 00:0438 -  -  -  -  ;
   80 00:0438 -  -  -  -  ;		Date			Notes
   81 00:0438 -  -  -  -  ;		==== 			=====
   82 00:0438 -  -  -  -  ;
   83 00:0438 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:0438 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:0438 -  -  -  -  ; ***************************************************************************************
    2 00:0438 -  -  -  -  ; ***************************************************************************************
    3 00:0438 -  -  -  -  ;
    4 00:0438 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:0438 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0438 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0438 -  -  -  -  ;		Reviewed :	No
    8 00:0438 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:0438 -  -  -  -  ;
   10 00:0438 -  -  -  -  ; ***************************************************************************************
   11 00:0438 -  -  -  -  ; ***************************************************************************************
   12 00:0438 -  -  -  -  
   13 00:0438 -  -  -  -  ; ***************************************************************************************
   14 00:0438 -  -  -  -  ;
   15 00:0438 -  -  -  -  ; 									<l> <op> <r>
   16 00:0438 -  -  -  -  ;
   17 00:0438 -  -  -  -  ; ***************************************************************************************
   18 00:0438 -  -  -  -  
   19 00:0438 -  -  -  -  ALULongReference:			;; [!]
   20 00:0438 CD 48 04 00 		call 	BRGetAddress 				; calculate address
   21 00:043C 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:043E CB F9 -  -  		set 	CIsReference,c
   23 00:0440 C9 -  -  -  		ret
   24 00:0441 -  -  -  -  
   25 00:0441 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0441 CD 38 04 00 		call 	ALULongReference
   27 00:0445 CB F1 -  -  		set 	CIsByteReference,c
   28 00:0447 C9 -  -  -  		ret
   29 00:0448 -  -  -  -  
   30 00:0448 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0448 CD E5 04 00 
              78 B1 C2 B6 
              03 00 C3 56 
              04 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0456 -  -  -  -  _BRGAMain:		
   33 00:0456 CD 36 0E 00 		call 	Int32Add 					; address in HL'HL
   34 00:045A CD EB 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:045E C9 -  -  -  		ret
   36 00:045F -  -  -  -  
   37 00:045F -  -  -  -  ; ***************************************************************************************
   38 00:045F -  -  -  -  ;
   39 00:045F -  -  -  -  ;									Changes and Updates
   40 00:045F -  -  -  -  ;
   41 00:045F -  -  -  -  ; ***************************************************************************************
   42 00:045F -  -  -  -  ;
   43 00:045F -  -  -  -  ;		Date			Notes
   44 00:045F -  -  -  -  ;		==== 			=====
   45 00:045F -  -  -  -  ;
   46 00:045F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:045F -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:045F -  -  -  -  ; ***************************************************************************************
    2 00:045F -  -  -  -  ; ***************************************************************************************
    3 00:045F -  -  -  -  ;
    4 00:045F -  -  -  -  ;		Name : 		compare.asm
    5 00:045F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:045F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:045F -  -  -  -  ;		Reviewed :	No
    8 00:045F -  -  -  -  ;		Purpose :	Comparison code
    9 00:045F -  -  -  -  ;
   10 00:045F -  -  -  -  ; ***************************************************************************************
   11 00:045F -  -  -  -  ; ***************************************************************************************
   12 00:045F -  -  -  -  
   13 00:045F -  -  -  -  #macro compare_equals(n)
   14 00:045F             		call 	CompareBaseCode
   15 00:045F             		cp 		n
   16 00:045F             		jr 		z,UnaryInt32True
   17 00:045F             		jr 		UnaryInt32False
   18 00:045F             #endmacro
   19 00:045F -  -  -  -  
   20 00:045F -  -  -  -  #macro compare_not_equals(n)
   21 00:045F             		call 	CompareBaseCode
   22 00:045F             		cp 		n
   23 00:045F             		jr 		nz,UnaryInt32True
   24 00:045F             		jr 		UnaryInt32False
   25 00:045F             #endmacro
   26 00:045F -  -  -  -  
   27 00:045F -  -  -  -  ; ***************************************************************************************
   28 00:045F -  -  -  -  ;
   29 00:045F -  -  -  -  ; 								Return True/False
   30 00:045F -  -  -  -  ;
   31 00:045F -  -  -  -  ; ***************************************************************************************
   32 00:045F -  -  -  -  
   33 00:045F -  -  -  -  UnaryInt32True:	;; [true]
   34 00:045F 3E FF -  -  		ld 		a,255
   35 00:0461 18 01 -  -  		jr 		_Int32Logical
   36 00:0463 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:0463 AF -  -  -  		xor 	a
   38 00:0464 -  -  -  -  _Int32Logical:
   39 00:0464 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:0465 67 -  -  -  		ld 		h,a
   41 00:0466 D9 -  -  -  		exx
   42 00:0467 6F -  -  -  		ld 		l,a
   43 00:0468 67 -  -  -  		ld 		h,a
   44 00:0469 D9 -  -  -  		exx
   45 00:046A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:046C C9 -  -  -  		ret
   47 00:046D -  -  -  -  
   48 00:046D -  -  -  -  ; ***************************************************************************************
   49 00:046D -  -  -  -  ;
   50 00:046D -  -  -  -  ; 										> = < (compare == value)
   51 00:046D -  -  -  -  ;
   52 00:046D -  -  -  -  ; ***************************************************************************************
   53 00:046D -  -  -  -  
   54 00:046D -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:046D CD A9 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:0477 -  -  -  -  
   57 00:0477 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:0477 CD A9 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:0481 -  -  -  -  
   60 00:0481 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:0481 CD A9 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:048B -  -  -  -  
   63 00:048B -  -  -  -  ; ***************************************************************************************
   64 00:048B -  -  -  -  ;
   65 00:048B -  -  -  -  ; 										> = < (compare <> value)
   66 00:048B -  -  -  -  ;
   67 00:048B -  -  -  -  ; ***************************************************************************************
   68 00:048B -  -  -  -  
   69 00:048B -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:048B CD A9 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0495 -  -  -  -  
   72 00:0495 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0495 CD A9 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:049F -  -  -  -  
   75 00:049F -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:049F CD A9 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:04A9 -  -  -  -  
   78 00:04A9 -  -  -  -  ; ***************************************************************************************
   79 00:04A9 -  -  -  -  ;
   80 00:04A9 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:04A9 -  -  -  -  ;
   82 00:04A9 -  -  -  -  ; ***************************************************************************************
   83 00:04A9 -  -  -  -  
   84 00:04A9 -  -  -  -  CompareBaseCode:
   85 00:04A9 CD E5 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:04AD -  -  -  -  
   87 00:04AD 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:04AE A1 -  -  -  		and 	c
   89 00:04AF CB 47 -  -  		bit 	CIsString,a 
   90 00:04B1 C2 C3 04 00 		jp 		nz,StringCompare
   91 00:04B5 -  -  -  -  
   92 00:04B5 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:04B6 B1 -  -  -  		or 		c
   94 00:04B7 CB 47 -  -  		bit 	CIsString,a 
   95 00:04B9 CA 76 0E 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:04BD -  -  -  -  
   97 00:04BD 3E 02 C3 58 
              03 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:04C3 -  -  -  -  ;
   99 00:04C3 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:04C3 -  -  -  -  ;
  101 00:04C3 -  -  -  -  StringCompare:
  102 00:04C3 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:04C4 BE -  -  -  		cp 		(hl)
  104 00:04C5 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:04C7 20 08 -  -  		jr 		nz,_SCLess
  106 00:04C9 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:04CA 23 -  -  -  		inc 	hl
  108 00:04CB FE 20 -  -  		cp 		' '
  109 00:04CD 30 F4 -  -  		jr 		nc,StringCompare
  110 00:04CF AF -  -  -  		xor 	a 							; return 0.
  111 00:04D0 C9 -  -  -  		ret
  112 00:04D1 -  -  -  -  
  113 00:04D1 -  -  -  -  _SCLess:
  114 00:04D1 3E FF -  -  		ld 		a,$FF
  115 00:04D3 C9 -  -  -  		ret
  116 00:04D4 -  -  -  -  _SCGreater:
  117 00:04D4 3E 01 -  -  		ld 		a,1
  118 00:04D6 C9 -  -  -  		ret
  119 00:04D7 -  -  -  -  
  120 00:04D7 3E 10 C3 58 
              03 00 -  -  		ERR_TODO()
  121 00:04DD -  -  -  -  
  122 00:04DD -  -  -  -  ; ***************************************************************************************
  123 00:04DD -  -  -  -  ;
  124 00:04DD -  -  -  -  ;									Changes and Updates
  125 00:04DD -  -  -  -  ;
  126 00:04DD -  -  -  -  ; ***************************************************************************************
  127 00:04DD -  -  -  -  ;
  128 00:04DD -  -  -  -  ;		Date			Notes
  129 00:04DD -  -  -  -  ;		==== 			=====
  130 00:04DD -  -  -  -  ;
  131 00:04DD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:04DD -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:04DD -  -  -  -  ; ***************************************************************************************
    2 00:04DD -  -  -  -  ; ***************************************************************************************
    3 00:04DD -  -  -  -  ;
    4 00:04DD -  -  -  -  ;		Name : 		utility.asm
    5 00:04DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04DD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04DD -  -  -  -  ;		Reviewed :	No
    8 00:04DD -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:04DD -  -  -  -  ;
   10 00:04DD -  -  -  -  ; ***************************************************************************************
   11 00:04DD -  -  -  -  ; ***************************************************************************************
   12 00:04DD -  -  -  -  
   13 00:04DD -  -  -  -  ; ***************************************************************************************
   14 00:04DD -  -  -  -  ;
   15 00:04DD -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:04DD -  -  -  -  ;
   17 00:04DD -  -  -  -  ; ***************************************************************************************
   18 00:04DD -  -  -  -  
   19 00:04DD -  -  -  -  SwapHLDE:
   20 00:04DD EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:04DE D9 -  -  -  			exx
   22 00:04DF EB -  -  -  			ex 		de,hl
   23 00:04E0 D9 -  -  -  			exx
   24 00:04E1 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:04E2 41 -  -  -  			ld 		b,c
   26 00:04E3 4F -  -  -  			ld 		c,a
   27 00:04E4 C9 -  -  -  			ret
   28 00:04E5 -  -  -  -  
   29 00:04E5 -  -  -  -  ; ***************************************************************************************
   30 00:04E5 -  -  -  -  ;
   31 00:04E5 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:04E5 -  -  -  -  ;
   33 00:04E5 -  -  -  -  ; ***************************************************************************************
   34 00:04E5 -  -  -  -  
   35 00:04E5 -  -  -  -  DereferenceBoth:
   36 00:04E5 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:04E7 C4 BE 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:04EB CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:04ED C8 -  -  -  			ret 	z
   40 00:04EE CD DD 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:04F2 CD BE 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:04F6 CD DD 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:04FA C9 -  -  -  			ret
   44 00:04FB -  -  -  -  
   45 00:04FB -  -  -  -  ; ***************************************************************************************
   46 00:04FB -  -  -  -  ;
   47 00:04FB -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:04FB -  -  -  -  ;
   49 00:04FB -  -  -  -  ; ***************************************************************************************
   50 00:04FB -  -  -  -  
   51 00:04FB -  -  -  -  NegateHLHL:	
   52 00:04FB CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:04FD C2 B6 03 00 			jp 		nz,TypeMismatch
   54 00:0501 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0503 C4 BE 05 00 			call 	nz,Dereference 			; if required.
   56 00:0507 CD A0 0E 00 			call 	Int32Negate
   57 00:050B C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:050C -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:050C -  -  -  -  ; ***************************************************************************************
    2 00:050C -  -  -  -  ; ***************************************************************************************
    3 00:050C -  -  -  -  ;
    4 00:050C -  -  -  -  ;		Name : 		expression.asm
    5 00:050C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:050C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:050C -  -  -  -  ;		Reviewed :	None
    8 00:050C -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:050C -  -  -  -  ;
   10 00:050C -  -  -  -  ; ***************************************************************************************
   11 00:050C -  -  -  -  ; ***************************************************************************************
   12 00:050C -  -  -  -  
   13 00:050C -  -  -  -  ; ***************************************************************************************
   14 00:050C -  -  -  -  ;
   15 00:050C -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:050C -  -  -  -  ;
   17 00:050C -  -  -  -  ; ***************************************************************************************
   18 00:050C -  -  -  -  
   19 00:050C -  -  -  -  EvaluateAtPrecedence0:
   20 00:050C AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:050D -  -  -  -  EvaluateAtPrecedence:
   22 00:050D F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:050E -  -  -  -  		;
   24 00:050E -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:050E -  -  -  -  		;
   26 00:050E CD 1A 06 00 		call 	EvaluateTerm 				; get term
   27 00:0512 -  -  -  -  		;
   28 00:0512 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0512 -  -  -  -  		;
   30 00:0512 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0513 -  -  -  -  _EAPLoop:
   32 00:0513 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:0516 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:0518 D8 -  -  -  		ret 	c
   35 00:0519 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:051B D0 -  -  -  		ret 	nc
   37 00:051C -  -  -  -  		;
   38 00:051C -  -  -  -  		; 		Get the precedence.
   39 00:051C -  -  -  -  		;
   40 00:051C E5 -  -  -  		push 	hl 							; want to use HL
   41 00:051D D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:051F 21 60 0A 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0523 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:0524 6F -  -  -  		ld 		l,a
   45 00:0525 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:0526 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:0527 -  -  -  -  		;
   48 00:0527 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:0527 -  -  -  -  		;
   50 00:0527 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:0528 BB -  -  -  		cp 		e
   52 00:0529 D0 -  -  -  		ret 	nc
   53 00:052A -  -  -  -  
   54 00:052A -  -  -  -  		;
   55 00:052A -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:052A -  -  -  -  		;
   57 00:052A D5 -  -  -  		push 	de 							; save precedence information.
   58 00:052B -  -  -  -  		;
   59 00:052B DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:052E F5 -  -  -  		push 	af
   61 00:052F -  -  -  -  		;
   62 00:052F C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0530 D9 -  -  -  		exx 								; save HL'
   64 00:0531 E5 -  -  -  		push 	hl
   65 00:0532 D9 -  -  -  		exx 								
   66 00:0533 E5 -  -  -  		push 	hl 							; save HL
   67 00:0534 -  -  -  -  		;
   68 00:0534 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:0536 -  -  -  -  		;
   70 00:0536 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:0536 -  -  -  -  		;
   72 00:0536 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:0537 CD 0D 05 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:053B -  -  -  -  		;
   75 00:053B -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:053B -  -  -  -  		;
   77 00:053B 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:053C -  -  -  -  
   79 00:053C EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:053D E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:053E D9 -  -  -  		exx
   82 00:053F EB -  -  -  		ex 		de,hl
   83 00:0540 E1 -  -  -  		pop 	hl
   84 00:0541 D9 -  -  -  		exx
   85 00:0542 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:0543 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:0544 -  -  -  -  		;
   88 00:0544 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:0544 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:0544 -  -  -  -  		;
   91 00:0544 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:0545 -  -  -  -  		;
   93 00:0545 -  -  -  -  		; 		Call the binary operator in A.
   94 00:0545 -  -  -  -  		;
   95 00:0545 D5 -  -  -  		push 	de
   96 00:0546 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0547 E6 7F 21 00 
              00 00 6F 29 
              29 11 C0 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:055C E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:055D D1 -  -  -  		pop 	de 							; restore DE
  100 00:055E CD 60 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:0562 -  -  -  -  		;
  102 00:0562 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:0563 -  -  -  -  		;
  104 00:0563 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:0565 -  -  -  -  
  106 00:0565 -  -  -  -  ; ***************************************************************************************
  107 00:0565 -  -  -  -  ;
  108 00:0565 -  -  -  -  ;									Changes and Updates
  109 00:0565 -  -  -  -  ;
  110 00:0565 -  -  -  -  ; ***************************************************************************************
  111 00:0565 -  -  -  -  ;
  112 00:0565 -  -  -  -  ;		Date			Notes
  113 00:0565 -  -  -  -  ;		==== 			=====
  114 00:0565 -  -  -  -  ;
  115 00:0565 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0565 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:0565 -  -  -  -  ; ***************************************************************************************
    2 00:0565 -  -  -  -  ; ***************************************************************************************
    3 00:0565 -  -  -  -  ;
    4 00:0565 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:0565 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0565 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0565 -  -  -  -  ;		Reviewed :	No
    8 00:0565 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:0565 -  -  -  -  ;
   10 00:0565 -  -  -  -  ; ***************************************************************************************
   11 00:0565 -  -  -  -  ; ***************************************************************************************
   12 00:0565 -  -  -  -  
   13 00:0565 -  -  -  -  ; ***************************************************************************************
   14 00:0565 -  -  -  -  ;
   15 00:0565 -  -  -  -  ; 								Evaluate an integer term
   16 00:0565 -  -  -  -  ;
   17 00:0565 -  -  -  -  ; ***************************************************************************************
   18 00:0565 -  -  -  -  
   19 00:0565 -  -  -  -  EvaluateIntegerTerm:
   20 00:0565 CD 1A 06 00 		call 	EvaluateTerm
   21 00:0569 CD BE 05 00 		call 	DeReference
   22 00:056D CB 41 -  -  		bit 	CIsString,c
   23 00:056F C8 -  -  -  		ret 	z
   24 00:0570 C3 B6 03 00 		jp 		TypeMismatch
   25 00:0574 -  -  -  -  
   26 00:0574 -  -  -  -  ; ***************************************************************************************
   27 00:0574 -  -  -  -  ;
   28 00:0574 -  -  -  -  ; 								Evaluate a string term
   29 00:0574 -  -  -  -  ;
   30 00:0574 -  -  -  -  ; ***************************************************************************************
   31 00:0574 -  -  -  -  
   32 00:0574 -  -  -  -  EvaluateStringTerm:
   33 00:0574 CD 1A 06 00 		call 	EvaluateTerm
   34 00:0578 CD BE 05 00 		call 	DeReference
   35 00:057C CB 41 -  -  		bit 	CIsString,c
   36 00:057E C0 -  -  -  		ret 	nz
   37 00:057F C3 B6 03 00 		jp 		TypeMismatch
   38 00:0583 -  -  -  -  
   39 00:0583 -  -  -  -  ; ***************************************************************************************
   40 00:0583 -  -  -  -  ;
   41 00:0583 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:0583 -  -  -  -  ;
   43 00:0583 -  -  -  -  ; ***************************************************************************************
   44 00:0583 -  -  -  -  
   45 00:0583 -  -  -  -  EvaluateValue:
   46 00:0583 CD 0C 05 00 		call 	EvaluateAtPrecedence0
   47 00:0587 C3 BE 05 00 		jp 		Dereference
   48 00:058B -  -  -  -  
   49 00:058B -  -  -  -  ; ***************************************************************************************
   50 00:058B -  -  -  -  ;
   51 00:058B -  -  -  -  ; 									Evaluate a number
   52 00:058B -  -  -  -  ;
   53 00:058B -  -  -  -  ; ***************************************************************************************
   54 00:058B -  -  -  -  
   55 00:058B -  -  -  -  EvaluateInteger:
   56 00:058B CD 83 05 00 		call 	EvaluateValue
   57 00:058F CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:0591 C8 -  -  -  		ret 	z
   59 00:0592 C3 B6 03 00 		jp 		TypeMismatch
   60 00:0596 -  -  -  -  
   61 00:0596 -  -  -  -  ; ***************************************************************************************
   62 00:0596 -  -  -  -  ;
   63 00:0596 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:0596 -  -  -  -  ;
   65 00:0596 -  -  -  -  ; ***************************************************************************************
   66 00:0596 -  -  -  -  
   67 00:0596 -  -  -  -  Evaluate8BitInteger:
   68 00:0596 CD 8B 05 00 		call 	EvaluateInteger
   69 00:059A D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:059B 7C -  -  -  		ld 		a,h
   71 00:059C B5 -  -  -  		or 		l
   72 00:059D D9 -  -  -  		exx 	
   73 00:059E B4 -  -  -  		or 		h
   74 00:059F C2 BC 03 00 		jp 		nz,BadValue
   75 00:05A3 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:05A4 C9 -  -  -  		ret
   77 00:05A5 -  -  -  -  		
   78 00:05A5 -  -  -  -  ; ***************************************************************************************
   79 00:05A5 -  -  -  -  ;
   80 00:05A5 -  -  -  -  ; 									Evaluate a string
   81 00:05A5 -  -  -  -  ;
   82 00:05A5 -  -  -  -  ; ***************************************************************************************
   83 00:05A5 -  -  -  -  
   84 00:05A5 -  -  -  -  EvaluateStringOnly:
   85 00:05A5 CD 83 05 00 		call 	EvaluateValue
   86 00:05A9 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:05AB CA B6 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:05AF C9 -  -  -  		ret
   89 00:05B0 -  -  -  -  
   90 00:05B0 -  -  -  -  ; ***************************************************************************************
   91 00:05B0 -  -  -  -  ;
   92 00:05B0 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:05B0 -  -  -  -  ;
   94 00:05B0 -  -  -  -  ; ***************************************************************************************
   95 00:05B0 -  -  -  -  
   96 00:05B0 -  -  -  -  Return8BitConstant:
   97 00:05B0 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:05B4 6F -  -  -  		ld 		l,a
   99 00:05B5 -  -  -  -  Return16BitConstant:
  100 00:05B5 D9 -  -  -  		exx 								; clear HL'
  101 00:05B6 21 00 00 00 		ld 		hl,0
  102 00:05BA D9 -  -  -  		exx
  103 00:05BB 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:05BD C9 -  -  -  		ret
  105 00:05BE -  -  -  -  
  106 00:05BE -  -  -  -  ; ***************************************************************************************
  107 00:05BE -  -  -  -  ;
  108 00:05BE -  -  -  -  ;									Changes and Updates
  109 00:05BE -  -  -  -  ;
  110 00:05BE -  -  -  -  ; ***************************************************************************************
  111 00:05BE -  -  -  -  ;
  112 00:05BE -  -  -  -  ;		Date			Notes
  113 00:05BE -  -  -  -  ;		==== 			=====
  114 00:05BE -  -  -  -  ;
  115 00:05BE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:05BE -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:05BE -  -  -  -  ; ***************************************************************************************
    2 00:05BE -  -  -  -  ; ***************************************************************************************
    3 00:05BE -  -  -  -  ;
    4 00:05BE -  -  -  -  ;		Name : 		reference.asm
    5 00:05BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05BE -  -  -  -  ;		Date : 		1st May 2022
    7 00:05BE -  -  -  -  ;		Reviewed :	No
    8 00:05BE -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:05BE -  -  -  -  ;
   10 00:05BE -  -  -  -  ; ***************************************************************************************
   11 00:05BE -  -  -  -  ; ***************************************************************************************
   12 00:05BE -  -  -  -  
   13 00:05BE -  -  -  -  ; ***************************************************************************************
   14 00:05BE -  -  -  -  ;
   15 00:05BE -  -  -  -  ; 									Dereference HL'HL C
   16 00:05BE -  -  -  -  ;
   17 00:05BE -  -  -  -  ; ***************************************************************************************
   18 00:05BE -  -  -  -  
   19 00:05BE -  -  -  -  Dereference:
   20 00:05BE CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:05C0 C8 -  -  -  		ret 	z
   22 00:05C1 -  -  -  -  
   23 00:05C1 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:05C3 -  -  -  -  		
   25 00:05C3 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:05C5 20 1E -  -  		jr 		nz,_DRInternal
   27 00:05C7 -  -  -  -  
   28 00:05C7 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:05C9 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:05CB -  -  -  -  
   31 00:05CB E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:05CC ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:05CE D9 -  -  -  		exx
   34 00:05CF E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:05D0 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:05D1 23 -  -  -  		inc  	hl
   37 00:05D2 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:05D4 D9 -  -  -  		exx 								; fix back
   39 00:05D5 C9 -  -  -  		ret
   40 00:05D6 -  -  -  -  
   41 00:05D6 -  -  -  -  _DeRefByte:		
   42 00:05D6 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:05D7 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:05DB 6F -  -  -  		ld	 	l,a
   45 00:05DC D9 -  -  -  		exx
   46 00:05DD 21 00 00 00 		ld 		hl,$0000
   47 00:05E1 D9 -  -  -  		exx
   48 00:05E2 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:05E4 C9 -  -  -  		ret
   50 00:05E5 -  -  -  -  
   51 00:05E5 -  -  -  -  _DRInternal:
   52 00:05E5 3E 05 C3 58 
              03 00 -  -  		ERR_DISABLED
   53 00:05EB -  -  -  -  
   54 00:05EB -  -  -  -  ; ***************************************************************************************
   55 00:05EB -  -  -  -  ;
   56 00:05EB -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:05EB -  -  -  -  ;
   58 00:05EB -  -  -  -  ; ***************************************************************************************
   59 00:05EB -  -  -  -  
   60 00:05EB -  -  -  -  DRConvertHLHLToAddress:
   61 00:05EB -  -  -  -  		#ifdef EZ80
   62 00:05EB 22 66 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:05EF D9 -  -  -  		exx
   64 00:05F0 22 68 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:05F4 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:05F8 D9 -  -  -  		exx
   67 00:05F9 2A 66 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:05FD -  -  -  -  		#endif
   69 00:05FD C9 -  -  -  		ret
   70 00:05FE -  -  -  -  
   71 00:05FE -  -  -  -  ; ***************************************************************************************
   72 00:05FE -  -  -  -  ;
   73 00:05FE -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:05FE -  -  -  -  ;
   75 00:05FE -  -  -  -  ; ***************************************************************************************
   76 00:05FE -  -  -  -  
   77 00:05FE -  -  -  -  DRConvertAddressToHLHL:
   78 00:05FE -  -  -  -  		#ifdef EZ80
   79 00:05FE 22 66 00 00 		ld 		(AConvert),hl
   80 00:0602 21 00 00 00 		ld 		hl,$0000
   81 00:0606 22 69 00 00 		ld 		(AConvert+3),hl
   82 00:060A D9 -  -  -  		exx
   83 00:060B 2A 68 00 00 		ld 		hl,(AConvert+2)
   84 00:060F D9 -  -  -  		exx
   85 00:0610 AF -  -  -  		xor 	a
   86 00:0611 32 68 00 00 		ld 		(AConvert+2),a
   87 00:0615 2A 66 00 00 		ld 		hl,(AConvert)
   88 00:0619 -  -  -  -  		#endif
   89 00:0619 C9 -  -  -  		ret
   90 00:061A -  -  -  -  
   91 00:061A -  -  -  -  ; ***************************************************************************************
   92 00:061A -  -  -  -  ;
   93 00:061A -  -  -  -  ;									Changes and Updates
   94 00:061A -  -  -  -  ;
   95 00:061A -  -  -  -  ; ***************************************************************************************
   96 00:061A -  -  -  -  ;
   97 00:061A -  -  -  -  ;		Date			Notes
   98 00:061A -  -  -  -  ;		==== 			=====
   99 00:061A -  -  -  -  ;
  100 00:061A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:061A -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:061A -  -  -  -  ; ***************************************************************************************
    2 00:061A -  -  -  -  ; ***************************************************************************************
    3 00:061A -  -  -  -  ;
    4 00:061A -  -  -  -  ;		Name : 		term.asm
    5 00:061A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:061A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:061A -  -  -  -  ;		Reviewed :	No
    8 00:061A -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:061A -  -  -  -  ;
   10 00:061A -  -  -  -  ; ***************************************************************************************
   11 00:061A -  -  -  -  ; ***************************************************************************************
   12 00:061A -  -  -  -  
   13 00:061A -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:061A             		add_hlhl_16
   15 00:061A             		exx
   16 00:061A             		adc_hlhl_16
   17 00:061A             		exx
   18 00:061A             #endmacro
   19 00:061A -  -  -  -  
   20 00:061A -  -  -  -  ; ***************************************************************************************
   21 00:061A -  -  -  -  ;
   22 00:061A -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:061A -  -  -  -  ;
   24 00:061A -  -  -  -  ; ***************************************************************************************
   25 00:061A -  -  -  -  ;
   26 00:061A -  -  -  -  ; 		Terms can be:
   27 00:061A -  -  -  -  ;
   28 00:061A -  -  -  -  ;			<integer> 			42 						not negative
   29 00:061A -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:061A -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:061A -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:061A -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:061A -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:061A -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:061A -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:061A -  -  -  -  ; 														reference of some sort.
   37 00:061A -  -  -  -  ;
   38 00:061A -  -  -  -  ; ***************************************************************************************
   39 00:061A -  -  -  -  
   40 00:061A -  -  -  -  EvaluateTerm:		
   41 00:061A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:061C D9 -  -  -  		exx
   43 00:061D 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0621 D9 -  -  -  		exx
   45 00:0622 21 00 00 00 		ld 		hl,$0000		
   46 00:0626 -  -  -  -  		;
   47 00:0626 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:0629 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:062B 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:062D DA E5 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0631 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:0633 C2 89 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:0637 -  -  -  -  		;
   54 00:0637 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:0637 -  -  -  -  		;
   56 00:0637 -  -  -  -  _ETIntegerConstant:
   57 00:0637 -  -  -  -  		;
   58 00:0637 -  -  -  -  _ETIntegerLoop:		
   59 00:0637 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:063A E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:063C B5 -  -  -  		or 		l 							; or into L
   62 00:063D 6F -  -  -  		ld 		l,a
   63 00:063E DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0640 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:0643 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:0645 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0647 D8 -  -  -  		ret 	c
   68 00:0648 -  -  -  -  
   69 00:0648 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:064F 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0656 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:065D 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:0664 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:066B 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:0672 -  -  -  -  
   76 00:0672 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:0674 -  -  -  -  		;
   78 00:0674 -  -  -  -  		; 		Found the $3F string marker.
   79 00:0674 -  -  -  -  		;
   80 00:0674 -  -  -  -  _ETStringMarker:		
   81 00:0674 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:0676 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:0678 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:067A E1 -  -  -  		pop 	hl
   85 00:067B 11 00 00 00 		ld 		de,$0000
   86 00:067F DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:0682 DD 19 -  -  		add 	ix,de
   88 00:0684 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0686 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:0688 C9 -  -  -  		ret
   91 00:0689 -  -  -  -  		;
   92 00:0689 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:0689 -  -  -  -  		;
   94 00:0689 -  -  -  -  _ETFoundKeyword:
   95 00:0689 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:068B FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:068D 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:068F FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0691 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0693 -  -  -  -  		;
  101 00:0693 -  -  -  -  		;		Unary group 0
  102 00:0693 -  -  -  -  		;
  103 00:0693 E6 7F 21 00 
              00 00 6F 29 
              29 11 C0 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:06A8 C3 60 00 00 		jp 		JumpCode 					; and go there.
  105 00:06AC -  -  -  -  
  106 00:06AC -  -  -  -  _ETNotUnaryFunction0:	
  107 00:06AC FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:06AE 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:06B0 -  -  -  -  		;
  110 00:06B0 -  -  -  -  		; 		- term
  111 00:06B0 -  -  -  -  		;
  112 00:06B0 CD 65 05 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:06B4 CD FB 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:06B8 C9 -  -  -  		ret
  115 00:06B9 -  -  -  -  		;
  116 00:06B9 -  -  -  -  		;		! ? indirection check
  117 00:06B9 -  -  -  -  		;
  118 00:06B9 -  -  -  -  _ETCheckIndirection:	
  119 00:06B9 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:06BB 28 06 -  -  		jr 		z,_ETIndirection
  121 00:06BD FE 83 -  -  		cp 		KWD_PLING
  122 00:06BF C2 C2 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:06C3 -  -  -  -  		;
  124 00:06C3 -  -  -  -  		; 		! ? indirection
  125 00:06C3 -  -  -  -  		;
  126 00:06C3 -  -  -  -  _ETIndirection:
  127 00:06C3 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:06C4 CD 1A 06 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:06C8 CD BE 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:06CC CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:06CE 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:06D0 CD EB 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:06D4 F1 -  -  -  		pop 	af 							; get type back
  134 00:06D5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:06D7 CB F9 -  -  		set 	CIsReference,c
  136 00:06D9 FE 83 -  -  		cp 		KWD_PLING
  137 00:06DB C8 -  -  -  		ret 	z
  138 00:06DC CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:06DE C9 -  -  -  		ret
  140 00:06DF -  -  -  -  _ETStringIndirect:
  141 00:06DF 3E 02 C3 58 
              03 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:06E5 -  -  -  -  		;
  143 00:06E5 -  -  -  -  		; 		Found an identifier.
  144 00:06E5 -  -  -  -  		;
  145 00:06E5 -  -  -  -  _ETVariable:
  146 00:06E5 CD 4F 09 00 		call 	FindVariable 				; find the variable.
  147 00:06E9 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:06EA 3E 11 C3 58 
              03 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:06F0 -  -  -  -  		
  150 00:06F0 -  -  -  -  ; ***************************************************************************************
  151 00:06F0 -  -  -  -  ;
  152 00:06F0 -  -  -  -  ;									Changes and Updates
  153 00:06F0 -  -  -  -  ;
  154 00:06F0 -  -  -  -  ; ***************************************************************************************
  155 00:06F0 -  -  -  -  ;
  156 00:06F0 -  -  -  -  ;		Date			Notes
  157 00:06F0 -  -  -  -  ;		==== 			=====
  158 00:06F0 -  -  -  -  ;
  159 00:06F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:06F0 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:06F0 -  -  -  -  ; ***************************************************************************************
    2 00:06F0 -  -  -  -  ; ***************************************************************************************
    3 00:06F0 -  -  -  -  ;
    4 00:06F0 -  -  -  -  ;		Name : 		abs.asm
    5 00:06F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06F0 -  -  -  -  ;		Reviewed :	No
    8 00:06F0 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:06F0 -  -  -  -  ;
   10 00:06F0 -  -  -  -  ; ***************************************************************************************
   11 00:06F0 -  -  -  -  ; ***************************************************************************************
   12 00:06F0 -  -  -  -  
   13 00:06F0 -  -  -  -  ; ***************************************************************************************
   14 00:06F0 -  -  -  -  ;
   15 00:06F0 -  -  -  -  ;								abs( unary function
   16 00:06F0 -  -  -  -  ;
   17 00:06F0 -  -  -  -  ; ***************************************************************************************
   18 00:06F0 -  -  -  -  
   19 00:06F0 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:06F0 CD 65 05 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:06F4 D9 -  -  -  		exx 								; test MSB
   22 00:06F5 CB 7C -  -  		bit 	7,h
   23 00:06F7 D9 -  -  -  		exx
   24 00:06F8 C4 FB 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:06FC C9 -  -  -  		ret
   26 00:06FD -  -  -  -  
   27 00:06FD -  -  -  -  ; ***************************************************************************************
   28 00:06FD -  -  -  -  ;
   29 00:06FD -  -  -  -  ;									Changes and Updates
   30 00:06FD -  -  -  -  ;
   31 00:06FD -  -  -  -  ; ***************************************************************************************
   32 00:06FD -  -  -  -  ;
   33 00:06FD -  -  -  -  ;		Date			Notes
   34 00:06FD -  -  -  -  ;		==== 			=====
   35 00:06FD -  -  -  -  ;
   36 00:06FD -  -  -  -  ; ***************************************************************************************
   37 00:06FD -  -  -  -  		
Listing for file "_build.asm"
   35 00:06FD -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:06FD -  -  -  -  ; ***************************************************************************************
    2 00:06FD -  -  -  -  ; ***************************************************************************************
    3 00:06FD -  -  -  -  ;
    4 00:06FD -  -  -  -  ;		Name : 		asc.asm
    5 00:06FD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06FD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06FD -  -  -  -  ;		Reviewed :	No
    8 00:06FD -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:06FD -  -  -  -  ;
   10 00:06FD -  -  -  -  ; ***************************************************************************************
   11 00:06FD -  -  -  -  ; ***************************************************************************************
   12 00:06FD -  -  -  -  
   13 00:06FD -  -  -  -  ; ***************************************************************************************
   14 00:06FD -  -  -  -  ;
   15 00:06FD -  -  -  -  ;								Asc unary function
   16 00:06FD -  -  -  -  ;
   17 00:06FD -  -  -  -  ; ***************************************************************************************
   18 00:06FD -  -  -  -  
   19 00:06FD -  -  -  -  Unary_Asc:	;; [asc]
   20 00:06FD CD 74 05 00 		call	EvaluateStringTerm			; Get string
   21 00:0701 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0702 C3 B0 05 00 		jp 		Return8BitConstant
   23 00:0706 -  -  -  -  
   24 00:0706 -  -  -  -  ; ***************************************************************************************
   25 00:0706 -  -  -  -  ;
   26 00:0706 -  -  -  -  ;									Changes and Updates
   27 00:0706 -  -  -  -  ;
   28 00:0706 -  -  -  -  ; ***************************************************************************************
   29 00:0706 -  -  -  -  ;
   30 00:0706 -  -  -  -  ;		Date			Notes
   31 00:0706 -  -  -  -  ;		==== 			=====
   32 00:0706 -  -  -  -  ;
   33 00:0706 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0706 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:0706 -  -  -  -  ; ***************************************************************************************
    2 00:0706 -  -  -  -  ; ***************************************************************************************
    3 00:0706 -  -  -  -  ;
    4 00:0706 -  -  -  -  ;		Name : 		chr.asm
    5 00:0706 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0706 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0706 -  -  -  -  ;		Reviewed :	No
    8 00:0706 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:0706 -  -  -  -  ;
   10 00:0706 -  -  -  -  ; ***************************************************************************************
   11 00:0706 -  -  -  -  ; ***************************************************************************************
   12 00:0706 -  -  -  -  
   13 00:0706 -  -  -  -  ; ***************************************************************************************
   14 00:0706 -  -  -  -  ;
   15 00:0706 -  -  -  -  ;								Chr$() unary function
   16 00:0706 -  -  -  -  ;
   17 00:0706 -  -  -  -  ; ***************************************************************************************
   18 00:0706 -  -  -  -  
   19 00:0706 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:0706 CD 30 03 00 		call 	CheckDollar
   21 00:070A CD 65 05 00 		call 	EvaluateIntegerTerm
   22 00:070E 7D -  -  -  		ld 		a,l 						; get character
   23 00:070F 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0711 21 9B 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:0715 36 0D -  -  		ld 		(hl),13
   26 00:0717 2B -  -  -  		dec 	hl
   27 00:0718 77 -  -  -  		ld 		(hl),a
   28 00:0719 C9 -  -  -  		ret
   29 00:071A -  -  -  -  
   30 00:071A -  -  -  -  ; ***************************************************************************************
   31 00:071A -  -  -  -  ;
   32 00:071A -  -  -  -  ;									Changes and Updates
   33 00:071A -  -  -  -  ;
   34 00:071A -  -  -  -  ; ***************************************************************************************
   35 00:071A -  -  -  -  ;
   36 00:071A -  -  -  -  ;		Date			Notes
   37 00:071A -  -  -  -  ;		==== 			=====
   38 00:071A -  -  -  -  ;
   39 00:071A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:071A -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:071A -  -  -  -  ; ***************************************************************************************
    2 00:071A -  -  -  -  ; ***************************************************************************************
    3 00:071A -  -  -  -  ;
    4 00:071A -  -  -  -  ;		Name : 		len.asm
    5 00:071A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:071A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:071A -  -  -  -  ;		Reviewed :	None
    8 00:071A -  -  -  -  ;		Purpose :	String Length
    9 00:071A -  -  -  -  ;
   10 00:071A -  -  -  -  ; ***************************************************************************************
   11 00:071A -  -  -  -  ; ***************************************************************************************
   12 00:071A -  -  -  -  
   13 00:071A -  -  -  -  ; ***************************************************************************************
   14 00:071A -  -  -  -  ;
   15 00:071A -  -  -  -  ;								Len unary function
   16 00:071A -  -  -  -  ;
   17 00:071A -  -  -  -  ; ***************************************************************************************
   18 00:071A -  -  -  -  
   19 00:071A -  -  -  -  Unary_Len:	;; [len]
   20 00:071A CD 74 05 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:071E EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:071F CD 63 04 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:0723 -  -  -  -  _ULCount:
   24 00:0723 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:0724 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:0726 D8 -  -  -  		ret 	c
   27 00:0727 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:0728 13 -  -  -  		inc 	de
   29 00:0729 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:072B -  -  -  -  
   31 00:072B -  -  -  -  ; ***************************************************************************************
   32 00:072B -  -  -  -  ;
   33 00:072B -  -  -  -  ;									Changes and Updates
   34 00:072B -  -  -  -  ;
   35 00:072B -  -  -  -  ; ***************************************************************************************
   36 00:072B -  -  -  -  ;
   37 00:072B -  -  -  -  ;		Date			Notes
   38 00:072B -  -  -  -  ;		==== 			=====
   39 00:072B -  -  -  -  ;
   40 00:072B -  -  -  -  ; ***************************************************************************************
   41 00:072B -  -  -  -  		
Listing for file "_build.asm"
   38 00:072B -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:072B -  -  -  -  ; ***************************************************************************************
    2 00:072B -  -  -  -  ; ***************************************************************************************
    3 00:072B -  -  -  -  ;
    4 00:072B -  -  -  -  ;		Name : 		makestring.asm
    5 00:072B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:072B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:072B -  -  -  -  ;		Reviewed :	No
    8 00:072B -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:072B -  -  -  -  ;
   10 00:072B -  -  -  -  ; ***************************************************************************************
   11 00:072B -  -  -  -  ; ***************************************************************************************
   12 00:072B -  -  -  -  
   13 00:072B -  -  -  -  ; ***************************************************************************************
   14 00:072B -  -  -  -  ;
   15 00:072B -  -  -  -  ;								Str$() unary function
   16 00:072B -  -  -  -  ;
   17 00:072B -  -  -  -  ; ***************************************************************************************
   18 00:072B -  -  -  -  
   19 00:072B -  -  -  -  Unary_MkStr:	;; [$]
   20 00:072B CD 65 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:072F CD EB 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:0733 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:0735 C9 -  -  -  		ret
   24 00:0736 -  -  -  -  
   25 00:0736 -  -  -  -  ; ***************************************************************************************
   26 00:0736 -  -  -  -  ;
   27 00:0736 -  -  -  -  ;									Changes and Updates
   28 00:0736 -  -  -  -  ;
   29 00:0736 -  -  -  -  ; ***************************************************************************************
   30 00:0736 -  -  -  -  ;
   31 00:0736 -  -  -  -  ;		Date			Notes
   32 00:0736 -  -  -  -  ;		==== 			=====
   33 00:0736 -  -  -  -  ;
   34 00:0736 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0736 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:0736 -  -  -  -  ; ***************************************************************************************
    2 00:0736 -  -  -  -  ; ***************************************************************************************
    3 00:0736 -  -  -  -  ;
    4 00:0736 -  -  -  -  ;		Name : 		not.asm
    5 00:0736 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0736 -  -  -  -  ;		Date : 		5th June 2023
    7 00:0736 -  -  -  -  ;		Reviewed :	No
    8 00:0736 -  -  -  -  ;		Purpose :	Logical not
    9 00:0736 -  -  -  -  ;
   10 00:0736 -  -  -  -  ; ***************************************************************************************
   11 00:0736 -  -  -  -  ; ***************************************************************************************
   12 00:0736 -  -  -  -  
   13 00:0736 -  -  -  -  ; ***************************************************************************************
   14 00:0736 -  -  -  -  ;
   15 00:0736 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:0736 -  -  -  -  ;
   17 00:0736 -  -  -  -  ; ***************************************************************************************
   18 00:0736 -  -  -  -  
   19 00:0736 -  -  -  -  Unary_Not:		;; [not]
   20 00:0736 CD 65 05 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:073A CD 43 07 00 		call 	__UNSwap 					; not and swap twice.
   22 00:073E CD 43 07 00 		call 	__UNSwap		
   23 00:0742 C9 -  -  -  		ret
   24 00:0743 -  -  -  -  
   25 00:0743 -  -  -  -  __UNSwap:
   26 00:0743 7C -  -  -  		ld 		a,h
   27 00:0744 2F -  -  -  		cpl
   28 00:0745 67 -  -  -  		ld 		h,a
   29 00:0746 7D -  -  -  		ld 		a,l
   30 00:0747 2F -  -  -  		cpl 	
   31 00:0748 6F -  -  -  		ld 		l,a
   32 00:0749 D9 -  -  -  		exx
   33 00:074A C9 -  -  -  		ret
   34 00:074B -  -  -  -  
   35 00:074B -  -  -  -  ; ***************************************************************************************
   36 00:074B -  -  -  -  ;
   37 00:074B -  -  -  -  ;									Changes and Updates
   38 00:074B -  -  -  -  ;
   39 00:074B -  -  -  -  ; ***************************************************************************************
   40 00:074B -  -  -  -  ;
   41 00:074B -  -  -  -  ;		Date			Notes
   42 00:074B -  -  -  -  ;		==== 			=====
   43 00:074B -  -  -  -  ;
   44 00:074B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:074B -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:074B -  -  -  -  ; ***************************************************************************************
    2 00:074B -  -  -  -  ; ***************************************************************************************
    3 00:074B -  -  -  -  ;
    4 00:074B -  -  -  -  ;		Name : 		page.asm
    5 00:074B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:074B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:074B -  -  -  -  ;		Reviewed :	No
    8 00:074B -  -  -  -  ;		Purpose :	Various constants.
    9 00:074B -  -  -  -  ;
   10 00:074B -  -  -  -  ; ***************************************************************************************
   11 00:074B -  -  -  -  ; ***************************************************************************************
   12 00:074B -  -  -  -  
   13 00:074B -  -  -  -  ; ***************************************************************************************
   14 00:074B -  -  -  -  ;
   15 00:074B -  -  -  -  ;							page unary function (no bracket)
   16 00:074B -  -  -  -  ;
   17 00:074B -  -  -  -  ; ***************************************************************************************
   18 00:074B -  -  -  -  
   19 00:074B -  -  -  -  Unary_Page:	;; [page]
   20 00:074B 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:074F D9 -  -  -  			exx
   22 00:0750 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:0754 D9 -  -  -  			exx
   24 00:0755 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0757 C9 -  -  -  			ret
   26 00:0758 -  -  -  -  
   27 00:0758 -  -  -  -  ; ***************************************************************************************
   28 00:0758 -  -  -  -  ;
   29 00:0758 -  -  -  -  ;									Changes and Updates
   30 00:0758 -  -  -  -  ;
   31 00:0758 -  -  -  -  ; ***************************************************************************************
   32 00:0758 -  -  -  -  ;
   33 00:0758 -  -  -  -  ;		Date			Notes
   34 00:0758 -  -  -  -  ;		==== 			=====
   35 00:0758 -  -  -  -  ;
   36 00:0758 -  -  -  -  ; ***************************************************************************************
   37 00:0758 -  -  -  -  			
Listing for file "_build.asm"
   41 00:0758 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0758 -  -  -  -  ; ***************************************************************************************
    2 00:0758 -  -  -  -  ; ***************************************************************************************
    3 00:0758 -  -  -  -  ;
    4 00:0758 -  -  -  -  ;		Name : 		random.asm
    5 00:0758 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0758 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0758 -  -  -  -  ;		Reviewed :	No
    8 00:0758 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0758 -  -  -  -  ;
   10 00:0758 -  -  -  -  ; ***************************************************************************************
   11 00:0758 -  -  -  -  ; ***************************************************************************************
   12 00:0758 -  -  -  -  
   13 00:0758 -  -  -  -  ; ***************************************************************************************
   14 00:0758 -  -  -  -  ;
   15 00:0758 -  -  -  -  ;								Random unary function
   16 00:0758 -  -  -  -  ;
   17 00:0758 -  -  -  -  ; ***************************************************************************************
   18 00:0758 -  -  -  -  
   19 00:0758 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0758 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:0760 CD 65 05 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:0764 D9 -  -  -  		exx 								; is it -ve
   23 00:0765 CB 7C -  -  		bit 	7,h
   24 00:0767 D9 -  -  -  		exx
   25 00:0768 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:076A 22 6C 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:076E D9 -  -  -  		exx
   28 00:076F 22 70 00 00 		ld 		(RandomSeed+4),hl
   29 00:0773 D9 -  -  -  		exx
   30 00:0774 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:0776 C9 -  -  -  		ret
   32 00:0777 -  -  -  -  _URDontSeed:		
   33 00:0777 -  -  -  -  
   34 00:0777 CD 6F 0E 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:077B 28 1C -  -  		jr 		z,_URFail
   36 00:077D E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:077E D9 -  -  -  		exx
   38 00:077F E5 -  -  -  		push 	hl
   39 00:0780 D9 -  -  -  		exx
   40 00:0781 -  -  -  -  		;
   41 00:0781 CD AA 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:0785 D9 -  -  -  		exx
   43 00:0786 CD AA 07 00 		call 	URandomHL
   44 00:078A CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:078C D9 -  -  -  		exx
   46 00:078D -  -  -  -  		;
   47 00:078D D9 -  -  -  		exx 								; restore range.
   48 00:078E D1 -  -  -  		pop 	de
   49 00:078F D9 -  -  -  		exx
   50 00:0790 D1 -  -  -  		pop 	de
   51 00:0791 -  -  -  -  		;
   52 00:0791 CD 00 0D 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:0795 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0796 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:0798 C9 -  -  -  		ret
   56 00:0799 -  -  -  -  _URFail:
   57 00:0799 3E 03 C3 58 
              03 00 -  -  		ERR_BADVALUE
   58 00:079F -  -  -  -  ; ***************************************************************************************
   59 00:079F -  -  -  -  ;
   60 00:079F -  -  -  -  ; 									Push RNG off zero
   61 00:079F -  -  -  -  ;
   62 00:079F -  -  -  -  ; ***************************************************************************************
   63 00:079F -  -  -  -  
   64 00:079F -  -  -  -  UnaryRandomInitialise:
   65 00:079F 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:07A1 -  -  -  -  _URILoop:
   67 00:07A1 C5 -  -  -  		push 	bc
   68 00:07A2 CD AA 07 00 		call 	URandomHL
   69 00:07A6 C1 -  -  -  		pop 	bc
   70 00:07A7 10 F8 -  -  		djnz 	_URILoop
   71 00:07A9 C9 -  -  -  		ret
   72 00:07AA -  -  -  -  
   73 00:07AA -  -  -  -  ; ***************************************************************************************
   74 00:07AA -  -  -  -  ;
   75 00:07AA -  -  -  -  ;							16 bit random number generator
   76 00:07AA -  -  -  -  ;
   77 00:07AA -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:07AA -  -  -  -  ;		Actual author unspecified.
   79 00:07AA -  -  -  -  ;
   80 00:07AA -  -  -  -  ; ***************************************************************************************
   81 00:07AA -  -  -  -  
   82 00:07AA -  -  -  -  URandomHL:
   83 00:07AA 2A 6C 00 00 	    ld 		hl,(RandomSeed)
   84 00:07AE ED 5B 70 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:07B3 44 -  -  -  	    ld 		b,h
   86 00:07B4 4D -  -  -  	    ld 		c,l
   87 00:07B5 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:07BA 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:07BF 2C -  -  -  	    inc 	l
   90 00:07C0 09 -  -  -  	    add 	hl,bc
   91 00:07C1 22 6C 00 00 	    ld 		(RandomSeed),hl
   92 00:07C5 2A 70 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:07C9 ED 5A -  -  	    adc 	hl,de
   94 00:07CB 22 70 00 00 	    ld 		(RandomSeed+4),hl
   95 00:07CF EB -  -  -  	    ex 		de,hl
   96 00:07D0 2A 74 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:07D4 ED 4B 78 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:07D9 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:07DE ED 43 78 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:07E3 9F -  -  -  	    sbc 	a,a
  101 00:07E4 E6 C5 -  -  	    and 	%11000101
  102 00:07E6 AD -  -  -  	    xor 	l
  103 00:07E7 6F -  -  -  	    ld 		l,a
  104 00:07E8 22 74 00 00 	    ld 		(RandomSeed+8),hl
  105 00:07EC EB -  -  -  	    ex 		de,hl
  106 00:07ED 09 -  -  -  	    add 	hl,bc
  107 00:07EE C9 -  -  -  	    ret		
  108 00:07EF -  -  -  -  
  109 00:07EF -  -  -  -  ; ***************************************************************************************
  110 00:07EF -  -  -  -  ;
  111 00:07EF -  -  -  -  ;									Changes and Updates
  112 00:07EF -  -  -  -  ;
  113 00:07EF -  -  -  -  ; ***************************************************************************************
  114 00:07EF -  -  -  -  ;
  115 00:07EF -  -  -  -  ;		Date			Notes
  116 00:07EF -  -  -  -  ;		==== 			=====
  117 00:07EF -  -  -  -  ;
  118 00:07EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:07EF -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:07EF -  -  -  -  ; ***************************************************************************************
    2 00:07EF -  -  -  -  ; ***************************************************************************************
    3 00:07EF -  -  -  -  ;
    4 00:07EF -  -  -  -  ;		Name : 		sgn.asm
    5 00:07EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07EF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07EF -  -  -  -  ;		Reviewed :	No
    8 00:07EF -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:07EF -  -  -  -  ;
   10 00:07EF -  -  -  -  ; ***************************************************************************************
   11 00:07EF -  -  -  -  ; ***************************************************************************************
   12 00:07EF -  -  -  -  
   13 00:07EF -  -  -  -  ; ***************************************************************************************
   14 00:07EF -  -  -  -  ;
   15 00:07EF -  -  -  -  ;								sgn unary function
   16 00:07EF -  -  -  -  ;
   17 00:07EF -  -  -  -  ; ***************************************************************************************
   18 00:07EF -  -  -  -  
   19 00:07EF -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:07EF CD 65 05 00 		call	EvaluateIntegerTerm 		; get value
   21 00:07F3 CD 6F 0E 00 		call 	Int32Zero 					; integer sgn() code
   22 00:07F7 CA 63 04 00 		jp 		z,UnaryInt32False
   23 00:07FB D9 -  -  -  		exx
   24 00:07FC CB 7C -  -  		bit 	7,h
   25 00:07FE D9 -  -  -  		exx
   26 00:07FF C2 5F 04 00 		jp 		nz,UnaryInt32True
   27 00:0803 3E 01 -  -  		ld 		a,1
   28 00:0805 C3 B0 05 00 		jp 		Return8BitConstant
   29 00:0809 -  -  -  -  
   30 00:0809 -  -  -  -  ; ***************************************************************************************
   31 00:0809 -  -  -  -  ;
   32 00:0809 -  -  -  -  ;									Changes and Updates
   33 00:0809 -  -  -  -  ;
   34 00:0809 -  -  -  -  ; ***************************************************************************************
   35 00:0809 -  -  -  -  ;
   36 00:0809 -  -  -  -  ;		Date			Notes
   37 00:0809 -  -  -  -  ;		==== 			=====
   38 00:0809 -  -  -  -  ;
   39 00:0809 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:0809 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:0809 -  -  -  -  ; ***************************************************************************************
    2 00:0809 -  -  -  -  ; ***************************************************************************************
    3 00:0809 -  -  -  -  ;
    4 00:0809 -  -  -  -  ;		Name : 		simple.asm
    5 00:0809 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0809 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0809 -  -  -  -  ;		Reviewed :	No
    8 00:0809 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:0809 -  -  -  -  ;
   10 00:0809 -  -  -  -  ; ***************************************************************************************
   11 00:0809 -  -  -  -  ; ***************************************************************************************
   12 00:0809 -  -  -  -  
   13 00:0809 -  -  -  -  ; ***************************************************************************************
   14 00:0809 -  -  -  -  ;
   15 00:0809 -  -  -  -  ;								( unary function (think about it)
   16 00:0809 -  -  -  -  ;
   17 00:0809 -  -  -  -  ; ***************************************************************************************
   18 00:0809 -  -  -  -  
   19 00:0809 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:0809 CD 0C 05 00 		call 	EvaluateAtPrecedence0
   21 00:080D C3 22 03 00 		jp  	CheckRightBracket
   22 00:0811 -  -  -  -  
   23 00:0811 -  -  -  -  ; ***************************************************************************************
   24 00:0811 -  -  -  -  ;
   25 00:0811 -  -  -  -  ;									Handle &x
   26 00:0811 -  -  -  -  ;
   27 00:0811 -  -  -  -  ; ***************************************************************************************
   28 00:0811 -  -  -  -  
   29 00:0811 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0811 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0814 E6 C0 -  -  		and 		$C0
   32 00:0816 FE 40 -  -  		cp 			$40
   33 00:0818 C2 C2 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:081C C3 1A 06 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0820 -  -  -  -  
   36 00:0820 -  -  -  -  ; ***************************************************************************************
   37 00:0820 -  -  -  -  ;
   38 00:0820 -  -  -  -  ;									Changes and Updates
   39 00:0820 -  -  -  -  ;
   40 00:0820 -  -  -  -  ; ***************************************************************************************
   41 00:0820 -  -  -  -  ;
   42 00:0820 -  -  -  -  ;		Date			Notes
   43 00:0820 -  -  -  -  ;		==== 			=====
   44 00:0820 -  -  -  -  ;
   45 00:0820 -  -  -  -  ; ***************************************************************************************
   46 00:0820 -  -  -  -  		
Listing for file "_build.asm"
   44 00:0820 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0820 -  -  -  -  ; ***************************************************************************************
    2 00:0820 -  -  -  -  ; ***************************************************************************************
    3 00:0820 -  -  -  -  ;
    4 00:0820 -  -  -  -  ;		Name : 		str.asm
    5 00:0820 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0820 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0820 -  -  -  -  ;		Reviewed :	No
    8 00:0820 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0820 -  -  -  -  ;
   10 00:0820 -  -  -  -  ; ***************************************************************************************
   11 00:0820 -  -  -  -  ; ***************************************************************************************
   12 00:0820 -  -  -  -  
   13 00:0820 -  -  -  -  ; ***************************************************************************************
   14 00:0820 -  -  -  -  ;
   15 00:0820 -  -  -  -  ;								Str$() unary function
   16 00:0820 -  -  -  -  ;
   17 00:0820 -  -  -  -  ; ***************************************************************************************
   18 00:0820 -  -  -  -  
   19 00:0820 -  -  -  -  Unary_Str:	;; [str]
   20 00:0820 CD 30 03 00 		call 	CheckDollar
   21 00:0824 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:0827 EE AC -  -  		xor		KWD_TILDE
   23 00:0829 F5 -  -  -  		push 	af
   24 00:082A 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:082C DD 23 -  -  		inc 	ix
   26 00:082E -  -  -  -  _USNotHex:		
   27 00:082E CD 65 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:0832 01 8A 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:0836 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:0837 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:0839 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:083B 3E 10 -  -  		ld 		a,16
   33 00:083D -  -  -  -  _USNotHex2:		
   34 00:083D CD B7 0E 00 		call 	Int32ToString 				
   35 00:0841 21 8A 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:0845 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:0847 C9 -  -  -  		ret
   38 00:0848 -  -  -  -  
   39 00:0848 -  -  -  -  ; ***************************************************************************************
   40 00:0848 -  -  -  -  ;
   41 00:0848 -  -  -  -  ;									Changes and Updates
   42 00:0848 -  -  -  -  ;
   43 00:0848 -  -  -  -  ; ***************************************************************************************
   44 00:0848 -  -  -  -  ;
   45 00:0848 -  -  -  -  ;		Date			Notes
   46 00:0848 -  -  -  -  ;		==== 			=====
   47 00:0848 -  -  -  -  ;
   48 00:0848 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:0848 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:0848 -  -  -  -  ; ***************************************************************************************
    2 00:0848 -  -  -  -  ; ***************************************************************************************
    3 00:0848 -  -  -  -  ;
    4 00:0848 -  -  -  -  ;		Name : 		time.asm
    5 00:0848 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0848 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0848 -  -  -  -  ;		Reviewed :	No
    8 00:0848 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:0848 -  -  -  -  ;
   10 00:0848 -  -  -  -  ; ***************************************************************************************
   11 00:0848 -  -  -  -  ; ***************************************************************************************
   12 00:0848 -  -  -  -  
   13 00:0848 -  -  -  -  ; ***************************************************************************************
   14 00:0848 -  -  -  -  ;
   15 00:0848 -  -  -  -  ;							Get system time in ms
   16 00:0848 -  -  -  -  ;
   17 00:0848 -  -  -  -  ; ***************************************************************************************
   18 00:0848 -  -  -  -  
   19 00:0848 -  -  -  -  Unary_Time:	;; [time]
   20 00:0848 CD 08 0F 00 			call 	SYSGetTimer
   21 00:084C 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:084E C9 -  -  -  			ret
   23 00:084F -  -  -  -  
   24 00:084F -  -  -  -  ; ***************************************************************************************
   25 00:084F -  -  -  -  ;
   26 00:084F -  -  -  -  ;									Changes and Updates
   27 00:084F -  -  -  -  ;
   28 00:084F -  -  -  -  ; ***************************************************************************************
   29 00:084F -  -  -  -  ;
   30 00:084F -  -  -  -  ;		Date			Notes
   31 00:084F -  -  -  -  ;		==== 			=====
   32 00:084F -  -  -  -  ;
   33 00:084F -  -  -  -  ; ***************************************************************************************
   34 00:084F -  -  -  -  			
Listing for file "_build.asm"
   46 00:084F -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:084F -  -  -  -  ; ***************************************************************************************
    2 00:084F -  -  -  -  ; ***************************************************************************************
    3 00:084F -  -  -  -  ;
    4 00:084F -  -  -  -  ;		Name : 		top.asm
    5 00:084F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:084F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:084F -  -  -  -  ;		Reviewed :	No
    8 00:084F -  -  -  -  ;		Purpose :	Various constants.
    9 00:084F -  -  -  -  ;
   10 00:084F -  -  -  -  ; ***************************************************************************************
   11 00:084F -  -  -  -  ; ***************************************************************************************
   12 00:084F -  -  -  -  
   13 00:084F -  -  -  -  ; ***************************************************************************************
   14 00:084F -  -  -  -  ;
   15 00:084F -  -  -  -  ;							page unary function (no bracket)
   16 00:084F -  -  -  -  ;
   17 00:084F -  -  -  -  ; ***************************************************************************************
   18 00:084F -  -  -  -  
   19 00:084F -  -  -  -  Unary_Top:	;; [top]
   20 00:084F 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:0853 D9 -  -  -  			exx
   22 00:0854 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:0858 D9 -  -  -  			exx
   24 00:0859 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:085B C9 -  -  -  			ret
   26 00:085C -  -  -  -  
   27 00:085C -  -  -  -  ; ***************************************************************************************
   28 00:085C -  -  -  -  ;
   29 00:085C -  -  -  -  ;									Changes and Updates
   30 00:085C -  -  -  -  ;
   31 00:085C -  -  -  -  ; ***************************************************************************************
   32 00:085C -  -  -  -  ;
   33 00:085C -  -  -  -  ;		Date			Notes
   34 00:085C -  -  -  -  ;		==== 			=====
   35 00:085C -  -  -  -  ;
   36 00:085C -  -  -  -  ; ***************************************************************************************
   37 00:085C -  -  -  -  			
Listing for file "_build.asm"
   47 00:085C -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:085C -  -  -  -  ; ***************************************************************************************
    2 00:085C -  -  -  -  ; ***************************************************************************************
    3 00:085C -  -  -  -  ;
    4 00:085C -  -  -  -  ;		Name : 		val.asm
    5 00:085C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:085C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:085C -  -  -  -  ;		Reviewed :	No
    8 00:085C -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:085C -  -  -  -  ;
   10 00:085C -  -  -  -  ; ***************************************************************************************
   11 00:085C -  -  -  -  ; ***************************************************************************************
   12 00:085C -  -  -  -  
   13 00:085C -  -  -  -  ; ***************************************************************************************
   14 00:085C -  -  -  -  ;
   15 00:085C -  -  -  -  ;								val( unary function
   16 00:085C -  -  -  -  ;
   17 00:085C -  -  -  -  ; ***************************************************************************************
   18 00:085C -  -  -  -  
   19 00:085C -  -  -  -  Unary_Val:	;; [val]
   20 00:085C CD 74 05 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0860 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:0861 C1 -  -  -  		pop 	bc
   23 00:0862 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0864 CD 95 0D 00 		call 	Int32FromString 			; get the integer part.
   25 00:0868 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:086A C8 -  -  -  		ret		z 							; okay
   27 00:086B 3E 03 C3 58 
              03 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:0871 -  -  -  -  
   29 00:0871 -  -  -  -  ; ***************************************************************************************
   30 00:0871 -  -  -  -  ;
   31 00:0871 -  -  -  -  ;									Changes and Updates
   32 00:0871 -  -  -  -  ;
   33 00:0871 -  -  -  -  ; ***************************************************************************************
   34 00:0871 -  -  -  -  ;
   35 00:0871 -  -  -  -  ;		Date			Notes
   36 00:0871 -  -  -  -  ;		==== 			=====
   37 00:0871 -  -  -  -  ;
   38 00:0871 -  -  -  -  ; ***************************************************************************************
   39 00:0871 -  -  -  -  		
Listing for file "_build.asm"
   48 00:0871 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:0871 -  -  -  -  ; ***************************************************************************************
    2 00:0871 -  -  -  -  ; ***************************************************************************************
    3 00:0871 -  -  -  -  ;
    4 00:0871 -  -  -  -  ;		Name : 		allocate.asm
    5 00:0871 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0871 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0871 -  -  -  -  ;		Reviewed :	No
    8 00:0871 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:0871 -  -  -  -  ;
   10 00:0871 -  -  -  -  ; ***************************************************************************************
   11 00:0871 -  -  -  -  ; ***************************************************************************************
   12 00:0871 -  -  -  -  
   13 00:0871 -  -  -  -  ; ***************************************************************************************
   14 00:0871 -  -  -  -  ;
   15 00:0871 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:0871 -  -  -  -  ;
   17 00:0871 -  -  -  -  ; ***************************************************************************************
   18 00:0871 -  -  -  -  
   19 00:0871 -  -  -  -  AllocateBytes:
   20 00:0871 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:0872 21 00 00 00 		ld 		hl,$000000
   22 00:0876 62 -  -  -  		ld 		h,d
   23 00:0877 6B -  -  -  		ld 		l,e
   24 00:0878 -  -  -  -  		;
   25 00:0878 ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:087D D5 -  -  -  		push 	de 							; save on stack
   27 00:087E 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:087F 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   29 00:0883 -  -  -  -  		;
   30 00:0883 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:0884 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:0888 AF -  -  -  		xor 	a
   33 00:0889 ED 52 -  -  		sbc 	hl,de
   34 00:088B E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:088C D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:088D 3E 08 C3 58 
              03 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:0893 -  -  -  -  
   38 00:0893 -  -  -  -  ; ***************************************************************************************
   39 00:0893 -  -  -  -  ;
   40 00:0893 -  -  -  -  ;									Changes and Updates
   41 00:0893 -  -  -  -  ;
   42 00:0893 -  -  -  -  ; ***************************************************************************************
   43 00:0893 -  -  -  -  ;
   44 00:0893 -  -  -  -  ;		Date			Notes
   45 00:0893 -  -  -  -  ;		==== 			=====
   46 00:0893 -  -  -  -  ;
   47 00:0893 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:0893 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:0893 -  -  -  -  ; ***************************************************************************************
    2 00:0893 -  -  -  -  ; ***************************************************************************************
    3 00:0893 -  -  -  -  ;
    4 00:0893 -  -  -  -  ;		Name : 		clear.asm
    5 00:0893 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0893 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0893 -  -  -  -  ;		Reviewed :	No
    8 00:0893 -  -  -  -  ;		Purpose :	Clear command.
    9 00:0893 -  -  -  -  ;
   10 00:0893 -  -  -  -  ; ***************************************************************************************
   11 00:0893 -  -  -  -  ; ***************************************************************************************
   12 00:0893 -  -  -  -  
   13 00:0893 -  -  -  -  ; ***************************************************************************************
   14 00:0893 -  -  -  -  ;
   15 00:0893 -  -  -  -  ;										CLEAR command
   16 00:0893 -  -  -  -  ;
   17 00:0893 -  -  -  -  ; ***************************************************************************************
   18 00:0893 -  -  -  -  
   19 00:0893 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:0893 -  -  -  -  		;
   21 00:0893 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:0893 -  -  -  -  		;
   23 00:0893 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0897 -  -  -  -  _CCFindLow:
   25 00:0897 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:089B 5E -  -  -  		ld 		e,(hl)		
   27 00:089C 19 -  -  -  		add 	hl,de
   28 00:089D 7B -  -  -  		ld 		a,e
   29 00:089E B7 -  -  -  		or 		a
   30 00:089F 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:08A1 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:08A2 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:08A6 23 -  -  -  		inc 	hl 							; one for luck
   34 00:08A7 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:08AB -  -  -  -  		;
   36 00:08AB -  -  -  -  		; 	 		Reset the language stack
   37 00:08AB -  -  -  -  		;
   38 00:08AB 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:08AF -  -  -  -  		;
   40 00:08AF 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:08B1 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:08B5 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:08B9 19 -  -  -  		add 	hl,de
   44 00:08BA 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:08BC 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:08C0 -  -  -  -  		;
   47 00:08C0 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:08C4 19 -  -  -  		add 	hl,de
   49 00:08C5 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:08C9 -  -  -  -  		;
   51 00:08C9 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:08C9 -  -  -  -  		;
   53 00:08C9 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:08CD -  -  -  -  _CCFClearHT:
   55 00:08CD 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:08CE 36 00 -  -  		ld 		(hl),0
   57 00:08D0 1B -  -  -  		dec 	de
   58 00:08D1 7A -  -  -  		ld 		a,d
   59 00:08D2 B3 -  -  -  		or 		e
   60 00:08D3 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:08D5 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   62 00:08D9 -  -  -  -  		;
   63 00:08D9 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:08D9 -  -  -  -  		;
   65 00:08D9 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:08DD -  -  -  -  		;
   67 00:08DD -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:08DD -  -  -  -  		;
   69 00:08DD CD 9F 07 00 		call 	UnaryRandomInitialise
   70 00:08E1 C9 -  -  -  		ret
   71 00:08E2 -  -  -  -  
   72 00:08E2 -  -  -  -  ; ***************************************************************************************
   73 00:08E2 -  -  -  -  ;
   74 00:08E2 -  -  -  -  ;									Changes and Updates
   75 00:08E2 -  -  -  -  ;
   76 00:08E2 -  -  -  -  ; ***************************************************************************************
   77 00:08E2 -  -  -  -  ;
   78 00:08E2 -  -  -  -  ;		Date			Notes
   79 00:08E2 -  -  -  -  ;		==== 			=====
   80 00:08E2 -  -  -  -  ;
   81 00:08E2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:08E2 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:08E2 -  -  -  -  ; ***************************************************************************************
    2 00:08E2 -  -  -  -  ; ***************************************************************************************
    3 00:08E2 -  -  -  -  ;
    4 00:08E2 -  -  -  -  ;		Name : 		instance.asm
    5 00:08E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08E2 -  -  -  -  ;		Reviewed :	No
    8 00:08E2 -  -  -  -  ;		Purpose :	Instance handling
    9 00:08E2 -  -  -  -  ;
   10 00:08E2 -  -  -  -  ; ***************************************************************************************
   11 00:08E2 -  -  -  -  ; ***************************************************************************************
   12 00:08E2 -  -  -  -  
   13 00:08E2 -  -  -  -  ; ***************************************************************************************
   14 00:08E2 -  -  -  -  ;
   15 00:08E2 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:08E2 -  -  -  -  ;
   17 00:08E2 -  -  -  -  ; ***************************************************************************************
   18 00:08E2 -  -  -  -  
   19 00:08E2 -  -  -  -  SetCurrentInstance:
   20 00:08E2 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:08E7 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:08EB ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:08F0 -  -  -  -  
   24 00:08F0 C9 -  -  -  		ret
   25 00:08F1 -  -  -  -  
   26 00:08F1 -  -  -  -  
   27 00:08F1 -  -  -  -  ; ***************************************************************************************
   28 00:08F1 -  -  -  -  ;
   29 00:08F1 -  -  -  -  ;									Changes and Updates
   30 00:08F1 -  -  -  -  ;
   31 00:08F1 -  -  -  -  ; ***************************************************************************************
   32 00:08F1 -  -  -  -  ;
   33 00:08F1 -  -  -  -  ;		Date			Notes
   34 00:08F1 -  -  -  -  ;		==== 			=====
   35 00:08F1 -  -  -  -  ;
   36 00:08F1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:08F1 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:08F1 -  -  -  -  ; ***************************************************************************************
    2 00:08F1 -  -  -  -  ; ***************************************************************************************
    3 00:08F1 -  -  -  -  ;
    4 00:08F1 -  -  -  -  ;		Name : 		new.asm
    5 00:08F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F1 -  -  -  -  ;		Reviewed :	No
    8 00:08F1 -  -  -  -  ;		Purpose :	New command.
    9 00:08F1 -  -  -  -  ;
   10 00:08F1 -  -  -  -  ; ***************************************************************************************
   11 00:08F1 -  -  -  -  ; ***************************************************************************************
   12 00:08F1 -  -  -  -  
   13 00:08F1 -  -  -  -  ; ***************************************************************************************
   14 00:08F1 -  -  -  -  ;
   15 00:08F1 -  -  -  -  ;										NEW command
   16 00:08F1 -  -  -  -  ;
   17 00:08F1 -  -  -  -  ; ***************************************************************************************
   18 00:08F1 -  -  -  -  
   19 00:08F1 -  -  -  -  Command_NEW: 	;; [new]
   20 00:08F1 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:08F5 36 00 -  -  		ld 		(hl),0
   22 00:08F7 CD 93 08 00 		call 	Command_CLEAR 				; clear all variables
   23 00:08FB 3E 00 C3 58 
              03 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0901 -  -  -  -  
   25 00:0901 -  -  -  -  ; ***************************************************************************************
   26 00:0901 -  -  -  -  ;
   27 00:0901 -  -  -  -  ;									Changes and Updates
   28 00:0901 -  -  -  -  ;
   29 00:0901 -  -  -  -  ; ***************************************************************************************
   30 00:0901 -  -  -  -  ;
   31 00:0901 -  -  -  -  ;		Date			Notes
   32 00:0901 -  -  -  -  ;		==== 			=====
   33 00:0901 -  -  -  -  ;
   34 00:0901 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:0901 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0901 -  -  -  -  ; ***************************************************************************************
    2 00:0901 -  -  -  -  ; ***************************************************************************************
    3 00:0901 -  -  -  -  ;
    4 00:0901 -  -  -  -  ;		Name : 		utility.asm
    5 00:0901 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0901 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0901 -  -  -  -  ;		Reviewed :	No
    8 00:0901 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0901 -  -  -  -  ;
   10 00:0901 -  -  -  -  ; ***************************************************************************************
   11 00:0901 -  -  -  -  ; ***************************************************************************************
   12 00:0901 -  -  -  -  
   13 00:0901 -  -  -  -  ; ***************************************************************************************
   14 00:0901 -  -  -  -  ;
   15 00:0901 -  -  -  -  ;							Print ASCII string at HL
   16 00:0901 -  -  -  -  ;
   17 00:0901 -  -  -  -  ; ***************************************************************************************
   18 00:0901 -  -  -  -  
   19 00:0901 -  -  -  -  PrintStringAtHL:
   20 00:0901 7E -  -  -  		ld 		a,(hl)
   21 00:0902 FE 20 -  -  		cp 		$20		
   22 00:0904 D8 -  -  -  		ret 	c
   23 00:0905 CD 06 0F 00 		call 	SYSPrintChar
   24 00:0909 23 -  -  -  		inc 	hl
   25 00:090A 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:090C -  -  -  -  
   27 00:090C -  -  -  -  ; ***************************************************************************************
   28 00:090C -  -  -  -  ;
   29 00:090C -  -  -  -  ;									Changes and Updates
   30 00:090C -  -  -  -  ;
   31 00:090C -  -  -  -  ; ***************************************************************************************
   32 00:090C -  -  -  -  ;
   33 00:090C -  -  -  -  ;		Date			Notes
   34 00:090C -  -  -  -  ;		==== 			=====
   35 00:090C -  -  -  -  ;
   36 00:090C -  -  -  -  ; ***************************************************************************************
   37 00:090C -  -  -  -  		
Listing for file "_build.asm"
   53 00:090C -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:090C -  -  -  -  ; ***************************************************************************************
    2 00:090C -  -  -  -  ; ***************************************************************************************
    3 00:090C -  -  -  -  ;
    4 00:090C -  -  -  -  ;		Name : 		create.asm
    5 00:090C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:090C -  -  -  -  ;		Date : 		4th June 2022
    7 00:090C -  -  -  -  ;		Reviewed :	No
    8 00:090C -  -  -  -  ;		Purpose :	Create a variable.
    9 00:090C -  -  -  -  ;
   10 00:090C -  -  -  -  ; ***************************************************************************************
   11 00:090C -  -  -  -  ; ***************************************************************************************
   12 00:090C -  -  -  -  
   13 00:090C -  -  -  -  ; ***************************************************************************************
   14 00:090C -  -  -  -  ;
   15 00:090C -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:090C -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:090C -  -  -  -  ;
   18 00:090C -  -  -  -  ; ***************************************************************************************
   19 00:090C -  -  -  -  
   20 00:090C -  -  -  -  VariableCreate:		
   21 00:090C -  -  -  -  		;
   22 00:090C -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:090C -  -  -  -  		;
   24 00:090C 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:0910 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:0911 E5 -  -  -  		push 	hl 							; save count.
   27 00:0912 CD 71 08 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0916 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0917 -  -  -  -  		;
   30 00:0917 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0917 -  -  -  -  		;
   32 00:0917 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0918 -  -  -  -  _VCClear:
   34 00:0918 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:091A 23 -  -  -  		inc 	hl
   36 00:091B 0B -  -  -  		dec 	bc
   37 00:091C 78 -  -  -  		ld		a,b
   38 00:091D B1 -  -  -  		or 		c
   39 00:091E 20 F8 -  -  		jr 		nz,_VCClear
   40 00:0920 E1 -  -  -  		pop 	hl							; restore start address
   41 00:0921 -  -  -  -  		;
   42 00:0921 -  -  -  -  		;		Now start to create the data.
   43 00:0921 -  -  -  -  		;
   44 00:0921 E5 -  -  -  		push 	hl 							; save start
   45 00:0922 -  -  -  -  		;
   46 00:0922 -  -  -  -  		;		Write hash to +0
   47 00:0922 -  -  -  -  		;
   48 00:0922 3A 84 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0926 77 -  -  -  		ld 		(hl),a
   50 00:0927 23 -  -  -  		inc 	hl
   51 00:0928 -  -  -  -  		;
   52 00:0928 -  -  -  -  		;		Write list head to +1
   53 00:0928 -  -  -  -  		;
   54 00:0928 E5 -  -  -  		push 	hl 							; save write position
   55 00:0929 2A 86 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:092D ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:092F EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:0930 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:0931 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0937 -  -  -  -  		;
   61 00:0937 -  -  -  -  		;		Write variable name to +5
   62 00:0937 -  -  -  -  		;
   63 00:0937 ED 5B 80 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:093C ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:0942 -  -  -  -  		;
   66 00:0942 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:0943 2A 86 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0947 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:094D -  -  -  -  		;
   70 00:094D EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:094E C9 -  -  -  		ret
   72 00:094F -  -  -  -  
   73 00:094F -  -  -  -  ; ***************************************************************************************
   74 00:094F -  -  -  -  ;
   75 00:094F -  -  -  -  ;									Changes and Updates
   76 00:094F -  -  -  -  ;
   77 00:094F -  -  -  -  ; ***************************************************************************************
   78 00:094F -  -  -  -  ;
   79 00:094F -  -  -  -  ;		Date			Notes
   80 00:094F -  -  -  -  ;		==== 			=====
   81 00:094F -  -  -  -  ;
   82 00:094F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:094F -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:094F -  -  -  -  ; ***************************************************************************************
    2 00:094F -  -  -  -  ; ***************************************************************************************
    3 00:094F -  -  -  -  ;
    4 00:094F -  -  -  -  ;		Name : 		find.asm
    5 00:094F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:094F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:094F -  -  -  -  ;		Reviewed :	No
    8 00:094F -  -  -  -  ;		Purpose :	Find a variable.
    9 00:094F -  -  -  -  ;
   10 00:094F -  -  -  -  ; ***************************************************************************************
   11 00:094F -  -  -  -  ; ***************************************************************************************
   12 00:094F -  -  -  -  
   13 00:094F -  -  -  -  ; ***************************************************************************************
   14 00:094F -  -  -  -  ;
   15 00:094F -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:094F -  -  -  -  ; 		variable information at (IX)
   17 00:094F -  -  -  -  ;
   18 00:094F -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:094F -  -  -  -  ;		Don't autocreate arrays.
   20 00:094F -  -  -  -  ;
   21 00:094F -  -  -  -  ; ***************************************************************************************
   22 00:094F -  -  -  -  
   23 00:094F -  -  -  -  FindVariable:
   24 00:094F DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0952 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0954 D2 C2 03 00 		jp 		nc,SyntaxError 		
   27 00:0958 -  -  -  -  
   28 00:0958 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:095B FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:095D 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:095F FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0961 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0963 -  -  -  -  		;
   34 00:0963 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0963 -  -  -  -  		;
   36 00:0963 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0967 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:096A 87 -  -  -  		add 	a,a 						; x4
   39 00:096B 87 -  -  -  		add 	a,a
   40 00:096C B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:096D 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:096E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0970 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0972 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:0974 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:0975 C9 -  -  -  		ret
   47 00:0976 -  -  -  -  		;
   48 00:0976 -  -  -  -  		;		Not a standard simple variable.
   49 00:0976 -  -  -  -  		;
   50 00:0976 -  -  -  -  _FVNotSimple:
   51 00:0976 CD DC 09 00 		call 	VariableInformation 		; get information about the variable.
   52 00:097A CD 18 0A 00 		call 	VariableSearchList 			; search the linked list
   53 00:097E 38 14 -  -  		jr 		c,_FVNotFound  				
   54 00:0980 -  -  -  -  		;
   55 00:0980 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0980 -  -  -  -  		;
   57 00:0980 -  -  -  -  _FVExitReference:		
   58 00:0980 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:0984 19 -  -  -  		add 	hl,de 
   60 00:0985 -  -  -  -  		;
   61 00:0985 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:0985 -  -  -  -  		;
   63 00:0985 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:0988 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:098A CC B3 09 00 		call 	z,ArrayLookup 				; array access required.
   66 00:098E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:0990 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:0992 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:0993 C9 -  -  -  		ret
   70 00:0994 -  -  -  -  		;
   71 00:0994 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:0994 -  -  -  -  		;
   73 00:0994 -  -  -  -  _FVNotFound:		
   74 00:0994 3A 7C 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:0998 B7 -  -  -  		or 		a
   76 00:0999 28 11 -  -  		jr 		z,_FVFail
   77 00:099B DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:099E FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:09A0 28 0A -  -  		jr 		z,_FVFail
   80 00:09A2 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 00:09A6 CD 0C 09 00 		call 	VariableCreate 				; create a new variable.
   82 00:09AA 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:09AC -  -  -  -  
   84 00:09AC -  -  -  -  _FVFail:
   85 00:09AC DD 2A 80 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:09B1 37 -  -  -  		scf
   87 00:09B2 C9 -  -  -  		ret
   88 00:09B3 -  -  -  -  
   89 00:09B3 -  -  -  -  ; ***************************************************************************************
   90 00:09B3 -  -  -  -  ;
   91 00:09B3 -  -  -  -  ;									 Array lookup
   92 00:09B3 -  -  -  -  ;
   93 00:09B3 -  -  -  -  ; ***************************************************************************************
   94 00:09B3 -  -  -  -  
   95 00:09B3 -  -  -  -  ArrayLookup:
   96 00:09B3 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:09B4 CD 65 05 00 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:09B8 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:09B9 7C -  -  -  		ld 		a,h
  100 00:09BA B5 -  -  -  		or 		l
  101 00:09BB D9 -  -  -  		exx
  102 00:09BC 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:09BE 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:09C2 54 -  -  -  		ld 		d,h
  105 00:09C3 5D -  -  -  		ld 		e,l
  106 00:09C4 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:09C5 E5 -  -  -  		push 	hl
  108 00:09C6 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:09C8 AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:09C9 ED 52 -  -  		sbc 	hl,de
  111 00:09CB DA D6 09 00 		jp 		c,_ALBadValue 				; if max < index then error
  112 00:09CF EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:09D0 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:09D1 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:09D2 29 -  -  -  		add 	hl,hl
  116 00:09D3 D1 -  -  -  		pop 	de 							; get array base back
  117 00:09D4 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:09D5 C9 -  -  -  		ret
  119 00:09D6 -  -  -  -  
  120 00:09D6 -  -  -  -  _ALBadValue:
  121 00:09D6 3E 07 C3 58 
              03 00 -  -  		ERR_INDEX
  122 00:09DC -  -  -  -  		
  123 00:09DC -  -  -  -  ; ***************************************************************************************
  124 00:09DC -  -  -  -  ;
  125 00:09DC -  -  -  -  ;									Changes and Updates
  126 00:09DC -  -  -  -  ;
  127 00:09DC -  -  -  -  ; ***************************************************************************************
  128 00:09DC -  -  -  -  ;
  129 00:09DC -  -  -  -  ;		Date			Notes
  130 00:09DC -  -  -  -  ;		==== 			=====
  131 00:09DC -  -  -  -  ;
  132 00:09DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:09DC -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:09DC -  -  -  -  ; ***************************************************************************************
    2 00:09DC -  -  -  -  ; ***************************************************************************************
    3 00:09DC -  -  -  -  ;
    4 00:09DC -  -  -  -  ;		Name : 		info.asm
    5 00:09DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09DC -  -  -  -  ;		Date : 		4th June 2022
    7 00:09DC -  -  -  -  ;		Reviewed :	No
    8 00:09DC -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:09DC -  -  -  -  ;
   10 00:09DC -  -  -  -  ; ***************************************************************************************
   11 00:09DC -  -  -  -  ; ***************************************************************************************
   12 00:09DC -  -  -  -  
   13 00:09DC -  -  -  -  ; ***************************************************************************************
   14 00:09DC -  -  -  -  ;
   15 00:09DC -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:09DC -  -  -  -  ; 		after the identifier.
   17 00:09DC -  -  -  -  ;
   18 00:09DC -  -  -  -  ; ***************************************************************************************
   19 00:09DC -  -  -  -  
   20 00:09DC -  -  -  -  VariableInformation:
   21 00:09DC DD 22 80 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:09E1 -  -  -  -  		;
   23 00:09E1 -  -  -  -  		; 		Calculate hash, find end.
   24 00:09E1 -  -  -  -  		;
   25 00:09E1 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:09E3 -  -  -  -  _VICalculateHash:
   27 00:09E3 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:09E6 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:09E8 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:09EA 80 -  -  -  		add 	a,b 						; add to hash
   31 00:09EB 07 -  -  -  		rlca
   32 00:09EC 07 -  -  -  		rlca
   33 00:09ED 80 -  -  -  		add 	a,b
   34 00:09EE 47 -  -  -  		ld 		b,a 						; update hash
   35 00:09EF DD 23 -  -  		inc 	ix 							; next character
   36 00:09F1 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:09F3 -  -  -  -  		;
   38 00:09F3 -  -  -  -  _VIHashDone:
   39 00:09F3 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:09F4 -  -  -  -  		;
   41 00:09F4 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:09F4 -  -  -  -  		;
   43 00:09F4 32 84 00 00 		ld 		(VarHash),a
   44 00:09F8 -  -  -  -  		;
   45 00:09F8 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:09F8 -  -  -  -  		;		
   47 00:09F8 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:09FA 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:09FE 6F -  -  -  		ld 		l,a
   50 00:09FF 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0A00 29 -  -  -  		add 	hl,hl
   52 00:0A01 -  -  -  -  		;
   53 00:0A01 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0A06 19 -  -  -  		add 	hl,de
   55 00:0A07 -  -  -  -  		;
   56 00:0A07 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0A0A FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0A0C 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0A0E 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0A12 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0A13 -  -  -  -  _VINotArray:
   62 00:0A13 22 86 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0A17 C9 -  -  -  		ret
   64 00:0A18 -  -  -  -  
   65 00:0A18 -  -  -  -  ; ***************************************************************************************
   66 00:0A18 -  -  -  -  ;
   67 00:0A18 -  -  -  -  ;									Changes and Updates
   68 00:0A18 -  -  -  -  ;
   69 00:0A18 -  -  -  -  ; ***************************************************************************************
   70 00:0A18 -  -  -  -  ;
   71 00:0A18 -  -  -  -  ;		Date			Notes
   72 00:0A18 -  -  -  -  ;		==== 			=====
   73 00:0A18 -  -  -  -  ;
   74 00:0A18 -  -  -  -  ; ***************************************************************************************
   75 00:0A18 -  -  -  -  
Listing for file "_build.asm"
   56 00:0A18 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0A18 -  -  -  -  ; ***************************************************************************************
    2 00:0A18 -  -  -  -  ; ***************************************************************************************
    3 00:0A18 -  -  -  -  ;
    4 00:0A18 -  -  -  -  ;		Name : 		search.asm
    5 00:0A18 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A18 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0A18 -  -  -  -  ;		Reviewed :	No
    8 00:0A18 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0A18 -  -  -  -  ;
   10 00:0A18 -  -  -  -  ; ***************************************************************************************
   11 00:0A18 -  -  -  -  ; ***************************************************************************************
   12 00:0A18 -  -  -  -  
   13 00:0A18 -  -  -  -  ; ***************************************************************************************
   14 00:0A18 -  -  -  -  ;
   15 00:0A18 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0A18 -  -  -  -  ;		CS if failed.
   17 00:0A18 -  -  -  -  ;
   18 00:0A18 -  -  -  -  ; ***************************************************************************************
   19 00:0A18 -  -  -  -  
   20 00:0A18 -  -  -  -  VariableSearchList:
   21 00:0A18 2A 86 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0A1C -  -  -  -  		;
   23 00:0A1C -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0A1C -  -  -  -  		;		the address of the hash record
   25 00:0A1C -  -  -  -  		;
   26 00:0A1C -  -  -  -  _VSLLoop:
   27 00:0A1C ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0A1E -  -  -  -  		;
   29 00:0A1E E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0A1F AF -  -  -  		xor 	a
   31 00:0A20 ED 6A -  -  		adc 	hl,hl
   32 00:0A22 E1 -  -  -  		pop 	hl
   33 00:0A23 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0A25 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0A26 C8 -  -  -  		ret 	z
   36 00:0A27 -  -  -  -  _VSLRecord:
   37 00:0A27 -  -  -  -  		;
   38 00:0A27 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0A27 -  -  -  -  		;
   40 00:0A27 3A 84 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0A2B BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0A2C 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0A2D 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0A2F -  -  -  -  		;
   45 00:0A2F -  -  -  -  		;		Now check the name
   46 00:0A2F -  -  -  -  		;
   47 00:0A2F E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:0A30 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:0A31 23 -  -  -  		inc 	hl
   50 00:0A32 23 -  -  -  		inc 	hl
   51 00:0A33 23 -  -  -  		inc 	hl
   52 00:0A34 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0A36 ED 5B 80 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0A3B -  -  -  -  		;
   55 00:0A3B -  -  -  -  		;		Check individual characters
   56 00:0A3B -  -  -  -  		;
   57 00:0A3B -  -  -  -  _VSLCharacter:
   58 00:0A3B 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0A3C FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0A3E 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:0A40 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:0A41 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:0A42 13 -  -  -  		inc 	de
   64 00:0A43 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:0A45 -  -  -  -  		;
   66 00:0A45 -  -  -  -  _VSLFailed:
   67 00:0A45 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0A46 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0A48 -  -  -  -  		;
   70 00:0A48 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0A48 -  -  -  -  		;		
   72 00:0A48 -  -  -  -  _VSLEndIdentifier:
   73 00:0A48 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0A49 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0A4B 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0A4D -  -  -  -  		;
   77 00:0A4D E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0A4E 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0A4F AF -  -  -  		xor 	a 							; clear carry
   80 00:0A50 C9 -  -  -  		ret
   81 00:0A51 -  -  -  -  
   82 00:0A51 -  -  -  -  ; ***************************************************************************************
   83 00:0A51 -  -  -  -  ;
   84 00:0A51 -  -  -  -  ;									Changes and Updates
   85 00:0A51 -  -  -  -  ;
   86 00:0A51 -  -  -  -  ; ***************************************************************************************
   87 00:0A51 -  -  -  -  ;
   88 00:0A51 -  -  -  -  ;		Date			Notes
   89 00:0A51 -  -  -  -  ;		==== 			=====
   90 00:0A51 -  -  -  -  ;
   91 00:0A51 -  -  -  -  ; ***************************************************************************************
   92 00:0A51 -  -  -  -  		
Listing for file "_build.asm"
   57 00:0A51 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0A51 -  -  -  -  ;
    2 00:0A51 -  -  -  -  ;	This file is automatically generated.
    3 00:0A51 -  -  -  -  ;
    4 00:0A51 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:0A60 -  -  -  -  PrecedenceTable:
    6 00:0A60 06 -  -  -  	.db	6	; $0083 !
    7 00:0A61 06 -  -  -  	.db	6	; $0084 ?
    8 00:0A62 05 -  -  -  	.db	5	; $0085 *
    9 00:0A63 05 -  -  -  	.db	5	; $0086 /
   10 00:0A64 05 -  -  -  	.db	5	; $0087 mod
   11 00:0A65 05 -  -  -  	.db	5	; $0088 div
   12 00:0A66 04 -  -  -  	.db	4	; $0089 +
   13 00:0A67 04 -  -  -  	.db	4	; $008a -
   14 00:0A68 03 -  -  -  	.db	3	; $008b >=
   15 00:0A69 03 -  -  -  	.db	3	; $008c <=
   16 00:0A6A 03 -  -  -  	.db	3	; $008d >
   17 00:0A6B 03 -  -  -  	.db	3	; $008e <
   18 00:0A6C 03 -  -  -  	.db	3	; $008f =
   19 00:0A6D 03 -  -  -  	.db	3	; $0090 <>
   20 00:0A6E 02 -  -  -  	.db	2	; $0091 and
   21 00:0A6F 01 -  -  -  	.db	1	; $0092 or
   22 00:0A70 01 -  -  -  	.db	1	; $0093 eor
   23 00:0A71 -  -  -  -  
Listing for file "_build.asm"
   58 00:0A71 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0A71 -  -  -  -  ;
    2 00:0A71 -  -  -  -  ;	This is automatically generated.
    3 00:0A71 -  -  -  -  ;
    4 00:0A71 -  -  -  -  ErrorIDTable:
    5 00:0A71 B9 0A 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0A75 BF 0A 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0A79 D0 0A 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0A7D DE 0A 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0A81 E8 0A 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:0A85 F2 0A 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:0A89 0C 0B 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:0A8D 1D 0B 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 00:0A91 2D 0B 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   14 00:0A95 3B 0B 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   15 00:0A99 49 0B 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   16 00:0A9D 53 0B 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   17 00:0AA1 68 0B 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   18 00:0AA5 7E 0B 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   19 00:0AA9 8C 0B 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   20 00:0AAD 91 0B 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   21 00:0AB1 9E 0B 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   22 00:0AB5 AF 0B 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   23 00:0AB9 -  -  -  -  
   24 00:0AB9 -  -  -  -  ErrText_warmstart:
   25 00:0AB9 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   26 00:0ABF -  -  -  -  ErrText_assert:
   27 00:0ABF 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   28 00:0AD0 -  -  -  -  ErrText_badtype:
   29 00:0AD0 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   30 00:0ADE -  -  -  -  ErrText_badvalue:
   31 00:0ADE 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   32 00:0AE8 -  -  -  -  ErrText_dim:
   33 00:0AE8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   34 00:0AF2 -  -  -  -  ErrText_disabled:
   35 00:0AF2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   36 00:0B0C -  -  -  -  ErrText_divzero:
   37 00:0B0C 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   38 00:0B1D -  -  -  -  ErrText_index:
   39 00:0B1D 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   40 00:0B2D -  -  -  -  ErrText_memory:
   41 00:0B2D 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   42 00:0B3B -  -  -  -  ErrText_nocomma:
   43 00:0B3B 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   44 00:0B49 -  -  -  -  ErrText_nodollar:
   45 00:0B49 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   46 00:0B53 -  -  -  -  ErrText_nolbracket:
   47 00:0B53 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   48 00:0B68 -  -  -  -  ErrText_norbracket:
   49 00:0B68 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   50 00:0B7E -  -  -  -  ErrText_notref:
   51 00:0B7E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   52 00:0B8C -  -  -  -  ErrText_stop:
   53 00:0B8C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   54 00:0B91 -  -  -  -  ErrText_syntax:
   55 00:0B91 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   56 00:0B9E -  -  -  -  ErrText_todo:
   57 00:0B9E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   58 00:0BAF -  -  -  -  ErrText_unknownvar:
   59 00:0BAF 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:0BC0 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0BC0 -  -  -  -  ;
    2 00:0BC0 -  -  -  -  ;	Vectors for set 0
    3 00:0BC0 -  -  -  -  ;
    4 00:0BC0 -  -  -  -  VectorsSet0:
    5 00:0BC0 A8 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0BC4 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0BC8 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0BCC 38 04 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0BD0 41 04 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0BD4 E4 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0BD8 F2 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0BDC 00 04 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0BE0 F2 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0BE4 C8 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0BE8 D6 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0BEC 9F 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0BF0 95 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0BF4 81 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0BF8 77 04 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0BFC 6D 04 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0C00 8B 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0C04 0E 04 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0C08 1C 04 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0C0C 2A 04 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0C10 11 08 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0C14 09 08 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0C18 2B 07 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0C1C 58 07 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0C20 1A 07 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0C24 F0 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0C28 EF 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0C2C 20 08 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0C30 06 07 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0C34 FD 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0C38 36 07 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0C3C 4B 07 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0C40 48 08 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0C44 4F 08 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0C48 5C 08 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0C4C 5F 04 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0C50 63 04 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0C54 ED 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0C58 ED 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0C5C F1 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0C60 ED 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0C64 7E 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0C68 24 00 00 00 	addr(Unimplemented)              ; $00aa [
   48 00:0C6C 24 00 00 00 	addr(Unimplemented)              ; $00ab ]
   49 00:0C70 ED 00 00 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 00:0C74 24 00 00 00 	addr(Unimplemented)              ; $00ad repeat
   51 00:0C78 24 00 00 00 	addr(Unimplemented)              ; $00ae until
   52 00:0C7C 24 00 00 00 	addr(Unimplemented)              ; $00af if
   53 00:0C80 ED 00 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:0C84 24 00 00 00 	addr(Unimplemented)              ; $00b1 else
   55 00:0C88 24 00 00 00 	addr(Unimplemented)              ; $00b2 for
   56 00:0C8C ED 00 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:0C90 24 00 00 00 	addr(Unimplemented)              ; $00b4 step
   58 00:0C94 24 00 00 00 	addr(Unimplemented)              ; $00b5 next
   59 00:0C98 24 00 00 00 	addr(Unimplemented)              ; $00b6 def
   60 00:0C9C 24 00 00 00 	addr(Unimplemented)              ; $00b7 proc
   61 00:0CA0 24 00 00 00 	addr(Unimplemented)              ; $00b8 endproc
   62 00:0CA4 24 00 00 00 	addr(Unimplemented)              ; $00b9 gosub
   63 00:0CA8 24 00 00 00 	addr(Unimplemented)              ; $00ba return
   64 00:0CAC 24 00 00 00 	addr(Unimplemented)              ; $00bb goto
   65 00:0CB0 24 00 00 00 	addr(Unimplemented)              ; $00bc local
   66 00:0CB4 F2 00 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:0CB8 7E 02 00 00 	addr(Command_REM)                ; $00be rem
   68 00:0CBC BF 01 00 00 	addr(Command_LET)                ; $00bf let
   69 00:0CC0 24 00 00 00 	addr(Unimplemented)              ; $00c0 vdu
   70 00:0CC4 13 02 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:0CC8 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:0CCC 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:0CD0 24 00 00 00 	addr(Unimplemented)              ; $00c4 list
   74 00:0CD4 F1 08 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:0CD8 9B 02 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:0CDC 24 00 00 00 	addr(Unimplemented)              ; $00c7 read
   77 00:0CE0 24 00 00 00 	addr(Unimplemented)              ; $00c8 data
   78 00:0CE4 24 00 00 00 	addr(Unimplemented)              ; $00c9 restore
   79 00:0CE8 DC 00 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:0CEC 93 08 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:0CF0 A2 01 00 00 	addr(Command_END)                ; $00cc end
   82 00:0CF4 0E 03 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:0CF8 -  -  -  -  ;
   84 00:0CF8 -  -  -  -  ;	Vectors for set 1
   85 00:0CF8 -  -  -  -  ;
   86 00:0CF8 -  -  -  -  VectorsSet1:
   87 00:0CF8 -  -  -  -  ;
   88 00:0CF8 -  -  -  -  ;	Vectors for set 2
   89 00:0CF8 -  -  -  -  ;
   90 00:0CF8 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:0CF8 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0CF8 -  -  -  -  ; ***************************************************************************************
    2 00:0CF8 -  -  -  -  ; ***************************************************************************************
    3 00:0CF8 -  -  -  -  ;
    4 00:0CF8 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0CF8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CF8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CF8 -  -  -  -  ;		Reviewed :	No
    8 00:0CF8 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0CF8 -  -  -  -  ;
   10 00:0CF8 -  -  -  -  ; ***************************************************************************************
   11 00:0CF8 -  -  -  -  ; ***************************************************************************************
   12 00:0CF8 -  -  -  -  
   13 00:0CF8 -  -  -  -  ; ***************************************************************************************
   14 00:0CF8 -  -  -  -  ;
   15 00:0CF8 -  -  -  -  ;								Unsigned integer divide
   16 00:0CF8 -  -  -  -  ;
   17 00:0CF8 -  -  -  -  ; ***************************************************************************************
   18 00:0CF8 -  -  -  -  
   19 00:0CF8 -  -  -  -  Int32UDivide:
   20 00:0CF8 37 -  -  -  		scf
   21 00:0CF9 C3 3D 0D 00 		jp 		_I32UnsignedDivide		
   22 00:0CFD -  -  -  -  
   23 00:0CFD -  -  -  -  ; ***************************************************************************************
   24 00:0CFD -  -  -  -  ;
   25 00:0CFD -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0CFD -  -  -  -  ;
   27 00:0CFD -  -  -  -  ; ***************************************************************************************
   28 00:0CFD -  -  -  -  
   29 00:0CFD -  -  -  -  Int32SDivide:
   30 00:0CFD 37 -  -  -  		scf
   31 00:0CFE 18 01 -  -  		jr 		_I32SDivide
   32 00:0D00 -  -  -  -  Int32Modulus:
   33 00:0D00 AF -  -  -  		xor 	a
   34 00:0D01 -  -  -  -  _I32SDivide:
   35 00:0D01 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0D02 F5 -  -  -  		push 	af
   37 00:0D03 08 -  -  -  		ex 		af,af'
   38 00:0D04 -  -  -  -  
   39 00:0D04 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0D05 D9 -  -  -  		exx
   41 00:0D06 D5 -  -  -  		push 	de
   42 00:0D07 D9 -  -  -  		exx
   43 00:0D08 -  -  -  -  
   44 00:0D08 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0D09 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0D0A CD 2A 0D 00 		call 	_I32CheckHLSignSwap
   47 00:0D0E CD 2A 0D 00 		call 	_I32CheckHLSignSwap
   48 00:0D12 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0D13 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0D14 F5 -  -  -  		push 	af
   51 00:0D15 CD 3D 0D 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0D19 F1 -  -  -  		pop 	af 							; get function back
   53 00:0D1A 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0D1C 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0D1D CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0D1F C4 A0 0E 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0D23 -  -  -  -  _I32SDExit:
   58 00:0D23 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0D24 D1 -  -  -  		pop 	de
   60 00:0D25 D9 -  -  -  		exx
   61 00:0D26 D1 -  -  -  		pop 	de
   62 00:0D27 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0D28 08 -  -  -  		ex 		af,af'
   64 00:0D29 C9 -  -  -  		ret
   65 00:0D2A -  -  -  -  
   66 00:0D2A -  -  -  -  
   67 00:0D2A -  -  -  -  _I32CheckHLSignSwap:
   68 00:0D2A D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0D2B CB 7C -  -  		bit 	7,h
   70 00:0D2D D9 -  -  -  		exx
   71 00:0D2E 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0D30 -  -  -  -  		;
   73 00:0D30 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0D32 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0D33 CD A0 0E 00 		call 	Int32Negate 				
   76 00:0D37 F1 -  -  -  		pop 	af
   77 00:0D38 -  -  -  -  _I32CHSPositive:
   78 00:0D38 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0D39 EB -  -  -  		ex 		de,hl
   80 00:0D3A D9 -  -  -  		exx		
   81 00:0D3B EB -  -  -  		ex 		de,hl
   82 00:0D3C C9 -  -  -  		ret
   83 00:0D3D -  -  -  -  
   84 00:0D3D -  -  -  -  ; ***************************************************************************************
   85 00:0D3D -  -  -  -  ;
   86 00:0D3D -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0D3D -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0D3D -  -  -  -  ;
   89 00:0D3D -  -  -  -  ; ***************************************************************************************
   90 00:0D3D -  -  -  -  
   91 00:0D3D -  -  -  -  _I32UnsignedDivide:
   92 00:0D3D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0D3E D5 -  -  -  		push 	de
   94 00:0D3F D9 -  -  -  		exx
   95 00:0D40 C5 -  -  -  		push 	bc
   96 00:0D41 D5 -  -  -  		push 	de 							
   97 00:0D42 D9 -  -  -  		exx
   98 00:0D43 -  -  -  -  
   99 00:0D43 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0D44 -  -  -  -  
  101 00:0D44 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0D45 B3 -  -  -  		or 		e
  103 00:0D46 D9 -  -  -  		exx
  104 00:0D47 B2 -  -  -  		or 		d
  105 00:0D48 B3 -  -  -  		or 		e
  106 00:0D49 D9 -  -  -  		exx
  107 00:0D4A CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0D4E -  -  -  -  
  109 00:0D4E -  -  -  -  
  110 00:0D4E 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0D4F 4D -  -  -  		ld		c,l
  112 00:0D50 21 00 00 00 		ld 		hl,$0000
  113 00:0D54 D9 -  -  -  		exx
  114 00:0D55 44 -  -  -  		ld 		b,h
  115 00:0D56 4D -  -  -  		ld		c,l
  116 00:0D57 21 00 00 00 		ld 		hl,$0000
  117 00:0D5B D9 -  -  -  		exx
  118 00:0D5C -  -  -  -  
  119 00:0D5C 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0D5E -  -  -  -  _I32DivideLoop:
  121 00:0D5E F5 -  -  -  		push 	af
  122 00:0D5F -  -  -  -  
  123 00:0D5F CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0D61 CB 10 -  -  		rl 		b
  125 00:0D63 D9 -  -  -  		exx
  126 00:0D64 CB 11 -  -  		rl 		c
  127 00:0D66 CB 10 -  -  		rl 		b
  128 00:0D68 D9 -  -  -  		exx
  129 00:0D69 CB 15 -  -  		rl 		l
  130 00:0D6B CB 14 -  -  		rl 		h
  131 00:0D6D D9 -  -  -  		exx
  132 00:0D6E CB 15 -  -  		rl 		l
  133 00:0D70 CB 14 -  -  		rl 		h
  134 00:0D72 D9 -  -  -  		exx
  135 00:0D73 -  -  -  -  
  136 00:0D73 CD 3E 0E 00 		call 	Int32Subtract 				; A = A - M
  137 00:0D77 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0D79 -  -  -  -  
  139 00:0D79 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0D7A 18 04 -  -  		jr 		_I32Next
  141 00:0D7C -  -  -  -  
  142 00:0D7C -  -  -  -  _I32Borrow:
  143 00:0D7C CD 36 0E 00 		call 	Int32Add 					; A = A + M
  144 00:0D80 -  -  -  -  _I32Next:
  145 00:0D80 F1 -  -  -  		pop 	af
  146 00:0D81 3D -  -  -  		dec 	a
  147 00:0D82 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0D84 -  -  -  -  
  149 00:0D84 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0D85 -  -  -  -  
  151 00:0D85 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0D86 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0D88 -  -  -  -  
  154 00:0D88 60 -  -  -  		ld  	h,b
  155 00:0D89 69 -  -  -  		ld 		l,c
  156 00:0D8A D9 -  -  -  		exx
  157 00:0D8B 60 -  -  -  		ld  	h,b
  158 00:0D8C 69 -  -  -  		ld 		l,c
  159 00:0D8D D9 -  -  -  		exx
  160 00:0D8E -  -  -  -  _I32Modulus1:		
  161 00:0D8E D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0D8F D1 -  -  -  		pop 	de
  163 00:0D90 C1 -  -  -  		pop 	bc
  164 00:0D91 D9 -  -  -  		exx
  165 00:0D92 D1 -  -  -  		pop 	de
  166 00:0D93 C1 -  -  -  		pop 	bc
  167 00:0D94 C9 -  -  -  		ret
  168 00:0D95 -  -  -  -  
  169 00:0D95 -  -  -  -  ; ***************************************************************************************
  170 00:0D95 -  -  -  -  ;
  171 00:0D95 -  -  -  -  ;									Changes and Updates
  172 00:0D95 -  -  -  -  ;
  173 00:0D95 -  -  -  -  ; ***************************************************************************************
  174 00:0D95 -  -  -  -  ;
  175 00:0D95 -  -  -  -  ;		Date			Notes
  176 00:0D95 -  -  -  -  ;		==== 			=====
  177 00:0D95 -  -  -  -  ;
  178 00:0D95 -  -  -  -  ; ***************************************************************************************
  179 00:0D95 -  -  -  -  		
Listing for file "_build.asm"
   61 00:0D95 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0D95 -  -  -  -  ; ***************************************************************************************
    2 00:0D95 -  -  -  -  ; ***************************************************************************************
    3 00:0D95 -  -  -  -  ;
    4 00:0D95 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0D95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D95 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D95 -  -  -  -  ;		Reviewed :	No
    8 00:0D95 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0D95 -  -  -  -  ;
   10 00:0D95 -  -  -  -  ; ***************************************************************************************
   11 00:0D95 -  -  -  -  ; ***************************************************************************************
   12 00:0D95 -  -  -  -  
   13 00:0D95 -  -  -  -  ; ***************************************************************************************
   14 00:0D95 -  -  -  -  ;
   15 00:0D95 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0D95 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0D95 -  -  -  -  ;
   18 00:0D95 -  -  -  -  ; ***************************************************************************************
   19 00:0D95 -  -  -  -  
   20 00:0D95 -  -  -  -  Int32FromString:
   21 00:0D95 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0D96 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0D97 D5 -  -  -  		push 	de
   24 00:0D98 D9 -  -  -  		exx
   25 00:0D99 D5 -  -  -  		push 	de
   26 00:0D9A -  -  -  -  
   27 00:0D9A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0D9E 11 00 00 00 		ld 		de,$0000
   29 00:0DA2 D9 -  -  -  		exx
   30 00:0DA3 21 00 00 00 		ld 		hl,$0000
   31 00:0DA7 11 00 00 00 		ld 		de,$0000
   32 00:0DAB D9 -  -  -  		exx
   33 00:0DAC -  -  -  -  
   34 00:0DAC 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0DAD CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0DAF 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0DB1 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0DB3 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0DB4 -  -  -  -  		;
   40 00:0DB4 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0DB5 F5 -  -  -  		push 	af
   42 00:0DB6 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0DB8 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0DB9 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0DBB 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0DBC 18 01 -  -  		jr 		_I32FSMain
   47 00:0DBE -  -  -  -  _I32FSNotSigned:		
   48 00:0DBE E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0DBF -  -  -  -  		;
   50 00:0DBF -  -  -  -  		; 		Main conversion loop.
   51 00:0DBF -  -  -  -  		; 		
   52 00:0DBF -  -  -  -  _I32FSMain:		
   53 00:0DBF 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0DC0 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0DC2 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0DC4 D6 20 -  -  		sub 	32
   57 00:0DC6 -  -  -  -  _I32FSNotLower:
   58 00:0DC6 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0DC8 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0DCA FE 3A -  -  		cp 		'9'+1
   61 00:0DCC 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0DCE FE 41 -  -  		cp 		'A'
   63 00:0DD0 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0DD2 FE 47 -  -  		cp 		'F'+1
   65 00:0DD4 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0DD6 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0DD8 -  -  -  -  _I32FSOkay:
   68 00:0DD8 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0DDA BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0DDB 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0DDD 03 -  -  -  		inc 	bc 							; consume character
   72 00:0DDE D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0DDF F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0DE0 CD FD 0D 00 		call 	Int32Multiply 				; result *= base
   75 00:0DE4 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0DE5 5F -  -  -  		ld 		e,a
   77 00:0DE6 CD 36 0E 00 		call 	Int32Add 					; and add it.
   78 00:0DEA D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0DEB 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0DED -  -  -  -  
   81 00:0DED -  -  -  -  _I32FSExit:
   82 00:0DED F1 -  -  -  		pop 	af 							; get sign back
   83 00:0DEE FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0DF0 CC A0 0E 00 		call 	z,Int32Negate
   85 00:0DF4 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0DF5 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0DF6 D9 -  -  -  		exx
   88 00:0DF7 D1 -  -  -  		pop 	de
   89 00:0DF8 D9 -  -  -  		exx
   90 00:0DF9 C1 -  -  -  		pop 	bc
   91 00:0DFA FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0DFC C9 -  -  -  		ret				
   93 00:0DFD -  -  -  -  
   94 00:0DFD -  -  -  -  ; ***************************************************************************************
   95 00:0DFD -  -  -  -  ;
   96 00:0DFD -  -  -  -  ;									Changes and Updates
   97 00:0DFD -  -  -  -  ;
   98 00:0DFD -  -  -  -  ; ***************************************************************************************
   99 00:0DFD -  -  -  -  ;
  100 00:0DFD -  -  -  -  ;		Date			Notes
  101 00:0DFD -  -  -  -  ;		==== 			=====
  102 00:0DFD -  -  -  -  ;
  103 00:0DFD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0DFD -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0DFD -  -  -  -  ; ***************************************************************************************
    2 00:0DFD -  -  -  -  ; ***************************************************************************************
    3 00:0DFD -  -  -  -  ;
    4 00:0DFD -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0DFD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DFD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DFD -  -  -  -  ;		Reviewed :	No
    8 00:0DFD -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0DFD -  -  -  -  ;
   10 00:0DFD -  -  -  -  ; ***************************************************************************************
   11 00:0DFD -  -  -  -  ; ***************************************************************************************
   12 00:0DFD -  -  -  -  
   13 00:0DFD -  -  -  -  Int32Multiply:
   14 00:0DFD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0DFE D5 -  -  -  		push 	de
   16 00:0DFF 44 -  -  -  		ld 		b,h
   17 00:0E00 4D -  -  -  		ld 		c,l
   18 00:0E01 21 00 00 00 		ld 		hl,$0000
   19 00:0E05 -  -  -  -  
   20 00:0E05 D9 -  -  -  		exx
   21 00:0E06 C5 -  -  -  		push 	bc
   22 00:0E07 D5 -  -  -  		push 	de
   23 00:0E08 44 -  -  -  		ld 		b,h
   24 00:0E09 4D -  -  -  		ld 		c,l
   25 00:0E0A 21 00 00 00 		ld 		hl,$0000		
   26 00:0E0E D9 -  -  -  		exx
   27 00:0E0F -  -  -  -  
   28 00:0E0F -  -  -  -  _I32MultiplyLoop:
   29 00:0E0F CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0E11 C4 36 0E 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0E15 -  -  -  -  		;
   32 00:0E15 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0E16 CB 38 -  -  		srl 	b
   34 00:0E18 CB 19 -  -  		rr 		c
   35 00:0E1A D9 -  -  -  		exx
   36 00:0E1B CB 18 -  -  		rr 		b
   37 00:0E1D CB 19 -  -  		rr 		c
   38 00:0E1F -  -  -  -  		;
   39 00:0E1F CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0E21 CB 12 -  -  		rl 		d
   41 00:0E23 D9 -  -  -  		exx
   42 00:0E24 CB 13 -  -  		rl 		e
   43 00:0E26 CB 12 -  -  		rl 		d
   44 00:0E28 -  -  -  -  
   45 00:0E28 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0E29 B1 -  -  -  		or 		c
   47 00:0E2A D9 -  -  -  		exx
   48 00:0E2B B0 -  -  -  		or 		b
   49 00:0E2C B1 -  -  -  		or 		c
   50 00:0E2D 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0E2F -  -  -  -  
   52 00:0E2F D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0E30 D1 -  -  -  		pop 	de
   54 00:0E31 C1 -  -  -  		pop 	bc
   55 00:0E32 D9 -  -  -  		exx
   56 00:0E33 D1 -  -  -  		pop 	de
   57 00:0E34 C1 -  -  -  		pop 	bc
   58 00:0E35 C9 -  -  -  		ret
   59 00:0E36 -  -  -  -  
   60 00:0E36 -  -  -  -  ; ***************************************************************************************
   61 00:0E36 -  -  -  -  ;
   62 00:0E36 -  -  -  -  ;									Changes and Updates
   63 00:0E36 -  -  -  -  ;
   64 00:0E36 -  -  -  -  ; ***************************************************************************************
   65 00:0E36 -  -  -  -  ;
   66 00:0E36 -  -  -  -  ;		Date			Notes
   67 00:0E36 -  -  -  -  ;		==== 			=====
   68 00:0E36 -  -  -  -  ;
   69 00:0E36 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0E36 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0E36 -  -  -  -  ; ***************************************************************************************
    2 00:0E36 -  -  -  -  ; ***************************************************************************************
    3 00:0E36 -  -  -  -  ;
    4 00:0E36 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0E36 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E36 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E36 -  -  -  -  ;		Reviewed :	No
    8 00:0E36 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0E36 -  -  -  -  ;
   10 00:0E36 -  -  -  -  ; ***************************************************************************************
   11 00:0E36 -  -  -  -  ; ***************************************************************************************
   12 00:0E36 -  -  -  -  
   13 00:0E36 -  -  -  -  ; ***************************************************************************************
   14 00:0E36 -  -  -  -  ;
   15 00:0E36 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0E36 -  -  -  -  ;
   17 00:0E36 -  -  -  -  ; ***************************************************************************************
   18 00:0E36 -  -  -  -  
   19 00:0E36 -  -  -  -  Int32Add:
   20 00:0E36 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0E38 D9 -  -  -  		exx
   22 00:0E39 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0E3C D9 -  -  -  		exx
   24 00:0E3D C9 -  -  -  		ret
   25 00:0E3E -  -  -  -  
   26 00:0E3E -  -  -  -  ; ***************************************************************************************
   27 00:0E3E -  -  -  -  ;
   28 00:0E3E -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0E3E -  -  -  -  ;
   30 00:0E3E -  -  -  -  ; ***************************************************************************************
   31 00:0E3E -  -  -  -  
   32 00:0E3E -  -  -  -  Int32Subtract:
   33 00:0E3E AF -  -  -  		xor 	a 							; clear carry
   34 00:0E3F 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0E42 D9 -  -  -  		exx
   36 00:0E43 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0E46 D9 -  -  -  		exx
   38 00:0E47 C9 -  -  -  		ret
   39 00:0E48 -  -  -  -  
   40 00:0E48 -  -  -  -  ; ***************************************************************************************
   41 00:0E48 -  -  -  -  ;
   42 00:0E48 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0E48 -  -  -  -  ;
   44 00:0E48 -  -  -  -  ; ***************************************************************************************
   45 00:0E48 -  -  -  -  
   46 00:0E48 -  -  -  -  Int32And:
   47 00:0E48 D9 -  -  -  		exx
   48 00:0E49 CD 4E 0E 00 		call 	_I32AndHLDE
   49 00:0E4D D9 -  -  -  		exx
   50 00:0E4E -  -  -  -  _I32AndHLDE:		
   51 00:0E4E 7C -  -  -  		ld 		a,h
   52 00:0E4F A2 -  -  -  		and 	d
   53 00:0E50 67 -  -  -  		ld 		h,a
   54 00:0E51 7D -  -  -  		ld 		a,l
   55 00:0E52 A3 -  -  -  		and 	e
   56 00:0E53 6F -  -  -  		ld 		l,a
   57 00:0E54 C9 -  -  -  		ret
   58 00:0E55 -  -  -  -  
   59 00:0E55 -  -  -  -  ; ***************************************************************************************
   60 00:0E55 -  -  -  -  ;
   61 00:0E55 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0E55 -  -  -  -  ;
   63 00:0E55 -  -  -  -  ; ***************************************************************************************
   64 00:0E55 -  -  -  -  
   65 00:0E55 -  -  -  -  Int32Or:
   66 00:0E55 D9 -  -  -  		exx
   67 00:0E56 CD 5B 0E 00 		call 	_I32OrHLDE
   68 00:0E5A D9 -  -  -  		exx
   69 00:0E5B -  -  -  -  _I32OrHLDE:		
   70 00:0E5B 7C -  -  -  		ld 		a,h
   71 00:0E5C B2 -  -  -  		or 		d
   72 00:0E5D 67 -  -  -  		ld 		h,a
   73 00:0E5E 7D -  -  -  		ld 		a,l
   74 00:0E5F B3 -  -  -  		or 		e
   75 00:0E60 6F -  -  -  		ld 		l,a
   76 00:0E61 C9 -  -  -  		ret
   77 00:0E62 -  -  -  -  
   78 00:0E62 -  -  -  -  ; ***************************************************************************************
   79 00:0E62 -  -  -  -  ;
   80 00:0E62 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0E62 -  -  -  -  ;
   82 00:0E62 -  -  -  -  ; ***************************************************************************************
   83 00:0E62 -  -  -  -  
   84 00:0E62 -  -  -  -  Int32Xor:
   85 00:0E62 D9 -  -  -  		exx
   86 00:0E63 CD 68 0E 00 		call 	_I32XorHLDE
   87 00:0E67 D9 -  -  -  		exx
   88 00:0E68 -  -  -  -  _I32XorHLDE:		
   89 00:0E68 7C -  -  -  		ld 		a,h
   90 00:0E69 AA -  -  -  		xor 	d
   91 00:0E6A 67 -  -  -  		ld 		h,a
   92 00:0E6B 7D -  -  -  		ld 		a,l
   93 00:0E6C AB -  -  -  		xor 	e
   94 00:0E6D 6F -  -  -  		ld 		l,a
   95 00:0E6E C9 -  -  -  		ret
   96 00:0E6F -  -  -  -  
   97 00:0E6F -  -  -  -  ; ***************************************************************************************
   98 00:0E6F -  -  -  -  ;
   99 00:0E6F -  -  -  -  ;								 Check if HL'HL zero
  100 00:0E6F -  -  -  -  ;
  101 00:0E6F -  -  -  -  ; ***************************************************************************************
  102 00:0E6F -  -  -  -  
  103 00:0E6F -  -  -  -  Int32Zero:
  104 00:0E6F D9 -  -  -  		exx
  105 00:0E70 7D -  -  -  		ld 		a,l
  106 00:0E71 B4 -  -  -  		or 		h
  107 00:0E72 D9 -  -  -  		exx
  108 00:0E73 B5 -  -  -  		or 		l
  109 00:0E74 B4 -  -  -  		or 		h
  110 00:0E75 C9 -  -  -  		ret
  111 00:0E76 -  -  -  -  
  112 00:0E76 -  -  -  -  ; ***************************************************************************************
  113 00:0E76 -  -  -  -  ;
  114 00:0E76 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0E76 -  -  -  -  ;
  116 00:0E76 -  -  -  -  ; ***************************************************************************************
  117 00:0E76 -  -  -  -  
  118 00:0E76 -  -  -  -  Int32Compare:
  119 00:0E76 E5 -  -  -  		push 	hl 							; save HL
  120 00:0E77 AF -  -  -  		xor 	a 							; clear carry
  121 00:0E78 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0E7B D9 -  -  -  		exx
  123 00:0E7C E5 -  -  -  		push 	hl 							; save HL'
  124 00:0E7D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0E80 -  -  -  -  		;
  126 00:0E80 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0E81 E2 89 0E 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0E85 78 -  -  -  		ld 		a,b
  129 00:0E86 EE 80 -  -  		xor 	$80
  130 00:0E88 47 -  -  -  		ld 		b,a
  131 00:0E89 -  -  -  -  _I32CNoOverflow:
  132 00:0E89 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0E8A B5 -  -  -  		or 		l
  134 00:0E8B D9 -  -  -  		exx 
  135 00:0E8C B4 -  -  -  		or 		h
  136 00:0E8D B5 -  -  -  		or 		l
  137 00:0E8E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0E90 -  -  -  -  		;
  139 00:0E90 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0E91 CB 78 -  -  		bit 	7,b
  141 00:0E93 D9 -  -  -  		exx
  142 00:0E94 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0E96 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0E98 3E FF -  -  		ld 		a,$FF
  145 00:0E9A -  -  -  -  _I32NotPos:
  146 00:0E9A D9 -  -  -  		exx
  147 00:0E9B E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0E9C D9 -  -  -  		exx
  149 00:0E9D E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0E9E B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0E9F C9 -  -  -  		ret
  152 00:0EA0 -  -  -  -  
  153 00:0EA0 -  -  -  -  ; ***************************************************************************************
  154 00:0EA0 -  -  -  -  ;
  155 00:0EA0 -  -  -  -  ;										Negate HL'HL
  156 00:0EA0 -  -  -  -  ;
  157 00:0EA0 -  -  -  -  ; ***************************************************************************************
  158 00:0EA0 -  -  -  -  
  159 00:0EA0 -  -  -  -  Int32Negate:
  160 00:0EA0 AF -  -  -  		xor 	a
  161 00:0EA1 CD AC 0E 00 		call 	_I32NSubtract
  162 00:0EA5 D9 -  -  -  		exx
  163 00:0EA6 CD AC 0E 00 		call 	_I32NSubtract
  164 00:0EAA D9 -  -  -  		exx
  165 00:0EAB C9 -  -  -  		ret
  166 00:0EAC -  -  -  -  _I32NSubtract:
  167 00:0EAC D5 -  -  -  		push 	de
  168 00:0EAD EB -  -  -  		ex 		de,hl
  169 00:0EAE 21 00 00 00 		ld 		hl,$0000
  170 00:0EB2 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0EB5 D1 -  -  -  		pop 	de
  172 00:0EB6 C9 -  -  -  		ret
  173 00:0EB7 -  -  -  -  		
  174 00:0EB7 -  -  -  -  ; ***************************************************************************************
  175 00:0EB7 -  -  -  -  ;
  176 00:0EB7 -  -  -  -  ;									Changes and Updates
  177 00:0EB7 -  -  -  -  ;
  178 00:0EB7 -  -  -  -  ; ***************************************************************************************
  179 00:0EB7 -  -  -  -  ;
  180 00:0EB7 -  -  -  -  ;		Date			Notes
  181 00:0EB7 -  -  -  -  ;		==== 			=====
  182 00:0EB7 -  -  -  -  ;
  183 00:0EB7 -  -  -  -  ; ***************************************************************************************
  184 00:0EB7 -  -  -  -  		
Listing for file "_build.asm"
   64 00:0EB7 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0EB7 -  -  -  -  ; ***************************************************************************************
    2 00:0EB7 -  -  -  -  ; ***************************************************************************************
    3 00:0EB7 -  -  -  -  ;
    4 00:0EB7 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0EB7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EB7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EB7 -  -  -  -  ;		Reviewed :	No
    8 00:0EB7 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0EB7 -  -  -  -  ;
   10 00:0EB7 -  -  -  -  ; ***************************************************************************************
   11 00:0EB7 -  -  -  -  ;
   12 00:0EB7 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0EB7 -  -  -  -  ;
   14 00:0EB7 -  -  -  -  ; ***************************************************************************************
   15 00:0EB7 -  -  -  -  
   16 00:0EB7 -  -  -  -  Int32ToString:
   17 00:0EB7 C5 -  -  -  		push 	bc 							; save string start
   18 00:0EB8 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0EB9 E5 -  -  -  		push 	hl
   20 00:0EBA 11 00 00 00 		ld	 	de,$0000
   21 00:0EBE D9 -  -  -  		exx
   22 00:0EBF D5 -  -  -  		push 	de
   23 00:0EC0 E5 -  -  -  		push 	hl
   24 00:0EC1 11 00 00 00 		ld 		de,$000
   25 00:0EC5 D9 -  -  -  		exx
   26 00:0EC6 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0EC7 -  -  -  -  		;
   28 00:0EC7 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0EC9 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0ECB ED 44 -  -  		neg 								; negate base and put in E
   31 00:0ECD 5F -  -  -  		ld 		e,a
   32 00:0ECE -  -  -  -  		;
   33 00:0ECE D9 -  -  -  		exx 								; is it -ve ?
   34 00:0ECF CB 7C -  -  		bit 	7,h
   35 00:0ED1 D9 -  -  -  		exx
   36 00:0ED2 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0ED4 -  -  -  -  		;
   38 00:0ED4 CD A0 0E 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0ED8 -  -  -  -  		;
   40 00:0ED8 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0EDA 02 -  -  -  		ld 		(bc),a
   42 00:0EDB 03 -  -  -  		inc 	bc
   43 00:0EDC -  -  -  -  _I32TSNotNegative:	
   44 00:0EDC CD EB 0E 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0EE0 -  -  -  -  _I32TSExit:
   46 00:0EE0 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0EE2 02 -  -  -  		ld 		(bc),a 
   48 00:0EE3 -  -  -  -  
   49 00:0EE3 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0EE4 E1 -  -  -  		pop 	hl
   51 00:0EE5 D1 -  -  -  		pop 	de
   52 00:0EE6 D9 -  -  -  		exx
   53 00:0EE7 E1 -  -  -  		pop 	hl
   54 00:0EE8 D1 -  -  -  		pop 	de
   55 00:0EE9 C1 -  -  -  		pop 	bc
   56 00:0EEA C9 -  -  -  		ret
   57 00:0EEB -  -  -  -  
   58 00:0EEB -  -  -  -  _I32RecursiveConvert:
   59 00:0EEB CD F8 0C 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0EEF F5 -  -  -  		push 	af 							; save remainder
   61 00:0EF0 CD 6F 0E 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0EF4 C4 EB 0E 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0EF8 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0EF9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0EFB 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0EFD C6 07 -  -  		add 	a,7
   67 00:0EFF -  -  -  -  _I32NotHex:
   68 00:0EFF C6 30 -  -  		add 	a,48
   69 00:0F01 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0F02 03 -  -  -  		inc 	bc
   71 00:0F03 C9 -  -  -  		ret		
   72 00:0F04 -  -  -  -  
   73 00:0F04 -  -  -  -  ; ***************************************************************************************
   74 00:0F04 -  -  -  -  ;
   75 00:0F04 -  -  -  -  ;									Changes and Updates
   76 00:0F04 -  -  -  -  ;
   77 00:0F04 -  -  -  -  ; ***************************************************************************************
   78 00:0F04 -  -  -  -  ;
   79 00:0F04 -  -  -  -  ;		Date			Notes
   80 00:0F04 -  -  -  -  ;		==== 			=====
   81 00:0F04 -  -  -  -  ;
   82 00:0F04 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0F04 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0F04 -  -  -  -  ; ***************************************************************************************
    2 00:0F04 -  -  -  -  ; ***************************************************************************************
    3 00:0F04 -  -  -  -  ;
    4 00:0F04 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0F04 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F04 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F04 -  -  -  -  ;		Reviewed :	No
    8 00:0F04 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0F04 -  -  -  -  ;
   10 00:0F04 -  -  -  -  ; ***************************************************************************************
   11 00:0F04 -  -  -  -  ; ***************************************************************************************
   12 00:0F04 -  -  -  -  
   13 00:0F04 -  -  -  -  #ifdef AQUARIUS
   14 00:0F04             
   15 00:0F04             ; ***************************************************************************************
   16 00:0F04             ;
   17 00:0F04             ;								Initialise system stuff
   18 00:0F04             ;
   19 00:0F04             ; ***************************************************************************************
   20 00:0F04             
   21 00:0F04             SYSInitialise:
   22 00:0F04             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0F04             	call 	SYSPrintChar
   24 00:0F04             	ret
   25 00:0F04             
   26 00:0F04             ; ***************************************************************************************
   27 00:0F04             ;
   28 00:0F04             ;								Terminate system stuff
   29 00:0F04             ;
   30 00:0F04             ; ***************************************************************************************
   31 00:0F04             
   32 00:0F04             SYSTerminate:
   33 00:0F04             	jr 		SYSTerminate
   34 00:0F04             
   35 00:0F04             ; ***************************************************************************************
   36 00:0F04             ;
   37 00:0F04             ;								Print A character
   38 00:0F04             ;
   39 00:0F04             ; ***************************************************************************************
   40 00:0F04             
   41 00:0F04             SYSPrintChar:
   42 00:0F04             	push 	af 									; we stack everything including alt registers
   43 00:0F04             	push 	bc
   44 00:0F04             	push 	de
   45 00:0F04             	push 	hl
   46 00:0F04             	push 	ix
   47 00:0F04             	push 	iy
   48 00:0F04             	exx
   49 00:0F04             	push 	bc
   50 00:0F04             	push 	de
   51 00:0F04             	push 	hl
   52 00:0F04             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0F04             	pop 	hl
   54 00:0F04             	pop 	de
   55 00:0F04             	pop 	bc
   56 00:0F04             	exx
   57 00:0F04             	pop 	iy
   58 00:0F04             	pop 	ix
   59 00:0F04             	pop 	hl
   60 00:0F04             	pop 	de
   61 00:0F04             	pop 	bc
   62 00:0F04             	pop 	af
   63 00:0F04             	ret		
   64 00:0F04             
   65 00:0F04             ; ***************************************************************************************
   66 00:0F04             ;
   67 00:0F04             ;									Print Newline
   68 00:0F04             ;
   69 00:0F04             ; ***************************************************************************************
   70 00:0F04             
   71 00:0F04             SYSPrintCRLF:
   72 00:0F04             	push 	af
   73 00:0F04             	ld 		a,13
   74 00:0F04             	call 	SYSPrintChar
   75 00:0F04             	ld 		a,10
   76 00:0F04             	call 	SYSPrintChar
   77 00:0F04             	pop 	af
   78 00:0F04             	ret
   79 00:0F04             
   80 00:0F04             ; ***************************************************************************************
   81 00:0F04             ;
   82 00:0F04             ;									Get time into HL'HL
   83 00:0F04             ;
   84 00:0F04             ; ***************************************************************************************
   85 00:0F04             
   86 00:0F04             SYSGetTimer:
   87 00:0F04              	in 		a,($00)
   88 00:0F04              	ld 		l,a
   89 00:0F04              	in 		a,($01)
   90 00:0F04              	ld 		h,a
   91 00:0F04              	exx
   92 00:0F04              	in 		a,($02)
   93 00:0F04              	ld 		l,a
   94 00:0F04              	in 		a,($03)
   95 00:0F04              	ld 		h,a
   96 00:0F04              	exx
   97 00:0F04             	ret 	
   98 00:0F04             	
   99 00:0F04             #endif
  100 00:0F04 -  -  -  -  
  101 00:0F04 -  -  -  -  ; ***************************************************************************************
  102 00:0F04 -  -  -  -  ;
  103 00:0F04 -  -  -  -  ;									Changes and Updates
  104 00:0F04 -  -  -  -  ;
  105 00:0F04 -  -  -  -  ; ***************************************************************************************
  106 00:0F04 -  -  -  -  ;
  107 00:0F04 -  -  -  -  ;		Date			Notes
  108 00:0F04 -  -  -  -  ;		==== 			=====
  109 00:0F04 -  -  -  -  ;
  110 00:0F04 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0F04 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0F04 -  -  -  -  ; ***************************************************************************************
    2 00:0F04 -  -  -  -  ; ***************************************************************************************
    3 00:0F04 -  -  -  -  ;
    4 00:0F04 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0F04 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F04 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F04 -  -  -  -  ;		Reviewed :	No
    8 00:0F04 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0F04 -  -  -  -  ;
   10 00:0F04 -  -  -  -  ; ***************************************************************************************
   11 00:0F04 -  -  -  -  ; ***************************************************************************************
   12 00:0F04 -  -  -  -  
   13 00:0F04 -  -  -  -  #ifdef CLEANEZ80
   14 00:0F04 -  -  -  -  
   15 00:0F04 -  -  -  -  ; ***************************************************************************************
   16 00:0F04 -  -  -  -  ;
   17 00:0F04 -  -  -  -  ;								Initialise system stuff
   18 00:0F04 -  -  -  -  ;
   19 00:0F04 -  -  -  -  ; ***************************************************************************************
   20 00:0F04 -  -  -  -  
   21 00:0F04 -  -  -  -  SYSInitialise:
   22 00:0F04 C9 -  -  -  	ret
   23 00:0F05 -  -  -  -  
   24 00:0F05 -  -  -  -  ; ***************************************************************************************
   25 00:0F05 -  -  -  -  ;
   26 00:0F05 -  -  -  -  ;								Terminate system stuff
   27 00:0F05 -  -  -  -  ;
   28 00:0F05 -  -  -  -  ; ***************************************************************************************
   29 00:0F05 -  -  -  -  
   30 00:0F05 -  -  -  -  SYSTerminate:
   31 00:0F05 C9 -  -  -  	ret
   32 00:0F06 -  -  -  -  
   33 00:0F06 -  -  -  -  ; ***************************************************************************************
   34 00:0F06 -  -  -  -  ;
   35 00:0F06 -  -  -  -  ;								Print A character
   36 00:0F06 -  -  -  -  ;
   37 00:0F06 -  -  -  -  ; ***************************************************************************************
   38 00:0F06 -  -  -  -  
   39 00:0F06 -  -  -  -  SYSPrintChar:
   40 00:0F06 C9 -  -  -  	ret		
   41 00:0F07 -  -  -  -  
   42 00:0F07 -  -  -  -  ; ***************************************************************************************
   43 00:0F07 -  -  -  -  ;
   44 00:0F07 -  -  -  -  ;									Print Newline
   45 00:0F07 -  -  -  -  ;
   46 00:0F07 -  -  -  -  ; ***************************************************************************************
   47 00:0F07 -  -  -  -  
   48 00:0F07 -  -  -  -  SYSPrintCRLF:
   49 00:0F07 C9 -  -  -  	ret
   50 00:0F08 -  -  -  -  
   51 00:0F08 -  -  -  -  ; ***************************************************************************************
   52 00:0F08 -  -  -  -  ;
   53 00:0F08 -  -  -  -  ;									Get time into HL'HL
   54 00:0F08 -  -  -  -  ;
   55 00:0F08 -  -  -  -  ; ***************************************************************************************
   56 00:0F08 -  -  -  -  
   57 00:0F08 -  -  -  -  SYSGetTimer:
   58 00:0F08 C9 -  -  -  	ret
   59 00:0F09 -  -  -  -  
   60 00:0F09 -  -  -  -  #endif
   61 00:0F09 -  -  -  -  
   62 00:0F09 -  -  -  -  ; ***************************************************************************************
   63 00:0F09 -  -  -  -  ;
   64 00:0F09 -  -  -  -  ;									Changes and Updates
   65 00:0F09 -  -  -  -  ;
   66 00:0F09 -  -  -  -  ; ***************************************************************************************
   67 00:0F09 -  -  -  -  ;
   68 00:0F09 -  -  -  -  ;		Date			Notes
   69 00:0F09 -  -  -  -  ;		==== 			=====
   70 00:0F09 -  -  -  -  ;
   71 00:0F09 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0F09 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0F09 -  -  -  -  ; ***************************************************************************************
    2 00:0F09 -  -  -  -  ; ***************************************************************************************
    3 00:0F09 -  -  -  -  ;
    4 00:0F09 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0F09 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F09 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F09 -  -  -  -  ;		Reviewed :	No
    8 00:0F09 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0F09 -  -  -  -  ;
   10 00:0F09 -  -  -  -  ; ***************************************************************************************
   11 00:0F09 -  -  -  -  ; ***************************************************************************************
   12 00:0F09 -  -  -  -  
   13 00:0F09 -  -  -  -  #ifdef TI84
   14 00:0F09             
   15 00:0F09             ; ***************************************************************************************
   16 00:0F09             ;
   17 00:0F09             ;								Initialise system stuff
   18 00:0F09             ;
   19 00:0F09             ; ***************************************************************************************
   20 00:0F09             
   21 00:0F09             SYSInitialise:
   22 00:0F09             	di
   23 00:0F09             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0F09             	ld 		(_IYTemp84),iy
   25 00:0F09             	ret
   26 00:0F09             
   27 00:0F09             ; ***************************************************************************************
   28 00:0F09             ;
   29 00:0F09             ;								Terminate system stuff
   30 00:0F09             ;
   31 00:0F09             ; ***************************************************************************************
   32 00:0F09             
   33 00:0F09             SYSTerminate:
   34 00:0F09             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0F09             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0F09             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0F09             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0F09             	ei
   39 00:0F09             	ret 										; and exit.
   40 00:0F09             
   41 00:0F09             _StackTemp84:									; temp var for TI84 only.
   42 00:0F09             	.dw 	0,0
   43 00:0F09             _IYTemp84:
   44 00:0F09             	.dw 	0,0		
   45 00:0F09             
   46 00:0F09             ; ***************************************************************************************
   47 00:0F09             ;
   48 00:0F09             ;								Print A character
   49 00:0F09             ;
   50 00:0F09             ; ***************************************************************************************
   51 00:0F09             
   52 00:0F09             SYSPrintChar:
   53 00:0F09             	push 	af 									; we stack everything including alt registers
   54 00:0F09             	push 	bc
   55 00:0F09             	push 	de
   56 00:0F09             	push 	hl
   57 00:0F09             	push 	ix
   58 00:0F09             	push 	iy
   59 00:0F09             	exx
   60 00:0F09             	push 	bc
   61 00:0F09             	push 	de
   62 00:0F09             	push 	hl
   63 00:0F09             
   64 00:0F09             	ld 		iy,(_IYTemp84)
   65 00:0F09             	call 	_PutC 								; print A as character
   66 00:0F09             	di
   67 00:0F09             	ld 		(_IYTemp84),iy
   68 00:0F09             
   69 00:0F09             	pop 	hl
   70 00:0F09             	pop 	de
   71 00:0F09             	pop 	bc
   72 00:0F09             	exx
   73 00:0F09             	pop 	iy
   74 00:0F09             	pop 	ix
   75 00:0F09             	pop 	hl
   76 00:0F09             	pop 	de
   77 00:0F09             	pop 	bc
   78 00:0F09             	pop 	af
   79 00:0F09             	ret		
   80 00:0F09             
   81 00:0F09             ; ***************************************************************************************
   82 00:0F09             ;
   83 00:0F09             ;									Print Newline
   84 00:0F09             ;
   85 00:0F09             ; ***************************************************************************************
   86 00:0F09             
   87 00:0F09             SYSPrintCRLF:
   88 00:0F09             	push 	af 									; we stack everything including alt registers
   89 00:0F09             	push 	bc
   90 00:0F09             	push 	de
   91 00:0F09             	push 	hl
   92 00:0F09             	push 	ix
   93 00:0F09             	push 	iy
   94 00:0F09             	exx
   95 00:0F09             	push 	bc
   96 00:0F09             	push 	de
   97 00:0F09             	push 	hl
   98 00:0F09             
   99 00:0F09             	ld 		iy,(_IYTemp84)
  100 00:0F09             	call 	_newline
  101 00:0F09             	di
  102 00:0F09             	ld 		(_IYTemp84),iy
  103 00:0F09             
  104 00:0F09             	pop 	hl
  105 00:0F09             	pop 	de
  106 00:0F09             	pop 	bc
  107 00:0F09             	exx
  108 00:0F09             	pop 	iy
  109 00:0F09             	pop 	ix
  110 00:0F09             	pop 	hl
  111 00:0F09             	pop 	de
  112 00:0F09             	pop 	bc
  113 00:0F09             	pop 	af
  114 00:0F09             	ret
  115 00:0F09             
  116 00:0F09             ; ***************************************************************************************
  117 00:0F09             ;
  118 00:0F09             ;									Get time into HL'HL
  119 00:0F09             ;
  120 00:0F09             ; ***************************************************************************************
  121 00:0F09             
  122 00:0F09             SYSGetTimer:
  123 00:0F09             	ld 		hl,$1234
  124 00:0F09             	exx
  125 00:0F09             	ld 		hl,$5678
  126 00:0F09             	exx
  127 00:0F09             	ret
  128 00:0F09             
  129 00:0F09             #endif
  130 00:0F09 -  -  -  -  
  131 00:0F09 -  -  -  -  ; ***************************************************************************************
  132 00:0F09 -  -  -  -  ;
  133 00:0F09 -  -  -  -  ;									Changes and Updates
  134 00:0F09 -  -  -  -  ;
  135 00:0F09 -  -  -  -  ; ***************************************************************************************
  136 00:0F09 -  -  -  -  ;
  137 00:0F09 -  -  -  -  ;		Date			Notes
  138 00:0F09 -  -  -  -  ;		==== 			=====
  139 00:0F09 -  -  -  -  ;
  140 00:0F09 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0F09 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0F09 -  -  -  -  ; ***************************************************************************************
    2 00:0F09 -  -  -  -  ; ***************************************************************************************
    3 00:0F09 -  -  -  -  ;
    4 00:0F09 -  -  -  -  ;		Name : 		basic.asm
    5 00:0F09 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F09 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F09 -  -  -  -  ;		Reviewed :	No
    8 00:0F09 -  -  -  -  ;		Purpose :	Main program.
    9 00:0F09 -  -  -  -  ;
   10 00:0F09 -  -  -  -  ; ***************************************************************************************
   11 00:0F09 -  -  -  -  ; ***************************************************************************************
   12 00:0F09 -  -  -  -  
   13 00:0F09 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 22 01 00 BE 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 BE 3F 0C 
              53 65 65 64 
              20 3D 20 39 
              38 39 34 38 
              0D 80 0E 03 
              00 BD 02 1A 
              02 21 03 1B 
              95 48 A5 80 
              12 04 00 02 
              1A 02 21 03 
              1B 95 43 A5 
              8F 8A 41 77 
              5E 80 0E 05 
              00 BD 19 07 
              01 1C 07 12 
              95 48 A5 80 
              12 06 00 19 
              07 01 1C 07 
              12 95 43 A5 
              8F 8A 52 73 
              58 80 0C 07 
              00 BD 05 1B 
              1A 20 95 44 
              A5 80 0F 08 
              00 05 1B 1A 
              20 95 43 A5 
              8F 54 48 55 
              80 0B 09 00 
              BD 11 1F 0B 
              95 47 A5 80 
              0F 0A 00 11 
              1F 0B 95 45 
              A5 8F 8A 47 
              62 44 80 0B 
              0B 00 BD 10 
              1C 24 95 47 
              A5 80 0E 0C 
              00 10 1C 24 
              95 42 A5 8F 
              44 43 4F 80 
              10 0D 00 05 
              1B 1A 20 95 
              43 A5 8F 8A 
              48 4A 63 80 
              0E 0E 00 11 
              1F 0B 95 47 
              A5 8F 43 7A 
              75 80 12 0F 
              00 19 07 01 
              1C 07 12 95 
              40 A5 8F 8A 
              56 6A 44 80 
              10 10 00 CA 
              02 1A 02 21 
              03 1B 95 40 
              A5 8F 40 80 
              10 11 00 CA 
              02 1A 02 21 
              03 1B 95 41 
              A5 8F 40 80 
              10 12 00 CA 
              02 1A 02 21 
              03 1B 95 42 
              A5 8F 40 80 
              13 13 00 CA 
              02 1A 02 21 
              03 1B 95 43 
              A5 8F 8A 41 
              77 5E 80 10 
              14 00 CA 02 
              1A 02 21 03 
              1B 95 44 A5 
              8F 40 80 10 
              15 00 CA 02 
              1A 02 21 03 
              1B 95 45 A5 
              8F 40 80 10 
              16 00 CA 02 
              1A 02 21 03 
              1B 95 46 A5 
              8F 40 80 10 
              17 00 CA 02 
              1A 02 21 03 
              1B 95 47 A5 
              8F 40 80 10 
              18 00 CA 02 
              1A 02 21 03 
              1B 95 48 A5 
              8F 40 80 08 
              19 00 0D 0E 
              0D 04 80 13 
              1A 00 CA 19 
              07 01 1C 07 
              12 95 40 A5 
              8F 8A 56 6A 
              44 80 10 1B 
              00 CA 19 07 
              01 1C 07 12 
              95 41 A5 8F 
              40 80 10 1C 
              00 CA 19 07 
              01 1C 07 12 
              95 42 A5 8F 
              40 80 13 1D 
              00 CA 19 07 
              01 1C 07 12 
              95 43 A5 8F 
              8A 52 73 58 
              80 10 1E 00 
              CA 19 07 01 
              1C 07 12 95 
              44 A5 8F 40 
              80 10 1F 00 
              CA 19 07 01 
              1C 07 12 95 
              45 A5 8F 40 
              80 10 20 00 
              CA 19 07 01 
              1C 07 12 95 
              46 A5 8F 40 
              80 10 21 00 
              CA 19 07 01 
              1C 07 12 95 
              47 A5 8F 40 
              80 10 22 00 
              CA 19 07 01 
              1C 07 12 95 
              48 A5 8F 40 
              80 08 23 00 
              0D 0E 0D 04 
              80 0E 24 00 
              CA 05 1B 1A 
              20 95 40 A5 
              8F 40 80 0E 
              25 00 CA 05 
              1B 1A 20 95 
              41 A5 8F 40 
              80 0E 26 00 
              CA 05 1B 1A 
              20 95 42 A5 
              8F 40 80 11 
              27 00 CA 05 
              1B 1A 20 95 
              43 A5 8F 8A 
              48 4A 63 80 
              0E 28 00 CA 
              05 1B 1A 20 
              95 44 A5 8F 
              40 80 08 29 
              00 0D 0E 0D 
              04 80 0D 2A 
              00 CA 11 1F 
              0B 95 40 A5 
              8F 40 80 0D 
              2B 00 CA 11 
              1F 0B 95 41 
              A5 8F 40 80 
              0D 2C 00 CA 
              11 1F 0B 95 
              42 A5 8F 40 
              80 0D 2D 00 
              CA 11 1F 0B 
              95 43 A5 8F 
              40 80 0D 2E 
              00 CA 11 1F 
              0B 95 44 A5 
              8F 40 80 10 
              2F 00 CA 11 
              1F 0B 95 45 
              A5 8F 8A 47 
              62 44 80 0D 
              30 00 CA 11 
              1F 0B 95 46 
              A5 8F 40 80 
              0F 31 00 CA 
              11 1F 0B 95 
              47 A5 8F 43 
              7A 75 80 08 
              32 00 0D 0E 
              0D 04 80 0D 
              33 00 CA 10 
              1C 24 95 40 
              A5 8F 40 80 
              0D 34 00 CA 
              10 1C 24 95 
              41 A5 8F 40 
              80 0F 35 00 
              CA 10 1C 24 
              95 42 A5 8F 
              44 43 4F 80 
              0D 36 00 CA 
              10 1C 24 95 
              43 A5 8F 40 
              80 0D 37 00 
              CA 10 1C 24 
              95 44 A5 8F 
              40 80 0D 38 
              00 CA 10 1C 
              24 95 45 A5 
              8F 40 80 0D 
              39 00 CA 10 
              1C 24 95 46 
              A5 8F 40 80 
              0D 3A 00 CA 
              10 1C 24 95 
              47 A5 8F 40 
              80 08 3B 00 
              0D 0E 0D 04 
              80 15 3C 00 
              C1 3F 0D 4F 
              6B 20 53 65 
              65 64 20 39 
              38 39 34 38 
              0D 80 00 -  	.db	$22,$01,$00,$be,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$be,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$39,$38,$39,$34,$38,$0d,$80,$0e,$03,$00,$bd,$02,$1a,$02,$21,$03,$1b,$95,$48,$a5,$80,$12,$04,$00,$02,$1a,$02,$21,$03,$1b,$95,$43,$a5,$8f,$8a,$41,$77,$5e,$80,$0e,$05,$00,$bd,$19,$07,$01,$1c,$07,$12,$95,$48,$a5,$80,$12,$06,$00,$19,$07,$01,$1c,$07,$12,$95,$43,$a5,$8f,$8a,$52,$73,$58,$80,$0c,$07,$00,$bd,$05,$1b,$1a,$20,$95,$44,$a5,$80,$0f,$08,$00,$05,$1b,$1a,$20,$95,$43,$a5,$8f,$54,$48,$55,$80,$0b,$09,$00,$bd,$11,$1f,$0b,$95,$47,$a5,$80,$0f,$0a,$00,$11,$1f,$0b,$95,$45,$a5,$8f,$8a,$47,$62,$44,$80,$0b,$0b,$00,$bd,$10,$1c,$24,$95,$47,$a5,$80,$0e,$0c,$00,$10,$1c,$24,$95,$42,$a5,$8f,$44,$43,$4f,$80,$10,$0d,$00,$05,$1b,$1a,$20,$95,$43,$a5,$8f,$8a,$48,$4a,$63,$80,$0e,$0e,$00,$11,$1f,$0b,$95,$47,$a5,$8f,$43,$7a,$75,$80,$12,$0f,$00,$19,$07,$01,$1c,$07,$12,$95,$40,$a5,$8f,$8a,$56,$6a,$44,$80,$10,$10,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$40,$a5,$8f,$40,$80,$10,$11,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$41,$a5,$8f,$40,$80,$10,$12,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$42,$a5,$8f,$40,$80,$13,$13,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$43,$a5,$8f,$8a,$41,$77,$5e,$80,$10,$14,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$44,$a5,$8f,$40,$80,$10,$15,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$45,$a5,$8f,$40,$80,$10,$16,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$46,$a5,$8f,$40,$80,$10,$17,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$47,$a5,$8f,$40,$80,$10,$18,$00,$ca,$02,$1a,$02,$21,$03,$1b,$95,$48,$a5,$8f,$40,$80,$08,$19,$00,$0d,$0e,$0d,$04,$80,$13,$1a,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$40,$a5,$8f,$8a,$56,$6a,$44,$80,$10,$1b,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$41,$a5,$8f,$40,$80,$10,$1c,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$42,$a5,$8f,$40,$80,$13,$1d,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$43,$a5,$8f,$8a,$52,$73,$58,$80,$10,$1e,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$44,$a5,$8f,$40,$80,$10,$1f,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$45,$a5,$8f,$40,$80,$10,$20,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$46,$a5,$8f,$40,$80,$10,$21,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$47,$a5,$8f,$40,$80,$10,$22,$00,$ca,$19,$07,$01,$1c,$07,$12,$95,$48,$a5,$8f,$40,$80,$08,$23,$00,$0d,$0e,$0d,$04,$80,$0e,$24,$00,$ca,$05,$1b,$1a,$20,$95,$40,$a5,$8f,$40,$80,$0e,$25,$00,$ca,$05,$1b,$1a,$20,$95,$41,$a5,$8f,$40,$80,$0e,$26,$00,$ca,$05,$1b,$1a,$20,$95,$42,$a5,$8f,$40,$80,$11,$27,$00,$ca,$05,$1b,$1a,$20,$95,$43,$a5,$8f,$8a,$48,$4a,$63,$80,$0e,$28,$00,$ca,$05,$1b,$1a,$20,$95,$44,$a5,$8f,$40,$80,$08,$29,$00,$0d,$0e,$0d,$04,$80,$0d,$2a,$00,$ca,$11,$1f,$0b,$95,$40,$a5,$8f,$40,$80,$0d,$2b,$00,$ca,$11,$1f,$0b,$95,$41,$a5,$8f,$40,$80,$0d,$2c,$00,$ca,$11,$1f,$0b,$95,$42,$a5,$8f,$40,$80,$0d,$2d,$00,$ca,$11,$1f,$0b,$95,$43,$a5,$8f,$40,$80,$0d,$2e,$00,$ca,$11,$1f,$0b,$95,$44,$a5,$8f,$40,$80,$10,$2f,$00,$ca,$11,$1f,$0b,$95,$45,$a5,$8f,$8a,$47,$62,$44,$80,$0d,$30,$00,$ca,$11,$1f,$0b,$95,$46,$a5,$8f,$40,$80,$0f,$31,$00,$ca,$11,$1f,$0b,$95,$47,$a5,$8f,$43,$7a,$75,$80,$08,$32,$00,$0d,$0e,$0d,$04,$80,$0d,$33,$00,$ca,$10,$1c,$24,$95,$40,$a5,$8f,$40,$80,$0d,$34,$00,$ca,$10,$1c,$24,$95,$41,$a5,$8f,$40,$80,$0f,$35,$00,$ca,$10,$1c,$24,$95,$42,$a5,$8f,$44,$43,$4f,$80,$0d,$36,$00,$ca,$10,$1c,$24,$95,$43,$a5,$8f,$40,$80,$0d,$37,$00,$ca,$10,$1c,$24,$95,$44,$a5,$8f,$40,$80,$0d,$38,$00,$ca,$10,$1c,$24,$95,$45,$a5,$8f,$40,$80,$0d,$39,$00,$ca,$10,$1c,$24,$95,$46,$a5,$8f,$40,$80,$0d,$3a,$00,$ca,$10,$1c,$24,$95,$47,$a5,$8f,$40,$80,$08,$3b,$00,$0d,$0e,$0d,$04,$80,$15,$3c,$00,$c1,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$39,$38,$39,$34,$38,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:137B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:237B -  -  -  -  EndTestInstance:
   18 00:237B -  -  -  -  		
   19 00:237B -  -  -  -  ; ***************************************************************************************
   20 00:237B -  -  -  -  ;
   21 00:237B -  -  -  -  ;									Changes and Updates
   22 00:237B -  -  -  -  ;
   23 00:237B -  -  -  -  ; ***************************************************************************************
   24 00:237B -  -  -  -  ;
   25 00:237B -  -  -  -  ;		Date			Notes
   26 00:237B -  -  -  -  ;		==== 			=====
   27 00:237B -  -  -  -  ;
   28 00:237B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:237B -  -  -  -  FinalAddress:
