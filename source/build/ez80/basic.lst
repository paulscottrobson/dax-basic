    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_MEMORY = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_MEMORY
   63 00:0000             	ld a,ERRID_MEMORY
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOCOMMA = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   70 00:0000             	ld a,ERRID_NOCOMMA
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NODOLLAR = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   77 00:0000             	ld a,ERRID_NODOLLAR
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOLBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   84 00:0000             	ld a,ERRID_NOLBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NORBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   91 00:0000             	ld a,ERRID_NORBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOTREF = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOTREF
   98 00:0000             	ld a,ERRID_NOTREF
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_STOP = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_STOP
  105 00:0000             	ld a,ERRID_STOP
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_SYNTAX = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_SYNTAX
  112 00:0000             	ld a,ERRID_SYNTAX
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_TODO = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_TODO
  119 00:0000             	ld a,ERRID_TODO
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  126 00:0000             	ld a,ERRID_UNKNOWNVAR
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:0000             		ld 		sp,$BFFF
   41 00:0000             #endif
   42 00:0000             
   43 00:0000             #endif
   44 00:0000 CD 24 0F 00 		call 	SYSInitialise
   45 00:0004 11 00 10 00 		ld 		de,TestInstance
   46 00:0008 21 B4 20 00 		ld 		hl,EndTestInstance
   47 00:000C CD E8 08 00 		call 	SetCurrentInstance
   48 00:0010 -  -  -  -  
   49 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:0012 32 64 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:0016 -  -  -  -  		
   52 00:0016 C3 9F 02 00 		jp 		Command_RUN
   53 00:001A -  -  -  -  
   54 00:001A -  -  -  -  WarmStart:		
   55 00:001A 3E 2A -  -  		ld 		a,'*'
   56 00:001C CD 26 0F 00 		call 	SYSPrintChar
   57 00:0020 CD 25 0F 00 		call 	SYSTerminate
   58 00:0024 -  -  -  -  
   59 00:0024 -  -  -  -  Unimplemented:
   60 00:0024 3E 05 C3 5C 
              03 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:002A -  -  -  -  Int32DivZeroHandler:
   62 00:002A 3E 06 C3 5C 
              03 00 -  -  		ERR_DIVZERO
   63 00:0030 -  -  -  -  
   64 00:0030 -  -  -  -  ; ***************************************************************************************
   65 00:0030 -  -  -  -  ;
   66 00:0030 -  -  -  -  ;									Changes and Updates
   67 00:0030 -  -  -  -  ;
   68 00:0030 -  -  -  -  ; ***************************************************************************************
   69 00:0030 -  -  -  -  ;
   70 00:0030 -  -  -  -  ;		Date			Notes
   71 00:0030 -  -  -  -  ;		==== 			=====
   72 00:0030 -  -  -  -  ;
   73 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  
   78 00:005C -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  		
   81 00:0060 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:0060 00 00 00 00 		.dw 	0,0
   83 00:0064 -  -  -  -  
   84 00:0064 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:0064 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006A -  -  -  -  
   87 00:006A -  -  -  -  AConvert: 									; used for address conversions.
   88 00:006A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:0070 -  -  -  -  		
   90 00:0070 -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:0080 -  -  -  -  
   93 00:0080 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:0080 00 00 -  -  		.dw 	0
   95 00:0082 -  -  -  -  
   96 00:0082 -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:0082 00 00 -  -  		.dw 	0 
   98 00:0084 -  -  -  -  		
   99 00:0084 -  -  -  -  ; ***************************************************************************************
  100 00:0084 -  -  -  -  ;
  101 00:0084 -  -  -  -  ;									Variable Information
  102 00:0084 -  -  -  -  ;
  103 00:0084 -  -  -  -  ; ***************************************************************************************
  104 00:0084 -  -  -  -  
  105 00:0084 -  -  -  -  VarNameStart: 								; first byte of name
  106 00:0084 00 00 00 00 		.dw 	0,0
  107 00:0088 -  -  -  -  VarHash: 									; name hash value
  108 00:0088 00 00 -  -  		.dw 	0		
  109 00:008A -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 00:008A 00 00 00 00 		.dw 	0,0
  111 00:008E -  -  -  -  		
  112 00:008E -  -  -  -  ; ***************************************************************************************
  113 00:008E -  -  -  -  ;
  114 00:008E -  -  -  -  ;										  Buffers
  115 00:008E -  -  -  -  ;
  116 00:008E -  -  -  -  ; ***************************************************************************************
  117 00:008E -  -  -  -  
  118 00:008E -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 00:008E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 00:009E -  -  -  -  
  121 00:009E -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 00:009E 00 00 -  -  		.dw 	0
  123 00:00A0 -  -  -  -  
  124 00:00A0 -  -  -  -  ConvertBuffer: 								; general usage
  125 00:00A0 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 00:00E0 -  -  -  -  
  127 00:00E0 -  -  -  -  ; ***************************************************************************************
  128 00:00E0 -  -  -  -  ;
  129 00:00E0 -  -  -  -  ;									Changes and Updates
  130 00:00E0 -  -  -  -  ;
  131 00:00E0 -  -  -  -  ; ***************************************************************************************
  132 00:00E0 -  -  -  -  ;
  133 00:00E0 -  -  -  -  ;		Date			Notes
  134 00:00E0 -  -  -  -  ;		==== 			=====
  135 00:00E0 -  -  -  -  ;
  136 00:00E0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00E0 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00E0 -  -  -  -  ; ***************************************************************************************
    2 00:00E0 -  -  -  -  ; ***************************************************************************************
    3 00:00E0 -  -  -  -  ;
    4 00:00E0 -  -  -  -  ;		Name : 		assert.asm
    5 00:00E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E0 -  -  -  -  ;		Reviewed :	No
    8 00:00E0 -  -  -  -  ;		Purpose :	Assert command
    9 00:00E0 -  -  -  -  ;
   10 00:00E0 -  -  -  -  ; ***************************************************************************************
   11 00:00E0 -  -  -  -  ; ***************************************************************************************
   12 00:00E0 -  -  -  -  
   13 00:00E0 -  -  -  -  ; ***************************************************************************************
   14 00:00E0 -  -  -  -  ;
   15 00:00E0 -  -  -  -  ;									ASSERT command
   16 00:00E0 -  -  -  -  ;
   17 00:00E0 -  -  -  -  ; ***************************************************************************************
   18 00:00E0 -  -  -  -  
   19 00:00E0 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00E0 CD 8F 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00E4 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00EA C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00EB 3E 01 C3 5C 
              03 00 -  -  		ERR_ASSERT
   24 00:00F1 -  -  -  -  
   25 00:00F1 -  -  -  -  ; ***************************************************************************************
   26 00:00F1 -  -  -  -  ;
   27 00:00F1 -  -  -  -  ;									Changes and Updates
   28 00:00F1 -  -  -  -  ;
   29 00:00F1 -  -  -  -  ; ***************************************************************************************
   30 00:00F1 -  -  -  -  ;
   31 00:00F1 -  -  -  -  ;		Date			Notes
   32 00:00F1 -  -  -  -  ;		==== 			=====
   33 00:00F1 -  -  -  -  ;
   34 00:00F1 -  -  -  -  ; ***************************************************************************************
   35 00:00F1 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00F1 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00F1 -  -  -  -  ; ***************************************************************************************
    2 00:00F1 -  -  -  -  ; ***************************************************************************************
    3 00:00F1 -  -  -  -  ;
    4 00:00F1 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F1 -  -  -  -  ;		Reviewed :	No
    8 00:00F1 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00F1 -  -  -  -  ;
   10 00:00F1 -  -  -  -  ; ***************************************************************************************
   11 00:00F1 -  -  -  -  ; ***************************************************************************************
   12 00:00F1 -  -  -  -  
   13 00:00F1 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00F1 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00F1 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00F1 -  -  -  -  BadCmd_Comma: 		;; [~]
   17 00:00F1 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 00:00F1 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00F1 C3 C6 03 00 		jp 		SyntaxError
   20 00:00F5 -  -  -  -  
   21 00:00F5 -  -  -  -  ; ***************************************************************************************
   22 00:00F5 -  -  -  -  ;
   23 00:00F5 -  -  -  -  ;									Changes and Updates
   24 00:00F5 -  -  -  -  ;
   25 00:00F5 -  -  -  -  ; ***************************************************************************************
   26 00:00F5 -  -  -  -  ;
   27 00:00F5 -  -  -  -  ;		Date			Notes
   28 00:00F5 -  -  -  -  ;		==== 			=====
   29 00:00F5 -  -  -  -  ;
   30 00:00F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00F5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00F5 -  -  -  -  ; ***************************************************************************************
    2 00:00F5 -  -  -  -  ; ***************************************************************************************
    3 00:00F5 -  -  -  -  ;
    4 00:00F5 -  -  -  -  ;		Name : 		colon.asm
    5 00:00F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00F5 -  -  -  -  ;		Reviewed :	No
    8 00:00F5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00F5 -  -  -  -  ;
   10 00:00F5 -  -  -  -  ; ***************************************************************************************
   11 00:00F5 -  -  -  -  ; ***************************************************************************************
   12 00:00F5 -  -  -  -  
   13 00:00F5 -  -  -  -  ; ***************************************************************************************
   14 00:00F5 -  -  -  -  ;
   15 00:00F5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00F5 -  -  -  -  ;
   17 00:00F5 -  -  -  -  ; ***************************************************************************************
   18 00:00F5 -  -  -  -  
   19 00:00F5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00F5 C9 -  -  -  		ret
   21 00:00F6 -  -  -  -  
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  ;
   24 00:00F6 -  -  -  -  ;									Changes and Updates
   25 00:00F6 -  -  -  -  ;
   26 00:00F6 -  -  -  -  ; ***************************************************************************************
   27 00:00F6 -  -  -  -  ;
   28 00:00F6 -  -  -  -  ;		Date			Notes
   29 00:00F6 -  -  -  -  ;		==== 			=====
   30 00:00F6 -  -  -  -  ;
   31 00:00F6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F6 -  -  -  -  ; ***************************************************************************************
    2 00:00F6 -  -  -  -  ; ***************************************************************************************
    3 00:00F6 -  -  -  -  ;
    4 00:00F6 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F6 -  -  -  -  ;		Reviewed :	No
    8 00:00F6 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F6 -  -  -  -  ;
   10 00:00F6 -  -  -  -  ; ***************************************************************************************
   11 00:00F6 -  -  -  -  ; ***************************************************************************************
   12 00:00F6 -  -  -  -  
   13 00:00F6 -  -  -  -  ; ***************************************************************************************
   14 00:00F6 -  -  -  -  ;
   15 00:00F6 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:00F6 -  -  -  -  ;	
   17 00:00F6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:00F6 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:00F6 -  -  -  -  ;								(can be comma chained)
   20 00:00F6 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:00F6 -  -  -  -  ;
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  
   24 00:00F6 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:00F6 -  -  -  -  		;
   26 00:00F6 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:00F6 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:00F6 -  -  -  -  		;
   29 00:00F6 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:00F8 D1 -  -  -  		pop 	de
   31 00:00F9 -  -  -  -  		;
   32 00:00F9 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:00FC FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:00FE D2 C6 03 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:0102 -  -  -  -  _DISkip:
   36 00:0102 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:0104 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:0107 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:0109 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:010B -  -  -  -  		;
   41 00:010B DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:010E FE 95 -  -  		cp 		KWD_LPAREN
   43 00:0110 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:0111 CC 72 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:0115 F1 -  -  -  		pop 	af
   46 00:0116 C4 2A 01 00 		call 	nz,DimensionAllocate
   47 00:011A -  -  -  -  		;
   48 00:011A DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:011D FE A6 -  -  		cp 		KWD_COMMA
   50 00:011F C0 -  -  -  		ret 	nz
   51 00:0120 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:0122 18 D2 -  -  		jr 		Command_DIM
   53 00:0124 -  -  -  -  
   54 00:0124 -  -  -  -  _CDError:
   55 00:0124 3E 04 C3 5C 
              03 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:012A -  -  -  -  
   57 00:012A -  -  -  -  ; ***************************************************************************************
   58 00:012A -  -  -  -  ;
   59 00:012A -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:012A -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:012A -  -  -  -  ;
   62 00:012A -  -  -  -  ; ***************************************************************************************
   63 00:012A -  -  -  -  
   64 00:012A -  -  -  -  DimensionAllocate:
   65 00:012A D5 -  -  -  		push 	de 							; save start on stack
   66 00:012B DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:012D 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:012F 32 80 00 00 		ld 		(AllowAutoCreate),a
   69 00:0133 CD 61 09 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:0137 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:0139 28 E9 -  -  		jr 		z,_CDError
   72 00:013B CB 41 -  -  		bit 	CIsString,c
   73 00:013D 20 E5 -  -  		jr 		nz,_CDError
   74 00:013F DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:0141 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:0142 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:0144 CD 50 03 00 		call 	CheckNextA 					; check for [
   78 00:0148 CD 8F 05 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:014C 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:014E CD 50 03 00 		call 	CheckNextA 					; check for ]
   81 00:0152 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:0153 7C -  -  -  		ld 		a,h
   83 00:0154 B5 -  -  -  		or 		l
   84 00:0155 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:0157 D9 -  -  -  		exx
   86 00:0158 23 -  -  -  		inc 	hl
   87 00:0159 D9 -  -  -  		exx
   88 00:015A -  -  -  -  _DANoCarry:
   89 00:015A D9 -  -  -  		exx 								; check if HL' is zero
   90 00:015B 7C -  -  -  		ld 		a,h
   91 00:015C B5 -  -  -  		or 		l
   92 00:015D D9 -  -  -  		exx
   93 00:015E 20 C4 -  -  		jr 		nz,_CDError
   94 00:0160 CD 75 08 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:0164 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:0165 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:0166 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:016C AF -  -  -  		xor 	a 							; autocreate off
   99 00:016D 32 80 00 00 		ld 		(AllowAutoCreate),a
  100 00:0171 C9 -  -  -  		ret
  101 00:0172 -  -  -  -  
  102 00:0172 -  -  -  -  ; ***************************************************************************************
  103 00:0172 -  -  -  -  ;
  104 00:0172 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:0172 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:0172 -  -  -  -  ;
  107 00:0172 -  -  -  -  ; ***************************************************************************************
  108 00:0172 -  -  -  -  
  109 00:0172 -  -  -  -  DimensionArray:
  110 00:0172 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:0173 -  -  -  -  		;
  112 00:0173 CD 8F 05 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:0177 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:0178 E6 FC -  -  		and 	$FC
  115 00:017A D9 -  -  -  		exx
  116 00:017B B4 -  -  -  		or 		h
  117 00:017C B5 -  -  -  		or 		l
  118 00:017D D9 -  -  -  		exx
  119 00:017E 20 A4 -  -  		jr 		nz,_CDError
  120 00:0180 -  -  -  -  		;
  121 00:0180 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:0182 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:0183 -  -  -  -  		;
  124 00:0183 CD EE 09 00 		call 	VariableInformation 		; get information about this array
  125 00:0187 CD 2A 0A 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:018B 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:018D -  -  -  -  		;
  128 00:018D E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:018E E5 -  -  -  		push 	hl
  130 00:018F 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:0190 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:0191 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:0192 29 -  -  -  		add 	hl,hl
  134 00:0193 CD 1E 09 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:0197 -  -  -  -  		;
  136 00:0197 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:0198 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:019C 09 -  -  -  		add 	hl,bc
  139 00:019D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:01A3 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:01A5 C9 -  -  -  		ret		
  142 00:01A6 -  -  -  -  
  143 00:01A6 -  -  -  -  
  144 00:01A6 -  -  -  -  ; ***************************************************************************************
  145 00:01A6 -  -  -  -  ;
  146 00:01A6 -  -  -  -  ;									Changes and Updates
  147 00:01A6 -  -  -  -  ;
  148 00:01A6 -  -  -  -  ; ***************************************************************************************
  149 00:01A6 -  -  -  -  ;
  150 00:01A6 -  -  -  -  ;		Date			Notes
  151 00:01A6 -  -  -  -  ;		==== 			=====
  152 00:01A6 -  -  -  -  ;
  153 00:01A6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:01A6 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:01A6 -  -  -  -  ; ***************************************************************************************
    2 00:01A6 -  -  -  -  ; ***************************************************************************************
    3 00:01A6 -  -  -  -  ;
    4 00:01A6 -  -  -  -  ;		Name : 		end.asm
    5 00:01A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A6 -  -  -  -  ;		Reviewed :	No
    8 00:01A6 -  -  -  -  ;		Purpose :	End command
    9 00:01A6 -  -  -  -  ;
   10 00:01A6 -  -  -  -  ; ***************************************************************************************
   11 00:01A6 -  -  -  -  ; ***************************************************************************************
   12 00:01A6 -  -  -  -  
   13 00:01A6 -  -  -  -  ; ***************************************************************************************
   14 00:01A6 -  -  -  -  ;
   15 00:01A6 -  -  -  -  ;										END command
   16 00:01A6 -  -  -  -  ;
   17 00:01A6 -  -  -  -  ; ***************************************************************************************
   18 00:01A6 -  -  -  -  
   19 00:01A6 -  -  -  -  Command_END: 	;; [end]
   20 00:01A6 3E 00 C3 5C 
              03 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:01AC -  -  -  -  
   22 00:01AC -  -  -  -  ; ***************************************************************************************
   23 00:01AC -  -  -  -  ;
   24 00:01AC -  -  -  -  ;									Changes and Updates
   25 00:01AC -  -  -  -  ;
   26 00:01AC -  -  -  -  ; ***************************************************************************************
   27 00:01AC -  -  -  -  ;
   28 00:01AC -  -  -  -  ;		Date			Notes
   29 00:01AC -  -  -  -  ;		==== 			=====
   30 00:01AC -  -  -  -  ;
   31 00:01AC -  -  -  -  ; ***************************************************************************************
   32 00:01AC -  -  -  -  		
Listing for file "_build.asm"
   18 00:01AC -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:01AC -  -  -  -  ; ***************************************************************************************
    2 00:01AC -  -  -  -  ; ***************************************************************************************
    3 00:01AC -  -  -  -  ;
    4 00:01AC -  -  -  -  ;		Name : 		endofline.asm
    5 00:01AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01AC -  -  -  -  ;		Reviewed :	None
    8 00:01AC -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:01AC -  -  -  -  ;
   10 00:01AC -  -  -  -  ; ***************************************************************************************
   11 00:01AC -  -  -  -  ; ***************************************************************************************
   12 00:01AC -  -  -  -  
   13 00:01AC -  -  -  -  ; ***************************************************************************************
   14 00:01AC -  -  -  -  ;
   15 00:01AC -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:01AC -  -  -  -  ;
   17 00:01AC -  -  -  -  ; ***************************************************************************************
   18 00:01AC -  -  -  -  
   19 00:01AC -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:01AC DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:01B1 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:01B5 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:01B8 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:01BA -  -  -  -  		;
   25 00:01BA ED 7B 60 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:01BF C3 B2 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:01C3 -  -  -  -  
   28 00:01C3 -  -  -  -  ; ***************************************************************************************
   29 00:01C3 -  -  -  -  ;
   30 00:01C3 -  -  -  -  ;									Changes and Updates
   31 00:01C3 -  -  -  -  ;
   32 00:01C3 -  -  -  -  ; ***************************************************************************************
   33 00:01C3 -  -  -  -  ;
   34 00:01C3 -  -  -  -  ;		Date			Notes
   35 00:01C3 -  -  -  -  ;		==== 			=====
   36 00:01C3 -  -  -  -  ;
   37 00:01C3 -  -  -  -  ; ***************************************************************************************
   38 00:01C3 -  -  -  -  		
Listing for file "_build.asm"
   19 00:01C3 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:01C3 -  -  -  -  ; ***************************************************************************************
    2 00:01C3 -  -  -  -  ; ***************************************************************************************
    3 00:01C3 -  -  -  -  ;
    4 00:01C3 -  -  -  -  ;		Name : 		let.asm
    5 00:01C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01C3 -  -  -  -  ;		Date : 		4th June 2022
    7 00:01C3 -  -  -  -  ;		Reviewed :	No
    8 00:01C3 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:01C3 -  -  -  -  ;
   10 00:01C3 -  -  -  -  ; ***************************************************************************************
   11 00:01C3 -  -  -  -  ; ***************************************************************************************
   12 00:01C3 -  -  -  -  
   13 00:01C3 -  -  -  -  ; ***************************************************************************************
   14 00:01C3 -  -  -  -  ;
   15 00:01C3 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:01C3 -  -  -  -  ;
   17 00:01C3 -  -  -  -  ; ***************************************************************************************
   18 00:01C3 -  -  -  -  
   19 00:01C3 -  -  -  -  Command_LET: 	;; [let]
   20 00:01C3 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:01C6 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:01C8 28 2F -  -  		jr 		z,_CLString
   23 00:01CA FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:01CC 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:01CE 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:01D0 32 80 00 00 		ld 		(AllowAutoCreate),a
   27 00:01D4 -  -  -  -  _CLNoAuto:
   28 00:01D4 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01D6 CD 11 05 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01DA CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01DC CA C6 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01E0 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01E1 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01E2 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01E3 32 80 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01E7 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01E9 CD 50 03 00 		call 	CheckNextA
   38 00:01ED -  -  -  -  
   39 00:01ED CD 87 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01F1 -  -  -  -  
   41 00:01F1 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01F2 43 -  -  -  		ld 		b,e 						
   43 00:01F3 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01F4 -  -  -  -  		;
   45 00:01F4 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01F4 -  -  -  -  		;
   47 00:01F4 CD 01 02 00 		call 	WriteHLToDE
   48 00:01F8 C9 -  -  -  		ret
   49 00:01F9 -  -  -  -  		;
   50 00:01F9 -  -  -  -  		; 		String assignment code.
   51 00:01F9 -  -  -  -  		;
   52 00:01F9 -  -  -  -  _CLString:
   53 00:01F9 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:0201 -  -  -  -  
   55 00:0201 -  -  -  -  ; ***************************************************************************************
   56 00:0201 -  -  -  -  ;
   57 00:0201 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:0201 -  -  -  -  ;
   59 00:0201 -  -  -  -  ; ***************************************************************************************
   60 00:0201 -  -  -  -  
   61 00:0201 -  -  -  -  WriteHLToDE:
   62 00:0201 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:0203 C2 BA 03 00 		jp 		nz,TypeMismatch
   64 00:0207 -  -  -  -  		;
   65 00:0207 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:0207 -  -  -  -  		;		
   67 00:0207 -  -  -  -  _WHDWriteNumber:
   68 00:0207 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:0208 D9 -  -  -  		exx
   70 00:0209 EB -  -  -  		ex 		de,hl
   71 00:020A D9 -  -  -  		exx
   72 00:020B -  -  -  -  
   73 00:020B 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:020C 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:020D 72 -  -  -  		ld 		(hl),d
   76 00:020E 23 -  -  -  		inc 	hl
   77 00:020F E5 -  -  -  		push 	hl
   78 00:0210 D9 -  -  -  		exx
   79 00:0211 E1 -  -  -  		pop 	hl
   80 00:0212 73 -  -  -  		ld 		(hl),e
   81 00:0213 23 -  -  -  		inc 	hl
   82 00:0214 72 -  -  -  		ld 		(hl),d
   83 00:0215 D9 -  -  -  		exx
   84 00:0216 -  -  -  -  
   85 00:0216 C9 -  -  -  		ret
   86 00:0217 -  -  -  -  
   87 00:0217 -  -  -  -  ; ***************************************************************************************
   88 00:0217 -  -  -  -  ;
   89 00:0217 -  -  -  -  ;									Changes and Updates
   90 00:0217 -  -  -  -  ;
   91 00:0217 -  -  -  -  ; ***************************************************************************************
   92 00:0217 -  -  -  -  ;
   93 00:0217 -  -  -  -  ;		Date			Notes
   94 00:0217 -  -  -  -  ;		==== 			=====
   95 00:0217 -  -  -  -  ;
   96 00:0217 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:0217 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0217 -  -  -  -  ; ***************************************************************************************
    2 00:0217 -  -  -  -  ; ***************************************************************************************
    3 00:0217 -  -  -  -  ;
    4 00:0217 -  -  -  -  ;		Name : 		print.asm
    5 00:0217 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0217 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0217 -  -  -  -  ;		Reviewed :	No
    8 00:0217 -  -  -  -  ;		Purpose :	Print command
    9 00:0217 -  -  -  -  ;
   10 00:0217 -  -  -  -  ; ***************************************************************************************
   11 00:0217 -  -  -  -  ; ***************************************************************************************
   12 00:0217 -  -  -  -  
   13 00:0217 -  -  -  -  ; ***************************************************************************************
   14 00:0217 -  -  -  -  ;
   15 00:0217 -  -  -  -  ;										PRINT command
   16 00:0217 -  -  -  -  ;
   17 00:0217 -  -  -  -  ; ***************************************************************************************
   18 00:0217 -  -  -  -  
   19 00:0217 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0217 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:0219 32 82 00 00 		ld 		(PrintBase),a
   22 00:021D -  -  -  -  		;
   23 00:021D -  -  -  -  		;		Main loop
   24 00:021D -  -  -  -  		;
   25 00:021D -  -  -  -  _CPRLoop:
   26 00:021D DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:0220 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:0222 28 59 -  -  		jr 		z,_CPRExitNL
   29 00:0224 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:0226 28 55 -  -  		jr 		z,_CPRExitNL
   31 00:0228 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:022A 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 00:022C FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:022E 28 34 -  -  		jr 		z,_CPRTab
   35 00:0230 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:0232 28 2A -  -  		jr 		z,_CPRNewLine
   37 00:0234 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:0236 28 1C -  -  		jr 		z,_CPRHexMode
   39 00:0238 -  -  -  -  		;
   40 00:0238 CD 87 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   41 00:023C CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:023E 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 00:0240 -  -  -  -  		;
   44 00:0240 3A 82 00 00 		ld 		a,(PrintBase)				; current print mode.
   45 00:0244 -  -  -  -  _CPRPrintNumber:
   46 00:0244 01 A0 00 00 		ld  	bc,ConvertBuffer
   47 00:0248 C5 -  -  -  		push 	bc
   48 00:0249 CD D7 0E 00 		call 	Int32ToString 				; convert to string
   49 00:024D E1 -  -  -  		pop 	hl
   50 00:024E -  -  -  -  		;
   51 00:024E -  -  -  -  		; 		Print text at HL.
   52 00:024E -  -  -  -  		;
   53 00:024E -  -  -  -  _CPRPrintHL:
   54 00:024E CD 13 09 00 		call 	PrintStringAtHL 			; print string out
   55 00:0252 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:0254 -  -  -  -  		;
   57 00:0254 -  -  -  -  		;		Hex mode (~)
   58 00:0254 -  -  -  -  		;
   59 00:0254 -  -  -  -  _CPRHexMode:		
   60 00:0254 3E 10 -  -  		ld 		a,16
   61 00:0256 32 82 00 00 		ld 		(PrintBase),a
   62 00:025A DD 23 -  -  		inc 	ix
   63 00:025C 18 BF -  -  		jr 		_CPRLoop
   64 00:025E -  -  -  -  		;
   65 00:025E -  -  -  -  		; 		New line (')
   66 00:025E -  -  -  -  		;
   67 00:025E -  -  -  -  _CPRNewLine:
   68 00:025E CD 27 0F 00 		call 	SYSPrintCRLF
   69 00:0262 18 0C -  -  		jr 		_CPRCheckNext
   70 00:0264 -  -  -  -  		;
   71 00:0264 -  -  -  -  		; 		Tab command (,)
   72 00:0264 -  -  -  -  		;
   73 00:0264 -  -  -  -  _CPRTab:
   74 00:0264 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:0266 CD 26 0F 00 		call 	SYSPrintChar
   76 00:026A -  -  -  -  		;
   77 00:026A -  -  -  -  		;		Set to base 10 then check next character
   78 00:026A -  -  -  -  		;
   79 00:026A -  -  -  -  _CPRCheckNext10:		
   80 00:026A 3E F6 -  -  		ld 		a,-10
   81 00:026C 32 82 00 00 		ld 		(PrintBase),a
   82 00:0270 -  -  -  -  		;
   83 00:0270 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:0270 -  -  -  -  		;		
   85 00:0270 -  -  -  -  _CPRCheckNext:
   86 00:0270 DD 23 -  -  		inc 	ix 							; consume current
   87 00:0272 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:0275 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:0277 C8 -  -  -  		ret 	z
   90 00:0278 FE A7 -  -  		cp 		KWD_COLON
   91 00:027A C8 -  -  -  		ret 	z
   92 00:027B 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:027D -  -  -  -  		;
   94 00:027D -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:027D -  -  -  -  		;
   96 00:027D -  -  -  -  _CPRExitNL:
   97 00:027D CD 27 0F 00 		call 	SYSPrintCRLF 				; do CR/LF
   98 00:0281 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:0282 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0282 -  -  -  -  ; ***************************************************************************************
    2 00:0282 -  -  -  -  ; ***************************************************************************************
    3 00:0282 -  -  -  -  ;
    4 00:0282 -  -  -  -  ;		Name : 		rem.asm
    5 00:0282 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0282 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0282 -  -  -  -  ;		Reviewed :	No
    8 00:0282 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0282 -  -  -  -  ;
   10 00:0282 -  -  -  -  ; ***************************************************************************************
   11 00:0282 -  -  -  -  ; ***************************************************************************************
   12 00:0282 -  -  -  -  
   13 00:0282 -  -  -  -  ; ***************************************************************************************
   14 00:0282 -  -  -  -  ;
   15 00:0282 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0282 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0282 -  -  -  -  ;
   18 00:0282 -  -  -  -  ; ***************************************************************************************
   19 00:0282 -  -  -  -  
   20 00:0282 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0282 -  -  -  -  Command_REM2: 	;; [']
   22 00:0282 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0285 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:0287 C8 -  -  -  		ret 	z
   25 00:0288 DD 23 -  -  		inc 	ix
   26 00:028A FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:028C C8 -  -  -  		ret 	z
   28 00:028D FE 3F -  -  		cp 		STRING_MARKER
   29 00:028F C2 C6 03 00 		jp 		nz,SyntaxError
   30 00:0293 -  -  -  -  		;		
   31 00:0293 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:0297 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:029A 13 -  -  -  		inc 	de 
   34 00:029B 13 -  -  -  		inc 	de
   35 00:029C DD 19 -  -  		add 	ix,de 						; skip string
   36 00:029E C9 -  -  -  		ret
   37 00:029F -  -  -  -  
   38 00:029F -  -  -  -  ; ***************************************************************************************
   39 00:029F -  -  -  -  ;
   40 00:029F -  -  -  -  ;									Changes and Updates
   41 00:029F -  -  -  -  ;
   42 00:029F -  -  -  -  ; ***************************************************************************************
   43 00:029F -  -  -  -  ;
   44 00:029F -  -  -  -  ;		Date			Notes
   45 00:029F -  -  -  -  ;		==== 			=====
   46 00:029F -  -  -  -  ;
   47 00:029F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:029F -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:029F -  -  -  -  ; ***************************************************************************************
    2 00:029F -  -  -  -  ; ***************************************************************************************
    3 00:029F -  -  -  -  ;
    4 00:029F -  -  -  -  ;		Name : 		run.asm
    5 00:029F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:029F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:029F -  -  -  -  ;		Reviewed :	No
    8 00:029F -  -  -  -  ;		Purpose :	Run command
    9 00:029F -  -  -  -  ;
   10 00:029F -  -  -  -  ; ***************************************************************************************
   11 00:029F -  -  -  -  ; ***************************************************************************************
   12 00:029F -  -  -  -  
   13 00:029F -  -  -  -  ; ***************************************************************************************
   14 00:029F -  -  -  -  ;
   15 00:029F -  -  -  -  ;										RUN command
   16 00:029F -  -  -  -  ;
   17 00:029F -  -  -  -  ; ***************************************************************************************
   18 00:029F -  -  -  -  
   19 00:029F -  -  -  -  Command_RUN: 	;; [run]
   20 00:029F CD 97 08 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:02A3 -  -  -  -  
   22 00:02A3 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:02A8 ED 73 60 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:02AD AF -  -  -  		xor 	a
   25 00:02AE 32 80 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:02B2 -  -  -  -  		;
   27 00:02B2 -  -  -  -  		; 		New line at IX.
   28 00:02B2 -  -  -  -  		;
   29 00:02B2 -  -  -  -  CRNewLine:
   30 00:02B2 DD 22 5C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:02B7 -  -  -  -  		;
   32 00:02B7 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:02BA B7 -  -  -  		or 		a
   34 00:02BB CA A6 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:02BF -  -  -  -  		;
   36 00:02BF DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:02C1 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:02C3 DD 23 -  -  		inc 	ix
   39 00:02C5 -  -  -  -  		;
   40 00:02C5 -  -  -  -  		; 		New command at IX
   41 00:02C5 -  -  -  -  		;
   42 00:02C5 -  -  -  -  _CRNewCommand:	
   43 00:02C5 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:02C8 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:02C9 F2 04 03 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:02CD -  -  -  -  		;
   47 00:02CD FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:02CF 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:02D1 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:02D3 D2 F4 02 00 		jp 		nc,_CRAlternateLets
   51 00:02D7 -  -  -  -  		;
   52 00:02D7 -  -  -  -  _CRDoCommand:		
   53 00:02D7 E6 7F 21 00 
              00 00 6F 29 
              29 11 E0 0B 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:02EC DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:02EE CD 64 00 00 		call 	JumpCode 					; call the routine.
   56 00:02F2 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:02F4 -  -  -  -  		;
   58 00:02F4 -  -  -  -  		; 		Do CALL (HL)
   59 00:02F4 -  -  -  -  		;
   60 00:02F4 -  -  -  -  		;
   61 00:02F4 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:02F4 -  -  -  -  		;		
   63 00:02F4 -  -  -  -  _CRAlternateLets:		
   64 00:02F4 FE 83 -  -  		cp 		KWD_PLING
   65 00:02F6 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:02F8 FE 84 -  -  		cp 		KWD_QMARK
   67 00:02FA 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:02FC FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:02FE 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:0300 C3 C6 03 00 		jp 		SyntaxError
   71 00:0304 -  -  -  -  		;
   72 00:0304 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0304 -  -  -  -  		;
   74 00:0304 -  -  -  -  _CRAssignmentHandler:		
   75 00:0304 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:0306 D2 C6 03 00 		jp 		nc,SyntaxError
   77 00:030A -  -  -  -  _CRAssignmentLet:		
   78 00:030A CD C3 01 00 		call	Command_LET 				; do LET.
   79 00:030E C3 C5 02 00 		jp 		_CRNewCommand
   80 00:0312 -  -  -  -  
   81 00:0312 -  -  -  -  ; ***************************************************************************************
   82 00:0312 -  -  -  -  ;
   83 00:0312 -  -  -  -  ;									Changes and Updates
   84 00:0312 -  -  -  -  ;
   85 00:0312 -  -  -  -  ; ***************************************************************************************
   86 00:0312 -  -  -  -  ;
   87 00:0312 -  -  -  -  ;		Date			Notes
   88 00:0312 -  -  -  -  ;		==== 			=====
   89 00:0312 -  -  -  -  ;
   90 00:0312 -  -  -  -  ; ***************************************************************************************
   91 00:0312 -  -  -  -  		
Listing for file "_build.asm"
   23 00:0312 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0312 -  -  -  -  ; ***************************************************************************************
    2 00:0312 -  -  -  -  ; ***************************************************************************************
    3 00:0312 -  -  -  -  ;
    4 00:0312 -  -  -  -  ;		Name : 		stop.asm
    5 00:0312 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0312 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0312 -  -  -  -  ;		Reviewed :	No
    8 00:0312 -  -  -  -  ;		Purpose :	Stop command
    9 00:0312 -  -  -  -  ;
   10 00:0312 -  -  -  -  ; ***************************************************************************************
   11 00:0312 -  -  -  -  ; ***************************************************************************************
   12 00:0312 -  -  -  -  
   13 00:0312 -  -  -  -  ; ***************************************************************************************
   14 00:0312 -  -  -  -  ;
   15 00:0312 -  -  -  -  ;										STOP command
   16 00:0312 -  -  -  -  ;
   17 00:0312 -  -  -  -  ; ***************************************************************************************
   18 00:0312 -  -  -  -  
   19 00:0312 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0312 3E 0E C3 5C 
              03 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0318 -  -  -  -  
   22 00:0318 -  -  -  -  ; ***************************************************************************************
   23 00:0318 -  -  -  -  ;
   24 00:0318 -  -  -  -  ;									Changes and Updates
   25 00:0318 -  -  -  -  ;
   26 00:0318 -  -  -  -  ; ***************************************************************************************
   27 00:0318 -  -  -  -  ;
   28 00:0318 -  -  -  -  ;		Date			Notes
   29 00:0318 -  -  -  -  ;		==== 			=====
   30 00:0318 -  -  -  -  ;
   31 00:0318 -  -  -  -  ; ***************************************************************************************
   32 00:0318 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0318 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0318 -  -  -  -  ; ***************************************************************************************
    2 00:0318 -  -  -  -  ; ***************************************************************************************
    3 00:0318 -  -  -  -  ;
    4 00:0318 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0318 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0318 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0318 -  -  -  -  ;		Reviewed :	No
    8 00:0318 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0318 -  -  -  -  ;
   10 00:0318 -  -  -  -  ; ***************************************************************************************
   11 00:0318 -  -  -  -  ; ***************************************************************************************
   12 00:0318 -  -  -  -  
   13 00:0318 -  -  -  -  ; ***************************************************************************************
   14 00:0318 -  -  -  -  ;
   15 00:0318 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0318 -  -  -  -  ;
   17 00:0318 -  -  -  -  ; ***************************************************************************************
   18 00:0318 -  -  -  -  
   19 00:0318 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0318             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0318             		inc 	ix
   22 00:0318             		cp 		ch 							; exit if matches
   23 00:0318             		ret 	z
   24 00:0318             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0318             		jp 		ErrorHandler
   26 00:0318             #endmacro
   27 00:0318 -  -  -  -  
   28 00:0318 -  -  -  -  CheckLeftBracket:
   29 00:0318 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0B C3 5C 
              03 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0326 -  -  -  -  
   31 00:0326 -  -  -  -  CheckRightBracket:
   32 00:0326 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0C C3 5C 
              03 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0334 -  -  -  -  
   34 00:0334 -  -  -  -  CheckDollar:
   35 00:0334 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0A C3 5C 
              03 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0342 -  -  -  -  		
   37 00:0342 -  -  -  -  CheckComma:
   38 00:0342 DD 7E 00 DD 
              23 FE A6 C8 
              3E 09 C3 5C 
              03 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0350 -  -  -  -  
   40 00:0350 -  -  -  -  ; ***************************************************************************************
   41 00:0350 -  -  -  -  ;
   42 00:0350 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0350 -  -  -  -  ;
   44 00:0350 -  -  -  -  ; ***************************************************************************************
   45 00:0350 -  -  -  -  
   46 00:0350 -  -  -  -  CheckNextA:
   47 00:0350 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0353 DD 23 -  -  		inc 	ix 							; skip character
   49 00:0355 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:0356 3E 0F C3 5C 
              03 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:035C -  -  -  -  		
   52 00:035C -  -  -  -  ; ***************************************************************************************
   53 00:035C -  -  -  -  ;
   54 00:035C -  -  -  -  ;									Changes and Updates
   55 00:035C -  -  -  -  ;
   56 00:035C -  -  -  -  ; ***************************************************************************************
   57 00:035C -  -  -  -  ;
   58 00:035C -  -  -  -  ;		Date			Notes
   59 00:035C -  -  -  -  ;		==== 			=====
   60 00:035C -  -  -  -  ;
   61 00:035C -  -  -  -  ; ***************************************************************************************
   62 00:035C -  -  -  -  		
Listing for file "_build.asm"
   25 00:035C -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:035C -  -  -  -  ; ***************************************************************************************
    2 00:035C -  -  -  -  ; ***************************************************************************************
    3 00:035C -  -  -  -  ;
    4 00:035C -  -  -  -  ;		Name : 		errors.asm
    5 00:035C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:035C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:035C -  -  -  -  ;		Reviewed :	No
    8 00:035C -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:035C -  -  -  -  ;
   10 00:035C -  -  -  -  ; ***************************************************************************************
   11 00:035C -  -  -  -  ; ***************************************************************************************
   12 00:035C -  -  -  -  
   13 00:035C -  -  -  -  ; ***************************************************************************************
   14 00:035C -  -  -  -  ;
   15 00:035C -  -  -  -  ;								Error handler, message A 
   16 00:035C -  -  -  -  ;
   17 00:035C -  -  -  -  ; ***************************************************************************************
   18 00:035C -  -  -  -  
   19 00:035C -  -  -  -  ErrorHandler:
   20 00:035C F5 -  -  -  		push 	af 						; save error ID
   21 00:035D -  -  -  -  
   22 00:035D 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0361 6F -  -  -  		ld 		l,a
   24 00:0362 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0363 29 -  -  -  		add 	hl,hl 		
   26 00:0364 11 91 0A 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:0368 19 -  -  -  		add 	hl,de
   28 00:0369 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:036B CD 13 09 00 		call 	PrintStringAtHL
   30 00:036F -  -  -  -  		;
   31 00:036F F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0370 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0371 28 2F -  -  		jr 		z,_EHExit
   34 00:0373 -  -  -  -  		;
   35 00:0373 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:0378 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:037B B7 -  -  -  		or 		a
   38 00:037C 28 24 -  -  		jr 		z,_EHExit
   39 00:037E -  -  -  -  
   40 00:037E 21 AA 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0382 CD 13 09 00 		call 	PrintStringAtHL 
   42 00:0386 -  -  -  -  		
   43 00:0386 D9 -  -  -  		exx								; HL'HL = line number
   44 00:0387 21 00 00 00 		ld 		hl,$0000 		
   45 00:038B D9 -  -  -  		exx 
   46 00:038C DD 6E 01 -  		ld 		l,(ix+1)
   47 00:038F DD 66 02 -  		ld 		h,(ix+2)
   48 00:0392 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:0394 01 A0 00 00 		ld 		bc,ConvertBuffer
   50 00:0398 CD D7 0E 00 		call 	Int32ToString
   51 00:039C C5 -  -  -  		push 	bc
   52 00:039D E1 -  -  -  		pop 	hl
   53 00:039E CD 13 09 00 		call 	PrintStringAtHL			; print error line number.
   54 00:03A2 -  -  -  -  _EHExit:		
   55 00:03A2 CD 27 0F 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:03A6 C3 1A 00 00 		jp 		WarmStart
   57 00:03AA -  -  -  -  
   58 00:03AA -  -  -  -  _EHAtText:
   59 00:03AA 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:03B4 -  -  -  -  
   61 00:03B4 -  -  -  -  NotImplemented:
   62 00:03B4 3E 05 C3 5C 
              03 00 -  -  		ERR_DISABLED
   63 00:03BA -  -  -  -  TypeMismatch:
   64 00:03BA 3E 02 C3 5C 
              03 00 -  -  		ERR_BADTYPE
   65 00:03C0 -  -  -  -  BadValue:
   66 00:03C0 3E 03 C3 5C 
              03 00 -  -  		ERR_BADVALUE
   67 00:03C6 -  -  -  -  SyntaxError:
   68 00:03C6 3E 0F C3 5C 
              03 00 -  -  		ERR_SYNTAX
   69 00:03CC -  -  -  -  						
   70 00:03CC -  -  -  -  ; ***************************************************************************************
   71 00:03CC -  -  -  -  ;
   72 00:03CC -  -  -  -  ;									Changes and Updates
   73 00:03CC -  -  -  -  ;
   74 00:03CC -  -  -  -  ; ***************************************************************************************
   75 00:03CC -  -  -  -  ;
   76 00:03CC -  -  -  -  ;		Date			Notes
   77 00:03CC -  -  -  -  ;		==== 			=====
   78 00:03CC -  -  -  -  ;
   79 00:03CC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:03CC -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:03CC -  -  -  -  ; ***************************************************************************************
    2 00:03CC -  -  -  -  ; ***************************************************************************************
    3 00:03CC -  -  -  -  ;
    4 00:03CC -  -  -  -  ;		Name : 		basicmath.asm
    5 00:03CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03CC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03CC -  -  -  -  ;		Reviewed :	No
    8 00:03CC -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:03CC -  -  -  -  ;
   10 00:03CC -  -  -  -  ; ***************************************************************************************
   11 00:03CC -  -  -  -  ; ***************************************************************************************
   12 00:03CC -  -  -  -  
   13 00:03CC -  -  -  -  ; ***************************************************************************************
   14 00:03CC -  -  -  -  ;
   15 00:03CC -  -  -  -  ; 									Addition
   16 00:03CC -  -  -  -  ;
   17 00:03CC -  -  -  -  ; ***************************************************************************************
   18 00:03CC -  -  -  -  
   19 00:03CC -  -  -  -  ALUAdd: 		;; [+]
   20 00:03CC CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 56 
              0E 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:03DA -  -  -  -  
   22 00:03DA -  -  -  -  ; ***************************************************************************************
   23 00:03DA -  -  -  -  ;
   24 00:03DA -  -  -  -  ; 									Subtraction
   25 00:03DA -  -  -  -  ;
   26 00:03DA -  -  -  -  ; ***************************************************************************************
   27 00:03DA -  -  -  -  
   28 00:03DA -  -  -  -  ALUSubtract: 	;; [-]
   29 00:03DA CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 5E 
              0E 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:03E8 -  -  -  -  
   31 00:03E8 -  -  -  -  ; ***************************************************************************************
   32 00:03E8 -  -  -  -  ;
   33 00:03E8 -  -  -  -  ; 									  Multiply
   34 00:03E8 -  -  -  -  ;
   35 00:03E8 -  -  -  -  ; ***************************************************************************************
   36 00:03E8 -  -  -  -  
   37 00:03E8 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:03E8 CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 1D 
              0E 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:03F6 -  -  -  -  
   40 00:03F6 -  -  -  -  ; ***************************************************************************************
   41 00:03F6 -  -  -  -  ;
   42 00:03F6 -  -  -  -  ; 									  Divide
   43 00:03F6 -  -  -  -  ;
   44 00:03F6 -  -  -  -  ; ***************************************************************************************
   45 00:03F6 -  -  -  -  
   46 00:03F6 -  -  -  -  ALUDivide: 	;; [/]
   47 00:03F6 -  -  -  -  ALUDivide2:	;; [div]
   48 00:03F6 CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 1D 
              0D 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0404 -  -  -  -  
   50 00:0404 -  -  -  -  ; ***************************************************************************************
   51 00:0404 -  -  -  -  ;
   52 00:0404 -  -  -  -  ; 									  Modulus
   53 00:0404 -  -  -  -  ;
   54 00:0404 -  -  -  -  ; ***************************************************************************************
   55 00:0404 -  -  -  -  
   56 00:0404 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0404 CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 20 
              0D 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0412 -  -  -  -  
   59 00:0412 -  -  -  -  ; ***************************************************************************************
   60 00:0412 -  -  -  -  ;
   61 00:0412 -  -  -  -  ; 									  Logical
   62 00:0412 -  -  -  -  ;
   63 00:0412 -  -  -  -  ; ***************************************************************************************
   64 00:0412 -  -  -  -  
   65 00:0412 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0412 CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 68 
              0E 00 -  -  		IntegerDispatch(Int32And)
   67 00:0420 -  -  -  -  
   68 00:0420 -  -  -  -  ALUOr: 			;; [or]
   69 00:0420 CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 75 
              0E 00 -  -  		IntegerDispatch(Int32Or)
   70 00:042E -  -  -  -  
   71 00:042E -  -  -  -  ALUXor: 		;; [eor]
   72 00:042E CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 82 
              0E 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:043C -  -  -  -  
   74 00:043C -  -  -  -  ; ***************************************************************************************
   75 00:043C -  -  -  -  ;
   76 00:043C -  -  -  -  ;									Changes and Updates
   77 00:043C -  -  -  -  ;
   78 00:043C -  -  -  -  ; ***************************************************************************************
   79 00:043C -  -  -  -  ;
   80 00:043C -  -  -  -  ;		Date			Notes
   81 00:043C -  -  -  -  ;		==== 			=====
   82 00:043C -  -  -  -  ;
   83 00:043C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:043C -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:043C -  -  -  -  ; ***************************************************************************************
    2 00:043C -  -  -  -  ; ***************************************************************************************
    3 00:043C -  -  -  -  ;
    4 00:043C -  -  -  -  ;		Name : 		binrefs.asm
    5 00:043C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:043C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:043C -  -  -  -  ;		Reviewed :	No
    8 00:043C -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:043C -  -  -  -  ;
   10 00:043C -  -  -  -  ; ***************************************************************************************
   11 00:043C -  -  -  -  ; ***************************************************************************************
   12 00:043C -  -  -  -  
   13 00:043C -  -  -  -  ; ***************************************************************************************
   14 00:043C -  -  -  -  ;
   15 00:043C -  -  -  -  ; 									<l> <op> <r>
   16 00:043C -  -  -  -  ;
   17 00:043C -  -  -  -  ; ***************************************************************************************
   18 00:043C -  -  -  -  
   19 00:043C -  -  -  -  ALULongReference:			;; [!]
   20 00:043C CD 4C 04 00 		call 	BRGetAddress 				; calculate address
   21 00:0440 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0442 CB F9 -  -  		set 	CIsReference,c
   23 00:0444 C9 -  -  -  		ret
   24 00:0445 -  -  -  -  
   25 00:0445 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0445 CD 3C 04 00 		call 	ALULongReference
   27 00:0449 CB F1 -  -  		set 	CIsByteReference,c
   28 00:044B C9 -  -  -  		ret
   29 00:044C -  -  -  -  
   30 00:044C -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:044C CD E9 04 00 
              78 B1 C2 BA 
              03 00 C3 5A 
              04 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:045A -  -  -  -  _BRGAMain:		
   33 00:045A CD 56 0E 00 		call 	Int32Add 					; address in HL'HL
   34 00:045E CD EF 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0462 C9 -  -  -  		ret
   36 00:0463 -  -  -  -  
   37 00:0463 -  -  -  -  ; ***************************************************************************************
   38 00:0463 -  -  -  -  ;
   39 00:0463 -  -  -  -  ;									Changes and Updates
   40 00:0463 -  -  -  -  ;
   41 00:0463 -  -  -  -  ; ***************************************************************************************
   42 00:0463 -  -  -  -  ;
   43 00:0463 -  -  -  -  ;		Date			Notes
   44 00:0463 -  -  -  -  ;		==== 			=====
   45 00:0463 -  -  -  -  ;
   46 00:0463 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:0463 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0463 -  -  -  -  ; ***************************************************************************************
    2 00:0463 -  -  -  -  ; ***************************************************************************************
    3 00:0463 -  -  -  -  ;
    4 00:0463 -  -  -  -  ;		Name : 		compare.asm
    5 00:0463 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0463 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0463 -  -  -  -  ;		Reviewed :	No
    8 00:0463 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0463 -  -  -  -  ;
   10 00:0463 -  -  -  -  ; ***************************************************************************************
   11 00:0463 -  -  -  -  ; ***************************************************************************************
   12 00:0463 -  -  -  -  
   13 00:0463 -  -  -  -  #macro compare_equals(n)
   14 00:0463             		call 	CompareBaseCode
   15 00:0463             		cp 		n
   16 00:0463             		jr 		z,UnaryInt32True
   17 00:0463             		jr 		UnaryInt32False
   18 00:0463             #endmacro
   19 00:0463 -  -  -  -  
   20 00:0463 -  -  -  -  #macro compare_not_equals(n)
   21 00:0463             		call 	CompareBaseCode
   22 00:0463             		cp 		n
   23 00:0463             		jr 		nz,UnaryInt32True
   24 00:0463             		jr 		UnaryInt32False
   25 00:0463             #endmacro
   26 00:0463 -  -  -  -  
   27 00:0463 -  -  -  -  ; ***************************************************************************************
   28 00:0463 -  -  -  -  ;
   29 00:0463 -  -  -  -  ; 								Return True/False
   30 00:0463 -  -  -  -  ;
   31 00:0463 -  -  -  -  ; ***************************************************************************************
   32 00:0463 -  -  -  -  
   33 00:0463 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0463 3E FF -  -  		ld 		a,255
   35 00:0465 18 01 -  -  		jr 		_Int32Logical
   36 00:0467 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:0467 AF -  -  -  		xor 	a
   38 00:0468 -  -  -  -  _Int32Logical:
   39 00:0468 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:0469 67 -  -  -  		ld 		h,a
   41 00:046A D9 -  -  -  		exx
   42 00:046B 6F -  -  -  		ld 		l,a
   43 00:046C 67 -  -  -  		ld 		h,a
   44 00:046D D9 -  -  -  		exx
   45 00:046E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0470 C9 -  -  -  		ret
   47 00:0471 -  -  -  -  
   48 00:0471 -  -  -  -  ; ***************************************************************************************
   49 00:0471 -  -  -  -  ;
   50 00:0471 -  -  -  -  ; 										> = < (compare == value)
   51 00:0471 -  -  -  -  ;
   52 00:0471 -  -  -  -  ; ***************************************************************************************
   53 00:0471 -  -  -  -  
   54 00:0471 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0471 CD AD 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:047B -  -  -  -  
   57 00:047B -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:047B CD AD 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:0485 -  -  -  -  
   60 00:0485 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:0485 CD AD 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:048F -  -  -  -  
   63 00:048F -  -  -  -  ; ***************************************************************************************
   64 00:048F -  -  -  -  ;
   65 00:048F -  -  -  -  ; 										> = < (compare <> value)
   66 00:048F -  -  -  -  ;
   67 00:048F -  -  -  -  ; ***************************************************************************************
   68 00:048F -  -  -  -  
   69 00:048F -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:048F CD AD 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0499 -  -  -  -  
   72 00:0499 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0499 CD AD 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:04A3 -  -  -  -  
   75 00:04A3 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:04A3 CD AD 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:04AD -  -  -  -  
   78 00:04AD -  -  -  -  ; ***************************************************************************************
   79 00:04AD -  -  -  -  ;
   80 00:04AD -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:04AD -  -  -  -  ;
   82 00:04AD -  -  -  -  ; ***************************************************************************************
   83 00:04AD -  -  -  -  
   84 00:04AD -  -  -  -  CompareBaseCode:
   85 00:04AD CD E9 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:04B1 -  -  -  -  
   87 00:04B1 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:04B2 A1 -  -  -  		and 	c
   89 00:04B3 CB 47 -  -  		bit 	CIsString,a 
   90 00:04B5 C2 C7 04 00 		jp 		nz,StringCompare
   91 00:04B9 -  -  -  -  
   92 00:04B9 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:04BA B1 -  -  -  		or 		c
   94 00:04BB CB 47 -  -  		bit 	CIsString,a 
   95 00:04BD CA 96 0E 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:04C1 -  -  -  -  
   97 00:04C1 3E 02 C3 5C 
              03 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:04C7 -  -  -  -  ;
   99 00:04C7 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:04C7 -  -  -  -  ;
  101 00:04C7 -  -  -  -  StringCompare:
  102 00:04C7 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:04C8 BE -  -  -  		cp 		(hl)
  104 00:04C9 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:04CB 20 08 -  -  		jr 		nz,_SCLess
  106 00:04CD 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:04CE 23 -  -  -  		inc 	hl
  108 00:04CF FE 20 -  -  		cp 		' '
  109 00:04D1 30 F4 -  -  		jr 		nc,StringCompare
  110 00:04D3 AF -  -  -  		xor 	a 							; return 0.
  111 00:04D4 C9 -  -  -  		ret
  112 00:04D5 -  -  -  -  
  113 00:04D5 -  -  -  -  _SCLess:
  114 00:04D5 3E FF -  -  		ld 		a,$FF
  115 00:04D7 C9 -  -  -  		ret
  116 00:04D8 -  -  -  -  _SCGreater:
  117 00:04D8 3E 01 -  -  		ld 		a,1
  118 00:04DA C9 -  -  -  		ret
  119 00:04DB -  -  -  -  
  120 00:04DB 3E 10 C3 5C 
              03 00 -  -  		ERR_TODO()
  121 00:04E1 -  -  -  -  
  122 00:04E1 -  -  -  -  ; ***************************************************************************************
  123 00:04E1 -  -  -  -  ;
  124 00:04E1 -  -  -  -  ;									Changes and Updates
  125 00:04E1 -  -  -  -  ;
  126 00:04E1 -  -  -  -  ; ***************************************************************************************
  127 00:04E1 -  -  -  -  ;
  128 00:04E1 -  -  -  -  ;		Date			Notes
  129 00:04E1 -  -  -  -  ;		==== 			=====
  130 00:04E1 -  -  -  -  ;
  131 00:04E1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:04E1 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:04E1 -  -  -  -  ; ***************************************************************************************
    2 00:04E1 -  -  -  -  ; ***************************************************************************************
    3 00:04E1 -  -  -  -  ;
    4 00:04E1 -  -  -  -  ;		Name : 		utility.asm
    5 00:04E1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04E1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04E1 -  -  -  -  ;		Reviewed :	No
    8 00:04E1 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:04E1 -  -  -  -  ;
   10 00:04E1 -  -  -  -  ; ***************************************************************************************
   11 00:04E1 -  -  -  -  ; ***************************************************************************************
   12 00:04E1 -  -  -  -  
   13 00:04E1 -  -  -  -  ; ***************************************************************************************
   14 00:04E1 -  -  -  -  ;
   15 00:04E1 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:04E1 -  -  -  -  ;
   17 00:04E1 -  -  -  -  ; ***************************************************************************************
   18 00:04E1 -  -  -  -  
   19 00:04E1 -  -  -  -  SwapHLDE:
   20 00:04E1 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:04E2 D9 -  -  -  			exx
   22 00:04E3 EB -  -  -  			ex 		de,hl
   23 00:04E4 D9 -  -  -  			exx
   24 00:04E5 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:04E6 41 -  -  -  			ld 		b,c
   26 00:04E7 4F -  -  -  			ld 		c,a
   27 00:04E8 C9 -  -  -  			ret
   28 00:04E9 -  -  -  -  
   29 00:04E9 -  -  -  -  ; ***************************************************************************************
   30 00:04E9 -  -  -  -  ;
   31 00:04E9 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:04E9 -  -  -  -  ;
   33 00:04E9 -  -  -  -  ; ***************************************************************************************
   34 00:04E9 -  -  -  -  
   35 00:04E9 -  -  -  -  DereferenceBoth:
   36 00:04E9 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:04EB C4 C2 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:04EF CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:04F1 C8 -  -  -  			ret 	z
   40 00:04F2 CD E1 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:04F6 CD C2 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:04FA CD E1 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:04FE C9 -  -  -  			ret
   44 00:04FF -  -  -  -  
   45 00:04FF -  -  -  -  ; ***************************************************************************************
   46 00:04FF -  -  -  -  ;
   47 00:04FF -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:04FF -  -  -  -  ;
   49 00:04FF -  -  -  -  ; ***************************************************************************************
   50 00:04FF -  -  -  -  
   51 00:04FF -  -  -  -  NegateHLHL:	
   52 00:04FF CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0501 C2 BA 03 00 			jp 		nz,TypeMismatch
   54 00:0505 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0507 C4 C2 05 00 			call 	nz,Dereference 			; if required.
   56 00:050B CD C0 0E 00 			call 	Int32Negate
   57 00:050F C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:0510 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0510 -  -  -  -  ; ***************************************************************************************
    2 00:0510 -  -  -  -  ; ***************************************************************************************
    3 00:0510 -  -  -  -  ;
    4 00:0510 -  -  -  -  ;		Name : 		expression.asm
    5 00:0510 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0510 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0510 -  -  -  -  ;		Reviewed :	None
    8 00:0510 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0510 -  -  -  -  ;
   10 00:0510 -  -  -  -  ; ***************************************************************************************
   11 00:0510 -  -  -  -  ; ***************************************************************************************
   12 00:0510 -  -  -  -  
   13 00:0510 -  -  -  -  ; ***************************************************************************************
   14 00:0510 -  -  -  -  ;
   15 00:0510 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0510 -  -  -  -  ;
   17 00:0510 -  -  -  -  ; ***************************************************************************************
   18 00:0510 -  -  -  -  
   19 00:0510 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0510 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0511 -  -  -  -  EvaluateAtPrecedence:
   22 00:0511 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0512 -  -  -  -  		;
   24 00:0512 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0512 -  -  -  -  		;
   26 00:0512 CD 1E 06 00 		call 	EvaluateTerm 				; get term
   27 00:0516 -  -  -  -  		;
   28 00:0516 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0516 -  -  -  -  		;
   30 00:0516 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0517 -  -  -  -  _EAPLoop:
   32 00:0517 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:051A FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:051C D8 -  -  -  		ret 	c
   35 00:051D FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:051F D0 -  -  -  		ret 	nc
   37 00:0520 -  -  -  -  		;
   38 00:0520 -  -  -  -  		; 		Get the precedence.
   39 00:0520 -  -  -  -  		;
   40 00:0520 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0521 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0523 21 80 0A 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0527 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:0528 6F -  -  -  		ld 		l,a
   45 00:0529 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:052A E1 -  -  -  		pop 	hl 							; restore HL
   47 00:052B -  -  -  -  		;
   48 00:052B -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:052B -  -  -  -  		;
   50 00:052B 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:052C BB -  -  -  		cp 		e
   52 00:052D D0 -  -  -  		ret 	nc
   53 00:052E -  -  -  -  
   54 00:052E -  -  -  -  		;
   55 00:052E -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:052E -  -  -  -  		;
   57 00:052E D5 -  -  -  		push 	de 							; save precedence information.
   58 00:052F -  -  -  -  		;
   59 00:052F DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0532 F5 -  -  -  		push 	af
   61 00:0533 -  -  -  -  		;
   62 00:0533 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0534 D9 -  -  -  		exx 								; save HL'
   64 00:0535 E5 -  -  -  		push 	hl
   65 00:0536 D9 -  -  -  		exx 								
   66 00:0537 E5 -  -  -  		push 	hl 							; save HL
   67 00:0538 -  -  -  -  		;
   68 00:0538 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:053A -  -  -  -  		;
   70 00:053A -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:053A -  -  -  -  		;
   72 00:053A 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:053B CD 11 05 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:053F -  -  -  -  		;
   75 00:053F -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:053F -  -  -  -  		;
   77 00:053F 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0540 -  -  -  -  
   79 00:0540 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0541 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0542 D9 -  -  -  		exx
   82 00:0543 EB -  -  -  		ex 		de,hl
   83 00:0544 E1 -  -  -  		pop 	hl
   84 00:0545 D9 -  -  -  		exx
   85 00:0546 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:0547 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:0548 -  -  -  -  		;
   88 00:0548 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:0548 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:0548 -  -  -  -  		;
   91 00:0548 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:0549 -  -  -  -  		;
   93 00:0549 -  -  -  -  		; 		Call the binary operator in A.
   94 00:0549 -  -  -  -  		;
   95 00:0549 D5 -  -  -  		push 	de
   96 00:054A E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:054B E6 7F 21 00 
              00 00 6F 29 
              29 11 E0 0B 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0560 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0561 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0562 CD 64 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:0566 -  -  -  -  		;
  102 00:0566 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:0567 -  -  -  -  		;
  104 00:0567 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:0569 -  -  -  -  
  106 00:0569 -  -  -  -  ; ***************************************************************************************
  107 00:0569 -  -  -  -  ;
  108 00:0569 -  -  -  -  ;									Changes and Updates
  109 00:0569 -  -  -  -  ;
  110 00:0569 -  -  -  -  ; ***************************************************************************************
  111 00:0569 -  -  -  -  ;
  112 00:0569 -  -  -  -  ;		Date			Notes
  113 00:0569 -  -  -  -  ;		==== 			=====
  114 00:0569 -  -  -  -  ;
  115 00:0569 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0569 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:0569 -  -  -  -  ; ***************************************************************************************
    2 00:0569 -  -  -  -  ; ***************************************************************************************
    3 00:0569 -  -  -  -  ;
    4 00:0569 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:0569 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0569 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0569 -  -  -  -  ;		Reviewed :	No
    8 00:0569 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:0569 -  -  -  -  ;
   10 00:0569 -  -  -  -  ; ***************************************************************************************
   11 00:0569 -  -  -  -  ; ***************************************************************************************
   12 00:0569 -  -  -  -  
   13 00:0569 -  -  -  -  ; ***************************************************************************************
   14 00:0569 -  -  -  -  ;
   15 00:0569 -  -  -  -  ; 								Evaluate an integer term
   16 00:0569 -  -  -  -  ;
   17 00:0569 -  -  -  -  ; ***************************************************************************************
   18 00:0569 -  -  -  -  
   19 00:0569 -  -  -  -  EvaluateIntegerTerm:
   20 00:0569 CD 1E 06 00 		call 	EvaluateTerm
   21 00:056D CD C2 05 00 		call 	DeReference
   22 00:0571 CB 41 -  -  		bit 	CIsString,c
   23 00:0573 C8 -  -  -  		ret 	z
   24 00:0574 C3 BA 03 00 		jp 		TypeMismatch
   25 00:0578 -  -  -  -  
   26 00:0578 -  -  -  -  ; ***************************************************************************************
   27 00:0578 -  -  -  -  ;
   28 00:0578 -  -  -  -  ; 								Evaluate a string term
   29 00:0578 -  -  -  -  ;
   30 00:0578 -  -  -  -  ; ***************************************************************************************
   31 00:0578 -  -  -  -  
   32 00:0578 -  -  -  -  EvaluateStringTerm:
   33 00:0578 CD 1E 06 00 		call 	EvaluateTerm
   34 00:057C CD C2 05 00 		call 	DeReference
   35 00:0580 CB 41 -  -  		bit 	CIsString,c
   36 00:0582 C0 -  -  -  		ret 	nz
   37 00:0583 C3 BA 03 00 		jp 		TypeMismatch
   38 00:0587 -  -  -  -  
   39 00:0587 -  -  -  -  ; ***************************************************************************************
   40 00:0587 -  -  -  -  ;
   41 00:0587 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:0587 -  -  -  -  ;
   43 00:0587 -  -  -  -  ; ***************************************************************************************
   44 00:0587 -  -  -  -  
   45 00:0587 -  -  -  -  EvaluateValue:
   46 00:0587 CD 10 05 00 		call 	EvaluateAtPrecedence0
   47 00:058B C3 C2 05 00 		jp 		Dereference
   48 00:058F -  -  -  -  
   49 00:058F -  -  -  -  ; ***************************************************************************************
   50 00:058F -  -  -  -  ;
   51 00:058F -  -  -  -  ; 									Evaluate a number
   52 00:058F -  -  -  -  ;
   53 00:058F -  -  -  -  ; ***************************************************************************************
   54 00:058F -  -  -  -  
   55 00:058F -  -  -  -  EvaluateInteger:
   56 00:058F CD 87 05 00 		call 	EvaluateValue
   57 00:0593 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:0595 C8 -  -  -  		ret 	z
   59 00:0596 C3 BA 03 00 		jp 		TypeMismatch
   60 00:059A -  -  -  -  
   61 00:059A -  -  -  -  ; ***************************************************************************************
   62 00:059A -  -  -  -  ;
   63 00:059A -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:059A -  -  -  -  ;
   65 00:059A -  -  -  -  ; ***************************************************************************************
   66 00:059A -  -  -  -  
   67 00:059A -  -  -  -  Evaluate8BitInteger:
   68 00:059A CD 8F 05 00 		call 	EvaluateInteger
   69 00:059E D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:059F 7C -  -  -  		ld 		a,h
   71 00:05A0 B5 -  -  -  		or 		l
   72 00:05A1 D9 -  -  -  		exx 	
   73 00:05A2 B4 -  -  -  		or 		h
   74 00:05A3 C2 C0 03 00 		jp 		nz,BadValue
   75 00:05A7 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:05A8 C9 -  -  -  		ret
   77 00:05A9 -  -  -  -  		
   78 00:05A9 -  -  -  -  ; ***************************************************************************************
   79 00:05A9 -  -  -  -  ;
   80 00:05A9 -  -  -  -  ; 									Evaluate a string
   81 00:05A9 -  -  -  -  ;
   82 00:05A9 -  -  -  -  ; ***************************************************************************************
   83 00:05A9 -  -  -  -  
   84 00:05A9 -  -  -  -  EvaluateStringOnly:
   85 00:05A9 CD 87 05 00 		call 	EvaluateValue
   86 00:05AD CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:05AF CA BA 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:05B3 C9 -  -  -  		ret
   89 00:05B4 -  -  -  -  
   90 00:05B4 -  -  -  -  ; ***************************************************************************************
   91 00:05B4 -  -  -  -  ;
   92 00:05B4 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:05B4 -  -  -  -  ;
   94 00:05B4 -  -  -  -  ; ***************************************************************************************
   95 00:05B4 -  -  -  -  
   96 00:05B4 -  -  -  -  Return8BitConstant:
   97 00:05B4 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:05B8 6F -  -  -  		ld 		l,a
   99 00:05B9 -  -  -  -  Return16BitConstant:
  100 00:05B9 D9 -  -  -  		exx 								; clear HL'
  101 00:05BA 21 00 00 00 		ld 		hl,0
  102 00:05BE D9 -  -  -  		exx
  103 00:05BF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:05C1 C9 -  -  -  		ret
  105 00:05C2 -  -  -  -  
  106 00:05C2 -  -  -  -  ; ***************************************************************************************
  107 00:05C2 -  -  -  -  ;
  108 00:05C2 -  -  -  -  ;									Changes and Updates
  109 00:05C2 -  -  -  -  ;
  110 00:05C2 -  -  -  -  ; ***************************************************************************************
  111 00:05C2 -  -  -  -  ;
  112 00:05C2 -  -  -  -  ;		Date			Notes
  113 00:05C2 -  -  -  -  ;		==== 			=====
  114 00:05C2 -  -  -  -  ;
  115 00:05C2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:05C2 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:05C2 -  -  -  -  ; ***************************************************************************************
    2 00:05C2 -  -  -  -  ; ***************************************************************************************
    3 00:05C2 -  -  -  -  ;
    4 00:05C2 -  -  -  -  ;		Name : 		reference.asm
    5 00:05C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05C2 -  -  -  -  ;		Date : 		1st May 2022
    7 00:05C2 -  -  -  -  ;		Reviewed :	No
    8 00:05C2 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:05C2 -  -  -  -  ;
   10 00:05C2 -  -  -  -  ; ***************************************************************************************
   11 00:05C2 -  -  -  -  ; ***************************************************************************************
   12 00:05C2 -  -  -  -  
   13 00:05C2 -  -  -  -  ; ***************************************************************************************
   14 00:05C2 -  -  -  -  ;
   15 00:05C2 -  -  -  -  ; 									Dereference HL'HL C
   16 00:05C2 -  -  -  -  ;
   17 00:05C2 -  -  -  -  ; ***************************************************************************************
   18 00:05C2 -  -  -  -  
   19 00:05C2 -  -  -  -  Dereference:
   20 00:05C2 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:05C4 C8 -  -  -  		ret 	z
   22 00:05C5 -  -  -  -  
   23 00:05C5 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:05C7 -  -  -  -  		
   25 00:05C7 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:05C9 20 1E -  -  		jr 		nz,_DRInternal
   27 00:05CB -  -  -  -  
   28 00:05CB CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:05CD 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:05CF -  -  -  -  
   31 00:05CF E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:05D0 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:05D2 D9 -  -  -  		exx
   34 00:05D3 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:05D4 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:05D5 23 -  -  -  		inc  	hl
   37 00:05D6 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:05D8 D9 -  -  -  		exx 								; fix back
   39 00:05D9 C9 -  -  -  		ret
   40 00:05DA -  -  -  -  
   41 00:05DA -  -  -  -  _DeRefByte:		
   42 00:05DA 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:05DB 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:05DF 6F -  -  -  		ld	 	l,a
   45 00:05E0 D9 -  -  -  		exx
   46 00:05E1 21 00 00 00 		ld 		hl,$0000
   47 00:05E5 D9 -  -  -  		exx
   48 00:05E6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:05E8 C9 -  -  -  		ret
   50 00:05E9 -  -  -  -  
   51 00:05E9 -  -  -  -  _DRInternal:
   52 00:05E9 3E 05 C3 5C 
              03 00 -  -  		ERR_DISABLED
   53 00:05EF -  -  -  -  
   54 00:05EF -  -  -  -  ; ***************************************************************************************
   55 00:05EF -  -  -  -  ;
   56 00:05EF -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:05EF -  -  -  -  ;
   58 00:05EF -  -  -  -  ; ***************************************************************************************
   59 00:05EF -  -  -  -  
   60 00:05EF -  -  -  -  DRConvertHLHLToAddress:
   61 00:05EF -  -  -  -  		#ifdef EZ80
   62 00:05EF 22 6A 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:05F3 D9 -  -  -  		exx
   64 00:05F4 22 6C 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:05F8 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:05FC D9 -  -  -  		exx
   67 00:05FD 2A 6A 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0601 -  -  -  -  		#endif
   69 00:0601 C9 -  -  -  		ret
   70 00:0602 -  -  -  -  
   71 00:0602 -  -  -  -  ; ***************************************************************************************
   72 00:0602 -  -  -  -  ;
   73 00:0602 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0602 -  -  -  -  ;
   75 00:0602 -  -  -  -  ; ***************************************************************************************
   76 00:0602 -  -  -  -  
   77 00:0602 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0602 -  -  -  -  		#ifdef EZ80
   79 00:0602 22 6A 00 00 		ld 		(AConvert),hl
   80 00:0606 21 00 00 00 		ld 		hl,$0000
   81 00:060A 22 6D 00 00 		ld 		(AConvert+3),hl
   82 00:060E D9 -  -  -  		exx
   83 00:060F 2A 6C 00 00 		ld 		hl,(AConvert+2)
   84 00:0613 D9 -  -  -  		exx
   85 00:0614 AF -  -  -  		xor 	a
   86 00:0615 32 6C 00 00 		ld 		(AConvert+2),a
   87 00:0619 2A 6A 00 00 		ld 		hl,(AConvert)
   88 00:061D -  -  -  -  		#endif
   89 00:061D C9 -  -  -  		ret
   90 00:061E -  -  -  -  
   91 00:061E -  -  -  -  ; ***************************************************************************************
   92 00:061E -  -  -  -  ;
   93 00:061E -  -  -  -  ;									Changes and Updates
   94 00:061E -  -  -  -  ;
   95 00:061E -  -  -  -  ; ***************************************************************************************
   96 00:061E -  -  -  -  ;
   97 00:061E -  -  -  -  ;		Date			Notes
   98 00:061E -  -  -  -  ;		==== 			=====
   99 00:061E -  -  -  -  ;
  100 00:061E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:061E -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:061E -  -  -  -  ; ***************************************************************************************
    2 00:061E -  -  -  -  ; ***************************************************************************************
    3 00:061E -  -  -  -  ;
    4 00:061E -  -  -  -  ;		Name : 		term.asm
    5 00:061E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:061E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:061E -  -  -  -  ;		Reviewed :	No
    8 00:061E -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:061E -  -  -  -  ;
   10 00:061E -  -  -  -  ; ***************************************************************************************
   11 00:061E -  -  -  -  ; ***************************************************************************************
   12 00:061E -  -  -  -  
   13 00:061E -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:061E             		add_hlhl_16
   15 00:061E             		exx
   16 00:061E             		adc_hlhl_16
   17 00:061E             		exx
   18 00:061E             #endmacro
   19 00:061E -  -  -  -  
   20 00:061E -  -  -  -  ; ***************************************************************************************
   21 00:061E -  -  -  -  ;
   22 00:061E -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:061E -  -  -  -  ;
   24 00:061E -  -  -  -  ; ***************************************************************************************
   25 00:061E -  -  -  -  ;
   26 00:061E -  -  -  -  ; 		Terms can be:
   27 00:061E -  -  -  -  ;
   28 00:061E -  -  -  -  ;			<integer> 			42 						not negative
   29 00:061E -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:061E -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:061E -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:061E -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:061E -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:061E -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:061E -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:061E -  -  -  -  ; 														reference of some sort.
   37 00:061E -  -  -  -  ;
   38 00:061E -  -  -  -  ; ***************************************************************************************
   39 00:061E -  -  -  -  
   40 00:061E -  -  -  -  EvaluateTerm:		
   41 00:061E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0620 D9 -  -  -  		exx
   43 00:0621 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0625 D9 -  -  -  		exx
   45 00:0626 21 00 00 00 		ld 		hl,$0000		
   46 00:062A -  -  -  -  		;
   47 00:062A DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:062D FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:062F 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0631 DA E9 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0635 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:0637 C2 8D 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:063B -  -  -  -  		;
   54 00:063B -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:063B -  -  -  -  		;
   56 00:063B -  -  -  -  _ETIntegerConstant:
   57 00:063B -  -  -  -  		;
   58 00:063B -  -  -  -  _ETIntegerLoop:		
   59 00:063B DD 7E 00 -  		ld 		a,(ix+0)
   60 00:063E E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0640 B5 -  -  -  		or 		l 							; or into L
   62 00:0641 6F -  -  -  		ld 		l,a
   63 00:0642 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0644 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:0647 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:0649 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:064B D8 -  -  -  		ret 	c
   68 00:064C -  -  -  -  
   69 00:064C 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0653 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:065A 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0661 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:0668 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:066F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:0676 -  -  -  -  
   76 00:0676 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:0678 -  -  -  -  		;
   78 00:0678 -  -  -  -  		; 		Found the $3F string marker.
   79 00:0678 -  -  -  -  		;
   80 00:0678 -  -  -  -  _ETStringMarker:		
   81 00:0678 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:067A DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:067C DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:067E E1 -  -  -  		pop 	hl
   85 00:067F 11 00 00 00 		ld 		de,$0000
   86 00:0683 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:0686 DD 19 -  -  		add 	ix,de
   88 00:0688 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:068A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:068C C9 -  -  -  		ret
   91 00:068D -  -  -  -  		;
   92 00:068D -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:068D -  -  -  -  		;
   94 00:068D -  -  -  -  _ETFoundKeyword:
   95 00:068D DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:068F FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0691 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0693 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0695 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0697 -  -  -  -  		;
  101 00:0697 -  -  -  -  		;		Unary group 0
  102 00:0697 -  -  -  -  		;
  103 00:0697 E6 7F 21 00 
              00 00 6F 29 
              29 11 E0 0B 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:06AC C3 64 00 00 		jp 		JumpCode 					; and go there.
  105 00:06B0 -  -  -  -  
  106 00:06B0 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:06B0 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:06B2 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:06B4 -  -  -  -  		;
  110 00:06B4 -  -  -  -  		; 		- term
  111 00:06B4 -  -  -  -  		;
  112 00:06B4 CD 69 05 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:06B8 CD FF 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:06BC C9 -  -  -  		ret
  115 00:06BD -  -  -  -  		;
  116 00:06BD -  -  -  -  		;		! ? indirection check
  117 00:06BD -  -  -  -  		;
  118 00:06BD -  -  -  -  _ETCheckIndirection:	
  119 00:06BD FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:06BF 28 06 -  -  		jr 		z,_ETIndirection
  121 00:06C1 FE 83 -  -  		cp 		KWD_PLING
  122 00:06C3 C2 C6 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:06C7 -  -  -  -  		;
  124 00:06C7 -  -  -  -  		; 		! ? indirection
  125 00:06C7 -  -  -  -  		;
  126 00:06C7 -  -  -  -  _ETIndirection:
  127 00:06C7 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:06C8 CD 1E 06 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:06CC CD C2 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:06D0 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:06D2 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:06D4 CD EF 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:06D8 F1 -  -  -  		pop 	af 							; get type back
  134 00:06D9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:06DB CB F9 -  -  		set 	CIsReference,c
  136 00:06DD FE 83 -  -  		cp 		KWD_PLING
  137 00:06DF C8 -  -  -  		ret 	z
  138 00:06E0 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:06E2 C9 -  -  -  		ret
  140 00:06E3 -  -  -  -  _ETStringIndirect:
  141 00:06E3 3E 02 C3 5C 
              03 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:06E9 -  -  -  -  		;
  143 00:06E9 -  -  -  -  		; 		Found an identifier.
  144 00:06E9 -  -  -  -  		;
  145 00:06E9 -  -  -  -  _ETVariable:
  146 00:06E9 CD 61 09 00 		call 	FindVariable 				; find the variable.
  147 00:06ED D0 -  -  -  		ret 	nc 							; return if found.
  148 00:06EE 3E 11 C3 5C 
              03 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:06F4 -  -  -  -  		
  150 00:06F4 -  -  -  -  ; ***************************************************************************************
  151 00:06F4 -  -  -  -  ;
  152 00:06F4 -  -  -  -  ;									Changes and Updates
  153 00:06F4 -  -  -  -  ;
  154 00:06F4 -  -  -  -  ; ***************************************************************************************
  155 00:06F4 -  -  -  -  ;
  156 00:06F4 -  -  -  -  ;		Date			Notes
  157 00:06F4 -  -  -  -  ;		==== 			=====
  158 00:06F4 -  -  -  -  ;
  159 00:06F4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:06F4 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:06F4 -  -  -  -  ; ***************************************************************************************
    2 00:06F4 -  -  -  -  ; ***************************************************************************************
    3 00:06F4 -  -  -  -  ;
    4 00:06F4 -  -  -  -  ;		Name : 		abs.asm
    5 00:06F4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06F4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06F4 -  -  -  -  ;		Reviewed :	No
    8 00:06F4 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:06F4 -  -  -  -  ;
   10 00:06F4 -  -  -  -  ; ***************************************************************************************
   11 00:06F4 -  -  -  -  ; ***************************************************************************************
   12 00:06F4 -  -  -  -  
   13 00:06F4 -  -  -  -  ; ***************************************************************************************
   14 00:06F4 -  -  -  -  ;
   15 00:06F4 -  -  -  -  ;								abs( unary function
   16 00:06F4 -  -  -  -  ;
   17 00:06F4 -  -  -  -  ; ***************************************************************************************
   18 00:06F4 -  -  -  -  
   19 00:06F4 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:06F4 CD 69 05 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:06F8 D9 -  -  -  		exx 								; test MSB
   22 00:06F9 CB 7C -  -  		bit 	7,h
   23 00:06FB D9 -  -  -  		exx
   24 00:06FC C4 FF 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0700 C9 -  -  -  		ret
   26 00:0701 -  -  -  -  
   27 00:0701 -  -  -  -  ; ***************************************************************************************
   28 00:0701 -  -  -  -  ;
   29 00:0701 -  -  -  -  ;									Changes and Updates
   30 00:0701 -  -  -  -  ;
   31 00:0701 -  -  -  -  ; ***************************************************************************************
   32 00:0701 -  -  -  -  ;
   33 00:0701 -  -  -  -  ;		Date			Notes
   34 00:0701 -  -  -  -  ;		==== 			=====
   35 00:0701 -  -  -  -  ;
   36 00:0701 -  -  -  -  ; ***************************************************************************************
   37 00:0701 -  -  -  -  		
Listing for file "_build.asm"
   35 00:0701 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0701 -  -  -  -  ; ***************************************************************************************
    2 00:0701 -  -  -  -  ; ***************************************************************************************
    3 00:0701 -  -  -  -  ;
    4 00:0701 -  -  -  -  ;		Name : 		asc.asm
    5 00:0701 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0701 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0701 -  -  -  -  ;		Reviewed :	No
    8 00:0701 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0701 -  -  -  -  ;
   10 00:0701 -  -  -  -  ; ***************************************************************************************
   11 00:0701 -  -  -  -  ; ***************************************************************************************
   12 00:0701 -  -  -  -  
   13 00:0701 -  -  -  -  ; ***************************************************************************************
   14 00:0701 -  -  -  -  ;
   15 00:0701 -  -  -  -  ;								Asc unary function
   16 00:0701 -  -  -  -  ;
   17 00:0701 -  -  -  -  ; ***************************************************************************************
   18 00:0701 -  -  -  -  
   19 00:0701 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0701 CD 78 05 00 		call	EvaluateStringTerm			; Get string
   21 00:0705 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0706 C3 B4 05 00 		jp 		Return8BitConstant
   23 00:070A -  -  -  -  
   24 00:070A -  -  -  -  ; ***************************************************************************************
   25 00:070A -  -  -  -  ;
   26 00:070A -  -  -  -  ;									Changes and Updates
   27 00:070A -  -  -  -  ;
   28 00:070A -  -  -  -  ; ***************************************************************************************
   29 00:070A -  -  -  -  ;
   30 00:070A -  -  -  -  ;		Date			Notes
   31 00:070A -  -  -  -  ;		==== 			=====
   32 00:070A -  -  -  -  ;
   33 00:070A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:070A -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:070A -  -  -  -  ; ***************************************************************************************
    2 00:070A -  -  -  -  ; ***************************************************************************************
    3 00:070A -  -  -  -  ;
    4 00:070A -  -  -  -  ;		Name : 		chr.asm
    5 00:070A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:070A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:070A -  -  -  -  ;		Reviewed :	No
    8 00:070A -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:070A -  -  -  -  ;
   10 00:070A -  -  -  -  ; ***************************************************************************************
   11 00:070A -  -  -  -  ; ***************************************************************************************
   12 00:070A -  -  -  -  
   13 00:070A -  -  -  -  ; ***************************************************************************************
   14 00:070A -  -  -  -  ;
   15 00:070A -  -  -  -  ;								Chr$() unary function
   16 00:070A -  -  -  -  ;
   17 00:070A -  -  -  -  ; ***************************************************************************************
   18 00:070A -  -  -  -  
   19 00:070A -  -  -  -  Unary_Chr:	;; [chr]
   20 00:070A CD 34 03 00 		call 	CheckDollar
   21 00:070E CD 69 05 00 		call 	EvaluateIntegerTerm
   22 00:0712 7D -  -  -  		ld 		a,l 						; get character
   23 00:0713 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0715 21 9F 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:0719 36 0D -  -  		ld 		(hl),13
   26 00:071B 2B -  -  -  		dec 	hl
   27 00:071C 77 -  -  -  		ld 		(hl),a
   28 00:071D C9 -  -  -  		ret
   29 00:071E -  -  -  -  
   30 00:071E -  -  -  -  ; ***************************************************************************************
   31 00:071E -  -  -  -  ;
   32 00:071E -  -  -  -  ;									Changes and Updates
   33 00:071E -  -  -  -  ;
   34 00:071E -  -  -  -  ; ***************************************************************************************
   35 00:071E -  -  -  -  ;
   36 00:071E -  -  -  -  ;		Date			Notes
   37 00:071E -  -  -  -  ;		==== 			=====
   38 00:071E -  -  -  -  ;
   39 00:071E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:071E -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:071E -  -  -  -  ; ***************************************************************************************
    2 00:071E -  -  -  -  ; ***************************************************************************************
    3 00:071E -  -  -  -  ;
    4 00:071E -  -  -  -  ;		Name : 		len.asm
    5 00:071E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:071E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:071E -  -  -  -  ;		Reviewed :	None
    8 00:071E -  -  -  -  ;		Purpose :	String Length
    9 00:071E -  -  -  -  ;
   10 00:071E -  -  -  -  ; ***************************************************************************************
   11 00:071E -  -  -  -  ; ***************************************************************************************
   12 00:071E -  -  -  -  
   13 00:071E -  -  -  -  ; ***************************************************************************************
   14 00:071E -  -  -  -  ;
   15 00:071E -  -  -  -  ;								Len unary function
   16 00:071E -  -  -  -  ;
   17 00:071E -  -  -  -  ; ***************************************************************************************
   18 00:071E -  -  -  -  
   19 00:071E -  -  -  -  Unary_Len:	;; [len]
   20 00:071E CD 78 05 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0722 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0723 CD 67 04 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:0727 -  -  -  -  _ULCount:
   24 00:0727 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:0728 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:072A D8 -  -  -  		ret 	c
   27 00:072B 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:072C 13 -  -  -  		inc 	de
   29 00:072D 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:072F -  -  -  -  
   31 00:072F -  -  -  -  ; ***************************************************************************************
   32 00:072F -  -  -  -  ;
   33 00:072F -  -  -  -  ;									Changes and Updates
   34 00:072F -  -  -  -  ;
   35 00:072F -  -  -  -  ; ***************************************************************************************
   36 00:072F -  -  -  -  ;
   37 00:072F -  -  -  -  ;		Date			Notes
   38 00:072F -  -  -  -  ;		==== 			=====
   39 00:072F -  -  -  -  ;
   40 00:072F -  -  -  -  ; ***************************************************************************************
   41 00:072F -  -  -  -  		
Listing for file "_build.asm"
   38 00:072F -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:072F -  -  -  -  ; ***************************************************************************************
    2 00:072F -  -  -  -  ; ***************************************************************************************
    3 00:072F -  -  -  -  ;
    4 00:072F -  -  -  -  ;		Name : 		makestring.asm
    5 00:072F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:072F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:072F -  -  -  -  ;		Reviewed :	No
    8 00:072F -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:072F -  -  -  -  ;
   10 00:072F -  -  -  -  ; ***************************************************************************************
   11 00:072F -  -  -  -  ; ***************************************************************************************
   12 00:072F -  -  -  -  
   13 00:072F -  -  -  -  ; ***************************************************************************************
   14 00:072F -  -  -  -  ;
   15 00:072F -  -  -  -  ;								Str$() unary function
   16 00:072F -  -  -  -  ;
   17 00:072F -  -  -  -  ; ***************************************************************************************
   18 00:072F -  -  -  -  
   19 00:072F -  -  -  -  Unary_MkStr:	;; [$]
   20 00:072F CD 69 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0733 CD EF 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:0737 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:0739 C9 -  -  -  		ret
   24 00:073A -  -  -  -  
   25 00:073A -  -  -  -  ; ***************************************************************************************
   26 00:073A -  -  -  -  ;
   27 00:073A -  -  -  -  ;									Changes and Updates
   28 00:073A -  -  -  -  ;
   29 00:073A -  -  -  -  ; ***************************************************************************************
   30 00:073A -  -  -  -  ;
   31 00:073A -  -  -  -  ;		Date			Notes
   32 00:073A -  -  -  -  ;		==== 			=====
   33 00:073A -  -  -  -  ;
   34 00:073A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:073A -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:073A -  -  -  -  ; ***************************************************************************************
    2 00:073A -  -  -  -  ; ***************************************************************************************
    3 00:073A -  -  -  -  ;
    4 00:073A -  -  -  -  ;		Name : 		not.asm
    5 00:073A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:073A -  -  -  -  ;		Date : 		5th June 2023
    7 00:073A -  -  -  -  ;		Reviewed :	No
    8 00:073A -  -  -  -  ;		Purpose :	Logical not
    9 00:073A -  -  -  -  ;
   10 00:073A -  -  -  -  ; ***************************************************************************************
   11 00:073A -  -  -  -  ; ***************************************************************************************
   12 00:073A -  -  -  -  
   13 00:073A -  -  -  -  ; ***************************************************************************************
   14 00:073A -  -  -  -  ;
   15 00:073A -  -  -  -  ;							not(x) e.g. one's complement
   16 00:073A -  -  -  -  ;
   17 00:073A -  -  -  -  ; ***************************************************************************************
   18 00:073A -  -  -  -  
   19 00:073A -  -  -  -  Unary_Not:		;; [not]
   20 00:073A CD 69 05 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:073E CD 47 07 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0742 CD 47 07 00 		call 	__UNSwap		
   23 00:0746 C9 -  -  -  		ret
   24 00:0747 -  -  -  -  
   25 00:0747 -  -  -  -  __UNSwap:
   26 00:0747 7C -  -  -  		ld 		a,h
   27 00:0748 2F -  -  -  		cpl
   28 00:0749 67 -  -  -  		ld 		h,a
   29 00:074A 7D -  -  -  		ld 		a,l
   30 00:074B 2F -  -  -  		cpl 	
   31 00:074C 6F -  -  -  		ld 		l,a
   32 00:074D D9 -  -  -  		exx
   33 00:074E C9 -  -  -  		ret
   34 00:074F -  -  -  -  
   35 00:074F -  -  -  -  ; ***************************************************************************************
   36 00:074F -  -  -  -  ;
   37 00:074F -  -  -  -  ;									Changes and Updates
   38 00:074F -  -  -  -  ;
   39 00:074F -  -  -  -  ; ***************************************************************************************
   40 00:074F -  -  -  -  ;
   41 00:074F -  -  -  -  ;		Date			Notes
   42 00:074F -  -  -  -  ;		==== 			=====
   43 00:074F -  -  -  -  ;
   44 00:074F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:074F -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:074F -  -  -  -  ; ***************************************************************************************
    2 00:074F -  -  -  -  ; ***************************************************************************************
    3 00:074F -  -  -  -  ;
    4 00:074F -  -  -  -  ;		Name : 		page.asm
    5 00:074F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:074F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:074F -  -  -  -  ;		Reviewed :	No
    8 00:074F -  -  -  -  ;		Purpose :	Various constants.
    9 00:074F -  -  -  -  ;
   10 00:074F -  -  -  -  ; ***************************************************************************************
   11 00:074F -  -  -  -  ; ***************************************************************************************
   12 00:074F -  -  -  -  
   13 00:074F -  -  -  -  ; ***************************************************************************************
   14 00:074F -  -  -  -  ;
   15 00:074F -  -  -  -  ;							page unary function (no bracket)
   16 00:074F -  -  -  -  ;
   17 00:074F -  -  -  -  ; ***************************************************************************************
   18 00:074F -  -  -  -  
   19 00:074F -  -  -  -  Unary_Page:	;; [page]
   20 00:074F 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0753 D9 -  -  -  			exx
   22 00:0754 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:0758 D9 -  -  -  			exx
   24 00:0759 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:075B C9 -  -  -  			ret
   26 00:075C -  -  -  -  
   27 00:075C -  -  -  -  ; ***************************************************************************************
   28 00:075C -  -  -  -  ;
   29 00:075C -  -  -  -  ;									Changes and Updates
   30 00:075C -  -  -  -  ;
   31 00:075C -  -  -  -  ; ***************************************************************************************
   32 00:075C -  -  -  -  ;
   33 00:075C -  -  -  -  ;		Date			Notes
   34 00:075C -  -  -  -  ;		==== 			=====
   35 00:075C -  -  -  -  ;
   36 00:075C -  -  -  -  ; ***************************************************************************************
   37 00:075C -  -  -  -  			
Listing for file "_build.asm"
   41 00:075C -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:075C -  -  -  -  ; ***************************************************************************************
    2 00:075C -  -  -  -  ; ***************************************************************************************
    3 00:075C -  -  -  -  ;
    4 00:075C -  -  -  -  ;		Name : 		random.asm
    5 00:075C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:075C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:075C -  -  -  -  ;		Reviewed :	No
    8 00:075C -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:075C -  -  -  -  ;
   10 00:075C -  -  -  -  ; ***************************************************************************************
   11 00:075C -  -  -  -  ; ***************************************************************************************
   12 00:075C -  -  -  -  
   13 00:075C -  -  -  -  ; ***************************************************************************************
   14 00:075C -  -  -  -  ;
   15 00:075C -  -  -  -  ;								Random unary function
   16 00:075C -  -  -  -  ;
   17 00:075C -  -  -  -  ; ***************************************************************************************
   18 00:075C -  -  -  -  
   19 00:075C -  -  -  -  Unary_Random:	;; [rnd]
   20 00:075C F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:0764 CD 69 05 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:0768 D9 -  -  -  		exx 								; is it -ve
   23 00:0769 CB 7C -  -  		bit 	7,h
   24 00:076B D9 -  -  -  		exx
   25 00:076C 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:076E 22 70 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0772 D9 -  -  -  		exx
   28 00:0773 22 74 00 00 		ld 		(RandomSeed+4),hl
   29 00:0777 D9 -  -  -  		exx
   30 00:0778 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:077A C9 -  -  -  		ret
   32 00:077B -  -  -  -  _URDontSeed:		
   33 00:077B -  -  -  -  
   34 00:077B CD 8F 0E 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:077F 28 1C -  -  		jr 		z,_URFail
   36 00:0781 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0782 D9 -  -  -  		exx
   38 00:0783 E5 -  -  -  		push 	hl
   39 00:0784 D9 -  -  -  		exx
   40 00:0785 -  -  -  -  		;
   41 00:0785 CD AE 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:0789 D9 -  -  -  		exx
   43 00:078A CD AE 07 00 		call 	URandomHL
   44 00:078E CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0790 D9 -  -  -  		exx
   46 00:0791 -  -  -  -  		;
   47 00:0791 D9 -  -  -  		exx 								; restore range.
   48 00:0792 D1 -  -  -  		pop 	de
   49 00:0793 D9 -  -  -  		exx
   50 00:0794 D1 -  -  -  		pop 	de
   51 00:0795 -  -  -  -  		;
   52 00:0795 CD 20 0D 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:0799 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:079A 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:079C C9 -  -  -  		ret
   56 00:079D -  -  -  -  _URFail:
   57 00:079D 3E 03 C3 5C 
              03 00 -  -  		ERR_BADVALUE
   58 00:07A3 -  -  -  -  ; ***************************************************************************************
   59 00:07A3 -  -  -  -  ;
   60 00:07A3 -  -  -  -  ; 									Push RNG off zero
   61 00:07A3 -  -  -  -  ;
   62 00:07A3 -  -  -  -  ; ***************************************************************************************
   63 00:07A3 -  -  -  -  
   64 00:07A3 -  -  -  -  UnaryRandomInitialise:
   65 00:07A3 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:07A5 -  -  -  -  _URILoop:
   67 00:07A5 C5 -  -  -  		push 	bc
   68 00:07A6 CD AE 07 00 		call 	URandomHL
   69 00:07AA C1 -  -  -  		pop 	bc
   70 00:07AB 10 F8 -  -  		djnz 	_URILoop
   71 00:07AD C9 -  -  -  		ret
   72 00:07AE -  -  -  -  
   73 00:07AE -  -  -  -  ; ***************************************************************************************
   74 00:07AE -  -  -  -  ;
   75 00:07AE -  -  -  -  ;							16 bit random number generator
   76 00:07AE -  -  -  -  ;
   77 00:07AE -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:07AE -  -  -  -  ;		Actual author unspecified.
   79 00:07AE -  -  -  -  ;
   80 00:07AE -  -  -  -  ; ***************************************************************************************
   81 00:07AE -  -  -  -  
   82 00:07AE -  -  -  -  URandomHL:
   83 00:07AE 2A 70 00 00 	    ld 		hl,(RandomSeed)
   84 00:07B2 ED 5B 74 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:07B7 44 -  -  -  	    ld 		b,h
   86 00:07B8 4D -  -  -  	    ld 		c,l
   87 00:07B9 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:07BE 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:07C3 2C -  -  -  	    inc 	l
   90 00:07C4 09 -  -  -  	    add 	hl,bc
   91 00:07C5 22 70 00 00 	    ld 		(RandomSeed),hl
   92 00:07C9 2A 74 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:07CD ED 5A -  -  	    adc 	hl,de
   94 00:07CF 22 74 00 00 	    ld 		(RandomSeed+4),hl
   95 00:07D3 EB -  -  -  	    ex 		de,hl
   96 00:07D4 2A 78 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:07D8 ED 4B 7C 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:07DD 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:07E2 ED 43 7C 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:07E7 9F -  -  -  	    sbc 	a,a
  101 00:07E8 E6 C5 -  -  	    and 	%11000101
  102 00:07EA AD -  -  -  	    xor 	l
  103 00:07EB 6F -  -  -  	    ld 		l,a
  104 00:07EC 22 78 00 00 	    ld 		(RandomSeed+8),hl
  105 00:07F0 EB -  -  -  	    ex 		de,hl
  106 00:07F1 09 -  -  -  	    add 	hl,bc
  107 00:07F2 C9 -  -  -  	    ret		
  108 00:07F3 -  -  -  -  
  109 00:07F3 -  -  -  -  ; ***************************************************************************************
  110 00:07F3 -  -  -  -  ;
  111 00:07F3 -  -  -  -  ;									Changes and Updates
  112 00:07F3 -  -  -  -  ;
  113 00:07F3 -  -  -  -  ; ***************************************************************************************
  114 00:07F3 -  -  -  -  ;
  115 00:07F3 -  -  -  -  ;		Date			Notes
  116 00:07F3 -  -  -  -  ;		==== 			=====
  117 00:07F3 -  -  -  -  ;
  118 00:07F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:07F3 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:07F3 -  -  -  -  ; ***************************************************************************************
    2 00:07F3 -  -  -  -  ; ***************************************************************************************
    3 00:07F3 -  -  -  -  ;
    4 00:07F3 -  -  -  -  ;		Name : 		sgn.asm
    5 00:07F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07F3 -  -  -  -  ;		Reviewed :	No
    8 00:07F3 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:07F3 -  -  -  -  ;
   10 00:07F3 -  -  -  -  ; ***************************************************************************************
   11 00:07F3 -  -  -  -  ; ***************************************************************************************
   12 00:07F3 -  -  -  -  
   13 00:07F3 -  -  -  -  ; ***************************************************************************************
   14 00:07F3 -  -  -  -  ;
   15 00:07F3 -  -  -  -  ;								sgn unary function
   16 00:07F3 -  -  -  -  ;
   17 00:07F3 -  -  -  -  ; ***************************************************************************************
   18 00:07F3 -  -  -  -  
   19 00:07F3 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:07F3 CD 69 05 00 		call	EvaluateIntegerTerm 		; get value
   21 00:07F7 CD 8F 0E 00 		call 	Int32Zero 					; integer sgn() code
   22 00:07FB CA 67 04 00 		jp 		z,UnaryInt32False
   23 00:07FF D9 -  -  -  		exx
   24 00:0800 CB 7C -  -  		bit 	7,h
   25 00:0802 D9 -  -  -  		exx
   26 00:0803 C2 63 04 00 		jp 		nz,UnaryInt32True
   27 00:0807 3E 01 -  -  		ld 		a,1
   28 00:0809 C3 B4 05 00 		jp 		Return8BitConstant
   29 00:080D -  -  -  -  
   30 00:080D -  -  -  -  ; ***************************************************************************************
   31 00:080D -  -  -  -  ;
   32 00:080D -  -  -  -  ;									Changes and Updates
   33 00:080D -  -  -  -  ;
   34 00:080D -  -  -  -  ; ***************************************************************************************
   35 00:080D -  -  -  -  ;
   36 00:080D -  -  -  -  ;		Date			Notes
   37 00:080D -  -  -  -  ;		==== 			=====
   38 00:080D -  -  -  -  ;
   39 00:080D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:080D -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:080D -  -  -  -  ; ***************************************************************************************
    2 00:080D -  -  -  -  ; ***************************************************************************************
    3 00:080D -  -  -  -  ;
    4 00:080D -  -  -  -  ;		Name : 		simple.asm
    5 00:080D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:080D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:080D -  -  -  -  ;		Reviewed :	No
    8 00:080D -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:080D -  -  -  -  ;
   10 00:080D -  -  -  -  ; ***************************************************************************************
   11 00:080D -  -  -  -  ; ***************************************************************************************
   12 00:080D -  -  -  -  
   13 00:080D -  -  -  -  ; ***************************************************************************************
   14 00:080D -  -  -  -  ;
   15 00:080D -  -  -  -  ;								( unary function (think about it)
   16 00:080D -  -  -  -  ;
   17 00:080D -  -  -  -  ; ***************************************************************************************
   18 00:080D -  -  -  -  
   19 00:080D -  -  -  -  Unary_Brackets:	;; [(]
   20 00:080D CD 10 05 00 		call 	EvaluateAtPrecedence0
   21 00:0811 C3 26 03 00 		jp  	CheckRightBracket
   22 00:0815 -  -  -  -  
   23 00:0815 -  -  -  -  ; ***************************************************************************************
   24 00:0815 -  -  -  -  ;
   25 00:0815 -  -  -  -  ;									Handle &x
   26 00:0815 -  -  -  -  ;
   27 00:0815 -  -  -  -  ; ***************************************************************************************
   28 00:0815 -  -  -  -  
   29 00:0815 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0815 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0818 E6 C0 -  -  		and 		$C0
   32 00:081A FE 40 -  -  		cp 			$40
   33 00:081C C2 C6 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0820 C3 1E 06 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0824 -  -  -  -  
   36 00:0824 -  -  -  -  ; ***************************************************************************************
   37 00:0824 -  -  -  -  ;
   38 00:0824 -  -  -  -  ;									Changes and Updates
   39 00:0824 -  -  -  -  ;
   40 00:0824 -  -  -  -  ; ***************************************************************************************
   41 00:0824 -  -  -  -  ;
   42 00:0824 -  -  -  -  ;		Date			Notes
   43 00:0824 -  -  -  -  ;		==== 			=====
   44 00:0824 -  -  -  -  ;
   45 00:0824 -  -  -  -  ; ***************************************************************************************
   46 00:0824 -  -  -  -  		
Listing for file "_build.asm"
   44 00:0824 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0824 -  -  -  -  ; ***************************************************************************************
    2 00:0824 -  -  -  -  ; ***************************************************************************************
    3 00:0824 -  -  -  -  ;
    4 00:0824 -  -  -  -  ;		Name : 		str.asm
    5 00:0824 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0824 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0824 -  -  -  -  ;		Reviewed :	No
    8 00:0824 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0824 -  -  -  -  ;
   10 00:0824 -  -  -  -  ; ***************************************************************************************
   11 00:0824 -  -  -  -  ; ***************************************************************************************
   12 00:0824 -  -  -  -  
   13 00:0824 -  -  -  -  ; ***************************************************************************************
   14 00:0824 -  -  -  -  ;
   15 00:0824 -  -  -  -  ;								Str$() unary function
   16 00:0824 -  -  -  -  ;
   17 00:0824 -  -  -  -  ; ***************************************************************************************
   18 00:0824 -  -  -  -  
   19 00:0824 -  -  -  -  Unary_Str:	;; [str]
   20 00:0824 CD 34 03 00 		call 	CheckDollar
   21 00:0828 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:082B EE AC -  -  		xor		KWD_TILDE
   23 00:082D F5 -  -  -  		push 	af
   24 00:082E 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:0830 DD 23 -  -  		inc 	ix
   26 00:0832 -  -  -  -  _USNotHex:		
   27 00:0832 CD 69 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:0836 01 8E 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:083A F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:083B 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:083D 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:083F 3E 10 -  -  		ld 		a,16
   33 00:0841 -  -  -  -  _USNotHex2:		
   34 00:0841 CD D7 0E 00 		call 	Int32ToString 				
   35 00:0845 21 8E 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:0849 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:084B C9 -  -  -  		ret
   38 00:084C -  -  -  -  
   39 00:084C -  -  -  -  ; ***************************************************************************************
   40 00:084C -  -  -  -  ;
   41 00:084C -  -  -  -  ;									Changes and Updates
   42 00:084C -  -  -  -  ;
   43 00:084C -  -  -  -  ; ***************************************************************************************
   44 00:084C -  -  -  -  ;
   45 00:084C -  -  -  -  ;		Date			Notes
   46 00:084C -  -  -  -  ;		==== 			=====
   47 00:084C -  -  -  -  ;
   48 00:084C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:084C -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:084C -  -  -  -  ; ***************************************************************************************
    2 00:084C -  -  -  -  ; ***************************************************************************************
    3 00:084C -  -  -  -  ;
    4 00:084C -  -  -  -  ;		Name : 		time.asm
    5 00:084C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:084C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:084C -  -  -  -  ;		Reviewed :	No
    8 00:084C -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:084C -  -  -  -  ;
   10 00:084C -  -  -  -  ; ***************************************************************************************
   11 00:084C -  -  -  -  ; ***************************************************************************************
   12 00:084C -  -  -  -  
   13 00:084C -  -  -  -  ; ***************************************************************************************
   14 00:084C -  -  -  -  ;
   15 00:084C -  -  -  -  ;							Get system time in ms
   16 00:084C -  -  -  -  ;
   17 00:084C -  -  -  -  ; ***************************************************************************************
   18 00:084C -  -  -  -  
   19 00:084C -  -  -  -  Unary_Time:	;; [time]
   20 00:084C CD 28 0F 00 			call 	SYSGetTimer
   21 00:0850 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0852 C9 -  -  -  			ret
   23 00:0853 -  -  -  -  
   24 00:0853 -  -  -  -  ; ***************************************************************************************
   25 00:0853 -  -  -  -  ;
   26 00:0853 -  -  -  -  ;									Changes and Updates
   27 00:0853 -  -  -  -  ;
   28 00:0853 -  -  -  -  ; ***************************************************************************************
   29 00:0853 -  -  -  -  ;
   30 00:0853 -  -  -  -  ;		Date			Notes
   31 00:0853 -  -  -  -  ;		==== 			=====
   32 00:0853 -  -  -  -  ;
   33 00:0853 -  -  -  -  ; ***************************************************************************************
   34 00:0853 -  -  -  -  			
Listing for file "_build.asm"
   46 00:0853 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0853 -  -  -  -  ; ***************************************************************************************
    2 00:0853 -  -  -  -  ; ***************************************************************************************
    3 00:0853 -  -  -  -  ;
    4 00:0853 -  -  -  -  ;		Name : 		top.asm
    5 00:0853 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0853 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0853 -  -  -  -  ;		Reviewed :	No
    8 00:0853 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0853 -  -  -  -  ;
   10 00:0853 -  -  -  -  ; ***************************************************************************************
   11 00:0853 -  -  -  -  ; ***************************************************************************************
   12 00:0853 -  -  -  -  
   13 00:0853 -  -  -  -  ; ***************************************************************************************
   14 00:0853 -  -  -  -  ;
   15 00:0853 -  -  -  -  ;							page unary function (no bracket)
   16 00:0853 -  -  -  -  ;
   17 00:0853 -  -  -  -  ; ***************************************************************************************
   18 00:0853 -  -  -  -  
   19 00:0853 -  -  -  -  Unary_Top:	;; [top]
   20 00:0853 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:0857 D9 -  -  -  			exx
   22 00:0858 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:085C D9 -  -  -  			exx
   24 00:085D 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:085F C9 -  -  -  			ret
   26 00:0860 -  -  -  -  
   27 00:0860 -  -  -  -  ; ***************************************************************************************
   28 00:0860 -  -  -  -  ;
   29 00:0860 -  -  -  -  ;									Changes and Updates
   30 00:0860 -  -  -  -  ;
   31 00:0860 -  -  -  -  ; ***************************************************************************************
   32 00:0860 -  -  -  -  ;
   33 00:0860 -  -  -  -  ;		Date			Notes
   34 00:0860 -  -  -  -  ;		==== 			=====
   35 00:0860 -  -  -  -  ;
   36 00:0860 -  -  -  -  ; ***************************************************************************************
   37 00:0860 -  -  -  -  			
Listing for file "_build.asm"
   47 00:0860 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0860 -  -  -  -  ; ***************************************************************************************
    2 00:0860 -  -  -  -  ; ***************************************************************************************
    3 00:0860 -  -  -  -  ;
    4 00:0860 -  -  -  -  ;		Name : 		val.asm
    5 00:0860 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0860 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0860 -  -  -  -  ;		Reviewed :	No
    8 00:0860 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0860 -  -  -  -  ;
   10 00:0860 -  -  -  -  ; ***************************************************************************************
   11 00:0860 -  -  -  -  ; ***************************************************************************************
   12 00:0860 -  -  -  -  
   13 00:0860 -  -  -  -  ; ***************************************************************************************
   14 00:0860 -  -  -  -  ;
   15 00:0860 -  -  -  -  ;								val( unary function
   16 00:0860 -  -  -  -  ;
   17 00:0860 -  -  -  -  ; ***************************************************************************************
   18 00:0860 -  -  -  -  
   19 00:0860 -  -  -  -  Unary_Val:	;; [val]
   20 00:0860 CD 78 05 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0864 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:0865 C1 -  -  -  		pop 	bc
   23 00:0866 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0868 CD B5 0D 00 		call 	Int32FromString 			; get the integer part.
   25 00:086C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:086E C8 -  -  -  		ret		z 							; okay
   27 00:086F 3E 03 C3 5C 
              03 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:0875 -  -  -  -  
   29 00:0875 -  -  -  -  ; ***************************************************************************************
   30 00:0875 -  -  -  -  ;
   31 00:0875 -  -  -  -  ;									Changes and Updates
   32 00:0875 -  -  -  -  ;
   33 00:0875 -  -  -  -  ; ***************************************************************************************
   34 00:0875 -  -  -  -  ;
   35 00:0875 -  -  -  -  ;		Date			Notes
   36 00:0875 -  -  -  -  ;		==== 			=====
   37 00:0875 -  -  -  -  ;
   38 00:0875 -  -  -  -  ; ***************************************************************************************
   39 00:0875 -  -  -  -  		
Listing for file "_build.asm"
   48 00:0875 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:0875 -  -  -  -  ; ***************************************************************************************
    2 00:0875 -  -  -  -  ; ***************************************************************************************
    3 00:0875 -  -  -  -  ;
    4 00:0875 -  -  -  -  ;		Name : 		allocate.asm
    5 00:0875 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0875 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0875 -  -  -  -  ;		Reviewed :	No
    8 00:0875 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:0875 -  -  -  -  ;
   10 00:0875 -  -  -  -  ; ***************************************************************************************
   11 00:0875 -  -  -  -  ; ***************************************************************************************
   12 00:0875 -  -  -  -  
   13 00:0875 -  -  -  -  ; ***************************************************************************************
   14 00:0875 -  -  -  -  ;
   15 00:0875 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:0875 -  -  -  -  ;
   17 00:0875 -  -  -  -  ; ***************************************************************************************
   18 00:0875 -  -  -  -  
   19 00:0875 -  -  -  -  AllocateBytes:
   20 00:0875 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:0876 21 00 00 00 		ld 		hl,$000000
   22 00:087A 62 -  -  -  		ld 		h,d
   23 00:087B 6B -  -  -  		ld 		l,e
   24 00:087C -  -  -  -  		;
   25 00:087C ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:0881 D5 -  -  -  		push 	de 							; save on stack
   27 00:0882 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:0883 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   29 00:0887 -  -  -  -  		;
   30 00:0887 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:0888 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:088C AF -  -  -  		xor 	a
   33 00:088D ED 52 -  -  		sbc 	hl,de
   34 00:088F E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:0890 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:0891 3E 08 C3 5C 
              03 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:0897 -  -  -  -  
   38 00:0897 -  -  -  -  ; ***************************************************************************************
   39 00:0897 -  -  -  -  ;
   40 00:0897 -  -  -  -  ;									Changes and Updates
   41 00:0897 -  -  -  -  ;
   42 00:0897 -  -  -  -  ; ***************************************************************************************
   43 00:0897 -  -  -  -  ;
   44 00:0897 -  -  -  -  ;		Date			Notes
   45 00:0897 -  -  -  -  ;		==== 			=====
   46 00:0897 -  -  -  -  ;
   47 00:0897 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:0897 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:0897 -  -  -  -  ; ***************************************************************************************
    2 00:0897 -  -  -  -  ; ***************************************************************************************
    3 00:0897 -  -  -  -  ;
    4 00:0897 -  -  -  -  ;		Name : 		clear.asm
    5 00:0897 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0897 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0897 -  -  -  -  ;		Reviewed :	No
    8 00:0897 -  -  -  -  ;		Purpose :	Clear command.
    9 00:0897 -  -  -  -  ;
   10 00:0897 -  -  -  -  ; ***************************************************************************************
   11 00:0897 -  -  -  -  ; ***************************************************************************************
   12 00:0897 -  -  -  -  
   13 00:0897 -  -  -  -  ; ***************************************************************************************
   14 00:0897 -  -  -  -  ;
   15 00:0897 -  -  -  -  ;										CLEAR command
   16 00:0897 -  -  -  -  ;
   17 00:0897 -  -  -  -  ; ***************************************************************************************
   18 00:0897 -  -  -  -  
   19 00:0897 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:0897 -  -  -  -  		;
   21 00:0897 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:0897 -  -  -  -  		;
   23 00:0897 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:089B -  -  -  -  _CCFindLow:
   25 00:089B 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:089F 5E -  -  -  		ld 		e,(hl)		
   27 00:08A0 19 -  -  -  		add 	hl,de
   28 00:08A1 7B -  -  -  		ld 		a,e
   29 00:08A2 B7 -  -  -  		or 		a
   30 00:08A3 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:08A5 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:08A6 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:08AA 23 -  -  -  		inc 	hl 							; one for luck
   34 00:08AB 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:08AF -  -  -  -  		;
   36 00:08AF -  -  -  -  		; 	 		Reset the language stack
   37 00:08AF -  -  -  -  		;
   38 00:08AF 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:08B3 -  -  -  -  		;
   40 00:08B3 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:08B7 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:08BB 19 -  -  -  		add 	hl,de
   43 00:08BC 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:08BE 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:08C2 -  -  -  -  		;
   46 00:08C2 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:08C6 19 -  -  -  		add 	hl,de
   48 00:08C7 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:08CB -  -  -  -  		;
   50 00:08CB -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:08CB -  -  -  -  		;
   52 00:08CB 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:08CF -  -  -  -  _CCFClearHT:
   54 00:08CF 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:08D0 36 00 -  -  		ld 		(hl),0
   56 00:08D2 1B -  -  -  		dec 	de
   57 00:08D3 7A -  -  -  		ld 		a,d
   58 00:08D4 B3 -  -  -  		or 		e
   59 00:08D5 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:08D7 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   61 00:08DB -  -  -  -  		;
   62 00:08DB -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:08DB -  -  -  -  		;
   64 00:08DB 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:08DF -  -  -  -  		;
   66 00:08DF -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:08DF -  -  -  -  		;
   68 00:08DF CD A3 07 00 		call 	UnaryRandomInitialise
   69 00:08E3 -  -  -  -  		;
   70 00:08E3 -  -  -  -  		;		Erase the stack
   71 00:08E3 -  -  -  -  		;
   72 00:08E3 CD 07 09 00 		call 	StackReset 					; reset the basic stack to empty
   73 00:08E7 C9 -  -  -  		ret
   74 00:08E8 -  -  -  -  
   75 00:08E8 -  -  -  -  ; ***************************************************************************************
   76 00:08E8 -  -  -  -  ;
   77 00:08E8 -  -  -  -  ;									Changes and Updates
   78 00:08E8 -  -  -  -  ;
   79 00:08E8 -  -  -  -  ; ***************************************************************************************
   80 00:08E8 -  -  -  -  ;
   81 00:08E8 -  -  -  -  ;		Date			Notes
   82 00:08E8 -  -  -  -  ;		==== 			=====
   83 00:08E8 -  -  -  -  ;
   84 00:08E8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:08E8 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:08E8 -  -  -  -  ; ***************************************************************************************
    2 00:08E8 -  -  -  -  ; ***************************************************************************************
    3 00:08E8 -  -  -  -  ;
    4 00:08E8 -  -  -  -  ;		Name : 		instance.asm
    5 00:08E8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08E8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08E8 -  -  -  -  ;		Reviewed :	No
    8 00:08E8 -  -  -  -  ;		Purpose :	Instance handling
    9 00:08E8 -  -  -  -  ;
   10 00:08E8 -  -  -  -  ; ***************************************************************************************
   11 00:08E8 -  -  -  -  ; ***************************************************************************************
   12 00:08E8 -  -  -  -  
   13 00:08E8 -  -  -  -  ; ***************************************************************************************
   14 00:08E8 -  -  -  -  ;
   15 00:08E8 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:08E8 -  -  -  -  ;
   17 00:08E8 -  -  -  -  ; ***************************************************************************************
   18 00:08E8 -  -  -  -  
   19 00:08E8 -  -  -  -  SetCurrentInstance:
   20 00:08E8 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:08ED 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:08F1 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:08F6 -  -  -  -  
   24 00:08F6 C9 -  -  -  		ret
   25 00:08F7 -  -  -  -  
   26 00:08F7 -  -  -  -  
   27 00:08F7 -  -  -  -  ; ***************************************************************************************
   28 00:08F7 -  -  -  -  ;
   29 00:08F7 -  -  -  -  ;									Changes and Updates
   30 00:08F7 -  -  -  -  ;
   31 00:08F7 -  -  -  -  ; ***************************************************************************************
   32 00:08F7 -  -  -  -  ;
   33 00:08F7 -  -  -  -  ;		Date			Notes
   34 00:08F7 -  -  -  -  ;		==== 			=====
   35 00:08F7 -  -  -  -  ;
   36 00:08F7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:08F7 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:08F7 -  -  -  -  ; ***************************************************************************************
    2 00:08F7 -  -  -  -  ; ***************************************************************************************
    3 00:08F7 -  -  -  -  ;
    4 00:08F7 -  -  -  -  ;		Name : 		new.asm
    5 00:08F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F7 -  -  -  -  ;		Reviewed :	No
    8 00:08F7 -  -  -  -  ;		Purpose :	New command.
    9 00:08F7 -  -  -  -  ;
   10 00:08F7 -  -  -  -  ; ***************************************************************************************
   11 00:08F7 -  -  -  -  ; ***************************************************************************************
   12 00:08F7 -  -  -  -  
   13 00:08F7 -  -  -  -  ; ***************************************************************************************
   14 00:08F7 -  -  -  -  ;
   15 00:08F7 -  -  -  -  ;										NEW command
   16 00:08F7 -  -  -  -  ;
   17 00:08F7 -  -  -  -  ; ***************************************************************************************
   18 00:08F7 -  -  -  -  
   19 00:08F7 -  -  -  -  Command_NEW: 	;; [new]
   20 00:08F7 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:08FB 36 00 -  -  		ld 		(hl),0
   22 00:08FD CD 97 08 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0901 3E 00 C3 5C 
              03 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0907 -  -  -  -  
   25 00:0907 -  -  -  -  ; ***************************************************************************************
   26 00:0907 -  -  -  -  ;
   27 00:0907 -  -  -  -  ;									Changes and Updates
   28 00:0907 -  -  -  -  ;
   29 00:0907 -  -  -  -  ; ***************************************************************************************
   30 00:0907 -  -  -  -  ;
   31 00:0907 -  -  -  -  ;		Date			Notes
   32 00:0907 -  -  -  -  ;		==== 			=====
   33 00:0907 -  -  -  -  ;
   34 00:0907 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:0907 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:0907 -  -  -  -  ; ***************************************************************************************
    2 00:0907 -  -  -  -  ; ***************************************************************************************
    3 00:0907 -  -  -  -  ;
    4 00:0907 -  -  -  -  ;		Name : 		stack.asm
    5 00:0907 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0907 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0907 -  -  -  -  ;		Reviewed :	No
    8 00:0907 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0907 -  -  -  -  ;
   10 00:0907 -  -  -  -  ; ***************************************************************************************
   11 00:0907 -  -  -  -  ; ***************************************************************************************
   12 00:0907 -  -  -  -  ;
   13 00:0907 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:0907 -  -  -  -  ;		The low bytes (0..3) doubled the size of the stack in bytes 
   15 00:0907 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:0907 -  -  -  -  ;
   17 00:0907 -  -  -  -  ; ***************************************************************************************
   18 00:0907 -  -  -  -  ;
   19 00:0907 -  -  -  -  ;								Clear the stack
   20 00:0907 -  -  -  -  ;
   21 00:0907 -  -  -  -  ; ***************************************************************************************
   22 00:0907 -  -  -  -  
   23 00:0907 -  -  -  -  StackReset:
   24 00:0907 2A 3C 00 00 		ld 		hl,(LanguageStack) 			; top of language stack
   25 00:090B 2B -  -  -  		dec 	hl 							; down to make space for end.
   26 00:090C 22 58 00 00 		ld 		(BasicSP),hl 				; write out current position
   27 00:0910 36 00 -  -  		ld 		(hl),0 						; Dummy top, as stack size cannot be 0.
   28 00:0912 C9 -  -  -  		ret
   29 00:0913 -  -  -  -  
   30 00:0913 -  -  -  -  ; ***************************************************************************************
   31 00:0913 -  -  -  -  ;
   32 00:0913 -  -  -  -  ;									Changes and Updates
   33 00:0913 -  -  -  -  ;
   34 00:0913 -  -  -  -  ; ***************************************************************************************
   35 00:0913 -  -  -  -  ;
   36 00:0913 -  -  -  -  ;		Date			Notes
   37 00:0913 -  -  -  -  ;		==== 			=====
   38 00:0913 -  -  -  -  ;
   39 00:0913 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:0913 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0913 -  -  -  -  ; ***************************************************************************************
    2 00:0913 -  -  -  -  ; ***************************************************************************************
    3 00:0913 -  -  -  -  ;
    4 00:0913 -  -  -  -  ;		Name : 		utility.asm
    5 00:0913 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0913 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0913 -  -  -  -  ;		Reviewed :	No
    8 00:0913 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0913 -  -  -  -  ;
   10 00:0913 -  -  -  -  ; ***************************************************************************************
   11 00:0913 -  -  -  -  ; ***************************************************************************************
   12 00:0913 -  -  -  -  
   13 00:0913 -  -  -  -  ; ***************************************************************************************
   14 00:0913 -  -  -  -  ;
   15 00:0913 -  -  -  -  ;							Print ASCII string at HL
   16 00:0913 -  -  -  -  ;
   17 00:0913 -  -  -  -  ; ***************************************************************************************
   18 00:0913 -  -  -  -  
   19 00:0913 -  -  -  -  PrintStringAtHL:
   20 00:0913 7E -  -  -  		ld 		a,(hl)
   21 00:0914 FE 20 -  -  		cp 		$20		
   22 00:0916 D8 -  -  -  		ret 	c
   23 00:0917 CD 26 0F 00 		call 	SYSPrintChar
   24 00:091B 23 -  -  -  		inc 	hl
   25 00:091C 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:091E -  -  -  -  
   27 00:091E -  -  -  -  ; ***************************************************************************************
   28 00:091E -  -  -  -  ;
   29 00:091E -  -  -  -  ;									Changes and Updates
   30 00:091E -  -  -  -  ;
   31 00:091E -  -  -  -  ; ***************************************************************************************
   32 00:091E -  -  -  -  ;
   33 00:091E -  -  -  -  ;		Date			Notes
   34 00:091E -  -  -  -  ;		==== 			=====
   35 00:091E -  -  -  -  ;
   36 00:091E -  -  -  -  ; ***************************************************************************************
   37 00:091E -  -  -  -  		
Listing for file "_build.asm"
   54 00:091E -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:091E -  -  -  -  ; ***************************************************************************************
    2 00:091E -  -  -  -  ; ***************************************************************************************
    3 00:091E -  -  -  -  ;
    4 00:091E -  -  -  -  ;		Name : 		create.asm
    5 00:091E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:091E -  -  -  -  ;		Date : 		4th June 2022
    7 00:091E -  -  -  -  ;		Reviewed :	No
    8 00:091E -  -  -  -  ;		Purpose :	Create a variable.
    9 00:091E -  -  -  -  ;
   10 00:091E -  -  -  -  ; ***************************************************************************************
   11 00:091E -  -  -  -  ; ***************************************************************************************
   12 00:091E -  -  -  -  
   13 00:091E -  -  -  -  ; ***************************************************************************************
   14 00:091E -  -  -  -  ;
   15 00:091E -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:091E -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:091E -  -  -  -  ;
   18 00:091E -  -  -  -  ; ***************************************************************************************
   19 00:091E -  -  -  -  
   20 00:091E -  -  -  -  VariableCreate:		
   21 00:091E -  -  -  -  		;
   22 00:091E -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:091E -  -  -  -  		;
   24 00:091E 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:0922 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:0923 E5 -  -  -  		push 	hl 							; save count.
   27 00:0924 CD 75 08 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0928 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0929 -  -  -  -  		;
   30 00:0929 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0929 -  -  -  -  		;
   32 00:0929 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:092A -  -  -  -  _VCClear:
   34 00:092A 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:092C 23 -  -  -  		inc 	hl
   36 00:092D 0B -  -  -  		dec 	bc
   37 00:092E 78 -  -  -  		ld		a,b
   38 00:092F B1 -  -  -  		or 		c
   39 00:0930 20 F8 -  -  		jr 		nz,_VCClear
   40 00:0932 E1 -  -  -  		pop 	hl							; restore start address
   41 00:0933 -  -  -  -  		;
   42 00:0933 -  -  -  -  		;		Now start to create the data.
   43 00:0933 -  -  -  -  		;
   44 00:0933 E5 -  -  -  		push 	hl 							; save start
   45 00:0934 -  -  -  -  		;
   46 00:0934 -  -  -  -  		;		Write hash to +0
   47 00:0934 -  -  -  -  		;
   48 00:0934 3A 88 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0938 77 -  -  -  		ld 		(hl),a
   50 00:0939 23 -  -  -  		inc 	hl
   51 00:093A -  -  -  -  		;
   52 00:093A -  -  -  -  		;		Write list head to +1
   53 00:093A -  -  -  -  		;
   54 00:093A E5 -  -  -  		push 	hl 							; save write position
   55 00:093B 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:093F ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:0941 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:0942 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:0943 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0949 -  -  -  -  		;
   61 00:0949 -  -  -  -  		;		Write variable name to +5
   62 00:0949 -  -  -  -  		;
   63 00:0949 ED 5B 84 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:094E ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:0954 -  -  -  -  		;
   66 00:0954 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:0955 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0959 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:095F -  -  -  -  		;
   70 00:095F EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:0960 C9 -  -  -  		ret
   72 00:0961 -  -  -  -  
   73 00:0961 -  -  -  -  ; ***************************************************************************************
   74 00:0961 -  -  -  -  ;
   75 00:0961 -  -  -  -  ;									Changes and Updates
   76 00:0961 -  -  -  -  ;
   77 00:0961 -  -  -  -  ; ***************************************************************************************
   78 00:0961 -  -  -  -  ;
   79 00:0961 -  -  -  -  ;		Date			Notes
   80 00:0961 -  -  -  -  ;		==== 			=====
   81 00:0961 -  -  -  -  ;
   82 00:0961 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0961 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0961 -  -  -  -  ; ***************************************************************************************
    2 00:0961 -  -  -  -  ; ***************************************************************************************
    3 00:0961 -  -  -  -  ;
    4 00:0961 -  -  -  -  ;		Name : 		find.asm
    5 00:0961 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0961 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0961 -  -  -  -  ;		Reviewed :	No
    8 00:0961 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0961 -  -  -  -  ;
   10 00:0961 -  -  -  -  ; ***************************************************************************************
   11 00:0961 -  -  -  -  ; ***************************************************************************************
   12 00:0961 -  -  -  -  
   13 00:0961 -  -  -  -  ; ***************************************************************************************
   14 00:0961 -  -  -  -  ;
   15 00:0961 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0961 -  -  -  -  ; 		variable information at (IX)
   17 00:0961 -  -  -  -  ;
   18 00:0961 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0961 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0961 -  -  -  -  ;
   21 00:0961 -  -  -  -  ; ***************************************************************************************
   22 00:0961 -  -  -  -  
   23 00:0961 -  -  -  -  FindVariable:
   24 00:0961 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0964 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0966 D2 C6 03 00 		jp 		nc,SyntaxError 		
   27 00:096A -  -  -  -  
   28 00:096A DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:096D FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:096F 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0971 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0973 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0975 -  -  -  -  		;
   34 00:0975 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0975 -  -  -  -  		;
   36 00:0975 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0979 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:097C 87 -  -  -  		add 	a,a 						; x4
   39 00:097D 87 -  -  -  		add 	a,a
   40 00:097E B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:097F 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0980 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0982 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0984 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:0986 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:0987 C9 -  -  -  		ret
   47 00:0988 -  -  -  -  		;
   48 00:0988 -  -  -  -  		;		Not a standard simple variable.
   49 00:0988 -  -  -  -  		;
   50 00:0988 -  -  -  -  _FVNotSimple:
   51 00:0988 CD EE 09 00 		call 	VariableInformation 		; get information about the variable.
   52 00:098C CD 2A 0A 00 		call 	VariableSearchList 			; search the linked list
   53 00:0990 38 14 -  -  		jr 		c,_FVNotFound  				
   54 00:0992 -  -  -  -  		;
   55 00:0992 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0992 -  -  -  -  		;
   57 00:0992 -  -  -  -  _FVExitReference:		
   58 00:0992 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:0996 19 -  -  -  		add 	hl,de 
   60 00:0997 -  -  -  -  		;
   61 00:0997 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:0997 -  -  -  -  		;
   63 00:0997 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:099A FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:099C CC C5 09 00 		call 	z,ArrayLookup 				; array access required.
   66 00:09A0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:09A2 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:09A4 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:09A5 C9 -  -  -  		ret
   70 00:09A6 -  -  -  -  		;
   71 00:09A6 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:09A6 -  -  -  -  		;
   73 00:09A6 -  -  -  -  _FVNotFound:		
   74 00:09A6 3A 80 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:09AA B7 -  -  -  		or 		a
   76 00:09AB 28 11 -  -  		jr 		z,_FVFail
   77 00:09AD DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:09B0 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:09B2 28 0A -  -  		jr 		z,_FVFail
   80 00:09B4 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 00:09B8 CD 1E 09 00 		call 	VariableCreate 				; create a new variable.
   82 00:09BC 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:09BE -  -  -  -  
   84 00:09BE -  -  -  -  _FVFail:
   85 00:09BE DD 2A 84 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:09C3 37 -  -  -  		scf
   87 00:09C4 C9 -  -  -  		ret
   88 00:09C5 -  -  -  -  
   89 00:09C5 -  -  -  -  ; ***************************************************************************************
   90 00:09C5 -  -  -  -  ;
   91 00:09C5 -  -  -  -  ;									 Array lookup
   92 00:09C5 -  -  -  -  ;
   93 00:09C5 -  -  -  -  ; ***************************************************************************************
   94 00:09C5 -  -  -  -  
   95 00:09C5 -  -  -  -  ArrayLookup:
   96 00:09C5 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:09C6 CD 69 05 00 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:09CA D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:09CB 7C -  -  -  		ld 		a,h
  100 00:09CC B5 -  -  -  		or 		l
  101 00:09CD D9 -  -  -  		exx
  102 00:09CE 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:09D0 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:09D4 54 -  -  -  		ld 		d,h
  105 00:09D5 5D -  -  -  		ld 		e,l
  106 00:09D6 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:09D7 E5 -  -  -  		push 	hl
  108 00:09D8 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:09DA AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:09DB ED 52 -  -  		sbc 	hl,de
  111 00:09DD DA E8 09 00 		jp 		c,_ALBadValue 				; if max < index then error
  112 00:09E1 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:09E2 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:09E3 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:09E4 29 -  -  -  		add 	hl,hl
  116 00:09E5 D1 -  -  -  		pop 	de 							; get array base back
  117 00:09E6 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:09E7 C9 -  -  -  		ret
  119 00:09E8 -  -  -  -  
  120 00:09E8 -  -  -  -  _ALBadValue:
  121 00:09E8 3E 07 C3 5C 
              03 00 -  -  		ERR_INDEX
  122 00:09EE -  -  -  -  		
  123 00:09EE -  -  -  -  ; ***************************************************************************************
  124 00:09EE -  -  -  -  ;
  125 00:09EE -  -  -  -  ;									Changes and Updates
  126 00:09EE -  -  -  -  ;
  127 00:09EE -  -  -  -  ; ***************************************************************************************
  128 00:09EE -  -  -  -  ;
  129 00:09EE -  -  -  -  ;		Date			Notes
  130 00:09EE -  -  -  -  ;		==== 			=====
  131 00:09EE -  -  -  -  ;
  132 00:09EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:09EE -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:09EE -  -  -  -  ; ***************************************************************************************
    2 00:09EE -  -  -  -  ; ***************************************************************************************
    3 00:09EE -  -  -  -  ;
    4 00:09EE -  -  -  -  ;		Name : 		info.asm
    5 00:09EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09EE -  -  -  -  ;		Date : 		4th June 2022
    7 00:09EE -  -  -  -  ;		Reviewed :	No
    8 00:09EE -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:09EE -  -  -  -  ;
   10 00:09EE -  -  -  -  ; ***************************************************************************************
   11 00:09EE -  -  -  -  ; ***************************************************************************************
   12 00:09EE -  -  -  -  
   13 00:09EE -  -  -  -  ; ***************************************************************************************
   14 00:09EE -  -  -  -  ;
   15 00:09EE -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:09EE -  -  -  -  ; 		after the identifier.
   17 00:09EE -  -  -  -  ;
   18 00:09EE -  -  -  -  ; ***************************************************************************************
   19 00:09EE -  -  -  -  
   20 00:09EE -  -  -  -  VariableInformation:
   21 00:09EE DD 22 84 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:09F3 -  -  -  -  		;
   23 00:09F3 -  -  -  -  		; 		Calculate hash, find end.
   24 00:09F3 -  -  -  -  		;
   25 00:09F3 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:09F5 -  -  -  -  _VICalculateHash:
   27 00:09F5 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:09F8 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:09FA 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:09FC 80 -  -  -  		add 	a,b 						; add to hash
   31 00:09FD 07 -  -  -  		rlca
   32 00:09FE 07 -  -  -  		rlca
   33 00:09FF 80 -  -  -  		add 	a,b
   34 00:0A00 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0A01 DD 23 -  -  		inc 	ix 							; next character
   36 00:0A03 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:0A05 -  -  -  -  		;
   38 00:0A05 -  -  -  -  _VIHashDone:
   39 00:0A05 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:0A06 -  -  -  -  		;
   41 00:0A06 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:0A06 -  -  -  -  		;
   43 00:0A06 32 88 00 00 		ld 		(VarHash),a
   44 00:0A0A -  -  -  -  		;
   45 00:0A0A -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:0A0A -  -  -  -  		;		
   47 00:0A0A E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:0A0C 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0A10 6F -  -  -  		ld 		l,a
   50 00:0A11 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0A12 29 -  -  -  		add 	hl,hl
   52 00:0A13 -  -  -  -  		;
   53 00:0A13 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0A18 19 -  -  -  		add 	hl,de
   55 00:0A19 -  -  -  -  		;
   56 00:0A19 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0A1C FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0A1E 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0A20 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0A24 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0A25 -  -  -  -  _VINotArray:
   62 00:0A25 22 8A 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0A29 C9 -  -  -  		ret
   64 00:0A2A -  -  -  -  
   65 00:0A2A -  -  -  -  ; ***************************************************************************************
   66 00:0A2A -  -  -  -  ;
   67 00:0A2A -  -  -  -  ;									Changes and Updates
   68 00:0A2A -  -  -  -  ;
   69 00:0A2A -  -  -  -  ; ***************************************************************************************
   70 00:0A2A -  -  -  -  ;
   71 00:0A2A -  -  -  -  ;		Date			Notes
   72 00:0A2A -  -  -  -  ;		==== 			=====
   73 00:0A2A -  -  -  -  ;
   74 00:0A2A -  -  -  -  ; ***************************************************************************************
   75 00:0A2A -  -  -  -  
Listing for file "_build.asm"
   57 00:0A2A -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0A2A -  -  -  -  ; ***************************************************************************************
    2 00:0A2A -  -  -  -  ; ***************************************************************************************
    3 00:0A2A -  -  -  -  ;
    4 00:0A2A -  -  -  -  ;		Name : 		search.asm
    5 00:0A2A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A2A -  -  -  -  ;		Date : 		4th June 2022
    7 00:0A2A -  -  -  -  ;		Reviewed :	No
    8 00:0A2A -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0A2A -  -  -  -  ;
   10 00:0A2A -  -  -  -  ; ***************************************************************************************
   11 00:0A2A -  -  -  -  ; ***************************************************************************************
   12 00:0A2A -  -  -  -  
   13 00:0A2A -  -  -  -  ; ***************************************************************************************
   14 00:0A2A -  -  -  -  ;
   15 00:0A2A -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0A2A -  -  -  -  ;		CS if failed.
   17 00:0A2A -  -  -  -  ;
   18 00:0A2A -  -  -  -  ; ***************************************************************************************
   19 00:0A2A -  -  -  -  
   20 00:0A2A -  -  -  -  VariableSearchList:
   21 00:0A2A 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0A2E -  -  -  -  		;
   23 00:0A2E -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0A2E -  -  -  -  		;		the address of the hash record
   25 00:0A2E -  -  -  -  		;
   26 00:0A2E -  -  -  -  _VSLLoop:
   27 00:0A2E ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0A30 -  -  -  -  		;
   29 00:0A30 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0A31 AF -  -  -  		xor 	a
   31 00:0A32 ED 6A -  -  		adc 	hl,hl
   32 00:0A34 E1 -  -  -  		pop 	hl
   33 00:0A35 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0A37 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0A38 C8 -  -  -  		ret 	z
   36 00:0A39 -  -  -  -  _VSLRecord:
   37 00:0A39 -  -  -  -  		;
   38 00:0A39 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0A39 -  -  -  -  		;
   40 00:0A39 3A 88 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0A3D BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0A3E 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0A3F 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0A41 -  -  -  -  		;
   45 00:0A41 -  -  -  -  		;		Now check the name
   46 00:0A41 -  -  -  -  		;
   47 00:0A41 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:0A42 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:0A43 23 -  -  -  		inc 	hl
   50 00:0A44 23 -  -  -  		inc 	hl
   51 00:0A45 23 -  -  -  		inc 	hl
   52 00:0A46 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0A48 ED 5B 84 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0A4D -  -  -  -  		;
   55 00:0A4D -  -  -  -  		;		Check individual characters
   56 00:0A4D -  -  -  -  		;
   57 00:0A4D -  -  -  -  _VSLCharacter:
   58 00:0A4D 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0A4E FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0A50 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:0A52 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:0A53 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:0A54 13 -  -  -  		inc 	de
   64 00:0A55 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:0A57 -  -  -  -  		;
   66 00:0A57 -  -  -  -  _VSLFailed:
   67 00:0A57 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0A58 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0A5A -  -  -  -  		;
   70 00:0A5A -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0A5A -  -  -  -  		;		
   72 00:0A5A -  -  -  -  _VSLEndIdentifier:
   73 00:0A5A 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0A5B FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0A5D 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0A5F -  -  -  -  		;
   77 00:0A5F E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0A60 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0A61 AF -  -  -  		xor 	a 							; clear carry
   80 00:0A62 C9 -  -  -  		ret
   81 00:0A63 -  -  -  -  
   82 00:0A63 -  -  -  -  ; ***************************************************************************************
   83 00:0A63 -  -  -  -  ;
   84 00:0A63 -  -  -  -  ;									Changes and Updates
   85 00:0A63 -  -  -  -  ;
   86 00:0A63 -  -  -  -  ; ***************************************************************************************
   87 00:0A63 -  -  -  -  ;
   88 00:0A63 -  -  -  -  ;		Date			Notes
   89 00:0A63 -  -  -  -  ;		==== 			=====
   90 00:0A63 -  -  -  -  ;
   91 00:0A63 -  -  -  -  ; ***************************************************************************************
   92 00:0A63 -  -  -  -  		
Listing for file "_build.asm"
   58 00:0A63 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0A63 -  -  -  -  ;
    2 00:0A63 -  -  -  -  ;	This file is automatically generated.
    3 00:0A63 -  -  -  -  ;
    4 00:0A63 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:0A80 -  -  -  -  PrecedenceTable:
    6 00:0A80 06 -  -  -  	.db	6	; $0083 !
    7 00:0A81 06 -  -  -  	.db	6	; $0084 ?
    8 00:0A82 05 -  -  -  	.db	5	; $0085 *
    9 00:0A83 05 -  -  -  	.db	5	; $0086 /
   10 00:0A84 05 -  -  -  	.db	5	; $0087 mod
   11 00:0A85 05 -  -  -  	.db	5	; $0088 div
   12 00:0A86 04 -  -  -  	.db	4	; $0089 +
   13 00:0A87 04 -  -  -  	.db	4	; $008a -
   14 00:0A88 03 -  -  -  	.db	3	; $008b >=
   15 00:0A89 03 -  -  -  	.db	3	; $008c <=
   16 00:0A8A 03 -  -  -  	.db	3	; $008d >
   17 00:0A8B 03 -  -  -  	.db	3	; $008e <
   18 00:0A8C 03 -  -  -  	.db	3	; $008f =
   19 00:0A8D 03 -  -  -  	.db	3	; $0090 <>
   20 00:0A8E 02 -  -  -  	.db	2	; $0091 and
   21 00:0A8F 01 -  -  -  	.db	1	; $0092 or
   22 00:0A90 01 -  -  -  	.db	1	; $0093 eor
   23 00:0A91 -  -  -  -  
Listing for file "_build.asm"
   59 00:0A91 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0A91 -  -  -  -  ;
    2 00:0A91 -  -  -  -  ;	This is automatically generated.
    3 00:0A91 -  -  -  -  ;
    4 00:0A91 -  -  -  -  ErrorIDTable:
    5 00:0A91 D9 0A 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0A95 DF 0A 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0A99 F0 0A 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0A9D FE 0A 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0AA1 08 0B 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:0AA5 12 0B 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:0AA9 2C 0B 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:0AAD 3D 0B 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 00:0AB1 4D 0B 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   14 00:0AB5 5B 0B 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   15 00:0AB9 69 0B 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   16 00:0ABD 73 0B 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   17 00:0AC1 88 0B 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   18 00:0AC5 9E 0B 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   19 00:0AC9 AC 0B 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   20 00:0ACD B1 0B 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   21 00:0AD1 BE 0B 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   22 00:0AD5 CF 0B 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   23 00:0AD9 -  -  -  -  
   24 00:0AD9 -  -  -  -  ErrText_warmstart:
   25 00:0AD9 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   26 00:0ADF -  -  -  -  ErrText_assert:
   27 00:0ADF 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   28 00:0AF0 -  -  -  -  ErrText_badtype:
   29 00:0AF0 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   30 00:0AFE -  -  -  -  ErrText_badvalue:
   31 00:0AFE 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   32 00:0B08 -  -  -  -  ErrText_dim:
   33 00:0B08 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   34 00:0B12 -  -  -  -  ErrText_disabled:
   35 00:0B12 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   36 00:0B2C -  -  -  -  ErrText_divzero:
   37 00:0B2C 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   38 00:0B3D -  -  -  -  ErrText_index:
   39 00:0B3D 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   40 00:0B4D -  -  -  -  ErrText_memory:
   41 00:0B4D 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   42 00:0B5B -  -  -  -  ErrText_nocomma:
   43 00:0B5B 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   44 00:0B69 -  -  -  -  ErrText_nodollar:
   45 00:0B69 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   46 00:0B73 -  -  -  -  ErrText_nolbracket:
   47 00:0B73 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   48 00:0B88 -  -  -  -  ErrText_norbracket:
   49 00:0B88 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   50 00:0B9E -  -  -  -  ErrText_notref:
   51 00:0B9E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   52 00:0BAC -  -  -  -  ErrText_stop:
   53 00:0BAC 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   54 00:0BB1 -  -  -  -  ErrText_syntax:
   55 00:0BB1 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   56 00:0BBE -  -  -  -  ErrText_todo:
   57 00:0BBE 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   58 00:0BCF -  -  -  -  ErrText_unknownvar:
   59 00:0BCF 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   60 00:0BE0 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0BE0 -  -  -  -  ;
    2 00:0BE0 -  -  -  -  ;	Vectors for set 0
    3 00:0BE0 -  -  -  -  ;
    4 00:0BE0 -  -  -  -  VectorsSet0:
    5 00:0BE0 AC 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0BE4 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0BE8 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0BEC 3C 04 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0BF0 45 04 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0BF4 E8 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0BF8 F6 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0BFC 04 04 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0C00 F6 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0C04 CC 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0C08 DA 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0C0C A3 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0C10 99 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0C14 85 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0C18 7B 04 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0C1C 71 04 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0C20 8F 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0C24 12 04 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0C28 20 04 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0C2C 2E 04 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0C30 15 08 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0C34 0D 08 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0C38 2F 07 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0C3C 5C 07 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0C40 1E 07 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0C44 F4 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0C48 F3 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0C4C 24 08 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0C50 0A 07 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0C54 01 07 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0C58 3A 07 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0C5C 4F 07 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0C60 4C 08 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0C64 53 08 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0C68 60 08 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0C6C 63 04 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0C70 67 04 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0C74 F1 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0C78 F1 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0C7C F5 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0C80 F1 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0C84 82 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0C88 24 00 00 00 	addr(Unimplemented)              ; $00aa [
   48 00:0C8C 24 00 00 00 	addr(Unimplemented)              ; $00ab ]
   49 00:0C90 F1 00 00 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 00:0C94 24 00 00 00 	addr(Unimplemented)              ; $00ad repeat
   51 00:0C98 24 00 00 00 	addr(Unimplemented)              ; $00ae until
   52 00:0C9C 24 00 00 00 	addr(Unimplemented)              ; $00af if
   53 00:0CA0 F1 00 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:0CA4 24 00 00 00 	addr(Unimplemented)              ; $00b1 else
   55 00:0CA8 24 00 00 00 	addr(Unimplemented)              ; $00b2 for
   56 00:0CAC F1 00 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:0CB0 24 00 00 00 	addr(Unimplemented)              ; $00b4 step
   58 00:0CB4 24 00 00 00 	addr(Unimplemented)              ; $00b5 next
   59 00:0CB8 24 00 00 00 	addr(Unimplemented)              ; $00b6 def
   60 00:0CBC 24 00 00 00 	addr(Unimplemented)              ; $00b7 proc
   61 00:0CC0 24 00 00 00 	addr(Unimplemented)              ; $00b8 endproc
   62 00:0CC4 24 00 00 00 	addr(Unimplemented)              ; $00b9 gosub
   63 00:0CC8 24 00 00 00 	addr(Unimplemented)              ; $00ba return
   64 00:0CCC 24 00 00 00 	addr(Unimplemented)              ; $00bb goto
   65 00:0CD0 24 00 00 00 	addr(Unimplemented)              ; $00bc local
   66 00:0CD4 F6 00 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:0CD8 82 02 00 00 	addr(Command_REM)                ; $00be rem
   68 00:0CDC C3 01 00 00 	addr(Command_LET)                ; $00bf let
   69 00:0CE0 24 00 00 00 	addr(Unimplemented)              ; $00c0 vdu
   70 00:0CE4 17 02 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:0CE8 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:0CEC 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:0CF0 24 00 00 00 	addr(Unimplemented)              ; $00c4 list
   74 00:0CF4 F7 08 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:0CF8 9F 02 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:0CFC 24 00 00 00 	addr(Unimplemented)              ; $00c7 read
   77 00:0D00 24 00 00 00 	addr(Unimplemented)              ; $00c8 data
   78 00:0D04 24 00 00 00 	addr(Unimplemented)              ; $00c9 restore
   79 00:0D08 E0 00 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:0D0C 97 08 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:0D10 A6 01 00 00 	addr(Command_END)                ; $00cc end
   82 00:0D14 12 03 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:0D18 -  -  -  -  ;
   84 00:0D18 -  -  -  -  ;	Vectors for set 1
   85 00:0D18 -  -  -  -  ;
   86 00:0D18 -  -  -  -  VectorsSet1:
   87 00:0D18 -  -  -  -  ;
   88 00:0D18 -  -  -  -  ;	Vectors for set 2
   89 00:0D18 -  -  -  -  ;
   90 00:0D18 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   61 00:0D18 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0D18 -  -  -  -  ; ***************************************************************************************
    2 00:0D18 -  -  -  -  ; ***************************************************************************************
    3 00:0D18 -  -  -  -  ;
    4 00:0D18 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0D18 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D18 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D18 -  -  -  -  ;		Reviewed :	No
    8 00:0D18 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0D18 -  -  -  -  ;
   10 00:0D18 -  -  -  -  ; ***************************************************************************************
   11 00:0D18 -  -  -  -  ; ***************************************************************************************
   12 00:0D18 -  -  -  -  
   13 00:0D18 -  -  -  -  ; ***************************************************************************************
   14 00:0D18 -  -  -  -  ;
   15 00:0D18 -  -  -  -  ;								Unsigned integer divide
   16 00:0D18 -  -  -  -  ;
   17 00:0D18 -  -  -  -  ; ***************************************************************************************
   18 00:0D18 -  -  -  -  
   19 00:0D18 -  -  -  -  Int32UDivide:
   20 00:0D18 37 -  -  -  		scf
   21 00:0D19 C3 5D 0D 00 		jp 		_I32UnsignedDivide		
   22 00:0D1D -  -  -  -  
   23 00:0D1D -  -  -  -  ; ***************************************************************************************
   24 00:0D1D -  -  -  -  ;
   25 00:0D1D -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0D1D -  -  -  -  ;
   27 00:0D1D -  -  -  -  ; ***************************************************************************************
   28 00:0D1D -  -  -  -  
   29 00:0D1D -  -  -  -  Int32SDivide:
   30 00:0D1D 37 -  -  -  		scf
   31 00:0D1E 18 01 -  -  		jr 		_I32SDivide
   32 00:0D20 -  -  -  -  Int32Modulus:
   33 00:0D20 AF -  -  -  		xor 	a
   34 00:0D21 -  -  -  -  _I32SDivide:
   35 00:0D21 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0D22 F5 -  -  -  		push 	af
   37 00:0D23 08 -  -  -  		ex 		af,af'
   38 00:0D24 -  -  -  -  
   39 00:0D24 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0D25 D9 -  -  -  		exx
   41 00:0D26 D5 -  -  -  		push 	de
   42 00:0D27 D9 -  -  -  		exx
   43 00:0D28 -  -  -  -  
   44 00:0D28 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0D29 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0D2A CD 4A 0D 00 		call 	_I32CheckHLSignSwap
   47 00:0D2E CD 4A 0D 00 		call 	_I32CheckHLSignSwap
   48 00:0D32 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0D33 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0D34 F5 -  -  -  		push 	af
   51 00:0D35 CD 5D 0D 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0D39 F1 -  -  -  		pop 	af 							; get function back
   53 00:0D3A 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0D3C 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0D3D CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0D3F C4 C0 0E 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0D43 -  -  -  -  _I32SDExit:
   58 00:0D43 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0D44 D1 -  -  -  		pop 	de
   60 00:0D45 D9 -  -  -  		exx
   61 00:0D46 D1 -  -  -  		pop 	de
   62 00:0D47 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0D48 08 -  -  -  		ex 		af,af'
   64 00:0D49 C9 -  -  -  		ret
   65 00:0D4A -  -  -  -  
   66 00:0D4A -  -  -  -  
   67 00:0D4A -  -  -  -  _I32CheckHLSignSwap:
   68 00:0D4A D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0D4B CB 7C -  -  		bit 	7,h
   70 00:0D4D D9 -  -  -  		exx
   71 00:0D4E 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0D50 -  -  -  -  		;
   73 00:0D50 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0D52 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0D53 CD C0 0E 00 		call 	Int32Negate 				
   76 00:0D57 F1 -  -  -  		pop 	af
   77 00:0D58 -  -  -  -  _I32CHSPositive:
   78 00:0D58 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0D59 EB -  -  -  		ex 		de,hl
   80 00:0D5A D9 -  -  -  		exx		
   81 00:0D5B EB -  -  -  		ex 		de,hl
   82 00:0D5C C9 -  -  -  		ret
   83 00:0D5D -  -  -  -  
   84 00:0D5D -  -  -  -  ; ***************************************************************************************
   85 00:0D5D -  -  -  -  ;
   86 00:0D5D -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0D5D -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0D5D -  -  -  -  ;
   89 00:0D5D -  -  -  -  ; ***************************************************************************************
   90 00:0D5D -  -  -  -  
   91 00:0D5D -  -  -  -  _I32UnsignedDivide:
   92 00:0D5D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0D5E D5 -  -  -  		push 	de
   94 00:0D5F D9 -  -  -  		exx
   95 00:0D60 C5 -  -  -  		push 	bc
   96 00:0D61 D5 -  -  -  		push 	de 							
   97 00:0D62 D9 -  -  -  		exx
   98 00:0D63 -  -  -  -  
   99 00:0D63 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0D64 -  -  -  -  
  101 00:0D64 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0D65 B3 -  -  -  		or 		e
  103 00:0D66 D9 -  -  -  		exx
  104 00:0D67 B2 -  -  -  		or 		d
  105 00:0D68 B3 -  -  -  		or 		e
  106 00:0D69 D9 -  -  -  		exx
  107 00:0D6A CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0D6E -  -  -  -  
  109 00:0D6E -  -  -  -  
  110 00:0D6E 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0D6F 4D -  -  -  		ld		c,l
  112 00:0D70 21 00 00 00 		ld 		hl,$0000
  113 00:0D74 D9 -  -  -  		exx
  114 00:0D75 44 -  -  -  		ld 		b,h
  115 00:0D76 4D -  -  -  		ld		c,l
  116 00:0D77 21 00 00 00 		ld 		hl,$0000
  117 00:0D7B D9 -  -  -  		exx
  118 00:0D7C -  -  -  -  
  119 00:0D7C 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0D7E -  -  -  -  _I32DivideLoop:
  121 00:0D7E F5 -  -  -  		push 	af
  122 00:0D7F -  -  -  -  
  123 00:0D7F CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0D81 CB 10 -  -  		rl 		b
  125 00:0D83 D9 -  -  -  		exx
  126 00:0D84 CB 11 -  -  		rl 		c
  127 00:0D86 CB 10 -  -  		rl 		b
  128 00:0D88 D9 -  -  -  		exx
  129 00:0D89 CB 15 -  -  		rl 		l
  130 00:0D8B CB 14 -  -  		rl 		h
  131 00:0D8D D9 -  -  -  		exx
  132 00:0D8E CB 15 -  -  		rl 		l
  133 00:0D90 CB 14 -  -  		rl 		h
  134 00:0D92 D9 -  -  -  		exx
  135 00:0D93 -  -  -  -  
  136 00:0D93 CD 5E 0E 00 		call 	Int32Subtract 				; A = A - M
  137 00:0D97 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0D99 -  -  -  -  
  139 00:0D99 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0D9A 18 04 -  -  		jr 		_I32Next
  141 00:0D9C -  -  -  -  
  142 00:0D9C -  -  -  -  _I32Borrow:
  143 00:0D9C CD 56 0E 00 		call 	Int32Add 					; A = A + M
  144 00:0DA0 -  -  -  -  _I32Next:
  145 00:0DA0 F1 -  -  -  		pop 	af
  146 00:0DA1 3D -  -  -  		dec 	a
  147 00:0DA2 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0DA4 -  -  -  -  
  149 00:0DA4 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0DA5 -  -  -  -  
  151 00:0DA5 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0DA6 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0DA8 -  -  -  -  
  154 00:0DA8 60 -  -  -  		ld  	h,b
  155 00:0DA9 69 -  -  -  		ld 		l,c
  156 00:0DAA D9 -  -  -  		exx
  157 00:0DAB 60 -  -  -  		ld  	h,b
  158 00:0DAC 69 -  -  -  		ld 		l,c
  159 00:0DAD D9 -  -  -  		exx
  160 00:0DAE -  -  -  -  _I32Modulus1:		
  161 00:0DAE D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0DAF D1 -  -  -  		pop 	de
  163 00:0DB0 C1 -  -  -  		pop 	bc
  164 00:0DB1 D9 -  -  -  		exx
  165 00:0DB2 D1 -  -  -  		pop 	de
  166 00:0DB3 C1 -  -  -  		pop 	bc
  167 00:0DB4 C9 -  -  -  		ret
  168 00:0DB5 -  -  -  -  
  169 00:0DB5 -  -  -  -  ; ***************************************************************************************
  170 00:0DB5 -  -  -  -  ;
  171 00:0DB5 -  -  -  -  ;									Changes and Updates
  172 00:0DB5 -  -  -  -  ;
  173 00:0DB5 -  -  -  -  ; ***************************************************************************************
  174 00:0DB5 -  -  -  -  ;
  175 00:0DB5 -  -  -  -  ;		Date			Notes
  176 00:0DB5 -  -  -  -  ;		==== 			=====
  177 00:0DB5 -  -  -  -  ;
  178 00:0DB5 -  -  -  -  ; ***************************************************************************************
  179 00:0DB5 -  -  -  -  		
Listing for file "_build.asm"
   62 00:0DB5 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0DB5 -  -  -  -  ; ***************************************************************************************
    2 00:0DB5 -  -  -  -  ; ***************************************************************************************
    3 00:0DB5 -  -  -  -  ;
    4 00:0DB5 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0DB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DB5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DB5 -  -  -  -  ;		Reviewed :	No
    8 00:0DB5 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0DB5 -  -  -  -  ;
   10 00:0DB5 -  -  -  -  ; ***************************************************************************************
   11 00:0DB5 -  -  -  -  ; ***************************************************************************************
   12 00:0DB5 -  -  -  -  
   13 00:0DB5 -  -  -  -  ; ***************************************************************************************
   14 00:0DB5 -  -  -  -  ;
   15 00:0DB5 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0DB5 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0DB5 -  -  -  -  ;
   18 00:0DB5 -  -  -  -  ; ***************************************************************************************
   19 00:0DB5 -  -  -  -  
   20 00:0DB5 -  -  -  -  Int32FromString:
   21 00:0DB5 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0DB6 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0DB7 D5 -  -  -  		push 	de
   24 00:0DB8 D9 -  -  -  		exx
   25 00:0DB9 D5 -  -  -  		push 	de
   26 00:0DBA -  -  -  -  
   27 00:0DBA 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0DBE 11 00 00 00 		ld 		de,$0000
   29 00:0DC2 D9 -  -  -  		exx
   30 00:0DC3 21 00 00 00 		ld 		hl,$0000
   31 00:0DC7 11 00 00 00 		ld 		de,$0000
   32 00:0DCB D9 -  -  -  		exx
   33 00:0DCC -  -  -  -  
   34 00:0DCC 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0DCD CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0DCF 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0DD1 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0DD3 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0DD4 -  -  -  -  		;
   40 00:0DD4 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0DD5 F5 -  -  -  		push 	af
   42 00:0DD6 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0DD8 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0DD9 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0DDB 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0DDC 18 01 -  -  		jr 		_I32FSMain
   47 00:0DDE -  -  -  -  _I32FSNotSigned:		
   48 00:0DDE E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0DDF -  -  -  -  		;
   50 00:0DDF -  -  -  -  		; 		Main conversion loop.
   51 00:0DDF -  -  -  -  		; 		
   52 00:0DDF -  -  -  -  _I32FSMain:		
   53 00:0DDF 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0DE0 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0DE2 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0DE4 D6 20 -  -  		sub 	32
   57 00:0DE6 -  -  -  -  _I32FSNotLower:
   58 00:0DE6 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0DE8 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0DEA FE 3A -  -  		cp 		'9'+1
   61 00:0DEC 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0DEE FE 41 -  -  		cp 		'A'
   63 00:0DF0 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0DF2 FE 47 -  -  		cp 		'F'+1
   65 00:0DF4 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0DF6 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0DF8 -  -  -  -  _I32FSOkay:
   68 00:0DF8 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0DFA BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0DFB 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0DFD 03 -  -  -  		inc 	bc 							; consume character
   72 00:0DFE D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0DFF F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0E00 CD 1D 0E 00 		call 	Int32Multiply 				; result *= base
   75 00:0E04 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0E05 5F -  -  -  		ld 		e,a
   77 00:0E06 CD 56 0E 00 		call 	Int32Add 					; and add it.
   78 00:0E0A D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0E0B 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0E0D -  -  -  -  
   81 00:0E0D -  -  -  -  _I32FSExit:
   82 00:0E0D F1 -  -  -  		pop 	af 							; get sign back
   83 00:0E0E FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0E10 CC C0 0E 00 		call 	z,Int32Negate
   85 00:0E14 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0E15 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0E16 D9 -  -  -  		exx
   88 00:0E17 D1 -  -  -  		pop 	de
   89 00:0E18 D9 -  -  -  		exx
   90 00:0E19 C1 -  -  -  		pop 	bc
   91 00:0E1A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0E1C C9 -  -  -  		ret				
   93 00:0E1D -  -  -  -  
   94 00:0E1D -  -  -  -  ; ***************************************************************************************
   95 00:0E1D -  -  -  -  ;
   96 00:0E1D -  -  -  -  ;									Changes and Updates
   97 00:0E1D -  -  -  -  ;
   98 00:0E1D -  -  -  -  ; ***************************************************************************************
   99 00:0E1D -  -  -  -  ;
  100 00:0E1D -  -  -  -  ;		Date			Notes
  101 00:0E1D -  -  -  -  ;		==== 			=====
  102 00:0E1D -  -  -  -  ;
  103 00:0E1D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0E1D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0E1D -  -  -  -  ; ***************************************************************************************
    2 00:0E1D -  -  -  -  ; ***************************************************************************************
    3 00:0E1D -  -  -  -  ;
    4 00:0E1D -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0E1D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E1D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E1D -  -  -  -  ;		Reviewed :	No
    8 00:0E1D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0E1D -  -  -  -  ;
   10 00:0E1D -  -  -  -  ; ***************************************************************************************
   11 00:0E1D -  -  -  -  ; ***************************************************************************************
   12 00:0E1D -  -  -  -  
   13 00:0E1D -  -  -  -  Int32Multiply:
   14 00:0E1D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0E1E D5 -  -  -  		push 	de
   16 00:0E1F 44 -  -  -  		ld 		b,h
   17 00:0E20 4D -  -  -  		ld 		c,l
   18 00:0E21 21 00 00 00 		ld 		hl,$0000
   19 00:0E25 -  -  -  -  
   20 00:0E25 D9 -  -  -  		exx
   21 00:0E26 C5 -  -  -  		push 	bc
   22 00:0E27 D5 -  -  -  		push 	de
   23 00:0E28 44 -  -  -  		ld 		b,h
   24 00:0E29 4D -  -  -  		ld 		c,l
   25 00:0E2A 21 00 00 00 		ld 		hl,$0000		
   26 00:0E2E D9 -  -  -  		exx
   27 00:0E2F -  -  -  -  
   28 00:0E2F -  -  -  -  _I32MultiplyLoop:
   29 00:0E2F CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0E31 C4 56 0E 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0E35 -  -  -  -  		;
   32 00:0E35 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0E36 CB 38 -  -  		srl 	b
   34 00:0E38 CB 19 -  -  		rr 		c
   35 00:0E3A D9 -  -  -  		exx
   36 00:0E3B CB 18 -  -  		rr 		b
   37 00:0E3D CB 19 -  -  		rr 		c
   38 00:0E3F -  -  -  -  		;
   39 00:0E3F CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0E41 CB 12 -  -  		rl 		d
   41 00:0E43 D9 -  -  -  		exx
   42 00:0E44 CB 13 -  -  		rl 		e
   43 00:0E46 CB 12 -  -  		rl 		d
   44 00:0E48 -  -  -  -  
   45 00:0E48 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0E49 B1 -  -  -  		or 		c
   47 00:0E4A D9 -  -  -  		exx
   48 00:0E4B B0 -  -  -  		or 		b
   49 00:0E4C B1 -  -  -  		or 		c
   50 00:0E4D 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0E4F -  -  -  -  
   52 00:0E4F D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0E50 D1 -  -  -  		pop 	de
   54 00:0E51 C1 -  -  -  		pop 	bc
   55 00:0E52 D9 -  -  -  		exx
   56 00:0E53 D1 -  -  -  		pop 	de
   57 00:0E54 C1 -  -  -  		pop 	bc
   58 00:0E55 C9 -  -  -  		ret
   59 00:0E56 -  -  -  -  
   60 00:0E56 -  -  -  -  ; ***************************************************************************************
   61 00:0E56 -  -  -  -  ;
   62 00:0E56 -  -  -  -  ;									Changes and Updates
   63 00:0E56 -  -  -  -  ;
   64 00:0E56 -  -  -  -  ; ***************************************************************************************
   65 00:0E56 -  -  -  -  ;
   66 00:0E56 -  -  -  -  ;		Date			Notes
   67 00:0E56 -  -  -  -  ;		==== 			=====
   68 00:0E56 -  -  -  -  ;
   69 00:0E56 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:0E56 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0E56 -  -  -  -  ; ***************************************************************************************
    2 00:0E56 -  -  -  -  ; ***************************************************************************************
    3 00:0E56 -  -  -  -  ;
    4 00:0E56 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0E56 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E56 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E56 -  -  -  -  ;		Reviewed :	No
    8 00:0E56 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0E56 -  -  -  -  ;
   10 00:0E56 -  -  -  -  ; ***************************************************************************************
   11 00:0E56 -  -  -  -  ; ***************************************************************************************
   12 00:0E56 -  -  -  -  
   13 00:0E56 -  -  -  -  ; ***************************************************************************************
   14 00:0E56 -  -  -  -  ;
   15 00:0E56 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0E56 -  -  -  -  ;
   17 00:0E56 -  -  -  -  ; ***************************************************************************************
   18 00:0E56 -  -  -  -  
   19 00:0E56 -  -  -  -  Int32Add:
   20 00:0E56 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0E58 D9 -  -  -  		exx
   22 00:0E59 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0E5C D9 -  -  -  		exx
   24 00:0E5D C9 -  -  -  		ret
   25 00:0E5E -  -  -  -  
   26 00:0E5E -  -  -  -  ; ***************************************************************************************
   27 00:0E5E -  -  -  -  ;
   28 00:0E5E -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0E5E -  -  -  -  ;
   30 00:0E5E -  -  -  -  ; ***************************************************************************************
   31 00:0E5E -  -  -  -  
   32 00:0E5E -  -  -  -  Int32Subtract:
   33 00:0E5E AF -  -  -  		xor 	a 							; clear carry
   34 00:0E5F 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0E62 D9 -  -  -  		exx
   36 00:0E63 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0E66 D9 -  -  -  		exx
   38 00:0E67 C9 -  -  -  		ret
   39 00:0E68 -  -  -  -  
   40 00:0E68 -  -  -  -  ; ***************************************************************************************
   41 00:0E68 -  -  -  -  ;
   42 00:0E68 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0E68 -  -  -  -  ;
   44 00:0E68 -  -  -  -  ; ***************************************************************************************
   45 00:0E68 -  -  -  -  
   46 00:0E68 -  -  -  -  Int32And:
   47 00:0E68 D9 -  -  -  		exx
   48 00:0E69 CD 6E 0E 00 		call 	_I32AndHLDE
   49 00:0E6D D9 -  -  -  		exx
   50 00:0E6E -  -  -  -  _I32AndHLDE:		
   51 00:0E6E 7C -  -  -  		ld 		a,h
   52 00:0E6F A2 -  -  -  		and 	d
   53 00:0E70 67 -  -  -  		ld 		h,a
   54 00:0E71 7D -  -  -  		ld 		a,l
   55 00:0E72 A3 -  -  -  		and 	e
   56 00:0E73 6F -  -  -  		ld 		l,a
   57 00:0E74 C9 -  -  -  		ret
   58 00:0E75 -  -  -  -  
   59 00:0E75 -  -  -  -  ; ***************************************************************************************
   60 00:0E75 -  -  -  -  ;
   61 00:0E75 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0E75 -  -  -  -  ;
   63 00:0E75 -  -  -  -  ; ***************************************************************************************
   64 00:0E75 -  -  -  -  
   65 00:0E75 -  -  -  -  Int32Or:
   66 00:0E75 D9 -  -  -  		exx
   67 00:0E76 CD 7B 0E 00 		call 	_I32OrHLDE
   68 00:0E7A D9 -  -  -  		exx
   69 00:0E7B -  -  -  -  _I32OrHLDE:		
   70 00:0E7B 7C -  -  -  		ld 		a,h
   71 00:0E7C B2 -  -  -  		or 		d
   72 00:0E7D 67 -  -  -  		ld 		h,a
   73 00:0E7E 7D -  -  -  		ld 		a,l
   74 00:0E7F B3 -  -  -  		or 		e
   75 00:0E80 6F -  -  -  		ld 		l,a
   76 00:0E81 C9 -  -  -  		ret
   77 00:0E82 -  -  -  -  
   78 00:0E82 -  -  -  -  ; ***************************************************************************************
   79 00:0E82 -  -  -  -  ;
   80 00:0E82 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0E82 -  -  -  -  ;
   82 00:0E82 -  -  -  -  ; ***************************************************************************************
   83 00:0E82 -  -  -  -  
   84 00:0E82 -  -  -  -  Int32Xor:
   85 00:0E82 D9 -  -  -  		exx
   86 00:0E83 CD 88 0E 00 		call 	_I32XorHLDE
   87 00:0E87 D9 -  -  -  		exx
   88 00:0E88 -  -  -  -  _I32XorHLDE:		
   89 00:0E88 7C -  -  -  		ld 		a,h
   90 00:0E89 AA -  -  -  		xor 	d
   91 00:0E8A 67 -  -  -  		ld 		h,a
   92 00:0E8B 7D -  -  -  		ld 		a,l
   93 00:0E8C AB -  -  -  		xor 	e
   94 00:0E8D 6F -  -  -  		ld 		l,a
   95 00:0E8E C9 -  -  -  		ret
   96 00:0E8F -  -  -  -  
   97 00:0E8F -  -  -  -  ; ***************************************************************************************
   98 00:0E8F -  -  -  -  ;
   99 00:0E8F -  -  -  -  ;								 Check if HL'HL zero
  100 00:0E8F -  -  -  -  ;
  101 00:0E8F -  -  -  -  ; ***************************************************************************************
  102 00:0E8F -  -  -  -  
  103 00:0E8F -  -  -  -  Int32Zero:
  104 00:0E8F D9 -  -  -  		exx
  105 00:0E90 7D -  -  -  		ld 		a,l
  106 00:0E91 B4 -  -  -  		or 		h
  107 00:0E92 D9 -  -  -  		exx
  108 00:0E93 B5 -  -  -  		or 		l
  109 00:0E94 B4 -  -  -  		or 		h
  110 00:0E95 C9 -  -  -  		ret
  111 00:0E96 -  -  -  -  
  112 00:0E96 -  -  -  -  ; ***************************************************************************************
  113 00:0E96 -  -  -  -  ;
  114 00:0E96 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0E96 -  -  -  -  ;
  116 00:0E96 -  -  -  -  ; ***************************************************************************************
  117 00:0E96 -  -  -  -  
  118 00:0E96 -  -  -  -  Int32Compare:
  119 00:0E96 E5 -  -  -  		push 	hl 							; save HL
  120 00:0E97 AF -  -  -  		xor 	a 							; clear carry
  121 00:0E98 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0E9B D9 -  -  -  		exx
  123 00:0E9C E5 -  -  -  		push 	hl 							; save HL'
  124 00:0E9D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0EA0 -  -  -  -  		;
  126 00:0EA0 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0EA1 E2 A9 0E 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0EA5 78 -  -  -  		ld 		a,b
  129 00:0EA6 EE 80 -  -  		xor 	$80
  130 00:0EA8 47 -  -  -  		ld 		b,a
  131 00:0EA9 -  -  -  -  _I32CNoOverflow:
  132 00:0EA9 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0EAA B5 -  -  -  		or 		l
  134 00:0EAB D9 -  -  -  		exx 
  135 00:0EAC B4 -  -  -  		or 		h
  136 00:0EAD B5 -  -  -  		or 		l
  137 00:0EAE 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0EB0 -  -  -  -  		;
  139 00:0EB0 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0EB1 CB 78 -  -  		bit 	7,b
  141 00:0EB3 D9 -  -  -  		exx
  142 00:0EB4 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0EB6 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0EB8 3E FF -  -  		ld 		a,$FF
  145 00:0EBA -  -  -  -  _I32NotPos:
  146 00:0EBA D9 -  -  -  		exx
  147 00:0EBB E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0EBC D9 -  -  -  		exx
  149 00:0EBD E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0EBE B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0EBF C9 -  -  -  		ret
  152 00:0EC0 -  -  -  -  
  153 00:0EC0 -  -  -  -  ; ***************************************************************************************
  154 00:0EC0 -  -  -  -  ;
  155 00:0EC0 -  -  -  -  ;										Negate HL'HL
  156 00:0EC0 -  -  -  -  ;
  157 00:0EC0 -  -  -  -  ; ***************************************************************************************
  158 00:0EC0 -  -  -  -  
  159 00:0EC0 -  -  -  -  Int32Negate:
  160 00:0EC0 AF -  -  -  		xor 	a
  161 00:0EC1 CD CC 0E 00 		call 	_I32NSubtract
  162 00:0EC5 D9 -  -  -  		exx
  163 00:0EC6 CD CC 0E 00 		call 	_I32NSubtract
  164 00:0ECA D9 -  -  -  		exx
  165 00:0ECB C9 -  -  -  		ret
  166 00:0ECC -  -  -  -  _I32NSubtract:
  167 00:0ECC D5 -  -  -  		push 	de
  168 00:0ECD EB -  -  -  		ex 		de,hl
  169 00:0ECE 21 00 00 00 		ld 		hl,$0000
  170 00:0ED2 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0ED5 D1 -  -  -  		pop 	de
  172 00:0ED6 C9 -  -  -  		ret
  173 00:0ED7 -  -  -  -  		
  174 00:0ED7 -  -  -  -  ; ***************************************************************************************
  175 00:0ED7 -  -  -  -  ;
  176 00:0ED7 -  -  -  -  ;									Changes and Updates
  177 00:0ED7 -  -  -  -  ;
  178 00:0ED7 -  -  -  -  ; ***************************************************************************************
  179 00:0ED7 -  -  -  -  ;
  180 00:0ED7 -  -  -  -  ;		Date			Notes
  181 00:0ED7 -  -  -  -  ;		==== 			=====
  182 00:0ED7 -  -  -  -  ;
  183 00:0ED7 -  -  -  -  ; ***************************************************************************************
  184 00:0ED7 -  -  -  -  		
Listing for file "_build.asm"
   65 00:0ED7 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0ED7 -  -  -  -  ; ***************************************************************************************
    2 00:0ED7 -  -  -  -  ; ***************************************************************************************
    3 00:0ED7 -  -  -  -  ;
    4 00:0ED7 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0ED7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0ED7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0ED7 -  -  -  -  ;		Reviewed :	No
    8 00:0ED7 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0ED7 -  -  -  -  ;
   10 00:0ED7 -  -  -  -  ; ***************************************************************************************
   11 00:0ED7 -  -  -  -  ;
   12 00:0ED7 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0ED7 -  -  -  -  ;
   14 00:0ED7 -  -  -  -  ; ***************************************************************************************
   15 00:0ED7 -  -  -  -  
   16 00:0ED7 -  -  -  -  Int32ToString:
   17 00:0ED7 C5 -  -  -  		push 	bc 							; save string start
   18 00:0ED8 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0ED9 E5 -  -  -  		push 	hl
   20 00:0EDA 11 00 00 00 		ld	 	de,$0000
   21 00:0EDE D9 -  -  -  		exx
   22 00:0EDF D5 -  -  -  		push 	de
   23 00:0EE0 E5 -  -  -  		push 	hl
   24 00:0EE1 11 00 00 00 		ld 		de,$000
   25 00:0EE5 D9 -  -  -  		exx
   26 00:0EE6 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0EE7 -  -  -  -  		;
   28 00:0EE7 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0EE9 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0EEB ED 44 -  -  		neg 								; negate base and put in E
   31 00:0EED 5F -  -  -  		ld 		e,a
   32 00:0EEE -  -  -  -  		;
   33 00:0EEE D9 -  -  -  		exx 								; is it -ve ?
   34 00:0EEF CB 7C -  -  		bit 	7,h
   35 00:0EF1 D9 -  -  -  		exx
   36 00:0EF2 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0EF4 -  -  -  -  		;
   38 00:0EF4 CD C0 0E 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0EF8 -  -  -  -  		;
   40 00:0EF8 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0EFA 02 -  -  -  		ld 		(bc),a
   42 00:0EFB 03 -  -  -  		inc 	bc
   43 00:0EFC -  -  -  -  _I32TSNotNegative:	
   44 00:0EFC CD 0B 0F 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0F00 -  -  -  -  _I32TSExit:
   46 00:0F00 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0F02 02 -  -  -  		ld 		(bc),a 
   48 00:0F03 -  -  -  -  
   49 00:0F03 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0F04 E1 -  -  -  		pop 	hl
   51 00:0F05 D1 -  -  -  		pop 	de
   52 00:0F06 D9 -  -  -  		exx
   53 00:0F07 E1 -  -  -  		pop 	hl
   54 00:0F08 D1 -  -  -  		pop 	de
   55 00:0F09 C1 -  -  -  		pop 	bc
   56 00:0F0A C9 -  -  -  		ret
   57 00:0F0B -  -  -  -  
   58 00:0F0B -  -  -  -  _I32RecursiveConvert:
   59 00:0F0B CD 18 0D 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0F0F F5 -  -  -  		push 	af 							; save remainder
   61 00:0F10 CD 8F 0E 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0F14 C4 0B 0F 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0F18 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0F19 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0F1B 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0F1D C6 07 -  -  		add 	a,7
   67 00:0F1F -  -  -  -  _I32NotHex:
   68 00:0F1F C6 30 -  -  		add 	a,48
   69 00:0F21 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0F22 03 -  -  -  		inc 	bc
   71 00:0F23 C9 -  -  -  		ret		
   72 00:0F24 -  -  -  -  
   73 00:0F24 -  -  -  -  ; ***************************************************************************************
   74 00:0F24 -  -  -  -  ;
   75 00:0F24 -  -  -  -  ;									Changes and Updates
   76 00:0F24 -  -  -  -  ;
   77 00:0F24 -  -  -  -  ; ***************************************************************************************
   78 00:0F24 -  -  -  -  ;
   79 00:0F24 -  -  -  -  ;		Date			Notes
   80 00:0F24 -  -  -  -  ;		==== 			=====
   81 00:0F24 -  -  -  -  ;
   82 00:0F24 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0F24 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0F24 -  -  -  -  ; ***************************************************************************************
    2 00:0F24 -  -  -  -  ; ***************************************************************************************
    3 00:0F24 -  -  -  -  ;
    4 00:0F24 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0F24 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F24 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F24 -  -  -  -  ;		Reviewed :	No
    8 00:0F24 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0F24 -  -  -  -  ;
   10 00:0F24 -  -  -  -  ; ***************************************************************************************
   11 00:0F24 -  -  -  -  ; ***************************************************************************************
   12 00:0F24 -  -  -  -  
   13 00:0F24 -  -  -  -  #ifdef AQUARIUS
   14 00:0F24             
   15 00:0F24             ; ***************************************************************************************
   16 00:0F24             ;
   17 00:0F24             ;								Initialise system stuff
   18 00:0F24             ;
   19 00:0F24             ; ***************************************************************************************
   20 00:0F24             
   21 00:0F24             SYSInitialise:
   22 00:0F24             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0F24             	call 	SYSPrintChar
   24 00:0F24             	ret
   25 00:0F24             
   26 00:0F24             ; ***************************************************************************************
   27 00:0F24             ;
   28 00:0F24             ;								Terminate system stuff
   29 00:0F24             ;
   30 00:0F24             ; ***************************************************************************************
   31 00:0F24             
   32 00:0F24             SYSTerminate:
   33 00:0F24             	jr 		SYSTerminate
   34 00:0F24             
   35 00:0F24             ; ***************************************************************************************
   36 00:0F24             ;
   37 00:0F24             ;								Print A character
   38 00:0F24             ;
   39 00:0F24             ; ***************************************************************************************
   40 00:0F24             
   41 00:0F24             SYSPrintChar:
   42 00:0F24             	push 	af 									; we stack everything including alt registers
   43 00:0F24             	push 	bc
   44 00:0F24             	push 	de
   45 00:0F24             	push 	hl
   46 00:0F24             	push 	ix
   47 00:0F24             	push 	iy
   48 00:0F24             	exx
   49 00:0F24             	push 	bc
   50 00:0F24             	push 	de
   51 00:0F24             	push 	hl
   52 00:0F24             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0F24             	pop 	hl
   54 00:0F24             	pop 	de
   55 00:0F24             	pop 	bc
   56 00:0F24             	exx
   57 00:0F24             	pop 	iy
   58 00:0F24             	pop 	ix
   59 00:0F24             	pop 	hl
   60 00:0F24             	pop 	de
   61 00:0F24             	pop 	bc
   62 00:0F24             	pop 	af
   63 00:0F24             	ret		
   64 00:0F24             
   65 00:0F24             ; ***************************************************************************************
   66 00:0F24             ;
   67 00:0F24             ;									Print Newline
   68 00:0F24             ;
   69 00:0F24             ; ***************************************************************************************
   70 00:0F24             
   71 00:0F24             SYSPrintCRLF:
   72 00:0F24             	push 	af
   73 00:0F24             	ld 		a,13
   74 00:0F24             	call 	SYSPrintChar
   75 00:0F24             	ld 		a,10
   76 00:0F24             	call 	SYSPrintChar
   77 00:0F24             	pop 	af
   78 00:0F24             	ret
   79 00:0F24             
   80 00:0F24             ; ***************************************************************************************
   81 00:0F24             ;
   82 00:0F24             ;									Get time into HL'HL
   83 00:0F24             ;
   84 00:0F24             ; ***************************************************************************************
   85 00:0F24             
   86 00:0F24             SYSGetTimer:
   87 00:0F24              	in 		a,($00)
   88 00:0F24              	ld 		l,a
   89 00:0F24              	in 		a,($01)
   90 00:0F24              	ld 		h,a
   91 00:0F24              	exx
   92 00:0F24              	in 		a,($02)
   93 00:0F24              	ld 		l,a
   94 00:0F24              	in 		a,($03)
   95 00:0F24              	ld 		h,a
   96 00:0F24              	exx
   97 00:0F24             	ret 	
   98 00:0F24             	
   99 00:0F24             #endif
  100 00:0F24 -  -  -  -  
  101 00:0F24 -  -  -  -  ; ***************************************************************************************
  102 00:0F24 -  -  -  -  ;
  103 00:0F24 -  -  -  -  ;									Changes and Updates
  104 00:0F24 -  -  -  -  ;
  105 00:0F24 -  -  -  -  ; ***************************************************************************************
  106 00:0F24 -  -  -  -  ;
  107 00:0F24 -  -  -  -  ;		Date			Notes
  108 00:0F24 -  -  -  -  ;		==== 			=====
  109 00:0F24 -  -  -  -  ;
  110 00:0F24 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0F24 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0F24 -  -  -  -  ; ***************************************************************************************
    2 00:0F24 -  -  -  -  ; ***************************************************************************************
    3 00:0F24 -  -  -  -  ;
    4 00:0F24 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0F24 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F24 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F24 -  -  -  -  ;		Reviewed :	No
    8 00:0F24 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0F24 -  -  -  -  ;
   10 00:0F24 -  -  -  -  ; ***************************************************************************************
   11 00:0F24 -  -  -  -  ; ***************************************************************************************
   12 00:0F24 -  -  -  -  
   13 00:0F24 -  -  -  -  #ifdef CLEANEZ80
   14 00:0F24 -  -  -  -  
   15 00:0F24 -  -  -  -  ; ***************************************************************************************
   16 00:0F24 -  -  -  -  ;
   17 00:0F24 -  -  -  -  ;								Initialise system stuff
   18 00:0F24 -  -  -  -  ;
   19 00:0F24 -  -  -  -  ; ***************************************************************************************
   20 00:0F24 -  -  -  -  
   21 00:0F24 -  -  -  -  SYSInitialise:
   22 00:0F24 C9 -  -  -  	ret
   23 00:0F25 -  -  -  -  
   24 00:0F25 -  -  -  -  ; ***************************************************************************************
   25 00:0F25 -  -  -  -  ;
   26 00:0F25 -  -  -  -  ;								Terminate system stuff
   27 00:0F25 -  -  -  -  ;
   28 00:0F25 -  -  -  -  ; ***************************************************************************************
   29 00:0F25 -  -  -  -  
   30 00:0F25 -  -  -  -  SYSTerminate:
   31 00:0F25 C9 -  -  -  	ret
   32 00:0F26 -  -  -  -  
   33 00:0F26 -  -  -  -  ; ***************************************************************************************
   34 00:0F26 -  -  -  -  ;
   35 00:0F26 -  -  -  -  ;								Print A character
   36 00:0F26 -  -  -  -  ;
   37 00:0F26 -  -  -  -  ; ***************************************************************************************
   38 00:0F26 -  -  -  -  
   39 00:0F26 -  -  -  -  SYSPrintChar:
   40 00:0F26 C9 -  -  -  	ret		
   41 00:0F27 -  -  -  -  
   42 00:0F27 -  -  -  -  ; ***************************************************************************************
   43 00:0F27 -  -  -  -  ;
   44 00:0F27 -  -  -  -  ;									Print Newline
   45 00:0F27 -  -  -  -  ;
   46 00:0F27 -  -  -  -  ; ***************************************************************************************
   47 00:0F27 -  -  -  -  
   48 00:0F27 -  -  -  -  SYSPrintCRLF:
   49 00:0F27 C9 -  -  -  	ret
   50 00:0F28 -  -  -  -  
   51 00:0F28 -  -  -  -  ; ***************************************************************************************
   52 00:0F28 -  -  -  -  ;
   53 00:0F28 -  -  -  -  ;									Get time into HL'HL
   54 00:0F28 -  -  -  -  ;
   55 00:0F28 -  -  -  -  ; ***************************************************************************************
   56 00:0F28 -  -  -  -  
   57 00:0F28 -  -  -  -  SYSGetTimer:
   58 00:0F28 C9 -  -  -  	ret
   59 00:0F29 -  -  -  -  
   60 00:0F29 -  -  -  -  #endif
   61 00:0F29 -  -  -  -  
   62 00:0F29 -  -  -  -  ; ***************************************************************************************
   63 00:0F29 -  -  -  -  ;
   64 00:0F29 -  -  -  -  ;									Changes and Updates
   65 00:0F29 -  -  -  -  ;
   66 00:0F29 -  -  -  -  ; ***************************************************************************************
   67 00:0F29 -  -  -  -  ;
   68 00:0F29 -  -  -  -  ;		Date			Notes
   69 00:0F29 -  -  -  -  ;		==== 			=====
   70 00:0F29 -  -  -  -  ;
   71 00:0F29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0F29 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0F29 -  -  -  -  ; ***************************************************************************************
    2 00:0F29 -  -  -  -  ; ***************************************************************************************
    3 00:0F29 -  -  -  -  ;
    4 00:0F29 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0F29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F29 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F29 -  -  -  -  ;		Reviewed :	No
    8 00:0F29 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0F29 -  -  -  -  ;
   10 00:0F29 -  -  -  -  ; ***************************************************************************************
   11 00:0F29 -  -  -  -  ; ***************************************************************************************
   12 00:0F29 -  -  -  -  
   13 00:0F29 -  -  -  -  #ifdef TI84
   14 00:0F29             
   15 00:0F29             ; ***************************************************************************************
   16 00:0F29             ;
   17 00:0F29             ;								Initialise system stuff
   18 00:0F29             ;
   19 00:0F29             ; ***************************************************************************************
   20 00:0F29             
   21 00:0F29             SYSInitialise:
   22 00:0F29             	di
   23 00:0F29             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0F29             	ld 		(_IYTemp84),iy
   25 00:0F29             	ret
   26 00:0F29             
   27 00:0F29             ; ***************************************************************************************
   28 00:0F29             ;
   29 00:0F29             ;								Terminate system stuff
   30 00:0F29             ;
   31 00:0F29             ; ***************************************************************************************
   32 00:0F29             
   33 00:0F29             SYSTerminate:
   34 00:0F29             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0F29             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0F29             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0F29             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0F29             	ei
   39 00:0F29             	ret 										; and exit.
   40 00:0F29             
   41 00:0F29             _StackTemp84:									; temp var for TI84 only.
   42 00:0F29             	.dw 	0,0
   43 00:0F29             _IYTemp84:
   44 00:0F29             	.dw 	0,0		
   45 00:0F29             
   46 00:0F29             ; ***************************************************************************************
   47 00:0F29             ;
   48 00:0F29             ;								Print A character
   49 00:0F29             ;
   50 00:0F29             ; ***************************************************************************************
   51 00:0F29             
   52 00:0F29             SYSPrintChar:
   53 00:0F29             	push 	af 									; we stack everything including alt registers
   54 00:0F29             	push 	bc
   55 00:0F29             	push 	de
   56 00:0F29             	push 	hl
   57 00:0F29             	push 	ix
   58 00:0F29             	push 	iy
   59 00:0F29             	exx
   60 00:0F29             	push 	bc
   61 00:0F29             	push 	de
   62 00:0F29             	push 	hl
   63 00:0F29             
   64 00:0F29             	ld 		iy,(_IYTemp84)
   65 00:0F29             	call 	_PutC 								; print A as character
   66 00:0F29             	di
   67 00:0F29             	ld 		(_IYTemp84),iy
   68 00:0F29             
   69 00:0F29             	pop 	hl
   70 00:0F29             	pop 	de
   71 00:0F29             	pop 	bc
   72 00:0F29             	exx
   73 00:0F29             	pop 	iy
   74 00:0F29             	pop 	ix
   75 00:0F29             	pop 	hl
   76 00:0F29             	pop 	de
   77 00:0F29             	pop 	bc
   78 00:0F29             	pop 	af
   79 00:0F29             	ret		
   80 00:0F29             
   81 00:0F29             ; ***************************************************************************************
   82 00:0F29             ;
   83 00:0F29             ;									Print Newline
   84 00:0F29             ;
   85 00:0F29             ; ***************************************************************************************
   86 00:0F29             
   87 00:0F29             SYSPrintCRLF:
   88 00:0F29             	push 	af 									; we stack everything including alt registers
   89 00:0F29             	push 	bc
   90 00:0F29             	push 	de
   91 00:0F29             	push 	hl
   92 00:0F29             	push 	ix
   93 00:0F29             	push 	iy
   94 00:0F29             	exx
   95 00:0F29             	push 	bc
   96 00:0F29             	push 	de
   97 00:0F29             	push 	hl
   98 00:0F29             
   99 00:0F29             	ld 		iy,(_IYTemp84)
  100 00:0F29             	call 	_newline
  101 00:0F29             	di
  102 00:0F29             	ld 		(_IYTemp84),iy
  103 00:0F29             
  104 00:0F29             	pop 	hl
  105 00:0F29             	pop 	de
  106 00:0F29             	pop 	bc
  107 00:0F29             	exx
  108 00:0F29             	pop 	iy
  109 00:0F29             	pop 	ix
  110 00:0F29             	pop 	hl
  111 00:0F29             	pop 	de
  112 00:0F29             	pop 	bc
  113 00:0F29             	pop 	af
  114 00:0F29             	ret
  115 00:0F29             
  116 00:0F29             ; ***************************************************************************************
  117 00:0F29             ;
  118 00:0F29             ;									Get time into HL'HL
  119 00:0F29             ;
  120 00:0F29             ; ***************************************************************************************
  121 00:0F29             
  122 00:0F29             SYSGetTimer:
  123 00:0F29             	ld 		hl,$1234
  124 00:0F29             	exx
  125 00:0F29             	ld 		hl,$5678
  126 00:0F29             	exx
  127 00:0F29             	ret
  128 00:0F29             
  129 00:0F29             #endif
  130 00:0F29 -  -  -  -  
  131 00:0F29 -  -  -  -  ; ***************************************************************************************
  132 00:0F29 -  -  -  -  ;
  133 00:0F29 -  -  -  -  ;									Changes and Updates
  134 00:0F29 -  -  -  -  ;
  135 00:0F29 -  -  -  -  ; ***************************************************************************************
  136 00:0F29 -  -  -  -  ;
  137 00:0F29 -  -  -  -  ;		Date			Notes
  138 00:0F29 -  -  -  -  ;		==== 			=====
  139 00:0F29 -  -  -  -  ;
  140 00:0F29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:0F29 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0F29 -  -  -  -  ; ***************************************************************************************
    2 00:0F29 -  -  -  -  ; ***************************************************************************************
    3 00:0F29 -  -  -  -  ;
    4 00:0F29 -  -  -  -  ;		Name : 		basic.asm
    5 00:0F29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F29 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F29 -  -  -  -  ;		Reviewed :	No
    8 00:0F29 -  -  -  -  ;		Purpose :	Main program.
    9 00:0F29 -  -  -  -  ;
   10 00:0F29 -  -  -  -  ; ***************************************************************************************
   11 00:0F29 -  -  -  -  ; ***************************************************************************************
   12 00:0F29 -  -  -  -  
   13 00:0F29 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 05 02 00 
              BE 80 0C 03 
              00 BD 13 04 
              12 13 95 44 
              A5 80 0D 04 
              00 13 04 12 
              13 95 40 A5 
              8F 6A 80 0E 
              05 00 13 04 
              12 13 95 41 
              A5 8F 46 67 
              80 0E 06 00 
              13 04 12 13 
              95 42 A5 8F 
              46 68 80 0E 
              07 00 13 04 
              12 13 95 43 
              A5 8F 46 6A 
              80 0E 08 00 
              13 04 12 13 
              95 44 A5 8F 
              46 6C 80 0C 
              09 00 C1 13 
              04 12 13 95 
              40 A5 80 0C 
              0A 00 C1 13 
              04 12 13 95 
              41 A5 80 0C 
              0B 00 C1 13 
              04 12 13 95 
              42 A5 80 0C 
              0C 00 C1 13 
              04 12 13 95 
              43 A5 80 0C 
              0D 00 C1 13 
              04 12 13 95 
              44 A5 80 00 	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$05,$02,$00,$be,$80,$0c,$03,$00,$bd,$13,$04,$12,$13,$95,$44,$a5,$80,$0d,$04,$00,$13,$04,$12,$13,$95,$40,$a5,$8f,$6a,$80,$0e,$05,$00,$13,$04,$12,$13,$95,$41,$a5,$8f,$46,$67,$80,$0e,$06,$00,$13,$04,$12,$13,$95,$42,$a5,$8f,$46,$68,$80,$0e,$07,$00,$13,$04,$12,$13,$95,$43,$a5,$8f,$46,$6a,$80,$0e,$08,$00,$13,$04,$12,$13,$95,$44,$a5,$8f,$46,$6c,$80,$0c,$09,$00,$c1,$13,$04,$12,$13,$95,$40,$a5,$80,$0c,$0a,$00,$c1,$13,$04,$12,$13,$95,$41,$a5,$80,$0c,$0b,$00,$c1,$13,$04,$12,$13,$95,$42,$a5,$80,$0c,$0c,$00,$c1,$13,$04,$12,$13,$95,$43,$a5,$80,$0c,$0d,$00,$c1,$13,$04,$12,$13,$95,$44,$a5,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:10B4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:20B4 -  -  -  -  EndTestInstance:
   18 00:20B4 -  -  -  -  		
   19 00:20B4 -  -  -  -  ; ***************************************************************************************
   20 00:20B4 -  -  -  -  ;
   21 00:20B4 -  -  -  -  ;									Changes and Updates
   22 00:20B4 -  -  -  -  ;
   23 00:20B4 -  -  -  -  ; ***************************************************************************************
   24 00:20B4 -  -  -  -  ;
   25 00:20B4 -  -  -  -  ;		Date			Notes
   26 00:20B4 -  -  -  -  ;		==== 			=====
   27 00:20B4 -  -  -  -  ;
   28 00:20B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   70 00:20B4 -  -  -  -  FinalAddress:
