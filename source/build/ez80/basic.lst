    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD C2 0C 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 D4 30 00 		ld 		hl,EndTestInstance
   46 00:000C CD 1A 07 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 58 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 16 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD C4 0C 00 		call 	SYSPrintChar
   56 00:0020 CD C3 0C 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 CC 
              01 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 CC 
              01 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  		
   59 00:004C -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:004C 00 00 00 00 		.dw 	0,0
   61 00:0050 -  -  -  -  
   62 00:0050 -  -  -  -  ; ***************************************************************************************
   63 00:0050 -  -  -  -  ;
   64 00:0050 -  -  -  -  ;										Run variables
   65 00:0050 -  -  -  -  ;
   66 00:0050 -  -  -  -  ; ***************************************************************************************
   67 00:0050 -  -  -  -  
   68 00:0050 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  		
   71 00:0054 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:0054 00 00 00 00 		.dw 	0,0
   73 00:0058 -  -  -  -  
   74 00:0058 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:0058 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:005E -  -  -  -  
   77 00:005E -  -  -  -  AConvert: 									; used for address conversions.
   78 00:005E 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:0064 -  -  -  -  		
   80 00:0064 -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:0064 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:0074 -  -  -  -  
   83 00:0074 -  -  -  -  s; ***************************************************************************************
   84 00:0074 -  -  -  -  ;
   85 00:0074 -  -  -  -  ;										  Buffers
   86 00:0074 -  -  -  -  ;
   87 00:0074 -  -  -  -  ; ***************************************************************************************
   88 00:0074 -  -  -  -  
   89 00:0074 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 00:0074 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 00:0084 -  -  -  -  
   92 00:0084 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 00:0084 00 00 -  -  		.dw 	0
   94 00:0086 -  -  -  -  
   95 00:0086 -  -  -  -  ConvertBuffer: 								; general usage
   96 00:0086 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 00:00C6 -  -  -  -  
   98 00:00C6 -  -  -  -  ; ***************************************************************************************
   99 00:00C6 -  -  -  -  ;
  100 00:00C6 -  -  -  -  ;									Changes and Updates
  101 00:00C6 -  -  -  -  ;
  102 00:00C6 -  -  -  -  ; ***************************************************************************************
  103 00:00C6 -  -  -  -  ;
  104 00:00C6 -  -  -  -  ;		Date			Notes
  105 00:00C6 -  -  -  -  ;		==== 			=====
  106 00:00C6 -  -  -  -  ;
  107 00:00C6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00C6 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00C6 -  -  -  -  ; ***************************************************************************************
    2 00:00C6 -  -  -  -  ; ***************************************************************************************
    3 00:00C6 -  -  -  -  ;
    4 00:00C6 -  -  -  -  ;		Name : 		assert.asm
    5 00:00C6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C6 -  -  -  -  ;		Reviewed :	No
    8 00:00C6 -  -  -  -  ;		Purpose :	Assert command
    9 00:00C6 -  -  -  -  ;
   10 00:00C6 -  -  -  -  ; ***************************************************************************************
   11 00:00C6 -  -  -  -  ; ***************************************************************************************
   12 00:00C6 -  -  -  -  
   13 00:00C6 -  -  -  -  ; ***************************************************************************************
   14 00:00C6 -  -  -  -  ;
   15 00:00C6 -  -  -  -  ;									ASSERT command
   16 00:00C6 -  -  -  -  ;
   17 00:00C6 -  -  -  -  ; ***************************************************************************************
   18 00:00C6 -  -  -  -  
   19 00:00C6 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00C6 CD FF 03 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00CA 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00D0 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00D1 3E 01 C3 CC 
              01 00 -  -  		ERR_ASSERT
   24 00:00D7 -  -  -  -  
   25 00:00D7 -  -  -  -  ; ***************************************************************************************
   26 00:00D7 -  -  -  -  ;
   27 00:00D7 -  -  -  -  ;									Changes and Updates
   28 00:00D7 -  -  -  -  ;
   29 00:00D7 -  -  -  -  ; ***************************************************************************************
   30 00:00D7 -  -  -  -  ;
   31 00:00D7 -  -  -  -  ;		Date			Notes
   32 00:00D7 -  -  -  -  ;		==== 			=====
   33 00:00D7 -  -  -  -  ;
   34 00:00D7 -  -  -  -  ; ***************************************************************************************
   35 00:00D7 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00D7 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00D7 -  -  -  -  ; ***************************************************************************************
    2 00:00D7 -  -  -  -  ; ***************************************************************************************
    3 00:00D7 -  -  -  -  ;
    4 00:00D7 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00D7 -  -  -  -  ;		Reviewed :	No
    8 00:00D7 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00D7 -  -  -  -  ;
   10 00:00D7 -  -  -  -  ; ***************************************************************************************
   11 00:00D7 -  -  -  -  ; ***************************************************************************************
   12 00:00D7 -  -  -  -  
   13 00:00D7 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00D7 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00D7 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00D7 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00D7 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00D7 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00D7 C3 36 02 00 		jp 		SyntaxError
   20 00:00DB -  -  -  -  
   21 00:00DB -  -  -  -  ; ***************************************************************************************
   22 00:00DB -  -  -  -  ;
   23 00:00DB -  -  -  -  ;									Changes and Updates
   24 00:00DB -  -  -  -  ;
   25 00:00DB -  -  -  -  ; ***************************************************************************************
   26 00:00DB -  -  -  -  ;
   27 00:00DB -  -  -  -  ;		Date			Notes
   28 00:00DB -  -  -  -  ;		==== 			=====
   29 00:00DB -  -  -  -  ;
   30 00:00DB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00DB -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00DB -  -  -  -  ; ***************************************************************************************
    2 00:00DB -  -  -  -  ; ***************************************************************************************
    3 00:00DB -  -  -  -  ;
    4 00:00DB -  -  -  -  ;		Name : 		colon.asm
    5 00:00DB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DB -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00DB -  -  -  -  ;		Reviewed :	No
    8 00:00DB -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00DB -  -  -  -  ;
   10 00:00DB -  -  -  -  ; ***************************************************************************************
   11 00:00DB -  -  -  -  ; ***************************************************************************************
   12 00:00DB -  -  -  -  
   13 00:00DB -  -  -  -  ; ***************************************************************************************
   14 00:00DB -  -  -  -  ;
   15 00:00DB -  -  -  -  ;								Colon command, this is ignored.
   16 00:00DB -  -  -  -  ;
   17 00:00DB -  -  -  -  ; ***************************************************************************************
   18 00:00DB -  -  -  -  
   19 00:00DB -  -  -  -  Command_Colon: 	;; [:]
   20 00:00DB C9 -  -  -  		ret
   21 00:00DC -  -  -  -  
   22 00:00DC -  -  -  -  ; ***************************************************************************************
   23 00:00DC -  -  -  -  ;
   24 00:00DC -  -  -  -  ;									Changes and Updates
   25 00:00DC -  -  -  -  ;
   26 00:00DC -  -  -  -  ; ***************************************************************************************
   27 00:00DC -  -  -  -  ;
   28 00:00DC -  -  -  -  ;		Date			Notes
   29 00:00DC -  -  -  -  ;		==== 			=====
   30 00:00DC -  -  -  -  ;
   31 00:00DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00DC -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00DC -  -  -  -  ; ***************************************************************************************
    2 00:00DC -  -  -  -  ; ***************************************************************************************
    3 00:00DC -  -  -  -  ;
    4 00:00DC -  -  -  -  ;		Name : 		end.asm
    5 00:00DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DC -  -  -  -  ;		Reviewed :	No
    8 00:00DC -  -  -  -  ;		Purpose :	End command
    9 00:00DC -  -  -  -  ;
   10 00:00DC -  -  -  -  ; ***************************************************************************************
   11 00:00DC -  -  -  -  ; ***************************************************************************************
   12 00:00DC -  -  -  -  
   13 00:00DC -  -  -  -  ; ***************************************************************************************
   14 00:00DC -  -  -  -  ;
   15 00:00DC -  -  -  -  ;										END command
   16 00:00DC -  -  -  -  ;
   17 00:00DC -  -  -  -  ; ***************************************************************************************
   18 00:00DC -  -  -  -  
   19 00:00DC -  -  -  -  Command_END: 	;; [end]
   20 00:00DC 3E 00 C3 CC 
              01 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00E2 -  -  -  -  
   22 00:00E2 -  -  -  -  ; ***************************************************************************************
   23 00:00E2 -  -  -  -  ;
   24 00:00E2 -  -  -  -  ;									Changes and Updates
   25 00:00E2 -  -  -  -  ;
   26 00:00E2 -  -  -  -  ; ***************************************************************************************
   27 00:00E2 -  -  -  -  ;
   28 00:00E2 -  -  -  -  ;		Date			Notes
   29 00:00E2 -  -  -  -  ;		==== 			=====
   30 00:00E2 -  -  -  -  ;
   31 00:00E2 -  -  -  -  ; ***************************************************************************************
   32 00:00E2 -  -  -  -  		
Listing for file "_build.asm"
   17 00:00E2 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00E2 -  -  -  -  ; ***************************************************************************************
    2 00:00E2 -  -  -  -  ; ***************************************************************************************
    3 00:00E2 -  -  -  -  ;
    4 00:00E2 -  -  -  -  ;		Name : 		endofline.asm
    5 00:00E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E2 -  -  -  -  ;		Reviewed :	None
    8 00:00E2 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00E2 -  -  -  -  ;
   10 00:00E2 -  -  -  -  ; ***************************************************************************************
   11 00:00E2 -  -  -  -  ; ***************************************************************************************
   12 00:00E2 -  -  -  -  
   13 00:00E2 -  -  -  -  ; ***************************************************************************************
   14 00:00E2 -  -  -  -  ;
   15 00:00E2 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00E2 -  -  -  -  ;
   17 00:00E2 -  -  -  -  ; ***************************************************************************************
   18 00:00E2 -  -  -  -  
   19 00:00E2 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00E2 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00E7 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00EB DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00EE DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00F0 -  -  -  -  		;
   25 00:00F0 ED 7B 54 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00F5 C3 24 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00F9 -  -  -  -  
   28 00:00F9 -  -  -  -  ; ***************************************************************************************
   29 00:00F9 -  -  -  -  ;
   30 00:00F9 -  -  -  -  ;									Changes and Updates
   31 00:00F9 -  -  -  -  ;
   32 00:00F9 -  -  -  -  ; ***************************************************************************************
   33 00:00F9 -  -  -  -  ;
   34 00:00F9 -  -  -  -  ;		Date			Notes
   35 00:00F9 -  -  -  -  ;		==== 			=====
   36 00:00F9 -  -  -  -  ;
   37 00:00F9 -  -  -  -  ; ***************************************************************************************
   38 00:00F9 -  -  -  -  		
Listing for file "_build.asm"
   18 00:00F9 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:00F9 -  -  -  -  ; ***************************************************************************************
    2 00:00F9 -  -  -  -  ; ***************************************************************************************
    3 00:00F9 -  -  -  -  ;
    4 00:00F9 -  -  -  -  ;		Name : 		rem.asm
    5 00:00F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F9 -  -  -  -  ;		Reviewed :	No
    8 00:00F9 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:00F9 -  -  -  -  ;
   10 00:00F9 -  -  -  -  ; ***************************************************************************************
   11 00:00F9 -  -  -  -  ; ***************************************************************************************
   12 00:00F9 -  -  -  -  
   13 00:00F9 -  -  -  -  ; ***************************************************************************************
   14 00:00F9 -  -  -  -  ;
   15 00:00F9 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:00F9 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:00F9 -  -  -  -  ;
   18 00:00F9 -  -  -  -  ; ***************************************************************************************
   19 00:00F9 -  -  -  -  
   20 00:00F9 -  -  -  -  Command_REM: 	;; [rem]
   21 00:00F9 -  -  -  -  Command_REM2: 	;; [']
   22 00:00F9 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:00FC DD 23 -  -  		inc 	ix
   24 00:00FE FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:0100 C8 -  -  -  		ret 	z
   26 00:0101 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:0103 C8 -  -  -  		ret 	z
   28 00:0104 FE 3F -  -  		cp 		STRING_MARKER
   29 00:0106 C2 36 02 00 		jp 		nz,SyntaxError
   30 00:010A -  -  -  -  		;		
   31 00:010A 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:010E DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0111 13 -  -  -  		inc 	de 
   34 00:0112 13 -  -  -  		inc 	de
   35 00:0113 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:0115 C9 -  -  -  		ret
   37 00:0116 -  -  -  -  
   38 00:0116 -  -  -  -  ; ***************************************************************************************
   39 00:0116 -  -  -  -  ;
   40 00:0116 -  -  -  -  ;									Changes and Updates
   41 00:0116 -  -  -  -  ;
   42 00:0116 -  -  -  -  ; ***************************************************************************************
   43 00:0116 -  -  -  -  ;
   44 00:0116 -  -  -  -  ;		Date			Notes
   45 00:0116 -  -  -  -  ;		==== 			=====
   46 00:0116 -  -  -  -  ;
   47 00:0116 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:0116 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:0116 -  -  -  -  ; ***************************************************************************************
    2 00:0116 -  -  -  -  ; ***************************************************************************************
    3 00:0116 -  -  -  -  ;
    4 00:0116 -  -  -  -  ;		Name : 		run.asm
    5 00:0116 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0116 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0116 -  -  -  -  ;		Reviewed :	No
    8 00:0116 -  -  -  -  ;		Purpose :	Run command
    9 00:0116 -  -  -  -  ;
   10 00:0116 -  -  -  -  ; ***************************************************************************************
   11 00:0116 -  -  -  -  ; ***************************************************************************************
   12 00:0116 -  -  -  -  
   13 00:0116 -  -  -  -  ; ***************************************************************************************
   14 00:0116 -  -  -  -  ;
   15 00:0116 -  -  -  -  ;										RUN command
   16 00:0116 -  -  -  -  ;
   17 00:0116 -  -  -  -  ; ***************************************************************************************
   18 00:0116 -  -  -  -  
   19 00:0116 -  -  -  -  Command_RUN: 	;; [run]
   20 00:0116 CD DF 06 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:011A -  -  -  -  
   22 00:011A DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:011F ED 73 54 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:0124 -  -  -  -  		;
   25 00:0124 -  -  -  -  		; 		New line at IX.
   26 00:0124 -  -  -  -  		;
   27 00:0124 -  -  -  -  CRNewLine:
   28 00:0124 DD 22 50 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:0129 -  -  -  -  		;
   30 00:0129 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:012C B7 -  -  -  		or 		a
   32 00:012D CA DC 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:0131 -  -  -  -  		;
   34 00:0131 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:0133 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:0135 DD 23 -  -  		inc 	ix
   37 00:0137 -  -  -  -  		;
   38 00:0137 -  -  -  -  		; 		New command at IX
   39 00:0137 -  -  -  -  		;
   40 00:0137 -  -  -  -  _CRNewCommand:	
   41 00:0137 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:013A B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:013B F2 72 01 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:013F -  -  -  -  		;
   45 00:013F FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:0141 30 06 -  -  		jr  	nc,_CRDoCommand
   47 00:0143 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:0145 D2 66 01 00 		jp 		nc,_CRAlternateLets
   49 00:0149 -  -  -  -  		;
   50 00:0149 -  -  -  -  _CRDoCommand:		
   51 00:0149 E6 7F 21 00 
              00 00 6F 29 
              29 11 9E 09 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:015E DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:0160 CD 58 00 00 		call 	JumpCode 					; call the routine.
   54 00:0164 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:0166 -  -  -  -  		;
   56 00:0166 -  -  -  -  		; 		Do CALL (HL)
   57 00:0166 -  -  -  -  		;
   58 00:0166 -  -  -  -  		;
   59 00:0166 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:0166 -  -  -  -  		;		
   61 00:0166 -  -  -  -  _CRAlternateLets:		
   62 00:0166 FE 83 -  -  		cp 		KWD_PLING
   63 00:0168 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 00:016A FE 84 -  -  		cp 		KWD_QMARK
   65 00:016C 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 00:016E C3 36 02 00 		jp 		SyntaxError
   67 00:0172 -  -  -  -  		;
   68 00:0172 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:0172 -  -  -  -  		;
   70 00:0172 -  -  -  -  _CRAssignmentHandler:		
   71 00:0172 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:0174 D2 36 02 00 		jp 		nc,SyntaxError
   73 00:0178 -  -  -  -  _CRAssignmentLet:		
   74 00:0178 3E 0E C3 CC 
              01 00 -  -  		ERR_TODO
   75 00:017E -  -  -  -  		;call	Command_LET
   76 00:017E C3 37 01 00 		jp 		_CRNewCommand
   77 00:0182 -  -  -  -  
   78 00:0182 -  -  -  -  ; ***************************************************************************************
   79 00:0182 -  -  -  -  ;
   80 00:0182 -  -  -  -  ;									Changes and Updates
   81 00:0182 -  -  -  -  ;
   82 00:0182 -  -  -  -  ; ***************************************************************************************
   83 00:0182 -  -  -  -  ;
   84 00:0182 -  -  -  -  ;		Date			Notes
   85 00:0182 -  -  -  -  ;		==== 			=====
   86 00:0182 -  -  -  -  ;
   87 00:0182 -  -  -  -  ; ***************************************************************************************
   88 00:0182 -  -  -  -  		
Listing for file "_build.asm"
   20 00:0182 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0182 -  -  -  -  ; ***************************************************************************************
    2 00:0182 -  -  -  -  ; ***************************************************************************************
    3 00:0182 -  -  -  -  ;
    4 00:0182 -  -  -  -  ;		Name : 		stop.asm
    5 00:0182 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0182 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0182 -  -  -  -  ;		Reviewed :	No
    8 00:0182 -  -  -  -  ;		Purpose :	Stop command
    9 00:0182 -  -  -  -  ;
   10 00:0182 -  -  -  -  ; ***************************************************************************************
   11 00:0182 -  -  -  -  ; ***************************************************************************************
   12 00:0182 -  -  -  -  
   13 00:0182 -  -  -  -  ; ***************************************************************************************
   14 00:0182 -  -  -  -  ;
   15 00:0182 -  -  -  -  ;										STOP command
   16 00:0182 -  -  -  -  ;
   17 00:0182 -  -  -  -  ; ***************************************************************************************
   18 00:0182 -  -  -  -  
   19 00:0182 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0182 3E 0C C3 CC 
              01 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0188 -  -  -  -  
   22 00:0188 -  -  -  -  ; ***************************************************************************************
   23 00:0188 -  -  -  -  ;
   24 00:0188 -  -  -  -  ;									Changes and Updates
   25 00:0188 -  -  -  -  ;
   26 00:0188 -  -  -  -  ; ***************************************************************************************
   27 00:0188 -  -  -  -  ;
   28 00:0188 -  -  -  -  ;		Date			Notes
   29 00:0188 -  -  -  -  ;		==== 			=====
   30 00:0188 -  -  -  -  ;
   31 00:0188 -  -  -  -  ; ***************************************************************************************
   32 00:0188 -  -  -  -  		
Listing for file "_build.asm"
   21 00:0188 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0188 -  -  -  -  ; ***************************************************************************************
    2 00:0188 -  -  -  -  ; ***************************************************************************************
    3 00:0188 -  -  -  -  ;
    4 00:0188 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0188 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0188 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0188 -  -  -  -  ;		Reviewed :	No
    8 00:0188 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0188 -  -  -  -  ;
   10 00:0188 -  -  -  -  ; ***************************************************************************************
   11 00:0188 -  -  -  -  ; ***************************************************************************************
   12 00:0188 -  -  -  -  
   13 00:0188 -  -  -  -  ; ***************************************************************************************
   14 00:0188 -  -  -  -  ;
   15 00:0188 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0188 -  -  -  -  ;
   17 00:0188 -  -  -  -  ; ***************************************************************************************
   18 00:0188 -  -  -  -  
   19 00:0188 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0188             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0188             		inc 	ix
   22 00:0188             		cp 		ch 							; exit if matches
   23 00:0188             		ret 	z
   24 00:0188             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0188             		jp 		ErrorHandler
   26 00:0188             #endmacro
   27 00:0188 -  -  -  -  
   28 00:0188 -  -  -  -  CheckLeftBracket:
   29 00:0188 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 CC 
              01 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0196 -  -  -  -  
   31 00:0196 -  -  -  -  CheckRightBracket:
   32 00:0196 DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 CC 
              01 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:01A4 -  -  -  -  
   34 00:01A4 -  -  -  -  CheckDollar:
   35 00:01A4 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 CC 
              01 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:01B2 -  -  -  -  		
   37 00:01B2 -  -  -  -  CheckComma:
   38 00:01B2 DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 CC 
              01 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:01C0 -  -  -  -  
   40 00:01C0 -  -  -  -  ; ***************************************************************************************
   41 00:01C0 -  -  -  -  ;
   42 00:01C0 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:01C0 -  -  -  -  ;
   44 00:01C0 -  -  -  -  ; ***************************************************************************************
   45 00:01C0 -  -  -  -  
   46 00:01C0 -  -  -  -  CheckNextA:
   47 00:01C0 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:01C3 DD 23 -  -  		inc 	ix 							; skip character
   49 00:01C5 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:01C6 3E 0D C3 CC 
              01 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:01CC -  -  -  -  		
   52 00:01CC -  -  -  -  ; ***************************************************************************************
   53 00:01CC -  -  -  -  ;
   54 00:01CC -  -  -  -  ;									Changes and Updates
   55 00:01CC -  -  -  -  ;
   56 00:01CC -  -  -  -  ; ***************************************************************************************
   57 00:01CC -  -  -  -  ;
   58 00:01CC -  -  -  -  ;		Date			Notes
   59 00:01CC -  -  -  -  ;		==== 			=====
   60 00:01CC -  -  -  -  ;
   61 00:01CC -  -  -  -  ; ***************************************************************************************
   62 00:01CC -  -  -  -  		
Listing for file "_build.asm"
   22 00:01CC -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:01CC -  -  -  -  ; ***************************************************************************************
    2 00:01CC -  -  -  -  ; ***************************************************************************************
    3 00:01CC -  -  -  -  ;
    4 00:01CC -  -  -  -  ;		Name : 		errors.asm
    5 00:01CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01CC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01CC -  -  -  -  ;		Reviewed :	No
    8 00:01CC -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:01CC -  -  -  -  ;
   10 00:01CC -  -  -  -  ; ***************************************************************************************
   11 00:01CC -  -  -  -  ; ***************************************************************************************
   12 00:01CC -  -  -  -  
   13 00:01CC -  -  -  -  ; ***************************************************************************************
   14 00:01CC -  -  -  -  ;
   15 00:01CC -  -  -  -  ;								Error handler, message A 
   16 00:01CC -  -  -  -  ;
   17 00:01CC -  -  -  -  ; ***************************************************************************************
   18 00:01CC -  -  -  -  
   19 00:01CC -  -  -  -  ErrorHandler:
   20 00:01CC F5 -  -  -  		push 	af 						; save error ID
   21 00:01CD -  -  -  -  
   22 00:01CD 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:01D1 6F -  -  -  		ld 		l,a
   24 00:01D2 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:01D3 29 -  -  -  		add 	hl,hl 		
   26 00:01D4 11 71 08 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:01D8 19 -  -  -  		add 	hl,de
   28 00:01D9 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:01DB CD 39 07 00 		call 	PrintStringAtHL
   30 00:01DF -  -  -  -  		;
   31 00:01DF F1 -  -  -  		pop 	af 						; restore error ID
   32 00:01E0 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:01E1 28 2F -  -  		jr 		z,_EHExit
   34 00:01E3 -  -  -  -  		;
   35 00:01E3 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:01E8 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:01EB B7 -  -  -  		or 		a
   38 00:01EC 28 24 -  -  		jr 		z,_EHExit
   39 00:01EE -  -  -  -  
   40 00:01EE 21 1A 02 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:01F2 CD 39 07 00 		call 	PrintStringAtHL 
   42 00:01F6 -  -  -  -  		
   43 00:01F6 D9 -  -  -  		exx								; HL'HL = line number
   44 00:01F7 21 00 00 00 		ld 		hl,$0000 		
   45 00:01FB D9 -  -  -  		exx 
   46 00:01FC DD 6E 01 -  		ld 		l,(ix+1)
   47 00:01FF DD 66 02 -  		ld 		h,(ix+2)
   48 00:0202 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:0204 01 86 00 00 		ld 		bc,ConvertBuffer
   50 00:0208 CD 75 0C 00 		call 	Int32ToString
   51 00:020C C5 -  -  -  		push 	bc
   52 00:020D E1 -  -  -  		pop 	hl
   53 00:020E CD 39 07 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0212 -  -  -  -  _EHExit:		
   55 00:0212 CD C5 0C 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:0216 C3 1A 00 00 		jp 		WarmStart
   57 00:021A -  -  -  -  
   58 00:021A -  -  -  -  _EHAtText:
   59 00:021A 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:0224 -  -  -  -  
   61 00:0224 -  -  -  -  NotImplemented:
   62 00:0224 3E 04 C3 CC 
              01 00 -  -  		ERR_DISABLED
   63 00:022A -  -  -  -  TypeMismatch:
   64 00:022A 3E 02 C3 CC 
              01 00 -  -  		ERR_BADTYPE
   65 00:0230 -  -  -  -  BadValue:
   66 00:0230 3E 03 C3 CC 
              01 00 -  -  		ERR_BADVALUE
   67 00:0236 -  -  -  -  SyntaxError:
   68 00:0236 3E 0D C3 CC 
              01 00 -  -  		ERR_SYNTAX
   69 00:023C -  -  -  -  						
   70 00:023C -  -  -  -  ; ***************************************************************************************
   71 00:023C -  -  -  -  ;
   72 00:023C -  -  -  -  ;									Changes and Updates
   73 00:023C -  -  -  -  ;
   74 00:023C -  -  -  -  ; ***************************************************************************************
   75 00:023C -  -  -  -  ;
   76 00:023C -  -  -  -  ;		Date			Notes
   77 00:023C -  -  -  -  ;		==== 			=====
   78 00:023C -  -  -  -  ;
   79 00:023C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:023C -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:023C -  -  -  -  ; ***************************************************************************************
    2 00:023C -  -  -  -  ; ***************************************************************************************
    3 00:023C -  -  -  -  ;
    4 00:023C -  -  -  -  ;		Name : 		basicmath.asm
    5 00:023C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:023C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:023C -  -  -  -  ;		Reviewed :	No
    8 00:023C -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:023C -  -  -  -  ;
   10 00:023C -  -  -  -  ; ***************************************************************************************
   11 00:023C -  -  -  -  ; ***************************************************************************************
   12 00:023C -  -  -  -  
   13 00:023C -  -  -  -  ; ***************************************************************************************
   14 00:023C -  -  -  -  ;
   15 00:023C -  -  -  -  ; 									Addition
   16 00:023C -  -  -  -  ;
   17 00:023C -  -  -  -  ; ***************************************************************************************
   18 00:023C -  -  -  -  
   19 00:023C -  -  -  -  ALUAdd: 		;; [+]
   20 00:023C CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 F4 
              0B 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:024A -  -  -  -  
   22 00:024A -  -  -  -  ; ***************************************************************************************
   23 00:024A -  -  -  -  ;
   24 00:024A -  -  -  -  ; 									Subtraction
   25 00:024A -  -  -  -  ;
   26 00:024A -  -  -  -  ; ***************************************************************************************
   27 00:024A -  -  -  -  
   28 00:024A -  -  -  -  ALUSubtract: 	;; [-]
   29 00:024A CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 FC 
              0B 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:0258 -  -  -  -  
   31 00:0258 -  -  -  -  ; ***************************************************************************************
   32 00:0258 -  -  -  -  ;
   33 00:0258 -  -  -  -  ; 									  Multiply
   34 00:0258 -  -  -  -  ;
   35 00:0258 -  -  -  -  ; ***************************************************************************************
   36 00:0258 -  -  -  -  
   37 00:0258 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:0258 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 BB 
              0B 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0266 -  -  -  -  
   40 00:0266 -  -  -  -  ; ***************************************************************************************
   41 00:0266 -  -  -  -  ;
   42 00:0266 -  -  -  -  ; 									  Divide
   43 00:0266 -  -  -  -  ;
   44 00:0266 -  -  -  -  ; ***************************************************************************************
   45 00:0266 -  -  -  -  
   46 00:0266 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0266 -  -  -  -  ALUDivide2:	;; [div]
   48 00:0266 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 BB 
              0A 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0274 -  -  -  -  
   50 00:0274 -  -  -  -  ; ***************************************************************************************
   51 00:0274 -  -  -  -  ;
   52 00:0274 -  -  -  -  ; 									  Modulus
   53 00:0274 -  -  -  -  ;
   54 00:0274 -  -  -  -  ; ***************************************************************************************
   55 00:0274 -  -  -  -  
   56 00:0274 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0274 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 BE 
              0A 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0282 -  -  -  -  
   59 00:0282 -  -  -  -  ; ***************************************************************************************
   60 00:0282 -  -  -  -  ;
   61 00:0282 -  -  -  -  ; 									  Logical
   62 00:0282 -  -  -  -  ;
   63 00:0282 -  -  -  -  ; ***************************************************************************************
   64 00:0282 -  -  -  -  
   65 00:0282 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0282 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 06 
              0C 00 -  -  		IntegerDispatch(Int32And)
   67 00:0290 -  -  -  -  
   68 00:0290 -  -  -  -  ALUOr: 			;; [or]
   69 00:0290 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 13 
              0C 00 -  -  		IntegerDispatch(Int32Or)
   70 00:029E -  -  -  -  
   71 00:029E -  -  -  -  ALUXor: 		;; [eor]
   72 00:029E CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 20 
              0C 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:02AC -  -  -  -  
   74 00:02AC -  -  -  -  ; ***************************************************************************************
   75 00:02AC -  -  -  -  ;
   76 00:02AC -  -  -  -  ;									Changes and Updates
   77 00:02AC -  -  -  -  ;
   78 00:02AC -  -  -  -  ; ***************************************************************************************
   79 00:02AC -  -  -  -  ;
   80 00:02AC -  -  -  -  ;		Date			Notes
   81 00:02AC -  -  -  -  ;		==== 			=====
   82 00:02AC -  -  -  -  ;
   83 00:02AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:02AC -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:02AC -  -  -  -  ; ***************************************************************************************
    2 00:02AC -  -  -  -  ; ***************************************************************************************
    3 00:02AC -  -  -  -  ;
    4 00:02AC -  -  -  -  ;		Name : 		binrefs.asm
    5 00:02AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02AC -  -  -  -  ;		Reviewed :	No
    8 00:02AC -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:02AC -  -  -  -  ;
   10 00:02AC -  -  -  -  ; ***************************************************************************************
   11 00:02AC -  -  -  -  ; ***************************************************************************************
   12 00:02AC -  -  -  -  
   13 00:02AC -  -  -  -  ; ***************************************************************************************
   14 00:02AC -  -  -  -  ;
   15 00:02AC -  -  -  -  ; 									<l> <op> <r>
   16 00:02AC -  -  -  -  ;
   17 00:02AC -  -  -  -  ; ***************************************************************************************
   18 00:02AC -  -  -  -  
   19 00:02AC -  -  -  -  ALULongReference:			;; [!]
   20 00:02AC CD BC 02 00 		call 	BRGetAddress 				; calculate address
   21 00:02B0 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:02B2 CB F9 -  -  		set 	CIsReference,c
   23 00:02B4 C9 -  -  -  		ret
   24 00:02B5 -  -  -  -  
   25 00:02B5 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:02B5 CD AC 02 00 		call 	ALULongReference
   27 00:02B9 CB F1 -  -  		set 	CIsByteReference,c
   28 00:02BB C9 -  -  -  		ret
   29 00:02BC -  -  -  -  
   30 00:02BC -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:02BC CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 CA 
              02 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:02CA -  -  -  -  _BRGAMain:		
   33 00:02CA CD F4 0B 00 		call 	Int32Add 					; address in HL'HL
   34 00:02CE CD 5F 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:02D2 C9 -  -  -  		ret
   36 00:02D3 -  -  -  -  
   37 00:02D3 -  -  -  -  ; ***************************************************************************************
   38 00:02D3 -  -  -  -  ;
   39 00:02D3 -  -  -  -  ;									Changes and Updates
   40 00:02D3 -  -  -  -  ;
   41 00:02D3 -  -  -  -  ; ***************************************************************************************
   42 00:02D3 -  -  -  -  ;
   43 00:02D3 -  -  -  -  ;		Date			Notes
   44 00:02D3 -  -  -  -  ;		==== 			=====
   45 00:02D3 -  -  -  -  ;
   46 00:02D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:02D3 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:02D3 -  -  -  -  ; ***************************************************************************************
    2 00:02D3 -  -  -  -  ; ***************************************************************************************
    3 00:02D3 -  -  -  -  ;
    4 00:02D3 -  -  -  -  ;		Name : 		compare.asm
    5 00:02D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02D3 -  -  -  -  ;		Reviewed :	No
    8 00:02D3 -  -  -  -  ;		Purpose :	Comparison code
    9 00:02D3 -  -  -  -  ;
   10 00:02D3 -  -  -  -  ; ***************************************************************************************
   11 00:02D3 -  -  -  -  ; ***************************************************************************************
   12 00:02D3 -  -  -  -  
   13 00:02D3 -  -  -  -  #macro compare_equals(n)
   14 00:02D3             		call 	CompareBaseCode
   15 00:02D3             		cp 		n
   16 00:02D3             		jr 		z,UnaryInt32True
   17 00:02D3             		jr 		UnaryInt32False
   18 00:02D3             #endmacro
   19 00:02D3 -  -  -  -  
   20 00:02D3 -  -  -  -  #macro compare_not_equals(n)
   21 00:02D3             		call 	CompareBaseCode
   22 00:02D3             		cp 		n
   23 00:02D3             		jr 		nz,UnaryInt32True
   24 00:02D3             		jr 		UnaryInt32False
   25 00:02D3             #endmacro
   26 00:02D3 -  -  -  -  
   27 00:02D3 -  -  -  -  ; ***************************************************************************************
   28 00:02D3 -  -  -  -  ;
   29 00:02D3 -  -  -  -  ; 								Return True/False
   30 00:02D3 -  -  -  -  ;
   31 00:02D3 -  -  -  -  ; ***************************************************************************************
   32 00:02D3 -  -  -  -  
   33 00:02D3 -  -  -  -  UnaryInt32True:	
   34 00:02D3 3E FF -  -  		ld 		a,255
   35 00:02D5 18 01 -  -  		jr 		_Int32Logical
   36 00:02D7 -  -  -  -  UnaryInt32False: 
   37 00:02D7 AF -  -  -  		xor 	a
   38 00:02D8 -  -  -  -  _Int32Logical:
   39 00:02D8 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:02D9 67 -  -  -  		ld 		h,a
   41 00:02DA D9 -  -  -  		exx
   42 00:02DB 6F -  -  -  		ld 		l,a
   43 00:02DC 67 -  -  -  		ld 		h,a
   44 00:02DD D9 -  -  -  		exx
   45 00:02DE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:02E0 C9 -  -  -  		ret
   47 00:02E1 -  -  -  -  
   48 00:02E1 -  -  -  -  ; ***************************************************************************************
   49 00:02E1 -  -  -  -  ;
   50 00:02E1 -  -  -  -  ; 										> = < (compare == value)
   51 00:02E1 -  -  -  -  ;
   52 00:02E1 -  -  -  -  ; ***************************************************************************************
   53 00:02E1 -  -  -  -  
   54 00:02E1 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:02E1 CD 1D 03 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:02EB -  -  -  -  
   57 00:02EB -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:02EB CD 1D 03 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:02F5 -  -  -  -  
   60 00:02F5 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:02F5 CD 1D 03 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:02FF -  -  -  -  
   63 00:02FF -  -  -  -  ; ***************************************************************************************
   64 00:02FF -  -  -  -  ;
   65 00:02FF -  -  -  -  ; 										> = < (compare <> value)
   66 00:02FF -  -  -  -  ;
   67 00:02FF -  -  -  -  ; ***************************************************************************************
   68 00:02FF -  -  -  -  
   69 00:02FF -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:02FF CD 1D 03 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0309 -  -  -  -  
   72 00:0309 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0309 CD 1D 03 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:0313 -  -  -  -  
   75 00:0313 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:0313 CD 1D 03 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:031D -  -  -  -  
   78 00:031D -  -  -  -  ; ***************************************************************************************
   79 00:031D -  -  -  -  ;
   80 00:031D -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:031D -  -  -  -  ;
   82 00:031D -  -  -  -  ; ***************************************************************************************
   83 00:031D -  -  -  -  
   84 00:031D -  -  -  -  CompareBaseCode:
   85 00:031D CD 59 03 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0321 -  -  -  -  
   87 00:0321 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0322 A1 -  -  -  		and 	c
   89 00:0323 CB 47 -  -  		bit 	CIsString,a 
   90 00:0325 C2 37 03 00 		jp 		nz,StringCompare
   91 00:0329 -  -  -  -  
   92 00:0329 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:032A B1 -  -  -  		or 		c
   94 00:032B CB 47 -  -  		bit 	CIsString,a 
   95 00:032D CA 34 0C 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0331 -  -  -  -  
   97 00:0331 3E 02 C3 CC 
              01 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:0337 -  -  -  -  ;
   99 00:0337 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:0337 -  -  -  -  ;
  101 00:0337 -  -  -  -  StringCompare:
  102 00:0337 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:0338 BE -  -  -  		cp 		(hl)
  104 00:0339 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:033B 20 08 -  -  		jr 		nz,_SCLess
  106 00:033D 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:033E 23 -  -  -  		inc 	hl
  108 00:033F FE 20 -  -  		cp 		' '
  109 00:0341 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0343 AF -  -  -  		xor 	a 							; return 0.
  111 00:0344 C9 -  -  -  		ret
  112 00:0345 -  -  -  -  
  113 00:0345 -  -  -  -  _SCLess:
  114 00:0345 3E FF -  -  		ld 		a,$FF
  115 00:0347 C9 -  -  -  		ret
  116 00:0348 -  -  -  -  _SCGreater:
  117 00:0348 3E 01 -  -  		ld 		a,1
  118 00:034A C9 -  -  -  		ret
  119 00:034B -  -  -  -  
  120 00:034B 3E 0E C3 CC 
              01 00 -  -  		ERR_TODO()
  121 00:0351 -  -  -  -  
  122 00:0351 -  -  -  -  ; ***************************************************************************************
  123 00:0351 -  -  -  -  ;
  124 00:0351 -  -  -  -  ;									Changes and Updates
  125 00:0351 -  -  -  -  ;
  126 00:0351 -  -  -  -  ; ***************************************************************************************
  127 00:0351 -  -  -  -  ;
  128 00:0351 -  -  -  -  ;		Date			Notes
  129 00:0351 -  -  -  -  ;		==== 			=====
  130 00:0351 -  -  -  -  ;
  131 00:0351 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0351 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0351 -  -  -  -  ; ***************************************************************************************
    2 00:0351 -  -  -  -  ; ***************************************************************************************
    3 00:0351 -  -  -  -  ;
    4 00:0351 -  -  -  -  ;		Name : 		utility.asm
    5 00:0351 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0351 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0351 -  -  -  -  ;		Reviewed :	No
    8 00:0351 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0351 -  -  -  -  ;
   10 00:0351 -  -  -  -  ; ***************************************************************************************
   11 00:0351 -  -  -  -  ; ***************************************************************************************
   12 00:0351 -  -  -  -  
   13 00:0351 -  -  -  -  ; ***************************************************************************************
   14 00:0351 -  -  -  -  ;
   15 00:0351 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0351 -  -  -  -  ;
   17 00:0351 -  -  -  -  ; ***************************************************************************************
   18 00:0351 -  -  -  -  
   19 00:0351 -  -  -  -  SwapHLDE:
   20 00:0351 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0352 D9 -  -  -  			exx
   22 00:0353 EB -  -  -  			ex 		de,hl
   23 00:0354 D9 -  -  -  			exx
   24 00:0355 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:0356 41 -  -  -  			ld 		b,c
   26 00:0357 4F -  -  -  			ld 		c,a
   27 00:0358 C9 -  -  -  			ret
   28 00:0359 -  -  -  -  
   29 00:0359 -  -  -  -  ; ***************************************************************************************
   30 00:0359 -  -  -  -  ;
   31 00:0359 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:0359 -  -  -  -  ;
   33 00:0359 -  -  -  -  ; ***************************************************************************************
   34 00:0359 -  -  -  -  
   35 00:0359 -  -  -  -  DereferenceBoth:
   36 00:0359 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:035B C4 32 04 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:035F CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0361 C8 -  -  -  			ret 	z
   40 00:0362 CD 51 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:0366 CD 32 04 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:036A CD 51 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:036E C9 -  -  -  			ret
   44 00:036F -  -  -  -  
   45 00:036F -  -  -  -  ; ***************************************************************************************
   46 00:036F -  -  -  -  ;
   47 00:036F -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:036F -  -  -  -  ;
   49 00:036F -  -  -  -  ; ***************************************************************************************
   50 00:036F -  -  -  -  
   51 00:036F -  -  -  -  NegateHLHL:	
   52 00:036F CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0371 C2 2A 02 00 			jp 		nz,TypeMismatch
   54 00:0375 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0377 C4 32 04 00 			call 	nz,Dereference 			; if required.
   56 00:037B CD 5E 0C 00 			call 	Int32Negate
   57 00:037F C9 -  -  -  			ret
Listing for file "_build.asm"
   27 00:0380 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0380 -  -  -  -  ; ***************************************************************************************
    2 00:0380 -  -  -  -  ; ***************************************************************************************
    3 00:0380 -  -  -  -  ;
    4 00:0380 -  -  -  -  ;		Name : 		expression.asm
    5 00:0380 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0380 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0380 -  -  -  -  ;		Reviewed :	None
    8 00:0380 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0380 -  -  -  -  ;
   10 00:0380 -  -  -  -  ; ***************************************************************************************
   11 00:0380 -  -  -  -  ; ***************************************************************************************
   12 00:0380 -  -  -  -  
   13 00:0380 -  -  -  -  ; ***************************************************************************************
   14 00:0380 -  -  -  -  ;
   15 00:0380 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0380 -  -  -  -  ;
   17 00:0380 -  -  -  -  ; ***************************************************************************************
   18 00:0380 -  -  -  -  
   19 00:0380 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0380 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0381 -  -  -  -  EvaluateAtPrecedence:
   22 00:0381 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0382 -  -  -  -  		;
   24 00:0382 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0382 -  -  -  -  		;
   26 00:0382 CD 8E 04 00 		call 	EvaluateTerm 				; get term
   27 00:0386 -  -  -  -  		;
   28 00:0386 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0386 -  -  -  -  		;
   30 00:0386 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0387 -  -  -  -  _EAPLoop:
   32 00:0387 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:038A FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:038C D8 -  -  -  		ret 	c
   35 00:038D FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:038F D0 -  -  -  		ret 	nc
   37 00:0390 -  -  -  -  		;
   38 00:0390 -  -  -  -  		; 		Get the precedence.
   39 00:0390 -  -  -  -  		;
   40 00:0390 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0391 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0393 21 60 08 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0397 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:0398 6F -  -  -  		ld 		l,a
   45 00:0399 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:039A E1 -  -  -  		pop 	hl 							; restore HL
   47 00:039B -  -  -  -  		;
   48 00:039B -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:039B -  -  -  -  		;
   50 00:039B 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:039C BB -  -  -  		cp 		e
   52 00:039D D0 -  -  -  		ret 	nc
   53 00:039E -  -  -  -  
   54 00:039E -  -  -  -  		;
   55 00:039E -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:039E -  -  -  -  		;
   57 00:039E D5 -  -  -  		push 	de 							; save precedence information.
   58 00:039F -  -  -  -  		;
   59 00:039F DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:03A2 F5 -  -  -  		push 	af
   61 00:03A3 -  -  -  -  		;
   62 00:03A3 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:03A4 D9 -  -  -  		exx 								; save HL'
   64 00:03A5 E5 -  -  -  		push 	hl
   65 00:03A6 D9 -  -  -  		exx 								
   66 00:03A7 E5 -  -  -  		push 	hl 							; save HL
   67 00:03A8 -  -  -  -  		;
   68 00:03A8 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:03AA -  -  -  -  		;
   70 00:03AA -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:03AA -  -  -  -  		;
   72 00:03AA 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:03AB CD 81 03 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:03AF -  -  -  -  		;
   75 00:03AF -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:03AF -  -  -  -  		;
   77 00:03AF 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:03B0 -  -  -  -  
   79 00:03B0 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:03B1 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:03B2 D9 -  -  -  		exx
   82 00:03B3 EB -  -  -  		ex 		de,hl
   83 00:03B4 E1 -  -  -  		pop 	hl
   84 00:03B5 D9 -  -  -  		exx
   85 00:03B6 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:03B7 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:03B8 -  -  -  -  		;
   88 00:03B8 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:03B8 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:03B8 -  -  -  -  		;
   91 00:03B8 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:03B9 -  -  -  -  		;
   93 00:03B9 -  -  -  -  		; 		Call the binary operator in A.
   94 00:03B9 -  -  -  -  		;
   95 00:03B9 D5 -  -  -  		push 	de
   96 00:03BA E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:03BB E6 7F 21 00 
              00 00 6F 29 
              29 11 9E 09 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:03D0 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:03D1 D1 -  -  -  		pop 	de 							; restore DE
  100 00:03D2 CD 58 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:03D6 -  -  -  -  		;
  102 00:03D6 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:03D7 -  -  -  -  		;
  104 00:03D7 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:03D9 -  -  -  -  
  106 00:03D9 -  -  -  -  ; ***************************************************************************************
  107 00:03D9 -  -  -  -  ;
  108 00:03D9 -  -  -  -  ;									Changes and Updates
  109 00:03D9 -  -  -  -  ;
  110 00:03D9 -  -  -  -  ; ***************************************************************************************
  111 00:03D9 -  -  -  -  ;
  112 00:03D9 -  -  -  -  ;		Date			Notes
  113 00:03D9 -  -  -  -  ;		==== 			=====
  114 00:03D9 -  -  -  -  ;
  115 00:03D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:03D9 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:03D9 -  -  -  -  ; ***************************************************************************************
    2 00:03D9 -  -  -  -  ; ***************************************************************************************
    3 00:03D9 -  -  -  -  ;
    4 00:03D9 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:03D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03D9 -  -  -  -  ;		Reviewed :	No
    8 00:03D9 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:03D9 -  -  -  -  ;
   10 00:03D9 -  -  -  -  ; ***************************************************************************************
   11 00:03D9 -  -  -  -  ; ***************************************************************************************
   12 00:03D9 -  -  -  -  
   13 00:03D9 -  -  -  -  ; ***************************************************************************************
   14 00:03D9 -  -  -  -  ;
   15 00:03D9 -  -  -  -  ; 								Evaluate an integer term
   16 00:03D9 -  -  -  -  ;
   17 00:03D9 -  -  -  -  ; ***************************************************************************************
   18 00:03D9 -  -  -  -  
   19 00:03D9 -  -  -  -  EvaluateIntegerTerm:
   20 00:03D9 CD 8E 04 00 		call 	EvaluateTerm
   21 00:03DD CD 32 04 00 		call 	DeReference
   22 00:03E1 CB 41 -  -  		bit 	CIsString,c
   23 00:03E3 C8 -  -  -  		ret 	z
   24 00:03E4 C3 2A 02 00 		jp 		TypeMismatch
   25 00:03E8 -  -  -  -  
   26 00:03E8 -  -  -  -  ; ***************************************************************************************
   27 00:03E8 -  -  -  -  ;
   28 00:03E8 -  -  -  -  ; 								Evaluate a string term
   29 00:03E8 -  -  -  -  ;
   30 00:03E8 -  -  -  -  ; ***************************************************************************************
   31 00:03E8 -  -  -  -  
   32 00:03E8 -  -  -  -  EvaluateStringTerm:
   33 00:03E8 CD 8E 04 00 		call 	EvaluateTerm
   34 00:03EC CD 32 04 00 		call 	DeReference
   35 00:03F0 CB 41 -  -  		bit 	CIsString,c
   36 00:03F2 C0 -  -  -  		ret 	nz
   37 00:03F3 C3 2A 02 00 		jp 		TypeMismatch
   38 00:03F7 -  -  -  -  
   39 00:03F7 -  -  -  -  ; ***************************************************************************************
   40 00:03F7 -  -  -  -  ;
   41 00:03F7 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:03F7 -  -  -  -  ;
   43 00:03F7 -  -  -  -  ; ***************************************************************************************
   44 00:03F7 -  -  -  -  
   45 00:03F7 -  -  -  -  EvaluateValue:
   46 00:03F7 CD 80 03 00 		call 	EvaluateAtPrecedence0
   47 00:03FB C3 32 04 00 		jp 		Dereference
   48 00:03FF -  -  -  -  
   49 00:03FF -  -  -  -  ; ***************************************************************************************
   50 00:03FF -  -  -  -  ;
   51 00:03FF -  -  -  -  ; 									Evaluate a number
   52 00:03FF -  -  -  -  ;
   53 00:03FF -  -  -  -  ; ***************************************************************************************
   54 00:03FF -  -  -  -  
   55 00:03FF -  -  -  -  EvaluateInteger:
   56 00:03FF CD F7 03 00 		call 	EvaluateValue
   57 00:0403 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:0405 C8 -  -  -  		ret 	z
   59 00:0406 C3 2A 02 00 		jp 		TypeMismatch
   60 00:040A -  -  -  -  
   61 00:040A -  -  -  -  ; ***************************************************************************************
   62 00:040A -  -  -  -  ;
   63 00:040A -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:040A -  -  -  -  ;
   65 00:040A -  -  -  -  ; ***************************************************************************************
   66 00:040A -  -  -  -  
   67 00:040A -  -  -  -  Evaluate8BitInteger:
   68 00:040A CD FF 03 00 		call 	EvaluateInteger
   69 00:040E D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:040F 7C -  -  -  		ld 		a,h
   71 00:0410 B5 -  -  -  		or 		l
   72 00:0411 D9 -  -  -  		exx 	
   73 00:0412 B4 -  -  -  		or 		h
   74 00:0413 C2 30 02 00 		jp 		nz,BadValue
   75 00:0417 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:0418 C9 -  -  -  		ret
   77 00:0419 -  -  -  -  		
   78 00:0419 -  -  -  -  ; ***************************************************************************************
   79 00:0419 -  -  -  -  ;
   80 00:0419 -  -  -  -  ; 									Evaluate a string
   81 00:0419 -  -  -  -  ;
   82 00:0419 -  -  -  -  ; ***************************************************************************************
   83 00:0419 -  -  -  -  
   84 00:0419 -  -  -  -  EvaluateStringOnly:
   85 00:0419 CD F7 03 00 		call 	EvaluateValue
   86 00:041D CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:041F CA 2A 02 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:0423 C9 -  -  -  		ret
   89 00:0424 -  -  -  -  
   90 00:0424 -  -  -  -  ; ***************************************************************************************
   91 00:0424 -  -  -  -  ;
   92 00:0424 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:0424 -  -  -  -  ;
   94 00:0424 -  -  -  -  ; ***************************************************************************************
   95 00:0424 -  -  -  -  
   96 00:0424 -  -  -  -  Return8BitConstant:
   97 00:0424 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:0428 6F -  -  -  		ld 		l,a
   99 00:0429 -  -  -  -  Return16BitConstant:
  100 00:0429 D9 -  -  -  		exx 								; clear HL'
  101 00:042A 21 00 00 00 		ld 		hl,0
  102 00:042E D9 -  -  -  		exx
  103 00:042F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0431 C9 -  -  -  		ret
  105 00:0432 -  -  -  -  
  106 00:0432 -  -  -  -  ; ***************************************************************************************
  107 00:0432 -  -  -  -  ;
  108 00:0432 -  -  -  -  ;									Changes and Updates
  109 00:0432 -  -  -  -  ;
  110 00:0432 -  -  -  -  ; ***************************************************************************************
  111 00:0432 -  -  -  -  ;
  112 00:0432 -  -  -  -  ;		Date			Notes
  113 00:0432 -  -  -  -  ;		==== 			=====
  114 00:0432 -  -  -  -  ;
  115 00:0432 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:0432 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0432 -  -  -  -  ; ***************************************************************************************
    2 00:0432 -  -  -  -  ; ***************************************************************************************
    3 00:0432 -  -  -  -  ;
    4 00:0432 -  -  -  -  ;		Name : 		reference.asm
    5 00:0432 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0432 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0432 -  -  -  -  ;		Reviewed :	No
    8 00:0432 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0432 -  -  -  -  ;
   10 00:0432 -  -  -  -  ; ***************************************************************************************
   11 00:0432 -  -  -  -  ; ***************************************************************************************
   12 00:0432 -  -  -  -  
   13 00:0432 -  -  -  -  ; ***************************************************************************************
   14 00:0432 -  -  -  -  ;
   15 00:0432 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0432 -  -  -  -  ;
   17 00:0432 -  -  -  -  ; ***************************************************************************************
   18 00:0432 -  -  -  -  
   19 00:0432 -  -  -  -  Dereference:
   20 00:0432 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:0434 C8 -  -  -  		ret 	z
   22 00:0435 -  -  -  -  
   23 00:0435 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:0437 -  -  -  -  		
   25 00:0437 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0439 20 1E -  -  		jr 		nz,_DRInternal
   27 00:043B -  -  -  -  
   28 00:043B CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:043D 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:043F -  -  -  -  
   31 00:043F E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0440 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0442 D9 -  -  -  		exx
   34 00:0443 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:0444 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:0445 23 -  -  -  		inc  	hl
   37 00:0446 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:0448 D9 -  -  -  		exx 								; fix back
   39 00:0449 C9 -  -  -  		ret
   40 00:044A -  -  -  -  
   41 00:044A -  -  -  -  _DeRefByte:		
   42 00:044A 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:044B 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:044F 6F -  -  -  		ld	 	l,a
   45 00:0450 D9 -  -  -  		exx
   46 00:0451 21 00 00 00 		ld 		hl,$0000
   47 00:0455 D9 -  -  -  		exx
   48 00:0456 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:0458 C9 -  -  -  		ret
   50 00:0459 -  -  -  -  
   51 00:0459 -  -  -  -  _DRInternal:
   52 00:0459 3E 04 C3 CC 
              01 00 -  -  		ERR_DISABLED
   53 00:045F -  -  -  -  
   54 00:045F -  -  -  -  ; ***************************************************************************************
   55 00:045F -  -  -  -  ;
   56 00:045F -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:045F -  -  -  -  ;
   58 00:045F -  -  -  -  ; ***************************************************************************************
   59 00:045F -  -  -  -  
   60 00:045F -  -  -  -  DRConvertHLHLToAddress:
   61 00:045F -  -  -  -  		#ifdef EZ80
   62 00:045F 22 5E 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0463 D9 -  -  -  		exx
   64 00:0464 22 60 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:0468 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:046C D9 -  -  -  		exx
   67 00:046D 2A 5E 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0471 -  -  -  -  		#endif
   69 00:0471 C9 -  -  -  		ret
   70 00:0472 -  -  -  -  
   71 00:0472 -  -  -  -  ; ***************************************************************************************
   72 00:0472 -  -  -  -  ;
   73 00:0472 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0472 -  -  -  -  ;
   75 00:0472 -  -  -  -  ; ***************************************************************************************
   76 00:0472 -  -  -  -  
   77 00:0472 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0472 -  -  -  -  		#ifdef EZ80
   79 00:0472 22 5E 00 00 		ld 		(AConvert),hl
   80 00:0476 21 00 00 00 		ld 		hl,$0000
   81 00:047A 22 61 00 00 		ld 		(AConvert+3),hl
   82 00:047E D9 -  -  -  		exx
   83 00:047F 2A 60 00 00 		ld 		hl,(AConvert+2)
   84 00:0483 D9 -  -  -  		exx
   85 00:0484 AF -  -  -  		xor 	a
   86 00:0485 32 60 00 00 		ld 		(AConvert+2),a
   87 00:0489 2A 5E 00 00 		ld 		hl,(AConvert)
   88 00:048D -  -  -  -  		#endif
   89 00:048D C9 -  -  -  		ret
   90 00:048E -  -  -  -  
   91 00:048E -  -  -  -  ; ***************************************************************************************
   92 00:048E -  -  -  -  ;
   93 00:048E -  -  -  -  ;									Changes and Updates
   94 00:048E -  -  -  -  ;
   95 00:048E -  -  -  -  ; ***************************************************************************************
   96 00:048E -  -  -  -  ;
   97 00:048E -  -  -  -  ;		Date			Notes
   98 00:048E -  -  -  -  ;		==== 			=====
   99 00:048E -  -  -  -  ;
  100 00:048E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:048E -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:048E -  -  -  -  ; ***************************************************************************************
    2 00:048E -  -  -  -  ; ***************************************************************************************
    3 00:048E -  -  -  -  ;
    4 00:048E -  -  -  -  ;		Name : 		term.asm
    5 00:048E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:048E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:048E -  -  -  -  ;		Reviewed :	No
    8 00:048E -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:048E -  -  -  -  ;
   10 00:048E -  -  -  -  ; ***************************************************************************************
   11 00:048E -  -  -  -  ; ***************************************************************************************
   12 00:048E -  -  -  -  
   13 00:048E -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:048E             		add_hlhl_16
   15 00:048E             		exx
   16 00:048E             		adc_hlhl_16
   17 00:048E             		exx
   18 00:048E             #endmacro
   19 00:048E -  -  -  -  
   20 00:048E -  -  -  -  ; ***************************************************************************************
   21 00:048E -  -  -  -  ;
   22 00:048E -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:048E -  -  -  -  ;
   24 00:048E -  -  -  -  ; ***************************************************************************************
   25 00:048E -  -  -  -  ;
   26 00:048E -  -  -  -  ; 		Terms can be:
   27 00:048E -  -  -  -  ;
   28 00:048E -  -  -  -  ;			<integer> 			42 						not negative
   29 00:048E -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:048E -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:048E -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:048E -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:048E -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:048E -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:048E -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:048E -  -  -  -  ; 														reference of some sort.
   37 00:048E -  -  -  -  ;
   38 00:048E -  -  -  -  ; ***************************************************************************************
   39 00:048E -  -  -  -  
   40 00:048E -  -  -  -  EvaluateTerm:		
   41 00:048E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0490 D9 -  -  -  		exx
   43 00:0491 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0495 D9 -  -  -  		exx
   45 00:0496 21 00 00 00 		ld 		hl,$0000		
   46 00:049A -  -  -  -  		;
   47 00:049A DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:049D FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:049F 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:04A1 DA 59 05 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:04A5 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:04A7 C2 FD 04 00 		jp 		nz,_ETFoundKeyword 
   53 00:04AB -  -  -  -  		;
   54 00:04AB -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:04AB -  -  -  -  		;
   56 00:04AB -  -  -  -  _ETIntegerConstant:
   57 00:04AB -  -  -  -  		;
   58 00:04AB -  -  -  -  _ETIntegerLoop:		
   59 00:04AB DD 7E 00 -  		ld 		a,(ix+0)
   60 00:04AE E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:04B0 B5 -  -  -  		or 		l 							; or into L
   62 00:04B1 6F -  -  -  		ld 		l,a
   63 00:04B2 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:04B4 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:04B7 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:04B9 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:04BB D8 -  -  -  		ret 	c
   68 00:04BC -  -  -  -  
   69 00:04BC 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:04C3 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:04CA 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:04D1 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:04D8 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:04DF 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:04E6 -  -  -  -  
   76 00:04E6 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:04E8 -  -  -  -  		;
   78 00:04E8 -  -  -  -  		; 		Found the $3F string marker.
   79 00:04E8 -  -  -  -  		;
   80 00:04E8 -  -  -  -  _ETStringMarker:		
   81 00:04E8 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:04EA DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:04EC DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:04EE E1 -  -  -  		pop 	hl
   85 00:04EF 11 00 00 00 		ld 		de,$0000
   86 00:04F3 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:04F6 DD 19 -  -  		add 	ix,de
   88 00:04F8 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:04FA 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:04FC C9 -  -  -  		ret
   91 00:04FD -  -  -  -  		;
   92 00:04FD -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:04FD -  -  -  -  		;
   94 00:04FD -  -  -  -  _ETFoundKeyword:
   95 00:04FD DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:04FF FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0501 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0503 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0505 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0507 -  -  -  -  		;
  101 00:0507 -  -  -  -  		;		Unary group 0
  102 00:0507 -  -  -  -  		;
  103 00:0507 E6 7F 21 00 
              00 00 6F 29 
              29 11 9E 09 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:051C C3 58 00 00 		jp 		JumpCode 					; and go there.
  105 00:0520 -  -  -  -  
  106 00:0520 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0520 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0522 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:0524 -  -  -  -  		;
  110 00:0524 -  -  -  -  		; 		- term
  111 00:0524 -  -  -  -  		;
  112 00:0524 CD D9 03 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:0528 CD 6F 03 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:052C C9 -  -  -  		ret
  115 00:052D -  -  -  -  		;
  116 00:052D -  -  -  -  		;		! ? indirection check
  117 00:052D -  -  -  -  		;
  118 00:052D -  -  -  -  _ETCheckIndirection:	
  119 00:052D FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:052F 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0531 FE 83 -  -  		cp 		KWD_PLING
  122 00:0533 C2 36 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:0537 -  -  -  -  		;
  124 00:0537 -  -  -  -  		; 		! ? indirection
  125 00:0537 -  -  -  -  		;
  126 00:0537 -  -  -  -  _ETIndirection:
  127 00:0537 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:0538 CD 8E 04 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:053C CD 32 04 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0540 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0542 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:0544 CD 5F 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:0548 F1 -  -  -  		pop 	af 							; get type back
  134 00:0549 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:054B CB F9 -  -  		set 	CIsReference,c
  136 00:054D FE 83 -  -  		cp 		KWD_PLING
  137 00:054F C8 -  -  -  		ret 	z
  138 00:0550 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0552 C9 -  -  -  		ret
  140 00:0553 -  -  -  -  _ETStringIndirect:
  141 00:0553 3E 02 C3 CC 
              01 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:0559 -  -  -  -  		;
  143 00:0559 -  -  -  -  		; 		Found an identifier.
  144 00:0559 -  -  -  -  		;
  145 00:0559 -  -  -  -  _ETVariable:
  146 00:0559 3E 0E C3 CC 
              01 00 -  -  		ERR_TODO
  147 00:055F 3E 0F C3 CC 
              01 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:0565 -  -  -  -  		
  149 00:0565 -  -  -  -  ; ***************************************************************************************
  150 00:0565 -  -  -  -  ;
  151 00:0565 -  -  -  -  ;									Changes and Updates
  152 00:0565 -  -  -  -  ;
  153 00:0565 -  -  -  -  ; ***************************************************************************************
  154 00:0565 -  -  -  -  ;
  155 00:0565 -  -  -  -  ;		Date			Notes
  156 00:0565 -  -  -  -  ;		==== 			=====
  157 00:0565 -  -  -  -  ;
  158 00:0565 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0565 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0565 -  -  -  -  ; ***************************************************************************************
    2 00:0565 -  -  -  -  ; ***************************************************************************************
    3 00:0565 -  -  -  -  ;
    4 00:0565 -  -  -  -  ;		Name : 		abs.asm
    5 00:0565 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0565 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0565 -  -  -  -  ;		Reviewed :	No
    8 00:0565 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0565 -  -  -  -  ;
   10 00:0565 -  -  -  -  ; ***************************************************************************************
   11 00:0565 -  -  -  -  ; ***************************************************************************************
   12 00:0565 -  -  -  -  
   13 00:0565 -  -  -  -  ; ***************************************************************************************
   14 00:0565 -  -  -  -  ;
   15 00:0565 -  -  -  -  ;								abs( unary function
   16 00:0565 -  -  -  -  ;
   17 00:0565 -  -  -  -  ; ***************************************************************************************
   18 00:0565 -  -  -  -  
   19 00:0565 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0565 CD D9 03 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:0569 D9 -  -  -  		exx 								; test MSB
   22 00:056A CB 7C -  -  		bit 	7,h
   23 00:056C D9 -  -  -  		exx
   24 00:056D C4 6F 03 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0571 C9 -  -  -  		ret
   26 00:0572 -  -  -  -  
   27 00:0572 -  -  -  -  ; ***************************************************************************************
   28 00:0572 -  -  -  -  ;
   29 00:0572 -  -  -  -  ;									Changes and Updates
   30 00:0572 -  -  -  -  ;
   31 00:0572 -  -  -  -  ; ***************************************************************************************
   32 00:0572 -  -  -  -  ;
   33 00:0572 -  -  -  -  ;		Date			Notes
   34 00:0572 -  -  -  -  ;		==== 			=====
   35 00:0572 -  -  -  -  ;
   36 00:0572 -  -  -  -  ; ***************************************************************************************
   37 00:0572 -  -  -  -  		
Listing for file "_build.asm"
   32 00:0572 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0572 -  -  -  -  ; ***************************************************************************************
    2 00:0572 -  -  -  -  ; ***************************************************************************************
    3 00:0572 -  -  -  -  ;
    4 00:0572 -  -  -  -  ;		Name : 		asc.asm
    5 00:0572 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0572 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0572 -  -  -  -  ;		Reviewed :	No
    8 00:0572 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0572 -  -  -  -  ;
   10 00:0572 -  -  -  -  ; ***************************************************************************************
   11 00:0572 -  -  -  -  ; ***************************************************************************************
   12 00:0572 -  -  -  -  
   13 00:0572 -  -  -  -  ; ***************************************************************************************
   14 00:0572 -  -  -  -  ;
   15 00:0572 -  -  -  -  ;								Asc unary function
   16 00:0572 -  -  -  -  ;
   17 00:0572 -  -  -  -  ; ***************************************************************************************
   18 00:0572 -  -  -  -  
   19 00:0572 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0572 CD E8 03 00 		call	EvaluateStringTerm			; Get string
   21 00:0576 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0577 C3 24 04 00 		jp 		Return8BitConstant
   23 00:057B -  -  -  -  
   24 00:057B -  -  -  -  ; ***************************************************************************************
   25 00:057B -  -  -  -  ;
   26 00:057B -  -  -  -  ;									Changes and Updates
   27 00:057B -  -  -  -  ;
   28 00:057B -  -  -  -  ; ***************************************************************************************
   29 00:057B -  -  -  -  ;
   30 00:057B -  -  -  -  ;		Date			Notes
   31 00:057B -  -  -  -  ;		==== 			=====
   32 00:057B -  -  -  -  ;
   33 00:057B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:057B -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:057B -  -  -  -  ; ***************************************************************************************
    2 00:057B -  -  -  -  ; ***************************************************************************************
    3 00:057B -  -  -  -  ;
    4 00:057B -  -  -  -  ;		Name : 		chr.asm
    5 00:057B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:057B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:057B -  -  -  -  ;		Reviewed :	No
    8 00:057B -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:057B -  -  -  -  ;
   10 00:057B -  -  -  -  ; ***************************************************************************************
   11 00:057B -  -  -  -  ; ***************************************************************************************
   12 00:057B -  -  -  -  
   13 00:057B -  -  -  -  ; ***************************************************************************************
   14 00:057B -  -  -  -  ;
   15 00:057B -  -  -  -  ;								Chr$() unary function
   16 00:057B -  -  -  -  ;
   17 00:057B -  -  -  -  ; ***************************************************************************************
   18 00:057B -  -  -  -  
   19 00:057B -  -  -  -  Unary_Chr:	;; [chr]
   20 00:057B CD A4 01 00 		call 	CheckDollar
   21 00:057F CD D9 03 00 		call 	EvaluateIntegerTerm
   22 00:0583 7D -  -  -  		ld 		a,l 						; get character
   23 00:0584 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0586 21 85 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:058A 36 0D -  -  		ld 		(hl),13
   26 00:058C 2B -  -  -  		dec 	hl
   27 00:058D 77 -  -  -  		ld 		(hl),a
   28 00:058E C9 -  -  -  		ret
   29 00:058F -  -  -  -  
   30 00:058F -  -  -  -  ; ***************************************************************************************
   31 00:058F -  -  -  -  ;
   32 00:058F -  -  -  -  ;									Changes and Updates
   33 00:058F -  -  -  -  ;
   34 00:058F -  -  -  -  ; ***************************************************************************************
   35 00:058F -  -  -  -  ;
   36 00:058F -  -  -  -  ;		Date			Notes
   37 00:058F -  -  -  -  ;		==== 			=====
   38 00:058F -  -  -  -  ;
   39 00:058F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:058F -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:058F -  -  -  -  ; ***************************************************************************************
    2 00:058F -  -  -  -  ; ***************************************************************************************
    3 00:058F -  -  -  -  ;
    4 00:058F -  -  -  -  ;		Name : 		len.asm
    5 00:058F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:058F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:058F -  -  -  -  ;		Reviewed :	None
    8 00:058F -  -  -  -  ;		Purpose :	String Length
    9 00:058F -  -  -  -  ;
   10 00:058F -  -  -  -  ; ***************************************************************************************
   11 00:058F -  -  -  -  ; ***************************************************************************************
   12 00:058F -  -  -  -  
   13 00:058F -  -  -  -  ; ***************************************************************************************
   14 00:058F -  -  -  -  ;
   15 00:058F -  -  -  -  ;								Len unary function
   16 00:058F -  -  -  -  ;
   17 00:058F -  -  -  -  ; ***************************************************************************************
   18 00:058F -  -  -  -  
   19 00:058F -  -  -  -  Unary_Len:	;; [len]
   20 00:058F CD E8 03 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0593 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0594 CD D7 02 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:0598 -  -  -  -  _ULCount:
   24 00:0598 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:0599 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:059B D8 -  -  -  		ret 	c
   27 00:059C 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:059D 13 -  -  -  		inc 	de
   29 00:059E 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:05A0 -  -  -  -  
   31 00:05A0 -  -  -  -  ; ***************************************************************************************
   32 00:05A0 -  -  -  -  ;
   33 00:05A0 -  -  -  -  ;									Changes and Updates
   34 00:05A0 -  -  -  -  ;
   35 00:05A0 -  -  -  -  ; ***************************************************************************************
   36 00:05A0 -  -  -  -  ;
   37 00:05A0 -  -  -  -  ;		Date			Notes
   38 00:05A0 -  -  -  -  ;		==== 			=====
   39 00:05A0 -  -  -  -  ;
   40 00:05A0 -  -  -  -  ; ***************************************************************************************
   41 00:05A0 -  -  -  -  		
Listing for file "_build.asm"
   35 00:05A0 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:05A0 -  -  -  -  ; ***************************************************************************************
    2 00:05A0 -  -  -  -  ; ***************************************************************************************
    3 00:05A0 -  -  -  -  ;
    4 00:05A0 -  -  -  -  ;		Name : 		makestring.asm
    5 00:05A0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05A0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05A0 -  -  -  -  ;		Reviewed :	No
    8 00:05A0 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:05A0 -  -  -  -  ;
   10 00:05A0 -  -  -  -  ; ***************************************************************************************
   11 00:05A0 -  -  -  -  ; ***************************************************************************************
   12 00:05A0 -  -  -  -  
   13 00:05A0 -  -  -  -  ; ***************************************************************************************
   14 00:05A0 -  -  -  -  ;
   15 00:05A0 -  -  -  -  ;								Str$() unary function
   16 00:05A0 -  -  -  -  ;
   17 00:05A0 -  -  -  -  ; ***************************************************************************************
   18 00:05A0 -  -  -  -  
   19 00:05A0 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:05A0 CD D9 03 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:05A4 CD 5F 04 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:05A8 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:05AA C9 -  -  -  		ret
   24 00:05AB -  -  -  -  
   25 00:05AB -  -  -  -  ; ***************************************************************************************
   26 00:05AB -  -  -  -  ;
   27 00:05AB -  -  -  -  ;									Changes and Updates
   28 00:05AB -  -  -  -  ;
   29 00:05AB -  -  -  -  ; ***************************************************************************************
   30 00:05AB -  -  -  -  ;
   31 00:05AB -  -  -  -  ;		Date			Notes
   32 00:05AB -  -  -  -  ;		==== 			=====
   33 00:05AB -  -  -  -  ;
   34 00:05AB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:05AB -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:05AB -  -  -  -  ; ***************************************************************************************
    2 00:05AB -  -  -  -  ; ***************************************************************************************
    3 00:05AB -  -  -  -  ;
    4 00:05AB -  -  -  -  ;		Name : 		not.asm
    5 00:05AB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05AB -  -  -  -  ;		Date : 		5th June 2023
    7 00:05AB -  -  -  -  ;		Reviewed :	No
    8 00:05AB -  -  -  -  ;		Purpose :	Logical not
    9 00:05AB -  -  -  -  ;
   10 00:05AB -  -  -  -  ; ***************************************************************************************
   11 00:05AB -  -  -  -  ; ***************************************************************************************
   12 00:05AB -  -  -  -  
   13 00:05AB -  -  -  -  ; ***************************************************************************************
   14 00:05AB -  -  -  -  ;
   15 00:05AB -  -  -  -  ;							not(x) e.g. one's complement
   16 00:05AB -  -  -  -  ;
   17 00:05AB -  -  -  -  ; ***************************************************************************************
   18 00:05AB -  -  -  -  
   19 00:05AB -  -  -  -  Unary_Not:		;; [not]
   20 00:05AB CD D9 03 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:05AF CD B8 05 00 		call 	__UNSwap 					; not and swap twice.
   22 00:05B3 CD B8 05 00 		call 	__UNSwap		
   23 00:05B7 C9 -  -  -  		ret
   24 00:05B8 -  -  -  -  
   25 00:05B8 -  -  -  -  __UNSwap:
   26 00:05B8 7C -  -  -  		ld 		a,h
   27 00:05B9 2F -  -  -  		cpl
   28 00:05BA 67 -  -  -  		ld 		h,a
   29 00:05BB 7D -  -  -  		ld 		a,l
   30 00:05BC 2F -  -  -  		cpl 	
   31 00:05BD 6F -  -  -  		ld 		l,a
   32 00:05BE D9 -  -  -  		exx
   33 00:05BF C9 -  -  -  		ret
   34 00:05C0 -  -  -  -  
   35 00:05C0 -  -  -  -  ; ***************************************************************************************
   36 00:05C0 -  -  -  -  ;
   37 00:05C0 -  -  -  -  ;									Changes and Updates
   38 00:05C0 -  -  -  -  ;
   39 00:05C0 -  -  -  -  ; ***************************************************************************************
   40 00:05C0 -  -  -  -  ;
   41 00:05C0 -  -  -  -  ;		Date			Notes
   42 00:05C0 -  -  -  -  ;		==== 			=====
   43 00:05C0 -  -  -  -  ;
   44 00:05C0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:05C0 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:05C0 -  -  -  -  ; ***************************************************************************************
    2 00:05C0 -  -  -  -  ; ***************************************************************************************
    3 00:05C0 -  -  -  -  ;
    4 00:05C0 -  -  -  -  ;		Name : 		page.asm
    5 00:05C0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05C0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05C0 -  -  -  -  ;		Reviewed :	No
    8 00:05C0 -  -  -  -  ;		Purpose :	Various constants.
    9 00:05C0 -  -  -  -  ;
   10 00:05C0 -  -  -  -  ; ***************************************************************************************
   11 00:05C0 -  -  -  -  ; ***************************************************************************************
   12 00:05C0 -  -  -  -  
   13 00:05C0 -  -  -  -  ; ***************************************************************************************
   14 00:05C0 -  -  -  -  ;
   15 00:05C0 -  -  -  -  ;							page unary function (no bracket)
   16 00:05C0 -  -  -  -  ;
   17 00:05C0 -  -  -  -  ; ***************************************************************************************
   18 00:05C0 -  -  -  -  
   19 00:05C0 -  -  -  -  Unary_Page:	;; [page]
   20 00:05C0 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:05C4 D9 -  -  -  			exx
   22 00:05C5 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:05C9 D9 -  -  -  			exx
   24 00:05CA 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:05CC C9 -  -  -  			ret
   26 00:05CD -  -  -  -  
   27 00:05CD -  -  -  -  ; ***************************************************************************************
   28 00:05CD -  -  -  -  ;
   29 00:05CD -  -  -  -  ;									Changes and Updates
   30 00:05CD -  -  -  -  ;
   31 00:05CD -  -  -  -  ; ***************************************************************************************
   32 00:05CD -  -  -  -  ;
   33 00:05CD -  -  -  -  ;		Date			Notes
   34 00:05CD -  -  -  -  ;		==== 			=====
   35 00:05CD -  -  -  -  ;
   36 00:05CD -  -  -  -  ; ***************************************************************************************
   37 00:05CD -  -  -  -  			
Listing for file "_build.asm"
   38 00:05CD -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:05CD -  -  -  -  ; ***************************************************************************************
    2 00:05CD -  -  -  -  ; ***************************************************************************************
    3 00:05CD -  -  -  -  ;
    4 00:05CD -  -  -  -  ;		Name : 		random.asm
    5 00:05CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05CD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05CD -  -  -  -  ;		Reviewed :	No
    8 00:05CD -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:05CD -  -  -  -  ;
   10 00:05CD -  -  -  -  ; ***************************************************************************************
   11 00:05CD -  -  -  -  ; ***************************************************************************************
   12 00:05CD -  -  -  -  
   13 00:05CD -  -  -  -  ; ***************************************************************************************
   14 00:05CD -  -  -  -  ;
   15 00:05CD -  -  -  -  ;								Random unary function
   16 00:05CD -  -  -  -  ;
   17 00:05CD -  -  -  -  ; ***************************************************************************************
   18 00:05CD -  -  -  -  
   19 00:05CD -  -  -  -  Unary_Random:	;; [rnd]
   20 00:05CD F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:05D5 CD D9 03 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:05D9 D9 -  -  -  		exx 								; is it -ve
   23 00:05DA CB 7C -  -  		bit 	7,h
   24 00:05DC D9 -  -  -  		exx
   25 00:05DD 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:05DF 22 64 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:05E3 D9 -  -  -  		exx
   28 00:05E4 22 68 00 00 		ld 		(RandomSeed+4),hl
   29 00:05E8 D9 -  -  -  		exx
   30 00:05E9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:05EB C9 -  -  -  		ret
   32 00:05EC -  -  -  -  _URDontSeed:		
   33 00:05EC -  -  -  -  
   34 00:05EC CD 2D 0C 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:05F0 28 1C -  -  		jr 		z,_URFail
   36 00:05F2 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:05F3 D9 -  -  -  		exx
   38 00:05F4 E5 -  -  -  		push 	hl
   39 00:05F5 D9 -  -  -  		exx
   40 00:05F6 -  -  -  -  		;
   41 00:05F6 CD 1F 06 00 		call 	URandomHL 					; get random HL'HL
   42 00:05FA D9 -  -  -  		exx
   43 00:05FB CD 1F 06 00 		call 	URandomHL
   44 00:05FF CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0601 D9 -  -  -  		exx
   46 00:0602 -  -  -  -  		;
   47 00:0602 D9 -  -  -  		exx 								; restore range.
   48 00:0603 D1 -  -  -  		pop 	de
   49 00:0604 D9 -  -  -  		exx
   50 00:0605 D1 -  -  -  		pop 	de
   51 00:0606 -  -  -  -  		;
   52 00:0606 CD BE 0A 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:060A 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:060B 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:060D C9 -  -  -  		ret
   56 00:060E -  -  -  -  _URFail:
   57 00:060E 3E 03 C3 CC 
              01 00 -  -  		ERR_BADVALUE
   58 00:0614 -  -  -  -  ; ***************************************************************************************
   59 00:0614 -  -  -  -  ;
   60 00:0614 -  -  -  -  ; 									Push RNG off zero
   61 00:0614 -  -  -  -  ;
   62 00:0614 -  -  -  -  ; ***************************************************************************************
   63 00:0614 -  -  -  -  
   64 00:0614 -  -  -  -  UnaryRandomInitialise:
   65 00:0614 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:0616 -  -  -  -  _URILoop:
   67 00:0616 C5 -  -  -  		push 	bc
   68 00:0617 CD 1F 06 00 		call 	URandomHL
   69 00:061B C1 -  -  -  		pop 	bc
   70 00:061C 10 F8 -  -  		djnz 	_URILoop
   71 00:061E C9 -  -  -  		ret
   72 00:061F -  -  -  -  
   73 00:061F -  -  -  -  ; ***************************************************************************************
   74 00:061F -  -  -  -  ;
   75 00:061F -  -  -  -  ;							16 bit random number generator
   76 00:061F -  -  -  -  ;
   77 00:061F -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:061F -  -  -  -  ;		Actual author unspecified.
   79 00:061F -  -  -  -  ;
   80 00:061F -  -  -  -  ; ***************************************************************************************
   81 00:061F -  -  -  -  
   82 00:061F -  -  -  -  URandomHL:
   83 00:061F 2A 64 00 00 	    ld 		hl,(RandomSeed)
   84 00:0623 ED 5B 68 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:0628 44 -  -  -  	    ld 		b,h
   86 00:0629 4D -  -  -  	    ld 		c,l
   87 00:062A 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:062F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0634 2C -  -  -  	    inc 	l
   90 00:0635 09 -  -  -  	    add 	hl,bc
   91 00:0636 22 64 00 00 	    ld 		(RandomSeed),hl
   92 00:063A 2A 68 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:063E ED 5A -  -  	    adc 	hl,de
   94 00:0640 22 68 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0644 EB -  -  -  	    ex 		de,hl
   96 00:0645 2A 6C 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:0649 ED 4B 70 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:064E 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0653 ED 43 70 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:0658 9F -  -  -  	    sbc 	a,a
  101 00:0659 E6 C5 -  -  	    and 	%11000101
  102 00:065B AD -  -  -  	    xor 	l
  103 00:065C 6F -  -  -  	    ld 		l,a
  104 00:065D 22 6C 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0661 EB -  -  -  	    ex 		de,hl
  106 00:0662 09 -  -  -  	    add 	hl,bc
  107 00:0663 C9 -  -  -  	    ret		
  108 00:0664 -  -  -  -  
  109 00:0664 -  -  -  -  ; ***************************************************************************************
  110 00:0664 -  -  -  -  ;
  111 00:0664 -  -  -  -  ;									Changes and Updates
  112 00:0664 -  -  -  -  ;
  113 00:0664 -  -  -  -  ; ***************************************************************************************
  114 00:0664 -  -  -  -  ;
  115 00:0664 -  -  -  -  ;		Date			Notes
  116 00:0664 -  -  -  -  ;		==== 			=====
  117 00:0664 -  -  -  -  ;
  118 00:0664 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0664 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0664 -  -  -  -  ; ***************************************************************************************
    2 00:0664 -  -  -  -  ; ***************************************************************************************
    3 00:0664 -  -  -  -  ;
    4 00:0664 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0664 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0664 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0664 -  -  -  -  ;		Reviewed :	No
    8 00:0664 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0664 -  -  -  -  ;
   10 00:0664 -  -  -  -  ; ***************************************************************************************
   11 00:0664 -  -  -  -  ; ***************************************************************************************
   12 00:0664 -  -  -  -  
   13 00:0664 -  -  -  -  ; ***************************************************************************************
   14 00:0664 -  -  -  -  ;
   15 00:0664 -  -  -  -  ;								sgn unary function
   16 00:0664 -  -  -  -  ;
   17 00:0664 -  -  -  -  ; ***************************************************************************************
   18 00:0664 -  -  -  -  
   19 00:0664 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0664 CD D9 03 00 		call	EvaluateIntegerTerm 		; get value
   21 00:0668 CD 2D 0C 00 		call 	Int32Zero 					; integer sgn() code
   22 00:066C CA D7 02 00 		jp 		z,UnaryInt32False
   23 00:0670 D9 -  -  -  		exx
   24 00:0671 CB 7C -  -  		bit 	7,h
   25 00:0673 D9 -  -  -  		exx
   26 00:0674 C2 D3 02 00 		jp 		nz,UnaryInt32True
   27 00:0678 3E 01 -  -  		ld 		a,1
   28 00:067A C3 24 04 00 		jp 		Return8BitConstant
   29 00:067E -  -  -  -  
   30 00:067E -  -  -  -  ; ***************************************************************************************
   31 00:067E -  -  -  -  ;
   32 00:067E -  -  -  -  ;									Changes and Updates
   33 00:067E -  -  -  -  ;
   34 00:067E -  -  -  -  ; ***************************************************************************************
   35 00:067E -  -  -  -  ;
   36 00:067E -  -  -  -  ;		Date			Notes
   37 00:067E -  -  -  -  ;		==== 			=====
   38 00:067E -  -  -  -  ;
   39 00:067E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:067E -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:067E -  -  -  -  ; ***************************************************************************************
    2 00:067E -  -  -  -  ; ***************************************************************************************
    3 00:067E -  -  -  -  ;
    4 00:067E -  -  -  -  ;		Name : 		simple.asm
    5 00:067E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:067E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:067E -  -  -  -  ;		Reviewed :	No
    8 00:067E -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:067E -  -  -  -  ;
   10 00:067E -  -  -  -  ; ***************************************************************************************
   11 00:067E -  -  -  -  ; ***************************************************************************************
   12 00:067E -  -  -  -  
   13 00:067E -  -  -  -  ; ***************************************************************************************
   14 00:067E -  -  -  -  ;
   15 00:067E -  -  -  -  ;								( unary function (think about it)
   16 00:067E -  -  -  -  ;
   17 00:067E -  -  -  -  ; ***************************************************************************************
   18 00:067E -  -  -  -  
   19 00:067E -  -  -  -  Unary_Brackets:	;; [(]
   20 00:067E CD 80 03 00 		call 	EvaluateAtPrecedence0
   21 00:0682 C3 96 01 00 		jp  	CheckRightBracket
   22 00:0686 -  -  -  -  
   23 00:0686 -  -  -  -  ; ***************************************************************************************
   24 00:0686 -  -  -  -  ;
   25 00:0686 -  -  -  -  ;									Handle &x
   26 00:0686 -  -  -  -  ;
   27 00:0686 -  -  -  -  ; ***************************************************************************************
   28 00:0686 -  -  -  -  
   29 00:0686 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0686 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0689 E6 C0 -  -  		and 		$C0
   32 00:068B FE 40 -  -  		cp 			$40
   33 00:068D C2 36 02 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0691 C3 8E 04 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0695 -  -  -  -  
   36 00:0695 -  -  -  -  ; ***************************************************************************************
   37 00:0695 -  -  -  -  ;
   38 00:0695 -  -  -  -  ;									Changes and Updates
   39 00:0695 -  -  -  -  ;
   40 00:0695 -  -  -  -  ; ***************************************************************************************
   41 00:0695 -  -  -  -  ;
   42 00:0695 -  -  -  -  ;		Date			Notes
   43 00:0695 -  -  -  -  ;		==== 			=====
   44 00:0695 -  -  -  -  ;
   45 00:0695 -  -  -  -  ; ***************************************************************************************
   46 00:0695 -  -  -  -  		
Listing for file "_build.asm"
   41 00:0695 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0695 -  -  -  -  ; ***************************************************************************************
    2 00:0695 -  -  -  -  ; ***************************************************************************************
    3 00:0695 -  -  -  -  ;
    4 00:0695 -  -  -  -  ;		Name : 		str.asm
    5 00:0695 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0695 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0695 -  -  -  -  ;		Reviewed :	No
    8 00:0695 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0695 -  -  -  -  ;
   10 00:0695 -  -  -  -  ; ***************************************************************************************
   11 00:0695 -  -  -  -  ; ***************************************************************************************
   12 00:0695 -  -  -  -  
   13 00:0695 -  -  -  -  ; ***************************************************************************************
   14 00:0695 -  -  -  -  ;
   15 00:0695 -  -  -  -  ;								Str$() unary function
   16 00:0695 -  -  -  -  ;
   17 00:0695 -  -  -  -  ; ***************************************************************************************
   18 00:0695 -  -  -  -  
   19 00:0695 -  -  -  -  Unary_Str:	;; [str]
   20 00:0695 CD A4 01 00 		call 	CheckDollar
   21 00:0699 CD D9 03 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:069D 01 74 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:06A1 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:06A3 CD 75 0C 00 		call 	Int32ToString 				
   25 00:06A7 21 74 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:06AB 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:06AD C9 -  -  -  		ret
   28 00:06AE -  -  -  -  
   29 00:06AE -  -  -  -  ; ***************************************************************************************
   30 00:06AE -  -  -  -  ;
   31 00:06AE -  -  -  -  ;									Changes and Updates
   32 00:06AE -  -  -  -  ;
   33 00:06AE -  -  -  -  ; ***************************************************************************************
   34 00:06AE -  -  -  -  ;
   35 00:06AE -  -  -  -  ;		Date			Notes
   36 00:06AE -  -  -  -  ;		==== 			=====
   37 00:06AE -  -  -  -  ;
   38 00:06AE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:06AE -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:06AE -  -  -  -  ; ***************************************************************************************
    2 00:06AE -  -  -  -  ; ***************************************************************************************
    3 00:06AE -  -  -  -  ;
    4 00:06AE -  -  -  -  ;		Name : 		time.asm
    5 00:06AE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06AE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06AE -  -  -  -  ;		Reviewed :	No
    8 00:06AE -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:06AE -  -  -  -  ;
   10 00:06AE -  -  -  -  ; ***************************************************************************************
   11 00:06AE -  -  -  -  ; ***************************************************************************************
   12 00:06AE -  -  -  -  
   13 00:06AE -  -  -  -  ; ***************************************************************************************
   14 00:06AE -  -  -  -  ;
   15 00:06AE -  -  -  -  ;							Get system time in ms
   16 00:06AE -  -  -  -  ;
   17 00:06AE -  -  -  -  ; ***************************************************************************************
   18 00:06AE -  -  -  -  
   19 00:06AE -  -  -  -  Unary_Time:	;; [time]
   20 00:06AE CD C6 0C 00 			call 	SYSGetTimer
   21 00:06B2 F5 3E 02 32 
              FF FF FF F1 			debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
   22 00:06BA 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   23 00:06BC C9 -  -  -  			ret
   24 00:06BD -  -  -  -  
   25 00:06BD -  -  -  -  ; ***************************************************************************************
   26 00:06BD -  -  -  -  ;
   27 00:06BD -  -  -  -  ;									Changes and Updates
   28 00:06BD -  -  -  -  ;
   29 00:06BD -  -  -  -  ; ***************************************************************************************
   30 00:06BD -  -  -  -  ;
   31 00:06BD -  -  -  -  ;		Date			Notes
   32 00:06BD -  -  -  -  ;		==== 			=====
   33 00:06BD -  -  -  -  ;
   34 00:06BD -  -  -  -  ; ***************************************************************************************
   35 00:06BD -  -  -  -  			
Listing for file "_build.asm"
   43 00:06BD -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:06BD -  -  -  -  ; ***************************************************************************************
    2 00:06BD -  -  -  -  ; ***************************************************************************************
    3 00:06BD -  -  -  -  ;
    4 00:06BD -  -  -  -  ;		Name : 		top.asm
    5 00:06BD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06BD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06BD -  -  -  -  ;		Reviewed :	No
    8 00:06BD -  -  -  -  ;		Purpose :	Various constants.
    9 00:06BD -  -  -  -  ;
   10 00:06BD -  -  -  -  ; ***************************************************************************************
   11 00:06BD -  -  -  -  ; ***************************************************************************************
   12 00:06BD -  -  -  -  
   13 00:06BD -  -  -  -  ; ***************************************************************************************
   14 00:06BD -  -  -  -  ;
   15 00:06BD -  -  -  -  ;							page unary function (no bracket)
   16 00:06BD -  -  -  -  ;
   17 00:06BD -  -  -  -  ; ***************************************************************************************
   18 00:06BD -  -  -  -  
   19 00:06BD -  -  -  -  Unary_Top:	;; [top]
   20 00:06BD 2A 4C 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:06C1 D9 -  -  -  			exx
   22 00:06C2 2A 4E 00 00 			ld 		hl,(TopMemory+2)
   23 00:06C6 D9 -  -  -  			exx
   24 00:06C7 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:06C9 C9 -  -  -  			ret
   26 00:06CA -  -  -  -  
   27 00:06CA -  -  -  -  ; ***************************************************************************************
   28 00:06CA -  -  -  -  ;
   29 00:06CA -  -  -  -  ;									Changes and Updates
   30 00:06CA -  -  -  -  ;
   31 00:06CA -  -  -  -  ; ***************************************************************************************
   32 00:06CA -  -  -  -  ;
   33 00:06CA -  -  -  -  ;		Date			Notes
   34 00:06CA -  -  -  -  ;		==== 			=====
   35 00:06CA -  -  -  -  ;
   36 00:06CA -  -  -  -  ; ***************************************************************************************
   37 00:06CA -  -  -  -  			
Listing for file "_build.asm"
   44 00:06CA -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:06CA -  -  -  -  ; ***************************************************************************************
    2 00:06CA -  -  -  -  ; ***************************************************************************************
    3 00:06CA -  -  -  -  ;
    4 00:06CA -  -  -  -  ;		Name : 		val.asm
    5 00:06CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06CA -  -  -  -  ;		Reviewed :	No
    8 00:06CA -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:06CA -  -  -  -  ;
   10 00:06CA -  -  -  -  ; ***************************************************************************************
   11 00:06CA -  -  -  -  ; ***************************************************************************************
   12 00:06CA -  -  -  -  
   13 00:06CA -  -  -  -  ; ***************************************************************************************
   14 00:06CA -  -  -  -  ;
   15 00:06CA -  -  -  -  ;								val( unary function
   16 00:06CA -  -  -  -  ;
   17 00:06CA -  -  -  -  ; ***************************************************************************************
   18 00:06CA -  -  -  -  
   19 00:06CA -  -  -  -  Unary_Val:	;; [val]
   20 00:06CA CD E8 03 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:06CE E5 -  -  -  		push 	hl 							; copy to BC
   22 00:06CF C1 -  -  -  		pop 	bc
   23 00:06D0 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:06D2 CD 53 0B 00 		call 	Int32FromString 			; get the integer part.
   25 00:06D6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:06D8 C8 -  -  -  		ret		z 							; okay
   27 00:06D9 3E 03 C3 CC 
              01 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:06DF -  -  -  -  
   29 00:06DF -  -  -  -  ; ***************************************************************************************
   30 00:06DF -  -  -  -  ;
   31 00:06DF -  -  -  -  ;									Changes and Updates
   32 00:06DF -  -  -  -  ;
   33 00:06DF -  -  -  -  ; ***************************************************************************************
   34 00:06DF -  -  -  -  ;
   35 00:06DF -  -  -  -  ;		Date			Notes
   36 00:06DF -  -  -  -  ;		==== 			=====
   37 00:06DF -  -  -  -  ;
   38 00:06DF -  -  -  -  ; ***************************************************************************************
   39 00:06DF -  -  -  -  		
Listing for file "_build.asm"
   45 00:06DF -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:06DF -  -  -  -  ; ***************************************************************************************
    2 00:06DF -  -  -  -  ; ***************************************************************************************
    3 00:06DF -  -  -  -  ;
    4 00:06DF -  -  -  -  ;		Name : 		clear.asm
    5 00:06DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06DF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06DF -  -  -  -  ;		Reviewed :	No
    8 00:06DF -  -  -  -  ;		Purpose :	Clear command.
    9 00:06DF -  -  -  -  ;
   10 00:06DF -  -  -  -  ; ***************************************************************************************
   11 00:06DF -  -  -  -  ; ***************************************************************************************
   12 00:06DF -  -  -  -  
   13 00:06DF -  -  -  -  ; ***************************************************************************************
   14 00:06DF -  -  -  -  ;
   15 00:06DF -  -  -  -  ;										CLEAR command
   16 00:06DF -  -  -  -  ;
   17 00:06DF -  -  -  -  ; ***************************************************************************************
   18 00:06DF -  -  -  -  
   19 00:06DF -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:06DF -  -  -  -  		;
   21 00:06DF -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:06DF -  -  -  -  		;
   23 00:06DF 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:06E3 -  -  -  -  _CCFindLow:
   25 00:06E3 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:06E7 5E -  -  -  		ld 		e,(hl)		
   27 00:06E8 19 -  -  -  		add 	hl,de
   28 00:06E9 7B -  -  -  		ld 		a,e
   29 00:06EA B7 -  -  -  		or 		a
   30 00:06EB 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:06ED 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:06EE 22 4C 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:06F2 23 -  -  -  		inc 	hl 							; one for luck
   34 00:06F3 22 48 00 00 		ld 		(LowAllocMemory),hl
   35 00:06F7 -  -  -  -  		;
   36 00:06F7 -  -  -  -  		; 	 		Reset the language stack
   37 00:06F7 -  -  -  -  		;
   38 00:06F7 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:06FB -  -  -  -  		;
   40 00:06FB 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:06FD 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:0701 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:0705 19 -  -  -  		add 	hl,de
   44 00:0706 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:0708 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:070C -  -  -  -  		;
   47 00:070C 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:0710 19 -  -  -  		add 	hl,de
   49 00:0711 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:0715 -  -  -  -  		;
   51 00:0715 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:0715 -  -  -  -  		;
   53 00:0715 -  -  -  -  
   54 00:0715 -  -  -  -  		;
   55 00:0715 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:0715 -  -  -  -  		;
   57 00:0715 CD 14 06 00 		call 	UnaryRandomInitialise
   58 00:0719 -  -  -  -  		;
   59 00:0719 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:0719 -  -  -  -  		;
   61 00:0719 C9 -  -  -  		ret
   62 00:071A -  -  -  -  
   63 00:071A -  -  -  -  ; ***************************************************************************************
   64 00:071A -  -  -  -  ;
   65 00:071A -  -  -  -  ;									Changes and Updates
   66 00:071A -  -  -  -  ;
   67 00:071A -  -  -  -  ; ***************************************************************************************
   68 00:071A -  -  -  -  ;
   69 00:071A -  -  -  -  ;		Date			Notes
   70 00:071A -  -  -  -  ;		==== 			=====
   71 00:071A -  -  -  -  ;
   72 00:071A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:071A -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:071A -  -  -  -  ; ***************************************************************************************
    2 00:071A -  -  -  -  ; ***************************************************************************************
    3 00:071A -  -  -  -  ;
    4 00:071A -  -  -  -  ;		Name : 		instance.asm
    5 00:071A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:071A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:071A -  -  -  -  ;		Reviewed :	No
    8 00:071A -  -  -  -  ;		Purpose :	Instance handling
    9 00:071A -  -  -  -  ;
   10 00:071A -  -  -  -  ; ***************************************************************************************
   11 00:071A -  -  -  -  ; ***************************************************************************************
   12 00:071A -  -  -  -  
   13 00:071A -  -  -  -  ; ***************************************************************************************
   14 00:071A -  -  -  -  ;
   15 00:071A -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:071A -  -  -  -  ;
   17 00:071A -  -  -  -  ; ***************************************************************************************
   18 00:071A -  -  -  -  
   19 00:071A -  -  -  -  SetCurrentInstance:
   20 00:071A ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:071F 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0723 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0728 -  -  -  -  
   24 00:0728 C9 -  -  -  		ret
   25 00:0729 -  -  -  -  
   26 00:0729 -  -  -  -  
   27 00:0729 -  -  -  -  ; ***************************************************************************************
   28 00:0729 -  -  -  -  ;
   29 00:0729 -  -  -  -  ;									Changes and Updates
   30 00:0729 -  -  -  -  ;
   31 00:0729 -  -  -  -  ; ***************************************************************************************
   32 00:0729 -  -  -  -  ;
   33 00:0729 -  -  -  -  ;		Date			Notes
   34 00:0729 -  -  -  -  ;		==== 			=====
   35 00:0729 -  -  -  -  ;
   36 00:0729 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:0729 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0729 -  -  -  -  ; ***************************************************************************************
    2 00:0729 -  -  -  -  ; ***************************************************************************************
    3 00:0729 -  -  -  -  ;
    4 00:0729 -  -  -  -  ;		Name : 		new.asm
    5 00:0729 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0729 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0729 -  -  -  -  ;		Reviewed :	No
    8 00:0729 -  -  -  -  ;		Purpose :	New command.
    9 00:0729 -  -  -  -  ;
   10 00:0729 -  -  -  -  ; ***************************************************************************************
   11 00:0729 -  -  -  -  ; ***************************************************************************************
   12 00:0729 -  -  -  -  
   13 00:0729 -  -  -  -  ; ***************************************************************************************
   14 00:0729 -  -  -  -  ;
   15 00:0729 -  -  -  -  ;										NEW command
   16 00:0729 -  -  -  -  ;
   17 00:0729 -  -  -  -  ; ***************************************************************************************
   18 00:0729 -  -  -  -  
   19 00:0729 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0729 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:072D 36 00 -  -  		ld 		(hl),0
   22 00:072F CD DF 06 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0733 3E 00 C3 CC 
              01 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0739 -  -  -  -  
   25 00:0739 -  -  -  -  ; ***************************************************************************************
   26 00:0739 -  -  -  -  ;
   27 00:0739 -  -  -  -  ;									Changes and Updates
   28 00:0739 -  -  -  -  ;
   29 00:0739 -  -  -  -  ; ***************************************************************************************
   30 00:0739 -  -  -  -  ;
   31 00:0739 -  -  -  -  ;		Date			Notes
   32 00:0739 -  -  -  -  ;		==== 			=====
   33 00:0739 -  -  -  -  ;
   34 00:0739 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:0739 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0739 -  -  -  -  ; ***************************************************************************************
    2 00:0739 -  -  -  -  ; ***************************************************************************************
    3 00:0739 -  -  -  -  ;
    4 00:0739 -  -  -  -  ;		Name : 		utility.asm
    5 00:0739 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0739 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0739 -  -  -  -  ;		Reviewed :	No
    8 00:0739 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0739 -  -  -  -  ;
   10 00:0739 -  -  -  -  ; ***************************************************************************************
   11 00:0739 -  -  -  -  ; ***************************************************************************************
   12 00:0739 -  -  -  -  
   13 00:0739 -  -  -  -  ; ***************************************************************************************
   14 00:0739 -  -  -  -  ;
   15 00:0739 -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:0739 -  -  -  -  ;
   17 00:0739 -  -  -  -  ; ***************************************************************************************
   18 00:0739 -  -  -  -  
   19 00:0739 -  -  -  -  PrintStringAtHL:
   20 00:0739 7E -  -  -  		ld 		a,(hl)
   21 00:073A B7 -  -  -  		or 		a
   22 00:073B C8 -  -  -  		ret 	z
   23 00:073C CD C4 0C 00 		call 	SYSPrintChar
   24 00:0740 23 -  -  -  		inc 	hl
   25 00:0741 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:0743 -  -  -  -  
   27 00:0743 -  -  -  -  ; ***************************************************************************************
   28 00:0743 -  -  -  -  ;
   29 00:0743 -  -  -  -  ;									Changes and Updates
   30 00:0743 -  -  -  -  ;
   31 00:0743 -  -  -  -  ; ***************************************************************************************
   32 00:0743 -  -  -  -  ;
   33 00:0743 -  -  -  -  ;		Date			Notes
   34 00:0743 -  -  -  -  ;		==== 			=====
   35 00:0743 -  -  -  -  ;
   36 00:0743 -  -  -  -  ; ***************************************************************************************
   37 00:0743 -  -  -  -  		
Listing for file "_build.asm"
   49 00:0743 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:0743 -  -  -  -  ;
    2 00:0743 -  -  -  -  ;	This file is automatically generated.
    3 00:0743 -  -  -  -  ;
    4 00:0743 -  -  -  -  ;
    5 00:0743 -  -  -  -  ;	Keywords for set 0
    6 00:0743 -  -  -  -  ;
    7 00:0743 -  -  -  -  KeywordsSet0:
    8 00:0743 01 20 -  -  	.db	1," "              ; $0080
    9 00:0745 01 20 -  -  	.db	1," "              ; $0081
   10 00:0747 01 20 -  -  	.db	1," "              ; $0082
   11 00:0749 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:074B 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:074D 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:074F 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:0751 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:0755 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:0759 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:075B 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:075D 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:0760 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:0763 01 3E -  -  	.db	1,">"              ; $008d
   22 00:0765 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:0767 01 3D -  -  	.db	1,"="              ; $008f
   24 00:0769 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:076C 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:0770 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:0773 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:0777 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:0779 01 28 -  -  	.db	1,"("              ; $0095
   30 00:077B 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:077D 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:0781 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:0785 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:0789 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:078D 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:0791 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:0795 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:0799 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:079D 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:07A2 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:07A7 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:07AB 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:07AF 01 29 -  -  	.db	1,")"              ; $00a3
   44 00:07B1 01 2C -  -  	.db	1,","              ; $00a4
   45 00:07B3 01 3A -  -  	.db	1,":"              ; $00a5
   46 00:07B5 01 3B -  -  	.db	1,";"              ; $00a6
   47 00:07B7 01 27 -  -  	.db	1,"'"              ; $00a7
   48 00:07B9 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 00:07C0 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 00:07C6 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 00:07C9 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 00:07CE 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 00:07D3 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 00:07D7 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 00:07DA 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 00:07DF 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 00:07E4 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 00:07E8 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 00:07ED 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 00:07F5 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 00:07FB 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 00:07FF 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 00:0803 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 00:0807 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 00:080B 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 00:0811 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 00:0816 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 00:081B 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 00:0820 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 00:0824 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 00:0828 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 00:082D 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 00:0832 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 00:083A 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 00:0841 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 00:0847 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 00:084B 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 00:0850 00 -  -  -  	.db	0
   79 00:0851 -  -  -  -  ;
   80 00:0851 -  -  -  -  ;	Keywords for set 1
   81 00:0851 -  -  -  -  ;
   82 00:0851 -  -  -  -  KeywordsSet1:
   83 00:0851 00 -  -  -  	.db	0
   84 00:0852 -  -  -  -  ;
   85 00:0852 -  -  -  -  ;	Keywords for set 2
   86 00:0852 -  -  -  -  ;
   87 00:0852 -  -  -  -  KeywordsSet2:
   88 00:0852 00 -  -  -  	.db	0
Listing for file "_build.asm"
   50 00:0853 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0853 -  -  -  -  ;
    2 00:0853 -  -  -  -  ;	This file is automatically generated.
    3 00:0853 -  -  -  -  ;
    4 00:0853 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:0860 -  -  -  -  PrecedenceTable:
    6 00:0860 06 -  -  -  	.db	6	; $0083 !
    7 00:0861 06 -  -  -  	.db	6	; $0084 ?
    8 00:0862 05 -  -  -  	.db	5	; $0085 *
    9 00:0863 05 -  -  -  	.db	5	; $0086 /
   10 00:0864 05 -  -  -  	.db	5	; $0087 mod
   11 00:0865 05 -  -  -  	.db	5	; $0088 div
   12 00:0866 04 -  -  -  	.db	4	; $0089 +
   13 00:0867 04 -  -  -  	.db	4	; $008a -
   14 00:0868 03 -  -  -  	.db	3	; $008b >=
   15 00:0869 03 -  -  -  	.db	3	; $008c <=
   16 00:086A 03 -  -  -  	.db	3	; $008d >
   17 00:086B 03 -  -  -  	.db	3	; $008e <
   18 00:086C 03 -  -  -  	.db	3	; $008f =
   19 00:086D 03 -  -  -  	.db	3	; $0090 <>
   20 00:086E 02 -  -  -  	.db	2	; $0091 and
   21 00:086F 01 -  -  -  	.db	1	; $0092 or
   22 00:0870 01 -  -  -  	.db	1	; $0093 eor
   23 00:0871 -  -  -  -  
Listing for file "_build.asm"
   51 00:0871 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0871 -  -  -  -  ;
    2 00:0871 -  -  -  -  ;	This is automatically generated.
    3 00:0871 -  -  -  -  ;
    4 00:0871 -  -  -  -  ErrorIDTable:
    5 00:0871 B1 08 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0875 B7 08 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0879 C8 08 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:087D D6 08 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0881 E0 08 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0885 FA 08 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0889 0B 09 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:088D 19 09 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0891 27 09 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:0895 31 09 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:0899 46 09 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:089D 5C 09 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:08A1 6A 09 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:08A5 6F 09 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:08A9 7C 09 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:08AD 8D 09 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:08B1 -  -  -  -  
   22 00:08B1 -  -  -  -  ErrText_warmstart:
   23 00:08B1 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:08B7 -  -  -  -  ErrText_assert:
   25 00:08B7 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:08C8 -  -  -  -  ErrText_badtype:
   27 00:08C8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:08D6 -  -  -  -  ErrText_badvalue:
   29 00:08D6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:08E0 -  -  -  -  ErrText_disabled:
   31 00:08E0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:08FA -  -  -  -  ErrText_divzero:
   33 00:08FA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:090B -  -  -  -  ErrText_memory:
   35 00:090B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:0919 -  -  -  -  ErrText_nocomma:
   37 00:0919 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:0927 -  -  -  -  ErrText_nodollar:
   39 00:0927 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:0931 -  -  -  -  ErrText_nolbracket:
   41 00:0931 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:0946 -  -  -  -  ErrText_norbracket:
   43 00:0946 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:095C -  -  -  -  ErrText_notref:
   45 00:095C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:096A -  -  -  -  ErrText_stop:
   47 00:096A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:096F -  -  -  -  ErrText_syntax:
   49 00:096F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:097C -  -  -  -  ErrText_todo:
   51 00:097C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:098D -  -  -  -  ErrText_unknownvar:
   53 00:098D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   52 00:099E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:099E -  -  -  -  ;
    2 00:099E -  -  -  -  ;	Vectors for set 0
    3 00:099E -  -  -  -  ;
    4 00:099E -  -  -  -  VectorsSet0:
    5 00:099E E2 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:09A2 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:09A6 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:09AA AC 02 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:09AE B5 02 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:09B2 58 02 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:09B6 66 02 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:09BA 74 02 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:09BE 66 02 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:09C2 3C 02 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:09C6 4A 02 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:09CA 13 03 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:09CE 09 03 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:09D2 F5 02 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:09D6 EB 02 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:09DA E1 02 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:09DE FF 02 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:09E2 82 02 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:09E6 90 02 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:09EA 9E 02 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:09EE 86 06 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:09F2 7E 06 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:09F6 A0 05 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:09FA CD 05 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:09FE 8F 05 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0A02 65 05 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0A06 64 06 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0A0A 95 06 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0A0E 7B 05 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0A12 72 05 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0A16 AB 05 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0A1A C0 05 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0A1E AE 06 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0A22 BD 06 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0A26 CA 06 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0A2A D7 00 00 00 	addr(BadCmd_RBracket)            ; $00a3 )
   41 00:0A2E D7 00 00 00 	addr(BadCmd_Comma)               ; $00a4 ,
   42 00:0A32 DB 00 00 00 	addr(Command_Colon)              ; $00a5 :
   43 00:0A36 D7 00 00 00 	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 00:0A3A F9 00 00 00 	addr(Command_REM2)               ; $00a7 '
   45 00:0A3E 24 00 00 00 	addr(Unimplemented)              ; $00a8 repeat
   46 00:0A42 24 00 00 00 	addr(Unimplemented)              ; $00a9 until
   47 00:0A46 24 00 00 00 	addr(Unimplemented)              ; $00aa if
   48 00:0A4A D7 00 00 00 	addr(BadCmd_Then)                ; $00ab then
   49 00:0A4E 24 00 00 00 	addr(Unimplemented)              ; $00ac else
   50 00:0A52 24 00 00 00 	addr(Unimplemented)              ; $00ad for
   51 00:0A56 D7 00 00 00 	addr(BadCmd_To)                  ; $00ae to
   52 00:0A5A 24 00 00 00 	addr(Unimplemented)              ; $00af step
   53 00:0A5E 24 00 00 00 	addr(Unimplemented)              ; $00b0 next
   54 00:0A62 D7 00 00 00 	addr(BadCmd_Defproc)             ; $00b1 def
   55 00:0A66 24 00 00 00 	addr(Unimplemented)              ; $00b2 proc
   56 00:0A6A 24 00 00 00 	addr(Unimplemented)              ; $00b3 endproc
   57 00:0A6E 24 00 00 00 	addr(Unimplemented)              ; $00b4 local
   58 00:0A72 24 00 00 00 	addr(Unimplemented)              ; $00b5 dim
   59 00:0A76 F9 00 00 00 	addr(Command_REM)                ; $00b6 rem
   60 00:0A7A 24 00 00 00 	addr(Unimplemented)              ; $00b7 let
   61 00:0A7E 24 00 00 00 	addr(Unimplemented)              ; $00b8 vdu
   62 00:0A82 24 00 00 00 	addr(Unimplemented)              ; $00b9 print
   63 00:0A86 24 00 00 00 	addr(Unimplemented)              ; $00ba load
   64 00:0A8A 24 00 00 00 	addr(Unimplemented)              ; $00bb save
   65 00:0A8E 24 00 00 00 	addr(Unimplemented)              ; $00bc list
   66 00:0A92 29 07 00 00 	addr(Command_NEW)                ; $00bd new
   67 00:0A96 16 01 00 00 	addr(Command_RUN)                ; $00be run
   68 00:0A9A 24 00 00 00 	addr(Unimplemented)              ; $00bf read
   69 00:0A9E 24 00 00 00 	addr(Unimplemented)              ; $00c0 data
   70 00:0AA2 24 00 00 00 	addr(Unimplemented)              ; $00c1 restore
   71 00:0AA6 C6 00 00 00 	addr(Command_ASSERT)             ; $00c2 assert
   72 00:0AAA DF 06 00 00 	addr(Command_CLEAR)              ; $00c3 clear
   73 00:0AAE DC 00 00 00 	addr(Command_END)                ; $00c4 end
   74 00:0AB2 82 01 00 00 	addr(Command_STOP)               ; $00c5 stop
   75 00:0AB6 -  -  -  -  ;
   76 00:0AB6 -  -  -  -  ;	Vectors for set 1
   77 00:0AB6 -  -  -  -  ;
   78 00:0AB6 -  -  -  -  VectorsSet1:
   79 00:0AB6 -  -  -  -  ;
   80 00:0AB6 -  -  -  -  ;	Vectors for set 2
   81 00:0AB6 -  -  -  -  ;
   82 00:0AB6 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   53 00:0AB6 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0AB6 -  -  -  -  ; ***************************************************************************************
    2 00:0AB6 -  -  -  -  ; ***************************************************************************************
    3 00:0AB6 -  -  -  -  ;
    4 00:0AB6 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0AB6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AB6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0AB6 -  -  -  -  ;		Reviewed :	No
    8 00:0AB6 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0AB6 -  -  -  -  ;
   10 00:0AB6 -  -  -  -  ; ***************************************************************************************
   11 00:0AB6 -  -  -  -  ; ***************************************************************************************
   12 00:0AB6 -  -  -  -  
   13 00:0AB6 -  -  -  -  ; ***************************************************************************************
   14 00:0AB6 -  -  -  -  ;
   15 00:0AB6 -  -  -  -  ;								Unsigned integer divide
   16 00:0AB6 -  -  -  -  ;
   17 00:0AB6 -  -  -  -  ; ***************************************************************************************
   18 00:0AB6 -  -  -  -  
   19 00:0AB6 -  -  -  -  Int32UDivide:
   20 00:0AB6 37 -  -  -  		scf
   21 00:0AB7 C3 FB 0A 00 		jp 		_I32UnsignedDivide		
   22 00:0ABB -  -  -  -  
   23 00:0ABB -  -  -  -  ; ***************************************************************************************
   24 00:0ABB -  -  -  -  ;
   25 00:0ABB -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0ABB -  -  -  -  ;
   27 00:0ABB -  -  -  -  ; ***************************************************************************************
   28 00:0ABB -  -  -  -  
   29 00:0ABB -  -  -  -  Int32SDivide:
   30 00:0ABB 37 -  -  -  		scf
   31 00:0ABC 18 01 -  -  		jr 		_I32SDivide
   32 00:0ABE -  -  -  -  Int32Modulus:
   33 00:0ABE AF -  -  -  		xor 	a
   34 00:0ABF -  -  -  -  _I32SDivide:
   35 00:0ABF 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0AC0 F5 -  -  -  		push 	af
   37 00:0AC1 08 -  -  -  		ex 		af,af'
   38 00:0AC2 -  -  -  -  
   39 00:0AC2 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0AC3 D9 -  -  -  		exx
   41 00:0AC4 D5 -  -  -  		push 	de
   42 00:0AC5 D9 -  -  -  		exx
   43 00:0AC6 -  -  -  -  
   44 00:0AC6 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0AC7 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0AC8 CD E8 0A 00 		call 	_I32CheckHLSignSwap
   47 00:0ACC CD E8 0A 00 		call 	_I32CheckHLSignSwap
   48 00:0AD0 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0AD1 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0AD2 F5 -  -  -  		push 	af
   51 00:0AD3 CD FB 0A 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0AD7 F1 -  -  -  		pop 	af 							; get function back
   53 00:0AD8 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0ADA 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0ADB CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0ADD C4 5E 0C 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0AE1 -  -  -  -  _I32SDExit:
   58 00:0AE1 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0AE2 D1 -  -  -  		pop 	de
   60 00:0AE3 D9 -  -  -  		exx
   61 00:0AE4 D1 -  -  -  		pop 	de
   62 00:0AE5 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0AE6 08 -  -  -  		ex 		af,af'
   64 00:0AE7 C9 -  -  -  		ret
   65 00:0AE8 -  -  -  -  
   66 00:0AE8 -  -  -  -  
   67 00:0AE8 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0AE8 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0AE9 CB 7C -  -  		bit 	7,h
   70 00:0AEB D9 -  -  -  		exx
   71 00:0AEC 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0AEE -  -  -  -  		;
   73 00:0AEE C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0AF0 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0AF1 CD 5E 0C 00 		call 	Int32Negate 				
   76 00:0AF5 F1 -  -  -  		pop 	af
   77 00:0AF6 -  -  -  -  _I32CHSPositive:
   78 00:0AF6 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0AF7 EB -  -  -  		ex 		de,hl
   80 00:0AF8 D9 -  -  -  		exx		
   81 00:0AF9 EB -  -  -  		ex 		de,hl
   82 00:0AFA C9 -  -  -  		ret
   83 00:0AFB -  -  -  -  
   84 00:0AFB -  -  -  -  ; ***************************************************************************************
   85 00:0AFB -  -  -  -  ;
   86 00:0AFB -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0AFB -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0AFB -  -  -  -  ;
   89 00:0AFB -  -  -  -  ; ***************************************************************************************
   90 00:0AFB -  -  -  -  
   91 00:0AFB -  -  -  -  _I32UnsignedDivide:
   92 00:0AFB C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0AFC D5 -  -  -  		push 	de
   94 00:0AFD D9 -  -  -  		exx
   95 00:0AFE C5 -  -  -  		push 	bc
   96 00:0AFF D5 -  -  -  		push 	de 							
   97 00:0B00 D9 -  -  -  		exx
   98 00:0B01 -  -  -  -  
   99 00:0B01 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0B02 -  -  -  -  
  101 00:0B02 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0B03 B3 -  -  -  		or 		e
  103 00:0B04 D9 -  -  -  		exx
  104 00:0B05 B2 -  -  -  		or 		d
  105 00:0B06 B3 -  -  -  		or 		e
  106 00:0B07 D9 -  -  -  		exx
  107 00:0B08 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0B0C -  -  -  -  
  109 00:0B0C -  -  -  -  
  110 00:0B0C 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0B0D 4D -  -  -  		ld		c,l
  112 00:0B0E 21 00 00 00 		ld 		hl,$0000
  113 00:0B12 D9 -  -  -  		exx
  114 00:0B13 44 -  -  -  		ld 		b,h
  115 00:0B14 4D -  -  -  		ld		c,l
  116 00:0B15 21 00 00 00 		ld 		hl,$0000
  117 00:0B19 D9 -  -  -  		exx
  118 00:0B1A -  -  -  -  
  119 00:0B1A 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0B1C -  -  -  -  _I32DivideLoop:
  121 00:0B1C F5 -  -  -  		push 	af
  122 00:0B1D -  -  -  -  
  123 00:0B1D CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0B1F CB 10 -  -  		rl 		b
  125 00:0B21 D9 -  -  -  		exx
  126 00:0B22 CB 11 -  -  		rl 		c
  127 00:0B24 CB 10 -  -  		rl 		b
  128 00:0B26 D9 -  -  -  		exx
  129 00:0B27 CB 15 -  -  		rl 		l
  130 00:0B29 CB 14 -  -  		rl 		h
  131 00:0B2B D9 -  -  -  		exx
  132 00:0B2C CB 15 -  -  		rl 		l
  133 00:0B2E CB 14 -  -  		rl 		h
  134 00:0B30 D9 -  -  -  		exx
  135 00:0B31 -  -  -  -  
  136 00:0B31 CD FC 0B 00 		call 	Int32Subtract 				; A = A - M
  137 00:0B35 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0B37 -  -  -  -  
  139 00:0B37 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0B38 18 04 -  -  		jr 		_I32Next
  141 00:0B3A -  -  -  -  
  142 00:0B3A -  -  -  -  _I32Borrow:
  143 00:0B3A CD F4 0B 00 		call 	Int32Add 					; A = A + M
  144 00:0B3E -  -  -  -  _I32Next:
  145 00:0B3E F1 -  -  -  		pop 	af
  146 00:0B3F 3D -  -  -  		dec 	a
  147 00:0B40 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0B42 -  -  -  -  
  149 00:0B42 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0B43 -  -  -  -  
  151 00:0B43 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0B44 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0B46 -  -  -  -  
  154 00:0B46 60 -  -  -  		ld  	h,b
  155 00:0B47 69 -  -  -  		ld 		l,c
  156 00:0B48 D9 -  -  -  		exx
  157 00:0B49 60 -  -  -  		ld  	h,b
  158 00:0B4A 69 -  -  -  		ld 		l,c
  159 00:0B4B D9 -  -  -  		exx
  160 00:0B4C -  -  -  -  _I32Modulus1:		
  161 00:0B4C D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0B4D D1 -  -  -  		pop 	de
  163 00:0B4E C1 -  -  -  		pop 	bc
  164 00:0B4F D9 -  -  -  		exx
  165 00:0B50 D1 -  -  -  		pop 	de
  166 00:0B51 C1 -  -  -  		pop 	bc
  167 00:0B52 C9 -  -  -  		ret
  168 00:0B53 -  -  -  -  
  169 00:0B53 -  -  -  -  ; ***************************************************************************************
  170 00:0B53 -  -  -  -  ;
  171 00:0B53 -  -  -  -  ;									Changes and Updates
  172 00:0B53 -  -  -  -  ;
  173 00:0B53 -  -  -  -  ; ***************************************************************************************
  174 00:0B53 -  -  -  -  ;
  175 00:0B53 -  -  -  -  ;		Date			Notes
  176 00:0B53 -  -  -  -  ;		==== 			=====
  177 00:0B53 -  -  -  -  ;
  178 00:0B53 -  -  -  -  ; ***************************************************************************************
  179 00:0B53 -  -  -  -  		
Listing for file "_build.asm"
   54 00:0B53 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0B53 -  -  -  -  ; ***************************************************************************************
    2 00:0B53 -  -  -  -  ; ***************************************************************************************
    3 00:0B53 -  -  -  -  ;
    4 00:0B53 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0B53 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B53 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B53 -  -  -  -  ;		Reviewed :	No
    8 00:0B53 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0B53 -  -  -  -  ;
   10 00:0B53 -  -  -  -  ; ***************************************************************************************
   11 00:0B53 -  -  -  -  ; ***************************************************************************************
   12 00:0B53 -  -  -  -  
   13 00:0B53 -  -  -  -  ; ***************************************************************************************
   14 00:0B53 -  -  -  -  ;
   15 00:0B53 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0B53 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0B53 -  -  -  -  ;
   18 00:0B53 -  -  -  -  ; ***************************************************************************************
   19 00:0B53 -  -  -  -  
   20 00:0B53 -  -  -  -  Int32FromString:
   21 00:0B53 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0B54 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0B55 D5 -  -  -  		push 	de
   24 00:0B56 D9 -  -  -  		exx
   25 00:0B57 D5 -  -  -  		push 	de
   26 00:0B58 -  -  -  -  
   27 00:0B58 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0B5C 11 00 00 00 		ld 		de,$0000
   29 00:0B60 D9 -  -  -  		exx
   30 00:0B61 21 00 00 00 		ld 		hl,$0000
   31 00:0B65 11 00 00 00 		ld 		de,$0000
   32 00:0B69 D9 -  -  -  		exx
   33 00:0B6A -  -  -  -  
   34 00:0B6A 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0B6B CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0B6D 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0B6F ED 44 -  -  		neg 		 						; fix up the base
   38 00:0B71 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0B72 -  -  -  -  		;
   40 00:0B72 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0B73 F5 -  -  -  		push 	af
   42 00:0B74 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0B76 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0B77 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0B79 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0B7A 18 01 -  -  		jr 		_I32FSMain
   47 00:0B7C -  -  -  -  _I32FSNotSigned:		
   48 00:0B7C E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0B7D -  -  -  -  		;
   50 00:0B7D -  -  -  -  		; 		Main conversion loop.
   51 00:0B7D -  -  -  -  		; 		
   52 00:0B7D -  -  -  -  _I32FSMain:		
   53 00:0B7D 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0B7E FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0B80 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0B82 D6 20 -  -  		sub 	32
   57 00:0B84 -  -  -  -  _I32FSNotLower:
   58 00:0B84 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0B86 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0B88 FE 3A -  -  		cp 		'9'+1
   61 00:0B8A 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0B8C FE 41 -  -  		cp 		'A'
   63 00:0B8E 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0B90 FE 47 -  -  		cp 		'F'+1
   65 00:0B92 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0B94 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0B96 -  -  -  -  _I32FSOkay:
   68 00:0B96 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0B98 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0B99 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0B9B 03 -  -  -  		inc 	bc 							; consume character
   72 00:0B9C D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0B9D F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0B9E CD BB 0B 00 		call 	Int32Multiply 				; result *= base
   75 00:0BA2 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0BA3 5F -  -  -  		ld 		e,a
   77 00:0BA4 CD F4 0B 00 		call 	Int32Add 					; and add it.
   78 00:0BA8 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0BA9 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0BAB -  -  -  -  
   81 00:0BAB -  -  -  -  _I32FSExit:
   82 00:0BAB F1 -  -  -  		pop 	af 							; get sign back
   83 00:0BAC FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0BAE CC 5E 0C 00 		call 	z,Int32Negate
   85 00:0BB2 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0BB3 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0BB4 D9 -  -  -  		exx
   88 00:0BB5 D1 -  -  -  		pop 	de
   89 00:0BB6 D9 -  -  -  		exx
   90 00:0BB7 C1 -  -  -  		pop 	bc
   91 00:0BB8 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0BBA C9 -  -  -  		ret				
   93 00:0BBB -  -  -  -  
   94 00:0BBB -  -  -  -  ; ***************************************************************************************
   95 00:0BBB -  -  -  -  ;
   96 00:0BBB -  -  -  -  ;									Changes and Updates
   97 00:0BBB -  -  -  -  ;
   98 00:0BBB -  -  -  -  ; ***************************************************************************************
   99 00:0BBB -  -  -  -  ;
  100 00:0BBB -  -  -  -  ;		Date			Notes
  101 00:0BBB -  -  -  -  ;		==== 			=====
  102 00:0BBB -  -  -  -  ;
  103 00:0BBB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0BBB -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0BBB -  -  -  -  ; ***************************************************************************************
    2 00:0BBB -  -  -  -  ; ***************************************************************************************
    3 00:0BBB -  -  -  -  ;
    4 00:0BBB -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0BBB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BBB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BBB -  -  -  -  ;		Reviewed :	No
    8 00:0BBB -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0BBB -  -  -  -  ;
   10 00:0BBB -  -  -  -  ; ***************************************************************************************
   11 00:0BBB -  -  -  -  ; ***************************************************************************************
   12 00:0BBB -  -  -  -  
   13 00:0BBB -  -  -  -  Int32Multiply:
   14 00:0BBB C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0BBC D5 -  -  -  		push 	de
   16 00:0BBD 44 -  -  -  		ld 		b,h
   17 00:0BBE 4D -  -  -  		ld 		c,l
   18 00:0BBF 21 00 00 00 		ld 		hl,$0000
   19 00:0BC3 -  -  -  -  
   20 00:0BC3 D9 -  -  -  		exx
   21 00:0BC4 C5 -  -  -  		push 	bc
   22 00:0BC5 D5 -  -  -  		push 	de
   23 00:0BC6 44 -  -  -  		ld 		b,h
   24 00:0BC7 4D -  -  -  		ld 		c,l
   25 00:0BC8 21 00 00 00 		ld 		hl,$0000		
   26 00:0BCC D9 -  -  -  		exx
   27 00:0BCD -  -  -  -  
   28 00:0BCD -  -  -  -  _I32MultiplyLoop:
   29 00:0BCD CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0BCF C4 F4 0B 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0BD3 -  -  -  -  		;
   32 00:0BD3 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0BD4 CB 38 -  -  		srl 	b
   34 00:0BD6 CB 19 -  -  		rr 		c
   35 00:0BD8 D9 -  -  -  		exx
   36 00:0BD9 CB 18 -  -  		rr 		b
   37 00:0BDB CB 19 -  -  		rr 		c
   38 00:0BDD -  -  -  -  		;
   39 00:0BDD CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0BDF CB 12 -  -  		rl 		d
   41 00:0BE1 D9 -  -  -  		exx
   42 00:0BE2 CB 13 -  -  		rl 		e
   43 00:0BE4 CB 12 -  -  		rl 		d
   44 00:0BE6 -  -  -  -  
   45 00:0BE6 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0BE7 B1 -  -  -  		or 		c
   47 00:0BE8 D9 -  -  -  		exx
   48 00:0BE9 B0 -  -  -  		or 		b
   49 00:0BEA B1 -  -  -  		or 		c
   50 00:0BEB 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0BED -  -  -  -  
   52 00:0BED D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0BEE D1 -  -  -  		pop 	de
   54 00:0BEF C1 -  -  -  		pop 	bc
   55 00:0BF0 D9 -  -  -  		exx
   56 00:0BF1 D1 -  -  -  		pop 	de
   57 00:0BF2 C1 -  -  -  		pop 	bc
   58 00:0BF3 C9 -  -  -  		ret
   59 00:0BF4 -  -  -  -  
   60 00:0BF4 -  -  -  -  ; ***************************************************************************************
   61 00:0BF4 -  -  -  -  ;
   62 00:0BF4 -  -  -  -  ;									Changes and Updates
   63 00:0BF4 -  -  -  -  ;
   64 00:0BF4 -  -  -  -  ; ***************************************************************************************
   65 00:0BF4 -  -  -  -  ;
   66 00:0BF4 -  -  -  -  ;		Date			Notes
   67 00:0BF4 -  -  -  -  ;		==== 			=====
   68 00:0BF4 -  -  -  -  ;
   69 00:0BF4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:0BF4 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0BF4 -  -  -  -  ; ***************************************************************************************
    2 00:0BF4 -  -  -  -  ; ***************************************************************************************
    3 00:0BF4 -  -  -  -  ;
    4 00:0BF4 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0BF4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BF4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BF4 -  -  -  -  ;		Reviewed :	No
    8 00:0BF4 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0BF4 -  -  -  -  ;
   10 00:0BF4 -  -  -  -  ; ***************************************************************************************
   11 00:0BF4 -  -  -  -  ; ***************************************************************************************
   12 00:0BF4 -  -  -  -  
   13 00:0BF4 -  -  -  -  ; ***************************************************************************************
   14 00:0BF4 -  -  -  -  ;
   15 00:0BF4 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0BF4 -  -  -  -  ;
   17 00:0BF4 -  -  -  -  ; ***************************************************************************************
   18 00:0BF4 -  -  -  -  
   19 00:0BF4 -  -  -  -  Int32Add:
   20 00:0BF4 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0BF6 D9 -  -  -  		exx
   22 00:0BF7 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0BFA D9 -  -  -  		exx
   24 00:0BFB C9 -  -  -  		ret
   25 00:0BFC -  -  -  -  
   26 00:0BFC -  -  -  -  ; ***************************************************************************************
   27 00:0BFC -  -  -  -  ;
   28 00:0BFC -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0BFC -  -  -  -  ;
   30 00:0BFC -  -  -  -  ; ***************************************************************************************
   31 00:0BFC -  -  -  -  
   32 00:0BFC -  -  -  -  Int32Subtract:
   33 00:0BFC AF -  -  -  		xor 	a 							; clear carry
   34 00:0BFD 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0C00 D9 -  -  -  		exx
   36 00:0C01 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0C04 D9 -  -  -  		exx
   38 00:0C05 C9 -  -  -  		ret
   39 00:0C06 -  -  -  -  
   40 00:0C06 -  -  -  -  ; ***************************************************************************************
   41 00:0C06 -  -  -  -  ;
   42 00:0C06 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0C06 -  -  -  -  ;
   44 00:0C06 -  -  -  -  ; ***************************************************************************************
   45 00:0C06 -  -  -  -  
   46 00:0C06 -  -  -  -  Int32And:
   47 00:0C06 D9 -  -  -  		exx
   48 00:0C07 CD 0C 0C 00 		call 	_I32AndHLDE
   49 00:0C0B D9 -  -  -  		exx
   50 00:0C0C -  -  -  -  _I32AndHLDE:		
   51 00:0C0C 7C -  -  -  		ld 		a,h
   52 00:0C0D A2 -  -  -  		and 	d
   53 00:0C0E 67 -  -  -  		ld 		h,a
   54 00:0C0F 7D -  -  -  		ld 		a,l
   55 00:0C10 A3 -  -  -  		and 	e
   56 00:0C11 6F -  -  -  		ld 		l,a
   57 00:0C12 C9 -  -  -  		ret
   58 00:0C13 -  -  -  -  
   59 00:0C13 -  -  -  -  ; ***************************************************************************************
   60 00:0C13 -  -  -  -  ;
   61 00:0C13 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0C13 -  -  -  -  ;
   63 00:0C13 -  -  -  -  ; ***************************************************************************************
   64 00:0C13 -  -  -  -  
   65 00:0C13 -  -  -  -  Int32Or:
   66 00:0C13 D9 -  -  -  		exx
   67 00:0C14 CD 19 0C 00 		call 	_I32OrHLDE
   68 00:0C18 D9 -  -  -  		exx
   69 00:0C19 -  -  -  -  _I32OrHLDE:		
   70 00:0C19 7C -  -  -  		ld 		a,h
   71 00:0C1A B2 -  -  -  		or 		d
   72 00:0C1B 67 -  -  -  		ld 		h,a
   73 00:0C1C 7D -  -  -  		ld 		a,l
   74 00:0C1D B3 -  -  -  		or 		e
   75 00:0C1E 6F -  -  -  		ld 		l,a
   76 00:0C1F C9 -  -  -  		ret
   77 00:0C20 -  -  -  -  
   78 00:0C20 -  -  -  -  ; ***************************************************************************************
   79 00:0C20 -  -  -  -  ;
   80 00:0C20 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0C20 -  -  -  -  ;
   82 00:0C20 -  -  -  -  ; ***************************************************************************************
   83 00:0C20 -  -  -  -  
   84 00:0C20 -  -  -  -  Int32Xor:
   85 00:0C20 D9 -  -  -  		exx
   86 00:0C21 CD 26 0C 00 		call 	_I32XorHLDE
   87 00:0C25 D9 -  -  -  		exx
   88 00:0C26 -  -  -  -  _I32XorHLDE:		
   89 00:0C26 7C -  -  -  		ld 		a,h
   90 00:0C27 AA -  -  -  		xor 	d
   91 00:0C28 67 -  -  -  		ld 		h,a
   92 00:0C29 7D -  -  -  		ld 		a,l
   93 00:0C2A AB -  -  -  		xor 	e
   94 00:0C2B 6F -  -  -  		ld 		l,a
   95 00:0C2C C9 -  -  -  		ret
   96 00:0C2D -  -  -  -  
   97 00:0C2D -  -  -  -  ; ***************************************************************************************
   98 00:0C2D -  -  -  -  ;
   99 00:0C2D -  -  -  -  ;								 Check if HL'HL zero
  100 00:0C2D -  -  -  -  ;
  101 00:0C2D -  -  -  -  ; ***************************************************************************************
  102 00:0C2D -  -  -  -  
  103 00:0C2D -  -  -  -  Int32Zero:
  104 00:0C2D D9 -  -  -  		exx
  105 00:0C2E 7D -  -  -  		ld 		a,l
  106 00:0C2F B4 -  -  -  		or 		h
  107 00:0C30 D9 -  -  -  		exx
  108 00:0C31 B5 -  -  -  		or 		l
  109 00:0C32 B4 -  -  -  		or 		h
  110 00:0C33 C9 -  -  -  		ret
  111 00:0C34 -  -  -  -  
  112 00:0C34 -  -  -  -  ; ***************************************************************************************
  113 00:0C34 -  -  -  -  ;
  114 00:0C34 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0C34 -  -  -  -  ;
  116 00:0C34 -  -  -  -  ; ***************************************************************************************
  117 00:0C34 -  -  -  -  
  118 00:0C34 -  -  -  -  Int32Compare:
  119 00:0C34 E5 -  -  -  		push 	hl 							; save HL
  120 00:0C35 AF -  -  -  		xor 	a 							; clear carry
  121 00:0C36 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0C39 D9 -  -  -  		exx
  123 00:0C3A E5 -  -  -  		push 	hl 							; save HL'
  124 00:0C3B 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0C3E -  -  -  -  		;
  126 00:0C3E 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0C3F E2 47 0C 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0C43 78 -  -  -  		ld 		a,b
  129 00:0C44 EE 80 -  -  		xor 	$80
  130 00:0C46 47 -  -  -  		ld 		b,a
  131 00:0C47 -  -  -  -  _I32CNoOverflow:
  132 00:0C47 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0C48 B5 -  -  -  		or 		l
  134 00:0C49 D9 -  -  -  		exx 
  135 00:0C4A B4 -  -  -  		or 		h
  136 00:0C4B B5 -  -  -  		or 		l
  137 00:0C4C 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0C4E -  -  -  -  		;
  139 00:0C4E D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0C4F CB 78 -  -  		bit 	7,b
  141 00:0C51 D9 -  -  -  		exx
  142 00:0C52 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0C54 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0C56 3E FF -  -  		ld 		a,$FF
  145 00:0C58 -  -  -  -  _I32NotPos:
  146 00:0C58 D9 -  -  -  		exx
  147 00:0C59 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0C5A D9 -  -  -  		exx
  149 00:0C5B E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0C5C B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0C5D C9 -  -  -  		ret
  152 00:0C5E -  -  -  -  
  153 00:0C5E -  -  -  -  ; ***************************************************************************************
  154 00:0C5E -  -  -  -  ;
  155 00:0C5E -  -  -  -  ;										Negate HL'HL
  156 00:0C5E -  -  -  -  ;
  157 00:0C5E -  -  -  -  ; ***************************************************************************************
  158 00:0C5E -  -  -  -  
  159 00:0C5E -  -  -  -  Int32Negate:
  160 00:0C5E AF -  -  -  		xor 	a
  161 00:0C5F CD 6A 0C 00 		call 	_I32NSubtract
  162 00:0C63 D9 -  -  -  		exx
  163 00:0C64 CD 6A 0C 00 		call 	_I32NSubtract
  164 00:0C68 D9 -  -  -  		exx
  165 00:0C69 C9 -  -  -  		ret
  166 00:0C6A -  -  -  -  _I32NSubtract:
  167 00:0C6A D5 -  -  -  		push 	de
  168 00:0C6B EB -  -  -  		ex 		de,hl
  169 00:0C6C 21 00 00 00 		ld 		hl,$0000
  170 00:0C70 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0C73 D1 -  -  -  		pop 	de
  172 00:0C74 C9 -  -  -  		ret
  173 00:0C75 -  -  -  -  		
  174 00:0C75 -  -  -  -  ; ***************************************************************************************
  175 00:0C75 -  -  -  -  ;
  176 00:0C75 -  -  -  -  ;									Changes and Updates
  177 00:0C75 -  -  -  -  ;
  178 00:0C75 -  -  -  -  ; ***************************************************************************************
  179 00:0C75 -  -  -  -  ;
  180 00:0C75 -  -  -  -  ;		Date			Notes
  181 00:0C75 -  -  -  -  ;		==== 			=====
  182 00:0C75 -  -  -  -  ;
  183 00:0C75 -  -  -  -  ; ***************************************************************************************
  184 00:0C75 -  -  -  -  		
Listing for file "_build.asm"
   57 00:0C75 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0C75 -  -  -  -  ; ***************************************************************************************
    2 00:0C75 -  -  -  -  ; ***************************************************************************************
    3 00:0C75 -  -  -  -  ;
    4 00:0C75 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0C75 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C75 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C75 -  -  -  -  ;		Reviewed :	No
    8 00:0C75 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0C75 -  -  -  -  ;
   10 00:0C75 -  -  -  -  ; ***************************************************************************************
   11 00:0C75 -  -  -  -  ;
   12 00:0C75 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0C75 -  -  -  -  ;
   14 00:0C75 -  -  -  -  ; ***************************************************************************************
   15 00:0C75 -  -  -  -  
   16 00:0C75 -  -  -  -  Int32ToString:
   17 00:0C75 C5 -  -  -  		push 	bc 							; save string start
   18 00:0C76 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0C77 E5 -  -  -  		push 	hl
   20 00:0C78 11 00 00 00 		ld	 	de,$0000
   21 00:0C7C D9 -  -  -  		exx
   22 00:0C7D D5 -  -  -  		push 	de
   23 00:0C7E E5 -  -  -  		push 	hl
   24 00:0C7F 11 00 00 00 		ld 		de,$000
   25 00:0C83 D9 -  -  -  		exx
   26 00:0C84 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0C85 -  -  -  -  		;
   28 00:0C85 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0C87 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0C89 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0C8B 5F -  -  -  		ld 		e,a
   32 00:0C8C -  -  -  -  		;
   33 00:0C8C D9 -  -  -  		exx 								; is it -ve ?
   34 00:0C8D CB 7C -  -  		bit 	7,h
   35 00:0C8F D9 -  -  -  		exx
   36 00:0C90 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0C92 -  -  -  -  		;
   38 00:0C92 CD 5E 0C 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0C96 -  -  -  -  		;
   40 00:0C96 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0C98 02 -  -  -  		ld 		(bc),a
   42 00:0C99 03 -  -  -  		inc 	bc
   43 00:0C9A -  -  -  -  _I32TSNotNegative:	
   44 00:0C9A CD A9 0C 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0C9E -  -  -  -  _I32TSExit:
   46 00:0C9E 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0CA0 02 -  -  -  		ld 		(bc),a 
   48 00:0CA1 -  -  -  -  
   49 00:0CA1 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0CA2 E1 -  -  -  		pop 	hl
   51 00:0CA3 D1 -  -  -  		pop 	de
   52 00:0CA4 D9 -  -  -  		exx
   53 00:0CA5 E1 -  -  -  		pop 	hl
   54 00:0CA6 D1 -  -  -  		pop 	de
   55 00:0CA7 C1 -  -  -  		pop 	bc
   56 00:0CA8 C9 -  -  -  		ret
   57 00:0CA9 -  -  -  -  
   58 00:0CA9 -  -  -  -  _I32RecursiveConvert:
   59 00:0CA9 CD B6 0A 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0CAD F5 -  -  -  		push 	af 							; save remainder
   61 00:0CAE CD 2D 0C 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0CB2 C4 A9 0C 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0CB6 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0CB7 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0CB9 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0CBB C6 07 -  -  		add 	a,7
   67 00:0CBD -  -  -  -  _I32NotHex:
   68 00:0CBD C6 30 -  -  		add 	a,48
   69 00:0CBF 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0CC0 03 -  -  -  		inc 	bc
   71 00:0CC1 C9 -  -  -  		ret		
   72 00:0CC2 -  -  -  -  
   73 00:0CC2 -  -  -  -  ; ***************************************************************************************
   74 00:0CC2 -  -  -  -  ;
   75 00:0CC2 -  -  -  -  ;									Changes and Updates
   76 00:0CC2 -  -  -  -  ;
   77 00:0CC2 -  -  -  -  ; ***************************************************************************************
   78 00:0CC2 -  -  -  -  ;
   79 00:0CC2 -  -  -  -  ;		Date			Notes
   80 00:0CC2 -  -  -  -  ;		==== 			=====
   81 00:0CC2 -  -  -  -  ;
   82 00:0CC2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0CC2 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0CC2 -  -  -  -  ; ***************************************************************************************
    2 00:0CC2 -  -  -  -  ; ***************************************************************************************
    3 00:0CC2 -  -  -  -  ;
    4 00:0CC2 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0CC2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CC2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CC2 -  -  -  -  ;		Reviewed :	No
    8 00:0CC2 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0CC2 -  -  -  -  ;
   10 00:0CC2 -  -  -  -  ; ***************************************************************************************
   11 00:0CC2 -  -  -  -  ; ***************************************************************************************
   12 00:0CC2 -  -  -  -  
   13 00:0CC2 -  -  -  -  #ifdef AQUARIUS
   14 00:0CC2             
   15 00:0CC2             ; ***************************************************************************************
   16 00:0CC2             ;
   17 00:0CC2             ;								Initialise system stuff
   18 00:0CC2             ;
   19 00:0CC2             ; ***************************************************************************************
   20 00:0CC2             
   21 00:0CC2             SYSInitialise:
   22 00:0CC2             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0CC2             	call 	SYSPrintChar
   24 00:0CC2             	ret
   25 00:0CC2             
   26 00:0CC2             ; ***************************************************************************************
   27 00:0CC2             ;
   28 00:0CC2             ;								Terminate system stuff
   29 00:0CC2             ;
   30 00:0CC2             ; ***************************************************************************************
   31 00:0CC2             
   32 00:0CC2             SYSTerminate:
   33 00:0CC2             	jr 		SYSTerminate
   34 00:0CC2             
   35 00:0CC2             ; ***************************************************************************************
   36 00:0CC2             ;
   37 00:0CC2             ;								Print A character
   38 00:0CC2             ;
   39 00:0CC2             ; ***************************************************************************************
   40 00:0CC2             
   41 00:0CC2             SYSPrintChar:
   42 00:0CC2             	push 	af 									; we stack everything including alt registers
   43 00:0CC2             	push 	bc
   44 00:0CC2             	push 	de
   45 00:0CC2             	push 	hl
   46 00:0CC2             	push 	ix
   47 00:0CC2             	push 	iy
   48 00:0CC2             	exx
   49 00:0CC2             	push 	bc
   50 00:0CC2             	push 	de
   51 00:0CC2             	push 	hl
   52 00:0CC2             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0CC2             	pop 	hl
   54 00:0CC2             	pop 	de
   55 00:0CC2             	pop 	bc
   56 00:0CC2             	exx
   57 00:0CC2             	pop 	iy
   58 00:0CC2             	pop 	ix
   59 00:0CC2             	pop 	hl
   60 00:0CC2             	pop 	de
   61 00:0CC2             	pop 	bc
   62 00:0CC2             	pop 	af
   63 00:0CC2             	ret		
   64 00:0CC2             
   65 00:0CC2             ; ***************************************************************************************
   66 00:0CC2             ;
   67 00:0CC2             ;									Print Newline
   68 00:0CC2             ;
   69 00:0CC2             ; ***************************************************************************************
   70 00:0CC2             
   71 00:0CC2             SYSPrintCRLF:
   72 00:0CC2             	push 	af
   73 00:0CC2             	ld 		a,13
   74 00:0CC2             	call 	SYSPrintChar
   75 00:0CC2             	ld 		a,10
   76 00:0CC2             	call 	SYSPrintChar
   77 00:0CC2             	pop 	af
   78 00:0CC2             	ret
   79 00:0CC2             
   80 00:0CC2             ; ***************************************************************************************
   81 00:0CC2             ;
   82 00:0CC2             ;									Get time into HL'HL
   83 00:0CC2             ;
   84 00:0CC2             ; ***************************************************************************************
   85 00:0CC2             
   86 00:0CC2             SYSGetTimer:
   87 00:0CC2              	in 		a,($00)
   88 00:0CC2              	ld 		l,a
   89 00:0CC2              	in 		a,($01)
   90 00:0CC2              	ld 		h,a
   91 00:0CC2              	exx
   92 00:0CC2              	in 		a,($02)
   93 00:0CC2              	ld 		l,a
   94 00:0CC2              	in 		a,($03)
   95 00:0CC2              	ld 		h,a
   96 00:0CC2              	exx
   97 00:0CC2             	ret 	
   98 00:0CC2             	
   99 00:0CC2             #endif
  100 00:0CC2 -  -  -  -  
  101 00:0CC2 -  -  -  -  ; ***************************************************************************************
  102 00:0CC2 -  -  -  -  ;
  103 00:0CC2 -  -  -  -  ;									Changes and Updates
  104 00:0CC2 -  -  -  -  ;
  105 00:0CC2 -  -  -  -  ; ***************************************************************************************
  106 00:0CC2 -  -  -  -  ;
  107 00:0CC2 -  -  -  -  ;		Date			Notes
  108 00:0CC2 -  -  -  -  ;		==== 			=====
  109 00:0CC2 -  -  -  -  ;
  110 00:0CC2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0CC2 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0CC2 -  -  -  -  ; ***************************************************************************************
    2 00:0CC2 -  -  -  -  ; ***************************************************************************************
    3 00:0CC2 -  -  -  -  ;
    4 00:0CC2 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0CC2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CC2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CC2 -  -  -  -  ;		Reviewed :	No
    8 00:0CC2 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0CC2 -  -  -  -  ;
   10 00:0CC2 -  -  -  -  ; ***************************************************************************************
   11 00:0CC2 -  -  -  -  ; ***************************************************************************************
   12 00:0CC2 -  -  -  -  
   13 00:0CC2 -  -  -  -  #ifdef CLEANEZ80
   14 00:0CC2 -  -  -  -  
   15 00:0CC2 -  -  -  -  ; ***************************************************************************************
   16 00:0CC2 -  -  -  -  ;
   17 00:0CC2 -  -  -  -  ;								Initialise system stuff
   18 00:0CC2 -  -  -  -  ;
   19 00:0CC2 -  -  -  -  ; ***************************************************************************************
   20 00:0CC2 -  -  -  -  
   21 00:0CC2 -  -  -  -  SYSInitialise:
   22 00:0CC2 C9 -  -  -  	ret
   23 00:0CC3 -  -  -  -  
   24 00:0CC3 -  -  -  -  ; ***************************************************************************************
   25 00:0CC3 -  -  -  -  ;
   26 00:0CC3 -  -  -  -  ;								Terminate system stuff
   27 00:0CC3 -  -  -  -  ;
   28 00:0CC3 -  -  -  -  ; ***************************************************************************************
   29 00:0CC3 -  -  -  -  
   30 00:0CC3 -  -  -  -  SYSTerminate:
   31 00:0CC3 C9 -  -  -  	ret
   32 00:0CC4 -  -  -  -  
   33 00:0CC4 -  -  -  -  ; ***************************************************************************************
   34 00:0CC4 -  -  -  -  ;
   35 00:0CC4 -  -  -  -  ;								Print A character
   36 00:0CC4 -  -  -  -  ;
   37 00:0CC4 -  -  -  -  ; ***************************************************************************************
   38 00:0CC4 -  -  -  -  
   39 00:0CC4 -  -  -  -  SYSPrintChar:
   40 00:0CC4 C9 -  -  -  	ret		
   41 00:0CC5 -  -  -  -  
   42 00:0CC5 -  -  -  -  ; ***************************************************************************************
   43 00:0CC5 -  -  -  -  ;
   44 00:0CC5 -  -  -  -  ;									Print Newline
   45 00:0CC5 -  -  -  -  ;
   46 00:0CC5 -  -  -  -  ; ***************************************************************************************
   47 00:0CC5 -  -  -  -  
   48 00:0CC5 -  -  -  -  SYSPrintCRLF:
   49 00:0CC5 C9 -  -  -  	ret
   50 00:0CC6 -  -  -  -  
   51 00:0CC6 -  -  -  -  ; ***************************************************************************************
   52 00:0CC6 -  -  -  -  ;
   53 00:0CC6 -  -  -  -  ;									Get time into HL'HL
   54 00:0CC6 -  -  -  -  ;
   55 00:0CC6 -  -  -  -  ; ***************************************************************************************
   56 00:0CC6 -  -  -  -  
   57 00:0CC6 -  -  -  -  SYSGetTimer:
   58 00:0CC6 C9 -  -  -  	ret
   59 00:0CC7 -  -  -  -  
   60 00:0CC7 -  -  -  -  #endif
   61 00:0CC7 -  -  -  -  
   62 00:0CC7 -  -  -  -  ; ***************************************************************************************
   63 00:0CC7 -  -  -  -  ;
   64 00:0CC7 -  -  -  -  ;									Changes and Updates
   65 00:0CC7 -  -  -  -  ;
   66 00:0CC7 -  -  -  -  ; ***************************************************************************************
   67 00:0CC7 -  -  -  -  ;
   68 00:0CC7 -  -  -  -  ;		Date			Notes
   69 00:0CC7 -  -  -  -  ;		==== 			=====
   70 00:0CC7 -  -  -  -  ;
   71 00:0CC7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:0CC7 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0CC7 -  -  -  -  ; ***************************************************************************************
    2 00:0CC7 -  -  -  -  ; ***************************************************************************************
    3 00:0CC7 -  -  -  -  ;
    4 00:0CC7 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0CC7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CC7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CC7 -  -  -  -  ;		Reviewed :	No
    8 00:0CC7 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0CC7 -  -  -  -  ;
   10 00:0CC7 -  -  -  -  ; ***************************************************************************************
   11 00:0CC7 -  -  -  -  ; ***************************************************************************************
   12 00:0CC7 -  -  -  -  
   13 00:0CC7 -  -  -  -  #ifdef TI84
   14 00:0CC7             
   15 00:0CC7             ; ***************************************************************************************
   16 00:0CC7             ;
   17 00:0CC7             ;								Initialise system stuff
   18 00:0CC7             ;
   19 00:0CC7             ; ***************************************************************************************
   20 00:0CC7             
   21 00:0CC7             SYSInitialise:
   22 00:0CC7             	di
   23 00:0CC7             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0CC7             	ld 		(_IYTemp84),iy
   25 00:0CC7             	ret
   26 00:0CC7             
   27 00:0CC7             ; ***************************************************************************************
   28 00:0CC7             ;
   29 00:0CC7             ;								Terminate system stuff
   30 00:0CC7             ;
   31 00:0CC7             ; ***************************************************************************************
   32 00:0CC7             
   33 00:0CC7             SYSTerminate:
   34 00:0CC7             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0CC7             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0CC7             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0CC7             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0CC7             	ei
   39 00:0CC7             	ret 										; and exit.
   40 00:0CC7             
   41 00:0CC7             _StackTemp84:									; temp var for TI84 only.
   42 00:0CC7             	.dw 	0,0
   43 00:0CC7             _IYTemp84:
   44 00:0CC7             	.dw 	0,0		
   45 00:0CC7             
   46 00:0CC7             ; ***************************************************************************************
   47 00:0CC7             ;
   48 00:0CC7             ;								Print A character
   49 00:0CC7             ;
   50 00:0CC7             ; ***************************************************************************************
   51 00:0CC7             
   52 00:0CC7             SYSPrintChar:
   53 00:0CC7             	push 	af 									; we stack everything including alt registers
   54 00:0CC7             	push 	bc
   55 00:0CC7             	push 	de
   56 00:0CC7             	push 	hl
   57 00:0CC7             	push 	ix
   58 00:0CC7             	push 	iy
   59 00:0CC7             	exx
   60 00:0CC7             	push 	bc
   61 00:0CC7             	push 	de
   62 00:0CC7             	push 	hl
   63 00:0CC7             
   64 00:0CC7             	ld 		iy,(_IYTemp84)
   65 00:0CC7             	call 	_PutC 								; print A as character
   66 00:0CC7             	di
   67 00:0CC7             	ld 		(_IYTemp84),iy
   68 00:0CC7             
   69 00:0CC7             	pop 	hl
   70 00:0CC7             	pop 	de
   71 00:0CC7             	pop 	bc
   72 00:0CC7             	exx
   73 00:0CC7             	pop 	iy
   74 00:0CC7             	pop 	ix
   75 00:0CC7             	pop 	hl
   76 00:0CC7             	pop 	de
   77 00:0CC7             	pop 	bc
   78 00:0CC7             	pop 	af
   79 00:0CC7             	ret		
   80 00:0CC7             
   81 00:0CC7             ; ***************************************************************************************
   82 00:0CC7             ;
   83 00:0CC7             ;									Print Newline
   84 00:0CC7             ;
   85 00:0CC7             ; ***************************************************************************************
   86 00:0CC7             
   87 00:0CC7             SYSPrintCRLF:
   88 00:0CC7             	push 	af 									; we stack everything including alt registers
   89 00:0CC7             	push 	bc
   90 00:0CC7             	push 	de
   91 00:0CC7             	push 	hl
   92 00:0CC7             	push 	ix
   93 00:0CC7             	push 	iy
   94 00:0CC7             	exx
   95 00:0CC7             	push 	bc
   96 00:0CC7             	push 	de
   97 00:0CC7             	push 	hl
   98 00:0CC7             
   99 00:0CC7             	ld 		iy,(_IYTemp84)
  100 00:0CC7             	call 	_newline
  101 00:0CC7             	di
  102 00:0CC7             	ld 		(_IYTemp84),iy
  103 00:0CC7             
  104 00:0CC7             	pop 	hl
  105 00:0CC7             	pop 	de
  106 00:0CC7             	pop 	bc
  107 00:0CC7             	exx
  108 00:0CC7             	pop 	iy
  109 00:0CC7             	pop 	ix
  110 00:0CC7             	pop 	hl
  111 00:0CC7             	pop 	de
  112 00:0CC7             	pop 	bc
  113 00:0CC7             	pop 	af
  114 00:0CC7             	ret
  115 00:0CC7             
  116 00:0CC7             ; ***************************************************************************************
  117 00:0CC7             ;
  118 00:0CC7             ;									Get time into HL'HL
  119 00:0CC7             ;
  120 00:0CC7             ; ***************************************************************************************
  121 00:0CC7             
  122 00:0CC7             SYSGetTimer:
  123 00:0CC7             	ld 		hl,$1234
  124 00:0CC7             	exx
  125 00:0CC7             	ld 		hl,$5678
  126 00:0CC7             	exx
  127 00:0CC7             	ret
  128 00:0CC7             
  129 00:0CC7             #endif
  130 00:0CC7 -  -  -  -  
  131 00:0CC7 -  -  -  -  ; ***************************************************************************************
  132 00:0CC7 -  -  -  -  ;
  133 00:0CC7 -  -  -  -  ;									Changes and Updates
  134 00:0CC7 -  -  -  -  ;
  135 00:0CC7 -  -  -  -  ; ***************************************************************************************
  136 00:0CC7 -  -  -  -  ;
  137 00:0CC7 -  -  -  -  ;		Date			Notes
  138 00:0CC7 -  -  -  -  ;		==== 			=====
  139 00:0CC7 -  -  -  -  ;
  140 00:0CC7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:0CC7 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0CC7 -  -  -  -  ; ***************************************************************************************
    2 00:0CC7 -  -  -  -  ; ***************************************************************************************
    3 00:0CC7 -  -  -  -  ;
    4 00:0CC7 -  -  -  -  ;		Name : 		basic.asm
    5 00:0CC7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CC7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CC7 -  -  -  -  ;		Reviewed :	No
    8 00:0CC7 -  -  -  -  ;		Purpose :	Main program.
    9 00:0CC7 -  -  -  -  ;
   10 00:0CC7 -  -  -  -  ; ***************************************************************************************
   11 00:0CC7 -  -  -  -  ; ***************************************************************************************
   12 00:0CC7 -  -  -  -  
   13 00:0CC7 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 34 
              35 30 32 34 
              0D 80 10 03 
              00 C2 9A 95 
              41 6B 52 70 
              43 45 A3 8F 
              41 80 15 04 
              00 C2 9E 95 
              41 5D 4D 47 
              5D 56 A3 8F 
              42 62 72 78 
              62 69 80 1D 
              05 00 C2 9B 
              96 95 41 59 
              52 60 43 40 
              A3 8F 3F 0A 
              31 34 39 38 
              30 32 32 30 
              38 30 0D 80 
              15 06 00 C2 
              9E 95 41 4B 
              45 4E 46 7F 
              A3 8F 42 74 
              7A 71 79 40 
              80 12 07 00 
              C2 9A 95 8A 
              41 40 7D 76 
              45 6C A3 8F 
              8A 41 80 13 
              08 00 C2 83 
              95 9F 89 47 
              A3 8F 94 41 
              45 51 44 4D 
              42 80 13 09 
              00 C2 83 95 
              9F 89 4D A3 
              8F 94 41 4B 
              52 64 65 48 
              80 0F 0A 00 
              C2 9A 95 58 
              77 54 4B 7F 
              A3 8F 41 80 
              0E 0B 00 C2 
              84 95 9F 89 
              4C A3 8F 41 
              47 80 13 0C 
              00 C2 98 95 
              3F 06 66 72 
              77 64 73 63 
              0D A3 8F 46 
              80 11 0D 00 
              C2 94 55 47 
              43 45 77 8F 
              55 47 43 45 
              77 80 1C 0E 
              00 C2 A2 95 
              3F 0A 31 37 
              39 32 34 39 
              31 33 39 30 
              0D A3 8F 41 
              6A 75 73 7D 
              7E 80 1A 0F 
              00 C2 A2 95 
              3F 09 34 31 
              30 33 37 39 
              38 39 33 0D 
              A3 8F 58 5D 
              5E 59 75 80 
              13 10 00 C2 
              99 95 6A 6F 
              67 42 78 A3 
              8F 6A 6F 67 
              42 78 80 1B 
              11 00 C2 96 
              95 9F 89 54 
              A3 8F 3F 0C 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 16 12 
              00 C2 99 95 
              8A 41 4C 7D 
              4D 56 50 A3 
              8F 41 4C 7D 
              4D 56 50 80 
              10 13 00 C2 
              9C 96 95 41 
              4C A3 8F 3F 
              01 4C 0D 80 
              13 14 00 C2 
              83 95 9F 89 
              48 A3 8F 94 
              41 46 51 54 
              51 43 80 1C 
              15 00 C2 A2 
              95 3F 0A 2D 
              34 37 38 37 
              35 35 33 39 
              34 0D A3 8F 
              8A 5C 62 53 
              69 42 80 14 
              16 00 C2 9E 
              95 51 42 47 
              79 4F A3 8F 
              43 6E 7D 78 
              46 70 80 10 
              17 00 C2 9C 
              96 95 41 57 
              A3 8F 3F 01 
              57 0D 80 1D 
              18 00 C2 9B 
              96 95 8A 60 
              7F 58 41 41 
              A3 8F 3F 0A 
              2D 35 35 33 
              34 38 34 33 
              35 33 0D 80 
              1B 19 00 C2 
              9B 96 95 74 
              6C 7C 6F 4B 
              A3 8F 3F 09 
              38 38 34 31 
              39 38 33 34 
              37 0D 80 12 
              1A 00 C2 8A 
              8A 7E 7E 5E 
              76 7B 8F 7E 
              7E 5E 76 7B 
              80 11 1B 00 
              C2 94 6A 4C 
              52 60 71 8F 
              6A 4C 52 60 
              71 80 12 1C 
              00 C2 8A 8A 
              66 6E 57 7B 
              63 8F 66 6E 
              57 7B 63 80 
              13 1D 00 C2 
              94 43 74 66 
              5A 79 74 8F 
              43 74 66 5A 
              79 74 80 0E 
              1E 00 C2 98 
              95 3F 01 75 
              0D A3 8F 41 
              80 15 1F 00 
              C2 9E 95 41 
              7B 79 79 7A 
              40 A3 8F 42 
              44 46 46 45 
              7F 80 13 20 
              00 C2 83 95 
              9F 89 4E A3 
              8F 94 41 4C 
              52 74 69 49 
              80 15 21 00 
              C2 99 95 41 
              76 6F 7B 62 
              76 A3 8F 41 
              76 6F 7B 62 
              76 80 24 22 
              00 C2 96 95 
              9F 89 4B A3 
              8F 3F 15 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 23 
              00 C2 9E 95 
              77 4E 40 4C 
              43 A3 8F 43 
              48 71 7F 73 
              7C 80 10 24 
              00 C2 9C 96 
              95 41 44 A3 
              8F 3F 01 44 
              0D 80 10 25 
              00 C2 9C 96 
              95 41 56 A3 
              8F 3F 01 56 
              0D 80 14 26 
              00 C2 8A 8A 
              41 51 76 7D 
              49 5B 8F 41 
              51 76 7D 49 
              5B 80 0E 27 
              00 C2 84 95 
              9F 89 4D A3 
              8F 41 48 80 
              14 28 00 C2 
              8A 8A 41 75 
              55 4F 7B 45 
              8F 41 75 55 
              4F 7B 45 80 
              15 29 00 C2 
              99 95 41 50 
              51 4B 48 47 
              A3 8F 41 50 
              51 4B 48 47 
              80 15 2A 00 
              C2 99 95 41 
              41 40 64 6F 
              48 A3 8F 41 
              41 40 64 6F 
              48 80 1D 2B 
              00 C2 9B 96 
              95 8A 49 42 
              56 73 4B A3 
              8F 3F 0A 2D 
              31 35 31 36 
              31 32 36 31 
              39 0D 80 1C 
              2C 00 C2 9B 
              96 95 8A 44 
              6A 72 4E 65 
              A3 8F 3F 09 
              2D 37 38 33 
              32 34 36 34 
              35 0D 80 11 
              2D 00 C2 9A 
              95 8A 5E 54 
              6A 6F 44 A3 
              8F 8A 41 80 
              1E 2E 00 C2 
              A2 95 3F 0B 
              2D 31 36 38 
              39 35 38 35 
              38 33 31 0D 
              A3 8F 8A 41 
              64 6D 50 62 
              67 80 0D 2F 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 1C 
              30 00 C2 A2 
              95 3F 0A 2D 
              36 36 33 37 
              35 31 31 32 
              38 0D A3 8F 
              8A 67 64 40 
              67 58 80 15 
              31 00 C2 9E 
              95 41 7F 6A 
              6E 5E 47 A3 
              8F 42 40 55 
              51 61 78 80 
              1C 32 00 C2 
              A2 95 3F 0A 
              2D 32 31 34 
              35 35 31 33 
              33 32 0D A3 
              8F 8A 4C 72 
              5C 6C 64 80 
              13 33 00 C2 
              99 95 63 65 
              52 71 7C A3 
              8F 63 65 52 
              71 7C 80 29 
              34 00 C2 96 
              95 9F 89 46 
              A3 8F 3F 1A 
              41 42 43 44 
              45 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              10 35 00 C2 
              9C 96 95 41 
              42 A3 8F 3F 
              01 42 0D 80 
              11 36 00 C2 
              9A 95 8A 56 
              4C 73 50 5B 
              A3 8F 8A 41 
              80 14 37 00 
              C2 8A 8A 41 
              54 56 41 7F 
              6B 8F 41 54 
              56 41 7F 6B 
              80 13 38 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              1C 39 00 C2 
              A2 95 3F 0A 
              31 38 39 32 
              39 31 37 31 
              38 33 0D A3 
              8F 41 70 74 
              79 7E 7F 80 
              10 3A 00 C2 
              9D 95 3F 02 
              6A 56 0D A3 
              8F 41 6A 80 
              13 3B 00 C2 
              94 42 47 48 
              5E 7A 66 8F 
              42 47 48 5E 
              7A 66 80 1C 
              3C 00 C2 A2 
              95 3F 0A 2D 
              34 34 37 32 
              30 30 32 30 
              37 0D A3 8F 
              8A 5A 69 7B 
              6F 4F 80 13 
              3D 00 C2 9D 
              95 3F 05 44 
              4E 78 49 75 
              0D A3 8F 41 
              44 80 15 3E 
              00 C2 99 95 
              41 6A 4D 66 
              55 5B A3 8F 
              41 6A 4D 66 
              55 5B 80 1A 
              3F 00 C2 A2 
              95 3F 09 34 
              31 39 30 31 
              31 30 34 31 
              0D A3 8F 58 
              7E 59 67 61 
              80 14 40 00 
              C2 8A 41 53 
              77 5E 4D 64 
              8F 8A 41 53 
              77 5E 4D 64 
              80 15 41 00 
              C2 9E 95 42 
              4B 70 78 72 
              4E A3 8F 41 
              74 4F 47 4D 
              71 80 13 42 
              00 C2 83 95 
              9F 89 53 A3 
              8F 94 41 51 
              54 44 7D 4E 
              80 13 43 00 
              C2 94 43 72 
              6F 76 51 70 
              8F 43 72 6F 
              76 51 70 80 
              1C 44 00 C2 
              A2 95 3F 0A 
              31 39 38 34 
              38 37 35 37 
              34 35 0D A3 
              8F 41 76 53 
              6C 73 61 80 
              0E 45 00 C2 
              84 95 9F 89 
              47 A3 8F 41 
              42 80 1F 46 
              00 C2 9B 96 
              95 8A 41 4B 
              7D 75 71 5C 
              A3 8F 3F 0B 
              2D 31 32 37 
              34 35 30 32 
              32 33 36 0D 
              80 20 47 00 
              C2 96 95 9F 
              89 4F A3 8F 
              3F 11 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 12 48 00 
              C2 9A 95 8A 
              41 7B 40 56 
              7F 41 A3 8F 
              8A 41 80 0D 
              49 00 C2 9D 
              95 3F 00 0D 
              A3 8F 4D 80 
              10 4A 00 C2 
              9C 96 95 41 
              49 A3 8F 3F 
              01 49 0D 80 
              14 4B 00 C2 
              98 95 3F 07 
              65 67 42 65 
              47 64 67 0D 
              A3 8F 47 80 
              10 4C 00 C2 
              9A 95 41 6C 
              7D 44 48 7B 
              A3 8F 41 80 
              16 4D 00 C2 
              99 95 8A 41 
              5B 6B 5A 5D 
              5C A3 8F 41 
              5B 6B 5A 5D 
              5C 80 14 4E 
              00 C2 9E 95 
              43 5E 58 6B 
              75 5F A3 8F 
              61 67 54 4A 
              60 80 14 4F 
              00 C2 9E 95 
              4E 4F 6B 5D 
              58 A3 8F 43 
              71 70 54 62 
              67 80 16 50 
              00 C2 9D 95 
              3F 08 6E 7A 
              51 4A 7A 6D 
              4E 6B 0D A3 
              8F 41 6E 80 
              11 51 00 C2 
              94 7F 58 67 
              53 4F 8F 7F 
              58 67 53 4F 
              80 14 52 00 
              C2 9D 95 3F 
              06 62 59 63 
              4B 66 49 0D 
              A3 8F 41 62 
              80 13 53 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              10 54 00 C2 
              9C 96 95 41 
              4A A3 8F 3F 
              01 4A 0D 80 
              25 55 00 C2 
              96 95 9F 89 
              4A A3 8F 3F 
              16 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 0F 56 00 
              C2 9A 95 44 
              7B 6B 6A 59 
              A3 8F 41 80 
              10 57 00 C2 
              9C 96 95 41 
              56 A3 8F 3F 
              01 56 0D 80 
              1B 58 00 C2 
              96 95 9F 89 
              54 A3 8F 3F 
              0C 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 15 
              59 00 C2 9D 
              95 3F 07 4F 
              4A 61 50 53 
              5A 66 0D A3 
              8F 41 4F 80 
              0F 5A 00 C2 
              9A 95 6B 60 
              58 76 6B A3 
              8F 41 80 13 
              5B 00 C2 94 
              43 7A 6A 4C 
              50 4B 8F 43 
              7A 6A 4C 50 
              4B 80 11 5C 
              00 C2 98 95 
              3F 04 54 78 
              43 56 0D A3 
              8F 44 80 13 
              5D 00 C2 94 
              41 6E 62 77 
              42 5E 8F 41 
              6E 62 77 42 
              5E 80 13 5E 
              00 C2 98 95 
              3F 06 68 56 
              66 6B 51 79 
              0D A3 8F 46 
              80 14 5F 00 
              C2 9E 95 43 
              5B 59 7D 42 
              5A A3 8F 64 
              66 42 7D 65 
              80 16 60 00 
              C2 99 95 8A 
              41 48 5D 62 
              58 5B A3 8F 
              41 48 5D 62 
              58 5B 80 12 
              61 00 C2 8A 
              8A 6C 46 78 
              54 58 8F 6C 
              46 78 54 58 
              80 15 62 00 
              C2 9E 95 42 
              45 7D 6F 6F 
              53 A3 8F 41 
              7A 42 50 50 
              6C 80 25 63 
              00 C2 96 95 
              9F 89 4A A3 
              8F 3F 16 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 10 
              64 00 C2 9C 
              96 95 41 41 
              A3 8F 3F 01 
              41 0D 80 0E 
              65 00 C2 84 
              95 9F 89 54 
              A3 8F 41 4F 
              80 10 66 00 
              C2 9C 96 95 
              41 4F A3 8F 
              3F 01 4F 0D 
              80 0E 67 00 
              C2 84 95 9F 
              89 4B A3 8F 
              41 46 80 13 
              68 00 C2 94 
              41 73 6C 57 
              40 63 8F 41 
              73 6C 57 40 
              63 80 16 69 
              00 C2 9D 95 
              3F 08 55 4D 
              74 58 6B 4B 
              77 55 0D A3 
              8F 41 55 80 
              10 6A 00 C2 
              9D 95 3F 02 
              73 61 0D A3 
              8F 41 73 80 
              1B 6B 00 C2 
              9B 96 95 51 
              64 65 5C 68 
              A3 8F 3F 09 
              32 39 34 38 
              30 33 32 34 
              30 0D 80 1A 
              6C 00 C2 9B 
              96 95 43 73 
              62 5C 6E A3 
              8F 3F 08 36 
              33 38 34 32 
              30 39 34 0D 
              80 15 6D 00 
              C2 9E 95 41 
              61 72 60 5C 
              7D A3 8F 42 
              5E 4D 5F 63 
              42 80 1A 6E 
              00 C2 A2 95 
              3F 09 35 32 
              30 34 35 37 
              33 30 38 0D 
              A3 8F 5F 41 
              58 71 5C 80 
              12 6F 00 C2 
              8A 4E 7E 65 
              54 7C 8F 8A 
              4E 7E 65 54 
              7C 80 14 70 
              00 C2 9E 95 
              55 59 4C 6A 
              6E A3 8F 43 
              6A 66 73 55 
              51 80 13 71 
              00 C2 98 95 
              3F 06 46 78 
              77 57 66 4D 
              0D A3 8F 46 
              80 13 72 00 
              C2 99 95 62 
              7E 56 7D 53 
              A3 8F 62 7E 
              56 7D 53 80 
              15 73 00 C2 
              98 95 3F 08 
              69 59 51 77 
              4A 43 65 62 
              0D A3 8F 48 
              80 1F 74 00 
              C2 9B 96 95 
              8A 41 4B 52 
              79 7F 68 A3 
              8F 3F 0B 2D 
              31 32 36 33 
              32 34 37 33 
              33 36 0D 80 
              1D 75 00 C2 
              9B 96 95 41 
              52 7D 76 51 
              7F A3 8F 3F 
              0A 31 33 39 
              31 39 34 34 
              38 33 31 0D 
              80 23 76 00 
              C2 96 95 9F 
              89 4C A3 8F 
              3F 14 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              1D 77 00 C2 
              9B 96 95 41 
              78 7B 7E 43 
              47 A3 8F 3F 
              0A 32 30 32 
              38 39 38 36 
              35 36 37 0D 
              80 11 78 00 
              C2 9A 95 8A 
              61 45 5F 4B 
              62 A3 8F 8A 
              41 80 14 79 
              00 C2 99 95 
              8A 56 5B 6A 
              43 51 A3 8F 
              56 5B 6A 43 
              51 80 11 7A 
              00 C2 9A 95 
              8A 58 4F 70 
              45 62 A3 8F 
              8A 41 80 10 
              7B 00 C2 9C 
              96 95 41 56 
              A3 8F 3F 01 
              56 0D 80 1D 
              7C 00 C2 9B 
              96 95 41 60 
              5F 72 5A 7A 
              A3 8F 3F 0A 
              31 36 31 38 
              39 34 35 37 
              32 32 0D 80 
              0E 7D 00 C2 
              84 95 9F 89 
              53 A3 8F 41 
              4E 80 1D 7E 
              00 C2 9B 96 
              95 41 79 46 
              47 5E 41 A3 
              8F 3F 0A 32 
              30 33 31 36 
              34 36 35 39 
              33 0D 80 13 
              7F 00 C2 83 
              95 9F 89 4C 
              A3 8F 94 41 
              4A 52 54 61 
              47 80 1D 80 
              00 C2 9B 96 
              95 41 57 5D 
              40 56 6F A3 
              8F 3F 0A 31 
              34 36 37 32 
              32 31 34 32 
              33 0D 80 13 
              81 00 C2 83 
              95 9F 89 53 
              A3 8F 94 41 
              51 54 44 7D 
              4E 80 13 82 
              00 C2 94 43 
              6B 79 7C 62 
              6B 8F 43 6B 
              79 7C 62 6B 
              80 14 83 00 
              C2 99 95 8A 
              7A 4F 6C 4F 
              44 A3 8F 7A 
              4F 6C 4F 44 
              80 10 84 00 
              C2 9C 96 95 
              41 4E A3 8F 
              3F 01 4E 0D 
              80 12 85 00 
              C2 9A 95 8A 
              41 78 7C 48 
              56 6E A3 8F 
              8A 41 80 1F 
              86 00 C2 9B 
              96 95 8A 41 
              69 75 5B 64 
              70 A3 8F 3F 
              0B 2D 31 37 
              37 35 36 31 
              34 32 35 36 
              0D 80 0E 87 
              00 C2 84 95 
              9F 89 4A A3 
              8F 41 45 80 
              14 88 00 C2 
              99 95 8A 79 
              70 70 6C 72 
              A3 8F 79 70 
              70 6C 72 80 
              10 89 00 C2 
              9C 96 95 41 
              57 A3 8F 3F 
              01 57 0D 80 
              12 8A 00 C2 
              8A 6C 67 51 
              56 44 8F 8A 
              6C 67 51 56 
              44 80 14 8B 
              00 C2 9E 95 
              43 4F 59 53 
              6C 6F A3 8F 
              70 66 6C 53 
              50 80 0E 8C 
              00 C2 84 95 
              9F 89 4C A3 
              8F 41 47 80 
              1D 8D 00 C2 
              A2 95 3F 0B 
              2D 31 30 31 
              33 34 36 39 
              39 39 37 0D 
              A3 8F 8A 7C 
              5A 45 4C 6D 
              80 14 8E 00 
              C2 9E 95 7E 
              6E 76 72 72 
              A3 8F 43 41 
              51 49 4D 4D 
              80 0F 8F 00 
              C2 98 95 3F 
              02 63 72 0D 
              A3 8F 42 80 
              1C 90 00 C2 
              A2 95 3F 0A 
              2D 34 39 36 
              39 32 34 37 
              31 39 0D A3 
              8F 8A 5D 67 
              67 60 6F 80 
              11 91 00 C2 
              9A 95 8A 70 
              50 74 78 70 
              A3 8F 8A 41 
              80 13 92 00 
              C2 83 95 9F 
              89 4A A3 8F 
              94 41 48 51 
              74 59 45 80 
              1F 93 00 C2 
              9B 96 95 8A 
              41 76 76 7D 
              6D 77 A3 8F 
              3F 0B 2D 31 
              39 39 34 31 
              32 30 30 35 
              35 0D 80 13 
              94 00 C2 94 
              43 5B 49 47 
              41 64 8F 43 
              5B 49 47 41 
              64 80 15 95 
              00 C2 9E 95 
              42 72 45 5F 
              59 56 A3 8F 
              41 4D 7A 60 
              66 69 80 11 
              96 00 C2 9D 
              95 3F 03 45 
              51 4F 0D A3 
              8F 41 45 80 
              1A 97 00 C2 
              A2 95 3F 09 
              39 32 34 33 
              31 35 30 36 
              35 0D A3 8F 
              77 45 7E 76 
              79 80 1C 98 
              00 C2 A2 95 
              3F 0A 2D 32 
              34 32 38 38 
              38 33 38 32 
              0D A3 8F 8A 
              4E 5E 62 7A 
              7E 80 0F 99 
              00 C2 9D 95 
              3F 01 64 0D 
              A3 8F 41 64 
              80 1B 9A 00 
              C2 9B 96 95 
              50 74 62 75 
              61 A3 8F 3F 
              09 32 38 32 
              32 30 39 36 
              33 33 0D 80 
              25 9B 00 C2 
              96 95 9F 89 
              4A A3 8F 3F 
              16 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 11 9C 00 
              C2 94 7C 68 
              74 7C 60 8F 
              7C 68 74 7C 
              60 80 24 9D 
              00 C2 96 95 
              9F 89 4B A3 
              8F 3F 15 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 1D 9E 
              00 C2 9B 96 
              95 41 51 67 
              79 50 61 A3 
              8F 3F 0A 31 
              33 36 39 34 
              31 32 36 34 
              31 0D 80 12 
              9F 00 C2 9A 
              95 8A 41 51 
              4A 7A 66 71 
              A3 8F 8A 41 
              80 12 A0 00 
              C2 8A 8A 5C 
              6A 70 5C 43 
              8F 5C 6A 70 
              5C 43 80 0F 
              A1 00 C2 9D 
              95 3F 01 75 
              0D A3 8F 41 
              75 80 12 A2 
              00 C2 8A 8A 
              76 7D 5F 59 
              68 8F 76 7D 
              5F 59 68 80 
              16 A3 00 C2 
              9D 95 3F 08 
              55 71 4D 6C 
              64 4E 49 6B 
              0D A3 8F 41 
              55 80 10 A4 
              00 C2 9A 95 
              41 7A 78 7E 
              76 78 A3 8F 
              41 80 1C A5 
              00 C2 A2 95 
              3F 0A 31 33 
              37 32 38 30 
              38 39 38 36 
              0D A3 8F 41 
              51 74 76 5C 
              5A 80 14 A6 
              00 C2 9E 95 
              43 58 6E 45 
              66 65 A3 8F 
              67 51 7A 59 
              5A 80 1C A7 
              00 C2 A2 95 
              3F 0A 32 30 
              34 35 36 34 
              39 31 32 30 
              0D A3 8F 41 
              79 7B 62 43 
              60 80 0D A8 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 1C 
              A9 00 C2 A2 
              95 3F 0A 2D 
              37 30 38 30 
              39 30 35 32 
              31 0D A3 8F 
              8A 6A 4D 49 
              6A 59 80 13 
              AA 00 C2 94 
              41 76 4F 61 
              4A 66 8F 41 
              76 4F 61 4A 
              66 80 22 AB 
              00 C2 96 95 
              9F 89 4D A3 
              8F 3F 13 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              13 AC 00 C2 
              94 42 54 73 
              53 4E 61 8F 
              42 54 73 53 
              4E 61 80 0E 
              AD 00 C2 84 
              95 9F 89 4C 
              A3 8F 41 47 
              80 12 AE 00 
              C2 8A 58 79 
              44 68 56 8F 
              8A 58 79 44 
              68 56 80 1B 
              AF 00 C2 A2 
              95 3F 09 2D 
              39 32 30 36 
              32 34 31 31 
              0D A3 8F 8A 
              45 5F 4C 4B 
              4B 80 11 B0 
              00 C2 9D 95 
              3F 03 56 48 
              63 0D A3 8F 
              41 56 80 15 
              B1 00 C2 9E 
              95 42 6F 6A 
              67 68 7D A3 
              8F 41 50 55 
              58 57 42 80 
              15 B2 00 C2 
              9E 95 42 6C 
              77 67 67 7C 
              A3 8F 41 53 
              48 58 58 43 
              80 14 B3 00 
              C2 8A 41 65 
              63 69 6C 5F 
              8F 8A 41 65 
              63 69 6C 5F 
              80 15 B4 00 
              C2 9E 95 41 
              54 62 67 78 
              7B A3 8F 42 
              6B 5D 58 47 
              44 80 15 B5 
              00 C2 98 95 
              3F 08 7A 71 
              6D 49 42 46 
              53 76 0D A3 
              8F 48 80 1B 
              B6 00 C2 9B 
              96 95 56 6E 
              78 74 57 A3 
              8F 3F 09 33 
              38 31 33 39 
              30 31 30 33 
              0D 80 10 B7 
              00 C2 9C 96 
              95 41 54 A3 
              8F 3F 01 54 
              0D 80 11 B8 
              00 C2 94 59 
              65 57 67 4C 
              8F 59 65 57 
              67 4C 80 12 
              B9 00 C2 8A 
              4F 5C 7D 77 
              56 8F 8A 4F 
              5C 7D 77 56 
              80 14 BA 00 
              C2 9D 95 3F 
              06 75 58 72 
              6F 66 58 0D 
              A3 8F 41 75 
              80 12 BB 00 
              C2 8A 4D 41 
              54 6E 58 8F 
              8A 4D 41 54 
              6E 58 80 10 
              BC 00 C2 9D 
              95 3F 02 4A 
              71 0D A3 8F 
              41 4A 80 13 
              BD 00 C2 83 
              95 9F 89 50 
              A3 8F 94 41 
              4E 53 54 71 
              4B 80 14 BE 
              00 C2 9E 95 
              43 62 5E 4D 
              65 4F A3 8F 
              5D 61 72 5A 
              70 80 1B BF 
              00 C2 9B 96 
              95 52 51 60 
              52 4A A3 8F 
              3F 09 33 30 
              36 35 37 38 
              35 37 30 0D 
              80 12 C0 00 
              C2 9A 95 8A 
              41 44 6B 72 
              54 72 A3 8F 
              8A 41 80 14 
              C1 00 C2 99 
              95 8A 61 76 
              79 4A 60 A3 
              8F 61 76 79 
              4A 60 80 13 
              C2 00 C2 98 
              95 3F 06 67 
              59 73 48 42 
              6C 0D A3 8F 
              46 80 13 C3 
              00 C2 83 95 
              9F 89 4B A3 
              8F 94 41 49 
              52 44 5D 46 
              80 1C C4 00 
              C2 A2 95 3F 
              0A 31 36 33 
              34 32 34 39 
              37 38 31 0D 
              A3 8F 41 61 
              5A 4A 70 75 
              80 10 C5 00 
              C2 9D 95 3F 
              02 5A 70 0D 
              A3 8F 41 5A 
              80 16 C6 00 
              C2 99 95 8A 
              41 55 44 7B 
              78 5D A3 8F 
              41 55 44 7B 
              78 5D 80 13 
              C7 00 C2 83 
              95 9F 89 4C 
              A3 8F 94 41 
              4A 52 54 61 
              47 80 1C C8 
              00 C2 A2 95 
              3F 0A 31 38 
              36 38 30 38 
              37 39 34 37 
              0D A3 8F 41 
              6F 56 4C 4A 
              4B 80 1F C9 
              00 C2 9B 96 
              95 8A 41 51 
              45 49 5A 42 
              A3 8F 3F 0B 
              2D 31 33 36 
              30 33 30 33 
              37 34 36 0D 
              80 1E CA 00 
              C2 96 95 9F 
              89 51 A3 8F 
              3F 0F 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 00 	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$34,$35,$30,$32,$34,$0d,$80,$10,$03,$00,$c2,$9a,$95,$41,$6b,$52,$70,$43,$45,$a3,$8f,$41,$80,$15,$04,$00,$c2,$9e,$95,$41,$5d,$4d,$47,$5d,$56,$a3,$8f,$42,$62,$72,$78,$62,$69,$80,$1d,$05,$00,$c2,$9b,$96,$95,$41,$59,$52,$60,$43,$40,$a3,$8f,$3f,$0a,$31,$34,$39,$38,$30,$32,$32,$30,$38,$30,$0d,$80,$15,$06,$00,$c2,$9e,$95,$41,$4b,$45,$4e,$46,$7f,$a3,$8f,$42,$74,$7a,$71,$79,$40,$80,$12,$07,$00,$c2,$9a,$95,$8a,$41,$40,$7d,$76,$45,$6c,$a3,$8f,$8a,$41,$80,$13,$08,$00,$c2,$83,$95,$9f,$89,$47,$a3,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$13,$09,$00,$c2,$83,$95,$9f,$89,$4d,$a3,$8f,$94,$41,$4b,$52,$64,$65,$48,$80,$0f,$0a,$00,$c2,$9a,$95,$58,$77,$54,$4b,$7f,$a3,$8f,$41,$80,$0e,$0b,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$13,$0c,$00,$c2,$98,$95,$3f,$06,$66,$72,$77,$64,$73,$63,$0d,$a3,$8f,$46,$80,$11,$0d,$00,$c2,$94,$55,$47,$43,$45,$77,$8f,$55,$47,$43,$45,$77,$80,$1c,$0e,$00,$c2,$a2,$95,$3f,$0a,$31,$37,$39,$32,$34,$39,$31,$33,$39,$30,$0d,$a3,$8f,$41,$6a,$75,$73,$7d,$7e,$80,$1a,$0f,$00,$c2,$a2,$95,$3f,$09,$34,$31,$30,$33,$37,$39,$38,$39,$33,$0d,$a3,$8f,$58,$5d,$5e,$59,$75,$80,$13,$10,$00,$c2,$99,$95,$6a,$6f,$67,$42,$78,$a3,$8f,$6a,$6f,$67,$42,$78,$80,$1b,$11,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$16,$12,$00,$c2,$99,$95,$8a,$41,$4c,$7d,$4d,$56,$50,$a3,$8f,$41,$4c,$7d,$4d,$56,$50,$80,$10,$13,$00,$c2,$9c,$96,$95,$41,$4c,$a3,$8f,$3f,$01,$4c,$0d,$80,$13,$14,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$1c,$15,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$37,$38,$37,$35,$35,$33,$39,$34,$0d,$a3,$8f,$8a,$5c,$62,$53,$69,$42,$80,$14,$16,$00,$c2,$9e,$95,$51,$42,$47,$79,$4f,$a3,$8f,$43,$6e,$7d,$78,$46,$70,$80,$10,$17,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$1d,$18,$00,$c2,$9b,$96,$95,$8a,$60,$7f,$58,$41,$41,$a3,$8f,$3f,$0a,$2d,$35,$35,$33,$34,$38,$34,$33,$35,$33,$0d,$80,$1b,$19,$00,$c2,$9b,$96,$95,$74,$6c,$7c,$6f,$4b,$a3,$8f,$3f,$09,$38,$38,$34,$31,$39,$38,$33,$34,$37,$0d,$80,$12,$1a,$00,$c2,$8a,$8a,$7e,$7e,$5e,$76,$7b,$8f,$7e,$7e,$5e,$76,$7b,$80,$11,$1b,$00,$c2,$94,$6a,$4c,$52,$60,$71,$8f,$6a,$4c,$52,$60,$71,$80,$12,$1c,$00,$c2,$8a,$8a,$66,$6e,$57,$7b,$63,$8f,$66,$6e,$57,$7b,$63,$80,$13,$1d,$00,$c2,$94,$43,$74,$66,$5a,$79,$74,$8f,$43,$74,$66,$5a,$79,$74,$80,$0e,$1e,$00,$c2,$98,$95,$3f,$01,$75,$0d,$a3,$8f,$41,$80,$15,$1f,$00,$c2,$9e,$95,$41,$7b,$79,$79,$7a,$40,$a3,$8f,$42,$44,$46,$46,$45,$7f,$80,$13,$20,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$15,$21,$00,$c2,$99,$95,$41,$76,$6f,$7b,$62,$76,$a3,$8f,$41,$76,$6f,$7b,$62,$76,$80,$24,$22,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$23,$00,$c2,$9e,$95,$77,$4e,$40,$4c,$43,$a3,$8f,$43,$48,$71,$7f,$73,$7c,$80,$10,$24,$00,$c2,$9c,$96,$95,$41,$44,$a3,$8f,$3f,$01,$44,$0d,$80,$10,$25,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$14,$26,$00,$c2,$8a,$8a,$41,$51,$76,$7d,$49,$5b,$8f,$41,$51,$76,$7d,$49,$5b,$80,$0e,$27,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$14,$28,$00,$c2,$8a,$8a,$41,$75,$55,$4f,$7b,$45,$8f,$41,$75,$55,$4f,$7b,$45,$80,$15,$29,$00,$c2,$99,$95,$41,$50,$51,$4b,$48,$47,$a3,$8f,$41,$50,$51,$4b,$48,$47,$80,$15,$2a,$00,$c2,$99,$95,$41,$41,$40,$64,$6f,$48,$a3,$8f,$41,$41,$40,$64,$6f,$48,$80,$1d,$2b,$00,$c2,$9b,$96,$95,$8a,$49,$42,$56,$73,$4b,$a3,$8f,$3f,$0a,$2d,$31,$35,$31,$36,$31,$32,$36,$31,$39,$0d,$80,$1c,$2c,$00,$c2,$9b,$96,$95,$8a,$44,$6a,$72,$4e,$65,$a3,$8f,$3f,$09,$2d,$37,$38,$33,$32,$34,$36,$34,$35,$0d,$80,$11,$2d,$00,$c2,$9a,$95,$8a,$5e,$54,$6a,$6f,$44,$a3,$8f,$8a,$41,$80,$1e,$2e,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$36,$38,$39,$35,$38,$35,$38,$33,$31,$0d,$a3,$8f,$8a,$41,$64,$6d,$50,$62,$67,$80,$0d,$2f,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$1c,$30,$00,$c2,$a2,$95,$3f,$0a,$2d,$36,$36,$33,$37,$35,$31,$31,$32,$38,$0d,$a3,$8f,$8a,$67,$64,$40,$67,$58,$80,$15,$31,$00,$c2,$9e,$95,$41,$7f,$6a,$6e,$5e,$47,$a3,$8f,$42,$40,$55,$51,$61,$78,$80,$1c,$32,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$31,$34,$35,$35,$31,$33,$33,$32,$0d,$a3,$8f,$8a,$4c,$72,$5c,$6c,$64,$80,$13,$33,$00,$c2,$99,$95,$63,$65,$52,$71,$7c,$a3,$8f,$63,$65,$52,$71,$7c,$80,$29,$34,$00,$c2,$96,$95,$9f,$89,$46,$a3,$8f,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$35,$00,$c2,$9c,$96,$95,$41,$42,$a3,$8f,$3f,$01,$42,$0d,$80,$11,$36,$00,$c2,$9a,$95,$8a,$56,$4c,$73,$50,$5b,$a3,$8f,$8a,$41,$80,$14,$37,$00,$c2,$8a,$8a,$41,$54,$56,$41,$7f,$6b,$8f,$41,$54,$56,$41,$7f,$6b,$80,$13,$38,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$1c,$39,$00,$c2,$a2,$95,$3f,$0a,$31,$38,$39,$32,$39,$31,$37,$31,$38,$33,$0d,$a3,$8f,$41,$70,$74,$79,$7e,$7f,$80,$10,$3a,$00,$c2,$9d,$95,$3f,$02,$6a,$56,$0d,$a3,$8f,$41,$6a,$80,$13,$3b,$00,$c2,$94,$42,$47,$48,$5e,$7a,$66,$8f,$42,$47,$48,$5e,$7a,$66,$80,$1c,$3c,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$34,$37,$32,$30,$30,$32,$30,$37,$0d,$a3,$8f,$8a,$5a,$69,$7b,$6f,$4f,$80,$13,$3d,$00,$c2,$9d,$95,$3f,$05,$44,$4e,$78,$49,$75,$0d,$a3,$8f,$41,$44,$80,$15,$3e,$00,$c2,$99,$95,$41,$6a,$4d,$66,$55,$5b,$a3,$8f,$41,$6a,$4d,$66,$55,$5b,$80,$1a,$3f,$00,$c2,$a2,$95,$3f,$09,$34,$31,$39,$30,$31,$31,$30,$34,$31,$0d,$a3,$8f,$58,$7e,$59,$67,$61,$80,$14,$40,$00,$c2,$8a,$41,$53,$77,$5e,$4d,$64,$8f,$8a,$41,$53,$77,$5e,$4d,$64,$80,$15,$41,$00,$c2,$9e,$95,$42,$4b,$70,$78,$72,$4e,$a3,$8f,$41,$74,$4f,$47,$4d,$71,$80,$13,$42,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$43,$00,$c2,$94,$43,$72,$6f,$76,$51,$70,$8f,$43,$72,$6f,$76,$51,$70,$80,$1c,$44,$00,$c2,$a2,$95,$3f,$0a,$31,$39,$38,$34,$38,$37,$35,$37,$34,$35,$0d,$a3,$8f,$41,$76,$53,$6c,$73,$61,$80,$0e,$45,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$1f,$46,$00,$c2,$9b,$96,$95,$8a,$41,$4b,$7d,$75,$71,$5c,$a3,$8f,$3f,$0b,$2d,$31,$32,$37,$34,$35,$30,$32,$32,$33,$36,$0d,$80,$20,$47,$00,$c2,$96,$95,$9f,$89,$4f,$a3,$8f,$3f,$11,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$48,$00,$c2,$9a,$95,$8a,$41,$7b,$40,$56,$7f,$41,$a3,$8f,$8a,$41,$80,$0d,$49,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$10,$4a,$00,$c2,$9c,$96,$95,$41,$49,$a3,$8f,$3f,$01,$49,$0d,$80,$14,$4b,$00,$c2,$98,$95,$3f,$07,$65,$67,$42,$65,$47,$64,$67,$0d,$a3,$8f,$47,$80,$10,$4c,$00,$c2,$9a,$95,$41,$6c,$7d,$44,$48,$7b,$a3,$8f,$41,$80,$16,$4d,$00,$c2,$99,$95,$8a,$41,$5b,$6b,$5a,$5d,$5c,$a3,$8f,$41,$5b,$6b,$5a,$5d,$5c,$80,$14,$4e,$00,$c2,$9e,$95,$43,$5e,$58,$6b,$75,$5f,$a3,$8f,$61,$67,$54,$4a,$60,$80,$14,$4f,$00,$c2,$9e,$95,$4e,$4f,$6b,$5d,$58,$a3,$8f,$43,$71,$70,$54,$62,$67,$80,$16,$50,$00,$c2,$9d,$95,$3f,$08,$6e,$7a,$51,$4a,$7a,$6d,$4e,$6b,$0d,$a3,$8f,$41,$6e,$80,$11,$51,$00,$c2,$94,$7f,$58,$67,$53,$4f,$8f,$7f,$58,$67,$53,$4f,$80,$14,$52,$00,$c2,$9d,$95,$3f,$06,$62,$59,$63,$4b,$66,$49,$0d,$a3,$8f,$41,$62,$80,$13,$53,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$10,$54,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$25,$55,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0f,$56,$00,$c2,$9a,$95,$44,$7b,$6b,$6a,$59,$a3,$8f,$41,$80,$10,$57,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$1b,$58,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$15,$59,$00,$c2,$9d,$95,$3f,$07,$4f,$4a,$61,$50,$53,$5a,$66,$0d,$a3,$8f,$41,$4f,$80,$0f,$5a,$00,$c2,$9a,$95,$6b,$60,$58,$76,$6b,$a3,$8f,$41,$80,$13,$5b,$00,$c2,$94,$43,$7a,$6a,$4c,$50,$4b,$8f,$43,$7a,$6a,$4c,$50,$4b,$80,$11,$5c,$00,$c2,$98,$95,$3f,$04,$54,$78,$43,$56,$0d,$a3,$8f,$44,$80,$13,$5d,$00,$c2,$94,$41,$6e,$62,$77,$42,$5e,$8f,$41,$6e,$62,$77,$42,$5e,$80,$13,$5e,$00,$c2,$98,$95,$3f,$06,$68,$56,$66,$6b,$51,$79,$0d,$a3,$8f,$46,$80,$14,$5f,$00,$c2,$9e,$95,$43,$5b,$59,$7d,$42,$5a,$a3,$8f,$64,$66,$42,$7d,$65,$80,$16,$60,$00,$c2,$99,$95,$8a,$41,$48,$5d,$62,$58,$5b,$a3,$8f,$41,$48,$5d,$62,$58,$5b,$80,$12,$61,$00,$c2,$8a,$8a,$6c,$46,$78,$54,$58,$8f,$6c,$46,$78,$54,$58,$80,$15,$62,$00,$c2,$9e,$95,$42,$45,$7d,$6f,$6f,$53,$a3,$8f,$41,$7a,$42,$50,$50,$6c,$80,$25,$63,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$64,$00,$c2,$9c,$96,$95,$41,$41,$a3,$8f,$3f,$01,$41,$0d,$80,$0e,$65,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$10,$66,$00,$c2,$9c,$96,$95,$41,$4f,$a3,$8f,$3f,$01,$4f,$0d,$80,$0e,$67,$00,$c2,$84,$95,$9f,$89,$4b,$a3,$8f,$41,$46,$80,$13,$68,$00,$c2,$94,$41,$73,$6c,$57,$40,$63,$8f,$41,$73,$6c,$57,$40,$63,$80,$16,$69,$00,$c2,$9d,$95,$3f,$08,$55,$4d,$74,$58,$6b,$4b,$77,$55,$0d,$a3,$8f,$41,$55,$80,$10,$6a,$00,$c2,$9d,$95,$3f,$02,$73,$61,$0d,$a3,$8f,$41,$73,$80,$1b,$6b,$00,$c2,$9b,$96,$95,$51,$64,$65,$5c,$68,$a3,$8f,$3f,$09,$32,$39,$34,$38,$30,$33,$32,$34,$30,$0d,$80,$1a,$6c,$00,$c2,$9b,$96,$95,$43,$73,$62,$5c,$6e,$a3,$8f,$3f,$08,$36,$33,$38,$34,$32,$30,$39,$34,$0d,$80,$15,$6d,$00,$c2,$9e,$95,$41,$61,$72,$60,$5c,$7d,$a3,$8f,$42,$5e,$4d,$5f,$63,$42,$80,$1a,$6e,$00,$c2,$a2,$95,$3f,$09,$35,$32,$30,$34,$35,$37,$33,$30,$38,$0d,$a3,$8f,$5f,$41,$58,$71,$5c,$80,$12,$6f,$00,$c2,$8a,$4e,$7e,$65,$54,$7c,$8f,$8a,$4e,$7e,$65,$54,$7c,$80,$14,$70,$00,$c2,$9e,$95,$55,$59,$4c,$6a,$6e,$a3,$8f,$43,$6a,$66,$73,$55,$51,$80,$13,$71,$00,$c2,$98,$95,$3f,$06,$46,$78,$77,$57,$66,$4d,$0d,$a3,$8f,$46,$80,$13,$72,$00,$c2,$99,$95,$62,$7e,$56,$7d,$53,$a3,$8f,$62,$7e,$56,$7d,$53,$80,$15,$73,$00,$c2,$98,$95,$3f,$08,$69,$59,$51,$77,$4a,$43,$65,$62,$0d,$a3,$8f,$48,$80,$1f,$74,$00,$c2,$9b,$96,$95,$8a,$41,$4b,$52,$79,$7f,$68,$a3,$8f,$3f,$0b,$2d,$31,$32,$36,$33,$32,$34,$37,$33,$33,$36,$0d,$80,$1d,$75,$00,$c2,$9b,$96,$95,$41,$52,$7d,$76,$51,$7f,$a3,$8f,$3f,$0a,$31,$33,$39,$31,$39,$34,$34,$38,$33,$31,$0d,$80,$23,$76,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1d,$77,$00,$c2,$9b,$96,$95,$41,$78,$7b,$7e,$43,$47,$a3,$8f,$3f,$0a,$32,$30,$32,$38,$39,$38,$36,$35,$36,$37,$0d,$80,$11,$78,$00,$c2,$9a,$95,$8a,$61,$45,$5f,$4b,$62,$a3,$8f,$8a,$41,$80,$14,$79,$00,$c2,$99,$95,$8a,$56,$5b,$6a,$43,$51,$a3,$8f,$56,$5b,$6a,$43,$51,$80,$11,$7a,$00,$c2,$9a,$95,$8a,$58,$4f,$70,$45,$62,$a3,$8f,$8a,$41,$80,$10,$7b,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$1d,$7c,$00,$c2,$9b,$96,$95,$41,$60,$5f,$72,$5a,$7a,$a3,$8f,$3f,$0a,$31,$36,$31,$38,$39,$34,$35,$37,$32,$32,$0d,$80,$0e,$7d,$00,$c2,$84,$95,$9f,$89,$53,$a3,$8f,$41,$4e,$80,$1d,$7e,$00,$c2,$9b,$96,$95,$41,$79,$46,$47,$5e,$41,$a3,$8f,$3f,$0a,$32,$30,$33,$31,$36,$34,$36,$35,$39,$33,$0d,$80,$13,$7f,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$1d,$80,$00,$c2,$9b,$96,$95,$41,$57,$5d,$40,$56,$6f,$a3,$8f,$3f,$0a,$31,$34,$36,$37,$32,$32,$31,$34,$32,$33,$0d,$80,$13,$81,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$82,$00,$c2,$94,$43,$6b,$79,$7c,$62,$6b,$8f,$43,$6b,$79,$7c,$62,$6b,$80,$14,$83,$00,$c2,$99,$95,$8a,$7a,$4f,$6c,$4f,$44,$a3,$8f,$7a,$4f,$6c,$4f,$44,$80,$10,$84,$00,$c2,$9c,$96,$95,$41,$4e,$a3,$8f,$3f,$01,$4e,$0d,$80,$12,$85,$00,$c2,$9a,$95,$8a,$41,$78,$7c,$48,$56,$6e,$a3,$8f,$8a,$41,$80,$1f,$86,$00,$c2,$9b,$96,$95,$8a,$41,$69,$75,$5b,$64,$70,$a3,$8f,$3f,$0b,$2d,$31,$37,$37,$35,$36,$31,$34,$32,$35,$36,$0d,$80,$0e,$87,$00,$c2,$84,$95,$9f,$89,$4a,$a3,$8f,$41,$45,$80,$14,$88,$00,$c2,$99,$95,$8a,$79,$70,$70,$6c,$72,$a3,$8f,$79,$70,$70,$6c,$72,$80,$10,$89,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$12,$8a,$00,$c2,$8a,$6c,$67,$51,$56,$44,$8f,$8a,$6c,$67,$51,$56,$44,$80,$14,$8b,$00,$c2,$9e,$95,$43,$4f,$59,$53,$6c,$6f,$a3,$8f,$70,$66,$6c,$53,$50,$80,$0e,$8c,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$1d,$8d,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$30,$31,$33,$34,$36,$39,$39,$39,$37,$0d,$a3,$8f,$8a,$7c,$5a,$45,$4c,$6d,$80,$14,$8e,$00,$c2,$9e,$95,$7e,$6e,$76,$72,$72,$a3,$8f,$43,$41,$51,$49,$4d,$4d,$80,$0f,$8f,$00,$c2,$98,$95,$3f,$02,$63,$72,$0d,$a3,$8f,$42,$80,$1c,$90,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$39,$36,$39,$32,$34,$37,$31,$39,$0d,$a3,$8f,$8a,$5d,$67,$67,$60,$6f,$80,$11,$91,$00,$c2,$9a,$95,$8a,$70,$50,$74,$78,$70,$a3,$8f,$8a,$41,$80,$13,$92,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$1f,$93,$00,$c2,$9b,$96,$95,$8a,$41,$76,$76,$7d,$6d,$77,$a3,$8f,$3f,$0b,$2d,$31,$39,$39,$34,$31,$32,$30,$30,$35,$35,$0d,$80,$13,$94,$00,$c2,$94,$43,$5b,$49,$47,$41,$64,$8f,$43,$5b,$49,$47,$41,$64,$80,$15,$95,$00,$c2,$9e,$95,$42,$72,$45,$5f,$59,$56,$a3,$8f,$41,$4d,$7a,$60,$66,$69,$80,$11,$96,$00,$c2,$9d,$95,$3f,$03,$45,$51,$4f,$0d,$a3,$8f,$41,$45,$80,$1a,$97,$00,$c2,$a2,$95,$3f,$09,$39,$32,$34,$33,$31,$35,$30,$36,$35,$0d,$a3,$8f,$77,$45,$7e,$76,$79,$80,$1c,$98,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$34,$32,$38,$38,$38,$33,$38,$32,$0d,$a3,$8f,$8a,$4e,$5e,$62,$7a,$7e,$80,$0f,$99,$00,$c2,$9d,$95,$3f,$01,$64,$0d,$a3,$8f,$41,$64,$80,$1b,$9a,$00,$c2,$9b,$96,$95,$50,$74,$62,$75,$61,$a3,$8f,$3f,$09,$32,$38,$32,$32,$30,$39,$36,$33,$33,$0d,$80,$25,$9b,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$11,$9c,$00,$c2,$94,$7c,$68,$74,$7c,$60,$8f,$7c,$68,$74,$7c,$60,$80,$24,$9d,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1d,$9e,$00,$c2,$9b,$96,$95,$41,$51,$67,$79,$50,$61,$a3,$8f,$3f,$0a,$31,$33,$36,$39,$34,$31,$32,$36,$34,$31,$0d,$80,$12,$9f,$00,$c2,$9a,$95,$8a,$41,$51,$4a,$7a,$66,$71,$a3,$8f,$8a,$41,$80,$12,$a0,$00,$c2,$8a,$8a,$5c,$6a,$70,$5c,$43,$8f,$5c,$6a,$70,$5c,$43,$80,$0f,$a1,$00,$c2,$9d,$95,$3f,$01,$75,$0d,$a3,$8f,$41,$75,$80,$12,$a2,$00,$c2,$8a,$8a,$76,$7d,$5f,$59,$68,$8f,$76,$7d,$5f,$59,$68,$80,$16,$a3,$00,$c2,$9d,$95,$3f,$08,$55,$71,$4d,$6c,$64,$4e,$49,$6b,$0d,$a3,$8f,$41,$55,$80,$10,$a4,$00,$c2,$9a,$95,$41,$7a,$78,$7e,$76,$78,$a3,$8f,$41,$80,$1c,$a5,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$37,$32,$38,$30,$38,$39,$38,$36,$0d,$a3,$8f,$41,$51,$74,$76,$5c,$5a,$80,$14,$a6,$00,$c2,$9e,$95,$43,$58,$6e,$45,$66,$65,$a3,$8f,$67,$51,$7a,$59,$5a,$80,$1c,$a7,$00,$c2,$a2,$95,$3f,$0a,$32,$30,$34,$35,$36,$34,$39,$31,$32,$30,$0d,$a3,$8f,$41,$79,$7b,$62,$43,$60,$80,$0d,$a8,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$1c,$a9,$00,$c2,$a2,$95,$3f,$0a,$2d,$37,$30,$38,$30,$39,$30,$35,$32,$31,$0d,$a3,$8f,$8a,$6a,$4d,$49,$6a,$59,$80,$13,$aa,$00,$c2,$94,$41,$76,$4f,$61,$4a,$66,$8f,$41,$76,$4f,$61,$4a,$66,$80,$22,$ab,$00,$c2,$96,$95,$9f,$89,$4d,$a3,$8f,$3f,$13,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$ac,$00,$c2,$94,$42,$54,$73,$53,$4e,$61,$8f,$42,$54,$73,$53,$4e,$61,$80,$0e,$ad,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$12,$ae,$00,$c2,$8a,$58,$79,$44,$68,$56,$8f,$8a,$58,$79,$44,$68,$56,$80,$1b,$af,$00,$c2,$a2,$95,$3f,$09,$2d,$39,$32,$30,$36,$32,$34,$31,$31,$0d,$a3,$8f,$8a,$45,$5f,$4c,$4b,$4b,$80,$11,$b0,$00,$c2,$9d,$95,$3f,$03,$56,$48,$63,$0d,$a3,$8f,$41,$56,$80,$15,$b1,$00,$c2,$9e,$95,$42,$6f,$6a,$67,$68,$7d,$a3,$8f,$41,$50,$55,$58,$57,$42,$80,$15,$b2,$00,$c2,$9e,$95,$42,$6c,$77,$67,$67,$7c,$a3,$8f,$41,$53,$48,$58,$58,$43,$80,$14,$b3,$00,$c2,$8a,$41,$65,$63,$69,$6c,$5f,$8f,$8a,$41,$65,$63,$69,$6c,$5f,$80,$15,$b4,$00,$c2,$9e,$95,$41,$54,$62,$67,$78,$7b,$a3,$8f,$42,$6b,$5d,$58,$47,$44,$80,$15,$b5,$00,$c2,$98,$95,$3f,$08,$7a,$71,$6d,$49,$42,$46,$53,$76,$0d,$a3,$8f,$48,$80,$1b,$b6,$00,$c2,$9b,$96,$95,$56,$6e,$78,$74,$57,$a3,$8f,$3f,$09,$33,$38,$31,$33,$39,$30,$31,$30,$33,$0d,$80,$10,$b7,$00,$c2,$9c,$96,$95,$41,$54,$a3,$8f,$3f,$01,$54,$0d,$80,$11,$b8,$00,$c2,$94,$59,$65,$57,$67,$4c,$8f,$59,$65,$57,$67,$4c,$80,$12,$b9,$00,$c2,$8a,$4f,$5c,$7d,$77,$56,$8f,$8a,$4f,$5c,$7d,$77,$56,$80,$14,$ba,$00,$c2,$9d,$95,$3f,$06,$75,$58,$72,$6f,$66,$58,$0d,$a3,$8f,$41,$75,$80,$12,$bb,$00,$c2,$8a,$4d,$41,$54,$6e,$58,$8f,$8a,$4d,$41,$54,$6e,$58,$80,$10,$bc,$00,$c2,$9d,$95,$3f,$02,$4a,$71,$0d,$a3,$8f,$41,$4a,$80,$13,$bd,$00,$c2,$83,$95,$9f,$89,$50,$a3,$8f,$94,$41,$4e,$53,$54,$71,$4b,$80,$14,$be,$00,$c2,$9e,$95,$43,$62,$5e,$4d,$65,$4f,$a3,$8f,$5d,$61,$72,$5a,$70,$80,$1b,$bf,$00,$c2,$9b,$96,$95,$52,$51,$60,$52,$4a,$a3,$8f,$3f,$09,$33,$30,$36,$35,$37,$38,$35,$37,$30,$0d,$80,$12,$c0,$00,$c2,$9a,$95,$8a,$41,$44,$6b,$72,$54,$72,$a3,$8f,$8a,$41,$80,$14,$c1,$00,$c2,$99,$95,$8a,$61,$76,$79,$4a,$60,$a3,$8f,$61,$76,$79,$4a,$60,$80,$13,$c2,$00,$c2,$98,$95,$3f,$06,$67,$59,$73,$48,$42,$6c,$0d,$a3,$8f,$46,$80,$13,$c3,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$1c,$c4,$00,$c2,$a2,$95,$3f,$0a,$31,$36,$33,$34,$32,$34,$39,$37,$38,$31,$0d,$a3,$8f,$41,$61,$5a,$4a,$70,$75,$80,$10,$c5,$00,$c2,$9d,$95,$3f,$02,$5a,$70,$0d,$a3,$8f,$41,$5a,$80,$16,$c6,$00,$c2,$99,$95,$8a,$41,$55,$44,$7b,$78,$5d,$a3,$8f,$41,$55,$44,$7b,$78,$5d,$80,$13,$c7,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$1c,$c8,$00,$c2,$a2,$95,$3f,$0a,$31,$38,$36,$38,$30,$38,$37,$39,$34,$37,$0d,$a3,$8f,$41,$6f,$56,$4c,$4a,$4b,$80,$1f,$c9,$00,$c2,$9b,$96,$95,$8a,$41,$51,$45,$49,$5a,$42,$a3,$8f,$3f,$0b,$2d,$31,$33,$36,$30,$33,$30,$33,$37,$34,$36,$0d,$80,$1e,$ca,$00,$c2,$96,$95,$9f,$89,$51,$a3,$8f,$3f,$0f,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:20D4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:30D4 -  -  -  -  EndTestInstance:
   18 00:30D4 -  -  -  -  		
   19 00:30D4 -  -  -  -  ; ***************************************************************************************
   20 00:30D4 -  -  -  -  ;
   21 00:30D4 -  -  -  -  ;									Changes and Updates
   22 00:30D4 -  -  -  -  ;
   23 00:30D4 -  -  -  -  ; ***************************************************************************************
   24 00:30D4 -  -  -  -  ;
   25 00:30D4 -  -  -  -  ;		Date			Notes
   26 00:30D4 -  -  -  -  ;		==== 			=====
   27 00:30D4 -  -  -  -  ;
   28 00:30D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:30D4 -  -  -  -  FinalAddress:
