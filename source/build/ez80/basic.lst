    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  ST_CodePosSize = 5 							; bytes required to store code position.
   13 00:0000 -  -  -  -  
   14 00:0000 -  -  -  -  STM_GOSUB = $11 + ST_CodePosSize 			; Gosub : Element 1, one position in code
   15 00:0000 -  -  -  -  											; (add 1 for the marker itself)
   16 00:0000 -  -  -  -  
   17 00:0000 -  -  -  -  STM_REPEAT = $21 + ST_CodePosSize 			; Repeat : Element 1, one position in code
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  ; ***************************************************************************************
   20 00:0000 -  -  -  -  ;
   21 00:0000 -  -  -  -  ;									Changes and Updates
   22 00:0000 -  -  -  -  ;
   23 00:0000 -  -  -  -  ; ***************************************************************************************
   24 00:0000 -  -  -  -  ;
   25 00:0000 -  -  -  -  ;		Date			Notes
   26 00:0000 -  -  -  -  ;		==== 			=====
   27 00:0000 -  -  -  -  ;
   28 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_GOSUB = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_GOSUB
   56 00:0000             	ld a,ERRID_GOSUB
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_INDEX = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_INDEX
   63 00:0000             	ld a,ERRID_INDEX
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_LINENO = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_LINENO
   70 00:0000             	ld a,ERRID_LINENO
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_MEMORY = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_MEMORY
   77 00:0000             	ld a,ERRID_MEMORY
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NEXT = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NEXT
   84 00:0000             	ld a,ERRID_NEXT
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOCOMMA = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   91 00:0000             	ld a,ERRID_NOCOMMA
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NODOLLAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   98 00:0000             	ld a,ERRID_NODOLLAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NOLBRACKET = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  105 00:0000             	ld a,ERRID_NOLBRACKET
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NORBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  112 00:0000             	ld a,ERRID_NORBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOTREF = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOTREF
  119 00:0000             	ld a,ERRID_NOTREF
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_REPEAT = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_REPEAT
  126 00:0000             	ld a,ERRID_REPEAT
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_STACK = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_STACK
  133 00:0000             	ld a,ERRID_STACK
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_STOP = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_STOP
  140 00:0000             	ld a,ERRID_STOP
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_SYNTAX = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_SYNTAX
  147 00:0000             	ld a,ERRID_SYNTAX
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_TODO = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_TODO
  154 00:0000             	ld a,ERRID_TODO
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  161 00:0000             	ld a,ERRID_UNKNOWNVAR
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:0000             		ld 		sp,$BFFF
   41 00:0000             #endif
   42 00:0000             
   43 00:0000             #endif
   44 00:0000 CD B4 10 00 		call 	SYSInitialise
   45 00:0004 11 00 14 00 		ld 		de,TestInstance
   46 00:0008 21 70 24 00 		ld 		hl,EndTestInstance
   47 00:000C CD F9 08 00 		call 	SetCurrentInstance
   48 00:0010 -  -  -  -  
   49 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:0012 32 64 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:0016 -  -  -  -  		
   52 00:0016 C3 B0 02 00 		jp 		Command_RUN
   53 00:001A -  -  -  -  
   54 00:001A -  -  -  -  WarmStart:		
   55 00:001A 3E 2A -  -  		ld 		a,'*'
   56 00:001C CD B6 10 00 		call 	SYSPrintChar
   57 00:0020 CD B5 10 00 		call 	SYSTerminate
   58 00:0024 -  -  -  -  
   59 00:0024 -  -  -  -  Unimplemented:
   60 00:0024 3E 05 C3 6D 
              03 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:002A -  -  -  -  Int32DivZeroHandler:
   62 00:002A 3E 06 C3 6D 
              03 00 -  -  		ERR_DIVZERO
   63 00:0030 -  -  -  -  
   64 00:0030 -  -  -  -  ; ***************************************************************************************
   65 00:0030 -  -  -  -  ;
   66 00:0030 -  -  -  -  ;									Changes and Updates
   67 00:0030 -  -  -  -  ;
   68 00:0030 -  -  -  -  ; ***************************************************************************************
   69 00:0030 -  -  -  -  ;
   70 00:0030 -  -  -  -  ;		Date			Notes
   71 00:0030 -  -  -  -  ;		==== 			=====
   72 00:0030 -  -  -  -  ;
   73 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  
   78 00:005C -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  		
   81 00:0060 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:0060 00 00 00 00 		.dw 	0,0
   83 00:0064 -  -  -  -  
   84 00:0064 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:0064 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006A -  -  -  -  
   87 00:006A -  -  -  -  AConvert: 									; used for address conversions.
   88 00:006A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:0070 -  -  -  -  		
   90 00:0070 -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:0080 -  -  -  -  
   93 00:0080 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:0080 00 00 -  -  		.dw 	0
   95 00:0082 -  -  -  -  
   96 00:0082 -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:0082 00 00 -  -  		.dw 	0 
   98 00:0084 -  -  -  -  		
   99 00:0084 -  -  -  -  ; ***************************************************************************************
  100 00:0084 -  -  -  -  ;
  101 00:0084 -  -  -  -  ;									Variable Information
  102 00:0084 -  -  -  -  ;
  103 00:0084 -  -  -  -  ; ***************************************************************************************
  104 00:0084 -  -  -  -  
  105 00:0084 -  -  -  -  VarNameStart: 								; first byte of name
  106 00:0084 00 00 00 00 		.dw 	0,0
  107 00:0088 -  -  -  -  VarHash: 									; name hash value
  108 00:0088 00 00 -  -  		.dw 	0		
  109 00:008A -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 00:008A 00 00 00 00 		.dw 	0,0
  111 00:008E -  -  -  -  		
  112 00:008E -  -  -  -  ; ***************************************************************************************
  113 00:008E -  -  -  -  ;
  114 00:008E -  -  -  -  ;										  Buffers
  115 00:008E -  -  -  -  ;
  116 00:008E -  -  -  -  ; ***************************************************************************************
  117 00:008E -  -  -  -  
  118 00:008E -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 00:008E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 00:009E -  -  -  -  
  121 00:009E -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 00:009E 00 00 -  -  		.dw 	0
  123 00:00A0 -  -  -  -  
  124 00:00A0 -  -  -  -  ConvertBuffer: 								; general usage
  125 00:00A0 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 00:00E0 -  -  -  -  
  127 00:00E0 -  -  -  -  ; ***************************************************************************************
  128 00:00E0 -  -  -  -  ;
  129 00:00E0 -  -  -  -  ;									Changes and Updates
  130 00:00E0 -  -  -  -  ;
  131 00:00E0 -  -  -  -  ; ***************************************************************************************
  132 00:00E0 -  -  -  -  ;
  133 00:00E0 -  -  -  -  ;		Date			Notes
  134 00:00E0 -  -  -  -  ;		==== 			=====
  135 00:00E0 -  -  -  -  ;
  136 00:00E0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:00E0 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00E0 -  -  -  -  ; ***************************************************************************************
    2 00:00E0 -  -  -  -  ; ***************************************************************************************
    3 00:00E0 -  -  -  -  ;
    4 00:00E0 -  -  -  -  ;		Name : 		assert.asm
    5 00:00E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E0 -  -  -  -  ;		Reviewed :	No
    8 00:00E0 -  -  -  -  ;		Purpose :	Assert command
    9 00:00E0 -  -  -  -  ;
   10 00:00E0 -  -  -  -  ; ***************************************************************************************
   11 00:00E0 -  -  -  -  ; ***************************************************************************************
   12 00:00E0 -  -  -  -  
   13 00:00E0 -  -  -  -  ; ***************************************************************************************
   14 00:00E0 -  -  -  -  ;
   15 00:00E0 -  -  -  -  ;									ASSERT command
   16 00:00E0 -  -  -  -  ;
   17 00:00E0 -  -  -  -  ; ***************************************************************************************
   18 00:00E0 -  -  -  -  
   19 00:00E0 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00E0 CD A0 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00E4 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00EA C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00EB 3E 01 C3 6D 
              03 00 -  -  		ERR_ASSERT
   24 00:00F1 -  -  -  -  
   25 00:00F1 -  -  -  -  ; ***************************************************************************************
   26 00:00F1 -  -  -  -  ;
   27 00:00F1 -  -  -  -  ;									Changes and Updates
   28 00:00F1 -  -  -  -  ;
   29 00:00F1 -  -  -  -  ; ***************************************************************************************
   30 00:00F1 -  -  -  -  ;
   31 00:00F1 -  -  -  -  ;		Date			Notes
   32 00:00F1 -  -  -  -  ;		==== 			=====
   33 00:00F1 -  -  -  -  ;
   34 00:00F1 -  -  -  -  ; ***************************************************************************************
   35 00:00F1 -  -  -  -  		
Listing for file "_build.asm"
   15 00:00F1 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00F1 -  -  -  -  ; ***************************************************************************************
    2 00:00F1 -  -  -  -  ; ***************************************************************************************
    3 00:00F1 -  -  -  -  ;
    4 00:00F1 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F1 -  -  -  -  ;		Reviewed :	No
    8 00:00F1 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00F1 -  -  -  -  ;
   10 00:00F1 -  -  -  -  ; ***************************************************************************************
   11 00:00F1 -  -  -  -  ; ***************************************************************************************
   12 00:00F1 -  -  -  -  
   13 00:00F1 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00F1 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00F1 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00F1 -  -  -  -  BadCmd_Comma: 		;; [~]
   17 00:00F1 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 00:00F1 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00F1 C3 D7 03 00 		jp 		SyntaxError
   20 00:00F5 -  -  -  -  
   21 00:00F5 -  -  -  -  ; ***************************************************************************************
   22 00:00F5 -  -  -  -  ;
   23 00:00F5 -  -  -  -  ;									Changes and Updates
   24 00:00F5 -  -  -  -  ;
   25 00:00F5 -  -  -  -  ; ***************************************************************************************
   26 00:00F5 -  -  -  -  ;
   27 00:00F5 -  -  -  -  ;		Date			Notes
   28 00:00F5 -  -  -  -  ;		==== 			=====
   29 00:00F5 -  -  -  -  ;
   30 00:00F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00F5 -  -  -  -  ; ***************************************************************************************
    2 00:00F5 -  -  -  -  ; ***************************************************************************************
    3 00:00F5 -  -  -  -  ;
    4 00:00F5 -  -  -  -  ;		Name : 		colon.asm
    5 00:00F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00F5 -  -  -  -  ;		Reviewed :	No
    8 00:00F5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00F5 -  -  -  -  ;
   10 00:00F5 -  -  -  -  ; ***************************************************************************************
   11 00:00F5 -  -  -  -  ; ***************************************************************************************
   12 00:00F5 -  -  -  -  
   13 00:00F5 -  -  -  -  ; ***************************************************************************************
   14 00:00F5 -  -  -  -  ;
   15 00:00F5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00F5 -  -  -  -  ;
   17 00:00F5 -  -  -  -  ; ***************************************************************************************
   18 00:00F5 -  -  -  -  
   19 00:00F5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00F5 C9 -  -  -  		ret
   21 00:00F6 -  -  -  -  
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  ;
   24 00:00F6 -  -  -  -  ;									Changes and Updates
   25 00:00F6 -  -  -  -  ;
   26 00:00F6 -  -  -  -  ; ***************************************************************************************
   27 00:00F6 -  -  -  -  ;
   28 00:00F6 -  -  -  -  ;		Date			Notes
   29 00:00F6 -  -  -  -  ;		==== 			=====
   30 00:00F6 -  -  -  -  ;
   31 00:00F6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:00F6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F6 -  -  -  -  ; ***************************************************************************************
    2 00:00F6 -  -  -  -  ; ***************************************************************************************
    3 00:00F6 -  -  -  -  ;
    4 00:00F6 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F6 -  -  -  -  ;		Reviewed :	No
    8 00:00F6 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F6 -  -  -  -  ;
   10 00:00F6 -  -  -  -  ; ***************************************************************************************
   11 00:00F6 -  -  -  -  ; ***************************************************************************************
   12 00:00F6 -  -  -  -  
   13 00:00F6 -  -  -  -  ; ***************************************************************************************
   14 00:00F6 -  -  -  -  ;
   15 00:00F6 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:00F6 -  -  -  -  ;	
   17 00:00F6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:00F6 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:00F6 -  -  -  -  ;								(can be comma chained)
   20 00:00F6 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:00F6 -  -  -  -  ;
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  
   24 00:00F6 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:00F6 -  -  -  -  		;
   26 00:00F6 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:00F6 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:00F6 -  -  -  -  		;
   29 00:00F6 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:00F8 D1 -  -  -  		pop 	de
   31 00:00F9 -  -  -  -  		;
   32 00:00F9 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:00FC FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:00FE D2 D7 03 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:0102 -  -  -  -  _DISkip:
   36 00:0102 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:0104 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:0107 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:0109 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:010B -  -  -  -  		;
   41 00:010B DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:010E FE 95 -  -  		cp 		KWD_LPAREN
   43 00:0110 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:0111 CC 72 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:0115 F1 -  -  -  		pop 	af
   46 00:0116 C4 2A 01 00 		call 	nz,DimensionAllocate
   47 00:011A -  -  -  -  		;
   48 00:011A DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:011D FE A6 -  -  		cp 		KWD_COMMA
   50 00:011F C0 -  -  -  		ret 	nz
   51 00:0120 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:0122 18 D2 -  -  		jr 		Command_DIM
   53 00:0124 -  -  -  -  
   54 00:0124 -  -  -  -  _CDError:
   55 00:0124 3E 04 C3 6D 
              03 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:012A -  -  -  -  
   57 00:012A -  -  -  -  ; ***************************************************************************************
   58 00:012A -  -  -  -  ;
   59 00:012A -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:012A -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:012A -  -  -  -  ;
   62 00:012A -  -  -  -  ; ***************************************************************************************
   63 00:012A -  -  -  -  
   64 00:012A -  -  -  -  DimensionAllocate:
   65 00:012A D5 -  -  -  		push 	de 							; save start on stack
   66 00:012B DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:012D 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:012F 32 80 00 00 		ld 		(AllowAutoCreate),a
   69 00:0133 CD 82 0A 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:0137 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:0139 28 E9 -  -  		jr 		z,_CDError
   72 00:013B CB 41 -  -  		bit 	CIsString,c
   73 00:013D 20 E5 -  -  		jr 		nz,_CDError
   74 00:013F DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:0141 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:0142 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:0144 CD 61 03 00 		call 	CheckNextA 					; check for [
   78 00:0148 CD A0 05 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:014C 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:014E CD 61 03 00 		call 	CheckNextA 					; check for ]
   81 00:0152 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:0153 7C -  -  -  		ld 		a,h
   83 00:0154 B5 -  -  -  		or 		l
   84 00:0155 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:0157 D9 -  -  -  		exx
   86 00:0158 23 -  -  -  		inc 	hl
   87 00:0159 D9 -  -  -  		exx
   88 00:015A -  -  -  -  _DANoCarry:
   89 00:015A D9 -  -  -  		exx 								; check if HL' is zero
   90 00:015B 7C -  -  -  		ld 		a,h
   91 00:015C B5 -  -  -  		or 		l
   92 00:015D D9 -  -  -  		exx
   93 00:015E 20 C4 -  -  		jr 		nz,_CDError
   94 00:0160 CD 86 08 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:0164 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:0165 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:0166 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:016C AF -  -  -  		xor 	a 							; autocreate off
   99 00:016D 32 80 00 00 		ld 		(AllowAutoCreate),a
  100 00:0171 C9 -  -  -  		ret
  101 00:0172 -  -  -  -  
  102 00:0172 -  -  -  -  ; ***************************************************************************************
  103 00:0172 -  -  -  -  ;
  104 00:0172 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:0172 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:0172 -  -  -  -  ;
  107 00:0172 -  -  -  -  ; ***************************************************************************************
  108 00:0172 -  -  -  -  
  109 00:0172 -  -  -  -  DimensionArray:
  110 00:0172 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:0173 -  -  -  -  		;
  112 00:0173 CD A0 05 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:0177 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:0178 E6 FC -  -  		and 	$FC
  115 00:017A D9 -  -  -  		exx
  116 00:017B B4 -  -  -  		or 		h
  117 00:017C B5 -  -  -  		or 		l
  118 00:017D D9 -  -  -  		exx
  119 00:017E 20 A4 -  -  		jr 		nz,_CDError
  120 00:0180 -  -  -  -  		;
  121 00:0180 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:0182 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:0183 -  -  -  -  		;
  124 00:0183 CD 0F 0B 00 		call 	VariableInformation 		; get information about this array
  125 00:0187 CD 4B 0B 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:018B 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:018D -  -  -  -  		;
  128 00:018D E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:018E E5 -  -  -  		push 	hl
  130 00:018F 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:0190 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:0191 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:0192 29 -  -  -  		add 	hl,hl
  134 00:0193 CD 3F 0A 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:0197 -  -  -  -  		;
  136 00:0197 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:0198 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:019C 09 -  -  -  		add 	hl,bc
  139 00:019D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:01A3 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:01A5 C9 -  -  -  		ret		
  142 00:01A6 -  -  -  -  
  143 00:01A6 -  -  -  -  
  144 00:01A6 -  -  -  -  ; ***************************************************************************************
  145 00:01A6 -  -  -  -  ;
  146 00:01A6 -  -  -  -  ;									Changes and Updates
  147 00:01A6 -  -  -  -  ;
  148 00:01A6 -  -  -  -  ; ***************************************************************************************
  149 00:01A6 -  -  -  -  ;
  150 00:01A6 -  -  -  -  ;		Date			Notes
  151 00:01A6 -  -  -  -  ;		==== 			=====
  152 00:01A6 -  -  -  -  ;
  153 00:01A6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:01A6 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:01A6 -  -  -  -  ; ***************************************************************************************
    2 00:01A6 -  -  -  -  ; ***************************************************************************************
    3 00:01A6 -  -  -  -  ;
    4 00:01A6 -  -  -  -  ;		Name : 		end.asm
    5 00:01A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A6 -  -  -  -  ;		Reviewed :	No
    8 00:01A6 -  -  -  -  ;		Purpose :	End command
    9 00:01A6 -  -  -  -  ;
   10 00:01A6 -  -  -  -  ; ***************************************************************************************
   11 00:01A6 -  -  -  -  ; ***************************************************************************************
   12 00:01A6 -  -  -  -  
   13 00:01A6 -  -  -  -  ; ***************************************************************************************
   14 00:01A6 -  -  -  -  ;
   15 00:01A6 -  -  -  -  ;										END command
   16 00:01A6 -  -  -  -  ;
   17 00:01A6 -  -  -  -  ; ***************************************************************************************
   18 00:01A6 -  -  -  -  
   19 00:01A6 -  -  -  -  Command_END: 	;; [end]
   20 00:01A6 3E 00 C3 6D 
              03 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:01AC -  -  -  -  
   22 00:01AC -  -  -  -  ; ***************************************************************************************
   23 00:01AC -  -  -  -  ;
   24 00:01AC -  -  -  -  ;									Changes and Updates
   25 00:01AC -  -  -  -  ;
   26 00:01AC -  -  -  -  ; ***************************************************************************************
   27 00:01AC -  -  -  -  ;
   28 00:01AC -  -  -  -  ;		Date			Notes
   29 00:01AC -  -  -  -  ;		==== 			=====
   30 00:01AC -  -  -  -  ;
   31 00:01AC -  -  -  -  ; ***************************************************************************************
   32 00:01AC -  -  -  -  		
Listing for file "_build.asm"
   19 00:01AC -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:01AC -  -  -  -  ; ***************************************************************************************
    2 00:01AC -  -  -  -  ; ***************************************************************************************
    3 00:01AC -  -  -  -  ;
    4 00:01AC -  -  -  -  ;		Name : 		endofline.asm
    5 00:01AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01AC -  -  -  -  ;		Reviewed :	None
    8 00:01AC -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:01AC -  -  -  -  ;
   10 00:01AC -  -  -  -  ; ***************************************************************************************
   11 00:01AC -  -  -  -  ; ***************************************************************************************
   12 00:01AC -  -  -  -  
   13 00:01AC -  -  -  -  ; ***************************************************************************************
   14 00:01AC -  -  -  -  ;
   15 00:01AC -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:01AC -  -  -  -  ;
   17 00:01AC -  -  -  -  ; ***************************************************************************************
   18 00:01AC -  -  -  -  
   19 00:01AC -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:01AC DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:01B1 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:01B5 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:01B8 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:01BA -  -  -  -  		;
   25 00:01BA ED 7B 60 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:01BF C3 C3 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:01C3 -  -  -  -  
   28 00:01C3 -  -  -  -  ; ***************************************************************************************
   29 00:01C3 -  -  -  -  ;
   30 00:01C3 -  -  -  -  ;									Changes and Updates
   31 00:01C3 -  -  -  -  ;
   32 00:01C3 -  -  -  -  ; ***************************************************************************************
   33 00:01C3 -  -  -  -  ;
   34 00:01C3 -  -  -  -  ;		Date			Notes
   35 00:01C3 -  -  -  -  ;		==== 			=====
   36 00:01C3 -  -  -  -  ;
   37 00:01C3 -  -  -  -  ; ***************************************************************************************
   38 00:01C3 -  -  -  -  		
Listing for file "_build.asm"
   20 00:01C3 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:01C3 -  -  -  -  ; ***************************************************************************************
    2 00:01C3 -  -  -  -  ; ***************************************************************************************
    3 00:01C3 -  -  -  -  ;
    4 00:01C3 -  -  -  -  ;		Name : 		let.asm
    5 00:01C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01C3 -  -  -  -  ;		Date : 		4th June 2022
    7 00:01C3 -  -  -  -  ;		Reviewed :	No
    8 00:01C3 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:01C3 -  -  -  -  ;
   10 00:01C3 -  -  -  -  ; ***************************************************************************************
   11 00:01C3 -  -  -  -  ; ***************************************************************************************
   12 00:01C3 -  -  -  -  
   13 00:01C3 -  -  -  -  ; ***************************************************************************************
   14 00:01C3 -  -  -  -  ;
   15 00:01C3 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:01C3 -  -  -  -  ;
   17 00:01C3 -  -  -  -  ; ***************************************************************************************
   18 00:01C3 -  -  -  -  
   19 00:01C3 -  -  -  -  Command_LET: 	;; [let]
   20 00:01C3 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:01C6 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:01C8 28 2F -  -  		jr 		z,_CLString
   23 00:01CA FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:01CC 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:01CE 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:01D0 32 80 00 00 		ld 		(AllowAutoCreate),a
   27 00:01D4 -  -  -  -  _CLNoAuto:
   28 00:01D4 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01D6 CD 22 05 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01DA CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01DC CA D7 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01E0 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01E1 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01E2 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01E3 32 80 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01E7 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01E9 CD 61 03 00 		call 	CheckNextA
   38 00:01ED -  -  -  -  
   39 00:01ED CD 98 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01F1 -  -  -  -  
   41 00:01F1 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01F2 43 -  -  -  		ld 		b,e 						
   43 00:01F3 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01F4 -  -  -  -  		;
   45 00:01F4 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01F4 -  -  -  -  		;
   47 00:01F4 CD 12 02 00 		call 	WriteHLToDE
   48 00:01F8 C9 -  -  -  		ret
   49 00:01F9 -  -  -  -  		;
   50 00:01F9 -  -  -  -  		; 		String assignment code.
   51 00:01F9 -  -  -  -  		;
   52 00:01F9 -  -  -  -  _CLString:
   53 00:01F9 CD 89 05 00 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:01FD E5 -  -  -  		push 	hl 							; save target expression
   55 00:01FE 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:0200 CD 61 03 00 		call 	CheckNextA
   57 00:0204 CD BA 05 00 		call 	EvaluateString 				; get the thing to copy
   58 00:0208 D1 -  -  -  		pop 	de 							; target in DE.
   59 00:0209 -  -  -  -  _CLCopy:
   60 00:0209 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:020A 12 -  -  -  		ld 		(de),a
   62 00:020B 23 -  -  -  		inc 	hl
   63 00:020C 13 -  -  -  		inc 	de
   64 00:020D FE 20 -  -  		cp 		$20 						; until control character
   65 00:020F 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:0211 C9 -  -  -  		ret
   67 00:0212 -  -  -  -  
   68 00:0212 -  -  -  -  ; ***************************************************************************************
   69 00:0212 -  -  -  -  ;
   70 00:0212 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:0212 -  -  -  -  ;
   72 00:0212 -  -  -  -  ; ***************************************************************************************
   73 00:0212 -  -  -  -  
   74 00:0212 -  -  -  -  WriteHLToDE:
   75 00:0212 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:0214 C2 CB 03 00 		jp 		nz,TypeMismatch
   77 00:0218 -  -  -  -  		;
   78 00:0218 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:0218 -  -  -  -  		;		
   80 00:0218 -  -  -  -  _WHDWriteNumber:
   81 00:0218 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:0219 D9 -  -  -  		exx
   83 00:021A EB -  -  -  		ex 		de,hl
   84 00:021B D9 -  -  -  		exx
   85 00:021C -  -  -  -  
   86 00:021C 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:021D 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:021E 72 -  -  -  		ld 		(hl),d
   89 00:021F 23 -  -  -  		inc 	hl
   90 00:0220 E5 -  -  -  		push 	hl
   91 00:0221 D9 -  -  -  		exx
   92 00:0222 E1 -  -  -  		pop 	hl
   93 00:0223 73 -  -  -  		ld 		(hl),e
   94 00:0224 23 -  -  -  		inc 	hl
   95 00:0225 72 -  -  -  		ld 		(hl),d
   96 00:0226 D9 -  -  -  		exx
   97 00:0227 -  -  -  -  
   98 00:0227 C9 -  -  -  		ret
   99 00:0228 -  -  -  -  
  100 00:0228 -  -  -  -  ; ***************************************************************************************
  101 00:0228 -  -  -  -  ;
  102 00:0228 -  -  -  -  ;									Changes and Updates
  103 00:0228 -  -  -  -  ;
  104 00:0228 -  -  -  -  ; ***************************************************************************************
  105 00:0228 -  -  -  -  ;
  106 00:0228 -  -  -  -  ;		Date			Notes
  107 00:0228 -  -  -  -  ;		==== 			=====
  108 00:0228 -  -  -  -  ;
  109 00:0228 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:0228 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0228 -  -  -  -  ; ***************************************************************************************
    2 00:0228 -  -  -  -  ; ***************************************************************************************
    3 00:0228 -  -  -  -  ;
    4 00:0228 -  -  -  -  ;		Name : 		print.asm
    5 00:0228 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0228 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0228 -  -  -  -  ;		Reviewed :	No
    8 00:0228 -  -  -  -  ;		Purpose :	Print command
    9 00:0228 -  -  -  -  ;
   10 00:0228 -  -  -  -  ; ***************************************************************************************
   11 00:0228 -  -  -  -  ; ***************************************************************************************
   12 00:0228 -  -  -  -  
   13 00:0228 -  -  -  -  ; ***************************************************************************************
   14 00:0228 -  -  -  -  ;
   15 00:0228 -  -  -  -  ;										PRINT command
   16 00:0228 -  -  -  -  ;
   17 00:0228 -  -  -  -  ; ***************************************************************************************
   18 00:0228 -  -  -  -  
   19 00:0228 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0228 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:022A 32 82 00 00 		ld 		(PrintBase),a
   22 00:022E -  -  -  -  		;
   23 00:022E -  -  -  -  		;		Main loop
   24 00:022E -  -  -  -  		;
   25 00:022E -  -  -  -  _CPRLoop:
   26 00:022E DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:0231 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:0233 28 59 -  -  		jr 		z,_CPRExitNL
   29 00:0235 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:0237 28 55 -  -  		jr 		z,_CPRExitNL
   31 00:0239 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:023B 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 00:023D FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:023F 28 34 -  -  		jr 		z,_CPRTab
   35 00:0241 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:0243 28 2A -  -  		jr 		z,_CPRNewLine
   37 00:0245 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:0247 28 1C -  -  		jr 		z,_CPRHexMode
   39 00:0249 -  -  -  -  		;
   40 00:0249 CD 98 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   41 00:024D CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:024F 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 00:0251 -  -  -  -  		;
   44 00:0251 3A 82 00 00 		ld 		a,(PrintBase)				; current print mode.
   45 00:0255 -  -  -  -  _CPRPrintNumber:
   46 00:0255 01 A0 00 00 		ld  	bc,ConvertBuffer
   47 00:0259 C5 -  -  -  		push 	bc
   48 00:025A CD 67 10 00 		call 	Int32ToString 				; convert to string
   49 00:025E E1 -  -  -  		pop 	hl
   50 00:025F -  -  -  -  		;
   51 00:025F -  -  -  -  		; 		Print text at HL.
   52 00:025F -  -  -  -  		;
   53 00:025F -  -  -  -  _CPRPrintHL:
   54 00:025F CD 34 0A 00 		call 	PrintStringAtHL 			; print string out
   55 00:0263 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:0265 -  -  -  -  		;
   57 00:0265 -  -  -  -  		;		Hex mode (~)
   58 00:0265 -  -  -  -  		;
   59 00:0265 -  -  -  -  _CPRHexMode:		
   60 00:0265 3E 10 -  -  		ld 		a,16
   61 00:0267 32 82 00 00 		ld 		(PrintBase),a
   62 00:026B DD 23 -  -  		inc 	ix
   63 00:026D 18 BF -  -  		jr 		_CPRLoop
   64 00:026F -  -  -  -  		;
   65 00:026F -  -  -  -  		; 		New line (')
   66 00:026F -  -  -  -  		;
   67 00:026F -  -  -  -  _CPRNewLine:
   68 00:026F CD B7 10 00 		call 	SYSPrintCRLF
   69 00:0273 18 0C -  -  		jr 		_CPRCheckNext
   70 00:0275 -  -  -  -  		;
   71 00:0275 -  -  -  -  		; 		Tab command (,)
   72 00:0275 -  -  -  -  		;
   73 00:0275 -  -  -  -  _CPRTab:
   74 00:0275 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:0277 CD B6 10 00 		call 	SYSPrintChar
   76 00:027B -  -  -  -  		;
   77 00:027B -  -  -  -  		;		Set to base 10 then check next character
   78 00:027B -  -  -  -  		;
   79 00:027B -  -  -  -  _CPRCheckNext10:		
   80 00:027B 3E F6 -  -  		ld 		a,-10
   81 00:027D 32 82 00 00 		ld 		(PrintBase),a
   82 00:0281 -  -  -  -  		;
   83 00:0281 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:0281 -  -  -  -  		;		
   85 00:0281 -  -  -  -  _CPRCheckNext:
   86 00:0281 DD 23 -  -  		inc 	ix 							; consume current
   87 00:0283 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:0286 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:0288 C8 -  -  -  		ret 	z
   90 00:0289 FE A7 -  -  		cp 		KWD_COLON
   91 00:028B C8 -  -  -  		ret 	z
   92 00:028C 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:028E -  -  -  -  		;
   94 00:028E -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:028E -  -  -  -  		;
   96 00:028E -  -  -  -  _CPRExitNL:
   97 00:028E CD B7 10 00 		call 	SYSPrintCRLF 				; do CR/LF
   98 00:0292 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:0293 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0293 -  -  -  -  ; ***************************************************************************************
    2 00:0293 -  -  -  -  ; ***************************************************************************************
    3 00:0293 -  -  -  -  ;
    4 00:0293 -  -  -  -  ;		Name : 		rem.asm
    5 00:0293 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0293 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0293 -  -  -  -  ;		Reviewed :	No
    8 00:0293 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0293 -  -  -  -  ;
   10 00:0293 -  -  -  -  ; ***************************************************************************************
   11 00:0293 -  -  -  -  ; ***************************************************************************************
   12 00:0293 -  -  -  -  
   13 00:0293 -  -  -  -  ; ***************************************************************************************
   14 00:0293 -  -  -  -  ;
   15 00:0293 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0293 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0293 -  -  -  -  ;
   18 00:0293 -  -  -  -  ; ***************************************************************************************
   19 00:0293 -  -  -  -  
   20 00:0293 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0293 -  -  -  -  Command_REM2: 	;; [']
   22 00:0293 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0296 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:0298 C8 -  -  -  		ret 	z
   25 00:0299 DD 23 -  -  		inc 	ix
   26 00:029B FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:029D C8 -  -  -  		ret 	z
   28 00:029E FE 3F -  -  		cp 		STRING_MARKER
   29 00:02A0 C2 D7 03 00 		jp 		nz,SyntaxError
   30 00:02A4 -  -  -  -  		;		
   31 00:02A4 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:02A8 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:02AB 13 -  -  -  		inc 	de 
   34 00:02AC 13 -  -  -  		inc 	de
   35 00:02AD DD 19 -  -  		add 	ix,de 						; skip string
   36 00:02AF C9 -  -  -  		ret
   37 00:02B0 -  -  -  -  
   38 00:02B0 -  -  -  -  ; ***************************************************************************************
   39 00:02B0 -  -  -  -  ;
   40 00:02B0 -  -  -  -  ;									Changes and Updates
   41 00:02B0 -  -  -  -  ;
   42 00:02B0 -  -  -  -  ; ***************************************************************************************
   43 00:02B0 -  -  -  -  ;
   44 00:02B0 -  -  -  -  ;		Date			Notes
   45 00:02B0 -  -  -  -  ;		==== 			=====
   46 00:02B0 -  -  -  -  ;
   47 00:02B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:02B0 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:02B0 -  -  -  -  ; ***************************************************************************************
    2 00:02B0 -  -  -  -  ; ***************************************************************************************
    3 00:02B0 -  -  -  -  ;
    4 00:02B0 -  -  -  -  ;		Name : 		run.asm
    5 00:02B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02B0 -  -  -  -  ;		Reviewed :	No
    8 00:02B0 -  -  -  -  ;		Purpose :	Run command
    9 00:02B0 -  -  -  -  ;
   10 00:02B0 -  -  -  -  ; ***************************************************************************************
   11 00:02B0 -  -  -  -  ; ***************************************************************************************
   12 00:02B0 -  -  -  -  
   13 00:02B0 -  -  -  -  ; ***************************************************************************************
   14 00:02B0 -  -  -  -  ;
   15 00:02B0 -  -  -  -  ;										RUN command
   16 00:02B0 -  -  -  -  ;
   17 00:02B0 -  -  -  -  ; ***************************************************************************************
   18 00:02B0 -  -  -  -  
   19 00:02B0 -  -  -  -  Command_RUN: 	;; [run]
   20 00:02B0 CD A8 08 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:02B4 -  -  -  -  
   22 00:02B4 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:02B9 ED 73 60 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:02BE AF -  -  -  		xor 	a
   25 00:02BF 32 80 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:02C3 -  -  -  -  		;
   27 00:02C3 -  -  -  -  		; 		New line at IX.
   28 00:02C3 -  -  -  -  		;
   29 00:02C3 -  -  -  -  CRNewLine:
   30 00:02C3 DD 22 5C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:02C8 -  -  -  -  		;
   32 00:02C8 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:02CB B7 -  -  -  		or 		a
   34 00:02CC CA A6 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:02D0 -  -  -  -  		;
   36 00:02D0 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:02D2 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:02D4 DD 23 -  -  		inc 	ix
   39 00:02D6 -  -  -  -  		;
   40 00:02D6 -  -  -  -  		; 		New command at IX
   41 00:02D6 -  -  -  -  		;
   42 00:02D6 -  -  -  -  _CRNewCommand:	
   43 00:02D6 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:02D9 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:02DA F2 15 03 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:02DE -  -  -  -  		;
   47 00:02DE FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:02E0 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:02E2 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:02E4 D2 05 03 00 		jp 		nc,_CRAlternateLets
   51 00:02E8 -  -  -  -  		;
   52 00:02E8 -  -  -  -  _CRDoCommand:		
   53 00:02E8 E6 7F 21 00 
              00 00 6F 29 
              29 11 70 0D 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:02FD DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:02FF CD 64 00 00 		call 	JumpCode 					; call the routine.
   56 00:0303 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:0305 -  -  -  -  		;
   58 00:0305 -  -  -  -  		; 		Do CALL (HL)
   59 00:0305 -  -  -  -  		;
   60 00:0305 -  -  -  -  		;
   61 00:0305 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:0305 -  -  -  -  		;		
   63 00:0305 -  -  -  -  _CRAlternateLets:		
   64 00:0305 FE 83 -  -  		cp 		KWD_PLING
   65 00:0307 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:0309 FE 84 -  -  		cp 		KWD_QMARK
   67 00:030B 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:030D FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:030F 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:0311 C3 D7 03 00 		jp 		SyntaxError
   71 00:0315 -  -  -  -  		;
   72 00:0315 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0315 -  -  -  -  		;
   74 00:0315 -  -  -  -  _CRAssignmentHandler:		
   75 00:0315 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:0317 D2 D7 03 00 		jp 		nc,SyntaxError
   77 00:031B -  -  -  -  _CRAssignmentLet:		
   78 00:031B CD C3 01 00 		call	Command_LET 				; do LET.
   79 00:031F C3 D6 02 00 		jp 		_CRNewCommand
   80 00:0323 -  -  -  -  
   81 00:0323 -  -  -  -  ; ***************************************************************************************
   82 00:0323 -  -  -  -  ;
   83 00:0323 -  -  -  -  ;									Changes and Updates
   84 00:0323 -  -  -  -  ;
   85 00:0323 -  -  -  -  ; ***************************************************************************************
   86 00:0323 -  -  -  -  ;
   87 00:0323 -  -  -  -  ;		Date			Notes
   88 00:0323 -  -  -  -  ;		==== 			=====
   89 00:0323 -  -  -  -  ;
   90 00:0323 -  -  -  -  ; ***************************************************************************************
   91 00:0323 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0323 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0323 -  -  -  -  ; ***************************************************************************************
    2 00:0323 -  -  -  -  ; ***************************************************************************************
    3 00:0323 -  -  -  -  ;
    4 00:0323 -  -  -  -  ;		Name : 		stop.asm
    5 00:0323 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0323 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0323 -  -  -  -  ;		Reviewed :	No
    8 00:0323 -  -  -  -  ;		Purpose :	Stop command
    9 00:0323 -  -  -  -  ;
   10 00:0323 -  -  -  -  ; ***************************************************************************************
   11 00:0323 -  -  -  -  ; ***************************************************************************************
   12 00:0323 -  -  -  -  
   13 00:0323 -  -  -  -  ; ***************************************************************************************
   14 00:0323 -  -  -  -  ;
   15 00:0323 -  -  -  -  ;										STOP command
   16 00:0323 -  -  -  -  ;
   17 00:0323 -  -  -  -  ; ***************************************************************************************
   18 00:0323 -  -  -  -  
   19 00:0323 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0323 3E 13 C3 6D 
              03 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0329 -  -  -  -  
   22 00:0329 -  -  -  -  ; ***************************************************************************************
   23 00:0329 -  -  -  -  ;
   24 00:0329 -  -  -  -  ;									Changes and Updates
   25 00:0329 -  -  -  -  ;
   26 00:0329 -  -  -  -  ; ***************************************************************************************
   27 00:0329 -  -  -  -  ;
   28 00:0329 -  -  -  -  ;		Date			Notes
   29 00:0329 -  -  -  -  ;		==== 			=====
   30 00:0329 -  -  -  -  ;
   31 00:0329 -  -  -  -  ; ***************************************************************************************
   32 00:0329 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0329 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0329 -  -  -  -  ; ***************************************************************************************
    2 00:0329 -  -  -  -  ; ***************************************************************************************
    3 00:0329 -  -  -  -  ;
    4 00:0329 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0329 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0329 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0329 -  -  -  -  ;		Reviewed :	No
    8 00:0329 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0329 -  -  -  -  ;
   10 00:0329 -  -  -  -  ; ***************************************************************************************
   11 00:0329 -  -  -  -  ; ***************************************************************************************
   12 00:0329 -  -  -  -  
   13 00:0329 -  -  -  -  ; ***************************************************************************************
   14 00:0329 -  -  -  -  ;
   15 00:0329 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0329 -  -  -  -  ;
   17 00:0329 -  -  -  -  ; ***************************************************************************************
   18 00:0329 -  -  -  -  
   19 00:0329 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0329             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0329             		inc 	ix
   22 00:0329             		cp 		ch 							; exit if matches
   23 00:0329             		ret 	z
   24 00:0329             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0329             		jp 		ErrorHandler
   26 00:0329             #endmacro
   27 00:0329 -  -  -  -  
   28 00:0329 -  -  -  -  CheckLeftBracket:
   29 00:0329 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0E C3 6D 
              03 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0337 -  -  -  -  
   31 00:0337 -  -  -  -  CheckRightBracket:
   32 00:0337 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0F C3 6D 
              03 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0345 -  -  -  -  
   34 00:0345 -  -  -  -  CheckDollar:
   35 00:0345 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0D C3 6D 
              03 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0353 -  -  -  -  		
   37 00:0353 -  -  -  -  CheckComma:
   38 00:0353 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0C C3 6D 
              03 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0361 -  -  -  -  
   40 00:0361 -  -  -  -  ; ***************************************************************************************
   41 00:0361 -  -  -  -  ;
   42 00:0361 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0361 -  -  -  -  ;
   44 00:0361 -  -  -  -  ; ***************************************************************************************
   45 00:0361 -  -  -  -  
   46 00:0361 -  -  -  -  CheckNextA:
   47 00:0361 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0364 DD 23 -  -  		inc 	ix 							; skip character
   49 00:0366 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:0367 3E 14 C3 6D 
              03 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:036D -  -  -  -  		
   52 00:036D -  -  -  -  ; ***************************************************************************************
   53 00:036D -  -  -  -  ;
   54 00:036D -  -  -  -  ;									Changes and Updates
   55 00:036D -  -  -  -  ;
   56 00:036D -  -  -  -  ; ***************************************************************************************
   57 00:036D -  -  -  -  ;
   58 00:036D -  -  -  -  ;		Date			Notes
   59 00:036D -  -  -  -  ;		==== 			=====
   60 00:036D -  -  -  -  ;
   61 00:036D -  -  -  -  ; ***************************************************************************************
   62 00:036D -  -  -  -  		
Listing for file "_build.asm"
   26 00:036D -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:036D -  -  -  -  ; ***************************************************************************************
    2 00:036D -  -  -  -  ; ***************************************************************************************
    3 00:036D -  -  -  -  ;
    4 00:036D -  -  -  -  ;		Name : 		errors.asm
    5 00:036D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:036D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:036D -  -  -  -  ;		Reviewed :	No
    8 00:036D -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:036D -  -  -  -  ;
   10 00:036D -  -  -  -  ; ***************************************************************************************
   11 00:036D -  -  -  -  ; ***************************************************************************************
   12 00:036D -  -  -  -  
   13 00:036D -  -  -  -  ; ***************************************************************************************
   14 00:036D -  -  -  -  ;
   15 00:036D -  -  -  -  ;								Error handler, message A 
   16 00:036D -  -  -  -  ;
   17 00:036D -  -  -  -  ; ***************************************************************************************
   18 00:036D -  -  -  -  
   19 00:036D -  -  -  -  ErrorHandler:
   20 00:036D F5 -  -  -  		push 	af 						; save error ID
   21 00:036E -  -  -  -  
   22 00:036E 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0372 6F -  -  -  		ld 		l,a
   24 00:0373 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0374 29 -  -  -  		add 	hl,hl 		
   26 00:0375 11 B1 0B 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:0379 19 -  -  -  		add 	hl,de
   28 00:037A ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:037C CD 34 0A 00 		call 	PrintStringAtHL
   30 00:0380 -  -  -  -  		;
   31 00:0380 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0381 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0382 28 2F -  -  		jr 		z,_EHExit
   34 00:0384 -  -  -  -  		;
   35 00:0384 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:0389 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:038C B7 -  -  -  		or 		a
   38 00:038D 28 24 -  -  		jr 		z,_EHExit
   39 00:038F -  -  -  -  
   40 00:038F 21 BB 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0393 CD 34 0A 00 		call 	PrintStringAtHL 
   42 00:0397 -  -  -  -  		
   43 00:0397 D9 -  -  -  		exx								; HL'HL = line number
   44 00:0398 21 00 00 00 		ld 		hl,$0000 		
   45 00:039C D9 -  -  -  		exx 
   46 00:039D DD 6E 01 -  		ld 		l,(ix+1)
   47 00:03A0 DD 66 02 -  		ld 		h,(ix+2)
   48 00:03A3 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:03A5 01 A0 00 00 		ld 		bc,ConvertBuffer
   50 00:03A9 CD 67 10 00 		call 	Int32ToString
   51 00:03AD C5 -  -  -  		push 	bc
   52 00:03AE E1 -  -  -  		pop 	hl
   53 00:03AF CD 34 0A 00 		call 	PrintStringAtHL			; print error line number.
   54 00:03B3 -  -  -  -  _EHExit:		
   55 00:03B3 CD B7 10 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:03B7 C3 1A 00 00 		jp 		WarmStart
   57 00:03BB -  -  -  -  
   58 00:03BB -  -  -  -  _EHAtText:
   59 00:03BB 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:03C5 -  -  -  -  
   61 00:03C5 -  -  -  -  NotImplemented:
   62 00:03C5 3E 05 C3 6D 
              03 00 -  -  		ERR_DISABLED
   63 00:03CB -  -  -  -  TypeMismatch:
   64 00:03CB 3E 02 C3 6D 
              03 00 -  -  		ERR_BADTYPE
   65 00:03D1 -  -  -  -  BadValue:
   66 00:03D1 3E 03 C3 6D 
              03 00 -  -  		ERR_BADVALUE
   67 00:03D7 -  -  -  -  SyntaxError:
   68 00:03D7 3E 14 C3 6D 
              03 00 -  -  		ERR_SYNTAX
   69 00:03DD -  -  -  -  						
   70 00:03DD -  -  -  -  ; ***************************************************************************************
   71 00:03DD -  -  -  -  ;
   72 00:03DD -  -  -  -  ;									Changes and Updates
   73 00:03DD -  -  -  -  ;
   74 00:03DD -  -  -  -  ; ***************************************************************************************
   75 00:03DD -  -  -  -  ;
   76 00:03DD -  -  -  -  ;		Date			Notes
   77 00:03DD -  -  -  -  ;		==== 			=====
   78 00:03DD -  -  -  -  ;
   79 00:03DD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:03DD -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:03DD -  -  -  -  ; ***************************************************************************************
    2 00:03DD -  -  -  -  ; ***************************************************************************************
    3 00:03DD -  -  -  -  ;
    4 00:03DD -  -  -  -  ;		Name : 		basicmath.asm
    5 00:03DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03DD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03DD -  -  -  -  ;		Reviewed :	No
    8 00:03DD -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:03DD -  -  -  -  ;
   10 00:03DD -  -  -  -  ; ***************************************************************************************
   11 00:03DD -  -  -  -  ; ***************************************************************************************
   12 00:03DD -  -  -  -  
   13 00:03DD -  -  -  -  ; ***************************************************************************************
   14 00:03DD -  -  -  -  ;
   15 00:03DD -  -  -  -  ; 									Addition
   16 00:03DD -  -  -  -  ;
   17 00:03DD -  -  -  -  ; ***************************************************************************************
   18 00:03DD -  -  -  -  
   19 00:03DD -  -  -  -  ALUAdd: 		;; [+]
   20 00:03DD CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 E6 
              0F 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:03EB -  -  -  -  
   22 00:03EB -  -  -  -  ; ***************************************************************************************
   23 00:03EB -  -  -  -  ;
   24 00:03EB -  -  -  -  ; 									Subtraction
   25 00:03EB -  -  -  -  ;
   26 00:03EB -  -  -  -  ; ***************************************************************************************
   27 00:03EB -  -  -  -  
   28 00:03EB -  -  -  -  ALUSubtract: 	;; [-]
   29 00:03EB CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 EE 
              0F 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:03F9 -  -  -  -  
   31 00:03F9 -  -  -  -  ; ***************************************************************************************
   32 00:03F9 -  -  -  -  ;
   33 00:03F9 -  -  -  -  ; 									  Multiply
   34 00:03F9 -  -  -  -  ;
   35 00:03F9 -  -  -  -  ; ***************************************************************************************
   36 00:03F9 -  -  -  -  
   37 00:03F9 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:03F9 CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 AD 
              0F 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0407 -  -  -  -  
   40 00:0407 -  -  -  -  ; ***************************************************************************************
   41 00:0407 -  -  -  -  ;
   42 00:0407 -  -  -  -  ; 									  Divide
   43 00:0407 -  -  -  -  ;
   44 00:0407 -  -  -  -  ; ***************************************************************************************
   45 00:0407 -  -  -  -  
   46 00:0407 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0407 -  -  -  -  ALUDivide2:	;; [div]
   48 00:0407 CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 AD 
              0E 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0415 -  -  -  -  
   50 00:0415 -  -  -  -  ; ***************************************************************************************
   51 00:0415 -  -  -  -  ;
   52 00:0415 -  -  -  -  ; 									  Modulus
   53 00:0415 -  -  -  -  ;
   54 00:0415 -  -  -  -  ; ***************************************************************************************
   55 00:0415 -  -  -  -  
   56 00:0415 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0415 CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 B0 
              0E 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0423 -  -  -  -  
   59 00:0423 -  -  -  -  ; ***************************************************************************************
   60 00:0423 -  -  -  -  ;
   61 00:0423 -  -  -  -  ; 									  Logical
   62 00:0423 -  -  -  -  ;
   63 00:0423 -  -  -  -  ; ***************************************************************************************
   64 00:0423 -  -  -  -  
   65 00:0423 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0423 CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 F8 
              0F 00 -  -  		IntegerDispatch(Int32And)
   67 00:0431 -  -  -  -  
   68 00:0431 -  -  -  -  ALUOr: 			;; [or]
   69 00:0431 CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 05 
              10 00 -  -  		IntegerDispatch(Int32Or)
   70 00:043F -  -  -  -  
   71 00:043F -  -  -  -  ALUXor: 		;; [eor]
   72 00:043F CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 12 
              10 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:044D -  -  -  -  
   74 00:044D -  -  -  -  ; ***************************************************************************************
   75 00:044D -  -  -  -  ;
   76 00:044D -  -  -  -  ;									Changes and Updates
   77 00:044D -  -  -  -  ;
   78 00:044D -  -  -  -  ; ***************************************************************************************
   79 00:044D -  -  -  -  ;
   80 00:044D -  -  -  -  ;		Date			Notes
   81 00:044D -  -  -  -  ;		==== 			=====
   82 00:044D -  -  -  -  ;
   83 00:044D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:044D -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:044D -  -  -  -  ; ***************************************************************************************
    2 00:044D -  -  -  -  ; ***************************************************************************************
    3 00:044D -  -  -  -  ;
    4 00:044D -  -  -  -  ;		Name : 		binrefs.asm
    5 00:044D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:044D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:044D -  -  -  -  ;		Reviewed :	No
    8 00:044D -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:044D -  -  -  -  ;
   10 00:044D -  -  -  -  ; ***************************************************************************************
   11 00:044D -  -  -  -  ; ***************************************************************************************
   12 00:044D -  -  -  -  
   13 00:044D -  -  -  -  ; ***************************************************************************************
   14 00:044D -  -  -  -  ;
   15 00:044D -  -  -  -  ; 									<l> <op> <r>
   16 00:044D -  -  -  -  ;
   17 00:044D -  -  -  -  ; ***************************************************************************************
   18 00:044D -  -  -  -  
   19 00:044D -  -  -  -  ALULongReference:			;; [!]
   20 00:044D CD 5D 04 00 		call 	BRGetAddress 				; calculate address
   21 00:0451 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0453 CB F9 -  -  		set 	CIsReference,c
   23 00:0455 C9 -  -  -  		ret
   24 00:0456 -  -  -  -  
   25 00:0456 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0456 CD 4D 04 00 		call 	ALULongReference
   27 00:045A CB F1 -  -  		set 	CIsByteReference,c
   28 00:045C C9 -  -  -  		ret
   29 00:045D -  -  -  -  
   30 00:045D -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:045D CD FA 04 00 
              78 B1 C2 CB 
              03 00 C3 6B 
              04 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:046B -  -  -  -  _BRGAMain:		
   33 00:046B CD E6 0F 00 		call 	Int32Add 					; address in HL'HL
   34 00:046F CD 00 06 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0473 C9 -  -  -  		ret
   36 00:0474 -  -  -  -  
   37 00:0474 -  -  -  -  ; ***************************************************************************************
   38 00:0474 -  -  -  -  ;
   39 00:0474 -  -  -  -  ;									Changes and Updates
   40 00:0474 -  -  -  -  ;
   41 00:0474 -  -  -  -  ; ***************************************************************************************
   42 00:0474 -  -  -  -  ;
   43 00:0474 -  -  -  -  ;		Date			Notes
   44 00:0474 -  -  -  -  ;		==== 			=====
   45 00:0474 -  -  -  -  ;
   46 00:0474 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:0474 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0474 -  -  -  -  ; ***************************************************************************************
    2 00:0474 -  -  -  -  ; ***************************************************************************************
    3 00:0474 -  -  -  -  ;
    4 00:0474 -  -  -  -  ;		Name : 		compare.asm
    5 00:0474 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0474 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0474 -  -  -  -  ;		Reviewed :	No
    8 00:0474 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0474 -  -  -  -  ;
   10 00:0474 -  -  -  -  ; ***************************************************************************************
   11 00:0474 -  -  -  -  ; ***************************************************************************************
   12 00:0474 -  -  -  -  
   13 00:0474 -  -  -  -  #macro compare_equals(n)
   14 00:0474             		call 	CompareBaseCode
   15 00:0474             		cp 		n
   16 00:0474             		jr 		z,UnaryInt32True
   17 00:0474             		jr 		UnaryInt32False
   18 00:0474             #endmacro
   19 00:0474 -  -  -  -  
   20 00:0474 -  -  -  -  #macro compare_not_equals(n)
   21 00:0474             		call 	CompareBaseCode
   22 00:0474             		cp 		n
   23 00:0474             		jr 		nz,UnaryInt32True
   24 00:0474             		jr 		UnaryInt32False
   25 00:0474             #endmacro
   26 00:0474 -  -  -  -  
   27 00:0474 -  -  -  -  ; ***************************************************************************************
   28 00:0474 -  -  -  -  ;
   29 00:0474 -  -  -  -  ; 								Return True/False
   30 00:0474 -  -  -  -  ;
   31 00:0474 -  -  -  -  ; ***************************************************************************************
   32 00:0474 -  -  -  -  
   33 00:0474 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0474 3E FF -  -  		ld 		a,255
   35 00:0476 18 01 -  -  		jr 		_Int32Logical
   36 00:0478 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:0478 AF -  -  -  		xor 	a
   38 00:0479 -  -  -  -  _Int32Logical:
   39 00:0479 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:047A 67 -  -  -  		ld 		h,a
   41 00:047B D9 -  -  -  		exx
   42 00:047C 6F -  -  -  		ld 		l,a
   43 00:047D 67 -  -  -  		ld 		h,a
   44 00:047E D9 -  -  -  		exx
   45 00:047F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0481 C9 -  -  -  		ret
   47 00:0482 -  -  -  -  
   48 00:0482 -  -  -  -  ; ***************************************************************************************
   49 00:0482 -  -  -  -  ;
   50 00:0482 -  -  -  -  ; 										> = < (compare == value)
   51 00:0482 -  -  -  -  ;
   52 00:0482 -  -  -  -  ; ***************************************************************************************
   53 00:0482 -  -  -  -  
   54 00:0482 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0482 CD BE 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:048C -  -  -  -  
   57 00:048C -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:048C CD BE 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:0496 -  -  -  -  
   60 00:0496 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:0496 CD BE 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:04A0 -  -  -  -  
   63 00:04A0 -  -  -  -  ; ***************************************************************************************
   64 00:04A0 -  -  -  -  ;
   65 00:04A0 -  -  -  -  ; 										> = < (compare <> value)
   66 00:04A0 -  -  -  -  ;
   67 00:04A0 -  -  -  -  ; ***************************************************************************************
   68 00:04A0 -  -  -  -  
   69 00:04A0 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:04A0 CD BE 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:04AA -  -  -  -  
   72 00:04AA -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:04AA CD BE 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:04B4 -  -  -  -  
   75 00:04B4 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:04B4 CD BE 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:04BE -  -  -  -  
   78 00:04BE -  -  -  -  ; ***************************************************************************************
   79 00:04BE -  -  -  -  ;
   80 00:04BE -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:04BE -  -  -  -  ;
   82 00:04BE -  -  -  -  ; ***************************************************************************************
   83 00:04BE -  -  -  -  
   84 00:04BE -  -  -  -  CompareBaseCode:
   85 00:04BE CD FA 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:04C2 -  -  -  -  
   87 00:04C2 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:04C3 A1 -  -  -  		and 	c
   89 00:04C4 CB 47 -  -  		bit 	CIsString,a 
   90 00:04C6 C2 D8 04 00 		jp 		nz,StringCompare
   91 00:04CA -  -  -  -  
   92 00:04CA 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:04CB B1 -  -  -  		or 		c
   94 00:04CC CB 47 -  -  		bit 	CIsString,a 
   95 00:04CE CA 26 10 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:04D2 -  -  -  -  
   97 00:04D2 3E 02 C3 6D 
              03 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:04D8 -  -  -  -  ;
   99 00:04D8 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:04D8 -  -  -  -  ;
  101 00:04D8 -  -  -  -  StringCompare:
  102 00:04D8 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:04D9 BE -  -  -  		cp 		(hl)
  104 00:04DA 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:04DC 20 08 -  -  		jr 		nz,_SCLess
  106 00:04DE 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:04DF 23 -  -  -  		inc 	hl
  108 00:04E0 FE 20 -  -  		cp 		' '
  109 00:04E2 30 F4 -  -  		jr 		nc,StringCompare
  110 00:04E4 AF -  -  -  		xor 	a 							; return 0.
  111 00:04E5 C9 -  -  -  		ret
  112 00:04E6 -  -  -  -  
  113 00:04E6 -  -  -  -  _SCLess:
  114 00:04E6 3E FF -  -  		ld 		a,$FF
  115 00:04E8 C9 -  -  -  		ret
  116 00:04E9 -  -  -  -  _SCGreater:
  117 00:04E9 3E 01 -  -  		ld 		a,1
  118 00:04EB C9 -  -  -  		ret
  119 00:04EC -  -  -  -  
  120 00:04EC 3E 15 C3 6D 
              03 00 -  -  		ERR_TODO()
  121 00:04F2 -  -  -  -  
  122 00:04F2 -  -  -  -  ; ***************************************************************************************
  123 00:04F2 -  -  -  -  ;
  124 00:04F2 -  -  -  -  ;									Changes and Updates
  125 00:04F2 -  -  -  -  ;
  126 00:04F2 -  -  -  -  ; ***************************************************************************************
  127 00:04F2 -  -  -  -  ;
  128 00:04F2 -  -  -  -  ;		Date			Notes
  129 00:04F2 -  -  -  -  ;		==== 			=====
  130 00:04F2 -  -  -  -  ;
  131 00:04F2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:04F2 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:04F2 -  -  -  -  ; ***************************************************************************************
    2 00:04F2 -  -  -  -  ; ***************************************************************************************
    3 00:04F2 -  -  -  -  ;
    4 00:04F2 -  -  -  -  ;		Name : 		utility.asm
    5 00:04F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04F2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04F2 -  -  -  -  ;		Reviewed :	No
    8 00:04F2 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:04F2 -  -  -  -  ;
   10 00:04F2 -  -  -  -  ; ***************************************************************************************
   11 00:04F2 -  -  -  -  ; ***************************************************************************************
   12 00:04F2 -  -  -  -  
   13 00:04F2 -  -  -  -  ; ***************************************************************************************
   14 00:04F2 -  -  -  -  ;
   15 00:04F2 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:04F2 -  -  -  -  ;
   17 00:04F2 -  -  -  -  ; ***************************************************************************************
   18 00:04F2 -  -  -  -  
   19 00:04F2 -  -  -  -  SwapHLDE:
   20 00:04F2 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:04F3 D9 -  -  -  			exx
   22 00:04F4 EB -  -  -  			ex 		de,hl
   23 00:04F5 D9 -  -  -  			exx
   24 00:04F6 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:04F7 41 -  -  -  			ld 		b,c
   26 00:04F8 4F -  -  -  			ld 		c,a
   27 00:04F9 C9 -  -  -  			ret
   28 00:04FA -  -  -  -  
   29 00:04FA -  -  -  -  ; ***************************************************************************************
   30 00:04FA -  -  -  -  ;
   31 00:04FA -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:04FA -  -  -  -  ;
   33 00:04FA -  -  -  -  ; ***************************************************************************************
   34 00:04FA -  -  -  -  
   35 00:04FA -  -  -  -  DereferenceBoth:
   36 00:04FA CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:04FC C4 D3 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0500 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0502 C8 -  -  -  			ret 	z
   40 00:0503 CD F2 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:0507 CD D3 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:050B CD F2 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:050F C9 -  -  -  			ret
   44 00:0510 -  -  -  -  
   45 00:0510 -  -  -  -  ; ***************************************************************************************
   46 00:0510 -  -  -  -  ;
   47 00:0510 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:0510 -  -  -  -  ;
   49 00:0510 -  -  -  -  ; ***************************************************************************************
   50 00:0510 -  -  -  -  
   51 00:0510 -  -  -  -  NegateHLHL:	
   52 00:0510 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0512 C2 CB 03 00 			jp 		nz,TypeMismatch
   54 00:0516 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0518 C4 D3 05 00 			call 	nz,Dereference 			; if required.
   56 00:051C CD 50 10 00 			call 	Int32Negate
   57 00:0520 C9 -  -  -  			ret
Listing for file "_build.asm"
   31 00:0521 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0521 -  -  -  -  ; ***************************************************************************************
    2 00:0521 -  -  -  -  ; ***************************************************************************************
    3 00:0521 -  -  -  -  ;
    4 00:0521 -  -  -  -  ;		Name : 		expression.asm
    5 00:0521 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0521 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0521 -  -  -  -  ;		Reviewed :	None
    8 00:0521 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0521 -  -  -  -  ;
   10 00:0521 -  -  -  -  ; ***************************************************************************************
   11 00:0521 -  -  -  -  ; ***************************************************************************************
   12 00:0521 -  -  -  -  
   13 00:0521 -  -  -  -  ; ***************************************************************************************
   14 00:0521 -  -  -  -  ;
   15 00:0521 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0521 -  -  -  -  ;
   17 00:0521 -  -  -  -  ; ***************************************************************************************
   18 00:0521 -  -  -  -  
   19 00:0521 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0521 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0522 -  -  -  -  EvaluateAtPrecedence:
   22 00:0522 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0523 -  -  -  -  		;
   24 00:0523 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0523 -  -  -  -  		;
   26 00:0523 CD 2F 06 00 		call 	EvaluateTerm 				; get term
   27 00:0527 -  -  -  -  		;
   28 00:0527 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0527 -  -  -  -  		;
   30 00:0527 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0528 -  -  -  -  _EAPLoop:
   32 00:0528 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:052B FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:052D D8 -  -  -  		ret 	c
   35 00:052E FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:0530 D0 -  -  -  		ret 	nc
   37 00:0531 -  -  -  -  		;
   38 00:0531 -  -  -  -  		; 		Get the precedence.
   39 00:0531 -  -  -  -  		;
   40 00:0531 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0532 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0534 21 A0 0B 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0538 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:0539 6F -  -  -  		ld 		l,a
   45 00:053A 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:053B E1 -  -  -  		pop 	hl 							; restore HL
   47 00:053C -  -  -  -  		;
   48 00:053C -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:053C -  -  -  -  		;
   50 00:053C 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:053D BB -  -  -  		cp 		e
   52 00:053E D0 -  -  -  		ret 	nc
   53 00:053F -  -  -  -  
   54 00:053F -  -  -  -  		;
   55 00:053F -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:053F -  -  -  -  		;
   57 00:053F D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0540 -  -  -  -  		;
   59 00:0540 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0543 F5 -  -  -  		push 	af
   61 00:0544 -  -  -  -  		;
   62 00:0544 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0545 D9 -  -  -  		exx 								; save HL'
   64 00:0546 E5 -  -  -  		push 	hl
   65 00:0547 D9 -  -  -  		exx 								
   66 00:0548 E5 -  -  -  		push 	hl 							; save HL
   67 00:0549 -  -  -  -  		;
   68 00:0549 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:054B -  -  -  -  		;
   70 00:054B -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:054B -  -  -  -  		;
   72 00:054B 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:054C CD 22 05 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0550 -  -  -  -  		;
   75 00:0550 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0550 -  -  -  -  		;
   77 00:0550 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0551 -  -  -  -  
   79 00:0551 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0552 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0553 D9 -  -  -  		exx
   82 00:0554 EB -  -  -  		ex 		de,hl
   83 00:0555 E1 -  -  -  		pop 	hl
   84 00:0556 D9 -  -  -  		exx
   85 00:0557 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:0558 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:0559 -  -  -  -  		;
   88 00:0559 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:0559 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:0559 -  -  -  -  		;
   91 00:0559 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:055A -  -  -  -  		;
   93 00:055A -  -  -  -  		; 		Call the binary operator in A.
   94 00:055A -  -  -  -  		;
   95 00:055A D5 -  -  -  		push 	de
   96 00:055B E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:055C E6 7F 21 00 
              00 00 6F 29 
              29 11 70 0D 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0571 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0572 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0573 CD 64 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:0577 -  -  -  -  		;
  102 00:0577 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:0578 -  -  -  -  		;
  104 00:0578 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:057A -  -  -  -  
  106 00:057A -  -  -  -  ; ***************************************************************************************
  107 00:057A -  -  -  -  ;
  108 00:057A -  -  -  -  ;									Changes and Updates
  109 00:057A -  -  -  -  ;
  110 00:057A -  -  -  -  ; ***************************************************************************************
  111 00:057A -  -  -  -  ;
  112 00:057A -  -  -  -  ;		Date			Notes
  113 00:057A -  -  -  -  ;		==== 			=====
  114 00:057A -  -  -  -  ;
  115 00:057A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:057A -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:057A -  -  -  -  ; ***************************************************************************************
    2 00:057A -  -  -  -  ; ***************************************************************************************
    3 00:057A -  -  -  -  ;
    4 00:057A -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:057A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:057A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:057A -  -  -  -  ;		Reviewed :	No
    8 00:057A -  -  -  -  ;		Purpose :	Expression support functions
    9 00:057A -  -  -  -  ;
   10 00:057A -  -  -  -  ; ***************************************************************************************
   11 00:057A -  -  -  -  ; ***************************************************************************************
   12 00:057A -  -  -  -  
   13 00:057A -  -  -  -  ; ***************************************************************************************
   14 00:057A -  -  -  -  ;
   15 00:057A -  -  -  -  ; 								Evaluate an integer term
   16 00:057A -  -  -  -  ;
   17 00:057A -  -  -  -  ; ***************************************************************************************
   18 00:057A -  -  -  -  
   19 00:057A -  -  -  -  EvaluateIntegerTerm:
   20 00:057A CD 2F 06 00 		call 	EvaluateTerm
   21 00:057E CD D3 05 00 		call 	DeReference
   22 00:0582 CB 41 -  -  		bit 	CIsString,c
   23 00:0584 C8 -  -  -  		ret 	z
   24 00:0585 C3 CB 03 00 		jp 		TypeMismatch
   25 00:0589 -  -  -  -  
   26 00:0589 -  -  -  -  ; ***************************************************************************************
   27 00:0589 -  -  -  -  ;
   28 00:0589 -  -  -  -  ; 								Evaluate a string term
   29 00:0589 -  -  -  -  ;
   30 00:0589 -  -  -  -  ; ***************************************************************************************
   31 00:0589 -  -  -  -  
   32 00:0589 -  -  -  -  EvaluateStringTerm:
   33 00:0589 CD 2F 06 00 		call 	EvaluateTerm
   34 00:058D CD D3 05 00 		call 	DeReference
   35 00:0591 CB 41 -  -  		bit 	CIsString,c
   36 00:0593 C0 -  -  -  		ret 	nz
   37 00:0594 C3 CB 03 00 		jp 		TypeMismatch
   38 00:0598 -  -  -  -  
   39 00:0598 -  -  -  -  ; ***************************************************************************************
   40 00:0598 -  -  -  -  ;
   41 00:0598 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:0598 -  -  -  -  ;
   43 00:0598 -  -  -  -  ; ***************************************************************************************
   44 00:0598 -  -  -  -  
   45 00:0598 -  -  -  -  EvaluateValue:
   46 00:0598 CD 21 05 00 		call 	EvaluateAtPrecedence0
   47 00:059C C3 D3 05 00 		jp 		Dereference
   48 00:05A0 -  -  -  -  
   49 00:05A0 -  -  -  -  ; ***************************************************************************************
   50 00:05A0 -  -  -  -  ;
   51 00:05A0 -  -  -  -  ; 									Evaluate a number
   52 00:05A0 -  -  -  -  ;
   53 00:05A0 -  -  -  -  ; ***************************************************************************************
   54 00:05A0 -  -  -  -  
   55 00:05A0 -  -  -  -  EvaluateInteger:
   56 00:05A0 CD 98 05 00 		call 	EvaluateValue
   57 00:05A4 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:05A6 C8 -  -  -  		ret 	z
   59 00:05A7 C3 CB 03 00 		jp 		TypeMismatch
   60 00:05AB -  -  -  -  
   61 00:05AB -  -  -  -  ; ***************************************************************************************
   62 00:05AB -  -  -  -  ;
   63 00:05AB -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:05AB -  -  -  -  ;
   65 00:05AB -  -  -  -  ; ***************************************************************************************
   66 00:05AB -  -  -  -  
   67 00:05AB -  -  -  -  Evaluate8BitInteger:
   68 00:05AB CD A0 05 00 		call 	EvaluateInteger
   69 00:05AF D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:05B0 7C -  -  -  		ld 		a,h
   71 00:05B1 B5 -  -  -  		or 		l
   72 00:05B2 D9 -  -  -  		exx 	
   73 00:05B3 B4 -  -  -  		or 		h
   74 00:05B4 C2 D1 03 00 		jp 		nz,BadValue
   75 00:05B8 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:05B9 C9 -  -  -  		ret
   77 00:05BA -  -  -  -  		
   78 00:05BA -  -  -  -  ; ***************************************************************************************
   79 00:05BA -  -  -  -  ;
   80 00:05BA -  -  -  -  ; 									Evaluate a string
   81 00:05BA -  -  -  -  ;
   82 00:05BA -  -  -  -  ; ***************************************************************************************
   83 00:05BA -  -  -  -  
   84 00:05BA -  -  -  -  EvaluateString:
   85 00:05BA CD 98 05 00 		call 	EvaluateValue
   86 00:05BE CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:05C0 CA CB 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:05C4 C9 -  -  -  		ret
   89 00:05C5 -  -  -  -  
   90 00:05C5 -  -  -  -  ; ***************************************************************************************
   91 00:05C5 -  -  -  -  ;
   92 00:05C5 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:05C5 -  -  -  -  ;
   94 00:05C5 -  -  -  -  ; ***************************************************************************************
   95 00:05C5 -  -  -  -  
   96 00:05C5 -  -  -  -  Return8BitConstant:
   97 00:05C5 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:05C9 6F -  -  -  		ld 		l,a
   99 00:05CA -  -  -  -  Return16BitConstant:
  100 00:05CA D9 -  -  -  		exx 								; clear HL'
  101 00:05CB 21 00 00 00 		ld 		hl,0
  102 00:05CF D9 -  -  -  		exx
  103 00:05D0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:05D2 C9 -  -  -  		ret
  105 00:05D3 -  -  -  -  
  106 00:05D3 -  -  -  -  ; ***************************************************************************************
  107 00:05D3 -  -  -  -  ;
  108 00:05D3 -  -  -  -  ;									Changes and Updates
  109 00:05D3 -  -  -  -  ;
  110 00:05D3 -  -  -  -  ; ***************************************************************************************
  111 00:05D3 -  -  -  -  ;
  112 00:05D3 -  -  -  -  ;		Date			Notes
  113 00:05D3 -  -  -  -  ;		==== 			=====
  114 00:05D3 -  -  -  -  ;
  115 00:05D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:05D3 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:05D3 -  -  -  -  ; ***************************************************************************************
    2 00:05D3 -  -  -  -  ; ***************************************************************************************
    3 00:05D3 -  -  -  -  ;
    4 00:05D3 -  -  -  -  ;		Name : 		reference.asm
    5 00:05D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05D3 -  -  -  -  ;		Date : 		1st May 2022
    7 00:05D3 -  -  -  -  ;		Reviewed :	No
    8 00:05D3 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:05D3 -  -  -  -  ;
   10 00:05D3 -  -  -  -  ; ***************************************************************************************
   11 00:05D3 -  -  -  -  ; ***************************************************************************************
   12 00:05D3 -  -  -  -  
   13 00:05D3 -  -  -  -  ; ***************************************************************************************
   14 00:05D3 -  -  -  -  ;
   15 00:05D3 -  -  -  -  ; 									Dereference HL'HL C
   16 00:05D3 -  -  -  -  ;
   17 00:05D3 -  -  -  -  ; ***************************************************************************************
   18 00:05D3 -  -  -  -  
   19 00:05D3 -  -  -  -  Dereference:
   20 00:05D3 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:05D5 C8 -  -  -  		ret 	z
   22 00:05D6 -  -  -  -  
   23 00:05D6 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:05D8 -  -  -  -  		
   25 00:05D8 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:05DA 20 1E -  -  		jr 		nz,_DRInternal
   27 00:05DC -  -  -  -  
   28 00:05DC CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:05DE 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:05E0 -  -  -  -  
   31 00:05E0 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:05E1 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:05E3 D9 -  -  -  		exx
   34 00:05E4 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:05E5 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:05E6 23 -  -  -  		inc  	hl
   37 00:05E7 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:05E9 D9 -  -  -  		exx 								; fix back
   39 00:05EA C9 -  -  -  		ret
   40 00:05EB -  -  -  -  
   41 00:05EB -  -  -  -  _DeRefByte:		
   42 00:05EB 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:05EC 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:05F0 6F -  -  -  		ld	 	l,a
   45 00:05F1 D9 -  -  -  		exx
   46 00:05F2 21 00 00 00 		ld 		hl,$0000
   47 00:05F6 D9 -  -  -  		exx
   48 00:05F7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:05F9 C9 -  -  -  		ret
   50 00:05FA -  -  -  -  
   51 00:05FA -  -  -  -  _DRInternal:
   52 00:05FA 3E 05 C3 6D 
              03 00 -  -  		ERR_DISABLED
   53 00:0600 -  -  -  -  
   54 00:0600 -  -  -  -  ; ***************************************************************************************
   55 00:0600 -  -  -  -  ;
   56 00:0600 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:0600 -  -  -  -  ;
   58 00:0600 -  -  -  -  ; ***************************************************************************************
   59 00:0600 -  -  -  -  
   60 00:0600 -  -  -  -  DRConvertHLHLToAddress:
   61 00:0600 -  -  -  -  		#ifdef EZ80
   62 00:0600 22 6A 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0604 D9 -  -  -  		exx
   64 00:0605 22 6C 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:0609 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:060D D9 -  -  -  		exx
   67 00:060E 2A 6A 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0612 -  -  -  -  		#endif
   69 00:0612 C9 -  -  -  		ret
   70 00:0613 -  -  -  -  
   71 00:0613 -  -  -  -  ; ***************************************************************************************
   72 00:0613 -  -  -  -  ;
   73 00:0613 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0613 -  -  -  -  ;
   75 00:0613 -  -  -  -  ; ***************************************************************************************
   76 00:0613 -  -  -  -  
   77 00:0613 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0613 -  -  -  -  		#ifdef EZ80
   79 00:0613 22 6A 00 00 		ld 		(AConvert),hl
   80 00:0617 21 00 00 00 		ld 		hl,$0000
   81 00:061B 22 6D 00 00 		ld 		(AConvert+3),hl
   82 00:061F D9 -  -  -  		exx
   83 00:0620 2A 6C 00 00 		ld 		hl,(AConvert+2)
   84 00:0624 D9 -  -  -  		exx
   85 00:0625 AF -  -  -  		xor 	a
   86 00:0626 32 6C 00 00 		ld 		(AConvert+2),a
   87 00:062A 2A 6A 00 00 		ld 		hl,(AConvert)
   88 00:062E -  -  -  -  		#endif
   89 00:062E C9 -  -  -  		ret
   90 00:062F -  -  -  -  
   91 00:062F -  -  -  -  ; ***************************************************************************************
   92 00:062F -  -  -  -  ;
   93 00:062F -  -  -  -  ;									Changes and Updates
   94 00:062F -  -  -  -  ;
   95 00:062F -  -  -  -  ; ***************************************************************************************
   96 00:062F -  -  -  -  ;
   97 00:062F -  -  -  -  ;		Date			Notes
   98 00:062F -  -  -  -  ;		==== 			=====
   99 00:062F -  -  -  -  ;
  100 00:062F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:062F -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:062F -  -  -  -  ; ***************************************************************************************
    2 00:062F -  -  -  -  ; ***************************************************************************************
    3 00:062F -  -  -  -  ;
    4 00:062F -  -  -  -  ;		Name : 		term.asm
    5 00:062F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:062F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:062F -  -  -  -  ;		Reviewed :	No
    8 00:062F -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:062F -  -  -  -  ;
   10 00:062F -  -  -  -  ; ***************************************************************************************
   11 00:062F -  -  -  -  ; ***************************************************************************************
   12 00:062F -  -  -  -  
   13 00:062F -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:062F             		add_hlhl_16
   15 00:062F             		exx
   16 00:062F             		adc_hlhl_16
   17 00:062F             		exx
   18 00:062F             #endmacro
   19 00:062F -  -  -  -  
   20 00:062F -  -  -  -  ; ***************************************************************************************
   21 00:062F -  -  -  -  ;
   22 00:062F -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:062F -  -  -  -  ;
   24 00:062F -  -  -  -  ; ***************************************************************************************
   25 00:062F -  -  -  -  ;
   26 00:062F -  -  -  -  ; 		Terms can be:
   27 00:062F -  -  -  -  ;
   28 00:062F -  -  -  -  ;			<integer> 			42 						not negative
   29 00:062F -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:062F -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:062F -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:062F -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:062F -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:062F -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:062F -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:062F -  -  -  -  ; 														reference of some sort.
   37 00:062F -  -  -  -  ;
   38 00:062F -  -  -  -  ; ***************************************************************************************
   39 00:062F -  -  -  -  
   40 00:062F -  -  -  -  EvaluateTerm:		
   41 00:062F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0631 D9 -  -  -  		exx
   43 00:0632 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0636 D9 -  -  -  		exx
   45 00:0637 21 00 00 00 		ld 		hl,$0000		
   46 00:063B -  -  -  -  		;
   47 00:063B DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:063E FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0640 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0642 DA FA 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0646 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:0648 C2 9E 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:064C -  -  -  -  		;
   54 00:064C -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:064C -  -  -  -  		;
   56 00:064C -  -  -  -  _ETIntegerConstant:
   57 00:064C -  -  -  -  		;
   58 00:064C -  -  -  -  _ETIntegerLoop:		
   59 00:064C DD 7E 00 -  		ld 		a,(ix+0)
   60 00:064F E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0651 B5 -  -  -  		or 		l 							; or into L
   62 00:0652 6F -  -  -  		ld 		l,a
   63 00:0653 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0655 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:0658 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:065A FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:065C D8 -  -  -  		ret 	c
   68 00:065D -  -  -  -  
   69 00:065D 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0664 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:066B 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0672 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:0679 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0680 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:0687 -  -  -  -  
   76 00:0687 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:0689 -  -  -  -  		;
   78 00:0689 -  -  -  -  		; 		Found the $3F string marker.
   79 00:0689 -  -  -  -  		;
   80 00:0689 -  -  -  -  _ETStringMarker:		
   81 00:0689 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:068B DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:068D DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:068F E1 -  -  -  		pop 	hl
   85 00:0690 11 00 00 00 		ld 		de,$0000
   86 00:0694 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:0697 DD 19 -  -  		add 	ix,de
   88 00:0699 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:069B 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:069D C9 -  -  -  		ret
   91 00:069E -  -  -  -  		;
   92 00:069E -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:069E -  -  -  -  		;
   94 00:069E -  -  -  -  _ETFoundKeyword:
   95 00:069E DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:06A0 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:06A2 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:06A4 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:06A6 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:06A8 -  -  -  -  		;
  101 00:06A8 -  -  -  -  		;		Unary group 0
  102 00:06A8 -  -  -  -  		;
  103 00:06A8 E6 7F 21 00 
              00 00 6F 29 
              29 11 70 0D 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:06BD C3 64 00 00 		jp 		JumpCode 					; and go there.
  105 00:06C1 -  -  -  -  
  106 00:06C1 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:06C1 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:06C3 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:06C5 -  -  -  -  		;
  110 00:06C5 -  -  -  -  		; 		- term
  111 00:06C5 -  -  -  -  		;
  112 00:06C5 CD 7A 05 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:06C9 CD 10 05 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:06CD C9 -  -  -  		ret
  115 00:06CE -  -  -  -  		;
  116 00:06CE -  -  -  -  		;		! ? indirection check
  117 00:06CE -  -  -  -  		;
  118 00:06CE -  -  -  -  _ETCheckIndirection:	
  119 00:06CE FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:06D0 28 06 -  -  		jr 		z,_ETIndirection
  121 00:06D2 FE 83 -  -  		cp 		KWD_PLING
  122 00:06D4 C2 D7 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:06D8 -  -  -  -  		;
  124 00:06D8 -  -  -  -  		; 		! ? indirection
  125 00:06D8 -  -  -  -  		;
  126 00:06D8 -  -  -  -  _ETIndirection:
  127 00:06D8 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:06D9 CD 2F 06 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:06DD CD D3 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:06E1 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:06E3 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:06E5 CD 00 06 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:06E9 F1 -  -  -  		pop 	af 							; get type back
  134 00:06EA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:06EC CB F9 -  -  		set 	CIsReference,c
  136 00:06EE FE 83 -  -  		cp 		KWD_PLING
  137 00:06F0 C8 -  -  -  		ret 	z
  138 00:06F1 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:06F3 C9 -  -  -  		ret
  140 00:06F4 -  -  -  -  _ETStringIndirect:
  141 00:06F4 3E 02 C3 6D 
              03 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:06FA -  -  -  -  		;
  143 00:06FA -  -  -  -  		; 		Found an identifier.
  144 00:06FA -  -  -  -  		;
  145 00:06FA -  -  -  -  _ETVariable:
  146 00:06FA CD 82 0A 00 		call 	FindVariable 				; find the variable.
  147 00:06FE D0 -  -  -  		ret 	nc 							; return if found.
  148 00:06FF 3E 16 C3 6D 
              03 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:0705 -  -  -  -  		
  150 00:0705 -  -  -  -  ; ***************************************************************************************
  151 00:0705 -  -  -  -  ;
  152 00:0705 -  -  -  -  ;									Changes and Updates
  153 00:0705 -  -  -  -  ;
  154 00:0705 -  -  -  -  ; ***************************************************************************************
  155 00:0705 -  -  -  -  ;
  156 00:0705 -  -  -  -  ;		Date			Notes
  157 00:0705 -  -  -  -  ;		==== 			=====
  158 00:0705 -  -  -  -  ;
  159 00:0705 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:0705 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0705 -  -  -  -  ; ***************************************************************************************
    2 00:0705 -  -  -  -  ; ***************************************************************************************
    3 00:0705 -  -  -  -  ;
    4 00:0705 -  -  -  -  ;		Name : 		abs.asm
    5 00:0705 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0705 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0705 -  -  -  -  ;		Reviewed :	No
    8 00:0705 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0705 -  -  -  -  ;
   10 00:0705 -  -  -  -  ; ***************************************************************************************
   11 00:0705 -  -  -  -  ; ***************************************************************************************
   12 00:0705 -  -  -  -  
   13 00:0705 -  -  -  -  ; ***************************************************************************************
   14 00:0705 -  -  -  -  ;
   15 00:0705 -  -  -  -  ;								abs( unary function
   16 00:0705 -  -  -  -  ;
   17 00:0705 -  -  -  -  ; ***************************************************************************************
   18 00:0705 -  -  -  -  
   19 00:0705 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0705 CD 7A 05 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:0709 D9 -  -  -  		exx 								; test MSB
   22 00:070A CB 7C -  -  		bit 	7,h
   23 00:070C D9 -  -  -  		exx
   24 00:070D C4 10 05 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0711 C9 -  -  -  		ret
   26 00:0712 -  -  -  -  
   27 00:0712 -  -  -  -  ; ***************************************************************************************
   28 00:0712 -  -  -  -  ;
   29 00:0712 -  -  -  -  ;									Changes and Updates
   30 00:0712 -  -  -  -  ;
   31 00:0712 -  -  -  -  ; ***************************************************************************************
   32 00:0712 -  -  -  -  ;
   33 00:0712 -  -  -  -  ;		Date			Notes
   34 00:0712 -  -  -  -  ;		==== 			=====
   35 00:0712 -  -  -  -  ;
   36 00:0712 -  -  -  -  ; ***************************************************************************************
   37 00:0712 -  -  -  -  		
Listing for file "_build.asm"
   36 00:0712 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0712 -  -  -  -  ; ***************************************************************************************
    2 00:0712 -  -  -  -  ; ***************************************************************************************
    3 00:0712 -  -  -  -  ;
    4 00:0712 -  -  -  -  ;		Name : 		asc.asm
    5 00:0712 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0712 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0712 -  -  -  -  ;		Reviewed :	No
    8 00:0712 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0712 -  -  -  -  ;
   10 00:0712 -  -  -  -  ; ***************************************************************************************
   11 00:0712 -  -  -  -  ; ***************************************************************************************
   12 00:0712 -  -  -  -  
   13 00:0712 -  -  -  -  ; ***************************************************************************************
   14 00:0712 -  -  -  -  ;
   15 00:0712 -  -  -  -  ;								Asc unary function
   16 00:0712 -  -  -  -  ;
   17 00:0712 -  -  -  -  ; ***************************************************************************************
   18 00:0712 -  -  -  -  
   19 00:0712 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0712 CD 89 05 00 		call	EvaluateStringTerm			; Get string
   21 00:0716 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0717 C3 C5 05 00 		jp 		Return8BitConstant
   23 00:071B -  -  -  -  
   24 00:071B -  -  -  -  ; ***************************************************************************************
   25 00:071B -  -  -  -  ;
   26 00:071B -  -  -  -  ;									Changes and Updates
   27 00:071B -  -  -  -  ;
   28 00:071B -  -  -  -  ; ***************************************************************************************
   29 00:071B -  -  -  -  ;
   30 00:071B -  -  -  -  ;		Date			Notes
   31 00:071B -  -  -  -  ;		==== 			=====
   32 00:071B -  -  -  -  ;
   33 00:071B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:071B -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:071B -  -  -  -  ; ***************************************************************************************
    2 00:071B -  -  -  -  ; ***************************************************************************************
    3 00:071B -  -  -  -  ;
    4 00:071B -  -  -  -  ;		Name : 		chr.asm
    5 00:071B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:071B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:071B -  -  -  -  ;		Reviewed :	No
    8 00:071B -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:071B -  -  -  -  ;
   10 00:071B -  -  -  -  ; ***************************************************************************************
   11 00:071B -  -  -  -  ; ***************************************************************************************
   12 00:071B -  -  -  -  
   13 00:071B -  -  -  -  ; ***************************************************************************************
   14 00:071B -  -  -  -  ;
   15 00:071B -  -  -  -  ;								Chr$() unary function
   16 00:071B -  -  -  -  ;
   17 00:071B -  -  -  -  ; ***************************************************************************************
   18 00:071B -  -  -  -  
   19 00:071B -  -  -  -  Unary_Chr:	;; [chr]
   20 00:071B CD 45 03 00 		call 	CheckDollar
   21 00:071F CD 7A 05 00 		call 	EvaluateIntegerTerm
   22 00:0723 7D -  -  -  		ld 		a,l 						; get character
   23 00:0724 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0726 21 9F 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:072A 36 0D -  -  		ld 		(hl),13
   26 00:072C 2B -  -  -  		dec 	hl
   27 00:072D 77 -  -  -  		ld 		(hl),a
   28 00:072E C9 -  -  -  		ret
   29 00:072F -  -  -  -  
   30 00:072F -  -  -  -  ; ***************************************************************************************
   31 00:072F -  -  -  -  ;
   32 00:072F -  -  -  -  ;									Changes and Updates
   33 00:072F -  -  -  -  ;
   34 00:072F -  -  -  -  ; ***************************************************************************************
   35 00:072F -  -  -  -  ;
   36 00:072F -  -  -  -  ;		Date			Notes
   37 00:072F -  -  -  -  ;		==== 			=====
   38 00:072F -  -  -  -  ;
   39 00:072F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:072F -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:072F -  -  -  -  ; ***************************************************************************************
    2 00:072F -  -  -  -  ; ***************************************************************************************
    3 00:072F -  -  -  -  ;
    4 00:072F -  -  -  -  ;		Name : 		len.asm
    5 00:072F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:072F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:072F -  -  -  -  ;		Reviewed :	None
    8 00:072F -  -  -  -  ;		Purpose :	String Length
    9 00:072F -  -  -  -  ;
   10 00:072F -  -  -  -  ; ***************************************************************************************
   11 00:072F -  -  -  -  ; ***************************************************************************************
   12 00:072F -  -  -  -  
   13 00:072F -  -  -  -  ; ***************************************************************************************
   14 00:072F -  -  -  -  ;
   15 00:072F -  -  -  -  ;								Len unary function
   16 00:072F -  -  -  -  ;
   17 00:072F -  -  -  -  ; ***************************************************************************************
   18 00:072F -  -  -  -  
   19 00:072F -  -  -  -  Unary_Len:	;; [len]
   20 00:072F CD 89 05 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0733 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0734 CD 78 04 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:0738 -  -  -  -  _ULCount:
   24 00:0738 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:0739 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:073B D8 -  -  -  		ret 	c
   27 00:073C 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:073D 13 -  -  -  		inc 	de
   29 00:073E 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:0740 -  -  -  -  
   31 00:0740 -  -  -  -  ; ***************************************************************************************
   32 00:0740 -  -  -  -  ;
   33 00:0740 -  -  -  -  ;									Changes and Updates
   34 00:0740 -  -  -  -  ;
   35 00:0740 -  -  -  -  ; ***************************************************************************************
   36 00:0740 -  -  -  -  ;
   37 00:0740 -  -  -  -  ;		Date			Notes
   38 00:0740 -  -  -  -  ;		==== 			=====
   39 00:0740 -  -  -  -  ;
   40 00:0740 -  -  -  -  ; ***************************************************************************************
   41 00:0740 -  -  -  -  		
Listing for file "_build.asm"
   39 00:0740 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:0740 -  -  -  -  ; ***************************************************************************************
    2 00:0740 -  -  -  -  ; ***************************************************************************************
    3 00:0740 -  -  -  -  ;
    4 00:0740 -  -  -  -  ;		Name : 		makestring.asm
    5 00:0740 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0740 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0740 -  -  -  -  ;		Reviewed :	No
    8 00:0740 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:0740 -  -  -  -  ;
   10 00:0740 -  -  -  -  ; ***************************************************************************************
   11 00:0740 -  -  -  -  ; ***************************************************************************************
   12 00:0740 -  -  -  -  
   13 00:0740 -  -  -  -  ; ***************************************************************************************
   14 00:0740 -  -  -  -  ;
   15 00:0740 -  -  -  -  ;								Str$() unary function
   16 00:0740 -  -  -  -  ;
   17 00:0740 -  -  -  -  ; ***************************************************************************************
   18 00:0740 -  -  -  -  
   19 00:0740 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:0740 CD 7A 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0744 CD 00 06 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:0748 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:074A C9 -  -  -  		ret
   24 00:074B -  -  -  -  
   25 00:074B -  -  -  -  ; ***************************************************************************************
   26 00:074B -  -  -  -  ;
   27 00:074B -  -  -  -  ;									Changes and Updates
   28 00:074B -  -  -  -  ;
   29 00:074B -  -  -  -  ; ***************************************************************************************
   30 00:074B -  -  -  -  ;
   31 00:074B -  -  -  -  ;		Date			Notes
   32 00:074B -  -  -  -  ;		==== 			=====
   33 00:074B -  -  -  -  ;
   34 00:074B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:074B -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:074B -  -  -  -  ; ***************************************************************************************
    2 00:074B -  -  -  -  ; ***************************************************************************************
    3 00:074B -  -  -  -  ;
    4 00:074B -  -  -  -  ;		Name : 		not.asm
    5 00:074B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:074B -  -  -  -  ;		Date : 		5th June 2023
    7 00:074B -  -  -  -  ;		Reviewed :	No
    8 00:074B -  -  -  -  ;		Purpose :	Logical not
    9 00:074B -  -  -  -  ;
   10 00:074B -  -  -  -  ; ***************************************************************************************
   11 00:074B -  -  -  -  ; ***************************************************************************************
   12 00:074B -  -  -  -  
   13 00:074B -  -  -  -  ; ***************************************************************************************
   14 00:074B -  -  -  -  ;
   15 00:074B -  -  -  -  ;							not(x) e.g. one's complement
   16 00:074B -  -  -  -  ;
   17 00:074B -  -  -  -  ; ***************************************************************************************
   18 00:074B -  -  -  -  
   19 00:074B -  -  -  -  Unary_Not:		;; [not]
   20 00:074B CD 7A 05 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:074F CD 58 07 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0753 CD 58 07 00 		call 	__UNSwap		
   23 00:0757 C9 -  -  -  		ret
   24 00:0758 -  -  -  -  
   25 00:0758 -  -  -  -  __UNSwap:
   26 00:0758 7C -  -  -  		ld 		a,h
   27 00:0759 2F -  -  -  		cpl
   28 00:075A 67 -  -  -  		ld 		h,a
   29 00:075B 7D -  -  -  		ld 		a,l
   30 00:075C 2F -  -  -  		cpl 	
   31 00:075D 6F -  -  -  		ld 		l,a
   32 00:075E D9 -  -  -  		exx
   33 00:075F C9 -  -  -  		ret
   34 00:0760 -  -  -  -  
   35 00:0760 -  -  -  -  ; ***************************************************************************************
   36 00:0760 -  -  -  -  ;
   37 00:0760 -  -  -  -  ;									Changes and Updates
   38 00:0760 -  -  -  -  ;
   39 00:0760 -  -  -  -  ; ***************************************************************************************
   40 00:0760 -  -  -  -  ;
   41 00:0760 -  -  -  -  ;		Date			Notes
   42 00:0760 -  -  -  -  ;		==== 			=====
   43 00:0760 -  -  -  -  ;
   44 00:0760 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:0760 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0760 -  -  -  -  ; ***************************************************************************************
    2 00:0760 -  -  -  -  ; ***************************************************************************************
    3 00:0760 -  -  -  -  ;
    4 00:0760 -  -  -  -  ;		Name : 		page.asm
    5 00:0760 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0760 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0760 -  -  -  -  ;		Reviewed :	No
    8 00:0760 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0760 -  -  -  -  ;
   10 00:0760 -  -  -  -  ; ***************************************************************************************
   11 00:0760 -  -  -  -  ; ***************************************************************************************
   12 00:0760 -  -  -  -  
   13 00:0760 -  -  -  -  ; ***************************************************************************************
   14 00:0760 -  -  -  -  ;
   15 00:0760 -  -  -  -  ;							page unary function (no bracket)
   16 00:0760 -  -  -  -  ;
   17 00:0760 -  -  -  -  ; ***************************************************************************************
   18 00:0760 -  -  -  -  
   19 00:0760 -  -  -  -  Unary_Page:	;; [page]
   20 00:0760 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0764 D9 -  -  -  			exx
   22 00:0765 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:0769 D9 -  -  -  			exx
   24 00:076A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:076C C9 -  -  -  			ret
   26 00:076D -  -  -  -  
   27 00:076D -  -  -  -  ; ***************************************************************************************
   28 00:076D -  -  -  -  ;
   29 00:076D -  -  -  -  ;									Changes and Updates
   30 00:076D -  -  -  -  ;
   31 00:076D -  -  -  -  ; ***************************************************************************************
   32 00:076D -  -  -  -  ;
   33 00:076D -  -  -  -  ;		Date			Notes
   34 00:076D -  -  -  -  ;		==== 			=====
   35 00:076D -  -  -  -  ;
   36 00:076D -  -  -  -  ; ***************************************************************************************
   37 00:076D -  -  -  -  			
Listing for file "_build.asm"
   42 00:076D -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:076D -  -  -  -  ; ***************************************************************************************
    2 00:076D -  -  -  -  ; ***************************************************************************************
    3 00:076D -  -  -  -  ;
    4 00:076D -  -  -  -  ;		Name : 		random.asm
    5 00:076D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:076D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:076D -  -  -  -  ;		Reviewed :	No
    8 00:076D -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:076D -  -  -  -  ;
   10 00:076D -  -  -  -  ; ***************************************************************************************
   11 00:076D -  -  -  -  ; ***************************************************************************************
   12 00:076D -  -  -  -  
   13 00:076D -  -  -  -  ; ***************************************************************************************
   14 00:076D -  -  -  -  ;
   15 00:076D -  -  -  -  ;								Random unary function
   16 00:076D -  -  -  -  ;
   17 00:076D -  -  -  -  ; ***************************************************************************************
   18 00:076D -  -  -  -  
   19 00:076D -  -  -  -  Unary_Random:	;; [rnd]
   20 00:076D F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:0775 CD 7A 05 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:0779 D9 -  -  -  		exx 								; is it -ve
   23 00:077A CB 7C -  -  		bit 	7,h
   24 00:077C D9 -  -  -  		exx
   25 00:077D 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:077F 22 70 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0783 D9 -  -  -  		exx
   28 00:0784 22 74 00 00 		ld 		(RandomSeed+4),hl
   29 00:0788 D9 -  -  -  		exx
   30 00:0789 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:078B C9 -  -  -  		ret
   32 00:078C -  -  -  -  _URDontSeed:		
   33 00:078C -  -  -  -  
   34 00:078C CD 1F 10 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:0790 28 1C -  -  		jr 		z,_URFail
   36 00:0792 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0793 D9 -  -  -  		exx
   38 00:0794 E5 -  -  -  		push 	hl
   39 00:0795 D9 -  -  -  		exx
   40 00:0796 -  -  -  -  		;
   41 00:0796 CD BF 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:079A D9 -  -  -  		exx
   43 00:079B CD BF 07 00 		call 	URandomHL
   44 00:079F CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:07A1 D9 -  -  -  		exx
   46 00:07A2 -  -  -  -  		;
   47 00:07A2 D9 -  -  -  		exx 								; restore range.
   48 00:07A3 D1 -  -  -  		pop 	de
   49 00:07A4 D9 -  -  -  		exx
   50 00:07A5 D1 -  -  -  		pop 	de
   51 00:07A6 -  -  -  -  		;
   52 00:07A6 CD B0 0E 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:07AA 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:07AB 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:07AD C9 -  -  -  		ret
   56 00:07AE -  -  -  -  _URFail:
   57 00:07AE 3E 03 C3 6D 
              03 00 -  -  		ERR_BADVALUE
   58 00:07B4 -  -  -  -  ; ***************************************************************************************
   59 00:07B4 -  -  -  -  ;
   60 00:07B4 -  -  -  -  ; 									Push RNG off zero
   61 00:07B4 -  -  -  -  ;
   62 00:07B4 -  -  -  -  ; ***************************************************************************************
   63 00:07B4 -  -  -  -  
   64 00:07B4 -  -  -  -  UnaryRandomInitialise:
   65 00:07B4 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:07B6 -  -  -  -  _URILoop:
   67 00:07B6 C5 -  -  -  		push 	bc
   68 00:07B7 CD BF 07 00 		call 	URandomHL
   69 00:07BB C1 -  -  -  		pop 	bc
   70 00:07BC 10 F8 -  -  		djnz 	_URILoop
   71 00:07BE C9 -  -  -  		ret
   72 00:07BF -  -  -  -  
   73 00:07BF -  -  -  -  ; ***************************************************************************************
   74 00:07BF -  -  -  -  ;
   75 00:07BF -  -  -  -  ;							16 bit random number generator
   76 00:07BF -  -  -  -  ;
   77 00:07BF -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:07BF -  -  -  -  ;		Actual author unspecified.
   79 00:07BF -  -  -  -  ;
   80 00:07BF -  -  -  -  ; ***************************************************************************************
   81 00:07BF -  -  -  -  
   82 00:07BF -  -  -  -  URandomHL:
   83 00:07BF 2A 70 00 00 	    ld 		hl,(RandomSeed)
   84 00:07C3 ED 5B 74 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:07C8 44 -  -  -  	    ld 		b,h
   86 00:07C9 4D -  -  -  	    ld 		c,l
   87 00:07CA 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:07CF 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:07D4 2C -  -  -  	    inc 	l
   90 00:07D5 09 -  -  -  	    add 	hl,bc
   91 00:07D6 22 70 00 00 	    ld 		(RandomSeed),hl
   92 00:07DA 2A 74 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:07DE ED 5A -  -  	    adc 	hl,de
   94 00:07E0 22 74 00 00 	    ld 		(RandomSeed+4),hl
   95 00:07E4 EB -  -  -  	    ex 		de,hl
   96 00:07E5 2A 78 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:07E9 ED 4B 7C 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:07EE 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:07F3 ED 43 7C 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:07F8 9F -  -  -  	    sbc 	a,a
  101 00:07F9 E6 C5 -  -  	    and 	%11000101
  102 00:07FB AD -  -  -  	    xor 	l
  103 00:07FC 6F -  -  -  	    ld 		l,a
  104 00:07FD 22 78 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0801 EB -  -  -  	    ex 		de,hl
  106 00:0802 09 -  -  -  	    add 	hl,bc
  107 00:0803 C9 -  -  -  	    ret		
  108 00:0804 -  -  -  -  
  109 00:0804 -  -  -  -  ; ***************************************************************************************
  110 00:0804 -  -  -  -  ;
  111 00:0804 -  -  -  -  ;									Changes and Updates
  112 00:0804 -  -  -  -  ;
  113 00:0804 -  -  -  -  ; ***************************************************************************************
  114 00:0804 -  -  -  -  ;
  115 00:0804 -  -  -  -  ;		Date			Notes
  116 00:0804 -  -  -  -  ;		==== 			=====
  117 00:0804 -  -  -  -  ;
  118 00:0804 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:0804 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0804 -  -  -  -  ; ***************************************************************************************
    2 00:0804 -  -  -  -  ; ***************************************************************************************
    3 00:0804 -  -  -  -  ;
    4 00:0804 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0804 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0804 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0804 -  -  -  -  ;		Reviewed :	No
    8 00:0804 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0804 -  -  -  -  ;
   10 00:0804 -  -  -  -  ; ***************************************************************************************
   11 00:0804 -  -  -  -  ; ***************************************************************************************
   12 00:0804 -  -  -  -  
   13 00:0804 -  -  -  -  ; ***************************************************************************************
   14 00:0804 -  -  -  -  ;
   15 00:0804 -  -  -  -  ;								sgn unary function
   16 00:0804 -  -  -  -  ;
   17 00:0804 -  -  -  -  ; ***************************************************************************************
   18 00:0804 -  -  -  -  
   19 00:0804 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0804 CD 7A 05 00 		call	EvaluateIntegerTerm 		; get value
   21 00:0808 CD 1F 10 00 		call 	Int32Zero 					; integer sgn() code
   22 00:080C CA 78 04 00 		jp 		z,UnaryInt32False
   23 00:0810 D9 -  -  -  		exx
   24 00:0811 CB 7C -  -  		bit 	7,h
   25 00:0813 D9 -  -  -  		exx
   26 00:0814 C2 74 04 00 		jp 		nz,UnaryInt32True
   27 00:0818 3E 01 -  -  		ld 		a,1
   28 00:081A C3 C5 05 00 		jp 		Return8BitConstant
   29 00:081E -  -  -  -  
   30 00:081E -  -  -  -  ; ***************************************************************************************
   31 00:081E -  -  -  -  ;
   32 00:081E -  -  -  -  ;									Changes and Updates
   33 00:081E -  -  -  -  ;
   34 00:081E -  -  -  -  ; ***************************************************************************************
   35 00:081E -  -  -  -  ;
   36 00:081E -  -  -  -  ;		Date			Notes
   37 00:081E -  -  -  -  ;		==== 			=====
   38 00:081E -  -  -  -  ;
   39 00:081E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:081E -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:081E -  -  -  -  ; ***************************************************************************************
    2 00:081E -  -  -  -  ; ***************************************************************************************
    3 00:081E -  -  -  -  ;
    4 00:081E -  -  -  -  ;		Name : 		simple.asm
    5 00:081E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:081E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:081E -  -  -  -  ;		Reviewed :	No
    8 00:081E -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:081E -  -  -  -  ;
   10 00:081E -  -  -  -  ; ***************************************************************************************
   11 00:081E -  -  -  -  ; ***************************************************************************************
   12 00:081E -  -  -  -  
   13 00:081E -  -  -  -  ; ***************************************************************************************
   14 00:081E -  -  -  -  ;
   15 00:081E -  -  -  -  ;								( unary function (think about it)
   16 00:081E -  -  -  -  ;
   17 00:081E -  -  -  -  ; ***************************************************************************************
   18 00:081E -  -  -  -  
   19 00:081E -  -  -  -  Unary_Brackets:	;; [(]
   20 00:081E CD 21 05 00 		call 	EvaluateAtPrecedence0
   21 00:0822 C3 37 03 00 		jp  	CheckRightBracket
   22 00:0826 -  -  -  -  
   23 00:0826 -  -  -  -  ; ***************************************************************************************
   24 00:0826 -  -  -  -  ;
   25 00:0826 -  -  -  -  ;									Handle &x
   26 00:0826 -  -  -  -  ;
   27 00:0826 -  -  -  -  ; ***************************************************************************************
   28 00:0826 -  -  -  -  
   29 00:0826 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0826 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0829 E6 C0 -  -  		and 		$C0
   32 00:082B FE 40 -  -  		cp 			$40
   33 00:082D C2 D7 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0831 C3 2F 06 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0835 -  -  -  -  
   36 00:0835 -  -  -  -  ; ***************************************************************************************
   37 00:0835 -  -  -  -  ;
   38 00:0835 -  -  -  -  ;									Changes and Updates
   39 00:0835 -  -  -  -  ;
   40 00:0835 -  -  -  -  ; ***************************************************************************************
   41 00:0835 -  -  -  -  ;
   42 00:0835 -  -  -  -  ;		Date			Notes
   43 00:0835 -  -  -  -  ;		==== 			=====
   44 00:0835 -  -  -  -  ;
   45 00:0835 -  -  -  -  ; ***************************************************************************************
   46 00:0835 -  -  -  -  		
Listing for file "_build.asm"
   45 00:0835 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0835 -  -  -  -  ; ***************************************************************************************
    2 00:0835 -  -  -  -  ; ***************************************************************************************
    3 00:0835 -  -  -  -  ;
    4 00:0835 -  -  -  -  ;		Name : 		str.asm
    5 00:0835 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0835 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0835 -  -  -  -  ;		Reviewed :	No
    8 00:0835 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0835 -  -  -  -  ;
   10 00:0835 -  -  -  -  ; ***************************************************************************************
   11 00:0835 -  -  -  -  ; ***************************************************************************************
   12 00:0835 -  -  -  -  
   13 00:0835 -  -  -  -  ; ***************************************************************************************
   14 00:0835 -  -  -  -  ;
   15 00:0835 -  -  -  -  ;								Str$() unary function
   16 00:0835 -  -  -  -  ;
   17 00:0835 -  -  -  -  ; ***************************************************************************************
   18 00:0835 -  -  -  -  
   19 00:0835 -  -  -  -  Unary_Str:	;; [str]
   20 00:0835 CD 45 03 00 		call 	CheckDollar
   21 00:0839 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:083C EE AC -  -  		xor		KWD_TILDE
   23 00:083E F5 -  -  -  		push 	af
   24 00:083F 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:0841 DD 23 -  -  		inc 	ix
   26 00:0843 -  -  -  -  _USNotHex:		
   27 00:0843 CD 7A 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:0847 01 8E 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:084B F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:084C 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:084E 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:0850 3E 10 -  -  		ld 		a,16
   33 00:0852 -  -  -  -  _USNotHex2:		
   34 00:0852 CD 67 10 00 		call 	Int32ToString 				
   35 00:0856 21 8E 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:085A 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:085C C9 -  -  -  		ret
   38 00:085D -  -  -  -  
   39 00:085D -  -  -  -  ; ***************************************************************************************
   40 00:085D -  -  -  -  ;
   41 00:085D -  -  -  -  ;									Changes and Updates
   42 00:085D -  -  -  -  ;
   43 00:085D -  -  -  -  ; ***************************************************************************************
   44 00:085D -  -  -  -  ;
   45 00:085D -  -  -  -  ;		Date			Notes
   46 00:085D -  -  -  -  ;		==== 			=====
   47 00:085D -  -  -  -  ;
   48 00:085D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:085D -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:085D -  -  -  -  ; ***************************************************************************************
    2 00:085D -  -  -  -  ; ***************************************************************************************
    3 00:085D -  -  -  -  ;
    4 00:085D -  -  -  -  ;		Name : 		time.asm
    5 00:085D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:085D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:085D -  -  -  -  ;		Reviewed :	No
    8 00:085D -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:085D -  -  -  -  ;
   10 00:085D -  -  -  -  ; ***************************************************************************************
   11 00:085D -  -  -  -  ; ***************************************************************************************
   12 00:085D -  -  -  -  
   13 00:085D -  -  -  -  ; ***************************************************************************************
   14 00:085D -  -  -  -  ;
   15 00:085D -  -  -  -  ;							Get system time in ms
   16 00:085D -  -  -  -  ;
   17 00:085D -  -  -  -  ; ***************************************************************************************
   18 00:085D -  -  -  -  
   19 00:085D -  -  -  -  Unary_Time:	;; [time]
   20 00:085D CD B8 10 00 			call 	SYSGetTimer
   21 00:0861 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0863 C9 -  -  -  			ret
   23 00:0864 -  -  -  -  
   24 00:0864 -  -  -  -  ; ***************************************************************************************
   25 00:0864 -  -  -  -  ;
   26 00:0864 -  -  -  -  ;									Changes and Updates
   27 00:0864 -  -  -  -  ;
   28 00:0864 -  -  -  -  ; ***************************************************************************************
   29 00:0864 -  -  -  -  ;
   30 00:0864 -  -  -  -  ;		Date			Notes
   31 00:0864 -  -  -  -  ;		==== 			=====
   32 00:0864 -  -  -  -  ;
   33 00:0864 -  -  -  -  ; ***************************************************************************************
   34 00:0864 -  -  -  -  			
Listing for file "_build.asm"
   47 00:0864 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0864 -  -  -  -  ; ***************************************************************************************
    2 00:0864 -  -  -  -  ; ***************************************************************************************
    3 00:0864 -  -  -  -  ;
    4 00:0864 -  -  -  -  ;		Name : 		top.asm
    5 00:0864 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0864 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0864 -  -  -  -  ;		Reviewed :	No
    8 00:0864 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0864 -  -  -  -  ;
   10 00:0864 -  -  -  -  ; ***************************************************************************************
   11 00:0864 -  -  -  -  ; ***************************************************************************************
   12 00:0864 -  -  -  -  
   13 00:0864 -  -  -  -  ; ***************************************************************************************
   14 00:0864 -  -  -  -  ;
   15 00:0864 -  -  -  -  ;							page unary function (no bracket)
   16 00:0864 -  -  -  -  ;
   17 00:0864 -  -  -  -  ; ***************************************************************************************
   18 00:0864 -  -  -  -  
   19 00:0864 -  -  -  -  Unary_Top:	;; [top]
   20 00:0864 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:0868 D9 -  -  -  			exx
   22 00:0869 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:086D D9 -  -  -  			exx
   24 00:086E 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0870 C9 -  -  -  			ret
   26 00:0871 -  -  -  -  
   27 00:0871 -  -  -  -  ; ***************************************************************************************
   28 00:0871 -  -  -  -  ;
   29 00:0871 -  -  -  -  ;									Changes and Updates
   30 00:0871 -  -  -  -  ;
   31 00:0871 -  -  -  -  ; ***************************************************************************************
   32 00:0871 -  -  -  -  ;
   33 00:0871 -  -  -  -  ;		Date			Notes
   34 00:0871 -  -  -  -  ;		==== 			=====
   35 00:0871 -  -  -  -  ;
   36 00:0871 -  -  -  -  ; ***************************************************************************************
   37 00:0871 -  -  -  -  			
Listing for file "_build.asm"
   48 00:0871 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0871 -  -  -  -  ; ***************************************************************************************
    2 00:0871 -  -  -  -  ; ***************************************************************************************
    3 00:0871 -  -  -  -  ;
    4 00:0871 -  -  -  -  ;		Name : 		val.asm
    5 00:0871 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0871 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0871 -  -  -  -  ;		Reviewed :	No
    8 00:0871 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0871 -  -  -  -  ;
   10 00:0871 -  -  -  -  ; ***************************************************************************************
   11 00:0871 -  -  -  -  ; ***************************************************************************************
   12 00:0871 -  -  -  -  
   13 00:0871 -  -  -  -  ; ***************************************************************************************
   14 00:0871 -  -  -  -  ;
   15 00:0871 -  -  -  -  ;								val( unary function
   16 00:0871 -  -  -  -  ;
   17 00:0871 -  -  -  -  ; ***************************************************************************************
   18 00:0871 -  -  -  -  
   19 00:0871 -  -  -  -  Unary_Val:	;; [val]
   20 00:0871 CD 89 05 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0875 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:0876 C1 -  -  -  		pop 	bc
   23 00:0877 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0879 CD 45 0F 00 		call 	Int32FromString 			; get the integer part.
   25 00:087D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:087F C8 -  -  -  		ret		z 							; okay
   27 00:0880 3E 03 C3 6D 
              03 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:0886 -  -  -  -  
   29 00:0886 -  -  -  -  ; ***************************************************************************************
   30 00:0886 -  -  -  -  ;
   31 00:0886 -  -  -  -  ;									Changes and Updates
   32 00:0886 -  -  -  -  ;
   33 00:0886 -  -  -  -  ; ***************************************************************************************
   34 00:0886 -  -  -  -  ;
   35 00:0886 -  -  -  -  ;		Date			Notes
   36 00:0886 -  -  -  -  ;		==== 			=====
   37 00:0886 -  -  -  -  ;
   38 00:0886 -  -  -  -  ; ***************************************************************************************
   39 00:0886 -  -  -  -  		
Listing for file "_build.asm"
   49 00:0886 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:0886 -  -  -  -  ; ***************************************************************************************
    2 00:0886 -  -  -  -  ; ***************************************************************************************
    3 00:0886 -  -  -  -  ;
    4 00:0886 -  -  -  -  ;		Name : 		allocate.asm
    5 00:0886 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0886 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0886 -  -  -  -  ;		Reviewed :	No
    8 00:0886 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:0886 -  -  -  -  ;
   10 00:0886 -  -  -  -  ; ***************************************************************************************
   11 00:0886 -  -  -  -  ; ***************************************************************************************
   12 00:0886 -  -  -  -  
   13 00:0886 -  -  -  -  ; ***************************************************************************************
   14 00:0886 -  -  -  -  ;
   15 00:0886 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:0886 -  -  -  -  ;
   17 00:0886 -  -  -  -  ; ***************************************************************************************
   18 00:0886 -  -  -  -  
   19 00:0886 -  -  -  -  AllocateBytes:
   20 00:0886 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:0887 21 00 00 00 		ld 		hl,$000000
   22 00:088B 62 -  -  -  		ld 		h,d
   23 00:088C 6B -  -  -  		ld 		l,e
   24 00:088D -  -  -  -  		;
   25 00:088D ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:0892 D5 -  -  -  		push 	de 							; save on stack
   27 00:0893 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:0894 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   29 00:0898 -  -  -  -  		;
   30 00:0898 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:0899 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:089D AF -  -  -  		xor 	a
   33 00:089E ED 52 -  -  		sbc 	hl,de
   34 00:08A0 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:08A1 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:08A2 3E 0A C3 6D 
              03 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:08A8 -  -  -  -  
   38 00:08A8 -  -  -  -  ; ***************************************************************************************
   39 00:08A8 -  -  -  -  ;
   40 00:08A8 -  -  -  -  ;									Changes and Updates
   41 00:08A8 -  -  -  -  ;
   42 00:08A8 -  -  -  -  ; ***************************************************************************************
   43 00:08A8 -  -  -  -  ;
   44 00:08A8 -  -  -  -  ;		Date			Notes
   45 00:08A8 -  -  -  -  ;		==== 			=====
   46 00:08A8 -  -  -  -  ;
   47 00:08A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:08A8 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:08A8 -  -  -  -  ; ***************************************************************************************
    2 00:08A8 -  -  -  -  ; ***************************************************************************************
    3 00:08A8 -  -  -  -  ;
    4 00:08A8 -  -  -  -  ;		Name : 		clear.asm
    5 00:08A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08A8 -  -  -  -  ;		Reviewed :	No
    8 00:08A8 -  -  -  -  ;		Purpose :	Clear command.
    9 00:08A8 -  -  -  -  ;
   10 00:08A8 -  -  -  -  ; ***************************************************************************************
   11 00:08A8 -  -  -  -  ; ***************************************************************************************
   12 00:08A8 -  -  -  -  
   13 00:08A8 -  -  -  -  ; ***************************************************************************************
   14 00:08A8 -  -  -  -  ;
   15 00:08A8 -  -  -  -  ;										CLEAR command
   16 00:08A8 -  -  -  -  ;
   17 00:08A8 -  -  -  -  ; ***************************************************************************************
   18 00:08A8 -  -  -  -  
   19 00:08A8 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:08A8 -  -  -  -  		;
   21 00:08A8 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:08A8 -  -  -  -  		;
   23 00:08A8 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:08AC -  -  -  -  _CCFindLow:
   25 00:08AC 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:08B0 5E -  -  -  		ld 		e,(hl)		
   27 00:08B1 19 -  -  -  		add 	hl,de
   28 00:08B2 7B -  -  -  		ld 		a,e
   29 00:08B3 B7 -  -  -  		or 		a
   30 00:08B4 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:08B6 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:08B7 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:08BB 23 -  -  -  		inc 	hl 							; one for luck
   34 00:08BC 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:08C0 -  -  -  -  		;
   36 00:08C0 -  -  -  -  		; 	 		Reset the language stack
   37 00:08C0 -  -  -  -  		;
   38 00:08C0 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:08C4 -  -  -  -  		;
   40 00:08C4 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:08C8 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:08CC 19 -  -  -  		add 	hl,de
   43 00:08CD 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:08CF 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:08D3 -  -  -  -  		;
   46 00:08D3 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:08D7 19 -  -  -  		add 	hl,de
   48 00:08D8 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:08DC -  -  -  -  		;
   50 00:08DC -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:08DC -  -  -  -  		;
   52 00:08DC 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:08E0 -  -  -  -  _CCFClearHT:
   54 00:08E0 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:08E1 36 00 -  -  		ld 		(hl),0
   56 00:08E3 1B -  -  -  		dec 	de
   57 00:08E4 7A -  -  -  		ld 		a,d
   58 00:08E5 B3 -  -  -  		or 		e
   59 00:08E6 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:08E8 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   61 00:08EC -  -  -  -  		;
   62 00:08EC -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:08EC -  -  -  -  		;
   64 00:08EC 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:08F0 -  -  -  -  		;
   66 00:08F0 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:08F0 -  -  -  -  		;
   68 00:08F0 CD B4 07 00 		call 	UnaryRandomInitialise
   69 00:08F4 -  -  -  -  		;
   70 00:08F4 -  -  -  -  		;		Erase the stack
   71 00:08F4 -  -  -  -  		;
   72 00:08F4 CD B5 09 00 		call 	StackReset 					; reset the basic stack to empty
   73 00:08F8 C9 -  -  -  		ret
   74 00:08F9 -  -  -  -  
   75 00:08F9 -  -  -  -  ; ***************************************************************************************
   76 00:08F9 -  -  -  -  ;
   77 00:08F9 -  -  -  -  ;									Changes and Updates
   78 00:08F9 -  -  -  -  ;
   79 00:08F9 -  -  -  -  ; ***************************************************************************************
   80 00:08F9 -  -  -  -  ;
   81 00:08F9 -  -  -  -  ;		Date			Notes
   82 00:08F9 -  -  -  -  ;		==== 			=====
   83 00:08F9 -  -  -  -  ;
   84 00:08F9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:08F9 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:08F9 -  -  -  -  ; ***************************************************************************************
    2 00:08F9 -  -  -  -  ; ***************************************************************************************
    3 00:08F9 -  -  -  -  ;
    4 00:08F9 -  -  -  -  ;		Name : 		instance.asm
    5 00:08F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F9 -  -  -  -  ;		Reviewed :	No
    8 00:08F9 -  -  -  -  ;		Purpose :	Instance handling
    9 00:08F9 -  -  -  -  ;
   10 00:08F9 -  -  -  -  ; ***************************************************************************************
   11 00:08F9 -  -  -  -  ; ***************************************************************************************
   12 00:08F9 -  -  -  -  
   13 00:08F9 -  -  -  -  ; ***************************************************************************************
   14 00:08F9 -  -  -  -  ;
   15 00:08F9 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:08F9 -  -  -  -  ;
   17 00:08F9 -  -  -  -  ; ***************************************************************************************
   18 00:08F9 -  -  -  -  
   19 00:08F9 -  -  -  -  SetCurrentInstance:
   20 00:08F9 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:08FE 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0902 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0907 -  -  -  -  
   24 00:0907 C9 -  -  -  		ret
   25 00:0908 -  -  -  -  
   26 00:0908 -  -  -  -  
   27 00:0908 -  -  -  -  ; ***************************************************************************************
   28 00:0908 -  -  -  -  ;
   29 00:0908 -  -  -  -  ;									Changes and Updates
   30 00:0908 -  -  -  -  ;
   31 00:0908 -  -  -  -  ; ***************************************************************************************
   32 00:0908 -  -  -  -  ;
   33 00:0908 -  -  -  -  ;		Date			Notes
   34 00:0908 -  -  -  -  ;		==== 			=====
   35 00:0908 -  -  -  -  ;
   36 00:0908 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:0908 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0908 -  -  -  -  ; ***************************************************************************************
    2 00:0908 -  -  -  -  ; ***************************************************************************************
    3 00:0908 -  -  -  -  ;
    4 00:0908 -  -  -  -  ;		Name : 		new.asm
    5 00:0908 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0908 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0908 -  -  -  -  ;		Reviewed :	No
    8 00:0908 -  -  -  -  ;		Purpose :	New command.
    9 00:0908 -  -  -  -  ;
   10 00:0908 -  -  -  -  ; ***************************************************************************************
   11 00:0908 -  -  -  -  ; ***************************************************************************************
   12 00:0908 -  -  -  -  
   13 00:0908 -  -  -  -  ; ***************************************************************************************
   14 00:0908 -  -  -  -  ;
   15 00:0908 -  -  -  -  ;										NEW command
   16 00:0908 -  -  -  -  ;
   17 00:0908 -  -  -  -  ; ***************************************************************************************
   18 00:0908 -  -  -  -  
   19 00:0908 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0908 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:090C 36 00 -  -  		ld 		(hl),0
   22 00:090E CD A8 08 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0912 3E 00 C3 6D 
              03 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0918 -  -  -  -  
   25 00:0918 -  -  -  -  ; ***************************************************************************************
   26 00:0918 -  -  -  -  ;
   27 00:0918 -  -  -  -  ;									Changes and Updates
   28 00:0918 -  -  -  -  ;
   29 00:0918 -  -  -  -  ; ***************************************************************************************
   30 00:0918 -  -  -  -  ;
   31 00:0918 -  -  -  -  ;		Date			Notes
   32 00:0918 -  -  -  -  ;		==== 			=====
   33 00:0918 -  -  -  -  ;
   34 00:0918 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:0918 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:0918 -  -  -  -  ; ***************************************************************************************
    2 00:0918 -  -  -  -  ; ***************************************************************************************
    3 00:0918 -  -  -  -  ;
    4 00:0918 -  -  -  -  ;		Name : 		gosub.asm
    5 00:0918 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0918 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0918 -  -  -  -  ;		Reviewed :	No
    8 00:0918 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:0918 -  -  -  -  ;
   10 00:0918 -  -  -  -  ; ***************************************************************************************
   11 00:0918 -  -  -  -  
   12 00:0918 -  -  -  -  ; ***************************************************************************************
   13 00:0918 -  -  -  -  ;
   14 00:0918 -  -  -  -  ;									Gosub Command
   15 00:0918 -  -  -  -  ;
   16 00:0918 -  -  -  -  ; ***************************************************************************************
   17 00:0918 -  -  -  -  
   18 00:0918 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:0918 3E 16 -  -  			ld		a,STM_GOSUB
   20 00:091A CD C1 09 00 			call 	StackOpenFrame
   21 00:091E CD 4D 09 00 			call 	GoGetLineNumber
   22 00:0922 E5 -  -  -  			push 	hl
   23 00:0923 CD FD 09 00 			call 	StackSavePosition
   24 00:0927 E1 -  -  -  			pop 	hl
   25 00:0928 CD 5A 09 00 			call	TransferToLineHL
   26 00:092C C9 -  -  -  			ret
   27 00:092D -  -  -  -  
   28 00:092D -  -  -  -  ; ***************************************************************************************
   29 00:092D -  -  -  -  ;
   30 00:092D -  -  -  -  ;									Return command
   31 00:092D -  -  -  -  ;
   32 00:092D -  -  -  -  ; ***************************************************************************************
   33 00:092D -  -  -  -  
   34 00:092D -  -  -  -  Command_Return: ;; [return]
   35 00:092D 3E 16 -  -  			ld		a,STM_GOSUB
   36 00:092F CD F7 09 00 			call 	StackCheckFrame
   37 00:0933 20 09 -  -  			jr 		nz,_ReturnError
   38 00:0935 CD 18 0A 00 			call 	StackLoadPosition
   39 00:0939 CD E5 09 00 			call 	StackCloseFrame
   40 00:093D C9 -  -  -  			ret
   41 00:093E -  -  -  -  _ReturnError:
   42 00:093E 3E 07 C3 6D 
              03 00 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:0944 -  -  -  -  
   44 00:0944 -  -  -  -  ; ***************************************************************************************
   45 00:0944 -  -  -  -  ;
   46 00:0944 -  -  -  -  ;									Changes and Updates
   47 00:0944 -  -  -  -  ;
   48 00:0944 -  -  -  -  ; ***************************************************************************************
   49 00:0944 -  -  -  -  ;
   50 00:0944 -  -  -  -  ;		Date			Notes
   51 00:0944 -  -  -  -  ;		==== 			=====
   52 00:0944 -  -  -  -  ;
   53 00:0944 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:0944 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:0944 -  -  -  -  ; ***************************************************************************************
    2 00:0944 -  -  -  -  ; ***************************************************************************************
    3 00:0944 -  -  -  -  ;
    4 00:0944 -  -  -  -  ;		Name : 		goto.asm
    5 00:0944 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0944 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0944 -  -  -  -  ;		Reviewed :	No
    8 00:0944 -  -  -  -  ;		Purpose :	Goto command
    9 00:0944 -  -  -  -  ;
   10 00:0944 -  -  -  -  ; ***************************************************************************************
   11 00:0944 -  -  -  -  
   12 00:0944 -  -  -  -  ; ***************************************************************************************
   13 00:0944 -  -  -  -  ;
   14 00:0944 -  -  -  -  ;									Goto Command
   15 00:0944 -  -  -  -  ;
   16 00:0944 -  -  -  -  ; ***************************************************************************************
   17 00:0944 -  -  -  -  
   18 00:0944 -  -  -  -  Command_GOTO: ;; [goto]
   19 00:0944 CD 4D 09 00 			call 	GoGetLineNumber
   20 00:0948 CD 5A 09 00 			call	TransferToLineHL
   21 00:094C C9 -  -  -  			ret
   22 00:094D -  -  -  -  
   23 00:094D -  -  -  -  ; ***************************************************************************************
   24 00:094D -  -  -  -  ;
   25 00:094D -  -  -  -  ;							Get and validate a line number in HL
   26 00:094D -  -  -  -  ;
   27 00:094D -  -  -  -  ; ***************************************************************************************
   28 00:094D -  -  -  -  
   29 00:094D -  -  -  -  GoGetLineNumber:
   30 00:094D CD A0 05 00 			call 	EvaluateInteger
   31 00:0951 D9 -  -  -  			exx
   32 00:0952 7C -  -  -  			ld 		a,h
   33 00:0953 B5 -  -  -  			or 		l
   34 00:0954 D9 -  -  -  			exx
   35 00:0955 C8 -  -  -  			ret 	z
   36 00:0956 C3 D1 03 00 			jp 		BadValue
   37 00:095A -  -  -  -  
   38 00:095A -  -  -  -  ; ***************************************************************************************
   39 00:095A -  -  -  -  ;
   40 00:095A -  -  -  -  ;							Transfer to Line Number HL
   41 00:095A -  -  -  -  ;
   42 00:095A -  -  -  -  ; ***************************************************************************************
   43 00:095A -  -  -  -  
   44 00:095A -  -  -  -  TransferToLineHL:
   45 00:095A EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:095B 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:095F DD 2A 38 00 
              00 -  -  -  			ld 		ix,(CodeAddress)
   48 00:0964 -  -  -  -  _TLSearch:	
   49 00:0964 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:0966 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:0969 B7 -  -  -  			or 		a 						; if zero
   52 00:096A 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:096C 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:096D -  -  -  -  
   55 00:096D 7B -  -  -  			ld 		a,e						; compare line address
   56 00:096E DD BE 01 -  			cp 		(ix+1)
   57 00:0971 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:0973 7A -  -  -  			ld 		a,d
   59 00:0974 DD BE 02 -  			cp 		(ix+2)
   60 00:0977 20 EB -  -  			jr 		nz,_TLSearch
   61 00:0979 -  -  -  -  			;
   62 00:0979 DD 22 5C 00 
              00 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 00:097E DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:0980 DD 23 -  -  			inc 	ix
   65 00:0982 DD 23 -  -  			inc 	ix
   66 00:0984 -  -  -  -  
   67 00:0984 C9 -  -  -  			ret
   68 00:0985 -  -  -  -  
   69 00:0985 -  -  -  -  _TLNotFound:
   70 00:0985 3E 09 C3 6D 
              03 00 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:098B -  -  -  -  
   72 00:098B -  -  -  -  ; ***************************************************************************************
   73 00:098B -  -  -  -  ;
   74 00:098B -  -  -  -  ;									Changes and Updates
   75 00:098B -  -  -  -  ;
   76 00:098B -  -  -  -  ; ***************************************************************************************
   77 00:098B -  -  -  -  ;
   78 00:098B -  -  -  -  ;		Date			Notes
   79 00:098B -  -  -  -  ;		==== 			=====
   80 00:098B -  -  -  -  ;
   81 00:098B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:098B -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:098B -  -  -  -  ; ***************************************************************************************
    2 00:098B -  -  -  -  ; ***************************************************************************************
    3 00:098B -  -  -  -  ;
    4 00:098B -  -  -  -  ;		Name : 		repeat.asm
    5 00:098B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:098B -  -  -  -  ;		Date : 		7th June 2022
    7 00:098B -  -  -  -  ;		Reviewed :	No
    8 00:098B -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:098B -  -  -  -  ;
   10 00:098B -  -  -  -  ; ***************************************************************************************
   11 00:098B -  -  -  -  
   12 00:098B -  -  -  -  ; ***************************************************************************************
   13 00:098B -  -  -  -  ;
   14 00:098B -  -  -  -  ;									Repeat Command
   15 00:098B -  -  -  -  ;
   16 00:098B -  -  -  -  ; ***************************************************************************************
   17 00:098B -  -  -  -  
   18 00:098B -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:098B 3E 26 -  -  			ld		a,STM_REPEAT
   20 00:098D CD C1 09 00 			call 	StackOpenFrame
   21 00:0991 CD FD 09 00 			call 	StackSavePosition
   22 00:0995 C9 -  -  -  			ret
   23 00:0996 -  -  -  -  
   24 00:0996 -  -  -  -  ; ***************************************************************************************
   25 00:0996 -  -  -  -  ;
   26 00:0996 -  -  -  -  ;									Until command
   27 00:0996 -  -  -  -  ;
   28 00:0996 -  -  -  -  ; ***************************************************************************************
   29 00:0996 -  -  -  -  
   30 00:0996 -  -  -  -  Command_Until: ;; [until]
   31 00:0996 3E 00 -  -  			ld		a,STM_UNTIL
   32 00:0998 CD F7 09 00 			call 	StackCheckFrame
   33 00:099C 20 11 -  -  			jr 		nz,_UntilError
   34 00:099E CD A0 05 00 			call	EvaluateInteger 		; until what
   35 00:09A2 CD 1F 10 00 			call 	Int32Zero 				; check zero
   36 00:09A6 CA 18 0A 00 			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:09AA CD E5 09 00 			call 	StackCloseFrame 		; otherwise end frame.
   38 00:09AE C9 -  -  -  			ret
   39 00:09AF -  -  -  -  _UntilError:
   40 00:09AF 3E 11 C3 6D 
              03 00 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:09B5 -  -  -  -  
   42 00:09B5 -  -  -  -  ; ***************************************************************************************
   43 00:09B5 -  -  -  -  ;
   44 00:09B5 -  -  -  -  ;									Changes and Updates
   45 00:09B5 -  -  -  -  ;
   46 00:09B5 -  -  -  -  ; ***************************************************************************************
   47 00:09B5 -  -  -  -  ;
   48 00:09B5 -  -  -  -  ;		Date			Notes
   49 00:09B5 -  -  -  -  ;		==== 			=====
   50 00:09B5 -  -  -  -  ;
   51 00:09B5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:09B5 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:09B5 -  -  -  -  ; ***************************************************************************************
    2 00:09B5 -  -  -  -  ; ***************************************************************************************
    3 00:09B5 -  -  -  -  ;
    4 00:09B5 -  -  -  -  ;		Name : 		stack.asm
    5 00:09B5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09B5 -  -  -  -  ;		Date : 		6th June 2022
    7 00:09B5 -  -  -  -  ;		Reviewed :	No
    8 00:09B5 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:09B5 -  -  -  -  ;
   10 00:09B5 -  -  -  -  ; ***************************************************************************************
   11 00:09B5 -  -  -  -  ; ***************************************************************************************
   12 00:09B5 -  -  -  -  ;
   13 00:09B5 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:09B5 -  -  -  -  ;		The low bytes (0..3) the size of the stack entry in bytes 
   15 00:09B5 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:09B5 -  -  -  -  ;
   17 00:09B5 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:09B5 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:09B5 -  -  -  -  ;
   20 00:09B5 -  -  -  -  ; ***************************************************************************************
   21 00:09B5 -  -  -  -  ;
   22 00:09B5 -  -  -  -  ;								Clear the stack
   23 00:09B5 -  -  -  -  ;
   24 00:09B5 -  -  -  -  ; ***************************************************************************************
   25 00:09B5 -  -  -  -  
   26 00:09B5 -  -  -  -  StackReset:
   27 00:09B5 2A 3C 00 00 		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:09B9 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:09BA 22 58 00 00 		ld 		(BasicSP),hl 				; write out current position
   30 00:09BE 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:09C0 C9 -  -  -  		ret
   32 00:09C1 -  -  -  -  
   33 00:09C1 -  -  -  -  ; ***************************************************************************************
   34 00:09C1 -  -  -  -  ;
   35 00:09C1 -  -  -  -  ;								Open a stack frame type A
   36 00:09C1 -  -  -  -  ;
   37 00:09C1 -  -  -  -  ; ***************************************************************************************
   38 00:09C1 -  -  -  -  
   39 00:09C1 -  -  -  -  StackOpenFrame:
   40 00:09C1 F5 -  -  -  		push 	af 							; save frame type
   41 00:09C2 E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:09C4 11 00 00 00 		ld 		de,$0000 					; put in UDE
   43 00:09C8 5F -  -  -  		ld 		e,a
   44 00:09C9 2A 58 00 00 		ld 		hl,(BasicSP) 				; get stack pointer
   45 00:09CD AF -  -  -  		xor 	a
   46 00:09CE ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   47 00:09D0 22 58 00 00 		ld 		(BasicSP),hl
   48 00:09D4 F1 -  -  -  		pop 	af 							; copy out frame type
   49 00:09D5 77 -  -  -  		ld 		(hl),a
   50 00:09D6 ED 5B 40 00 
              00 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   51 00:09DB AF -  -  -  		xor 	a
   52 00:09DC ED 52 -  -  		sbc 	hl,de
   53 00:09DE D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   54 00:09DF 3E 12 C3 6D 
              03 00 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   55 00:09E5 -  -  -  -  
   56 00:09E5 -  -  -  -  ; ***************************************************************************************
   57 00:09E5 -  -  -  -  ;
   58 00:09E5 -  -  -  -  ;								Close Stack Frame
   59 00:09E5 -  -  -  -  ;
   60 00:09E5 -  -  -  -  ; ***************************************************************************************
   61 00:09E5 -  -  -  -  
   62 00:09E5 -  -  -  -  StackCloseFrame:
   63 00:09E5 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   64 00:09E9 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   65 00:09EA E6 0F -  -  		and 	$0F 						; put into UDE
   66 00:09EC 11 00 00 00 		ld 		de,$000000
   67 00:09F0 5F -  -  -  		ld 		e,a
   68 00:09F1 19 -  -  -  		add 	hl,de 						; close it
   69 00:09F2 22 58 00 00 		ld 		(BasicSP),hl 				; write it back
   70 00:09F6 C9 -  -  -  		ret
   71 00:09F7 -  -  -  -  
   72 00:09F7 -  -  -  -  ; ***************************************************************************************
   73 00:09F7 -  -  -  -  ;
   74 00:09F7 -  -  -  -  ;								Check Stack Frame against A, Z if okay
   75 00:09F7 -  -  -  -  ;
   76 00:09F7 -  -  -  -  ; ***************************************************************************************
   77 00:09F7 -  -  -  -  
   78 00:09F7 -  -  -  -  StackCheckFrame:
   79 00:09F7 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   80 00:09FB BE -  -  -  		cp 		(hl) 						; get stack marker
   81 00:09FC C9 -  -  -  		ret
   82 00:09FD -  -  -  -  
   83 00:09FD -  -  -  -  ; ***************************************************************************************
   84 00:09FD -  -  -  -  ;
   85 00:09FD -  -  -  -  ;								Save position on stack
   86 00:09FD -  -  -  -  ;
   87 00:09FD -  -  -  -  ; ***************************************************************************************
   88 00:09FD -  -  -  -  
   89 00:09FD -  -  -  -  StackSavePosition:
   90 00:09FD 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   91 00:0A01 23 -  -  -  		inc 	hl
   92 00:0A02 ED 5B 5C 00 
              00 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   93 00:0A07 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   94 00:0A0D -  -  -  -  		;
   95 00:0A0D E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   96 00:0A0E DD E5 -  -  		push 	ix 							; HL = current position
   97 00:0A10 E1 -  -  -  		pop 	hl
   98 00:0A11 AF -  -  -  		xor 	a 							; calculate offset
   99 00:0A12 ED 52 -  -  		sbc 	hl,de
  100 00:0A14 7D -  -  -  		ld 		a,l 						; into A
  101 00:0A15 E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  102 00:0A16 77 -  -  -  		ld 		(hl),a
  103 00:0A17 C9 -  -  -  		ret
  104 00:0A18 -  -  -  -  
  105 00:0A18 -  -  -  -  ; ***************************************************************************************
  106 00:0A18 -  -  -  -  ;
  107 00:0A18 -  -  -  -  ;								Load position off stack
  108 00:0A18 -  -  -  -  ;
  109 00:0A18 -  -  -  -  ; ***************************************************************************************
  110 00:0A18 -  -  -  -  
  111 00:0A18 -  -  -  -  StackLoadPosition:
  112 00:0A18 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  113 00:0A1C 23 -  -  -  		inc 	hl
  114 00:0A1D E5 -  -  -  		push 	hl 							; save on stack
  115 00:0A1E ED 27 -  -  		ld_ind_hl 							; get start of line
  116 00:0A20 22 5C 00 00 		ld 		(CurrentLineStart),hl 		; write it back
  117 00:0A24 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  118 00:0A25 13 -  -  -  		inc 	de
  119 00:0A26 13 -  -  -  		inc 	de
  120 00:0A27 13 -  -  -  		inc 	de
  121 00:0A28 13 -  -  -  		inc 	de
  122 00:0A29 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  123 00:0A2A 11 00 00 00 		ld 		de,$000000
  124 00:0A2E 5F -  -  -  		ld 		e,a
  125 00:0A2F 19 -  -  -  		add 	hl,de 						; add to start => position
  126 00:0A30 E5 -  -  -  		push 	hl 							; copy to IX and continue
  127 00:0A31 DD E1 -  -  		pop 	ix
  128 00:0A33 C9 -  -  -  		ret
  129 00:0A34 -  -  -  -  
  130 00:0A34 -  -  -  -  ; ***************************************************************************************
  131 00:0A34 -  -  -  -  ;
  132 00:0A34 -  -  -  -  ;									Changes and Updates
  133 00:0A34 -  -  -  -  ;
  134 00:0A34 -  -  -  -  ; ***************************************************************************************
  135 00:0A34 -  -  -  -  ;
  136 00:0A34 -  -  -  -  ;		Date			Notes
  137 00:0A34 -  -  -  -  ;		==== 			=====
  138 00:0A34 -  -  -  -  ;
  139 00:0A34 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:0A34 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0A34 -  -  -  -  ; ***************************************************************************************
    2 00:0A34 -  -  -  -  ; ***************************************************************************************
    3 00:0A34 -  -  -  -  ;
    4 00:0A34 -  -  -  -  ;		Name : 		utility.asm
    5 00:0A34 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A34 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A34 -  -  -  -  ;		Reviewed :	No
    8 00:0A34 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0A34 -  -  -  -  ;
   10 00:0A34 -  -  -  -  ; ***************************************************************************************
   11 00:0A34 -  -  -  -  ; ***************************************************************************************
   12 00:0A34 -  -  -  -  
   13 00:0A34 -  -  -  -  ; ***************************************************************************************
   14 00:0A34 -  -  -  -  ;
   15 00:0A34 -  -  -  -  ;							Print ASCII string at HL
   16 00:0A34 -  -  -  -  ;
   17 00:0A34 -  -  -  -  ; ***************************************************************************************
   18 00:0A34 -  -  -  -  
   19 00:0A34 -  -  -  -  PrintStringAtHL:
   20 00:0A34 7E -  -  -  		ld 		a,(hl)
   21 00:0A35 FE 20 -  -  		cp 		$20		
   22 00:0A37 D8 -  -  -  		ret 	c
   23 00:0A38 CD B6 10 00 		call 	SYSPrintChar
   24 00:0A3C 23 -  -  -  		inc 	hl
   25 00:0A3D 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0A3F -  -  -  -  
   27 00:0A3F -  -  -  -  ; ***************************************************************************************
   28 00:0A3F -  -  -  -  ;
   29 00:0A3F -  -  -  -  ;									Changes and Updates
   30 00:0A3F -  -  -  -  ;
   31 00:0A3F -  -  -  -  ; ***************************************************************************************
   32 00:0A3F -  -  -  -  ;
   33 00:0A3F -  -  -  -  ;		Date			Notes
   34 00:0A3F -  -  -  -  ;		==== 			=====
   35 00:0A3F -  -  -  -  ;
   36 00:0A3F -  -  -  -  ; ***************************************************************************************
   37 00:0A3F -  -  -  -  		
Listing for file "_build.asm"
   58 00:0A3F -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0A3F -  -  -  -  ; ***************************************************************************************
    2 00:0A3F -  -  -  -  ; ***************************************************************************************
    3 00:0A3F -  -  -  -  ;
    4 00:0A3F -  -  -  -  ;		Name : 		create.asm
    5 00:0A3F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A3F -  -  -  -  ;		Date : 		4th June 2022
    7 00:0A3F -  -  -  -  ;		Reviewed :	No
    8 00:0A3F -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0A3F -  -  -  -  ;
   10 00:0A3F -  -  -  -  ; ***************************************************************************************
   11 00:0A3F -  -  -  -  ; ***************************************************************************************
   12 00:0A3F -  -  -  -  
   13 00:0A3F -  -  -  -  ; ***************************************************************************************
   14 00:0A3F -  -  -  -  ;
   15 00:0A3F -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0A3F -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0A3F -  -  -  -  ;
   18 00:0A3F -  -  -  -  ; ***************************************************************************************
   19 00:0A3F -  -  -  -  
   20 00:0A3F -  -  -  -  VariableCreate:		
   21 00:0A3F -  -  -  -  		;
   22 00:0A3F -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:0A3F -  -  -  -  		;
   24 00:0A3F 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:0A43 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:0A44 E5 -  -  -  		push 	hl 							; save count.
   27 00:0A45 CD 86 08 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0A49 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0A4A -  -  -  -  		;
   30 00:0A4A -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0A4A -  -  -  -  		;
   32 00:0A4A E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0A4B -  -  -  -  _VCClear:
   34 00:0A4B 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0A4D 23 -  -  -  		inc 	hl
   36 00:0A4E 0B -  -  -  		dec 	bc
   37 00:0A4F 78 -  -  -  		ld		a,b
   38 00:0A50 B1 -  -  -  		or 		c
   39 00:0A51 20 F8 -  -  		jr 		nz,_VCClear
   40 00:0A53 E1 -  -  -  		pop 	hl							; restore start address
   41 00:0A54 -  -  -  -  		;
   42 00:0A54 -  -  -  -  		;		Now start to create the data.
   43 00:0A54 -  -  -  -  		;
   44 00:0A54 E5 -  -  -  		push 	hl 							; save start
   45 00:0A55 -  -  -  -  		;
   46 00:0A55 -  -  -  -  		;		Write hash to +0
   47 00:0A55 -  -  -  -  		;
   48 00:0A55 3A 88 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0A59 77 -  -  -  		ld 		(hl),a
   50 00:0A5A 23 -  -  -  		inc 	hl
   51 00:0A5B -  -  -  -  		;
   52 00:0A5B -  -  -  -  		;		Write list head to +1
   53 00:0A5B -  -  -  -  		;
   54 00:0A5B E5 -  -  -  		push 	hl 							; save write position
   55 00:0A5C 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0A60 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:0A62 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:0A63 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:0A64 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0A6A -  -  -  -  		;
   61 00:0A6A -  -  -  -  		;		Write variable name to +5
   62 00:0A6A -  -  -  -  		;
   63 00:0A6A ED 5B 84 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:0A6F ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:0A75 -  -  -  -  		;
   66 00:0A75 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:0A76 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0A7A ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:0A80 -  -  -  -  		;
   70 00:0A80 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:0A81 C9 -  -  -  		ret
   72 00:0A82 -  -  -  -  
   73 00:0A82 -  -  -  -  ; ***************************************************************************************
   74 00:0A82 -  -  -  -  ;
   75 00:0A82 -  -  -  -  ;									Changes and Updates
   76 00:0A82 -  -  -  -  ;
   77 00:0A82 -  -  -  -  ; ***************************************************************************************
   78 00:0A82 -  -  -  -  ;
   79 00:0A82 -  -  -  -  ;		Date			Notes
   80 00:0A82 -  -  -  -  ;		==== 			=====
   81 00:0A82 -  -  -  -  ;
   82 00:0A82 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0A82 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0A82 -  -  -  -  ; ***************************************************************************************
    2 00:0A82 -  -  -  -  ; ***************************************************************************************
    3 00:0A82 -  -  -  -  ;
    4 00:0A82 -  -  -  -  ;		Name : 		find.asm
    5 00:0A82 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A82 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A82 -  -  -  -  ;		Reviewed :	No
    8 00:0A82 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0A82 -  -  -  -  ;
   10 00:0A82 -  -  -  -  ; ***************************************************************************************
   11 00:0A82 -  -  -  -  ; ***************************************************************************************
   12 00:0A82 -  -  -  -  
   13 00:0A82 -  -  -  -  ; ***************************************************************************************
   14 00:0A82 -  -  -  -  ;
   15 00:0A82 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0A82 -  -  -  -  ; 		variable information at (IX)
   17 00:0A82 -  -  -  -  ;
   18 00:0A82 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0A82 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0A82 -  -  -  -  ;
   21 00:0A82 -  -  -  -  ; ***************************************************************************************
   22 00:0A82 -  -  -  -  
   23 00:0A82 -  -  -  -  FindVariable:
   24 00:0A82 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0A85 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0A87 D2 D7 03 00 		jp 		nc,SyntaxError 		
   27 00:0A8B -  -  -  -  
   28 00:0A8B DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0A8E FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0A90 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0A92 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0A94 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0A96 -  -  -  -  		;
   34 00:0A96 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0A96 -  -  -  -  		;
   36 00:0A96 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0A9A DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0A9D 87 -  -  -  		add 	a,a 						; x4
   39 00:0A9E 87 -  -  -  		add 	a,a
   40 00:0A9F B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0AA0 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0AA1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0AA3 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0AA5 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:0AA7 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:0AA8 C9 -  -  -  		ret
   47 00:0AA9 -  -  -  -  		;
   48 00:0AA9 -  -  -  -  		;		Not a standard simple variable.
   49 00:0AA9 -  -  -  -  		;
   50 00:0AA9 -  -  -  -  _FVNotSimple:
   51 00:0AA9 CD 0F 0B 00 		call 	VariableInformation 		; get information about the variable.
   52 00:0AAD CD 4B 0B 00 		call 	VariableSearchList 			; search the linked list
   53 00:0AB1 38 14 -  -  		jr 		c,_FVNotFound  				
   54 00:0AB3 -  -  -  -  		;
   55 00:0AB3 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0AB3 -  -  -  -  		;
   57 00:0AB3 -  -  -  -  _FVExitReference:		
   58 00:0AB3 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:0AB7 19 -  -  -  		add 	hl,de 
   60 00:0AB8 -  -  -  -  		;
   61 00:0AB8 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:0AB8 -  -  -  -  		;
   63 00:0AB8 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:0ABB FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:0ABD CC E6 0A 00 		call 	z,ArrayLookup 				; array access required.
   66 00:0AC1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:0AC3 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:0AC5 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:0AC6 C9 -  -  -  		ret
   70 00:0AC7 -  -  -  -  		;
   71 00:0AC7 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:0AC7 -  -  -  -  		;
   73 00:0AC7 -  -  -  -  _FVNotFound:		
   74 00:0AC7 3A 80 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:0ACB B7 -  -  -  		or 		a
   76 00:0ACC 28 11 -  -  		jr 		z,_FVFail
   77 00:0ACE DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:0AD1 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:0AD3 28 0A -  -  		jr 		z,_FVFail
   80 00:0AD5 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 00:0AD9 CD 3F 0A 00 		call 	VariableCreate 				; create a new variable.
   82 00:0ADD 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:0ADF -  -  -  -  
   84 00:0ADF -  -  -  -  _FVFail:
   85 00:0ADF DD 2A 84 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:0AE4 37 -  -  -  		scf
   87 00:0AE5 C9 -  -  -  		ret
   88 00:0AE6 -  -  -  -  
   89 00:0AE6 -  -  -  -  ; ***************************************************************************************
   90 00:0AE6 -  -  -  -  ;
   91 00:0AE6 -  -  -  -  ;									 Array lookup
   92 00:0AE6 -  -  -  -  ;
   93 00:0AE6 -  -  -  -  ; ***************************************************************************************
   94 00:0AE6 -  -  -  -  
   95 00:0AE6 -  -  -  -  ArrayLookup:
   96 00:0AE6 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:0AE7 CD 7A 05 00 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:0AEB D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:0AEC 7C -  -  -  		ld 		a,h
  100 00:0AED B5 -  -  -  		or 		l
  101 00:0AEE D9 -  -  -  		exx
  102 00:0AEF 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:0AF1 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:0AF5 54 -  -  -  		ld 		d,h
  105 00:0AF6 5D -  -  -  		ld 		e,l
  106 00:0AF7 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:0AF8 E5 -  -  -  		push 	hl
  108 00:0AF9 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:0AFB AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:0AFC ED 52 -  -  		sbc 	hl,de
  111 00:0AFE DA 09 0B 00 		jp 		c,_ALBadValue 				; if max < index then error
  112 00:0B02 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:0B03 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:0B04 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:0B05 29 -  -  -  		add 	hl,hl
  116 00:0B06 D1 -  -  -  		pop 	de 							; get array base back
  117 00:0B07 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:0B08 C9 -  -  -  		ret
  119 00:0B09 -  -  -  -  
  120 00:0B09 -  -  -  -  _ALBadValue:
  121 00:0B09 3E 08 C3 6D 
              03 00 -  -  		ERR_INDEX
  122 00:0B0F -  -  -  -  		
  123 00:0B0F -  -  -  -  ; ***************************************************************************************
  124 00:0B0F -  -  -  -  ;
  125 00:0B0F -  -  -  -  ;									Changes and Updates
  126 00:0B0F -  -  -  -  ;
  127 00:0B0F -  -  -  -  ; ***************************************************************************************
  128 00:0B0F -  -  -  -  ;
  129 00:0B0F -  -  -  -  ;		Date			Notes
  130 00:0B0F -  -  -  -  ;		==== 			=====
  131 00:0B0F -  -  -  -  ;
  132 00:0B0F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:0B0F -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0B0F -  -  -  -  ; ***************************************************************************************
    2 00:0B0F -  -  -  -  ; ***************************************************************************************
    3 00:0B0F -  -  -  -  ;
    4 00:0B0F -  -  -  -  ;		Name : 		info.asm
    5 00:0B0F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B0F -  -  -  -  ;		Date : 		4th June 2022
    7 00:0B0F -  -  -  -  ;		Reviewed :	No
    8 00:0B0F -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0B0F -  -  -  -  ;
   10 00:0B0F -  -  -  -  ; ***************************************************************************************
   11 00:0B0F -  -  -  -  ; ***************************************************************************************
   12 00:0B0F -  -  -  -  
   13 00:0B0F -  -  -  -  ; ***************************************************************************************
   14 00:0B0F -  -  -  -  ;
   15 00:0B0F -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0B0F -  -  -  -  ; 		after the identifier.
   17 00:0B0F -  -  -  -  ;
   18 00:0B0F -  -  -  -  ; ***************************************************************************************
   19 00:0B0F -  -  -  -  
   20 00:0B0F -  -  -  -  VariableInformation:
   21 00:0B0F DD 22 84 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:0B14 -  -  -  -  		;
   23 00:0B14 -  -  -  -  		; 		Calculate hash, find end.
   24 00:0B14 -  -  -  -  		;
   25 00:0B14 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:0B16 -  -  -  -  _VICalculateHash:
   27 00:0B16 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:0B19 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:0B1B 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:0B1D 80 -  -  -  		add 	a,b 						; add to hash
   31 00:0B1E 07 -  -  -  		rlca
   32 00:0B1F 07 -  -  -  		rlca
   33 00:0B20 80 -  -  -  		add 	a,b
   34 00:0B21 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0B22 DD 23 -  -  		inc 	ix 							; next character
   36 00:0B24 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:0B26 -  -  -  -  		;
   38 00:0B26 -  -  -  -  _VIHashDone:
   39 00:0B26 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:0B27 -  -  -  -  		;
   41 00:0B27 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:0B27 -  -  -  -  		;
   43 00:0B27 32 88 00 00 		ld 		(VarHash),a
   44 00:0B2B -  -  -  -  		;
   45 00:0B2B -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:0B2B -  -  -  -  		;		
   47 00:0B2B E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:0B2D 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0B31 6F -  -  -  		ld 		l,a
   50 00:0B32 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0B33 29 -  -  -  		add 	hl,hl
   52 00:0B34 -  -  -  -  		;
   53 00:0B34 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0B39 19 -  -  -  		add 	hl,de
   55 00:0B3A -  -  -  -  		;
   56 00:0B3A DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0B3D FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0B3F 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0B41 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0B45 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0B46 -  -  -  -  _VINotArray:
   62 00:0B46 22 8A 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0B4A C9 -  -  -  		ret
   64 00:0B4B -  -  -  -  
   65 00:0B4B -  -  -  -  ; ***************************************************************************************
   66 00:0B4B -  -  -  -  ;
   67 00:0B4B -  -  -  -  ;									Changes and Updates
   68 00:0B4B -  -  -  -  ;
   69 00:0B4B -  -  -  -  ; ***************************************************************************************
   70 00:0B4B -  -  -  -  ;
   71 00:0B4B -  -  -  -  ;		Date			Notes
   72 00:0B4B -  -  -  -  ;		==== 			=====
   73 00:0B4B -  -  -  -  ;
   74 00:0B4B -  -  -  -  ; ***************************************************************************************
   75 00:0B4B -  -  -  -  
Listing for file "_build.asm"
   61 00:0B4B -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0B4B -  -  -  -  ; ***************************************************************************************
    2 00:0B4B -  -  -  -  ; ***************************************************************************************
    3 00:0B4B -  -  -  -  ;
    4 00:0B4B -  -  -  -  ;		Name : 		search.asm
    5 00:0B4B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B4B -  -  -  -  ;		Date : 		4th June 2022
    7 00:0B4B -  -  -  -  ;		Reviewed :	No
    8 00:0B4B -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0B4B -  -  -  -  ;
   10 00:0B4B -  -  -  -  ; ***************************************************************************************
   11 00:0B4B -  -  -  -  ; ***************************************************************************************
   12 00:0B4B -  -  -  -  
   13 00:0B4B -  -  -  -  ; ***************************************************************************************
   14 00:0B4B -  -  -  -  ;
   15 00:0B4B -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0B4B -  -  -  -  ;		CS if failed.
   17 00:0B4B -  -  -  -  ;
   18 00:0B4B -  -  -  -  ; ***************************************************************************************
   19 00:0B4B -  -  -  -  
   20 00:0B4B -  -  -  -  VariableSearchList:
   21 00:0B4B 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0B4F -  -  -  -  		;
   23 00:0B4F -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0B4F -  -  -  -  		;		the address of the hash record
   25 00:0B4F -  -  -  -  		;
   26 00:0B4F -  -  -  -  _VSLLoop:
   27 00:0B4F ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0B51 -  -  -  -  		;
   29 00:0B51 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0B52 AF -  -  -  		xor 	a
   31 00:0B53 ED 6A -  -  		adc 	hl,hl
   32 00:0B55 E1 -  -  -  		pop 	hl
   33 00:0B56 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0B58 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0B59 C8 -  -  -  		ret 	z
   36 00:0B5A -  -  -  -  _VSLRecord:
   37 00:0B5A -  -  -  -  		;
   38 00:0B5A -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0B5A -  -  -  -  		;
   40 00:0B5A 3A 88 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0B5E BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0B5F 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0B60 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0B62 -  -  -  -  		;
   45 00:0B62 -  -  -  -  		;		Now check the name
   46 00:0B62 -  -  -  -  		;
   47 00:0B62 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:0B63 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:0B64 23 -  -  -  		inc 	hl
   50 00:0B65 23 -  -  -  		inc 	hl
   51 00:0B66 23 -  -  -  		inc 	hl
   52 00:0B67 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0B69 ED 5B 84 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0B6E -  -  -  -  		;
   55 00:0B6E -  -  -  -  		;		Check individual characters
   56 00:0B6E -  -  -  -  		;
   57 00:0B6E -  -  -  -  _VSLCharacter:
   58 00:0B6E 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0B6F FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0B71 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:0B73 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:0B74 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:0B75 13 -  -  -  		inc 	de
   64 00:0B76 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:0B78 -  -  -  -  		;
   66 00:0B78 -  -  -  -  _VSLFailed:
   67 00:0B78 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0B79 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0B7B -  -  -  -  		;
   70 00:0B7B -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0B7B -  -  -  -  		;		
   72 00:0B7B -  -  -  -  _VSLEndIdentifier:
   73 00:0B7B 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0B7C FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0B7E 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0B80 -  -  -  -  		;
   77 00:0B80 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0B81 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0B82 AF -  -  -  		xor 	a 							; clear carry
   80 00:0B83 C9 -  -  -  		ret
   81 00:0B84 -  -  -  -  
   82 00:0B84 -  -  -  -  ; ***************************************************************************************
   83 00:0B84 -  -  -  -  ;
   84 00:0B84 -  -  -  -  ;									Changes and Updates
   85 00:0B84 -  -  -  -  ;
   86 00:0B84 -  -  -  -  ; ***************************************************************************************
   87 00:0B84 -  -  -  -  ;
   88 00:0B84 -  -  -  -  ;		Date			Notes
   89 00:0B84 -  -  -  -  ;		==== 			=====
   90 00:0B84 -  -  -  -  ;
   91 00:0B84 -  -  -  -  ; ***************************************************************************************
   92 00:0B84 -  -  -  -  		
Listing for file "_build.asm"
   62 00:0B84 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0B84 -  -  -  -  ;
    2 00:0B84 -  -  -  -  ;	This file is automatically generated.
    3 00:0B84 -  -  -  -  ;
    4 00:0B84 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 00:0BA0 -  -  -  -  PrecedenceTable:
    6 00:0BA0 06 -  -  -  	.db	6	; $0083 !
    7 00:0BA1 06 -  -  -  	.db	6	; $0084 ?
    8 00:0BA2 05 -  -  -  	.db	5	; $0085 *
    9 00:0BA3 05 -  -  -  	.db	5	; $0086 /
   10 00:0BA4 05 -  -  -  	.db	5	; $0087 mod
   11 00:0BA5 05 -  -  -  	.db	5	; $0088 div
   12 00:0BA6 04 -  -  -  	.db	4	; $0089 +
   13 00:0BA7 04 -  -  -  	.db	4	; $008a -
   14 00:0BA8 03 -  -  -  	.db	3	; $008b >=
   15 00:0BA9 03 -  -  -  	.db	3	; $008c <=
   16 00:0BAA 03 -  -  -  	.db	3	; $008d >
   17 00:0BAB 03 -  -  -  	.db	3	; $008e <
   18 00:0BAC 03 -  -  -  	.db	3	; $008f =
   19 00:0BAD 03 -  -  -  	.db	3	; $0090 <>
   20 00:0BAE 02 -  -  -  	.db	2	; $0091 and
   21 00:0BAF 01 -  -  -  	.db	1	; $0092 or
   22 00:0BB0 01 -  -  -  	.db	1	; $0093 eor
   23 00:0BB1 -  -  -  -  
Listing for file "_build.asm"
   63 00:0BB1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0BB1 -  -  -  -  ;
    2 00:0BB1 -  -  -  -  ;	This is automatically generated.
    3 00:0BB1 -  -  -  -  ;
    4 00:0BB1 -  -  -  -  ErrorIDTable:
    5 00:0BB1 0D 0C 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0BB5 13 0C 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0BB9 24 0C 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0BBD 32 0C 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0BC1 3C 0C 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:0BC5 46 0C 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:0BC9 60 0C 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:0BCD 71 0C 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   13 00:0BD1 86 0C 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   14 00:0BD5 96 0C 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   15 00:0BD9 AB 0C 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   16 00:0BDD B9 0C 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   17 00:0BE1 CA 0C 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   18 00:0BE5 D8 0C 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   19 00:0BE9 E2 0C 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   20 00:0BED F7 0C 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   21 00:0BF1 0D 0D 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   22 00:0BF5 1B 0D 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   23 00:0BF9 30 0D 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   24 00:0BFD 3C 0D 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   25 00:0C01 41 0D 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   26 00:0C05 4E 0D 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   27 00:0C09 5F 0D 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   28 00:0C0D -  -  -  -  
   29 00:0C0D -  -  -  -  ErrText_warmstart:
   30 00:0C0D 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   31 00:0C13 -  -  -  -  ErrText_assert:
   32 00:0C13 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   33 00:0C24 -  -  -  -  ErrText_badtype:
   34 00:0C24 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   35 00:0C32 -  -  -  -  ErrText_badvalue:
   36 00:0C32 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   37 00:0C3C -  -  -  -  ErrText_dim:
   38 00:0C3C 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   39 00:0C46 -  -  -  -  ErrText_disabled:
   40 00:0C46 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   41 00:0C60 -  -  -  -  ErrText_divzero:
   42 00:0C60 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   43 00:0C71 -  -  -  -  ErrText_gosub:
   44 00:0C71 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   45 00:0C86 -  -  -  -  ErrText_index:
   46 00:0C86 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   47 00:0C96 -  -  -  -  ErrText_lineno:
   48 00:0C96 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   49 00:0CAB -  -  -  -  ErrText_memory:
   50 00:0CAB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   51 00:0CB9 -  -  -  -  ErrText_next:
   52 00:0CB9 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   53 00:0CCA -  -  -  -  ErrText_nocomma:
   54 00:0CCA 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   55 00:0CD8 -  -  -  -  ErrText_nodollar:
   56 00:0CD8 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   57 00:0CE2 -  -  -  -  ErrText_nolbracket:
   58 00:0CE2 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   59 00:0CF7 -  -  -  -  ErrText_norbracket:
   60 00:0CF7 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   61 00:0D0D -  -  -  -  ErrText_notref:
   62 00:0D0D 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   63 00:0D1B -  -  -  -  ErrText_repeat:
   64 00:0D1B 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   65 00:0D30 -  -  -  -  ErrText_stack:
   66 00:0D30 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   67 00:0D3C -  -  -  -  ErrText_stop:
   68 00:0D3C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   69 00:0D41 -  -  -  -  ErrText_syntax:
   70 00:0D41 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   71 00:0D4E -  -  -  -  ErrText_todo:
   72 00:0D4E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   73 00:0D5F -  -  -  -  ErrText_unknownvar:
   74 00:0D5F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   64 00:0D70 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0D70 -  -  -  -  ;
    2 00:0D70 -  -  -  -  ;	Vectors for set 0
    3 00:0D70 -  -  -  -  ;
    4 00:0D70 -  -  -  -  VectorsSet0:
    5 00:0D70 AC 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0D74 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0D78 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0D7C 4D 04 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0D80 56 04 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0D84 F9 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0D88 07 04 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0D8C 15 04 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0D90 07 04 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0D94 DD 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0D98 EB 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0D9C B4 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0DA0 AA 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0DA4 96 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0DA8 8C 04 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0DAC 82 04 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0DB0 A0 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0DB4 23 04 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0DB8 31 04 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0DBC 3F 04 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0DC0 26 08 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0DC4 1E 08 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0DC8 40 07 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0DCC 6D 07 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0DD0 2F 07 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0DD4 05 07 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0DD8 04 08 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0DDC 35 08 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0DE0 1B 07 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0DE4 12 07 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0DE8 4B 07 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0DEC 60 07 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0DF0 5D 08 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0DF4 64 08 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0DF8 71 08 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0DFC 74 04 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0E00 78 04 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0E04 F1 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0E08 F1 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0E0C F5 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0E10 F1 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0E14 93 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0E18 24 00 00 00 	addr(Unimplemented)              ; $00aa [
   48 00:0E1C 24 00 00 00 	addr(Unimplemented)              ; $00ab ]
   49 00:0E20 F1 00 00 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 00:0E24 8B 09 00 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 00:0E28 96 09 00 00 	addr(Command_Until)              ; $00ae until
   52 00:0E2C 24 00 00 00 	addr(Unimplemented)              ; $00af if
   53 00:0E30 F1 00 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:0E34 24 00 00 00 	addr(Unimplemented)              ; $00b1 else
   55 00:0E38 24 00 00 00 	addr(Unimplemented)              ; $00b2 for
   56 00:0E3C F1 00 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:0E40 24 00 00 00 	addr(Unimplemented)              ; $00b4 step
   58 00:0E44 24 00 00 00 	addr(Unimplemented)              ; $00b5 next
   59 00:0E48 24 00 00 00 	addr(Unimplemented)              ; $00b6 def
   60 00:0E4C 24 00 00 00 	addr(Unimplemented)              ; $00b7 proc
   61 00:0E50 24 00 00 00 	addr(Unimplemented)              ; $00b8 endproc
   62 00:0E54 18 09 00 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:0E58 2D 09 00 00 	addr(Command_Return)             ; $00ba return
   64 00:0E5C 44 09 00 00 	addr(Command_GOTO)               ; $00bb goto
   65 00:0E60 24 00 00 00 	addr(Unimplemented)              ; $00bc local
   66 00:0E64 F6 00 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:0E68 93 02 00 00 	addr(Command_REM)                ; $00be rem
   68 00:0E6C C3 01 00 00 	addr(Command_LET)                ; $00bf let
   69 00:0E70 24 00 00 00 	addr(Unimplemented)              ; $00c0 vdu
   70 00:0E74 28 02 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:0E78 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:0E7C 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:0E80 24 00 00 00 	addr(Unimplemented)              ; $00c4 list
   74 00:0E84 08 09 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:0E88 B0 02 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:0E8C 24 00 00 00 	addr(Unimplemented)              ; $00c7 read
   77 00:0E90 24 00 00 00 	addr(Unimplemented)              ; $00c8 data
   78 00:0E94 24 00 00 00 	addr(Unimplemented)              ; $00c9 restore
   79 00:0E98 E0 00 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:0E9C A8 08 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:0EA0 A6 01 00 00 	addr(Command_END)                ; $00cc end
   82 00:0EA4 23 03 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:0EA8 -  -  -  -  ;
   84 00:0EA8 -  -  -  -  ;	Vectors for set 1
   85 00:0EA8 -  -  -  -  ;
   86 00:0EA8 -  -  -  -  VectorsSet1:
   87 00:0EA8 -  -  -  -  ;
   88 00:0EA8 -  -  -  -  ;	Vectors for set 2
   89 00:0EA8 -  -  -  -  ;
   90 00:0EA8 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   65 00:0EA8 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0EA8 -  -  -  -  ; ***************************************************************************************
    2 00:0EA8 -  -  -  -  ; ***************************************************************************************
    3 00:0EA8 -  -  -  -  ;
    4 00:0EA8 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0EA8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EA8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EA8 -  -  -  -  ;		Reviewed :	No
    8 00:0EA8 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0EA8 -  -  -  -  ;
   10 00:0EA8 -  -  -  -  ; ***************************************************************************************
   11 00:0EA8 -  -  -  -  ; ***************************************************************************************
   12 00:0EA8 -  -  -  -  
   13 00:0EA8 -  -  -  -  ; ***************************************************************************************
   14 00:0EA8 -  -  -  -  ;
   15 00:0EA8 -  -  -  -  ;								Unsigned integer divide
   16 00:0EA8 -  -  -  -  ;
   17 00:0EA8 -  -  -  -  ; ***************************************************************************************
   18 00:0EA8 -  -  -  -  
   19 00:0EA8 -  -  -  -  Int32UDivide:
   20 00:0EA8 37 -  -  -  		scf
   21 00:0EA9 C3 ED 0E 00 		jp 		_I32UnsignedDivide		
   22 00:0EAD -  -  -  -  
   23 00:0EAD -  -  -  -  ; ***************************************************************************************
   24 00:0EAD -  -  -  -  ;
   25 00:0EAD -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0EAD -  -  -  -  ;
   27 00:0EAD -  -  -  -  ; ***************************************************************************************
   28 00:0EAD -  -  -  -  
   29 00:0EAD -  -  -  -  Int32SDivide:
   30 00:0EAD 37 -  -  -  		scf
   31 00:0EAE 18 01 -  -  		jr 		_I32SDivide
   32 00:0EB0 -  -  -  -  Int32Modulus:
   33 00:0EB0 AF -  -  -  		xor 	a
   34 00:0EB1 -  -  -  -  _I32SDivide:
   35 00:0EB1 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0EB2 F5 -  -  -  		push 	af
   37 00:0EB3 08 -  -  -  		ex 		af,af'
   38 00:0EB4 -  -  -  -  
   39 00:0EB4 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0EB5 D9 -  -  -  		exx
   41 00:0EB6 D5 -  -  -  		push 	de
   42 00:0EB7 D9 -  -  -  		exx
   43 00:0EB8 -  -  -  -  
   44 00:0EB8 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0EB9 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0EBA CD DA 0E 00 		call 	_I32CheckHLSignSwap
   47 00:0EBE CD DA 0E 00 		call 	_I32CheckHLSignSwap
   48 00:0EC2 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0EC3 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0EC4 F5 -  -  -  		push 	af
   51 00:0EC5 CD ED 0E 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0EC9 F1 -  -  -  		pop 	af 							; get function back
   53 00:0ECA 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0ECC 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0ECD CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0ECF C4 50 10 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0ED3 -  -  -  -  _I32SDExit:
   58 00:0ED3 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0ED4 D1 -  -  -  		pop 	de
   60 00:0ED5 D9 -  -  -  		exx
   61 00:0ED6 D1 -  -  -  		pop 	de
   62 00:0ED7 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0ED8 08 -  -  -  		ex 		af,af'
   64 00:0ED9 C9 -  -  -  		ret
   65 00:0EDA -  -  -  -  
   66 00:0EDA -  -  -  -  
   67 00:0EDA -  -  -  -  _I32CheckHLSignSwap:
   68 00:0EDA D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0EDB CB 7C -  -  		bit 	7,h
   70 00:0EDD D9 -  -  -  		exx
   71 00:0EDE 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0EE0 -  -  -  -  		;
   73 00:0EE0 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0EE2 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0EE3 CD 50 10 00 		call 	Int32Negate 				
   76 00:0EE7 F1 -  -  -  		pop 	af
   77 00:0EE8 -  -  -  -  _I32CHSPositive:
   78 00:0EE8 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0EE9 EB -  -  -  		ex 		de,hl
   80 00:0EEA D9 -  -  -  		exx		
   81 00:0EEB EB -  -  -  		ex 		de,hl
   82 00:0EEC C9 -  -  -  		ret
   83 00:0EED -  -  -  -  
   84 00:0EED -  -  -  -  ; ***************************************************************************************
   85 00:0EED -  -  -  -  ;
   86 00:0EED -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0EED -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0EED -  -  -  -  ;
   89 00:0EED -  -  -  -  ; ***************************************************************************************
   90 00:0EED -  -  -  -  
   91 00:0EED -  -  -  -  _I32UnsignedDivide:
   92 00:0EED C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0EEE D5 -  -  -  		push 	de
   94 00:0EEF D9 -  -  -  		exx
   95 00:0EF0 C5 -  -  -  		push 	bc
   96 00:0EF1 D5 -  -  -  		push 	de 							
   97 00:0EF2 D9 -  -  -  		exx
   98 00:0EF3 -  -  -  -  
   99 00:0EF3 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0EF4 -  -  -  -  
  101 00:0EF4 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0EF5 B3 -  -  -  		or 		e
  103 00:0EF6 D9 -  -  -  		exx
  104 00:0EF7 B2 -  -  -  		or 		d
  105 00:0EF8 B3 -  -  -  		or 		e
  106 00:0EF9 D9 -  -  -  		exx
  107 00:0EFA CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0EFE -  -  -  -  
  109 00:0EFE -  -  -  -  
  110 00:0EFE 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0EFF 4D -  -  -  		ld		c,l
  112 00:0F00 21 00 00 00 		ld 		hl,$0000
  113 00:0F04 D9 -  -  -  		exx
  114 00:0F05 44 -  -  -  		ld 		b,h
  115 00:0F06 4D -  -  -  		ld		c,l
  116 00:0F07 21 00 00 00 		ld 		hl,$0000
  117 00:0F0B D9 -  -  -  		exx
  118 00:0F0C -  -  -  -  
  119 00:0F0C 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0F0E -  -  -  -  _I32DivideLoop:
  121 00:0F0E F5 -  -  -  		push 	af
  122 00:0F0F -  -  -  -  
  123 00:0F0F CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0F11 CB 10 -  -  		rl 		b
  125 00:0F13 D9 -  -  -  		exx
  126 00:0F14 CB 11 -  -  		rl 		c
  127 00:0F16 CB 10 -  -  		rl 		b
  128 00:0F18 D9 -  -  -  		exx
  129 00:0F19 CB 15 -  -  		rl 		l
  130 00:0F1B CB 14 -  -  		rl 		h
  131 00:0F1D D9 -  -  -  		exx
  132 00:0F1E CB 15 -  -  		rl 		l
  133 00:0F20 CB 14 -  -  		rl 		h
  134 00:0F22 D9 -  -  -  		exx
  135 00:0F23 -  -  -  -  
  136 00:0F23 CD EE 0F 00 		call 	Int32Subtract 				; A = A - M
  137 00:0F27 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0F29 -  -  -  -  
  139 00:0F29 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0F2A 18 04 -  -  		jr 		_I32Next
  141 00:0F2C -  -  -  -  
  142 00:0F2C -  -  -  -  _I32Borrow:
  143 00:0F2C CD E6 0F 00 		call 	Int32Add 					; A = A + M
  144 00:0F30 -  -  -  -  _I32Next:
  145 00:0F30 F1 -  -  -  		pop 	af
  146 00:0F31 3D -  -  -  		dec 	a
  147 00:0F32 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0F34 -  -  -  -  
  149 00:0F34 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0F35 -  -  -  -  
  151 00:0F35 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0F36 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0F38 -  -  -  -  
  154 00:0F38 60 -  -  -  		ld  	h,b
  155 00:0F39 69 -  -  -  		ld 		l,c
  156 00:0F3A D9 -  -  -  		exx
  157 00:0F3B 60 -  -  -  		ld  	h,b
  158 00:0F3C 69 -  -  -  		ld 		l,c
  159 00:0F3D D9 -  -  -  		exx
  160 00:0F3E -  -  -  -  _I32Modulus1:		
  161 00:0F3E D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0F3F D1 -  -  -  		pop 	de
  163 00:0F40 C1 -  -  -  		pop 	bc
  164 00:0F41 D9 -  -  -  		exx
  165 00:0F42 D1 -  -  -  		pop 	de
  166 00:0F43 C1 -  -  -  		pop 	bc
  167 00:0F44 C9 -  -  -  		ret
  168 00:0F45 -  -  -  -  
  169 00:0F45 -  -  -  -  ; ***************************************************************************************
  170 00:0F45 -  -  -  -  ;
  171 00:0F45 -  -  -  -  ;									Changes and Updates
  172 00:0F45 -  -  -  -  ;
  173 00:0F45 -  -  -  -  ; ***************************************************************************************
  174 00:0F45 -  -  -  -  ;
  175 00:0F45 -  -  -  -  ;		Date			Notes
  176 00:0F45 -  -  -  -  ;		==== 			=====
  177 00:0F45 -  -  -  -  ;
  178 00:0F45 -  -  -  -  ; ***************************************************************************************
  179 00:0F45 -  -  -  -  		
Listing for file "_build.asm"
   66 00:0F45 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0F45 -  -  -  -  ; ***************************************************************************************
    2 00:0F45 -  -  -  -  ; ***************************************************************************************
    3 00:0F45 -  -  -  -  ;
    4 00:0F45 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0F45 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F45 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0F45 -  -  -  -  ;		Reviewed :	No
    8 00:0F45 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0F45 -  -  -  -  ;
   10 00:0F45 -  -  -  -  ; ***************************************************************************************
   11 00:0F45 -  -  -  -  ; ***************************************************************************************
   12 00:0F45 -  -  -  -  
   13 00:0F45 -  -  -  -  ; ***************************************************************************************
   14 00:0F45 -  -  -  -  ;
   15 00:0F45 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0F45 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0F45 -  -  -  -  ;
   18 00:0F45 -  -  -  -  ; ***************************************************************************************
   19 00:0F45 -  -  -  -  
   20 00:0F45 -  -  -  -  Int32FromString:
   21 00:0F45 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0F46 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0F47 D5 -  -  -  		push 	de
   24 00:0F48 D9 -  -  -  		exx
   25 00:0F49 D5 -  -  -  		push 	de
   26 00:0F4A -  -  -  -  
   27 00:0F4A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0F4E 11 00 00 00 		ld 		de,$0000
   29 00:0F52 D9 -  -  -  		exx
   30 00:0F53 21 00 00 00 		ld 		hl,$0000
   31 00:0F57 11 00 00 00 		ld 		de,$0000
   32 00:0F5B D9 -  -  -  		exx
   33 00:0F5C -  -  -  -  
   34 00:0F5C 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0F5D CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0F5F 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0F61 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0F63 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0F64 -  -  -  -  		;
   40 00:0F64 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0F65 F5 -  -  -  		push 	af
   42 00:0F66 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0F68 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0F69 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0F6B 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0F6C 18 01 -  -  		jr 		_I32FSMain
   47 00:0F6E -  -  -  -  _I32FSNotSigned:		
   48 00:0F6E E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0F6F -  -  -  -  		;
   50 00:0F6F -  -  -  -  		; 		Main conversion loop.
   51 00:0F6F -  -  -  -  		; 		
   52 00:0F6F -  -  -  -  _I32FSMain:		
   53 00:0F6F 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0F70 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0F72 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0F74 D6 20 -  -  		sub 	32
   57 00:0F76 -  -  -  -  _I32FSNotLower:
   58 00:0F76 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0F78 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0F7A FE 3A -  -  		cp 		'9'+1
   61 00:0F7C 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0F7E FE 41 -  -  		cp 		'A'
   63 00:0F80 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0F82 FE 47 -  -  		cp 		'F'+1
   65 00:0F84 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0F86 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0F88 -  -  -  -  _I32FSOkay:
   68 00:0F88 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0F8A BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0F8B 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0F8D 03 -  -  -  		inc 	bc 							; consume character
   72 00:0F8E D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0F8F F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0F90 CD AD 0F 00 		call 	Int32Multiply 				; result *= base
   75 00:0F94 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0F95 5F -  -  -  		ld 		e,a
   77 00:0F96 CD E6 0F 00 		call 	Int32Add 					; and add it.
   78 00:0F9A D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0F9B 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0F9D -  -  -  -  
   81 00:0F9D -  -  -  -  _I32FSExit:
   82 00:0F9D F1 -  -  -  		pop 	af 							; get sign back
   83 00:0F9E FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0FA0 CC 50 10 00 		call 	z,Int32Negate
   85 00:0FA4 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0FA5 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0FA6 D9 -  -  -  		exx
   88 00:0FA7 D1 -  -  -  		pop 	de
   89 00:0FA8 D9 -  -  -  		exx
   90 00:0FA9 C1 -  -  -  		pop 	bc
   91 00:0FAA FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0FAC C9 -  -  -  		ret				
   93 00:0FAD -  -  -  -  
   94 00:0FAD -  -  -  -  ; ***************************************************************************************
   95 00:0FAD -  -  -  -  ;
   96 00:0FAD -  -  -  -  ;									Changes and Updates
   97 00:0FAD -  -  -  -  ;
   98 00:0FAD -  -  -  -  ; ***************************************************************************************
   99 00:0FAD -  -  -  -  ;
  100 00:0FAD -  -  -  -  ;		Date			Notes
  101 00:0FAD -  -  -  -  ;		==== 			=====
  102 00:0FAD -  -  -  -  ;
  103 00:0FAD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0FAD -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0FAD -  -  -  -  ; ***************************************************************************************
    2 00:0FAD -  -  -  -  ; ***************************************************************************************
    3 00:0FAD -  -  -  -  ;
    4 00:0FAD -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0FAD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0FAD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0FAD -  -  -  -  ;		Reviewed :	No
    8 00:0FAD -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0FAD -  -  -  -  ;
   10 00:0FAD -  -  -  -  ; ***************************************************************************************
   11 00:0FAD -  -  -  -  ; ***************************************************************************************
   12 00:0FAD -  -  -  -  
   13 00:0FAD -  -  -  -  Int32Multiply:
   14 00:0FAD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0FAE D5 -  -  -  		push 	de
   16 00:0FAF 44 -  -  -  		ld 		b,h
   17 00:0FB0 4D -  -  -  		ld 		c,l
   18 00:0FB1 21 00 00 00 		ld 		hl,$0000
   19 00:0FB5 -  -  -  -  
   20 00:0FB5 D9 -  -  -  		exx
   21 00:0FB6 C5 -  -  -  		push 	bc
   22 00:0FB7 D5 -  -  -  		push 	de
   23 00:0FB8 44 -  -  -  		ld 		b,h
   24 00:0FB9 4D -  -  -  		ld 		c,l
   25 00:0FBA 21 00 00 00 		ld 		hl,$0000		
   26 00:0FBE D9 -  -  -  		exx
   27 00:0FBF -  -  -  -  
   28 00:0FBF -  -  -  -  _I32MultiplyLoop:
   29 00:0FBF CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0FC1 C4 E6 0F 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0FC5 -  -  -  -  		;
   32 00:0FC5 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0FC6 CB 38 -  -  		srl 	b
   34 00:0FC8 CB 19 -  -  		rr 		c
   35 00:0FCA D9 -  -  -  		exx
   36 00:0FCB CB 18 -  -  		rr 		b
   37 00:0FCD CB 19 -  -  		rr 		c
   38 00:0FCF -  -  -  -  		;
   39 00:0FCF CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0FD1 CB 12 -  -  		rl 		d
   41 00:0FD3 D9 -  -  -  		exx
   42 00:0FD4 CB 13 -  -  		rl 		e
   43 00:0FD6 CB 12 -  -  		rl 		d
   44 00:0FD8 -  -  -  -  
   45 00:0FD8 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0FD9 B1 -  -  -  		or 		c
   47 00:0FDA D9 -  -  -  		exx
   48 00:0FDB B0 -  -  -  		or 		b
   49 00:0FDC B1 -  -  -  		or 		c
   50 00:0FDD 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0FDF -  -  -  -  
   52 00:0FDF D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0FE0 D1 -  -  -  		pop 	de
   54 00:0FE1 C1 -  -  -  		pop 	bc
   55 00:0FE2 D9 -  -  -  		exx
   56 00:0FE3 D1 -  -  -  		pop 	de
   57 00:0FE4 C1 -  -  -  		pop 	bc
   58 00:0FE5 C9 -  -  -  		ret
   59 00:0FE6 -  -  -  -  
   60 00:0FE6 -  -  -  -  ; ***************************************************************************************
   61 00:0FE6 -  -  -  -  ;
   62 00:0FE6 -  -  -  -  ;									Changes and Updates
   63 00:0FE6 -  -  -  -  ;
   64 00:0FE6 -  -  -  -  ; ***************************************************************************************
   65 00:0FE6 -  -  -  -  ;
   66 00:0FE6 -  -  -  -  ;		Date			Notes
   67 00:0FE6 -  -  -  -  ;		==== 			=====
   68 00:0FE6 -  -  -  -  ;
   69 00:0FE6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0FE6 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0FE6 -  -  -  -  ; ***************************************************************************************
    2 00:0FE6 -  -  -  -  ; ***************************************************************************************
    3 00:0FE6 -  -  -  -  ;
    4 00:0FE6 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0FE6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0FE6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0FE6 -  -  -  -  ;		Reviewed :	No
    8 00:0FE6 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0FE6 -  -  -  -  ;
   10 00:0FE6 -  -  -  -  ; ***************************************************************************************
   11 00:0FE6 -  -  -  -  ; ***************************************************************************************
   12 00:0FE6 -  -  -  -  
   13 00:0FE6 -  -  -  -  ; ***************************************************************************************
   14 00:0FE6 -  -  -  -  ;
   15 00:0FE6 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0FE6 -  -  -  -  ;
   17 00:0FE6 -  -  -  -  ; ***************************************************************************************
   18 00:0FE6 -  -  -  -  
   19 00:0FE6 -  -  -  -  Int32Add:
   20 00:0FE6 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0FE8 D9 -  -  -  		exx
   22 00:0FE9 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0FEC D9 -  -  -  		exx
   24 00:0FED C9 -  -  -  		ret
   25 00:0FEE -  -  -  -  
   26 00:0FEE -  -  -  -  ; ***************************************************************************************
   27 00:0FEE -  -  -  -  ;
   28 00:0FEE -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0FEE -  -  -  -  ;
   30 00:0FEE -  -  -  -  ; ***************************************************************************************
   31 00:0FEE -  -  -  -  
   32 00:0FEE -  -  -  -  Int32Subtract:
   33 00:0FEE AF -  -  -  		xor 	a 							; clear carry
   34 00:0FEF 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0FF2 D9 -  -  -  		exx
   36 00:0FF3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0FF6 D9 -  -  -  		exx
   38 00:0FF7 C9 -  -  -  		ret
   39 00:0FF8 -  -  -  -  
   40 00:0FF8 -  -  -  -  ; ***************************************************************************************
   41 00:0FF8 -  -  -  -  ;
   42 00:0FF8 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0FF8 -  -  -  -  ;
   44 00:0FF8 -  -  -  -  ; ***************************************************************************************
   45 00:0FF8 -  -  -  -  
   46 00:0FF8 -  -  -  -  Int32And:
   47 00:0FF8 D9 -  -  -  		exx
   48 00:0FF9 CD FE 0F 00 		call 	_I32AndHLDE
   49 00:0FFD D9 -  -  -  		exx
   50 00:0FFE -  -  -  -  _I32AndHLDE:		
   51 00:0FFE 7C -  -  -  		ld 		a,h
   52 00:0FFF A2 -  -  -  		and 	d
   53 00:1000 67 -  -  -  		ld 		h,a
   54 00:1001 7D -  -  -  		ld 		a,l
   55 00:1002 A3 -  -  -  		and 	e
   56 00:1003 6F -  -  -  		ld 		l,a
   57 00:1004 C9 -  -  -  		ret
   58 00:1005 -  -  -  -  
   59 00:1005 -  -  -  -  ; ***************************************************************************************
   60 00:1005 -  -  -  -  ;
   61 00:1005 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:1005 -  -  -  -  ;
   63 00:1005 -  -  -  -  ; ***************************************************************************************
   64 00:1005 -  -  -  -  
   65 00:1005 -  -  -  -  Int32Or:
   66 00:1005 D9 -  -  -  		exx
   67 00:1006 CD 0B 10 00 		call 	_I32OrHLDE
   68 00:100A D9 -  -  -  		exx
   69 00:100B -  -  -  -  _I32OrHLDE:		
   70 00:100B 7C -  -  -  		ld 		a,h
   71 00:100C B2 -  -  -  		or 		d
   72 00:100D 67 -  -  -  		ld 		h,a
   73 00:100E 7D -  -  -  		ld 		a,l
   74 00:100F B3 -  -  -  		or 		e
   75 00:1010 6F -  -  -  		ld 		l,a
   76 00:1011 C9 -  -  -  		ret
   77 00:1012 -  -  -  -  
   78 00:1012 -  -  -  -  ; ***************************************************************************************
   79 00:1012 -  -  -  -  ;
   80 00:1012 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:1012 -  -  -  -  ;
   82 00:1012 -  -  -  -  ; ***************************************************************************************
   83 00:1012 -  -  -  -  
   84 00:1012 -  -  -  -  Int32Xor:
   85 00:1012 D9 -  -  -  		exx
   86 00:1013 CD 18 10 00 		call 	_I32XorHLDE
   87 00:1017 D9 -  -  -  		exx
   88 00:1018 -  -  -  -  _I32XorHLDE:		
   89 00:1018 7C -  -  -  		ld 		a,h
   90 00:1019 AA -  -  -  		xor 	d
   91 00:101A 67 -  -  -  		ld 		h,a
   92 00:101B 7D -  -  -  		ld 		a,l
   93 00:101C AB -  -  -  		xor 	e
   94 00:101D 6F -  -  -  		ld 		l,a
   95 00:101E C9 -  -  -  		ret
   96 00:101F -  -  -  -  
   97 00:101F -  -  -  -  ; ***************************************************************************************
   98 00:101F -  -  -  -  ;
   99 00:101F -  -  -  -  ;								 Check if HL'HL zero
  100 00:101F -  -  -  -  ;
  101 00:101F -  -  -  -  ; ***************************************************************************************
  102 00:101F -  -  -  -  
  103 00:101F -  -  -  -  Int32Zero:
  104 00:101F D9 -  -  -  		exx
  105 00:1020 7D -  -  -  		ld 		a,l
  106 00:1021 B4 -  -  -  		or 		h
  107 00:1022 D9 -  -  -  		exx
  108 00:1023 B5 -  -  -  		or 		l
  109 00:1024 B4 -  -  -  		or 		h
  110 00:1025 C9 -  -  -  		ret
  111 00:1026 -  -  -  -  
  112 00:1026 -  -  -  -  ; ***************************************************************************************
  113 00:1026 -  -  -  -  ;
  114 00:1026 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:1026 -  -  -  -  ;
  116 00:1026 -  -  -  -  ; ***************************************************************************************
  117 00:1026 -  -  -  -  
  118 00:1026 -  -  -  -  Int32Compare:
  119 00:1026 E5 -  -  -  		push 	hl 							; save HL
  120 00:1027 AF -  -  -  		xor 	a 							; clear carry
  121 00:1028 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:102B D9 -  -  -  		exx
  123 00:102C E5 -  -  -  		push 	hl 							; save HL'
  124 00:102D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:1030 -  -  -  -  		;
  126 00:1030 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:1031 E2 39 10 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:1035 78 -  -  -  		ld 		a,b
  129 00:1036 EE 80 -  -  		xor 	$80
  130 00:1038 47 -  -  -  		ld 		b,a
  131 00:1039 -  -  -  -  _I32CNoOverflow:
  132 00:1039 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:103A B5 -  -  -  		or 		l
  134 00:103B D9 -  -  -  		exx 
  135 00:103C B4 -  -  -  		or 		h
  136 00:103D B5 -  -  -  		or 		l
  137 00:103E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:1040 -  -  -  -  		;
  139 00:1040 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:1041 CB 78 -  -  		bit 	7,b
  141 00:1043 D9 -  -  -  		exx
  142 00:1044 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:1046 28 02 -  -  		jr 		z,_I32NotPos
  144 00:1048 3E FF -  -  		ld 		a,$FF
  145 00:104A -  -  -  -  _I32NotPos:
  146 00:104A D9 -  -  -  		exx
  147 00:104B E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:104C D9 -  -  -  		exx
  149 00:104D E1 -  -  -  		pop 	hl 							; restore HL
  150 00:104E B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:104F C9 -  -  -  		ret
  152 00:1050 -  -  -  -  
  153 00:1050 -  -  -  -  ; ***************************************************************************************
  154 00:1050 -  -  -  -  ;
  155 00:1050 -  -  -  -  ;										Negate HL'HL
  156 00:1050 -  -  -  -  ;
  157 00:1050 -  -  -  -  ; ***************************************************************************************
  158 00:1050 -  -  -  -  
  159 00:1050 -  -  -  -  Int32Negate:
  160 00:1050 AF -  -  -  		xor 	a
  161 00:1051 CD 5C 10 00 		call 	_I32NSubtract
  162 00:1055 D9 -  -  -  		exx
  163 00:1056 CD 5C 10 00 		call 	_I32NSubtract
  164 00:105A D9 -  -  -  		exx
  165 00:105B C9 -  -  -  		ret
  166 00:105C -  -  -  -  _I32NSubtract:
  167 00:105C D5 -  -  -  		push 	de
  168 00:105D EB -  -  -  		ex 		de,hl
  169 00:105E 21 00 00 00 		ld 		hl,$0000
  170 00:1062 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:1065 D1 -  -  -  		pop 	de
  172 00:1066 C9 -  -  -  		ret
  173 00:1067 -  -  -  -  		
  174 00:1067 -  -  -  -  ; ***************************************************************************************
  175 00:1067 -  -  -  -  ;
  176 00:1067 -  -  -  -  ;									Changes and Updates
  177 00:1067 -  -  -  -  ;
  178 00:1067 -  -  -  -  ; ***************************************************************************************
  179 00:1067 -  -  -  -  ;
  180 00:1067 -  -  -  -  ;		Date			Notes
  181 00:1067 -  -  -  -  ;		==== 			=====
  182 00:1067 -  -  -  -  ;
  183 00:1067 -  -  -  -  ; ***************************************************************************************
  184 00:1067 -  -  -  -  		
Listing for file "_build.asm"
   69 00:1067 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:1067 -  -  -  -  ; ***************************************************************************************
    2 00:1067 -  -  -  -  ; ***************************************************************************************
    3 00:1067 -  -  -  -  ;
    4 00:1067 -  -  -  -  ;		Name : 		itostring.asm
    5 00:1067 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:1067 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:1067 -  -  -  -  ;		Reviewed :	No
    8 00:1067 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:1067 -  -  -  -  ;
   10 00:1067 -  -  -  -  ; ***************************************************************************************
   11 00:1067 -  -  -  -  ;
   12 00:1067 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:1067 -  -  -  -  ;
   14 00:1067 -  -  -  -  ; ***************************************************************************************
   15 00:1067 -  -  -  -  
   16 00:1067 -  -  -  -  Int32ToString:
   17 00:1067 C5 -  -  -  		push 	bc 							; save string start
   18 00:1068 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:1069 E5 -  -  -  		push 	hl
   20 00:106A 11 00 00 00 		ld	 	de,$0000
   21 00:106E D9 -  -  -  		exx
   22 00:106F D5 -  -  -  		push 	de
   23 00:1070 E5 -  -  -  		push 	hl
   24 00:1071 11 00 00 00 		ld 		de,$000
   25 00:1075 D9 -  -  -  		exx
   26 00:1076 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:1077 -  -  -  -  		;
   28 00:1077 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:1079 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:107B ED 44 -  -  		neg 								; negate base and put in E
   31 00:107D 5F -  -  -  		ld 		e,a
   32 00:107E -  -  -  -  		;
   33 00:107E D9 -  -  -  		exx 								; is it -ve ?
   34 00:107F CB 7C -  -  		bit 	7,h
   35 00:1081 D9 -  -  -  		exx
   36 00:1082 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:1084 -  -  -  -  		;
   38 00:1084 CD 50 10 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:1088 -  -  -  -  		;
   40 00:1088 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:108A 02 -  -  -  		ld 		(bc),a
   42 00:108B 03 -  -  -  		inc 	bc
   43 00:108C -  -  -  -  _I32TSNotNegative:	
   44 00:108C CD 9B 10 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:1090 -  -  -  -  _I32TSExit:
   46 00:1090 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:1092 02 -  -  -  		ld 		(bc),a 
   48 00:1093 -  -  -  -  
   49 00:1093 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:1094 E1 -  -  -  		pop 	hl
   51 00:1095 D1 -  -  -  		pop 	de
   52 00:1096 D9 -  -  -  		exx
   53 00:1097 E1 -  -  -  		pop 	hl
   54 00:1098 D1 -  -  -  		pop 	de
   55 00:1099 C1 -  -  -  		pop 	bc
   56 00:109A C9 -  -  -  		ret
   57 00:109B -  -  -  -  
   58 00:109B -  -  -  -  _I32RecursiveConvert:
   59 00:109B CD A8 0E 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:109F F5 -  -  -  		push 	af 							; save remainder
   61 00:10A0 CD 1F 10 00 		call 	Int32Zero		 			; check result is non zero
   62 00:10A4 C4 9B 10 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:10A8 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:10A9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:10AB 38 02 -  -  		jr 		c,_I32NotHex
   66 00:10AD C6 07 -  -  		add 	a,7
   67 00:10AF -  -  -  -  _I32NotHex:
   68 00:10AF C6 30 -  -  		add 	a,48
   69 00:10B1 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:10B2 03 -  -  -  		inc 	bc
   71 00:10B3 C9 -  -  -  		ret		
   72 00:10B4 -  -  -  -  
   73 00:10B4 -  -  -  -  ; ***************************************************************************************
   74 00:10B4 -  -  -  -  ;
   75 00:10B4 -  -  -  -  ;									Changes and Updates
   76 00:10B4 -  -  -  -  ;
   77 00:10B4 -  -  -  -  ; ***************************************************************************************
   78 00:10B4 -  -  -  -  ;
   79 00:10B4 -  -  -  -  ;		Date			Notes
   80 00:10B4 -  -  -  -  ;		==== 			=====
   81 00:10B4 -  -  -  -  ;
   82 00:10B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   70 00:10B4 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:10B4 -  -  -  -  ; ***************************************************************************************
    2 00:10B4 -  -  -  -  ; ***************************************************************************************
    3 00:10B4 -  -  -  -  ;
    4 00:10B4 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:10B4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:10B4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:10B4 -  -  -  -  ;		Reviewed :	No
    8 00:10B4 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:10B4 -  -  -  -  ;
   10 00:10B4 -  -  -  -  ; ***************************************************************************************
   11 00:10B4 -  -  -  -  ; ***************************************************************************************
   12 00:10B4 -  -  -  -  
   13 00:10B4 -  -  -  -  #ifdef AQUARIUS
   14 00:10B4             
   15 00:10B4             ; ***************************************************************************************
   16 00:10B4             ;
   17 00:10B4             ;								Initialise system stuff
   18 00:10B4             ;
   19 00:10B4             ; ***************************************************************************************
   20 00:10B4             
   21 00:10B4             SYSInitialise:
   22 00:10B4             	ld 		a,$0b 								; Aquarius clear screen
   23 00:10B4             	call 	SYSPrintChar
   24 00:10B4             	ret
   25 00:10B4             
   26 00:10B4             ; ***************************************************************************************
   27 00:10B4             ;
   28 00:10B4             ;								Terminate system stuff
   29 00:10B4             ;
   30 00:10B4             ; ***************************************************************************************
   31 00:10B4             
   32 00:10B4             SYSTerminate:
   33 00:10B4             	jr 		SYSTerminate
   34 00:10B4             
   35 00:10B4             ; ***************************************************************************************
   36 00:10B4             ;
   37 00:10B4             ;								Print A character
   38 00:10B4             ;
   39 00:10B4             ; ***************************************************************************************
   40 00:10B4             
   41 00:10B4             SYSPrintChar:
   42 00:10B4             	push 	af 									; we stack everything including alt registers
   43 00:10B4             	push 	bc
   44 00:10B4             	push 	de
   45 00:10B4             	push 	hl
   46 00:10B4             	push 	ix
   47 00:10B4             	push 	iy
   48 00:10B4             	exx
   49 00:10B4             	push 	bc
   50 00:10B4             	push 	de
   51 00:10B4             	push 	hl
   52 00:10B4             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:10B4             	pop 	hl
   54 00:10B4             	pop 	de
   55 00:10B4             	pop 	bc
   56 00:10B4             	exx
   57 00:10B4             	pop 	iy
   58 00:10B4             	pop 	ix
   59 00:10B4             	pop 	hl
   60 00:10B4             	pop 	de
   61 00:10B4             	pop 	bc
   62 00:10B4             	pop 	af
   63 00:10B4             	ret		
   64 00:10B4             
   65 00:10B4             ; ***************************************************************************************
   66 00:10B4             ;
   67 00:10B4             ;									Print Newline
   68 00:10B4             ;
   69 00:10B4             ; ***************************************************************************************
   70 00:10B4             
   71 00:10B4             SYSPrintCRLF:
   72 00:10B4             	push 	af
   73 00:10B4             	ld 		a,13
   74 00:10B4             	call 	SYSPrintChar
   75 00:10B4             	ld 		a,10
   76 00:10B4             	call 	SYSPrintChar
   77 00:10B4             	pop 	af
   78 00:10B4             	ret
   79 00:10B4             
   80 00:10B4             ; ***************************************************************************************
   81 00:10B4             ;
   82 00:10B4             ;									Get time into HL'HL
   83 00:10B4             ;
   84 00:10B4             ; ***************************************************************************************
   85 00:10B4             
   86 00:10B4             SYSGetTimer:
   87 00:10B4              	in 		a,($00)
   88 00:10B4              	ld 		l,a
   89 00:10B4              	in 		a,($01)
   90 00:10B4              	ld 		h,a
   91 00:10B4              	exx
   92 00:10B4              	in 		a,($02)
   93 00:10B4              	ld 		l,a
   94 00:10B4              	in 		a,($03)
   95 00:10B4              	ld 		h,a
   96 00:10B4              	exx
   97 00:10B4             	ret 	
   98 00:10B4             	
   99 00:10B4             #endif
  100 00:10B4 -  -  -  -  
  101 00:10B4 -  -  -  -  ; ***************************************************************************************
  102 00:10B4 -  -  -  -  ;
  103 00:10B4 -  -  -  -  ;									Changes and Updates
  104 00:10B4 -  -  -  -  ;
  105 00:10B4 -  -  -  -  ; ***************************************************************************************
  106 00:10B4 -  -  -  -  ;
  107 00:10B4 -  -  -  -  ;		Date			Notes
  108 00:10B4 -  -  -  -  ;		==== 			=====
  109 00:10B4 -  -  -  -  ;
  110 00:10B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   71 00:10B4 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:10B4 -  -  -  -  ; ***************************************************************************************
    2 00:10B4 -  -  -  -  ; ***************************************************************************************
    3 00:10B4 -  -  -  -  ;
    4 00:10B4 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:10B4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:10B4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:10B4 -  -  -  -  ;		Reviewed :	No
    8 00:10B4 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:10B4 -  -  -  -  ;
   10 00:10B4 -  -  -  -  ; ***************************************************************************************
   11 00:10B4 -  -  -  -  ; ***************************************************************************************
   12 00:10B4 -  -  -  -  
   13 00:10B4 -  -  -  -  #ifdef CLEANEZ80
   14 00:10B4 -  -  -  -  
   15 00:10B4 -  -  -  -  ; ***************************************************************************************
   16 00:10B4 -  -  -  -  ;
   17 00:10B4 -  -  -  -  ;								Initialise system stuff
   18 00:10B4 -  -  -  -  ;
   19 00:10B4 -  -  -  -  ; ***************************************************************************************
   20 00:10B4 -  -  -  -  
   21 00:10B4 -  -  -  -  SYSInitialise:
   22 00:10B4 C9 -  -  -  	ret
   23 00:10B5 -  -  -  -  
   24 00:10B5 -  -  -  -  ; ***************************************************************************************
   25 00:10B5 -  -  -  -  ;
   26 00:10B5 -  -  -  -  ;								Terminate system stuff
   27 00:10B5 -  -  -  -  ;
   28 00:10B5 -  -  -  -  ; ***************************************************************************************
   29 00:10B5 -  -  -  -  
   30 00:10B5 -  -  -  -  SYSTerminate:
   31 00:10B5 C9 -  -  -  	ret
   32 00:10B6 -  -  -  -  
   33 00:10B6 -  -  -  -  ; ***************************************************************************************
   34 00:10B6 -  -  -  -  ;
   35 00:10B6 -  -  -  -  ;								Print A character
   36 00:10B6 -  -  -  -  ;
   37 00:10B6 -  -  -  -  ; ***************************************************************************************
   38 00:10B6 -  -  -  -  
   39 00:10B6 -  -  -  -  SYSPrintChar:
   40 00:10B6 C9 -  -  -  	ret		
   41 00:10B7 -  -  -  -  
   42 00:10B7 -  -  -  -  ; ***************************************************************************************
   43 00:10B7 -  -  -  -  ;
   44 00:10B7 -  -  -  -  ;									Print Newline
   45 00:10B7 -  -  -  -  ;
   46 00:10B7 -  -  -  -  ; ***************************************************************************************
   47 00:10B7 -  -  -  -  
   48 00:10B7 -  -  -  -  SYSPrintCRLF:
   49 00:10B7 C9 -  -  -  	ret
   50 00:10B8 -  -  -  -  
   51 00:10B8 -  -  -  -  ; ***************************************************************************************
   52 00:10B8 -  -  -  -  ;
   53 00:10B8 -  -  -  -  ;									Get time into HL'HL
   54 00:10B8 -  -  -  -  ;
   55 00:10B8 -  -  -  -  ; ***************************************************************************************
   56 00:10B8 -  -  -  -  
   57 00:10B8 -  -  -  -  SYSGetTimer:
   58 00:10B8 C9 -  -  -  	ret
   59 00:10B9 -  -  -  -  
   60 00:10B9 -  -  -  -  #endif
   61 00:10B9 -  -  -  -  
   62 00:10B9 -  -  -  -  ; ***************************************************************************************
   63 00:10B9 -  -  -  -  ;
   64 00:10B9 -  -  -  -  ;									Changes and Updates
   65 00:10B9 -  -  -  -  ;
   66 00:10B9 -  -  -  -  ; ***************************************************************************************
   67 00:10B9 -  -  -  -  ;
   68 00:10B9 -  -  -  -  ;		Date			Notes
   69 00:10B9 -  -  -  -  ;		==== 			=====
   70 00:10B9 -  -  -  -  ;
   71 00:10B9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   72 00:10B9 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:10B9 -  -  -  -  ; ***************************************************************************************
    2 00:10B9 -  -  -  -  ; ***************************************************************************************
    3 00:10B9 -  -  -  -  ;
    4 00:10B9 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:10B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:10B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:10B9 -  -  -  -  ;		Reviewed :	No
    8 00:10B9 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:10B9 -  -  -  -  ;
   10 00:10B9 -  -  -  -  ; ***************************************************************************************
   11 00:10B9 -  -  -  -  ; ***************************************************************************************
   12 00:10B9 -  -  -  -  
   13 00:10B9 -  -  -  -  #ifdef TI84
   14 00:10B9             
   15 00:10B9             ; ***************************************************************************************
   16 00:10B9             ;
   17 00:10B9             ;								Initialise system stuff
   18 00:10B9             ;
   19 00:10B9             ; ***************************************************************************************
   20 00:10B9             
   21 00:10B9             SYSInitialise:
   22 00:10B9             	di
   23 00:10B9             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:10B9             	ld 		(_IYTemp84),iy
   25 00:10B9             	ret
   26 00:10B9             
   27 00:10B9             ; ***************************************************************************************
   28 00:10B9             ;
   29 00:10B9             ;								Terminate system stuff
   30 00:10B9             ;
   31 00:10B9             ; ***************************************************************************************
   32 00:10B9             
   33 00:10B9             SYSTerminate:
   34 00:10B9             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:10B9             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:10B9             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:10B9             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:10B9             	ei
   39 00:10B9             	ret 										; and exit.
   40 00:10B9             
   41 00:10B9             _StackTemp84:									; temp var for TI84 only.
   42 00:10B9             	.dw 	0,0
   43 00:10B9             _IYTemp84:
   44 00:10B9             	.dw 	0,0		
   45 00:10B9             
   46 00:10B9             ; ***************************************************************************************
   47 00:10B9             ;
   48 00:10B9             ;								Print A character
   49 00:10B9             ;
   50 00:10B9             ; ***************************************************************************************
   51 00:10B9             
   52 00:10B9             SYSPrintChar:
   53 00:10B9             	push 	af 									; we stack everything including alt registers
   54 00:10B9             	push 	bc
   55 00:10B9             	push 	de
   56 00:10B9             	push 	hl
   57 00:10B9             	push 	ix
   58 00:10B9             	push 	iy
   59 00:10B9             	exx
   60 00:10B9             	push 	bc
   61 00:10B9             	push 	de
   62 00:10B9             	push 	hl
   63 00:10B9             
   64 00:10B9             	ld 		iy,(_IYTemp84)
   65 00:10B9             	call 	_PutC 								; print A as character
   66 00:10B9             	di
   67 00:10B9             	ld 		(_IYTemp84),iy
   68 00:10B9             
   69 00:10B9             	pop 	hl
   70 00:10B9             	pop 	de
   71 00:10B9             	pop 	bc
   72 00:10B9             	exx
   73 00:10B9             	pop 	iy
   74 00:10B9             	pop 	ix
   75 00:10B9             	pop 	hl
   76 00:10B9             	pop 	de
   77 00:10B9             	pop 	bc
   78 00:10B9             	pop 	af
   79 00:10B9             	ret		
   80 00:10B9             
   81 00:10B9             ; ***************************************************************************************
   82 00:10B9             ;
   83 00:10B9             ;									Print Newline
   84 00:10B9             ;
   85 00:10B9             ; ***************************************************************************************
   86 00:10B9             
   87 00:10B9             SYSPrintCRLF:
   88 00:10B9             	push 	af 									; we stack everything including alt registers
   89 00:10B9             	push 	bc
   90 00:10B9             	push 	de
   91 00:10B9             	push 	hl
   92 00:10B9             	push 	ix
   93 00:10B9             	push 	iy
   94 00:10B9             	exx
   95 00:10B9             	push 	bc
   96 00:10B9             	push 	de
   97 00:10B9             	push 	hl
   98 00:10B9             
   99 00:10B9             	ld 		iy,(_IYTemp84)
  100 00:10B9             	call 	_newline
  101 00:10B9             	di
  102 00:10B9             	ld 		(_IYTemp84),iy
  103 00:10B9             
  104 00:10B9             	pop 	hl
  105 00:10B9             	pop 	de
  106 00:10B9             	pop 	bc
  107 00:10B9             	exx
  108 00:10B9             	pop 	iy
  109 00:10B9             	pop 	ix
  110 00:10B9             	pop 	hl
  111 00:10B9             	pop 	de
  112 00:10B9             	pop 	bc
  113 00:10B9             	pop 	af
  114 00:10B9             	ret
  115 00:10B9             
  116 00:10B9             ; ***************************************************************************************
  117 00:10B9             ;
  118 00:10B9             ;									Get time into HL'HL
  119 00:10B9             ;
  120 00:10B9             ; ***************************************************************************************
  121 00:10B9             
  122 00:10B9             SYSGetTimer:
  123 00:10B9             	ld 		hl,$1234
  124 00:10B9             	exx
  125 00:10B9             	ld 		hl,$5678
  126 00:10B9             	exx
  127 00:10B9             	ret
  128 00:10B9             
  129 00:10B9             #endif
  130 00:10B9 -  -  -  -  
  131 00:10B9 -  -  -  -  ; ***************************************************************************************
  132 00:10B9 -  -  -  -  ;
  133 00:10B9 -  -  -  -  ;									Changes and Updates
  134 00:10B9 -  -  -  -  ;
  135 00:10B9 -  -  -  -  ; ***************************************************************************************
  136 00:10B9 -  -  -  -  ;
  137 00:10B9 -  -  -  -  ;		Date			Notes
  138 00:10B9 -  -  -  -  ;		==== 			=====
  139 00:10B9 -  -  -  -  ;
  140 00:10B9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   73 00:10B9 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:10B9 -  -  -  -  ; ***************************************************************************************
    2 00:10B9 -  -  -  -  ; ***************************************************************************************
    3 00:10B9 -  -  -  -  ;
    4 00:10B9 -  -  -  -  ;		Name : 		basic.asm
    5 00:10B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:10B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:10B9 -  -  -  -  ;		Reviewed :	No
    8 00:10B9 -  -  -  -  ;		Purpose :	Main program.
    9 00:10B9 -  -  -  -  ;
   10 00:10B9 -  -  -  -  ; ***************************************************************************************
   11 00:10B9 -  -  -  -  ; ***************************************************************************************
   12 00:10B9 -  -  -  -  
   13 00:10B9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:1400 -  -  -  -  TestInstance:
   15 00:1400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1400 -  -  -  -  ;
    2 00:1400 -  -  -  -  ;	This code automatically generated.
    3 00:1400 -  -  -  -  ;
    4 00:1400 -  -  -  -  TestProgram:
    5 00:1400 0B 0A 00 02 
              0E 14 0D 13 
              8F 40 80 07 
              14 00 B9 4F 
              68 80 0B 1E 
              00 B9 4F 68 
              A7 B9 4F 68 
              80 07 28 00 
              B9 5F 50 80 
              07 32 00 B9 
              5F 50 80 05 
              5A 00 CC 80 
              11 E8 03 02 
              0E 14 0D 13 
              8F 02 0E 14 
              0D 13 89 41 
              80 0A F2 03 
              C1 02 0E 14 
              0D 13 80 05 
              FC 03 BA 80 
              0F D0 07 C1 
              3F 07 49 6E 
              20 32 30 30 
              30 0D 80 0B 
              DA 07 B9 4F 
              68 A7 B9 4F 
              68 80 05 E4 
              07 BA 80 00 	.db	$0b,$0a,$00,$02,$0e,$14,$0d,$13,$8f,$40,$80,$07,$14,$00,$b9,$4f,$68,$80,$0b,$1e,$00,$b9,$4f,$68,$a7,$b9,$4f,$68,$80,$07,$28,$00,$b9,$5f,$50,$80,$07,$32,$00,$b9,$5f,$50,$80,$05,$5a,$00,$cc,$80,$11,$e8,$03,$02,$0e,$14,$0d,$13,$8f,$02,$0e,$14,$0d,$13,$89,$41,$80,$0a,$f2,$03,$c1,$02,$0e,$14,$0d,$13,$80,$05,$fc,$03,$ba,$80,$0f,$d0,$07,$c1,$3f,$07,$49,$6e,$20,$32,$30,$30,$30,$0d,$80,$0b,$da,$07,$b9,$4f,$68,$a7,$b9,$4f,$68,$80,$05,$e4,$07,$ba,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1470 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2470 -  -  -  -  EndTestInstance:
   18 00:2470 -  -  -  -  		
   19 00:2470 -  -  -  -  ; ***************************************************************************************
   20 00:2470 -  -  -  -  ;
   21 00:2470 -  -  -  -  ;									Changes and Updates
   22 00:2470 -  -  -  -  ;
   23 00:2470 -  -  -  -  ; ***************************************************************************************
   24 00:2470 -  -  -  -  ;
   25 00:2470 -  -  -  -  ;		Date			Notes
   26 00:2470 -  -  -  -  ;		==== 			=====
   27 00:2470 -  -  -  -  ;
   28 00:2470 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   74 00:2470 -  -  -  -  FinalAddress:
