    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD A2 0C 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 7E 2F 00 		ld 		hl,EndTestInstance
   46 00:000C CD 00 07 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 58 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 16 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD A4 0C 00 		call 	SYSPrintChar
   56 00:0020 CD A3 0C 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 CC 
              01 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 CC 
              01 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  		
   59 00:004C -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 00:004C 00 00 00 00 		.dw 	0,0
   61 00:0050 -  -  -  -  
   62 00:0050 -  -  -  -  ; ***************************************************************************************
   63 00:0050 -  -  -  -  ;
   64 00:0050 -  -  -  -  ;										Run variables
   65 00:0050 -  -  -  -  ;
   66 00:0050 -  -  -  -  ; ***************************************************************************************
   67 00:0050 -  -  -  -  
   68 00:0050 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  		
   71 00:0054 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 00:0054 00 00 00 00 		.dw 	0,0
   73 00:0058 -  -  -  -  
   74 00:0058 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 00:0058 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:005E -  -  -  -  
   77 00:005E -  -  -  -  AConvert: 									; used for address conversions.
   78 00:005E 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 00:0064 -  -  -  -  		
   80 00:0064 -  -  -  -  RandomSeed: 								; random number seeds.
   81 00:0064 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 00:0074 -  -  -  -  
   83 00:0074 -  -  -  -  s; ***************************************************************************************
   84 00:0074 -  -  -  -  ;
   85 00:0074 -  -  -  -  ;										  Buffers
   86 00:0074 -  -  -  -  ;
   87 00:0074 -  -  -  -  ; ***************************************************************************************
   88 00:0074 -  -  -  -  
   89 00:0074 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 00:0074 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 00:0084 -  -  -  -  
   92 00:0084 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 00:0084 00 00 -  -  		.dw 	0
   94 00:0086 -  -  -  -  
   95 00:0086 -  -  -  -  ConvertBuffer: 								; general usage
   96 00:0086 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 00:00C6 -  -  -  -  
   98 00:00C6 -  -  -  -  ; ***************************************************************************************
   99 00:00C6 -  -  -  -  ;
  100 00:00C6 -  -  -  -  ;									Changes and Updates
  101 00:00C6 -  -  -  -  ;
  102 00:00C6 -  -  -  -  ; ***************************************************************************************
  103 00:00C6 -  -  -  -  ;
  104 00:00C6 -  -  -  -  ;		Date			Notes
  105 00:00C6 -  -  -  -  ;		==== 			=====
  106 00:00C6 -  -  -  -  ;
  107 00:00C6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00C6 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00C6 -  -  -  -  ; ***************************************************************************************
    2 00:00C6 -  -  -  -  ; ***************************************************************************************
    3 00:00C6 -  -  -  -  ;
    4 00:00C6 -  -  -  -  ;		Name : 		assert.asm
    5 00:00C6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00C6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00C6 -  -  -  -  ;		Reviewed :	No
    8 00:00C6 -  -  -  -  ;		Purpose :	Assert command
    9 00:00C6 -  -  -  -  ;
   10 00:00C6 -  -  -  -  ; ***************************************************************************************
   11 00:00C6 -  -  -  -  ; ***************************************************************************************
   12 00:00C6 -  -  -  -  
   13 00:00C6 -  -  -  -  ; ***************************************************************************************
   14 00:00C6 -  -  -  -  ;
   15 00:00C6 -  -  -  -  ;									ASSERT command
   16 00:00C6 -  -  -  -  ;
   17 00:00C6 -  -  -  -  ; ***************************************************************************************
   18 00:00C6 -  -  -  -  
   19 00:00C6 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00C6 CD FF 03 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00CA 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00D0 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00D1 3E 01 C3 CC 
              01 00 -  -  		ERR_ASSERT
   24 00:00D7 -  -  -  -  
   25 00:00D7 -  -  -  -  ; ***************************************************************************************
   26 00:00D7 -  -  -  -  ;
   27 00:00D7 -  -  -  -  ;									Changes and Updates
   28 00:00D7 -  -  -  -  ;
   29 00:00D7 -  -  -  -  ; ***************************************************************************************
   30 00:00D7 -  -  -  -  ;
   31 00:00D7 -  -  -  -  ;		Date			Notes
   32 00:00D7 -  -  -  -  ;		==== 			=====
   33 00:00D7 -  -  -  -  ;
   34 00:00D7 -  -  -  -  ; ***************************************************************************************
   35 00:00D7 -  -  -  -  		
Listing for file "_build.asm"
   14 00:00D7 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00D7 -  -  -  -  ; ***************************************************************************************
    2 00:00D7 -  -  -  -  ; ***************************************************************************************
    3 00:00D7 -  -  -  -  ;
    4 00:00D7 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00D7 -  -  -  -  ;		Reviewed :	No
    8 00:00D7 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00D7 -  -  -  -  ;
   10 00:00D7 -  -  -  -  ; ***************************************************************************************
   11 00:00D7 -  -  -  -  ; ***************************************************************************************
   12 00:00D7 -  -  -  -  
   13 00:00D7 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00D7 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00D7 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00D7 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00D7 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00D7 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00D7 C3 36 02 00 		jp 		SyntaxError
   20 00:00DB -  -  -  -  
   21 00:00DB -  -  -  -  ; ***************************************************************************************
   22 00:00DB -  -  -  -  ;
   23 00:00DB -  -  -  -  ;									Changes and Updates
   24 00:00DB -  -  -  -  ;
   25 00:00DB -  -  -  -  ; ***************************************************************************************
   26 00:00DB -  -  -  -  ;
   27 00:00DB -  -  -  -  ;		Date			Notes
   28 00:00DB -  -  -  -  ;		==== 			=====
   29 00:00DB -  -  -  -  ;
   30 00:00DB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00DB -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00DB -  -  -  -  ; ***************************************************************************************
    2 00:00DB -  -  -  -  ; ***************************************************************************************
    3 00:00DB -  -  -  -  ;
    4 00:00DB -  -  -  -  ;		Name : 		colon.asm
    5 00:00DB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DB -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00DB -  -  -  -  ;		Reviewed :	No
    8 00:00DB -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00DB -  -  -  -  ;
   10 00:00DB -  -  -  -  ; ***************************************************************************************
   11 00:00DB -  -  -  -  ; ***************************************************************************************
   12 00:00DB -  -  -  -  
   13 00:00DB -  -  -  -  ; ***************************************************************************************
   14 00:00DB -  -  -  -  ;
   15 00:00DB -  -  -  -  ;								Colon command, this is ignored.
   16 00:00DB -  -  -  -  ;
   17 00:00DB -  -  -  -  ; ***************************************************************************************
   18 00:00DB -  -  -  -  
   19 00:00DB -  -  -  -  Command_Colon: 	;; [:]
   20 00:00DB C9 -  -  -  		ret
   21 00:00DC -  -  -  -  
   22 00:00DC -  -  -  -  ; ***************************************************************************************
   23 00:00DC -  -  -  -  ;
   24 00:00DC -  -  -  -  ;									Changes and Updates
   25 00:00DC -  -  -  -  ;
   26 00:00DC -  -  -  -  ; ***************************************************************************************
   27 00:00DC -  -  -  -  ;
   28 00:00DC -  -  -  -  ;		Date			Notes
   29 00:00DC -  -  -  -  ;		==== 			=====
   30 00:00DC -  -  -  -  ;
   31 00:00DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00DC -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00DC -  -  -  -  ; ***************************************************************************************
    2 00:00DC -  -  -  -  ; ***************************************************************************************
    3 00:00DC -  -  -  -  ;
    4 00:00DC -  -  -  -  ;		Name : 		end.asm
    5 00:00DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DC -  -  -  -  ;		Reviewed :	No
    8 00:00DC -  -  -  -  ;		Purpose :	End command
    9 00:00DC -  -  -  -  ;
   10 00:00DC -  -  -  -  ; ***************************************************************************************
   11 00:00DC -  -  -  -  ; ***************************************************************************************
   12 00:00DC -  -  -  -  
   13 00:00DC -  -  -  -  ; ***************************************************************************************
   14 00:00DC -  -  -  -  ;
   15 00:00DC -  -  -  -  ;										END command
   16 00:00DC -  -  -  -  ;
   17 00:00DC -  -  -  -  ; ***************************************************************************************
   18 00:00DC -  -  -  -  
   19 00:00DC -  -  -  -  Command_END: 	;; [end]
   20 00:00DC 3E 00 C3 CC 
              01 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00E2 -  -  -  -  
   22 00:00E2 -  -  -  -  ; ***************************************************************************************
   23 00:00E2 -  -  -  -  ;
   24 00:00E2 -  -  -  -  ;									Changes and Updates
   25 00:00E2 -  -  -  -  ;
   26 00:00E2 -  -  -  -  ; ***************************************************************************************
   27 00:00E2 -  -  -  -  ;
   28 00:00E2 -  -  -  -  ;		Date			Notes
   29 00:00E2 -  -  -  -  ;		==== 			=====
   30 00:00E2 -  -  -  -  ;
   31 00:00E2 -  -  -  -  ; ***************************************************************************************
   32 00:00E2 -  -  -  -  		
Listing for file "_build.asm"
   17 00:00E2 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00E2 -  -  -  -  ; ***************************************************************************************
    2 00:00E2 -  -  -  -  ; ***************************************************************************************
    3 00:00E2 -  -  -  -  ;
    4 00:00E2 -  -  -  -  ;		Name : 		endofline.asm
    5 00:00E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E2 -  -  -  -  ;		Reviewed :	None
    8 00:00E2 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00E2 -  -  -  -  ;
   10 00:00E2 -  -  -  -  ; ***************************************************************************************
   11 00:00E2 -  -  -  -  ; ***************************************************************************************
   12 00:00E2 -  -  -  -  
   13 00:00E2 -  -  -  -  ; ***************************************************************************************
   14 00:00E2 -  -  -  -  ;
   15 00:00E2 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00E2 -  -  -  -  ;
   17 00:00E2 -  -  -  -  ; ***************************************************************************************
   18 00:00E2 -  -  -  -  
   19 00:00E2 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00E2 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00E7 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00EB DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00EE DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00F0 -  -  -  -  		;
   25 00:00F0 ED 7B 54 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00F5 C3 24 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00F9 -  -  -  -  
   28 00:00F9 -  -  -  -  ; ***************************************************************************************
   29 00:00F9 -  -  -  -  ;
   30 00:00F9 -  -  -  -  ;									Changes and Updates
   31 00:00F9 -  -  -  -  ;
   32 00:00F9 -  -  -  -  ; ***************************************************************************************
   33 00:00F9 -  -  -  -  ;
   34 00:00F9 -  -  -  -  ;		Date			Notes
   35 00:00F9 -  -  -  -  ;		==== 			=====
   36 00:00F9 -  -  -  -  ;
   37 00:00F9 -  -  -  -  ; ***************************************************************************************
   38 00:00F9 -  -  -  -  		
Listing for file "_build.asm"
   18 00:00F9 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:00F9 -  -  -  -  ; ***************************************************************************************
    2 00:00F9 -  -  -  -  ; ***************************************************************************************
    3 00:00F9 -  -  -  -  ;
    4 00:00F9 -  -  -  -  ;		Name : 		rem.asm
    5 00:00F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F9 -  -  -  -  ;		Reviewed :	No
    8 00:00F9 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:00F9 -  -  -  -  ;
   10 00:00F9 -  -  -  -  ; ***************************************************************************************
   11 00:00F9 -  -  -  -  ; ***************************************************************************************
   12 00:00F9 -  -  -  -  
   13 00:00F9 -  -  -  -  ; ***************************************************************************************
   14 00:00F9 -  -  -  -  ;
   15 00:00F9 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:00F9 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:00F9 -  -  -  -  ;
   18 00:00F9 -  -  -  -  ; ***************************************************************************************
   19 00:00F9 -  -  -  -  
   20 00:00F9 -  -  -  -  Command_REM: 	;; [rem]
   21 00:00F9 -  -  -  -  Command_REM2: 	;; [']
   22 00:00F9 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:00FC DD 23 -  -  		inc 	ix
   24 00:00FE FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:0100 C8 -  -  -  		ret 	z
   26 00:0101 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:0103 C8 -  -  -  		ret 	z
   28 00:0104 FE 3F -  -  		cp 		STRING_MARKER
   29 00:0106 C2 36 02 00 		jp 		nz,SyntaxError
   30 00:010A -  -  -  -  		;		
   31 00:010A 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:010E DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0111 13 -  -  -  		inc 	de 
   34 00:0112 13 -  -  -  		inc 	de
   35 00:0113 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:0115 C9 -  -  -  		ret
   37 00:0116 -  -  -  -  
   38 00:0116 -  -  -  -  ; ***************************************************************************************
   39 00:0116 -  -  -  -  ;
   40 00:0116 -  -  -  -  ;									Changes and Updates
   41 00:0116 -  -  -  -  ;
   42 00:0116 -  -  -  -  ; ***************************************************************************************
   43 00:0116 -  -  -  -  ;
   44 00:0116 -  -  -  -  ;		Date			Notes
   45 00:0116 -  -  -  -  ;		==== 			=====
   46 00:0116 -  -  -  -  ;
   47 00:0116 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:0116 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:0116 -  -  -  -  ; ***************************************************************************************
    2 00:0116 -  -  -  -  ; ***************************************************************************************
    3 00:0116 -  -  -  -  ;
    4 00:0116 -  -  -  -  ;		Name : 		run.asm
    5 00:0116 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0116 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0116 -  -  -  -  ;		Reviewed :	No
    8 00:0116 -  -  -  -  ;		Purpose :	Run command
    9 00:0116 -  -  -  -  ;
   10 00:0116 -  -  -  -  ; ***************************************************************************************
   11 00:0116 -  -  -  -  ; ***************************************************************************************
   12 00:0116 -  -  -  -  
   13 00:0116 -  -  -  -  ; ***************************************************************************************
   14 00:0116 -  -  -  -  ;
   15 00:0116 -  -  -  -  ;										RUN command
   16 00:0116 -  -  -  -  ;
   17 00:0116 -  -  -  -  ; ***************************************************************************************
   18 00:0116 -  -  -  -  
   19 00:0116 -  -  -  -  Command_RUN: 	;; [run]
   20 00:0116 CD C5 06 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:011A -  -  -  -  
   22 00:011A DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:011F ED 73 54 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:0124 -  -  -  -  		;
   25 00:0124 -  -  -  -  		; 		New line at IX.
   26 00:0124 -  -  -  -  		;
   27 00:0124 -  -  -  -  CRNewLine:
   28 00:0124 DD 22 50 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:0129 -  -  -  -  		;
   30 00:0129 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:012C B7 -  -  -  		or 		a
   32 00:012D CA DC 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:0131 -  -  -  -  		;
   34 00:0131 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:0133 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:0135 DD 23 -  -  		inc 	ix
   37 00:0137 -  -  -  -  		;
   38 00:0137 -  -  -  -  		; 		New command at IX
   39 00:0137 -  -  -  -  		;
   40 00:0137 -  -  -  -  _CRNewCommand:	
   41 00:0137 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:013A B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:013B F2 72 01 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:013F -  -  -  -  		;
   45 00:013F FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:0141 30 06 -  -  		jr  	nc,_CRDoCommand
   47 00:0143 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:0145 D2 66 01 00 		jp 		nc,_CRAlternateLets
   49 00:0149 -  -  -  -  		;
   50 00:0149 -  -  -  -  _CRDoCommand:		
   51 00:0149 E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 09 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:015E DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:0160 CD 58 00 00 		call 	JumpCode 					; call the routine.
   54 00:0164 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:0166 -  -  -  -  		;
   56 00:0166 -  -  -  -  		; 		Do CALL (HL)
   57 00:0166 -  -  -  -  		;
   58 00:0166 -  -  -  -  		;
   59 00:0166 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:0166 -  -  -  -  		;		
   61 00:0166 -  -  -  -  _CRAlternateLets:		
   62 00:0166 FE 83 -  -  		cp 		KWD_PLING
   63 00:0168 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 00:016A FE 84 -  -  		cp 		KWD_QMARK
   65 00:016C 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 00:016E C3 36 02 00 		jp 		SyntaxError
   67 00:0172 -  -  -  -  		;
   68 00:0172 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:0172 -  -  -  -  		;
   70 00:0172 -  -  -  -  _CRAssignmentHandler:		
   71 00:0172 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:0174 D2 36 02 00 		jp 		nc,SyntaxError
   73 00:0178 -  -  -  -  _CRAssignmentLet:		
   74 00:0178 3E 0E C3 CC 
              01 00 -  -  		ERR_TODO
   75 00:017E -  -  -  -  		;call	Command_LET
   76 00:017E C3 37 01 00 		jp 		_CRNewCommand
   77 00:0182 -  -  -  -  
   78 00:0182 -  -  -  -  ; ***************************************************************************************
   79 00:0182 -  -  -  -  ;
   80 00:0182 -  -  -  -  ;									Changes and Updates
   81 00:0182 -  -  -  -  ;
   82 00:0182 -  -  -  -  ; ***************************************************************************************
   83 00:0182 -  -  -  -  ;
   84 00:0182 -  -  -  -  ;		Date			Notes
   85 00:0182 -  -  -  -  ;		==== 			=====
   86 00:0182 -  -  -  -  ;
   87 00:0182 -  -  -  -  ; ***************************************************************************************
   88 00:0182 -  -  -  -  		
Listing for file "_build.asm"
   20 00:0182 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0182 -  -  -  -  ; ***************************************************************************************
    2 00:0182 -  -  -  -  ; ***************************************************************************************
    3 00:0182 -  -  -  -  ;
    4 00:0182 -  -  -  -  ;		Name : 		stop.asm
    5 00:0182 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0182 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0182 -  -  -  -  ;		Reviewed :	No
    8 00:0182 -  -  -  -  ;		Purpose :	Stop command
    9 00:0182 -  -  -  -  ;
   10 00:0182 -  -  -  -  ; ***************************************************************************************
   11 00:0182 -  -  -  -  ; ***************************************************************************************
   12 00:0182 -  -  -  -  
   13 00:0182 -  -  -  -  ; ***************************************************************************************
   14 00:0182 -  -  -  -  ;
   15 00:0182 -  -  -  -  ;										STOP command
   16 00:0182 -  -  -  -  ;
   17 00:0182 -  -  -  -  ; ***************************************************************************************
   18 00:0182 -  -  -  -  
   19 00:0182 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0182 3E 0C C3 CC 
              01 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0188 -  -  -  -  
   22 00:0188 -  -  -  -  ; ***************************************************************************************
   23 00:0188 -  -  -  -  ;
   24 00:0188 -  -  -  -  ;									Changes and Updates
   25 00:0188 -  -  -  -  ;
   26 00:0188 -  -  -  -  ; ***************************************************************************************
   27 00:0188 -  -  -  -  ;
   28 00:0188 -  -  -  -  ;		Date			Notes
   29 00:0188 -  -  -  -  ;		==== 			=====
   30 00:0188 -  -  -  -  ;
   31 00:0188 -  -  -  -  ; ***************************************************************************************
   32 00:0188 -  -  -  -  		
Listing for file "_build.asm"
   21 00:0188 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0188 -  -  -  -  ; ***************************************************************************************
    2 00:0188 -  -  -  -  ; ***************************************************************************************
    3 00:0188 -  -  -  -  ;
    4 00:0188 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0188 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0188 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0188 -  -  -  -  ;		Reviewed :	No
    8 00:0188 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0188 -  -  -  -  ;
   10 00:0188 -  -  -  -  ; ***************************************************************************************
   11 00:0188 -  -  -  -  ; ***************************************************************************************
   12 00:0188 -  -  -  -  
   13 00:0188 -  -  -  -  ; ***************************************************************************************
   14 00:0188 -  -  -  -  ;
   15 00:0188 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0188 -  -  -  -  ;
   17 00:0188 -  -  -  -  ; ***************************************************************************************
   18 00:0188 -  -  -  -  
   19 00:0188 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0188             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0188             		inc 	ix
   22 00:0188             		cp 		ch 							; exit if matches
   23 00:0188             		ret 	z
   24 00:0188             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0188             		jp 		ErrorHandler
   26 00:0188             #endmacro
   27 00:0188 -  -  -  -  
   28 00:0188 -  -  -  -  CheckLeftBracket:
   29 00:0188 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 CC 
              01 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0196 -  -  -  -  
   31 00:0196 -  -  -  -  CheckRightBracket:
   32 00:0196 DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 CC 
              01 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:01A4 -  -  -  -  
   34 00:01A4 -  -  -  -  CheckDollar:
   35 00:01A4 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 CC 
              01 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:01B2 -  -  -  -  		
   37 00:01B2 -  -  -  -  CheckComma:
   38 00:01B2 DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 CC 
              01 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:01C0 -  -  -  -  
   40 00:01C0 -  -  -  -  ; ***************************************************************************************
   41 00:01C0 -  -  -  -  ;
   42 00:01C0 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:01C0 -  -  -  -  ;
   44 00:01C0 -  -  -  -  ; ***************************************************************************************
   45 00:01C0 -  -  -  -  
   46 00:01C0 -  -  -  -  CheckNextA:
   47 00:01C0 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:01C3 DD 23 -  -  		inc 	ix 							; skip character
   49 00:01C5 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:01C6 3E 0D C3 CC 
              01 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:01CC -  -  -  -  		
   52 00:01CC -  -  -  -  ; ***************************************************************************************
   53 00:01CC -  -  -  -  ;
   54 00:01CC -  -  -  -  ;									Changes and Updates
   55 00:01CC -  -  -  -  ;
   56 00:01CC -  -  -  -  ; ***************************************************************************************
   57 00:01CC -  -  -  -  ;
   58 00:01CC -  -  -  -  ;		Date			Notes
   59 00:01CC -  -  -  -  ;		==== 			=====
   60 00:01CC -  -  -  -  ;
   61 00:01CC -  -  -  -  ; ***************************************************************************************
   62 00:01CC -  -  -  -  		
Listing for file "_build.asm"
   22 00:01CC -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:01CC -  -  -  -  ; ***************************************************************************************
    2 00:01CC -  -  -  -  ; ***************************************************************************************
    3 00:01CC -  -  -  -  ;
    4 00:01CC -  -  -  -  ;		Name : 		errors.asm
    5 00:01CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01CC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01CC -  -  -  -  ;		Reviewed :	No
    8 00:01CC -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:01CC -  -  -  -  ;
   10 00:01CC -  -  -  -  ; ***************************************************************************************
   11 00:01CC -  -  -  -  ; ***************************************************************************************
   12 00:01CC -  -  -  -  
   13 00:01CC -  -  -  -  ; ***************************************************************************************
   14 00:01CC -  -  -  -  ;
   15 00:01CC -  -  -  -  ;								Error handler, message A 
   16 00:01CC -  -  -  -  ;
   17 00:01CC -  -  -  -  ; ***************************************************************************************
   18 00:01CC -  -  -  -  
   19 00:01CC -  -  -  -  ErrorHandler:
   20 00:01CC F5 -  -  -  		push 	af 						; save error ID
   21 00:01CD -  -  -  -  
   22 00:01CD 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:01D1 6F -  -  -  		ld 		l,a
   24 00:01D2 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:01D3 29 -  -  -  		add 	hl,hl 		
   26 00:01D4 11 51 08 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:01D8 19 -  -  -  		add 	hl,de
   28 00:01D9 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:01DB CD 1F 07 00 		call 	PrintStringAtHL
   30 00:01DF -  -  -  -  		;
   31 00:01DF F1 -  -  -  		pop 	af 						; restore error ID
   32 00:01E0 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:01E1 28 2F -  -  		jr 		z,_EHExit
   34 00:01E3 -  -  -  -  		;
   35 00:01E3 DD 2A 50 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:01E8 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:01EB B7 -  -  -  		or 		a
   38 00:01EC 28 24 -  -  		jr 		z,_EHExit
   39 00:01EE -  -  -  -  
   40 00:01EE 21 1A 02 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:01F2 CD 1F 07 00 		call 	PrintStringAtHL 
   42 00:01F6 -  -  -  -  		
   43 00:01F6 D9 -  -  -  		exx								; HL'HL = line number
   44 00:01F7 21 00 00 00 		ld 		hl,$0000 		
   45 00:01FB D9 -  -  -  		exx 
   46 00:01FC DD 6E 01 -  		ld 		l,(ix+1)
   47 00:01FF DD 66 02 -  		ld 		h,(ix+2)
   48 00:0202 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:0204 01 86 00 00 		ld 		bc,ConvertBuffer
   50 00:0208 CD 55 0C 00 		call 	Int32ToString
   51 00:020C C5 -  -  -  		push 	bc
   52 00:020D E1 -  -  -  		pop 	hl
   53 00:020E CD 1F 07 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0212 -  -  -  -  _EHExit:		
   55 00:0212 CD A5 0C 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:0216 C3 1A 00 00 		jp 		WarmStart
   57 00:021A -  -  -  -  
   58 00:021A -  -  -  -  _EHAtText:
   59 00:021A 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:0224 -  -  -  -  
   61 00:0224 -  -  -  -  NotImplemented:
   62 00:0224 3E 04 C3 CC 
              01 00 -  -  		ERR_DISABLED
   63 00:022A -  -  -  -  TypeMismatch:
   64 00:022A 3E 02 C3 CC 
              01 00 -  -  		ERR_BADTYPE
   65 00:0230 -  -  -  -  BadValue:
   66 00:0230 3E 03 C3 CC 
              01 00 -  -  		ERR_BADVALUE
   67 00:0236 -  -  -  -  SyntaxError:
   68 00:0236 3E 0D C3 CC 
              01 00 -  -  		ERR_SYNTAX
   69 00:023C -  -  -  -  						
   70 00:023C -  -  -  -  ; ***************************************************************************************
   71 00:023C -  -  -  -  ;
   72 00:023C -  -  -  -  ;									Changes and Updates
   73 00:023C -  -  -  -  ;
   74 00:023C -  -  -  -  ; ***************************************************************************************
   75 00:023C -  -  -  -  ;
   76 00:023C -  -  -  -  ;		Date			Notes
   77 00:023C -  -  -  -  ;		==== 			=====
   78 00:023C -  -  -  -  ;
   79 00:023C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:023C -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:023C -  -  -  -  ; ***************************************************************************************
    2 00:023C -  -  -  -  ; ***************************************************************************************
    3 00:023C -  -  -  -  ;
    4 00:023C -  -  -  -  ;		Name : 		basicmath.asm
    5 00:023C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:023C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:023C -  -  -  -  ;		Reviewed :	No
    8 00:023C -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:023C -  -  -  -  ;
   10 00:023C -  -  -  -  ; ***************************************************************************************
   11 00:023C -  -  -  -  ; ***************************************************************************************
   12 00:023C -  -  -  -  
   13 00:023C -  -  -  -  ; ***************************************************************************************
   14 00:023C -  -  -  -  ;
   15 00:023C -  -  -  -  ; 									Addition
   16 00:023C -  -  -  -  ;
   17 00:023C -  -  -  -  ; ***************************************************************************************
   18 00:023C -  -  -  -  
   19 00:023C -  -  -  -  ALUAdd: 		;; [+]
   20 00:023C CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 D4 
              0B 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:024A -  -  -  -  
   22 00:024A -  -  -  -  ; ***************************************************************************************
   23 00:024A -  -  -  -  ;
   24 00:024A -  -  -  -  ; 									Subtraction
   25 00:024A -  -  -  -  ;
   26 00:024A -  -  -  -  ; ***************************************************************************************
   27 00:024A -  -  -  -  
   28 00:024A -  -  -  -  ALUSubtract: 	;; [-]
   29 00:024A CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 DC 
              0B 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:0258 -  -  -  -  
   31 00:0258 -  -  -  -  ; ***************************************************************************************
   32 00:0258 -  -  -  -  ;
   33 00:0258 -  -  -  -  ; 									  Multiply
   34 00:0258 -  -  -  -  ;
   35 00:0258 -  -  -  -  ; ***************************************************************************************
   36 00:0258 -  -  -  -  
   37 00:0258 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:0258 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 9B 
              0B 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0266 -  -  -  -  
   40 00:0266 -  -  -  -  ; ***************************************************************************************
   41 00:0266 -  -  -  -  ;
   42 00:0266 -  -  -  -  ; 									  Divide
   43 00:0266 -  -  -  -  ;
   44 00:0266 -  -  -  -  ; ***************************************************************************************
   45 00:0266 -  -  -  -  
   46 00:0266 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0266 -  -  -  -  ALUDivide2:	;; [div]
   48 00:0266 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 9B 
              0A 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0274 -  -  -  -  
   50 00:0274 -  -  -  -  ; ***************************************************************************************
   51 00:0274 -  -  -  -  ;
   52 00:0274 -  -  -  -  ; 									  Modulus
   53 00:0274 -  -  -  -  ;
   54 00:0274 -  -  -  -  ; ***************************************************************************************
   55 00:0274 -  -  -  -  
   56 00:0274 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0274 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 9E 
              0A 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0282 -  -  -  -  
   59 00:0282 -  -  -  -  ; ***************************************************************************************
   60 00:0282 -  -  -  -  ;
   61 00:0282 -  -  -  -  ; 									  Logical
   62 00:0282 -  -  -  -  ;
   63 00:0282 -  -  -  -  ; ***************************************************************************************
   64 00:0282 -  -  -  -  
   65 00:0282 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0282 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 E6 
              0B 00 -  -  		IntegerDispatch(Int32And)
   67 00:0290 -  -  -  -  
   68 00:0290 -  -  -  -  ALUOr: 			;; [or]
   69 00:0290 CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 F3 
              0B 00 -  -  		IntegerDispatch(Int32Or)
   70 00:029E -  -  -  -  
   71 00:029E -  -  -  -  ALUXor: 		;; [eor]
   72 00:029E CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 00 
              0C 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:02AC -  -  -  -  
   74 00:02AC -  -  -  -  ; ***************************************************************************************
   75 00:02AC -  -  -  -  ;
   76 00:02AC -  -  -  -  ;									Changes and Updates
   77 00:02AC -  -  -  -  ;
   78 00:02AC -  -  -  -  ; ***************************************************************************************
   79 00:02AC -  -  -  -  ;
   80 00:02AC -  -  -  -  ;		Date			Notes
   81 00:02AC -  -  -  -  ;		==== 			=====
   82 00:02AC -  -  -  -  ;
   83 00:02AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:02AC -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:02AC -  -  -  -  ; ***************************************************************************************
    2 00:02AC -  -  -  -  ; ***************************************************************************************
    3 00:02AC -  -  -  -  ;
    4 00:02AC -  -  -  -  ;		Name : 		binrefs.asm
    5 00:02AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02AC -  -  -  -  ;		Reviewed :	No
    8 00:02AC -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:02AC -  -  -  -  ;
   10 00:02AC -  -  -  -  ; ***************************************************************************************
   11 00:02AC -  -  -  -  ; ***************************************************************************************
   12 00:02AC -  -  -  -  
   13 00:02AC -  -  -  -  ; ***************************************************************************************
   14 00:02AC -  -  -  -  ;
   15 00:02AC -  -  -  -  ; 									<l> <op> <r>
   16 00:02AC -  -  -  -  ;
   17 00:02AC -  -  -  -  ; ***************************************************************************************
   18 00:02AC -  -  -  -  
   19 00:02AC -  -  -  -  ALULongReference:			;; [!]
   20 00:02AC CD BC 02 00 		call 	BRGetAddress 				; calculate address
   21 00:02B0 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:02B2 CB F9 -  -  		set 	CIsReference,c
   23 00:02B4 C9 -  -  -  		ret
   24 00:02B5 -  -  -  -  
   25 00:02B5 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:02B5 CD AC 02 00 		call 	ALULongReference
   27 00:02B9 CB F1 -  -  		set 	CIsByteReference,c
   28 00:02BB C9 -  -  -  		ret
   29 00:02BC -  -  -  -  
   30 00:02BC -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:02BC CD 59 03 00 
              78 B1 C2 2A 
              02 00 C3 CA 
              02 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:02CA -  -  -  -  _BRGAMain:		
   33 00:02CA CD D4 0B 00 		call 	Int32Add 					; address in HL'HL
   34 00:02CE CD 5F 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:02D2 C9 -  -  -  		ret
   36 00:02D3 -  -  -  -  
   37 00:02D3 -  -  -  -  ; ***************************************************************************************
   38 00:02D3 -  -  -  -  ;
   39 00:02D3 -  -  -  -  ;									Changes and Updates
   40 00:02D3 -  -  -  -  ;
   41 00:02D3 -  -  -  -  ; ***************************************************************************************
   42 00:02D3 -  -  -  -  ;
   43 00:02D3 -  -  -  -  ;		Date			Notes
   44 00:02D3 -  -  -  -  ;		==== 			=====
   45 00:02D3 -  -  -  -  ;
   46 00:02D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:02D3 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:02D3 -  -  -  -  ; ***************************************************************************************
    2 00:02D3 -  -  -  -  ; ***************************************************************************************
    3 00:02D3 -  -  -  -  ;
    4 00:02D3 -  -  -  -  ;		Name : 		compare.asm
    5 00:02D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02D3 -  -  -  -  ;		Reviewed :	No
    8 00:02D3 -  -  -  -  ;		Purpose :	Comparison code
    9 00:02D3 -  -  -  -  ;
   10 00:02D3 -  -  -  -  ; ***************************************************************************************
   11 00:02D3 -  -  -  -  ; ***************************************************************************************
   12 00:02D3 -  -  -  -  
   13 00:02D3 -  -  -  -  #macro compare_equals(n)
   14 00:02D3             		call 	CompareBaseCode
   15 00:02D3             		cp 		n
   16 00:02D3             		jr 		z,UnaryInt32True
   17 00:02D3             		jr 		UnaryInt32False
   18 00:02D3             #endmacro
   19 00:02D3 -  -  -  -  
   20 00:02D3 -  -  -  -  #macro compare_not_equals(n)
   21 00:02D3             		call 	CompareBaseCode
   22 00:02D3             		cp 		n
   23 00:02D3             		jr 		nz,UnaryInt32True
   24 00:02D3             		jr 		UnaryInt32False
   25 00:02D3             #endmacro
   26 00:02D3 -  -  -  -  
   27 00:02D3 -  -  -  -  ; ***************************************************************************************
   28 00:02D3 -  -  -  -  ;
   29 00:02D3 -  -  -  -  ; 								Return True/False
   30 00:02D3 -  -  -  -  ;
   31 00:02D3 -  -  -  -  ; ***************************************************************************************
   32 00:02D3 -  -  -  -  
   33 00:02D3 -  -  -  -  UnaryInt32True:	
   34 00:02D3 3E FF -  -  		ld 		a,255
   35 00:02D5 18 01 -  -  		jr 		_Int32Logical
   36 00:02D7 -  -  -  -  UnaryInt32False: 
   37 00:02D7 AF -  -  -  		xor 	a
   38 00:02D8 -  -  -  -  _Int32Logical:
   39 00:02D8 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:02D9 67 -  -  -  		ld 		h,a
   41 00:02DA D9 -  -  -  		exx
   42 00:02DB 6F -  -  -  		ld 		l,a
   43 00:02DC 67 -  -  -  		ld 		h,a
   44 00:02DD D9 -  -  -  		exx
   45 00:02DE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:02E0 C9 -  -  -  		ret
   47 00:02E1 -  -  -  -  
   48 00:02E1 -  -  -  -  ; ***************************************************************************************
   49 00:02E1 -  -  -  -  ;
   50 00:02E1 -  -  -  -  ; 										> = < (compare == value)
   51 00:02E1 -  -  -  -  ;
   52 00:02E1 -  -  -  -  ; ***************************************************************************************
   53 00:02E1 -  -  -  -  
   54 00:02E1 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:02E1 CD 1D 03 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:02EB -  -  -  -  
   57 00:02EB -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:02EB CD 1D 03 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:02F5 -  -  -  -  
   60 00:02F5 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:02F5 CD 1D 03 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:02FF -  -  -  -  
   63 00:02FF -  -  -  -  ; ***************************************************************************************
   64 00:02FF -  -  -  -  ;
   65 00:02FF -  -  -  -  ; 										> = < (compare <> value)
   66 00:02FF -  -  -  -  ;
   67 00:02FF -  -  -  -  ; ***************************************************************************************
   68 00:02FF -  -  -  -  
   69 00:02FF -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:02FF CD 1D 03 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0309 -  -  -  -  
   72 00:0309 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0309 CD 1D 03 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:0313 -  -  -  -  
   75 00:0313 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:0313 CD 1D 03 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:031D -  -  -  -  
   78 00:031D -  -  -  -  ; ***************************************************************************************
   79 00:031D -  -  -  -  ;
   80 00:031D -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:031D -  -  -  -  ;
   82 00:031D -  -  -  -  ; ***************************************************************************************
   83 00:031D -  -  -  -  
   84 00:031D -  -  -  -  CompareBaseCode:
   85 00:031D CD 59 03 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0321 -  -  -  -  
   87 00:0321 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0322 A1 -  -  -  		and 	c
   89 00:0323 CB 47 -  -  		bit 	CIsString,a 
   90 00:0325 C2 37 03 00 		jp 		nz,StringCompare
   91 00:0329 -  -  -  -  
   92 00:0329 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:032A B1 -  -  -  		or 		c
   94 00:032B CB 47 -  -  		bit 	CIsString,a 
   95 00:032D CA 14 0C 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0331 -  -  -  -  
   97 00:0331 3E 02 C3 CC 
              01 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:0337 -  -  -  -  ;
   99 00:0337 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:0337 -  -  -  -  ;
  101 00:0337 -  -  -  -  StringCompare:
  102 00:0337 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:0338 BE -  -  -  		cp 		(hl)
  104 00:0339 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:033B 20 08 -  -  		jr 		nz,_SCLess
  106 00:033D 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:033E 23 -  -  -  		inc 	hl
  108 00:033F FE 20 -  -  		cp 		' '
  109 00:0341 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0343 AF -  -  -  		xor 	a 							; return 0.
  111 00:0344 C9 -  -  -  		ret
  112 00:0345 -  -  -  -  
  113 00:0345 -  -  -  -  _SCLess:
  114 00:0345 3E FF -  -  		ld 		a,$FF
  115 00:0347 C9 -  -  -  		ret
  116 00:0348 -  -  -  -  _SCGreater:
  117 00:0348 3E 01 -  -  		ld 		a,1
  118 00:034A C9 -  -  -  		ret
  119 00:034B -  -  -  -  
  120 00:034B 3E 0E C3 CC 
              01 00 -  -  		ERR_TODO()
  121 00:0351 -  -  -  -  
  122 00:0351 -  -  -  -  ; ***************************************************************************************
  123 00:0351 -  -  -  -  ;
  124 00:0351 -  -  -  -  ;									Changes and Updates
  125 00:0351 -  -  -  -  ;
  126 00:0351 -  -  -  -  ; ***************************************************************************************
  127 00:0351 -  -  -  -  ;
  128 00:0351 -  -  -  -  ;		Date			Notes
  129 00:0351 -  -  -  -  ;		==== 			=====
  130 00:0351 -  -  -  -  ;
  131 00:0351 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0351 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0351 -  -  -  -  ; ***************************************************************************************
    2 00:0351 -  -  -  -  ; ***************************************************************************************
    3 00:0351 -  -  -  -  ;
    4 00:0351 -  -  -  -  ;		Name : 		utility.asm
    5 00:0351 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0351 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0351 -  -  -  -  ;		Reviewed :	No
    8 00:0351 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0351 -  -  -  -  ;
   10 00:0351 -  -  -  -  ; ***************************************************************************************
   11 00:0351 -  -  -  -  ; ***************************************************************************************
   12 00:0351 -  -  -  -  
   13 00:0351 -  -  -  -  ; ***************************************************************************************
   14 00:0351 -  -  -  -  ;
   15 00:0351 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0351 -  -  -  -  ;
   17 00:0351 -  -  -  -  ; ***************************************************************************************
   18 00:0351 -  -  -  -  
   19 00:0351 -  -  -  -  SwapHLDE:
   20 00:0351 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0352 D9 -  -  -  			exx
   22 00:0353 EB -  -  -  			ex 		de,hl
   23 00:0354 D9 -  -  -  			exx
   24 00:0355 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:0356 41 -  -  -  			ld 		b,c
   26 00:0357 4F -  -  -  			ld 		c,a
   27 00:0358 C9 -  -  -  			ret
   28 00:0359 -  -  -  -  
   29 00:0359 -  -  -  -  ; ***************************************************************************************
   30 00:0359 -  -  -  -  ;
   31 00:0359 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:0359 -  -  -  -  ;
   33 00:0359 -  -  -  -  ; ***************************************************************************************
   34 00:0359 -  -  -  -  
   35 00:0359 -  -  -  -  DereferenceBoth:
   36 00:0359 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:035B C4 32 04 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:035F CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0361 C8 -  -  -  			ret 	z
   40 00:0362 CD 51 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:0366 CD 32 04 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:036A CD 51 03 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:036E C9 -  -  -  			ret
   44 00:036F -  -  -  -  
   45 00:036F -  -  -  -  ; ***************************************************************************************
   46 00:036F -  -  -  -  ;
   47 00:036F -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:036F -  -  -  -  ;
   49 00:036F -  -  -  -  ; ***************************************************************************************
   50 00:036F -  -  -  -  
   51 00:036F -  -  -  -  NegateHLHL:	
   52 00:036F CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0371 C2 2A 02 00 			jp 		nz,TypeMismatch
   54 00:0375 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0377 C4 32 04 00 			call 	nz,Dereference 			; if required.
   56 00:037B CD 3E 0C 00 			call 	Int32Negate
   57 00:037F C9 -  -  -  			ret
Listing for file "_build.asm"
   27 00:0380 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0380 -  -  -  -  ; ***************************************************************************************
    2 00:0380 -  -  -  -  ; ***************************************************************************************
    3 00:0380 -  -  -  -  ;
    4 00:0380 -  -  -  -  ;		Name : 		expression.asm
    5 00:0380 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0380 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0380 -  -  -  -  ;		Reviewed :	None
    8 00:0380 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0380 -  -  -  -  ;
   10 00:0380 -  -  -  -  ; ***************************************************************************************
   11 00:0380 -  -  -  -  ; ***************************************************************************************
   12 00:0380 -  -  -  -  
   13 00:0380 -  -  -  -  ; ***************************************************************************************
   14 00:0380 -  -  -  -  ;
   15 00:0380 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0380 -  -  -  -  ;
   17 00:0380 -  -  -  -  ; ***************************************************************************************
   18 00:0380 -  -  -  -  
   19 00:0380 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0380 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0381 -  -  -  -  EvaluateAtPrecedence:
   22 00:0381 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0382 -  -  -  -  		;
   24 00:0382 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0382 -  -  -  -  		;
   26 00:0382 CD 8E 04 00 		call 	EvaluateTerm 				; get term
   27 00:0386 -  -  -  -  		;
   28 00:0386 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0386 -  -  -  -  		;
   30 00:0386 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0387 -  -  -  -  _EAPLoop:
   32 00:0387 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:038A FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:038C D8 -  -  -  		ret 	c
   35 00:038D FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:038F D0 -  -  -  		ret 	nc
   37 00:0390 -  -  -  -  		;
   38 00:0390 -  -  -  -  		; 		Get the precedence.
   39 00:0390 -  -  -  -  		;
   40 00:0390 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0391 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0393 21 40 08 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0397 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:0398 6F -  -  -  		ld 		l,a
   45 00:0399 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:039A E1 -  -  -  		pop 	hl 							; restore HL
   47 00:039B -  -  -  -  		;
   48 00:039B -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:039B -  -  -  -  		;
   50 00:039B 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:039C BB -  -  -  		cp 		e
   52 00:039D D0 -  -  -  		ret 	nc
   53 00:039E -  -  -  -  
   54 00:039E -  -  -  -  		;
   55 00:039E -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:039E -  -  -  -  		;
   57 00:039E D5 -  -  -  		push 	de 							; save precedence information.
   58 00:039F -  -  -  -  		;
   59 00:039F DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:03A2 F5 -  -  -  		push 	af
   61 00:03A3 -  -  -  -  		;
   62 00:03A3 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:03A4 D9 -  -  -  		exx 								; save HL'
   64 00:03A5 E5 -  -  -  		push 	hl
   65 00:03A6 D9 -  -  -  		exx 								
   66 00:03A7 E5 -  -  -  		push 	hl 							; save HL
   67 00:03A8 -  -  -  -  		;
   68 00:03A8 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:03AA -  -  -  -  		;
   70 00:03AA -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:03AA -  -  -  -  		;
   72 00:03AA 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:03AB CD 81 03 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:03AF -  -  -  -  		;
   75 00:03AF -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:03AF -  -  -  -  		;
   77 00:03AF 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:03B0 -  -  -  -  
   79 00:03B0 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:03B1 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:03B2 D9 -  -  -  		exx
   82 00:03B3 EB -  -  -  		ex 		de,hl
   83 00:03B4 E1 -  -  -  		pop 	hl
   84 00:03B5 D9 -  -  -  		exx
   85 00:03B6 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:03B7 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:03B8 -  -  -  -  		;
   88 00:03B8 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:03B8 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:03B8 -  -  -  -  		;
   91 00:03B8 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:03B9 -  -  -  -  		;
   93 00:03B9 -  -  -  -  		; 		Call the binary operator in A.
   94 00:03B9 -  -  -  -  		;
   95 00:03B9 D5 -  -  -  		push 	de
   96 00:03BA E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:03BB E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 09 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:03D0 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:03D1 D1 -  -  -  		pop 	de 							; restore DE
  100 00:03D2 CD 58 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:03D6 -  -  -  -  		;
  102 00:03D6 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:03D7 -  -  -  -  		;
  104 00:03D7 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:03D9 -  -  -  -  
  106 00:03D9 -  -  -  -  ; ***************************************************************************************
  107 00:03D9 -  -  -  -  ;
  108 00:03D9 -  -  -  -  ;									Changes and Updates
  109 00:03D9 -  -  -  -  ;
  110 00:03D9 -  -  -  -  ; ***************************************************************************************
  111 00:03D9 -  -  -  -  ;
  112 00:03D9 -  -  -  -  ;		Date			Notes
  113 00:03D9 -  -  -  -  ;		==== 			=====
  114 00:03D9 -  -  -  -  ;
  115 00:03D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:03D9 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:03D9 -  -  -  -  ; ***************************************************************************************
    2 00:03D9 -  -  -  -  ; ***************************************************************************************
    3 00:03D9 -  -  -  -  ;
    4 00:03D9 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:03D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03D9 -  -  -  -  ;		Reviewed :	No
    8 00:03D9 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:03D9 -  -  -  -  ;
   10 00:03D9 -  -  -  -  ; ***************************************************************************************
   11 00:03D9 -  -  -  -  ; ***************************************************************************************
   12 00:03D9 -  -  -  -  
   13 00:03D9 -  -  -  -  ; ***************************************************************************************
   14 00:03D9 -  -  -  -  ;
   15 00:03D9 -  -  -  -  ; 								Evaluate an integer term
   16 00:03D9 -  -  -  -  ;
   17 00:03D9 -  -  -  -  ; ***************************************************************************************
   18 00:03D9 -  -  -  -  
   19 00:03D9 -  -  -  -  EvaluateIntegerTerm:
   20 00:03D9 CD 8E 04 00 		call 	EvaluateTerm
   21 00:03DD CD 32 04 00 		call 	DeReference
   22 00:03E1 CB 41 -  -  		bit 	CIsString,c
   23 00:03E3 C8 -  -  -  		ret 	z
   24 00:03E4 C3 2A 02 00 		jp 		TypeMismatch
   25 00:03E8 -  -  -  -  
   26 00:03E8 -  -  -  -  ; ***************************************************************************************
   27 00:03E8 -  -  -  -  ;
   28 00:03E8 -  -  -  -  ; 								Evaluate a string term
   29 00:03E8 -  -  -  -  ;
   30 00:03E8 -  -  -  -  ; ***************************************************************************************
   31 00:03E8 -  -  -  -  
   32 00:03E8 -  -  -  -  EvaluateStringTerm:
   33 00:03E8 CD 8E 04 00 		call 	EvaluateTerm
   34 00:03EC CD 32 04 00 		call 	DeReference
   35 00:03F0 CB 41 -  -  		bit 	CIsString,c
   36 00:03F2 C0 -  -  -  		ret 	nz
   37 00:03F3 C3 2A 02 00 		jp 		TypeMismatch
   38 00:03F7 -  -  -  -  
   39 00:03F7 -  -  -  -  ; ***************************************************************************************
   40 00:03F7 -  -  -  -  ;
   41 00:03F7 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:03F7 -  -  -  -  ;
   43 00:03F7 -  -  -  -  ; ***************************************************************************************
   44 00:03F7 -  -  -  -  
   45 00:03F7 -  -  -  -  EvaluateValue:
   46 00:03F7 CD 80 03 00 		call 	EvaluateAtPrecedence0
   47 00:03FB C3 32 04 00 		jp 		Dereference
   48 00:03FF -  -  -  -  
   49 00:03FF -  -  -  -  ; ***************************************************************************************
   50 00:03FF -  -  -  -  ;
   51 00:03FF -  -  -  -  ; 									Evaluate a number
   52 00:03FF -  -  -  -  ;
   53 00:03FF -  -  -  -  ; ***************************************************************************************
   54 00:03FF -  -  -  -  
   55 00:03FF -  -  -  -  EvaluateInteger:
   56 00:03FF CD F7 03 00 		call 	EvaluateValue
   57 00:0403 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:0405 C8 -  -  -  		ret 	z
   59 00:0406 C3 2A 02 00 		jp 		TypeMismatch
   60 00:040A -  -  -  -  
   61 00:040A -  -  -  -  ; ***************************************************************************************
   62 00:040A -  -  -  -  ;
   63 00:040A -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:040A -  -  -  -  ;
   65 00:040A -  -  -  -  ; ***************************************************************************************
   66 00:040A -  -  -  -  
   67 00:040A -  -  -  -  Evaluate8BitInteger:
   68 00:040A CD FF 03 00 		call 	EvaluateInteger
   69 00:040E D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:040F 7C -  -  -  		ld 		a,h
   71 00:0410 B5 -  -  -  		or 		l
   72 00:0411 D9 -  -  -  		exx 	
   73 00:0412 B4 -  -  -  		or 		h
   74 00:0413 C2 30 02 00 		jp 		nz,BadValue
   75 00:0417 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:0418 C9 -  -  -  		ret
   77 00:0419 -  -  -  -  		
   78 00:0419 -  -  -  -  ; ***************************************************************************************
   79 00:0419 -  -  -  -  ;
   80 00:0419 -  -  -  -  ; 									Evaluate a string
   81 00:0419 -  -  -  -  ;
   82 00:0419 -  -  -  -  ; ***************************************************************************************
   83 00:0419 -  -  -  -  
   84 00:0419 -  -  -  -  EvaluateStringOnly:
   85 00:0419 CD F7 03 00 		call 	EvaluateValue
   86 00:041D CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:041F CA 2A 02 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:0423 C9 -  -  -  		ret
   89 00:0424 -  -  -  -  
   90 00:0424 -  -  -  -  ; ***************************************************************************************
   91 00:0424 -  -  -  -  ;
   92 00:0424 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:0424 -  -  -  -  ;
   94 00:0424 -  -  -  -  ; ***************************************************************************************
   95 00:0424 -  -  -  -  
   96 00:0424 -  -  -  -  Return8BitConstant:
   97 00:0424 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:0428 6F -  -  -  		ld 		l,a
   99 00:0429 -  -  -  -  Return16BitConstant:
  100 00:0429 D9 -  -  -  		exx 								; clear HL'
  101 00:042A 21 00 00 00 		ld 		hl,0
  102 00:042E D9 -  -  -  		exx
  103 00:042F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0431 C9 -  -  -  		ret
  105 00:0432 -  -  -  -  
  106 00:0432 -  -  -  -  ; ***************************************************************************************
  107 00:0432 -  -  -  -  ;
  108 00:0432 -  -  -  -  ;									Changes and Updates
  109 00:0432 -  -  -  -  ;
  110 00:0432 -  -  -  -  ; ***************************************************************************************
  111 00:0432 -  -  -  -  ;
  112 00:0432 -  -  -  -  ;		Date			Notes
  113 00:0432 -  -  -  -  ;		==== 			=====
  114 00:0432 -  -  -  -  ;
  115 00:0432 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:0432 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0432 -  -  -  -  ; ***************************************************************************************
    2 00:0432 -  -  -  -  ; ***************************************************************************************
    3 00:0432 -  -  -  -  ;
    4 00:0432 -  -  -  -  ;		Name : 		reference.asm
    5 00:0432 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0432 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0432 -  -  -  -  ;		Reviewed :	No
    8 00:0432 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0432 -  -  -  -  ;
   10 00:0432 -  -  -  -  ; ***************************************************************************************
   11 00:0432 -  -  -  -  ; ***************************************************************************************
   12 00:0432 -  -  -  -  
   13 00:0432 -  -  -  -  ; ***************************************************************************************
   14 00:0432 -  -  -  -  ;
   15 00:0432 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0432 -  -  -  -  ;
   17 00:0432 -  -  -  -  ; ***************************************************************************************
   18 00:0432 -  -  -  -  
   19 00:0432 -  -  -  -  Dereference:
   20 00:0432 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:0434 C8 -  -  -  		ret 	z
   22 00:0435 -  -  -  -  
   23 00:0435 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:0437 -  -  -  -  		
   25 00:0437 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0439 20 1E -  -  		jr 		nz,_DRInternal
   27 00:043B -  -  -  -  
   28 00:043B CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:043D 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:043F -  -  -  -  
   31 00:043F E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0440 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0442 D9 -  -  -  		exx
   34 00:0443 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:0444 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:0445 23 -  -  -  		inc  	hl
   37 00:0446 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:0448 D9 -  -  -  		exx 								; fix back
   39 00:0449 C9 -  -  -  		ret
   40 00:044A -  -  -  -  
   41 00:044A -  -  -  -  _DeRefByte:		
   42 00:044A 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:044B 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:044F 6F -  -  -  		ld	 	l,a
   45 00:0450 D9 -  -  -  		exx
   46 00:0451 21 00 00 00 		ld 		hl,$0000
   47 00:0455 D9 -  -  -  		exx
   48 00:0456 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:0458 C9 -  -  -  		ret
   50 00:0459 -  -  -  -  
   51 00:0459 -  -  -  -  _DRInternal:
   52 00:0459 3E 04 C3 CC 
              01 00 -  -  		ERR_DISABLED
   53 00:045F -  -  -  -  
   54 00:045F -  -  -  -  ; ***************************************************************************************
   55 00:045F -  -  -  -  ;
   56 00:045F -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:045F -  -  -  -  ;
   58 00:045F -  -  -  -  ; ***************************************************************************************
   59 00:045F -  -  -  -  
   60 00:045F -  -  -  -  DRConvertHLHLToAddress:
   61 00:045F -  -  -  -  		#ifdef EZ80
   62 00:045F 22 5E 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0463 D9 -  -  -  		exx
   64 00:0464 22 60 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:0468 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:046C D9 -  -  -  		exx
   67 00:046D 2A 5E 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0471 -  -  -  -  		#endif
   69 00:0471 C9 -  -  -  		ret
   70 00:0472 -  -  -  -  
   71 00:0472 -  -  -  -  ; ***************************************************************************************
   72 00:0472 -  -  -  -  ;
   73 00:0472 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0472 -  -  -  -  ;
   75 00:0472 -  -  -  -  ; ***************************************************************************************
   76 00:0472 -  -  -  -  
   77 00:0472 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0472 -  -  -  -  		#ifdef EZ80
   79 00:0472 22 5E 00 00 		ld 		(AConvert),hl
   80 00:0476 21 00 00 00 		ld 		hl,$0000
   81 00:047A 22 61 00 00 		ld 		(AConvert+3),hl
   82 00:047E D9 -  -  -  		exx
   83 00:047F 2A 60 00 00 		ld 		hl,(AConvert+2)
   84 00:0483 D9 -  -  -  		exx
   85 00:0484 AF -  -  -  		xor 	a
   86 00:0485 32 60 00 00 		ld 		(AConvert+2),a
   87 00:0489 2A 5E 00 00 		ld 		hl,(AConvert)
   88 00:048D -  -  -  -  		#endif
   89 00:048D C9 -  -  -  		ret
   90 00:048E -  -  -  -  
   91 00:048E -  -  -  -  ; ***************************************************************************************
   92 00:048E -  -  -  -  ;
   93 00:048E -  -  -  -  ;									Changes and Updates
   94 00:048E -  -  -  -  ;
   95 00:048E -  -  -  -  ; ***************************************************************************************
   96 00:048E -  -  -  -  ;
   97 00:048E -  -  -  -  ;		Date			Notes
   98 00:048E -  -  -  -  ;		==== 			=====
   99 00:048E -  -  -  -  ;
  100 00:048E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:048E -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:048E -  -  -  -  ; ***************************************************************************************
    2 00:048E -  -  -  -  ; ***************************************************************************************
    3 00:048E -  -  -  -  ;
    4 00:048E -  -  -  -  ;		Name : 		term.asm
    5 00:048E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:048E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:048E -  -  -  -  ;		Reviewed :	No
    8 00:048E -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:048E -  -  -  -  ;
   10 00:048E -  -  -  -  ; ***************************************************************************************
   11 00:048E -  -  -  -  ; ***************************************************************************************
   12 00:048E -  -  -  -  
   13 00:048E -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:048E             		add_hlhl_16
   15 00:048E             		exx
   16 00:048E             		adc_hlhl_16
   17 00:048E             		exx
   18 00:048E             #endmacro
   19 00:048E -  -  -  -  
   20 00:048E -  -  -  -  ; ***************************************************************************************
   21 00:048E -  -  -  -  ;
   22 00:048E -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:048E -  -  -  -  ;
   24 00:048E -  -  -  -  ; ***************************************************************************************
   25 00:048E -  -  -  -  ;
   26 00:048E -  -  -  -  ; 		Terms can be:
   27 00:048E -  -  -  -  ;
   28 00:048E -  -  -  -  ;			<integer> 			42 						not negative
   29 00:048E -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:048E -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:048E -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:048E -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:048E -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:048E -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:048E -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:048E -  -  -  -  ; 														reference of some sort.
   37 00:048E -  -  -  -  ;
   38 00:048E -  -  -  -  ; ***************************************************************************************
   39 00:048E -  -  -  -  
   40 00:048E -  -  -  -  EvaluateTerm:		
   41 00:048E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0490 D9 -  -  -  		exx
   43 00:0491 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0495 D9 -  -  -  		exx
   45 00:0496 21 00 00 00 		ld 		hl,$0000		
   46 00:049A -  -  -  -  		;
   47 00:049A DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:049D FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:049F 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:04A1 DA 59 05 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:04A5 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:04A7 C2 FD 04 00 		jp 		nz,_ETFoundKeyword 
   53 00:04AB -  -  -  -  		;
   54 00:04AB -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:04AB -  -  -  -  		;
   56 00:04AB -  -  -  -  _ETIntegerConstant:
   57 00:04AB -  -  -  -  		;
   58 00:04AB -  -  -  -  _ETIntegerLoop:		
   59 00:04AB DD 7E 00 -  		ld 		a,(ix+0)
   60 00:04AE E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:04B0 B5 -  -  -  		or 		l 							; or into L
   62 00:04B1 6F -  -  -  		ld 		l,a
   63 00:04B2 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:04B4 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:04B7 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:04B9 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:04BB D8 -  -  -  		ret 	c
   68 00:04BC -  -  -  -  
   69 00:04BC 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:04C3 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:04CA 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:04D1 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:04D8 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:04DF 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:04E6 -  -  -  -  
   76 00:04E6 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:04E8 -  -  -  -  		;
   78 00:04E8 -  -  -  -  		; 		Found the $3F string marker.
   79 00:04E8 -  -  -  -  		;
   80 00:04E8 -  -  -  -  _ETStringMarker:		
   81 00:04E8 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:04EA DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:04EC DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:04EE E1 -  -  -  		pop 	hl
   85 00:04EF 11 00 00 00 		ld 		de,$0000
   86 00:04F3 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:04F6 DD 19 -  -  		add 	ix,de
   88 00:04F8 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:04FA 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:04FC C9 -  -  -  		ret
   91 00:04FD -  -  -  -  		;
   92 00:04FD -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:04FD -  -  -  -  		;
   94 00:04FD -  -  -  -  _ETFoundKeyword:
   95 00:04FD DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:04FF FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0501 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0503 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0505 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0507 -  -  -  -  		;
  101 00:0507 -  -  -  -  		;		Unary group 0
  102 00:0507 -  -  -  -  		;
  103 00:0507 E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 09 
              00 19 ED 17 
              ED 53 59 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:051C C3 58 00 00 		jp 		JumpCode 					; and go there.
  105 00:0520 -  -  -  -  
  106 00:0520 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0520 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0522 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:0524 -  -  -  -  		;
  110 00:0524 -  -  -  -  		; 		- term
  111 00:0524 -  -  -  -  		;
  112 00:0524 CD D9 03 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:0528 CD 6F 03 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:052C C9 -  -  -  		ret
  115 00:052D -  -  -  -  		;
  116 00:052D -  -  -  -  		;		! ? indirection check
  117 00:052D -  -  -  -  		;
  118 00:052D -  -  -  -  _ETCheckIndirection:	
  119 00:052D FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:052F 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0531 FE 83 -  -  		cp 		KWD_PLING
  122 00:0533 C2 36 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:0537 -  -  -  -  		;
  124 00:0537 -  -  -  -  		; 		! ? indirection
  125 00:0537 -  -  -  -  		;
  126 00:0537 -  -  -  -  _ETIndirection:
  127 00:0537 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:0538 CD 8E 04 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:053C CD 32 04 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0540 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0542 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:0544 CD 5F 04 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:0548 F1 -  -  -  		pop 	af 							; get type back
  134 00:0549 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:054B CB F9 -  -  		set 	CIsReference,c
  136 00:054D FE 83 -  -  		cp 		KWD_PLING
  137 00:054F C8 -  -  -  		ret 	z
  138 00:0550 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0552 C9 -  -  -  		ret
  140 00:0553 -  -  -  -  _ETStringIndirect:
  141 00:0553 3E 02 C3 CC 
              01 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:0559 -  -  -  -  		;
  143 00:0559 -  -  -  -  		; 		Found an identifier.
  144 00:0559 -  -  -  -  		;
  145 00:0559 -  -  -  -  _ETVariable:
  146 00:0559 3E 0E C3 CC 
              01 00 -  -  		ERR_TODO
  147 00:055F 3E 0F C3 CC 
              01 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 00:0565 -  -  -  -  		
  149 00:0565 -  -  -  -  ; ***************************************************************************************
  150 00:0565 -  -  -  -  ;
  151 00:0565 -  -  -  -  ;									Changes and Updates
  152 00:0565 -  -  -  -  ;
  153 00:0565 -  -  -  -  ; ***************************************************************************************
  154 00:0565 -  -  -  -  ;
  155 00:0565 -  -  -  -  ;		Date			Notes
  156 00:0565 -  -  -  -  ;		==== 			=====
  157 00:0565 -  -  -  -  ;
  158 00:0565 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0565 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0565 -  -  -  -  ; ***************************************************************************************
    2 00:0565 -  -  -  -  ; ***************************************************************************************
    3 00:0565 -  -  -  -  ;
    4 00:0565 -  -  -  -  ;		Name : 		abs.asm
    5 00:0565 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0565 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0565 -  -  -  -  ;		Reviewed :	No
    8 00:0565 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0565 -  -  -  -  ;
   10 00:0565 -  -  -  -  ; ***************************************************************************************
   11 00:0565 -  -  -  -  ; ***************************************************************************************
   12 00:0565 -  -  -  -  
   13 00:0565 -  -  -  -  ; ***************************************************************************************
   14 00:0565 -  -  -  -  ;
   15 00:0565 -  -  -  -  ;								abs( unary function
   16 00:0565 -  -  -  -  ;
   17 00:0565 -  -  -  -  ; ***************************************************************************************
   18 00:0565 -  -  -  -  
   19 00:0565 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0565 CD D9 03 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:0569 D9 -  -  -  		exx 								; test MSB
   22 00:056A CB 7C -  -  		bit 	7,h
   23 00:056C D9 -  -  -  		exx
   24 00:056D C4 6F 03 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0571 C9 -  -  -  		ret
   26 00:0572 -  -  -  -  
   27 00:0572 -  -  -  -  ; ***************************************************************************************
   28 00:0572 -  -  -  -  ;
   29 00:0572 -  -  -  -  ;									Changes and Updates
   30 00:0572 -  -  -  -  ;
   31 00:0572 -  -  -  -  ; ***************************************************************************************
   32 00:0572 -  -  -  -  ;
   33 00:0572 -  -  -  -  ;		Date			Notes
   34 00:0572 -  -  -  -  ;		==== 			=====
   35 00:0572 -  -  -  -  ;
   36 00:0572 -  -  -  -  ; ***************************************************************************************
   37 00:0572 -  -  -  -  		
Listing for file "_build.asm"
   32 00:0572 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0572 -  -  -  -  ; ***************************************************************************************
    2 00:0572 -  -  -  -  ; ***************************************************************************************
    3 00:0572 -  -  -  -  ;
    4 00:0572 -  -  -  -  ;		Name : 		asc.asm
    5 00:0572 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0572 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0572 -  -  -  -  ;		Reviewed :	No
    8 00:0572 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0572 -  -  -  -  ;
   10 00:0572 -  -  -  -  ; ***************************************************************************************
   11 00:0572 -  -  -  -  ; ***************************************************************************************
   12 00:0572 -  -  -  -  
   13 00:0572 -  -  -  -  ; ***************************************************************************************
   14 00:0572 -  -  -  -  ;
   15 00:0572 -  -  -  -  ;								Asc unary function
   16 00:0572 -  -  -  -  ;
   17 00:0572 -  -  -  -  ; ***************************************************************************************
   18 00:0572 -  -  -  -  
   19 00:0572 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0572 CD E8 03 00 		call	EvaluateStringTerm			; Get string
   21 00:0576 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0577 C3 24 04 00 		jp 		Return8BitConstant
   23 00:057B -  -  -  -  
   24 00:057B -  -  -  -  ; ***************************************************************************************
   25 00:057B -  -  -  -  ;
   26 00:057B -  -  -  -  ;									Changes and Updates
   27 00:057B -  -  -  -  ;
   28 00:057B -  -  -  -  ; ***************************************************************************************
   29 00:057B -  -  -  -  ;
   30 00:057B -  -  -  -  ;		Date			Notes
   31 00:057B -  -  -  -  ;		==== 			=====
   32 00:057B -  -  -  -  ;
   33 00:057B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:057B -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:057B -  -  -  -  ; ***************************************************************************************
    2 00:057B -  -  -  -  ; ***************************************************************************************
    3 00:057B -  -  -  -  ;
    4 00:057B -  -  -  -  ;		Name : 		chr.asm
    5 00:057B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:057B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:057B -  -  -  -  ;		Reviewed :	No
    8 00:057B -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:057B -  -  -  -  ;
   10 00:057B -  -  -  -  ; ***************************************************************************************
   11 00:057B -  -  -  -  ; ***************************************************************************************
   12 00:057B -  -  -  -  
   13 00:057B -  -  -  -  ; ***************************************************************************************
   14 00:057B -  -  -  -  ;
   15 00:057B -  -  -  -  ;								Chr$() unary function
   16 00:057B -  -  -  -  ;
   17 00:057B -  -  -  -  ; ***************************************************************************************
   18 00:057B -  -  -  -  
   19 00:057B -  -  -  -  Unary_Chr:	;; [chr]
   20 00:057B CD A4 01 00 		call 	CheckDollar
   21 00:057F CD D9 03 00 		call 	EvaluateIntegerTerm
   22 00:0583 7D -  -  -  		ld 		a,l 						; get character
   23 00:0584 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0586 21 85 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:058A 36 0D -  -  		ld 		(hl),13
   26 00:058C 2B -  -  -  		dec 	hl
   27 00:058D 77 -  -  -  		ld 		(hl),a
   28 00:058E C9 -  -  -  		ret
   29 00:058F -  -  -  -  
   30 00:058F -  -  -  -  ; ***************************************************************************************
   31 00:058F -  -  -  -  ;
   32 00:058F -  -  -  -  ;									Changes and Updates
   33 00:058F -  -  -  -  ;
   34 00:058F -  -  -  -  ; ***************************************************************************************
   35 00:058F -  -  -  -  ;
   36 00:058F -  -  -  -  ;		Date			Notes
   37 00:058F -  -  -  -  ;		==== 			=====
   38 00:058F -  -  -  -  ;
   39 00:058F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:058F -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:058F -  -  -  -  ; ***************************************************************************************
    2 00:058F -  -  -  -  ; ***************************************************************************************
    3 00:058F -  -  -  -  ;
    4 00:058F -  -  -  -  ;		Name : 		len.asm
    5 00:058F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:058F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:058F -  -  -  -  ;		Reviewed :	None
    8 00:058F -  -  -  -  ;		Purpose :	String Length
    9 00:058F -  -  -  -  ;
   10 00:058F -  -  -  -  ; ***************************************************************************************
   11 00:058F -  -  -  -  ; ***************************************************************************************
   12 00:058F -  -  -  -  
   13 00:058F -  -  -  -  ; ***************************************************************************************
   14 00:058F -  -  -  -  ;
   15 00:058F -  -  -  -  ;								Len unary function
   16 00:058F -  -  -  -  ;
   17 00:058F -  -  -  -  ; ***************************************************************************************
   18 00:058F -  -  -  -  
   19 00:058F -  -  -  -  Unary_Len:	;; [len]
   20 00:058F CD E8 03 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0593 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0594 CD D7 02 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:0598 -  -  -  -  _ULCount:
   24 00:0598 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:0599 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:059B D8 -  -  -  		ret 	c
   27 00:059C 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:059D 13 -  -  -  		inc 	de
   29 00:059E 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:05A0 -  -  -  -  
   31 00:05A0 -  -  -  -  ; ***************************************************************************************
   32 00:05A0 -  -  -  -  ;
   33 00:05A0 -  -  -  -  ;									Changes and Updates
   34 00:05A0 -  -  -  -  ;
   35 00:05A0 -  -  -  -  ; ***************************************************************************************
   36 00:05A0 -  -  -  -  ;
   37 00:05A0 -  -  -  -  ;		Date			Notes
   38 00:05A0 -  -  -  -  ;		==== 			=====
   39 00:05A0 -  -  -  -  ;
   40 00:05A0 -  -  -  -  ; ***************************************************************************************
   41 00:05A0 -  -  -  -  		
Listing for file "_build.asm"
   35 00:05A0 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:05A0 -  -  -  -  ; ***************************************************************************************
    2 00:05A0 -  -  -  -  ; ***************************************************************************************
    3 00:05A0 -  -  -  -  ;
    4 00:05A0 -  -  -  -  ;		Name : 		not.asm
    5 00:05A0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05A0 -  -  -  -  ;		Date : 		5th June 2023
    7 00:05A0 -  -  -  -  ;		Reviewed :	No
    8 00:05A0 -  -  -  -  ;		Purpose :	Logical not
    9 00:05A0 -  -  -  -  ;
   10 00:05A0 -  -  -  -  ; ***************************************************************************************
   11 00:05A0 -  -  -  -  ; ***************************************************************************************
   12 00:05A0 -  -  -  -  
   13 00:05A0 -  -  -  -  ; ***************************************************************************************
   14 00:05A0 -  -  -  -  ;
   15 00:05A0 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:05A0 -  -  -  -  ;
   17 00:05A0 -  -  -  -  ; ***************************************************************************************
   18 00:05A0 -  -  -  -  
   19 00:05A0 -  -  -  -  Unary_Not:		;; [not]
   20 00:05A0 CD D9 03 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:05A4 CD AD 05 00 		call 	__UNSwap 					; not and swap twice.
   22 00:05A8 CD AD 05 00 		call 	__UNSwap		
   23 00:05AC C9 -  -  -  		ret
   24 00:05AD -  -  -  -  
   25 00:05AD -  -  -  -  __UNSwap:
   26 00:05AD 7C -  -  -  		ld 		a,h
   27 00:05AE 2F -  -  -  		cpl
   28 00:05AF 67 -  -  -  		ld 		h,a
   29 00:05B0 7D -  -  -  		ld 		a,l
   30 00:05B1 2F -  -  -  		cpl 	
   31 00:05B2 6F -  -  -  		ld 		l,a
   32 00:05B3 D9 -  -  -  		exx
   33 00:05B4 C9 -  -  -  		ret
   34 00:05B5 -  -  -  -  
   35 00:05B5 -  -  -  -  ; ***************************************************************************************
   36 00:05B5 -  -  -  -  ;
   37 00:05B5 -  -  -  -  ;									Changes and Updates
   38 00:05B5 -  -  -  -  ;
   39 00:05B5 -  -  -  -  ; ***************************************************************************************
   40 00:05B5 -  -  -  -  ;
   41 00:05B5 -  -  -  -  ;		Date			Notes
   42 00:05B5 -  -  -  -  ;		==== 			=====
   43 00:05B5 -  -  -  -  ;
   44 00:05B5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:05B5 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:05B5 -  -  -  -  ; ***************************************************************************************
    2 00:05B5 -  -  -  -  ; ***************************************************************************************
    3 00:05B5 -  -  -  -  ;
    4 00:05B5 -  -  -  -  ;		Name : 		page.asm
    5 00:05B5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05B5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05B5 -  -  -  -  ;		Reviewed :	No
    8 00:05B5 -  -  -  -  ;		Purpose :	Various constants.
    9 00:05B5 -  -  -  -  ;
   10 00:05B5 -  -  -  -  ; ***************************************************************************************
   11 00:05B5 -  -  -  -  ; ***************************************************************************************
   12 00:05B5 -  -  -  -  
   13 00:05B5 -  -  -  -  ; ***************************************************************************************
   14 00:05B5 -  -  -  -  ;
   15 00:05B5 -  -  -  -  ;							page unary function (no bracket)
   16 00:05B5 -  -  -  -  ;
   17 00:05B5 -  -  -  -  ; ***************************************************************************************
   18 00:05B5 -  -  -  -  
   19 00:05B5 -  -  -  -  Unary_Page:	;; [page]
   20 00:05B5 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:05B9 D9 -  -  -  			exx
   22 00:05BA 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:05BE D9 -  -  -  			exx
   24 00:05BF 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:05C1 C9 -  -  -  			ret
   26 00:05C2 -  -  -  -  
   27 00:05C2 -  -  -  -  ; ***************************************************************************************
   28 00:05C2 -  -  -  -  ;
   29 00:05C2 -  -  -  -  ;									Changes and Updates
   30 00:05C2 -  -  -  -  ;
   31 00:05C2 -  -  -  -  ; ***************************************************************************************
   32 00:05C2 -  -  -  -  ;
   33 00:05C2 -  -  -  -  ;		Date			Notes
   34 00:05C2 -  -  -  -  ;		==== 			=====
   35 00:05C2 -  -  -  -  ;
   36 00:05C2 -  -  -  -  ; ***************************************************************************************
   37 00:05C2 -  -  -  -  			
Listing for file "_build.asm"
   37 00:05C2 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:05C2 -  -  -  -  ; ***************************************************************************************
    2 00:05C2 -  -  -  -  ; ***************************************************************************************
    3 00:05C2 -  -  -  -  ;
    4 00:05C2 -  -  -  -  ;		Name : 		random.asm
    5 00:05C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05C2 -  -  -  -  ;		Reviewed :	No
    8 00:05C2 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:05C2 -  -  -  -  ;
   10 00:05C2 -  -  -  -  ; ***************************************************************************************
   11 00:05C2 -  -  -  -  ; ***************************************************************************************
   12 00:05C2 -  -  -  -  
   13 00:05C2 -  -  -  -  ; ***************************************************************************************
   14 00:05C2 -  -  -  -  ;
   15 00:05C2 -  -  -  -  ;								Random unary function
   16 00:05C2 -  -  -  -  ;
   17 00:05C2 -  -  -  -  ; ***************************************************************************************
   18 00:05C2 -  -  -  -  
   19 00:05C2 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:05C2 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:05CA CD D9 03 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:05CE D9 -  -  -  		exx 								; is it -ve
   23 00:05CF CB 7C -  -  		bit 	7,h
   24 00:05D1 D9 -  -  -  		exx
   25 00:05D2 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:05D4 22 64 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:05D8 D9 -  -  -  		exx
   28 00:05D9 22 68 00 00 		ld 		(RandomSeed+4),hl
   29 00:05DD D9 -  -  -  		exx
   30 00:05DE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:05E0 C9 -  -  -  		ret
   32 00:05E1 -  -  -  -  _URDontSeed:		
   33 00:05E1 -  -  -  -  
   34 00:05E1 CD 0D 0C 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:05E5 28 1C -  -  		jr 		z,_URFail
   36 00:05E7 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:05E8 D9 -  -  -  		exx
   38 00:05E9 E5 -  -  -  		push 	hl
   39 00:05EA D9 -  -  -  		exx
   40 00:05EB -  -  -  -  		;
   41 00:05EB CD 14 06 00 		call 	URandomHL 					; get random HL'HL
   42 00:05EF D9 -  -  -  		exx
   43 00:05F0 CD 14 06 00 		call 	URandomHL
   44 00:05F4 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:05F6 D9 -  -  -  		exx
   46 00:05F7 -  -  -  -  		;
   47 00:05F7 D9 -  -  -  		exx 								; restore range.
   48 00:05F8 D1 -  -  -  		pop 	de
   49 00:05F9 D9 -  -  -  		exx
   50 00:05FA D1 -  -  -  		pop 	de
   51 00:05FB -  -  -  -  		;
   52 00:05FB CD 9E 0A 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:05FF 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0600 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:0602 C9 -  -  -  		ret
   56 00:0603 -  -  -  -  _URFail:
   57 00:0603 3E 03 C3 CC 
              01 00 -  -  		ERR_BADVALUE
   58 00:0609 -  -  -  -  ; ***************************************************************************************
   59 00:0609 -  -  -  -  ;
   60 00:0609 -  -  -  -  ; 									Push RNG off zero
   61 00:0609 -  -  -  -  ;
   62 00:0609 -  -  -  -  ; ***************************************************************************************
   63 00:0609 -  -  -  -  
   64 00:0609 -  -  -  -  UnaryRandomInitialise:
   65 00:0609 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:060B -  -  -  -  _URILoop:
   67 00:060B C5 -  -  -  		push 	bc
   68 00:060C CD 14 06 00 		call 	URandomHL
   69 00:0610 C1 -  -  -  		pop 	bc
   70 00:0611 10 F8 -  -  		djnz 	_URILoop
   71 00:0613 C9 -  -  -  		ret
   72 00:0614 -  -  -  -  
   73 00:0614 -  -  -  -  ; ***************************************************************************************
   74 00:0614 -  -  -  -  ;
   75 00:0614 -  -  -  -  ;							16 bit random number generator
   76 00:0614 -  -  -  -  ;
   77 00:0614 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:0614 -  -  -  -  ;		Actual author unspecified.
   79 00:0614 -  -  -  -  ;
   80 00:0614 -  -  -  -  ; ***************************************************************************************
   81 00:0614 -  -  -  -  
   82 00:0614 -  -  -  -  URandomHL:
   83 00:0614 2A 64 00 00 	    ld 		hl,(RandomSeed)
   84 00:0618 ED 5B 68 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:061D 44 -  -  -  	    ld 		b,h
   86 00:061E 4D -  -  -  	    ld 		c,l
   87 00:061F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:0624 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0629 2C -  -  -  	    inc 	l
   90 00:062A 09 -  -  -  	    add 	hl,bc
   91 00:062B 22 64 00 00 	    ld 		(RandomSeed),hl
   92 00:062F 2A 68 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:0633 ED 5A -  -  	    adc 	hl,de
   94 00:0635 22 68 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0639 EB -  -  -  	    ex 		de,hl
   96 00:063A 2A 6C 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:063E ED 4B 70 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:0643 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0648 ED 43 70 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:064D 9F -  -  -  	    sbc 	a,a
  101 00:064E E6 C5 -  -  	    and 	%11000101
  102 00:0650 AD -  -  -  	    xor 	l
  103 00:0651 6F -  -  -  	    ld 		l,a
  104 00:0652 22 6C 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0656 EB -  -  -  	    ex 		de,hl
  106 00:0657 09 -  -  -  	    add 	hl,bc
  107 00:0658 C9 -  -  -  	    ret		
  108 00:0659 -  -  -  -  
  109 00:0659 -  -  -  -  ; ***************************************************************************************
  110 00:0659 -  -  -  -  ;
  111 00:0659 -  -  -  -  ;									Changes and Updates
  112 00:0659 -  -  -  -  ;
  113 00:0659 -  -  -  -  ; ***************************************************************************************
  114 00:0659 -  -  -  -  ;
  115 00:0659 -  -  -  -  ;		Date			Notes
  116 00:0659 -  -  -  -  ;		==== 			=====
  117 00:0659 -  -  -  -  ;
  118 00:0659 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:0659 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0659 -  -  -  -  ; ***************************************************************************************
    2 00:0659 -  -  -  -  ; ***************************************************************************************
    3 00:0659 -  -  -  -  ;
    4 00:0659 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0659 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0659 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0659 -  -  -  -  ;		Reviewed :	No
    8 00:0659 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0659 -  -  -  -  ;
   10 00:0659 -  -  -  -  ; ***************************************************************************************
   11 00:0659 -  -  -  -  ; ***************************************************************************************
   12 00:0659 -  -  -  -  
   13 00:0659 -  -  -  -  ; ***************************************************************************************
   14 00:0659 -  -  -  -  ;
   15 00:0659 -  -  -  -  ;								sgn unary function
   16 00:0659 -  -  -  -  ;
   17 00:0659 -  -  -  -  ; ***************************************************************************************
   18 00:0659 -  -  -  -  
   19 00:0659 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0659 CD D9 03 00 		call	EvaluateIntegerTerm 		; get value
   21 00:065D CD 0D 0C 00 		call 	Int32Zero 					; integer sgn() code
   22 00:0661 CA D7 02 00 		jp 		z,UnaryInt32False
   23 00:0665 D9 -  -  -  		exx
   24 00:0666 CB 7C -  -  		bit 	7,h
   25 00:0668 D9 -  -  -  		exx
   26 00:0669 C2 D3 02 00 		jp 		nz,UnaryInt32True
   27 00:066D 3E 01 -  -  		ld 		a,1
   28 00:066F C3 24 04 00 		jp 		Return8BitConstant
   29 00:0673 -  -  -  -  
   30 00:0673 -  -  -  -  ; ***************************************************************************************
   31 00:0673 -  -  -  -  ;
   32 00:0673 -  -  -  -  ;									Changes and Updates
   33 00:0673 -  -  -  -  ;
   34 00:0673 -  -  -  -  ; ***************************************************************************************
   35 00:0673 -  -  -  -  ;
   36 00:0673 -  -  -  -  ;		Date			Notes
   37 00:0673 -  -  -  -  ;		==== 			=====
   38 00:0673 -  -  -  -  ;
   39 00:0673 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0673 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:0673 -  -  -  -  ; ***************************************************************************************
    2 00:0673 -  -  -  -  ; ***************************************************************************************
    3 00:0673 -  -  -  -  ;
    4 00:0673 -  -  -  -  ;		Name : 		simple.asm
    5 00:0673 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0673 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0673 -  -  -  -  ;		Reviewed :	No
    8 00:0673 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:0673 -  -  -  -  ;
   10 00:0673 -  -  -  -  ; ***************************************************************************************
   11 00:0673 -  -  -  -  ; ***************************************************************************************
   12 00:0673 -  -  -  -  
   13 00:0673 -  -  -  -  ; ***************************************************************************************
   14 00:0673 -  -  -  -  ;
   15 00:0673 -  -  -  -  ;								( unary function (think about it)
   16 00:0673 -  -  -  -  ;
   17 00:0673 -  -  -  -  ; ***************************************************************************************
   18 00:0673 -  -  -  -  
   19 00:0673 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:0673 CD 80 03 00 		call 	EvaluateAtPrecedence0
   21 00:0677 C3 96 01 00 		jp  	CheckRightBracket
   22 00:067B -  -  -  -  
   23 00:067B -  -  -  -  ; ***************************************************************************************
   24 00:067B -  -  -  -  ;
   25 00:067B -  -  -  -  ;									Handle &x
   26 00:067B -  -  -  -  ;
   27 00:067B -  -  -  -  ; ***************************************************************************************
   28 00:067B -  -  -  -  
   29 00:067B -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:067B DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:067E E6 C0 -  -  		and 		$C0
   32 00:0680 FE 40 -  -  		cp 			$40
   33 00:0682 C2 36 02 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0686 C3 8E 04 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:068A -  -  -  -  
   36 00:068A -  -  -  -  ; ***************************************************************************************
   37 00:068A -  -  -  -  ;
   38 00:068A -  -  -  -  ;									Changes and Updates
   39 00:068A -  -  -  -  ;
   40 00:068A -  -  -  -  ; ***************************************************************************************
   41 00:068A -  -  -  -  ;
   42 00:068A -  -  -  -  ;		Date			Notes
   43 00:068A -  -  -  -  ;		==== 			=====
   44 00:068A -  -  -  -  ;
   45 00:068A -  -  -  -  ; ***************************************************************************************
   46 00:068A -  -  -  -  		
Listing for file "_build.asm"
   40 00:068A -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:068A -  -  -  -  ; ***************************************************************************************
    2 00:068A -  -  -  -  ; ***************************************************************************************
    3 00:068A -  -  -  -  ;
    4 00:068A -  -  -  -  ;		Name : 		str.asm
    5 00:068A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:068A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:068A -  -  -  -  ;		Reviewed :	No
    8 00:068A -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:068A -  -  -  -  ;
   10 00:068A -  -  -  -  ; ***************************************************************************************
   11 00:068A -  -  -  -  ; ***************************************************************************************
   12 00:068A -  -  -  -  
   13 00:068A -  -  -  -  ; ***************************************************************************************
   14 00:068A -  -  -  -  ;
   15 00:068A -  -  -  -  ;								Str$() unary function
   16 00:068A -  -  -  -  ;
   17 00:068A -  -  -  -  ; ***************************************************************************************
   18 00:068A -  -  -  -  
   19 00:068A -  -  -  -  Unary_Str:	;; [str]
   20 00:068A CD A4 01 00 		call 	CheckDollar
   21 00:068E CD D9 03 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:0692 01 74 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:0696 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:0698 CD 55 0C 00 		call 	Int32ToString 				
   25 00:069C 21 74 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:06A0 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:06A2 C9 -  -  -  		ret
   28 00:06A3 -  -  -  -  
   29 00:06A3 -  -  -  -  ; ***************************************************************************************
   30 00:06A3 -  -  -  -  ;
   31 00:06A3 -  -  -  -  ;									Changes and Updates
   32 00:06A3 -  -  -  -  ;
   33 00:06A3 -  -  -  -  ; ***************************************************************************************
   34 00:06A3 -  -  -  -  ;
   35 00:06A3 -  -  -  -  ;		Date			Notes
   36 00:06A3 -  -  -  -  ;		==== 			=====
   37 00:06A3 -  -  -  -  ;
   38 00:06A3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:06A3 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:06A3 -  -  -  -  ; ***************************************************************************************
    2 00:06A3 -  -  -  -  ; ***************************************************************************************
    3 00:06A3 -  -  -  -  ;
    4 00:06A3 -  -  -  -  ;		Name : 		top.asm
    5 00:06A3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06A3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06A3 -  -  -  -  ;		Reviewed :	No
    8 00:06A3 -  -  -  -  ;		Purpose :	Various constants.
    9 00:06A3 -  -  -  -  ;
   10 00:06A3 -  -  -  -  ; ***************************************************************************************
   11 00:06A3 -  -  -  -  ; ***************************************************************************************
   12 00:06A3 -  -  -  -  
   13 00:06A3 -  -  -  -  ; ***************************************************************************************
   14 00:06A3 -  -  -  -  ;
   15 00:06A3 -  -  -  -  ;							page unary function (no bracket)
   16 00:06A3 -  -  -  -  ;
   17 00:06A3 -  -  -  -  ; ***************************************************************************************
   18 00:06A3 -  -  -  -  
   19 00:06A3 -  -  -  -  Unary_Top:	;; [top]
   20 00:06A3 2A 4C 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:06A7 D9 -  -  -  			exx
   22 00:06A8 2A 4E 00 00 			ld 		hl,(TopMemory+2)
   23 00:06AC D9 -  -  -  			exx
   24 00:06AD 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:06AF C9 -  -  -  			ret
   26 00:06B0 -  -  -  -  
   27 00:06B0 -  -  -  -  ; ***************************************************************************************
   28 00:06B0 -  -  -  -  ;
   29 00:06B0 -  -  -  -  ;									Changes and Updates
   30 00:06B0 -  -  -  -  ;
   31 00:06B0 -  -  -  -  ; ***************************************************************************************
   32 00:06B0 -  -  -  -  ;
   33 00:06B0 -  -  -  -  ;		Date			Notes
   34 00:06B0 -  -  -  -  ;		==== 			=====
   35 00:06B0 -  -  -  -  ;
   36 00:06B0 -  -  -  -  ; ***************************************************************************************
   37 00:06B0 -  -  -  -  			
Listing for file "_build.asm"
   42 00:06B0 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:06B0 -  -  -  -  ; ***************************************************************************************
    2 00:06B0 -  -  -  -  ; ***************************************************************************************
    3 00:06B0 -  -  -  -  ;
    4 00:06B0 -  -  -  -  ;		Name : 		val.asm
    5 00:06B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06B0 -  -  -  -  ;		Reviewed :	No
    8 00:06B0 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:06B0 -  -  -  -  ;
   10 00:06B0 -  -  -  -  ; ***************************************************************************************
   11 00:06B0 -  -  -  -  ; ***************************************************************************************
   12 00:06B0 -  -  -  -  
   13 00:06B0 -  -  -  -  ; ***************************************************************************************
   14 00:06B0 -  -  -  -  ;
   15 00:06B0 -  -  -  -  ;								val( unary function
   16 00:06B0 -  -  -  -  ;
   17 00:06B0 -  -  -  -  ; ***************************************************************************************
   18 00:06B0 -  -  -  -  
   19 00:06B0 -  -  -  -  Unary_Val:	;; [val]
   20 00:06B0 CD E8 03 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:06B4 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:06B5 C1 -  -  -  		pop 	bc
   23 00:06B6 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:06B8 CD 33 0B 00 		call 	Int32FromString 			; get the integer part.
   25 00:06BC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:06BE C8 -  -  -  		ret		z 							; okay
   27 00:06BF 3E 03 C3 CC 
              01 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:06C5 -  -  -  -  
   29 00:06C5 -  -  -  -  ; ***************************************************************************************
   30 00:06C5 -  -  -  -  ;
   31 00:06C5 -  -  -  -  ;									Changes and Updates
   32 00:06C5 -  -  -  -  ;
   33 00:06C5 -  -  -  -  ; ***************************************************************************************
   34 00:06C5 -  -  -  -  ;
   35 00:06C5 -  -  -  -  ;		Date			Notes
   36 00:06C5 -  -  -  -  ;		==== 			=====
   37 00:06C5 -  -  -  -  ;
   38 00:06C5 -  -  -  -  ; ***************************************************************************************
   39 00:06C5 -  -  -  -  		
Listing for file "_build.asm"
   43 00:06C5 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:06C5 -  -  -  -  ; ***************************************************************************************
    2 00:06C5 -  -  -  -  ; ***************************************************************************************
    3 00:06C5 -  -  -  -  ;
    4 00:06C5 -  -  -  -  ;		Name : 		clear.asm
    5 00:06C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06C5 -  -  -  -  ;		Reviewed :	No
    8 00:06C5 -  -  -  -  ;		Purpose :	Clear command.
    9 00:06C5 -  -  -  -  ;
   10 00:06C5 -  -  -  -  ; ***************************************************************************************
   11 00:06C5 -  -  -  -  ; ***************************************************************************************
   12 00:06C5 -  -  -  -  
   13 00:06C5 -  -  -  -  ; ***************************************************************************************
   14 00:06C5 -  -  -  -  ;
   15 00:06C5 -  -  -  -  ;										CLEAR command
   16 00:06C5 -  -  -  -  ;
   17 00:06C5 -  -  -  -  ; ***************************************************************************************
   18 00:06C5 -  -  -  -  
   19 00:06C5 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:06C5 -  -  -  -  		;
   21 00:06C5 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:06C5 -  -  -  -  		;
   23 00:06C5 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:06C9 -  -  -  -  _CCFindLow:
   25 00:06C9 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:06CD 5E -  -  -  		ld 		e,(hl)		
   27 00:06CE 19 -  -  -  		add 	hl,de
   28 00:06CF 7B -  -  -  		ld 		a,e
   29 00:06D0 B7 -  -  -  		or 		a
   30 00:06D1 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:06D3 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:06D4 22 4C 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:06D8 23 -  -  -  		inc 	hl 							; one for luck
   34 00:06D9 22 48 00 00 		ld 		(LowAllocMemory),hl
   35 00:06DD -  -  -  -  		;
   36 00:06DD -  -  -  -  		; 	 		Reset the language stack
   37 00:06DD -  -  -  -  		;
   38 00:06DD 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:06E1 -  -  -  -  		;
   40 00:06E1 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:06E3 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:06E7 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:06EB 19 -  -  -  		add 	hl,de
   44 00:06EC 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:06EE 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:06F2 -  -  -  -  		;
   47 00:06F2 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:06F6 19 -  -  -  		add 	hl,de
   49 00:06F7 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:06FB -  -  -  -  		;
   51 00:06FB -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 00:06FB -  -  -  -  		;
   53 00:06FB -  -  -  -  
   54 00:06FB -  -  -  -  		;
   55 00:06FB -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 00:06FB -  -  -  -  		;
   57 00:06FB CD 09 06 00 		call 	UnaryRandomInitialise
   58 00:06FF -  -  -  -  		;
   59 00:06FF -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 00:06FF -  -  -  -  		;
   61 00:06FF C9 -  -  -  		ret
   62 00:0700 -  -  -  -  
   63 00:0700 -  -  -  -  ; ***************************************************************************************
   64 00:0700 -  -  -  -  ;
   65 00:0700 -  -  -  -  ;									Changes and Updates
   66 00:0700 -  -  -  -  ;
   67 00:0700 -  -  -  -  ; ***************************************************************************************
   68 00:0700 -  -  -  -  ;
   69 00:0700 -  -  -  -  ;		Date			Notes
   70 00:0700 -  -  -  -  ;		==== 			=====
   71 00:0700 -  -  -  -  ;
   72 00:0700 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0700 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0700 -  -  -  -  ; ***************************************************************************************
    2 00:0700 -  -  -  -  ; ***************************************************************************************
    3 00:0700 -  -  -  -  ;
    4 00:0700 -  -  -  -  ;		Name : 		instance.asm
    5 00:0700 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0700 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0700 -  -  -  -  ;		Reviewed :	No
    8 00:0700 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0700 -  -  -  -  ;
   10 00:0700 -  -  -  -  ; ***************************************************************************************
   11 00:0700 -  -  -  -  ; ***************************************************************************************
   12 00:0700 -  -  -  -  
   13 00:0700 -  -  -  -  ; ***************************************************************************************
   14 00:0700 -  -  -  -  ;
   15 00:0700 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0700 -  -  -  -  ;
   17 00:0700 -  -  -  -  ; ***************************************************************************************
   18 00:0700 -  -  -  -  
   19 00:0700 -  -  -  -  SetCurrentInstance:
   20 00:0700 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0705 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0709 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:070E -  -  -  -  
   24 00:070E C9 -  -  -  		ret
   25 00:070F -  -  -  -  
   26 00:070F -  -  -  -  
   27 00:070F -  -  -  -  ; ***************************************************************************************
   28 00:070F -  -  -  -  ;
   29 00:070F -  -  -  -  ;									Changes and Updates
   30 00:070F -  -  -  -  ;
   31 00:070F -  -  -  -  ; ***************************************************************************************
   32 00:070F -  -  -  -  ;
   33 00:070F -  -  -  -  ;		Date			Notes
   34 00:070F -  -  -  -  ;		==== 			=====
   35 00:070F -  -  -  -  ;
   36 00:070F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:070F -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:070F -  -  -  -  ; ***************************************************************************************
    2 00:070F -  -  -  -  ; ***************************************************************************************
    3 00:070F -  -  -  -  ;
    4 00:070F -  -  -  -  ;		Name : 		new.asm
    5 00:070F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:070F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:070F -  -  -  -  ;		Reviewed :	No
    8 00:070F -  -  -  -  ;		Purpose :	New command.
    9 00:070F -  -  -  -  ;
   10 00:070F -  -  -  -  ; ***************************************************************************************
   11 00:070F -  -  -  -  ; ***************************************************************************************
   12 00:070F -  -  -  -  
   13 00:070F -  -  -  -  ; ***************************************************************************************
   14 00:070F -  -  -  -  ;
   15 00:070F -  -  -  -  ;										NEW command
   16 00:070F -  -  -  -  ;
   17 00:070F -  -  -  -  ; ***************************************************************************************
   18 00:070F -  -  -  -  
   19 00:070F -  -  -  -  Command_NEW: 	;; [new]
   20 00:070F 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0713 36 00 -  -  		ld 		(hl),0
   22 00:0715 CD C5 06 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0719 3E 00 C3 CC 
              01 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:071F -  -  -  -  
   25 00:071F -  -  -  -  ; ***************************************************************************************
   26 00:071F -  -  -  -  ;
   27 00:071F -  -  -  -  ;									Changes and Updates
   28 00:071F -  -  -  -  ;
   29 00:071F -  -  -  -  ; ***************************************************************************************
   30 00:071F -  -  -  -  ;
   31 00:071F -  -  -  -  ;		Date			Notes
   32 00:071F -  -  -  -  ;		==== 			=====
   33 00:071F -  -  -  -  ;
   34 00:071F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:071F -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:071F -  -  -  -  ; ***************************************************************************************
    2 00:071F -  -  -  -  ; ***************************************************************************************
    3 00:071F -  -  -  -  ;
    4 00:071F -  -  -  -  ;		Name : 		utility.asm
    5 00:071F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:071F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:071F -  -  -  -  ;		Reviewed :	No
    8 00:071F -  -  -  -  ;		Purpose :	Utility routines
    9 00:071F -  -  -  -  ;
   10 00:071F -  -  -  -  ; ***************************************************************************************
   11 00:071F -  -  -  -  ; ***************************************************************************************
   12 00:071F -  -  -  -  
   13 00:071F -  -  -  -  ; ***************************************************************************************
   14 00:071F -  -  -  -  ;
   15 00:071F -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:071F -  -  -  -  ;
   17 00:071F -  -  -  -  ; ***************************************************************************************
   18 00:071F -  -  -  -  
   19 00:071F -  -  -  -  PrintStringAtHL:
   20 00:071F 7E -  -  -  		ld 		a,(hl)
   21 00:0720 B7 -  -  -  		or 		a
   22 00:0721 C8 -  -  -  		ret 	z
   23 00:0722 CD A4 0C 00 		call 	SYSPrintChar
   24 00:0726 23 -  -  -  		inc 	hl
   25 00:0727 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:0729 -  -  -  -  
   27 00:0729 -  -  -  -  ; ***************************************************************************************
   28 00:0729 -  -  -  -  ;
   29 00:0729 -  -  -  -  ;									Changes and Updates
   30 00:0729 -  -  -  -  ;
   31 00:0729 -  -  -  -  ; ***************************************************************************************
   32 00:0729 -  -  -  -  ;
   33 00:0729 -  -  -  -  ;		Date			Notes
   34 00:0729 -  -  -  -  ;		==== 			=====
   35 00:0729 -  -  -  -  ;
   36 00:0729 -  -  -  -  ; ***************************************************************************************
   37 00:0729 -  -  -  -  		
Listing for file "_build.asm"
   47 00:0729 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:0729 -  -  -  -  ;
    2 00:0729 -  -  -  -  ;	This file is automatically generated.
    3 00:0729 -  -  -  -  ;
    4 00:0729 -  -  -  -  ;
    5 00:0729 -  -  -  -  ;	Keywords for set 0
    6 00:0729 -  -  -  -  ;
    7 00:0729 -  -  -  -  KeywordsSet0:
    8 00:0729 01 20 -  -  	.db	1," "              ; $0080
    9 00:072B 01 20 -  -  	.db	1," "              ; $0081
   10 00:072D 01 20 -  -  	.db	1," "              ; $0082
   11 00:072F 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:0731 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:0733 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:0735 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:0737 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:073B 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:073F 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:0741 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:0743 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:0746 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:0749 01 3E -  -  	.db	1,">"              ; $008d
   22 00:074B 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:074D 01 3D -  -  	.db	1,"="              ; $008f
   24 00:074F 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:0752 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:0756 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:0759 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:075D 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:075F 01 28 -  -  	.db	1,"("              ; $0095
   30 00:0761 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:0763 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:0767 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:076B 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:076F 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:0773 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:0777 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:077B 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:077F 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:0783 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:0788 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:078D 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:0791 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:0795 01 29 -  -  	.db	1,")"              ; $00a3
   44 00:0797 01 2C -  -  	.db	1,","              ; $00a4
   45 00:0799 01 3A -  -  	.db	1,":"              ; $00a5
   46 00:079B 01 3B -  -  	.db	1,";"              ; $00a6
   47 00:079D 01 27 -  -  	.db	1,"'"              ; $00a7
   48 00:079F 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 00:07A6 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 00:07AC 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 00:07AF 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 00:07B4 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 00:07B9 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 00:07BD 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 00:07C0 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 00:07C5 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 00:07CA 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 00:07CE 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 00:07D3 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 00:07DB 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 00:07E1 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 00:07E5 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 00:07E9 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 00:07ED 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 00:07F1 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 00:07F7 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 00:07FC 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 00:0801 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 00:0806 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 00:080A 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 00:080E 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 00:0813 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 00:0818 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 00:0820 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 00:0827 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 00:082D 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 00:0831 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 00:0836 00 -  -  -  	.db	0
   79 00:0837 -  -  -  -  ;
   80 00:0837 -  -  -  -  ;	Keywords for set 1
   81 00:0837 -  -  -  -  ;
   82 00:0837 -  -  -  -  KeywordsSet1:
   83 00:0837 00 -  -  -  	.db	0
   84 00:0838 -  -  -  -  ;
   85 00:0838 -  -  -  -  ;	Keywords for set 2
   86 00:0838 -  -  -  -  ;
   87 00:0838 -  -  -  -  KeywordsSet2:
   88 00:0838 00 -  -  -  	.db	0
Listing for file "_build.asm"
   48 00:0839 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0839 -  -  -  -  ;
    2 00:0839 -  -  -  -  ;	This file is automatically generated.
    3 00:0839 -  -  -  -  ;
    4 00:0839 00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:0840 -  -  -  -  PrecedenceTable:
    6 00:0840 06 -  -  -  	.db	6	; $0083 !
    7 00:0841 06 -  -  -  	.db	6	; $0084 ?
    8 00:0842 05 -  -  -  	.db	5	; $0085 *
    9 00:0843 05 -  -  -  	.db	5	; $0086 /
   10 00:0844 05 -  -  -  	.db	5	; $0087 mod
   11 00:0845 05 -  -  -  	.db	5	; $0088 div
   12 00:0846 04 -  -  -  	.db	4	; $0089 +
   13 00:0847 04 -  -  -  	.db	4	; $008a -
   14 00:0848 03 -  -  -  	.db	3	; $008b >=
   15 00:0849 03 -  -  -  	.db	3	; $008c <=
   16 00:084A 03 -  -  -  	.db	3	; $008d >
   17 00:084B 03 -  -  -  	.db	3	; $008e <
   18 00:084C 03 -  -  -  	.db	3	; $008f =
   19 00:084D 03 -  -  -  	.db	3	; $0090 <>
   20 00:084E 02 -  -  -  	.db	2	; $0091 and
   21 00:084F 01 -  -  -  	.db	1	; $0092 or
   22 00:0850 01 -  -  -  	.db	1	; $0093 eor
   23 00:0851 -  -  -  -  
Listing for file "_build.asm"
   49 00:0851 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0851 -  -  -  -  ;
    2 00:0851 -  -  -  -  ;	This is automatically generated.
    3 00:0851 -  -  -  -  ;
    4 00:0851 -  -  -  -  ErrorIDTable:
    5 00:0851 91 08 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0855 97 08 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0859 A8 08 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:085D B6 08 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0861 C0 08 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0865 DA 08 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0869 EB 08 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:086D F9 08 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0871 07 09 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:0875 11 09 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:0879 26 09 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:087D 3C 09 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:0881 4A 09 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:0885 4F 09 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:0889 5C 09 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:088D 6D 09 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:0891 -  -  -  -  
   22 00:0891 -  -  -  -  ErrText_warmstart:
   23 00:0891 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:0897 -  -  -  -  ErrText_assert:
   25 00:0897 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:08A8 -  -  -  -  ErrText_badtype:
   27 00:08A8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:08B6 -  -  -  -  ErrText_badvalue:
   29 00:08B6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:08C0 -  -  -  -  ErrText_disabled:
   31 00:08C0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:08DA -  -  -  -  ErrText_divzero:
   33 00:08DA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:08EB -  -  -  -  ErrText_memory:
   35 00:08EB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:08F9 -  -  -  -  ErrText_nocomma:
   37 00:08F9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:0907 -  -  -  -  ErrText_nodollar:
   39 00:0907 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:0911 -  -  -  -  ErrText_nolbracket:
   41 00:0911 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:0926 -  -  -  -  ErrText_norbracket:
   43 00:0926 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:093C -  -  -  -  ErrText_notref:
   45 00:093C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:094A -  -  -  -  ErrText_stop:
   47 00:094A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:094F -  -  -  -  ErrText_syntax:
   49 00:094F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:095C -  -  -  -  ErrText_todo:
   51 00:095C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:096D -  -  -  -  ErrText_unknownvar:
   53 00:096D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   50 00:097E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:097E -  -  -  -  ;
    2 00:097E -  -  -  -  ;	Vectors for set 0
    3 00:097E -  -  -  -  ;
    4 00:097E -  -  -  -  VectorsSet0:
    5 00:097E E2 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0982 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0986 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:098A AC 02 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:098E B5 02 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0992 58 02 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0996 66 02 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:099A 74 02 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:099E 66 02 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:09A2 3C 02 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:09A6 4A 02 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:09AA 13 03 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:09AE 09 03 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:09B2 F5 02 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:09B6 EB 02 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:09BA E1 02 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:09BE FF 02 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:09C2 82 02 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:09C6 90 02 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:09CA 9E 02 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:09CE 7B 06 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:09D2 73 06 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:09D6 24 00 00 00 	addr(Unimplemented)              ; $0096 $
   28 00:09DA C2 05 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:09DE 8F 05 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:09E2 65 05 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:09E6 59 06 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:09EA 8A 06 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:09EE 7B 05 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:09F2 72 05 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:09F6 A0 05 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:09FA B5 05 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:09FE 24 00 00 00 	addr(Unimplemented)              ; $00a0 time
   38 00:0A02 A3 06 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0A06 B0 06 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0A0A D7 00 00 00 	addr(BadCmd_RBracket)            ; $00a3 )
   41 00:0A0E D7 00 00 00 	addr(BadCmd_Comma)               ; $00a4 ,
   42 00:0A12 DB 00 00 00 	addr(Command_Colon)              ; $00a5 :
   43 00:0A16 D7 00 00 00 	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 00:0A1A F9 00 00 00 	addr(Command_REM2)               ; $00a7 '
   45 00:0A1E 24 00 00 00 	addr(Unimplemented)              ; $00a8 repeat
   46 00:0A22 24 00 00 00 	addr(Unimplemented)              ; $00a9 until
   47 00:0A26 24 00 00 00 	addr(Unimplemented)              ; $00aa if
   48 00:0A2A D7 00 00 00 	addr(BadCmd_Then)                ; $00ab then
   49 00:0A2E 24 00 00 00 	addr(Unimplemented)              ; $00ac else
   50 00:0A32 24 00 00 00 	addr(Unimplemented)              ; $00ad for
   51 00:0A36 D7 00 00 00 	addr(BadCmd_To)                  ; $00ae to
   52 00:0A3A 24 00 00 00 	addr(Unimplemented)              ; $00af step
   53 00:0A3E 24 00 00 00 	addr(Unimplemented)              ; $00b0 next
   54 00:0A42 D7 00 00 00 	addr(BadCmd_Defproc)             ; $00b1 def
   55 00:0A46 24 00 00 00 	addr(Unimplemented)              ; $00b2 proc
   56 00:0A4A 24 00 00 00 	addr(Unimplemented)              ; $00b3 endproc
   57 00:0A4E 24 00 00 00 	addr(Unimplemented)              ; $00b4 local
   58 00:0A52 24 00 00 00 	addr(Unimplemented)              ; $00b5 dim
   59 00:0A56 F9 00 00 00 	addr(Command_REM)                ; $00b6 rem
   60 00:0A5A 24 00 00 00 	addr(Unimplemented)              ; $00b7 let
   61 00:0A5E 24 00 00 00 	addr(Unimplemented)              ; $00b8 vdu
   62 00:0A62 24 00 00 00 	addr(Unimplemented)              ; $00b9 print
   63 00:0A66 24 00 00 00 	addr(Unimplemented)              ; $00ba load
   64 00:0A6A 24 00 00 00 	addr(Unimplemented)              ; $00bb save
   65 00:0A6E 24 00 00 00 	addr(Unimplemented)              ; $00bc list
   66 00:0A72 0F 07 00 00 	addr(Command_NEW)                ; $00bd new
   67 00:0A76 16 01 00 00 	addr(Command_RUN)                ; $00be run
   68 00:0A7A 24 00 00 00 	addr(Unimplemented)              ; $00bf read
   69 00:0A7E 24 00 00 00 	addr(Unimplemented)              ; $00c0 data
   70 00:0A82 24 00 00 00 	addr(Unimplemented)              ; $00c1 restore
   71 00:0A86 C6 00 00 00 	addr(Command_ASSERT)             ; $00c2 assert
   72 00:0A8A C5 06 00 00 	addr(Command_CLEAR)              ; $00c3 clear
   73 00:0A8E DC 00 00 00 	addr(Command_END)                ; $00c4 end
   74 00:0A92 82 01 00 00 	addr(Command_STOP)               ; $00c5 stop
   75 00:0A96 -  -  -  -  ;
   76 00:0A96 -  -  -  -  ;	Vectors for set 1
   77 00:0A96 -  -  -  -  ;
   78 00:0A96 -  -  -  -  VectorsSet1:
   79 00:0A96 -  -  -  -  ;
   80 00:0A96 -  -  -  -  ;	Vectors for set 2
   81 00:0A96 -  -  -  -  ;
   82 00:0A96 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   51 00:0A96 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0A96 -  -  -  -  ; ***************************************************************************************
    2 00:0A96 -  -  -  -  ; ***************************************************************************************
    3 00:0A96 -  -  -  -  ;
    4 00:0A96 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0A96 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A96 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A96 -  -  -  -  ;		Reviewed :	No
    8 00:0A96 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0A96 -  -  -  -  ;
   10 00:0A96 -  -  -  -  ; ***************************************************************************************
   11 00:0A96 -  -  -  -  ; ***************************************************************************************
   12 00:0A96 -  -  -  -  
   13 00:0A96 -  -  -  -  ; ***************************************************************************************
   14 00:0A96 -  -  -  -  ;
   15 00:0A96 -  -  -  -  ;								Unsigned integer divide
   16 00:0A96 -  -  -  -  ;
   17 00:0A96 -  -  -  -  ; ***************************************************************************************
   18 00:0A96 -  -  -  -  
   19 00:0A96 -  -  -  -  Int32UDivide:
   20 00:0A96 37 -  -  -  		scf
   21 00:0A97 C3 DB 0A 00 		jp 		_I32UnsignedDivide		
   22 00:0A9B -  -  -  -  
   23 00:0A9B -  -  -  -  ; ***************************************************************************************
   24 00:0A9B -  -  -  -  ;
   25 00:0A9B -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0A9B -  -  -  -  ;
   27 00:0A9B -  -  -  -  ; ***************************************************************************************
   28 00:0A9B -  -  -  -  
   29 00:0A9B -  -  -  -  Int32SDivide:
   30 00:0A9B 37 -  -  -  		scf
   31 00:0A9C 18 01 -  -  		jr 		_I32SDivide
   32 00:0A9E -  -  -  -  Int32Modulus:
   33 00:0A9E AF -  -  -  		xor 	a
   34 00:0A9F -  -  -  -  _I32SDivide:
   35 00:0A9F 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0AA0 F5 -  -  -  		push 	af
   37 00:0AA1 08 -  -  -  		ex 		af,af'
   38 00:0AA2 -  -  -  -  
   39 00:0AA2 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0AA3 D9 -  -  -  		exx
   41 00:0AA4 D5 -  -  -  		push 	de
   42 00:0AA5 D9 -  -  -  		exx
   43 00:0AA6 -  -  -  -  
   44 00:0AA6 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0AA7 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0AA8 CD C8 0A 00 		call 	_I32CheckHLSignSwap
   47 00:0AAC CD C8 0A 00 		call 	_I32CheckHLSignSwap
   48 00:0AB0 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0AB1 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0AB2 F5 -  -  -  		push 	af
   51 00:0AB3 CD DB 0A 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0AB7 F1 -  -  -  		pop 	af 							; get function back
   53 00:0AB8 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0ABA 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0ABB CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0ABD C4 3E 0C 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0AC1 -  -  -  -  _I32SDExit:
   58 00:0AC1 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0AC2 D1 -  -  -  		pop 	de
   60 00:0AC3 D9 -  -  -  		exx
   61 00:0AC4 D1 -  -  -  		pop 	de
   62 00:0AC5 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0AC6 08 -  -  -  		ex 		af,af'
   64 00:0AC7 C9 -  -  -  		ret
   65 00:0AC8 -  -  -  -  
   66 00:0AC8 -  -  -  -  
   67 00:0AC8 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0AC8 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0AC9 CB 7C -  -  		bit 	7,h
   70 00:0ACB D9 -  -  -  		exx
   71 00:0ACC 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0ACE -  -  -  -  		;
   73 00:0ACE C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0AD0 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0AD1 CD 3E 0C 00 		call 	Int32Negate 				
   76 00:0AD5 F1 -  -  -  		pop 	af
   77 00:0AD6 -  -  -  -  _I32CHSPositive:
   78 00:0AD6 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0AD7 EB -  -  -  		ex 		de,hl
   80 00:0AD8 D9 -  -  -  		exx		
   81 00:0AD9 EB -  -  -  		ex 		de,hl
   82 00:0ADA C9 -  -  -  		ret
   83 00:0ADB -  -  -  -  
   84 00:0ADB -  -  -  -  ; ***************************************************************************************
   85 00:0ADB -  -  -  -  ;
   86 00:0ADB -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0ADB -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0ADB -  -  -  -  ;
   89 00:0ADB -  -  -  -  ; ***************************************************************************************
   90 00:0ADB -  -  -  -  
   91 00:0ADB -  -  -  -  _I32UnsignedDivide:
   92 00:0ADB C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0ADC D5 -  -  -  		push 	de
   94 00:0ADD D9 -  -  -  		exx
   95 00:0ADE C5 -  -  -  		push 	bc
   96 00:0ADF D5 -  -  -  		push 	de 							
   97 00:0AE0 D9 -  -  -  		exx
   98 00:0AE1 -  -  -  -  
   99 00:0AE1 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0AE2 -  -  -  -  
  101 00:0AE2 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0AE3 B3 -  -  -  		or 		e
  103 00:0AE4 D9 -  -  -  		exx
  104 00:0AE5 B2 -  -  -  		or 		d
  105 00:0AE6 B3 -  -  -  		or 		e
  106 00:0AE7 D9 -  -  -  		exx
  107 00:0AE8 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0AEC -  -  -  -  
  109 00:0AEC -  -  -  -  
  110 00:0AEC 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0AED 4D -  -  -  		ld		c,l
  112 00:0AEE 21 00 00 00 		ld 		hl,$0000
  113 00:0AF2 D9 -  -  -  		exx
  114 00:0AF3 44 -  -  -  		ld 		b,h
  115 00:0AF4 4D -  -  -  		ld		c,l
  116 00:0AF5 21 00 00 00 		ld 		hl,$0000
  117 00:0AF9 D9 -  -  -  		exx
  118 00:0AFA -  -  -  -  
  119 00:0AFA 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0AFC -  -  -  -  _I32DivideLoop:
  121 00:0AFC F5 -  -  -  		push 	af
  122 00:0AFD -  -  -  -  
  123 00:0AFD CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0AFF CB 10 -  -  		rl 		b
  125 00:0B01 D9 -  -  -  		exx
  126 00:0B02 CB 11 -  -  		rl 		c
  127 00:0B04 CB 10 -  -  		rl 		b
  128 00:0B06 D9 -  -  -  		exx
  129 00:0B07 CB 15 -  -  		rl 		l
  130 00:0B09 CB 14 -  -  		rl 		h
  131 00:0B0B D9 -  -  -  		exx
  132 00:0B0C CB 15 -  -  		rl 		l
  133 00:0B0E CB 14 -  -  		rl 		h
  134 00:0B10 D9 -  -  -  		exx
  135 00:0B11 -  -  -  -  
  136 00:0B11 CD DC 0B 00 		call 	Int32Subtract 				; A = A - M
  137 00:0B15 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0B17 -  -  -  -  
  139 00:0B17 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0B18 18 04 -  -  		jr 		_I32Next
  141 00:0B1A -  -  -  -  
  142 00:0B1A -  -  -  -  _I32Borrow:
  143 00:0B1A CD D4 0B 00 		call 	Int32Add 					; A = A + M
  144 00:0B1E -  -  -  -  _I32Next:
  145 00:0B1E F1 -  -  -  		pop 	af
  146 00:0B1F 3D -  -  -  		dec 	a
  147 00:0B20 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0B22 -  -  -  -  
  149 00:0B22 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0B23 -  -  -  -  
  151 00:0B23 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0B24 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0B26 -  -  -  -  
  154 00:0B26 60 -  -  -  		ld  	h,b
  155 00:0B27 69 -  -  -  		ld 		l,c
  156 00:0B28 D9 -  -  -  		exx
  157 00:0B29 60 -  -  -  		ld  	h,b
  158 00:0B2A 69 -  -  -  		ld 		l,c
  159 00:0B2B D9 -  -  -  		exx
  160 00:0B2C -  -  -  -  _I32Modulus1:		
  161 00:0B2C D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0B2D D1 -  -  -  		pop 	de
  163 00:0B2E C1 -  -  -  		pop 	bc
  164 00:0B2F D9 -  -  -  		exx
  165 00:0B30 D1 -  -  -  		pop 	de
  166 00:0B31 C1 -  -  -  		pop 	bc
  167 00:0B32 C9 -  -  -  		ret
  168 00:0B33 -  -  -  -  
  169 00:0B33 -  -  -  -  ; ***************************************************************************************
  170 00:0B33 -  -  -  -  ;
  171 00:0B33 -  -  -  -  ;									Changes and Updates
  172 00:0B33 -  -  -  -  ;
  173 00:0B33 -  -  -  -  ; ***************************************************************************************
  174 00:0B33 -  -  -  -  ;
  175 00:0B33 -  -  -  -  ;		Date			Notes
  176 00:0B33 -  -  -  -  ;		==== 			=====
  177 00:0B33 -  -  -  -  ;
  178 00:0B33 -  -  -  -  ; ***************************************************************************************
  179 00:0B33 -  -  -  -  		
Listing for file "_build.asm"
   52 00:0B33 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0B33 -  -  -  -  ; ***************************************************************************************
    2 00:0B33 -  -  -  -  ; ***************************************************************************************
    3 00:0B33 -  -  -  -  ;
    4 00:0B33 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0B33 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B33 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B33 -  -  -  -  ;		Reviewed :	No
    8 00:0B33 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0B33 -  -  -  -  ;
   10 00:0B33 -  -  -  -  ; ***************************************************************************************
   11 00:0B33 -  -  -  -  ; ***************************************************************************************
   12 00:0B33 -  -  -  -  
   13 00:0B33 -  -  -  -  ; ***************************************************************************************
   14 00:0B33 -  -  -  -  ;
   15 00:0B33 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0B33 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0B33 -  -  -  -  ;
   18 00:0B33 -  -  -  -  ; ***************************************************************************************
   19 00:0B33 -  -  -  -  
   20 00:0B33 -  -  -  -  Int32FromString:
   21 00:0B33 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0B34 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0B35 D5 -  -  -  		push 	de
   24 00:0B36 D9 -  -  -  		exx
   25 00:0B37 D5 -  -  -  		push 	de
   26 00:0B38 -  -  -  -  
   27 00:0B38 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0B3C 11 00 00 00 		ld 		de,$0000
   29 00:0B40 D9 -  -  -  		exx
   30 00:0B41 21 00 00 00 		ld 		hl,$0000
   31 00:0B45 11 00 00 00 		ld 		de,$0000
   32 00:0B49 D9 -  -  -  		exx
   33 00:0B4A -  -  -  -  
   34 00:0B4A 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0B4B CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0B4D 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0B4F ED 44 -  -  		neg 		 						; fix up the base
   38 00:0B51 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0B52 -  -  -  -  		;
   40 00:0B52 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0B53 F5 -  -  -  		push 	af
   42 00:0B54 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0B56 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0B57 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0B59 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0B5A 18 01 -  -  		jr 		_I32FSMain
   47 00:0B5C -  -  -  -  _I32FSNotSigned:		
   48 00:0B5C E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0B5D -  -  -  -  		;
   50 00:0B5D -  -  -  -  		; 		Main conversion loop.
   51 00:0B5D -  -  -  -  		; 		
   52 00:0B5D -  -  -  -  _I32FSMain:		
   53 00:0B5D 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0B5E FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0B60 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0B62 D6 20 -  -  		sub 	32
   57 00:0B64 -  -  -  -  _I32FSNotLower:
   58 00:0B64 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0B66 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0B68 FE 3A -  -  		cp 		'9'+1
   61 00:0B6A 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0B6C FE 41 -  -  		cp 		'A'
   63 00:0B6E 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0B70 FE 47 -  -  		cp 		'F'+1
   65 00:0B72 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0B74 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0B76 -  -  -  -  _I32FSOkay:
   68 00:0B76 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0B78 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0B79 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0B7B 03 -  -  -  		inc 	bc 							; consume character
   72 00:0B7C D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0B7D F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0B7E CD 9B 0B 00 		call 	Int32Multiply 				; result *= base
   75 00:0B82 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0B83 5F -  -  -  		ld 		e,a
   77 00:0B84 CD D4 0B 00 		call 	Int32Add 					; and add it.
   78 00:0B88 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0B89 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0B8B -  -  -  -  
   81 00:0B8B -  -  -  -  _I32FSExit:
   82 00:0B8B F1 -  -  -  		pop 	af 							; get sign back
   83 00:0B8C FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0B8E CC 3E 0C 00 		call 	z,Int32Negate
   85 00:0B92 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0B93 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0B94 D9 -  -  -  		exx
   88 00:0B95 D1 -  -  -  		pop 	de
   89 00:0B96 D9 -  -  -  		exx
   90 00:0B97 C1 -  -  -  		pop 	bc
   91 00:0B98 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0B9A C9 -  -  -  		ret				
   93 00:0B9B -  -  -  -  
   94 00:0B9B -  -  -  -  ; ***************************************************************************************
   95 00:0B9B -  -  -  -  ;
   96 00:0B9B -  -  -  -  ;									Changes and Updates
   97 00:0B9B -  -  -  -  ;
   98 00:0B9B -  -  -  -  ; ***************************************************************************************
   99 00:0B9B -  -  -  -  ;
  100 00:0B9B -  -  -  -  ;		Date			Notes
  101 00:0B9B -  -  -  -  ;		==== 			=====
  102 00:0B9B -  -  -  -  ;
  103 00:0B9B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:0B9B -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0B9B -  -  -  -  ; ***************************************************************************************
    2 00:0B9B -  -  -  -  ; ***************************************************************************************
    3 00:0B9B -  -  -  -  ;
    4 00:0B9B -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0B9B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B9B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B9B -  -  -  -  ;		Reviewed :	No
    8 00:0B9B -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0B9B -  -  -  -  ;
   10 00:0B9B -  -  -  -  ; ***************************************************************************************
   11 00:0B9B -  -  -  -  ; ***************************************************************************************
   12 00:0B9B -  -  -  -  
   13 00:0B9B -  -  -  -  Int32Multiply:
   14 00:0B9B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0B9C D5 -  -  -  		push 	de
   16 00:0B9D 44 -  -  -  		ld 		b,h
   17 00:0B9E 4D -  -  -  		ld 		c,l
   18 00:0B9F 21 00 00 00 		ld 		hl,$0000
   19 00:0BA3 -  -  -  -  
   20 00:0BA3 D9 -  -  -  		exx
   21 00:0BA4 C5 -  -  -  		push 	bc
   22 00:0BA5 D5 -  -  -  		push 	de
   23 00:0BA6 44 -  -  -  		ld 		b,h
   24 00:0BA7 4D -  -  -  		ld 		c,l
   25 00:0BA8 21 00 00 00 		ld 		hl,$0000		
   26 00:0BAC D9 -  -  -  		exx
   27 00:0BAD -  -  -  -  
   28 00:0BAD -  -  -  -  _I32MultiplyLoop:
   29 00:0BAD CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0BAF C4 D4 0B 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0BB3 -  -  -  -  		;
   32 00:0BB3 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0BB4 CB 38 -  -  		srl 	b
   34 00:0BB6 CB 19 -  -  		rr 		c
   35 00:0BB8 D9 -  -  -  		exx
   36 00:0BB9 CB 18 -  -  		rr 		b
   37 00:0BBB CB 19 -  -  		rr 		c
   38 00:0BBD -  -  -  -  		;
   39 00:0BBD CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0BBF CB 12 -  -  		rl 		d
   41 00:0BC1 D9 -  -  -  		exx
   42 00:0BC2 CB 13 -  -  		rl 		e
   43 00:0BC4 CB 12 -  -  		rl 		d
   44 00:0BC6 -  -  -  -  
   45 00:0BC6 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0BC7 B1 -  -  -  		or 		c
   47 00:0BC8 D9 -  -  -  		exx
   48 00:0BC9 B0 -  -  -  		or 		b
   49 00:0BCA B1 -  -  -  		or 		c
   50 00:0BCB 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0BCD -  -  -  -  
   52 00:0BCD D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0BCE D1 -  -  -  		pop 	de
   54 00:0BCF C1 -  -  -  		pop 	bc
   55 00:0BD0 D9 -  -  -  		exx
   56 00:0BD1 D1 -  -  -  		pop 	de
   57 00:0BD2 C1 -  -  -  		pop 	bc
   58 00:0BD3 C9 -  -  -  		ret
   59 00:0BD4 -  -  -  -  
   60 00:0BD4 -  -  -  -  ; ***************************************************************************************
   61 00:0BD4 -  -  -  -  ;
   62 00:0BD4 -  -  -  -  ;									Changes and Updates
   63 00:0BD4 -  -  -  -  ;
   64 00:0BD4 -  -  -  -  ; ***************************************************************************************
   65 00:0BD4 -  -  -  -  ;
   66 00:0BD4 -  -  -  -  ;		Date			Notes
   67 00:0BD4 -  -  -  -  ;		==== 			=====
   68 00:0BD4 -  -  -  -  ;
   69 00:0BD4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:0BD4 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0BD4 -  -  -  -  ; ***************************************************************************************
    2 00:0BD4 -  -  -  -  ; ***************************************************************************************
    3 00:0BD4 -  -  -  -  ;
    4 00:0BD4 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0BD4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BD4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BD4 -  -  -  -  ;		Reviewed :	No
    8 00:0BD4 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0BD4 -  -  -  -  ;
   10 00:0BD4 -  -  -  -  ; ***************************************************************************************
   11 00:0BD4 -  -  -  -  ; ***************************************************************************************
   12 00:0BD4 -  -  -  -  
   13 00:0BD4 -  -  -  -  ; ***************************************************************************************
   14 00:0BD4 -  -  -  -  ;
   15 00:0BD4 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0BD4 -  -  -  -  ;
   17 00:0BD4 -  -  -  -  ; ***************************************************************************************
   18 00:0BD4 -  -  -  -  
   19 00:0BD4 -  -  -  -  Int32Add:
   20 00:0BD4 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0BD6 D9 -  -  -  		exx
   22 00:0BD7 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0BDA D9 -  -  -  		exx
   24 00:0BDB C9 -  -  -  		ret
   25 00:0BDC -  -  -  -  
   26 00:0BDC -  -  -  -  ; ***************************************************************************************
   27 00:0BDC -  -  -  -  ;
   28 00:0BDC -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0BDC -  -  -  -  ;
   30 00:0BDC -  -  -  -  ; ***************************************************************************************
   31 00:0BDC -  -  -  -  
   32 00:0BDC -  -  -  -  Int32Subtract:
   33 00:0BDC AF -  -  -  		xor 	a 							; clear carry
   34 00:0BDD 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0BE0 D9 -  -  -  		exx
   36 00:0BE1 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0BE4 D9 -  -  -  		exx
   38 00:0BE5 C9 -  -  -  		ret
   39 00:0BE6 -  -  -  -  
   40 00:0BE6 -  -  -  -  ; ***************************************************************************************
   41 00:0BE6 -  -  -  -  ;
   42 00:0BE6 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0BE6 -  -  -  -  ;
   44 00:0BE6 -  -  -  -  ; ***************************************************************************************
   45 00:0BE6 -  -  -  -  
   46 00:0BE6 -  -  -  -  Int32And:
   47 00:0BE6 D9 -  -  -  		exx
   48 00:0BE7 CD EC 0B 00 		call 	_I32AndHLDE
   49 00:0BEB D9 -  -  -  		exx
   50 00:0BEC -  -  -  -  _I32AndHLDE:		
   51 00:0BEC 7C -  -  -  		ld 		a,h
   52 00:0BED A2 -  -  -  		and 	d
   53 00:0BEE 67 -  -  -  		ld 		h,a
   54 00:0BEF 7D -  -  -  		ld 		a,l
   55 00:0BF0 A3 -  -  -  		and 	e
   56 00:0BF1 6F -  -  -  		ld 		l,a
   57 00:0BF2 C9 -  -  -  		ret
   58 00:0BF3 -  -  -  -  
   59 00:0BF3 -  -  -  -  ; ***************************************************************************************
   60 00:0BF3 -  -  -  -  ;
   61 00:0BF3 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0BF3 -  -  -  -  ;
   63 00:0BF3 -  -  -  -  ; ***************************************************************************************
   64 00:0BF3 -  -  -  -  
   65 00:0BF3 -  -  -  -  Int32Or:
   66 00:0BF3 D9 -  -  -  		exx
   67 00:0BF4 CD F9 0B 00 		call 	_I32OrHLDE
   68 00:0BF8 D9 -  -  -  		exx
   69 00:0BF9 -  -  -  -  _I32OrHLDE:		
   70 00:0BF9 7C -  -  -  		ld 		a,h
   71 00:0BFA B2 -  -  -  		or 		d
   72 00:0BFB 67 -  -  -  		ld 		h,a
   73 00:0BFC 7D -  -  -  		ld 		a,l
   74 00:0BFD B3 -  -  -  		or 		e
   75 00:0BFE 6F -  -  -  		ld 		l,a
   76 00:0BFF C9 -  -  -  		ret
   77 00:0C00 -  -  -  -  
   78 00:0C00 -  -  -  -  ; ***************************************************************************************
   79 00:0C00 -  -  -  -  ;
   80 00:0C00 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0C00 -  -  -  -  ;
   82 00:0C00 -  -  -  -  ; ***************************************************************************************
   83 00:0C00 -  -  -  -  
   84 00:0C00 -  -  -  -  Int32Xor:
   85 00:0C00 D9 -  -  -  		exx
   86 00:0C01 CD 06 0C 00 		call 	_I32XorHLDE
   87 00:0C05 D9 -  -  -  		exx
   88 00:0C06 -  -  -  -  _I32XorHLDE:		
   89 00:0C06 7C -  -  -  		ld 		a,h
   90 00:0C07 AA -  -  -  		xor 	d
   91 00:0C08 67 -  -  -  		ld 		h,a
   92 00:0C09 7D -  -  -  		ld 		a,l
   93 00:0C0A AB -  -  -  		xor 	e
   94 00:0C0B 6F -  -  -  		ld 		l,a
   95 00:0C0C C9 -  -  -  		ret
   96 00:0C0D -  -  -  -  
   97 00:0C0D -  -  -  -  ; ***************************************************************************************
   98 00:0C0D -  -  -  -  ;
   99 00:0C0D -  -  -  -  ;								 Check if HL'HL zero
  100 00:0C0D -  -  -  -  ;
  101 00:0C0D -  -  -  -  ; ***************************************************************************************
  102 00:0C0D -  -  -  -  
  103 00:0C0D -  -  -  -  Int32Zero:
  104 00:0C0D D9 -  -  -  		exx
  105 00:0C0E 7D -  -  -  		ld 		a,l
  106 00:0C0F B4 -  -  -  		or 		h
  107 00:0C10 D9 -  -  -  		exx
  108 00:0C11 B5 -  -  -  		or 		l
  109 00:0C12 B4 -  -  -  		or 		h
  110 00:0C13 C9 -  -  -  		ret
  111 00:0C14 -  -  -  -  
  112 00:0C14 -  -  -  -  ; ***************************************************************************************
  113 00:0C14 -  -  -  -  ;
  114 00:0C14 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0C14 -  -  -  -  ;
  116 00:0C14 -  -  -  -  ; ***************************************************************************************
  117 00:0C14 -  -  -  -  
  118 00:0C14 -  -  -  -  Int32Compare:
  119 00:0C14 E5 -  -  -  		push 	hl 							; save HL
  120 00:0C15 AF -  -  -  		xor 	a 							; clear carry
  121 00:0C16 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0C19 D9 -  -  -  		exx
  123 00:0C1A E5 -  -  -  		push 	hl 							; save HL'
  124 00:0C1B 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0C1E -  -  -  -  		;
  126 00:0C1E 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0C1F E2 27 0C 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0C23 78 -  -  -  		ld 		a,b
  129 00:0C24 EE 80 -  -  		xor 	$80
  130 00:0C26 47 -  -  -  		ld 		b,a
  131 00:0C27 -  -  -  -  _I32CNoOverflow:
  132 00:0C27 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0C28 B5 -  -  -  		or 		l
  134 00:0C29 D9 -  -  -  		exx 
  135 00:0C2A B4 -  -  -  		or 		h
  136 00:0C2B B5 -  -  -  		or 		l
  137 00:0C2C 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0C2E -  -  -  -  		;
  139 00:0C2E D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0C2F CB 78 -  -  		bit 	7,b
  141 00:0C31 D9 -  -  -  		exx
  142 00:0C32 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0C34 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0C36 3E FF -  -  		ld 		a,$FF
  145 00:0C38 -  -  -  -  _I32NotPos:
  146 00:0C38 D9 -  -  -  		exx
  147 00:0C39 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0C3A D9 -  -  -  		exx
  149 00:0C3B E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0C3C B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0C3D C9 -  -  -  		ret
  152 00:0C3E -  -  -  -  
  153 00:0C3E -  -  -  -  ; ***************************************************************************************
  154 00:0C3E -  -  -  -  ;
  155 00:0C3E -  -  -  -  ;										Negate HL'HL
  156 00:0C3E -  -  -  -  ;
  157 00:0C3E -  -  -  -  ; ***************************************************************************************
  158 00:0C3E -  -  -  -  
  159 00:0C3E -  -  -  -  Int32Negate:
  160 00:0C3E AF -  -  -  		xor 	a
  161 00:0C3F CD 4A 0C 00 		call 	_I32NSubtract
  162 00:0C43 D9 -  -  -  		exx
  163 00:0C44 CD 4A 0C 00 		call 	_I32NSubtract
  164 00:0C48 D9 -  -  -  		exx
  165 00:0C49 C9 -  -  -  		ret
  166 00:0C4A -  -  -  -  _I32NSubtract:
  167 00:0C4A D5 -  -  -  		push 	de
  168 00:0C4B EB -  -  -  		ex 		de,hl
  169 00:0C4C 21 00 00 00 		ld 		hl,$0000
  170 00:0C50 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0C53 D1 -  -  -  		pop 	de
  172 00:0C54 C9 -  -  -  		ret
  173 00:0C55 -  -  -  -  		
  174 00:0C55 -  -  -  -  ; ***************************************************************************************
  175 00:0C55 -  -  -  -  ;
  176 00:0C55 -  -  -  -  ;									Changes and Updates
  177 00:0C55 -  -  -  -  ;
  178 00:0C55 -  -  -  -  ; ***************************************************************************************
  179 00:0C55 -  -  -  -  ;
  180 00:0C55 -  -  -  -  ;		Date			Notes
  181 00:0C55 -  -  -  -  ;		==== 			=====
  182 00:0C55 -  -  -  -  ;
  183 00:0C55 -  -  -  -  ; ***************************************************************************************
  184 00:0C55 -  -  -  -  		
Listing for file "_build.asm"
   55 00:0C55 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0C55 -  -  -  -  ; ***************************************************************************************
    2 00:0C55 -  -  -  -  ; ***************************************************************************************
    3 00:0C55 -  -  -  -  ;
    4 00:0C55 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0C55 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C55 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C55 -  -  -  -  ;		Reviewed :	No
    8 00:0C55 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0C55 -  -  -  -  ;
   10 00:0C55 -  -  -  -  ; ***************************************************************************************
   11 00:0C55 -  -  -  -  ;
   12 00:0C55 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0C55 -  -  -  -  ;
   14 00:0C55 -  -  -  -  ; ***************************************************************************************
   15 00:0C55 -  -  -  -  
   16 00:0C55 -  -  -  -  Int32ToString:
   17 00:0C55 C5 -  -  -  		push 	bc 							; save string start
   18 00:0C56 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0C57 E5 -  -  -  		push 	hl
   20 00:0C58 11 00 00 00 		ld	 	de,$0000
   21 00:0C5C D9 -  -  -  		exx
   22 00:0C5D D5 -  -  -  		push 	de
   23 00:0C5E E5 -  -  -  		push 	hl
   24 00:0C5F 11 00 00 00 		ld 		de,$000
   25 00:0C63 D9 -  -  -  		exx
   26 00:0C64 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0C65 -  -  -  -  		;
   28 00:0C65 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0C67 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0C69 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0C6B 5F -  -  -  		ld 		e,a
   32 00:0C6C -  -  -  -  		;
   33 00:0C6C D9 -  -  -  		exx 								; is it -ve ?
   34 00:0C6D CB 7C -  -  		bit 	7,h
   35 00:0C6F D9 -  -  -  		exx
   36 00:0C70 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0C72 -  -  -  -  		;
   38 00:0C72 CD 3E 0C 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0C76 -  -  -  -  		;
   40 00:0C76 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0C78 02 -  -  -  		ld 		(bc),a
   42 00:0C79 03 -  -  -  		inc 	bc
   43 00:0C7A -  -  -  -  _I32TSNotNegative:	
   44 00:0C7A CD 89 0C 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0C7E -  -  -  -  _I32TSExit:
   46 00:0C7E 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0C80 02 -  -  -  		ld 		(bc),a 
   48 00:0C81 -  -  -  -  
   49 00:0C81 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0C82 E1 -  -  -  		pop 	hl
   51 00:0C83 D1 -  -  -  		pop 	de
   52 00:0C84 D9 -  -  -  		exx
   53 00:0C85 E1 -  -  -  		pop 	hl
   54 00:0C86 D1 -  -  -  		pop 	de
   55 00:0C87 C1 -  -  -  		pop 	bc
   56 00:0C88 C9 -  -  -  		ret
   57 00:0C89 -  -  -  -  
   58 00:0C89 -  -  -  -  _I32RecursiveConvert:
   59 00:0C89 CD 96 0A 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0C8D F5 -  -  -  		push 	af 							; save remainder
   61 00:0C8E CD 0D 0C 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0C92 C4 89 0C 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0C96 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0C97 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0C99 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0C9B C6 07 -  -  		add 	a,7
   67 00:0C9D -  -  -  -  _I32NotHex:
   68 00:0C9D C6 30 -  -  		add 	a,48
   69 00:0C9F 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0CA0 03 -  -  -  		inc 	bc
   71 00:0CA1 C9 -  -  -  		ret		
   72 00:0CA2 -  -  -  -  
   73 00:0CA2 -  -  -  -  ; ***************************************************************************************
   74 00:0CA2 -  -  -  -  ;
   75 00:0CA2 -  -  -  -  ;									Changes and Updates
   76 00:0CA2 -  -  -  -  ;
   77 00:0CA2 -  -  -  -  ; ***************************************************************************************
   78 00:0CA2 -  -  -  -  ;
   79 00:0CA2 -  -  -  -  ;		Date			Notes
   80 00:0CA2 -  -  -  -  ;		==== 			=====
   81 00:0CA2 -  -  -  -  ;
   82 00:0CA2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:0CA2 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0CA2 -  -  -  -  ; ***************************************************************************************
    2 00:0CA2 -  -  -  -  ; ***************************************************************************************
    3 00:0CA2 -  -  -  -  ;
    4 00:0CA2 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0CA2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CA2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CA2 -  -  -  -  ;		Reviewed :	No
    8 00:0CA2 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0CA2 -  -  -  -  ;
   10 00:0CA2 -  -  -  -  ; ***************************************************************************************
   11 00:0CA2 -  -  -  -  ; ***************************************************************************************
   12 00:0CA2 -  -  -  -  
   13 00:0CA2 -  -  -  -  #ifdef AQUARIUS
   14 00:0CA2             
   15 00:0CA2             ; ***************************************************************************************
   16 00:0CA2             ;
   17 00:0CA2             ;								Initialise system stuff
   18 00:0CA2             ;
   19 00:0CA2             ; ***************************************************************************************
   20 00:0CA2             
   21 00:0CA2             SYSInitialise:
   22 00:0CA2             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0CA2             	call 	SYSPrintChar
   24 00:0CA2             	ret
   25 00:0CA2             
   26 00:0CA2             ; ***************************************************************************************
   27 00:0CA2             ;
   28 00:0CA2             ;								Terminate system stuff
   29 00:0CA2             ;
   30 00:0CA2             ; ***************************************************************************************
   31 00:0CA2             
   32 00:0CA2             SYSTerminate:
   33 00:0CA2             	jr 		SYSTerminate
   34 00:0CA2             
   35 00:0CA2             ; ***************************************************************************************
   36 00:0CA2             ;
   37 00:0CA2             ;								Print A character
   38 00:0CA2             ;
   39 00:0CA2             ; ***************************************************************************************
   40 00:0CA2             
   41 00:0CA2             SYSPrintChar:
   42 00:0CA2             	push 	af 									; we stack everything including alt registers
   43 00:0CA2             	push 	bc
   44 00:0CA2             	push 	de
   45 00:0CA2             	push 	hl
   46 00:0CA2             	push 	ix
   47 00:0CA2             	push 	iy
   48 00:0CA2             	exx
   49 00:0CA2             	push 	bc
   50 00:0CA2             	push 	de
   51 00:0CA2             	push 	hl
   52 00:0CA2             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0CA2             	pop 	hl
   54 00:0CA2             	pop 	de
   55 00:0CA2             	pop 	bc
   56 00:0CA2             	exx
   57 00:0CA2             	pop 	iy
   58 00:0CA2             	pop 	ix
   59 00:0CA2             	pop 	hl
   60 00:0CA2             	pop 	de
   61 00:0CA2             	pop 	bc
   62 00:0CA2             	pop 	af
   63 00:0CA2             	ret		
   64 00:0CA2             
   65 00:0CA2             ; ***************************************************************************************
   66 00:0CA2             ;
   67 00:0CA2             ;									Print Newline
   68 00:0CA2             ;
   69 00:0CA2             ; ***************************************************************************************
   70 00:0CA2             
   71 00:0CA2             SYSPrintCRLF:
   72 00:0CA2             	push 	af
   73 00:0CA2             	ld 		a,13
   74 00:0CA2             	call 	SYSPrintChar
   75 00:0CA2             	ld 		a,10
   76 00:0CA2             	call 	SYSPrintChar
   77 00:0CA2             	pop 	af
   78 00:0CA2             	ret
   79 00:0CA2             
   80 00:0CA2             #endif
   81 00:0CA2 -  -  -  -  
   82 00:0CA2 -  -  -  -  ; ***************************************************************************************
   83 00:0CA2 -  -  -  -  ;
   84 00:0CA2 -  -  -  -  ;									Changes and Updates
   85 00:0CA2 -  -  -  -  ;
   86 00:0CA2 -  -  -  -  ; ***************************************************************************************
   87 00:0CA2 -  -  -  -  ;
   88 00:0CA2 -  -  -  -  ;		Date			Notes
   89 00:0CA2 -  -  -  -  ;		==== 			=====
   90 00:0CA2 -  -  -  -  ;
   91 00:0CA2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:0CA2 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0CA2 -  -  -  -  ; ***************************************************************************************
    2 00:0CA2 -  -  -  -  ; ***************************************************************************************
    3 00:0CA2 -  -  -  -  ;
    4 00:0CA2 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0CA2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CA2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CA2 -  -  -  -  ;		Reviewed :	No
    8 00:0CA2 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0CA2 -  -  -  -  ;
   10 00:0CA2 -  -  -  -  ; ***************************************************************************************
   11 00:0CA2 -  -  -  -  ; ***************************************************************************************
   12 00:0CA2 -  -  -  -  
   13 00:0CA2 -  -  -  -  #ifdef CLEANEZ80
   14 00:0CA2 -  -  -  -  
   15 00:0CA2 -  -  -  -  ; ***************************************************************************************
   16 00:0CA2 -  -  -  -  ;
   17 00:0CA2 -  -  -  -  ;								Initialise system stuff
   18 00:0CA2 -  -  -  -  ;
   19 00:0CA2 -  -  -  -  ; ***************************************************************************************
   20 00:0CA2 -  -  -  -  
   21 00:0CA2 -  -  -  -  SYSInitialise:
   22 00:0CA2 C9 -  -  -  	ret
   23 00:0CA3 -  -  -  -  
   24 00:0CA3 -  -  -  -  ; ***************************************************************************************
   25 00:0CA3 -  -  -  -  ;
   26 00:0CA3 -  -  -  -  ;								Terminate system stuff
   27 00:0CA3 -  -  -  -  ;
   28 00:0CA3 -  -  -  -  ; ***************************************************************************************
   29 00:0CA3 -  -  -  -  
   30 00:0CA3 -  -  -  -  SYSTerminate:
   31 00:0CA3 C9 -  -  -  	ret
   32 00:0CA4 -  -  -  -  
   33 00:0CA4 -  -  -  -  ; ***************************************************************************************
   34 00:0CA4 -  -  -  -  ;
   35 00:0CA4 -  -  -  -  ;								Print A character
   36 00:0CA4 -  -  -  -  ;
   37 00:0CA4 -  -  -  -  ; ***************************************************************************************
   38 00:0CA4 -  -  -  -  
   39 00:0CA4 -  -  -  -  SYSPrintChar:
   40 00:0CA4 C9 -  -  -  	ret		
   41 00:0CA5 -  -  -  -  
   42 00:0CA5 -  -  -  -  ; ***************************************************************************************
   43 00:0CA5 -  -  -  -  ;
   44 00:0CA5 -  -  -  -  ;									Print Newline
   45 00:0CA5 -  -  -  -  ;
   46 00:0CA5 -  -  -  -  ; ***************************************************************************************
   47 00:0CA5 -  -  -  -  
   48 00:0CA5 -  -  -  -  SYSPrintCRLF:
   49 00:0CA5 C9 -  -  -  	ret
   50 00:0CA6 -  -  -  -  
   51 00:0CA6 -  -  -  -  #endif
   52 00:0CA6 -  -  -  -  
   53 00:0CA6 -  -  -  -  ; ***************************************************************************************
   54 00:0CA6 -  -  -  -  ;
   55 00:0CA6 -  -  -  -  ;									Changes and Updates
   56 00:0CA6 -  -  -  -  ;
   57 00:0CA6 -  -  -  -  ; ***************************************************************************************
   58 00:0CA6 -  -  -  -  ;
   59 00:0CA6 -  -  -  -  ;		Date			Notes
   60 00:0CA6 -  -  -  -  ;		==== 			=====
   61 00:0CA6 -  -  -  -  ;
   62 00:0CA6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0CA6 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0CA6 -  -  -  -  ; ***************************************************************************************
    2 00:0CA6 -  -  -  -  ; ***************************************************************************************
    3 00:0CA6 -  -  -  -  ;
    4 00:0CA6 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0CA6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CA6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CA6 -  -  -  -  ;		Reviewed :	No
    8 00:0CA6 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0CA6 -  -  -  -  ;
   10 00:0CA6 -  -  -  -  ; ***************************************************************************************
   11 00:0CA6 -  -  -  -  ; ***************************************************************************************
   12 00:0CA6 -  -  -  -  
   13 00:0CA6 -  -  -  -  #ifdef TI84
   14 00:0CA6             
   15 00:0CA6             ; ***************************************************************************************
   16 00:0CA6             ;
   17 00:0CA6             ;								Initialise system stuff
   18 00:0CA6             ;
   19 00:0CA6             ; ***************************************************************************************
   20 00:0CA6             
   21 00:0CA6             SYSInitialise:
   22 00:0CA6             	di
   23 00:0CA6             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0CA6             	ld 		(_IYTemp84),iy
   25 00:0CA6             	ret
   26 00:0CA6             
   27 00:0CA6             ; ***************************************************************************************
   28 00:0CA6             ;
   29 00:0CA6             ;								Terminate system stuff
   30 00:0CA6             ;
   31 00:0CA6             ; ***************************************************************************************
   32 00:0CA6             
   33 00:0CA6             SYSTerminate:
   34 00:0CA6             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0CA6             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0CA6             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0CA6             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0CA6             	ei
   39 00:0CA6             	ret 										; and exit.
   40 00:0CA6             
   41 00:0CA6             _StackTemp84:									; temp var for TI84 only.
   42 00:0CA6             	.dw 	0,0
   43 00:0CA6             _IYTemp84:
   44 00:0CA6             	.dw 	0,0		
   45 00:0CA6             
   46 00:0CA6             ; ***************************************************************************************
   47 00:0CA6             ;
   48 00:0CA6             ;								Print A character
   49 00:0CA6             ;
   50 00:0CA6             ; ***************************************************************************************
   51 00:0CA6             
   52 00:0CA6             SYSPrintChar:
   53 00:0CA6             	push 	af 									; we stack everything including alt registers
   54 00:0CA6             	push 	bc
   55 00:0CA6             	push 	de
   56 00:0CA6             	push 	hl
   57 00:0CA6             	push 	ix
   58 00:0CA6             	push 	iy
   59 00:0CA6             	exx
   60 00:0CA6             	push 	bc
   61 00:0CA6             	push 	de
   62 00:0CA6             	push 	hl
   63 00:0CA6             
   64 00:0CA6             	ld 		iy,(_IYTemp84)
   65 00:0CA6             	call 	_PutC 								; print A as character
   66 00:0CA6             	di
   67 00:0CA6             	ld 		(_IYTemp84),iy
   68 00:0CA6             
   69 00:0CA6             	pop 	hl
   70 00:0CA6             	pop 	de
   71 00:0CA6             	pop 	bc
   72 00:0CA6             	exx
   73 00:0CA6             	pop 	iy
   74 00:0CA6             	pop 	ix
   75 00:0CA6             	pop 	hl
   76 00:0CA6             	pop 	de
   77 00:0CA6             	pop 	bc
   78 00:0CA6             	pop 	af
   79 00:0CA6             	ret		
   80 00:0CA6             
   81 00:0CA6             ; ***************************************************************************************
   82 00:0CA6             ;
   83 00:0CA6             ;									Print Newline
   84 00:0CA6             ;
   85 00:0CA6             ; ***************************************************************************************
   86 00:0CA6             
   87 00:0CA6             SYSPrintCRLF:
   88 00:0CA6             	push 	af 									; we stack everything including alt registers
   89 00:0CA6             	push 	bc
   90 00:0CA6             	push 	de
   91 00:0CA6             	push 	hl
   92 00:0CA6             	push 	ix
   93 00:0CA6             	push 	iy
   94 00:0CA6             	exx
   95 00:0CA6             	push 	bc
   96 00:0CA6             	push 	de
   97 00:0CA6             	push 	hl
   98 00:0CA6             
   99 00:0CA6             	ld 		iy,(_IYTemp84)
  100 00:0CA6             	call 	_newline
  101 00:0CA6             	di
  102 00:0CA6             	ld 		(_IYTemp84),iy
  103 00:0CA6             
  104 00:0CA6             	pop 	hl
  105 00:0CA6             	pop 	de
  106 00:0CA6             	pop 	bc
  107 00:0CA6             	exx
  108 00:0CA6             	pop 	iy
  109 00:0CA6             	pop 	ix
  110 00:0CA6             	pop 	hl
  111 00:0CA6             	pop 	de
  112 00:0CA6             	pop 	bc
  113 00:0CA6             	pop 	af
  114 00:0CA6             	ret
  115 00:0CA6             
  116 00:0CA6             #endif
  117 00:0CA6 -  -  -  -  
  118 00:0CA6 -  -  -  -  ; ***************************************************************************************
  119 00:0CA6 -  -  -  -  ;
  120 00:0CA6 -  -  -  -  ;									Changes and Updates
  121 00:0CA6 -  -  -  -  ;
  122 00:0CA6 -  -  -  -  ; ***************************************************************************************
  123 00:0CA6 -  -  -  -  ;
  124 00:0CA6 -  -  -  -  ;		Date			Notes
  125 00:0CA6 -  -  -  -  ;		==== 			=====
  126 00:0CA6 -  -  -  -  ;
  127 00:0CA6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0CA6 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0CA6 -  -  -  -  ; ***************************************************************************************
    2 00:0CA6 -  -  -  -  ; ***************************************************************************************
    3 00:0CA6 -  -  -  -  ;
    4 00:0CA6 -  -  -  -  ;		Name : 		basic.asm
    5 00:0CA6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CA6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CA6 -  -  -  -  ;		Reviewed :	No
    8 00:0CA6 -  -  -  -  ;		Purpose :	Main program.
    9 00:0CA6 -  -  -  -  ;
   10 00:0CA6 -  -  -  -  ; ***************************************************************************************
   11 00:0CA6 -  -  -  -  ; ***************************************************************************************
   12 00:0CA6 -  -  -  -  
   13 00:0CA6 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 39 
              30 33 38 38 
              0D 80 10 03 
              00 C2 9C 96 
              95 41 52 A3 
              8F 3F 01 52 
              0D 80 13 04 
              00 C2 98 95 
              3F 06 62 57 
              75 6A 70 6A 
              0D A3 8F 46 
              80 0E 05 00 
              C2 84 95 9F 
              89 4A A3 8F 
              41 45 80 10 
              06 00 C2 9C 
              96 95 41 50 
              A3 8F 3F 01 
              50 0D 80 15 
              07 00 C2 9E 
              95 42 41 74 
              5A 64 5B A3 
              8F 41 7E 4B 
              65 5B 64 80 
              11 08 00 C2 
              9D 95 3F 03 
              63 57 63 0D 
              A3 8F 41 63 
              80 13 09 00 
              C2 83 95 9F 
              89 4F A3 8F 
              94 41 4D 53 
              44 6D 4A 80 
              0F 0A 00 C2 
              9D 95 3F 01 
              58 0D A3 8F 
              41 58 80 11 
              0B 00 C2 9A 
              95 8A 7B 50 
              56 59 4F A3 
              8F 8A 41 80 
              10 0C 00 C2 
              9A 95 41 52 
              63 6E 49 74 
              A3 8F 41 80 
              1B 0D 00 C2 
              9B 96 95 75 
              4E 6A 51 61 
              A3 8F 3F 09 
              38 39 33 30 
              33 35 36 31 
              37 0D 80 1B 
              0E 00 C2 9B 
              96 95 58 7E 
              65 7B 42 A3 
              8F 3F 09 34 
              31 39 30 36 
              31 34 34 32 
              0D 80 15 0F 
              00 C2 9D 95 
              3F 07 7A 64 
              4A 52 78 62 
              6B 0D A3 8F 
              41 7A 80 13 
              10 00 C2 94 
              43 79 4D 64 
              5B 59 8F 43 
              79 4D 64 5B 
              59 80 13 11 
              00 C2 83 95 
              9F 89 54 A3 
              8F 94 41 52 
              54 55 41 4F 
              80 11 12 00 
              C2 94 7C 6C 
              7F 6B 74 8F 
              7C 6C 7F 6B 
              74 80 13 13 
              00 C2 94 41 
              60 4A 68 5C 
              7E 8F 41 60 
              4A 68 5C 7E 
              80 0F 14 00 
              C2 9A 95 4E 
              50 69 5B 78 
              A3 8F 41 80 
              0E 15 00 C2 
              84 95 9F 89 
              50 A3 8F 41 
              4B 80 1D 16 
              00 C2 9B 96 
              95 41 59 6F 
              59 55 7D A3 
              8F 3F 0A 31 
              35 30 35 35 
              39 36 37 39 
              37 0D 80 14 
              17 00 C2 9E 
              95 43 70 70 
              63 68 57 A3 
              8F 4F 4F 5C 
              57 68 80 10 
              18 00 C2 9C 
              96 95 41 56 
              A3 8F 3F 01 
              56 0D 80 10 
              19 00 C2 9C 
              96 95 41 44 
              A3 8F 3F 01 
              44 0D 80 12 
              1A 00 C2 8A 
              45 62 7E 6A 
              41 8F 8A 45 
              62 7E 6A 41 
              80 10 1B 00 
              C2 9C 96 95 
              41 4F A3 8F 
              3F 01 4F 0D 
              80 13 1C 00 
              C2 83 95 9F 
              89 4F A3 8F 
              94 41 4D 53 
              44 6D 4A 80 
              12 1D 00 C2 
              9D 95 3F 04 
              66 44 42 55 
              0D A3 8F 41 
              66 80 14 1E 
              00 C2 8A 8A 
              41 6D 63 77 
              62 5A 8F 41 
              6D 63 77 62 
              5A 80 10 1F 
              00 C2 9C 96 
              95 41 42 A3 
              8F 3F 01 42 
              0D 80 12 20 
              00 C2 9A 95 
              8A 41 4E 6E 
              48 5D 58 A3 
              8F 8A 41 80 
              14 21 00 C2 
              9E 95 70 60 
              7D 5F 51 A3 
              8F 43 4F 5F 
              42 60 6E 80 
              13 22 00 C2 
              94 42 76 5E 
              7E 64 74 8F 
              42 76 5E 7E 
              64 74 80 13 
              23 00 C2 83 
              95 9F 89 4A 
              A3 8F 94 41 
              48 51 74 59 
              45 80 13 24 
              00 C2 83 95 
              9F 89 51 A3 
              8F 94 41 4F 
              53 64 75 4C 
              80 0E 25 00 
              C2 84 95 9F 
              89 47 A3 8F 
              41 42 80 12 
              26 00 C2 8A 
              8A 60 53 7D 
              52 62 8F 60 
              53 7D 52 62 
              80 14 27 00 
              C2 99 95 8A 
              62 63 75 7F 
              46 A3 8F 62 
              63 75 7F 46 
              80 10 28 00 
              C2 9A 95 41 
              4D 65 53 7B 
              42 A3 8F 41 
              80 1C 29 00 
              C2 A2 95 3F 
              0A 31 35 37 
              36 31 39 34 
              39 37 34 0D 
              A3 8F 41 5D 
              7C 6D 4E 5E 
              80 13 2A 00 
              C2 83 95 9F 
              89 53 A3 8F 
              94 41 51 54 
              44 7D 4E 80 
              15 2B 00 C2 
              9E 95 42 61 
              4E 62 6A 4E 
              A3 8F 41 5E 
              71 5D 55 71 
              80 11 2C 00 
              C2 98 95 3F 
              04 77 52 71 
              6F 0D A3 8F 
              44 80 1D 2D 
              00 C2 9B 96 
              95 41 58 62 
              5D 64 78 A3 
              8F 3F 0A 31 
              34 38 35 34 
              32 39 30 34 
              38 0D 80 14 
              2E 00 C2 9E 
              95 43 6D 40 
              61 7A 48 A3 
              8F 52 7F 5E 
              45 77 80 0E 
              2F 00 C2 84 
              95 9F 89 50 
              A3 8F 41 4B 
              80 0E 30 00 
              C2 98 95 3F 
              01 57 0D A3 
              8F 41 80 14 
              31 00 C2 99 
              95 8A 42 5D 
              5B 4F 69 A3 
              8F 42 5D 5B 
              4F 69 80 1C 
              32 00 C2 9B 
              96 95 7D 4B 
              55 7A 69 A3 
              8F 3F 0A 31 
              30 32 36 33 
              38 33 35 32 
              39 0D 80 11 
              33 00 C2 9A 
              95 8A 44 62 
              75 59 46 A3 
              8F 8A 41 80 
              0F 34 00 C2 
              9A 95 42 55 
              7B 7B 75 A3 
              8F 41 80 13 
              35 00 C2 83 
              95 9F 89 52 
              A3 8F 94 41 
              50 53 74 79 
              4D 80 13 36 
              00 C2 94 41 
              4A 5E 65 61 
              4A 8F 41 4A 
              5E 65 61 4A 
              80 0F 37 00 
              C2 9D 95 3F 
              01 66 0D A3 
              8F 41 66 80 
              10 38 00 C2 
              9C 96 95 41 
              47 A3 8F 3F 
              01 47 0D 80 
              13 39 00 C2 
              99 95 60 4A 
              67 42 50 A3 
              8F 60 4A 67 
              42 50 80 13 
              3A 00 C2 94 
              42 53 7E 46 
              61 76 8F 42 
              53 7E 46 61 
              76 80 10 3B 
              00 C2 9C 96 
              95 41 5A A3 
              8F 3F 01 5A 
              0D 80 12 3C 
              00 C2 8A 66 
              52 51 7A 4D 
              8F 8A 66 52 
              51 7A 4D 80 
              10 3D 00 C2 
              9C 96 95 41 
              43 A3 8F 3F 
              01 43 0D 80 
              13 3E 00 C2 
              94 41 57 6E 
              69 78 55 8F 
              41 57 6E 69 
              78 55 80 1D 
              3F 00 C2 9B 
              96 95 41 57 
              4D 76 4C 69 
              A3 8F 3F 0A 
              31 34 36 33 
              32 34 37 36 
              35 37 0D 80 
              16 40 00 C2 
              99 95 8A 41 
              79 6F 74 5E 
              54 A3 8F 41 
              79 6F 74 5E 
              54 80 10 41 
              00 C2 9A 95 
              41 52 72 56 
              59 52 A3 8F 
              41 80 15 42 
              00 C2 9E 95 
              42 77 4D 4F 
              47 51 A3 8F 
              41 48 72 70 
              78 6E 80 1C 
              43 00 C2 A2 
              95 3F 0A 2D 
              31 35 32 31 
              30 39 33 39 
              36 0D A3 8F 
              8A 49 44 50 
              45 54 80 12 
              44 00 C2 9D 
              95 3F 04 63 
              76 6A 69 0D 
              A3 8F 41 63 
              80 14 45 00 
              C2 8A 8A 41 
              74 47 54 48 
              5A 8F 41 74 
              47 54 48 5A 
              80 10 46 00 
              C2 9C 96 95 
              41 41 A3 8F 
              3F 01 41 0D 
              80 11 47 00 
              C2 9D 95 3F 
              03 62 47 6C 
              0D A3 8F 41 
              62 80 13 48 
              00 C2 99 95 
              5A 46 5B 5E 
              7A A3 8F 5A 
              46 5B 5E 7A 
              80 0F 49 00 
              C2 98 95 3F 
              02 72 48 0D 
              A3 8F 42 80 
              12 4A 00 C2 
              8A 75 5F 66 
              4D 6A 8F 8A 
              75 5F 66 4D 
              6A 80 13 4B 
              00 C2 94 41 
              5E 6B 47 7B 
              4A 8F 41 5E 
              6B 47 7B 4A 
              80 12 4C 00 
              C2 8A 8A 53 
              4F 47 72 55 
              8F 53 4F 47 
              72 55 80 13 
              4D 00 C2 9D 
              95 3F 05 53 
              6B 55 6B 41 
              0D A3 8F 41 
              53 80 13 4E 
              00 C2 98 95 
              3F 06 64 47 
              4B 6B 6E 74 
              0D A3 8F 46 
              80 14 4F 00 
              C2 99 95 8A 
              45 64 57 6A 
              65 A3 8F 45 
              64 57 6A 65 
              80 15 50 00 
              C2 9E 95 42 
              6E 51 59 66 
              7C A3 8F 41 
              51 6E 66 59 
              43 80 14 51 
              00 C2 9E 95 
              43 72 4C 70 
              55 73 A3 8F 
              4D 73 4F 6A 
              4C 80 1F 52 
              00 C2 9B 96 
              95 8A 41 4B 
              46 71 77 7C 
              A3 8F 3F 0B 
              2D 31 32 36 
              30 30 36 38 
              33 34 38 0D 
              80 0F 53 00 
              C2 9A 95 59 
              55 7A 63 70 
              A3 8F 41 80 
              15 54 00 C2 
              9E 95 42 48 
              78 55 48 49 
              A3 8F 41 77 
              47 6A 77 76 
              80 1B 55 00 
              C2 9B 96 95 
              59 6D 47 69 
              59 A3 8F 3F 
              09 34 33 31 
              32 35 38 32 
              30 31 0D 80 
              1D 56 00 C2 
              9B 96 95 41 
              63 7E 4C 59 
              76 A3 8F 3F 
              0A 31 36 37 
              37 32 34 38 
              31 31 38 0D 
              80 0F 57 00 
              C2 9A 95 7D 
              6C 49 59 56 
              A3 8F 41 80 
              10 58 00 C2 
              9C 96 95 41 
              48 A3 8F 3F 
              01 48 0D 80 
              15 59 00 C2 
              9E 95 42 5E 
              6F 5C 75 79 
              A3 8F 41 61 
              50 63 4A 46 
              80 16 5A 00 
              C2 99 95 8A 
              41 69 77 6C 
              6F 7C A3 8F 
              41 69 77 6C 
              6F 7C 80 15 
              5B 00 C2 9E 
              95 41 5E 5E 
              58 42 41 A3 
              8F 42 61 61 
              67 7D 7E 80 
              0F 5C 00 C2 
              98 95 3F 02 
              78 46 0D A3 
              8F 42 80 1C 
              5D 00 C2 A2 
              95 3F 0A 31 
              35 36 35 35 
              32 31 39 36 
              36 0D A3 8F 
              41 5D 53 7F 
              60 6E 80 1A 
              5E 00 C2 A2 
              95 3F 09 38 
              33 35 32 34 
              38 38 31 35 
              0D A3 8F 71 
              72 4E 4A 6F 
              80 0D 5F 00 
              C2 9D 95 3F 
              00 0D A3 8F 
              4D 80 10 60 
              00 C2 9C 96 
              95 41 4A A3 
              8F 3F 01 4A 
              0D 80 1F 61 
              00 C2 9B 96 
              95 8A 41 50 
              4A 50 7D 7B 
              A3 8F 3F 0B 
              2D 31 33 34 
              34 38 36 38 
              32 31 39 0D 
              80 10 62 00 
              C2 9C 96 95 
              41 41 A3 8F 
              3F 01 41 0D 
              80 1B 63 00 
              C2 9B 96 95 
              6D 5F 77 79 
              4A A3 8F 3F 
              09 37 36 33 
              33 33 30 31 
              32 32 0D 80 
              15 64 00 C2 
              99 95 41 5B 
              42 67 4B 5B 
              A3 8F 41 5B 
              42 67 4B 5B 
              80 0E 65 00 
              C2 84 95 9F 
              89 4A A3 8F 
              41 45 80 10 
              66 00 C2 9C 
              96 95 41 58 
              A3 8F 3F 01 
              58 0D 80 13 
              67 00 C2 83 
              95 9F 89 4B 
              A3 8F 94 41 
              49 52 44 5D 
              46 80 1B 68 
              00 C2 9B 96 
              95 72 5A 55 
              54 49 A3 8F 
              3F 09 38 34 
              35 37 36 33 
              38 34 39 0D 
              80 1B 69 00 
              C2 9B 96 95 
              4D 61 65 5C 
              77 A3 8F 3F 
              09 32 32 36 
              39 30 37 39 
              35 39 0D 80 
              11 6A 00 C2 
              94 70 45 61 
              60 7B 8F 70 
              45 61 60 7B 
              80 1D 6B 00 
              C2 9B 96 95 
              8A 47 48 65 
              61 7E A3 8F 
              3F 0A 2D 31 
              31 39 36 39 
              31 33 39 30 
              0D 80 10 6C 
              00 C2 9C 96 
              95 41 4E A3 
              8F 3F 01 4E 
              0D 80 13 6D 
              00 C2 94 41 
              79 70 7A 4B 
              78 8F 41 79 
              70 7A 4B 78 
              80 14 6E 00 
              C2 9E 95 65 
              4E 7E 49 41 
              A3 8F 43 5A 
              71 41 76 7E 
              80 13 6F 00 
              C2 99 95 72 
              4D 5A 5C 64 
              A3 8F 72 4D 
              5A 5C 64 80 
              1D 70 00 C2 
              9B 96 95 41 
              56 5D 7B 45 
              67 A3 8F 3F 
              0A 31 34 35 
              30 36 38 34 
              37 37 35 0D 
              80 13 71 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              1E 72 00 C2 
              A2 95 3F 0B 
              2D 31 30 38 
              31 38 34 31 
              38 39 36 0D 
              A3 8F 8A 41 
              40 5E 79 63 
              68 80 13 73 
              00 C2 83 95 
              9F 89 51 A3 
              8F 94 41 4F 
              53 64 75 4C 
              80 13 74 00 
              C2 83 95 9F 
              89 48 A3 8F 
              94 41 46 51 
              54 51 43 80 
              12 75 00 C2 
              9A 95 8A 41 
              6E 63 7B 6F 
              4A A3 8F 8A 
              41 80 14 76 
              00 C2 9E 95 
              56 48 51 59 
              4F A3 8F 43 
              69 77 6E 66 
              70 80 12 77 
              00 C2 9A 95 
              8A 41 5C 6E 
              5F 6C 49 A3 
              8F 8A 41 80 
              15 78 00 C2 
              9E 95 41 77 
              61 46 50 77 
              A3 8F 42 48 
              5E 79 6F 48 
              80 0E 79 00 
              C2 84 95 9F 
              89 49 A3 8F 
              41 44 80 14 
              7A 00 C2 9E 
              95 59 59 69 
              4D 66 A3 8F 
              43 66 66 56 
              72 59 80 12 
              7B 00 C2 8A 
              8A 7A 51 4E 
              73 74 8F 7A 
              51 4E 73 74 
              80 11 7C 00 
              C2 98 95 3F 
              04 70 42 7A 
              4D 0D A3 8F 
              44 80 11 7D 
              00 C2 9D 95 
              3F 03 64 75 
              51 0D A3 8F 
              41 64 80 16 
              7E 00 C2 99 
              95 8A 41 6C 
              44 6F 76 73 
              A3 8F 41 6C 
              44 6F 76 73 
              80 13 7F 00 
              C2 83 95 9F 
              89 51 A3 8F 
              94 41 4F 53 
              64 75 4C 80 
              12 80 00 C2 
              8A 8A 71 5B 
              44 52 74 8F 
              71 5B 44 52 
              74 80 14 81 
              00 C2 9E 95 
              43 6D 45 63 
              7F 42 A3 8F 
              52 7A 5C 40 
              7D 80 13 82 
              00 C2 83 95 
              9F 89 52 A3 
              8F 94 41 50 
              53 74 79 4D 
              80 13 83 00 
              C2 94 42 5F 
              46 54 77 73 
              8F 42 5F 46 
              54 77 73 80 
              1D 84 00 C2 
              9B 96 95 41 
              64 5B 7A 65 
              48 A3 8F 3F 
              0A 31 36 38 
              35 30 33 39 
              34 33 32 0D 
              80 12 85 00 
              C2 98 95 3F 
              05 4E 74 4A 
              6E 59 0D A3 
              8F 45 80 13 
              86 00 C2 94 
              42 5D 42 43 
              7A 49 8F 42 
              5D 42 43 7A 
              49 80 1C 87 
              00 C2 A2 95 
              3F 0A 2D 33 
              37 35 35 33 
              35 30 31 36 
              0D A3 8F 8A 
              56 58 63 56 
              68 80 13 88 
              00 C2 83 95 
              9F 89 4B A3 
              8F 94 41 49 
              52 44 5D 46 
              80 0E 89 00 
              C2 84 95 9F 
              89 46 A3 8F 
              41 41 80 0E 
              8A 00 C2 84 
              95 9F 89 52 
              A3 8F 41 4D 
              80 1F 8B 00 
              C2 9B 96 95 
              8A 41 44 50 
              4B 67 76 A3 
              8F 3F 0B 2D 
              31 31 34 35 
              30 39 32 35 
              39 38 0D 80 
              15 8C 00 C2 
              9E 95 41 75 
              56 5D 67 7F 
              A3 8F 42 4A 
              69 62 58 40 
              80 15 8D 00 
              C2 9E 95 42 
              66 74 72 62 
              5D A3 8F 41 
              59 4B 4D 5D 
              62 80 10 8E 
              00 C2 9C 96 
              95 41 52 A3 
              8F 3F 01 52 
              0D 80 14 8F 
              00 C2 99 95 
              8A 42 79 62 
              49 75 A3 8F 
              42 79 62 49 
              75 80 0E 90 
              00 C2 84 95 
              9F 89 52 A3 
              8F 41 4D 80 
              14 91 00 C2 
              99 95 8A 7C 
              5E 53 5F 76 
              A3 8F 7C 5E 
              53 5F 76 80 
              14 92 00 C2 
              8A 41 4D 4A 
              4F 68 44 8F 
              8A 41 4D 4A 
              4F 68 44 80 
              0E 93 00 C2 
              84 95 9F 89 
              50 A3 8F 41 
              4B 80 1C 94 
              00 C2 A2 95 
              3F 0A 31 36 
              39 37 36 31 
              30 34 38 35 
              0D A3 8F 41 
              65 4B 77 6B 
              75 80 14 95 
              00 C2 8A 41 
              6C 5A 5D 40 
              63 8F 8A 41 
              6C 5A 5D 40 
              63 80 14 96 
              00 C2 9E 95 
              43 6A 60 53 
              5B 5A A3 8F 
              55 5F 6C 64 
              65 80 12 97 
              00 C2 8A 8A 
              7D 48 5F 74 
              59 8F 7D 48 
              5F 74 59 80 
              13 98 00 C2 
              94 43 72 5E 
              41 43 68 8F 
              43 72 5E 41 
              43 68 80 1C 
              99 00 C2 A2 
              95 3F 0A 2D 
              32 31 31 35 
              31 32 38 30 
              30 0D A3 8F 
              8A 4C 66 76 
              77 60 80 0E 
              9A 00 C2 84 
              95 9F 89 48 
              A3 8F 41 43 
              80 13 9B 00 
              C2 9D 95 3F 
              05 76 79 55 
              78 54 0D A3 
              8F 41 76 80 
              15 9C 00 C2 
              98 95 3F 08 
              42 51 73 49 
              44 51 7A 54 
              0D A3 8F 48 
              80 1B 9D 00 
              C2 9B 96 95 
              50 6C 4F 6F 
              75 A3 8F 3F 
              09 32 38 30 
              30 33 34 32 
              39 33 0D 80 
              1C 9E 00 C2 
              A2 95 3F 0A 
              31 35 36 31 
              34 30 39 39 
              33 32 0D A3 
              8F 41 5D 44 
              53 66 4C 80 
              0F 9F 00 C2 
              9A 95 4A 52 
              5B 49 74 A3 
              8F 41 80 1C 
              A0 00 C2 A2 
              95 3F 0A 2D 
              36 33 39 30 
              31 38 33 31 
              36 0D A3 8F 
              8A 66 45 6A 
              55 4C 80 1E 
              A1 00 C2 A2 
              95 3F 0B 2D 
              31 35 31 36 
              31 36 39 33 
              39 39 0D A3 
              8F 8A 41 5A 
              57 6E 62 77 
              80 13 A2 00 
              C2 94 42 52 
              62 4A 50 43 
              8F 42 52 62 
              4A 50 43 80 
              13 A3 00 C2 
              94 43 77 4A 
              7E 50 7F 8F 
              43 77 4A 7E 
              50 7F 80 14 
              A4 00 C2 9E 
              95 43 58 45 
              55 55 7D A3 
              8F 67 7A 6A 
              6A 42 80 14 
              A5 00 C2 8A 
              8A 41 58 67 
              76 70 6E 8F 
              41 58 67 76 
              70 6E 80 15 
              A6 00 C2 99 
              95 41 65 61 
              73 7B 41 A3 
              8F 41 65 61 
              73 7B 41 80 
              14 A7 00 C2 
              99 95 8A 4C 
              6B 5D 5F 47 
              A3 8F 4C 6B 
              5D 5F 47 80 
              0F A8 00 C2 
              98 95 3F 02 
              4A 6B 0D A3 
              8F 42 80 13 
              A9 00 C2 83 
              95 9F 89 53 
              A3 8F 94 41 
              51 54 44 7D 
              4E 80 13 AA 
              00 C2 94 43 
              41 5C 69 7D 
              59 8F 43 41 
              5C 69 7D 59 
              80 10 AB 00 
              C2 9C 96 95 
              41 48 A3 8F 
              3F 01 48 0D 
              80 0E AC 00 
              C2 84 95 9F 
              89 48 A3 8F 
              41 43 80 10 
              AD 00 C2 9C 
              96 95 41 4A 
              A3 8F 3F 01 
              4A 0D 80 14 
              AE 00 C2 8A 
              8A 41 75 43 
              41 5E 56 8F 
              41 75 43 41 
              5E 56 80 14 
              AF 00 C2 9E 
              95 43 70 76 
              7E 4F 42 A3 
              8F 4F 49 41 
              70 7D 80 1C 
              B0 00 C2 A2 
              95 3F 0A 31 
              33 30 30 33 
              32 31 36 39 
              36 0D A3 8F 
              41 4D 60 55 
              56 60 80 13 
              B1 00 C2 99 
              95 5A 72 4C 
              77 62 A3 8F 
              5A 72 4C 77 
              62 80 10 B2 
              00 C2 9C 96 
              95 41 57 A3 
              8F 3F 01 57 
              0D 80 14 B3 
              00 C2 8A 41 
              5E 4E 5A 66 
              51 8F 8A 41 
              5E 4E 5A 66 
              51 80 0E B4 
              00 C2 84 95 
              9F 89 47 A3 
              8F 41 42 80 
              0E B5 00 C2 
              84 95 9F 89 
              4E A3 8F 41 
              49 80 13 B6 
              00 C2 94 43 
              5C 74 5F 7D 
              56 8F 43 5C 
              74 5F 7D 56 
              80 10 B7 00 
              C2 9C 96 95 
              41 46 A3 8F 
              3F 01 46 0D 
              80 0E B8 00 
              C2 84 95 9F 
              89 4F A3 8F 
              41 4A 80 11 
              B9 00 C2 94 
              50 5A 5E 68 
              6C 8F 50 5A 
              5E 68 6C 80 
              10 BA 00 C2 
              9C 96 95 41 
              56 A3 8F 3F 
              01 56 0D 80 
              12 BB 00 C2 
              8A 4B 51 57 
              48 70 8F 8A 
              4B 51 57 48 
              70 80 0F BC 
              00 C2 9A 95 
              55 4A 55 45 
              61 A3 8F 41 
              80 0E BD 00 
              C2 84 95 9F 
              89 50 A3 8F 
              41 4B 80 14 
              BE 00 C2 8A 
              8A 41 55 76 
              78 6F 7D 8F 
              41 55 76 78 
              6F 7D 80 13 
              BF 00 C2 94 
              42 43 44 71 
              66 48 8F 42 
              43 44 71 66 
              48 80 1C C0 
              00 C2 A2 95 
              3F 0A 32 31 
              32 37 31 38 
              35 34 34 34 
              0D A3 8F 41 
              7E 72 64 58 
              64 80 14 C1 
              00 C2 8A 41 
              62 58 71 62 
              61 8F 8A 41 
              62 58 71 62 
              61 80 0E C2 
              00 C2 84 95 
              9F 89 48 A3 
              8F 41 43 80 
              1B C3 00 C2 
              A2 95 3F 0A 
              31 30 35 30 
              35 34 37 32 
              32 38 0D A3 
              8F 7E 67 61 
              50 5C 80 10 
              C4 00 C2 98 
              95 3F 03 73 
              4A 51 0D A3 
              8F 43 80 11 
              C5 00 C2 9A 
              95 8A 5F 78 
              42 4C 53 A3 
              8F 8A 41 80 
              15 C6 00 C2 
              9E 95 42 77 
              5D 67 66 7B 
              A3 8F 41 48 
              62 58 59 44 
              80 13 C7 00 
              C2 99 95 6A 
              6C 6B 4B 42 
              A3 8F 6A 6C 
              6B 4B 42 80 
              14 C8 00 C2 
              8A 41 6C 61 
              7D 40 67 8F 
              8A 41 6C 61 
              7D 40 67 80 
              11 C9 00 C2 
              94 43 7D 64 
              78 71 8F 43 
              7D 64 78 71 
              80 14 CA 00 
              C2 8A 8A 41 
              71 79 4B 5D 
              65 8F 41 71 
              79 4B 5D 65 
              80 00 -  -  	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$39,$30,$33,$38,$38,$0d,$80,$10,$03,$00,$c2,$9c,$96,$95,$41,$52,$a3,$8f,$3f,$01,$52,$0d,$80,$13,$04,$00,$c2,$98,$95,$3f,$06,$62,$57,$75,$6a,$70,$6a,$0d,$a3,$8f,$46,$80,$0e,$05,$00,$c2,$84,$95,$9f,$89,$4a,$a3,$8f,$41,$45,$80,$10,$06,$00,$c2,$9c,$96,$95,$41,$50,$a3,$8f,$3f,$01,$50,$0d,$80,$15,$07,$00,$c2,$9e,$95,$42,$41,$74,$5a,$64,$5b,$a3,$8f,$41,$7e,$4b,$65,$5b,$64,$80,$11,$08,$00,$c2,$9d,$95,$3f,$03,$63,$57,$63,$0d,$a3,$8f,$41,$63,$80,$13,$09,$00,$c2,$83,$95,$9f,$89,$4f,$a3,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$0f,$0a,$00,$c2,$9d,$95,$3f,$01,$58,$0d,$a3,$8f,$41,$58,$80,$11,$0b,$00,$c2,$9a,$95,$8a,$7b,$50,$56,$59,$4f,$a3,$8f,$8a,$41,$80,$10,$0c,$00,$c2,$9a,$95,$41,$52,$63,$6e,$49,$74,$a3,$8f,$41,$80,$1b,$0d,$00,$c2,$9b,$96,$95,$75,$4e,$6a,$51,$61,$a3,$8f,$3f,$09,$38,$39,$33,$30,$33,$35,$36,$31,$37,$0d,$80,$1b,$0e,$00,$c2,$9b,$96,$95,$58,$7e,$65,$7b,$42,$a3,$8f,$3f,$09,$34,$31,$39,$30,$36,$31,$34,$34,$32,$0d,$80,$15,$0f,$00,$c2,$9d,$95,$3f,$07,$7a,$64,$4a,$52,$78,$62,$6b,$0d,$a3,$8f,$41,$7a,$80,$13,$10,$00,$c2,$94,$43,$79,$4d,$64,$5b,$59,$8f,$43,$79,$4d,$64,$5b,$59,$80,$13,$11,$00,$c2,$83,$95,$9f,$89,$54,$a3,$8f,$94,$41,$52,$54,$55,$41,$4f,$80,$11,$12,$00,$c2,$94,$7c,$6c,$7f,$6b,$74,$8f,$7c,$6c,$7f,$6b,$74,$80,$13,$13,$00,$c2,$94,$41,$60,$4a,$68,$5c,$7e,$8f,$41,$60,$4a,$68,$5c,$7e,$80,$0f,$14,$00,$c2,$9a,$95,$4e,$50,$69,$5b,$78,$a3,$8f,$41,$80,$0e,$15,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$1d,$16,$00,$c2,$9b,$96,$95,$41,$59,$6f,$59,$55,$7d,$a3,$8f,$3f,$0a,$31,$35,$30,$35,$35,$39,$36,$37,$39,$37,$0d,$80,$14,$17,$00,$c2,$9e,$95,$43,$70,$70,$63,$68,$57,$a3,$8f,$4f,$4f,$5c,$57,$68,$80,$10,$18,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$10,$19,$00,$c2,$9c,$96,$95,$41,$44,$a3,$8f,$3f,$01,$44,$0d,$80,$12,$1a,$00,$c2,$8a,$45,$62,$7e,$6a,$41,$8f,$8a,$45,$62,$7e,$6a,$41,$80,$10,$1b,$00,$c2,$9c,$96,$95,$41,$4f,$a3,$8f,$3f,$01,$4f,$0d,$80,$13,$1c,$00,$c2,$83,$95,$9f,$89,$4f,$a3,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$12,$1d,$00,$c2,$9d,$95,$3f,$04,$66,$44,$42,$55,$0d,$a3,$8f,$41,$66,$80,$14,$1e,$00,$c2,$8a,$8a,$41,$6d,$63,$77,$62,$5a,$8f,$41,$6d,$63,$77,$62,$5a,$80,$10,$1f,$00,$c2,$9c,$96,$95,$41,$42,$a3,$8f,$3f,$01,$42,$0d,$80,$12,$20,$00,$c2,$9a,$95,$8a,$41,$4e,$6e,$48,$5d,$58,$a3,$8f,$8a,$41,$80,$14,$21,$00,$c2,$9e,$95,$70,$60,$7d,$5f,$51,$a3,$8f,$43,$4f,$5f,$42,$60,$6e,$80,$13,$22,$00,$c2,$94,$42,$76,$5e,$7e,$64,$74,$8f,$42,$76,$5e,$7e,$64,$74,$80,$13,$23,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$13,$24,$00,$c2,$83,$95,$9f,$89,$51,$a3,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$0e,$25,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$12,$26,$00,$c2,$8a,$8a,$60,$53,$7d,$52,$62,$8f,$60,$53,$7d,$52,$62,$80,$14,$27,$00,$c2,$99,$95,$8a,$62,$63,$75,$7f,$46,$a3,$8f,$62,$63,$75,$7f,$46,$80,$10,$28,$00,$c2,$9a,$95,$41,$4d,$65,$53,$7b,$42,$a3,$8f,$41,$80,$1c,$29,$00,$c2,$a2,$95,$3f,$0a,$31,$35,$37,$36,$31,$39,$34,$39,$37,$34,$0d,$a3,$8f,$41,$5d,$7c,$6d,$4e,$5e,$80,$13,$2a,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$15,$2b,$00,$c2,$9e,$95,$42,$61,$4e,$62,$6a,$4e,$a3,$8f,$41,$5e,$71,$5d,$55,$71,$80,$11,$2c,$00,$c2,$98,$95,$3f,$04,$77,$52,$71,$6f,$0d,$a3,$8f,$44,$80,$1d,$2d,$00,$c2,$9b,$96,$95,$41,$58,$62,$5d,$64,$78,$a3,$8f,$3f,$0a,$31,$34,$38,$35,$34,$32,$39,$30,$34,$38,$0d,$80,$14,$2e,$00,$c2,$9e,$95,$43,$6d,$40,$61,$7a,$48,$a3,$8f,$52,$7f,$5e,$45,$77,$80,$0e,$2f,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$0e,$30,$00,$c2,$98,$95,$3f,$01,$57,$0d,$a3,$8f,$41,$80,$14,$31,$00,$c2,$99,$95,$8a,$42,$5d,$5b,$4f,$69,$a3,$8f,$42,$5d,$5b,$4f,$69,$80,$1c,$32,$00,$c2,$9b,$96,$95,$7d,$4b,$55,$7a,$69,$a3,$8f,$3f,$0a,$31,$30,$32,$36,$33,$38,$33,$35,$32,$39,$0d,$80,$11,$33,$00,$c2,$9a,$95,$8a,$44,$62,$75,$59,$46,$a3,$8f,$8a,$41,$80,$0f,$34,$00,$c2,$9a,$95,$42,$55,$7b,$7b,$75,$a3,$8f,$41,$80,$13,$35,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$13,$36,$00,$c2,$94,$41,$4a,$5e,$65,$61,$4a,$8f,$41,$4a,$5e,$65,$61,$4a,$80,$0f,$37,$00,$c2,$9d,$95,$3f,$01,$66,$0d,$a3,$8f,$41,$66,$80,$10,$38,$00,$c2,$9c,$96,$95,$41,$47,$a3,$8f,$3f,$01,$47,$0d,$80,$13,$39,$00,$c2,$99,$95,$60,$4a,$67,$42,$50,$a3,$8f,$60,$4a,$67,$42,$50,$80,$13,$3a,$00,$c2,$94,$42,$53,$7e,$46,$61,$76,$8f,$42,$53,$7e,$46,$61,$76,$80,$10,$3b,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$12,$3c,$00,$c2,$8a,$66,$52,$51,$7a,$4d,$8f,$8a,$66,$52,$51,$7a,$4d,$80,$10,$3d,$00,$c2,$9c,$96,$95,$41,$43,$a3,$8f,$3f,$01,$43,$0d,$80,$13,$3e,$00,$c2,$94,$41,$57,$6e,$69,$78,$55,$8f,$41,$57,$6e,$69,$78,$55,$80,$1d,$3f,$00,$c2,$9b,$96,$95,$41,$57,$4d,$76,$4c,$69,$a3,$8f,$3f,$0a,$31,$34,$36,$33,$32,$34,$37,$36,$35,$37,$0d,$80,$16,$40,$00,$c2,$99,$95,$8a,$41,$79,$6f,$74,$5e,$54,$a3,$8f,$41,$79,$6f,$74,$5e,$54,$80,$10,$41,$00,$c2,$9a,$95,$41,$52,$72,$56,$59,$52,$a3,$8f,$41,$80,$15,$42,$00,$c2,$9e,$95,$42,$77,$4d,$4f,$47,$51,$a3,$8f,$41,$48,$72,$70,$78,$6e,$80,$1c,$43,$00,$c2,$a2,$95,$3f,$0a,$2d,$31,$35,$32,$31,$30,$39,$33,$39,$36,$0d,$a3,$8f,$8a,$49,$44,$50,$45,$54,$80,$12,$44,$00,$c2,$9d,$95,$3f,$04,$63,$76,$6a,$69,$0d,$a3,$8f,$41,$63,$80,$14,$45,$00,$c2,$8a,$8a,$41,$74,$47,$54,$48,$5a,$8f,$41,$74,$47,$54,$48,$5a,$80,$10,$46,$00,$c2,$9c,$96,$95,$41,$41,$a3,$8f,$3f,$01,$41,$0d,$80,$11,$47,$00,$c2,$9d,$95,$3f,$03,$62,$47,$6c,$0d,$a3,$8f,$41,$62,$80,$13,$48,$00,$c2,$99,$95,$5a,$46,$5b,$5e,$7a,$a3,$8f,$5a,$46,$5b,$5e,$7a,$80,$0f,$49,$00,$c2,$98,$95,$3f,$02,$72,$48,$0d,$a3,$8f,$42,$80,$12,$4a,$00,$c2,$8a,$75,$5f,$66,$4d,$6a,$8f,$8a,$75,$5f,$66,$4d,$6a,$80,$13,$4b,$00,$c2,$94,$41,$5e,$6b,$47,$7b,$4a,$8f,$41,$5e,$6b,$47,$7b,$4a,$80,$12,$4c,$00,$c2,$8a,$8a,$53,$4f,$47,$72,$55,$8f,$53,$4f,$47,$72,$55,$80,$13,$4d,$00,$c2,$9d,$95,$3f,$05,$53,$6b,$55,$6b,$41,$0d,$a3,$8f,$41,$53,$80,$13,$4e,$00,$c2,$98,$95,$3f,$06,$64,$47,$4b,$6b,$6e,$74,$0d,$a3,$8f,$46,$80,$14,$4f,$00,$c2,$99,$95,$8a,$45,$64,$57,$6a,$65,$a3,$8f,$45,$64,$57,$6a,$65,$80,$15,$50,$00,$c2,$9e,$95,$42,$6e,$51,$59,$66,$7c,$a3,$8f,$41,$51,$6e,$66,$59,$43,$80,$14,$51,$00,$c2,$9e,$95,$43,$72,$4c,$70,$55,$73,$a3,$8f,$4d,$73,$4f,$6a,$4c,$80,$1f,$52,$00,$c2,$9b,$96,$95,$8a,$41,$4b,$46,$71,$77,$7c,$a3,$8f,$3f,$0b,$2d,$31,$32,$36,$30,$30,$36,$38,$33,$34,$38,$0d,$80,$0f,$53,$00,$c2,$9a,$95,$59,$55,$7a,$63,$70,$a3,$8f,$41,$80,$15,$54,$00,$c2,$9e,$95,$42,$48,$78,$55,$48,$49,$a3,$8f,$41,$77,$47,$6a,$77,$76,$80,$1b,$55,$00,$c2,$9b,$96,$95,$59,$6d,$47,$69,$59,$a3,$8f,$3f,$09,$34,$33,$31,$32,$35,$38,$32,$30,$31,$0d,$80,$1d,$56,$00,$c2,$9b,$96,$95,$41,$63,$7e,$4c,$59,$76,$a3,$8f,$3f,$0a,$31,$36,$37,$37,$32,$34,$38,$31,$31,$38,$0d,$80,$0f,$57,$00,$c2,$9a,$95,$7d,$6c,$49,$59,$56,$a3,$8f,$41,$80,$10,$58,$00,$c2,$9c,$96,$95,$41,$48,$a3,$8f,$3f,$01,$48,$0d,$80,$15,$59,$00,$c2,$9e,$95,$42,$5e,$6f,$5c,$75,$79,$a3,$8f,$41,$61,$50,$63,$4a,$46,$80,$16,$5a,$00,$c2,$99,$95,$8a,$41,$69,$77,$6c,$6f,$7c,$a3,$8f,$41,$69,$77,$6c,$6f,$7c,$80,$15,$5b,$00,$c2,$9e,$95,$41,$5e,$5e,$58,$42,$41,$a3,$8f,$42,$61,$61,$67,$7d,$7e,$80,$0f,$5c,$00,$c2,$98,$95,$3f,$02,$78,$46,$0d,$a3,$8f,$42,$80,$1c,$5d,$00,$c2,$a2,$95,$3f,$0a,$31,$35,$36,$35,$35,$32,$31,$39,$36,$36,$0d,$a3,$8f,$41,$5d,$53,$7f,$60,$6e,$80,$1a,$5e,$00,$c2,$a2,$95,$3f,$09,$38,$33,$35,$32,$34,$38,$38,$31,$35,$0d,$a3,$8f,$71,$72,$4e,$4a,$6f,$80,$0d,$5f,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$10,$60,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$1f,$61,$00,$c2,$9b,$96,$95,$8a,$41,$50,$4a,$50,$7d,$7b,$a3,$8f,$3f,$0b,$2d,$31,$33,$34,$34,$38,$36,$38,$32,$31,$39,$0d,$80,$10,$62,$00,$c2,$9c,$96,$95,$41,$41,$a3,$8f,$3f,$01,$41,$0d,$80,$1b,$63,$00,$c2,$9b,$96,$95,$6d,$5f,$77,$79,$4a,$a3,$8f,$3f,$09,$37,$36,$33,$33,$33,$30,$31,$32,$32,$0d,$80,$15,$64,$00,$c2,$99,$95,$41,$5b,$42,$67,$4b,$5b,$a3,$8f,$41,$5b,$42,$67,$4b,$5b,$80,$0e,$65,$00,$c2,$84,$95,$9f,$89,$4a,$a3,$8f,$41,$45,$80,$10,$66,$00,$c2,$9c,$96,$95,$41,$58,$a3,$8f,$3f,$01,$58,$0d,$80,$13,$67,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$1b,$68,$00,$c2,$9b,$96,$95,$72,$5a,$55,$54,$49,$a3,$8f,$3f,$09,$38,$34,$35,$37,$36,$33,$38,$34,$39,$0d,$80,$1b,$69,$00,$c2,$9b,$96,$95,$4d,$61,$65,$5c,$77,$a3,$8f,$3f,$09,$32,$32,$36,$39,$30,$37,$39,$35,$39,$0d,$80,$11,$6a,$00,$c2,$94,$70,$45,$61,$60,$7b,$8f,$70,$45,$61,$60,$7b,$80,$1d,$6b,$00,$c2,$9b,$96,$95,$8a,$47,$48,$65,$61,$7e,$a3,$8f,$3f,$0a,$2d,$31,$31,$39,$36,$39,$31,$33,$39,$30,$0d,$80,$10,$6c,$00,$c2,$9c,$96,$95,$41,$4e,$a3,$8f,$3f,$01,$4e,$0d,$80,$13,$6d,$00,$c2,$94,$41,$79,$70,$7a,$4b,$78,$8f,$41,$79,$70,$7a,$4b,$78,$80,$14,$6e,$00,$c2,$9e,$95,$65,$4e,$7e,$49,$41,$a3,$8f,$43,$5a,$71,$41,$76,$7e,$80,$13,$6f,$00,$c2,$99,$95,$72,$4d,$5a,$5c,$64,$a3,$8f,$72,$4d,$5a,$5c,$64,$80,$1d,$70,$00,$c2,$9b,$96,$95,$41,$56,$5d,$7b,$45,$67,$a3,$8f,$3f,$0a,$31,$34,$35,$30,$36,$38,$34,$37,$37,$35,$0d,$80,$13,$71,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$1e,$72,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$30,$38,$31,$38,$34,$31,$38,$39,$36,$0d,$a3,$8f,$8a,$41,$40,$5e,$79,$63,$68,$80,$13,$73,$00,$c2,$83,$95,$9f,$89,$51,$a3,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$13,$74,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$12,$75,$00,$c2,$9a,$95,$8a,$41,$6e,$63,$7b,$6f,$4a,$a3,$8f,$8a,$41,$80,$14,$76,$00,$c2,$9e,$95,$56,$48,$51,$59,$4f,$a3,$8f,$43,$69,$77,$6e,$66,$70,$80,$12,$77,$00,$c2,$9a,$95,$8a,$41,$5c,$6e,$5f,$6c,$49,$a3,$8f,$8a,$41,$80,$15,$78,$00,$c2,$9e,$95,$41,$77,$61,$46,$50,$77,$a3,$8f,$42,$48,$5e,$79,$6f,$48,$80,$0e,$79,$00,$c2,$84,$95,$9f,$89,$49,$a3,$8f,$41,$44,$80,$14,$7a,$00,$c2,$9e,$95,$59,$59,$69,$4d,$66,$a3,$8f,$43,$66,$66,$56,$72,$59,$80,$12,$7b,$00,$c2,$8a,$8a,$7a,$51,$4e,$73,$74,$8f,$7a,$51,$4e,$73,$74,$80,$11,$7c,$00,$c2,$98,$95,$3f,$04,$70,$42,$7a,$4d,$0d,$a3,$8f,$44,$80,$11,$7d,$00,$c2,$9d,$95,$3f,$03,$64,$75,$51,$0d,$a3,$8f,$41,$64,$80,$16,$7e,$00,$c2,$99,$95,$8a,$41,$6c,$44,$6f,$76,$73,$a3,$8f,$41,$6c,$44,$6f,$76,$73,$80,$13,$7f,$00,$c2,$83,$95,$9f,$89,$51,$a3,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$12,$80,$00,$c2,$8a,$8a,$71,$5b,$44,$52,$74,$8f,$71,$5b,$44,$52,$74,$80,$14,$81,$00,$c2,$9e,$95,$43,$6d,$45,$63,$7f,$42,$a3,$8f,$52,$7a,$5c,$40,$7d,$80,$13,$82,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$13,$83,$00,$c2,$94,$42,$5f,$46,$54,$77,$73,$8f,$42,$5f,$46,$54,$77,$73,$80,$1d,$84,$00,$c2,$9b,$96,$95,$41,$64,$5b,$7a,$65,$48,$a3,$8f,$3f,$0a,$31,$36,$38,$35,$30,$33,$39,$34,$33,$32,$0d,$80,$12,$85,$00,$c2,$98,$95,$3f,$05,$4e,$74,$4a,$6e,$59,$0d,$a3,$8f,$45,$80,$13,$86,$00,$c2,$94,$42,$5d,$42,$43,$7a,$49,$8f,$42,$5d,$42,$43,$7a,$49,$80,$1c,$87,$00,$c2,$a2,$95,$3f,$0a,$2d,$33,$37,$35,$35,$33,$35,$30,$31,$36,$0d,$a3,$8f,$8a,$56,$58,$63,$56,$68,$80,$13,$88,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$0e,$89,$00,$c2,$84,$95,$9f,$89,$46,$a3,$8f,$41,$41,$80,$0e,$8a,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$1f,$8b,$00,$c2,$9b,$96,$95,$8a,$41,$44,$50,$4b,$67,$76,$a3,$8f,$3f,$0b,$2d,$31,$31,$34,$35,$30,$39,$32,$35,$39,$38,$0d,$80,$15,$8c,$00,$c2,$9e,$95,$41,$75,$56,$5d,$67,$7f,$a3,$8f,$42,$4a,$69,$62,$58,$40,$80,$15,$8d,$00,$c2,$9e,$95,$42,$66,$74,$72,$62,$5d,$a3,$8f,$41,$59,$4b,$4d,$5d,$62,$80,$10,$8e,$00,$c2,$9c,$96,$95,$41,$52,$a3,$8f,$3f,$01,$52,$0d,$80,$14,$8f,$00,$c2,$99,$95,$8a,$42,$79,$62,$49,$75,$a3,$8f,$42,$79,$62,$49,$75,$80,$0e,$90,$00,$c2,$84,$95,$9f,$89,$52,$a3,$8f,$41,$4d,$80,$14,$91,$00,$c2,$99,$95,$8a,$7c,$5e,$53,$5f,$76,$a3,$8f,$7c,$5e,$53,$5f,$76,$80,$14,$92,$00,$c2,$8a,$41,$4d,$4a,$4f,$68,$44,$8f,$8a,$41,$4d,$4a,$4f,$68,$44,$80,$0e,$93,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$1c,$94,$00,$c2,$a2,$95,$3f,$0a,$31,$36,$39,$37,$36,$31,$30,$34,$38,$35,$0d,$a3,$8f,$41,$65,$4b,$77,$6b,$75,$80,$14,$95,$00,$c2,$8a,$41,$6c,$5a,$5d,$40,$63,$8f,$8a,$41,$6c,$5a,$5d,$40,$63,$80,$14,$96,$00,$c2,$9e,$95,$43,$6a,$60,$53,$5b,$5a,$a3,$8f,$55,$5f,$6c,$64,$65,$80,$12,$97,$00,$c2,$8a,$8a,$7d,$48,$5f,$74,$59,$8f,$7d,$48,$5f,$74,$59,$80,$13,$98,$00,$c2,$94,$43,$72,$5e,$41,$43,$68,$8f,$43,$72,$5e,$41,$43,$68,$80,$1c,$99,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$31,$31,$35,$31,$32,$38,$30,$30,$0d,$a3,$8f,$8a,$4c,$66,$76,$77,$60,$80,$0e,$9a,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$13,$9b,$00,$c2,$9d,$95,$3f,$05,$76,$79,$55,$78,$54,$0d,$a3,$8f,$41,$76,$80,$15,$9c,$00,$c2,$98,$95,$3f,$08,$42,$51,$73,$49,$44,$51,$7a,$54,$0d,$a3,$8f,$48,$80,$1b,$9d,$00,$c2,$9b,$96,$95,$50,$6c,$4f,$6f,$75,$a3,$8f,$3f,$09,$32,$38,$30,$30,$33,$34,$32,$39,$33,$0d,$80,$1c,$9e,$00,$c2,$a2,$95,$3f,$0a,$31,$35,$36,$31,$34,$30,$39,$39,$33,$32,$0d,$a3,$8f,$41,$5d,$44,$53,$66,$4c,$80,$0f,$9f,$00,$c2,$9a,$95,$4a,$52,$5b,$49,$74,$a3,$8f,$41,$80,$1c,$a0,$00,$c2,$a2,$95,$3f,$0a,$2d,$36,$33,$39,$30,$31,$38,$33,$31,$36,$0d,$a3,$8f,$8a,$66,$45,$6a,$55,$4c,$80,$1e,$a1,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$35,$31,$36,$31,$36,$39,$33,$39,$39,$0d,$a3,$8f,$8a,$41,$5a,$57,$6e,$62,$77,$80,$13,$a2,$00,$c2,$94,$42,$52,$62,$4a,$50,$43,$8f,$42,$52,$62,$4a,$50,$43,$80,$13,$a3,$00,$c2,$94,$43,$77,$4a,$7e,$50,$7f,$8f,$43,$77,$4a,$7e,$50,$7f,$80,$14,$a4,$00,$c2,$9e,$95,$43,$58,$45,$55,$55,$7d,$a3,$8f,$67,$7a,$6a,$6a,$42,$80,$14,$a5,$00,$c2,$8a,$8a,$41,$58,$67,$76,$70,$6e,$8f,$41,$58,$67,$76,$70,$6e,$80,$15,$a6,$00,$c2,$99,$95,$41,$65,$61,$73,$7b,$41,$a3,$8f,$41,$65,$61,$73,$7b,$41,$80,$14,$a7,$00,$c2,$99,$95,$8a,$4c,$6b,$5d,$5f,$47,$a3,$8f,$4c,$6b,$5d,$5f,$47,$80,$0f,$a8,$00,$c2,$98,$95,$3f,$02,$4a,$6b,$0d,$a3,$8f,$42,$80,$13,$a9,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$aa,$00,$c2,$94,$43,$41,$5c,$69,$7d,$59,$8f,$43,$41,$5c,$69,$7d,$59,$80,$10,$ab,$00,$c2,$9c,$96,$95,$41,$48,$a3,$8f,$3f,$01,$48,$0d,$80,$0e,$ac,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$10,$ad,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$14,$ae,$00,$c2,$8a,$8a,$41,$75,$43,$41,$5e,$56,$8f,$41,$75,$43,$41,$5e,$56,$80,$14,$af,$00,$c2,$9e,$95,$43,$70,$76,$7e,$4f,$42,$a3,$8f,$4f,$49,$41,$70,$7d,$80,$1c,$b0,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$30,$30,$33,$32,$31,$36,$39,$36,$0d,$a3,$8f,$41,$4d,$60,$55,$56,$60,$80,$13,$b1,$00,$c2,$99,$95,$5a,$72,$4c,$77,$62,$a3,$8f,$5a,$72,$4c,$77,$62,$80,$10,$b2,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$14,$b3,$00,$c2,$8a,$41,$5e,$4e,$5a,$66,$51,$8f,$8a,$41,$5e,$4e,$5a,$66,$51,$80,$0e,$b4,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$0e,$b5,$00,$c2,$84,$95,$9f,$89,$4e,$a3,$8f,$41,$49,$80,$13,$b6,$00,$c2,$94,$43,$5c,$74,$5f,$7d,$56,$8f,$43,$5c,$74,$5f,$7d,$56,$80,$10,$b7,$00,$c2,$9c,$96,$95,$41,$46,$a3,$8f,$3f,$01,$46,$0d,$80,$0e,$b8,$00,$c2,$84,$95,$9f,$89,$4f,$a3,$8f,$41,$4a,$80,$11,$b9,$00,$c2,$94,$50,$5a,$5e,$68,$6c,$8f,$50,$5a,$5e,$68,$6c,$80,$10,$ba,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$12,$bb,$00,$c2,$8a,$4b,$51,$57,$48,$70,$8f,$8a,$4b,$51,$57,$48,$70,$80,$0f,$bc,$00,$c2,$9a,$95,$55,$4a,$55,$45,$61,$a3,$8f,$41,$80,$0e,$bd,$00,$c2,$84,$95,$9f,$89,$50,$a3,$8f,$41,$4b,$80,$14,$be,$00,$c2,$8a,$8a,$41,$55,$76,$78,$6f,$7d,$8f,$41,$55,$76,$78,$6f,$7d,$80,$13,$bf,$00,$c2,$94,$42,$43,$44,$71,$66,$48,$8f,$42,$43,$44,$71,$66,$48,$80,$1c,$c0,$00,$c2,$a2,$95,$3f,$0a,$32,$31,$32,$37,$31,$38,$35,$34,$34,$34,$0d,$a3,$8f,$41,$7e,$72,$64,$58,$64,$80,$14,$c1,$00,$c2,$8a,$41,$62,$58,$71,$62,$61,$8f,$8a,$41,$62,$58,$71,$62,$61,$80,$0e,$c2,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$1b,$c3,$00,$c2,$a2,$95,$3f,$0a,$31,$30,$35,$30,$35,$34,$37,$32,$32,$38,$0d,$a3,$8f,$7e,$67,$61,$50,$5c,$80,$10,$c4,$00,$c2,$98,$95,$3f,$03,$73,$4a,$51,$0d,$a3,$8f,$43,$80,$11,$c5,$00,$c2,$9a,$95,$8a,$5f,$78,$42,$4c,$53,$a3,$8f,$8a,$41,$80,$15,$c6,$00,$c2,$9e,$95,$42,$77,$5d,$67,$66,$7b,$a3,$8f,$41,$48,$62,$58,$59,$44,$80,$13,$c7,$00,$c2,$99,$95,$6a,$6c,$6b,$4b,$42,$a3,$8f,$6a,$6c,$6b,$4b,$42,$80,$14,$c8,$00,$c2,$8a,$41,$6c,$61,$7d,$40,$67,$8f,$8a,$41,$6c,$61,$7d,$40,$67,$80,$11,$c9,$00,$c2,$94,$43,$7d,$64,$78,$71,$8f,$43,$7d,$64,$78,$71,$80,$14,$ca,$00,$c2,$8a,$8a,$41,$71,$79,$4b,$5d,$65,$8f,$41,$71,$79,$4b,$5d,$65,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1F7E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2F7E -  -  -  -  EndTestInstance:
   18 00:2F7E -  -  -  -  		
   19 00:2F7E -  -  -  -  ; ***************************************************************************************
   20 00:2F7E -  -  -  -  ;
   21 00:2F7E -  -  -  -  ;									Changes and Updates
   22 00:2F7E -  -  -  -  ;
   23 00:2F7E -  -  -  -  ; ***************************************************************************************
   24 00:2F7E -  -  -  -  ;
   25 00:2F7E -  -  -  -  ;		Date			Notes
   26 00:2F7E -  -  -  -  ;		==== 			=====
   27 00:2F7E -  -  -  -  ;
   28 00:2F7E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:2F7E -  -  -  -  FinalAddress:
