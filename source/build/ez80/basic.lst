    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD B0 0E 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 53 20 00 		ld 		hl,EndTestInstance
   46 00:000C CD CC 08 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 60 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 85 02 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD B2 0E 00 		call 	SYSPrintChar
   56 00:0020 CD B1 0E 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 05 C3 42 
              03 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 06 C3 42 
              03 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  		
   78 00:005C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  
   81 00:0060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:0060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:0066 -  -  -  -  
   84 00:0066 -  -  -  -  AConvert: 									; used for address conversions.
   85 00:0066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006C -  -  -  -  		
   87 00:006C -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:006C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:007C -  -  -  -  
   90 00:007C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:007C 00 00 -  -  		.dw 	0
   92 00:007E -  -  -  -  
   93 00:007E -  -  -  -  ; ***************************************************************************************
   94 00:007E -  -  -  -  ;
   95 00:007E -  -  -  -  ;									Variable Information
   96 00:007E -  -  -  -  ;
   97 00:007E -  -  -  -  ; ***************************************************************************************
   98 00:007E -  -  -  -  
   99 00:007E -  -  -  -  VarNameStart: 								; first byte of name
  100 00:007E 00 00 00 00 		.dw 	0,0
  101 00:0082 -  -  -  -  VarHash: 									; name hash value
  102 00:0082 00 00 -  -  		.dw 	0		
  103 00:0084 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:0084 00 00 00 00 		.dw 	0,0
  105 00:0088 -  -  -  -  		
  106 00:0088 -  -  -  -  ; ***************************************************************************************
  107 00:0088 -  -  -  -  ;
  108 00:0088 -  -  -  -  ;										  Buffers
  109 00:0088 -  -  -  -  ;
  110 00:0088 -  -  -  -  ; ***************************************************************************************
  111 00:0088 -  -  -  -  
  112 00:0088 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:0088 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:0098 -  -  -  -  
  115 00:0098 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:0098 00 00 -  -  		.dw 	0
  117 00:009A -  -  -  -  
  118 00:009A -  -  -  -  ConvertBuffer: 								; general usage
  119 00:009A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:00DA -  -  -  -  
  121 00:00DA -  -  -  -  ; ***************************************************************************************
  122 00:00DA -  -  -  -  ;
  123 00:00DA -  -  -  -  ;									Changes and Updates
  124 00:00DA -  -  -  -  ;
  125 00:00DA -  -  -  -  ; ***************************************************************************************
  126 00:00DA -  -  -  -  ;
  127 00:00DA -  -  -  -  ;		Date			Notes
  128 00:00DA -  -  -  -  ;		==== 			=====
  129 00:00DA -  -  -  -  ;
  130 00:00DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00DA -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00DA -  -  -  -  ; ***************************************************************************************
    2 00:00DA -  -  -  -  ; ***************************************************************************************
    3 00:00DA -  -  -  -  ;
    4 00:00DA -  -  -  -  ;		Name : 		assert.asm
    5 00:00DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DA -  -  -  -  ;		Reviewed :	No
    8 00:00DA -  -  -  -  ;		Purpose :	Assert command
    9 00:00DA -  -  -  -  ;
   10 00:00DA -  -  -  -  ; ***************************************************************************************
   11 00:00DA -  -  -  -  ; ***************************************************************************************
   12 00:00DA -  -  -  -  
   13 00:00DA -  -  -  -  ; ***************************************************************************************
   14 00:00DA -  -  -  -  ;
   15 00:00DA -  -  -  -  ;									ASSERT command
   16 00:00DA -  -  -  -  ;
   17 00:00DA -  -  -  -  ; ***************************************************************************************
   18 00:00DA -  -  -  -  
   19 00:00DA -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00DA CD 75 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00DE 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00E4 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00E5 3E 01 C3 42 
              03 00 -  -  		ERR_ASSERT
   24 00:00EB -  -  -  -  
   25 00:00EB -  -  -  -  ; ***************************************************************************************
   26 00:00EB -  -  -  -  ;
   27 00:00EB -  -  -  -  ;									Changes and Updates
   28 00:00EB -  -  -  -  ;
   29 00:00EB -  -  -  -  ; ***************************************************************************************
   30 00:00EB -  -  -  -  ;
   31 00:00EB -  -  -  -  ;		Date			Notes
   32 00:00EB -  -  -  -  ;		==== 			=====
   33 00:00EB -  -  -  -  ;
   34 00:00EB -  -  -  -  ; ***************************************************************************************
   35 00:00EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:00EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00EB -  -  -  -  ; ***************************************************************************************
    2 00:00EB -  -  -  -  ; ***************************************************************************************
    3 00:00EB -  -  -  -  ;
    4 00:00EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00EB -  -  -  -  ;		Reviewed :	No
    8 00:00EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00EB -  -  -  -  ;
   10 00:00EB -  -  -  -  ; ***************************************************************************************
   11 00:00EB -  -  -  -  ; ***************************************************************************************
   12 00:00EB -  -  -  -  
   13 00:00EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00EB -  -  -  -  BadCmd_To: 			;; [to]
   18 00:00EB C3 AC 03 00 		jp 		SyntaxError
   19 00:00EF -  -  -  -  
   20 00:00EF -  -  -  -  ; ***************************************************************************************
   21 00:00EF -  -  -  -  ;
   22 00:00EF -  -  -  -  ;									Changes and Updates
   23 00:00EF -  -  -  -  ;
   24 00:00EF -  -  -  -  ; ***************************************************************************************
   25 00:00EF -  -  -  -  ;
   26 00:00EF -  -  -  -  ;		Date			Notes
   27 00:00EF -  -  -  -  ;		==== 			=====
   28 00:00EF -  -  -  -  ;
   29 00:00EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00EF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00EF -  -  -  -  ; ***************************************************************************************
    2 00:00EF -  -  -  -  ; ***************************************************************************************
    3 00:00EF -  -  -  -  ;
    4 00:00EF -  -  -  -  ;		Name : 		colon.asm
    5 00:00EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00EF -  -  -  -  ;		Reviewed :	No
    8 00:00EF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00EF -  -  -  -  ;
   10 00:00EF -  -  -  -  ; ***************************************************************************************
   11 00:00EF -  -  -  -  ; ***************************************************************************************
   12 00:00EF -  -  -  -  
   13 00:00EF -  -  -  -  ; ***************************************************************************************
   14 00:00EF -  -  -  -  ;
   15 00:00EF -  -  -  -  ;								Colon command, this is ignored.
   16 00:00EF -  -  -  -  ;
   17 00:00EF -  -  -  -  ; ***************************************************************************************
   18 00:00EF -  -  -  -  
   19 00:00EF -  -  -  -  Command_Colon: 	;; [:]
   20 00:00EF C9 -  -  -  		ret
   21 00:00F0 -  -  -  -  
   22 00:00F0 -  -  -  -  ; ***************************************************************************************
   23 00:00F0 -  -  -  -  ;
   24 00:00F0 -  -  -  -  ;									Changes and Updates
   25 00:00F0 -  -  -  -  ;
   26 00:00F0 -  -  -  -  ; ***************************************************************************************
   27 00:00F0 -  -  -  -  ;
   28 00:00F0 -  -  -  -  ;		Date			Notes
   29 00:00F0 -  -  -  -  ;		==== 			=====
   30 00:00F0 -  -  -  -  ;
   31 00:00F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F0 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F0 -  -  -  -  ; ***************************************************************************************
    2 00:00F0 -  -  -  -  ; ***************************************************************************************
    3 00:00F0 -  -  -  -  ;
    4 00:00F0 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F0 -  -  -  -  ;		Reviewed :	No
    8 00:00F0 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F0 -  -  -  -  ;
   10 00:00F0 -  -  -  -  ; ***************************************************************************************
   11 00:00F0 -  -  -  -  ; ***************************************************************************************
   12 00:00F0 -  -  -  -  
   13 00:00F0 -  -  -  -  ; ***************************************************************************************
   14 00:00F0 -  -  -  -  ;
   15 00:00F0 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:00F0 -  -  -  -  ;	
   17 00:00F0 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:00F0 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:00F0 -  -  -  -  ;								(can be comma chained)
   20 00:00F0 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:00F0 -  -  -  -  ;
   22 00:00F0 -  -  -  -  ; ***************************************************************************************
   23 00:00F0 -  -  -  -  
   24 00:00F0 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:00F0 -  -  -  -  		;
   26 00:00F0 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:00F0 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:00F0 -  -  -  -  		;
   29 00:00F0 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:00F2 D1 -  -  -  		pop 	de
   31 00:00F3 -  -  -  -  		;
   32 00:00F3 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:00F6 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:00F8 D2 AC 03 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:00FC -  -  -  -  _DISkip:
   36 00:00FC DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:00FE DD 7E 00 -  		ld 		a,(ix+0)
   38 00:0101 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:0103 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:0105 -  -  -  -  		;
   41 00:0105 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:0108 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:010A F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:010B CC 6C 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:010F F1 -  -  -  		pop 	af
   46 00:0110 C4 24 01 00 		call 	nz,DimensionAllocate
   47 00:0114 -  -  -  -  		;
   48 00:0114 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:0117 FE A6 -  -  		cp 		KWD_COMMA
   50 00:0119 C0 -  -  -  		ret 	nz
   51 00:011A DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:011C 18 D2 -  -  		jr 		Command_DIM
   53 00:011E -  -  -  -  
   54 00:011E -  -  -  -  _CDError:
   55 00:011E 3E 04 C3 42 
              03 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:0124 -  -  -  -  
   57 00:0124 -  -  -  -  ; ***************************************************************************************
   58 00:0124 -  -  -  -  ;
   59 00:0124 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:0124 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:0124 -  -  -  -  ;
   62 00:0124 -  -  -  -  ; ***************************************************************************************
   63 00:0124 -  -  -  -  
   64 00:0124 -  -  -  -  DimensionAllocate:
   65 00:0124 D5 -  -  -  		push 	de 							; save start on stack
   66 00:0125 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:0127 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:0129 32 7C 00 00 		ld 		(AllowAutoCreate),a
   69 00:012D CD 39 09 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:0131 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:0133 28 E9 -  -  		jr 		z,_CDError
   72 00:0135 CB 41 -  -  		bit 	CIsString,c
   73 00:0137 20 E5 -  -  		jr 		nz,_CDError
   74 00:0139 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:013B E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:013C 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:013E CD 36 03 00 		call 	CheckNextA 					; check for [
   78 00:0142 CD 75 05 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:0146 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:0148 CD 36 03 00 		call 	CheckNextA 					; check for ]
   81 00:014C 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:014D 7C -  -  -  		ld 		a,h
   83 00:014E B5 -  -  -  		or 		l
   84 00:014F 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:0151 D9 -  -  -  		exx
   86 00:0152 23 -  -  -  		inc 	hl
   87 00:0153 D9 -  -  -  		exx
   88 00:0154 -  -  -  -  _DANoCarry:
   89 00:0154 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:0155 7C -  -  -  		ld 		a,h
   91 00:0156 B5 -  -  -  		or 		l
   92 00:0157 D9 -  -  -  		exx
   93 00:0158 20 C4 -  -  		jr 		nz,_CDError
   94 00:015A CD 5B 08 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:015E EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:015F E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:0160 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:0166 AF -  -  -  		xor 	a 							; autocreate off
   99 00:0167 32 7C 00 00 		ld 		(AllowAutoCreate),a
  100 00:016B C9 -  -  -  		ret
  101 00:016C -  -  -  -  
  102 00:016C -  -  -  -  ; ***************************************************************************************
  103 00:016C -  -  -  -  ;
  104 00:016C -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:016C -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:016C -  -  -  -  ;
  107 00:016C -  -  -  -  ; ***************************************************************************************
  108 00:016C -  -  -  -  
  109 00:016C -  -  -  -  DimensionArray:
  110 00:016C D5 -  -  -  		push 	de 							; save start on stack.
  111 00:016D -  -  -  -  		;
  112 00:016D CD 75 05 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:0171 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:0172 E6 FC -  -  		and 	$FC
  115 00:0174 D9 -  -  -  		exx
  116 00:0175 B4 -  -  -  		or 		h
  117 00:0176 B5 -  -  -  		or 		l
  118 00:0177 D9 -  -  -  		exx
  119 00:0178 20 A4 -  -  		jr 		nz,_CDError
  120 00:017A -  -  -  -  		;
  121 00:017A DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:017C E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:017D -  -  -  -  		;
  124 00:017D CD 94 09 00 		call 	VariableInformation 		; get information about this array
  125 00:0181 CD D0 09 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:0185 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:0187 -  -  -  -  		;
  128 00:0187 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:0188 E5 -  -  -  		push 	hl
  130 00:0189 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:018A 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:018B 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:018C 29 -  -  -  		add 	hl,hl
  134 00:018D CD F6 08 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:0191 -  -  -  -  		;
  136 00:0191 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:0192 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:0196 09 -  -  -  		add 	hl,bc
  139 00:0197 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:019D DD E1 -  -  		pop 	ix 							; restore end position
  141 00:019F C9 -  -  -  		ret		
  142 00:01A0 -  -  -  -  
  143 00:01A0 -  -  -  -  
  144 00:01A0 -  -  -  -  ; ***************************************************************************************
  145 00:01A0 -  -  -  -  ;
  146 00:01A0 -  -  -  -  ;									Changes and Updates
  147 00:01A0 -  -  -  -  ;
  148 00:01A0 -  -  -  -  ; ***************************************************************************************
  149 00:01A0 -  -  -  -  ;
  150 00:01A0 -  -  -  -  ;		Date			Notes
  151 00:01A0 -  -  -  -  ;		==== 			=====
  152 00:01A0 -  -  -  -  ;
  153 00:01A0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:01A0 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:01A0 -  -  -  -  ; ***************************************************************************************
    2 00:01A0 -  -  -  -  ; ***************************************************************************************
    3 00:01A0 -  -  -  -  ;
    4 00:01A0 -  -  -  -  ;		Name : 		end.asm
    5 00:01A0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A0 -  -  -  -  ;		Reviewed :	No
    8 00:01A0 -  -  -  -  ;		Purpose :	End command
    9 00:01A0 -  -  -  -  ;
   10 00:01A0 -  -  -  -  ; ***************************************************************************************
   11 00:01A0 -  -  -  -  ; ***************************************************************************************
   12 00:01A0 -  -  -  -  
   13 00:01A0 -  -  -  -  ; ***************************************************************************************
   14 00:01A0 -  -  -  -  ;
   15 00:01A0 -  -  -  -  ;										END command
   16 00:01A0 -  -  -  -  ;
   17 00:01A0 -  -  -  -  ; ***************************************************************************************
   18 00:01A0 -  -  -  -  
   19 00:01A0 -  -  -  -  Command_END: 	;; [end]
   20 00:01A0 3E 00 C3 42 
              03 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:01A6 -  -  -  -  
   22 00:01A6 -  -  -  -  ; ***************************************************************************************
   23 00:01A6 -  -  -  -  ;
   24 00:01A6 -  -  -  -  ;									Changes and Updates
   25 00:01A6 -  -  -  -  ;
   26 00:01A6 -  -  -  -  ; ***************************************************************************************
   27 00:01A6 -  -  -  -  ;
   28 00:01A6 -  -  -  -  ;		Date			Notes
   29 00:01A6 -  -  -  -  ;		==== 			=====
   30 00:01A6 -  -  -  -  ;
   31 00:01A6 -  -  -  -  ; ***************************************************************************************
   32 00:01A6 -  -  -  -  		
Listing for file "_build.asm"
   18 00:01A6 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:01A6 -  -  -  -  ; ***************************************************************************************
    2 00:01A6 -  -  -  -  ; ***************************************************************************************
    3 00:01A6 -  -  -  -  ;
    4 00:01A6 -  -  -  -  ;		Name : 		endofline.asm
    5 00:01A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A6 -  -  -  -  ;		Reviewed :	None
    8 00:01A6 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:01A6 -  -  -  -  ;
   10 00:01A6 -  -  -  -  ; ***************************************************************************************
   11 00:01A6 -  -  -  -  ; ***************************************************************************************
   12 00:01A6 -  -  -  -  
   13 00:01A6 -  -  -  -  ; ***************************************************************************************
   14 00:01A6 -  -  -  -  ;
   15 00:01A6 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:01A6 -  -  -  -  ;
   17 00:01A6 -  -  -  -  ; ***************************************************************************************
   18 00:01A6 -  -  -  -  
   19 00:01A6 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:01A6 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:01AB 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:01AF DD 5E 00 -  		ld 		e,(ix+0)
   23 00:01B2 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:01B4 -  -  -  -  		;
   25 00:01B4 ED 7B 5C 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:01B9 C3 98 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:01BD -  -  -  -  
   28 00:01BD -  -  -  -  ; ***************************************************************************************
   29 00:01BD -  -  -  -  ;
   30 00:01BD -  -  -  -  ;									Changes and Updates
   31 00:01BD -  -  -  -  ;
   32 00:01BD -  -  -  -  ; ***************************************************************************************
   33 00:01BD -  -  -  -  ;
   34 00:01BD -  -  -  -  ;		Date			Notes
   35 00:01BD -  -  -  -  ;		==== 			=====
   36 00:01BD -  -  -  -  ;
   37 00:01BD -  -  -  -  ; ***************************************************************************************
   38 00:01BD -  -  -  -  		
Listing for file "_build.asm"
   19 00:01BD -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:01BD -  -  -  -  ; ***************************************************************************************
    2 00:01BD -  -  -  -  ; ***************************************************************************************
    3 00:01BD -  -  -  -  ;
    4 00:01BD -  -  -  -  ;		Name : 		let.asm
    5 00:01BD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01BD -  -  -  -  ;		Date : 		4th June 2022
    7 00:01BD -  -  -  -  ;		Reviewed :	No
    8 00:01BD -  -  -  -  ;		Purpose :	Assignment statement
    9 00:01BD -  -  -  -  ;
   10 00:01BD -  -  -  -  ; ***************************************************************************************
   11 00:01BD -  -  -  -  ; ***************************************************************************************
   12 00:01BD -  -  -  -  
   13 00:01BD -  -  -  -  ; ***************************************************************************************
   14 00:01BD -  -  -  -  ;
   15 00:01BD -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:01BD -  -  -  -  ;
   17 00:01BD -  -  -  -  ; ***************************************************************************************
   18 00:01BD -  -  -  -  
   19 00:01BD -  -  -  -  Command_LET: 	;; [let]
   20 00:01BD DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:01C0 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:01C2 28 2F -  -  		jr 		z,_CLString
   23 00:01C4 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:01C6 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:01C8 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:01CA 32 7C 00 00 		ld 		(AllowAutoCreate),a
   27 00:01CE -  -  -  -  _CLNoAuto:
   28 00:01CE 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01D0 CD F7 04 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01D4 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01D6 CA AC 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01DA E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01DB C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01DC AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01DD 32 7C 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01E1 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01E3 CD 36 03 00 		call 	CheckNextA
   38 00:01E7 -  -  -  -  
   39 00:01E7 CD 6D 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01EB -  -  -  -  
   41 00:01EB D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01EC 43 -  -  -  		ld 		b,e 						
   43 00:01ED D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01EE -  -  -  -  		;
   45 00:01EE -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01EE -  -  -  -  		;
   47 00:01EE CD FB 01 00 		call 	WriteHLToDE
   48 00:01F2 C9 -  -  -  		ret
   49 00:01F3 -  -  -  -  		;
   50 00:01F3 -  -  -  -  		; 		String assignment code.
   51 00:01F3 -  -  -  -  		;
   52 00:01F3 -  -  -  -  _CLString:
   53 00:01F3 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:01FB -  -  -  -  
   55 00:01FB -  -  -  -  ; ***************************************************************************************
   56 00:01FB -  -  -  -  ;
   57 00:01FB -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:01FB -  -  -  -  ;
   59 00:01FB -  -  -  -  ; ***************************************************************************************
   60 00:01FB -  -  -  -  
   61 00:01FB -  -  -  -  WriteHLToDE:
   62 00:01FB CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:01FD C2 A0 03 00 		jp 		nz,TypeMismatch
   64 00:0201 -  -  -  -  		;
   65 00:0201 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:0201 -  -  -  -  		;		
   67 00:0201 -  -  -  -  _WHDWriteNumber:
   68 00:0201 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:0202 D9 -  -  -  		exx
   70 00:0203 EB -  -  -  		ex 		de,hl
   71 00:0204 D9 -  -  -  		exx
   72 00:0205 -  -  -  -  
   73 00:0205 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:0206 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:0207 72 -  -  -  		ld 		(hl),d
   76 00:0208 23 -  -  -  		inc 	hl
   77 00:0209 E5 -  -  -  		push 	hl
   78 00:020A D9 -  -  -  		exx
   79 00:020B E1 -  -  -  		pop 	hl
   80 00:020C 73 -  -  -  		ld 		(hl),e
   81 00:020D 23 -  -  -  		inc 	hl
   82 00:020E 72 -  -  -  		ld 		(hl),d
   83 00:020F D9 -  -  -  		exx
   84 00:0210 -  -  -  -  
   85 00:0210 C9 -  -  -  		ret
   86 00:0211 -  -  -  -  
   87 00:0211 -  -  -  -  ; ***************************************************************************************
   88 00:0211 -  -  -  -  ;
   89 00:0211 -  -  -  -  ;									Changes and Updates
   90 00:0211 -  -  -  -  ;
   91 00:0211 -  -  -  -  ; ***************************************************************************************
   92 00:0211 -  -  -  -  ;
   93 00:0211 -  -  -  -  ;		Date			Notes
   94 00:0211 -  -  -  -  ;		==== 			=====
   95 00:0211 -  -  -  -  ;
   96 00:0211 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:0211 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0211 -  -  -  -  ; ***************************************************************************************
    2 00:0211 -  -  -  -  ; ***************************************************************************************
    3 00:0211 -  -  -  -  ;
    4 00:0211 -  -  -  -  ;		Name : 		print.asm
    5 00:0211 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0211 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0211 -  -  -  -  ;		Reviewed :	No
    8 00:0211 -  -  -  -  ;		Purpose :	Print command
    9 00:0211 -  -  -  -  ;
   10 00:0211 -  -  -  -  ; ***************************************************************************************
   11 00:0211 -  -  -  -  ; ***************************************************************************************
   12 00:0211 -  -  -  -  
   13 00:0211 -  -  -  -  ; ***************************************************************************************
   14 00:0211 -  -  -  -  ;
   15 00:0211 -  -  -  -  ;										PRINT command
   16 00:0211 -  -  -  -  ;
   17 00:0211 -  -  -  -  ; ***************************************************************************************
   18 00:0211 -  -  -  -  
   19 00:0211 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0211 -  -  -  -  		;
   21 00:0211 -  -  -  -  		;		Main loop
   22 00:0211 -  -  -  -  		;
   23 00:0211 -  -  -  -  _CPRLoop:
   24 00:0211 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:0214 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:0216 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:0218 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:021A 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:021C FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:021E 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:0220 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:0222 28 2C -  -  		jr 		z,_CPRTab
   33 00:0224 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:0226 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:0228 -  -  -  -  		;
   36 00:0228 CD 6D 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:022C CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:022E 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:0230 -  -  -  -  		;
   40 00:0230 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:0232 -  -  -  -  _CPRPrintNumber:
   42 00:0232 F5 -  -  -  		push 	af 							; print leading space
   43 00:0233 3E 20 -  -  		ld 		a,' '
   44 00:0235 CD B2 0E 00 		call 	SYSPrintChar
   45 00:0239 F1 -  -  -  		pop 	af
   46 00:023A 01 9A 00 00 		ld  	bc,ConvertBuffer
   47 00:023E C5 -  -  -  		push 	bc
   48 00:023F CD 63 0E 00 		call 	Int32ToString 				; convert to string
   49 00:0243 E1 -  -  -  		pop 	hl
   50 00:0244 -  -  -  -  		;
   51 00:0244 -  -  -  -  		; 		Print text at HL.
   52 00:0244 -  -  -  -  		;
   53 00:0244 -  -  -  -  _CPRPrintHL:
   54 00:0244 CD EB 08 00 		call 	PrintStringAtHL 			; print string out
   55 00:0248 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:024A -  -  -  -  		;
   57 00:024A -  -  -  -  		; 		New line (')
   58 00:024A -  -  -  -  		;
   59 00:024A -  -  -  -  _CPRNewLine:
   60 00:024A CD B3 0E 00 		call 	SYSPrintCRLF
   61 00:024E 18 06 -  -  		jr 		_CPRCheckNext
   62 00:0250 -  -  -  -  		;
   63 00:0250 -  -  -  -  		; 		Tab command (,)
   64 00:0250 -  -  -  -  		;
   65 00:0250 -  -  -  -  _CPRTab:
   66 00:0250 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:0252 CD B2 0E 00 		call 	SYSPrintChar
   68 00:0256 -  -  -  -  		;
   69 00:0256 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:0256 -  -  -  -  		;
   71 00:0256 -  -  -  -  _CPRCheckNext:
   72 00:0256 DD 23 -  -  		inc 	ix 							; consume current
   73 00:0258 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:025B FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:025D C8 -  -  -  		ret 	z
   76 00:025E FE A7 -  -  		cp 		KWD_COLON
   77 00:0260 C8 -  -  -  		ret 	z
   78 00:0261 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:0263 -  -  -  -  		;
   80 00:0263 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:0263 -  -  -  -  		;
   82 00:0263 -  -  -  -  _CPRExitNL:
   83 00:0263 CD B3 0E 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:0267 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:0268 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0268 -  -  -  -  ; ***************************************************************************************
    2 00:0268 -  -  -  -  ; ***************************************************************************************
    3 00:0268 -  -  -  -  ;
    4 00:0268 -  -  -  -  ;		Name : 		rem.asm
    5 00:0268 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0268 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0268 -  -  -  -  ;		Reviewed :	No
    8 00:0268 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0268 -  -  -  -  ;
   10 00:0268 -  -  -  -  ; ***************************************************************************************
   11 00:0268 -  -  -  -  ; ***************************************************************************************
   12 00:0268 -  -  -  -  
   13 00:0268 -  -  -  -  ; ***************************************************************************************
   14 00:0268 -  -  -  -  ;
   15 00:0268 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0268 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0268 -  -  -  -  ;
   18 00:0268 -  -  -  -  ; ***************************************************************************************
   19 00:0268 -  -  -  -  
   20 00:0268 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0268 -  -  -  -  Command_REM2: 	;; [']
   22 00:0268 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:026B DD 23 -  -  		inc 	ix
   24 00:026D FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:026F C8 -  -  -  		ret 	z
   26 00:0270 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:0272 C8 -  -  -  		ret 	z
   28 00:0273 FE 3F -  -  		cp 		STRING_MARKER
   29 00:0275 C2 AC 03 00 		jp 		nz,SyntaxError
   30 00:0279 -  -  -  -  		;		
   31 00:0279 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:027D DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0280 13 -  -  -  		inc 	de 
   34 00:0281 13 -  -  -  		inc 	de
   35 00:0282 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:0284 C9 -  -  -  		ret
   37 00:0285 -  -  -  -  
   38 00:0285 -  -  -  -  ; ***************************************************************************************
   39 00:0285 -  -  -  -  ;
   40 00:0285 -  -  -  -  ;									Changes and Updates
   41 00:0285 -  -  -  -  ;
   42 00:0285 -  -  -  -  ; ***************************************************************************************
   43 00:0285 -  -  -  -  ;
   44 00:0285 -  -  -  -  ;		Date			Notes
   45 00:0285 -  -  -  -  ;		==== 			=====
   46 00:0285 -  -  -  -  ;
   47 00:0285 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:0285 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:0285 -  -  -  -  ; ***************************************************************************************
    2 00:0285 -  -  -  -  ; ***************************************************************************************
    3 00:0285 -  -  -  -  ;
    4 00:0285 -  -  -  -  ;		Name : 		run.asm
    5 00:0285 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0285 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0285 -  -  -  -  ;		Reviewed :	No
    8 00:0285 -  -  -  -  ;		Purpose :	Run command
    9 00:0285 -  -  -  -  ;
   10 00:0285 -  -  -  -  ; ***************************************************************************************
   11 00:0285 -  -  -  -  ; ***************************************************************************************
   12 00:0285 -  -  -  -  
   13 00:0285 -  -  -  -  ; ***************************************************************************************
   14 00:0285 -  -  -  -  ;
   15 00:0285 -  -  -  -  ;										RUN command
   16 00:0285 -  -  -  -  ;
   17 00:0285 -  -  -  -  ; ***************************************************************************************
   18 00:0285 -  -  -  -  
   19 00:0285 -  -  -  -  Command_RUN: 	;; [run]
   20 00:0285 CD 7D 08 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:0289 -  -  -  -  
   22 00:0289 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:028E ED 73 5C 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:0293 AF -  -  -  		xor 	a
   25 00:0294 32 7C 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:0298 -  -  -  -  		;
   27 00:0298 -  -  -  -  		; 		New line at IX.
   28 00:0298 -  -  -  -  		;
   29 00:0298 -  -  -  -  CRNewLine:
   30 00:0298 DD 22 58 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:029D -  -  -  -  		;
   32 00:029D DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:02A0 B7 -  -  -  		or 		a
   34 00:02A1 CA A0 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:02A5 -  -  -  -  		;
   36 00:02A5 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:02A7 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:02A9 DD 23 -  -  		inc 	ix
   39 00:02AB -  -  -  -  		;
   40 00:02AB -  -  -  -  		; 		New command at IX
   41 00:02AB -  -  -  -  		;
   42 00:02AB -  -  -  -  _CRNewCommand:	
   43 00:02AB DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:02AE B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:02AF F2 EA 02 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:02B3 -  -  -  -  		;
   47 00:02B3 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:02B5 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:02B7 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:02B9 D2 DA 02 00 		jp 		nc,_CRAlternateLets
   51 00:02BD -  -  -  -  		;
   52 00:02BD -  -  -  -  _CRDoCommand:		
   53 00:02BD E6 7F 21 00 
              00 00 6F 29 
              29 11 6C 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:02D2 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:02D4 CD 60 00 00 		call 	JumpCode 					; call the routine.
   56 00:02D8 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:02DA -  -  -  -  		;
   58 00:02DA -  -  -  -  		; 		Do CALL (HL)
   59 00:02DA -  -  -  -  		;
   60 00:02DA -  -  -  -  		;
   61 00:02DA -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:02DA -  -  -  -  		;		
   63 00:02DA -  -  -  -  _CRAlternateLets:		
   64 00:02DA FE 83 -  -  		cp 		KWD_PLING
   65 00:02DC 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:02DE FE 84 -  -  		cp 		KWD_QMARK
   67 00:02E0 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:02E2 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:02E4 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:02E6 C3 AC 03 00 		jp 		SyntaxError
   71 00:02EA -  -  -  -  		;
   72 00:02EA -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:02EA -  -  -  -  		;
   74 00:02EA -  -  -  -  _CRAssignmentHandler:		
   75 00:02EA FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:02EC D2 AC 03 00 		jp 		nc,SyntaxError
   77 00:02F0 -  -  -  -  _CRAssignmentLet:		
   78 00:02F0 CD BD 01 00 		call	Command_LET 				; do LET.
   79 00:02F4 C3 AB 02 00 		jp 		_CRNewCommand
   80 00:02F8 -  -  -  -  
   81 00:02F8 -  -  -  -  ; ***************************************************************************************
   82 00:02F8 -  -  -  -  ;
   83 00:02F8 -  -  -  -  ;									Changes and Updates
   84 00:02F8 -  -  -  -  ;
   85 00:02F8 -  -  -  -  ; ***************************************************************************************
   86 00:02F8 -  -  -  -  ;
   87 00:02F8 -  -  -  -  ;		Date			Notes
   88 00:02F8 -  -  -  -  ;		==== 			=====
   89 00:02F8 -  -  -  -  ;
   90 00:02F8 -  -  -  -  ; ***************************************************************************************
   91 00:02F8 -  -  -  -  		
Listing for file "_build.asm"
   23 00:02F8 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:02F8 -  -  -  -  ; ***************************************************************************************
    2 00:02F8 -  -  -  -  ; ***************************************************************************************
    3 00:02F8 -  -  -  -  ;
    4 00:02F8 -  -  -  -  ;		Name : 		stop.asm
    5 00:02F8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02F8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02F8 -  -  -  -  ;		Reviewed :	No
    8 00:02F8 -  -  -  -  ;		Purpose :	Stop command
    9 00:02F8 -  -  -  -  ;
   10 00:02F8 -  -  -  -  ; ***************************************************************************************
   11 00:02F8 -  -  -  -  ; ***************************************************************************************
   12 00:02F8 -  -  -  -  
   13 00:02F8 -  -  -  -  ; ***************************************************************************************
   14 00:02F8 -  -  -  -  ;
   15 00:02F8 -  -  -  -  ;										STOP command
   16 00:02F8 -  -  -  -  ;
   17 00:02F8 -  -  -  -  ; ***************************************************************************************
   18 00:02F8 -  -  -  -  
   19 00:02F8 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:02F8 3E 0D C3 42 
              03 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:02FE -  -  -  -  
   22 00:02FE -  -  -  -  ; ***************************************************************************************
   23 00:02FE -  -  -  -  ;
   24 00:02FE -  -  -  -  ;									Changes and Updates
   25 00:02FE -  -  -  -  ;
   26 00:02FE -  -  -  -  ; ***************************************************************************************
   27 00:02FE -  -  -  -  ;
   28 00:02FE -  -  -  -  ;		Date			Notes
   29 00:02FE -  -  -  -  ;		==== 			=====
   30 00:02FE -  -  -  -  ;
   31 00:02FE -  -  -  -  ; ***************************************************************************************
   32 00:02FE -  -  -  -  		
Listing for file "_build.asm"
   24 00:02FE -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:02FE -  -  -  -  ; ***************************************************************************************
    2 00:02FE -  -  -  -  ; ***************************************************************************************
    3 00:02FE -  -  -  -  ;
    4 00:02FE -  -  -  -  ;		Name : 		charcheck.asm
    5 00:02FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02FE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02FE -  -  -  -  ;		Reviewed :	No
    8 00:02FE -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:02FE -  -  -  -  ;
   10 00:02FE -  -  -  -  ; ***************************************************************************************
   11 00:02FE -  -  -  -  ; ***************************************************************************************
   12 00:02FE -  -  -  -  
   13 00:02FE -  -  -  -  ; ***************************************************************************************
   14 00:02FE -  -  -  -  ;
   15 00:02FE -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:02FE -  -  -  -  ;
   17 00:02FE -  -  -  -  ; ***************************************************************************************
   18 00:02FE -  -  -  -  
   19 00:02FE -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:02FE             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:02FE             		inc 	ix
   22 00:02FE             		cp 		ch 							; exit if matches
   23 00:02FE             		ret 	z
   24 00:02FE             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:02FE             		jp 		ErrorHandler
   26 00:02FE             #endmacro
   27 00:02FE -  -  -  -  
   28 00:02FE -  -  -  -  CheckLeftBracket:
   29 00:02FE DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 42 
              03 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:030C -  -  -  -  
   31 00:030C -  -  -  -  CheckRightBracket:
   32 00:030C DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 42 
              03 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:031A -  -  -  -  
   34 00:031A -  -  -  -  CheckDollar:
   35 00:031A DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 42 
              03 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0328 -  -  -  -  		
   37 00:0328 -  -  -  -  CheckComma:
   38 00:0328 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 42 
              03 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0336 -  -  -  -  
   40 00:0336 -  -  -  -  ; ***************************************************************************************
   41 00:0336 -  -  -  -  ;
   42 00:0336 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0336 -  -  -  -  ;
   44 00:0336 -  -  -  -  ; ***************************************************************************************
   45 00:0336 -  -  -  -  
   46 00:0336 -  -  -  -  CheckNextA:
   47 00:0336 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0339 DD 23 -  -  		inc 	ix 							; skip character
   49 00:033B C8 -  -  -  		ret 	z 							; yes, okay
   50 00:033C 3E 0E C3 42 
              03 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0342 -  -  -  -  		
   52 00:0342 -  -  -  -  ; ***************************************************************************************
   53 00:0342 -  -  -  -  ;
   54 00:0342 -  -  -  -  ;									Changes and Updates
   55 00:0342 -  -  -  -  ;
   56 00:0342 -  -  -  -  ; ***************************************************************************************
   57 00:0342 -  -  -  -  ;
   58 00:0342 -  -  -  -  ;		Date			Notes
   59 00:0342 -  -  -  -  ;		==== 			=====
   60 00:0342 -  -  -  -  ;
   61 00:0342 -  -  -  -  ; ***************************************************************************************
   62 00:0342 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0342 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0342 -  -  -  -  ; ***************************************************************************************
    2 00:0342 -  -  -  -  ; ***************************************************************************************
    3 00:0342 -  -  -  -  ;
    4 00:0342 -  -  -  -  ;		Name : 		errors.asm
    5 00:0342 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0342 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0342 -  -  -  -  ;		Reviewed :	No
    8 00:0342 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0342 -  -  -  -  ;
   10 00:0342 -  -  -  -  ; ***************************************************************************************
   11 00:0342 -  -  -  -  ; ***************************************************************************************
   12 00:0342 -  -  -  -  
   13 00:0342 -  -  -  -  ; ***************************************************************************************
   14 00:0342 -  -  -  -  ;
   15 00:0342 -  -  -  -  ;								Error handler, message A 
   16 00:0342 -  -  -  -  ;
   17 00:0342 -  -  -  -  ; ***************************************************************************************
   18 00:0342 -  -  -  -  
   19 00:0342 -  -  -  -  ErrorHandler:
   20 00:0342 F5 -  -  -  		push 	af 						; save error ID
   21 00:0343 -  -  -  -  
   22 00:0343 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0347 6F -  -  -  		ld 		l,a
   24 00:0348 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0349 29 -  -  -  		add 	hl,hl 		
   26 00:034A 11 31 0A 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:034E 19 -  -  -  		add 	hl,de
   28 00:034F ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:0351 CD EB 08 00 		call 	PrintStringAtHL
   30 00:0355 -  -  -  -  		;
   31 00:0355 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0356 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0357 28 2F -  -  		jr 		z,_EHExit
   34 00:0359 -  -  -  -  		;
   35 00:0359 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:035E DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:0361 B7 -  -  -  		or 		a
   38 00:0362 28 24 -  -  		jr 		z,_EHExit
   39 00:0364 -  -  -  -  
   40 00:0364 21 90 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0368 CD EB 08 00 		call 	PrintStringAtHL 
   42 00:036C -  -  -  -  		
   43 00:036C D9 -  -  -  		exx								; HL'HL = line number
   44 00:036D 21 00 00 00 		ld 		hl,$0000 		
   45 00:0371 D9 -  -  -  		exx 
   46 00:0372 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:0375 DD 66 02 -  		ld 		h,(ix+2)
   48 00:0378 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:037A 01 9A 00 00 		ld 		bc,ConvertBuffer
   50 00:037E CD 63 0E 00 		call 	Int32ToString
   51 00:0382 C5 -  -  -  		push 	bc
   52 00:0383 E1 -  -  -  		pop 	hl
   53 00:0384 CD EB 08 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0388 -  -  -  -  _EHExit:		
   55 00:0388 CD B3 0E 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:038C C3 1A 00 00 		jp 		WarmStart
   57 00:0390 -  -  -  -  
   58 00:0390 -  -  -  -  _EHAtText:
   59 00:0390 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:039A -  -  -  -  
   61 00:039A -  -  -  -  NotImplemented:
   62 00:039A 3E 05 C3 42 
              03 00 -  -  		ERR_DISABLED
   63 00:03A0 -  -  -  -  TypeMismatch:
   64 00:03A0 3E 02 C3 42 
              03 00 -  -  		ERR_BADTYPE
   65 00:03A6 -  -  -  -  BadValue:
   66 00:03A6 3E 03 C3 42 
              03 00 -  -  		ERR_BADVALUE
   67 00:03AC -  -  -  -  SyntaxError:
   68 00:03AC 3E 0E C3 42 
              03 00 -  -  		ERR_SYNTAX
   69 00:03B2 -  -  -  -  						
   70 00:03B2 -  -  -  -  ; ***************************************************************************************
   71 00:03B2 -  -  -  -  ;
   72 00:03B2 -  -  -  -  ;									Changes and Updates
   73 00:03B2 -  -  -  -  ;
   74 00:03B2 -  -  -  -  ; ***************************************************************************************
   75 00:03B2 -  -  -  -  ;
   76 00:03B2 -  -  -  -  ;		Date			Notes
   77 00:03B2 -  -  -  -  ;		==== 			=====
   78 00:03B2 -  -  -  -  ;
   79 00:03B2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:03B2 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:03B2 -  -  -  -  ; ***************************************************************************************
    2 00:03B2 -  -  -  -  ; ***************************************************************************************
    3 00:03B2 -  -  -  -  ;
    4 00:03B2 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:03B2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03B2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03B2 -  -  -  -  ;		Reviewed :	No
    8 00:03B2 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:03B2 -  -  -  -  ;
   10 00:03B2 -  -  -  -  ; ***************************************************************************************
   11 00:03B2 -  -  -  -  ; ***************************************************************************************
   12 00:03B2 -  -  -  -  
   13 00:03B2 -  -  -  -  ; ***************************************************************************************
   14 00:03B2 -  -  -  -  ;
   15 00:03B2 -  -  -  -  ; 									Addition
   16 00:03B2 -  -  -  -  ;
   17 00:03B2 -  -  -  -  ; ***************************************************************************************
   18 00:03B2 -  -  -  -  
   19 00:03B2 -  -  -  -  ALUAdd: 		;; [+]
   20 00:03B2 CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 E2 
              0D 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:03C0 -  -  -  -  
   22 00:03C0 -  -  -  -  ; ***************************************************************************************
   23 00:03C0 -  -  -  -  ;
   24 00:03C0 -  -  -  -  ; 									Subtraction
   25 00:03C0 -  -  -  -  ;
   26 00:03C0 -  -  -  -  ; ***************************************************************************************
   27 00:03C0 -  -  -  -  
   28 00:03C0 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:03C0 CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 EA 
              0D 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:03CE -  -  -  -  
   31 00:03CE -  -  -  -  ; ***************************************************************************************
   32 00:03CE -  -  -  -  ;
   33 00:03CE -  -  -  -  ; 									  Multiply
   34 00:03CE -  -  -  -  ;
   35 00:03CE -  -  -  -  ; ***************************************************************************************
   36 00:03CE -  -  -  -  
   37 00:03CE -  -  -  -  ALUMultiply: 	;; [*]
   38 00:03CE CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 A9 
              0D 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:03DC -  -  -  -  
   40 00:03DC -  -  -  -  ; ***************************************************************************************
   41 00:03DC -  -  -  -  ;
   42 00:03DC -  -  -  -  ; 									  Divide
   43 00:03DC -  -  -  -  ;
   44 00:03DC -  -  -  -  ; ***************************************************************************************
   45 00:03DC -  -  -  -  
   46 00:03DC -  -  -  -  ALUDivide: 	;; [/]
   47 00:03DC -  -  -  -  ALUDivide2:	;; [div]
   48 00:03DC CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 A9 
              0C 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:03EA -  -  -  -  
   50 00:03EA -  -  -  -  ; ***************************************************************************************
   51 00:03EA -  -  -  -  ;
   52 00:03EA -  -  -  -  ; 									  Modulus
   53 00:03EA -  -  -  -  ;
   54 00:03EA -  -  -  -  ; ***************************************************************************************
   55 00:03EA -  -  -  -  
   56 00:03EA -  -  -  -  ALUModulus: 	;; [mod]
   57 00:03EA CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 AC 
              0C 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:03F8 -  -  -  -  
   59 00:03F8 -  -  -  -  ; ***************************************************************************************
   60 00:03F8 -  -  -  -  ;
   61 00:03F8 -  -  -  -  ; 									  Logical
   62 00:03F8 -  -  -  -  ;
   63 00:03F8 -  -  -  -  ; ***************************************************************************************
   64 00:03F8 -  -  -  -  
   65 00:03F8 -  -  -  -  ALUAnd: 		;; [and]
   66 00:03F8 CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 F4 
              0D 00 -  -  		IntegerDispatch(Int32And)
   67 00:0406 -  -  -  -  
   68 00:0406 -  -  -  -  ALUOr: 			;; [or]
   69 00:0406 CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 01 
              0E 00 -  -  		IntegerDispatch(Int32Or)
   70 00:0414 -  -  -  -  
   71 00:0414 -  -  -  -  ALUXor: 		;; [eor]
   72 00:0414 CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 0E 
              0E 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:0422 -  -  -  -  
   74 00:0422 -  -  -  -  ; ***************************************************************************************
   75 00:0422 -  -  -  -  ;
   76 00:0422 -  -  -  -  ;									Changes and Updates
   77 00:0422 -  -  -  -  ;
   78 00:0422 -  -  -  -  ; ***************************************************************************************
   79 00:0422 -  -  -  -  ;
   80 00:0422 -  -  -  -  ;		Date			Notes
   81 00:0422 -  -  -  -  ;		==== 			=====
   82 00:0422 -  -  -  -  ;
   83 00:0422 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:0422 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:0422 -  -  -  -  ; ***************************************************************************************
    2 00:0422 -  -  -  -  ; ***************************************************************************************
    3 00:0422 -  -  -  -  ;
    4 00:0422 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:0422 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0422 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0422 -  -  -  -  ;		Reviewed :	No
    8 00:0422 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:0422 -  -  -  -  ;
   10 00:0422 -  -  -  -  ; ***************************************************************************************
   11 00:0422 -  -  -  -  ; ***************************************************************************************
   12 00:0422 -  -  -  -  
   13 00:0422 -  -  -  -  ; ***************************************************************************************
   14 00:0422 -  -  -  -  ;
   15 00:0422 -  -  -  -  ; 									<l> <op> <r>
   16 00:0422 -  -  -  -  ;
   17 00:0422 -  -  -  -  ; ***************************************************************************************
   18 00:0422 -  -  -  -  
   19 00:0422 -  -  -  -  ALULongReference:			;; [!]
   20 00:0422 CD 32 04 00 		call 	BRGetAddress 				; calculate address
   21 00:0426 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0428 CB F9 -  -  		set 	CIsReference,c
   23 00:042A C9 -  -  -  		ret
   24 00:042B -  -  -  -  
   25 00:042B -  -  -  -  ALUByteReference: 			;; [?]
   26 00:042B CD 22 04 00 		call 	ALULongReference
   27 00:042F CB F1 -  -  		set 	CIsByteReference,c
   28 00:0431 C9 -  -  -  		ret
   29 00:0432 -  -  -  -  
   30 00:0432 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0432 CD CF 04 00 
              78 B1 C2 A0 
              03 00 C3 40 
              04 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0440 -  -  -  -  _BRGAMain:		
   33 00:0440 CD E2 0D 00 		call 	Int32Add 					; address in HL'HL
   34 00:0444 CD D5 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0448 C9 -  -  -  		ret
   36 00:0449 -  -  -  -  
   37 00:0449 -  -  -  -  ; ***************************************************************************************
   38 00:0449 -  -  -  -  ;
   39 00:0449 -  -  -  -  ;									Changes and Updates
   40 00:0449 -  -  -  -  ;
   41 00:0449 -  -  -  -  ; ***************************************************************************************
   42 00:0449 -  -  -  -  ;
   43 00:0449 -  -  -  -  ;		Date			Notes
   44 00:0449 -  -  -  -  ;		==== 			=====
   45 00:0449 -  -  -  -  ;
   46 00:0449 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:0449 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0449 -  -  -  -  ; ***************************************************************************************
    2 00:0449 -  -  -  -  ; ***************************************************************************************
    3 00:0449 -  -  -  -  ;
    4 00:0449 -  -  -  -  ;		Name : 		compare.asm
    5 00:0449 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0449 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0449 -  -  -  -  ;		Reviewed :	No
    8 00:0449 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0449 -  -  -  -  ;
   10 00:0449 -  -  -  -  ; ***************************************************************************************
   11 00:0449 -  -  -  -  ; ***************************************************************************************
   12 00:0449 -  -  -  -  
   13 00:0449 -  -  -  -  #macro compare_equals(n)
   14 00:0449             		call 	CompareBaseCode
   15 00:0449             		cp 		n
   16 00:0449             		jr 		z,UnaryInt32True
   17 00:0449             		jr 		UnaryInt32False
   18 00:0449             #endmacro
   19 00:0449 -  -  -  -  
   20 00:0449 -  -  -  -  #macro compare_not_equals(n)
   21 00:0449             		call 	CompareBaseCode
   22 00:0449             		cp 		n
   23 00:0449             		jr 		nz,UnaryInt32True
   24 00:0449             		jr 		UnaryInt32False
   25 00:0449             #endmacro
   26 00:0449 -  -  -  -  
   27 00:0449 -  -  -  -  ; ***************************************************************************************
   28 00:0449 -  -  -  -  ;
   29 00:0449 -  -  -  -  ; 								Return True/False
   30 00:0449 -  -  -  -  ;
   31 00:0449 -  -  -  -  ; ***************************************************************************************
   32 00:0449 -  -  -  -  
   33 00:0449 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0449 3E FF -  -  		ld 		a,255
   35 00:044B 18 01 -  -  		jr 		_Int32Logical
   36 00:044D -  -  -  -  UnaryInt32False: ;; [false]
   37 00:044D AF -  -  -  		xor 	a
   38 00:044E -  -  -  -  _Int32Logical:
   39 00:044E 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:044F 67 -  -  -  		ld 		h,a
   41 00:0450 D9 -  -  -  		exx
   42 00:0451 6F -  -  -  		ld 		l,a
   43 00:0452 67 -  -  -  		ld 		h,a
   44 00:0453 D9 -  -  -  		exx
   45 00:0454 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0456 C9 -  -  -  		ret
   47 00:0457 -  -  -  -  
   48 00:0457 -  -  -  -  ; ***************************************************************************************
   49 00:0457 -  -  -  -  ;
   50 00:0457 -  -  -  -  ; 										> = < (compare == value)
   51 00:0457 -  -  -  -  ;
   52 00:0457 -  -  -  -  ; ***************************************************************************************
   53 00:0457 -  -  -  -  
   54 00:0457 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0457 CD 93 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:0461 -  -  -  -  
   57 00:0461 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:0461 CD 93 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:046B -  -  -  -  
   60 00:046B -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:046B CD 93 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:0475 -  -  -  -  
   63 00:0475 -  -  -  -  ; ***************************************************************************************
   64 00:0475 -  -  -  -  ;
   65 00:0475 -  -  -  -  ; 										> = < (compare <> value)
   66 00:0475 -  -  -  -  ;
   67 00:0475 -  -  -  -  ; ***************************************************************************************
   68 00:0475 -  -  -  -  
   69 00:0475 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:0475 CD 93 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:047F -  -  -  -  
   72 00:047F -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:047F CD 93 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:0489 -  -  -  -  
   75 00:0489 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:0489 CD 93 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:0493 -  -  -  -  
   78 00:0493 -  -  -  -  ; ***************************************************************************************
   79 00:0493 -  -  -  -  ;
   80 00:0493 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:0493 -  -  -  -  ;
   82 00:0493 -  -  -  -  ; ***************************************************************************************
   83 00:0493 -  -  -  -  
   84 00:0493 -  -  -  -  CompareBaseCode:
   85 00:0493 CD CF 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0497 -  -  -  -  
   87 00:0497 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0498 A1 -  -  -  		and 	c
   89 00:0499 CB 47 -  -  		bit 	CIsString,a 
   90 00:049B C2 AD 04 00 		jp 		nz,StringCompare
   91 00:049F -  -  -  -  
   92 00:049F 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:04A0 B1 -  -  -  		or 		c
   94 00:04A1 CB 47 -  -  		bit 	CIsString,a 
   95 00:04A3 CA 22 0E 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:04A7 -  -  -  -  
   97 00:04A7 3E 02 C3 42 
              03 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:04AD -  -  -  -  ;
   99 00:04AD -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:04AD -  -  -  -  ;
  101 00:04AD -  -  -  -  StringCompare:
  102 00:04AD 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:04AE BE -  -  -  		cp 		(hl)
  104 00:04AF 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:04B1 20 08 -  -  		jr 		nz,_SCLess
  106 00:04B3 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:04B4 23 -  -  -  		inc 	hl
  108 00:04B5 FE 20 -  -  		cp 		' '
  109 00:04B7 30 F4 -  -  		jr 		nc,StringCompare
  110 00:04B9 AF -  -  -  		xor 	a 							; return 0.
  111 00:04BA C9 -  -  -  		ret
  112 00:04BB -  -  -  -  
  113 00:04BB -  -  -  -  _SCLess:
  114 00:04BB 3E FF -  -  		ld 		a,$FF
  115 00:04BD C9 -  -  -  		ret
  116 00:04BE -  -  -  -  _SCGreater:
  117 00:04BE 3E 01 -  -  		ld 		a,1
  118 00:04C0 C9 -  -  -  		ret
  119 00:04C1 -  -  -  -  
  120 00:04C1 3E 0F C3 42 
              03 00 -  -  		ERR_TODO()
  121 00:04C7 -  -  -  -  
  122 00:04C7 -  -  -  -  ; ***************************************************************************************
  123 00:04C7 -  -  -  -  ;
  124 00:04C7 -  -  -  -  ;									Changes and Updates
  125 00:04C7 -  -  -  -  ;
  126 00:04C7 -  -  -  -  ; ***************************************************************************************
  127 00:04C7 -  -  -  -  ;
  128 00:04C7 -  -  -  -  ;		Date			Notes
  129 00:04C7 -  -  -  -  ;		==== 			=====
  130 00:04C7 -  -  -  -  ;
  131 00:04C7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:04C7 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:04C7 -  -  -  -  ; ***************************************************************************************
    2 00:04C7 -  -  -  -  ; ***************************************************************************************
    3 00:04C7 -  -  -  -  ;
    4 00:04C7 -  -  -  -  ;		Name : 		utility.asm
    5 00:04C7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04C7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04C7 -  -  -  -  ;		Reviewed :	No
    8 00:04C7 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:04C7 -  -  -  -  ;
   10 00:04C7 -  -  -  -  ; ***************************************************************************************
   11 00:04C7 -  -  -  -  ; ***************************************************************************************
   12 00:04C7 -  -  -  -  
   13 00:04C7 -  -  -  -  ; ***************************************************************************************
   14 00:04C7 -  -  -  -  ;
   15 00:04C7 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:04C7 -  -  -  -  ;
   17 00:04C7 -  -  -  -  ; ***************************************************************************************
   18 00:04C7 -  -  -  -  
   19 00:04C7 -  -  -  -  SwapHLDE:
   20 00:04C7 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:04C8 D9 -  -  -  			exx
   22 00:04C9 EB -  -  -  			ex 		de,hl
   23 00:04CA D9 -  -  -  			exx
   24 00:04CB 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:04CC 41 -  -  -  			ld 		b,c
   26 00:04CD 4F -  -  -  			ld 		c,a
   27 00:04CE C9 -  -  -  			ret
   28 00:04CF -  -  -  -  
   29 00:04CF -  -  -  -  ; ***************************************************************************************
   30 00:04CF -  -  -  -  ;
   31 00:04CF -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:04CF -  -  -  -  ;
   33 00:04CF -  -  -  -  ; ***************************************************************************************
   34 00:04CF -  -  -  -  
   35 00:04CF -  -  -  -  DereferenceBoth:
   36 00:04CF CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:04D1 C4 A8 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:04D5 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:04D7 C8 -  -  -  			ret 	z
   40 00:04D8 CD C7 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:04DC CD A8 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:04E0 CD C7 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:04E4 C9 -  -  -  			ret
   44 00:04E5 -  -  -  -  
   45 00:04E5 -  -  -  -  ; ***************************************************************************************
   46 00:04E5 -  -  -  -  ;
   47 00:04E5 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:04E5 -  -  -  -  ;
   49 00:04E5 -  -  -  -  ; ***************************************************************************************
   50 00:04E5 -  -  -  -  
   51 00:04E5 -  -  -  -  NegateHLHL:	
   52 00:04E5 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:04E7 C2 A0 03 00 			jp 		nz,TypeMismatch
   54 00:04EB CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:04ED C4 A8 05 00 			call 	nz,Dereference 			; if required.
   56 00:04F1 CD 4C 0E 00 			call 	Int32Negate
   57 00:04F5 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:04F6 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:04F6 -  -  -  -  ; ***************************************************************************************
    2 00:04F6 -  -  -  -  ; ***************************************************************************************
    3 00:04F6 -  -  -  -  ;
    4 00:04F6 -  -  -  -  ;		Name : 		expression.asm
    5 00:04F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04F6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04F6 -  -  -  -  ;		Reviewed :	None
    8 00:04F6 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:04F6 -  -  -  -  ;
   10 00:04F6 -  -  -  -  ; ***************************************************************************************
   11 00:04F6 -  -  -  -  ; ***************************************************************************************
   12 00:04F6 -  -  -  -  
   13 00:04F6 -  -  -  -  ; ***************************************************************************************
   14 00:04F6 -  -  -  -  ;
   15 00:04F6 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:04F6 -  -  -  -  ;
   17 00:04F6 -  -  -  -  ; ***************************************************************************************
   18 00:04F6 -  -  -  -  
   19 00:04F6 -  -  -  -  EvaluateAtPrecedence0:
   20 00:04F6 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:04F7 -  -  -  -  EvaluateAtPrecedence:
   22 00:04F7 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:04F8 -  -  -  -  		;
   24 00:04F8 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:04F8 -  -  -  -  		;
   26 00:04F8 CD 04 06 00 		call 	EvaluateTerm 				; get term
   27 00:04FC -  -  -  -  		;
   28 00:04FC -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:04FC -  -  -  -  		;
   30 00:04FC D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:04FD -  -  -  -  _EAPLoop:
   32 00:04FD DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:0500 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:0502 D8 -  -  -  		ret 	c
   35 00:0503 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:0505 D0 -  -  -  		ret 	nc
   37 00:0506 -  -  -  -  		;
   38 00:0506 -  -  -  -  		; 		Get the precedence.
   39 00:0506 -  -  -  -  		;
   40 00:0506 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0507 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0509 21 20 0A 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:050D B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:050E 6F -  -  -  		ld 		l,a
   45 00:050F 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:0510 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:0511 -  -  -  -  		;
   48 00:0511 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:0511 -  -  -  -  		;
   50 00:0511 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:0512 BB -  -  -  		cp 		e
   52 00:0513 D0 -  -  -  		ret 	nc
   53 00:0514 -  -  -  -  
   54 00:0514 -  -  -  -  		;
   55 00:0514 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:0514 -  -  -  -  		;
   57 00:0514 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0515 -  -  -  -  		;
   59 00:0515 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0518 F5 -  -  -  		push 	af
   61 00:0519 -  -  -  -  		;
   62 00:0519 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:051A D9 -  -  -  		exx 								; save HL'
   64 00:051B E5 -  -  -  		push 	hl
   65 00:051C D9 -  -  -  		exx 								
   66 00:051D E5 -  -  -  		push 	hl 							; save HL
   67 00:051E -  -  -  -  		;
   68 00:051E DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:0520 -  -  -  -  		;
   70 00:0520 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:0520 -  -  -  -  		;
   72 00:0520 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:0521 CD F7 04 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0525 -  -  -  -  		;
   75 00:0525 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0525 -  -  -  -  		;
   77 00:0525 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0526 -  -  -  -  
   79 00:0526 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0527 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0528 D9 -  -  -  		exx
   82 00:0529 EB -  -  -  		ex 		de,hl
   83 00:052A E1 -  -  -  		pop 	hl
   84 00:052B D9 -  -  -  		exx
   85 00:052C C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:052D 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:052E -  -  -  -  		;
   88 00:052E -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:052E -  -  -  -  		; 		is in B (type) DE'DE
   90 00:052E -  -  -  -  		;
   91 00:052E F1 -  -  -  		pop 	af 							; get operator in A
   92 00:052F -  -  -  -  		;
   93 00:052F -  -  -  -  		; 		Call the binary operator in A.
   94 00:052F -  -  -  -  		;
   95 00:052F D5 -  -  -  		push 	de
   96 00:0530 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0531 E6 7F 21 00 
              00 00 6F 29 
              29 11 6C 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0546 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0547 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0548 CD 60 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:054C -  -  -  -  		;
  102 00:054C D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:054D -  -  -  -  		;
  104 00:054D 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:054F -  -  -  -  
  106 00:054F -  -  -  -  ; ***************************************************************************************
  107 00:054F -  -  -  -  ;
  108 00:054F -  -  -  -  ;									Changes and Updates
  109 00:054F -  -  -  -  ;
  110 00:054F -  -  -  -  ; ***************************************************************************************
  111 00:054F -  -  -  -  ;
  112 00:054F -  -  -  -  ;		Date			Notes
  113 00:054F -  -  -  -  ;		==== 			=====
  114 00:054F -  -  -  -  ;
  115 00:054F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:054F -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:054F -  -  -  -  ; ***************************************************************************************
    2 00:054F -  -  -  -  ; ***************************************************************************************
    3 00:054F -  -  -  -  ;
    4 00:054F -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:054F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:054F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:054F -  -  -  -  ;		Reviewed :	No
    8 00:054F -  -  -  -  ;		Purpose :	Expression support functions
    9 00:054F -  -  -  -  ;
   10 00:054F -  -  -  -  ; ***************************************************************************************
   11 00:054F -  -  -  -  ; ***************************************************************************************
   12 00:054F -  -  -  -  
   13 00:054F -  -  -  -  ; ***************************************************************************************
   14 00:054F -  -  -  -  ;
   15 00:054F -  -  -  -  ; 								Evaluate an integer term
   16 00:054F -  -  -  -  ;
   17 00:054F -  -  -  -  ; ***************************************************************************************
   18 00:054F -  -  -  -  
   19 00:054F -  -  -  -  EvaluateIntegerTerm:
   20 00:054F CD 04 06 00 		call 	EvaluateTerm
   21 00:0553 CD A8 05 00 		call 	DeReference
   22 00:0557 CB 41 -  -  		bit 	CIsString,c
   23 00:0559 C8 -  -  -  		ret 	z
   24 00:055A C3 A0 03 00 		jp 		TypeMismatch
   25 00:055E -  -  -  -  
   26 00:055E -  -  -  -  ; ***************************************************************************************
   27 00:055E -  -  -  -  ;
   28 00:055E -  -  -  -  ; 								Evaluate a string term
   29 00:055E -  -  -  -  ;
   30 00:055E -  -  -  -  ; ***************************************************************************************
   31 00:055E -  -  -  -  
   32 00:055E -  -  -  -  EvaluateStringTerm:
   33 00:055E CD 04 06 00 		call 	EvaluateTerm
   34 00:0562 CD A8 05 00 		call 	DeReference
   35 00:0566 CB 41 -  -  		bit 	CIsString,c
   36 00:0568 C0 -  -  -  		ret 	nz
   37 00:0569 C3 A0 03 00 		jp 		TypeMismatch
   38 00:056D -  -  -  -  
   39 00:056D -  -  -  -  ; ***************************************************************************************
   40 00:056D -  -  -  -  ;
   41 00:056D -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:056D -  -  -  -  ;
   43 00:056D -  -  -  -  ; ***************************************************************************************
   44 00:056D -  -  -  -  
   45 00:056D -  -  -  -  EvaluateValue:
   46 00:056D CD F6 04 00 		call 	EvaluateAtPrecedence0
   47 00:0571 C3 A8 05 00 		jp 		Dereference
   48 00:0575 -  -  -  -  
   49 00:0575 -  -  -  -  ; ***************************************************************************************
   50 00:0575 -  -  -  -  ;
   51 00:0575 -  -  -  -  ; 									Evaluate a number
   52 00:0575 -  -  -  -  ;
   53 00:0575 -  -  -  -  ; ***************************************************************************************
   54 00:0575 -  -  -  -  
   55 00:0575 -  -  -  -  EvaluateInteger:
   56 00:0575 CD 6D 05 00 		call 	EvaluateValue
   57 00:0579 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:057B C8 -  -  -  		ret 	z
   59 00:057C C3 A0 03 00 		jp 		TypeMismatch
   60 00:0580 -  -  -  -  
   61 00:0580 -  -  -  -  ; ***************************************************************************************
   62 00:0580 -  -  -  -  ;
   63 00:0580 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:0580 -  -  -  -  ;
   65 00:0580 -  -  -  -  ; ***************************************************************************************
   66 00:0580 -  -  -  -  
   67 00:0580 -  -  -  -  Evaluate8BitInteger:
   68 00:0580 CD 75 05 00 		call 	EvaluateInteger
   69 00:0584 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:0585 7C -  -  -  		ld 		a,h
   71 00:0586 B5 -  -  -  		or 		l
   72 00:0587 D9 -  -  -  		exx 	
   73 00:0588 B4 -  -  -  		or 		h
   74 00:0589 C2 A6 03 00 		jp 		nz,BadValue
   75 00:058D 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:058E C9 -  -  -  		ret
   77 00:058F -  -  -  -  		
   78 00:058F -  -  -  -  ; ***************************************************************************************
   79 00:058F -  -  -  -  ;
   80 00:058F -  -  -  -  ; 									Evaluate a string
   81 00:058F -  -  -  -  ;
   82 00:058F -  -  -  -  ; ***************************************************************************************
   83 00:058F -  -  -  -  
   84 00:058F -  -  -  -  EvaluateStringOnly:
   85 00:058F CD 6D 05 00 		call 	EvaluateValue
   86 00:0593 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:0595 CA A0 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:0599 C9 -  -  -  		ret
   89 00:059A -  -  -  -  
   90 00:059A -  -  -  -  ; ***************************************************************************************
   91 00:059A -  -  -  -  ;
   92 00:059A -  -  -  -  ; 								Return 8/16 bit constant
   93 00:059A -  -  -  -  ;
   94 00:059A -  -  -  -  ; ***************************************************************************************
   95 00:059A -  -  -  -  
   96 00:059A -  -  -  -  Return8BitConstant:
   97 00:059A 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:059E 6F -  -  -  		ld 		l,a
   99 00:059F -  -  -  -  Return16BitConstant:
  100 00:059F D9 -  -  -  		exx 								; clear HL'
  101 00:05A0 21 00 00 00 		ld 		hl,0
  102 00:05A4 D9 -  -  -  		exx
  103 00:05A5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:05A7 C9 -  -  -  		ret
  105 00:05A8 -  -  -  -  
  106 00:05A8 -  -  -  -  ; ***************************************************************************************
  107 00:05A8 -  -  -  -  ;
  108 00:05A8 -  -  -  -  ;									Changes and Updates
  109 00:05A8 -  -  -  -  ;
  110 00:05A8 -  -  -  -  ; ***************************************************************************************
  111 00:05A8 -  -  -  -  ;
  112 00:05A8 -  -  -  -  ;		Date			Notes
  113 00:05A8 -  -  -  -  ;		==== 			=====
  114 00:05A8 -  -  -  -  ;
  115 00:05A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:05A8 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:05A8 -  -  -  -  ; ***************************************************************************************
    2 00:05A8 -  -  -  -  ; ***************************************************************************************
    3 00:05A8 -  -  -  -  ;
    4 00:05A8 -  -  -  -  ;		Name : 		reference.asm
    5 00:05A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05A8 -  -  -  -  ;		Date : 		1st May 2022
    7 00:05A8 -  -  -  -  ;		Reviewed :	No
    8 00:05A8 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:05A8 -  -  -  -  ;
   10 00:05A8 -  -  -  -  ; ***************************************************************************************
   11 00:05A8 -  -  -  -  ; ***************************************************************************************
   12 00:05A8 -  -  -  -  
   13 00:05A8 -  -  -  -  ; ***************************************************************************************
   14 00:05A8 -  -  -  -  ;
   15 00:05A8 -  -  -  -  ; 									Dereference HL'HL C
   16 00:05A8 -  -  -  -  ;
   17 00:05A8 -  -  -  -  ; ***************************************************************************************
   18 00:05A8 -  -  -  -  
   19 00:05A8 -  -  -  -  Dereference:
   20 00:05A8 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:05AA C8 -  -  -  		ret 	z
   22 00:05AB -  -  -  -  
   23 00:05AB CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:05AD -  -  -  -  		
   25 00:05AD CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:05AF 20 1E -  -  		jr 		nz,_DRInternal
   27 00:05B1 -  -  -  -  
   28 00:05B1 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:05B3 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:05B5 -  -  -  -  
   31 00:05B5 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:05B6 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:05B8 D9 -  -  -  		exx
   34 00:05B9 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:05BA 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:05BB 23 -  -  -  		inc  	hl
   37 00:05BC ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:05BE D9 -  -  -  		exx 								; fix back
   39 00:05BF C9 -  -  -  		ret
   40 00:05C0 -  -  -  -  
   41 00:05C0 -  -  -  -  _DeRefByte:		
   42 00:05C0 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:05C1 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:05C5 6F -  -  -  		ld	 	l,a
   45 00:05C6 D9 -  -  -  		exx
   46 00:05C7 21 00 00 00 		ld 		hl,$0000
   47 00:05CB D9 -  -  -  		exx
   48 00:05CC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:05CE C9 -  -  -  		ret
   50 00:05CF -  -  -  -  
   51 00:05CF -  -  -  -  _DRInternal:
   52 00:05CF 3E 05 C3 42 
              03 00 -  -  		ERR_DISABLED
   53 00:05D5 -  -  -  -  
   54 00:05D5 -  -  -  -  ; ***************************************************************************************
   55 00:05D5 -  -  -  -  ;
   56 00:05D5 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:05D5 -  -  -  -  ;
   58 00:05D5 -  -  -  -  ; ***************************************************************************************
   59 00:05D5 -  -  -  -  
   60 00:05D5 -  -  -  -  DRConvertHLHLToAddress:
   61 00:05D5 -  -  -  -  		#ifdef EZ80
   62 00:05D5 22 66 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:05D9 D9 -  -  -  		exx
   64 00:05DA 22 68 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:05DE 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:05E2 D9 -  -  -  		exx
   67 00:05E3 2A 66 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:05E7 -  -  -  -  		#endif
   69 00:05E7 C9 -  -  -  		ret
   70 00:05E8 -  -  -  -  
   71 00:05E8 -  -  -  -  ; ***************************************************************************************
   72 00:05E8 -  -  -  -  ;
   73 00:05E8 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:05E8 -  -  -  -  ;
   75 00:05E8 -  -  -  -  ; ***************************************************************************************
   76 00:05E8 -  -  -  -  
   77 00:05E8 -  -  -  -  DRConvertAddressToHLHL:
   78 00:05E8 -  -  -  -  		#ifdef EZ80
   79 00:05E8 22 66 00 00 		ld 		(AConvert),hl
   80 00:05EC 21 00 00 00 		ld 		hl,$0000
   81 00:05F0 22 69 00 00 		ld 		(AConvert+3),hl
   82 00:05F4 D9 -  -  -  		exx
   83 00:05F5 2A 68 00 00 		ld 		hl,(AConvert+2)
   84 00:05F9 D9 -  -  -  		exx
   85 00:05FA AF -  -  -  		xor 	a
   86 00:05FB 32 68 00 00 		ld 		(AConvert+2),a
   87 00:05FF 2A 66 00 00 		ld 		hl,(AConvert)
   88 00:0603 -  -  -  -  		#endif
   89 00:0603 C9 -  -  -  		ret
   90 00:0604 -  -  -  -  
   91 00:0604 -  -  -  -  ; ***************************************************************************************
   92 00:0604 -  -  -  -  ;
   93 00:0604 -  -  -  -  ;									Changes and Updates
   94 00:0604 -  -  -  -  ;
   95 00:0604 -  -  -  -  ; ***************************************************************************************
   96 00:0604 -  -  -  -  ;
   97 00:0604 -  -  -  -  ;		Date			Notes
   98 00:0604 -  -  -  -  ;		==== 			=====
   99 00:0604 -  -  -  -  ;
  100 00:0604 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:0604 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:0604 -  -  -  -  ; ***************************************************************************************
    2 00:0604 -  -  -  -  ; ***************************************************************************************
    3 00:0604 -  -  -  -  ;
    4 00:0604 -  -  -  -  ;		Name : 		term.asm
    5 00:0604 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0604 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0604 -  -  -  -  ;		Reviewed :	No
    8 00:0604 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:0604 -  -  -  -  ;
   10 00:0604 -  -  -  -  ; ***************************************************************************************
   11 00:0604 -  -  -  -  ; ***************************************************************************************
   12 00:0604 -  -  -  -  
   13 00:0604 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:0604             		add_hlhl_16
   15 00:0604             		exx
   16 00:0604             		adc_hlhl_16
   17 00:0604             		exx
   18 00:0604             #endmacro
   19 00:0604 -  -  -  -  
   20 00:0604 -  -  -  -  ; ***************************************************************************************
   21 00:0604 -  -  -  -  ;
   22 00:0604 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:0604 -  -  -  -  ;
   24 00:0604 -  -  -  -  ; ***************************************************************************************
   25 00:0604 -  -  -  -  ;
   26 00:0604 -  -  -  -  ; 		Terms can be:
   27 00:0604 -  -  -  -  ;
   28 00:0604 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:0604 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:0604 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:0604 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:0604 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:0604 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:0604 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:0604 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:0604 -  -  -  -  ; 														reference of some sort.
   37 00:0604 -  -  -  -  ;
   38 00:0604 -  -  -  -  ; ***************************************************************************************
   39 00:0604 -  -  -  -  
   40 00:0604 -  -  -  -  EvaluateTerm:		
   41 00:0604 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0606 D9 -  -  -  		exx
   43 00:0607 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:060B D9 -  -  -  		exx
   45 00:060C 21 00 00 00 		ld 		hl,$0000		
   46 00:0610 -  -  -  -  		;
   47 00:0610 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:0613 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0615 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0617 DA CF 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:061B CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:061D C2 73 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:0621 -  -  -  -  		;
   54 00:0621 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:0621 -  -  -  -  		;
   56 00:0621 -  -  -  -  _ETIntegerConstant:
   57 00:0621 -  -  -  -  		;
   58 00:0621 -  -  -  -  _ETIntegerLoop:		
   59 00:0621 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0624 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0626 B5 -  -  -  		or 		l 							; or into L
   62 00:0627 6F -  -  -  		ld 		l,a
   63 00:0628 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:062A DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:062D C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:062F FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0631 D8 -  -  -  		ret 	c
   68 00:0632 -  -  -  -  
   69 00:0632 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0639 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0640 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0647 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:064E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0655 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:065C -  -  -  -  
   76 00:065C 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:065E -  -  -  -  		;
   78 00:065E -  -  -  -  		; 		Found the $3F string marker.
   79 00:065E -  -  -  -  		;
   80 00:065E -  -  -  -  _ETStringMarker:		
   81 00:065E DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:0660 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:0662 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:0664 E1 -  -  -  		pop 	hl
   85 00:0665 11 00 00 00 		ld 		de,$0000
   86 00:0669 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:066C DD 19 -  -  		add 	ix,de
   88 00:066E DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0670 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:0672 C9 -  -  -  		ret
   91 00:0673 -  -  -  -  		;
   92 00:0673 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:0673 -  -  -  -  		;
   94 00:0673 -  -  -  -  _ETFoundKeyword:
   95 00:0673 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:0675 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0677 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0679 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:067B 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:067D -  -  -  -  		;
  101 00:067D -  -  -  -  		;		Unary group 0
  102 00:067D -  -  -  -  		;
  103 00:067D E6 7F 21 00 
              00 00 6F 29 
              29 11 6C 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:0692 C3 60 00 00 		jp 		JumpCode 					; and go there.
  105 00:0696 -  -  -  -  
  106 00:0696 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0696 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0698 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:069A -  -  -  -  		;
  110 00:069A -  -  -  -  		; 		- term
  111 00:069A -  -  -  -  		;
  112 00:069A CD 4F 05 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:069E CD E5 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:06A2 C9 -  -  -  		ret
  115 00:06A3 -  -  -  -  		;
  116 00:06A3 -  -  -  -  		;		! ? indirection check
  117 00:06A3 -  -  -  -  		;
  118 00:06A3 -  -  -  -  _ETCheckIndirection:	
  119 00:06A3 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:06A5 28 06 -  -  		jr 		z,_ETIndirection
  121 00:06A7 FE 83 -  -  		cp 		KWD_PLING
  122 00:06A9 C2 AC 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:06AD -  -  -  -  		;
  124 00:06AD -  -  -  -  		; 		! ? indirection
  125 00:06AD -  -  -  -  		;
  126 00:06AD -  -  -  -  _ETIndirection:
  127 00:06AD F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:06AE CD 04 06 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:06B2 CD A8 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:06B6 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:06B8 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:06BA CD D5 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:06BE F1 -  -  -  		pop 	af 							; get type back
  134 00:06BF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:06C1 CB F9 -  -  		set 	CIsReference,c
  136 00:06C3 FE 83 -  -  		cp 		KWD_PLING
  137 00:06C5 C8 -  -  -  		ret 	z
  138 00:06C6 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:06C8 C9 -  -  -  		ret
  140 00:06C9 -  -  -  -  _ETStringIndirect:
  141 00:06C9 3E 02 C3 42 
              03 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:06CF -  -  -  -  		;
  143 00:06CF -  -  -  -  		; 		Found an identifier.
  144 00:06CF -  -  -  -  		;
  145 00:06CF -  -  -  -  _ETVariable:
  146 00:06CF CD 39 09 00 		call 	FindVariable 				; find the variable.
  147 00:06D3 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:06D4 3E 10 C3 42 
              03 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:06DA -  -  -  -  		
  150 00:06DA -  -  -  -  ; ***************************************************************************************
  151 00:06DA -  -  -  -  ;
  152 00:06DA -  -  -  -  ;									Changes and Updates
  153 00:06DA -  -  -  -  ;
  154 00:06DA -  -  -  -  ; ***************************************************************************************
  155 00:06DA -  -  -  -  ;
  156 00:06DA -  -  -  -  ;		Date			Notes
  157 00:06DA -  -  -  -  ;		==== 			=====
  158 00:06DA -  -  -  -  ;
  159 00:06DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:06DA -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:06DA -  -  -  -  ; ***************************************************************************************
    2 00:06DA -  -  -  -  ; ***************************************************************************************
    3 00:06DA -  -  -  -  ;
    4 00:06DA -  -  -  -  ;		Name : 		abs.asm
    5 00:06DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06DA -  -  -  -  ;		Reviewed :	No
    8 00:06DA -  -  -  -  ;		Purpose :	Absolute value 
    9 00:06DA -  -  -  -  ;
   10 00:06DA -  -  -  -  ; ***************************************************************************************
   11 00:06DA -  -  -  -  ; ***************************************************************************************
   12 00:06DA -  -  -  -  
   13 00:06DA -  -  -  -  ; ***************************************************************************************
   14 00:06DA -  -  -  -  ;
   15 00:06DA -  -  -  -  ;								abs( unary function
   16 00:06DA -  -  -  -  ;
   17 00:06DA -  -  -  -  ; ***************************************************************************************
   18 00:06DA -  -  -  -  
   19 00:06DA -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:06DA CD 4F 05 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:06DE D9 -  -  -  		exx 								; test MSB
   22 00:06DF CB 7C -  -  		bit 	7,h
   23 00:06E1 D9 -  -  -  		exx
   24 00:06E2 C4 E5 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:06E6 C9 -  -  -  		ret
   26 00:06E7 -  -  -  -  
   27 00:06E7 -  -  -  -  ; ***************************************************************************************
   28 00:06E7 -  -  -  -  ;
   29 00:06E7 -  -  -  -  ;									Changes and Updates
   30 00:06E7 -  -  -  -  ;
   31 00:06E7 -  -  -  -  ; ***************************************************************************************
   32 00:06E7 -  -  -  -  ;
   33 00:06E7 -  -  -  -  ;		Date			Notes
   34 00:06E7 -  -  -  -  ;		==== 			=====
   35 00:06E7 -  -  -  -  ;
   36 00:06E7 -  -  -  -  ; ***************************************************************************************
   37 00:06E7 -  -  -  -  		
Listing for file "_build.asm"
   35 00:06E7 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:06E7 -  -  -  -  ; ***************************************************************************************
    2 00:06E7 -  -  -  -  ; ***************************************************************************************
    3 00:06E7 -  -  -  -  ;
    4 00:06E7 -  -  -  -  ;		Name : 		asc.asm
    5 00:06E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06E7 -  -  -  -  ;		Reviewed :	No
    8 00:06E7 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:06E7 -  -  -  -  ;
   10 00:06E7 -  -  -  -  ; ***************************************************************************************
   11 00:06E7 -  -  -  -  ; ***************************************************************************************
   12 00:06E7 -  -  -  -  
   13 00:06E7 -  -  -  -  ; ***************************************************************************************
   14 00:06E7 -  -  -  -  ;
   15 00:06E7 -  -  -  -  ;								Asc unary function
   16 00:06E7 -  -  -  -  ;
   17 00:06E7 -  -  -  -  ; ***************************************************************************************
   18 00:06E7 -  -  -  -  
   19 00:06E7 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:06E7 CD 5E 05 00 		call	EvaluateStringTerm			; Get string
   21 00:06EB 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:06EC C3 9A 05 00 		jp 		Return8BitConstant
   23 00:06F0 -  -  -  -  
   24 00:06F0 -  -  -  -  ; ***************************************************************************************
   25 00:06F0 -  -  -  -  ;
   26 00:06F0 -  -  -  -  ;									Changes and Updates
   27 00:06F0 -  -  -  -  ;
   28 00:06F0 -  -  -  -  ; ***************************************************************************************
   29 00:06F0 -  -  -  -  ;
   30 00:06F0 -  -  -  -  ;		Date			Notes
   31 00:06F0 -  -  -  -  ;		==== 			=====
   32 00:06F0 -  -  -  -  ;
   33 00:06F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:06F0 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:06F0 -  -  -  -  ; ***************************************************************************************
    2 00:06F0 -  -  -  -  ; ***************************************************************************************
    3 00:06F0 -  -  -  -  ;
    4 00:06F0 -  -  -  -  ;		Name : 		chr.asm
    5 00:06F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06F0 -  -  -  -  ;		Reviewed :	No
    8 00:06F0 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:06F0 -  -  -  -  ;
   10 00:06F0 -  -  -  -  ; ***************************************************************************************
   11 00:06F0 -  -  -  -  ; ***************************************************************************************
   12 00:06F0 -  -  -  -  
   13 00:06F0 -  -  -  -  ; ***************************************************************************************
   14 00:06F0 -  -  -  -  ;
   15 00:06F0 -  -  -  -  ;								Chr$() unary function
   16 00:06F0 -  -  -  -  ;
   17 00:06F0 -  -  -  -  ; ***************************************************************************************
   18 00:06F0 -  -  -  -  
   19 00:06F0 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:06F0 CD 1A 03 00 		call 	CheckDollar
   21 00:06F4 CD 4F 05 00 		call 	EvaluateIntegerTerm
   22 00:06F8 7D -  -  -  		ld 		a,l 						; get character
   23 00:06F9 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:06FB 21 99 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:06FF 36 0D -  -  		ld 		(hl),13
   26 00:0701 2B -  -  -  		dec 	hl
   27 00:0702 77 -  -  -  		ld 		(hl),a
   28 00:0703 C9 -  -  -  		ret
   29 00:0704 -  -  -  -  
   30 00:0704 -  -  -  -  ; ***************************************************************************************
   31 00:0704 -  -  -  -  ;
   32 00:0704 -  -  -  -  ;									Changes and Updates
   33 00:0704 -  -  -  -  ;
   34 00:0704 -  -  -  -  ; ***************************************************************************************
   35 00:0704 -  -  -  -  ;
   36 00:0704 -  -  -  -  ;		Date			Notes
   37 00:0704 -  -  -  -  ;		==== 			=====
   38 00:0704 -  -  -  -  ;
   39 00:0704 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:0704 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:0704 -  -  -  -  ; ***************************************************************************************
    2 00:0704 -  -  -  -  ; ***************************************************************************************
    3 00:0704 -  -  -  -  ;
    4 00:0704 -  -  -  -  ;		Name : 		len.asm
    5 00:0704 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0704 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0704 -  -  -  -  ;		Reviewed :	None
    8 00:0704 -  -  -  -  ;		Purpose :	String Length
    9 00:0704 -  -  -  -  ;
   10 00:0704 -  -  -  -  ; ***************************************************************************************
   11 00:0704 -  -  -  -  ; ***************************************************************************************
   12 00:0704 -  -  -  -  
   13 00:0704 -  -  -  -  ; ***************************************************************************************
   14 00:0704 -  -  -  -  ;
   15 00:0704 -  -  -  -  ;								Len unary function
   16 00:0704 -  -  -  -  ;
   17 00:0704 -  -  -  -  ; ***************************************************************************************
   18 00:0704 -  -  -  -  
   19 00:0704 -  -  -  -  Unary_Len:	;; [len]
   20 00:0704 CD 5E 05 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0708 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0709 CD 4D 04 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:070D -  -  -  -  _ULCount:
   24 00:070D 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:070E FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:0710 D8 -  -  -  		ret 	c
   27 00:0711 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:0712 13 -  -  -  		inc 	de
   29 00:0713 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:0715 -  -  -  -  
   31 00:0715 -  -  -  -  ; ***************************************************************************************
   32 00:0715 -  -  -  -  ;
   33 00:0715 -  -  -  -  ;									Changes and Updates
   34 00:0715 -  -  -  -  ;
   35 00:0715 -  -  -  -  ; ***************************************************************************************
   36 00:0715 -  -  -  -  ;
   37 00:0715 -  -  -  -  ;		Date			Notes
   38 00:0715 -  -  -  -  ;		==== 			=====
   39 00:0715 -  -  -  -  ;
   40 00:0715 -  -  -  -  ; ***************************************************************************************
   41 00:0715 -  -  -  -  		
Listing for file "_build.asm"
   38 00:0715 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:0715 -  -  -  -  ; ***************************************************************************************
    2 00:0715 -  -  -  -  ; ***************************************************************************************
    3 00:0715 -  -  -  -  ;
    4 00:0715 -  -  -  -  ;		Name : 		makestring.asm
    5 00:0715 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0715 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0715 -  -  -  -  ;		Reviewed :	No
    8 00:0715 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:0715 -  -  -  -  ;
   10 00:0715 -  -  -  -  ; ***************************************************************************************
   11 00:0715 -  -  -  -  ; ***************************************************************************************
   12 00:0715 -  -  -  -  
   13 00:0715 -  -  -  -  ; ***************************************************************************************
   14 00:0715 -  -  -  -  ;
   15 00:0715 -  -  -  -  ;								Str$() unary function
   16 00:0715 -  -  -  -  ;
   17 00:0715 -  -  -  -  ; ***************************************************************************************
   18 00:0715 -  -  -  -  
   19 00:0715 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:0715 CD 4F 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0719 CD D5 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:071D 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:071F C9 -  -  -  		ret
   24 00:0720 -  -  -  -  
   25 00:0720 -  -  -  -  ; ***************************************************************************************
   26 00:0720 -  -  -  -  ;
   27 00:0720 -  -  -  -  ;									Changes and Updates
   28 00:0720 -  -  -  -  ;
   29 00:0720 -  -  -  -  ; ***************************************************************************************
   30 00:0720 -  -  -  -  ;
   31 00:0720 -  -  -  -  ;		Date			Notes
   32 00:0720 -  -  -  -  ;		==== 			=====
   33 00:0720 -  -  -  -  ;
   34 00:0720 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0720 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:0720 -  -  -  -  ; ***************************************************************************************
    2 00:0720 -  -  -  -  ; ***************************************************************************************
    3 00:0720 -  -  -  -  ;
    4 00:0720 -  -  -  -  ;		Name : 		not.asm
    5 00:0720 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0720 -  -  -  -  ;		Date : 		5th June 2023
    7 00:0720 -  -  -  -  ;		Reviewed :	No
    8 00:0720 -  -  -  -  ;		Purpose :	Logical not
    9 00:0720 -  -  -  -  ;
   10 00:0720 -  -  -  -  ; ***************************************************************************************
   11 00:0720 -  -  -  -  ; ***************************************************************************************
   12 00:0720 -  -  -  -  
   13 00:0720 -  -  -  -  ; ***************************************************************************************
   14 00:0720 -  -  -  -  ;
   15 00:0720 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:0720 -  -  -  -  ;
   17 00:0720 -  -  -  -  ; ***************************************************************************************
   18 00:0720 -  -  -  -  
   19 00:0720 -  -  -  -  Unary_Not:		;; [not]
   20 00:0720 CD 4F 05 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:0724 CD 2D 07 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0728 CD 2D 07 00 		call 	__UNSwap		
   23 00:072C C9 -  -  -  		ret
   24 00:072D -  -  -  -  
   25 00:072D -  -  -  -  __UNSwap:
   26 00:072D 7C -  -  -  		ld 		a,h
   27 00:072E 2F -  -  -  		cpl
   28 00:072F 67 -  -  -  		ld 		h,a
   29 00:0730 7D -  -  -  		ld 		a,l
   30 00:0731 2F -  -  -  		cpl 	
   31 00:0732 6F -  -  -  		ld 		l,a
   32 00:0733 D9 -  -  -  		exx
   33 00:0734 C9 -  -  -  		ret
   34 00:0735 -  -  -  -  
   35 00:0735 -  -  -  -  ; ***************************************************************************************
   36 00:0735 -  -  -  -  ;
   37 00:0735 -  -  -  -  ;									Changes and Updates
   38 00:0735 -  -  -  -  ;
   39 00:0735 -  -  -  -  ; ***************************************************************************************
   40 00:0735 -  -  -  -  ;
   41 00:0735 -  -  -  -  ;		Date			Notes
   42 00:0735 -  -  -  -  ;		==== 			=====
   43 00:0735 -  -  -  -  ;
   44 00:0735 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:0735 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0735 -  -  -  -  ; ***************************************************************************************
    2 00:0735 -  -  -  -  ; ***************************************************************************************
    3 00:0735 -  -  -  -  ;
    4 00:0735 -  -  -  -  ;		Name : 		page.asm
    5 00:0735 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0735 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0735 -  -  -  -  ;		Reviewed :	No
    8 00:0735 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0735 -  -  -  -  ;
   10 00:0735 -  -  -  -  ; ***************************************************************************************
   11 00:0735 -  -  -  -  ; ***************************************************************************************
   12 00:0735 -  -  -  -  
   13 00:0735 -  -  -  -  ; ***************************************************************************************
   14 00:0735 -  -  -  -  ;
   15 00:0735 -  -  -  -  ;							page unary function (no bracket)
   16 00:0735 -  -  -  -  ;
   17 00:0735 -  -  -  -  ; ***************************************************************************************
   18 00:0735 -  -  -  -  
   19 00:0735 -  -  -  -  Unary_Page:	;; [page]
   20 00:0735 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0739 D9 -  -  -  			exx
   22 00:073A 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:073E D9 -  -  -  			exx
   24 00:073F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0741 C9 -  -  -  			ret
   26 00:0742 -  -  -  -  
   27 00:0742 -  -  -  -  ; ***************************************************************************************
   28 00:0742 -  -  -  -  ;
   29 00:0742 -  -  -  -  ;									Changes and Updates
   30 00:0742 -  -  -  -  ;
   31 00:0742 -  -  -  -  ; ***************************************************************************************
   32 00:0742 -  -  -  -  ;
   33 00:0742 -  -  -  -  ;		Date			Notes
   34 00:0742 -  -  -  -  ;		==== 			=====
   35 00:0742 -  -  -  -  ;
   36 00:0742 -  -  -  -  ; ***************************************************************************************
   37 00:0742 -  -  -  -  			
Listing for file "_build.asm"
   41 00:0742 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0742 -  -  -  -  ; ***************************************************************************************
    2 00:0742 -  -  -  -  ; ***************************************************************************************
    3 00:0742 -  -  -  -  ;
    4 00:0742 -  -  -  -  ;		Name : 		random.asm
    5 00:0742 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0742 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0742 -  -  -  -  ;		Reviewed :	No
    8 00:0742 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0742 -  -  -  -  ;
   10 00:0742 -  -  -  -  ; ***************************************************************************************
   11 00:0742 -  -  -  -  ; ***************************************************************************************
   12 00:0742 -  -  -  -  
   13 00:0742 -  -  -  -  ; ***************************************************************************************
   14 00:0742 -  -  -  -  ;
   15 00:0742 -  -  -  -  ;								Random unary function
   16 00:0742 -  -  -  -  ;
   17 00:0742 -  -  -  -  ; ***************************************************************************************
   18 00:0742 -  -  -  -  
   19 00:0742 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0742 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:074A CD 4F 05 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:074E D9 -  -  -  		exx 								; is it -ve
   23 00:074F CB 7C -  -  		bit 	7,h
   24 00:0751 D9 -  -  -  		exx
   25 00:0752 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:0754 22 6C 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0758 D9 -  -  -  		exx
   28 00:0759 22 70 00 00 		ld 		(RandomSeed+4),hl
   29 00:075D D9 -  -  -  		exx
   30 00:075E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:0760 C9 -  -  -  		ret
   32 00:0761 -  -  -  -  _URDontSeed:		
   33 00:0761 -  -  -  -  
   34 00:0761 CD 1B 0E 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:0765 28 1C -  -  		jr 		z,_URFail
   36 00:0767 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0768 D9 -  -  -  		exx
   38 00:0769 E5 -  -  -  		push 	hl
   39 00:076A D9 -  -  -  		exx
   40 00:076B -  -  -  -  		;
   41 00:076B CD 94 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:076F D9 -  -  -  		exx
   43 00:0770 CD 94 07 00 		call 	URandomHL
   44 00:0774 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0776 D9 -  -  -  		exx
   46 00:0777 -  -  -  -  		;
   47 00:0777 D9 -  -  -  		exx 								; restore range.
   48 00:0778 D1 -  -  -  		pop 	de
   49 00:0779 D9 -  -  -  		exx
   50 00:077A D1 -  -  -  		pop 	de
   51 00:077B -  -  -  -  		;
   52 00:077B CD AC 0C 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:077F 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0780 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:0782 C9 -  -  -  		ret
   56 00:0783 -  -  -  -  _URFail:
   57 00:0783 3E 03 C3 42 
              03 00 -  -  		ERR_BADVALUE
   58 00:0789 -  -  -  -  ; ***************************************************************************************
   59 00:0789 -  -  -  -  ;
   60 00:0789 -  -  -  -  ; 									Push RNG off zero
   61 00:0789 -  -  -  -  ;
   62 00:0789 -  -  -  -  ; ***************************************************************************************
   63 00:0789 -  -  -  -  
   64 00:0789 -  -  -  -  UnaryRandomInitialise:
   65 00:0789 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:078B -  -  -  -  _URILoop:
   67 00:078B C5 -  -  -  		push 	bc
   68 00:078C CD 94 07 00 		call 	URandomHL
   69 00:0790 C1 -  -  -  		pop 	bc
   70 00:0791 10 F8 -  -  		djnz 	_URILoop
   71 00:0793 C9 -  -  -  		ret
   72 00:0794 -  -  -  -  
   73 00:0794 -  -  -  -  ; ***************************************************************************************
   74 00:0794 -  -  -  -  ;
   75 00:0794 -  -  -  -  ;							16 bit random number generator
   76 00:0794 -  -  -  -  ;
   77 00:0794 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:0794 -  -  -  -  ;		Actual author unspecified.
   79 00:0794 -  -  -  -  ;
   80 00:0794 -  -  -  -  ; ***************************************************************************************
   81 00:0794 -  -  -  -  
   82 00:0794 -  -  -  -  URandomHL:
   83 00:0794 2A 6C 00 00 	    ld 		hl,(RandomSeed)
   84 00:0798 ED 5B 70 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:079D 44 -  -  -  	    ld 		b,h
   86 00:079E 4D -  -  -  	    ld 		c,l
   87 00:079F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:07A4 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:07A9 2C -  -  -  	    inc 	l
   90 00:07AA 09 -  -  -  	    add 	hl,bc
   91 00:07AB 22 6C 00 00 	    ld 		(RandomSeed),hl
   92 00:07AF 2A 70 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:07B3 ED 5A -  -  	    adc 	hl,de
   94 00:07B5 22 70 00 00 	    ld 		(RandomSeed+4),hl
   95 00:07B9 EB -  -  -  	    ex 		de,hl
   96 00:07BA 2A 74 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:07BE ED 4B 78 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:07C3 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:07C8 ED 43 78 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:07CD 9F -  -  -  	    sbc 	a,a
  101 00:07CE E6 C5 -  -  	    and 	%11000101
  102 00:07D0 AD -  -  -  	    xor 	l
  103 00:07D1 6F -  -  -  	    ld 		l,a
  104 00:07D2 22 74 00 00 	    ld 		(RandomSeed+8),hl
  105 00:07D6 EB -  -  -  	    ex 		de,hl
  106 00:07D7 09 -  -  -  	    add 	hl,bc
  107 00:07D8 C9 -  -  -  	    ret		
  108 00:07D9 -  -  -  -  
  109 00:07D9 -  -  -  -  ; ***************************************************************************************
  110 00:07D9 -  -  -  -  ;
  111 00:07D9 -  -  -  -  ;									Changes and Updates
  112 00:07D9 -  -  -  -  ;
  113 00:07D9 -  -  -  -  ; ***************************************************************************************
  114 00:07D9 -  -  -  -  ;
  115 00:07D9 -  -  -  -  ;		Date			Notes
  116 00:07D9 -  -  -  -  ;		==== 			=====
  117 00:07D9 -  -  -  -  ;
  118 00:07D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:07D9 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:07D9 -  -  -  -  ; ***************************************************************************************
    2 00:07D9 -  -  -  -  ; ***************************************************************************************
    3 00:07D9 -  -  -  -  ;
    4 00:07D9 -  -  -  -  ;		Name : 		sgn.asm
    5 00:07D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07D9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07D9 -  -  -  -  ;		Reviewed :	No
    8 00:07D9 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:07D9 -  -  -  -  ;
   10 00:07D9 -  -  -  -  ; ***************************************************************************************
   11 00:07D9 -  -  -  -  ; ***************************************************************************************
   12 00:07D9 -  -  -  -  
   13 00:07D9 -  -  -  -  ; ***************************************************************************************
   14 00:07D9 -  -  -  -  ;
   15 00:07D9 -  -  -  -  ;								sgn unary function
   16 00:07D9 -  -  -  -  ;
   17 00:07D9 -  -  -  -  ; ***************************************************************************************
   18 00:07D9 -  -  -  -  
   19 00:07D9 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:07D9 CD 4F 05 00 		call	EvaluateIntegerTerm 		; get value
   21 00:07DD CD 1B 0E 00 		call 	Int32Zero 					; integer sgn() code
   22 00:07E1 CA 4D 04 00 		jp 		z,UnaryInt32False
   23 00:07E5 D9 -  -  -  		exx
   24 00:07E6 CB 7C -  -  		bit 	7,h
   25 00:07E8 D9 -  -  -  		exx
   26 00:07E9 C2 49 04 00 		jp 		nz,UnaryInt32True
   27 00:07ED 3E 01 -  -  		ld 		a,1
   28 00:07EF C3 9A 05 00 		jp 		Return8BitConstant
   29 00:07F3 -  -  -  -  
   30 00:07F3 -  -  -  -  ; ***************************************************************************************
   31 00:07F3 -  -  -  -  ;
   32 00:07F3 -  -  -  -  ;									Changes and Updates
   33 00:07F3 -  -  -  -  ;
   34 00:07F3 -  -  -  -  ; ***************************************************************************************
   35 00:07F3 -  -  -  -  ;
   36 00:07F3 -  -  -  -  ;		Date			Notes
   37 00:07F3 -  -  -  -  ;		==== 			=====
   38 00:07F3 -  -  -  -  ;
   39 00:07F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:07F3 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:07F3 -  -  -  -  ; ***************************************************************************************
    2 00:07F3 -  -  -  -  ; ***************************************************************************************
    3 00:07F3 -  -  -  -  ;
    4 00:07F3 -  -  -  -  ;		Name : 		simple.asm
    5 00:07F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07F3 -  -  -  -  ;		Reviewed :	No
    8 00:07F3 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:07F3 -  -  -  -  ;
   10 00:07F3 -  -  -  -  ; ***************************************************************************************
   11 00:07F3 -  -  -  -  ; ***************************************************************************************
   12 00:07F3 -  -  -  -  
   13 00:07F3 -  -  -  -  ; ***************************************************************************************
   14 00:07F3 -  -  -  -  ;
   15 00:07F3 -  -  -  -  ;								( unary function (think about it)
   16 00:07F3 -  -  -  -  ;
   17 00:07F3 -  -  -  -  ; ***************************************************************************************
   18 00:07F3 -  -  -  -  
   19 00:07F3 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:07F3 CD F6 04 00 		call 	EvaluateAtPrecedence0
   21 00:07F7 C3 0C 03 00 		jp  	CheckRightBracket
   22 00:07FB -  -  -  -  
   23 00:07FB -  -  -  -  ; ***************************************************************************************
   24 00:07FB -  -  -  -  ;
   25 00:07FB -  -  -  -  ;									Handle &x
   26 00:07FB -  -  -  -  ;
   27 00:07FB -  -  -  -  ; ***************************************************************************************
   28 00:07FB -  -  -  -  
   29 00:07FB -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:07FB DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:07FE E6 C0 -  -  		and 		$C0
   32 00:0800 FE 40 -  -  		cp 			$40
   33 00:0802 C2 AC 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0806 C3 04 06 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:080A -  -  -  -  
   36 00:080A -  -  -  -  ; ***************************************************************************************
   37 00:080A -  -  -  -  ;
   38 00:080A -  -  -  -  ;									Changes and Updates
   39 00:080A -  -  -  -  ;
   40 00:080A -  -  -  -  ; ***************************************************************************************
   41 00:080A -  -  -  -  ;
   42 00:080A -  -  -  -  ;		Date			Notes
   43 00:080A -  -  -  -  ;		==== 			=====
   44 00:080A -  -  -  -  ;
   45 00:080A -  -  -  -  ; ***************************************************************************************
   46 00:080A -  -  -  -  		
Listing for file "_build.asm"
   44 00:080A -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:080A -  -  -  -  ; ***************************************************************************************
    2 00:080A -  -  -  -  ; ***************************************************************************************
    3 00:080A -  -  -  -  ;
    4 00:080A -  -  -  -  ;		Name : 		str.asm
    5 00:080A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:080A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:080A -  -  -  -  ;		Reviewed :	No
    8 00:080A -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:080A -  -  -  -  ;
   10 00:080A -  -  -  -  ; ***************************************************************************************
   11 00:080A -  -  -  -  ; ***************************************************************************************
   12 00:080A -  -  -  -  
   13 00:080A -  -  -  -  ; ***************************************************************************************
   14 00:080A -  -  -  -  ;
   15 00:080A -  -  -  -  ;								Str$() unary function
   16 00:080A -  -  -  -  ;
   17 00:080A -  -  -  -  ; ***************************************************************************************
   18 00:080A -  -  -  -  
   19 00:080A -  -  -  -  Unary_Str:	;; [str]
   20 00:080A CD 1A 03 00 		call 	CheckDollar
   21 00:080E DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:0811 EE AC -  -  		xor		KWD_TILDE
   23 00:0813 F5 -  -  -  		push 	af
   24 00:0814 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:0816 DD 23 -  -  		inc 	ix
   26 00:0818 -  -  -  -  _USNotHex:		
   27 00:0818 CD 4F 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:081C 01 88 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:0820 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:0821 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:0823 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:0825 3E 10 -  -  		ld 		a,16
   33 00:0827 -  -  -  -  _USNotHex2:		
   34 00:0827 CD 63 0E 00 		call 	Int32ToString 				
   35 00:082B 21 88 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:082F 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:0831 C9 -  -  -  		ret
   38 00:0832 -  -  -  -  
   39 00:0832 -  -  -  -  ; ***************************************************************************************
   40 00:0832 -  -  -  -  ;
   41 00:0832 -  -  -  -  ;									Changes and Updates
   42 00:0832 -  -  -  -  ;
   43 00:0832 -  -  -  -  ; ***************************************************************************************
   44 00:0832 -  -  -  -  ;
   45 00:0832 -  -  -  -  ;		Date			Notes
   46 00:0832 -  -  -  -  ;		==== 			=====
   47 00:0832 -  -  -  -  ;
   48 00:0832 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:0832 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:0832 -  -  -  -  ; ***************************************************************************************
    2 00:0832 -  -  -  -  ; ***************************************************************************************
    3 00:0832 -  -  -  -  ;
    4 00:0832 -  -  -  -  ;		Name : 		time.asm
    5 00:0832 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0832 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0832 -  -  -  -  ;		Reviewed :	No
    8 00:0832 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:0832 -  -  -  -  ;
   10 00:0832 -  -  -  -  ; ***************************************************************************************
   11 00:0832 -  -  -  -  ; ***************************************************************************************
   12 00:0832 -  -  -  -  
   13 00:0832 -  -  -  -  ; ***************************************************************************************
   14 00:0832 -  -  -  -  ;
   15 00:0832 -  -  -  -  ;							Get system time in ms
   16 00:0832 -  -  -  -  ;
   17 00:0832 -  -  -  -  ; ***************************************************************************************
   18 00:0832 -  -  -  -  
   19 00:0832 -  -  -  -  Unary_Time:	;; [time]
   20 00:0832 CD B4 0E 00 			call 	SYSGetTimer
   21 00:0836 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0838 C9 -  -  -  			ret
   23 00:0839 -  -  -  -  
   24 00:0839 -  -  -  -  ; ***************************************************************************************
   25 00:0839 -  -  -  -  ;
   26 00:0839 -  -  -  -  ;									Changes and Updates
   27 00:0839 -  -  -  -  ;
   28 00:0839 -  -  -  -  ; ***************************************************************************************
   29 00:0839 -  -  -  -  ;
   30 00:0839 -  -  -  -  ;		Date			Notes
   31 00:0839 -  -  -  -  ;		==== 			=====
   32 00:0839 -  -  -  -  ;
   33 00:0839 -  -  -  -  ; ***************************************************************************************
   34 00:0839 -  -  -  -  			
Listing for file "_build.asm"
   46 00:0839 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0839 -  -  -  -  ; ***************************************************************************************
    2 00:0839 -  -  -  -  ; ***************************************************************************************
    3 00:0839 -  -  -  -  ;
    4 00:0839 -  -  -  -  ;		Name : 		top.asm
    5 00:0839 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0839 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0839 -  -  -  -  ;		Reviewed :	No
    8 00:0839 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0839 -  -  -  -  ;
   10 00:0839 -  -  -  -  ; ***************************************************************************************
   11 00:0839 -  -  -  -  ; ***************************************************************************************
   12 00:0839 -  -  -  -  
   13 00:0839 -  -  -  -  ; ***************************************************************************************
   14 00:0839 -  -  -  -  ;
   15 00:0839 -  -  -  -  ;							page unary function (no bracket)
   16 00:0839 -  -  -  -  ;
   17 00:0839 -  -  -  -  ; ***************************************************************************************
   18 00:0839 -  -  -  -  
   19 00:0839 -  -  -  -  Unary_Top:	;; [top]
   20 00:0839 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:083D D9 -  -  -  			exx
   22 00:083E 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:0842 D9 -  -  -  			exx
   24 00:0843 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0845 C9 -  -  -  			ret
   26 00:0846 -  -  -  -  
   27 00:0846 -  -  -  -  ; ***************************************************************************************
   28 00:0846 -  -  -  -  ;
   29 00:0846 -  -  -  -  ;									Changes and Updates
   30 00:0846 -  -  -  -  ;
   31 00:0846 -  -  -  -  ; ***************************************************************************************
   32 00:0846 -  -  -  -  ;
   33 00:0846 -  -  -  -  ;		Date			Notes
   34 00:0846 -  -  -  -  ;		==== 			=====
   35 00:0846 -  -  -  -  ;
   36 00:0846 -  -  -  -  ; ***************************************************************************************
   37 00:0846 -  -  -  -  			
Listing for file "_build.asm"
   47 00:0846 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0846 -  -  -  -  ; ***************************************************************************************
    2 00:0846 -  -  -  -  ; ***************************************************************************************
    3 00:0846 -  -  -  -  ;
    4 00:0846 -  -  -  -  ;		Name : 		val.asm
    5 00:0846 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0846 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0846 -  -  -  -  ;		Reviewed :	No
    8 00:0846 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0846 -  -  -  -  ;
   10 00:0846 -  -  -  -  ; ***************************************************************************************
   11 00:0846 -  -  -  -  ; ***************************************************************************************
   12 00:0846 -  -  -  -  
   13 00:0846 -  -  -  -  ; ***************************************************************************************
   14 00:0846 -  -  -  -  ;
   15 00:0846 -  -  -  -  ;								val( unary function
   16 00:0846 -  -  -  -  ;
   17 00:0846 -  -  -  -  ; ***************************************************************************************
   18 00:0846 -  -  -  -  
   19 00:0846 -  -  -  -  Unary_Val:	;; [val]
   20 00:0846 CD 5E 05 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:084A E5 -  -  -  		push 	hl 							; copy to BC
   22 00:084B C1 -  -  -  		pop 	bc
   23 00:084C 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:084E CD 41 0D 00 		call 	Int32FromString 			; get the integer part.
   25 00:0852 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0854 C8 -  -  -  		ret		z 							; okay
   27 00:0855 3E 03 C3 42 
              03 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:085B -  -  -  -  
   29 00:085B -  -  -  -  ; ***************************************************************************************
   30 00:085B -  -  -  -  ;
   31 00:085B -  -  -  -  ;									Changes and Updates
   32 00:085B -  -  -  -  ;
   33 00:085B -  -  -  -  ; ***************************************************************************************
   34 00:085B -  -  -  -  ;
   35 00:085B -  -  -  -  ;		Date			Notes
   36 00:085B -  -  -  -  ;		==== 			=====
   37 00:085B -  -  -  -  ;
   38 00:085B -  -  -  -  ; ***************************************************************************************
   39 00:085B -  -  -  -  		
Listing for file "_build.asm"
   48 00:085B -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:085B -  -  -  -  ; ***************************************************************************************
    2 00:085B -  -  -  -  ; ***************************************************************************************
    3 00:085B -  -  -  -  ;
    4 00:085B -  -  -  -  ;		Name : 		allocate.asm
    5 00:085B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:085B -  -  -  -  ;		Date : 		4th June 2022
    7 00:085B -  -  -  -  ;		Reviewed :	No
    8 00:085B -  -  -  -  ;		Purpose :	Allocate memory
    9 00:085B -  -  -  -  ;
   10 00:085B -  -  -  -  ; ***************************************************************************************
   11 00:085B -  -  -  -  ; ***************************************************************************************
   12 00:085B -  -  -  -  
   13 00:085B -  -  -  -  ; ***************************************************************************************
   14 00:085B -  -  -  -  ;
   15 00:085B -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:085B -  -  -  -  ;
   17 00:085B -  -  -  -  ; ***************************************************************************************
   18 00:085B -  -  -  -  
   19 00:085B -  -  -  -  AllocateBytes:
   20 00:085B EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:085C 21 00 00 00 		ld 		hl,$000000
   22 00:0860 62 -  -  -  		ld 		h,d
   23 00:0861 6B -  -  -  		ld 		l,e
   24 00:0862 ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   25 00:0867 D5 -  -  -  		push 	de 							; save on stack
   26 00:0868 19 -  -  -  		add 	hl,de 						; HL is the new highest
   27 00:0869 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   28 00:086D EB -  -  -  		ex 		de,hl 						; put in DE
   29 00:086E 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   30 00:0872 AF -  -  -  		xor 	a
   31 00:0873 ED 52 -  -  		sbc 	hl,de
   32 00:0875 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   33 00:0876 D0 -  -  -  		ret 	nc 							; return if high >= low
   34 00:0877 3E 07 C3 42 
              03 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   35 00:087D -  -  -  -  
   36 00:087D -  -  -  -  ; ***************************************************************************************
   37 00:087D -  -  -  -  ;
   38 00:087D -  -  -  -  ;									Changes and Updates
   39 00:087D -  -  -  -  ;
   40 00:087D -  -  -  -  ; ***************************************************************************************
   41 00:087D -  -  -  -  ;
   42 00:087D -  -  -  -  ;		Date			Notes
   43 00:087D -  -  -  -  ;		==== 			=====
   44 00:087D -  -  -  -  ;
   45 00:087D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:087D -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:087D -  -  -  -  ; ***************************************************************************************
    2 00:087D -  -  -  -  ; ***************************************************************************************
    3 00:087D -  -  -  -  ;
    4 00:087D -  -  -  -  ;		Name : 		clear.asm
    5 00:087D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:087D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:087D -  -  -  -  ;		Reviewed :	No
    8 00:087D -  -  -  -  ;		Purpose :	Clear command.
    9 00:087D -  -  -  -  ;
   10 00:087D -  -  -  -  ; ***************************************************************************************
   11 00:087D -  -  -  -  ; ***************************************************************************************
   12 00:087D -  -  -  -  
   13 00:087D -  -  -  -  ; ***************************************************************************************
   14 00:087D -  -  -  -  ;
   15 00:087D -  -  -  -  ;										CLEAR command
   16 00:087D -  -  -  -  ;
   17 00:087D -  -  -  -  ; ***************************************************************************************
   18 00:087D -  -  -  -  
   19 00:087D -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:087D -  -  -  -  		;
   21 00:087D -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:087D -  -  -  -  		;
   23 00:087D 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0881 -  -  -  -  _CCFindLow:
   25 00:0881 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0885 5E -  -  -  		ld 		e,(hl)		
   27 00:0886 19 -  -  -  		add 	hl,de
   28 00:0887 7B -  -  -  		ld 		a,e
   29 00:0888 B7 -  -  -  		or 		a
   30 00:0889 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:088B 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:088C 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:0890 23 -  -  -  		inc 	hl 							; one for luck
   34 00:0891 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:0895 -  -  -  -  		;
   36 00:0895 -  -  -  -  		; 	 		Reset the language stack
   37 00:0895 -  -  -  -  		;
   38 00:0895 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:0899 -  -  -  -  		;
   40 00:0899 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:089B 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:089F 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:08A3 19 -  -  -  		add 	hl,de
   44 00:08A4 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:08A6 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:08AA -  -  -  -  		;
   47 00:08AA 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:08AE 19 -  -  -  		add 	hl,de
   49 00:08AF 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:08B3 -  -  -  -  		;
   51 00:08B3 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:08B3 -  -  -  -  		;
   53 00:08B3 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:08B7 -  -  -  -  _CCFClearHT:
   55 00:08B7 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:08B8 36 00 -  -  		ld 		(hl),0
   57 00:08BA 1B -  -  -  		dec 	de
   58 00:08BB 7A -  -  -  		ld 		a,d
   59 00:08BC B3 -  -  -  		or 		e
   60 00:08BD 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:08BF 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   62 00:08C3 -  -  -  -  		;
   63 00:08C3 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:08C3 -  -  -  -  		;
   65 00:08C3 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:08C7 -  -  -  -  		;
   67 00:08C7 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:08C7 -  -  -  -  		;
   69 00:08C7 CD 89 07 00 		call 	UnaryRandomInitialise
   70 00:08CB C9 -  -  -  		ret
   71 00:08CC -  -  -  -  
   72 00:08CC -  -  -  -  ; ***************************************************************************************
   73 00:08CC -  -  -  -  ;
   74 00:08CC -  -  -  -  ;									Changes and Updates
   75 00:08CC -  -  -  -  ;
   76 00:08CC -  -  -  -  ; ***************************************************************************************
   77 00:08CC -  -  -  -  ;
   78 00:08CC -  -  -  -  ;		Date			Notes
   79 00:08CC -  -  -  -  ;		==== 			=====
   80 00:08CC -  -  -  -  ;
   81 00:08CC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:08CC -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:08CC -  -  -  -  ; ***************************************************************************************
    2 00:08CC -  -  -  -  ; ***************************************************************************************
    3 00:08CC -  -  -  -  ;
    4 00:08CC -  -  -  -  ;		Name : 		instance.asm
    5 00:08CC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08CC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08CC -  -  -  -  ;		Reviewed :	No
    8 00:08CC -  -  -  -  ;		Purpose :	Instance handling
    9 00:08CC -  -  -  -  ;
   10 00:08CC -  -  -  -  ; ***************************************************************************************
   11 00:08CC -  -  -  -  ; ***************************************************************************************
   12 00:08CC -  -  -  -  
   13 00:08CC -  -  -  -  ; ***************************************************************************************
   14 00:08CC -  -  -  -  ;
   15 00:08CC -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:08CC -  -  -  -  ;
   17 00:08CC -  -  -  -  ; ***************************************************************************************
   18 00:08CC -  -  -  -  
   19 00:08CC -  -  -  -  SetCurrentInstance:
   20 00:08CC ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:08D1 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:08D5 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:08DA -  -  -  -  
   24 00:08DA C9 -  -  -  		ret
   25 00:08DB -  -  -  -  
   26 00:08DB -  -  -  -  
   27 00:08DB -  -  -  -  ; ***************************************************************************************
   28 00:08DB -  -  -  -  ;
   29 00:08DB -  -  -  -  ;									Changes and Updates
   30 00:08DB -  -  -  -  ;
   31 00:08DB -  -  -  -  ; ***************************************************************************************
   32 00:08DB -  -  -  -  ;
   33 00:08DB -  -  -  -  ;		Date			Notes
   34 00:08DB -  -  -  -  ;		==== 			=====
   35 00:08DB -  -  -  -  ;
   36 00:08DB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:08DB -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:08DB -  -  -  -  ; ***************************************************************************************
    2 00:08DB -  -  -  -  ; ***************************************************************************************
    3 00:08DB -  -  -  -  ;
    4 00:08DB -  -  -  -  ;		Name : 		new.asm
    5 00:08DB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08DB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08DB -  -  -  -  ;		Reviewed :	No
    8 00:08DB -  -  -  -  ;		Purpose :	New command.
    9 00:08DB -  -  -  -  ;
   10 00:08DB -  -  -  -  ; ***************************************************************************************
   11 00:08DB -  -  -  -  ; ***************************************************************************************
   12 00:08DB -  -  -  -  
   13 00:08DB -  -  -  -  ; ***************************************************************************************
   14 00:08DB -  -  -  -  ;
   15 00:08DB -  -  -  -  ;										NEW command
   16 00:08DB -  -  -  -  ;
   17 00:08DB -  -  -  -  ; ***************************************************************************************
   18 00:08DB -  -  -  -  
   19 00:08DB -  -  -  -  Command_NEW: 	;; [new]
   20 00:08DB 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:08DF 36 00 -  -  		ld 		(hl),0
   22 00:08E1 CD 7D 08 00 		call 	Command_CLEAR 				; clear all variables
   23 00:08E5 3E 00 C3 42 
              03 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:08EB -  -  -  -  
   25 00:08EB -  -  -  -  ; ***************************************************************************************
   26 00:08EB -  -  -  -  ;
   27 00:08EB -  -  -  -  ;									Changes and Updates
   28 00:08EB -  -  -  -  ;
   29 00:08EB -  -  -  -  ; ***************************************************************************************
   30 00:08EB -  -  -  -  ;
   31 00:08EB -  -  -  -  ;		Date			Notes
   32 00:08EB -  -  -  -  ;		==== 			=====
   33 00:08EB -  -  -  -  ;
   34 00:08EB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:08EB -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:08EB -  -  -  -  ; ***************************************************************************************
    2 00:08EB -  -  -  -  ; ***************************************************************************************
    3 00:08EB -  -  -  -  ;
    4 00:08EB -  -  -  -  ;		Name : 		utility.asm
    5 00:08EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08EB -  -  -  -  ;		Reviewed :	No
    8 00:08EB -  -  -  -  ;		Purpose :	Utility routines
    9 00:08EB -  -  -  -  ;
   10 00:08EB -  -  -  -  ; ***************************************************************************************
   11 00:08EB -  -  -  -  ; ***************************************************************************************
   12 00:08EB -  -  -  -  
   13 00:08EB -  -  -  -  ; ***************************************************************************************
   14 00:08EB -  -  -  -  ;
   15 00:08EB -  -  -  -  ;							Print ASCII string at HL
   16 00:08EB -  -  -  -  ;
   17 00:08EB -  -  -  -  ; ***************************************************************************************
   18 00:08EB -  -  -  -  
   19 00:08EB -  -  -  -  PrintStringAtHL:
   20 00:08EB 7E -  -  -  		ld 		a,(hl)
   21 00:08EC FE 20 -  -  		cp 		$20		
   22 00:08EE D8 -  -  -  		ret 	c
   23 00:08EF CD B2 0E 00 		call 	SYSPrintChar
   24 00:08F3 23 -  -  -  		inc 	hl
   25 00:08F4 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:08F6 -  -  -  -  
   27 00:08F6 -  -  -  -  ; ***************************************************************************************
   28 00:08F6 -  -  -  -  ;
   29 00:08F6 -  -  -  -  ;									Changes and Updates
   30 00:08F6 -  -  -  -  ;
   31 00:08F6 -  -  -  -  ; ***************************************************************************************
   32 00:08F6 -  -  -  -  ;
   33 00:08F6 -  -  -  -  ;		Date			Notes
   34 00:08F6 -  -  -  -  ;		==== 			=====
   35 00:08F6 -  -  -  -  ;
   36 00:08F6 -  -  -  -  ; ***************************************************************************************
   37 00:08F6 -  -  -  -  		
Listing for file "_build.asm"
   53 00:08F6 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:08F6 -  -  -  -  ; ***************************************************************************************
    2 00:08F6 -  -  -  -  ; ***************************************************************************************
    3 00:08F6 -  -  -  -  ;
    4 00:08F6 -  -  -  -  ;		Name : 		create.asm
    5 00:08F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:08F6 -  -  -  -  ;		Reviewed :	No
    8 00:08F6 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:08F6 -  -  -  -  ;
   10 00:08F6 -  -  -  -  ; ***************************************************************************************
   11 00:08F6 -  -  -  -  ; ***************************************************************************************
   12 00:08F6 -  -  -  -  
   13 00:08F6 -  -  -  -  ; ***************************************************************************************
   14 00:08F6 -  -  -  -  ;
   15 00:08F6 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:08F6 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:08F6 -  -  -  -  ;
   18 00:08F6 -  -  -  -  ; ***************************************************************************************
   19 00:08F6 -  -  -  -  
   20 00:08F6 -  -  -  -  VariableCreate:		
   21 00:08F6 -  -  -  -  		;
   22 00:08F6 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:08F6 -  -  -  -  		;
   24 00:08F6 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:08FA 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:08FB E5 -  -  -  		push 	hl 							; save count.
   27 00:08FC CD 5B 08 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0900 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0901 -  -  -  -  		;
   30 00:0901 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0901 -  -  -  -  		;
   32 00:0901 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0902 -  -  -  -  _VCClear:
   34 00:0902 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0904 23 -  -  -  		inc 	hl
   36 00:0905 0B -  -  -  		dec 	bc
   37 00:0906 78 -  -  -  		ld		a,b
   38 00:0907 B1 -  -  -  		or 		c
   39 00:0908 20 F8 -  -  		jr 		nz,_VCClear
   40 00:090A E1 -  -  -  		pop 	hl							; restore start address
   41 00:090B -  -  -  -  		;
   42 00:090B -  -  -  -  		;		Now start to create the data.
   43 00:090B -  -  -  -  		;
   44 00:090B E5 -  -  -  		push 	hl 							; save start
   45 00:090C -  -  -  -  		;
   46 00:090C -  -  -  -  		;		Write hash to +0
   47 00:090C -  -  -  -  		;
   48 00:090C 3A 82 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0910 77 -  -  -  		ld 		(hl),a
   50 00:0911 23 -  -  -  		inc 	hl
   51 00:0912 -  -  -  -  		;
   52 00:0912 -  -  -  -  		;		Write list head to +1
   53 00:0912 -  -  -  -  		;
   54 00:0912 E5 -  -  -  		push 	hl 							; save write position
   55 00:0913 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0917 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:0919 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:091A E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:091B ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0921 -  -  -  -  		;
   61 00:0921 -  -  -  -  		;		Write variable name to +5
   62 00:0921 -  -  -  -  		;
   63 00:0921 ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:0926 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:092C -  -  -  -  		;
   66 00:092C D1 -  -  -  		pop 	de 							; get the start address back
   67 00:092D 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0931 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:0937 -  -  -  -  		;
   70 00:0937 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:0938 C9 -  -  -  		ret
   72 00:0939 -  -  -  -  
   73 00:0939 -  -  -  -  ; ***************************************************************************************
   74 00:0939 -  -  -  -  ;
   75 00:0939 -  -  -  -  ;									Changes and Updates
   76 00:0939 -  -  -  -  ;
   77 00:0939 -  -  -  -  ; ***************************************************************************************
   78 00:0939 -  -  -  -  ;
   79 00:0939 -  -  -  -  ;		Date			Notes
   80 00:0939 -  -  -  -  ;		==== 			=====
   81 00:0939 -  -  -  -  ;
   82 00:0939 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:0939 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0939 -  -  -  -  ; ***************************************************************************************
    2 00:0939 -  -  -  -  ; ***************************************************************************************
    3 00:0939 -  -  -  -  ;
    4 00:0939 -  -  -  -  ;		Name : 		find.asm
    5 00:0939 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0939 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0939 -  -  -  -  ;		Reviewed :	No
    8 00:0939 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0939 -  -  -  -  ;
   10 00:0939 -  -  -  -  ; ***************************************************************************************
   11 00:0939 -  -  -  -  ; ***************************************************************************************
   12 00:0939 -  -  -  -  
   13 00:0939 -  -  -  -  ; ***************************************************************************************
   14 00:0939 -  -  -  -  ;
   15 00:0939 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0939 -  -  -  -  ; 		variable information at (IX)
   17 00:0939 -  -  -  -  ;
   18 00:0939 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0939 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0939 -  -  -  -  ;
   21 00:0939 -  -  -  -  ; ***************************************************************************************
   22 00:0939 -  -  -  -  
   23 00:0939 -  -  -  -  FindVariable:
   24 00:0939 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:093C FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:093E D2 AC 03 00 		jp 		nc,SyntaxError 		
   27 00:0942 -  -  -  -  
   28 00:0942 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0945 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0947 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0949 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:094B 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:094D -  -  -  -  		;
   34 00:094D -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:094D -  -  -  -  		;
   36 00:094D 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0951 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0954 87 -  -  -  		add 	a,a 						; x4
   39 00:0955 87 -  -  -  		add 	a,a
   40 00:0956 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0957 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0958 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:095A CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:095C DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:095E AF -  -  -  		xor 	a 							; clear carry and return
   46 00:095F C9 -  -  -  		ret
   47 00:0960 -  -  -  -  		;
   48 00:0960 -  -  -  -  		;		Not a standard simple variable.
   49 00:0960 -  -  -  -  		;
   50 00:0960 -  -  -  -  _FVNotSimple:
   51 00:0960 CD 94 09 00 		call 	VariableInformation 		; get information about the variable.
   52 00:0964 CD D0 09 00 		call 	VariableSearchList 			; search the linked list
   53 00:0968 38 0B -  -  		jr 		c,_FVNotFound  				
   54 00:096A -  -  -  -  		;
   55 00:096A -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:096A -  -  -  -  		;
   57 00:096A -  -  -  -  _FVExitReference:		
   58 00:096A 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:096E 19 -  -  -  		add 	hl,de 
   60 00:096F -  -  -  -  		;
   61 00:096F -  -  -  -  		; 		TODO: Array check code.
   62 00:096F -  -  -  -  		;
   63 00:096F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:0971 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:0973 AF -  -  -  		xor 	a 							; clear carry and return
   66 00:0974 C9 -  -  -  		ret
   67 00:0975 -  -  -  -  		;
   68 00:0975 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:0975 -  -  -  -  		;
   70 00:0975 -  -  -  -  _FVNotFound:		
   71 00:0975 3A 7C 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:0979 B7 -  -  -  		or 		a
   73 00:097A 28 11 -  -  		jr 		z,_FVFail
   74 00:097C DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:097F FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:0981 28 0A -  -  		jr 		z,_FVFail
   77 00:0983 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 00:0987 CD F6 08 00 		call 	VariableCreate 				; create a new variable.
   79 00:098B 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:098D -  -  -  -  
   81 00:098D -  -  -  -  _FVFail:
   82 00:098D DD 2A 7E 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:0992 37 -  -  -  		scf
   84 00:0993 C9 -  -  -  		ret
   85 00:0994 -  -  -  -  
   86 00:0994 -  -  -  -  ; ***************************************************************************************
   87 00:0994 -  -  -  -  ;
   88 00:0994 -  -  -  -  ;									Changes and Updates
   89 00:0994 -  -  -  -  ;
   90 00:0994 -  -  -  -  ; ***************************************************************************************
   91 00:0994 -  -  -  -  ;
   92 00:0994 -  -  -  -  ;		Date			Notes
   93 00:0994 -  -  -  -  ;		==== 			=====
   94 00:0994 -  -  -  -  ;
   95 00:0994 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0994 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0994 -  -  -  -  ; ***************************************************************************************
    2 00:0994 -  -  -  -  ; ***************************************************************************************
    3 00:0994 -  -  -  -  ;
    4 00:0994 -  -  -  -  ;		Name : 		info.asm
    5 00:0994 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0994 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0994 -  -  -  -  ;		Reviewed :	No
    8 00:0994 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0994 -  -  -  -  ;
   10 00:0994 -  -  -  -  ; ***************************************************************************************
   11 00:0994 -  -  -  -  ; ***************************************************************************************
   12 00:0994 -  -  -  -  
   13 00:0994 -  -  -  -  ; ***************************************************************************************
   14 00:0994 -  -  -  -  ;
   15 00:0994 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0994 -  -  -  -  ; 		after the identifier.
   17 00:0994 -  -  -  -  ;
   18 00:0994 -  -  -  -  ; ***************************************************************************************
   19 00:0994 -  -  -  -  
   20 00:0994 -  -  -  -  VariableInformation:
   21 00:0994 DD 22 7E 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:0999 -  -  -  -  		;
   23 00:0999 -  -  -  -  		; 		Calculate hash, find end.
   24 00:0999 -  -  -  -  		;
   25 00:0999 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:099B -  -  -  -  _VICalculateHash:
   27 00:099B DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:099E FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:09A0 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:09A2 80 -  -  -  		add 	a,b 						; add to hash
   31 00:09A3 07 -  -  -  		rlca
   32 00:09A4 07 -  -  -  		rlca
   33 00:09A5 80 -  -  -  		add 	a,b
   34 00:09A6 47 -  -  -  		ld 		b,a 						; update hash
   35 00:09A7 DD 23 -  -  		inc 	ix 							; next character
   36 00:09A9 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:09AB -  -  -  -  		;
   38 00:09AB -  -  -  -  _VIHashDone:
   39 00:09AB 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:09AC -  -  -  -  		;
   41 00:09AC -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:09AC -  -  -  -  		;
   43 00:09AC 32 82 00 00 		ld 		(VarHash),a
   44 00:09B0 -  -  -  -  		;
   45 00:09B0 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:09B0 -  -  -  -  		;		
   47 00:09B0 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:09B2 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:09B6 6F -  -  -  		ld 		l,a
   50 00:09B7 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:09B8 29 -  -  -  		add 	hl,hl
   52 00:09B9 -  -  -  -  		;
   53 00:09B9 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:09BE 19 -  -  -  		add 	hl,de
   55 00:09BF -  -  -  -  		;
   56 00:09BF DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:09C2 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:09C4 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:09C6 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:09CA 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:09CB -  -  -  -  _VINotArray:
   62 00:09CB 22 84 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:09CF C9 -  -  -  		ret
   64 00:09D0 -  -  -  -  
   65 00:09D0 -  -  -  -  ; ***************************************************************************************
   66 00:09D0 -  -  -  -  ;
   67 00:09D0 -  -  -  -  ;									Changes and Updates
   68 00:09D0 -  -  -  -  ;
   69 00:09D0 -  -  -  -  ; ***************************************************************************************
   70 00:09D0 -  -  -  -  ;
   71 00:09D0 -  -  -  -  ;		Date			Notes
   72 00:09D0 -  -  -  -  ;		==== 			=====
   73 00:09D0 -  -  -  -  ;
   74 00:09D0 -  -  -  -  ; ***************************************************************************************
   75 00:09D0 -  -  -  -  
Listing for file "_build.asm"
   56 00:09D0 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:09D0 -  -  -  -  ; ***************************************************************************************
    2 00:09D0 -  -  -  -  ; ***************************************************************************************
    3 00:09D0 -  -  -  -  ;
    4 00:09D0 -  -  -  -  ;		Name : 		search.asm
    5 00:09D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09D0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:09D0 -  -  -  -  ;		Reviewed :	No
    8 00:09D0 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:09D0 -  -  -  -  ;
   10 00:09D0 -  -  -  -  ; ***************************************************************************************
   11 00:09D0 -  -  -  -  ; ***************************************************************************************
   12 00:09D0 -  -  -  -  
   13 00:09D0 -  -  -  -  ; ***************************************************************************************
   14 00:09D0 -  -  -  -  ;
   15 00:09D0 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:09D0 -  -  -  -  ;		CS if failed.
   17 00:09D0 -  -  -  -  ;
   18 00:09D0 -  -  -  -  ; ***************************************************************************************
   19 00:09D0 -  -  -  -  
   20 00:09D0 -  -  -  -  VariableSearchList:
   21 00:09D0 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:09D4 -  -  -  -  		;
   23 00:09D4 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:09D4 -  -  -  -  		;		the address of the hash record
   25 00:09D4 -  -  -  -  		;
   26 00:09D4 -  -  -  -  _VSLLoop:
   27 00:09D4 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:09D6 -  -  -  -  		;
   29 00:09D6 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:09D7 AF -  -  -  		xor 	a
   31 00:09D8 ED 6A -  -  		adc 	hl,hl
   32 00:09DA E1 -  -  -  		pop 	hl
   33 00:09DB 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:09DD 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:09DE C8 -  -  -  		ret 	z
   36 00:09DF -  -  -  -  _VSLRecord:
   37 00:09DF -  -  -  -  		;
   38 00:09DF -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:09DF -  -  -  -  		;
   40 00:09DF 3A 82 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:09E3 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:09E4 23 -  -  -  		inc 	hl 							; points to link back
   43 00:09E5 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:09E7 -  -  -  -  		;
   45 00:09E7 -  -  -  -  		;		Now check the name
   46 00:09E7 -  -  -  -  		;
   47 00:09E7 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:09E8 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:09E9 23 -  -  -  		inc 	hl
   50 00:09EA 23 -  -  -  		inc 	hl
   51 00:09EB 23 -  -  -  		inc 	hl
   52 00:09EC ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:09EE ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:09F3 -  -  -  -  		;
   55 00:09F3 -  -  -  -  		;		Check individual characters
   56 00:09F3 -  -  -  -  		;
   57 00:09F3 -  -  -  -  _VSLCharacter:
   58 00:09F3 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:09F4 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:09F6 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:09F8 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:09F9 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:09FA 13 -  -  -  		inc 	de
   64 00:09FB 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:09FD -  -  -  -  		;
   66 00:09FD -  -  -  -  _VSLFailed:
   67 00:09FD E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:09FE 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0A00 -  -  -  -  		;
   70 00:0A00 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0A00 -  -  -  -  		;		
   72 00:0A00 -  -  -  -  _VSLEndIdentifier:
   73 00:0A00 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0A01 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0A03 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0A05 -  -  -  -  		;
   77 00:0A05 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0A06 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0A07 AF -  -  -  		xor 	a 							; clear carry
   80 00:0A08 C9 -  -  -  		ret
   81 00:0A09 -  -  -  -  
   82 00:0A09 -  -  -  -  ; ***************************************************************************************
   83 00:0A09 -  -  -  -  ;
   84 00:0A09 -  -  -  -  ;									Changes and Updates
   85 00:0A09 -  -  -  -  ;
   86 00:0A09 -  -  -  -  ; ***************************************************************************************
   87 00:0A09 -  -  -  -  ;
   88 00:0A09 -  -  -  -  ;		Date			Notes
   89 00:0A09 -  -  -  -  ;		==== 			=====
   90 00:0A09 -  -  -  -  ;
   91 00:0A09 -  -  -  -  ; ***************************************************************************************
   92 00:0A09 -  -  -  -  		
Listing for file "_build.asm"
   57 00:0A09 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0A09 -  -  -  -  ;
    2 00:0A09 -  -  -  -  ;	This file is automatically generated.
    3 00:0A09 -  -  -  -  ;
    4 00:0A09 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:0A20 -  -  -  -  PrecedenceTable:
    6 00:0A20 06 -  -  -  	.db	6	; $0083 !
    7 00:0A21 06 -  -  -  	.db	6	; $0084 ?
    8 00:0A22 05 -  -  -  	.db	5	; $0085 *
    9 00:0A23 05 -  -  -  	.db	5	; $0086 /
   10 00:0A24 05 -  -  -  	.db	5	; $0087 mod
   11 00:0A25 05 -  -  -  	.db	5	; $0088 div
   12 00:0A26 04 -  -  -  	.db	4	; $0089 +
   13 00:0A27 04 -  -  -  	.db	4	; $008a -
   14 00:0A28 03 -  -  -  	.db	3	; $008b >=
   15 00:0A29 03 -  -  -  	.db	3	; $008c <=
   16 00:0A2A 03 -  -  -  	.db	3	; $008d >
   17 00:0A2B 03 -  -  -  	.db	3	; $008e <
   18 00:0A2C 03 -  -  -  	.db	3	; $008f =
   19 00:0A2D 03 -  -  -  	.db	3	; $0090 <>
   20 00:0A2E 02 -  -  -  	.db	2	; $0091 and
   21 00:0A2F 01 -  -  -  	.db	1	; $0092 or
   22 00:0A30 01 -  -  -  	.db	1	; $0093 eor
   23 00:0A31 -  -  -  -  
Listing for file "_build.asm"
   58 00:0A31 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0A31 -  -  -  -  ;
    2 00:0A31 -  -  -  -  ;	This is automatically generated.
    3 00:0A31 -  -  -  -  ;
    4 00:0A31 -  -  -  -  ErrorIDTable:
    5 00:0A31 75 0A 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0A35 7B 0A 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0A39 8C 0A 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0A3D 9A 0A 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0A41 A4 0A 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:0A45 AE 0A 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:0A49 C8 0A 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:0A4D D9 0A 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:0A51 E7 0A 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:0A55 F5 0A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:0A59 FF 0A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:0A5D 14 0B 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:0A61 2A 0B 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:0A65 38 0B 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:0A69 3D 0B 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:0A6D 4A 0B 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:0A71 5B 0B 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:0A75 -  -  -  -  
   23 00:0A75 -  -  -  -  ErrText_warmstart:
   24 00:0A75 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:0A7B -  -  -  -  ErrText_assert:
   26 00:0A7B 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:0A8C -  -  -  -  ErrText_badtype:
   28 00:0A8C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:0A9A -  -  -  -  ErrText_badvalue:
   30 00:0A9A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:0AA4 -  -  -  -  ErrText_dim:
   32 00:0AA4 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:0AAE -  -  -  -  ErrText_disabled:
   34 00:0AAE 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:0AC8 -  -  -  -  ErrText_divzero:
   36 00:0AC8 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:0AD9 -  -  -  -  ErrText_memory:
   38 00:0AD9 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:0AE7 -  -  -  -  ErrText_nocomma:
   40 00:0AE7 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:0AF5 -  -  -  -  ErrText_nodollar:
   42 00:0AF5 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:0AFF -  -  -  -  ErrText_nolbracket:
   44 00:0AFF 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:0B14 -  -  -  -  ErrText_norbracket:
   46 00:0B14 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:0B2A -  -  -  -  ErrText_notref:
   48 00:0B2A 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:0B38 -  -  -  -  ErrText_stop:
   50 00:0B38 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:0B3D -  -  -  -  ErrText_syntax:
   52 00:0B3D 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:0B4A -  -  -  -  ErrText_todo:
   54 00:0B4A 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:0B5B -  -  -  -  ErrText_unknownvar:
   56 00:0B5B 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:0B6C -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0B6C -  -  -  -  ;
    2 00:0B6C -  -  -  -  ;	Vectors for set 0
    3 00:0B6C -  -  -  -  ;
    4 00:0B6C -  -  -  -  VectorsSet0:
    5 00:0B6C A6 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0B70 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0B74 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0B78 22 04 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0B7C 2B 04 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0B80 CE 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0B84 DC 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0B88 EA 03 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0B8C DC 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0B90 B2 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0B94 C0 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0B98 89 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0B9C 7F 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0BA0 6B 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0BA4 61 04 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0BA8 57 04 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0BAC 75 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0BB0 F8 03 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0BB4 06 04 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0BB8 14 04 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0BBC FB 07 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0BC0 F3 07 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0BC4 15 07 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0BC8 42 07 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0BCC 04 07 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0BD0 DA 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0BD4 D9 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0BD8 0A 08 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0BDC F0 06 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0BE0 E7 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0BE4 20 07 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0BE8 35 07 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0BEC 32 08 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0BF0 39 08 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0BF4 46 08 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0BF8 49 04 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0BFC 4D 04 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0C00 EB 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0C04 EB 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0C08 EF 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0C0C EB 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0C10 68 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0C14 24 00 00 00 	addr(Unimplemented)              ; $00aa [
   48 00:0C18 24 00 00 00 	addr(Unimplemented)              ; $00ab ]
   49 00:0C1C 24 00 00 00 	addr(Unimplemented)              ; $00ac ~
   50 00:0C20 24 00 00 00 	addr(Unimplemented)              ; $00ad repeat
   51 00:0C24 24 00 00 00 	addr(Unimplemented)              ; $00ae until
   52 00:0C28 24 00 00 00 	addr(Unimplemented)              ; $00af if
   53 00:0C2C EB 00 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:0C30 24 00 00 00 	addr(Unimplemented)              ; $00b1 else
   55 00:0C34 24 00 00 00 	addr(Unimplemented)              ; $00b2 for
   56 00:0C38 EB 00 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:0C3C 24 00 00 00 	addr(Unimplemented)              ; $00b4 step
   58 00:0C40 24 00 00 00 	addr(Unimplemented)              ; $00b5 next
   59 00:0C44 24 00 00 00 	addr(Unimplemented)              ; $00b6 def
   60 00:0C48 24 00 00 00 	addr(Unimplemented)              ; $00b7 proc
   61 00:0C4C 24 00 00 00 	addr(Unimplemented)              ; $00b8 endproc
   62 00:0C50 24 00 00 00 	addr(Unimplemented)              ; $00b9 gosub
   63 00:0C54 24 00 00 00 	addr(Unimplemented)              ; $00ba return
   64 00:0C58 24 00 00 00 	addr(Unimplemented)              ; $00bb goto
   65 00:0C5C 24 00 00 00 	addr(Unimplemented)              ; $00bc local
   66 00:0C60 F0 00 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:0C64 68 02 00 00 	addr(Command_REM)                ; $00be rem
   68 00:0C68 BD 01 00 00 	addr(Command_LET)                ; $00bf let
   69 00:0C6C 24 00 00 00 	addr(Unimplemented)              ; $00c0 vdu
   70 00:0C70 11 02 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:0C74 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:0C78 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:0C7C 24 00 00 00 	addr(Unimplemented)              ; $00c4 list
   74 00:0C80 DB 08 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:0C84 85 02 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:0C88 24 00 00 00 	addr(Unimplemented)              ; $00c7 read
   77 00:0C8C 24 00 00 00 	addr(Unimplemented)              ; $00c8 data
   78 00:0C90 24 00 00 00 	addr(Unimplemented)              ; $00c9 restore
   79 00:0C94 DA 00 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:0C98 7D 08 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:0C9C A0 01 00 00 	addr(Command_END)                ; $00cc end
   82 00:0CA0 F8 02 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:0CA4 -  -  -  -  ;
   84 00:0CA4 -  -  -  -  ;	Vectors for set 1
   85 00:0CA4 -  -  -  -  ;
   86 00:0CA4 -  -  -  -  VectorsSet1:
   87 00:0CA4 -  -  -  -  ;
   88 00:0CA4 -  -  -  -  ;	Vectors for set 2
   89 00:0CA4 -  -  -  -  ;
   90 00:0CA4 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:0CA4 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0CA4 -  -  -  -  ; ***************************************************************************************
    2 00:0CA4 -  -  -  -  ; ***************************************************************************************
    3 00:0CA4 -  -  -  -  ;
    4 00:0CA4 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0CA4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CA4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CA4 -  -  -  -  ;		Reviewed :	No
    8 00:0CA4 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0CA4 -  -  -  -  ;
   10 00:0CA4 -  -  -  -  ; ***************************************************************************************
   11 00:0CA4 -  -  -  -  ; ***************************************************************************************
   12 00:0CA4 -  -  -  -  
   13 00:0CA4 -  -  -  -  ; ***************************************************************************************
   14 00:0CA4 -  -  -  -  ;
   15 00:0CA4 -  -  -  -  ;								Unsigned integer divide
   16 00:0CA4 -  -  -  -  ;
   17 00:0CA4 -  -  -  -  ; ***************************************************************************************
   18 00:0CA4 -  -  -  -  
   19 00:0CA4 -  -  -  -  Int32UDivide:
   20 00:0CA4 37 -  -  -  		scf
   21 00:0CA5 C3 E9 0C 00 		jp 		_I32UnsignedDivide		
   22 00:0CA9 -  -  -  -  
   23 00:0CA9 -  -  -  -  ; ***************************************************************************************
   24 00:0CA9 -  -  -  -  ;
   25 00:0CA9 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0CA9 -  -  -  -  ;
   27 00:0CA9 -  -  -  -  ; ***************************************************************************************
   28 00:0CA9 -  -  -  -  
   29 00:0CA9 -  -  -  -  Int32SDivide:
   30 00:0CA9 37 -  -  -  		scf
   31 00:0CAA 18 01 -  -  		jr 		_I32SDivide
   32 00:0CAC -  -  -  -  Int32Modulus:
   33 00:0CAC AF -  -  -  		xor 	a
   34 00:0CAD -  -  -  -  _I32SDivide:
   35 00:0CAD 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0CAE F5 -  -  -  		push 	af
   37 00:0CAF 08 -  -  -  		ex 		af,af'
   38 00:0CB0 -  -  -  -  
   39 00:0CB0 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0CB1 D9 -  -  -  		exx
   41 00:0CB2 D5 -  -  -  		push 	de
   42 00:0CB3 D9 -  -  -  		exx
   43 00:0CB4 -  -  -  -  
   44 00:0CB4 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0CB5 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0CB6 CD D6 0C 00 		call 	_I32CheckHLSignSwap
   47 00:0CBA CD D6 0C 00 		call 	_I32CheckHLSignSwap
   48 00:0CBE 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0CBF F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0CC0 F5 -  -  -  		push 	af
   51 00:0CC1 CD E9 0C 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0CC5 F1 -  -  -  		pop 	af 							; get function back
   53 00:0CC6 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0CC8 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0CC9 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0CCB C4 4C 0E 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0CCF -  -  -  -  _I32SDExit:
   58 00:0CCF D9 -  -  -  		exx 								; restore DE'DE
   59 00:0CD0 D1 -  -  -  		pop 	de
   60 00:0CD1 D9 -  -  -  		exx
   61 00:0CD2 D1 -  -  -  		pop 	de
   62 00:0CD3 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0CD4 08 -  -  -  		ex 		af,af'
   64 00:0CD5 C9 -  -  -  		ret
   65 00:0CD6 -  -  -  -  
   66 00:0CD6 -  -  -  -  
   67 00:0CD6 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0CD6 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0CD7 CB 7C -  -  		bit 	7,h
   70 00:0CD9 D9 -  -  -  		exx
   71 00:0CDA 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0CDC -  -  -  -  		;
   73 00:0CDC C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0CDE F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0CDF CD 4C 0E 00 		call 	Int32Negate 				
   76 00:0CE3 F1 -  -  -  		pop 	af
   77 00:0CE4 -  -  -  -  _I32CHSPositive:
   78 00:0CE4 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0CE5 EB -  -  -  		ex 		de,hl
   80 00:0CE6 D9 -  -  -  		exx		
   81 00:0CE7 EB -  -  -  		ex 		de,hl
   82 00:0CE8 C9 -  -  -  		ret
   83 00:0CE9 -  -  -  -  
   84 00:0CE9 -  -  -  -  ; ***************************************************************************************
   85 00:0CE9 -  -  -  -  ;
   86 00:0CE9 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0CE9 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0CE9 -  -  -  -  ;
   89 00:0CE9 -  -  -  -  ; ***************************************************************************************
   90 00:0CE9 -  -  -  -  
   91 00:0CE9 -  -  -  -  _I32UnsignedDivide:
   92 00:0CE9 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0CEA D5 -  -  -  		push 	de
   94 00:0CEB D9 -  -  -  		exx
   95 00:0CEC C5 -  -  -  		push 	bc
   96 00:0CED D5 -  -  -  		push 	de 							
   97 00:0CEE D9 -  -  -  		exx
   98 00:0CEF -  -  -  -  
   99 00:0CEF F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0CF0 -  -  -  -  
  101 00:0CF0 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0CF1 B3 -  -  -  		or 		e
  103 00:0CF2 D9 -  -  -  		exx
  104 00:0CF3 B2 -  -  -  		or 		d
  105 00:0CF4 B3 -  -  -  		or 		e
  106 00:0CF5 D9 -  -  -  		exx
  107 00:0CF6 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0CFA -  -  -  -  
  109 00:0CFA -  -  -  -  
  110 00:0CFA 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0CFB 4D -  -  -  		ld		c,l
  112 00:0CFC 21 00 00 00 		ld 		hl,$0000
  113 00:0D00 D9 -  -  -  		exx
  114 00:0D01 44 -  -  -  		ld 		b,h
  115 00:0D02 4D -  -  -  		ld		c,l
  116 00:0D03 21 00 00 00 		ld 		hl,$0000
  117 00:0D07 D9 -  -  -  		exx
  118 00:0D08 -  -  -  -  
  119 00:0D08 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0D0A -  -  -  -  _I32DivideLoop:
  121 00:0D0A F5 -  -  -  		push 	af
  122 00:0D0B -  -  -  -  
  123 00:0D0B CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0D0D CB 10 -  -  		rl 		b
  125 00:0D0F D9 -  -  -  		exx
  126 00:0D10 CB 11 -  -  		rl 		c
  127 00:0D12 CB 10 -  -  		rl 		b
  128 00:0D14 D9 -  -  -  		exx
  129 00:0D15 CB 15 -  -  		rl 		l
  130 00:0D17 CB 14 -  -  		rl 		h
  131 00:0D19 D9 -  -  -  		exx
  132 00:0D1A CB 15 -  -  		rl 		l
  133 00:0D1C CB 14 -  -  		rl 		h
  134 00:0D1E D9 -  -  -  		exx
  135 00:0D1F -  -  -  -  
  136 00:0D1F CD EA 0D 00 		call 	Int32Subtract 				; A = A - M
  137 00:0D23 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0D25 -  -  -  -  
  139 00:0D25 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0D26 18 04 -  -  		jr 		_I32Next
  141 00:0D28 -  -  -  -  
  142 00:0D28 -  -  -  -  _I32Borrow:
  143 00:0D28 CD E2 0D 00 		call 	Int32Add 					; A = A + M
  144 00:0D2C -  -  -  -  _I32Next:
  145 00:0D2C F1 -  -  -  		pop 	af
  146 00:0D2D 3D -  -  -  		dec 	a
  147 00:0D2E 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0D30 -  -  -  -  
  149 00:0D30 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0D31 -  -  -  -  
  151 00:0D31 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0D32 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0D34 -  -  -  -  
  154 00:0D34 60 -  -  -  		ld  	h,b
  155 00:0D35 69 -  -  -  		ld 		l,c
  156 00:0D36 D9 -  -  -  		exx
  157 00:0D37 60 -  -  -  		ld  	h,b
  158 00:0D38 69 -  -  -  		ld 		l,c
  159 00:0D39 D9 -  -  -  		exx
  160 00:0D3A -  -  -  -  _I32Modulus1:		
  161 00:0D3A D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0D3B D1 -  -  -  		pop 	de
  163 00:0D3C C1 -  -  -  		pop 	bc
  164 00:0D3D D9 -  -  -  		exx
  165 00:0D3E D1 -  -  -  		pop 	de
  166 00:0D3F C1 -  -  -  		pop 	bc
  167 00:0D40 C9 -  -  -  		ret
  168 00:0D41 -  -  -  -  
  169 00:0D41 -  -  -  -  ; ***************************************************************************************
  170 00:0D41 -  -  -  -  ;
  171 00:0D41 -  -  -  -  ;									Changes and Updates
  172 00:0D41 -  -  -  -  ;
  173 00:0D41 -  -  -  -  ; ***************************************************************************************
  174 00:0D41 -  -  -  -  ;
  175 00:0D41 -  -  -  -  ;		Date			Notes
  176 00:0D41 -  -  -  -  ;		==== 			=====
  177 00:0D41 -  -  -  -  ;
  178 00:0D41 -  -  -  -  ; ***************************************************************************************
  179 00:0D41 -  -  -  -  		
Listing for file "_build.asm"
   61 00:0D41 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0D41 -  -  -  -  ; ***************************************************************************************
    2 00:0D41 -  -  -  -  ; ***************************************************************************************
    3 00:0D41 -  -  -  -  ;
    4 00:0D41 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0D41 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D41 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D41 -  -  -  -  ;		Reviewed :	No
    8 00:0D41 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0D41 -  -  -  -  ;
   10 00:0D41 -  -  -  -  ; ***************************************************************************************
   11 00:0D41 -  -  -  -  ; ***************************************************************************************
   12 00:0D41 -  -  -  -  
   13 00:0D41 -  -  -  -  ; ***************************************************************************************
   14 00:0D41 -  -  -  -  ;
   15 00:0D41 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0D41 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0D41 -  -  -  -  ;
   18 00:0D41 -  -  -  -  ; ***************************************************************************************
   19 00:0D41 -  -  -  -  
   20 00:0D41 -  -  -  -  Int32FromString:
   21 00:0D41 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0D42 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0D43 D5 -  -  -  		push 	de
   24 00:0D44 D9 -  -  -  		exx
   25 00:0D45 D5 -  -  -  		push 	de
   26 00:0D46 -  -  -  -  
   27 00:0D46 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0D4A 11 00 00 00 		ld 		de,$0000
   29 00:0D4E D9 -  -  -  		exx
   30 00:0D4F 21 00 00 00 		ld 		hl,$0000
   31 00:0D53 11 00 00 00 		ld 		de,$0000
   32 00:0D57 D9 -  -  -  		exx
   33 00:0D58 -  -  -  -  
   34 00:0D58 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0D59 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0D5B 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0D5D ED 44 -  -  		neg 		 						; fix up the base
   38 00:0D5F 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0D60 -  -  -  -  		;
   40 00:0D60 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0D61 F5 -  -  -  		push 	af
   42 00:0D62 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0D64 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0D65 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0D67 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0D68 18 01 -  -  		jr 		_I32FSMain
   47 00:0D6A -  -  -  -  _I32FSNotSigned:		
   48 00:0D6A E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0D6B -  -  -  -  		;
   50 00:0D6B -  -  -  -  		; 		Main conversion loop.
   51 00:0D6B -  -  -  -  		; 		
   52 00:0D6B -  -  -  -  _I32FSMain:		
   53 00:0D6B 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0D6C FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0D6E 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0D70 D6 20 -  -  		sub 	32
   57 00:0D72 -  -  -  -  _I32FSNotLower:
   58 00:0D72 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0D74 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0D76 FE 3A -  -  		cp 		'9'+1
   61 00:0D78 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0D7A FE 41 -  -  		cp 		'A'
   63 00:0D7C 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0D7E FE 47 -  -  		cp 		'F'+1
   65 00:0D80 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0D82 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0D84 -  -  -  -  _I32FSOkay:
   68 00:0D84 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0D86 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0D87 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0D89 03 -  -  -  		inc 	bc 							; consume character
   72 00:0D8A D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0D8B F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0D8C CD A9 0D 00 		call 	Int32Multiply 				; result *= base
   75 00:0D90 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0D91 5F -  -  -  		ld 		e,a
   77 00:0D92 CD E2 0D 00 		call 	Int32Add 					; and add it.
   78 00:0D96 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0D97 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0D99 -  -  -  -  
   81 00:0D99 -  -  -  -  _I32FSExit:
   82 00:0D99 F1 -  -  -  		pop 	af 							; get sign back
   83 00:0D9A FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0D9C CC 4C 0E 00 		call 	z,Int32Negate
   85 00:0DA0 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0DA1 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0DA2 D9 -  -  -  		exx
   88 00:0DA3 D1 -  -  -  		pop 	de
   89 00:0DA4 D9 -  -  -  		exx
   90 00:0DA5 C1 -  -  -  		pop 	bc
   91 00:0DA6 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0DA8 C9 -  -  -  		ret				
   93 00:0DA9 -  -  -  -  
   94 00:0DA9 -  -  -  -  ; ***************************************************************************************
   95 00:0DA9 -  -  -  -  ;
   96 00:0DA9 -  -  -  -  ;									Changes and Updates
   97 00:0DA9 -  -  -  -  ;
   98 00:0DA9 -  -  -  -  ; ***************************************************************************************
   99 00:0DA9 -  -  -  -  ;
  100 00:0DA9 -  -  -  -  ;		Date			Notes
  101 00:0DA9 -  -  -  -  ;		==== 			=====
  102 00:0DA9 -  -  -  -  ;
  103 00:0DA9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0DA9 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0DA9 -  -  -  -  ; ***************************************************************************************
    2 00:0DA9 -  -  -  -  ; ***************************************************************************************
    3 00:0DA9 -  -  -  -  ;
    4 00:0DA9 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0DA9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DA9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DA9 -  -  -  -  ;		Reviewed :	No
    8 00:0DA9 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0DA9 -  -  -  -  ;
   10 00:0DA9 -  -  -  -  ; ***************************************************************************************
   11 00:0DA9 -  -  -  -  ; ***************************************************************************************
   12 00:0DA9 -  -  -  -  
   13 00:0DA9 -  -  -  -  Int32Multiply:
   14 00:0DA9 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0DAA D5 -  -  -  		push 	de
   16 00:0DAB 44 -  -  -  		ld 		b,h
   17 00:0DAC 4D -  -  -  		ld 		c,l
   18 00:0DAD 21 00 00 00 		ld 		hl,$0000
   19 00:0DB1 -  -  -  -  
   20 00:0DB1 D9 -  -  -  		exx
   21 00:0DB2 C5 -  -  -  		push 	bc
   22 00:0DB3 D5 -  -  -  		push 	de
   23 00:0DB4 44 -  -  -  		ld 		b,h
   24 00:0DB5 4D -  -  -  		ld 		c,l
   25 00:0DB6 21 00 00 00 		ld 		hl,$0000		
   26 00:0DBA D9 -  -  -  		exx
   27 00:0DBB -  -  -  -  
   28 00:0DBB -  -  -  -  _I32MultiplyLoop:
   29 00:0DBB CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0DBD C4 E2 0D 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0DC1 -  -  -  -  		;
   32 00:0DC1 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0DC2 CB 38 -  -  		srl 	b
   34 00:0DC4 CB 19 -  -  		rr 		c
   35 00:0DC6 D9 -  -  -  		exx
   36 00:0DC7 CB 18 -  -  		rr 		b
   37 00:0DC9 CB 19 -  -  		rr 		c
   38 00:0DCB -  -  -  -  		;
   39 00:0DCB CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0DCD CB 12 -  -  		rl 		d
   41 00:0DCF D9 -  -  -  		exx
   42 00:0DD0 CB 13 -  -  		rl 		e
   43 00:0DD2 CB 12 -  -  		rl 		d
   44 00:0DD4 -  -  -  -  
   45 00:0DD4 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0DD5 B1 -  -  -  		or 		c
   47 00:0DD6 D9 -  -  -  		exx
   48 00:0DD7 B0 -  -  -  		or 		b
   49 00:0DD8 B1 -  -  -  		or 		c
   50 00:0DD9 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0DDB -  -  -  -  
   52 00:0DDB D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0DDC D1 -  -  -  		pop 	de
   54 00:0DDD C1 -  -  -  		pop 	bc
   55 00:0DDE D9 -  -  -  		exx
   56 00:0DDF D1 -  -  -  		pop 	de
   57 00:0DE0 C1 -  -  -  		pop 	bc
   58 00:0DE1 C9 -  -  -  		ret
   59 00:0DE2 -  -  -  -  
   60 00:0DE2 -  -  -  -  ; ***************************************************************************************
   61 00:0DE2 -  -  -  -  ;
   62 00:0DE2 -  -  -  -  ;									Changes and Updates
   63 00:0DE2 -  -  -  -  ;
   64 00:0DE2 -  -  -  -  ; ***************************************************************************************
   65 00:0DE2 -  -  -  -  ;
   66 00:0DE2 -  -  -  -  ;		Date			Notes
   67 00:0DE2 -  -  -  -  ;		==== 			=====
   68 00:0DE2 -  -  -  -  ;
   69 00:0DE2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0DE2 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0DE2 -  -  -  -  ; ***************************************************************************************
    2 00:0DE2 -  -  -  -  ; ***************************************************************************************
    3 00:0DE2 -  -  -  -  ;
    4 00:0DE2 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0DE2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DE2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DE2 -  -  -  -  ;		Reviewed :	No
    8 00:0DE2 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0DE2 -  -  -  -  ;
   10 00:0DE2 -  -  -  -  ; ***************************************************************************************
   11 00:0DE2 -  -  -  -  ; ***************************************************************************************
   12 00:0DE2 -  -  -  -  
   13 00:0DE2 -  -  -  -  ; ***************************************************************************************
   14 00:0DE2 -  -  -  -  ;
   15 00:0DE2 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0DE2 -  -  -  -  ;
   17 00:0DE2 -  -  -  -  ; ***************************************************************************************
   18 00:0DE2 -  -  -  -  
   19 00:0DE2 -  -  -  -  Int32Add:
   20 00:0DE2 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0DE4 D9 -  -  -  		exx
   22 00:0DE5 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0DE8 D9 -  -  -  		exx
   24 00:0DE9 C9 -  -  -  		ret
   25 00:0DEA -  -  -  -  
   26 00:0DEA -  -  -  -  ; ***************************************************************************************
   27 00:0DEA -  -  -  -  ;
   28 00:0DEA -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0DEA -  -  -  -  ;
   30 00:0DEA -  -  -  -  ; ***************************************************************************************
   31 00:0DEA -  -  -  -  
   32 00:0DEA -  -  -  -  Int32Subtract:
   33 00:0DEA AF -  -  -  		xor 	a 							; clear carry
   34 00:0DEB 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0DEE D9 -  -  -  		exx
   36 00:0DEF 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0DF2 D9 -  -  -  		exx
   38 00:0DF3 C9 -  -  -  		ret
   39 00:0DF4 -  -  -  -  
   40 00:0DF4 -  -  -  -  ; ***************************************************************************************
   41 00:0DF4 -  -  -  -  ;
   42 00:0DF4 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0DF4 -  -  -  -  ;
   44 00:0DF4 -  -  -  -  ; ***************************************************************************************
   45 00:0DF4 -  -  -  -  
   46 00:0DF4 -  -  -  -  Int32And:
   47 00:0DF4 D9 -  -  -  		exx
   48 00:0DF5 CD FA 0D 00 		call 	_I32AndHLDE
   49 00:0DF9 D9 -  -  -  		exx
   50 00:0DFA -  -  -  -  _I32AndHLDE:		
   51 00:0DFA 7C -  -  -  		ld 		a,h
   52 00:0DFB A2 -  -  -  		and 	d
   53 00:0DFC 67 -  -  -  		ld 		h,a
   54 00:0DFD 7D -  -  -  		ld 		a,l
   55 00:0DFE A3 -  -  -  		and 	e
   56 00:0DFF 6F -  -  -  		ld 		l,a
   57 00:0E00 C9 -  -  -  		ret
   58 00:0E01 -  -  -  -  
   59 00:0E01 -  -  -  -  ; ***************************************************************************************
   60 00:0E01 -  -  -  -  ;
   61 00:0E01 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0E01 -  -  -  -  ;
   63 00:0E01 -  -  -  -  ; ***************************************************************************************
   64 00:0E01 -  -  -  -  
   65 00:0E01 -  -  -  -  Int32Or:
   66 00:0E01 D9 -  -  -  		exx
   67 00:0E02 CD 07 0E 00 		call 	_I32OrHLDE
   68 00:0E06 D9 -  -  -  		exx
   69 00:0E07 -  -  -  -  _I32OrHLDE:		
   70 00:0E07 7C -  -  -  		ld 		a,h
   71 00:0E08 B2 -  -  -  		or 		d
   72 00:0E09 67 -  -  -  		ld 		h,a
   73 00:0E0A 7D -  -  -  		ld 		a,l
   74 00:0E0B B3 -  -  -  		or 		e
   75 00:0E0C 6F -  -  -  		ld 		l,a
   76 00:0E0D C9 -  -  -  		ret
   77 00:0E0E -  -  -  -  
   78 00:0E0E -  -  -  -  ; ***************************************************************************************
   79 00:0E0E -  -  -  -  ;
   80 00:0E0E -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0E0E -  -  -  -  ;
   82 00:0E0E -  -  -  -  ; ***************************************************************************************
   83 00:0E0E -  -  -  -  
   84 00:0E0E -  -  -  -  Int32Xor:
   85 00:0E0E D9 -  -  -  		exx
   86 00:0E0F CD 14 0E 00 		call 	_I32XorHLDE
   87 00:0E13 D9 -  -  -  		exx
   88 00:0E14 -  -  -  -  _I32XorHLDE:		
   89 00:0E14 7C -  -  -  		ld 		a,h
   90 00:0E15 AA -  -  -  		xor 	d
   91 00:0E16 67 -  -  -  		ld 		h,a
   92 00:0E17 7D -  -  -  		ld 		a,l
   93 00:0E18 AB -  -  -  		xor 	e
   94 00:0E19 6F -  -  -  		ld 		l,a
   95 00:0E1A C9 -  -  -  		ret
   96 00:0E1B -  -  -  -  
   97 00:0E1B -  -  -  -  ; ***************************************************************************************
   98 00:0E1B -  -  -  -  ;
   99 00:0E1B -  -  -  -  ;								 Check if HL'HL zero
  100 00:0E1B -  -  -  -  ;
  101 00:0E1B -  -  -  -  ; ***************************************************************************************
  102 00:0E1B -  -  -  -  
  103 00:0E1B -  -  -  -  Int32Zero:
  104 00:0E1B D9 -  -  -  		exx
  105 00:0E1C 7D -  -  -  		ld 		a,l
  106 00:0E1D B4 -  -  -  		or 		h
  107 00:0E1E D9 -  -  -  		exx
  108 00:0E1F B5 -  -  -  		or 		l
  109 00:0E20 B4 -  -  -  		or 		h
  110 00:0E21 C9 -  -  -  		ret
  111 00:0E22 -  -  -  -  
  112 00:0E22 -  -  -  -  ; ***************************************************************************************
  113 00:0E22 -  -  -  -  ;
  114 00:0E22 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0E22 -  -  -  -  ;
  116 00:0E22 -  -  -  -  ; ***************************************************************************************
  117 00:0E22 -  -  -  -  
  118 00:0E22 -  -  -  -  Int32Compare:
  119 00:0E22 E5 -  -  -  		push 	hl 							; save HL
  120 00:0E23 AF -  -  -  		xor 	a 							; clear carry
  121 00:0E24 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0E27 D9 -  -  -  		exx
  123 00:0E28 E5 -  -  -  		push 	hl 							; save HL'
  124 00:0E29 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0E2C -  -  -  -  		;
  126 00:0E2C 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0E2D E2 35 0E 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0E31 78 -  -  -  		ld 		a,b
  129 00:0E32 EE 80 -  -  		xor 	$80
  130 00:0E34 47 -  -  -  		ld 		b,a
  131 00:0E35 -  -  -  -  _I32CNoOverflow:
  132 00:0E35 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0E36 B5 -  -  -  		or 		l
  134 00:0E37 D9 -  -  -  		exx 
  135 00:0E38 B4 -  -  -  		or 		h
  136 00:0E39 B5 -  -  -  		or 		l
  137 00:0E3A 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0E3C -  -  -  -  		;
  139 00:0E3C D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0E3D CB 78 -  -  		bit 	7,b
  141 00:0E3F D9 -  -  -  		exx
  142 00:0E40 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0E42 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0E44 3E FF -  -  		ld 		a,$FF
  145 00:0E46 -  -  -  -  _I32NotPos:
  146 00:0E46 D9 -  -  -  		exx
  147 00:0E47 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0E48 D9 -  -  -  		exx
  149 00:0E49 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0E4A B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0E4B C9 -  -  -  		ret
  152 00:0E4C -  -  -  -  
  153 00:0E4C -  -  -  -  ; ***************************************************************************************
  154 00:0E4C -  -  -  -  ;
  155 00:0E4C -  -  -  -  ;										Negate HL'HL
  156 00:0E4C -  -  -  -  ;
  157 00:0E4C -  -  -  -  ; ***************************************************************************************
  158 00:0E4C -  -  -  -  
  159 00:0E4C -  -  -  -  Int32Negate:
  160 00:0E4C AF -  -  -  		xor 	a
  161 00:0E4D CD 58 0E 00 		call 	_I32NSubtract
  162 00:0E51 D9 -  -  -  		exx
  163 00:0E52 CD 58 0E 00 		call 	_I32NSubtract
  164 00:0E56 D9 -  -  -  		exx
  165 00:0E57 C9 -  -  -  		ret
  166 00:0E58 -  -  -  -  _I32NSubtract:
  167 00:0E58 D5 -  -  -  		push 	de
  168 00:0E59 EB -  -  -  		ex 		de,hl
  169 00:0E5A 21 00 00 00 		ld 		hl,$0000
  170 00:0E5E 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0E61 D1 -  -  -  		pop 	de
  172 00:0E62 C9 -  -  -  		ret
  173 00:0E63 -  -  -  -  		
  174 00:0E63 -  -  -  -  ; ***************************************************************************************
  175 00:0E63 -  -  -  -  ;
  176 00:0E63 -  -  -  -  ;									Changes and Updates
  177 00:0E63 -  -  -  -  ;
  178 00:0E63 -  -  -  -  ; ***************************************************************************************
  179 00:0E63 -  -  -  -  ;
  180 00:0E63 -  -  -  -  ;		Date			Notes
  181 00:0E63 -  -  -  -  ;		==== 			=====
  182 00:0E63 -  -  -  -  ;
  183 00:0E63 -  -  -  -  ; ***************************************************************************************
  184 00:0E63 -  -  -  -  		
Listing for file "_build.asm"
   64 00:0E63 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0E63 -  -  -  -  ; ***************************************************************************************
    2 00:0E63 -  -  -  -  ; ***************************************************************************************
    3 00:0E63 -  -  -  -  ;
    4 00:0E63 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0E63 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E63 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E63 -  -  -  -  ;		Reviewed :	No
    8 00:0E63 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0E63 -  -  -  -  ;
   10 00:0E63 -  -  -  -  ; ***************************************************************************************
   11 00:0E63 -  -  -  -  ;
   12 00:0E63 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0E63 -  -  -  -  ;
   14 00:0E63 -  -  -  -  ; ***************************************************************************************
   15 00:0E63 -  -  -  -  
   16 00:0E63 -  -  -  -  Int32ToString:
   17 00:0E63 C5 -  -  -  		push 	bc 							; save string start
   18 00:0E64 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0E65 E5 -  -  -  		push 	hl
   20 00:0E66 11 00 00 00 		ld	 	de,$0000
   21 00:0E6A D9 -  -  -  		exx
   22 00:0E6B D5 -  -  -  		push 	de
   23 00:0E6C E5 -  -  -  		push 	hl
   24 00:0E6D 11 00 00 00 		ld 		de,$000
   25 00:0E71 D9 -  -  -  		exx
   26 00:0E72 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0E73 -  -  -  -  		;
   28 00:0E73 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0E75 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0E77 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0E79 5F -  -  -  		ld 		e,a
   32 00:0E7A -  -  -  -  		;
   33 00:0E7A D9 -  -  -  		exx 								; is it -ve ?
   34 00:0E7B CB 7C -  -  		bit 	7,h
   35 00:0E7D D9 -  -  -  		exx
   36 00:0E7E 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0E80 -  -  -  -  		;
   38 00:0E80 CD 4C 0E 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0E84 -  -  -  -  		;
   40 00:0E84 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0E86 02 -  -  -  		ld 		(bc),a
   42 00:0E87 03 -  -  -  		inc 	bc
   43 00:0E88 -  -  -  -  _I32TSNotNegative:	
   44 00:0E88 CD 97 0E 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0E8C -  -  -  -  _I32TSExit:
   46 00:0E8C 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0E8E 02 -  -  -  		ld 		(bc),a 
   48 00:0E8F -  -  -  -  
   49 00:0E8F D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0E90 E1 -  -  -  		pop 	hl
   51 00:0E91 D1 -  -  -  		pop 	de
   52 00:0E92 D9 -  -  -  		exx
   53 00:0E93 E1 -  -  -  		pop 	hl
   54 00:0E94 D1 -  -  -  		pop 	de
   55 00:0E95 C1 -  -  -  		pop 	bc
   56 00:0E96 C9 -  -  -  		ret
   57 00:0E97 -  -  -  -  
   58 00:0E97 -  -  -  -  _I32RecursiveConvert:
   59 00:0E97 CD A4 0C 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0E9B F5 -  -  -  		push 	af 							; save remainder
   61 00:0E9C CD 1B 0E 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0EA0 C4 97 0E 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0EA4 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0EA5 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0EA7 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0EA9 C6 07 -  -  		add 	a,7
   67 00:0EAB -  -  -  -  _I32NotHex:
   68 00:0EAB C6 30 -  -  		add 	a,48
   69 00:0EAD 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0EAE 03 -  -  -  		inc 	bc
   71 00:0EAF C9 -  -  -  		ret		
   72 00:0EB0 -  -  -  -  
   73 00:0EB0 -  -  -  -  ; ***************************************************************************************
   74 00:0EB0 -  -  -  -  ;
   75 00:0EB0 -  -  -  -  ;									Changes and Updates
   76 00:0EB0 -  -  -  -  ;
   77 00:0EB0 -  -  -  -  ; ***************************************************************************************
   78 00:0EB0 -  -  -  -  ;
   79 00:0EB0 -  -  -  -  ;		Date			Notes
   80 00:0EB0 -  -  -  -  ;		==== 			=====
   81 00:0EB0 -  -  -  -  ;
   82 00:0EB0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0EB0 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0EB0 -  -  -  -  ; ***************************************************************************************
    2 00:0EB0 -  -  -  -  ; ***************************************************************************************
    3 00:0EB0 -  -  -  -  ;
    4 00:0EB0 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0EB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EB0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EB0 -  -  -  -  ;		Reviewed :	No
    8 00:0EB0 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0EB0 -  -  -  -  ;
   10 00:0EB0 -  -  -  -  ; ***************************************************************************************
   11 00:0EB0 -  -  -  -  ; ***************************************************************************************
   12 00:0EB0 -  -  -  -  
   13 00:0EB0 -  -  -  -  #ifdef AQUARIUS
   14 00:0EB0             
   15 00:0EB0             ; ***************************************************************************************
   16 00:0EB0             ;
   17 00:0EB0             ;								Initialise system stuff
   18 00:0EB0             ;
   19 00:0EB0             ; ***************************************************************************************
   20 00:0EB0             
   21 00:0EB0             SYSInitialise:
   22 00:0EB0             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0EB0             	call 	SYSPrintChar
   24 00:0EB0             	ret
   25 00:0EB0             
   26 00:0EB0             ; ***************************************************************************************
   27 00:0EB0             ;
   28 00:0EB0             ;								Terminate system stuff
   29 00:0EB0             ;
   30 00:0EB0             ; ***************************************************************************************
   31 00:0EB0             
   32 00:0EB0             SYSTerminate:
   33 00:0EB0             	jr 		SYSTerminate
   34 00:0EB0             
   35 00:0EB0             ; ***************************************************************************************
   36 00:0EB0             ;
   37 00:0EB0             ;								Print A character
   38 00:0EB0             ;
   39 00:0EB0             ; ***************************************************************************************
   40 00:0EB0             
   41 00:0EB0             SYSPrintChar:
   42 00:0EB0             	push 	af 									; we stack everything including alt registers
   43 00:0EB0             	push 	bc
   44 00:0EB0             	push 	de
   45 00:0EB0             	push 	hl
   46 00:0EB0             	push 	ix
   47 00:0EB0             	push 	iy
   48 00:0EB0             	exx
   49 00:0EB0             	push 	bc
   50 00:0EB0             	push 	de
   51 00:0EB0             	push 	hl
   52 00:0EB0             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0EB0             	pop 	hl
   54 00:0EB0             	pop 	de
   55 00:0EB0             	pop 	bc
   56 00:0EB0             	exx
   57 00:0EB0             	pop 	iy
   58 00:0EB0             	pop 	ix
   59 00:0EB0             	pop 	hl
   60 00:0EB0             	pop 	de
   61 00:0EB0             	pop 	bc
   62 00:0EB0             	pop 	af
   63 00:0EB0             	ret		
   64 00:0EB0             
   65 00:0EB0             ; ***************************************************************************************
   66 00:0EB0             ;
   67 00:0EB0             ;									Print Newline
   68 00:0EB0             ;
   69 00:0EB0             ; ***************************************************************************************
   70 00:0EB0             
   71 00:0EB0             SYSPrintCRLF:
   72 00:0EB0             	push 	af
   73 00:0EB0             	ld 		a,13
   74 00:0EB0             	call 	SYSPrintChar
   75 00:0EB0             	ld 		a,10
   76 00:0EB0             	call 	SYSPrintChar
   77 00:0EB0             	pop 	af
   78 00:0EB0             	ret
   79 00:0EB0             
   80 00:0EB0             ; ***************************************************************************************
   81 00:0EB0             ;
   82 00:0EB0             ;									Get time into HL'HL
   83 00:0EB0             ;
   84 00:0EB0             ; ***************************************************************************************
   85 00:0EB0             
   86 00:0EB0             SYSGetTimer:
   87 00:0EB0              	in 		a,($00)
   88 00:0EB0              	ld 		l,a
   89 00:0EB0              	in 		a,($01)
   90 00:0EB0              	ld 		h,a
   91 00:0EB0              	exx
   92 00:0EB0              	in 		a,($02)
   93 00:0EB0              	ld 		l,a
   94 00:0EB0              	in 		a,($03)
   95 00:0EB0              	ld 		h,a
   96 00:0EB0              	exx
   97 00:0EB0             	ret 	
   98 00:0EB0             	
   99 00:0EB0             #endif
  100 00:0EB0 -  -  -  -  
  101 00:0EB0 -  -  -  -  ; ***************************************************************************************
  102 00:0EB0 -  -  -  -  ;
  103 00:0EB0 -  -  -  -  ;									Changes and Updates
  104 00:0EB0 -  -  -  -  ;
  105 00:0EB0 -  -  -  -  ; ***************************************************************************************
  106 00:0EB0 -  -  -  -  ;
  107 00:0EB0 -  -  -  -  ;		Date			Notes
  108 00:0EB0 -  -  -  -  ;		==== 			=====
  109 00:0EB0 -  -  -  -  ;
  110 00:0EB0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0EB0 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0EB0 -  -  -  -  ; ***************************************************************************************
    2 00:0EB0 -  -  -  -  ; ***************************************************************************************
    3 00:0EB0 -  -  -  -  ;
    4 00:0EB0 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0EB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EB0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EB0 -  -  -  -  ;		Reviewed :	No
    8 00:0EB0 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0EB0 -  -  -  -  ;
   10 00:0EB0 -  -  -  -  ; ***************************************************************************************
   11 00:0EB0 -  -  -  -  ; ***************************************************************************************
   12 00:0EB0 -  -  -  -  
   13 00:0EB0 -  -  -  -  #ifdef CLEANEZ80
   14 00:0EB0 -  -  -  -  
   15 00:0EB0 -  -  -  -  ; ***************************************************************************************
   16 00:0EB0 -  -  -  -  ;
   17 00:0EB0 -  -  -  -  ;								Initialise system stuff
   18 00:0EB0 -  -  -  -  ;
   19 00:0EB0 -  -  -  -  ; ***************************************************************************************
   20 00:0EB0 -  -  -  -  
   21 00:0EB0 -  -  -  -  SYSInitialise:
   22 00:0EB0 C9 -  -  -  	ret
   23 00:0EB1 -  -  -  -  
   24 00:0EB1 -  -  -  -  ; ***************************************************************************************
   25 00:0EB1 -  -  -  -  ;
   26 00:0EB1 -  -  -  -  ;								Terminate system stuff
   27 00:0EB1 -  -  -  -  ;
   28 00:0EB1 -  -  -  -  ; ***************************************************************************************
   29 00:0EB1 -  -  -  -  
   30 00:0EB1 -  -  -  -  SYSTerminate:
   31 00:0EB1 C9 -  -  -  	ret
   32 00:0EB2 -  -  -  -  
   33 00:0EB2 -  -  -  -  ; ***************************************************************************************
   34 00:0EB2 -  -  -  -  ;
   35 00:0EB2 -  -  -  -  ;								Print A character
   36 00:0EB2 -  -  -  -  ;
   37 00:0EB2 -  -  -  -  ; ***************************************************************************************
   38 00:0EB2 -  -  -  -  
   39 00:0EB2 -  -  -  -  SYSPrintChar:
   40 00:0EB2 C9 -  -  -  	ret		
   41 00:0EB3 -  -  -  -  
   42 00:0EB3 -  -  -  -  ; ***************************************************************************************
   43 00:0EB3 -  -  -  -  ;
   44 00:0EB3 -  -  -  -  ;									Print Newline
   45 00:0EB3 -  -  -  -  ;
   46 00:0EB3 -  -  -  -  ; ***************************************************************************************
   47 00:0EB3 -  -  -  -  
   48 00:0EB3 -  -  -  -  SYSPrintCRLF:
   49 00:0EB3 C9 -  -  -  	ret
   50 00:0EB4 -  -  -  -  
   51 00:0EB4 -  -  -  -  ; ***************************************************************************************
   52 00:0EB4 -  -  -  -  ;
   53 00:0EB4 -  -  -  -  ;									Get time into HL'HL
   54 00:0EB4 -  -  -  -  ;
   55 00:0EB4 -  -  -  -  ; ***************************************************************************************
   56 00:0EB4 -  -  -  -  
   57 00:0EB4 -  -  -  -  SYSGetTimer:
   58 00:0EB4 C9 -  -  -  	ret
   59 00:0EB5 -  -  -  -  
   60 00:0EB5 -  -  -  -  #endif
   61 00:0EB5 -  -  -  -  
   62 00:0EB5 -  -  -  -  ; ***************************************************************************************
   63 00:0EB5 -  -  -  -  ;
   64 00:0EB5 -  -  -  -  ;									Changes and Updates
   65 00:0EB5 -  -  -  -  ;
   66 00:0EB5 -  -  -  -  ; ***************************************************************************************
   67 00:0EB5 -  -  -  -  ;
   68 00:0EB5 -  -  -  -  ;		Date			Notes
   69 00:0EB5 -  -  -  -  ;		==== 			=====
   70 00:0EB5 -  -  -  -  ;
   71 00:0EB5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0EB5 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0EB5 -  -  -  -  ; ***************************************************************************************
    2 00:0EB5 -  -  -  -  ; ***************************************************************************************
    3 00:0EB5 -  -  -  -  ;
    4 00:0EB5 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0EB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EB5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EB5 -  -  -  -  ;		Reviewed :	No
    8 00:0EB5 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0EB5 -  -  -  -  ;
   10 00:0EB5 -  -  -  -  ; ***************************************************************************************
   11 00:0EB5 -  -  -  -  ; ***************************************************************************************
   12 00:0EB5 -  -  -  -  
   13 00:0EB5 -  -  -  -  #ifdef TI84
   14 00:0EB5             
   15 00:0EB5             ; ***************************************************************************************
   16 00:0EB5             ;
   17 00:0EB5             ;								Initialise system stuff
   18 00:0EB5             ;
   19 00:0EB5             ; ***************************************************************************************
   20 00:0EB5             
   21 00:0EB5             SYSInitialise:
   22 00:0EB5             	di
   23 00:0EB5             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0EB5             	ld 		(_IYTemp84),iy
   25 00:0EB5             	ret
   26 00:0EB5             
   27 00:0EB5             ; ***************************************************************************************
   28 00:0EB5             ;
   29 00:0EB5             ;								Terminate system stuff
   30 00:0EB5             ;
   31 00:0EB5             ; ***************************************************************************************
   32 00:0EB5             
   33 00:0EB5             SYSTerminate:
   34 00:0EB5             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0EB5             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0EB5             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0EB5             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0EB5             	ei
   39 00:0EB5             	ret 										; and exit.
   40 00:0EB5             
   41 00:0EB5             _StackTemp84:									; temp var for TI84 only.
   42 00:0EB5             	.dw 	0,0
   43 00:0EB5             _IYTemp84:
   44 00:0EB5             	.dw 	0,0		
   45 00:0EB5             
   46 00:0EB5             ; ***************************************************************************************
   47 00:0EB5             ;
   48 00:0EB5             ;								Print A character
   49 00:0EB5             ;
   50 00:0EB5             ; ***************************************************************************************
   51 00:0EB5             
   52 00:0EB5             SYSPrintChar:
   53 00:0EB5             	push 	af 									; we stack everything including alt registers
   54 00:0EB5             	push 	bc
   55 00:0EB5             	push 	de
   56 00:0EB5             	push 	hl
   57 00:0EB5             	push 	ix
   58 00:0EB5             	push 	iy
   59 00:0EB5             	exx
   60 00:0EB5             	push 	bc
   61 00:0EB5             	push 	de
   62 00:0EB5             	push 	hl
   63 00:0EB5             
   64 00:0EB5             	ld 		iy,(_IYTemp84)
   65 00:0EB5             	call 	_PutC 								; print A as character
   66 00:0EB5             	di
   67 00:0EB5             	ld 		(_IYTemp84),iy
   68 00:0EB5             
   69 00:0EB5             	pop 	hl
   70 00:0EB5             	pop 	de
   71 00:0EB5             	pop 	bc
   72 00:0EB5             	exx
   73 00:0EB5             	pop 	iy
   74 00:0EB5             	pop 	ix
   75 00:0EB5             	pop 	hl
   76 00:0EB5             	pop 	de
   77 00:0EB5             	pop 	bc
   78 00:0EB5             	pop 	af
   79 00:0EB5             	ret		
   80 00:0EB5             
   81 00:0EB5             ; ***************************************************************************************
   82 00:0EB5             ;
   83 00:0EB5             ;									Print Newline
   84 00:0EB5             ;
   85 00:0EB5             ; ***************************************************************************************
   86 00:0EB5             
   87 00:0EB5             SYSPrintCRLF:
   88 00:0EB5             	push 	af 									; we stack everything including alt registers
   89 00:0EB5             	push 	bc
   90 00:0EB5             	push 	de
   91 00:0EB5             	push 	hl
   92 00:0EB5             	push 	ix
   93 00:0EB5             	push 	iy
   94 00:0EB5             	exx
   95 00:0EB5             	push 	bc
   96 00:0EB5             	push 	de
   97 00:0EB5             	push 	hl
   98 00:0EB5             
   99 00:0EB5             	ld 		iy,(_IYTemp84)
  100 00:0EB5             	call 	_newline
  101 00:0EB5             	di
  102 00:0EB5             	ld 		(_IYTemp84),iy
  103 00:0EB5             
  104 00:0EB5             	pop 	hl
  105 00:0EB5             	pop 	de
  106 00:0EB5             	pop 	bc
  107 00:0EB5             	exx
  108 00:0EB5             	pop 	iy
  109 00:0EB5             	pop 	ix
  110 00:0EB5             	pop 	hl
  111 00:0EB5             	pop 	de
  112 00:0EB5             	pop 	bc
  113 00:0EB5             	pop 	af
  114 00:0EB5             	ret
  115 00:0EB5             
  116 00:0EB5             ; ***************************************************************************************
  117 00:0EB5             ;
  118 00:0EB5             ;									Get time into HL'HL
  119 00:0EB5             ;
  120 00:0EB5             ; ***************************************************************************************
  121 00:0EB5             
  122 00:0EB5             SYSGetTimer:
  123 00:0EB5             	ld 		hl,$1234
  124 00:0EB5             	exx
  125 00:0EB5             	ld 		hl,$5678
  126 00:0EB5             	exx
  127 00:0EB5             	ret
  128 00:0EB5             
  129 00:0EB5             #endif
  130 00:0EB5 -  -  -  -  
  131 00:0EB5 -  -  -  -  ; ***************************************************************************************
  132 00:0EB5 -  -  -  -  ;
  133 00:0EB5 -  -  -  -  ;									Changes and Updates
  134 00:0EB5 -  -  -  -  ;
  135 00:0EB5 -  -  -  -  ; ***************************************************************************************
  136 00:0EB5 -  -  -  -  ;
  137 00:0EB5 -  -  -  -  ;		Date			Notes
  138 00:0EB5 -  -  -  -  ;		==== 			=====
  139 00:0EB5 -  -  -  -  ;
  140 00:0EB5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0EB5 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0EB5 -  -  -  -  ; ***************************************************************************************
    2 00:0EB5 -  -  -  -  ; ***************************************************************************************
    3 00:0EB5 -  -  -  -  ;
    4 00:0EB5 -  -  -  -  ;		Name : 		basic.asm
    5 00:0EB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EB5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EB5 -  -  -  -  ;		Reviewed :	No
    8 00:0EB5 -  -  -  -  ;		Purpose :	Main program.
    9 00:0EB5 -  -  -  -  ;
   10 00:0EB5 -  -  -  -  ; ***************************************************************************************
   11 00:0EB5 -  -  -  -  ; ***************************************************************************************
   12 00:0EB5 -  -  -  -  
   13 00:0EB5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 06 02 00 
              C1 19 80 0D 
              03 00 BD 19 
              AA 8A 41 AB 
              A7 C1 19 80 
              11 04 00 BD 
              02 95 44 A5 
              A6 13 04 12 
              13 95 48 A5 
              80 0D 05 00 
              BD 00 AA 8A 
              41 AB A7 C1 
              00 80 00 -  	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$06,$02,$00,$c1,$19,$80,$0d,$03,$00,$bd,$19,$aa,$8a,$41,$ab,$a7,$c1,$19,$80,$11,$04,$00,$bd,$02,$95,$44,$a5,$a6,$13,$04,$12,$13,$95,$48,$a5,$80,$0d,$05,$00,$bd,$00,$aa,$8a,$41,$ab,$a7,$c1,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1053 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2053 -  -  -  -  EndTestInstance:
   18 00:2053 -  -  -  -  		
   19 00:2053 -  -  -  -  ; ***************************************************************************************
   20 00:2053 -  -  -  -  ;
   21 00:2053 -  -  -  -  ;									Changes and Updates
   22 00:2053 -  -  -  -  ;
   23 00:2053 -  -  -  -  ; ***************************************************************************************
   24 00:2053 -  -  -  -  ;
   25 00:2053 -  -  -  -  ;		Date			Notes
   26 00:2053 -  -  -  -  ;		==== 			=====
   27 00:2053 -  -  -  -  ;
   28 00:2053 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:2053 -  -  -  -  FinalAddress:
