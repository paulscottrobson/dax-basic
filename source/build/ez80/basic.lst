    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;
   19 00:0000 -  -  -  -  XTYPE_INTEGER = $00	 						; Constants for C
   20 00:0000 -  -  -  -  XTYPE_FLOAT = $01
   21 00:0000 -  -  -  -  XTYPE_STRING = $02
   22 00:0000 -  -  -  -  XTYPE_REFERENCE = $80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   25 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   26 00:0000 -  -  -  -  CIsString = 1 								; Bit 1 set if string
   27 00:0000 -  -  -  -  CIsFloat = 0 								; Bit 0 set if float
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ;									Changes and Updates
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;		Date			Notes
   36 00:0000 -  -  -  -  ;		==== 			=====
   37 00:0000 -  -  -  -  ;
   38 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_XOR                             	$0092 ; xor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD 84 07 00 		call 	SYSInitialise
   44 00:0004 11 00 08 00 		ld 		de,TestInstance
   45 00:0008 21 3B 18 00 		ld 		hl,EndTestInstance
   46 00:000C CD 2C 02 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 54 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 EF 00 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD 86 07 00 		call 	SYSPrintChar
   56 00:0020 CD 85 07 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 89 
              01 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 89 
              01 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  ;
   53 00:0048 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 00:0048 -  -  -  -  ;
   55 00:0048 -  -  -  -  
   56 00:0048 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 00:0048 00 00 00 00 		.dw 	0,0
   58 00:004C -  -  -  -  
   59 00:004C -  -  -  -  ; ***************************************************************************************
   60 00:004C -  -  -  -  ;
   61 00:004C -  -  -  -  ;										Run variables
   62 00:004C -  -  -  -  ;
   63 00:004C -  -  -  -  ; ***************************************************************************************
   64 00:004C -  -  -  -  
   65 00:004C -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 00:004C 00 00 00 00 		.dw 	0,0
   67 00:0050 -  -  -  -  		
   68 00:0050 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 00:0050 00 00 00 00 		.dw 	0,0
   70 00:0054 -  -  -  -  
   71 00:0054 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 00:0054 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 00:005A -  -  -  -  
   74 00:005A -  -  -  -  AConvert: 									; used for address conversions.
   75 00:005A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 00:0060 -  -  -  -  		
   77 00:0060 -  -  -  -  RandomSeed: 								; random number seeds.
   78 00:0060 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 00:0070 -  -  -  -  
   80 00:0070 -  -  -  -  s; ***************************************************************************************
   81 00:0070 -  -  -  -  ;
   82 00:0070 -  -  -  -  ;										  Buffers
   83 00:0070 -  -  -  -  ;
   84 00:0070 -  -  -  -  ; ***************************************************************************************
   85 00:0070 -  -  -  -  
   86 00:0070 -  -  -  -  ConvertBuffer:
   87 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 00:00B0 -  -  -  -  
   89 00:00B0 -  -  -  -  ; ***************************************************************************************
   90 00:00B0 -  -  -  -  ;
   91 00:00B0 -  -  -  -  ;									Changes and Updates
   92 00:00B0 -  -  -  -  ;
   93 00:00B0 -  -  -  -  ; ***************************************************************************************
   94 00:00B0 -  -  -  -  ;
   95 00:00B0 -  -  -  -  ;		Date			Notes
   96 00:00B0 -  -  -  -  ;		==== 			=====
   97 00:00B0 -  -  -  -  ;
   98 00:00B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:00B0 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00B0 -  -  -  -  ; ***************************************************************************************
    2 00:00B0 -  -  -  -  ; ***************************************************************************************
    3 00:00B0 -  -  -  -  ;
    4 00:00B0 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00B0 -  -  -  -  ;		Reviewed :	No
    8 00:00B0 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00B0 -  -  -  -  ;
   10 00:00B0 -  -  -  -  ; ***************************************************************************************
   11 00:00B0 -  -  -  -  ; ***************************************************************************************
   12 00:00B0 -  -  -  -  
   13 00:00B0 -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00B0 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00B0 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00B0 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00B0 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00B0 -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00B0 C3 F3 01 00 		jp 		SyntaxError
   20 00:00B4 -  -  -  -  
   21 00:00B4 -  -  -  -  ; ***************************************************************************************
   22 00:00B4 -  -  -  -  ;
   23 00:00B4 -  -  -  -  ;									Changes and Updates
   24 00:00B4 -  -  -  -  ;
   25 00:00B4 -  -  -  -  ; ***************************************************************************************
   26 00:00B4 -  -  -  -  ;
   27 00:00B4 -  -  -  -  ;		Date			Notes
   28 00:00B4 -  -  -  -  ;		==== 			=====
   29 00:00B4 -  -  -  -  ;
   30 00:00B4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00B4 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00B4 -  -  -  -  ; ***************************************************************************************
    2 00:00B4 -  -  -  -  ; ***************************************************************************************
    3 00:00B4 -  -  -  -  ;
    4 00:00B4 -  -  -  -  ;		Name : 		colon.asm
    5 00:00B4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00B4 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00B4 -  -  -  -  ;		Reviewed :	No
    8 00:00B4 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00B4 -  -  -  -  ;
   10 00:00B4 -  -  -  -  ; ***************************************************************************************
   11 00:00B4 -  -  -  -  ; ***************************************************************************************
   12 00:00B4 -  -  -  -  
   13 00:00B4 -  -  -  -  ; ***************************************************************************************
   14 00:00B4 -  -  -  -  ;
   15 00:00B4 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00B4 -  -  -  -  ;
   17 00:00B4 -  -  -  -  ; ***************************************************************************************
   18 00:00B4 -  -  -  -  
   19 00:00B4 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00B4 C9 -  -  -  		ret
   21 00:00B5 -  -  -  -  
   22 00:00B5 -  -  -  -  ; ***************************************************************************************
   23 00:00B5 -  -  -  -  ;
   24 00:00B5 -  -  -  -  ;									Changes and Updates
   25 00:00B5 -  -  -  -  ;
   26 00:00B5 -  -  -  -  ; ***************************************************************************************
   27 00:00B5 -  -  -  -  ;
   28 00:00B5 -  -  -  -  ;		Date			Notes
   29 00:00B5 -  -  -  -  ;		==== 			=====
   30 00:00B5 -  -  -  -  ;
   31 00:00B5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:00B5 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00B5 -  -  -  -  ; ***************************************************************************************
    2 00:00B5 -  -  -  -  ; ***************************************************************************************
    3 00:00B5 -  -  -  -  ;
    4 00:00B5 -  -  -  -  ;		Name : 		end.asm
    5 00:00B5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00B5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00B5 -  -  -  -  ;		Reviewed :	No
    8 00:00B5 -  -  -  -  ;		Purpose :	End command
    9 00:00B5 -  -  -  -  ;
   10 00:00B5 -  -  -  -  ; ***************************************************************************************
   11 00:00B5 -  -  -  -  ; ***************************************************************************************
   12 00:00B5 -  -  -  -  
   13 00:00B5 -  -  -  -  ; ***************************************************************************************
   14 00:00B5 -  -  -  -  ;
   15 00:00B5 -  -  -  -  ;										END command
   16 00:00B5 -  -  -  -  ;
   17 00:00B5 -  -  -  -  ; ***************************************************************************************
   18 00:00B5 -  -  -  -  
   19 00:00B5 -  -  -  -  Command_END: 	;; [end]
   20 00:00B5 3E 00 C3 89 
              01 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00BB -  -  -  -  
   22 00:00BB -  -  -  -  ; ***************************************************************************************
   23 00:00BB -  -  -  -  ;
   24 00:00BB -  -  -  -  ;									Changes and Updates
   25 00:00BB -  -  -  -  ;
   26 00:00BB -  -  -  -  ; ***************************************************************************************
   27 00:00BB -  -  -  -  ;
   28 00:00BB -  -  -  -  ;		Date			Notes
   29 00:00BB -  -  -  -  ;		==== 			=====
   30 00:00BB -  -  -  -  ;
   31 00:00BB -  -  -  -  ; ***************************************************************************************
   32 00:00BB -  -  -  -  		
Listing for file "_build.asm"
   15 00:00BB -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00BB -  -  -  -  ; ***************************************************************************************
    2 00:00BB -  -  -  -  ; ***************************************************************************************
    3 00:00BB -  -  -  -  ;
    4 00:00BB -  -  -  -  ;		Name : 		endofline.asm
    5 00:00BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00BB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00BB -  -  -  -  ;		Reviewed :	None
    8 00:00BB -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00BB -  -  -  -  ;
   10 00:00BB -  -  -  -  ; ***************************************************************************************
   11 00:00BB -  -  -  -  ; ***************************************************************************************
   12 00:00BB -  -  -  -  
   13 00:00BB -  -  -  -  ; ***************************************************************************************
   14 00:00BB -  -  -  -  ;
   15 00:00BB -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00BB -  -  -  -  ;
   17 00:00BB -  -  -  -  ; ***************************************************************************************
   18 00:00BB -  -  -  -  
   19 00:00BB -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00BB DD 2A 4C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00C0 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00C4 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:00C7 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:00C9 -  -  -  -  		;
   25 00:00C9 ED 7B 50 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:00CE C3 FD 00 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:00D2 -  -  -  -  
   28 00:00D2 -  -  -  -  ; ***************************************************************************************
   29 00:00D2 -  -  -  -  ;
   30 00:00D2 -  -  -  -  ;									Changes and Updates
   31 00:00D2 -  -  -  -  ;
   32 00:00D2 -  -  -  -  ; ***************************************************************************************
   33 00:00D2 -  -  -  -  ;
   34 00:00D2 -  -  -  -  ;		Date			Notes
   35 00:00D2 -  -  -  -  ;		==== 			=====
   36 00:00D2 -  -  -  -  ;
   37 00:00D2 -  -  -  -  ; ***************************************************************************************
   38 00:00D2 -  -  -  -  		
Listing for file "_build.asm"
   16 00:00D2 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:00D2 -  -  -  -  ; ***************************************************************************************
    2 00:00D2 -  -  -  -  ; ***************************************************************************************
    3 00:00D2 -  -  -  -  ;
    4 00:00D2 -  -  -  -  ;		Name : 		rem.asm
    5 00:00D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00D2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00D2 -  -  -  -  ;		Reviewed :	No
    8 00:00D2 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:00D2 -  -  -  -  ;
   10 00:00D2 -  -  -  -  ; ***************************************************************************************
   11 00:00D2 -  -  -  -  ; ***************************************************************************************
   12 00:00D2 -  -  -  -  
   13 00:00D2 -  -  -  -  ; ***************************************************************************************
   14 00:00D2 -  -  -  -  ;
   15 00:00D2 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:00D2 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:00D2 -  -  -  -  ;
   18 00:00D2 -  -  -  -  ; ***************************************************************************************
   19 00:00D2 -  -  -  -  
   20 00:00D2 -  -  -  -  Command_REM: 	;; [rem]
   21 00:00D2 -  -  -  -  Command_REM2: 	;; [']
   22 00:00D2 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:00D5 DD 23 -  -  		inc 	ix
   24 00:00D7 FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:00D9 C8 -  -  -  		ret 	z
   26 00:00DA FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:00DC C8 -  -  -  		ret 	z
   28 00:00DD FE 3F -  -  		cp 		STRING_MARKER
   29 00:00DF C2 F3 01 00 		jp 		nz,SyntaxError
   30 00:00E3 -  -  -  -  		;		
   31 00:00E3 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:00E7 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:00EA 13 -  -  -  		inc 	de 
   34 00:00EB 13 -  -  -  		inc 	de
   35 00:00EC DD 19 -  -  		add 	ix,de 						; skip string
   36 00:00EE C9 -  -  -  		ret
   37 00:00EF -  -  -  -  
   38 00:00EF -  -  -  -  ; ***************************************************************************************
   39 00:00EF -  -  -  -  ;
   40 00:00EF -  -  -  -  ;									Changes and Updates
   41 00:00EF -  -  -  -  ;
   42 00:00EF -  -  -  -  ; ***************************************************************************************
   43 00:00EF -  -  -  -  ;
   44 00:00EF -  -  -  -  ;		Date			Notes
   45 00:00EF -  -  -  -  ;		==== 			=====
   46 00:00EF -  -  -  -  ;
   47 00:00EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:00EF -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:00EF -  -  -  -  ; ***************************************************************************************
    2 00:00EF -  -  -  -  ; ***************************************************************************************
    3 00:00EF -  -  -  -  ;
    4 00:00EF -  -  -  -  ;		Name : 		run.asm
    5 00:00EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00EF -  -  -  -  ;		Reviewed :	No
    8 00:00EF -  -  -  -  ;		Purpose :	Run command
    9 00:00EF -  -  -  -  ;
   10 00:00EF -  -  -  -  ; ***************************************************************************************
   11 00:00EF -  -  -  -  ; ***************************************************************************************
   12 00:00EF -  -  -  -  
   13 00:00EF -  -  -  -  ; ***************************************************************************************
   14 00:00EF -  -  -  -  ;
   15 00:00EF -  -  -  -  ;										RUN command
   16 00:00EF -  -  -  -  ;
   17 00:00EF -  -  -  -  ; ***************************************************************************************
   18 00:00EF -  -  -  -  
   19 00:00EF -  -  -  -  Command_RUN: 	;; [run]
   20 00:00EF CD F9 01 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:00F3 -  -  -  -  
   22 00:00F3 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:00F8 ED 73 50 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:00FD -  -  -  -  		;
   25 00:00FD -  -  -  -  		; 		New line at IX.
   26 00:00FD -  -  -  -  		;
   27 00:00FD -  -  -  -  CRNewLine:
   28 00:00FD DD 22 4C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 00:0102 -  -  -  -  		;
   30 00:0102 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 00:0105 B7 -  -  -  		or 		a
   32 00:0106 CA B5 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   33 00:010A -  -  -  -  		;
   34 00:010A DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 00:010C DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 00:010E DD 23 -  -  		inc 	ix
   37 00:0110 -  -  -  -  		;
   38 00:0110 -  -  -  -  		; 		New command at IX
   39 00:0110 -  -  -  -  		;
   40 00:0110 -  -  -  -  _CRNewCommand:	
   41 00:0110 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 00:0113 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 00:0114 F2 4B 01 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 00:0118 -  -  -  -  		;
   45 00:0118 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 00:011A 30 06 -  -  		jr  	nc,_CRDoCommand
   47 00:011C FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 00:011E D2 3F 01 00 		jp 		nc,_CRAlternateLets
   49 00:0122 -  -  -  -  		;
   50 00:0122 -  -  -  -  _CRDoCommand:		
   51 00:0122 E6 7F 21 00 
              00 00 6F 29 
              29 11 76 04 
              00 19 ED 17 
              ED 53 55 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 00:0137 DD 23 -  -  		inc 	ix 							; skip over token.
   53 00:0139 CD 54 00 00 		call 	JumpCode 					; call the routine.
   54 00:013D 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 00:013F -  -  -  -  		;
   56 00:013F -  -  -  -  		; 		Do CALL (HL)
   57 00:013F -  -  -  -  		;
   58 00:013F -  -  -  -  		;
   59 00:013F -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 00:013F -  -  -  -  		;		
   61 00:013F -  -  -  -  _CRAlternateLets:		
   62 00:013F FE 83 -  -  		cp 		KWD_PLING
   63 00:0141 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 00:0143 FE 84 -  -  		cp 		KWD_QMARK
   65 00:0145 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 00:0147 C3 F3 01 00 		jp 		SyntaxError
   67 00:014B -  -  -  -  		;
   68 00:014B -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 00:014B -  -  -  -  		;
   70 00:014B -  -  -  -  _CRAssignmentHandler:		
   71 00:014B FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 00:014D D2 F3 01 00 		jp 		nc,SyntaxError
   73 00:0151 -  -  -  -  _CRAssignmentLet:		
   74 00:0151 3E 0C C3 89 
              01 00 -  -  		ERR_TODO
   75 00:0157 -  -  -  -  		;call	Command_LET
   76 00:0157 C3 10 01 00 		jp 		_CRNewCommand
   77 00:015B -  -  -  -  
   78 00:015B -  -  -  -  ; ***************************************************************************************
   79 00:015B -  -  -  -  ;
   80 00:015B -  -  -  -  ;									Changes and Updates
   81 00:015B -  -  -  -  ;
   82 00:015B -  -  -  -  ; ***************************************************************************************
   83 00:015B -  -  -  -  ;
   84 00:015B -  -  -  -  ;		Date			Notes
   85 00:015B -  -  -  -  ;		==== 			=====
   86 00:015B -  -  -  -  ;
   87 00:015B -  -  -  -  ; ***************************************************************************************
   88 00:015B -  -  -  -  		
Listing for file "_build.asm"
   18 00:015B -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:015B -  -  -  -  ; ***************************************************************************************
    2 00:015B -  -  -  -  ; ***************************************************************************************
    3 00:015B -  -  -  -  ;
    4 00:015B -  -  -  -  ;		Name : 		stop.asm
    5 00:015B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:015B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:015B -  -  -  -  ;		Reviewed :	No
    8 00:015B -  -  -  -  ;		Purpose :	Stop command
    9 00:015B -  -  -  -  ;
   10 00:015B -  -  -  -  ; ***************************************************************************************
   11 00:015B -  -  -  -  ; ***************************************************************************************
   12 00:015B -  -  -  -  
   13 00:015B -  -  -  -  ; ***************************************************************************************
   14 00:015B -  -  -  -  ;
   15 00:015B -  -  -  -  ;										STOP command
   16 00:015B -  -  -  -  ;
   17 00:015B -  -  -  -  ; ***************************************************************************************
   18 00:015B -  -  -  -  
   19 00:015B -  -  -  -  Command_STOP: 	;; [stop]
   20 00:015B 3E 0A C3 89 
              01 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0161 -  -  -  -  
   22 00:0161 -  -  -  -  ; ***************************************************************************************
   23 00:0161 -  -  -  -  ;
   24 00:0161 -  -  -  -  ;									Changes and Updates
   25 00:0161 -  -  -  -  ;
   26 00:0161 -  -  -  -  ; ***************************************************************************************
   27 00:0161 -  -  -  -  ;
   28 00:0161 -  -  -  -  ;		Date			Notes
   29 00:0161 -  -  -  -  ;		==== 			=====
   30 00:0161 -  -  -  -  ;
   31 00:0161 -  -  -  -  ; ***************************************************************************************
   32 00:0161 -  -  -  -  		
Listing for file "_build.asm"
   19 00:0161 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0161 -  -  -  -  ; ***************************************************************************************
    2 00:0161 -  -  -  -  ; ***************************************************************************************
    3 00:0161 -  -  -  -  ;
    4 00:0161 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0161 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0161 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0161 -  -  -  -  ;		Reviewed :	No
    8 00:0161 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0161 -  -  -  -  ;
   10 00:0161 -  -  -  -  ; ***************************************************************************************
   11 00:0161 -  -  -  -  ; ***************************************************************************************
   12 00:0161 -  -  -  -  
   13 00:0161 -  -  -  -  ; ***************************************************************************************
   14 00:0161 -  -  -  -  ;
   15 00:0161 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0161 -  -  -  -  ;
   17 00:0161 -  -  -  -  ; ***************************************************************************************
   18 00:0161 -  -  -  -  
   19 00:0161 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0161             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0161             		inc 	ix
   22 00:0161             		cp 		ch 							; exit if matches
   23 00:0161             		ret 	z
   24 00:0161             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0161             		jp 		ErrorHandler
   26 00:0161             #endmacro
   27 00:0161 -  -  -  -  
   28 00:0161 -  -  -  -  CheckRightBracket:
   29 00:0161 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 89 
              01 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:016F -  -  -  -  
   31 00:016F -  -  -  -  CheckComma:
   32 00:016F DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 89 
              01 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 00:017D -  -  -  -  
   34 00:017D -  -  -  -  ; ***************************************************************************************
   35 00:017D -  -  -  -  ;
   36 00:017D -  -  -  -  ; 							Check A, gives Syntax Error
   37 00:017D -  -  -  -  ;
   38 00:017D -  -  -  -  ; ***************************************************************************************
   39 00:017D -  -  -  -  
   40 00:017D -  -  -  -  CheckNextA:
   41 00:017D DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 00:0180 DD 23 -  -  		inc 	ix 							; skip character
   43 00:0182 C8 -  -  -  		ret 	z 							; yes, okay
   44 00:0183 3E 0B C3 89 
              01 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 00:0189 -  -  -  -  		
   46 00:0189 -  -  -  -  ; ***************************************************************************************
   47 00:0189 -  -  -  -  ;
   48 00:0189 -  -  -  -  ;									Changes and Updates
   49 00:0189 -  -  -  -  ;
   50 00:0189 -  -  -  -  ; ***************************************************************************************
   51 00:0189 -  -  -  -  ;
   52 00:0189 -  -  -  -  ;		Date			Notes
   53 00:0189 -  -  -  -  ;		==== 			=====
   54 00:0189 -  -  -  -  ;
   55 00:0189 -  -  -  -  ; ***************************************************************************************
   56 00:0189 -  -  -  -  		
Listing for file "_build.asm"
   20 00:0189 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0189 -  -  -  -  ; ***************************************************************************************
    2 00:0189 -  -  -  -  ; ***************************************************************************************
    3 00:0189 -  -  -  -  ;
    4 00:0189 -  -  -  -  ;		Name : 		errors.asm
    5 00:0189 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0189 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0189 -  -  -  -  ;		Reviewed :	No
    8 00:0189 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0189 -  -  -  -  ;
   10 00:0189 -  -  -  -  ; ***************************************************************************************
   11 00:0189 -  -  -  -  ; ***************************************************************************************
   12 00:0189 -  -  -  -  
   13 00:0189 -  -  -  -  ; ***************************************************************************************
   14 00:0189 -  -  -  -  ;
   15 00:0189 -  -  -  -  ;								Error handler, message A 
   16 00:0189 -  -  -  -  ;
   17 00:0189 -  -  -  -  ; ***************************************************************************************
   18 00:0189 -  -  -  -  
   19 00:0189 -  -  -  -  ErrorHandler:
   20 00:0189 F5 -  -  -  		push 	af 						; save error ID
   21 00:018A -  -  -  -  
   22 00:018A 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:018E 6F -  -  -  		ld 		l,a
   24 00:018F 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0190 29 -  -  -  		add 	hl,hl 		
   26 00:0191 11 70 03 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:0195 19 -  -  -  		add 	hl,de
   28 00:0196 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:0198 CD 4B 02 00 		call 	PrintStringAtHL
   30 00:019C -  -  -  -  		;
   31 00:019C F1 -  -  -  		pop 	af 						; restore error ID
   32 00:019D B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:019E 28 2F -  -  		jr 		z,_EHExit
   34 00:01A0 -  -  -  -  		;
   35 00:01A0 DD 2A 4C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:01A5 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:01A8 B7 -  -  -  		or 		a
   38 00:01A9 28 24 -  -  		jr 		z,_EHExit
   39 00:01AB -  -  -  -  
   40 00:01AB 21 D7 01 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:01AF CD 4B 02 00 		call 	PrintStringAtHL 
   42 00:01B3 -  -  -  -  		
   43 00:01B3 D9 -  -  -  		exx								; HL'HL = line number
   44 00:01B4 21 00 00 00 		ld 		hl,$0000 		
   45 00:01B8 D9 -  -  -  		exx 
   46 00:01B9 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:01BC DD 66 02 -  		ld 		h,(ix+2)
   48 00:01BF 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:01C1 01 70 00 00 		ld 		bc,ConvertBuffer
   50 00:01C5 CD 38 07 00 		call 	Int32ToString
   51 00:01C9 C5 -  -  -  		push 	bc
   52 00:01CA E1 -  -  -  		pop 	hl
   53 00:01CB CD 4B 02 00 		call 	PrintStringAtHL			; print error line number.
   54 00:01CF -  -  -  -  _EHExit:		
   55 00:01CF CD 87 07 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:01D3 C3 1A 00 00 		jp 		WarmStart
   57 00:01D7 -  -  -  -  
   58 00:01D7 -  -  -  -  _EHAtText:
   59 00:01D7 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:01E1 -  -  -  -  
   61 00:01E1 -  -  -  -  NotImplemented:
   62 00:01E1 3E 04 C3 89 
              01 00 -  -  		ERR_DISABLED
   63 00:01E7 -  -  -  -  TypeMismatch:
   64 00:01E7 3E 02 C3 89 
              01 00 -  -  		ERR_BADTYPE
   65 00:01ED -  -  -  -  BadValue:
   66 00:01ED 3E 03 C3 89 
              01 00 -  -  		ERR_BADVALUE
   67 00:01F3 -  -  -  -  SyntaxError:
   68 00:01F3 3E 0B C3 89 
              01 00 -  -  		ERR_SYNTAX
   69 00:01F9 -  -  -  -  						
   70 00:01F9 -  -  -  -  ; ***************************************************************************************
   71 00:01F9 -  -  -  -  ;
   72 00:01F9 -  -  -  -  ;									Changes and Updates
   73 00:01F9 -  -  -  -  ;
   74 00:01F9 -  -  -  -  ; ***************************************************************************************
   75 00:01F9 -  -  -  -  ;
   76 00:01F9 -  -  -  -  ;		Date			Notes
   77 00:01F9 -  -  -  -  ;		==== 			=====
   78 00:01F9 -  -  -  -  ;
   79 00:01F9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:01F9 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:01F9 -  -  -  -  ; ***************************************************************************************
    2 00:01F9 -  -  -  -  ; ***************************************************************************************
    3 00:01F9 -  -  -  -  ;
    4 00:01F9 -  -  -  -  ;		Name : 		clear.asm
    5 00:01F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01F9 -  -  -  -  ;		Reviewed :	No
    8 00:01F9 -  -  -  -  ;		Purpose :	Clear command.
    9 00:01F9 -  -  -  -  ;
   10 00:01F9 -  -  -  -  ; ***************************************************************************************
   11 00:01F9 -  -  -  -  ; ***************************************************************************************
   12 00:01F9 -  -  -  -  
   13 00:01F9 -  -  -  -  ; ***************************************************************************************
   14 00:01F9 -  -  -  -  ;
   15 00:01F9 -  -  -  -  ;										CLEAR command
   16 00:01F9 -  -  -  -  ;
   17 00:01F9 -  -  -  -  ; ***************************************************************************************
   18 00:01F9 -  -  -  -  
   19 00:01F9 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:01F9 -  -  -  -  		;
   21 00:01F9 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:01F9 -  -  -  -  		;
   23 00:01F9 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:01FD -  -  -  -  _CCFindLow:
   25 00:01FD 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0201 5E -  -  -  		ld 		e,(hl)		
   27 00:0202 19 -  -  -  		add 	hl,de
   28 00:0203 7B -  -  -  		ld 		a,e
   29 00:0204 B7 -  -  -  		or 		a
   30 00:0205 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:0207 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 00:0208 23 -  -  -  		inc 	hl
   33 00:0209 22 48 00 00 		ld 		(LowAllocMemory),hl
   34 00:020D -  -  -  -  		;
   35 00:020D -  -  -  -  		; 	 		Reset the language stack
   36 00:020D -  -  -  -  		;
   37 00:020D 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 00:0211 -  -  -  -  		;
   39 00:0211 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 00:0213 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:0217 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:021B 19 -  -  -  		add 	hl,de
   43 00:021C 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:021E 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:0222 -  -  -  -  		;
   46 00:0222 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:0226 19 -  -  -  		add 	hl,de
   48 00:0227 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:022B -  -  -  -  		;
   50 00:022B -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 00:022B -  -  -  -  		;
   52 00:022B -  -  -  -  
   53 00:022B -  -  -  -  		;
   54 00:022B -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 00:022B -  -  -  -  		;
   56 00:022B -  -  -  -  
   57 00:022B C9 -  -  -  		ret
   58 00:022C -  -  -  -  
   59 00:022C -  -  -  -  ; ***************************************************************************************
   60 00:022C -  -  -  -  ;
   61 00:022C -  -  -  -  ;									Changes and Updates
   62 00:022C -  -  -  -  ;
   63 00:022C -  -  -  -  ; ***************************************************************************************
   64 00:022C -  -  -  -  ;
   65 00:022C -  -  -  -  ;		Date			Notes
   66 00:022C -  -  -  -  ;		==== 			=====
   67 00:022C -  -  -  -  ;
   68 00:022C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:022C -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:022C -  -  -  -  ; ***************************************************************************************
    2 00:022C -  -  -  -  ; ***************************************************************************************
    3 00:022C -  -  -  -  ;
    4 00:022C -  -  -  -  ;		Name : 		instance.asm
    5 00:022C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:022C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:022C -  -  -  -  ;		Reviewed :	No
    8 00:022C -  -  -  -  ;		Purpose :	Instance handling
    9 00:022C -  -  -  -  ;
   10 00:022C -  -  -  -  ; ***************************************************************************************
   11 00:022C -  -  -  -  ; ***************************************************************************************
   12 00:022C -  -  -  -  
   13 00:022C -  -  -  -  ; ***************************************************************************************
   14 00:022C -  -  -  -  ;
   15 00:022C -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:022C -  -  -  -  ;
   17 00:022C -  -  -  -  ; ***************************************************************************************
   18 00:022C -  -  -  -  
   19 00:022C -  -  -  -  SetCurrentInstance:
   20 00:022C ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0231 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0235 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:023A -  -  -  -  
   24 00:023A C9 -  -  -  		ret
   25 00:023B -  -  -  -  
   26 00:023B -  -  -  -  
   27 00:023B -  -  -  -  ; ***************************************************************************************
   28 00:023B -  -  -  -  ;
   29 00:023B -  -  -  -  ;									Changes and Updates
   30 00:023B -  -  -  -  ;
   31 00:023B -  -  -  -  ; ***************************************************************************************
   32 00:023B -  -  -  -  ;
   33 00:023B -  -  -  -  ;		Date			Notes
   34 00:023B -  -  -  -  ;		==== 			=====
   35 00:023B -  -  -  -  ;
   36 00:023B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:023B -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:023B -  -  -  -  ; ***************************************************************************************
    2 00:023B -  -  -  -  ; ***************************************************************************************
    3 00:023B -  -  -  -  ;
    4 00:023B -  -  -  -  ;		Name : 		new.asm
    5 00:023B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:023B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:023B -  -  -  -  ;		Reviewed :	No
    8 00:023B -  -  -  -  ;		Purpose :	New command.
    9 00:023B -  -  -  -  ;
   10 00:023B -  -  -  -  ; ***************************************************************************************
   11 00:023B -  -  -  -  ; ***************************************************************************************
   12 00:023B -  -  -  -  
   13 00:023B -  -  -  -  ; ***************************************************************************************
   14 00:023B -  -  -  -  ;
   15 00:023B -  -  -  -  ;										NEW command
   16 00:023B -  -  -  -  ;
   17 00:023B -  -  -  -  ; ***************************************************************************************
   18 00:023B -  -  -  -  
   19 00:023B -  -  -  -  Command_NEW: 	;; [new]
   20 00:023B 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:023F 36 00 -  -  		ld 		(hl),0
   22 00:0241 CD F9 01 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0245 3E 00 C3 89 
              01 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:024B -  -  -  -  
   25 00:024B -  -  -  -  ; ***************************************************************************************
   26 00:024B -  -  -  -  ;
   27 00:024B -  -  -  -  ;									Changes and Updates
   28 00:024B -  -  -  -  ;
   29 00:024B -  -  -  -  ; ***************************************************************************************
   30 00:024B -  -  -  -  ;
   31 00:024B -  -  -  -  ;		Date			Notes
   32 00:024B -  -  -  -  ;		==== 			=====
   33 00:024B -  -  -  -  ;
   34 00:024B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 00:024B -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:024B -  -  -  -  ; ***************************************************************************************
    2 00:024B -  -  -  -  ; ***************************************************************************************
    3 00:024B -  -  -  -  ;
    4 00:024B -  -  -  -  ;		Name : 		utility.asm
    5 00:024B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:024B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:024B -  -  -  -  ;		Reviewed :	No
    8 00:024B -  -  -  -  ;		Purpose :	Utility routines
    9 00:024B -  -  -  -  ;
   10 00:024B -  -  -  -  ; ***************************************************************************************
   11 00:024B -  -  -  -  ; ***************************************************************************************
   12 00:024B -  -  -  -  
   13 00:024B -  -  -  -  ; ***************************************************************************************
   14 00:024B -  -  -  -  ;
   15 00:024B -  -  -  -  ;							Print ASCIIZ string at HL
   16 00:024B -  -  -  -  ;
   17 00:024B -  -  -  -  ; ***************************************************************************************
   18 00:024B -  -  -  -  
   19 00:024B -  -  -  -  PrintStringAtHL:
   20 00:024B 7E -  -  -  		ld 		a,(hl)
   21 00:024C B7 -  -  -  		or 		a
   22 00:024D C8 -  -  -  		ret 	z
   23 00:024E CD 86 07 00 		call 	SYSPrintChar
   24 00:0252 23 -  -  -  		inc 	hl
   25 00:0253 18 F6 -  -  		jr 		PrintStringAtHL
   26 00:0255 -  -  -  -  
   27 00:0255 -  -  -  -  ; ***************************************************************************************
   28 00:0255 -  -  -  -  ;
   29 00:0255 -  -  -  -  ;									Changes and Updates
   30 00:0255 -  -  -  -  ;
   31 00:0255 -  -  -  -  ; ***************************************************************************************
   32 00:0255 -  -  -  -  ;
   33 00:0255 -  -  -  -  ;		Date			Notes
   34 00:0255 -  -  -  -  ;		==== 			=====
   35 00:0255 -  -  -  -  ;
   36 00:0255 -  -  -  -  ; ***************************************************************************************
   37 00:0255 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0255 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:0255 -  -  -  -  ;
    2 00:0255 -  -  -  -  ;	This file is automatically generated.
    3 00:0255 -  -  -  -  ;
    4 00:0255 -  -  -  -  ;
    5 00:0255 -  -  -  -  ;	Keywords for set 0
    6 00:0255 -  -  -  -  ;
    7 00:0255 -  -  -  -  KeywordsSet0:
    8 00:0255 01 20 -  -  	.db	1," "              ; $0080
    9 00:0257 01 20 -  -  	.db	1," "              ; $0081
   10 00:0259 01 20 -  -  	.db	1," "              ; $0082
   11 00:025B 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:025D 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:025F 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:0261 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:0263 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:0267 01 2B -  -  	.db	1,"+"              ; $0088
   17 00:0269 01 2D -  -  	.db	1,"-"              ; $0089
   18 00:026B 02 3E 3D -  	.db	2,">="             ; $008a
   19 00:026E 02 3C 3D -  	.db	2,"<="             ; $008b
   20 00:0271 01 3E -  -  	.db	1,">"              ; $008c
   21 00:0273 01 3C -  -  	.db	1,"<"              ; $008d
   22 00:0275 01 3D -  -  	.db	1,"="              ; $008e
   23 00:0277 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 00:027A 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 00:027E 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 00:0281 03 58 4F 52 	.db	3,"XOR"            ; $0092
   27 00:0285 01 26 -  -  	.db	1,"&"              ; $0093
   28 00:0287 01 28 -  -  	.db	1,"("              ; $0094
   29 00:0289 01 24 -  -  	.db	1,"$"              ; $0095
   30 00:028B 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 00:028F 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 00:0293 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 00:0297 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 00:029B 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 00:029F 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 00:02A4 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 00:02A8 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 00:02AD 01 29 -  -  	.db	1,")"              ; $009e
   39 00:02AF 01 2C -  -  	.db	1,","              ; $009f
   40 00:02B1 01 3A -  -  	.db	1,":"              ; $00a0
   41 00:02B3 01 3B -  -  	.db	1,";"              ; $00a1
   42 00:02B5 01 27 -  -  	.db	1,"'"              ; $00a2
   43 00:02B7 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 00:02BE 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 00:02C4 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 00:02C7 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 00:02CC 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 00:02D1 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 00:02D5 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 00:02D8 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 00:02DD 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 00:02E2 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 00:02E6 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 00:02EB 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 00:02F3 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 00:02F9 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 00:02FD 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 00:0301 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 00:0305 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 00:0309 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 00:030F 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 00:0314 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 00:0319 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 00:031E 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 00:0322 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 00:0326 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 00:032B 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 00:0330 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 00:0338 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 00:033F 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 00:0345 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 00:0349 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 00:034E 00 -  -  -  	.db	0
   74 00:034F -  -  -  -  ;
   75 00:034F -  -  -  -  ;	Keywords for set 1
   76 00:034F -  -  -  -  ;
   77 00:034F -  -  -  -  KeywordsSet1:
   78 00:034F 00 -  -  -  	.db	0
   79 00:0350 -  -  -  -  ;
   80 00:0350 -  -  -  -  ;	Keywords for set 2
   81 00:0350 -  -  -  -  ;
   82 00:0350 -  -  -  -  KeywordsSet2:
   83 00:0350 00 -  -  -  	.db	0
Listing for file "_build.asm"
   26 00:0351 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0351 -  -  -  -  ;
    2 00:0351 -  -  -  -  ;	This file is automatically generated.
    3 00:0351 -  -  -  -  ;
    4 00:0351 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:0360 -  -  -  -  PrecedenceTable:
    6 00:0360 06 -  -  -  	.db	6	; $0083 !
    7 00:0361 06 -  -  -  	.db	6	; $0084 ?
    8 00:0362 05 -  -  -  	.db	5	; $0085 *
    9 00:0363 05 -  -  -  	.db	5	; $0086 /
   10 00:0364 05 -  -  -  	.db	5	; $0087 mod
   11 00:0365 04 -  -  -  	.db	4	; $0088 +
   12 00:0366 04 -  -  -  	.db	4	; $0089 -
   13 00:0367 03 -  -  -  	.db	3	; $008a >=
   14 00:0368 03 -  -  -  	.db	3	; $008b <=
   15 00:0369 03 -  -  -  	.db	3	; $008c >
   16 00:036A 03 -  -  -  	.db	3	; $008d <
   17 00:036B 03 -  -  -  	.db	3	; $008e =
   18 00:036C 03 -  -  -  	.db	3	; $008f <>
   19 00:036D 02 -  -  -  	.db	2	; $0090 and
   20 00:036E 01 -  -  -  	.db	1	; $0091 or
   21 00:036F 01 -  -  -  	.db	1	; $0092 xor
   22 00:0370 -  -  -  -  
Listing for file "_build.asm"
   27 00:0370 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0370 -  -  -  -  ;
    2 00:0370 -  -  -  -  ;	This is automatically generated.
    3 00:0370 -  -  -  -  ;
    4 00:0370 -  -  -  -  ErrorIDTable:
    5 00:0370 A8 03 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0374 AE 03 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0378 BF 03 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:037C CD 03 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0380 D7 03 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0384 F1 03 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0388 02 04 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:038C 10 04 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0390 1E 04 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 00:0394 34 04 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 00:0398 42 04 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 00:039C 47 04 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 00:03A0 54 04 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 00:03A4 65 04 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 00:03A8 -  -  -  -  
   20 00:03A8 -  -  -  -  ErrText_warmstart:
   21 00:03A8 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 00:03AE -  -  -  -  ErrText_assert:
   23 00:03AE 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 00:03BF -  -  -  -  ErrText_badtype:
   25 00:03BF 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 00:03CD -  -  -  -  ErrText_badvalue:
   27 00:03CD 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 00:03D7 -  -  -  -  ErrText_disabled:
   29 00:03D7 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 00:03F1 -  -  -  -  ErrText_divzero:
   31 00:03F1 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 00:0402 -  -  -  -  ErrText_memory:
   33 00:0402 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 00:0410 -  -  -  -  ErrText_nocomma:
   35 00:0410 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 00:041E -  -  -  -  ErrText_norbracket:
   37 00:041E 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 00:0434 -  -  -  -  ErrText_notref:
   39 00:0434 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 00:0442 -  -  -  -  ErrText_stop:
   41 00:0442 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 00:0447 -  -  -  -  ErrText_syntax:
   43 00:0447 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 00:0454 -  -  -  -  ErrText_todo:
   45 00:0454 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 00:0465 -  -  -  -  ErrText_unknownvar:
   47 00:0465 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   28 00:0476 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0476 -  -  -  -  ;
    2 00:0476 -  -  -  -  ;	Vectors for set 0
    3 00:0476 -  -  -  -  ;
    4 00:0476 -  -  -  -  VectorsSet0:
    5 00:0476 BB 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:047A 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:047E 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0482 24 00 00 00 	addr(Unimplemented)              ; $0083 !
    9 00:0486 24 00 00 00 	addr(Unimplemented)              ; $0084 ?
   10 00:048A 24 00 00 00 	addr(Unimplemented)              ; $0085 *
   11 00:048E 24 00 00 00 	addr(Unimplemented)              ; $0086 /
   12 00:0492 24 00 00 00 	addr(Unimplemented)              ; $0087 mod
   13 00:0496 24 00 00 00 	addr(Unimplemented)              ; $0088 +
   14 00:049A 24 00 00 00 	addr(Unimplemented)              ; $0089 -
   15 00:049E 24 00 00 00 	addr(Unimplemented)              ; $008a >=
   16 00:04A2 24 00 00 00 	addr(Unimplemented)              ; $008b <=
   17 00:04A6 24 00 00 00 	addr(Unimplemented)              ; $008c >
   18 00:04AA 24 00 00 00 	addr(Unimplemented)              ; $008d <
   19 00:04AE 24 00 00 00 	addr(Unimplemented)              ; $008e =
   20 00:04B2 24 00 00 00 	addr(Unimplemented)              ; $008f <>
   21 00:04B6 24 00 00 00 	addr(Unimplemented)              ; $0090 and
   22 00:04BA 24 00 00 00 	addr(Unimplemented)              ; $0091 or
   23 00:04BE 24 00 00 00 	addr(Unimplemented)              ; $0092 xor
   24 00:04C2 24 00 00 00 	addr(Unimplemented)              ; $0093 &
   25 00:04C6 24 00 00 00 	addr(Unimplemented)              ; $0094 (
   26 00:04CA 24 00 00 00 	addr(Unimplemented)              ; $0095 $
   27 00:04CE 24 00 00 00 	addr(Unimplemented)              ; $0096 rnd
   28 00:04D2 24 00 00 00 	addr(Unimplemented)              ; $0097 len
   29 00:04D6 24 00 00 00 	addr(Unimplemented)              ; $0098 abs
   30 00:04DA 24 00 00 00 	addr(Unimplemented)              ; $0099 sgn
   31 00:04DE 24 00 00 00 	addr(Unimplemented)              ; $009a int
   32 00:04E2 24 00 00 00 	addr(Unimplemented)              ; $009b str$
   33 00:04E6 24 00 00 00 	addr(Unimplemented)              ; $009c asc
   34 00:04EA 24 00 00 00 	addr(Unimplemented)              ; $009d page
   35 00:04EE B0 00 00 00 	addr(BadCmd_RBracket)            ; $009e )
   36 00:04F2 B0 00 00 00 	addr(BadCmd_Comma)               ; $009f ,
   37 00:04F6 B4 00 00 00 	addr(Command_Colon)              ; $00a0 :
   38 00:04FA B0 00 00 00 	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 00:04FE D2 00 00 00 	addr(Command_REM2)               ; $00a2 '
   40 00:0502 24 00 00 00 	addr(Unimplemented)              ; $00a3 repeat
   41 00:0506 24 00 00 00 	addr(Unimplemented)              ; $00a4 until
   42 00:050A 24 00 00 00 	addr(Unimplemented)              ; $00a5 if
   43 00:050E B0 00 00 00 	addr(BadCmd_Then)                ; $00a6 then
   44 00:0512 24 00 00 00 	addr(Unimplemented)              ; $00a7 else
   45 00:0516 24 00 00 00 	addr(Unimplemented)              ; $00a8 for
   46 00:051A B0 00 00 00 	addr(BadCmd_To)                  ; $00a9 to
   47 00:051E 24 00 00 00 	addr(Unimplemented)              ; $00aa step
   48 00:0522 24 00 00 00 	addr(Unimplemented)              ; $00ab next
   49 00:0526 B0 00 00 00 	addr(BadCmd_Defproc)             ; $00ac def
   50 00:052A 24 00 00 00 	addr(Unimplemented)              ; $00ad proc
   51 00:052E 24 00 00 00 	addr(Unimplemented)              ; $00ae endproc
   52 00:0532 24 00 00 00 	addr(Unimplemented)              ; $00af local
   53 00:0536 24 00 00 00 	addr(Unimplemented)              ; $00b0 dim
   54 00:053A D2 00 00 00 	addr(Command_REM)                ; $00b1 rem
   55 00:053E 24 00 00 00 	addr(Unimplemented)              ; $00b2 let
   56 00:0542 24 00 00 00 	addr(Unimplemented)              ; $00b3 vdu
   57 00:0546 24 00 00 00 	addr(Unimplemented)              ; $00b4 print
   58 00:054A 24 00 00 00 	addr(Unimplemented)              ; $00b5 load
   59 00:054E 24 00 00 00 	addr(Unimplemented)              ; $00b6 save
   60 00:0552 24 00 00 00 	addr(Unimplemented)              ; $00b7 list
   61 00:0556 3B 02 00 00 	addr(Command_NEW)                ; $00b8 new
   62 00:055A EF 00 00 00 	addr(Command_RUN)                ; $00b9 run
   63 00:055E 24 00 00 00 	addr(Unimplemented)              ; $00ba read
   64 00:0562 24 00 00 00 	addr(Unimplemented)              ; $00bb data
   65 00:0566 24 00 00 00 	addr(Unimplemented)              ; $00bc restore
   66 00:056A 24 00 00 00 	addr(Unimplemented)              ; $00bd assert
   67 00:056E F9 01 00 00 	addr(Command_CLEAR)              ; $00be clear
   68 00:0572 B5 00 00 00 	addr(Command_END)                ; $00bf end
   69 00:0576 5B 01 00 00 	addr(Command_STOP)               ; $00c0 stop
   70 00:057A -  -  -  -  ;
   71 00:057A -  -  -  -  ;	Vectors for set 1
   72 00:057A -  -  -  -  ;
   73 00:057A -  -  -  -  VectorsSet1:
   74 00:057A -  -  -  -  ;
   75 00:057A -  -  -  -  ;	Vectors for set 2
   76 00:057A -  -  -  -  ;
   77 00:057A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   29 00:057A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:057A -  -  -  -  ; ***************************************************************************************
    2 00:057A -  -  -  -  ; ***************************************************************************************
    3 00:057A -  -  -  -  ;
    4 00:057A -  -  -  -  ;		Name : 		idivide.asm
    5 00:057A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:057A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:057A -  -  -  -  ;		Reviewed :	No
    8 00:057A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:057A -  -  -  -  ;
   10 00:057A -  -  -  -  ; ***************************************************************************************
   11 00:057A -  -  -  -  ; ***************************************************************************************
   12 00:057A -  -  -  -  
   13 00:057A -  -  -  -  ; ***************************************************************************************
   14 00:057A -  -  -  -  ;
   15 00:057A -  -  -  -  ;								Unsigned integer divide
   16 00:057A -  -  -  -  ;
   17 00:057A -  -  -  -  ; ***************************************************************************************
   18 00:057A -  -  -  -  
   19 00:057A -  -  -  -  Int32UDivide:
   20 00:057A 37 -  -  -  		scf
   21 00:057B C3 BF 05 00 		jp 		_I32UnsignedDivide		
   22 00:057F -  -  -  -  
   23 00:057F -  -  -  -  ; ***************************************************************************************
   24 00:057F -  -  -  -  ;
   25 00:057F -  -  -  -  ;							Signed integer divide/Modulus
   26 00:057F -  -  -  -  ;
   27 00:057F -  -  -  -  ; ***************************************************************************************
   28 00:057F -  -  -  -  
   29 00:057F -  -  -  -  Int32SDivide:
   30 00:057F 37 -  -  -  		scf
   31 00:0580 18 01 -  -  		jr 		_I32SDivide
   32 00:0582 -  -  -  -  Int32Modulus:
   33 00:0582 AF -  -  -  		xor 	a
   34 00:0583 -  -  -  -  _I32SDivide:
   35 00:0583 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0584 F5 -  -  -  		push 	af
   37 00:0585 08 -  -  -  		ex 		af,af'
   38 00:0586 -  -  -  -  
   39 00:0586 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0587 D9 -  -  -  		exx
   41 00:0588 D5 -  -  -  		push 	de
   42 00:0589 D9 -  -  -  		exx
   43 00:058A -  -  -  -  
   44 00:058A F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:058B AF -  -  -  		xor 	a 							; clear sign count.
   46 00:058C CD AC 05 00 		call 	_I32CheckHLSignSwap
   47 00:0590 CD AC 05 00 		call 	_I32CheckHLSignSwap
   48 00:0594 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0595 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0596 F5 -  -  -  		push 	af
   51 00:0597 CD BF 05 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:059B F1 -  -  -  		pop 	af 							; get function back
   53 00:059C 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:059E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:059F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:05A1 C4 21 07 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:05A5 -  -  -  -  _I32SDExit:
   58 00:05A5 D9 -  -  -  		exx 								; restore DE'DE
   59 00:05A6 D1 -  -  -  		pop 	de
   60 00:05A7 D9 -  -  -  		exx
   61 00:05A8 D1 -  -  -  		pop 	de
   62 00:05A9 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:05AA 08 -  -  -  		ex 		af,af'
   64 00:05AB C9 -  -  -  		ret
   65 00:05AC -  -  -  -  
   66 00:05AC -  -  -  -  
   67 00:05AC -  -  -  -  _I32CheckHLSignSwap:
   68 00:05AC D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:05AD CB 7C -  -  		bit 	7,h
   70 00:05AF D9 -  -  -  		exx
   71 00:05B0 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:05B2 -  -  -  -  		;
   73 00:05B2 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:05B4 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:05B5 CD 21 07 00 		call 	Int32Negate 				
   76 00:05B9 F1 -  -  -  		pop 	af
   77 00:05BA -  -  -  -  _I32CHSPositive:
   78 00:05BA D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:05BB EB -  -  -  		ex 		de,hl
   80 00:05BC D9 -  -  -  		exx		
   81 00:05BD EB -  -  -  		ex 		de,hl
   82 00:05BE C9 -  -  -  		ret
   83 00:05BF -  -  -  -  
   84 00:05BF -  -  -  -  ; ***************************************************************************************
   85 00:05BF -  -  -  -  ;
   86 00:05BF -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:05BF -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:05BF -  -  -  -  ;
   89 00:05BF -  -  -  -  ; ***************************************************************************************
   90 00:05BF -  -  -  -  
   91 00:05BF -  -  -  -  _I32UnsignedDivide:
   92 00:05BF C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:05C0 D5 -  -  -  		push 	de
   94 00:05C1 D9 -  -  -  		exx
   95 00:05C2 C5 -  -  -  		push 	bc
   96 00:05C3 D5 -  -  -  		push 	de 							
   97 00:05C4 D9 -  -  -  		exx
   98 00:05C5 -  -  -  -  
   99 00:05C5 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:05C6 -  -  -  -  
  101 00:05C6 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:05C7 B3 -  -  -  		or 		e
  103 00:05C8 D9 -  -  -  		exx
  104 00:05C9 B2 -  -  -  		or 		d
  105 00:05CA B3 -  -  -  		or 		e
  106 00:05CB D9 -  -  -  		exx
  107 00:05CC CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:05D0 -  -  -  -  
  109 00:05D0 -  -  -  -  
  110 00:05D0 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:05D1 4D -  -  -  		ld		c,l
  112 00:05D2 21 00 00 00 		ld 		hl,$0000
  113 00:05D6 D9 -  -  -  		exx
  114 00:05D7 44 -  -  -  		ld 		b,h
  115 00:05D8 4D -  -  -  		ld		c,l
  116 00:05D9 21 00 00 00 		ld 		hl,$0000
  117 00:05DD D9 -  -  -  		exx
  118 00:05DE -  -  -  -  
  119 00:05DE 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:05E0 -  -  -  -  _I32DivideLoop:
  121 00:05E0 F5 -  -  -  		push 	af
  122 00:05E1 -  -  -  -  
  123 00:05E1 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:05E3 CB 10 -  -  		rl 		b
  125 00:05E5 D9 -  -  -  		exx
  126 00:05E6 CB 11 -  -  		rl 		c
  127 00:05E8 CB 10 -  -  		rl 		b
  128 00:05EA D9 -  -  -  		exx
  129 00:05EB CB 15 -  -  		rl 		l
  130 00:05ED CB 14 -  -  		rl 		h
  131 00:05EF D9 -  -  -  		exx
  132 00:05F0 CB 15 -  -  		rl 		l
  133 00:05F2 CB 14 -  -  		rl 		h
  134 00:05F4 D9 -  -  -  		exx
  135 00:05F5 -  -  -  -  
  136 00:05F5 CD BF 06 00 		call 	Int32Subtract 				; A = A - M
  137 00:05F9 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:05FB -  -  -  -  
  139 00:05FB 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:05FC 18 04 -  -  		jr 		_I32Next
  141 00:05FE -  -  -  -  
  142 00:05FE -  -  -  -  _I32Borrow:
  143 00:05FE CD B7 06 00 		call 	Int32Add 					; A = A + M
  144 00:0602 -  -  -  -  _I32Next:
  145 00:0602 F1 -  -  -  		pop 	af
  146 00:0603 3D -  -  -  		dec 	a
  147 00:0604 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0606 -  -  -  -  
  149 00:0606 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0607 -  -  -  -  
  151 00:0607 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0608 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:060A -  -  -  -  
  154 00:060A 60 -  -  -  		ld  	h,b
  155 00:060B 69 -  -  -  		ld 		l,c
  156 00:060C D9 -  -  -  		exx
  157 00:060D 60 -  -  -  		ld  	h,b
  158 00:060E 69 -  -  -  		ld 		l,c
  159 00:060F D9 -  -  -  		exx
  160 00:0610 -  -  -  -  _I32Modulus1:		
  161 00:0610 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0611 D1 -  -  -  		pop 	de
  163 00:0612 C1 -  -  -  		pop 	bc
  164 00:0613 D9 -  -  -  		exx
  165 00:0614 D1 -  -  -  		pop 	de
  166 00:0615 C1 -  -  -  		pop 	bc
  167 00:0616 C9 -  -  -  		ret
  168 00:0617 -  -  -  -  
  169 00:0617 -  -  -  -  ; ***************************************************************************************
  170 00:0617 -  -  -  -  ;
  171 00:0617 -  -  -  -  ;									Changes and Updates
  172 00:0617 -  -  -  -  ;
  173 00:0617 -  -  -  -  ; ***************************************************************************************
  174 00:0617 -  -  -  -  ;
  175 00:0617 -  -  -  -  ;		Date			Notes
  176 00:0617 -  -  -  -  ;		==== 			=====
  177 00:0617 -  -  -  -  ;
  178 00:0617 -  -  -  -  ; ***************************************************************************************
  179 00:0617 -  -  -  -  		
Listing for file "_build.asm"
   30 00:0617 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0617 -  -  -  -  ; ***************************************************************************************
    2 00:0617 -  -  -  -  ; ***************************************************************************************
    3 00:0617 -  -  -  -  ;
    4 00:0617 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0617 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0617 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0617 -  -  -  -  ;		Reviewed :	No
    8 00:0617 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0617 -  -  -  -  ;
   10 00:0617 -  -  -  -  ; ***************************************************************************************
   11 00:0617 -  -  -  -  ; ***************************************************************************************
   12 00:0617 -  -  -  -  
   13 00:0617 -  -  -  -  ; ***************************************************************************************
   14 00:0617 -  -  -  -  ;
   15 00:0617 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0617 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0617 -  -  -  -  ;
   18 00:0617 -  -  -  -  ; ***************************************************************************************
   19 00:0617 -  -  -  -  
   20 00:0617 -  -  -  -  Int32FromString:
   21 00:0617 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0618 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0619 D5 -  -  -  		push 	de
   24 00:061A D9 -  -  -  		exx
   25 00:061B D5 -  -  -  		push 	de
   26 00:061C -  -  -  -  
   27 00:061C 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0620 11 00 00 00 		ld 		de,$0000
   29 00:0624 D9 -  -  -  		exx
   30 00:0625 21 00 00 00 		ld 		hl,$0000
   31 00:0629 11 00 00 00 		ld 		de,$0000
   32 00:062D D9 -  -  -  		exx
   33 00:062E -  -  -  -  
   34 00:062E 5F -  -  -  		ld 		e,a 						; base in E
   35 00:062F CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0631 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0633 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0635 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0636 -  -  -  -  		;
   40 00:0636 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0637 F5 -  -  -  		push 	af
   42 00:0638 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:063A 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:063B 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:063D 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:063E 18 01 -  -  		jr 		_I32FSMain
   47 00:0640 -  -  -  -  _I32FSNotSigned:		
   48 00:0640 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0641 -  -  -  -  		;
   50 00:0641 -  -  -  -  		; 		Main conversion loop.
   51 00:0641 -  -  -  -  		; 		
   52 00:0641 -  -  -  -  _I32FSMain:		
   53 00:0641 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0642 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0644 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0646 D6 20 -  -  		sub 	32
   57 00:0648 -  -  -  -  _I32FSNotLower:
   58 00:0648 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:064A 38 23 -  -  		jr 		c,_I32FSExit
   60 00:064C FE 3A -  -  		cp 		'9'+1
   61 00:064E 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0650 FE 41 -  -  		cp 		'A'
   63 00:0652 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0654 FE 47 -  -  		cp 		'F'+1
   65 00:0656 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0658 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:065A -  -  -  -  _I32FSOkay:
   68 00:065A D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:065C BB -  -  -  		cp 		e 							; fail if >= base
   70 00:065D 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:065F 03 -  -  -  		inc 	bc 							; consume character
   72 00:0660 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0661 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0662 CD 7E 06 00 		call 	Int32Multiply 				; result *= base
   75 00:0666 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0667 5F -  -  -  		ld 		e,a
   77 00:0668 CD B7 06 00 		call 	Int32Add 					; and add it.
   78 00:066C D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:066D 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:066F -  -  -  -  
   81 00:066F -  -  -  -  _I32FSExit:
   82 00:066F F1 -  -  -  		pop 	af 							; get sign back
   83 00:0670 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0672 CC 21 07 00 		call 	z,Int32Negate
   85 00:0676 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0677 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0678 D9 -  -  -  		exx
   88 00:0679 D1 -  -  -  		pop 	de
   89 00:067A D9 -  -  -  		exx
   90 00:067B C1 -  -  -  		pop 	bc
   91 00:067C B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 00:067D C9 -  -  -  		ret				
   93 00:067E -  -  -  -  
   94 00:067E -  -  -  -  ; ***************************************************************************************
   95 00:067E -  -  -  -  ;
   96 00:067E -  -  -  -  ;									Changes and Updates
   97 00:067E -  -  -  -  ;
   98 00:067E -  -  -  -  ; ***************************************************************************************
   99 00:067E -  -  -  -  ;
  100 00:067E -  -  -  -  ;		Date			Notes
  101 00:067E -  -  -  -  ;		==== 			=====
  102 00:067E -  -  -  -  ;
  103 00:067E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:067E -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:067E -  -  -  -  ; ***************************************************************************************
    2 00:067E -  -  -  -  ; ***************************************************************************************
    3 00:067E -  -  -  -  ;
    4 00:067E -  -  -  -  ;		Name : 		imultiply.asm
    5 00:067E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:067E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:067E -  -  -  -  ;		Reviewed :	No
    8 00:067E -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:067E -  -  -  -  ;
   10 00:067E -  -  -  -  ; ***************************************************************************************
   11 00:067E -  -  -  -  ; ***************************************************************************************
   12 00:067E -  -  -  -  
   13 00:067E -  -  -  -  Int32Multiply:
   14 00:067E C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:067F D5 -  -  -  		push 	de
   16 00:0680 44 -  -  -  		ld 		b,h
   17 00:0681 4D -  -  -  		ld 		c,l
   18 00:0682 21 00 00 00 		ld 		hl,$0000
   19 00:0686 -  -  -  -  
   20 00:0686 D9 -  -  -  		exx
   21 00:0687 C5 -  -  -  		push 	bc
   22 00:0688 D5 -  -  -  		push 	de
   23 00:0689 44 -  -  -  		ld 		b,h
   24 00:068A 4D -  -  -  		ld 		c,l
   25 00:068B 21 00 00 00 		ld 		hl,$0000		
   26 00:068F D9 -  -  -  		exx
   27 00:0690 -  -  -  -  
   28 00:0690 -  -  -  -  _I32MultiplyLoop:
   29 00:0690 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0692 C4 B7 06 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0696 -  -  -  -  		;
   32 00:0696 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0697 CB 38 -  -  		srl 	b
   34 00:0699 CB 19 -  -  		rr 		c
   35 00:069B D9 -  -  -  		exx
   36 00:069C CB 18 -  -  		rr 		b
   37 00:069E CB 19 -  -  		rr 		c
   38 00:06A0 -  -  -  -  		;
   39 00:06A0 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:06A2 CB 12 -  -  		rl 		d
   41 00:06A4 D9 -  -  -  		exx
   42 00:06A5 CB 13 -  -  		rl 		e
   43 00:06A7 CB 12 -  -  		rl 		d
   44 00:06A9 -  -  -  -  
   45 00:06A9 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:06AA B1 -  -  -  		or 		c
   47 00:06AB D9 -  -  -  		exx
   48 00:06AC B0 -  -  -  		or 		b
   49 00:06AD B1 -  -  -  		or 		c
   50 00:06AE 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:06B0 -  -  -  -  
   52 00:06B0 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:06B1 D1 -  -  -  		pop 	de
   54 00:06B2 C1 -  -  -  		pop 	bc
   55 00:06B3 D9 -  -  -  		exx
   56 00:06B4 D1 -  -  -  		pop 	de
   57 00:06B5 C1 -  -  -  		pop 	bc
   58 00:06B6 C9 -  -  -  		ret
   59 00:06B7 -  -  -  -  
   60 00:06B7 -  -  -  -  ; ***************************************************************************************
   61 00:06B7 -  -  -  -  ;
   62 00:06B7 -  -  -  -  ;									Changes and Updates
   63 00:06B7 -  -  -  -  ;
   64 00:06B7 -  -  -  -  ; ***************************************************************************************
   65 00:06B7 -  -  -  -  ;
   66 00:06B7 -  -  -  -  ;		Date			Notes
   67 00:06B7 -  -  -  -  ;		==== 			=====
   68 00:06B7 -  -  -  -  ;
   69 00:06B7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:06B7 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:06B7 -  -  -  -  ; ***************************************************************************************
    2 00:06B7 -  -  -  -  ; ***************************************************************************************
    3 00:06B7 -  -  -  -  ;
    4 00:06B7 -  -  -  -  ;		Name : 		isimple.asm
    5 00:06B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06B7 -  -  -  -  ;		Reviewed :	No
    8 00:06B7 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:06B7 -  -  -  -  ;
   10 00:06B7 -  -  -  -  ; ***************************************************************************************
   11 00:06B7 -  -  -  -  ; ***************************************************************************************
   12 00:06B7 -  -  -  -  
   13 00:06B7 -  -  -  -  ; ***************************************************************************************
   14 00:06B7 -  -  -  -  ;
   15 00:06B7 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:06B7 -  -  -  -  ;
   17 00:06B7 -  -  -  -  ; ***************************************************************************************
   18 00:06B7 -  -  -  -  
   19 00:06B7 -  -  -  -  Int32Add:
   20 00:06B7 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:06B9 D9 -  -  -  		exx
   22 00:06BA 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:06BD D9 -  -  -  		exx
   24 00:06BE C9 -  -  -  		ret
   25 00:06BF -  -  -  -  
   26 00:06BF -  -  -  -  ; ***************************************************************************************
   27 00:06BF -  -  -  -  ;
   28 00:06BF -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:06BF -  -  -  -  ;
   30 00:06BF -  -  -  -  ; ***************************************************************************************
   31 00:06BF -  -  -  -  
   32 00:06BF -  -  -  -  Int32Subtract:
   33 00:06BF AF -  -  -  		xor 	a 							; clear carry
   34 00:06C0 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:06C3 D9 -  -  -  		exx
   36 00:06C4 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:06C7 D9 -  -  -  		exx
   38 00:06C8 C9 -  -  -  		ret
   39 00:06C9 -  -  -  -  
   40 00:06C9 -  -  -  -  ; ***************************************************************************************
   41 00:06C9 -  -  -  -  ;
   42 00:06C9 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:06C9 -  -  -  -  ;
   44 00:06C9 -  -  -  -  ; ***************************************************************************************
   45 00:06C9 -  -  -  -  
   46 00:06C9 -  -  -  -  Int32And:
   47 00:06C9 D9 -  -  -  		exx
   48 00:06CA CD CF 06 00 		call 	_I32AndHLDE
   49 00:06CE D9 -  -  -  		exx
   50 00:06CF -  -  -  -  _I32AndHLDE:		
   51 00:06CF 7C -  -  -  		ld 		a,h
   52 00:06D0 A2 -  -  -  		and 	d
   53 00:06D1 67 -  -  -  		ld 		h,a
   54 00:06D2 7D -  -  -  		ld 		a,l
   55 00:06D3 A3 -  -  -  		and 	e
   56 00:06D4 6F -  -  -  		ld 		l,a
   57 00:06D5 C9 -  -  -  		ret
   58 00:06D6 -  -  -  -  
   59 00:06D6 -  -  -  -  ; ***************************************************************************************
   60 00:06D6 -  -  -  -  ;
   61 00:06D6 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:06D6 -  -  -  -  ;
   63 00:06D6 -  -  -  -  ; ***************************************************************************************
   64 00:06D6 -  -  -  -  
   65 00:06D6 -  -  -  -  Int32Or:
   66 00:06D6 D9 -  -  -  		exx
   67 00:06D7 CD DC 06 00 		call 	_I32OrHLDE
   68 00:06DB D9 -  -  -  		exx
   69 00:06DC -  -  -  -  _I32OrHLDE:		
   70 00:06DC 7C -  -  -  		ld 		a,h
   71 00:06DD B2 -  -  -  		or 		d
   72 00:06DE 67 -  -  -  		ld 		h,a
   73 00:06DF 7D -  -  -  		ld 		a,l
   74 00:06E0 B3 -  -  -  		or 		e
   75 00:06E1 6F -  -  -  		ld 		l,a
   76 00:06E2 C9 -  -  -  		ret
   77 00:06E3 -  -  -  -  
   78 00:06E3 -  -  -  -  ; ***************************************************************************************
   79 00:06E3 -  -  -  -  ;
   80 00:06E3 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:06E3 -  -  -  -  ;
   82 00:06E3 -  -  -  -  ; ***************************************************************************************
   83 00:06E3 -  -  -  -  
   84 00:06E3 -  -  -  -  Int32Xor:
   85 00:06E3 D9 -  -  -  		exx
   86 00:06E4 CD E9 06 00 		call 	_I32XorHLDE
   87 00:06E8 D9 -  -  -  		exx
   88 00:06E9 -  -  -  -  _I32XorHLDE:		
   89 00:06E9 7C -  -  -  		ld 		a,h
   90 00:06EA AA -  -  -  		xor 	d
   91 00:06EB 67 -  -  -  		ld 		h,a
   92 00:06EC 7D -  -  -  		ld 		a,l
   93 00:06ED AB -  -  -  		xor 	e
   94 00:06EE 6F -  -  -  		ld 		l,a
   95 00:06EF C9 -  -  -  		ret
   96 00:06F0 -  -  -  -  
   97 00:06F0 -  -  -  -  ; ***************************************************************************************
   98 00:06F0 -  -  -  -  ;
   99 00:06F0 -  -  -  -  ;								 Check if HL'HL zero
  100 00:06F0 -  -  -  -  ;
  101 00:06F0 -  -  -  -  ; ***************************************************************************************
  102 00:06F0 -  -  -  -  
  103 00:06F0 -  -  -  -  Int32Zero:
  104 00:06F0 D9 -  -  -  		exx
  105 00:06F1 7D -  -  -  		ld 		a,l
  106 00:06F2 B4 -  -  -  		or 		h
  107 00:06F3 D9 -  -  -  		exx
  108 00:06F4 B5 -  -  -  		or 		l
  109 00:06F5 B4 -  -  -  		or 		h
  110 00:06F6 C9 -  -  -  		ret
  111 00:06F7 -  -  -  -  
  112 00:06F7 -  -  -  -  ; ***************************************************************************************
  113 00:06F7 -  -  -  -  ;
  114 00:06F7 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:06F7 -  -  -  -  ;
  116 00:06F7 -  -  -  -  ; ***************************************************************************************
  117 00:06F7 -  -  -  -  
  118 00:06F7 -  -  -  -  Int32Compare:
  119 00:06F7 E5 -  -  -  		push 	hl 							; save HL
  120 00:06F8 AF -  -  -  		xor 	a 							; clear carry
  121 00:06F9 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:06FC D9 -  -  -  		exx
  123 00:06FD E5 -  -  -  		push 	hl 							; save HL'
  124 00:06FE 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0701 -  -  -  -  		;
  126 00:0701 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0702 E2 0A 07 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0706 78 -  -  -  		ld 		a,b
  129 00:0707 EE 80 -  -  		xor 	$80
  130 00:0709 47 -  -  -  		ld 		b,a
  131 00:070A -  -  -  -  _I32CNoOverflow:
  132 00:070A 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:070B B5 -  -  -  		or 		l
  134 00:070C D9 -  -  -  		exx 
  135 00:070D B4 -  -  -  		or 		h
  136 00:070E B5 -  -  -  		or 		l
  137 00:070F 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0711 -  -  -  -  		;
  139 00:0711 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0712 CB 78 -  -  		bit 	7,b
  141 00:0714 D9 -  -  -  		exx
  142 00:0715 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0717 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0719 3E FF -  -  		ld 		a,$FF
  145 00:071B -  -  -  -  _I32NotPos:
  146 00:071B D9 -  -  -  		exx
  147 00:071C E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:071D D9 -  -  -  		exx
  149 00:071E E1 -  -  -  		pop 	hl 							; restore HL
  150 00:071F B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0720 C9 -  -  -  		ret
  152 00:0721 -  -  -  -  
  153 00:0721 -  -  -  -  ; ***************************************************************************************
  154 00:0721 -  -  -  -  ;
  155 00:0721 -  -  -  -  ;										Negate HL'HL
  156 00:0721 -  -  -  -  ;
  157 00:0721 -  -  -  -  ; ***************************************************************************************
  158 00:0721 -  -  -  -  
  159 00:0721 -  -  -  -  Int32Negate:
  160 00:0721 AF -  -  -  		xor 	a
  161 00:0722 CD 2D 07 00 		call 	_I32NSubtract
  162 00:0726 D9 -  -  -  		exx
  163 00:0727 CD 2D 07 00 		call 	_I32NSubtract
  164 00:072B D9 -  -  -  		exx
  165 00:072C C9 -  -  -  		ret
  166 00:072D -  -  -  -  _I32NSubtract:
  167 00:072D D5 -  -  -  		push 	de
  168 00:072E EB -  -  -  		ex 		de,hl
  169 00:072F 21 00 00 00 		ld 		hl,$0000
  170 00:0733 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0736 D1 -  -  -  		pop 	de
  172 00:0737 C9 -  -  -  		ret
  173 00:0738 -  -  -  -  		
  174 00:0738 -  -  -  -  ; ***************************************************************************************
  175 00:0738 -  -  -  -  ;
  176 00:0738 -  -  -  -  ;									Changes and Updates
  177 00:0738 -  -  -  -  ;
  178 00:0738 -  -  -  -  ; ***************************************************************************************
  179 00:0738 -  -  -  -  ;
  180 00:0738 -  -  -  -  ;		Date			Notes
  181 00:0738 -  -  -  -  ;		==== 			=====
  182 00:0738 -  -  -  -  ;
  183 00:0738 -  -  -  -  ; ***************************************************************************************
  184 00:0738 -  -  -  -  		
Listing for file "_build.asm"
   33 00:0738 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0738 -  -  -  -  ; ***************************************************************************************
    2 00:0738 -  -  -  -  ; ***************************************************************************************
    3 00:0738 -  -  -  -  ;
    4 00:0738 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0738 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0738 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0738 -  -  -  -  ;		Reviewed :	No
    8 00:0738 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0738 -  -  -  -  ;
   10 00:0738 -  -  -  -  ; ***************************************************************************************
   11 00:0738 -  -  -  -  ;
   12 00:0738 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0738 -  -  -  -  ;
   14 00:0738 -  -  -  -  ; ***************************************************************************************
   15 00:0738 -  -  -  -  
   16 00:0738 -  -  -  -  Int32ToString:
   17 00:0738 C5 -  -  -  		push 	bc 							; save string start
   18 00:0739 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:073A E5 -  -  -  		push 	hl
   20 00:073B 11 00 00 00 		ld	 	de,$0000
   21 00:073F D9 -  -  -  		exx
   22 00:0740 D5 -  -  -  		push 	de
   23 00:0741 E5 -  -  -  		push 	hl
   24 00:0742 11 00 00 00 		ld 		de,$000
   25 00:0746 D9 -  -  -  		exx
   26 00:0747 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0748 -  -  -  -  		;
   28 00:0748 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:074A 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:074C ED 44 -  -  		neg 								; negate base and put in E
   31 00:074E 5F -  -  -  		ld 		e,a
   32 00:074F -  -  -  -  		;
   33 00:074F D9 -  -  -  		exx 								; is it -ve ?
   34 00:0750 CB 7C -  -  		bit 	7,h
   35 00:0752 D9 -  -  -  		exx
   36 00:0753 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0755 -  -  -  -  		;
   38 00:0755 CD 21 07 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0759 -  -  -  -  		;
   40 00:0759 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:075B 02 -  -  -  		ld 		(bc),a
   42 00:075C 03 -  -  -  		inc 	bc
   43 00:075D -  -  -  -  _I32TSNotNegative:	
   44 00:075D CD 6B 07 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0761 -  -  -  -  _I32TSExit:
   46 00:0761 AF -  -  -  		xor 	a  							; write the end of string code
   47 00:0762 02 -  -  -  		ld 		(bc),a 
   48 00:0763 -  -  -  -  
   49 00:0763 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0764 E1 -  -  -  		pop 	hl
   51 00:0765 D1 -  -  -  		pop 	de
   52 00:0766 D9 -  -  -  		exx
   53 00:0767 E1 -  -  -  		pop 	hl
   54 00:0768 D1 -  -  -  		pop 	de
   55 00:0769 C1 -  -  -  		pop 	bc
   56 00:076A C9 -  -  -  		ret
   57 00:076B -  -  -  -  
   58 00:076B -  -  -  -  _I32RecursiveConvert:
   59 00:076B CD 7A 05 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:076F F5 -  -  -  		push 	af 							; save remainder
   61 00:0770 CD F0 06 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0774 C4 6B 07 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0778 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0779 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:077B 38 02 -  -  		jr 		c,_I32NotHex
   66 00:077D C6 07 -  -  		add 	a,7
   67 00:077F -  -  -  -  _I32NotHex:
   68 00:077F C6 30 -  -  		add 	a,48
   69 00:0781 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0782 03 -  -  -  		inc 	bc
   71 00:0783 C9 -  -  -  		ret		
   72 00:0784 -  -  -  -  
   73 00:0784 -  -  -  -  ; ***************************************************************************************
   74 00:0784 -  -  -  -  ;
   75 00:0784 -  -  -  -  ;									Changes and Updates
   76 00:0784 -  -  -  -  ;
   77 00:0784 -  -  -  -  ; ***************************************************************************************
   78 00:0784 -  -  -  -  ;
   79 00:0784 -  -  -  -  ;		Date			Notes
   80 00:0784 -  -  -  -  ;		==== 			=====
   81 00:0784 -  -  -  -  ;
   82 00:0784 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:0784 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0784 -  -  -  -  ; ***************************************************************************************
    2 00:0784 -  -  -  -  ; ***************************************************************************************
    3 00:0784 -  -  -  -  ;
    4 00:0784 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0784 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0784 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0784 -  -  -  -  ;		Reviewed :	No
    8 00:0784 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0784 -  -  -  -  ;
   10 00:0784 -  -  -  -  ; ***************************************************************************************
   11 00:0784 -  -  -  -  ; ***************************************************************************************
   12 00:0784 -  -  -  -  
   13 00:0784 -  -  -  -  #ifdef AQUARIUS
   14 00:0784             
   15 00:0784             ; ***************************************************************************************
   16 00:0784             ;
   17 00:0784             ;								Initialise system stuff
   18 00:0784             ;
   19 00:0784             ; ***************************************************************************************
   20 00:0784             
   21 00:0784             SYSInitialise:
   22 00:0784             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0784             	call 	SYSPrintChar
   24 00:0784             	ret
   25 00:0784             
   26 00:0784             ; ***************************************************************************************
   27 00:0784             ;
   28 00:0784             ;								Terminate system stuff
   29 00:0784             ;
   30 00:0784             ; ***************************************************************************************
   31 00:0784             
   32 00:0784             SYSTerminate:
   33 00:0784             	jr 		SYSTerminate
   34 00:0784             
   35 00:0784             ; ***************************************************************************************
   36 00:0784             ;
   37 00:0784             ;								Print A character
   38 00:0784             ;
   39 00:0784             ; ***************************************************************************************
   40 00:0784             
   41 00:0784             SYSPrintChar:
   42 00:0784             	push 	af 									; we stack everything including alt registers
   43 00:0784             	push 	bc
   44 00:0784             	push 	de
   45 00:0784             	push 	hl
   46 00:0784             	push 	ix
   47 00:0784             	push 	iy
   48 00:0784             	exx
   49 00:0784             	push 	bc
   50 00:0784             	push 	de
   51 00:0784             	push 	hl
   52 00:0784             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0784             	pop 	hl
   54 00:0784             	pop 	de
   55 00:0784             	pop 	bc
   56 00:0784             	exx
   57 00:0784             	pop 	iy
   58 00:0784             	pop 	ix
   59 00:0784             	pop 	hl
   60 00:0784             	pop 	de
   61 00:0784             	pop 	bc
   62 00:0784             	pop 	af
   63 00:0784             	ret		
   64 00:0784             
   65 00:0784             ; ***************************************************************************************
   66 00:0784             ;
   67 00:0784             ;									Print Newline
   68 00:0784             ;
   69 00:0784             ; ***************************************************************************************
   70 00:0784             
   71 00:0784             SYSPrintCRLF:
   72 00:0784             	push 	af
   73 00:0784             	ld 		a,13
   74 00:0784             	call 	SYSPrintChar
   75 00:0784             	ld 		a,10
   76 00:0784             	call 	SYSPrintChar
   77 00:0784             	pop 	af
   78 00:0784             	ret
   79 00:0784             
   80 00:0784             #endif
   81 00:0784 -  -  -  -  
   82 00:0784 -  -  -  -  ; ***************************************************************************************
   83 00:0784 -  -  -  -  ;
   84 00:0784 -  -  -  -  ;									Changes and Updates
   85 00:0784 -  -  -  -  ;
   86 00:0784 -  -  -  -  ; ***************************************************************************************
   87 00:0784 -  -  -  -  ;
   88 00:0784 -  -  -  -  ;		Date			Notes
   89 00:0784 -  -  -  -  ;		==== 			=====
   90 00:0784 -  -  -  -  ;
   91 00:0784 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:0784 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0784 -  -  -  -  ; ***************************************************************************************
    2 00:0784 -  -  -  -  ; ***************************************************************************************
    3 00:0784 -  -  -  -  ;
    4 00:0784 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0784 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0784 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0784 -  -  -  -  ;		Reviewed :	No
    8 00:0784 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0784 -  -  -  -  ;
   10 00:0784 -  -  -  -  ; ***************************************************************************************
   11 00:0784 -  -  -  -  ; ***************************************************************************************
   12 00:0784 -  -  -  -  
   13 00:0784 -  -  -  -  #ifdef CLEANEZ80
   14 00:0784 -  -  -  -  
   15 00:0784 -  -  -  -  ; ***************************************************************************************
   16 00:0784 -  -  -  -  ;
   17 00:0784 -  -  -  -  ;								Initialise system stuff
   18 00:0784 -  -  -  -  ;
   19 00:0784 -  -  -  -  ; ***************************************************************************************
   20 00:0784 -  -  -  -  
   21 00:0784 -  -  -  -  SYSInitialise:
   22 00:0784 C9 -  -  -  	ret
   23 00:0785 -  -  -  -  
   24 00:0785 -  -  -  -  ; ***************************************************************************************
   25 00:0785 -  -  -  -  ;
   26 00:0785 -  -  -  -  ;								Terminate system stuff
   27 00:0785 -  -  -  -  ;
   28 00:0785 -  -  -  -  ; ***************************************************************************************
   29 00:0785 -  -  -  -  
   30 00:0785 -  -  -  -  SYSTerminate:
   31 00:0785 C9 -  -  -  	ret
   32 00:0786 -  -  -  -  
   33 00:0786 -  -  -  -  ; ***************************************************************************************
   34 00:0786 -  -  -  -  ;
   35 00:0786 -  -  -  -  ;								Print A character
   36 00:0786 -  -  -  -  ;
   37 00:0786 -  -  -  -  ; ***************************************************************************************
   38 00:0786 -  -  -  -  
   39 00:0786 -  -  -  -  SYSPrintChar:
   40 00:0786 C9 -  -  -  	ret		
   41 00:0787 -  -  -  -  
   42 00:0787 -  -  -  -  ; ***************************************************************************************
   43 00:0787 -  -  -  -  ;
   44 00:0787 -  -  -  -  ;									Print Newline
   45 00:0787 -  -  -  -  ;
   46 00:0787 -  -  -  -  ; ***************************************************************************************
   47 00:0787 -  -  -  -  
   48 00:0787 -  -  -  -  SYSPrintCRLF:
   49 00:0787 C9 -  -  -  	ret
   50 00:0788 -  -  -  -  
   51 00:0788 -  -  -  -  #endif
   52 00:0788 -  -  -  -  
   53 00:0788 -  -  -  -  ; ***************************************************************************************
   54 00:0788 -  -  -  -  ;
   55 00:0788 -  -  -  -  ;									Changes and Updates
   56 00:0788 -  -  -  -  ;
   57 00:0788 -  -  -  -  ; ***************************************************************************************
   58 00:0788 -  -  -  -  ;
   59 00:0788 -  -  -  -  ;		Date			Notes
   60 00:0788 -  -  -  -  ;		==== 			=====
   61 00:0788 -  -  -  -  ;
   62 00:0788 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0788 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0788 -  -  -  -  ; ***************************************************************************************
    2 00:0788 -  -  -  -  ; ***************************************************************************************
    3 00:0788 -  -  -  -  ;
    4 00:0788 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0788 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0788 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0788 -  -  -  -  ;		Reviewed :	No
    8 00:0788 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0788 -  -  -  -  ;
   10 00:0788 -  -  -  -  ; ***************************************************************************************
   11 00:0788 -  -  -  -  ; ***************************************************************************************
   12 00:0788 -  -  -  -  
   13 00:0788 -  -  -  -  #ifdef TI84
   14 00:0788             
   15 00:0788             ; ***************************************************************************************
   16 00:0788             ;
   17 00:0788             ;								Initialise system stuff
   18 00:0788             ;
   19 00:0788             ; ***************************************************************************************
   20 00:0788             
   21 00:0788             SYSInitialise:
   22 00:0788             	di
   23 00:0788             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0788             	ld 		(_IYTemp84),iy
   25 00:0788             	ret
   26 00:0788             
   27 00:0788             ; ***************************************************************************************
   28 00:0788             ;
   29 00:0788             ;								Terminate system stuff
   30 00:0788             ;
   31 00:0788             ; ***************************************************************************************
   32 00:0788             
   33 00:0788             SYSTerminate:
   34 00:0788             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0788             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0788             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0788             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0788             	ei
   39 00:0788             	ret 										; and exit.
   40 00:0788             
   41 00:0788             _StackTemp84:									; temp var for TI84 only.
   42 00:0788             	.dw 	0,0
   43 00:0788             _IYTemp84:
   44 00:0788             	.dw 	0,0		
   45 00:0788             
   46 00:0788             ; ***************************************************************************************
   47 00:0788             ;
   48 00:0788             ;								Print A character
   49 00:0788             ;
   50 00:0788             ; ***************************************************************************************
   51 00:0788             
   52 00:0788             SYSPrintChar:
   53 00:0788             	push 	af 									; we stack everything including alt registers
   54 00:0788             	push 	bc
   55 00:0788             	push 	de
   56 00:0788             	push 	hl
   57 00:0788             	push 	ix
   58 00:0788             	push 	iy
   59 00:0788             	exx
   60 00:0788             	push 	bc
   61 00:0788             	push 	de
   62 00:0788             	push 	hl
   63 00:0788             
   64 00:0788             	ld 		iy,(_IYTemp84)
   65 00:0788             	call 	_PutC 								; print A as character
   66 00:0788             	di
   67 00:0788             	ld 		(_IYTemp84),iy
   68 00:0788             
   69 00:0788             	pop 	hl
   70 00:0788             	pop 	de
   71 00:0788             	pop 	bc
   72 00:0788             	exx
   73 00:0788             	pop 	iy
   74 00:0788             	pop 	ix
   75 00:0788             	pop 	hl
   76 00:0788             	pop 	de
   77 00:0788             	pop 	bc
   78 00:0788             	pop 	af
   79 00:0788             	ret		
   80 00:0788             
   81 00:0788             ; ***************************************************************************************
   82 00:0788             ;
   83 00:0788             ;									Print Newline
   84 00:0788             ;
   85 00:0788             ; ***************************************************************************************
   86 00:0788             
   87 00:0788             SYSPrintCRLF:
   88 00:0788             	push 	af 									; we stack everything including alt registers
   89 00:0788             	push 	bc
   90 00:0788             	push 	de
   91 00:0788             	push 	hl
   92 00:0788             	push 	ix
   93 00:0788             	push 	iy
   94 00:0788             	exx
   95 00:0788             	push 	bc
   96 00:0788             	push 	de
   97 00:0788             	push 	hl
   98 00:0788             
   99 00:0788             	ld 		iy,(_IYTemp84)
  100 00:0788             	call 	_newline
  101 00:0788             	di
  102 00:0788             	ld 		(_IYTemp84),iy
  103 00:0788             
  104 00:0788             	pop 	hl
  105 00:0788             	pop 	de
  106 00:0788             	pop 	bc
  107 00:0788             	exx
  108 00:0788             	pop 	iy
  109 00:0788             	pop 	ix
  110 00:0788             	pop 	hl
  111 00:0788             	pop 	de
  112 00:0788             	pop 	bc
  113 00:0788             	pop 	af
  114 00:0788             	ret
  115 00:0788             
  116 00:0788             #endif
  117 00:0788 -  -  -  -  
  118 00:0788 -  -  -  -  ; ***************************************************************************************
  119 00:0788 -  -  -  -  ;
  120 00:0788 -  -  -  -  ;									Changes and Updates
  121 00:0788 -  -  -  -  ;
  122 00:0788 -  -  -  -  ; ***************************************************************************************
  123 00:0788 -  -  -  -  ;
  124 00:0788 -  -  -  -  ;		Date			Notes
  125 00:0788 -  -  -  -  ;		==== 			=====
  126 00:0788 -  -  -  -  ;
  127 00:0788 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:0788 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0788 -  -  -  -  ; ***************************************************************************************
    2 00:0788 -  -  -  -  ; ***************************************************************************************
    3 00:0788 -  -  -  -  ;
    4 00:0788 -  -  -  -  ;		Name : 		basic.asm
    5 00:0788 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0788 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0788 -  -  -  -  ;		Reviewed :	No
    8 00:0788 -  -  -  -  ;		Purpose :	Main program.
    9 00:0788 -  -  -  -  ;
   10 00:0788 -  -  -  -  ; ***************************************************************************************
   11 00:0788 -  -  -  -  ; ***************************************************************************************
   12 00:0788 -  -  -  -  
   13 00:0788 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		$400-($ & $3FF)
   14 00:0800 -  -  -  -  TestInstance:
   15 00:0800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:0800 -  -  -  -  ;
    2 00:0800 -  -  -  -  ;	This code automatically generated.
    3 00:0800 -  -  -  -  ;
    4 00:0800 -  -  -  -  TestProgram:
    5 00:0800 21 01 00 B1 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0E 02 00 
              02 8E 89 42 
              A0 00 8E 56 
              86 47 80 0B 
              03 00 B4 02 
              3F 01 3B 0D 
              00 80 00 -  	.db	$21,$01,$00,$b1,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0e,$02,$00,$02,$8e,$89,$42,$a0,$00,$8e,$56,$86,$47,$80,$0b,$03,$00,$b4,$02,$3f,$01,$3b,$0d,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:083B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:183B -  -  -  -  EndTestInstance:
   18 00:183B -  -  -  -  		
   19 00:183B -  -  -  -  ; ***************************************************************************************
   20 00:183B -  -  -  -  ;
   21 00:183B -  -  -  -  ;									Changes and Updates
   22 00:183B -  -  -  -  ;
   23 00:183B -  -  -  -  ; ***************************************************************************************
   24 00:183B -  -  -  -  ;
   25 00:183B -  -  -  -  ;		Date			Notes
   26 00:183B -  -  -  -  ;		==== 			=====
   27 00:183B -  -  -  -  ;
   28 00:183B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:183B -  -  -  -  FinalAddress:
